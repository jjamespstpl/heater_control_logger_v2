
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3dc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800c498  0800c498  0000d498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c974  0800c974  0000e1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c974  0800c974  0000e1e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c974  0800c974  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c974  0800c974  0000d974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c978  0800c978  0000d978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c97c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200001e4  0800cb60  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800cb60  0000e6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f33  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003203  00000000  00000000  0002713f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0002a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011df  00000000  00000000  0002b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc5  00000000  00000000  0002cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba8d  00000000  00000000  0004689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11df  00000000  00000000  00062329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006568  00000000  00000000  0010354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  00109ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800c47c 	.word	0x0800c47c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800c47c 	.word	0x0800c47c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fdaf 	bl	8001f98 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fcf3 	bl	8001e30 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fda1 	bl	8001f98 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fd97 	bl	8001f98 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd1d 	bl	8001eb8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd13 	bl	8001eb8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbab 	bl	8000c04 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb33 	bl	8000b24 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb9d 	bl	8000c04 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb93 	bl	8000c04 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb41 	bl	8000b74 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb37 	bl	8000b74 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	024b      	lsls	r3, r1, #9
 8000518:	0a5a      	lsrs	r2, r3, #9
 800051a:	4694      	mov	ip, r2
 800051c:	004a      	lsls	r2, r1, #1
 800051e:	0fc9      	lsrs	r1, r1, #31
 8000520:	46ce      	mov	lr, r9
 8000522:	4647      	mov	r7, r8
 8000524:	4689      	mov	r9, r1
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0246      	lsls	r6, r0, #9
 800052a:	0e2d      	lsrs	r5, r5, #24
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	b580      	push	{r7, lr}
 8000530:	0999      	lsrs	r1, r3, #6
 8000532:	0a77      	lsrs	r7, r6, #9
 8000534:	0fc4      	lsrs	r4, r0, #31
 8000536:	09b6      	lsrs	r6, r6, #6
 8000538:	1aab      	subs	r3, r5, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	d020      	beq.n	8000580 <__aeabi_fadd+0x6c>
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd0c      	ble.n	800055c <__aeabi_fadd+0x48>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d134      	bne.n	80005b0 <__aeabi_fadd+0x9c>
 8000546:	2900      	cmp	r1, #0
 8000548:	d02a      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	2b01      	cmp	r3, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x3e>
 8000550:	e08f      	b.n	8000672 <__aeabi_fadd+0x15e>
 8000552:	2bff      	cmp	r3, #255	@ 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x44>
 8000556:	e0cd      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000558:	0013      	movs	r3, r2
 800055a:	e02f      	b.n	80005bc <__aeabi_fadd+0xa8>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d060      	beq.n	8000622 <__aeabi_fadd+0x10e>
 8000560:	1b53      	subs	r3, r2, r5
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x54>
 8000566:	e0ee      	b.n	8000746 <__aeabi_fadd+0x232>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x5a>
 800056c:	e13e      	b.n	80007ec <__aeabi_fadd+0x2d8>
 800056e:	1e5c      	subs	r4, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e16b      	b.n	800084e <__aeabi_fadd+0x33a>
 8000576:	2bff      	cmp	r3, #255	@ 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x68>
 800057a:	e0b9      	b.n	80006f0 <__aeabi_fadd+0x1dc>
 800057c:	0023      	movs	r3, r4
 800057e:	e0e7      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000580:	2b00      	cmp	r3, #0
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fadd+0x72>
 8000584:	e0a4      	b.n	80006d0 <__aeabi_fadd+0x1bc>
 8000586:	2a00      	cmp	r2, #0
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x14a>
 800058a:	2dff      	cmp	r5, #255	@ 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e0b1      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	4311      	orrs	r1, r2
 8000596:	2b1b      	cmp	r3, #27
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x88>
 800059a:	e0e9      	b.n	8000770 <__aeabi_fadd+0x25c>
 800059c:	002b      	movs	r3, r5
 800059e:	3605      	adds	r6, #5
 80005a0:	08f7      	lsrs	r7, r6, #3
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x94>
 80005a6:	e0a5      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005a8:	027a      	lsls	r2, r7, #9
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e030      	b.n	8000612 <__aeabi_fadd+0xfe>
 80005b0:	2dff      	cmp	r5, #255	@ 0xff
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xa2>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	4311      	orrs	r1, r2
 80005bc:	2001      	movs	r0, #1
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dc08      	bgt.n	80005d4 <__aeabi_fadd+0xc0>
 80005c2:	0008      	movs	r0, r1
 80005c4:	2220      	movs	r2, #32
 80005c6:	40d8      	lsrs	r0, r3
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4099      	lsls	r1, r3
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	4193      	sbcs	r3, r2
 80005d2:	4318      	orrs	r0, r3
 80005d4:	1a36      	subs	r6, r6, r0
 80005d6:	0173      	lsls	r3, r6, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0xc8>
 80005da:	e071      	b.n	80006c0 <__aeabi_fadd+0x1ac>
 80005dc:	01b6      	lsls	r6, r6, #6
 80005de:	09b7      	lsrs	r7, r6, #6
 80005e0:	0038      	movs	r0, r7
 80005e2:	f002 fdb1 	bl	8003148 <__clzsi2>
 80005e6:	003b      	movs	r3, r7
 80005e8:	3805      	subs	r0, #5
 80005ea:	4083      	lsls	r3, r0
 80005ec:	4285      	cmp	r5, r0
 80005ee:	dd4d      	ble.n	800068c <__aeabi_fadd+0x178>
 80005f0:	4eb4      	ldr	r6, [pc, #720]	@ (80008c4 <__aeabi_fadd+0x3b0>)
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	401e      	ands	r6, r3
 80005f6:	075a      	lsls	r2, r3, #29
 80005f8:	d068      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80005fa:	220f      	movs	r2, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d064      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 8000602:	3604      	adds	r6, #4
 8000604:	0173      	lsls	r3, r6, #5
 8000606:	d561      	bpl.n	80006cc <__aeabi_fadd+0x1b8>
 8000608:	1c68      	adds	r0, r5, #1
 800060a:	2dfe      	cmp	r5, #254	@ 0xfe
 800060c:	d154      	bne.n	80006b8 <__aeabi_fadd+0x1a4>
 800060e:	20ff      	movs	r0, #255	@ 0xff
 8000610:	2200      	movs	r2, #0
 8000612:	05c0      	lsls	r0, r0, #23
 8000614:	4310      	orrs	r0, r2
 8000616:	07e4      	lsls	r4, r4, #31
 8000618:	4320      	orrs	r0, r4
 800061a:	bcc0      	pop	{r6, r7}
 800061c:	46b9      	mov	r9, r7
 800061e:	46b0      	mov	r8, r6
 8000620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000622:	22fe      	movs	r2, #254	@ 0xfe
 8000624:	4690      	mov	r8, r2
 8000626:	1c68      	adds	r0, r5, #1
 8000628:	0002      	movs	r2, r0
 800062a:	4640      	mov	r0, r8
 800062c:	4210      	tst	r0, r2
 800062e:	d16b      	bne.n	8000708 <__aeabi_fadd+0x1f4>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0dd      	b.n	80007f2 <__aeabi_fadd+0x2de>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x128>
 800063a:	e102      	b.n	8000842 <__aeabi_fadd+0x32e>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0b3      	beq.n	80005a8 <__aeabi_fadd+0x94>
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	1a77      	subs	r7, r6, r1
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4217      	tst	r7, r2
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x138>
 800064a:	e136      	b.n	80008ba <__aeabi_fadd+0x3a6>
 800064c:	464c      	mov	r4, r9
 800064e:	1b8e      	subs	r6, r1, r6
 8000650:	d061      	beq.n	8000716 <__aeabi_fadd+0x202>
 8000652:	2001      	movs	r0, #1
 8000654:	4216      	tst	r6, r2
 8000656:	d130      	bne.n	80006ba <__aeabi_fadd+0x1a6>
 8000658:	2300      	movs	r3, #0
 800065a:	08f7      	lsrs	r7, r6, #3
 800065c:	e7a4      	b.n	80005a8 <__aeabi_fadd+0x94>
 800065e:	2900      	cmp	r1, #0
 8000660:	d09e      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	2b01      	cmp	r3, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x156>
 8000668:	e0ca      	b.n	8000800 <__aeabi_fadd+0x2ec>
 800066a:	2bff      	cmp	r3, #255	@ 0xff
 800066c:	d042      	beq.n	80006f4 <__aeabi_fadd+0x1e0>
 800066e:	0013      	movs	r3, r2
 8000670:	e791      	b.n	8000596 <__aeabi_fadd+0x82>
 8000672:	1a71      	subs	r1, r6, r1
 8000674:	014b      	lsls	r3, r1, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x166>
 8000678:	e0d1      	b.n	800081e <__aeabi_fadd+0x30a>
 800067a:	018f      	lsls	r7, r1, #6
 800067c:	09bf      	lsrs	r7, r7, #6
 800067e:	0038      	movs	r0, r7
 8000680:	f002 fd62 	bl	8003148 <__clzsi2>
 8000684:	003b      	movs	r3, r7
 8000686:	3805      	subs	r0, #5
 8000688:	4083      	lsls	r3, r0
 800068a:	2501      	movs	r5, #1
 800068c:	2220      	movs	r2, #32
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	3001      	adds	r0, #1
 8000692:	1a12      	subs	r2, r2, r0
 8000694:	001e      	movs	r6, r3
 8000696:	4093      	lsls	r3, r2
 8000698:	40c6      	lsrs	r6, r0
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431e      	orrs	r6, r3
 80006a0:	d039      	beq.n	8000716 <__aeabi_fadd+0x202>
 80006a2:	0773      	lsls	r3, r6, #29
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x194>
 80006a6:	e11b      	b.n	80008e0 <__aeabi_fadd+0x3cc>
 80006a8:	230f      	movs	r3, #15
 80006aa:	2500      	movs	r5, #0
 80006ac:	4033      	ands	r3, r6
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d1a7      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006b2:	2001      	movs	r0, #1
 80006b4:	0172      	lsls	r2, r6, #5
 80006b6:	d57c      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80006b8:	b2c0      	uxtb	r0, r0
 80006ba:	01b2      	lsls	r2, r6, #6
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	e7a8      	b.n	8000612 <__aeabi_fadd+0xfe>
 80006c0:	0773      	lsls	r3, r6, #29
 80006c2:	d003      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4033      	ands	r3, r6
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d19a      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006cc:	002b      	movs	r3, r5
 80006ce:	e767      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <__aeabi_fadd+0x208>
 80006d4:	1b53      	subs	r3, r2, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d17b      	bne.n	80007d2 <__aeabi_fadd+0x2be>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x1cc>
 80006de:	e086      	b.n	80007ee <__aeabi_fadd+0x2da>
 80006e0:	1e5d      	subs	r5, r3, #1
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1d4>
 80006e6:	e08b      	b.n	8000800 <__aeabi_fadd+0x2ec>
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d002      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80006ec:	002b      	movs	r3, r5
 80006ee:	e075      	b.n	80007dc <__aeabi_fadd+0x2c8>
 80006f0:	464c      	mov	r4, r9
 80006f2:	4667      	mov	r7, ip
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x1e6>
 80006f8:	e789      	b.n	800060e <__aeabi_fadd+0xfa>
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	433a      	orrs	r2, r7
 8000700:	0252      	lsls	r2, r2, #9
 8000702:	20ff      	movs	r0, #255	@ 0xff
 8000704:	0a52      	lsrs	r2, r2, #9
 8000706:	e784      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000708:	1a77      	subs	r7, r6, r1
 800070a:	017b      	lsls	r3, r7, #5
 800070c:	d46b      	bmi.n	80007e6 <__aeabi_fadd+0x2d2>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x200>
 8000712:	e765      	b.n	80005e0 <__aeabi_fadd+0xcc>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	e77a      	b.n	8000612 <__aeabi_fadd+0xfe>
 800071c:	22fe      	movs	r2, #254	@ 0xfe
 800071e:	1c6b      	adds	r3, r5, #1
 8000720:	421a      	tst	r2, r3
 8000722:	d149      	bne.n	80007b8 <__aeabi_fadd+0x2a4>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x216>
 8000728:	e09f      	b.n	800086a <__aeabi_fadd+0x356>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x21c>
 800072e:	e0ba      	b.n	80008a6 <__aeabi_fadd+0x392>
 8000730:	2900      	cmp	r1, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x222>
 8000734:	e0cf      	b.n	80008d6 <__aeabi_fadd+0x3c2>
 8000736:	1872      	adds	r2, r6, r1
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x22a>
 800073c:	e0cd      	b.n	80008da <__aeabi_fadd+0x3c6>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	2001      	movs	r0, #1
 8000742:	0a52      	lsrs	r2, r2, #9
 8000744:	e765      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000746:	2aff      	cmp	r2, #255	@ 0xff
 8000748:	d0d2      	beq.n	80006f0 <__aeabi_fadd+0x1dc>
 800074a:	2080      	movs	r0, #128	@ 0x80
 800074c:	04c0      	lsls	r0, r0, #19
 800074e:	4306      	orrs	r6, r0
 8000750:	2001      	movs	r0, #1
 8000752:	2b1b      	cmp	r3, #27
 8000754:	dc08      	bgt.n	8000768 <__aeabi_fadd+0x254>
 8000756:	0030      	movs	r0, r6
 8000758:	2420      	movs	r4, #32
 800075a:	40d8      	lsrs	r0, r3
 800075c:	1ae3      	subs	r3, r4, r3
 800075e:	409e      	lsls	r6, r3
 8000760:	0033      	movs	r3, r6
 8000762:	1e5c      	subs	r4, r3, #1
 8000764:	41a3      	sbcs	r3, r4
 8000766:	4318      	orrs	r0, r3
 8000768:	464c      	mov	r4, r9
 800076a:	0015      	movs	r5, r2
 800076c:	1a0e      	subs	r6, r1, r0
 800076e:	e732      	b.n	80005d6 <__aeabi_fadd+0xc2>
 8000770:	0008      	movs	r0, r1
 8000772:	2220      	movs	r2, #32
 8000774:	40d8      	lsrs	r0, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	4099      	lsls	r1, r3
 800077a:	000b      	movs	r3, r1
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	4193      	sbcs	r3, r2
 8000780:	4303      	orrs	r3, r0
 8000782:	18f6      	adds	r6, r6, r3
 8000784:	0173      	lsls	r3, r6, #5
 8000786:	d59b      	bpl.n	80006c0 <__aeabi_fadd+0x1ac>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x27c>
 800078e:	e73e      	b.n	800060e <__aeabi_fadd+0xfa>
 8000790:	2301      	movs	r3, #1
 8000792:	494d      	ldr	r1, [pc, #308]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000794:	0872      	lsrs	r2, r6, #1
 8000796:	4033      	ands	r3, r6
 8000798:	400a      	ands	r2, r1
 800079a:	431a      	orrs	r2, r3
 800079c:	0016      	movs	r6, r2
 800079e:	0753      	lsls	r3, r2, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e72a      	b.n	8000602 <__aeabi_fadd+0xee>
 80007ac:	0173      	lsls	r3, r6, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80007b0:	e72a      	b.n	8000608 <__aeabi_fadd+0xf4>
 80007b2:	002b      	movs	r3, r5
 80007b4:	08f7      	lsrs	r7, r6, #3
 80007b6:	e6f7      	b.n	80005a8 <__aeabi_fadd+0x94>
 80007b8:	2bff      	cmp	r3, #255	@ 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x2aa>
 80007bc:	e727      	b.n	800060e <__aeabi_fadd+0xfa>
 80007be:	1871      	adds	r1, r6, r1
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	074a      	lsls	r2, r1, #29
 80007c4:	d02f      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007c6:	220f      	movs	r2, #15
 80007c8:	400a      	ands	r2, r1
 80007ca:	2a04      	cmp	r2, #4
 80007cc:	d02b      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007ce:	1d0e      	adds	r6, r1, #4
 80007d0:	e6e6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d08d      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	04c0      	lsls	r0, r0, #19
 80007da:	4306      	orrs	r6, r0
 80007dc:	2b1b      	cmp	r3, #27
 80007de:	dd24      	ble.n	800082a <__aeabi_fadd+0x316>
 80007e0:	0013      	movs	r3, r2
 80007e2:	1d4e      	adds	r6, r1, #5
 80007e4:	e6dc      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007e6:	464c      	mov	r4, r9
 80007e8:	1b8f      	subs	r7, r1, r6
 80007ea:	e6f9      	b.n	80005e0 <__aeabi_fadd+0xcc>
 80007ec:	464c      	mov	r4, r9
 80007ee:	000e      	movs	r6, r1
 80007f0:	e6d6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d149      	bne.n	800088a <__aeabi_fadd+0x376>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d068      	beq.n	80008cc <__aeabi_fadd+0x3b8>
 80007fa:	4667      	mov	r7, ip
 80007fc:	464c      	mov	r4, r9
 80007fe:	e77c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000800:	1870      	adds	r0, r6, r1
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d574      	bpl.n	80008f0 <__aeabi_fadd+0x3dc>
 8000806:	4930      	ldr	r1, [pc, #192]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000808:	0840      	lsrs	r0, r0, #1
 800080a:	4001      	ands	r1, r0
 800080c:	0743      	lsls	r3, r0, #29
 800080e:	d009      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000810:	230f      	movs	r3, #15
 8000812:	4003      	ands	r3, r0
 8000814:	2b04      	cmp	r3, #4
 8000816:	d005      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000818:	2302      	movs	r3, #2
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	e6c0      	b.n	80005a0 <__aeabi_fadd+0x8c>
 800081e:	2301      	movs	r3, #1
 8000820:	08cf      	lsrs	r7, r1, #3
 8000822:	e6c1      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000824:	2302      	movs	r3, #2
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e6be      	b.n	80005a8 <__aeabi_fadd+0x94>
 800082a:	2520      	movs	r5, #32
 800082c:	0030      	movs	r0, r6
 800082e:	40d8      	lsrs	r0, r3
 8000830:	1aeb      	subs	r3, r5, r3
 8000832:	409e      	lsls	r6, r3
 8000834:	0033      	movs	r3, r6
 8000836:	1e5d      	subs	r5, r3, #1
 8000838:	41ab      	sbcs	r3, r5
 800083a:	4303      	orrs	r3, r0
 800083c:	0015      	movs	r5, r2
 800083e:	185e      	adds	r6, r3, r1
 8000840:	e7a0      	b.n	8000784 <__aeabi_fadd+0x270>
 8000842:	2900      	cmp	r1, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x334>
 8000846:	e765      	b.n	8000714 <__aeabi_fadd+0x200>
 8000848:	464c      	mov	r4, r9
 800084a:	4667      	mov	r7, ip
 800084c:	e6ac      	b.n	80005a8 <__aeabi_fadd+0x94>
 800084e:	1b8f      	subs	r7, r1, r6
 8000850:	017b      	lsls	r3, r7, #5
 8000852:	d52e      	bpl.n	80008b2 <__aeabi_fadd+0x39e>
 8000854:	01bf      	lsls	r7, r7, #6
 8000856:	09bf      	lsrs	r7, r7, #6
 8000858:	0038      	movs	r0, r7
 800085a:	f002 fc75 	bl	8003148 <__clzsi2>
 800085e:	003b      	movs	r3, r7
 8000860:	3805      	subs	r0, #5
 8000862:	4083      	lsls	r3, r0
 8000864:	464c      	mov	r4, r9
 8000866:	3501      	adds	r5, #1
 8000868:	e710      	b.n	800068c <__aeabi_fadd+0x178>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x35c>
 800086e:	e740      	b.n	80006f2 <__aeabi_fadd+0x1de>
 8000870:	2900      	cmp	r1, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x362>
 8000874:	e741      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	429f      	cmp	r7, r3
 800087c:	d200      	bcs.n	8000880 <__aeabi_fadd+0x36c>
 800087e:	e73c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000880:	459c      	cmp	ip, r3
 8000882:	d300      	bcc.n	8000886 <__aeabi_fadd+0x372>
 8000884:	e739      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000886:	4667      	mov	r7, ip
 8000888:	e737      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800088a:	2900      	cmp	r1, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x37c>
 800088e:	e734      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	429f      	cmp	r7, r3
 8000896:	d200      	bcs.n	800089a <__aeabi_fadd+0x386>
 8000898:	e72f      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800089a:	459c      	cmp	ip, r3
 800089c:	d300      	bcc.n	80008a0 <__aeabi_fadd+0x38c>
 800089e:	e72c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a0:	464c      	mov	r4, r9
 80008a2:	4667      	mov	r7, ip
 80008a4:	e729      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x398>
 80008aa:	e734      	b.n	8000716 <__aeabi_fadd+0x202>
 80008ac:	2300      	movs	r3, #0
 80008ae:	08cf      	lsrs	r7, r1, #3
 80008b0:	e67a      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008b2:	464c      	mov	r4, r9
 80008b4:	2301      	movs	r3, #1
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	e676      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x3ac>
 80008be:	e729      	b.n	8000714 <__aeabi_fadd+0x200>
 80008c0:	08ff      	lsrs	r7, r7, #3
 80008c2:	e671      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008c4:	fbffffff 	.word	0xfbffffff
 80008c8:	7dffffff 	.word	0x7dffffff
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2400      	movs	r4, #0
 80008d0:	20ff      	movs	r0, #255	@ 0xff
 80008d2:	03d2      	lsls	r2, r2, #15
 80008d4:	e69d      	b.n	8000612 <__aeabi_fadd+0xfe>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e666      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008da:	2300      	movs	r3, #0
 80008dc:	08d7      	lsrs	r7, r2, #3
 80008de:	e663      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008e0:	2001      	movs	r0, #1
 80008e2:	0172      	lsls	r2, r6, #5
 80008e4:	d500      	bpl.n	80008e8 <__aeabi_fadd+0x3d4>
 80008e6:	e6e7      	b.n	80006b8 <__aeabi_fadd+0x1a4>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2300      	movs	r3, #0
 80008ec:	08cf      	lsrs	r7, r1, #3
 80008ee:	e65b      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f0:	2301      	movs	r3, #1
 80008f2:	08c7      	lsrs	r7, r0, #3
 80008f4:	e658      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f6:	46c0      	nop			@ (mov r8, r8)

080008f8 <__aeabi_fdiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	4646      	mov	r6, r8
 80008fc:	464f      	mov	r7, r9
 80008fe:	46d6      	mov	lr, sl
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0047      	lsls	r7, r0, #1
 8000908:	4698      	mov	r8, r3
 800090a:	1c0e      	adds	r6, r1, #0
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e3f      	lsrs	r7, r7, #24
 8000910:	d05b      	beq.n	80009ca <__aeabi_fdiv+0xd2>
 8000912:	2fff      	cmp	r7, #255	@ 0xff
 8000914:	d021      	beq.n	800095a <__aeabi_fdiv+0x62>
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	00ed      	lsls	r5, r5, #3
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	431d      	orrs	r5, r3
 800091e:	2300      	movs	r3, #0
 8000920:	4699      	mov	r9, r3
 8000922:	469a      	mov	sl, r3
 8000924:	3f7f      	subs	r7, #127	@ 0x7f
 8000926:	0274      	lsls	r4, r6, #9
 8000928:	0073      	lsls	r3, r6, #1
 800092a:	0a64      	lsrs	r4, r4, #9
 800092c:	0e1b      	lsrs	r3, r3, #24
 800092e:	0ff6      	lsrs	r6, r6, #31
 8000930:	2b00      	cmp	r3, #0
 8000932:	d020      	beq.n	8000976 <__aeabi_fdiv+0x7e>
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d043      	beq.n	80009c0 <__aeabi_fdiv+0xc8>
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	2000      	movs	r0, #0
 800093c:	00e4      	lsls	r4, r4, #3
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4314      	orrs	r4, r2
 8000942:	3b7f      	subs	r3, #127	@ 0x7f
 8000944:	4642      	mov	r2, r8
 8000946:	1aff      	subs	r7, r7, r3
 8000948:	464b      	mov	r3, r9
 800094a:	4072      	eors	r2, r6
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d900      	bls.n	8000952 <__aeabi_fdiv+0x5a>
 8000950:	e09d      	b.n	8000a8e <__aeabi_fdiv+0x196>
 8000952:	4971      	ldr	r1, [pc, #452]	@ (8000b18 <__aeabi_fdiv+0x220>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	58cb      	ldr	r3, [r1, r3]
 8000958:	469f      	mov	pc, r3
 800095a:	2d00      	cmp	r5, #0
 800095c:	d15a      	bne.n	8000a14 <__aeabi_fdiv+0x11c>
 800095e:	2308      	movs	r3, #8
 8000960:	4699      	mov	r9, r3
 8000962:	3b06      	subs	r3, #6
 8000964:	0274      	lsls	r4, r6, #9
 8000966:	469a      	mov	sl, r3
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	27ff      	movs	r7, #255	@ 0xff
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	0ff6      	lsrs	r6, r6, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1de      	bne.n	8000934 <__aeabi_fdiv+0x3c>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d13b      	bne.n	80009f2 <__aeabi_fdiv+0xfa>
 800097a:	2301      	movs	r3, #1
 800097c:	4642      	mov	r2, r8
 800097e:	4649      	mov	r1, r9
 8000980:	4072      	eors	r2, r6
 8000982:	4319      	orrs	r1, r3
 8000984:	290e      	cmp	r1, #14
 8000986:	d818      	bhi.n	80009ba <__aeabi_fdiv+0xc2>
 8000988:	4864      	ldr	r0, [pc, #400]	@ (8000b1c <__aeabi_fdiv+0x224>)
 800098a:	0089      	lsls	r1, r1, #2
 800098c:	5841      	ldr	r1, [r0, r1]
 800098e:	468f      	mov	pc, r1
 8000990:	4653      	mov	r3, sl
 8000992:	2b02      	cmp	r3, #2
 8000994:	d100      	bne.n	8000998 <__aeabi_fdiv+0xa0>
 8000996:	e0b8      	b.n	8000b0a <__aeabi_fdiv+0x212>
 8000998:	2b03      	cmp	r3, #3
 800099a:	d06e      	beq.n	8000a7a <__aeabi_fdiv+0x182>
 800099c:	4642      	mov	r2, r8
 800099e:	002c      	movs	r4, r5
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d140      	bne.n	8000a26 <__aeabi_fdiv+0x12e>
 80009a4:	2000      	movs	r0, #0
 80009a6:	2400      	movs	r4, #0
 80009a8:	05c0      	lsls	r0, r0, #23
 80009aa:	4320      	orrs	r0, r4
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4310      	orrs	r0, r2
 80009b0:	bce0      	pop	{r5, r6, r7}
 80009b2:	46ba      	mov	sl, r7
 80009b4:	46b1      	mov	r9, r6
 80009b6:	46a8      	mov	r8, r5
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2400      	movs	r4, #0
 80009be:	e7f3      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	d120      	bne.n	8000a06 <__aeabi_fdiv+0x10e>
 80009c4:	2302      	movs	r3, #2
 80009c6:	3fff      	subs	r7, #255	@ 0xff
 80009c8:	e7d8      	b.n	800097c <__aeabi_fdiv+0x84>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d105      	bne.n	80009da <__aeabi_fdiv+0xe2>
 80009ce:	2304      	movs	r3, #4
 80009d0:	4699      	mov	r9, r3
 80009d2:	3b03      	subs	r3, #3
 80009d4:	2700      	movs	r7, #0
 80009d6:	469a      	mov	sl, r3
 80009d8:	e7a5      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009da:	0028      	movs	r0, r5
 80009dc:	f002 fbb4 	bl	8003148 <__clzsi2>
 80009e0:	2776      	movs	r7, #118	@ 0x76
 80009e2:	1f43      	subs	r3, r0, #5
 80009e4:	409d      	lsls	r5, r3
 80009e6:	2300      	movs	r3, #0
 80009e8:	427f      	negs	r7, r7
 80009ea:	4699      	mov	r9, r3
 80009ec:	469a      	mov	sl, r3
 80009ee:	1a3f      	subs	r7, r7, r0
 80009f0:	e799      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009f2:	0020      	movs	r0, r4
 80009f4:	f002 fba8 	bl	8003148 <__clzsi2>
 80009f8:	1f43      	subs	r3, r0, #5
 80009fa:	409c      	lsls	r4, r3
 80009fc:	2376      	movs	r3, #118	@ 0x76
 80009fe:	425b      	negs	r3, r3
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	2000      	movs	r0, #0
 8000a04:	e79e      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	464a      	mov	r2, r9
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	4691      	mov	r9, r2
 8000a0e:	2003      	movs	r0, #3
 8000a10:	33fc      	adds	r3, #252	@ 0xfc
 8000a12:	e797      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a14:	230c      	movs	r3, #12
 8000a16:	4699      	mov	r9, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	27ff      	movs	r7, #255	@ 0xff
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	e782      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a20:	2803      	cmp	r0, #3
 8000a22:	d02c      	beq.n	8000a7e <__aeabi_fdiv+0x186>
 8000a24:	0032      	movs	r2, r6
 8000a26:	0038      	movs	r0, r7
 8000a28:	307f      	adds	r0, #127	@ 0x7f
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	dd47      	ble.n	8000abe <__aeabi_fdiv+0x1c6>
 8000a2e:	0763      	lsls	r3, r4, #29
 8000a30:	d004      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a32:	230f      	movs	r3, #15
 8000a34:	4023      	ands	r3, r4
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a3a:	3404      	adds	r4, #4
 8000a3c:	0123      	lsls	r3, r4, #4
 8000a3e:	d503      	bpl.n	8000a48 <__aeabi_fdiv+0x150>
 8000a40:	0038      	movs	r0, r7
 8000a42:	4b37      	ldr	r3, [pc, #220]	@ (8000b20 <__aeabi_fdiv+0x228>)
 8000a44:	3080      	adds	r0, #128	@ 0x80
 8000a46:	401c      	ands	r4, r3
 8000a48:	28fe      	cmp	r0, #254	@ 0xfe
 8000a4a:	dcb6      	bgt.n	80009ba <__aeabi_fdiv+0xc2>
 8000a4c:	01a4      	lsls	r4, r4, #6
 8000a4e:	0a64      	lsrs	r4, r4, #9
 8000a50:	b2c0      	uxtb	r0, r0
 8000a52:	e7a9      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a54:	2480      	movs	r4, #128	@ 0x80
 8000a56:	2200      	movs	r2, #0
 8000a58:	20ff      	movs	r0, #255	@ 0xff
 8000a5a:	03e4      	lsls	r4, r4, #15
 8000a5c:	e7a4      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	421d      	tst	r5, r3
 8000a64:	d001      	beq.n	8000a6a <__aeabi_fdiv+0x172>
 8000a66:	421c      	tst	r4, r3
 8000a68:	d00b      	beq.n	8000a82 <__aeabi_fdiv+0x18a>
 8000a6a:	2480      	movs	r4, #128	@ 0x80
 8000a6c:	03e4      	lsls	r4, r4, #15
 8000a6e:	432c      	orrs	r4, r5
 8000a70:	0264      	lsls	r4, r4, #9
 8000a72:	4642      	mov	r2, r8
 8000a74:	20ff      	movs	r0, #255	@ 0xff
 8000a76:	0a64      	lsrs	r4, r4, #9
 8000a78:	e796      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a7a:	4646      	mov	r6, r8
 8000a7c:	002c      	movs	r4, r5
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	03db      	lsls	r3, r3, #15
 8000a82:	431c      	orrs	r4, r3
 8000a84:	0264      	lsls	r4, r4, #9
 8000a86:	0032      	movs	r2, r6
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	0a64      	lsrs	r4, r4, #9
 8000a8c:	e78c      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a8e:	016d      	lsls	r5, r5, #5
 8000a90:	0160      	lsls	r0, r4, #5
 8000a92:	4285      	cmp	r5, r0
 8000a94:	d22d      	bcs.n	8000af2 <__aeabi_fdiv+0x1fa>
 8000a96:	231b      	movs	r3, #27
 8000a98:	2400      	movs	r4, #0
 8000a9a:	3f01      	subs	r7, #1
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	0029      	movs	r1, r5
 8000aa0:	0064      	lsls	r4, r4, #1
 8000aa2:	006d      	lsls	r5, r5, #1
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	db01      	blt.n	8000aac <__aeabi_fdiv+0x1b4>
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	d301      	bcc.n	8000ab0 <__aeabi_fdiv+0x1b8>
 8000aac:	1a2d      	subs	r5, r5, r0
 8000aae:	4334      	orrs	r4, r6
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f3      	bne.n	8000a9e <__aeabi_fdiv+0x1a6>
 8000ab6:	1e6b      	subs	r3, r5, #1
 8000ab8:	419d      	sbcs	r5, r3
 8000aba:	432c      	orrs	r4, r5
 8000abc:	e7b3      	b.n	8000a26 <__aeabi_fdiv+0x12e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	1a1b      	subs	r3, r3, r0
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_fdiv+0x1d0>
 8000ac6:	e76d      	b.n	80009a4 <__aeabi_fdiv+0xac>
 8000ac8:	0021      	movs	r1, r4
 8000aca:	379e      	adds	r7, #158	@ 0x9e
 8000acc:	40d9      	lsrs	r1, r3
 8000ace:	40bc      	lsls	r4, r7
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	1e61      	subs	r1, r4, #1
 8000ad4:	418c      	sbcs	r4, r1
 8000ad6:	4323      	orrs	r3, r4
 8000ad8:	0759      	lsls	r1, r3, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000adc:	210f      	movs	r1, #15
 8000ade:	4019      	ands	r1, r3
 8000ae0:	2904      	cmp	r1, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	0159      	lsls	r1, r3, #5
 8000ae8:	d413      	bmi.n	8000b12 <__aeabi_fdiv+0x21a>
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a5c      	lsrs	r4, r3, #9
 8000af0:	e75a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000af2:	231a      	movs	r3, #26
 8000af4:	2401      	movs	r4, #1
 8000af6:	1a2d      	subs	r5, r5, r0
 8000af8:	e7d0      	b.n	8000a9c <__aeabi_fdiv+0x1a4>
 8000afa:	1e98      	subs	r0, r3, #2
 8000afc:	4243      	negs	r3, r0
 8000afe:	4158      	adcs	r0, r3
 8000b00:	4240      	negs	r0, r0
 8000b02:	0032      	movs	r2, r6
 8000b04:	2400      	movs	r4, #0
 8000b06:	b2c0      	uxtb	r0, r0
 8000b08:	e74e      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	2400      	movs	r4, #0
 8000b10:	e74a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b12:	2001      	movs	r0, #1
 8000b14:	2400      	movs	r4, #0
 8000b16:	e747      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b18:	0800c4b8 	.word	0x0800c4b8
 8000b1c:	0800c4f8 	.word	0x0800c4f8
 8000b20:	f7ffffff 	.word	0xf7ffffff

08000b24 <__eqsf2>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	0042      	lsls	r2, r0, #1
 8000b28:	024e      	lsls	r6, r1, #9
 8000b2a:	004c      	lsls	r4, r1, #1
 8000b2c:	0245      	lsls	r5, r0, #9
 8000b2e:	0a6d      	lsrs	r5, r5, #9
 8000b30:	0e12      	lsrs	r2, r2, #24
 8000b32:	0fc3      	lsrs	r3, r0, #31
 8000b34:	0a76      	lsrs	r6, r6, #9
 8000b36:	0e24      	lsrs	r4, r4, #24
 8000b38:	0fc9      	lsrs	r1, r1, #31
 8000b3a:	2aff      	cmp	r2, #255	@ 0xff
 8000b3c:	d010      	beq.n	8000b60 <__eqsf2+0x3c>
 8000b3e:	2cff      	cmp	r4, #255	@ 0xff
 8000b40:	d00c      	beq.n	8000b5c <__eqsf2+0x38>
 8000b42:	2001      	movs	r0, #1
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	d10a      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d108      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d00f      	beq.n	8000b70 <__eqsf2+0x4c>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d104      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b54:	0028      	movs	r0, r5
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	e000      	b.n	8000b5e <__eqsf2+0x3a>
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	2001      	movs	r0, #1
 8000b62:	2cff      	cmp	r4, #255	@ 0xff
 8000b64:	d1fb      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b66:	4335      	orrs	r5, r6
 8000b68:	d1f9      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b6a:	404b      	eors	r3, r1
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	e7f6      	b.n	8000b5e <__eqsf2+0x3a>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7f4      	b.n	8000b5e <__eqsf2+0x3a>

08000b74 <__gesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d018      	beq.n	8000bc0 <__gesf2+0x4c>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00a      	beq.n	8000ba8 <__gesf2+0x34>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__gesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10a      	bne.n	8000bb0 <__gesf2+0x3c>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d029      	beq.n	8000bf2 <__gesf2+0x7e>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d12d      	bne.n	8000bfe <__gesf2+0x8a>
 8000ba2:	0048      	lsls	r0, r1, #1
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	bd30      	pop	{r4, r5, pc}
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d125      	bne.n	8000bf8 <__gesf2+0x84>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d101      	bne.n	8000bb4 <__gesf2+0x40>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d0f6      	beq.n	8000ba2 <__gesf2+0x2e>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d019      	beq.n	8000bec <__gesf2+0x78>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	4318      	orrs	r0, r3
 8000bbe:	e7f2      	b.n	8000ba6 <__gesf2+0x32>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d119      	bne.n	8000bf8 <__gesf2+0x84>
 8000bc4:	28ff      	cmp	r0, #255	@ 0xff
 8000bc6:	d1f7      	bne.n	8000bb8 <__gesf2+0x44>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d115      	bne.n	8000bf8 <__gesf2+0x84>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d1f2      	bne.n	8000bb8 <__gesf2+0x44>
 8000bd2:	e7e8      	b.n	8000ba6 <__gesf2+0x32>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0ef      	beq.n	8000bb8 <__gesf2+0x44>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1ed      	bne.n	8000bb8 <__gesf2+0x44>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dceb      	bgt.n	8000bb8 <__gesf2+0x44>
 8000be0:	db04      	blt.n	8000bec <__gesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8e8      	bhi.n	8000bb8 <__gesf2+0x44>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2dc      	bcs.n	8000ba6 <__gesf2+0x32>
 8000bec:	0058      	lsls	r0, r3, #1
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7d9      	b.n	8000ba6 <__gesf2+0x32>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d0d7      	beq.n	8000ba6 <__gesf2+0x32>
 8000bf6:	e7df      	b.n	8000bb8 <__gesf2+0x44>
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	e7d3      	b.n	8000ba6 <__gesf2+0x32>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d1da      	bne.n	8000bb8 <__gesf2+0x44>
 8000c02:	e7ee      	b.n	8000be2 <__gesf2+0x6e>

08000c04 <__lesf2>:
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	0042      	lsls	r2, r0, #1
 8000c08:	0244      	lsls	r4, r0, #9
 8000c0a:	024d      	lsls	r5, r1, #9
 8000c0c:	0fc3      	lsrs	r3, r0, #31
 8000c0e:	0048      	lsls	r0, r1, #1
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0e12      	lsrs	r2, r2, #24
 8000c14:	0a6d      	lsrs	r5, r5, #9
 8000c16:	0e00      	lsrs	r0, r0, #24
 8000c18:	0fc9      	lsrs	r1, r1, #31
 8000c1a:	2aff      	cmp	r2, #255	@ 0xff
 8000c1c:	d017      	beq.n	8000c4e <__lesf2+0x4a>
 8000c1e:	28ff      	cmp	r0, #255	@ 0xff
 8000c20:	d00a      	beq.n	8000c38 <__lesf2+0x34>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d11b      	bne.n	8000c5e <__lesf2+0x5a>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d10a      	bne.n	8000c40 <__lesf2+0x3c>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d01d      	beq.n	8000c6a <__lesf2+0x66>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d12d      	bne.n	8000c8e <__lesf2+0x8a>
 8000c32:	0048      	lsls	r0, r1, #1
 8000c34:	3801      	subs	r0, #1
 8000c36:	e011      	b.n	8000c5c <__lesf2+0x58>
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d10e      	bne.n	8000c5a <__lesf2+0x56>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d101      	bne.n	8000c44 <__lesf2+0x40>
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d0f6      	beq.n	8000c32 <__lesf2+0x2e>
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d10c      	bne.n	8000c62 <__lesf2+0x5e>
 8000c48:	0058      	lsls	r0, r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e006      	b.n	8000c5c <__lesf2+0x58>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d103      	bne.n	8000c5a <__lesf2+0x56>
 8000c52:	28ff      	cmp	r0, #255	@ 0xff
 8000c54:	d105      	bne.n	8000c62 <__lesf2+0x5e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d015      	beq.n	8000c86 <__lesf2+0x82>
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	bd30      	pop	{r4, r5, pc}
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d106      	bne.n	8000c70 <__lesf2+0x6c>
 8000c62:	2001      	movs	r0, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	4318      	orrs	r0, r3
 8000c68:	e7f8      	b.n	8000c5c <__lesf2+0x58>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d0f6      	beq.n	8000c5c <__lesf2+0x58>
 8000c6e:	e7f8      	b.n	8000c62 <__lesf2+0x5e>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d1f6      	bne.n	8000c62 <__lesf2+0x5e>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	dcf4      	bgt.n	8000c62 <__lesf2+0x5e>
 8000c78:	dbe6      	blt.n	8000c48 <__lesf2+0x44>
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	d8f1      	bhi.n	8000c62 <__lesf2+0x5e>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	42ac      	cmp	r4, r5
 8000c82:	d2eb      	bcs.n	8000c5c <__lesf2+0x58>
 8000c84:	e7e0      	b.n	8000c48 <__lesf2+0x44>
 8000c86:	2000      	movs	r0, #0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d1ea      	bne.n	8000c62 <__lesf2+0x5e>
 8000c8c:	e7e6      	b.n	8000c5c <__lesf2+0x58>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d1e7      	bne.n	8000c62 <__lesf2+0x5e>
 8000c92:	e7f2      	b.n	8000c7a <__lesf2+0x76>

08000c94 <__aeabi_fmul>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	464f      	mov	r7, r9
 8000c98:	4646      	mov	r6, r8
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	0044      	lsls	r4, r0, #1
 8000c9e:	b5c0      	push	{r6, r7, lr}
 8000ca0:	0246      	lsls	r6, r0, #9
 8000ca2:	1c0f      	adds	r7, r1, #0
 8000ca4:	0a76      	lsrs	r6, r6, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc5      	lsrs	r5, r0, #31
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x1c>
 8000cae:	e0da      	b.n	8000e66 <__aeabi_fmul+0x1d2>
 8000cb0:	2cff      	cmp	r4, #255	@ 0xff
 8000cb2:	d074      	beq.n	8000d9e <__aeabi_fmul+0x10a>
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	00f6      	lsls	r6, r6, #3
 8000cb8:	04db      	lsls	r3, r3, #19
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	3c7f      	subs	r4, #127	@ 0x7f
 8000cc4:	027b      	lsls	r3, r7, #9
 8000cc6:	0a5b      	lsrs	r3, r3, #9
 8000cc8:	4698      	mov	r8, r3
 8000cca:	007b      	lsls	r3, r7, #1
 8000ccc:	0e1b      	lsrs	r3, r3, #24
 8000cce:	0fff      	lsrs	r7, r7, #31
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d074      	beq.n	8000dbe <__aeabi_fmul+0x12a>
 8000cd4:	2bff      	cmp	r3, #255	@ 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fmul+0x46>
 8000cd8:	e08e      	b.n	8000df8 <__aeabi_fmul+0x164>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	04c9      	lsls	r1, r1, #19
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ce6:	002a      	movs	r2, r5
 8000ce8:	18e4      	adds	r4, r4, r3
 8000cea:	464b      	mov	r3, r9
 8000cec:	407a      	eors	r2, r7
 8000cee:	4688      	mov	r8, r1
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	dc75      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd0f      	ble.n	8000d1e <__aeabi_fmul+0x8a>
 8000cfe:	4649      	mov	r1, r9
 8000d00:	2301      	movs	r3, #1
 8000d02:	408b      	lsls	r3, r1
 8000d04:	21a6      	movs	r1, #166	@ 0xa6
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	420b      	tst	r3, r1
 8000d0a:	d169      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000d0c:	2190      	movs	r1, #144	@ 0x90
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	420b      	tst	r3, r1
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x82>
 8000d14:	e100      	b.n	8000f18 <__aeabi_fmul+0x284>
 8000d16:	2188      	movs	r1, #136	@ 0x88
 8000d18:	4219      	tst	r1, r3
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fmul+0x8a>
 8000d1c:	e0f5      	b.n	8000f0a <__aeabi_fmul+0x276>
 8000d1e:	4641      	mov	r1, r8
 8000d20:	0409      	lsls	r1, r1, #16
 8000d22:	0c09      	lsrs	r1, r1, #16
 8000d24:	4643      	mov	r3, r8
 8000d26:	0008      	movs	r0, r1
 8000d28:	0c35      	lsrs	r5, r6, #16
 8000d2a:	0436      	lsls	r6, r6, #16
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0c36      	lsrs	r6, r6, #16
 8000d30:	4370      	muls	r0, r6
 8000d32:	4369      	muls	r1, r5
 8000d34:	435e      	muls	r6, r3
 8000d36:	435d      	muls	r5, r3
 8000d38:	1876      	adds	r6, r6, r1
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	199b      	adds	r3, r3, r6
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d903      	bls.n	8000d4a <__aeabi_fmul+0xb6>
 8000d42:	2180      	movs	r1, #128	@ 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	468c      	mov	ip, r1
 8000d48:	4465      	add	r5, ip
 8000d4a:	0400      	lsls	r0, r0, #16
 8000d4c:	0419      	lsls	r1, r3, #16
 8000d4e:	0c00      	lsrs	r0, r0, #16
 8000d50:	1809      	adds	r1, r1, r0
 8000d52:	018e      	lsls	r6, r1, #6
 8000d54:	1e70      	subs	r0, r6, #1
 8000d56:	4186      	sbcs	r6, r0
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	0e89      	lsrs	r1, r1, #26
 8000d5c:	195b      	adds	r3, r3, r5
 8000d5e:	430e      	orrs	r6, r1
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	431e      	orrs	r6, r3
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	d46c      	bmi.n	8000e42 <__aeabi_fmul+0x1ae>
 8000d68:	0023      	movs	r3, r4
 8000d6a:	337f      	adds	r3, #127	@ 0x7f
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_fmul+0xde>
 8000d70:	e0b1      	b.n	8000ed6 <__aeabi_fmul+0x242>
 8000d72:	0015      	movs	r5, r2
 8000d74:	0771      	lsls	r1, r6, #29
 8000d76:	d00b      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d78:	200f      	movs	r0, #15
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	4030      	ands	r0, r6
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d006      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d82:	3604      	adds	r6, #4
 8000d84:	0132      	lsls	r2, r6, #4
 8000d86:	d503      	bpl.n	8000d90 <__aeabi_fmul+0xfc>
 8000d88:	4b6e      	ldr	r3, [pc, #440]	@ (8000f44 <__aeabi_fmul+0x2b0>)
 8000d8a:	401e      	ands	r6, r3
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	3380      	adds	r3, #128	@ 0x80
 8000d90:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_fmul+0x102>
 8000d94:	e0bd      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000d96:	01b2      	lsls	r2, r6, #6
 8000d98:	0a52      	lsrs	r2, r2, #9
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	e048      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fmul+0x110>
 8000da2:	e092      	b.n	8000eca <__aeabi_fmul+0x236>
 8000da4:	2308      	movs	r3, #8
 8000da6:	4699      	mov	r9, r3
 8000da8:	3b06      	subs	r3, #6
 8000daa:	469a      	mov	sl, r3
 8000dac:	027b      	lsls	r3, r7, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	4698      	mov	r8, r3
 8000db2:	007b      	lsls	r3, r7, #1
 8000db4:	24ff      	movs	r4, #255	@ 0xff
 8000db6:	0e1b      	lsrs	r3, r3, #24
 8000db8:	0fff      	lsrs	r7, r7, #31
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d18a      	bne.n	8000cd4 <__aeabi_fmul+0x40>
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d164      	bne.n	8000e8e <__aeabi_fmul+0x1fa>
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	3201      	adds	r2, #1
 8000dc8:	4311      	orrs	r1, r2
 8000dca:	4689      	mov	r9, r1
 8000dcc:	290a      	cmp	r1, #10
 8000dce:	dc08      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000dd0:	407d      	eors	r5, r7
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	b2ea      	uxtb	r2, r5
 8000dd6:	2902      	cmp	r1, #2
 8000dd8:	dc91      	bgt.n	8000cfe <__aeabi_fmul+0x6a>
 8000dda:	0015      	movs	r5, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	e027      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000de0:	0015      	movs	r5, r2
 8000de2:	4653      	mov	r3, sl
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d100      	bne.n	8000dea <__aeabi_fmul+0x156>
 8000de8:	e093      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d01a      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d12c      	bne.n	8000e4c <__aeabi_fmul+0x1b8>
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	e01b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000df8:	4643      	mov	r3, r8
 8000dfa:	34ff      	adds	r4, #255	@ 0xff
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d055      	beq.n	8000eac <__aeabi_fmul+0x218>
 8000e00:	2103      	movs	r1, #3
 8000e02:	464b      	mov	r3, r9
 8000e04:	430b      	orrs	r3, r1
 8000e06:	0019      	movs	r1, r3
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	dc00      	bgt.n	8000e0e <__aeabi_fmul+0x17a>
 8000e0c:	e092      	b.n	8000f34 <__aeabi_fmul+0x2a0>
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fmul+0x180>
 8000e12:	e08c      	b.n	8000f2e <__aeabi_fmul+0x29a>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	03d2      	lsls	r2, r2, #15
 8000e18:	4216      	tst	r6, r2
 8000e1a:	d003      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4213      	tst	r3, r2
 8000e20:	d100      	bne.n	8000e24 <__aeabi_fmul+0x190>
 8000e22:	e07d      	b.n	8000f20 <__aeabi_fmul+0x28c>
 8000e24:	2280      	movs	r2, #128	@ 0x80
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	4332      	orrs	r2, r6
 8000e2a:	0252      	lsls	r2, r2, #9
 8000e2c:	0a52      	lsrs	r2, r2, #9
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	05d8      	lsls	r0, r3, #23
 8000e32:	07ed      	lsls	r5, r5, #31
 8000e34:	4310      	orrs	r0, r2
 8000e36:	4328      	orrs	r0, r5
 8000e38:	bce0      	pop	{r5, r6, r7}
 8000e3a:	46ba      	mov	sl, r7
 8000e3c:	46b1      	mov	r9, r6
 8000e3e:	46a8      	mov	r8, r5
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	2301      	movs	r3, #1
 8000e44:	0015      	movs	r5, r2
 8000e46:	0871      	lsrs	r1, r6, #1
 8000e48:	401e      	ands	r6, r3
 8000e4a:	430e      	orrs	r6, r1
 8000e4c:	0023      	movs	r3, r4
 8000e4e:	3380      	adds	r3, #128	@ 0x80
 8000e50:	1c61      	adds	r1, r4, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd41      	ble.n	8000eda <__aeabi_fmul+0x246>
 8000e56:	0772      	lsls	r2, r6, #29
 8000e58:	d094      	beq.n	8000d84 <__aeabi_fmul+0xf0>
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	4032      	ands	r2, r6
 8000e5e:	2a04      	cmp	r2, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x1d0>
 8000e62:	e78e      	b.n	8000d82 <__aeabi_fmul+0xee>
 8000e64:	e78e      	b.n	8000d84 <__aeabi_fmul+0xf0>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d105      	bne.n	8000e76 <__aeabi_fmul+0x1e2>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	3b03      	subs	r3, #3
 8000e70:	2400      	movs	r4, #0
 8000e72:	469a      	mov	sl, r3
 8000e74:	e726      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e76:	0030      	movs	r0, r6
 8000e78:	f002 f966 	bl	8003148 <__clzsi2>
 8000e7c:	2476      	movs	r4, #118	@ 0x76
 8000e7e:	1f43      	subs	r3, r0, #5
 8000e80:	409e      	lsls	r6, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	4264      	negs	r4, r4
 8000e86:	4699      	mov	r9, r3
 8000e88:	469a      	mov	sl, r3
 8000e8a:	1a24      	subs	r4, r4, r0
 8000e8c:	e71a      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f002 f95a 	bl	8003148 <__clzsi2>
 8000e94:	464b      	mov	r3, r9
 8000e96:	1a24      	subs	r4, r4, r0
 8000e98:	3c76      	subs	r4, #118	@ 0x76
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	dca1      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	3805      	subs	r0, #5
 8000ea2:	4083      	lsls	r3, r0
 8000ea4:	407d      	eors	r5, r7
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	b2ea      	uxtb	r2, r5
 8000eaa:	e724      	b.n	8000cf6 <__aeabi_fmul+0x62>
 8000eac:	464a      	mov	r2, r9
 8000eae:	3302      	adds	r3, #2
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	002a      	movs	r2, r5
 8000eb4:	407a      	eors	r2, r7
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	dc92      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	0015      	movs	r5, r2
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d026      	beq.n	8000f12 <__aeabi_fmul+0x27e>
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	e719      	b.n	8000cfe <__aeabi_fmul+0x6a>
 8000eca:	230c      	movs	r3, #12
 8000ecc:	4699      	mov	r9, r3
 8000ece:	3b09      	subs	r3, #9
 8000ed0:	24ff      	movs	r4, #255	@ 0xff
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	e6f6      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	0021      	movs	r1, r4
 8000eda:	2201      	movs	r2, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b1b      	cmp	r3, #27
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_fmul+0x250>
 8000ee2:	e786      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000ee4:	319e      	adds	r1, #158	@ 0x9e
 8000ee6:	0032      	movs	r2, r6
 8000ee8:	408e      	lsls	r6, r1
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	1e73      	subs	r3, r6, #1
 8000eee:	419e      	sbcs	r6, r3
 8000ef0:	4332      	orrs	r2, r6
 8000ef2:	0753      	lsls	r3, r2, #29
 8000ef4:	d004      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d000      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000efe:	3204      	adds	r2, #4
 8000f00:	0153      	lsls	r3, r2, #5
 8000f02:	d510      	bpl.n	8000f26 <__aeabi_fmul+0x292>
 8000f04:	2301      	movs	r3, #1
 8000f06:	2200      	movs	r2, #0
 8000f08:	e792      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f0a:	003d      	movs	r5, r7
 8000f0c:	4646      	mov	r6, r8
 8000f0e:	4682      	mov	sl, r0
 8000f10:	e767      	b.n	8000de2 <__aeabi_fmul+0x14e>
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	2200      	movs	r2, #0
 8000f16:	e78b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	03d2      	lsls	r2, r2, #15
 8000f1e:	e786      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f20:	003d      	movs	r5, r7
 8000f22:	431a      	orrs	r2, r3
 8000f24:	e783      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f26:	0192      	lsls	r2, r2, #6
 8000f28:	2300      	movs	r3, #0
 8000f2a:	0a52      	lsrs	r2, r2, #9
 8000f2c:	e780      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f2e:	003d      	movs	r5, r7
 8000f30:	4646      	mov	r6, r8
 8000f32:	e777      	b.n	8000e24 <__aeabi_fmul+0x190>
 8000f34:	002a      	movs	r2, r5
 8000f36:	2301      	movs	r3, #1
 8000f38:	407a      	eors	r2, r7
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	e6e9      	b.n	8000d16 <__aeabi_fmul+0x82>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	f7ffffff 	.word	0xf7ffffff

08000f48 <__aeabi_i2f>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d012      	beq.n	8000f74 <__aeabi_i2f+0x2c>
 8000f4e:	17c3      	asrs	r3, r0, #31
 8000f50:	18c5      	adds	r5, r0, r3
 8000f52:	405d      	eors	r5, r3
 8000f54:	0fc4      	lsrs	r4, r0, #31
 8000f56:	0028      	movs	r0, r5
 8000f58:	f002 f8f6 	bl	8003148 <__clzsi2>
 8000f5c:	239e      	movs	r3, #158	@ 0x9e
 8000f5e:	1a1b      	subs	r3, r3, r0
 8000f60:	2b96      	cmp	r3, #150	@ 0x96
 8000f62:	dc0f      	bgt.n	8000f84 <__aeabi_i2f+0x3c>
 8000f64:	2808      	cmp	r0, #8
 8000f66:	d038      	beq.n	8000fda <__aeabi_i2f+0x92>
 8000f68:	3808      	subs	r0, #8
 8000f6a:	4085      	lsls	r5, r0
 8000f6c:	026d      	lsls	r5, r5, #9
 8000f6e:	0a6d      	lsrs	r5, r5, #9
 8000f70:	b2d8      	uxtb	r0, r3
 8000f72:	e002      	b.n	8000f7a <__aeabi_i2f+0x32>
 8000f74:	2400      	movs	r4, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	2500      	movs	r5, #0
 8000f7a:	05c0      	lsls	r0, r0, #23
 8000f7c:	4328      	orrs	r0, r5
 8000f7e:	07e4      	lsls	r4, r4, #31
 8000f80:	4320      	orrs	r0, r4
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	2b99      	cmp	r3, #153	@ 0x99
 8000f86:	dc14      	bgt.n	8000fb2 <__aeabi_i2f+0x6a>
 8000f88:	1f42      	subs	r2, r0, #5
 8000f8a:	4095      	lsls	r5, r2
 8000f8c:	002a      	movs	r2, r5
 8000f8e:	4915      	ldr	r1, [pc, #84]	@ (8000fe4 <__aeabi_i2f+0x9c>)
 8000f90:	4011      	ands	r1, r2
 8000f92:	0755      	lsls	r5, r2, #29
 8000f94:	d01c      	beq.n	8000fd0 <__aeabi_i2f+0x88>
 8000f96:	250f      	movs	r5, #15
 8000f98:	402a      	ands	r2, r5
 8000f9a:	2a04      	cmp	r2, #4
 8000f9c:	d018      	beq.n	8000fd0 <__aeabi_i2f+0x88>
 8000f9e:	3104      	adds	r1, #4
 8000fa0:	08ca      	lsrs	r2, r1, #3
 8000fa2:	0149      	lsls	r1, r1, #5
 8000fa4:	d515      	bpl.n	8000fd2 <__aeabi_i2f+0x8a>
 8000fa6:	239f      	movs	r3, #159	@ 0x9f
 8000fa8:	0252      	lsls	r2, r2, #9
 8000faa:	1a18      	subs	r0, r3, r0
 8000fac:	0a55      	lsrs	r5, r2, #9
 8000fae:	b2c0      	uxtb	r0, r0
 8000fb0:	e7e3      	b.n	8000f7a <__aeabi_i2f+0x32>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	0029      	movs	r1, r5
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d1      	lsrs	r1, r2
 8000fba:	0002      	movs	r2, r0
 8000fbc:	321b      	adds	r2, #27
 8000fbe:	4095      	lsls	r5, r2
 8000fc0:	002a      	movs	r2, r5
 8000fc2:	1e55      	subs	r5, r2, #1
 8000fc4:	41aa      	sbcs	r2, r5
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	4906      	ldr	r1, [pc, #24]	@ (8000fe4 <__aeabi_i2f+0x9c>)
 8000fca:	4011      	ands	r1, r2
 8000fcc:	0755      	lsls	r5, r2, #29
 8000fce:	d1e2      	bne.n	8000f96 <__aeabi_i2f+0x4e>
 8000fd0:	08ca      	lsrs	r2, r1, #3
 8000fd2:	0252      	lsls	r2, r2, #9
 8000fd4:	0a55      	lsrs	r5, r2, #9
 8000fd6:	b2d8      	uxtb	r0, r3
 8000fd8:	e7cf      	b.n	8000f7a <__aeabi_i2f+0x32>
 8000fda:	026d      	lsls	r5, r5, #9
 8000fdc:	0a6d      	lsrs	r5, r5, #9
 8000fde:	308e      	adds	r0, #142	@ 0x8e
 8000fe0:	e7cb      	b.n	8000f7a <__aeabi_i2f+0x32>
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_ui2f>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	1e04      	subs	r4, r0, #0
 8000fec:	d00d      	beq.n	800100a <__aeabi_ui2f+0x22>
 8000fee:	f002 f8ab 	bl	8003148 <__clzsi2>
 8000ff2:	239e      	movs	r3, #158	@ 0x9e
 8000ff4:	1a1b      	subs	r3, r3, r0
 8000ff6:	2b96      	cmp	r3, #150	@ 0x96
 8000ff8:	dc0c      	bgt.n	8001014 <__aeabi_ui2f+0x2c>
 8000ffa:	2808      	cmp	r0, #8
 8000ffc:	d034      	beq.n	8001068 <__aeabi_ui2f+0x80>
 8000ffe:	3808      	subs	r0, #8
 8001000:	4084      	lsls	r4, r0
 8001002:	0264      	lsls	r4, r4, #9
 8001004:	0a64      	lsrs	r4, r4, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e001      	b.n	800100e <__aeabi_ui2f+0x26>
 800100a:	2000      	movs	r0, #0
 800100c:	2400      	movs	r4, #0
 800100e:	05c0      	lsls	r0, r0, #23
 8001010:	4320      	orrs	r0, r4
 8001012:	bd10      	pop	{r4, pc}
 8001014:	2b99      	cmp	r3, #153	@ 0x99
 8001016:	dc13      	bgt.n	8001040 <__aeabi_ui2f+0x58>
 8001018:	1f42      	subs	r2, r0, #5
 800101a:	4094      	lsls	r4, r2
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <__aeabi_ui2f+0x88>)
 800101e:	4022      	ands	r2, r4
 8001020:	0761      	lsls	r1, r4, #29
 8001022:	d01c      	beq.n	800105e <__aeabi_ui2f+0x76>
 8001024:	210f      	movs	r1, #15
 8001026:	4021      	ands	r1, r4
 8001028:	2904      	cmp	r1, #4
 800102a:	d018      	beq.n	800105e <__aeabi_ui2f+0x76>
 800102c:	3204      	adds	r2, #4
 800102e:	08d4      	lsrs	r4, r2, #3
 8001030:	0152      	lsls	r2, r2, #5
 8001032:	d515      	bpl.n	8001060 <__aeabi_ui2f+0x78>
 8001034:	239f      	movs	r3, #159	@ 0x9f
 8001036:	0264      	lsls	r4, r4, #9
 8001038:	1a18      	subs	r0, r3, r0
 800103a:	0a64      	lsrs	r4, r4, #9
 800103c:	b2c0      	uxtb	r0, r0
 800103e:	e7e6      	b.n	800100e <__aeabi_ui2f+0x26>
 8001040:	0002      	movs	r2, r0
 8001042:	0021      	movs	r1, r4
 8001044:	321b      	adds	r2, #27
 8001046:	4091      	lsls	r1, r2
 8001048:	000a      	movs	r2, r1
 800104a:	1e51      	subs	r1, r2, #1
 800104c:	418a      	sbcs	r2, r1
 800104e:	2105      	movs	r1, #5
 8001050:	1a09      	subs	r1, r1, r0
 8001052:	40cc      	lsrs	r4, r1
 8001054:	4314      	orrs	r4, r2
 8001056:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <__aeabi_ui2f+0x88>)
 8001058:	4022      	ands	r2, r4
 800105a:	0761      	lsls	r1, r4, #29
 800105c:	d1e2      	bne.n	8001024 <__aeabi_ui2f+0x3c>
 800105e:	08d4      	lsrs	r4, r2, #3
 8001060:	0264      	lsls	r4, r4, #9
 8001062:	0a64      	lsrs	r4, r4, #9
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	e7d2      	b.n	800100e <__aeabi_ui2f+0x26>
 8001068:	0264      	lsls	r4, r4, #9
 800106a:	0a64      	lsrs	r4, r4, #9
 800106c:	308e      	adds	r0, #142	@ 0x8e
 800106e:	e7ce      	b.n	800100e <__aeabi_ui2f+0x26>
 8001070:	fbffffff 	.word	0xfbffffff

08001074 <__aeabi_dadd>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	464f      	mov	r7, r9
 8001078:	4646      	mov	r6, r8
 800107a:	46d6      	mov	lr, sl
 800107c:	b5c0      	push	{r6, r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	9000      	str	r0, [sp, #0]
 8001082:	9101      	str	r1, [sp, #4]
 8001084:	030e      	lsls	r6, r1, #12
 8001086:	004c      	lsls	r4, r1, #1
 8001088:	0fcd      	lsrs	r5, r1, #31
 800108a:	0a71      	lsrs	r1, r6, #9
 800108c:	9e00      	ldr	r6, [sp, #0]
 800108e:	005f      	lsls	r7, r3, #1
 8001090:	0f76      	lsrs	r6, r6, #29
 8001092:	430e      	orrs	r6, r1
 8001094:	9900      	ldr	r1, [sp, #0]
 8001096:	9200      	str	r2, [sp, #0]
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	00c9      	lsls	r1, r1, #3
 800109c:	4689      	mov	r9, r1
 800109e:	0319      	lsls	r1, r3, #12
 80010a0:	0d7b      	lsrs	r3, r7, #21
 80010a2:	4698      	mov	r8, r3
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	0a49      	lsrs	r1, r1, #9
 80010a8:	0fdb      	lsrs	r3, r3, #31
 80010aa:	469c      	mov	ip, r3
 80010ac:	9b00      	ldr	r3, [sp, #0]
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	0f5b      	lsrs	r3, r3, #29
 80010b2:	430b      	orrs	r3, r1
 80010b4:	4641      	mov	r1, r8
 80010b6:	0d64      	lsrs	r4, r4, #21
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	1a61      	subs	r1, r4, r1
 80010bc:	4565      	cmp	r5, ip
 80010be:	d100      	bne.n	80010c2 <__aeabi_dadd+0x4e>
 80010c0:	e0a6      	b.n	8001210 <__aeabi_dadd+0x19c>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	dd72      	ble.n	80011ac <__aeabi_dadd+0x138>
 80010c6:	4647      	mov	r7, r8
 80010c8:	2f00      	cmp	r7, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x5a>
 80010cc:	e0dd      	b.n	800128a <__aeabi_dadd+0x216>
 80010ce:	4fcc      	ldr	r7, [pc, #816]	@ (8001400 <__aeabi_dadd+0x38c>)
 80010d0:	42bc      	cmp	r4, r7
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x62>
 80010d4:	e19a      	b.n	800140c <__aeabi_dadd+0x398>
 80010d6:	2701      	movs	r7, #1
 80010d8:	2938      	cmp	r1, #56	@ 0x38
 80010da:	dc17      	bgt.n	800110c <__aeabi_dadd+0x98>
 80010dc:	2780      	movs	r7, #128	@ 0x80
 80010de:	043f      	lsls	r7, r7, #16
 80010e0:	433b      	orrs	r3, r7
 80010e2:	291f      	cmp	r1, #31
 80010e4:	dd00      	ble.n	80010e8 <__aeabi_dadd+0x74>
 80010e6:	e1dd      	b.n	80014a4 <__aeabi_dadd+0x430>
 80010e8:	2720      	movs	r7, #32
 80010ea:	1a78      	subs	r0, r7, r1
 80010ec:	001f      	movs	r7, r3
 80010ee:	4087      	lsls	r7, r0
 80010f0:	46ba      	mov	sl, r7
 80010f2:	0017      	movs	r7, r2
 80010f4:	40cf      	lsrs	r7, r1
 80010f6:	4684      	mov	ip, r0
 80010f8:	0038      	movs	r0, r7
 80010fa:	4657      	mov	r7, sl
 80010fc:	4307      	orrs	r7, r0
 80010fe:	4660      	mov	r0, ip
 8001100:	4082      	lsls	r2, r0
 8001102:	40cb      	lsrs	r3, r1
 8001104:	1e50      	subs	r0, r2, #1
 8001106:	4182      	sbcs	r2, r0
 8001108:	1af6      	subs	r6, r6, r3
 800110a:	4317      	orrs	r7, r2
 800110c:	464b      	mov	r3, r9
 800110e:	1bdf      	subs	r7, r3, r7
 8001110:	45b9      	cmp	r9, r7
 8001112:	4180      	sbcs	r0, r0
 8001114:	4240      	negs	r0, r0
 8001116:	1a36      	subs	r6, r6, r0
 8001118:	0233      	lsls	r3, r6, #8
 800111a:	d400      	bmi.n	800111e <__aeabi_dadd+0xaa>
 800111c:	e0ff      	b.n	800131e <__aeabi_dadd+0x2aa>
 800111e:	0276      	lsls	r6, r6, #9
 8001120:	0a76      	lsrs	r6, r6, #9
 8001122:	2e00      	cmp	r6, #0
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0xb4>
 8001126:	e13c      	b.n	80013a2 <__aeabi_dadd+0x32e>
 8001128:	0030      	movs	r0, r6
 800112a:	f002 f80d 	bl	8003148 <__clzsi2>
 800112e:	0003      	movs	r3, r0
 8001130:	3b08      	subs	r3, #8
 8001132:	2120      	movs	r1, #32
 8001134:	0038      	movs	r0, r7
 8001136:	1aca      	subs	r2, r1, r3
 8001138:	40d0      	lsrs	r0, r2
 800113a:	409e      	lsls	r6, r3
 800113c:	0002      	movs	r2, r0
 800113e:	409f      	lsls	r7, r3
 8001140:	4332      	orrs	r2, r6
 8001142:	429c      	cmp	r4, r3
 8001144:	dd00      	ble.n	8001148 <__aeabi_dadd+0xd4>
 8001146:	e1a6      	b.n	8001496 <__aeabi_dadd+0x422>
 8001148:	1b18      	subs	r0, r3, r4
 800114a:	3001      	adds	r0, #1
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	003e      	movs	r6, r7
 8001150:	408f      	lsls	r7, r1
 8001152:	40c6      	lsrs	r6, r0
 8001154:	1e7b      	subs	r3, r7, #1
 8001156:	419f      	sbcs	r7, r3
 8001158:	0013      	movs	r3, r2
 800115a:	408b      	lsls	r3, r1
 800115c:	4337      	orrs	r7, r6
 800115e:	431f      	orrs	r7, r3
 8001160:	40c2      	lsrs	r2, r0
 8001162:	003b      	movs	r3, r7
 8001164:	0016      	movs	r6, r2
 8001166:	2400      	movs	r4, #0
 8001168:	4313      	orrs	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0xfa>
 800116c:	e1df      	b.n	800152e <__aeabi_dadd+0x4ba>
 800116e:	077b      	lsls	r3, r7, #29
 8001170:	d100      	bne.n	8001174 <__aeabi_dadd+0x100>
 8001172:	e332      	b.n	80017da <__aeabi_dadd+0x766>
 8001174:	230f      	movs	r3, #15
 8001176:	003a      	movs	r2, r7
 8001178:	403b      	ands	r3, r7
 800117a:	2b04      	cmp	r3, #4
 800117c:	d004      	beq.n	8001188 <__aeabi_dadd+0x114>
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	42ba      	cmp	r2, r7
 8001182:	41bf      	sbcs	r7, r7
 8001184:	427f      	negs	r7, r7
 8001186:	19f6      	adds	r6, r6, r7
 8001188:	0233      	lsls	r3, r6, #8
 800118a:	d400      	bmi.n	800118e <__aeabi_dadd+0x11a>
 800118c:	e323      	b.n	80017d6 <__aeabi_dadd+0x762>
 800118e:	4b9c      	ldr	r3, [pc, #624]	@ (8001400 <__aeabi_dadd+0x38c>)
 8001190:	3401      	adds	r4, #1
 8001192:	429c      	cmp	r4, r3
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x124>
 8001196:	e0b4      	b.n	8001302 <__aeabi_dadd+0x28e>
 8001198:	4b9a      	ldr	r3, [pc, #616]	@ (8001404 <__aeabi_dadd+0x390>)
 800119a:	0564      	lsls	r4, r4, #21
 800119c:	401e      	ands	r6, r3
 800119e:	0d64      	lsrs	r4, r4, #21
 80011a0:	0777      	lsls	r7, r6, #29
 80011a2:	08d2      	lsrs	r2, r2, #3
 80011a4:	0276      	lsls	r6, r6, #9
 80011a6:	4317      	orrs	r7, r2
 80011a8:	0b36      	lsrs	r6, r6, #12
 80011aa:	e0ac      	b.n	8001306 <__aeabi_dadd+0x292>
 80011ac:	2900      	cmp	r1, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x13e>
 80011b0:	e07e      	b.n	80012b0 <__aeabi_dadd+0x23c>
 80011b2:	4641      	mov	r1, r8
 80011b4:	1b09      	subs	r1, r1, r4
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d000      	beq.n	80011bc <__aeabi_dadd+0x148>
 80011ba:	e160      	b.n	800147e <__aeabi_dadd+0x40a>
 80011bc:	0034      	movs	r4, r6
 80011be:	4648      	mov	r0, r9
 80011c0:	4304      	orrs	r4, r0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x152>
 80011c4:	e1c9      	b.n	800155a <__aeabi_dadd+0x4e6>
 80011c6:	1e4c      	subs	r4, r1, #1
 80011c8:	2901      	cmp	r1, #1
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x15a>
 80011cc:	e22e      	b.n	800162c <__aeabi_dadd+0x5b8>
 80011ce:	4d8c      	ldr	r5, [pc, #560]	@ (8001400 <__aeabi_dadd+0x38c>)
 80011d0:	42a9      	cmp	r1, r5
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x162>
 80011d4:	e224      	b.n	8001620 <__aeabi_dadd+0x5ac>
 80011d6:	2701      	movs	r7, #1
 80011d8:	2c38      	cmp	r4, #56	@ 0x38
 80011da:	dc11      	bgt.n	8001200 <__aeabi_dadd+0x18c>
 80011dc:	0021      	movs	r1, r4
 80011de:	291f      	cmp	r1, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0x170>
 80011e2:	e20b      	b.n	80015fc <__aeabi_dadd+0x588>
 80011e4:	2420      	movs	r4, #32
 80011e6:	0037      	movs	r7, r6
 80011e8:	4648      	mov	r0, r9
 80011ea:	1a64      	subs	r4, r4, r1
 80011ec:	40a7      	lsls	r7, r4
 80011ee:	40c8      	lsrs	r0, r1
 80011f0:	4307      	orrs	r7, r0
 80011f2:	4648      	mov	r0, r9
 80011f4:	40a0      	lsls	r0, r4
 80011f6:	40ce      	lsrs	r6, r1
 80011f8:	1e44      	subs	r4, r0, #1
 80011fa:	41a0      	sbcs	r0, r4
 80011fc:	1b9b      	subs	r3, r3, r6
 80011fe:	4307      	orrs	r7, r0
 8001200:	1bd7      	subs	r7, r2, r7
 8001202:	42ba      	cmp	r2, r7
 8001204:	4192      	sbcs	r2, r2
 8001206:	4252      	negs	r2, r2
 8001208:	4665      	mov	r5, ip
 800120a:	4644      	mov	r4, r8
 800120c:	1a9e      	subs	r6, r3, r2
 800120e:	e783      	b.n	8001118 <__aeabi_dadd+0xa4>
 8001210:	2900      	cmp	r1, #0
 8001212:	dc00      	bgt.n	8001216 <__aeabi_dadd+0x1a2>
 8001214:	e09c      	b.n	8001350 <__aeabi_dadd+0x2dc>
 8001216:	4647      	mov	r7, r8
 8001218:	2f00      	cmp	r7, #0
 800121a:	d167      	bne.n	80012ec <__aeabi_dadd+0x278>
 800121c:	001f      	movs	r7, r3
 800121e:	4317      	orrs	r7, r2
 8001220:	d100      	bne.n	8001224 <__aeabi_dadd+0x1b0>
 8001222:	e0e4      	b.n	80013ee <__aeabi_dadd+0x37a>
 8001224:	1e48      	subs	r0, r1, #1
 8001226:	2901      	cmp	r1, #1
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1b8>
 800122a:	e19b      	b.n	8001564 <__aeabi_dadd+0x4f0>
 800122c:	4f74      	ldr	r7, [pc, #464]	@ (8001400 <__aeabi_dadd+0x38c>)
 800122e:	42b9      	cmp	r1, r7
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1c0>
 8001232:	e0eb      	b.n	800140c <__aeabi_dadd+0x398>
 8001234:	2701      	movs	r7, #1
 8001236:	0001      	movs	r1, r0
 8001238:	2838      	cmp	r0, #56	@ 0x38
 800123a:	dc11      	bgt.n	8001260 <__aeabi_dadd+0x1ec>
 800123c:	291f      	cmp	r1, #31
 800123e:	dd00      	ble.n	8001242 <__aeabi_dadd+0x1ce>
 8001240:	e1c7      	b.n	80015d2 <__aeabi_dadd+0x55e>
 8001242:	2720      	movs	r7, #32
 8001244:	1a78      	subs	r0, r7, r1
 8001246:	001f      	movs	r7, r3
 8001248:	4684      	mov	ip, r0
 800124a:	4087      	lsls	r7, r0
 800124c:	0010      	movs	r0, r2
 800124e:	40c8      	lsrs	r0, r1
 8001250:	4307      	orrs	r7, r0
 8001252:	4660      	mov	r0, ip
 8001254:	4082      	lsls	r2, r0
 8001256:	40cb      	lsrs	r3, r1
 8001258:	1e50      	subs	r0, r2, #1
 800125a:	4182      	sbcs	r2, r0
 800125c:	18f6      	adds	r6, r6, r3
 800125e:	4317      	orrs	r7, r2
 8001260:	444f      	add	r7, r9
 8001262:	454f      	cmp	r7, r9
 8001264:	4180      	sbcs	r0, r0
 8001266:	4240      	negs	r0, r0
 8001268:	1836      	adds	r6, r6, r0
 800126a:	0233      	lsls	r3, r6, #8
 800126c:	d557      	bpl.n	800131e <__aeabi_dadd+0x2aa>
 800126e:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <__aeabi_dadd+0x38c>)
 8001270:	3401      	adds	r4, #1
 8001272:	429c      	cmp	r4, r3
 8001274:	d045      	beq.n	8001302 <__aeabi_dadd+0x28e>
 8001276:	2101      	movs	r1, #1
 8001278:	4b62      	ldr	r3, [pc, #392]	@ (8001404 <__aeabi_dadd+0x390>)
 800127a:	087a      	lsrs	r2, r7, #1
 800127c:	401e      	ands	r6, r3
 800127e:	4039      	ands	r1, r7
 8001280:	430a      	orrs	r2, r1
 8001282:	07f7      	lsls	r7, r6, #31
 8001284:	4317      	orrs	r7, r2
 8001286:	0876      	lsrs	r6, r6, #1
 8001288:	e771      	b.n	800116e <__aeabi_dadd+0xfa>
 800128a:	001f      	movs	r7, r3
 800128c:	4317      	orrs	r7, r2
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x21e>
 8001290:	e0ad      	b.n	80013ee <__aeabi_dadd+0x37a>
 8001292:	1e4f      	subs	r7, r1, #1
 8001294:	46bc      	mov	ip, r7
 8001296:	2901      	cmp	r1, #1
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x228>
 800129a:	e182      	b.n	80015a2 <__aeabi_dadd+0x52e>
 800129c:	4f58      	ldr	r7, [pc, #352]	@ (8001400 <__aeabi_dadd+0x38c>)
 800129e:	42b9      	cmp	r1, r7
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x230>
 80012a2:	e190      	b.n	80015c6 <__aeabi_dadd+0x552>
 80012a4:	4661      	mov	r1, ip
 80012a6:	2701      	movs	r7, #1
 80012a8:	2938      	cmp	r1, #56	@ 0x38
 80012aa:	dd00      	ble.n	80012ae <__aeabi_dadd+0x23a>
 80012ac:	e72e      	b.n	800110c <__aeabi_dadd+0x98>
 80012ae:	e718      	b.n	80010e2 <__aeabi_dadd+0x6e>
 80012b0:	4f55      	ldr	r7, [pc, #340]	@ (8001408 <__aeabi_dadd+0x394>)
 80012b2:	1c61      	adds	r1, r4, #1
 80012b4:	4239      	tst	r1, r7
 80012b6:	d000      	beq.n	80012ba <__aeabi_dadd+0x246>
 80012b8:	e0d0      	b.n	800145c <__aeabi_dadd+0x3e8>
 80012ba:	0031      	movs	r1, r6
 80012bc:	4648      	mov	r0, r9
 80012be:	001f      	movs	r7, r3
 80012c0:	4301      	orrs	r1, r0
 80012c2:	4317      	orrs	r7, r2
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d000      	beq.n	80012ca <__aeabi_dadd+0x256>
 80012c8:	e13d      	b.n	8001546 <__aeabi_dadd+0x4d2>
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dadd+0x25c>
 80012ce:	e1bc      	b.n	800164a <__aeabi_dadd+0x5d6>
 80012d0:	2f00      	cmp	r7, #0
 80012d2:	d000      	beq.n	80012d6 <__aeabi_dadd+0x262>
 80012d4:	e1bf      	b.n	8001656 <__aeabi_dadd+0x5e2>
 80012d6:	464b      	mov	r3, r9
 80012d8:	2100      	movs	r1, #0
 80012da:	08d8      	lsrs	r0, r3, #3
 80012dc:	0777      	lsls	r7, r6, #29
 80012de:	4307      	orrs	r7, r0
 80012e0:	08f0      	lsrs	r0, r6, #3
 80012e2:	0306      	lsls	r6, r0, #12
 80012e4:	054c      	lsls	r4, r1, #21
 80012e6:	0b36      	lsrs	r6, r6, #12
 80012e8:	0d64      	lsrs	r4, r4, #21
 80012ea:	e00c      	b.n	8001306 <__aeabi_dadd+0x292>
 80012ec:	4f44      	ldr	r7, [pc, #272]	@ (8001400 <__aeabi_dadd+0x38c>)
 80012ee:	42bc      	cmp	r4, r7
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x280>
 80012f2:	e08b      	b.n	800140c <__aeabi_dadd+0x398>
 80012f4:	2701      	movs	r7, #1
 80012f6:	2938      	cmp	r1, #56	@ 0x38
 80012f8:	dcb2      	bgt.n	8001260 <__aeabi_dadd+0x1ec>
 80012fa:	2780      	movs	r7, #128	@ 0x80
 80012fc:	043f      	lsls	r7, r7, #16
 80012fe:	433b      	orrs	r3, r7
 8001300:	e79c      	b.n	800123c <__aeabi_dadd+0x1c8>
 8001302:	2600      	movs	r6, #0
 8001304:	2700      	movs	r7, #0
 8001306:	0524      	lsls	r4, r4, #20
 8001308:	4334      	orrs	r4, r6
 800130a:	07ed      	lsls	r5, r5, #31
 800130c:	432c      	orrs	r4, r5
 800130e:	0038      	movs	r0, r7
 8001310:	0021      	movs	r1, r4
 8001312:	b002      	add	sp, #8
 8001314:	bce0      	pop	{r5, r6, r7}
 8001316:	46ba      	mov	sl, r7
 8001318:	46b1      	mov	r9, r6
 800131a:	46a8      	mov	r8, r5
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131e:	077b      	lsls	r3, r7, #29
 8001320:	d004      	beq.n	800132c <__aeabi_dadd+0x2b8>
 8001322:	230f      	movs	r3, #15
 8001324:	403b      	ands	r3, r7
 8001326:	2b04      	cmp	r3, #4
 8001328:	d000      	beq.n	800132c <__aeabi_dadd+0x2b8>
 800132a:	e728      	b.n	800117e <__aeabi_dadd+0x10a>
 800132c:	08f8      	lsrs	r0, r7, #3
 800132e:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <__aeabi_dadd+0x38c>)
 8001330:	0777      	lsls	r7, r6, #29
 8001332:	4307      	orrs	r7, r0
 8001334:	08f0      	lsrs	r0, r6, #3
 8001336:	429c      	cmp	r4, r3
 8001338:	d000      	beq.n	800133c <__aeabi_dadd+0x2c8>
 800133a:	e24a      	b.n	80017d2 <__aeabi_dadd+0x75e>
 800133c:	003b      	movs	r3, r7
 800133e:	4303      	orrs	r3, r0
 8001340:	d059      	beq.n	80013f6 <__aeabi_dadd+0x382>
 8001342:	2680      	movs	r6, #128	@ 0x80
 8001344:	0336      	lsls	r6, r6, #12
 8001346:	4306      	orrs	r6, r0
 8001348:	0336      	lsls	r6, r6, #12
 800134a:	4c2d      	ldr	r4, [pc, #180]	@ (8001400 <__aeabi_dadd+0x38c>)
 800134c:	0b36      	lsrs	r6, r6, #12
 800134e:	e7da      	b.n	8001306 <__aeabi_dadd+0x292>
 8001350:	2900      	cmp	r1, #0
 8001352:	d061      	beq.n	8001418 <__aeabi_dadd+0x3a4>
 8001354:	4641      	mov	r1, r8
 8001356:	1b09      	subs	r1, r1, r4
 8001358:	2c00      	cmp	r4, #0
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x2ea>
 800135c:	e0b9      	b.n	80014d2 <__aeabi_dadd+0x45e>
 800135e:	4c28      	ldr	r4, [pc, #160]	@ (8001400 <__aeabi_dadd+0x38c>)
 8001360:	45a0      	cmp	r8, r4
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x2f2>
 8001364:	e1a5      	b.n	80016b2 <__aeabi_dadd+0x63e>
 8001366:	2701      	movs	r7, #1
 8001368:	2938      	cmp	r1, #56	@ 0x38
 800136a:	dc13      	bgt.n	8001394 <__aeabi_dadd+0x320>
 800136c:	2480      	movs	r4, #128	@ 0x80
 800136e:	0424      	lsls	r4, r4, #16
 8001370:	4326      	orrs	r6, r4
 8001372:	291f      	cmp	r1, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0x304>
 8001376:	e1c8      	b.n	800170a <__aeabi_dadd+0x696>
 8001378:	2420      	movs	r4, #32
 800137a:	0037      	movs	r7, r6
 800137c:	4648      	mov	r0, r9
 800137e:	1a64      	subs	r4, r4, r1
 8001380:	40a7      	lsls	r7, r4
 8001382:	40c8      	lsrs	r0, r1
 8001384:	4307      	orrs	r7, r0
 8001386:	4648      	mov	r0, r9
 8001388:	40a0      	lsls	r0, r4
 800138a:	40ce      	lsrs	r6, r1
 800138c:	1e44      	subs	r4, r0, #1
 800138e:	41a0      	sbcs	r0, r4
 8001390:	199b      	adds	r3, r3, r6
 8001392:	4307      	orrs	r7, r0
 8001394:	18bf      	adds	r7, r7, r2
 8001396:	4297      	cmp	r7, r2
 8001398:	4192      	sbcs	r2, r2
 800139a:	4252      	negs	r2, r2
 800139c:	4644      	mov	r4, r8
 800139e:	18d6      	adds	r6, r2, r3
 80013a0:	e763      	b.n	800126a <__aeabi_dadd+0x1f6>
 80013a2:	0038      	movs	r0, r7
 80013a4:	f001 fed0 	bl	8003148 <__clzsi2>
 80013a8:	0003      	movs	r3, r0
 80013aa:	3318      	adds	r3, #24
 80013ac:	2b1f      	cmp	r3, #31
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dadd+0x33e>
 80013b0:	e6bf      	b.n	8001132 <__aeabi_dadd+0xbe>
 80013b2:	003a      	movs	r2, r7
 80013b4:	3808      	subs	r0, #8
 80013b6:	4082      	lsls	r2, r0
 80013b8:	429c      	cmp	r4, r3
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0x34a>
 80013bc:	e083      	b.n	80014c6 <__aeabi_dadd+0x452>
 80013be:	1b1b      	subs	r3, r3, r4
 80013c0:	1c58      	adds	r0, r3, #1
 80013c2:	281f      	cmp	r0, #31
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x354>
 80013c6:	e1b4      	b.n	8001732 <__aeabi_dadd+0x6be>
 80013c8:	0017      	movs	r7, r2
 80013ca:	3b1f      	subs	r3, #31
 80013cc:	40df      	lsrs	r7, r3
 80013ce:	2820      	cmp	r0, #32
 80013d0:	d005      	beq.n	80013de <__aeabi_dadd+0x36a>
 80013d2:	2340      	movs	r3, #64	@ 0x40
 80013d4:	1a1b      	subs	r3, r3, r0
 80013d6:	409a      	lsls	r2, r3
 80013d8:	1e53      	subs	r3, r2, #1
 80013da:	419a      	sbcs	r2, r3
 80013dc:	4317      	orrs	r7, r2
 80013de:	2400      	movs	r4, #0
 80013e0:	2f00      	cmp	r7, #0
 80013e2:	d00a      	beq.n	80013fa <__aeabi_dadd+0x386>
 80013e4:	077b      	lsls	r3, r7, #29
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x376>
 80013e8:	e6c4      	b.n	8001174 <__aeabi_dadd+0x100>
 80013ea:	0026      	movs	r6, r4
 80013ec:	e79e      	b.n	800132c <__aeabi_dadd+0x2b8>
 80013ee:	464b      	mov	r3, r9
 80013f0:	000c      	movs	r4, r1
 80013f2:	08d8      	lsrs	r0, r3, #3
 80013f4:	e79b      	b.n	800132e <__aeabi_dadd+0x2ba>
 80013f6:	2700      	movs	r7, #0
 80013f8:	4c01      	ldr	r4, [pc, #4]	@ (8001400 <__aeabi_dadd+0x38c>)
 80013fa:	2600      	movs	r6, #0
 80013fc:	e783      	b.n	8001306 <__aeabi_dadd+0x292>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff
 8001404:	ff7fffff 	.word	0xff7fffff
 8001408:	000007fe 	.word	0x000007fe
 800140c:	464b      	mov	r3, r9
 800140e:	0777      	lsls	r7, r6, #29
 8001410:	08d8      	lsrs	r0, r3, #3
 8001412:	4307      	orrs	r7, r0
 8001414:	08f0      	lsrs	r0, r6, #3
 8001416:	e791      	b.n	800133c <__aeabi_dadd+0x2c8>
 8001418:	4fcd      	ldr	r7, [pc, #820]	@ (8001750 <__aeabi_dadd+0x6dc>)
 800141a:	1c61      	adds	r1, r4, #1
 800141c:	4239      	tst	r1, r7
 800141e:	d16b      	bne.n	80014f8 <__aeabi_dadd+0x484>
 8001420:	0031      	movs	r1, r6
 8001422:	4648      	mov	r0, r9
 8001424:	4301      	orrs	r1, r0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d000      	beq.n	800142c <__aeabi_dadd+0x3b8>
 800142a:	e14b      	b.n	80016c4 <__aeabi_dadd+0x650>
 800142c:	001f      	movs	r7, r3
 800142e:	4317      	orrs	r7, r2
 8001430:	2900      	cmp	r1, #0
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x3c2>
 8001434:	e181      	b.n	800173a <__aeabi_dadd+0x6c6>
 8001436:	2f00      	cmp	r7, #0
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x3c8>
 800143a:	e74c      	b.n	80012d6 <__aeabi_dadd+0x262>
 800143c:	444a      	add	r2, r9
 800143e:	454a      	cmp	r2, r9
 8001440:	4180      	sbcs	r0, r0
 8001442:	18f6      	adds	r6, r6, r3
 8001444:	4240      	negs	r0, r0
 8001446:	1836      	adds	r6, r6, r0
 8001448:	0233      	lsls	r3, r6, #8
 800144a:	d500      	bpl.n	800144e <__aeabi_dadd+0x3da>
 800144c:	e1b0      	b.n	80017b0 <__aeabi_dadd+0x73c>
 800144e:	0017      	movs	r7, r2
 8001450:	4691      	mov	r9, r2
 8001452:	4337      	orrs	r7, r6
 8001454:	d000      	beq.n	8001458 <__aeabi_dadd+0x3e4>
 8001456:	e73e      	b.n	80012d6 <__aeabi_dadd+0x262>
 8001458:	2600      	movs	r6, #0
 800145a:	e754      	b.n	8001306 <__aeabi_dadd+0x292>
 800145c:	4649      	mov	r1, r9
 800145e:	1a89      	subs	r1, r1, r2
 8001460:	4688      	mov	r8, r1
 8001462:	45c1      	cmp	r9, r8
 8001464:	41bf      	sbcs	r7, r7
 8001466:	1af1      	subs	r1, r6, r3
 8001468:	427f      	negs	r7, r7
 800146a:	1bc9      	subs	r1, r1, r7
 800146c:	020f      	lsls	r7, r1, #8
 800146e:	d461      	bmi.n	8001534 <__aeabi_dadd+0x4c0>
 8001470:	4647      	mov	r7, r8
 8001472:	430f      	orrs	r7, r1
 8001474:	d100      	bne.n	8001478 <__aeabi_dadd+0x404>
 8001476:	e0bd      	b.n	80015f4 <__aeabi_dadd+0x580>
 8001478:	000e      	movs	r6, r1
 800147a:	4647      	mov	r7, r8
 800147c:	e651      	b.n	8001122 <__aeabi_dadd+0xae>
 800147e:	4cb5      	ldr	r4, [pc, #724]	@ (8001754 <__aeabi_dadd+0x6e0>)
 8001480:	45a0      	cmp	r8, r4
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x412>
 8001484:	e100      	b.n	8001688 <__aeabi_dadd+0x614>
 8001486:	2701      	movs	r7, #1
 8001488:	2938      	cmp	r1, #56	@ 0x38
 800148a:	dd00      	ble.n	800148e <__aeabi_dadd+0x41a>
 800148c:	e6b8      	b.n	8001200 <__aeabi_dadd+0x18c>
 800148e:	2480      	movs	r4, #128	@ 0x80
 8001490:	0424      	lsls	r4, r4, #16
 8001492:	4326      	orrs	r6, r4
 8001494:	e6a3      	b.n	80011de <__aeabi_dadd+0x16a>
 8001496:	4eb0      	ldr	r6, [pc, #704]	@ (8001758 <__aeabi_dadd+0x6e4>)
 8001498:	1ae4      	subs	r4, r4, r3
 800149a:	4016      	ands	r6, r2
 800149c:	077b      	lsls	r3, r7, #29
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x42e>
 80014a0:	e73f      	b.n	8001322 <__aeabi_dadd+0x2ae>
 80014a2:	e743      	b.n	800132c <__aeabi_dadd+0x2b8>
 80014a4:	000f      	movs	r7, r1
 80014a6:	0018      	movs	r0, r3
 80014a8:	3f20      	subs	r7, #32
 80014aa:	40f8      	lsrs	r0, r7
 80014ac:	4684      	mov	ip, r0
 80014ae:	2920      	cmp	r1, #32
 80014b0:	d003      	beq.n	80014ba <__aeabi_dadd+0x446>
 80014b2:	2740      	movs	r7, #64	@ 0x40
 80014b4:	1a79      	subs	r1, r7, r1
 80014b6:	408b      	lsls	r3, r1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	1e53      	subs	r3, r2, #1
 80014bc:	419a      	sbcs	r2, r3
 80014be:	4663      	mov	r3, ip
 80014c0:	0017      	movs	r7, r2
 80014c2:	431f      	orrs	r7, r3
 80014c4:	e622      	b.n	800110c <__aeabi_dadd+0x98>
 80014c6:	48a4      	ldr	r0, [pc, #656]	@ (8001758 <__aeabi_dadd+0x6e4>)
 80014c8:	1ae1      	subs	r1, r4, r3
 80014ca:	4010      	ands	r0, r2
 80014cc:	0747      	lsls	r7, r0, #29
 80014ce:	08c0      	lsrs	r0, r0, #3
 80014d0:	e707      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80014d2:	0034      	movs	r4, r6
 80014d4:	4648      	mov	r0, r9
 80014d6:	4304      	orrs	r4, r0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x468>
 80014da:	e0fa      	b.n	80016d2 <__aeabi_dadd+0x65e>
 80014dc:	1e4c      	subs	r4, r1, #1
 80014de:	2901      	cmp	r1, #1
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x470>
 80014e2:	e0d7      	b.n	8001694 <__aeabi_dadd+0x620>
 80014e4:	4f9b      	ldr	r7, [pc, #620]	@ (8001754 <__aeabi_dadd+0x6e0>)
 80014e6:	42b9      	cmp	r1, r7
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x478>
 80014ea:	e0e2      	b.n	80016b2 <__aeabi_dadd+0x63e>
 80014ec:	2701      	movs	r7, #1
 80014ee:	2c38      	cmp	r4, #56	@ 0x38
 80014f0:	dd00      	ble.n	80014f4 <__aeabi_dadd+0x480>
 80014f2:	e74f      	b.n	8001394 <__aeabi_dadd+0x320>
 80014f4:	0021      	movs	r1, r4
 80014f6:	e73c      	b.n	8001372 <__aeabi_dadd+0x2fe>
 80014f8:	4c96      	ldr	r4, [pc, #600]	@ (8001754 <__aeabi_dadd+0x6e0>)
 80014fa:	42a1      	cmp	r1, r4
 80014fc:	d100      	bne.n	8001500 <__aeabi_dadd+0x48c>
 80014fe:	e0dd      	b.n	80016bc <__aeabi_dadd+0x648>
 8001500:	444a      	add	r2, r9
 8001502:	454a      	cmp	r2, r9
 8001504:	4180      	sbcs	r0, r0
 8001506:	18f3      	adds	r3, r6, r3
 8001508:	4240      	negs	r0, r0
 800150a:	1818      	adds	r0, r3, r0
 800150c:	07c7      	lsls	r7, r0, #31
 800150e:	0852      	lsrs	r2, r2, #1
 8001510:	4317      	orrs	r7, r2
 8001512:	0846      	lsrs	r6, r0, #1
 8001514:	0752      	lsls	r2, r2, #29
 8001516:	d005      	beq.n	8001524 <__aeabi_dadd+0x4b0>
 8001518:	220f      	movs	r2, #15
 800151a:	000c      	movs	r4, r1
 800151c:	403a      	ands	r2, r7
 800151e:	2a04      	cmp	r2, #4
 8001520:	d000      	beq.n	8001524 <__aeabi_dadd+0x4b0>
 8001522:	e62c      	b.n	800117e <__aeabi_dadd+0x10a>
 8001524:	0776      	lsls	r6, r6, #29
 8001526:	08ff      	lsrs	r7, r7, #3
 8001528:	4337      	orrs	r7, r6
 800152a:	0900      	lsrs	r0, r0, #4
 800152c:	e6d9      	b.n	80012e2 <__aeabi_dadd+0x26e>
 800152e:	2700      	movs	r7, #0
 8001530:	2600      	movs	r6, #0
 8001532:	e6e8      	b.n	8001306 <__aeabi_dadd+0x292>
 8001534:	4649      	mov	r1, r9
 8001536:	1a57      	subs	r7, r2, r1
 8001538:	42ba      	cmp	r2, r7
 800153a:	4192      	sbcs	r2, r2
 800153c:	1b9e      	subs	r6, r3, r6
 800153e:	4252      	negs	r2, r2
 8001540:	4665      	mov	r5, ip
 8001542:	1ab6      	subs	r6, r6, r2
 8001544:	e5ed      	b.n	8001122 <__aeabi_dadd+0xae>
 8001546:	2900      	cmp	r1, #0
 8001548:	d000      	beq.n	800154c <__aeabi_dadd+0x4d8>
 800154a:	e0c6      	b.n	80016da <__aeabi_dadd+0x666>
 800154c:	2f00      	cmp	r7, #0
 800154e:	d167      	bne.n	8001620 <__aeabi_dadd+0x5ac>
 8001550:	2680      	movs	r6, #128	@ 0x80
 8001552:	2500      	movs	r5, #0
 8001554:	4c7f      	ldr	r4, [pc, #508]	@ (8001754 <__aeabi_dadd+0x6e0>)
 8001556:	0336      	lsls	r6, r6, #12
 8001558:	e6d5      	b.n	8001306 <__aeabi_dadd+0x292>
 800155a:	4665      	mov	r5, ip
 800155c:	000c      	movs	r4, r1
 800155e:	001e      	movs	r6, r3
 8001560:	08d0      	lsrs	r0, r2, #3
 8001562:	e6e4      	b.n	800132e <__aeabi_dadd+0x2ba>
 8001564:	444a      	add	r2, r9
 8001566:	454a      	cmp	r2, r9
 8001568:	4180      	sbcs	r0, r0
 800156a:	18f3      	adds	r3, r6, r3
 800156c:	4240      	negs	r0, r0
 800156e:	1818      	adds	r0, r3, r0
 8001570:	0011      	movs	r1, r2
 8001572:	0203      	lsls	r3, r0, #8
 8001574:	d400      	bmi.n	8001578 <__aeabi_dadd+0x504>
 8001576:	e096      	b.n	80016a6 <__aeabi_dadd+0x632>
 8001578:	4b77      	ldr	r3, [pc, #476]	@ (8001758 <__aeabi_dadd+0x6e4>)
 800157a:	0849      	lsrs	r1, r1, #1
 800157c:	4018      	ands	r0, r3
 800157e:	07c3      	lsls	r3, r0, #31
 8001580:	430b      	orrs	r3, r1
 8001582:	0844      	lsrs	r4, r0, #1
 8001584:	0749      	lsls	r1, r1, #29
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x516>
 8001588:	e129      	b.n	80017de <__aeabi_dadd+0x76a>
 800158a:	220f      	movs	r2, #15
 800158c:	401a      	ands	r2, r3
 800158e:	2a04      	cmp	r2, #4
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x520>
 8001592:	e0ea      	b.n	800176a <__aeabi_dadd+0x6f6>
 8001594:	1d1f      	adds	r7, r3, #4
 8001596:	429f      	cmp	r7, r3
 8001598:	41b6      	sbcs	r6, r6
 800159a:	4276      	negs	r6, r6
 800159c:	1936      	adds	r6, r6, r4
 800159e:	2402      	movs	r4, #2
 80015a0:	e6c4      	b.n	800132c <__aeabi_dadd+0x2b8>
 80015a2:	4649      	mov	r1, r9
 80015a4:	1a8f      	subs	r7, r1, r2
 80015a6:	45b9      	cmp	r9, r7
 80015a8:	4180      	sbcs	r0, r0
 80015aa:	1af6      	subs	r6, r6, r3
 80015ac:	4240      	negs	r0, r0
 80015ae:	1a36      	subs	r6, r6, r0
 80015b0:	0233      	lsls	r3, r6, #8
 80015b2:	d406      	bmi.n	80015c2 <__aeabi_dadd+0x54e>
 80015b4:	0773      	lsls	r3, r6, #29
 80015b6:	08ff      	lsrs	r7, r7, #3
 80015b8:	2101      	movs	r1, #1
 80015ba:	431f      	orrs	r7, r3
 80015bc:	08f0      	lsrs	r0, r6, #3
 80015be:	e690      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80015c0:	4665      	mov	r5, ip
 80015c2:	2401      	movs	r4, #1
 80015c4:	e5ab      	b.n	800111e <__aeabi_dadd+0xaa>
 80015c6:	464b      	mov	r3, r9
 80015c8:	0777      	lsls	r7, r6, #29
 80015ca:	08d8      	lsrs	r0, r3, #3
 80015cc:	4307      	orrs	r7, r0
 80015ce:	08f0      	lsrs	r0, r6, #3
 80015d0:	e6b4      	b.n	800133c <__aeabi_dadd+0x2c8>
 80015d2:	000f      	movs	r7, r1
 80015d4:	0018      	movs	r0, r3
 80015d6:	3f20      	subs	r7, #32
 80015d8:	40f8      	lsrs	r0, r7
 80015da:	4684      	mov	ip, r0
 80015dc:	2920      	cmp	r1, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x574>
 80015e0:	2740      	movs	r7, #64	@ 0x40
 80015e2:	1a79      	subs	r1, r7, r1
 80015e4:	408b      	lsls	r3, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	1e53      	subs	r3, r2, #1
 80015ea:	419a      	sbcs	r2, r3
 80015ec:	4663      	mov	r3, ip
 80015ee:	0017      	movs	r7, r2
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e635      	b.n	8001260 <__aeabi_dadd+0x1ec>
 80015f4:	2500      	movs	r5, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2600      	movs	r6, #0
 80015fa:	e684      	b.n	8001306 <__aeabi_dadd+0x292>
 80015fc:	000c      	movs	r4, r1
 80015fe:	0035      	movs	r5, r6
 8001600:	3c20      	subs	r4, #32
 8001602:	40e5      	lsrs	r5, r4
 8001604:	2920      	cmp	r1, #32
 8001606:	d005      	beq.n	8001614 <__aeabi_dadd+0x5a0>
 8001608:	2440      	movs	r4, #64	@ 0x40
 800160a:	1a61      	subs	r1, r4, r1
 800160c:	408e      	lsls	r6, r1
 800160e:	4649      	mov	r1, r9
 8001610:	4331      	orrs	r1, r6
 8001612:	4689      	mov	r9, r1
 8001614:	4648      	mov	r0, r9
 8001616:	1e41      	subs	r1, r0, #1
 8001618:	4188      	sbcs	r0, r1
 800161a:	0007      	movs	r7, r0
 800161c:	432f      	orrs	r7, r5
 800161e:	e5ef      	b.n	8001200 <__aeabi_dadd+0x18c>
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	075f      	lsls	r7, r3, #29
 8001624:	4665      	mov	r5, ip
 8001626:	4317      	orrs	r7, r2
 8001628:	08d8      	lsrs	r0, r3, #3
 800162a:	e687      	b.n	800133c <__aeabi_dadd+0x2c8>
 800162c:	1a17      	subs	r7, r2, r0
 800162e:	42ba      	cmp	r2, r7
 8001630:	4192      	sbcs	r2, r2
 8001632:	1b9e      	subs	r6, r3, r6
 8001634:	4252      	negs	r2, r2
 8001636:	1ab6      	subs	r6, r6, r2
 8001638:	0233      	lsls	r3, r6, #8
 800163a:	d4c1      	bmi.n	80015c0 <__aeabi_dadd+0x54c>
 800163c:	0773      	lsls	r3, r6, #29
 800163e:	08ff      	lsrs	r7, r7, #3
 8001640:	4665      	mov	r5, ip
 8001642:	2101      	movs	r1, #1
 8001644:	431f      	orrs	r7, r3
 8001646:	08f0      	lsrs	r0, r6, #3
 8001648:	e64b      	b.n	80012e2 <__aeabi_dadd+0x26e>
 800164a:	2f00      	cmp	r7, #0
 800164c:	d07b      	beq.n	8001746 <__aeabi_dadd+0x6d2>
 800164e:	4665      	mov	r5, ip
 8001650:	001e      	movs	r6, r3
 8001652:	4691      	mov	r9, r2
 8001654:	e63f      	b.n	80012d6 <__aeabi_dadd+0x262>
 8001656:	1a81      	subs	r1, r0, r2
 8001658:	4688      	mov	r8, r1
 800165a:	45c1      	cmp	r9, r8
 800165c:	41a4      	sbcs	r4, r4
 800165e:	1af1      	subs	r1, r6, r3
 8001660:	4264      	negs	r4, r4
 8001662:	1b09      	subs	r1, r1, r4
 8001664:	2480      	movs	r4, #128	@ 0x80
 8001666:	0424      	lsls	r4, r4, #16
 8001668:	4221      	tst	r1, r4
 800166a:	d077      	beq.n	800175c <__aeabi_dadd+0x6e8>
 800166c:	1a10      	subs	r0, r2, r0
 800166e:	4282      	cmp	r2, r0
 8001670:	4192      	sbcs	r2, r2
 8001672:	0007      	movs	r7, r0
 8001674:	1b9e      	subs	r6, r3, r6
 8001676:	4252      	negs	r2, r2
 8001678:	1ab6      	subs	r6, r6, r2
 800167a:	4337      	orrs	r7, r6
 800167c:	d000      	beq.n	8001680 <__aeabi_dadd+0x60c>
 800167e:	e0a0      	b.n	80017c2 <__aeabi_dadd+0x74e>
 8001680:	4665      	mov	r5, ip
 8001682:	2400      	movs	r4, #0
 8001684:	2600      	movs	r6, #0
 8001686:	e63e      	b.n	8001306 <__aeabi_dadd+0x292>
 8001688:	075f      	lsls	r7, r3, #29
 800168a:	08d2      	lsrs	r2, r2, #3
 800168c:	4665      	mov	r5, ip
 800168e:	4317      	orrs	r7, r2
 8001690:	08d8      	lsrs	r0, r3, #3
 8001692:	e653      	b.n	800133c <__aeabi_dadd+0x2c8>
 8001694:	1881      	adds	r1, r0, r2
 8001696:	4291      	cmp	r1, r2
 8001698:	4192      	sbcs	r2, r2
 800169a:	18f0      	adds	r0, r6, r3
 800169c:	4252      	negs	r2, r2
 800169e:	1880      	adds	r0, r0, r2
 80016a0:	0203      	lsls	r3, r0, #8
 80016a2:	d500      	bpl.n	80016a6 <__aeabi_dadd+0x632>
 80016a4:	e768      	b.n	8001578 <__aeabi_dadd+0x504>
 80016a6:	0747      	lsls	r7, r0, #29
 80016a8:	08c9      	lsrs	r1, r1, #3
 80016aa:	430f      	orrs	r7, r1
 80016ac:	08c0      	lsrs	r0, r0, #3
 80016ae:	2101      	movs	r1, #1
 80016b0:	e617      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80016b2:	08d2      	lsrs	r2, r2, #3
 80016b4:	075f      	lsls	r7, r3, #29
 80016b6:	4317      	orrs	r7, r2
 80016b8:	08d8      	lsrs	r0, r3, #3
 80016ba:	e63f      	b.n	800133c <__aeabi_dadd+0x2c8>
 80016bc:	000c      	movs	r4, r1
 80016be:	2600      	movs	r6, #0
 80016c0:	2700      	movs	r7, #0
 80016c2:	e620      	b.n	8001306 <__aeabi_dadd+0x292>
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d156      	bne.n	8001776 <__aeabi_dadd+0x702>
 80016c8:	075f      	lsls	r7, r3, #29
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	4317      	orrs	r7, r2
 80016ce:	08d8      	lsrs	r0, r3, #3
 80016d0:	e634      	b.n	800133c <__aeabi_dadd+0x2c8>
 80016d2:	000c      	movs	r4, r1
 80016d4:	001e      	movs	r6, r3
 80016d6:	08d0      	lsrs	r0, r2, #3
 80016d8:	e629      	b.n	800132e <__aeabi_dadd+0x2ba>
 80016da:	08c1      	lsrs	r1, r0, #3
 80016dc:	0770      	lsls	r0, r6, #29
 80016de:	4301      	orrs	r1, r0
 80016e0:	08f0      	lsrs	r0, r6, #3
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	d062      	beq.n	80017ac <__aeabi_dadd+0x738>
 80016e6:	2480      	movs	r4, #128	@ 0x80
 80016e8:	0324      	lsls	r4, r4, #12
 80016ea:	4220      	tst	r0, r4
 80016ec:	d007      	beq.n	80016fe <__aeabi_dadd+0x68a>
 80016ee:	08de      	lsrs	r6, r3, #3
 80016f0:	4226      	tst	r6, r4
 80016f2:	d104      	bne.n	80016fe <__aeabi_dadd+0x68a>
 80016f4:	4665      	mov	r5, ip
 80016f6:	0030      	movs	r0, r6
 80016f8:	08d1      	lsrs	r1, r2, #3
 80016fa:	075b      	lsls	r3, r3, #29
 80016fc:	4319      	orrs	r1, r3
 80016fe:	0f4f      	lsrs	r7, r1, #29
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	08c9      	lsrs	r1, r1, #3
 8001704:	077f      	lsls	r7, r7, #29
 8001706:	430f      	orrs	r7, r1
 8001708:	e618      	b.n	800133c <__aeabi_dadd+0x2c8>
 800170a:	000c      	movs	r4, r1
 800170c:	0030      	movs	r0, r6
 800170e:	3c20      	subs	r4, #32
 8001710:	40e0      	lsrs	r0, r4
 8001712:	4684      	mov	ip, r0
 8001714:	2920      	cmp	r1, #32
 8001716:	d005      	beq.n	8001724 <__aeabi_dadd+0x6b0>
 8001718:	2440      	movs	r4, #64	@ 0x40
 800171a:	1a61      	subs	r1, r4, r1
 800171c:	408e      	lsls	r6, r1
 800171e:	4649      	mov	r1, r9
 8001720:	4331      	orrs	r1, r6
 8001722:	4689      	mov	r9, r1
 8001724:	4648      	mov	r0, r9
 8001726:	1e41      	subs	r1, r0, #1
 8001728:	4188      	sbcs	r0, r1
 800172a:	4661      	mov	r1, ip
 800172c:	0007      	movs	r7, r0
 800172e:	430f      	orrs	r7, r1
 8001730:	e630      	b.n	8001394 <__aeabi_dadd+0x320>
 8001732:	2120      	movs	r1, #32
 8001734:	2700      	movs	r7, #0
 8001736:	1a09      	subs	r1, r1, r0
 8001738:	e50e      	b.n	8001158 <__aeabi_dadd+0xe4>
 800173a:	001e      	movs	r6, r3
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x6ce>
 8001740:	e522      	b.n	8001188 <__aeabi_dadd+0x114>
 8001742:	2400      	movs	r4, #0
 8001744:	e758      	b.n	80015f8 <__aeabi_dadd+0x584>
 8001746:	2500      	movs	r5, #0
 8001748:	2400      	movs	r4, #0
 800174a:	2600      	movs	r6, #0
 800174c:	e5db      	b.n	8001306 <__aeabi_dadd+0x292>
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	000007fe 	.word	0x000007fe
 8001754:	000007ff 	.word	0x000007ff
 8001758:	ff7fffff 	.word	0xff7fffff
 800175c:	4647      	mov	r7, r8
 800175e:	430f      	orrs	r7, r1
 8001760:	d100      	bne.n	8001764 <__aeabi_dadd+0x6f0>
 8001762:	e747      	b.n	80015f4 <__aeabi_dadd+0x580>
 8001764:	000e      	movs	r6, r1
 8001766:	46c1      	mov	r9, r8
 8001768:	e5b5      	b.n	80012d6 <__aeabi_dadd+0x262>
 800176a:	08df      	lsrs	r7, r3, #3
 800176c:	0764      	lsls	r4, r4, #29
 800176e:	2102      	movs	r1, #2
 8001770:	4327      	orrs	r7, r4
 8001772:	0900      	lsrs	r0, r0, #4
 8001774:	e5b5      	b.n	80012e2 <__aeabi_dadd+0x26e>
 8001776:	0019      	movs	r1, r3
 8001778:	08c0      	lsrs	r0, r0, #3
 800177a:	0777      	lsls	r7, r6, #29
 800177c:	4307      	orrs	r7, r0
 800177e:	4311      	orrs	r1, r2
 8001780:	08f0      	lsrs	r0, r6, #3
 8001782:	2900      	cmp	r1, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x714>
 8001786:	e5d9      	b.n	800133c <__aeabi_dadd+0x2c8>
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0309      	lsls	r1, r1, #12
 800178c:	4208      	tst	r0, r1
 800178e:	d007      	beq.n	80017a0 <__aeabi_dadd+0x72c>
 8001790:	08dc      	lsrs	r4, r3, #3
 8001792:	420c      	tst	r4, r1
 8001794:	d104      	bne.n	80017a0 <__aeabi_dadd+0x72c>
 8001796:	08d2      	lsrs	r2, r2, #3
 8001798:	075b      	lsls	r3, r3, #29
 800179a:	431a      	orrs	r2, r3
 800179c:	0017      	movs	r7, r2
 800179e:	0020      	movs	r0, r4
 80017a0:	0f7b      	lsrs	r3, r7, #29
 80017a2:	00ff      	lsls	r7, r7, #3
 80017a4:	08ff      	lsrs	r7, r7, #3
 80017a6:	075b      	lsls	r3, r3, #29
 80017a8:	431f      	orrs	r7, r3
 80017aa:	e5c7      	b.n	800133c <__aeabi_dadd+0x2c8>
 80017ac:	000f      	movs	r7, r1
 80017ae:	e5c5      	b.n	800133c <__aeabi_dadd+0x2c8>
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <__aeabi_dadd+0x788>)
 80017b2:	08d2      	lsrs	r2, r2, #3
 80017b4:	4033      	ands	r3, r6
 80017b6:	075f      	lsls	r7, r3, #29
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	2401      	movs	r4, #1
 80017bc:	4317      	orrs	r7, r2
 80017be:	0b1e      	lsrs	r6, r3, #12
 80017c0:	e5a1      	b.n	8001306 <__aeabi_dadd+0x292>
 80017c2:	4226      	tst	r6, r4
 80017c4:	d012      	beq.n	80017ec <__aeabi_dadd+0x778>
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <__aeabi_dadd+0x788>)
 80017c8:	4665      	mov	r5, ip
 80017ca:	0002      	movs	r2, r0
 80017cc:	2401      	movs	r4, #1
 80017ce:	401e      	ands	r6, r3
 80017d0:	e4e6      	b.n	80011a0 <__aeabi_dadd+0x12c>
 80017d2:	0021      	movs	r1, r4
 80017d4:	e585      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80017d6:	0017      	movs	r7, r2
 80017d8:	e5a8      	b.n	800132c <__aeabi_dadd+0x2b8>
 80017da:	003a      	movs	r2, r7
 80017dc:	e4d4      	b.n	8001188 <__aeabi_dadd+0x114>
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	0764      	lsls	r4, r4, #29
 80017e2:	431c      	orrs	r4, r3
 80017e4:	0027      	movs	r7, r4
 80017e6:	2102      	movs	r1, #2
 80017e8:	0900      	lsrs	r0, r0, #4
 80017ea:	e57a      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80017ec:	08c0      	lsrs	r0, r0, #3
 80017ee:	0777      	lsls	r7, r6, #29
 80017f0:	4307      	orrs	r7, r0
 80017f2:	4665      	mov	r5, ip
 80017f4:	2100      	movs	r1, #0
 80017f6:	08f0      	lsrs	r0, r6, #3
 80017f8:	e573      	b.n	80012e2 <__aeabi_dadd+0x26e>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	ff7fffff 	.word	0xff7fffff

08001800 <__aeabi_ddiv>:
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	46de      	mov	lr, fp
 8001804:	4645      	mov	r5, r8
 8001806:	4657      	mov	r7, sl
 8001808:	464e      	mov	r6, r9
 800180a:	b5e0      	push	{r5, r6, r7, lr}
 800180c:	b087      	sub	sp, #28
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	030b      	lsls	r3, r1, #12
 8001814:	0b1b      	lsrs	r3, r3, #12
 8001816:	469b      	mov	fp, r3
 8001818:	0fca      	lsrs	r2, r1, #31
 800181a:	004b      	lsls	r3, r1, #1
 800181c:	0004      	movs	r4, r0
 800181e:	4680      	mov	r8, r0
 8001820:	0d5b      	lsrs	r3, r3, #21
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	d100      	bne.n	8001828 <__aeabi_ddiv+0x28>
 8001826:	e098      	b.n	800195a <__aeabi_ddiv+0x15a>
 8001828:	4a7c      	ldr	r2, [pc, #496]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d037      	beq.n	800189e <__aeabi_ddiv+0x9e>
 800182e:	4659      	mov	r1, fp
 8001830:	0f42      	lsrs	r2, r0, #29
 8001832:	00c9      	lsls	r1, r1, #3
 8001834:	430a      	orrs	r2, r1
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	4311      	orrs	r1, r2
 800183c:	00c2      	lsls	r2, r0, #3
 800183e:	4690      	mov	r8, r2
 8001840:	4a77      	ldr	r2, [pc, #476]	@ (8001a20 <__aeabi_ddiv+0x220>)
 8001842:	4689      	mov	r9, r1
 8001844:	4692      	mov	sl, r2
 8001846:	449a      	add	sl, r3
 8001848:	2300      	movs	r3, #0
 800184a:	2400      	movs	r4, #0
 800184c:	9303      	str	r3, [sp, #12]
 800184e:	9e00      	ldr	r6, [sp, #0]
 8001850:	9f01      	ldr	r7, [sp, #4]
 8001852:	033b      	lsls	r3, r7, #12
 8001854:	0b1b      	lsrs	r3, r3, #12
 8001856:	469b      	mov	fp, r3
 8001858:	007b      	lsls	r3, r7, #1
 800185a:	0030      	movs	r0, r6
 800185c:	0d5b      	lsrs	r3, r3, #21
 800185e:	0ffd      	lsrs	r5, r7, #31
 8001860:	2b00      	cmp	r3, #0
 8001862:	d059      	beq.n	8001918 <__aeabi_ddiv+0x118>
 8001864:	4a6d      	ldr	r2, [pc, #436]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d048      	beq.n	80018fc <__aeabi_ddiv+0xfc>
 800186a:	4659      	mov	r1, fp
 800186c:	0f72      	lsrs	r2, r6, #29
 800186e:	00c9      	lsls	r1, r1, #3
 8001870:	430a      	orrs	r2, r1
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0409      	lsls	r1, r1, #16
 8001876:	4311      	orrs	r1, r2
 8001878:	468b      	mov	fp, r1
 800187a:	4969      	ldr	r1, [pc, #420]	@ (8001a20 <__aeabi_ddiv+0x220>)
 800187c:	00f2      	lsls	r2, r6, #3
 800187e:	468c      	mov	ip, r1
 8001880:	4651      	mov	r1, sl
 8001882:	4463      	add	r3, ip
 8001884:	1acb      	subs	r3, r1, r3
 8001886:	469a      	mov	sl, r3
 8001888:	2100      	movs	r1, #0
 800188a:	9e02      	ldr	r6, [sp, #8]
 800188c:	406e      	eors	r6, r5
 800188e:	b2f6      	uxtb	r6, r6
 8001890:	2c0f      	cmp	r4, #15
 8001892:	d900      	bls.n	8001896 <__aeabi_ddiv+0x96>
 8001894:	e0ce      	b.n	8001a34 <__aeabi_ddiv+0x234>
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <__aeabi_ddiv+0x224>)
 8001898:	00a4      	lsls	r4, r4, #2
 800189a:	591b      	ldr	r3, [r3, r4]
 800189c:	469f      	mov	pc, r3
 800189e:	465a      	mov	r2, fp
 80018a0:	4302      	orrs	r2, r0
 80018a2:	4691      	mov	r9, r2
 80018a4:	d000      	beq.n	80018a8 <__aeabi_ddiv+0xa8>
 80018a6:	e090      	b.n	80019ca <__aeabi_ddiv+0x1ca>
 80018a8:	469a      	mov	sl, r3
 80018aa:	2302      	movs	r3, #2
 80018ac:	4690      	mov	r8, r2
 80018ae:	2408      	movs	r4, #8
 80018b0:	9303      	str	r3, [sp, #12]
 80018b2:	e7cc      	b.n	800184e <__aeabi_ddiv+0x4e>
 80018b4:	46cb      	mov	fp, r9
 80018b6:	4642      	mov	r2, r8
 80018b8:	9d02      	ldr	r5, [sp, #8]
 80018ba:	9903      	ldr	r1, [sp, #12]
 80018bc:	2902      	cmp	r1, #2
 80018be:	d100      	bne.n	80018c2 <__aeabi_ddiv+0xc2>
 80018c0:	e1de      	b.n	8001c80 <__aeabi_ddiv+0x480>
 80018c2:	2903      	cmp	r1, #3
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0xc8>
 80018c6:	e08d      	b.n	80019e4 <__aeabi_ddiv+0x1e4>
 80018c8:	2901      	cmp	r1, #1
 80018ca:	d000      	beq.n	80018ce <__aeabi_ddiv+0xce>
 80018cc:	e179      	b.n	8001bc2 <__aeabi_ddiv+0x3c2>
 80018ce:	002e      	movs	r6, r5
 80018d0:	2200      	movs	r2, #0
 80018d2:	2300      	movs	r3, #0
 80018d4:	2400      	movs	r4, #0
 80018d6:	4690      	mov	r8, r2
 80018d8:	051b      	lsls	r3, r3, #20
 80018da:	4323      	orrs	r3, r4
 80018dc:	07f6      	lsls	r6, r6, #31
 80018de:	4333      	orrs	r3, r6
 80018e0:	4640      	mov	r0, r8
 80018e2:	0019      	movs	r1, r3
 80018e4:	b007      	add	sp, #28
 80018e6:	bcf0      	pop	{r4, r5, r6, r7}
 80018e8:	46bb      	mov	fp, r7
 80018ea:	46b2      	mov	sl, r6
 80018ec:	46a9      	mov	r9, r5
 80018ee:	46a0      	mov	r8, r4
 80018f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f2:	2200      	movs	r2, #0
 80018f4:	2400      	movs	r4, #0
 80018f6:	4690      	mov	r8, r2
 80018f8:	4b48      	ldr	r3, [pc, #288]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 80018fa:	e7ed      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 80018fc:	465a      	mov	r2, fp
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	431a      	orrs	r2, r3
 8001902:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <__aeabi_ddiv+0x228>)
 8001904:	469c      	mov	ip, r3
 8001906:	44e2      	add	sl, ip
 8001908:	2a00      	cmp	r2, #0
 800190a:	d159      	bne.n	80019c0 <__aeabi_ddiv+0x1c0>
 800190c:	2302      	movs	r3, #2
 800190e:	431c      	orrs	r4, r3
 8001910:	2300      	movs	r3, #0
 8001912:	2102      	movs	r1, #2
 8001914:	469b      	mov	fp, r3
 8001916:	e7b8      	b.n	800188a <__aeabi_ddiv+0x8a>
 8001918:	465a      	mov	r2, fp
 800191a:	9b00      	ldr	r3, [sp, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	d049      	beq.n	80019b4 <__aeabi_ddiv+0x1b4>
 8001920:	465b      	mov	r3, fp
 8001922:	2b00      	cmp	r3, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_ddiv+0x128>
 8001926:	e19c      	b.n	8001c62 <__aeabi_ddiv+0x462>
 8001928:	4658      	mov	r0, fp
 800192a:	f001 fc0d 	bl	8003148 <__clzsi2>
 800192e:	0002      	movs	r2, r0
 8001930:	0003      	movs	r3, r0
 8001932:	3a0b      	subs	r2, #11
 8001934:	271d      	movs	r7, #29
 8001936:	9e00      	ldr	r6, [sp, #0]
 8001938:	1aba      	subs	r2, r7, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4658      	mov	r0, fp
 800193e:	40d6      	lsrs	r6, r2
 8001940:	3908      	subs	r1, #8
 8001942:	4088      	lsls	r0, r1
 8001944:	0032      	movs	r2, r6
 8001946:	4302      	orrs	r2, r0
 8001948:	4693      	mov	fp, r2
 800194a:	9a00      	ldr	r2, [sp, #0]
 800194c:	408a      	lsls	r2, r1
 800194e:	4937      	ldr	r1, [pc, #220]	@ (8001a2c <__aeabi_ddiv+0x22c>)
 8001950:	4453      	add	r3, sl
 8001952:	468a      	mov	sl, r1
 8001954:	2100      	movs	r1, #0
 8001956:	449a      	add	sl, r3
 8001958:	e797      	b.n	800188a <__aeabi_ddiv+0x8a>
 800195a:	465b      	mov	r3, fp
 800195c:	4303      	orrs	r3, r0
 800195e:	4699      	mov	r9, r3
 8001960:	d021      	beq.n	80019a6 <__aeabi_ddiv+0x1a6>
 8001962:	465b      	mov	r3, fp
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x16a>
 8001968:	e169      	b.n	8001c3e <__aeabi_ddiv+0x43e>
 800196a:	4658      	mov	r0, fp
 800196c:	f001 fbec 	bl	8003148 <__clzsi2>
 8001970:	230b      	movs	r3, #11
 8001972:	425b      	negs	r3, r3
 8001974:	469c      	mov	ip, r3
 8001976:	0002      	movs	r2, r0
 8001978:	4484      	add	ip, r0
 800197a:	4666      	mov	r6, ip
 800197c:	231d      	movs	r3, #29
 800197e:	1b9b      	subs	r3, r3, r6
 8001980:	0026      	movs	r6, r4
 8001982:	0011      	movs	r1, r2
 8001984:	4658      	mov	r0, fp
 8001986:	40de      	lsrs	r6, r3
 8001988:	3908      	subs	r1, #8
 800198a:	4088      	lsls	r0, r1
 800198c:	0033      	movs	r3, r6
 800198e:	4303      	orrs	r3, r0
 8001990:	4699      	mov	r9, r3
 8001992:	0023      	movs	r3, r4
 8001994:	408b      	lsls	r3, r1
 8001996:	4698      	mov	r8, r3
 8001998:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <__aeabi_ddiv+0x230>)
 800199a:	2400      	movs	r4, #0
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	469a      	mov	sl, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	e753      	b.n	800184e <__aeabi_ddiv+0x4e>
 80019a6:	2300      	movs	r3, #0
 80019a8:	4698      	mov	r8, r3
 80019aa:	469a      	mov	sl, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	2404      	movs	r4, #4
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	e74c      	b.n	800184e <__aeabi_ddiv+0x4e>
 80019b4:	2301      	movs	r3, #1
 80019b6:	431c      	orrs	r4, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	469b      	mov	fp, r3
 80019be:	e764      	b.n	800188a <__aeabi_ddiv+0x8a>
 80019c0:	2303      	movs	r3, #3
 80019c2:	0032      	movs	r2, r6
 80019c4:	2103      	movs	r1, #3
 80019c6:	431c      	orrs	r4, r3
 80019c8:	e75f      	b.n	800188a <__aeabi_ddiv+0x8a>
 80019ca:	469a      	mov	sl, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	46d9      	mov	r9, fp
 80019d0:	240c      	movs	r4, #12
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	e73b      	b.n	800184e <__aeabi_ddiv+0x4e>
 80019d6:	2300      	movs	r3, #0
 80019d8:	2480      	movs	r4, #128	@ 0x80
 80019da:	4698      	mov	r8, r3
 80019dc:	2600      	movs	r6, #0
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 80019e0:	0324      	lsls	r4, r4, #12
 80019e2:	e779      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 80019e4:	2480      	movs	r4, #128	@ 0x80
 80019e6:	465b      	mov	r3, fp
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	431c      	orrs	r4, r3
 80019ec:	0324      	lsls	r4, r4, #12
 80019ee:	002e      	movs	r6, r5
 80019f0:	4690      	mov	r8, r2
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 80019f4:	0b24      	lsrs	r4, r4, #12
 80019f6:	e76f      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 80019f8:	2480      	movs	r4, #128	@ 0x80
 80019fa:	464b      	mov	r3, r9
 80019fc:	0324      	lsls	r4, r4, #12
 80019fe:	4223      	tst	r3, r4
 8001a00:	d002      	beq.n	8001a08 <__aeabi_ddiv+0x208>
 8001a02:	465b      	mov	r3, fp
 8001a04:	4223      	tst	r3, r4
 8001a06:	d0f0      	beq.n	80019ea <__aeabi_ddiv+0x1ea>
 8001a08:	2480      	movs	r4, #128	@ 0x80
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	0324      	lsls	r4, r4, #12
 8001a0e:	431c      	orrs	r4, r3
 8001a10:	0324      	lsls	r4, r4, #12
 8001a12:	9e02      	ldr	r6, [sp, #8]
 8001a14:	4b01      	ldr	r3, [pc, #4]	@ (8001a1c <__aeabi_ddiv+0x21c>)
 8001a16:	0b24      	lsrs	r4, r4, #12
 8001a18:	e75e      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	000007ff 	.word	0x000007ff
 8001a20:	fffffc01 	.word	0xfffffc01
 8001a24:	0800c534 	.word	0x0800c534
 8001a28:	fffff801 	.word	0xfffff801
 8001a2c:	000003f3 	.word	0x000003f3
 8001a30:	fffffc0d 	.word	0xfffffc0d
 8001a34:	45cb      	cmp	fp, r9
 8001a36:	d200      	bcs.n	8001a3a <__aeabi_ddiv+0x23a>
 8001a38:	e0f8      	b.n	8001c2c <__aeabi_ddiv+0x42c>
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_ddiv+0x23e>
 8001a3c:	e0f3      	b.n	8001c26 <__aeabi_ddiv+0x426>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	425b      	negs	r3, r3
 8001a42:	469c      	mov	ip, r3
 8001a44:	4644      	mov	r4, r8
 8001a46:	4648      	mov	r0, r9
 8001a48:	2500      	movs	r5, #0
 8001a4a:	44e2      	add	sl, ip
 8001a4c:	465b      	mov	r3, fp
 8001a4e:	0e17      	lsrs	r7, r2, #24
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	431f      	orrs	r7, r3
 8001a54:	0c19      	lsrs	r1, r3, #16
 8001a56:	043b      	lsls	r3, r7, #16
 8001a58:	0212      	lsls	r2, r2, #8
 8001a5a:	9700      	str	r7, [sp, #0]
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	4691      	mov	r9, r2
 8001a60:	9102      	str	r1, [sp, #8]
 8001a62:	9703      	str	r7, [sp, #12]
 8001a64:	f7fe fbee 	bl	8000244 <__aeabi_uidivmod>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	437a      	muls	r2, r7
 8001a6c:	040b      	lsls	r3, r1, #16
 8001a6e:	0c21      	lsrs	r1, r4, #16
 8001a70:	4680      	mov	r8, r0
 8001a72:	4319      	orrs	r1, r3
 8001a74:	428a      	cmp	r2, r1
 8001a76:	d909      	bls.n	8001a8c <__aeabi_ddiv+0x28c>
 8001a78:	9f00      	ldr	r7, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	46bc      	mov	ip, r7
 8001a7e:	425b      	negs	r3, r3
 8001a80:	4461      	add	r1, ip
 8001a82:	469c      	mov	ip, r3
 8001a84:	44e0      	add	r8, ip
 8001a86:	428f      	cmp	r7, r1
 8001a88:	d800      	bhi.n	8001a8c <__aeabi_ddiv+0x28c>
 8001a8a:	e15c      	b.n	8001d46 <__aeabi_ddiv+0x546>
 8001a8c:	1a88      	subs	r0, r1, r2
 8001a8e:	9902      	ldr	r1, [sp, #8]
 8001a90:	f7fe fbd8 	bl	8000244 <__aeabi_uidivmod>
 8001a94:	9a03      	ldr	r2, [sp, #12]
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4342      	muls	r2, r0
 8001a9a:	0409      	lsls	r1, r1, #16
 8001a9c:	0c24      	lsrs	r4, r4, #16
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	430c      	orrs	r4, r1
 8001aa2:	42a2      	cmp	r2, r4
 8001aa4:	d906      	bls.n	8001ab4 <__aeabi_ddiv+0x2b4>
 8001aa6:	9900      	ldr	r1, [sp, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	468c      	mov	ip, r1
 8001aac:	4464      	add	r4, ip
 8001aae:	42a1      	cmp	r1, r4
 8001ab0:	d800      	bhi.n	8001ab4 <__aeabi_ddiv+0x2b4>
 8001ab2:	e142      	b.n	8001d3a <__aeabi_ddiv+0x53a>
 8001ab4:	1aa0      	subs	r0, r4, r2
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	0412      	lsls	r2, r2, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	4693      	mov	fp, r2
 8001abe:	464b      	mov	r3, r9
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	040b      	lsls	r3, r1, #16
 8001aca:	4649      	mov	r1, r9
 8001acc:	0409      	lsls	r1, r1, #16
 8001ace:	0c09      	lsrs	r1, r1, #16
 8001ad0:	000c      	movs	r4, r1
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	435c      	muls	r4, r3
 8001ad6:	0c12      	lsrs	r2, r2, #16
 8001ad8:	437b      	muls	r3, r7
 8001ada:	4688      	mov	r8, r1
 8001adc:	4351      	muls	r1, r2
 8001ade:	437a      	muls	r2, r7
 8001ae0:	0c27      	lsrs	r7, r4, #16
 8001ae2:	46bc      	mov	ip, r7
 8001ae4:	185b      	adds	r3, r3, r1
 8001ae6:	4463      	add	r3, ip
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d903      	bls.n	8001af4 <__aeabi_ddiv+0x2f4>
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	468c      	mov	ip, r1
 8001af2:	4462      	add	r2, ip
 8001af4:	0c19      	lsrs	r1, r3, #16
 8001af6:	0424      	lsls	r4, r4, #16
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	0c24      	lsrs	r4, r4, #16
 8001afc:	188a      	adds	r2, r1, r2
 8001afe:	191c      	adds	r4, r3, r4
 8001b00:	4290      	cmp	r0, r2
 8001b02:	d302      	bcc.n	8001b0a <__aeabi_ddiv+0x30a>
 8001b04:	d116      	bne.n	8001b34 <__aeabi_ddiv+0x334>
 8001b06:	42a5      	cmp	r5, r4
 8001b08:	d214      	bcs.n	8001b34 <__aeabi_ddiv+0x334>
 8001b0a:	465b      	mov	r3, fp
 8001b0c:	9f00      	ldr	r7, [sp, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	444d      	add	r5, r9
 8001b12:	9305      	str	r3, [sp, #20]
 8001b14:	454d      	cmp	r5, r9
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	46bc      	mov	ip, r7
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	4463      	add	r3, ip
 8001b1e:	18c0      	adds	r0, r0, r3
 8001b20:	4287      	cmp	r7, r0
 8001b22:	d300      	bcc.n	8001b26 <__aeabi_ddiv+0x326>
 8001b24:	e102      	b.n	8001d2c <__aeabi_ddiv+0x52c>
 8001b26:	4282      	cmp	r2, r0
 8001b28:	d900      	bls.n	8001b2c <__aeabi_ddiv+0x32c>
 8001b2a:	e129      	b.n	8001d80 <__aeabi_ddiv+0x580>
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_ddiv+0x330>
 8001b2e:	e124      	b.n	8001d7a <__aeabi_ddiv+0x57a>
 8001b30:	9b05      	ldr	r3, [sp, #20]
 8001b32:	469b      	mov	fp, r3
 8001b34:	1b2c      	subs	r4, r5, r4
 8001b36:	42a5      	cmp	r5, r4
 8001b38:	41ad      	sbcs	r5, r5
 8001b3a:	9b00      	ldr	r3, [sp, #0]
 8001b3c:	1a80      	subs	r0, r0, r2
 8001b3e:	426d      	negs	r5, r5
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	4283      	cmp	r3, r0
 8001b44:	d100      	bne.n	8001b48 <__aeabi_ddiv+0x348>
 8001b46:	e10f      	b.n	8001d68 <__aeabi_ddiv+0x568>
 8001b48:	9902      	ldr	r1, [sp, #8]
 8001b4a:	f7fe fb7b 	bl	8000244 <__aeabi_uidivmod>
 8001b4e:	9a03      	ldr	r2, [sp, #12]
 8001b50:	040b      	lsls	r3, r1, #16
 8001b52:	4342      	muls	r2, r0
 8001b54:	0c21      	lsrs	r1, r4, #16
 8001b56:	0005      	movs	r5, r0
 8001b58:	4319      	orrs	r1, r3
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x360>
 8001b5e:	e0cb      	b.n	8001cf8 <__aeabi_ddiv+0x4f8>
 8001b60:	1a88      	subs	r0, r1, r2
 8001b62:	9902      	ldr	r1, [sp, #8]
 8001b64:	f7fe fb6e 	bl	8000244 <__aeabi_uidivmod>
 8001b68:	9a03      	ldr	r2, [sp, #12]
 8001b6a:	0424      	lsls	r4, r4, #16
 8001b6c:	4342      	muls	r2, r0
 8001b6e:	0409      	lsls	r1, r1, #16
 8001b70:	0c24      	lsrs	r4, r4, #16
 8001b72:	0003      	movs	r3, r0
 8001b74:	430c      	orrs	r4, r1
 8001b76:	42a2      	cmp	r2, r4
 8001b78:	d900      	bls.n	8001b7c <__aeabi_ddiv+0x37c>
 8001b7a:	e0ca      	b.n	8001d12 <__aeabi_ddiv+0x512>
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	1aa4      	subs	r4, r4, r2
 8001b80:	042a      	lsls	r2, r5, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	9f04      	ldr	r7, [sp, #16]
 8001b86:	0413      	lsls	r3, r2, #16
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	4359      	muls	r1, r3
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	437b      	muls	r3, r7
 8001b90:	469c      	mov	ip, r3
 8001b92:	0c15      	lsrs	r5, r2, #16
 8001b94:	4368      	muls	r0, r5
 8001b96:	0c0b      	lsrs	r3, r1, #16
 8001b98:	4484      	add	ip, r0
 8001b9a:	4463      	add	r3, ip
 8001b9c:	437d      	muls	r5, r7
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	d903      	bls.n	8001baa <__aeabi_ddiv+0x3aa>
 8001ba2:	2080      	movs	r0, #128	@ 0x80
 8001ba4:	0240      	lsls	r0, r0, #9
 8001ba6:	4684      	mov	ip, r0
 8001ba8:	4465      	add	r5, ip
 8001baa:	0c18      	lsrs	r0, r3, #16
 8001bac:	0409      	lsls	r1, r1, #16
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c09      	lsrs	r1, r1, #16
 8001bb2:	1940      	adds	r0, r0, r5
 8001bb4:	185b      	adds	r3, r3, r1
 8001bb6:	4284      	cmp	r4, r0
 8001bb8:	d327      	bcc.n	8001c0a <__aeabi_ddiv+0x40a>
 8001bba:	d023      	beq.n	8001c04 <__aeabi_ddiv+0x404>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	0035      	movs	r5, r6
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	4b94      	ldr	r3, [pc, #592]	@ (8001e14 <__aeabi_ddiv+0x614>)
 8001bc4:	4453      	add	r3, sl
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	dd60      	ble.n	8001c8c <__aeabi_ddiv+0x48c>
 8001bca:	0751      	lsls	r1, r2, #29
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_ddiv+0x3d0>
 8001bce:	e086      	b.n	8001cde <__aeabi_ddiv+0x4de>
 8001bd0:	002e      	movs	r6, r5
 8001bd2:	08d1      	lsrs	r1, r2, #3
 8001bd4:	465a      	mov	r2, fp
 8001bd6:	01d2      	lsls	r2, r2, #7
 8001bd8:	d506      	bpl.n	8001be8 <__aeabi_ddiv+0x3e8>
 8001bda:	465a      	mov	r2, fp
 8001bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001e18 <__aeabi_ddiv+0x618>)
 8001bde:	401a      	ands	r2, r3
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	4693      	mov	fp, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4453      	add	r3, sl
 8001be8:	4a8c      	ldr	r2, [pc, #560]	@ (8001e1c <__aeabi_ddiv+0x61c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_ddiv+0x3f0>
 8001bee:	e680      	b.n	80018f2 <__aeabi_ddiv+0xf2>
 8001bf0:	465a      	mov	r2, fp
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4690      	mov	r8, r2
 8001bf8:	465a      	mov	r2, fp
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	0254      	lsls	r4, r2, #9
 8001bfe:	0b24      	lsrs	r4, r4, #12
 8001c00:	0d5b      	lsrs	r3, r3, #21
 8001c02:	e669      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 8001c04:	0035      	movs	r5, r6
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0db      	beq.n	8001bc2 <__aeabi_ddiv+0x3c2>
 8001c0a:	9d00      	ldr	r5, [sp, #0]
 8001c0c:	1e51      	subs	r1, r2, #1
 8001c0e:	46ac      	mov	ip, r5
 8001c10:	4464      	add	r4, ip
 8001c12:	42ac      	cmp	r4, r5
 8001c14:	d200      	bcs.n	8001c18 <__aeabi_ddiv+0x418>
 8001c16:	e09e      	b.n	8001d56 <__aeabi_ddiv+0x556>
 8001c18:	4284      	cmp	r4, r0
 8001c1a:	d200      	bcs.n	8001c1e <__aeabi_ddiv+0x41e>
 8001c1c:	e0e1      	b.n	8001de2 <__aeabi_ddiv+0x5e2>
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_ddiv+0x422>
 8001c20:	e0ee      	b.n	8001e00 <__aeabi_ddiv+0x600>
 8001c22:	000a      	movs	r2, r1
 8001c24:	e7ca      	b.n	8001bbc <__aeabi_ddiv+0x3bc>
 8001c26:	4542      	cmp	r2, r8
 8001c28:	d900      	bls.n	8001c2c <__aeabi_ddiv+0x42c>
 8001c2a:	e708      	b.n	8001a3e <__aeabi_ddiv+0x23e>
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	07dc      	lsls	r4, r3, #31
 8001c30:	0858      	lsrs	r0, r3, #1
 8001c32:	4643      	mov	r3, r8
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	431c      	orrs	r4, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	07dd      	lsls	r5, r3, #31
 8001c3c:	e706      	b.n	8001a4c <__aeabi_ddiv+0x24c>
 8001c3e:	f001 fa83 	bl	8003148 <__clzsi2>
 8001c42:	2315      	movs	r3, #21
 8001c44:	469c      	mov	ip, r3
 8001c46:	4484      	add	ip, r0
 8001c48:	0002      	movs	r2, r0
 8001c4a:	4663      	mov	r3, ip
 8001c4c:	3220      	adds	r2, #32
 8001c4e:	2b1c      	cmp	r3, #28
 8001c50:	dc00      	bgt.n	8001c54 <__aeabi_ddiv+0x454>
 8001c52:	e692      	b.n	800197a <__aeabi_ddiv+0x17a>
 8001c54:	0023      	movs	r3, r4
 8001c56:	3808      	subs	r0, #8
 8001c58:	4083      	lsls	r3, r0
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4698      	mov	r8, r3
 8001c60:	e69a      	b.n	8001998 <__aeabi_ddiv+0x198>
 8001c62:	f001 fa71 	bl	8003148 <__clzsi2>
 8001c66:	0002      	movs	r2, r0
 8001c68:	0003      	movs	r3, r0
 8001c6a:	3215      	adds	r2, #21
 8001c6c:	3320      	adds	r3, #32
 8001c6e:	2a1c      	cmp	r2, #28
 8001c70:	dc00      	bgt.n	8001c74 <__aeabi_ddiv+0x474>
 8001c72:	e65f      	b.n	8001934 <__aeabi_ddiv+0x134>
 8001c74:	9900      	ldr	r1, [sp, #0]
 8001c76:	3808      	subs	r0, #8
 8001c78:	4081      	lsls	r1, r0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	468b      	mov	fp, r1
 8001c7e:	e666      	b.n	800194e <__aeabi_ddiv+0x14e>
 8001c80:	2200      	movs	r2, #0
 8001c82:	002e      	movs	r6, r5
 8001c84:	2400      	movs	r4, #0
 8001c86:	4690      	mov	r8, r2
 8001c88:	4b65      	ldr	r3, [pc, #404]	@ (8001e20 <__aeabi_ddiv+0x620>)
 8001c8a:	e625      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 8001c8c:	002e      	movs	r6, r5
 8001c8e:	2101      	movs	r1, #1
 8001c90:	1ac9      	subs	r1, r1, r3
 8001c92:	2938      	cmp	r1, #56	@ 0x38
 8001c94:	dd00      	ble.n	8001c98 <__aeabi_ddiv+0x498>
 8001c96:	e61b      	b.n	80018d0 <__aeabi_ddiv+0xd0>
 8001c98:	291f      	cmp	r1, #31
 8001c9a:	dc7e      	bgt.n	8001d9a <__aeabi_ddiv+0x59a>
 8001c9c:	4861      	ldr	r0, [pc, #388]	@ (8001e24 <__aeabi_ddiv+0x624>)
 8001c9e:	0014      	movs	r4, r2
 8001ca0:	4450      	add	r0, sl
 8001ca2:	465b      	mov	r3, fp
 8001ca4:	4082      	lsls	r2, r0
 8001ca6:	4083      	lsls	r3, r0
 8001ca8:	40cc      	lsrs	r4, r1
 8001caa:	1e50      	subs	r0, r2, #1
 8001cac:	4182      	sbcs	r2, r0
 8001cae:	4323      	orrs	r3, r4
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	465b      	mov	r3, fp
 8001cb4:	40cb      	lsrs	r3, r1
 8001cb6:	0751      	lsls	r1, r2, #29
 8001cb8:	d009      	beq.n	8001cce <__aeabi_ddiv+0x4ce>
 8001cba:	210f      	movs	r1, #15
 8001cbc:	4011      	ands	r1, r2
 8001cbe:	2904      	cmp	r1, #4
 8001cc0:	d005      	beq.n	8001cce <__aeabi_ddiv+0x4ce>
 8001cc2:	1d11      	adds	r1, r2, #4
 8001cc4:	4291      	cmp	r1, r2
 8001cc6:	4192      	sbcs	r2, r2
 8001cc8:	4252      	negs	r2, r2
 8001cca:	189b      	adds	r3, r3, r2
 8001ccc:	000a      	movs	r2, r1
 8001cce:	0219      	lsls	r1, r3, #8
 8001cd0:	d400      	bmi.n	8001cd4 <__aeabi_ddiv+0x4d4>
 8001cd2:	e09b      	b.n	8001e0c <__aeabi_ddiv+0x60c>
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2400      	movs	r4, #0
 8001cda:	4690      	mov	r8, r2
 8001cdc:	e5fc      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 8001cde:	210f      	movs	r1, #15
 8001ce0:	4011      	ands	r1, r2
 8001ce2:	2904      	cmp	r1, #4
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_ddiv+0x4e8>
 8001ce6:	e773      	b.n	8001bd0 <__aeabi_ddiv+0x3d0>
 8001ce8:	1d11      	adds	r1, r2, #4
 8001cea:	4291      	cmp	r1, r2
 8001cec:	4192      	sbcs	r2, r2
 8001cee:	4252      	negs	r2, r2
 8001cf0:	002e      	movs	r6, r5
 8001cf2:	08c9      	lsrs	r1, r1, #3
 8001cf4:	4493      	add	fp, r2
 8001cf6:	e76d      	b.n	8001bd4 <__aeabi_ddiv+0x3d4>
 8001cf8:	9b00      	ldr	r3, [sp, #0]
 8001cfa:	3d01      	subs	r5, #1
 8001cfc:	469c      	mov	ip, r3
 8001cfe:	4461      	add	r1, ip
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d900      	bls.n	8001d06 <__aeabi_ddiv+0x506>
 8001d04:	e72c      	b.n	8001b60 <__aeabi_ddiv+0x360>
 8001d06:	428a      	cmp	r2, r1
 8001d08:	d800      	bhi.n	8001d0c <__aeabi_ddiv+0x50c>
 8001d0a:	e729      	b.n	8001b60 <__aeabi_ddiv+0x360>
 8001d0c:	1e85      	subs	r5, r0, #2
 8001d0e:	4461      	add	r1, ip
 8001d10:	e726      	b.n	8001b60 <__aeabi_ddiv+0x360>
 8001d12:	9900      	ldr	r1, [sp, #0]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	468c      	mov	ip, r1
 8001d18:	4464      	add	r4, ip
 8001d1a:	42a1      	cmp	r1, r4
 8001d1c:	d900      	bls.n	8001d20 <__aeabi_ddiv+0x520>
 8001d1e:	e72d      	b.n	8001b7c <__aeabi_ddiv+0x37c>
 8001d20:	42a2      	cmp	r2, r4
 8001d22:	d800      	bhi.n	8001d26 <__aeabi_ddiv+0x526>
 8001d24:	e72a      	b.n	8001b7c <__aeabi_ddiv+0x37c>
 8001d26:	1e83      	subs	r3, r0, #2
 8001d28:	4464      	add	r4, ip
 8001d2a:	e727      	b.n	8001b7c <__aeabi_ddiv+0x37c>
 8001d2c:	4287      	cmp	r7, r0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_ddiv+0x532>
 8001d30:	e6fe      	b.n	8001b30 <__aeabi_ddiv+0x330>
 8001d32:	45a9      	cmp	r9, r5
 8001d34:	d900      	bls.n	8001d38 <__aeabi_ddiv+0x538>
 8001d36:	e6fb      	b.n	8001b30 <__aeabi_ddiv+0x330>
 8001d38:	e6f5      	b.n	8001b26 <__aeabi_ddiv+0x326>
 8001d3a:	42a2      	cmp	r2, r4
 8001d3c:	d800      	bhi.n	8001d40 <__aeabi_ddiv+0x540>
 8001d3e:	e6b9      	b.n	8001ab4 <__aeabi_ddiv+0x2b4>
 8001d40:	1e83      	subs	r3, r0, #2
 8001d42:	4464      	add	r4, ip
 8001d44:	e6b6      	b.n	8001ab4 <__aeabi_ddiv+0x2b4>
 8001d46:	428a      	cmp	r2, r1
 8001d48:	d800      	bhi.n	8001d4c <__aeabi_ddiv+0x54c>
 8001d4a:	e69f      	b.n	8001a8c <__aeabi_ddiv+0x28c>
 8001d4c:	46bc      	mov	ip, r7
 8001d4e:	1e83      	subs	r3, r0, #2
 8001d50:	4698      	mov	r8, r3
 8001d52:	4461      	add	r1, ip
 8001d54:	e69a      	b.n	8001a8c <__aeabi_ddiv+0x28c>
 8001d56:	000a      	movs	r2, r1
 8001d58:	4284      	cmp	r4, r0
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_ddiv+0x55e>
 8001d5c:	e72e      	b.n	8001bbc <__aeabi_ddiv+0x3bc>
 8001d5e:	454b      	cmp	r3, r9
 8001d60:	d000      	beq.n	8001d64 <__aeabi_ddiv+0x564>
 8001d62:	e72b      	b.n	8001bbc <__aeabi_ddiv+0x3bc>
 8001d64:	0035      	movs	r5, r6
 8001d66:	e72c      	b.n	8001bc2 <__aeabi_ddiv+0x3c2>
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <__aeabi_ddiv+0x614>)
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e28 <__aeabi_ddiv+0x628>)
 8001d6c:	4453      	add	r3, sl
 8001d6e:	4592      	cmp	sl, r2
 8001d70:	db43      	blt.n	8001dfa <__aeabi_ddiv+0x5fa>
 8001d72:	2201      	movs	r2, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	4493      	add	fp, r2
 8001d78:	e72c      	b.n	8001bd4 <__aeabi_ddiv+0x3d4>
 8001d7a:	42ac      	cmp	r4, r5
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x580>
 8001d7e:	e6d7      	b.n	8001b30 <__aeabi_ddiv+0x330>
 8001d80:	2302      	movs	r3, #2
 8001d82:	425b      	negs	r3, r3
 8001d84:	469c      	mov	ip, r3
 8001d86:	9900      	ldr	r1, [sp, #0]
 8001d88:	444d      	add	r5, r9
 8001d8a:	454d      	cmp	r5, r9
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	44e3      	add	fp, ip
 8001d90:	468c      	mov	ip, r1
 8001d92:	425b      	negs	r3, r3
 8001d94:	4463      	add	r3, ip
 8001d96:	18c0      	adds	r0, r0, r3
 8001d98:	e6cc      	b.n	8001b34 <__aeabi_ddiv+0x334>
 8001d9a:	201f      	movs	r0, #31
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	1ac3      	subs	r3, r0, r3
 8001da0:	4658      	mov	r0, fp
 8001da2:	40d8      	lsrs	r0, r3
 8001da4:	2920      	cmp	r1, #32
 8001da6:	d004      	beq.n	8001db2 <__aeabi_ddiv+0x5b2>
 8001da8:	4659      	mov	r1, fp
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <__aeabi_ddiv+0x62c>)
 8001dac:	4453      	add	r3, sl
 8001dae:	4099      	lsls	r1, r3
 8001db0:	430a      	orrs	r2, r1
 8001db2:	1e53      	subs	r3, r2, #1
 8001db4:	419a      	sbcs	r2, r3
 8001db6:	2307      	movs	r3, #7
 8001db8:	0019      	movs	r1, r3
 8001dba:	4302      	orrs	r2, r0
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	4011      	ands	r1, r2
 8001dc0:	4213      	tst	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <__aeabi_ddiv+0x5d8>
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d01d      	beq.n	8001e08 <__aeabi_ddiv+0x608>
 8001dcc:	1d13      	adds	r3, r2, #4
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	4189      	sbcs	r1, r1
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	4249      	negs	r1, r1
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	08d2      	lsrs	r2, r2, #3
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	4690      	mov	r8, r2
 8001dde:	2300      	movs	r3, #0
 8001de0:	e57a      	b.n	80018d8 <__aeabi_ddiv+0xd8>
 8001de2:	4649      	mov	r1, r9
 8001de4:	9f00      	ldr	r7, [sp, #0]
 8001de6:	004d      	lsls	r5, r1, #1
 8001de8:	454d      	cmp	r5, r9
 8001dea:	4189      	sbcs	r1, r1
 8001dec:	46bc      	mov	ip, r7
 8001dee:	4249      	negs	r1, r1
 8001df0:	4461      	add	r1, ip
 8001df2:	46a9      	mov	r9, r5
 8001df4:	3a02      	subs	r2, #2
 8001df6:	1864      	adds	r4, r4, r1
 8001df8:	e7ae      	b.n	8001d58 <__aeabi_ddiv+0x558>
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	e746      	b.n	8001c8e <__aeabi_ddiv+0x48e>
 8001e00:	4599      	cmp	r9, r3
 8001e02:	d3ee      	bcc.n	8001de2 <__aeabi_ddiv+0x5e2>
 8001e04:	000a      	movs	r2, r1
 8001e06:	e7aa      	b.n	8001d5e <__aeabi_ddiv+0x55e>
 8001e08:	2100      	movs	r1, #0
 8001e0a:	e7e5      	b.n	8001dd8 <__aeabi_ddiv+0x5d8>
 8001e0c:	0759      	lsls	r1, r3, #29
 8001e0e:	025b      	lsls	r3, r3, #9
 8001e10:	0b1c      	lsrs	r4, r3, #12
 8001e12:	e7e1      	b.n	8001dd8 <__aeabi_ddiv+0x5d8>
 8001e14:	000003ff 	.word	0x000003ff
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	000007fe 	.word	0x000007fe
 8001e20:	000007ff 	.word	0x000007ff
 8001e24:	0000041e 	.word	0x0000041e
 8001e28:	fffffc02 	.word	0xfffffc02
 8001e2c:	0000043e 	.word	0x0000043e

08001e30 <__eqdf2>:
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	4657      	mov	r7, sl
 8001e34:	46de      	mov	lr, fp
 8001e36:	464e      	mov	r6, r9
 8001e38:	4645      	mov	r5, r8
 8001e3a:	b5e0      	push	{r5, r6, r7, lr}
 8001e3c:	000d      	movs	r5, r1
 8001e3e:	0004      	movs	r4, r0
 8001e40:	0fe8      	lsrs	r0, r5, #31
 8001e42:	4683      	mov	fp, r0
 8001e44:	0309      	lsls	r1, r1, #12
 8001e46:	0fd8      	lsrs	r0, r3, #31
 8001e48:	0b09      	lsrs	r1, r1, #12
 8001e4a:	4682      	mov	sl, r0
 8001e4c:	4819      	ldr	r0, [pc, #100]	@ (8001eb4 <__eqdf2+0x84>)
 8001e4e:	468c      	mov	ip, r1
 8001e50:	031f      	lsls	r7, r3, #12
 8001e52:	0069      	lsls	r1, r5, #1
 8001e54:	005e      	lsls	r6, r3, #1
 8001e56:	0d49      	lsrs	r1, r1, #21
 8001e58:	0b3f      	lsrs	r7, r7, #12
 8001e5a:	0d76      	lsrs	r6, r6, #21
 8001e5c:	4281      	cmp	r1, r0
 8001e5e:	d018      	beq.n	8001e92 <__eqdf2+0x62>
 8001e60:	4286      	cmp	r6, r0
 8001e62:	d00f      	beq.n	8001e84 <__eqdf2+0x54>
 8001e64:	2001      	movs	r0, #1
 8001e66:	42b1      	cmp	r1, r6
 8001e68:	d10d      	bne.n	8001e86 <__eqdf2+0x56>
 8001e6a:	45bc      	cmp	ip, r7
 8001e6c:	d10b      	bne.n	8001e86 <__eqdf2+0x56>
 8001e6e:	4294      	cmp	r4, r2
 8001e70:	d109      	bne.n	8001e86 <__eqdf2+0x56>
 8001e72:	45d3      	cmp	fp, sl
 8001e74:	d01c      	beq.n	8001eb0 <__eqdf2+0x80>
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d105      	bne.n	8001e86 <__eqdf2+0x56>
 8001e7a:	4660      	mov	r0, ip
 8001e7c:	4320      	orrs	r0, r4
 8001e7e:	1e43      	subs	r3, r0, #1
 8001e80:	4198      	sbcs	r0, r3
 8001e82:	e000      	b.n	8001e86 <__eqdf2+0x56>
 8001e84:	2001      	movs	r0, #1
 8001e86:	bcf0      	pop	{r4, r5, r6, r7}
 8001e88:	46bb      	mov	fp, r7
 8001e8a:	46b2      	mov	sl, r6
 8001e8c:	46a9      	mov	r9, r5
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	2001      	movs	r0, #1
 8001e94:	428e      	cmp	r6, r1
 8001e96:	d1f6      	bne.n	8001e86 <__eqdf2+0x56>
 8001e98:	4661      	mov	r1, ip
 8001e9a:	4339      	orrs	r1, r7
 8001e9c:	000f      	movs	r7, r1
 8001e9e:	4317      	orrs	r7, r2
 8001ea0:	4327      	orrs	r7, r4
 8001ea2:	d1f0      	bne.n	8001e86 <__eqdf2+0x56>
 8001ea4:	465b      	mov	r3, fp
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	1a98      	subs	r0, r3, r2
 8001eaa:	1e43      	subs	r3, r0, #1
 8001eac:	4198      	sbcs	r0, r3
 8001eae:	e7ea      	b.n	8001e86 <__eqdf2+0x56>
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	e7e8      	b.n	8001e86 <__eqdf2+0x56>
 8001eb4:	000007ff 	.word	0x000007ff

08001eb8 <__gedf2>:
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	4657      	mov	r7, sl
 8001ebc:	464e      	mov	r6, r9
 8001ebe:	4645      	mov	r5, r8
 8001ec0:	46de      	mov	lr, fp
 8001ec2:	b5e0      	push	{r5, r6, r7, lr}
 8001ec4:	000d      	movs	r5, r1
 8001ec6:	030e      	lsls	r6, r1, #12
 8001ec8:	0049      	lsls	r1, r1, #1
 8001eca:	0d49      	lsrs	r1, r1, #21
 8001ecc:	468a      	mov	sl, r1
 8001ece:	0fdf      	lsrs	r7, r3, #31
 8001ed0:	0fe9      	lsrs	r1, r5, #31
 8001ed2:	46bc      	mov	ip, r7
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	4f2f      	ldr	r7, [pc, #188]	@ (8001f94 <__gedf2+0xdc>)
 8001ed8:	0004      	movs	r4, r0
 8001eda:	4680      	mov	r8, r0
 8001edc:	9101      	str	r1, [sp, #4]
 8001ede:	0058      	lsls	r0, r3, #1
 8001ee0:	0319      	lsls	r1, r3, #12
 8001ee2:	4691      	mov	r9, r2
 8001ee4:	0b36      	lsrs	r6, r6, #12
 8001ee6:	0b09      	lsrs	r1, r1, #12
 8001ee8:	0d40      	lsrs	r0, r0, #21
 8001eea:	45ba      	cmp	sl, r7
 8001eec:	d01d      	beq.n	8001f2a <__gedf2+0x72>
 8001eee:	42b8      	cmp	r0, r7
 8001ef0:	d00d      	beq.n	8001f0e <__gedf2+0x56>
 8001ef2:	4657      	mov	r7, sl
 8001ef4:	2f00      	cmp	r7, #0
 8001ef6:	d12a      	bne.n	8001f4e <__gedf2+0x96>
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d124      	bne.n	8001f48 <__gedf2+0x90>
 8001efe:	430a      	orrs	r2, r1
 8001f00:	d036      	beq.n	8001f70 <__gedf2+0xb8>
 8001f02:	2c00      	cmp	r4, #0
 8001f04:	d141      	bne.n	8001f8a <__gedf2+0xd2>
 8001f06:	4663      	mov	r3, ip
 8001f08:	0058      	lsls	r0, r3, #1
 8001f0a:	3801      	subs	r0, #1
 8001f0c:	e015      	b.n	8001f3a <__gedf2+0x82>
 8001f0e:	4311      	orrs	r1, r2
 8001f10:	d138      	bne.n	8001f84 <__gedf2+0xcc>
 8001f12:	4653      	mov	r3, sl
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <__gedf2+0x64>
 8001f18:	4326      	orrs	r6, r4
 8001f1a:	d0f4      	beq.n	8001f06 <__gedf2+0x4e>
 8001f1c:	9b01      	ldr	r3, [sp, #4]
 8001f1e:	4563      	cmp	r3, ip
 8001f20:	d107      	bne.n	8001f32 <__gedf2+0x7a>
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	0058      	lsls	r0, r3, #1
 8001f26:	3801      	subs	r0, #1
 8001f28:	e007      	b.n	8001f3a <__gedf2+0x82>
 8001f2a:	4326      	orrs	r6, r4
 8001f2c:	d12a      	bne.n	8001f84 <__gedf2+0xcc>
 8001f2e:	4550      	cmp	r0, sl
 8001f30:	d021      	beq.n	8001f76 <__gedf2+0xbe>
 8001f32:	2001      	movs	r0, #1
 8001f34:	9b01      	ldr	r3, [sp, #4]
 8001f36:	425f      	negs	r7, r3
 8001f38:	4338      	orrs	r0, r7
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f3e:	46bb      	mov	fp, r7
 8001f40:	46b2      	mov	sl, r6
 8001f42:	46a9      	mov	r9, r5
 8001f44:	46a0      	mov	r8, r4
 8001f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f48:	2c00      	cmp	r4, #0
 8001f4a:	d0dc      	beq.n	8001f06 <__gedf2+0x4e>
 8001f4c:	e7e6      	b.n	8001f1c <__gedf2+0x64>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d0ef      	beq.n	8001f32 <__gedf2+0x7a>
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	4563      	cmp	r3, ip
 8001f56:	d1ec      	bne.n	8001f32 <__gedf2+0x7a>
 8001f58:	4582      	cmp	sl, r0
 8001f5a:	dcea      	bgt.n	8001f32 <__gedf2+0x7a>
 8001f5c:	dbe1      	blt.n	8001f22 <__gedf2+0x6a>
 8001f5e:	428e      	cmp	r6, r1
 8001f60:	d8e7      	bhi.n	8001f32 <__gedf2+0x7a>
 8001f62:	d1de      	bne.n	8001f22 <__gedf2+0x6a>
 8001f64:	45c8      	cmp	r8, r9
 8001f66:	d8e4      	bhi.n	8001f32 <__gedf2+0x7a>
 8001f68:	2000      	movs	r0, #0
 8001f6a:	45c8      	cmp	r8, r9
 8001f6c:	d2e5      	bcs.n	8001f3a <__gedf2+0x82>
 8001f6e:	e7d8      	b.n	8001f22 <__gedf2+0x6a>
 8001f70:	2c00      	cmp	r4, #0
 8001f72:	d0e2      	beq.n	8001f3a <__gedf2+0x82>
 8001f74:	e7dd      	b.n	8001f32 <__gedf2+0x7a>
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d104      	bne.n	8001f84 <__gedf2+0xcc>
 8001f7a:	9b01      	ldr	r3, [sp, #4]
 8001f7c:	4563      	cmp	r3, ip
 8001f7e:	d1d8      	bne.n	8001f32 <__gedf2+0x7a>
 8001f80:	2000      	movs	r0, #0
 8001f82:	e7da      	b.n	8001f3a <__gedf2+0x82>
 8001f84:	2002      	movs	r0, #2
 8001f86:	4240      	negs	r0, r0
 8001f88:	e7d7      	b.n	8001f3a <__gedf2+0x82>
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	4563      	cmp	r3, ip
 8001f8e:	d0e6      	beq.n	8001f5e <__gedf2+0xa6>
 8001f90:	e7cf      	b.n	8001f32 <__gedf2+0x7a>
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__ledf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	4657      	mov	r7, sl
 8001f9c:	464e      	mov	r6, r9
 8001f9e:	4645      	mov	r5, r8
 8001fa0:	46de      	mov	lr, fp
 8001fa2:	b5e0      	push	{r5, r6, r7, lr}
 8001fa4:	000d      	movs	r5, r1
 8001fa6:	030e      	lsls	r6, r1, #12
 8001fa8:	0049      	lsls	r1, r1, #1
 8001faa:	0d49      	lsrs	r1, r1, #21
 8001fac:	468a      	mov	sl, r1
 8001fae:	0fdf      	lsrs	r7, r3, #31
 8001fb0:	0fe9      	lsrs	r1, r5, #31
 8001fb2:	46bc      	mov	ip, r7
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	4f2e      	ldr	r7, [pc, #184]	@ (8002070 <__ledf2+0xd8>)
 8001fb8:	0004      	movs	r4, r0
 8001fba:	4680      	mov	r8, r0
 8001fbc:	9101      	str	r1, [sp, #4]
 8001fbe:	0058      	lsls	r0, r3, #1
 8001fc0:	0319      	lsls	r1, r3, #12
 8001fc2:	4691      	mov	r9, r2
 8001fc4:	0b36      	lsrs	r6, r6, #12
 8001fc6:	0b09      	lsrs	r1, r1, #12
 8001fc8:	0d40      	lsrs	r0, r0, #21
 8001fca:	45ba      	cmp	sl, r7
 8001fcc:	d01e      	beq.n	800200c <__ledf2+0x74>
 8001fce:	42b8      	cmp	r0, r7
 8001fd0:	d00d      	beq.n	8001fee <__ledf2+0x56>
 8001fd2:	4657      	mov	r7, sl
 8001fd4:	2f00      	cmp	r7, #0
 8001fd6:	d127      	bne.n	8002028 <__ledf2+0x90>
 8001fd8:	4334      	orrs	r4, r6
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d133      	bne.n	8002046 <__ledf2+0xae>
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	d034      	beq.n	800204c <__ledf2+0xb4>
 8001fe2:	2c00      	cmp	r4, #0
 8001fe4:	d140      	bne.n	8002068 <__ledf2+0xd0>
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	0058      	lsls	r0, r3, #1
 8001fea:	3801      	subs	r0, #1
 8001fec:	e015      	b.n	800201a <__ledf2+0x82>
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	d112      	bne.n	8002018 <__ledf2+0x80>
 8001ff2:	4653      	mov	r3, sl
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <__ledf2+0x64>
 8001ff8:	4326      	orrs	r6, r4
 8001ffa:	d0f4      	beq.n	8001fe6 <__ledf2+0x4e>
 8001ffc:	9b01      	ldr	r3, [sp, #4]
 8001ffe:	4563      	cmp	r3, ip
 8002000:	d01d      	beq.n	800203e <__ledf2+0xa6>
 8002002:	2001      	movs	r0, #1
 8002004:	9b01      	ldr	r3, [sp, #4]
 8002006:	425f      	negs	r7, r3
 8002008:	4338      	orrs	r0, r7
 800200a:	e006      	b.n	800201a <__ledf2+0x82>
 800200c:	4326      	orrs	r6, r4
 800200e:	d103      	bne.n	8002018 <__ledf2+0x80>
 8002010:	4550      	cmp	r0, sl
 8002012:	d1f6      	bne.n	8002002 <__ledf2+0x6a>
 8002014:	4311      	orrs	r1, r2
 8002016:	d01c      	beq.n	8002052 <__ledf2+0xba>
 8002018:	2002      	movs	r0, #2
 800201a:	b003      	add	sp, #12
 800201c:	bcf0      	pop	{r4, r5, r6, r7}
 800201e:	46bb      	mov	fp, r7
 8002020:	46b2      	mov	sl, r6
 8002022:	46a9      	mov	r9, r5
 8002024:	46a0      	mov	r8, r4
 8002026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002028:	2800      	cmp	r0, #0
 800202a:	d0ea      	beq.n	8002002 <__ledf2+0x6a>
 800202c:	9b01      	ldr	r3, [sp, #4]
 800202e:	4563      	cmp	r3, ip
 8002030:	d1e7      	bne.n	8002002 <__ledf2+0x6a>
 8002032:	4582      	cmp	sl, r0
 8002034:	dce5      	bgt.n	8002002 <__ledf2+0x6a>
 8002036:	db02      	blt.n	800203e <__ledf2+0xa6>
 8002038:	428e      	cmp	r6, r1
 800203a:	d8e2      	bhi.n	8002002 <__ledf2+0x6a>
 800203c:	d00e      	beq.n	800205c <__ledf2+0xc4>
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	0058      	lsls	r0, r3, #1
 8002042:	3801      	subs	r0, #1
 8002044:	e7e9      	b.n	800201a <__ledf2+0x82>
 8002046:	2c00      	cmp	r4, #0
 8002048:	d0cd      	beq.n	8001fe6 <__ledf2+0x4e>
 800204a:	e7d7      	b.n	8001ffc <__ledf2+0x64>
 800204c:	2c00      	cmp	r4, #0
 800204e:	d0e4      	beq.n	800201a <__ledf2+0x82>
 8002050:	e7d7      	b.n	8002002 <__ledf2+0x6a>
 8002052:	9b01      	ldr	r3, [sp, #4]
 8002054:	2000      	movs	r0, #0
 8002056:	4563      	cmp	r3, ip
 8002058:	d0df      	beq.n	800201a <__ledf2+0x82>
 800205a:	e7d2      	b.n	8002002 <__ledf2+0x6a>
 800205c:	45c8      	cmp	r8, r9
 800205e:	d8d0      	bhi.n	8002002 <__ledf2+0x6a>
 8002060:	2000      	movs	r0, #0
 8002062:	45c8      	cmp	r8, r9
 8002064:	d2d9      	bcs.n	800201a <__ledf2+0x82>
 8002066:	e7ea      	b.n	800203e <__ledf2+0xa6>
 8002068:	9b01      	ldr	r3, [sp, #4]
 800206a:	4563      	cmp	r3, ip
 800206c:	d0e4      	beq.n	8002038 <__ledf2+0xa0>
 800206e:	e7c8      	b.n	8002002 <__ledf2+0x6a>
 8002070:	000007ff 	.word	0x000007ff

08002074 <__aeabi_dmul>:
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	4657      	mov	r7, sl
 8002078:	464e      	mov	r6, r9
 800207a:	46de      	mov	lr, fp
 800207c:	4645      	mov	r5, r8
 800207e:	b5e0      	push	{r5, r6, r7, lr}
 8002080:	001f      	movs	r7, r3
 8002082:	030b      	lsls	r3, r1, #12
 8002084:	0b1b      	lsrs	r3, r3, #12
 8002086:	0016      	movs	r6, r2
 8002088:	469a      	mov	sl, r3
 800208a:	0fca      	lsrs	r2, r1, #31
 800208c:	004b      	lsls	r3, r1, #1
 800208e:	0004      	movs	r4, r0
 8002090:	4691      	mov	r9, r2
 8002092:	b085      	sub	sp, #20
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	d100      	bne.n	800209a <__aeabi_dmul+0x26>
 8002098:	e1cf      	b.n	800243a <__aeabi_dmul+0x3c6>
 800209a:	4acd      	ldr	r2, [pc, #820]	@ (80023d0 <__aeabi_dmul+0x35c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d055      	beq.n	800214c <__aeabi_dmul+0xd8>
 80020a0:	4651      	mov	r1, sl
 80020a2:	0f42      	lsrs	r2, r0, #29
 80020a4:	00c9      	lsls	r1, r1, #3
 80020a6:	430a      	orrs	r2, r1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	4311      	orrs	r1, r2
 80020ae:	00c2      	lsls	r2, r0, #3
 80020b0:	4690      	mov	r8, r2
 80020b2:	4ac8      	ldr	r2, [pc, #800]	@ (80023d4 <__aeabi_dmul+0x360>)
 80020b4:	468a      	mov	sl, r1
 80020b6:	4693      	mov	fp, r2
 80020b8:	449b      	add	fp, r3
 80020ba:	2300      	movs	r3, #0
 80020bc:	2500      	movs	r5, #0
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	033c      	lsls	r4, r7, #12
 80020c2:	007b      	lsls	r3, r7, #1
 80020c4:	0ffa      	lsrs	r2, r7, #31
 80020c6:	9601      	str	r6, [sp, #4]
 80020c8:	0b24      	lsrs	r4, r4, #12
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dmul+0x5e>
 80020d0:	e188      	b.n	80023e4 <__aeabi_dmul+0x370>
 80020d2:	4abf      	ldr	r2, [pc, #764]	@ (80023d0 <__aeabi_dmul+0x35c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x66>
 80020d8:	e092      	b.n	8002200 <__aeabi_dmul+0x18c>
 80020da:	4abe      	ldr	r2, [pc, #760]	@ (80023d4 <__aeabi_dmul+0x360>)
 80020dc:	4694      	mov	ip, r2
 80020de:	4463      	add	r3, ip
 80020e0:	449b      	add	fp, r3
 80020e2:	2d0a      	cmp	r5, #10
 80020e4:	dc42      	bgt.n	800216c <__aeabi_dmul+0xf8>
 80020e6:	00e4      	lsls	r4, r4, #3
 80020e8:	0f73      	lsrs	r3, r6, #29
 80020ea:	4323      	orrs	r3, r4
 80020ec:	2480      	movs	r4, #128	@ 0x80
 80020ee:	4649      	mov	r1, r9
 80020f0:	0424      	lsls	r4, r4, #16
 80020f2:	431c      	orrs	r4, r3
 80020f4:	00f3      	lsls	r3, r6, #3
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	9b00      	ldr	r3, [sp, #0]
 80020fa:	2000      	movs	r0, #0
 80020fc:	4059      	eors	r1, r3
 80020fe:	b2cb      	uxtb	r3, r1
 8002100:	9303      	str	r3, [sp, #12]
 8002102:	2d02      	cmp	r5, #2
 8002104:	dc00      	bgt.n	8002108 <__aeabi_dmul+0x94>
 8002106:	e094      	b.n	8002232 <__aeabi_dmul+0x1be>
 8002108:	2301      	movs	r3, #1
 800210a:	40ab      	lsls	r3, r5
 800210c:	001d      	movs	r5, r3
 800210e:	23a6      	movs	r3, #166	@ 0xa6
 8002110:	002a      	movs	r2, r5
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	401a      	ands	r2, r3
 8002116:	421d      	tst	r5, r3
 8002118:	d000      	beq.n	800211c <__aeabi_dmul+0xa8>
 800211a:	e229      	b.n	8002570 <__aeabi_dmul+0x4fc>
 800211c:	2390      	movs	r3, #144	@ 0x90
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	421d      	tst	r5, r3
 8002122:	d100      	bne.n	8002126 <__aeabi_dmul+0xb2>
 8002124:	e24d      	b.n	80025c2 <__aeabi_dmul+0x54e>
 8002126:	2300      	movs	r3, #0
 8002128:	2480      	movs	r4, #128	@ 0x80
 800212a:	4699      	mov	r9, r3
 800212c:	0324      	lsls	r4, r4, #12
 800212e:	4ba8      	ldr	r3, [pc, #672]	@ (80023d0 <__aeabi_dmul+0x35c>)
 8002130:	0010      	movs	r0, r2
 8002132:	464a      	mov	r2, r9
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4323      	orrs	r3, r4
 8002138:	07d2      	lsls	r2, r2, #31
 800213a:	4313      	orrs	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	b005      	add	sp, #20
 8002140:	bcf0      	pop	{r4, r5, r6, r7}
 8002142:	46bb      	mov	fp, r7
 8002144:	46b2      	mov	sl, r6
 8002146:	46a9      	mov	r9, r5
 8002148:	46a0      	mov	r8, r4
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214c:	4652      	mov	r2, sl
 800214e:	4302      	orrs	r2, r0
 8002150:	4690      	mov	r8, r2
 8002152:	d000      	beq.n	8002156 <__aeabi_dmul+0xe2>
 8002154:	e1ac      	b.n	80024b0 <__aeabi_dmul+0x43c>
 8002156:	469b      	mov	fp, r3
 8002158:	2302      	movs	r3, #2
 800215a:	4692      	mov	sl, r2
 800215c:	2508      	movs	r5, #8
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	e7ae      	b.n	80020c0 <__aeabi_dmul+0x4c>
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	46a2      	mov	sl, r4
 8002166:	4699      	mov	r9, r3
 8002168:	9b01      	ldr	r3, [sp, #4]
 800216a:	4698      	mov	r8, r3
 800216c:	9b02      	ldr	r3, [sp, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d100      	bne.n	8002174 <__aeabi_dmul+0x100>
 8002172:	e1ca      	b.n	800250a <__aeabi_dmul+0x496>
 8002174:	2b03      	cmp	r3, #3
 8002176:	d100      	bne.n	800217a <__aeabi_dmul+0x106>
 8002178:	e192      	b.n	80024a0 <__aeabi_dmul+0x42c>
 800217a:	2b01      	cmp	r3, #1
 800217c:	d110      	bne.n	80021a0 <__aeabi_dmul+0x12c>
 800217e:	2300      	movs	r3, #0
 8002180:	2400      	movs	r4, #0
 8002182:	2200      	movs	r2, #0
 8002184:	e7d4      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002186:	2201      	movs	r2, #1
 8002188:	087b      	lsrs	r3, r7, #1
 800218a:	403a      	ands	r2, r7
 800218c:	4313      	orrs	r3, r2
 800218e:	4652      	mov	r2, sl
 8002190:	07d2      	lsls	r2, r2, #31
 8002192:	4313      	orrs	r3, r2
 8002194:	4698      	mov	r8, r3
 8002196:	4653      	mov	r3, sl
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	469a      	mov	sl, r3
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	4699      	mov	r9, r3
 80021a0:	465b      	mov	r3, fp
 80021a2:	1c58      	adds	r0, r3, #1
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	445b      	add	r3, fp
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dc00      	bgt.n	80021b0 <__aeabi_dmul+0x13c>
 80021ae:	e1b1      	b.n	8002514 <__aeabi_dmul+0x4a0>
 80021b0:	4642      	mov	r2, r8
 80021b2:	0752      	lsls	r2, r2, #29
 80021b4:	d00b      	beq.n	80021ce <__aeabi_dmul+0x15a>
 80021b6:	220f      	movs	r2, #15
 80021b8:	4641      	mov	r1, r8
 80021ba:	400a      	ands	r2, r1
 80021bc:	2a04      	cmp	r2, #4
 80021be:	d006      	beq.n	80021ce <__aeabi_dmul+0x15a>
 80021c0:	4642      	mov	r2, r8
 80021c2:	1d11      	adds	r1, r2, #4
 80021c4:	4541      	cmp	r1, r8
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	4688      	mov	r8, r1
 80021ca:	4252      	negs	r2, r2
 80021cc:	4492      	add	sl, r2
 80021ce:	4652      	mov	r2, sl
 80021d0:	01d2      	lsls	r2, r2, #7
 80021d2:	d506      	bpl.n	80021e2 <__aeabi_dmul+0x16e>
 80021d4:	4652      	mov	r2, sl
 80021d6:	4b80      	ldr	r3, [pc, #512]	@ (80023d8 <__aeabi_dmul+0x364>)
 80021d8:	401a      	ands	r2, r3
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	4692      	mov	sl, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	18c3      	adds	r3, r0, r3
 80021e2:	4a7e      	ldr	r2, [pc, #504]	@ (80023dc <__aeabi_dmul+0x368>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dd00      	ble.n	80021ea <__aeabi_dmul+0x176>
 80021e8:	e18f      	b.n	800250a <__aeabi_dmul+0x496>
 80021ea:	4642      	mov	r2, r8
 80021ec:	08d1      	lsrs	r1, r2, #3
 80021ee:	4652      	mov	r2, sl
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	430a      	orrs	r2, r1
 80021f4:	4651      	mov	r1, sl
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	024c      	lsls	r4, r1, #9
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	e797      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002200:	4b73      	ldr	r3, [pc, #460]	@ (80023d0 <__aeabi_dmul+0x35c>)
 8002202:	4326      	orrs	r6, r4
 8002204:	469c      	mov	ip, r3
 8002206:	44e3      	add	fp, ip
 8002208:	2e00      	cmp	r6, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x19a>
 800220c:	e16f      	b.n	80024ee <__aeabi_dmul+0x47a>
 800220e:	2303      	movs	r3, #3
 8002210:	4649      	mov	r1, r9
 8002212:	431d      	orrs	r5, r3
 8002214:	9b00      	ldr	r3, [sp, #0]
 8002216:	4059      	eors	r1, r3
 8002218:	b2cb      	uxtb	r3, r1
 800221a:	9303      	str	r3, [sp, #12]
 800221c:	2d0a      	cmp	r5, #10
 800221e:	dd00      	ble.n	8002222 <__aeabi_dmul+0x1ae>
 8002220:	e133      	b.n	800248a <__aeabi_dmul+0x416>
 8002222:	2301      	movs	r3, #1
 8002224:	40ab      	lsls	r3, r5
 8002226:	001d      	movs	r5, r3
 8002228:	2303      	movs	r3, #3
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2288      	movs	r2, #136	@ 0x88
 800222e:	422a      	tst	r2, r5
 8002230:	d197      	bne.n	8002162 <__aeabi_dmul+0xee>
 8002232:	4642      	mov	r2, r8
 8002234:	4643      	mov	r3, r8
 8002236:	0412      	lsls	r2, r2, #16
 8002238:	0c12      	lsrs	r2, r2, #16
 800223a:	0016      	movs	r6, r2
 800223c:	9801      	ldr	r0, [sp, #4]
 800223e:	0c1d      	lsrs	r5, r3, #16
 8002240:	0c03      	lsrs	r3, r0, #16
 8002242:	0400      	lsls	r0, r0, #16
 8002244:	0c00      	lsrs	r0, r0, #16
 8002246:	4346      	muls	r6, r0
 8002248:	46b4      	mov	ip, r6
 800224a:	001e      	movs	r6, r3
 800224c:	436e      	muls	r6, r5
 800224e:	9600      	str	r6, [sp, #0]
 8002250:	0016      	movs	r6, r2
 8002252:	0007      	movs	r7, r0
 8002254:	435e      	muls	r6, r3
 8002256:	4661      	mov	r1, ip
 8002258:	46b0      	mov	r8, r6
 800225a:	436f      	muls	r7, r5
 800225c:	0c0e      	lsrs	r6, r1, #16
 800225e:	44b8      	add	r8, r7
 8002260:	4446      	add	r6, r8
 8002262:	42b7      	cmp	r7, r6
 8002264:	d905      	bls.n	8002272 <__aeabi_dmul+0x1fe>
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0249      	lsls	r1, r1, #9
 800226a:	4688      	mov	r8, r1
 800226c:	9f00      	ldr	r7, [sp, #0]
 800226e:	4447      	add	r7, r8
 8002270:	9700      	str	r7, [sp, #0]
 8002272:	4661      	mov	r1, ip
 8002274:	0409      	lsls	r1, r1, #16
 8002276:	0c09      	lsrs	r1, r1, #16
 8002278:	0c37      	lsrs	r7, r6, #16
 800227a:	0436      	lsls	r6, r6, #16
 800227c:	468c      	mov	ip, r1
 800227e:	0031      	movs	r1, r6
 8002280:	4461      	add	r1, ip
 8002282:	9101      	str	r1, [sp, #4]
 8002284:	0011      	movs	r1, r2
 8002286:	0c26      	lsrs	r6, r4, #16
 8002288:	0424      	lsls	r4, r4, #16
 800228a:	0c24      	lsrs	r4, r4, #16
 800228c:	4361      	muls	r1, r4
 800228e:	468c      	mov	ip, r1
 8002290:	0021      	movs	r1, r4
 8002292:	4369      	muls	r1, r5
 8002294:	4689      	mov	r9, r1
 8002296:	4661      	mov	r1, ip
 8002298:	0c09      	lsrs	r1, r1, #16
 800229a:	4688      	mov	r8, r1
 800229c:	4372      	muls	r2, r6
 800229e:	444a      	add	r2, r9
 80022a0:	4442      	add	r2, r8
 80022a2:	4375      	muls	r5, r6
 80022a4:	4591      	cmp	r9, r2
 80022a6:	d903      	bls.n	80022b0 <__aeabi_dmul+0x23c>
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	0249      	lsls	r1, r1, #9
 80022ac:	4688      	mov	r8, r1
 80022ae:	4445      	add	r5, r8
 80022b0:	0c11      	lsrs	r1, r2, #16
 80022b2:	4688      	mov	r8, r1
 80022b4:	4661      	mov	r1, ip
 80022b6:	0409      	lsls	r1, r1, #16
 80022b8:	0c09      	lsrs	r1, r1, #16
 80022ba:	468c      	mov	ip, r1
 80022bc:	0412      	lsls	r2, r2, #16
 80022be:	4462      	add	r2, ip
 80022c0:	18b9      	adds	r1, r7, r2
 80022c2:	9102      	str	r1, [sp, #8]
 80022c4:	4651      	mov	r1, sl
 80022c6:	0c09      	lsrs	r1, r1, #16
 80022c8:	468c      	mov	ip, r1
 80022ca:	4651      	mov	r1, sl
 80022cc:	040f      	lsls	r7, r1, #16
 80022ce:	0c3f      	lsrs	r7, r7, #16
 80022d0:	0039      	movs	r1, r7
 80022d2:	4341      	muls	r1, r0
 80022d4:	4445      	add	r5, r8
 80022d6:	4688      	mov	r8, r1
 80022d8:	4661      	mov	r1, ip
 80022da:	4341      	muls	r1, r0
 80022dc:	468a      	mov	sl, r1
 80022de:	4641      	mov	r1, r8
 80022e0:	4660      	mov	r0, ip
 80022e2:	0c09      	lsrs	r1, r1, #16
 80022e4:	4689      	mov	r9, r1
 80022e6:	4358      	muls	r0, r3
 80022e8:	437b      	muls	r3, r7
 80022ea:	4453      	add	r3, sl
 80022ec:	444b      	add	r3, r9
 80022ee:	459a      	cmp	sl, r3
 80022f0:	d903      	bls.n	80022fa <__aeabi_dmul+0x286>
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	4689      	mov	r9, r1
 80022f8:	4448      	add	r0, r9
 80022fa:	0c19      	lsrs	r1, r3, #16
 80022fc:	4689      	mov	r9, r1
 80022fe:	4641      	mov	r1, r8
 8002300:	0409      	lsls	r1, r1, #16
 8002302:	0c09      	lsrs	r1, r1, #16
 8002304:	4688      	mov	r8, r1
 8002306:	0039      	movs	r1, r7
 8002308:	4361      	muls	r1, r4
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	4443      	add	r3, r8
 800230e:	4688      	mov	r8, r1
 8002310:	4661      	mov	r1, ip
 8002312:	434c      	muls	r4, r1
 8002314:	4371      	muls	r1, r6
 8002316:	468c      	mov	ip, r1
 8002318:	4641      	mov	r1, r8
 800231a:	4377      	muls	r7, r6
 800231c:	0c0e      	lsrs	r6, r1, #16
 800231e:	193f      	adds	r7, r7, r4
 8002320:	19f6      	adds	r6, r6, r7
 8002322:	4448      	add	r0, r9
 8002324:	42b4      	cmp	r4, r6
 8002326:	d903      	bls.n	8002330 <__aeabi_dmul+0x2bc>
 8002328:	2180      	movs	r1, #128	@ 0x80
 800232a:	0249      	lsls	r1, r1, #9
 800232c:	4689      	mov	r9, r1
 800232e:	44cc      	add	ip, r9
 8002330:	9902      	ldr	r1, [sp, #8]
 8002332:	9f00      	ldr	r7, [sp, #0]
 8002334:	4689      	mov	r9, r1
 8002336:	0431      	lsls	r1, r6, #16
 8002338:	444f      	add	r7, r9
 800233a:	4689      	mov	r9, r1
 800233c:	4641      	mov	r1, r8
 800233e:	4297      	cmp	r7, r2
 8002340:	4192      	sbcs	r2, r2
 8002342:	040c      	lsls	r4, r1, #16
 8002344:	0c24      	lsrs	r4, r4, #16
 8002346:	444c      	add	r4, r9
 8002348:	18ff      	adds	r7, r7, r3
 800234a:	4252      	negs	r2, r2
 800234c:	1964      	adds	r4, r4, r5
 800234e:	18a1      	adds	r1, r4, r2
 8002350:	429f      	cmp	r7, r3
 8002352:	419b      	sbcs	r3, r3
 8002354:	4688      	mov	r8, r1
 8002356:	4682      	mov	sl, r0
 8002358:	425b      	negs	r3, r3
 800235a:	4699      	mov	r9, r3
 800235c:	4590      	cmp	r8, r2
 800235e:	4192      	sbcs	r2, r2
 8002360:	42ac      	cmp	r4, r5
 8002362:	41a4      	sbcs	r4, r4
 8002364:	44c2      	add	sl, r8
 8002366:	44d1      	add	r9, sl
 8002368:	4252      	negs	r2, r2
 800236a:	4264      	negs	r4, r4
 800236c:	4314      	orrs	r4, r2
 800236e:	4599      	cmp	r9, r3
 8002370:	419b      	sbcs	r3, r3
 8002372:	4582      	cmp	sl, r0
 8002374:	4192      	sbcs	r2, r2
 8002376:	425b      	negs	r3, r3
 8002378:	4252      	negs	r2, r2
 800237a:	4313      	orrs	r3, r2
 800237c:	464a      	mov	r2, r9
 800237e:	0c36      	lsrs	r6, r6, #16
 8002380:	19a4      	adds	r4, r4, r6
 8002382:	18e3      	adds	r3, r4, r3
 8002384:	4463      	add	r3, ip
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	0dd2      	lsrs	r2, r2, #23
 800238a:	431a      	orrs	r2, r3
 800238c:	9901      	ldr	r1, [sp, #4]
 800238e:	4692      	mov	sl, r2
 8002390:	027a      	lsls	r2, r7, #9
 8002392:	430a      	orrs	r2, r1
 8002394:	1e50      	subs	r0, r2, #1
 8002396:	4182      	sbcs	r2, r0
 8002398:	0dff      	lsrs	r7, r7, #23
 800239a:	4317      	orrs	r7, r2
 800239c:	464a      	mov	r2, r9
 800239e:	0252      	lsls	r2, r2, #9
 80023a0:	4317      	orrs	r7, r2
 80023a2:	46b8      	mov	r8, r7
 80023a4:	01db      	lsls	r3, r3, #7
 80023a6:	d500      	bpl.n	80023aa <__aeabi_dmul+0x336>
 80023a8:	e6ed      	b.n	8002186 <__aeabi_dmul+0x112>
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <__aeabi_dmul+0x36c>)
 80023ac:	9a03      	ldr	r2, [sp, #12]
 80023ae:	445b      	add	r3, fp
 80023b0:	4691      	mov	r9, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dc00      	bgt.n	80023b8 <__aeabi_dmul+0x344>
 80023b6:	e0ac      	b.n	8002512 <__aeabi_dmul+0x49e>
 80023b8:	003a      	movs	r2, r7
 80023ba:	0752      	lsls	r2, r2, #29
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dmul+0x34c>
 80023be:	e710      	b.n	80021e2 <__aeabi_dmul+0x16e>
 80023c0:	220f      	movs	r2, #15
 80023c2:	4658      	mov	r0, fp
 80023c4:	403a      	ands	r2, r7
 80023c6:	2a04      	cmp	r2, #4
 80023c8:	d000      	beq.n	80023cc <__aeabi_dmul+0x358>
 80023ca:	e6f9      	b.n	80021c0 <__aeabi_dmul+0x14c>
 80023cc:	e709      	b.n	80021e2 <__aeabi_dmul+0x16e>
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	000007ff 	.word	0x000007ff
 80023d4:	fffffc01 	.word	0xfffffc01
 80023d8:	feffffff 	.word	0xfeffffff
 80023dc:	000007fe 	.word	0x000007fe
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	0022      	movs	r2, r4
 80023e6:	4332      	orrs	r2, r6
 80023e8:	d06f      	beq.n	80024ca <__aeabi_dmul+0x456>
 80023ea:	2c00      	cmp	r4, #0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dmul+0x37c>
 80023ee:	e0c2      	b.n	8002576 <__aeabi_dmul+0x502>
 80023f0:	0020      	movs	r0, r4
 80023f2:	f000 fea9 	bl	8003148 <__clzsi2>
 80023f6:	0002      	movs	r2, r0
 80023f8:	0003      	movs	r3, r0
 80023fa:	3a0b      	subs	r2, #11
 80023fc:	201d      	movs	r0, #29
 80023fe:	1a82      	subs	r2, r0, r2
 8002400:	0030      	movs	r0, r6
 8002402:	0019      	movs	r1, r3
 8002404:	40d0      	lsrs	r0, r2
 8002406:	3908      	subs	r1, #8
 8002408:	408c      	lsls	r4, r1
 800240a:	0002      	movs	r2, r0
 800240c:	4322      	orrs	r2, r4
 800240e:	0034      	movs	r4, r6
 8002410:	408c      	lsls	r4, r1
 8002412:	4659      	mov	r1, fp
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	4986      	ldr	r1, [pc, #536]	@ (8002630 <__aeabi_dmul+0x5bc>)
 8002418:	468b      	mov	fp, r1
 800241a:	449b      	add	fp, r3
 800241c:	2d0a      	cmp	r5, #10
 800241e:	dd00      	ble.n	8002422 <__aeabi_dmul+0x3ae>
 8002420:	e6a4      	b.n	800216c <__aeabi_dmul+0xf8>
 8002422:	4649      	mov	r1, r9
 8002424:	9b00      	ldr	r3, [sp, #0]
 8002426:	9401      	str	r4, [sp, #4]
 8002428:	4059      	eors	r1, r3
 800242a:	b2cb      	uxtb	r3, r1
 800242c:	0014      	movs	r4, r2
 800242e:	2000      	movs	r0, #0
 8002430:	9303      	str	r3, [sp, #12]
 8002432:	2d02      	cmp	r5, #2
 8002434:	dd00      	ble.n	8002438 <__aeabi_dmul+0x3c4>
 8002436:	e667      	b.n	8002108 <__aeabi_dmul+0x94>
 8002438:	e6fb      	b.n	8002232 <__aeabi_dmul+0x1be>
 800243a:	4653      	mov	r3, sl
 800243c:	4303      	orrs	r3, r0
 800243e:	4698      	mov	r8, r3
 8002440:	d03c      	beq.n	80024bc <__aeabi_dmul+0x448>
 8002442:	4653      	mov	r3, sl
 8002444:	2b00      	cmp	r3, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x3d6>
 8002448:	e0a3      	b.n	8002592 <__aeabi_dmul+0x51e>
 800244a:	4650      	mov	r0, sl
 800244c:	f000 fe7c 	bl	8003148 <__clzsi2>
 8002450:	230b      	movs	r3, #11
 8002452:	425b      	negs	r3, r3
 8002454:	469c      	mov	ip, r3
 8002456:	0002      	movs	r2, r0
 8002458:	4484      	add	ip, r0
 800245a:	0011      	movs	r1, r2
 800245c:	4650      	mov	r0, sl
 800245e:	3908      	subs	r1, #8
 8002460:	4088      	lsls	r0, r1
 8002462:	231d      	movs	r3, #29
 8002464:	4680      	mov	r8, r0
 8002466:	4660      	mov	r0, ip
 8002468:	1a1b      	subs	r3, r3, r0
 800246a:	0020      	movs	r0, r4
 800246c:	40d8      	lsrs	r0, r3
 800246e:	0003      	movs	r3, r0
 8002470:	4640      	mov	r0, r8
 8002472:	4303      	orrs	r3, r0
 8002474:	469a      	mov	sl, r3
 8002476:	0023      	movs	r3, r4
 8002478:	408b      	lsls	r3, r1
 800247a:	4698      	mov	r8, r3
 800247c:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <__aeabi_dmul+0x5bc>)
 800247e:	2500      	movs	r5, #0
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	469b      	mov	fp, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9302      	str	r3, [sp, #8]
 8002488:	e61a      	b.n	80020c0 <__aeabi_dmul+0x4c>
 800248a:	2d0f      	cmp	r5, #15
 800248c:	d000      	beq.n	8002490 <__aeabi_dmul+0x41c>
 800248e:	e0c9      	b.n	8002624 <__aeabi_dmul+0x5b0>
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	4652      	mov	r2, sl
 8002494:	031b      	lsls	r3, r3, #12
 8002496:	421a      	tst	r2, r3
 8002498:	d002      	beq.n	80024a0 <__aeabi_dmul+0x42c>
 800249a:	421c      	tst	r4, r3
 800249c:	d100      	bne.n	80024a0 <__aeabi_dmul+0x42c>
 800249e:	e092      	b.n	80025c6 <__aeabi_dmul+0x552>
 80024a0:	2480      	movs	r4, #128	@ 0x80
 80024a2:	4653      	mov	r3, sl
 80024a4:	0324      	lsls	r4, r4, #12
 80024a6:	431c      	orrs	r4, r3
 80024a8:	0324      	lsls	r4, r4, #12
 80024aa:	4642      	mov	r2, r8
 80024ac:	0b24      	lsrs	r4, r4, #12
 80024ae:	e63e      	b.n	800212e <__aeabi_dmul+0xba>
 80024b0:	469b      	mov	fp, r3
 80024b2:	2303      	movs	r3, #3
 80024b4:	4680      	mov	r8, r0
 80024b6:	250c      	movs	r5, #12
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	e601      	b.n	80020c0 <__aeabi_dmul+0x4c>
 80024bc:	2300      	movs	r3, #0
 80024be:	469a      	mov	sl, r3
 80024c0:	469b      	mov	fp, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	2504      	movs	r5, #4
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	e5fa      	b.n	80020c0 <__aeabi_dmul+0x4c>
 80024ca:	2101      	movs	r1, #1
 80024cc:	430d      	orrs	r5, r1
 80024ce:	2d0a      	cmp	r5, #10
 80024d0:	dd00      	ble.n	80024d4 <__aeabi_dmul+0x460>
 80024d2:	e64b      	b.n	800216c <__aeabi_dmul+0xf8>
 80024d4:	4649      	mov	r1, r9
 80024d6:	9800      	ldr	r0, [sp, #0]
 80024d8:	4041      	eors	r1, r0
 80024da:	b2c9      	uxtb	r1, r1
 80024dc:	9103      	str	r1, [sp, #12]
 80024de:	2d02      	cmp	r5, #2
 80024e0:	dc00      	bgt.n	80024e4 <__aeabi_dmul+0x470>
 80024e2:	e096      	b.n	8002612 <__aeabi_dmul+0x59e>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2400      	movs	r4, #0
 80024e8:	2001      	movs	r0, #1
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	e60c      	b.n	8002108 <__aeabi_dmul+0x94>
 80024ee:	4649      	mov	r1, r9
 80024f0:	2302      	movs	r3, #2
 80024f2:	9a00      	ldr	r2, [sp, #0]
 80024f4:	432b      	orrs	r3, r5
 80024f6:	4051      	eors	r1, r2
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	9203      	str	r2, [sp, #12]
 80024fc:	2b0a      	cmp	r3, #10
 80024fe:	dd00      	ble.n	8002502 <__aeabi_dmul+0x48e>
 8002500:	e634      	b.n	800216c <__aeabi_dmul+0xf8>
 8002502:	2d00      	cmp	r5, #0
 8002504:	d157      	bne.n	80025b6 <__aeabi_dmul+0x542>
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	4699      	mov	r9, r3
 800250a:	2400      	movs	r4, #0
 800250c:	2200      	movs	r2, #0
 800250e:	4b49      	ldr	r3, [pc, #292]	@ (8002634 <__aeabi_dmul+0x5c0>)
 8002510:	e60e      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002512:	4658      	mov	r0, fp
 8002514:	2101      	movs	r1, #1
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	2938      	cmp	r1, #56	@ 0x38
 800251a:	dd00      	ble.n	800251e <__aeabi_dmul+0x4aa>
 800251c:	e62f      	b.n	800217e <__aeabi_dmul+0x10a>
 800251e:	291f      	cmp	r1, #31
 8002520:	dd56      	ble.n	80025d0 <__aeabi_dmul+0x55c>
 8002522:	221f      	movs	r2, #31
 8002524:	4654      	mov	r4, sl
 8002526:	4252      	negs	r2, r2
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	40dc      	lsrs	r4, r3
 800252c:	2920      	cmp	r1, #32
 800252e:	d007      	beq.n	8002540 <__aeabi_dmul+0x4cc>
 8002530:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <__aeabi_dmul+0x5c4>)
 8002532:	4642      	mov	r2, r8
 8002534:	469c      	mov	ip, r3
 8002536:	4653      	mov	r3, sl
 8002538:	4460      	add	r0, ip
 800253a:	4083      	lsls	r3, r0
 800253c:	431a      	orrs	r2, r3
 800253e:	4690      	mov	r8, r2
 8002540:	4642      	mov	r2, r8
 8002542:	2107      	movs	r1, #7
 8002544:	1e53      	subs	r3, r2, #1
 8002546:	419a      	sbcs	r2, r3
 8002548:	000b      	movs	r3, r1
 800254a:	4322      	orrs	r2, r4
 800254c:	4013      	ands	r3, r2
 800254e:	2400      	movs	r4, #0
 8002550:	4211      	tst	r1, r2
 8002552:	d009      	beq.n	8002568 <__aeabi_dmul+0x4f4>
 8002554:	230f      	movs	r3, #15
 8002556:	4013      	ands	r3, r2
 8002558:	2b04      	cmp	r3, #4
 800255a:	d05d      	beq.n	8002618 <__aeabi_dmul+0x5a4>
 800255c:	1d11      	adds	r1, r2, #4
 800255e:	4291      	cmp	r1, r2
 8002560:	419b      	sbcs	r3, r3
 8002562:	000a      	movs	r2, r1
 8002564:	425b      	negs	r3, r3
 8002566:	075b      	lsls	r3, r3, #29
 8002568:	08d2      	lsrs	r2, r2, #3
 800256a:	431a      	orrs	r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	e5df      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002570:	9b03      	ldr	r3, [sp, #12]
 8002572:	4699      	mov	r9, r3
 8002574:	e5fa      	b.n	800216c <__aeabi_dmul+0xf8>
 8002576:	9801      	ldr	r0, [sp, #4]
 8002578:	f000 fde6 	bl	8003148 <__clzsi2>
 800257c:	0002      	movs	r2, r0
 800257e:	0003      	movs	r3, r0
 8002580:	3215      	adds	r2, #21
 8002582:	3320      	adds	r3, #32
 8002584:	2a1c      	cmp	r2, #28
 8002586:	dc00      	bgt.n	800258a <__aeabi_dmul+0x516>
 8002588:	e738      	b.n	80023fc <__aeabi_dmul+0x388>
 800258a:	9a01      	ldr	r2, [sp, #4]
 800258c:	3808      	subs	r0, #8
 800258e:	4082      	lsls	r2, r0
 8002590:	e73f      	b.n	8002412 <__aeabi_dmul+0x39e>
 8002592:	f000 fdd9 	bl	8003148 <__clzsi2>
 8002596:	2315      	movs	r3, #21
 8002598:	469c      	mov	ip, r3
 800259a:	4484      	add	ip, r0
 800259c:	0002      	movs	r2, r0
 800259e:	4663      	mov	r3, ip
 80025a0:	3220      	adds	r2, #32
 80025a2:	2b1c      	cmp	r3, #28
 80025a4:	dc00      	bgt.n	80025a8 <__aeabi_dmul+0x534>
 80025a6:	e758      	b.n	800245a <__aeabi_dmul+0x3e6>
 80025a8:	2300      	movs	r3, #0
 80025aa:	4698      	mov	r8, r3
 80025ac:	0023      	movs	r3, r4
 80025ae:	3808      	subs	r0, #8
 80025b0:	4083      	lsls	r3, r0
 80025b2:	469a      	mov	sl, r3
 80025b4:	e762      	b.n	800247c <__aeabi_dmul+0x408>
 80025b6:	001d      	movs	r5, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	2400      	movs	r4, #0
 80025bc:	2002      	movs	r0, #2
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	e5a2      	b.n	8002108 <__aeabi_dmul+0x94>
 80025c2:	9002      	str	r0, [sp, #8]
 80025c4:	e632      	b.n	800222c <__aeabi_dmul+0x1b8>
 80025c6:	431c      	orrs	r4, r3
 80025c8:	9b00      	ldr	r3, [sp, #0]
 80025ca:	9a01      	ldr	r2, [sp, #4]
 80025cc:	4699      	mov	r9, r3
 80025ce:	e5ae      	b.n	800212e <__aeabi_dmul+0xba>
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <__aeabi_dmul+0x5c8>)
 80025d2:	4652      	mov	r2, sl
 80025d4:	18c3      	adds	r3, r0, r3
 80025d6:	4640      	mov	r0, r8
 80025d8:	409a      	lsls	r2, r3
 80025da:	40c8      	lsrs	r0, r1
 80025dc:	4302      	orrs	r2, r0
 80025de:	4640      	mov	r0, r8
 80025e0:	4098      	lsls	r0, r3
 80025e2:	0003      	movs	r3, r0
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	4183      	sbcs	r3, r0
 80025e8:	4654      	mov	r4, sl
 80025ea:	431a      	orrs	r2, r3
 80025ec:	40cc      	lsrs	r4, r1
 80025ee:	0753      	lsls	r3, r2, #29
 80025f0:	d009      	beq.n	8002606 <__aeabi_dmul+0x592>
 80025f2:	230f      	movs	r3, #15
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d005      	beq.n	8002606 <__aeabi_dmul+0x592>
 80025fa:	1d13      	adds	r3, r2, #4
 80025fc:	4293      	cmp	r3, r2
 80025fe:	4192      	sbcs	r2, r2
 8002600:	4252      	negs	r2, r2
 8002602:	18a4      	adds	r4, r4, r2
 8002604:	001a      	movs	r2, r3
 8002606:	0223      	lsls	r3, r4, #8
 8002608:	d508      	bpl.n	800261c <__aeabi_dmul+0x5a8>
 800260a:	2301      	movs	r3, #1
 800260c:	2400      	movs	r4, #0
 800260e:	2200      	movs	r2, #0
 8002610:	e58e      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002612:	4689      	mov	r9, r1
 8002614:	2400      	movs	r4, #0
 8002616:	e58b      	b.n	8002130 <__aeabi_dmul+0xbc>
 8002618:	2300      	movs	r3, #0
 800261a:	e7a5      	b.n	8002568 <__aeabi_dmul+0x4f4>
 800261c:	0763      	lsls	r3, r4, #29
 800261e:	0264      	lsls	r4, r4, #9
 8002620:	0b24      	lsrs	r4, r4, #12
 8002622:	e7a1      	b.n	8002568 <__aeabi_dmul+0x4f4>
 8002624:	9b00      	ldr	r3, [sp, #0]
 8002626:	46a2      	mov	sl, r4
 8002628:	4699      	mov	r9, r3
 800262a:	9b01      	ldr	r3, [sp, #4]
 800262c:	4698      	mov	r8, r3
 800262e:	e737      	b.n	80024a0 <__aeabi_dmul+0x42c>
 8002630:	fffffc0d 	.word	0xfffffc0d
 8002634:	000007ff 	.word	0x000007ff
 8002638:	0000043e 	.word	0x0000043e
 800263c:	0000041e 	.word	0x0000041e

08002640 <__aeabi_dsub>:
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	4657      	mov	r7, sl
 8002644:	464e      	mov	r6, r9
 8002646:	4645      	mov	r5, r8
 8002648:	46de      	mov	lr, fp
 800264a:	b5e0      	push	{r5, r6, r7, lr}
 800264c:	b083      	sub	sp, #12
 800264e:	9000      	str	r0, [sp, #0]
 8002650:	9101      	str	r1, [sp, #4]
 8002652:	030c      	lsls	r4, r1, #12
 8002654:	004d      	lsls	r5, r1, #1
 8002656:	0fce      	lsrs	r6, r1, #31
 8002658:	0a61      	lsrs	r1, r4, #9
 800265a:	9c00      	ldr	r4, [sp, #0]
 800265c:	005f      	lsls	r7, r3, #1
 800265e:	0f64      	lsrs	r4, r4, #29
 8002660:	430c      	orrs	r4, r1
 8002662:	9900      	ldr	r1, [sp, #0]
 8002664:	9200      	str	r2, [sp, #0]
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	00c8      	lsls	r0, r1, #3
 800266a:	0319      	lsls	r1, r3, #12
 800266c:	0d7b      	lsrs	r3, r7, #21
 800266e:	4699      	mov	r9, r3
 8002670:	9b01      	ldr	r3, [sp, #4]
 8002672:	4fcc      	ldr	r7, [pc, #816]	@ (80029a4 <__aeabi_dsub+0x364>)
 8002674:	0fdb      	lsrs	r3, r3, #31
 8002676:	469c      	mov	ip, r3
 8002678:	0a4b      	lsrs	r3, r1, #9
 800267a:	9900      	ldr	r1, [sp, #0]
 800267c:	4680      	mov	r8, r0
 800267e:	0f49      	lsrs	r1, r1, #29
 8002680:	4319      	orrs	r1, r3
 8002682:	9b00      	ldr	r3, [sp, #0]
 8002684:	468b      	mov	fp, r1
 8002686:	00da      	lsls	r2, r3, #3
 8002688:	4692      	mov	sl, r2
 800268a:	0d6d      	lsrs	r5, r5, #21
 800268c:	45b9      	cmp	r9, r7
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0x52>
 8002690:	e0bf      	b.n	8002812 <__aeabi_dsub+0x1d2>
 8002692:	2301      	movs	r3, #1
 8002694:	4661      	mov	r1, ip
 8002696:	4059      	eors	r1, r3
 8002698:	464b      	mov	r3, r9
 800269a:	468c      	mov	ip, r1
 800269c:	1aeb      	subs	r3, r5, r3
 800269e:	428e      	cmp	r6, r1
 80026a0:	d075      	beq.n	800278e <__aeabi_dsub+0x14e>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	dc00      	bgt.n	80026a8 <__aeabi_dsub+0x68>
 80026a6:	e2a3      	b.n	8002bf0 <__aeabi_dsub+0x5b0>
 80026a8:	4649      	mov	r1, r9
 80026aa:	2900      	cmp	r1, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x70>
 80026ae:	e0ce      	b.n	800284e <__aeabi_dsub+0x20e>
 80026b0:	42bd      	cmp	r5, r7
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x76>
 80026b4:	e200      	b.n	8002ab8 <__aeabi_dsub+0x478>
 80026b6:	2701      	movs	r7, #1
 80026b8:	2b38      	cmp	r3, #56	@ 0x38
 80026ba:	dc19      	bgt.n	80026f0 <__aeabi_dsub+0xb0>
 80026bc:	2780      	movs	r7, #128	@ 0x80
 80026be:	4659      	mov	r1, fp
 80026c0:	043f      	lsls	r7, r7, #16
 80026c2:	4339      	orrs	r1, r7
 80026c4:	468b      	mov	fp, r1
 80026c6:	2b1f      	cmp	r3, #31
 80026c8:	dd00      	ble.n	80026cc <__aeabi_dsub+0x8c>
 80026ca:	e1fa      	b.n	8002ac2 <__aeabi_dsub+0x482>
 80026cc:	2720      	movs	r7, #32
 80026ce:	1af9      	subs	r1, r7, r3
 80026d0:	468c      	mov	ip, r1
 80026d2:	4659      	mov	r1, fp
 80026d4:	4667      	mov	r7, ip
 80026d6:	40b9      	lsls	r1, r7
 80026d8:	000f      	movs	r7, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	40d9      	lsrs	r1, r3
 80026de:	430f      	orrs	r7, r1
 80026e0:	4661      	mov	r1, ip
 80026e2:	408a      	lsls	r2, r1
 80026e4:	1e51      	subs	r1, r2, #1
 80026e6:	418a      	sbcs	r2, r1
 80026e8:	4659      	mov	r1, fp
 80026ea:	40d9      	lsrs	r1, r3
 80026ec:	4317      	orrs	r7, r2
 80026ee:	1a64      	subs	r4, r4, r1
 80026f0:	1bc7      	subs	r7, r0, r7
 80026f2:	42b8      	cmp	r0, r7
 80026f4:	4180      	sbcs	r0, r0
 80026f6:	4240      	negs	r0, r0
 80026f8:	1a24      	subs	r4, r4, r0
 80026fa:	0223      	lsls	r3, r4, #8
 80026fc:	d400      	bmi.n	8002700 <__aeabi_dsub+0xc0>
 80026fe:	e140      	b.n	8002982 <__aeabi_dsub+0x342>
 8002700:	0264      	lsls	r4, r4, #9
 8002702:	0a64      	lsrs	r4, r4, #9
 8002704:	2c00      	cmp	r4, #0
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0xca>
 8002708:	e154      	b.n	80029b4 <__aeabi_dsub+0x374>
 800270a:	0020      	movs	r0, r4
 800270c:	f000 fd1c 	bl	8003148 <__clzsi2>
 8002710:	0003      	movs	r3, r0
 8002712:	3b08      	subs	r3, #8
 8002714:	2120      	movs	r1, #32
 8002716:	0038      	movs	r0, r7
 8002718:	1aca      	subs	r2, r1, r3
 800271a:	40d0      	lsrs	r0, r2
 800271c:	409c      	lsls	r4, r3
 800271e:	0002      	movs	r2, r0
 8002720:	409f      	lsls	r7, r3
 8002722:	4322      	orrs	r2, r4
 8002724:	429d      	cmp	r5, r3
 8002726:	dd00      	ble.n	800272a <__aeabi_dsub+0xea>
 8002728:	e1a6      	b.n	8002a78 <__aeabi_dsub+0x438>
 800272a:	1b58      	subs	r0, r3, r5
 800272c:	3001      	adds	r0, #1
 800272e:	1a09      	subs	r1, r1, r0
 8002730:	003c      	movs	r4, r7
 8002732:	408f      	lsls	r7, r1
 8002734:	40c4      	lsrs	r4, r0
 8002736:	1e7b      	subs	r3, r7, #1
 8002738:	419f      	sbcs	r7, r3
 800273a:	0013      	movs	r3, r2
 800273c:	408b      	lsls	r3, r1
 800273e:	4327      	orrs	r7, r4
 8002740:	431f      	orrs	r7, r3
 8002742:	40c2      	lsrs	r2, r0
 8002744:	003b      	movs	r3, r7
 8002746:	0014      	movs	r4, r2
 8002748:	2500      	movs	r5, #0
 800274a:	4313      	orrs	r3, r2
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x110>
 800274e:	e1f7      	b.n	8002b40 <__aeabi_dsub+0x500>
 8002750:	077b      	lsls	r3, r7, #29
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x116>
 8002754:	e377      	b.n	8002e46 <__aeabi_dsub+0x806>
 8002756:	230f      	movs	r3, #15
 8002758:	0038      	movs	r0, r7
 800275a:	403b      	ands	r3, r7
 800275c:	2b04      	cmp	r3, #4
 800275e:	d004      	beq.n	800276a <__aeabi_dsub+0x12a>
 8002760:	1d38      	adds	r0, r7, #4
 8002762:	42b8      	cmp	r0, r7
 8002764:	41bf      	sbcs	r7, r7
 8002766:	427f      	negs	r7, r7
 8002768:	19e4      	adds	r4, r4, r7
 800276a:	0223      	lsls	r3, r4, #8
 800276c:	d400      	bmi.n	8002770 <__aeabi_dsub+0x130>
 800276e:	e368      	b.n	8002e42 <__aeabi_dsub+0x802>
 8002770:	4b8c      	ldr	r3, [pc, #560]	@ (80029a4 <__aeabi_dsub+0x364>)
 8002772:	3501      	adds	r5, #1
 8002774:	429d      	cmp	r5, r3
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x13a>
 8002778:	e0f4      	b.n	8002964 <__aeabi_dsub+0x324>
 800277a:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <__aeabi_dsub+0x368>)
 800277c:	056d      	lsls	r5, r5, #21
 800277e:	401c      	ands	r4, r3
 8002780:	0d6d      	lsrs	r5, r5, #21
 8002782:	0767      	lsls	r7, r4, #29
 8002784:	08c0      	lsrs	r0, r0, #3
 8002786:	0264      	lsls	r4, r4, #9
 8002788:	4307      	orrs	r7, r0
 800278a:	0b24      	lsrs	r4, r4, #12
 800278c:	e0ec      	b.n	8002968 <__aeabi_dsub+0x328>
 800278e:	2b00      	cmp	r3, #0
 8002790:	dc00      	bgt.n	8002794 <__aeabi_dsub+0x154>
 8002792:	e329      	b.n	8002de8 <__aeabi_dsub+0x7a8>
 8002794:	4649      	mov	r1, r9
 8002796:	2900      	cmp	r1, #0
 8002798:	d000      	beq.n	800279c <__aeabi_dsub+0x15c>
 800279a:	e0d6      	b.n	800294a <__aeabi_dsub+0x30a>
 800279c:	4659      	mov	r1, fp
 800279e:	4311      	orrs	r1, r2
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x164>
 80027a2:	e12e      	b.n	8002a02 <__aeabi_dsub+0x3c2>
 80027a4:	1e59      	subs	r1, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x16c>
 80027aa:	e1e6      	b.n	8002b7a <__aeabi_dsub+0x53a>
 80027ac:	42bb      	cmp	r3, r7
 80027ae:	d100      	bne.n	80027b2 <__aeabi_dsub+0x172>
 80027b0:	e182      	b.n	8002ab8 <__aeabi_dsub+0x478>
 80027b2:	2701      	movs	r7, #1
 80027b4:	000b      	movs	r3, r1
 80027b6:	2938      	cmp	r1, #56	@ 0x38
 80027b8:	dc14      	bgt.n	80027e4 <__aeabi_dsub+0x1a4>
 80027ba:	2b1f      	cmp	r3, #31
 80027bc:	dd00      	ble.n	80027c0 <__aeabi_dsub+0x180>
 80027be:	e23c      	b.n	8002c3a <__aeabi_dsub+0x5fa>
 80027c0:	2720      	movs	r7, #32
 80027c2:	1af9      	subs	r1, r7, r3
 80027c4:	468c      	mov	ip, r1
 80027c6:	4659      	mov	r1, fp
 80027c8:	4667      	mov	r7, ip
 80027ca:	40b9      	lsls	r1, r7
 80027cc:	000f      	movs	r7, r1
 80027ce:	0011      	movs	r1, r2
 80027d0:	40d9      	lsrs	r1, r3
 80027d2:	430f      	orrs	r7, r1
 80027d4:	4661      	mov	r1, ip
 80027d6:	408a      	lsls	r2, r1
 80027d8:	1e51      	subs	r1, r2, #1
 80027da:	418a      	sbcs	r2, r1
 80027dc:	4659      	mov	r1, fp
 80027de:	40d9      	lsrs	r1, r3
 80027e0:	4317      	orrs	r7, r2
 80027e2:	1864      	adds	r4, r4, r1
 80027e4:	183f      	adds	r7, r7, r0
 80027e6:	4287      	cmp	r7, r0
 80027e8:	4180      	sbcs	r0, r0
 80027ea:	4240      	negs	r0, r0
 80027ec:	1824      	adds	r4, r4, r0
 80027ee:	0223      	lsls	r3, r4, #8
 80027f0:	d400      	bmi.n	80027f4 <__aeabi_dsub+0x1b4>
 80027f2:	e0c6      	b.n	8002982 <__aeabi_dsub+0x342>
 80027f4:	4b6b      	ldr	r3, [pc, #428]	@ (80029a4 <__aeabi_dsub+0x364>)
 80027f6:	3501      	adds	r5, #1
 80027f8:	429d      	cmp	r5, r3
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x1be>
 80027fc:	e0b2      	b.n	8002964 <__aeabi_dsub+0x324>
 80027fe:	2101      	movs	r1, #1
 8002800:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <__aeabi_dsub+0x368>)
 8002802:	087a      	lsrs	r2, r7, #1
 8002804:	401c      	ands	r4, r3
 8002806:	4039      	ands	r1, r7
 8002808:	430a      	orrs	r2, r1
 800280a:	07e7      	lsls	r7, r4, #31
 800280c:	4317      	orrs	r7, r2
 800280e:	0864      	lsrs	r4, r4, #1
 8002810:	e79e      	b.n	8002750 <__aeabi_dsub+0x110>
 8002812:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <__aeabi_dsub+0x36c>)
 8002814:	4311      	orrs	r1, r2
 8002816:	468a      	mov	sl, r1
 8002818:	18eb      	adds	r3, r5, r3
 800281a:	2900      	cmp	r1, #0
 800281c:	d028      	beq.n	8002870 <__aeabi_dsub+0x230>
 800281e:	4566      	cmp	r6, ip
 8002820:	d02c      	beq.n	800287c <__aeabi_dsub+0x23c>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05b      	beq.n	80028de <__aeabi_dsub+0x29e>
 8002826:	2d00      	cmp	r5, #0
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1ec>
 800282a:	e12c      	b.n	8002a86 <__aeabi_dsub+0x446>
 800282c:	465b      	mov	r3, fp
 800282e:	4666      	mov	r6, ip
 8002830:	075f      	lsls	r7, r3, #29
 8002832:	08d2      	lsrs	r2, r2, #3
 8002834:	4317      	orrs	r7, r2
 8002836:	08dd      	lsrs	r5, r3, #3
 8002838:	003b      	movs	r3, r7
 800283a:	432b      	orrs	r3, r5
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x200>
 800283e:	e0e2      	b.n	8002a06 <__aeabi_dsub+0x3c6>
 8002840:	2480      	movs	r4, #128	@ 0x80
 8002842:	0324      	lsls	r4, r4, #12
 8002844:	432c      	orrs	r4, r5
 8002846:	0324      	lsls	r4, r4, #12
 8002848:	4d56      	ldr	r5, [pc, #344]	@ (80029a4 <__aeabi_dsub+0x364>)
 800284a:	0b24      	lsrs	r4, r4, #12
 800284c:	e08c      	b.n	8002968 <__aeabi_dsub+0x328>
 800284e:	4659      	mov	r1, fp
 8002850:	4311      	orrs	r1, r2
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x216>
 8002854:	e0d5      	b.n	8002a02 <__aeabi_dsub+0x3c2>
 8002856:	1e59      	subs	r1, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x21e>
 800285c:	e1b9      	b.n	8002bd2 <__aeabi_dsub+0x592>
 800285e:	42bb      	cmp	r3, r7
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x224>
 8002862:	e1b1      	b.n	8002bc8 <__aeabi_dsub+0x588>
 8002864:	2701      	movs	r7, #1
 8002866:	000b      	movs	r3, r1
 8002868:	2938      	cmp	r1, #56	@ 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x22e>
 800286c:	e740      	b.n	80026f0 <__aeabi_dsub+0xb0>
 800286e:	e72a      	b.n	80026c6 <__aeabi_dsub+0x86>
 8002870:	4661      	mov	r1, ip
 8002872:	2701      	movs	r7, #1
 8002874:	4079      	eors	r1, r7
 8002876:	468c      	mov	ip, r1
 8002878:	4566      	cmp	r6, ip
 800287a:	d1d2      	bne.n	8002822 <__aeabi_dsub+0x1e2>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x242>
 8002880:	e0c5      	b.n	8002a0e <__aeabi_dsub+0x3ce>
 8002882:	2d00      	cmp	r5, #0
 8002884:	d000      	beq.n	8002888 <__aeabi_dsub+0x248>
 8002886:	e155      	b.n	8002b34 <__aeabi_dsub+0x4f4>
 8002888:	464b      	mov	r3, r9
 800288a:	0025      	movs	r5, r4
 800288c:	4305      	orrs	r5, r0
 800288e:	d100      	bne.n	8002892 <__aeabi_dsub+0x252>
 8002890:	e212      	b.n	8002cb8 <__aeabi_dsub+0x678>
 8002892:	1e59      	subs	r1, r3, #1
 8002894:	468c      	mov	ip, r1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x25c>
 800289a:	e249      	b.n	8002d30 <__aeabi_dsub+0x6f0>
 800289c:	4d41      	ldr	r5, [pc, #260]	@ (80029a4 <__aeabi_dsub+0x364>)
 800289e:	42ab      	cmp	r3, r5
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x264>
 80028a2:	e28f      	b.n	8002dc4 <__aeabi_dsub+0x784>
 80028a4:	2701      	movs	r7, #1
 80028a6:	2938      	cmp	r1, #56	@ 0x38
 80028a8:	dc11      	bgt.n	80028ce <__aeabi_dsub+0x28e>
 80028aa:	4663      	mov	r3, ip
 80028ac:	2b1f      	cmp	r3, #31
 80028ae:	dd00      	ble.n	80028b2 <__aeabi_dsub+0x272>
 80028b0:	e25b      	b.n	8002d6a <__aeabi_dsub+0x72a>
 80028b2:	4661      	mov	r1, ip
 80028b4:	2320      	movs	r3, #32
 80028b6:	0027      	movs	r7, r4
 80028b8:	1a5b      	subs	r3, r3, r1
 80028ba:	0005      	movs	r5, r0
 80028bc:	4098      	lsls	r0, r3
 80028be:	409f      	lsls	r7, r3
 80028c0:	40cd      	lsrs	r5, r1
 80028c2:	1e43      	subs	r3, r0, #1
 80028c4:	4198      	sbcs	r0, r3
 80028c6:	40cc      	lsrs	r4, r1
 80028c8:	432f      	orrs	r7, r5
 80028ca:	4307      	orrs	r7, r0
 80028cc:	44a3      	add	fp, r4
 80028ce:	18bf      	adds	r7, r7, r2
 80028d0:	4297      	cmp	r7, r2
 80028d2:	4192      	sbcs	r2, r2
 80028d4:	4252      	negs	r2, r2
 80028d6:	445a      	add	r2, fp
 80028d8:	0014      	movs	r4, r2
 80028da:	464d      	mov	r5, r9
 80028dc:	e787      	b.n	80027ee <__aeabi_dsub+0x1ae>
 80028de:	4f34      	ldr	r7, [pc, #208]	@ (80029b0 <__aeabi_dsub+0x370>)
 80028e0:	1c6b      	adds	r3, r5, #1
 80028e2:	423b      	tst	r3, r7
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x2a8>
 80028e6:	e0b6      	b.n	8002a56 <__aeabi_dsub+0x416>
 80028e8:	4659      	mov	r1, fp
 80028ea:	0023      	movs	r3, r4
 80028ec:	4311      	orrs	r1, r2
 80028ee:	000f      	movs	r7, r1
 80028f0:	4303      	orrs	r3, r0
 80028f2:	2d00      	cmp	r5, #0
 80028f4:	d000      	beq.n	80028f8 <__aeabi_dsub+0x2b8>
 80028f6:	e126      	b.n	8002b46 <__aeabi_dsub+0x506>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x2be>
 80028fc:	e1c0      	b.n	8002c80 <__aeabi_dsub+0x640>
 80028fe:	2900      	cmp	r1, #0
 8002900:	d100      	bne.n	8002904 <__aeabi_dsub+0x2c4>
 8002902:	e0a1      	b.n	8002a48 <__aeabi_dsub+0x408>
 8002904:	1a83      	subs	r3, r0, r2
 8002906:	4698      	mov	r8, r3
 8002908:	465b      	mov	r3, fp
 800290a:	4540      	cmp	r0, r8
 800290c:	41ad      	sbcs	r5, r5
 800290e:	1ae3      	subs	r3, r4, r3
 8002910:	426d      	negs	r5, r5
 8002912:	1b5b      	subs	r3, r3, r5
 8002914:	2580      	movs	r5, #128	@ 0x80
 8002916:	042d      	lsls	r5, r5, #16
 8002918:	422b      	tst	r3, r5
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x2de>
 800291c:	e14b      	b.n	8002bb6 <__aeabi_dsub+0x576>
 800291e:	465b      	mov	r3, fp
 8002920:	1a10      	subs	r0, r2, r0
 8002922:	4282      	cmp	r2, r0
 8002924:	4192      	sbcs	r2, r2
 8002926:	1b1c      	subs	r4, r3, r4
 8002928:	0007      	movs	r7, r0
 800292a:	2601      	movs	r6, #1
 800292c:	4663      	mov	r3, ip
 800292e:	4252      	negs	r2, r2
 8002930:	1aa4      	subs	r4, r4, r2
 8002932:	4327      	orrs	r7, r4
 8002934:	401e      	ands	r6, r3
 8002936:	2f00      	cmp	r7, #0
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x2fc>
 800293a:	e142      	b.n	8002bc2 <__aeabi_dsub+0x582>
 800293c:	422c      	tst	r4, r5
 800293e:	d100      	bne.n	8002942 <__aeabi_dsub+0x302>
 8002940:	e26d      	b.n	8002e1e <__aeabi_dsub+0x7de>
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <__aeabi_dsub+0x368>)
 8002944:	2501      	movs	r5, #1
 8002946:	401c      	ands	r4, r3
 8002948:	e71b      	b.n	8002782 <__aeabi_dsub+0x142>
 800294a:	42bd      	cmp	r5, r7
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x310>
 800294e:	e13b      	b.n	8002bc8 <__aeabi_dsub+0x588>
 8002950:	2701      	movs	r7, #1
 8002952:	2b38      	cmp	r3, #56	@ 0x38
 8002954:	dd00      	ble.n	8002958 <__aeabi_dsub+0x318>
 8002956:	e745      	b.n	80027e4 <__aeabi_dsub+0x1a4>
 8002958:	2780      	movs	r7, #128	@ 0x80
 800295a:	4659      	mov	r1, fp
 800295c:	043f      	lsls	r7, r7, #16
 800295e:	4339      	orrs	r1, r7
 8002960:	468b      	mov	fp, r1
 8002962:	e72a      	b.n	80027ba <__aeabi_dsub+0x17a>
 8002964:	2400      	movs	r4, #0
 8002966:	2700      	movs	r7, #0
 8002968:	052d      	lsls	r5, r5, #20
 800296a:	4325      	orrs	r5, r4
 800296c:	07f6      	lsls	r6, r6, #31
 800296e:	4335      	orrs	r5, r6
 8002970:	0038      	movs	r0, r7
 8002972:	0029      	movs	r1, r5
 8002974:	b003      	add	sp, #12
 8002976:	bcf0      	pop	{r4, r5, r6, r7}
 8002978:	46bb      	mov	fp, r7
 800297a:	46b2      	mov	sl, r6
 800297c:	46a9      	mov	r9, r5
 800297e:	46a0      	mov	r8, r4
 8002980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002982:	077b      	lsls	r3, r7, #29
 8002984:	d004      	beq.n	8002990 <__aeabi_dsub+0x350>
 8002986:	230f      	movs	r3, #15
 8002988:	403b      	ands	r3, r7
 800298a:	2b04      	cmp	r3, #4
 800298c:	d000      	beq.n	8002990 <__aeabi_dsub+0x350>
 800298e:	e6e7      	b.n	8002760 <__aeabi_dsub+0x120>
 8002990:	002b      	movs	r3, r5
 8002992:	08f8      	lsrs	r0, r7, #3
 8002994:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <__aeabi_dsub+0x364>)
 8002996:	0767      	lsls	r7, r4, #29
 8002998:	4307      	orrs	r7, r0
 800299a:	08e5      	lsrs	r5, r4, #3
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x362>
 80029a0:	e74a      	b.n	8002838 <__aeabi_dsub+0x1f8>
 80029a2:	e0a5      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 80029a4:	000007ff 	.word	0x000007ff
 80029a8:	ff7fffff 	.word	0xff7fffff
 80029ac:	fffff801 	.word	0xfffff801
 80029b0:	000007fe 	.word	0x000007fe
 80029b4:	0038      	movs	r0, r7
 80029b6:	f000 fbc7 	bl	8003148 <__clzsi2>
 80029ba:	0003      	movs	r3, r0
 80029bc:	3318      	adds	r3, #24
 80029be:	2b1f      	cmp	r3, #31
 80029c0:	dc00      	bgt.n	80029c4 <__aeabi_dsub+0x384>
 80029c2:	e6a7      	b.n	8002714 <__aeabi_dsub+0xd4>
 80029c4:	003a      	movs	r2, r7
 80029c6:	3808      	subs	r0, #8
 80029c8:	4082      	lsls	r2, r0
 80029ca:	429d      	cmp	r5, r3
 80029cc:	dd00      	ble.n	80029d0 <__aeabi_dsub+0x390>
 80029ce:	e08a      	b.n	8002ae6 <__aeabi_dsub+0x4a6>
 80029d0:	1b5b      	subs	r3, r3, r5
 80029d2:	1c58      	adds	r0, r3, #1
 80029d4:	281f      	cmp	r0, #31
 80029d6:	dc00      	bgt.n	80029da <__aeabi_dsub+0x39a>
 80029d8:	e1d8      	b.n	8002d8c <__aeabi_dsub+0x74c>
 80029da:	0017      	movs	r7, r2
 80029dc:	3b1f      	subs	r3, #31
 80029de:	40df      	lsrs	r7, r3
 80029e0:	2820      	cmp	r0, #32
 80029e2:	d005      	beq.n	80029f0 <__aeabi_dsub+0x3b0>
 80029e4:	2340      	movs	r3, #64	@ 0x40
 80029e6:	1a1b      	subs	r3, r3, r0
 80029e8:	409a      	lsls	r2, r3
 80029ea:	1e53      	subs	r3, r2, #1
 80029ec:	419a      	sbcs	r2, r3
 80029ee:	4317      	orrs	r7, r2
 80029f0:	2500      	movs	r5, #0
 80029f2:	2f00      	cmp	r7, #0
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x3b8>
 80029f6:	e0e5      	b.n	8002bc4 <__aeabi_dsub+0x584>
 80029f8:	077b      	lsls	r3, r7, #29
 80029fa:	d000      	beq.n	80029fe <__aeabi_dsub+0x3be>
 80029fc:	e6ab      	b.n	8002756 <__aeabi_dsub+0x116>
 80029fe:	002c      	movs	r4, r5
 8002a00:	e7c6      	b.n	8002990 <__aeabi_dsub+0x350>
 8002a02:	08c0      	lsrs	r0, r0, #3
 8002a04:	e7c6      	b.n	8002994 <__aeabi_dsub+0x354>
 8002a06:	2700      	movs	r7, #0
 8002a08:	2400      	movs	r4, #0
 8002a0a:	4dd1      	ldr	r5, [pc, #836]	@ (8002d50 <__aeabi_dsub+0x710>)
 8002a0c:	e7ac      	b.n	8002968 <__aeabi_dsub+0x328>
 8002a0e:	4fd1      	ldr	r7, [pc, #836]	@ (8002d54 <__aeabi_dsub+0x714>)
 8002a10:	1c6b      	adds	r3, r5, #1
 8002a12:	423b      	tst	r3, r7
 8002a14:	d171      	bne.n	8002afa <__aeabi_dsub+0x4ba>
 8002a16:	0023      	movs	r3, r4
 8002a18:	4303      	orrs	r3, r0
 8002a1a:	2d00      	cmp	r5, #0
 8002a1c:	d000      	beq.n	8002a20 <__aeabi_dsub+0x3e0>
 8002a1e:	e14e      	b.n	8002cbe <__aeabi_dsub+0x67e>
 8002a20:	4657      	mov	r7, sl
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x3e8>
 8002a26:	e1b5      	b.n	8002d94 <__aeabi_dsub+0x754>
 8002a28:	2f00      	cmp	r7, #0
 8002a2a:	d00d      	beq.n	8002a48 <__aeabi_dsub+0x408>
 8002a2c:	1883      	adds	r3, r0, r2
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	4180      	sbcs	r0, r0
 8002a32:	445c      	add	r4, fp
 8002a34:	4240      	negs	r0, r0
 8002a36:	1824      	adds	r4, r4, r0
 8002a38:	0222      	lsls	r2, r4, #8
 8002a3a:	d500      	bpl.n	8002a3e <__aeabi_dsub+0x3fe>
 8002a3c:	e1c8      	b.n	8002dd0 <__aeabi_dsub+0x790>
 8002a3e:	001f      	movs	r7, r3
 8002a40:	4698      	mov	r8, r3
 8002a42:	4327      	orrs	r7, r4
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x408>
 8002a46:	e0bc      	b.n	8002bc2 <__aeabi_dsub+0x582>
 8002a48:	4643      	mov	r3, r8
 8002a4a:	0767      	lsls	r7, r4, #29
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	431f      	orrs	r7, r3
 8002a50:	08e5      	lsrs	r5, r4, #3
 8002a52:	2300      	movs	r3, #0
 8002a54:	e04c      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002a56:	1a83      	subs	r3, r0, r2
 8002a58:	4698      	mov	r8, r3
 8002a5a:	465b      	mov	r3, fp
 8002a5c:	4540      	cmp	r0, r8
 8002a5e:	41bf      	sbcs	r7, r7
 8002a60:	1ae3      	subs	r3, r4, r3
 8002a62:	427f      	negs	r7, r7
 8002a64:	1bdb      	subs	r3, r3, r7
 8002a66:	021f      	lsls	r7, r3, #8
 8002a68:	d47c      	bmi.n	8002b64 <__aeabi_dsub+0x524>
 8002a6a:	4647      	mov	r7, r8
 8002a6c:	431f      	orrs	r7, r3
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dsub+0x432>
 8002a70:	e0a6      	b.n	8002bc0 <__aeabi_dsub+0x580>
 8002a72:	001c      	movs	r4, r3
 8002a74:	4647      	mov	r7, r8
 8002a76:	e645      	b.n	8002704 <__aeabi_dsub+0xc4>
 8002a78:	4cb7      	ldr	r4, [pc, #732]	@ (8002d58 <__aeabi_dsub+0x718>)
 8002a7a:	1aed      	subs	r5, r5, r3
 8002a7c:	4014      	ands	r4, r2
 8002a7e:	077b      	lsls	r3, r7, #29
 8002a80:	d000      	beq.n	8002a84 <__aeabi_dsub+0x444>
 8002a82:	e780      	b.n	8002986 <__aeabi_dsub+0x346>
 8002a84:	e784      	b.n	8002990 <__aeabi_dsub+0x350>
 8002a86:	464b      	mov	r3, r9
 8002a88:	0025      	movs	r5, r4
 8002a8a:	4305      	orrs	r5, r0
 8002a8c:	d066      	beq.n	8002b5c <__aeabi_dsub+0x51c>
 8002a8e:	1e5f      	subs	r7, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d100      	bne.n	8002a96 <__aeabi_dsub+0x456>
 8002a94:	e0fc      	b.n	8002c90 <__aeabi_dsub+0x650>
 8002a96:	4dae      	ldr	r5, [pc, #696]	@ (8002d50 <__aeabi_dsub+0x710>)
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x45e>
 8002a9c:	e15e      	b.n	8002d5c <__aeabi_dsub+0x71c>
 8002a9e:	4666      	mov	r6, ip
 8002aa0:	2f38      	cmp	r7, #56	@ 0x38
 8002aa2:	dc00      	bgt.n	8002aa6 <__aeabi_dsub+0x466>
 8002aa4:	e0b4      	b.n	8002c10 <__aeabi_dsub+0x5d0>
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	1a17      	subs	r7, r2, r0
 8002aaa:	42ba      	cmp	r2, r7
 8002aac:	4192      	sbcs	r2, r2
 8002aae:	465b      	mov	r3, fp
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	464d      	mov	r5, r9
 8002ab4:	1a9c      	subs	r4, r3, r2
 8002ab6:	e620      	b.n	80026fa <__aeabi_dsub+0xba>
 8002ab8:	0767      	lsls	r7, r4, #29
 8002aba:	08c0      	lsrs	r0, r0, #3
 8002abc:	4307      	orrs	r7, r0
 8002abe:	08e5      	lsrs	r5, r4, #3
 8002ac0:	e6ba      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002ac2:	001f      	movs	r7, r3
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	3f20      	subs	r7, #32
 8002ac8:	40f9      	lsrs	r1, r7
 8002aca:	000f      	movs	r7, r1
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d005      	beq.n	8002adc <__aeabi_dsub+0x49c>
 8002ad0:	2140      	movs	r1, #64	@ 0x40
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	4099      	lsls	r1, r3
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	4692      	mov	sl, r2
 8002adc:	4653      	mov	r3, sl
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	4193      	sbcs	r3, r2
 8002ae2:	431f      	orrs	r7, r3
 8002ae4:	e604      	b.n	80026f0 <__aeabi_dsub+0xb0>
 8002ae6:	1aeb      	subs	r3, r5, r3
 8002ae8:	4d9b      	ldr	r5, [pc, #620]	@ (8002d58 <__aeabi_dsub+0x718>)
 8002aea:	4015      	ands	r5, r2
 8002aec:	076f      	lsls	r7, r5, #29
 8002aee:	08ed      	lsrs	r5, r5, #3
 8002af0:	032c      	lsls	r4, r5, #12
 8002af2:	055d      	lsls	r5, r3, #21
 8002af4:	0b24      	lsrs	r4, r4, #12
 8002af6:	0d6d      	lsrs	r5, r5, #21
 8002af8:	e736      	b.n	8002968 <__aeabi_dsub+0x328>
 8002afa:	4d95      	ldr	r5, [pc, #596]	@ (8002d50 <__aeabi_dsub+0x710>)
 8002afc:	42ab      	cmp	r3, r5
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x4c2>
 8002b00:	e0d6      	b.n	8002cb0 <__aeabi_dsub+0x670>
 8002b02:	1882      	adds	r2, r0, r2
 8002b04:	0021      	movs	r1, r4
 8002b06:	4282      	cmp	r2, r0
 8002b08:	4180      	sbcs	r0, r0
 8002b0a:	4459      	add	r1, fp
 8002b0c:	4240      	negs	r0, r0
 8002b0e:	1808      	adds	r0, r1, r0
 8002b10:	07c7      	lsls	r7, r0, #31
 8002b12:	0852      	lsrs	r2, r2, #1
 8002b14:	4317      	orrs	r7, r2
 8002b16:	0844      	lsrs	r4, r0, #1
 8002b18:	0752      	lsls	r2, r2, #29
 8002b1a:	d400      	bmi.n	8002b1e <__aeabi_dsub+0x4de>
 8002b1c:	e185      	b.n	8002e2a <__aeabi_dsub+0x7ea>
 8002b1e:	220f      	movs	r2, #15
 8002b20:	001d      	movs	r5, r3
 8002b22:	403a      	ands	r2, r7
 8002b24:	2a04      	cmp	r2, #4
 8002b26:	d000      	beq.n	8002b2a <__aeabi_dsub+0x4ea>
 8002b28:	e61a      	b.n	8002760 <__aeabi_dsub+0x120>
 8002b2a:	08ff      	lsrs	r7, r7, #3
 8002b2c:	0764      	lsls	r4, r4, #29
 8002b2e:	4327      	orrs	r7, r4
 8002b30:	0905      	lsrs	r5, r0, #4
 8002b32:	e7dd      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002b34:	465b      	mov	r3, fp
 8002b36:	08d2      	lsrs	r2, r2, #3
 8002b38:	075f      	lsls	r7, r3, #29
 8002b3a:	4317      	orrs	r7, r2
 8002b3c:	08dd      	lsrs	r5, r3, #3
 8002b3e:	e67b      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002b40:	2700      	movs	r7, #0
 8002b42:	2400      	movs	r4, #0
 8002b44:	e710      	b.n	8002968 <__aeabi_dsub+0x328>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d000      	beq.n	8002b4c <__aeabi_dsub+0x50c>
 8002b4a:	e0d6      	b.n	8002cfa <__aeabi_dsub+0x6ba>
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x512>
 8002b50:	e12f      	b.n	8002db2 <__aeabi_dsub+0x772>
 8002b52:	2480      	movs	r4, #128	@ 0x80
 8002b54:	2600      	movs	r6, #0
 8002b56:	4d7e      	ldr	r5, [pc, #504]	@ (8002d50 <__aeabi_dsub+0x710>)
 8002b58:	0324      	lsls	r4, r4, #12
 8002b5a:	e705      	b.n	8002968 <__aeabi_dsub+0x328>
 8002b5c:	4666      	mov	r6, ip
 8002b5e:	465c      	mov	r4, fp
 8002b60:	08d0      	lsrs	r0, r2, #3
 8002b62:	e717      	b.n	8002994 <__aeabi_dsub+0x354>
 8002b64:	465b      	mov	r3, fp
 8002b66:	1a17      	subs	r7, r2, r0
 8002b68:	42ba      	cmp	r2, r7
 8002b6a:	4192      	sbcs	r2, r2
 8002b6c:	1b1c      	subs	r4, r3, r4
 8002b6e:	2601      	movs	r6, #1
 8002b70:	4663      	mov	r3, ip
 8002b72:	4252      	negs	r2, r2
 8002b74:	1aa4      	subs	r4, r4, r2
 8002b76:	401e      	ands	r6, r3
 8002b78:	e5c4      	b.n	8002704 <__aeabi_dsub+0xc4>
 8002b7a:	1883      	adds	r3, r0, r2
 8002b7c:	4283      	cmp	r3, r0
 8002b7e:	4180      	sbcs	r0, r0
 8002b80:	445c      	add	r4, fp
 8002b82:	4240      	negs	r0, r0
 8002b84:	1825      	adds	r5, r4, r0
 8002b86:	022a      	lsls	r2, r5, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x54c>
 8002b8a:	e0da      	b.n	8002d42 <__aeabi_dsub+0x702>
 8002b8c:	4a72      	ldr	r2, [pc, #456]	@ (8002d58 <__aeabi_dsub+0x718>)
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	4015      	ands	r5, r2
 8002b92:	07ea      	lsls	r2, r5, #31
 8002b94:	431a      	orrs	r2, r3
 8002b96:	0869      	lsrs	r1, r5, #1
 8002b98:	075b      	lsls	r3, r3, #29
 8002b9a:	d400      	bmi.n	8002b9e <__aeabi_dsub+0x55e>
 8002b9c:	e14a      	b.n	8002e34 <__aeabi_dsub+0x7f4>
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d100      	bne.n	8002ba8 <__aeabi_dsub+0x568>
 8002ba6:	e0fc      	b.n	8002da2 <__aeabi_dsub+0x762>
 8002ba8:	1d17      	adds	r7, r2, #4
 8002baa:	4297      	cmp	r7, r2
 8002bac:	41a4      	sbcs	r4, r4
 8002bae:	4264      	negs	r4, r4
 8002bb0:	2502      	movs	r5, #2
 8002bb2:	1864      	adds	r4, r4, r1
 8002bb4:	e6ec      	b.n	8002990 <__aeabi_dsub+0x350>
 8002bb6:	4647      	mov	r7, r8
 8002bb8:	001c      	movs	r4, r3
 8002bba:	431f      	orrs	r7, r3
 8002bbc:	d000      	beq.n	8002bc0 <__aeabi_dsub+0x580>
 8002bbe:	e743      	b.n	8002a48 <__aeabi_dsub+0x408>
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	2500      	movs	r5, #0
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	e6cf      	b.n	8002968 <__aeabi_dsub+0x328>
 8002bc8:	08c0      	lsrs	r0, r0, #3
 8002bca:	0767      	lsls	r7, r4, #29
 8002bcc:	4307      	orrs	r7, r0
 8002bce:	08e5      	lsrs	r5, r4, #3
 8002bd0:	e632      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002bd2:	1a87      	subs	r7, r0, r2
 8002bd4:	465b      	mov	r3, fp
 8002bd6:	42b8      	cmp	r0, r7
 8002bd8:	4180      	sbcs	r0, r0
 8002bda:	1ae4      	subs	r4, r4, r3
 8002bdc:	4240      	negs	r0, r0
 8002bde:	1a24      	subs	r4, r4, r0
 8002be0:	0223      	lsls	r3, r4, #8
 8002be2:	d428      	bmi.n	8002c36 <__aeabi_dsub+0x5f6>
 8002be4:	0763      	lsls	r3, r4, #29
 8002be6:	08ff      	lsrs	r7, r7, #3
 8002be8:	431f      	orrs	r7, r3
 8002bea:	08e5      	lsrs	r5, r4, #3
 8002bec:	2301      	movs	r3, #1
 8002bee:	e77f      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d100      	bne.n	8002bf6 <__aeabi_dsub+0x5b6>
 8002bf4:	e673      	b.n	80028de <__aeabi_dsub+0x29e>
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1b5f      	subs	r7, r3, r5
 8002bfa:	003b      	movs	r3, r7
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x5c2>
 8002c00:	e742      	b.n	8002a88 <__aeabi_dsub+0x448>
 8002c02:	2f38      	cmp	r7, #56	@ 0x38
 8002c04:	dd00      	ble.n	8002c08 <__aeabi_dsub+0x5c8>
 8002c06:	e0ec      	b.n	8002de2 <__aeabi_dsub+0x7a2>
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	000e      	movs	r6, r1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431c      	orrs	r4, r3
 8002c10:	2f1f      	cmp	r7, #31
 8002c12:	dc25      	bgt.n	8002c60 <__aeabi_dsub+0x620>
 8002c14:	2520      	movs	r5, #32
 8002c16:	0023      	movs	r3, r4
 8002c18:	1bed      	subs	r5, r5, r7
 8002c1a:	0001      	movs	r1, r0
 8002c1c:	40a8      	lsls	r0, r5
 8002c1e:	40ab      	lsls	r3, r5
 8002c20:	40f9      	lsrs	r1, r7
 8002c22:	1e45      	subs	r5, r0, #1
 8002c24:	41a8      	sbcs	r0, r5
 8002c26:	430b      	orrs	r3, r1
 8002c28:	40fc      	lsrs	r4, r7
 8002c2a:	4318      	orrs	r0, r3
 8002c2c:	465b      	mov	r3, fp
 8002c2e:	1b1b      	subs	r3, r3, r4
 8002c30:	469b      	mov	fp, r3
 8002c32:	e739      	b.n	8002aa8 <__aeabi_dsub+0x468>
 8002c34:	4666      	mov	r6, ip
 8002c36:	2501      	movs	r5, #1
 8002c38:	e562      	b.n	8002700 <__aeabi_dsub+0xc0>
 8002c3a:	001f      	movs	r7, r3
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	3f20      	subs	r7, #32
 8002c40:	40f9      	lsrs	r1, r7
 8002c42:	468c      	mov	ip, r1
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d005      	beq.n	8002c54 <__aeabi_dsub+0x614>
 8002c48:	2740      	movs	r7, #64	@ 0x40
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	1afb      	subs	r3, r7, r3
 8002c4e:	4099      	lsls	r1, r3
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4692      	mov	sl, r2
 8002c54:	4657      	mov	r7, sl
 8002c56:	1e7b      	subs	r3, r7, #1
 8002c58:	419f      	sbcs	r7, r3
 8002c5a:	4663      	mov	r3, ip
 8002c5c:	431f      	orrs	r7, r3
 8002c5e:	e5c1      	b.n	80027e4 <__aeabi_dsub+0x1a4>
 8002c60:	003b      	movs	r3, r7
 8002c62:	0025      	movs	r5, r4
 8002c64:	3b20      	subs	r3, #32
 8002c66:	40dd      	lsrs	r5, r3
 8002c68:	2f20      	cmp	r7, #32
 8002c6a:	d004      	beq.n	8002c76 <__aeabi_dsub+0x636>
 8002c6c:	2340      	movs	r3, #64	@ 0x40
 8002c6e:	1bdb      	subs	r3, r3, r7
 8002c70:	409c      	lsls	r4, r3
 8002c72:	4320      	orrs	r0, r4
 8002c74:	4680      	mov	r8, r0
 8002c76:	4640      	mov	r0, r8
 8002c78:	1e43      	subs	r3, r0, #1
 8002c7a:	4198      	sbcs	r0, r3
 8002c7c:	4328      	orrs	r0, r5
 8002c7e:	e713      	b.n	8002aa8 <__aeabi_dsub+0x468>
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d09d      	beq.n	8002bc0 <__aeabi_dsub+0x580>
 8002c84:	2601      	movs	r6, #1
 8002c86:	4663      	mov	r3, ip
 8002c88:	465c      	mov	r4, fp
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	401e      	ands	r6, r3
 8002c8e:	e6db      	b.n	8002a48 <__aeabi_dsub+0x408>
 8002c90:	1a17      	subs	r7, r2, r0
 8002c92:	465b      	mov	r3, fp
 8002c94:	42ba      	cmp	r2, r7
 8002c96:	4192      	sbcs	r2, r2
 8002c98:	1b1c      	subs	r4, r3, r4
 8002c9a:	4252      	negs	r2, r2
 8002c9c:	1aa4      	subs	r4, r4, r2
 8002c9e:	0223      	lsls	r3, r4, #8
 8002ca0:	d4c8      	bmi.n	8002c34 <__aeabi_dsub+0x5f4>
 8002ca2:	0763      	lsls	r3, r4, #29
 8002ca4:	08ff      	lsrs	r7, r7, #3
 8002ca6:	431f      	orrs	r7, r3
 8002ca8:	4666      	mov	r6, ip
 8002caa:	2301      	movs	r3, #1
 8002cac:	08e5      	lsrs	r5, r4, #3
 8002cae:	e71f      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002cb0:	001d      	movs	r5, r3
 8002cb2:	2400      	movs	r4, #0
 8002cb4:	2700      	movs	r7, #0
 8002cb6:	e657      	b.n	8002968 <__aeabi_dsub+0x328>
 8002cb8:	465c      	mov	r4, fp
 8002cba:	08d0      	lsrs	r0, r2, #3
 8002cbc:	e66a      	b.n	8002994 <__aeabi_dsub+0x354>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x684>
 8002cc2:	e737      	b.n	8002b34 <__aeabi_dsub+0x4f4>
 8002cc4:	4653      	mov	r3, sl
 8002cc6:	08c0      	lsrs	r0, r0, #3
 8002cc8:	0767      	lsls	r7, r4, #29
 8002cca:	4307      	orrs	r7, r0
 8002ccc:	08e5      	lsrs	r5, r4, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d100      	bne.n	8002cd4 <__aeabi_dsub+0x694>
 8002cd2:	e5b1      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	031b      	lsls	r3, r3, #12
 8002cd8:	421d      	tst	r5, r3
 8002cda:	d008      	beq.n	8002cee <__aeabi_dsub+0x6ae>
 8002cdc:	4659      	mov	r1, fp
 8002cde:	08c8      	lsrs	r0, r1, #3
 8002ce0:	4218      	tst	r0, r3
 8002ce2:	d104      	bne.n	8002cee <__aeabi_dsub+0x6ae>
 8002ce4:	08d2      	lsrs	r2, r2, #3
 8002ce6:	0749      	lsls	r1, r1, #29
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	0017      	movs	r7, r2
 8002cec:	0005      	movs	r5, r0
 8002cee:	0f7b      	lsrs	r3, r7, #29
 8002cf0:	00ff      	lsls	r7, r7, #3
 8002cf2:	08ff      	lsrs	r7, r7, #3
 8002cf4:	075b      	lsls	r3, r3, #29
 8002cf6:	431f      	orrs	r7, r3
 8002cf8:	e59e      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002cfa:	08c0      	lsrs	r0, r0, #3
 8002cfc:	0763      	lsls	r3, r4, #29
 8002cfe:	4318      	orrs	r0, r3
 8002d00:	08e5      	lsrs	r5, r4, #3
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d053      	beq.n	8002dae <__aeabi_dsub+0x76e>
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	031b      	lsls	r3, r3, #12
 8002d0a:	421d      	tst	r5, r3
 8002d0c:	d00a      	beq.n	8002d24 <__aeabi_dsub+0x6e4>
 8002d0e:	4659      	mov	r1, fp
 8002d10:	08cc      	lsrs	r4, r1, #3
 8002d12:	421c      	tst	r4, r3
 8002d14:	d106      	bne.n	8002d24 <__aeabi_dsub+0x6e4>
 8002d16:	2601      	movs	r6, #1
 8002d18:	4663      	mov	r3, ip
 8002d1a:	0025      	movs	r5, r4
 8002d1c:	08d0      	lsrs	r0, r2, #3
 8002d1e:	0749      	lsls	r1, r1, #29
 8002d20:	4308      	orrs	r0, r1
 8002d22:	401e      	ands	r6, r3
 8002d24:	0f47      	lsrs	r7, r0, #29
 8002d26:	00c0      	lsls	r0, r0, #3
 8002d28:	08c0      	lsrs	r0, r0, #3
 8002d2a:	077f      	lsls	r7, r7, #29
 8002d2c:	4307      	orrs	r7, r0
 8002d2e:	e583      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002d30:	1883      	adds	r3, r0, r2
 8002d32:	4293      	cmp	r3, r2
 8002d34:	4192      	sbcs	r2, r2
 8002d36:	445c      	add	r4, fp
 8002d38:	4252      	negs	r2, r2
 8002d3a:	18a5      	adds	r5, r4, r2
 8002d3c:	022a      	lsls	r2, r5, #8
 8002d3e:	d500      	bpl.n	8002d42 <__aeabi_dsub+0x702>
 8002d40:	e724      	b.n	8002b8c <__aeabi_dsub+0x54c>
 8002d42:	076f      	lsls	r7, r5, #29
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	431f      	orrs	r7, r3
 8002d48:	08ed      	lsrs	r5, r5, #3
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e6d0      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	000007ff 	.word	0x000007ff
 8002d54:	000007fe 	.word	0x000007fe
 8002d58:	ff7fffff 	.word	0xff7fffff
 8002d5c:	465b      	mov	r3, fp
 8002d5e:	08d2      	lsrs	r2, r2, #3
 8002d60:	075f      	lsls	r7, r3, #29
 8002d62:	4666      	mov	r6, ip
 8002d64:	4317      	orrs	r7, r2
 8002d66:	08dd      	lsrs	r5, r3, #3
 8002d68:	e566      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	3b20      	subs	r3, #32
 8002d6e:	40dd      	lsrs	r5, r3
 8002d70:	4663      	mov	r3, ip
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d005      	beq.n	8002d82 <__aeabi_dsub+0x742>
 8002d76:	2340      	movs	r3, #64	@ 0x40
 8002d78:	4661      	mov	r1, ip
 8002d7a:	1a5b      	subs	r3, r3, r1
 8002d7c:	409c      	lsls	r4, r3
 8002d7e:	4320      	orrs	r0, r4
 8002d80:	4680      	mov	r8, r0
 8002d82:	4647      	mov	r7, r8
 8002d84:	1e7b      	subs	r3, r7, #1
 8002d86:	419f      	sbcs	r7, r3
 8002d88:	432f      	orrs	r7, r5
 8002d8a:	e5a0      	b.n	80028ce <__aeabi_dsub+0x28e>
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	2700      	movs	r7, #0
 8002d90:	1a09      	subs	r1, r1, r0
 8002d92:	e4d2      	b.n	800273a <__aeabi_dsub+0xfa>
 8002d94:	2f00      	cmp	r7, #0
 8002d96:	d100      	bne.n	8002d9a <__aeabi_dsub+0x75a>
 8002d98:	e713      	b.n	8002bc2 <__aeabi_dsub+0x582>
 8002d9a:	465c      	mov	r4, fp
 8002d9c:	0017      	movs	r7, r2
 8002d9e:	2500      	movs	r5, #0
 8002da0:	e5f6      	b.n	8002990 <__aeabi_dsub+0x350>
 8002da2:	08d7      	lsrs	r7, r2, #3
 8002da4:	0749      	lsls	r1, r1, #29
 8002da6:	2302      	movs	r3, #2
 8002da8:	430f      	orrs	r7, r1
 8002daa:	092d      	lsrs	r5, r5, #4
 8002dac:	e6a0      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002dae:	0007      	movs	r7, r0
 8002db0:	e542      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002db2:	465b      	mov	r3, fp
 8002db4:	2601      	movs	r6, #1
 8002db6:	075f      	lsls	r7, r3, #29
 8002db8:	08dd      	lsrs	r5, r3, #3
 8002dba:	4663      	mov	r3, ip
 8002dbc:	08d2      	lsrs	r2, r2, #3
 8002dbe:	4317      	orrs	r7, r2
 8002dc0:	401e      	ands	r6, r3
 8002dc2:	e539      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002dc4:	465b      	mov	r3, fp
 8002dc6:	08d2      	lsrs	r2, r2, #3
 8002dc8:	075f      	lsls	r7, r3, #29
 8002dca:	4317      	orrs	r7, r2
 8002dcc:	08dd      	lsrs	r5, r3, #3
 8002dce:	e533      	b.n	8002838 <__aeabi_dsub+0x1f8>
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <__aeabi_dsub+0x80c>)
 8002dd2:	08db      	lsrs	r3, r3, #3
 8002dd4:	4022      	ands	r2, r4
 8002dd6:	0757      	lsls	r7, r2, #29
 8002dd8:	0252      	lsls	r2, r2, #9
 8002dda:	2501      	movs	r5, #1
 8002ddc:	431f      	orrs	r7, r3
 8002dde:	0b14      	lsrs	r4, r2, #12
 8002de0:	e5c2      	b.n	8002968 <__aeabi_dsub+0x328>
 8002de2:	000e      	movs	r6, r1
 8002de4:	2001      	movs	r0, #1
 8002de6:	e65f      	b.n	8002aa8 <__aeabi_dsub+0x468>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <__aeabi_dsub+0x7c8>
 8002dec:	464b      	mov	r3, r9
 8002dee:	1b5b      	subs	r3, r3, r5
 8002df0:	469c      	mov	ip, r3
 8002df2:	2d00      	cmp	r5, #0
 8002df4:	d100      	bne.n	8002df8 <__aeabi_dsub+0x7b8>
 8002df6:	e548      	b.n	800288a <__aeabi_dsub+0x24a>
 8002df8:	2701      	movs	r7, #1
 8002dfa:	2b38      	cmp	r3, #56	@ 0x38
 8002dfc:	dd00      	ble.n	8002e00 <__aeabi_dsub+0x7c0>
 8002dfe:	e566      	b.n	80028ce <__aeabi_dsub+0x28e>
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431c      	orrs	r4, r3
 8002e06:	e550      	b.n	80028aa <__aeabi_dsub+0x26a>
 8002e08:	1c6b      	adds	r3, r5, #1
 8002e0a:	4d11      	ldr	r5, [pc, #68]	@ (8002e50 <__aeabi_dsub+0x810>)
 8002e0c:	422b      	tst	r3, r5
 8002e0e:	d000      	beq.n	8002e12 <__aeabi_dsub+0x7d2>
 8002e10:	e673      	b.n	8002afa <__aeabi_dsub+0x4ba>
 8002e12:	4659      	mov	r1, fp
 8002e14:	0023      	movs	r3, r4
 8002e16:	4311      	orrs	r1, r2
 8002e18:	468a      	mov	sl, r1
 8002e1a:	4303      	orrs	r3, r0
 8002e1c:	e600      	b.n	8002a20 <__aeabi_dsub+0x3e0>
 8002e1e:	0767      	lsls	r7, r4, #29
 8002e20:	08c0      	lsrs	r0, r0, #3
 8002e22:	2300      	movs	r3, #0
 8002e24:	4307      	orrs	r7, r0
 8002e26:	08e5      	lsrs	r5, r4, #3
 8002e28:	e662      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002e2a:	0764      	lsls	r4, r4, #29
 8002e2c:	08ff      	lsrs	r7, r7, #3
 8002e2e:	4327      	orrs	r7, r4
 8002e30:	0905      	lsrs	r5, r0, #4
 8002e32:	e65d      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002e34:	08d2      	lsrs	r2, r2, #3
 8002e36:	0749      	lsls	r1, r1, #29
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	000f      	movs	r7, r1
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	092d      	lsrs	r5, r5, #4
 8002e40:	e656      	b.n	8002af0 <__aeabi_dsub+0x4b0>
 8002e42:	0007      	movs	r7, r0
 8002e44:	e5a4      	b.n	8002990 <__aeabi_dsub+0x350>
 8002e46:	0038      	movs	r0, r7
 8002e48:	e48f      	b.n	800276a <__aeabi_dsub+0x12a>
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	ff7fffff 	.word	0xff7fffff
 8002e50:	000007fe 	.word	0x000007fe

08002e54 <__aeabi_dcmpun>:
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	46c6      	mov	lr, r8
 8002e58:	031e      	lsls	r6, r3, #12
 8002e5a:	0b36      	lsrs	r6, r6, #12
 8002e5c:	46b0      	mov	r8, r6
 8002e5e:	4e0d      	ldr	r6, [pc, #52]	@ (8002e94 <__aeabi_dcmpun+0x40>)
 8002e60:	030c      	lsls	r4, r1, #12
 8002e62:	004d      	lsls	r5, r1, #1
 8002e64:	005f      	lsls	r7, r3, #1
 8002e66:	b500      	push	{lr}
 8002e68:	0b24      	lsrs	r4, r4, #12
 8002e6a:	0d6d      	lsrs	r5, r5, #21
 8002e6c:	0d7f      	lsrs	r7, r7, #21
 8002e6e:	42b5      	cmp	r5, r6
 8002e70:	d00b      	beq.n	8002e8a <__aeabi_dcmpun+0x36>
 8002e72:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <__aeabi_dcmpun+0x40>)
 8002e74:	2000      	movs	r0, #0
 8002e76:	428f      	cmp	r7, r1
 8002e78:	d104      	bne.n	8002e84 <__aeabi_dcmpun+0x30>
 8002e7a:	4646      	mov	r6, r8
 8002e7c:	4316      	orrs	r6, r2
 8002e7e:	0030      	movs	r0, r6
 8002e80:	1e43      	subs	r3, r0, #1
 8002e82:	4198      	sbcs	r0, r3
 8002e84:	bc80      	pop	{r7}
 8002e86:	46b8      	mov	r8, r7
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8a:	4304      	orrs	r4, r0
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	d1f8      	bne.n	8002e84 <__aeabi_dcmpun+0x30>
 8002e92:	e7ee      	b.n	8002e72 <__aeabi_dcmpun+0x1e>
 8002e94:	000007ff 	.word	0x000007ff

08002e98 <__aeabi_d2iz>:
 8002e98:	000b      	movs	r3, r1
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4d16      	ldr	r5, [pc, #88]	@ (8002ef8 <__aeabi_d2iz+0x60>)
 8002ea0:	030c      	lsls	r4, r1, #12
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	0049      	lsls	r1, r1, #1
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	9200      	str	r2, [sp, #0]
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	0b24      	lsrs	r4, r4, #12
 8002eae:	0d49      	lsrs	r1, r1, #21
 8002eb0:	0fde      	lsrs	r6, r3, #31
 8002eb2:	42a9      	cmp	r1, r5
 8002eb4:	dd04      	ble.n	8002ec0 <__aeabi_d2iz+0x28>
 8002eb6:	4811      	ldr	r0, [pc, #68]	@ (8002efc <__aeabi_d2iz+0x64>)
 8002eb8:	4281      	cmp	r1, r0
 8002eba:	dd03      	ble.n	8002ec4 <__aeabi_d2iz+0x2c>
 8002ebc:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <__aeabi_d2iz+0x68>)
 8002ebe:	18f0      	adds	r0, r6, r3
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	2080      	movs	r0, #128	@ 0x80
 8002ec6:	0340      	lsls	r0, r0, #13
 8002ec8:	4320      	orrs	r0, r4
 8002eca:	4c0e      	ldr	r4, [pc, #56]	@ (8002f04 <__aeabi_d2iz+0x6c>)
 8002ecc:	1a64      	subs	r4, r4, r1
 8002ece:	2c1f      	cmp	r4, #31
 8002ed0:	dd08      	ble.n	8002ee4 <__aeabi_d2iz+0x4c>
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <__aeabi_d2iz+0x70>)
 8002ed4:	1a5b      	subs	r3, r3, r1
 8002ed6:	40d8      	lsrs	r0, r3
 8002ed8:	0003      	movs	r3, r0
 8002eda:	4258      	negs	r0, r3
 8002edc:	2e00      	cmp	r6, #0
 8002ede:	d1ef      	bne.n	8002ec0 <__aeabi_d2iz+0x28>
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	e7ed      	b.n	8002ec0 <__aeabi_d2iz+0x28>
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <__aeabi_d2iz+0x74>)
 8002ee6:	9a00      	ldr	r2, [sp, #0]
 8002ee8:	469c      	mov	ip, r3
 8002eea:	0003      	movs	r3, r0
 8002eec:	4461      	add	r1, ip
 8002eee:	408b      	lsls	r3, r1
 8002ef0:	40e2      	lsrs	r2, r4
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	e7f1      	b.n	8002eda <__aeabi_d2iz+0x42>
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	000003fe 	.word	0x000003fe
 8002efc:	0000041d 	.word	0x0000041d
 8002f00:	7fffffff 	.word	0x7fffffff
 8002f04:	00000433 	.word	0x00000433
 8002f08:	00000413 	.word	0x00000413
 8002f0c:	fffffbed 	.word	0xfffffbed

08002f10 <__aeabi_i2d>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d016      	beq.n	8002f44 <__aeabi_i2d+0x34>
 8002f16:	17c3      	asrs	r3, r0, #31
 8002f18:	18c5      	adds	r5, r0, r3
 8002f1a:	405d      	eors	r5, r3
 8002f1c:	0fc4      	lsrs	r4, r0, #31
 8002f1e:	0028      	movs	r0, r5
 8002f20:	f000 f912 	bl	8003148 <__clzsi2>
 8002f24:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <__aeabi_i2d+0x58>)
 8002f26:	1a1b      	subs	r3, r3, r0
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	0d5b      	lsrs	r3, r3, #21
 8002f2c:	280a      	cmp	r0, #10
 8002f2e:	dc14      	bgt.n	8002f5a <__aeabi_i2d+0x4a>
 8002f30:	0002      	movs	r2, r0
 8002f32:	002e      	movs	r6, r5
 8002f34:	3215      	adds	r2, #21
 8002f36:	4096      	lsls	r6, r2
 8002f38:	220b      	movs	r2, #11
 8002f3a:	1a12      	subs	r2, r2, r0
 8002f3c:	40d5      	lsrs	r5, r2
 8002f3e:	032d      	lsls	r5, r5, #12
 8002f40:	0b2d      	lsrs	r5, r5, #12
 8002f42:	e003      	b.n	8002f4c <__aeabi_i2d+0x3c>
 8002f44:	2400      	movs	r4, #0
 8002f46:	2300      	movs	r3, #0
 8002f48:	2500      	movs	r5, #0
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	432b      	orrs	r3, r5
 8002f50:	07e4      	lsls	r4, r4, #31
 8002f52:	4323      	orrs	r3, r4
 8002f54:	0030      	movs	r0, r6
 8002f56:	0019      	movs	r1, r3
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
 8002f5a:	380b      	subs	r0, #11
 8002f5c:	4085      	lsls	r5, r0
 8002f5e:	032d      	lsls	r5, r5, #12
 8002f60:	2600      	movs	r6, #0
 8002f62:	0b2d      	lsrs	r5, r5, #12
 8002f64:	e7f2      	b.n	8002f4c <__aeabi_i2d+0x3c>
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	0000041e 	.word	0x0000041e

08002f6c <__aeabi_ui2d>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	1e04      	subs	r4, r0, #0
 8002f70:	d010      	beq.n	8002f94 <__aeabi_ui2d+0x28>
 8002f72:	f000 f8e9 	bl	8003148 <__clzsi2>
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <__aeabi_ui2d+0x44>)
 8002f78:	1a1b      	subs	r3, r3, r0
 8002f7a:	055b      	lsls	r3, r3, #21
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	280a      	cmp	r0, #10
 8002f80:	dc0f      	bgt.n	8002fa2 <__aeabi_ui2d+0x36>
 8002f82:	220b      	movs	r2, #11
 8002f84:	0021      	movs	r1, r4
 8002f86:	1a12      	subs	r2, r2, r0
 8002f88:	40d1      	lsrs	r1, r2
 8002f8a:	3015      	adds	r0, #21
 8002f8c:	030a      	lsls	r2, r1, #12
 8002f8e:	4084      	lsls	r4, r0
 8002f90:	0b12      	lsrs	r2, r2, #12
 8002f92:	e001      	b.n	8002f98 <__aeabi_ui2d+0x2c>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2200      	movs	r2, #0
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	0020      	movs	r0, r4
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	0022      	movs	r2, r4
 8002fa4:	380b      	subs	r0, #11
 8002fa6:	4082      	lsls	r2, r0
 8002fa8:	0312      	lsls	r2, r2, #12
 8002faa:	2400      	movs	r4, #0
 8002fac:	0b12      	lsrs	r2, r2, #12
 8002fae:	e7f3      	b.n	8002f98 <__aeabi_ui2d+0x2c>
 8002fb0:	0000041e 	.word	0x0000041e

08002fb4 <__aeabi_f2d>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	0242      	lsls	r2, r0, #9
 8002fb8:	0043      	lsls	r3, r0, #1
 8002fba:	0fc4      	lsrs	r4, r0, #31
 8002fbc:	20fe      	movs	r0, #254	@ 0xfe
 8002fbe:	0e1b      	lsrs	r3, r3, #24
 8002fc0:	1c59      	adds	r1, r3, #1
 8002fc2:	0a55      	lsrs	r5, r2, #9
 8002fc4:	4208      	tst	r0, r1
 8002fc6:	d00c      	beq.n	8002fe2 <__aeabi_f2d+0x2e>
 8002fc8:	21e0      	movs	r1, #224	@ 0xe0
 8002fca:	0089      	lsls	r1, r1, #2
 8002fcc:	468c      	mov	ip, r1
 8002fce:	076d      	lsls	r5, r5, #29
 8002fd0:	0b12      	lsrs	r2, r2, #12
 8002fd2:	4463      	add	r3, ip
 8002fd4:	051b      	lsls	r3, r3, #20
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	07e4      	lsls	r4, r4, #31
 8002fda:	4323      	orrs	r3, r4
 8002fdc:	0028      	movs	r0, r5
 8002fde:	0019      	movs	r1, r3
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d114      	bne.n	8003010 <__aeabi_f2d+0x5c>
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d01b      	beq.n	8003022 <__aeabi_f2d+0x6e>
 8002fea:	0028      	movs	r0, r5
 8002fec:	f000 f8ac 	bl	8003148 <__clzsi2>
 8002ff0:	280a      	cmp	r0, #10
 8002ff2:	dc1c      	bgt.n	800302e <__aeabi_f2d+0x7a>
 8002ff4:	230b      	movs	r3, #11
 8002ff6:	002a      	movs	r2, r5
 8002ff8:	1a1b      	subs	r3, r3, r0
 8002ffa:	40da      	lsrs	r2, r3
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	3315      	adds	r3, #21
 8003000:	409d      	lsls	r5, r3
 8003002:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <__aeabi_f2d+0x88>)
 8003004:	0312      	lsls	r2, r2, #12
 8003006:	1a1b      	subs	r3, r3, r0
 8003008:	055b      	lsls	r3, r3, #21
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e7e1      	b.n	8002fd4 <__aeabi_f2d+0x20>
 8003010:	2d00      	cmp	r5, #0
 8003012:	d009      	beq.n	8003028 <__aeabi_f2d+0x74>
 8003014:	0b13      	lsrs	r3, r2, #12
 8003016:	2280      	movs	r2, #128	@ 0x80
 8003018:	0312      	lsls	r2, r2, #12
 800301a:	431a      	orrs	r2, r3
 800301c:	076d      	lsls	r5, r5, #29
 800301e:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <__aeabi_f2d+0x8c>)
 8003020:	e7d8      	b.n	8002fd4 <__aeabi_f2d+0x20>
 8003022:	2300      	movs	r3, #0
 8003024:	2200      	movs	r2, #0
 8003026:	e7d5      	b.n	8002fd4 <__aeabi_f2d+0x20>
 8003028:	2200      	movs	r2, #0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <__aeabi_f2d+0x8c>)
 800302c:	e7d2      	b.n	8002fd4 <__aeabi_f2d+0x20>
 800302e:	0003      	movs	r3, r0
 8003030:	002a      	movs	r2, r5
 8003032:	3b0b      	subs	r3, #11
 8003034:	409a      	lsls	r2, r3
 8003036:	2500      	movs	r5, #0
 8003038:	e7e3      	b.n	8003002 <__aeabi_f2d+0x4e>
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	00000389 	.word	0x00000389
 8003040:	000007ff 	.word	0x000007ff

08003044 <__aeabi_d2f>:
 8003044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003046:	004b      	lsls	r3, r1, #1
 8003048:	030f      	lsls	r7, r1, #12
 800304a:	0d5b      	lsrs	r3, r3, #21
 800304c:	4c3a      	ldr	r4, [pc, #232]	@ (8003138 <__aeabi_d2f+0xf4>)
 800304e:	0f45      	lsrs	r5, r0, #29
 8003050:	b083      	sub	sp, #12
 8003052:	0a7f      	lsrs	r7, r7, #9
 8003054:	1c5e      	adds	r6, r3, #1
 8003056:	432f      	orrs	r7, r5
 8003058:	9000      	str	r0, [sp, #0]
 800305a:	9101      	str	r1, [sp, #4]
 800305c:	0fca      	lsrs	r2, r1, #31
 800305e:	00c5      	lsls	r5, r0, #3
 8003060:	4226      	tst	r6, r4
 8003062:	d00b      	beq.n	800307c <__aeabi_d2f+0x38>
 8003064:	4935      	ldr	r1, [pc, #212]	@ (800313c <__aeabi_d2f+0xf8>)
 8003066:	185c      	adds	r4, r3, r1
 8003068:	2cfe      	cmp	r4, #254	@ 0xfe
 800306a:	dd13      	ble.n	8003094 <__aeabi_d2f+0x50>
 800306c:	20ff      	movs	r0, #255	@ 0xff
 800306e:	2300      	movs	r3, #0
 8003070:	05c0      	lsls	r0, r0, #23
 8003072:	4318      	orrs	r0, r3
 8003074:	07d2      	lsls	r2, r2, #31
 8003076:	4310      	orrs	r0, r2
 8003078:	b003      	add	sp, #12
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307c:	433d      	orrs	r5, r7
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <__aeabi_d2f+0x42>
 8003082:	2000      	movs	r0, #0
 8003084:	e7f4      	b.n	8003070 <__aeabi_d2f+0x2c>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d0f0      	beq.n	800306c <__aeabi_d2f+0x28>
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	03db      	lsls	r3, r3, #15
 800308e:	20ff      	movs	r0, #255	@ 0xff
 8003090:	433b      	orrs	r3, r7
 8003092:	e7ed      	b.n	8003070 <__aeabi_d2f+0x2c>
 8003094:	2c00      	cmp	r4, #0
 8003096:	dd0c      	ble.n	80030b2 <__aeabi_d2f+0x6e>
 8003098:	9b00      	ldr	r3, [sp, #0]
 800309a:	00ff      	lsls	r7, r7, #3
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	4183      	sbcs	r3, r0
 80030a2:	0f69      	lsrs	r1, r5, #29
 80030a4:	433b      	orrs	r3, r7
 80030a6:	430b      	orrs	r3, r1
 80030a8:	0759      	lsls	r1, r3, #29
 80030aa:	d127      	bne.n	80030fc <__aeabi_d2f+0xb8>
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	b2e0      	uxtb	r0, r4
 80030b0:	e7de      	b.n	8003070 <__aeabi_d2f+0x2c>
 80030b2:	0021      	movs	r1, r4
 80030b4:	3117      	adds	r1, #23
 80030b6:	db31      	blt.n	800311c <__aeabi_d2f+0xd8>
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	201e      	movs	r0, #30
 80030bc:	0409      	lsls	r1, r1, #16
 80030be:	4339      	orrs	r1, r7
 80030c0:	1b00      	subs	r0, r0, r4
 80030c2:	281f      	cmp	r0, #31
 80030c4:	dd2d      	ble.n	8003122 <__aeabi_d2f+0xde>
 80030c6:	2602      	movs	r6, #2
 80030c8:	4276      	negs	r6, r6
 80030ca:	1b34      	subs	r4, r6, r4
 80030cc:	000e      	movs	r6, r1
 80030ce:	40e6      	lsrs	r6, r4
 80030d0:	0034      	movs	r4, r6
 80030d2:	2820      	cmp	r0, #32
 80030d4:	d004      	beq.n	80030e0 <__aeabi_d2f+0x9c>
 80030d6:	481a      	ldr	r0, [pc, #104]	@ (8003140 <__aeabi_d2f+0xfc>)
 80030d8:	4684      	mov	ip, r0
 80030da:	4463      	add	r3, ip
 80030dc:	4099      	lsls	r1, r3
 80030de:	430d      	orrs	r5, r1
 80030e0:	002b      	movs	r3, r5
 80030e2:	1e59      	subs	r1, r3, #1
 80030e4:	418b      	sbcs	r3, r1
 80030e6:	4323      	orrs	r3, r4
 80030e8:	0759      	lsls	r1, r3, #29
 80030ea:	d003      	beq.n	80030f4 <__aeabi_d2f+0xb0>
 80030ec:	210f      	movs	r1, #15
 80030ee:	4019      	ands	r1, r3
 80030f0:	2904      	cmp	r1, #4
 80030f2:	d10b      	bne.n	800310c <__aeabi_d2f+0xc8>
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	2000      	movs	r0, #0
 80030f8:	0a5b      	lsrs	r3, r3, #9
 80030fa:	e7b9      	b.n	8003070 <__aeabi_d2f+0x2c>
 80030fc:	210f      	movs	r1, #15
 80030fe:	4019      	ands	r1, r3
 8003100:	2904      	cmp	r1, #4
 8003102:	d104      	bne.n	800310e <__aeabi_d2f+0xca>
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	0a5b      	lsrs	r3, r3, #9
 8003108:	b2e0      	uxtb	r0, r4
 800310a:	e7b1      	b.n	8003070 <__aeabi_d2f+0x2c>
 800310c:	2400      	movs	r4, #0
 800310e:	3304      	adds	r3, #4
 8003110:	0159      	lsls	r1, r3, #5
 8003112:	d5f7      	bpl.n	8003104 <__aeabi_d2f+0xc0>
 8003114:	3401      	adds	r4, #1
 8003116:	2300      	movs	r3, #0
 8003118:	b2e0      	uxtb	r0, r4
 800311a:	e7a9      	b.n	8003070 <__aeabi_d2f+0x2c>
 800311c:	2000      	movs	r0, #0
 800311e:	2300      	movs	r3, #0
 8003120:	e7a6      	b.n	8003070 <__aeabi_d2f+0x2c>
 8003122:	4c08      	ldr	r4, [pc, #32]	@ (8003144 <__aeabi_d2f+0x100>)
 8003124:	191c      	adds	r4, r3, r4
 8003126:	002b      	movs	r3, r5
 8003128:	40a5      	lsls	r5, r4
 800312a:	40c3      	lsrs	r3, r0
 800312c:	40a1      	lsls	r1, r4
 800312e:	1e68      	subs	r0, r5, #1
 8003130:	4185      	sbcs	r5, r0
 8003132:	4329      	orrs	r1, r5
 8003134:	430b      	orrs	r3, r1
 8003136:	e7d7      	b.n	80030e8 <__aeabi_d2f+0xa4>
 8003138:	000007fe 	.word	0x000007fe
 800313c:	fffffc80 	.word	0xfffffc80
 8003140:	fffffca2 	.word	0xfffffca2
 8003144:	fffffc82 	.word	0xfffffc82

08003148 <__clzsi2>:
 8003148:	211c      	movs	r1, #28
 800314a:	2301      	movs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	4298      	cmp	r0, r3
 8003150:	d301      	bcc.n	8003156 <__clzsi2+0xe>
 8003152:	0c00      	lsrs	r0, r0, #16
 8003154:	3910      	subs	r1, #16
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	4298      	cmp	r0, r3
 800315a:	d301      	bcc.n	8003160 <__clzsi2+0x18>
 800315c:	0a00      	lsrs	r0, r0, #8
 800315e:	3908      	subs	r1, #8
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	4298      	cmp	r0, r3
 8003164:	d301      	bcc.n	800316a <__clzsi2+0x22>
 8003166:	0900      	lsrs	r0, r0, #4
 8003168:	3904      	subs	r1, #4
 800316a:	a202      	add	r2, pc, #8	@ (adr r2, 8003174 <__clzsi2+0x2c>)
 800316c:	5c10      	ldrb	r0, [r2, r0]
 800316e:	1840      	adds	r0, r0, r1
 8003170:	4770      	bx	lr
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	02020304 	.word	0x02020304
 8003178:	01010101 	.word	0x01010101
	...

08003184 <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	0002      	movs	r2, r0
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	1dbb      	adds	r3, r7, #6
 8003192:	1c0a      	adds	r2, r1, #0
 8003194:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 8003196:	210c      	movs	r1, #12
 8003198:	187b      	adds	r3, r7, r1
 800319a:	1dfa      	adds	r2, r7, #7
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	1dba      	adds	r2, r7, #6
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <_ds3231_setreg+0x40>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	187a      	adds	r2, r7, r1
 80031ae:	23fa      	movs	r3, #250	@ 0xfa
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2302      	movs	r3, #2
 80031b6:	21d0      	movs	r1, #208	@ 0xd0
 80031b8:	f003 f8f4 	bl	80063a4 <HAL_I2C_Master_Transmit>
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000000 	.word	0x20000000

080031c8 <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 80031d4:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <_ds3231_getreg+0x44>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	1dfa      	adds	r2, r7, #7
 80031da:	23fa      	movs	r3, #250	@ 0xfa
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2301      	movs	r3, #1
 80031e2:	21d0      	movs	r1, #208	@ 0xd0
 80031e4:	f003 f8de 	bl	80063a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <_ds3231_getreg+0x44>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	240f      	movs	r4, #15
 80031ee:	193a      	adds	r2, r7, r4
 80031f0:	23fa      	movs	r3, #250	@ 0xfa
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2301      	movs	r3, #1
 80031f8:	21d0      	movs	r1, #208	@ 0xd0
 80031fa:	f003 f9fd 	bl	80065f8 <HAL_I2C_Master_Receive>
	return val;
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	781b      	ldrb	r3, [r3, #0]
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b005      	add	sp, #20
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	20000000 	.word	0x20000000

08003210 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	0005      	movs	r5, r0
 8003218:	000c      	movs	r4, r1
 800321a:	0010      	movs	r0, r2
 800321c:	0019      	movs	r1, r3
 800321e:	1dfb      	adds	r3, r7, #7
 8003220:	1c2a      	adds	r2, r5, #0
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	1dbb      	adds	r3, r7, #6
 8003226:	1c22      	adds	r2, r4, #0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	1d7b      	adds	r3, r7, #5
 800322c:	1c02      	adds	r2, r0, #0
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	1c0a      	adds	r2, r1, #0
 8003234:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 8003236:	2328      	movs	r3, #40	@ 0x28
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2217      	movs	r2, #23
 800323e:	18bc      	adds	r4, r7, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f000 f8ed 	bl	8003420 <_dec_to_bcd>
 8003246:	0003      	movs	r3, r0
 8003248:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2216      	movs	r2, #22
 8003250:	18bc      	adds	r4, r7, r2
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f8e4 	bl	8003420 <_dec_to_bcd>
 8003258:	0003      	movs	r3, r0
 800325a:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 800325c:	1d7b      	adds	r3, r7, #5
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2215      	movs	r2, #21
 8003262:	18bc      	adds	r4, r7, r2
 8003264:	0018      	movs	r0, r3
 8003266:	f000 f8db 	bl	8003420 <_dec_to_bcd>
 800326a:	0003      	movs	r3, r0
 800326c:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 800326e:	1dbb      	adds	r3, r7, #6
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2214      	movs	r2, #20
 8003274:	18bc      	adds	r4, r7, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f8d2 	bl	8003420 <_dec_to_bcd>
 800327c:	0003      	movs	r3, r0
 800327e:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d858      	bhi.n	800333a <ds3231_setalarm1+0x12a>
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	4b54      	ldr	r3, [pc, #336]	@ (80033dc <ds3231_setalarm1+0x1cc>)
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 8003292:	2214      	movs	r2, #20
 8003294:	18bb      	adds	r3, r7, r2
 8003296:	18ba      	adds	r2, r7, r2
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	4249      	negs	r1, r1
 800329e:	430a      	orrs	r2, r1
 80032a0:	701a      	strb	r2, [r3, #0]
	  break;
 80032a2:	e04d      	b.n	8003340 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032a4:	2214      	movs	r2, #20
 80032a6:	18bb      	adds	r3, r7, r2
 80032a8:	18ba      	adds	r2, r7, r2
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	2180      	movs	r1, #128	@ 0x80
 80032ae:	4249      	negs	r1, r1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80032b4:	2215      	movs	r2, #21
 80032b6:	18bb      	adds	r3, r7, r2
 80032b8:	18ba      	adds	r2, r7, r2
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	4249      	negs	r1, r1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]
	  break;
 80032c4:	e03c      	b.n	8003340 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032c6:	2214      	movs	r2, #20
 80032c8:	18bb      	adds	r3, r7, r2
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	2180      	movs	r1, #128	@ 0x80
 80032d0:	4249      	negs	r1, r1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80032d6:	2215      	movs	r2, #21
 80032d8:	18bb      	adds	r3, r7, r2
 80032da:	18ba      	adds	r2, r7, r2
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	4249      	negs	r1, r1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 80032e6:	2216      	movs	r2, #22
 80032e8:	18bb      	adds	r3, r7, r2
 80032ea:	18ba      	adds	r2, r7, r2
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	4249      	negs	r1, r1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	701a      	strb	r2, [r3, #0]
	  break;
 80032f6:	e023      	b.n	8003340 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 80032f8:	2214      	movs	r2, #20
 80032fa:	18bb      	adds	r3, r7, r2
 80032fc:	18ba      	adds	r2, r7, r2
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	4249      	negs	r1, r1
 8003304:	430a      	orrs	r2, r1
 8003306:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003308:	2215      	movs	r2, #21
 800330a:	18bb      	adds	r3, r7, r2
 800330c:	18ba      	adds	r2, r7, r2
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	2180      	movs	r1, #128	@ 0x80
 8003312:	4249      	negs	r1, r1
 8003314:	430a      	orrs	r2, r1
 8003316:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003318:	2216      	movs	r2, #22
 800331a:	18bb      	adds	r3, r7, r2
 800331c:	18ba      	adds	r2, r7, r2
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	2180      	movs	r1, #128	@ 0x80
 8003322:	4249      	negs	r1, r1
 8003324:	430a      	orrs	r2, r1
 8003326:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 8003328:	2217      	movs	r2, #23
 800332a:	18bb      	adds	r3, r7, r2
 800332c:	18ba      	adds	r2, r7, r2
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	4249      	negs	r1, r1
 8003334:	430a      	orrs	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
	  break;
 8003338:	e002      	b.n	8003340 <ds3231_setalarm1+0x130>
  default:
	  break;
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	e000      	b.n	8003340 <ds3231_setalarm1+0x130>
	  break;
 800333e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8003340:	2013      	movs	r0, #19
 8003342:	183b      	adds	r3, r7, r0
 8003344:	2207      	movs	r2, #7
 8003346:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8003348:	210c      	movs	r1, #12
 800334a:	187b      	adds	r3, r7, r1
 800334c:	183a      	adds	r2, r7, r0
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2217      	movs	r2, #23
 8003356:	18ba      	adds	r2, r7, r2
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	705a      	strb	r2, [r3, #1]
 800335c:	187b      	adds	r3, r7, r1
 800335e:	2216      	movs	r2, #22
 8003360:	18ba      	adds	r2, r7, r2
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	709a      	strb	r2, [r3, #2]
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2215      	movs	r2, #21
 800336a:	18ba      	adds	r2, r7, r2
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	70da      	strb	r2, [r3, #3]
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2214      	movs	r2, #20
 8003374:	18ba      	adds	r2, r7, r2
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 800337a:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <ds3231_setalarm1+0x1d0>)
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	187a      	adds	r2, r7, r1
 8003380:	23fa      	movs	r3, #250	@ 0xfa
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2305      	movs	r3, #5
 8003388:	21d0      	movs	r1, #208	@ 0xd0
 800338a:	f003 f80b 	bl	80063a4 <HAL_I2C_Master_Transmit>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d001      	beq.n	8003396 <ds3231_setalarm1+0x186>
 8003392:	2300      	movs	r3, #0
 8003394:	e01d      	b.n	80033d2 <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8003396:	2512      	movs	r5, #18
 8003398:	197b      	adds	r3, r7, r5
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 800339e:	197c      	adds	r4, r7, r5
 80033a0:	200e      	movs	r0, #14
 80033a2:	f7ff ff11 	bl	80031c8 <_ds3231_getreg>
 80033a6:	0003      	movs	r3, r0
 80033a8:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 80033aa:	0028      	movs	r0, r5
 80033ac:	183b      	adds	r3, r7, r0
 80033ae:	183a      	adds	r2, r7, r0
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 80033b8:	183b      	adds	r3, r7, r0
 80033ba:	183a      	adds	r2, r7, r0
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	2104      	movs	r1, #4
 80033c0:	430a      	orrs	r2, r1
 80033c2:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 80033c4:	183b      	adds	r3, r7, r0
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	0019      	movs	r1, r3
 80033ca:	200e      	movs	r0, #14
 80033cc:	f7ff feda 	bl	8003184 <_ds3231_setreg>

  return 1;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b006      	add	sp, #24
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	0800c574 	.word	0x0800c574
 80033e0:	20000000 	.word	0x20000000

080033e4 <ds3231_clearflagalarm1>:
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);

  return 1;
}

void ds3231_clearflagalarm1() {
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 80033ea:	1dfc      	adds	r4, r7, #7
 80033ec:	200f      	movs	r0, #15
 80033ee:	f7ff feeb 	bl	80031c8 <_ds3231_getreg>
 80033f2:	0003      	movs	r3, r0
 80033f4:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	1dfa      	adds	r2, r7, #7
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	438a      	bics	r2, r1
 800340a:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	0019      	movs	r1, r3
 8003412:	200f      	movs	r0, #15
 8003414:	f7ff feb6 	bl	8003184 <_ds3231_setreg>
  }
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b003      	add	sp, #12
 800341e:	bd90      	pop	{r4, r7, pc}

08003420 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	210a      	movs	r1, #10
 800342c:	0018      	movs	r0, r3
 800342e:	f7fc ff0d 	bl	800024c <__divsi3>
 8003432:	0003      	movs	r3, r0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	b2dc      	uxtb	r4, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	210a      	movs	r1, #10
 800343e:	0018      	movs	r0, r3
 8003440:	f7fc ffea 	bl	8000418 <__aeabi_idivmod>
 8003444:	000b      	movs	r3, r1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	18e3      	adds	r3, r4, r3
 800344a:	b2db      	uxtb	r3, r3
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b003      	add	sp, #12
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 800345c:	4b40      	ldr	r3, [pc, #256]	@ (8003560 <HAL_ADC_ConvCpltCallback+0x10c>)
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	23fa      	movs	r3, #250	@ 0xfa
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	429a      	cmp	r2, r3
 8003466:	d34f      	bcc.n	8003508 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e041      	b.n	80034f6 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 8003472:	250f      	movs	r5, #15
 8003474:	197b      	adds	r3, r7, r5
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	4b3a      	ldr	r3, [pc, #232]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	58d2      	ldr	r2, [r2, r3]
 800347e:	197b      	adds	r3, r7, r5
 8003480:	781c      	ldrb	r4, [r3, #0]
 8003482:	23fa      	movs	r3, #250	@ 0xfa
 8003484:	0059      	lsls	r1, r3, #1
 8003486:	0010      	movs	r0, r2
 8003488:	f7fc fe56 	bl	8000138 <__udivsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	0019      	movs	r1, r3
 8003490:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 8003492:	00a2      	lsls	r2, r4, #2
 8003494:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 8003496:	197b      	adds	r3, r7, r5
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b32      	ldr	r3, [pc, #200]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	58d3      	ldr	r3, [r2, r3]
 80034a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80034a2:	d805      	bhi.n	80034b0 <HAL_ADC_ConvCpltCallback+0x5c>
 80034a4:	197b      	adds	r3, r7, r5
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	2100      	movs	r1, #0
 80034ae:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 80034b0:	250f      	movs	r5, #15
 80034b2:	197b      	adds	r3, r7, r5
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	58d3      	ldr	r3, [r2, r3]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7fd fd93 	bl	8000fe8 <__aeabi_ui2f>
 80034c2:	197b      	adds	r3, r7, r5
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <HAL_ADC_ConvCpltCallback+0x114>)
 80034c8:	0092      	lsls	r2, r2, #2
 80034ca:	58d2      	ldr	r2, [r2, r3]
 80034cc:	197b      	adds	r3, r7, r5
 80034ce:	781c      	ldrb	r4, [r3, #0]
 80034d0:	1c11      	adds	r1, r2, #0
 80034d2:	f7fd fbdf 	bl	8000c94 <__aeabi_fmul>
 80034d6:	1c03      	adds	r3, r0, #0
 80034d8:	1c19      	adds	r1, r3, #0
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_ADC_ConvCpltCallback+0x118>)
 80034dc:	00a2      	lsls	r2, r4, #2
 80034de:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 80034e0:	197b      	adds	r3, r7, r5
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	2100      	movs	r1, #0
 80034ea:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	197b      	adds	r3, r7, r5
 80034f2:	3201      	adds	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	230f      	movs	r3, #15
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d9b8      	bls.n	8003472 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003500:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8003506:	e026      	b.n	8003556 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003508:	230e      	movs	r3, #14
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e016      	b.n	8003540 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003512:	200e      	movs	r0, #14
 8003514:	183b      	adds	r3, r7, r0
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	58d3      	ldr	r3, [r2, r3]
 800351e:	183a      	adds	r2, r7, r0
 8003520:	7811      	ldrb	r1, [r2, #0]
 8003522:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003524:	0049      	lsls	r1, r1, #1
 8003526:	5a8a      	ldrh	r2, [r1, r2]
 8003528:	0011      	movs	r1, r2
 800352a:	183a      	adds	r2, r7, r0
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	1859      	adds	r1, r3, r1
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_ADC_ConvCpltCallback+0x110>)
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003536:	183b      	adds	r3, r7, r0
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	183b      	adds	r3, r7, r0
 800353c:	3201      	adds	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	230e      	movs	r3, #14
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d9e3      	bls.n	8003512 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 800354a:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_ADC_ConvCpltCallback+0x10c>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003554:	801a      	strh	r2, [r3, #0]
}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bdb0      	pop	{r4, r5, r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	20000598 	.word	0x20000598
 8003564:	2000059c 	.word	0x2000059c
 8003568:	20000004 	.word	0x20000004
 800356c:	200004e0 	.word	0x200004e0
 8003570:	200004ec 	.word	0x200004ec

08003574 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	0002      	movs	r2, r0
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 8003580:	1dbb      	adds	r3, r7, #6
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d112      	bne.n	80035ae <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 8003588:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 8003594:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	2101      	movs	r1, #1
 800359a:	0018      	movs	r0, r3
 800359c:	f002 fe0b 	bl	80061b6 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	480a      	ldr	r0, [pc, #40]	@ (80035d0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	0019      	movs	r1, r3
 80035aa:	f002 fe04 	bl	80061b6 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 80035ae:	1dbb      	adds	r3, r7, #6
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	2b40      	cmp	r3, #64	@ 0x40
 80035b4:	d102      	bne.n	80035bc <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 80035b6:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200004fc 	.word	0x200004fc
 80035c8:	200004f9 	.word	0x200004f9
 80035cc:	50001400 	.word	0x50001400
 80035d0:	50000800 	.word	0x50000800
 80035d4:	20000506 	.word	0x20000506

080035d8 <gsm_is_valid_resp>:
	strcpy(gsm_match_resp, op_check);
	gsm_status = GSM_WAIT;
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
}

uint8_t gsm_is_valid_resp() {
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 80035dc:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <gsm_is_valid_resp+0x20>)
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <gsm_is_valid_resp+0x24>)
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f006 ff86 	bl	800a4f4 <strstr>
 80035e8:	0003      	movs	r3, r0
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	4193      	sbcs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	20000584 	.word	0x20000584
 80035fc:	20000520 	.word	0x20000520

08003600 <HAL_TIM_PeriodElapsedCallback>:
		gsm_rx_flag = 1;
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a8b      	ldr	r2, [pc, #556]	@ (800383c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d000      	beq.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003612:	e10f      	b.n	8003834 <HAL_TIM_PeriodElapsedCallback+0x234>
		if(ms > 10000) {
 8003614:	4b8a      	ldr	r3, [pc, #552]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a8a      	ldr	r2, [pc, #552]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d92a      	bls.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x74>
			if(sec > 60) {
 800361e:	4b8a      	ldr	r3, [pc, #552]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b3c      	cmp	r3, #60	@ 0x3c
 8003624:	d916      	bls.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8003626:	4b89      	ldr	r3, [pc, #548]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b3c      	cmp	r3, #60	@ 0x3c
 800362c:	d909      	bls.n	8003642 <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 800362e:	4b87      	ldr	r3, [pc, #540]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
					hr++;
 8003634:	4b86      	ldr	r3, [pc, #536]	@ (8003850 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	4b84      	ldr	r3, [pc, #528]	@ (8003850 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e004      	b.n	800364c <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 8003642:	4b82      	ldr	r3, [pc, #520]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	4b80      	ldr	r3, [pc, #512]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800364a:	601a      	str	r2, [r3, #0]
				sec = 0;
 800364c:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e005      	b.n	8003660 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8003654:	4b7c      	ldr	r3, [pc, #496]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b7a      	ldr	r3, [pc, #488]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800365e:	701a      	strb	r2, [r3, #0]
			ms = 0;
 8003660:	4b77      	ldr	r3, [pc, #476]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
			vi_update_flag = 1;
 8003666:	4b7b      	ldr	r3, [pc, #492]	@ (8003854 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
			kwh_update_flag = 1;
 800366c:	4b7a      	ldr	r3, [pc, #488]	@ (8003858 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e004      	b.n	800367e <HAL_TIM_PeriodElapsedCallback+0x7e>
			/*###*/
		} else ms++;
 8003674:	4b72      	ldr	r3, [pc, #456]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	4b71      	ldr	r3, [pc, #452]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800367c:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 800367e:	4b70      	ldr	r3, [pc, #448]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4976      	ldr	r1, [pc, #472]	@ (800385c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003684:	0018      	movs	r0, r3
 8003686:	f7fc fddd 	bl	8000244 <__aeabi_uidivmod>
 800368a:	1e0b      	subs	r3, r1, #0
 800368c:	d102      	bne.n	8003694 <HAL_TIM_PeriodElapsedCallback+0x94>
			sensor_refresh_flag = 1;
 800368e:	4b74      	ldr	r3, [pc, #464]	@ (8003860 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8003694:	4b73      	ldr	r3, [pc, #460]	@ (8003864 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_PeriodElapsedCallback+0xa6>
 800369c:	4b72      	ldr	r3, [pc, #456]	@ (8003868 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80036a6:	2200      	movs	r2, #0
 80036a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003868 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80036aa:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 80036ac:	4b6f      	ldr	r3, [pc, #444]	@ (800386c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_TIM_PeriodElapsedCallback+0xbe>
 80036b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003870 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80036be:	2200      	movs	r2, #0
 80036c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003870 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80036c2:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 80036c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003874 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 80036cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	e000      	b.n	80036d8 <HAL_TIM_PeriodElapsedCallback+0xd8>
 80036d6:	2200      	movs	r2, #0
 80036d8:	4b67      	ldr	r3, [pc, #412]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80036da:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 80036dc:	4b67      	ldr	r3, [pc, #412]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_TIM_PeriodElapsedCallback+0xee>
 80036e4:	4b66      	ldr	r3, [pc, #408]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	e000      	b.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 80036ee:	2200      	movs	r2, #0
 80036f0:	4b63      	ldr	r3, [pc, #396]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80036f2:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 80036f4:	4b62      	ldr	r3, [pc, #392]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	23fa      	movs	r3, #250	@ 0xfa
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d908      	bls.n	8003712 <HAL_TIM_PeriodElapsedCallback+0x112>
			led_blink_flag =  0;
 8003700:	4b5e      	ldr	r3, [pc, #376]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003706:	4b5f      	ldr	r3, [pc, #380]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003708:	2200      	movs	r2, #0
 800370a:	2102      	movs	r1, #2
 800370c:	0018      	movs	r0, r3
 800370e:	f002 fd52 	bl	80061b6 <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8003712:	4b5d      	ldr	r3, [pc, #372]	@ (8003888 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d14f      	bne.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x1ba>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 800371a:	4b5c      	ldr	r3, [pc, #368]	@ (800388c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_TIM_PeriodElapsedCallback+0x144>
 8003722:	4b5b      	ldr	r3, [pc, #364]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1c18      	adds	r0, r3, #0
 8003728:	f7ff fc44 	bl	8002fb4 <__aeabi_f2d>
 800372c:	4a59      	ldr	r2, [pc, #356]	@ (8003894 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800372e:	4b5a      	ldr	r3, [pc, #360]	@ (8003898 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003730:	f7fd fca0 	bl	8001074 <__aeabi_dadd>
 8003734:	0002      	movs	r2, r0
 8003736:	000b      	movs	r3, r1
 8003738:	0010      	movs	r0, r2
 800373a:	0019      	movs	r1, r3
 800373c:	f7ff fc82 	bl	8003044 <__aeabi_d2f>
 8003740:	1c02      	adds	r2, r0, #0
 8003742:	e000      	b.n	8003746 <HAL_TIM_PeriodElapsedCallback+0x146>
 8003744:	2200      	movs	r2, #0
 8003746:	4b52      	ldr	r3, [pc, #328]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003748:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 800374a:	4b51      	ldr	r3, [pc, #324]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b53      	ldr	r3, [pc, #332]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1c19      	adds	r1, r3, #0
 8003754:	1c10      	adds	r0, r2, #0
 8003756:	f7fc fed3 	bl	8000500 <__aeabi_fcmpge>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d03d      	beq.n	80037da <HAL_TIM_PeriodElapsedCallback+0x1da>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 800375e:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 8003764:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003766:	2201      	movs	r2, #1
 8003768:	2101      	movs	r1, #1
 800376a:	0018      	movs	r0, r3
 800376c:	f002 fd23 	bl	80061b6 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	019b      	lsls	r3, r3, #6
 8003774:	484a      	ldr	r0, [pc, #296]	@ (80038a0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003776:	2201      	movs	r2, #1
 8003778:	0019      	movs	r1, r3
 800377a:	f002 fd1c 	bl	80061b6 <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 100; i++);
 800377e:	230f      	movs	r3, #15
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e005      	b.n	8003794 <HAL_TIM_PeriodElapsedCallback+0x194>
 8003788:	210f      	movs	r1, #15
 800378a:	187b      	adds	r3, r7, r1
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	187b      	adds	r3, r7, r1
 8003790:	3201      	adds	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	230f      	movs	r3, #15
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b63      	cmp	r3, #99	@ 0x63
 800379c:	d9f4      	bls.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x188>
				TRIAC1_SET(0); /* turn it off */
 800379e:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	2101      	movs	r1, #1
 80037a4:	0018      	movs	r0, r3
 80037a6:	f002 fd06 	bl	80061b6 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	483c      	ldr	r0, [pc, #240]	@ (80038a0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	0019      	movs	r1, r3
 80037b4:	f002 fcff 	bl	80061b6 <HAL_GPIO_WritePin>
 80037b8:	e00f      	b.n	80037da <HAL_TIM_PeriodElapsedCallback+0x1da>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 80037ba:	4b32      	ldr	r3, [pc, #200]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80037bc:	2200      	movs	r2, #0
 80037be:	2101      	movs	r1, #1
 80037c0:	0018      	movs	r0, r3
 80037c2:	f002 fcf8 	bl	80061b6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 80037c6:	2380      	movs	r3, #128	@ 0x80
 80037c8:	019b      	lsls	r3, r3, #6
 80037ca:	4835      	ldr	r0, [pc, #212]	@ (80038a0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	0019      	movs	r1, r3
 80037d0:	f002 fcf1 	bl	80061b6 <HAL_GPIO_WritePin>
			triac_time = 0;
 80037d4:	4b31      	ldr	r3, [pc, #196]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 80037da:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 80037e4:	4b30      	ldr	r3, [pc, #192]	@ (80038a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	e000      	b.n	80037f2 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 80037f0:	2200      	movs	r2, #0
 80037f2:	4b2d      	ldr	r3, [pc, #180]	@ (80038a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80037f4:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 80037f6:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	429a      	cmp	r2, r3
 8003804:	d916      	bls.n	8003834 <HAL_TIM_PeriodElapsedCallback+0x234>
			gsm_rx_timer = 0;
 8003806:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003808:	2200      	movs	r2, #0
 800380a:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 800380c:	f7ff fee4 	bl	80035d8 <gsm_is_valid_resp>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d003      	beq.n	800381c <HAL_TIM_PeriodElapsedCallback+0x21c>
				gsm_status = GSM_OK;
 8003814:	4b26      	ldr	r3, [pc, #152]	@ (80038b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e002      	b.n	8003822 <HAL_TIM_PeriodElapsedCallback+0x222>
			else
				gsm_status = GSM_NOK;
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800381e:	2263      	movs	r2, #99	@ 0x63
 8003820:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8003828:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 800382e:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
		}


	}
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b004      	add	sp, #16
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40014400 	.word	0x40014400
 8003840:	200004d0 	.word	0x200004d0
 8003844:	00002710 	.word	0x00002710
 8003848:	200004d4 	.word	0x200004d4
 800384c:	200004d8 	.word	0x200004d8
 8003850:	200004dc 	.word	0x200004dc
 8003854:	20000507 	.word	0x20000507
 8003858:	20000506 	.word	0x20000506
 800385c:	00001388 	.word	0x00001388
 8003860:	200004cd 	.word	0x200004cd
 8003864:	200004c0 	.word	0x200004c0
 8003868:	200004c4 	.word	0x200004c4
 800386c:	200004c1 	.word	0x200004c1
 8003870:	200004c6 	.word	0x200004c6
 8003874:	200004c2 	.word	0x200004c2
 8003878:	200004c8 	.word	0x200004c8
 800387c:	200004cc 	.word	0x200004cc
 8003880:	200004ca 	.word	0x200004ca
 8003884:	50001400 	.word	0x50001400
 8003888:	20000504 	.word	0x20000504
 800388c:	200004f9 	.word	0x200004f9
 8003890:	200004fc 	.word	0x200004fc
 8003894:	9999999a 	.word	0x9999999a
 8003898:	3fb99999 	.word	0x3fb99999
 800389c:	20000500 	.word	0x20000500
 80038a0:	50000800 	.word	0x50000800
 80038a4:	2000051d 	.word	0x2000051d
 80038a8:	20000518 	.word	0x20000518
 80038ac:	2000051a 	.word	0x2000051a
 80038b0:	20000516 	.word	0x20000516
 80038b4:	20000514 	.word	0x20000514
 80038b8:	20000515 	.word	0x20000515

080038bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b0c6      	sub	sp, #280	@ 0x118
 80038c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c2:	f001 f9ad 	bl	8004c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c6:	f000 faa9 	bl	8003e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038ca:	f000 fccb 	bl	8004264 <MX_GPIO_Init>
  MX_DMA_Init();
 80038ce:	f000 fcab 	bl	8004228 <MX_DMA_Init>
  MX_I2C2_Init();
 80038d2:	f000 fbcf 	bl	8004074 <MX_I2C2_Init>
  MX_TIM16_Init();
 80038d6:	f000 fc4d 	bl	8004174 <MX_TIM16_Init>
  MX_I2C1_Init();
 80038da:	f000 fb8b 	bl	8003ff4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80038de:	f000 fc6f 	bl	80041c0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80038e2:	f000 faf5 	bl	8003ed0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80038e6:	f000 fc05 	bl	80040f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 80038ea:	4be3      	ldr	r3, [pc, #908]	@ (8003c78 <main+0x3bc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	2101      	movs	r1, #1
 80038f0:	0018      	movs	r0, r3
 80038f2:	f002 fc60 	bl	80061b6 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	48e0      	ldr	r0, [pc, #896]	@ (8003c7c <main+0x3c0>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	0019      	movs	r1, r3
 8003900:	f002 fc59 	bl	80061b6 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8003904:	23f0      	movs	r3, #240	@ 0xf0
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 800390c:	2308      	movs	r3, #8
 800390e:	33ff      	adds	r3, #255	@ 0xff
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8003916:	1d7b      	adds	r3, r7, #5
 8003918:	33ff      	adds	r3, #255	@ 0xff
 800391a:	2200      	movs	r2, #0
 800391c:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 800391e:	4bd8      	ldr	r3, [pc, #864]	@ (8003c80 <main+0x3c4>)
 8003920:	2280      	movs	r2, #128	@ 0x80
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8003926:	4bd6      	ldr	r3, [pc, #856]	@ (8003c80 <main+0x3c4>)
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	0152      	lsls	r2, r2, #5
 800392c:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 800392e:	4bd4      	ldr	r3, [pc, #848]	@ (8003c80 <main+0x3c4>)
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	0192      	lsls	r2, r2, #6
 8003934:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8003936:	4bd2      	ldr	r3, [pc, #840]	@ (8003c80 <main+0x3c4>)
 8003938:	2280      	movs	r2, #128	@ 0x80
 800393a:	01d2      	lsls	r2, r2, #7
 800393c:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 800393e:	4bd0      	ldr	r3, [pc, #832]	@ (8003c80 <main+0x3c4>)
 8003940:	2280      	movs	r2, #128	@ 0x80
 8003942:	0212      	lsls	r2, r2, #8
 8003944:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8003946:	23a0      	movs	r3, #160	@ 0xa0
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	2280      	movs	r2, #128	@ 0x80
 800394c:	0052      	lsls	r2, r2, #1
 800394e:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003950:	4bcb      	ldr	r3, [pc, #812]	@ (8003c80 <main+0x3c4>)
 8003952:	2280      	movs	r2, #128	@ 0x80
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 8003958:	4bca      	ldr	r3, [pc, #808]	@ (8003c84 <main+0x3c8>)
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 800395e:	4bc9      	ldr	r3, [pc, #804]	@ (8003c84 <main+0x3c8>)
 8003960:	2200      	movs	r2, #0
 8003962:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8003964:	4bc7      	ldr	r3, [pc, #796]	@ (8003c84 <main+0x3c8>)
 8003966:	2200      	movs	r2, #0
 8003968:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 800396a:	2328      	movs	r3, #40	@ 0x28
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	0018      	movs	r0, r3
 8003970:	23c8      	movs	r3, #200	@ 0xc8
 8003972:	001a      	movs	r2, r3
 8003974:	2100      	movs	r1, #0
 8003976:	f006 fdb5 	bl	800a4e4 <memset>
	char api_key[20] = "07AFUS2QQTX0QLDF"; /* key for production */
 800397a:	2314      	movs	r3, #20
 800397c:	18f9      	adds	r1, r7, r3
 800397e:	4ac2      	ldr	r2, [pc, #776]	@ (8003c88 <main+0x3cc>)
 8003980:	000b      	movs	r3, r1
 8003982:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003984:	c331      	stmia	r3!, {r0, r4, r5}
 8003986:	6810      	ldr	r0, [r2, #0]
 8003988:	6018      	str	r0, [r3, #0]
 800398a:	7912      	ldrb	r2, [r2, #4]
 800398c:	711a      	strb	r2, [r3, #4]
 800398e:	2311      	movs	r3, #17
 8003990:	18cb      	adds	r3, r1, r3
 8003992:	2203      	movs	r2, #3
 8003994:	2100      	movs	r1, #0
 8003996:	0018      	movs	r0, r3
 8003998:	f006 fda4 	bl	800a4e4 <memset>
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
//	HAL_Delay(700);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
//	HAL_Delay(15000);
//
	uint8_t prev_idx = 1;
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	33ff      	adds	r3, #255	@ 0xff
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 80039a4:	1cfb      	adds	r3, r7, #3
 80039a6:	33ff      	adds	r3, #255	@ 0xff
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 80039ac:	1c7b      	adds	r3, r7, #1
 80039ae:	33ff      	adds	r3, #255	@ 0xff
 80039b0:	22c8      	movs	r2, #200	@ 0xc8
 80039b2:	0052      	lsls	r2, r2, #1
 80039b4:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 80039b6:	4bb5      	ldr	r3, [pc, #724]	@ (8003c8c <main+0x3d0>)
 80039b8:	0018      	movs	r0, r3
 80039ba:	f005 f9db 	bl	8008d74 <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 80039be:	4bb4      	ldr	r3, [pc, #720]	@ (8003c90 <main+0x3d4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 80039c4:	4bb3      	ldr	r3, [pc, #716]	@ (8003c94 <main+0x3d8>)
 80039c6:	22ff      	movs	r2, #255	@ 0xff
 80039c8:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 80039ca:	4bb3      	ldr	r3, [pc, #716]	@ (8003c98 <main+0x3dc>)
 80039cc:	2284      	movs	r2, #132	@ 0x84
 80039ce:	0052      	lsls	r2, r2, #1
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	0018      	movs	r0, r3
 80039d6:	2307      	movs	r3, #7
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f006 fd82 	bl	800a4e4 <memset>
	ti.day = 14;
 80039e0:	210c      	movs	r1, #12
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	220e      	movs	r2, #14
 80039e6:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	220b      	movs	r2, #11
 80039ec:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2218      	movs	r2, #24
 80039f2:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2202      	movs	r2, #2
 80039f8:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2215      	movs	r2, #21
 80039fe:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	220e      	movs	r2, #14
 8003a04:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2200      	movs	r2, #0
 8003a0a:	719a      	strb	r2, [r3, #6]
//	ds3231_settime(&ti);
//	ds3231_gettime(&time);
//
//	ds3231_clearalarm1();
//	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 8003a0c:	230a      	movs	r3, #10
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	2200      	movs	r2, #0
 8003a14:	2100      	movs	r1, #0
 8003a16:	2003      	movs	r0, #3
 8003a18:	f7ff fbfa 	bl	8003210 <ds3231_setalarm1>
//				TRIAC2_SET(0);
//				triac_time = 0;
//			}
//		}

		if(kwh_update_flag == 1) {
 8003a1c:	4b9f      	ldr	r3, [pc, #636]	@ (8003c9c <main+0x3e0>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d162      	bne.n	8003aea <main+0x22e>
			/* reading ACS37800 */
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_PACTAVGONEMIN, I2C_MEMADD_SIZE_8BIT, acs37800_p_buffer, 4, 100);
 8003a24:	489e      	ldr	r0, [pc, #632]	@ (8003ca0 <main+0x3e4>)
 8003a26:	2364      	movs	r3, #100	@ 0x64
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	4b9d      	ldr	r3, [pc, #628]	@ (8003ca4 <main+0x3e8>)
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2301      	movs	r3, #1
 8003a34:	2222      	movs	r2, #34	@ 0x22
 8003a36:	21fe      	movs	r1, #254	@ 0xfe
 8003a38:	f002 fee6 	bl	8006808 <HAL_I2C_Mem_Read>
			uint16_t pavg_raw = (acs37800_p_buffer[1] << 8) | acs37800_p_buffer[0];
 8003a3c:	4b99      	ldr	r3, [pc, #612]	@ (8003ca4 <main+0x3e8>)
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	4b97      	ldr	r3, [pc, #604]	@ (8003ca4 <main+0x3e8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	21fe      	movs	r1, #254	@ 0xfe
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	801a      	strh	r2, [r3, #0]
			pavg_final = pavg_raw;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fd fac4 	bl	8000fe8 <__aeabi_ui2f>
 8003a60:	1c02      	adds	r2, r0, #0
 8003a62:	4b91      	ldr	r3, [pc, #580]	@ (8003ca8 <main+0x3ec>)
 8003a64:	601a      	str	r2, [r3, #0]
			float LSBpermW = 3.08; // LSB per mW
 8003a66:	4b91      	ldr	r3, [pc, #580]	@ (8003cac <main+0x3f0>)
 8003a68:	22f8      	movs	r2, #248	@ 0xf8
 8003a6a:	18b9      	adds	r1, r7, r2
 8003a6c:	600b      	str	r3, [r1, #0]
			LSBpermW  *= 30.0 / ACS37800_CURR_SENS_RANGE; // Correct for sensor version
			pavg_final /= LSBpermW; // Convert from codes to mW
 8003a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca8 <main+0x3ec>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	1c18      	adds	r0, r3, #0
 8003a78:	f7fc ff3e 	bl	80008f8 <__aeabi_fdiv>
 8003a7c:	1c03      	adds	r3, r0, #0
 8003a7e:	1c1a      	adds	r2, r3, #0
 8003a80:	4b89      	ldr	r3, [pc, #548]	@ (8003ca8 <main+0x3ec>)
 8003a82:	601a      	str	r2, [r3, #0]
			//Correct for the voltage divider: (RISO1 + RISO2 + RSENSE) / RSENSE
			//Or:  (RISO1 + RISO2 + RISO3 + RISO4 + RSENSE) / RSENSE
			pavg_final /= 0.0008243;
 8003a84:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <main+0x3ec>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	1c18      	adds	r0, r3, #0
 8003a8a:	f7ff fa93 	bl	8002fb4 <__aeabi_f2d>
 8003a8e:	4a88      	ldr	r2, [pc, #544]	@ (8003cb0 <main+0x3f4>)
 8003a90:	4b88      	ldr	r3, [pc, #544]	@ (8003cb4 <main+0x3f8>)
 8003a92:	f7fd feb5 	bl	8001800 <__aeabi_ddiv>
 8003a96:	0002      	movs	r2, r0
 8003a98:	000b      	movs	r3, r1
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	f7ff fad1 	bl	8003044 <__aeabi_d2f>
 8003aa2:	1c02      	adds	r2, r0, #0
 8003aa4:	4b80      	ldr	r3, [pc, #512]	@ (8003ca8 <main+0x3ec>)
 8003aa6:	601a      	str	r2, [r3, #0]
			pavg_final /= 1000; // Convert from mW to W
 8003aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca8 <main+0x3ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4982      	ldr	r1, [pc, #520]	@ (8003cb8 <main+0x3fc>)
 8003aae:	1c18      	adds	r0, r3, #0
 8003ab0:	f7fc ff22 	bl	80008f8 <__aeabi_fdiv>
 8003ab4:	1c03      	adds	r3, r0, #0
 8003ab6:	1c1a      	adds	r2, r3, #0
 8003ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <main+0x3ec>)
 8003aba:	601a      	str	r2, [r3, #0]

			kwh = kwh + (pavg_final * (1/(float)60));
 8003abc:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca8 <main+0x3ec>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	497e      	ldr	r1, [pc, #504]	@ (8003cbc <main+0x400>)
 8003ac2:	1c18      	adds	r0, r3, #0
 8003ac4:	f7fd f8e6 	bl	8000c94 <__aeabi_fmul>
 8003ac8:	1c03      	adds	r3, r0, #0
 8003aca:	1c1a      	adds	r2, r3, #0
 8003acc:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc0 <main+0x404>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	1c19      	adds	r1, r3, #0
 8003ad2:	1c10      	adds	r0, r2, #0
 8003ad4:	f7fc fd1e 	bl	8000514 <__aeabi_fadd>
 8003ad8:	1c03      	adds	r3, r0, #0
 8003ada:	1c1a      	adds	r2, r3, #0
 8003adc:	4b78      	ldr	r3, [pc, #480]	@ (8003cc0 <main+0x404>)
 8003ade:	601a      	str	r2, [r3, #0]
			/* TODO update kwh in EEPROM */
			kwh_update_flag = 0; /* wait till next min */
 8003ae0:	4b6e      	ldr	r3, [pc, #440]	@ (8003c9c <main+0x3e0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
			ds3231_clearflagalarm1(); /* clear alarm flag */
 8003ae6:	f7ff fc7d 	bl	80033e4 <ds3231_clearflagalarm1>
		}
		if(vi_update_flag == 1) {
 8003aea:	4b76      	ldr	r3, [pc, #472]	@ (8003cc4 <main+0x408>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d000      	beq.n	8003af4 <main+0x238>
 8003af2:	e082      	b.n	8003bfa <main+0x33e>
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_VIRMS, I2C_MEMADD_SIZE_8BIT, acs37800_vi_buffer, 4, 100);
 8003af4:	486a      	ldr	r0, [pc, #424]	@ (8003ca0 <main+0x3e4>)
 8003af6:	2364      	movs	r3, #100	@ 0x64
 8003af8:	9302      	str	r3, [sp, #8]
 8003afa:	2304      	movs	r3, #4
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	4b72      	ldr	r3, [pc, #456]	@ (8003cc8 <main+0x40c>)
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2301      	movs	r3, #1
 8003b04:	2220      	movs	r2, #32
 8003b06:	21fe      	movs	r1, #254	@ 0xfe
 8003b08:	f002 fe7e 	bl	8006808 <HAL_I2C_Mem_Read>
			uint16_t vrms_raw = (acs37800_vi_buffer[1] << 8) | acs37800_vi_buffer[0];
 8003b0c:	4b6e      	ldr	r3, [pc, #440]	@ (8003cc8 <main+0x40c>)
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	b21b      	sxth	r3, r3
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc8 <main+0x40c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b21a      	sxth	r2, r3
 8003b20:	21f6      	movs	r1, #246	@ 0xf6
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	801a      	strh	r2, [r3, #0]
			vrms_final = vrms_raw / (float)55000;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fd fa0c 	bl	8000f48 <__aeabi_i2f>
 8003b30:	1c03      	adds	r3, r0, #0
 8003b32:	4966      	ldr	r1, [pc, #408]	@ (8003ccc <main+0x410>)
 8003b34:	1c18      	adds	r0, r3, #0
 8003b36:	f7fc fedf 	bl	80008f8 <__aeabi_fdiv>
 8003b3a:	1c03      	adds	r3, r0, #0
 8003b3c:	1c1a      	adds	r2, r3, #0
 8003b3e:	4b64      	ldr	r3, [pc, #400]	@ (8003cd0 <main+0x414>)
 8003b40:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final * 250;
 8003b42:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <main+0x414>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4963      	ldr	r1, [pc, #396]	@ (8003cd4 <main+0x418>)
 8003b48:	1c18      	adds	r0, r3, #0
 8003b4a:	f7fd f8a3 	bl	8000c94 <__aeabi_fmul>
 8003b4e:	1c03      	adds	r3, r0, #0
 8003b50:	1c1a      	adds	r2, r3, #0
 8003b52:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd0 <main+0x414>)
 8003b54:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 1000;
 8003b56:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <main+0x414>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4957      	ldr	r1, [pc, #348]	@ (8003cb8 <main+0x3fc>)
 8003b5c:	1c18      	adds	r0, r3, #0
 8003b5e:	f7fc fecb 	bl	80008f8 <__aeabi_fdiv>
 8003b62:	1c03      	adds	r3, r0, #0
 8003b64:	1c1a      	adds	r2, r3, #0
 8003b66:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd0 <main+0x414>)
 8003b68:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 0.0008243;
 8003b6a:	4b59      	ldr	r3, [pc, #356]	@ (8003cd0 <main+0x414>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c18      	adds	r0, r3, #0
 8003b70:	f7ff fa20 	bl	8002fb4 <__aeabi_f2d>
 8003b74:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb0 <main+0x3f4>)
 8003b76:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb4 <main+0x3f8>)
 8003b78:	f7fd fe42 	bl	8001800 <__aeabi_ddiv>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	000b      	movs	r3, r1
 8003b80:	0010      	movs	r0, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	f7ff fa5e 	bl	8003044 <__aeabi_d2f>
 8003b88:	1c02      	adds	r2, r0, #0
 8003b8a:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <main+0x414>)
 8003b8c:	601a      	str	r2, [r3, #0]
			uint16_t irms_raw = (acs37800_vi_buffer[3] << 8) | acs37800_vi_buffer[2];
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc8 <main+0x40c>)
 8003b90:	78db      	ldrb	r3, [r3, #3]
 8003b92:	b21b      	sxth	r3, r3
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	b21a      	sxth	r2, r3
 8003b98:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc8 <main+0x40c>)
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	b21b      	sxth	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b21a      	sxth	r2, r3
 8003ba2:	21f4      	movs	r1, #244	@ 0xf4
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	801a      	strh	r2, [r3, #0]
			irms_final = irms_raw / (float)55000;
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7fd f9cb 	bl	8000f48 <__aeabi_i2f>
 8003bb2:	1c03      	adds	r3, r0, #0
 8003bb4:	4945      	ldr	r1, [pc, #276]	@ (8003ccc <main+0x410>)
 8003bb6:	1c18      	adds	r0, r3, #0
 8003bb8:	f7fc fe9e 	bl	80008f8 <__aeabi_fdiv>
 8003bbc:	1c03      	adds	r3, r0, #0
 8003bbe:	1c1a      	adds	r2, r3, #0
 8003bc0:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <main+0x41c>)
 8003bc2:	601a      	str	r2, [r3, #0]
			irms_final = irms_final * ACS37800_CURR_SENS_RANGE;
 8003bc4:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <main+0x41c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4944      	ldr	r1, [pc, #272]	@ (8003cdc <main+0x420>)
 8003bca:	1c18      	adds	r0, r3, #0
 8003bcc:	f7fd f862 	bl	8000c94 <__aeabi_fmul>
 8003bd0:	1c03      	adds	r3, r0, #0
 8003bd2:	1c1a      	adds	r2, r3, #0
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <main+0x41c>)
 8003bd6:	601a      	str	r2, [r3, #0]
			if(irms_final < 0.050)
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd8 <main+0x41c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c18      	adds	r0, r3, #0
 8003bde:	f7ff f9e9 	bl	8002fb4 <__aeabi_f2d>
 8003be2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce0 <main+0x424>)
 8003be4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <main+0x428>)
 8003be6:	f7fc fc33 	bl	8000450 <__aeabi_dcmplt>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d002      	beq.n	8003bf4 <main+0x338>
				irms_final = 0;
 8003bee:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <main+0x41c>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
			vi_update_flag = 0; /* wait till next sec */
 8003bf4:	4b33      	ldr	r3, [pc, #204]	@ (8003cc4 <main+0x408>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 8003bfa:	21f0      	movs	r1, #240	@ 0xf0
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2200      	movs	r2, #0
 8003c06:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8003c08:	23f2      	movs	r3, #242	@ 0xf2
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8003c10:	1d7b      	adds	r3, r7, #5
 8003c12:	33ff      	adds	r3, #255	@ 0xff
 8003c14:	2200      	movs	r2, #0
 8003c16:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8003c18:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <main+0x42c>)
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	1c7b      	adds	r3, r7, #1
 8003c1e:	33ff      	adds	r3, #255	@ 0xff
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fd f990 	bl	8000f48 <__aeabi_i2f>
 8003c28:	1c03      	adds	r3, r0, #0
 8003c2a:	1c19      	adds	r1, r3, #0
 8003c2c:	1c20      	adds	r0, r4, #0
 8003c2e:	f7fc fc67 	bl	8000500 <__aeabi_fcmpge>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d10e      	bne.n	8003c54 <main+0x398>
 8003c36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <main+0x42c>)
 8003c38:	685c      	ldr	r4, [r3, #4]
 8003c3a:	1c7b      	adds	r3, r7, #1
 8003c3c:	33ff      	adds	r3, #255	@ 0xff
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fd f981 	bl	8000f48 <__aeabi_i2f>
 8003c46:	1c03      	adds	r3, r0, #0
 8003c48:	1c19      	adds	r1, r3, #0
 8003c4a:	1c20      	adds	r0, r4, #0
 8003c4c:	f7fc fc58 	bl	8000500 <__aeabi_fcmpge>
 8003c50:	1e03      	subs	r3, r0, #0
 8003c52:	d04d      	beq.n	8003cf0 <main+0x434>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8003c54:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <main+0x3bc>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	2101      	movs	r1, #1
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f002 faab 	bl	80061b6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003c60:	2380      	movs	r3, #128	@ 0x80
 8003c62:	019b      	lsls	r3, r3, #6
 8003c64:	4805      	ldr	r0, [pc, #20]	@ (8003c7c <main+0x3c0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	0019      	movs	r1, r3
 8003c6a:	f002 faa4 	bl	80061b6 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cec <main+0x430>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e03f      	b.n	8003cf6 <main+0x43a>
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	50001400 	.word	0x50001400
 8003c7c:	50000800 	.word	0x50000800
 8003c80:	50000400 	.word	0x50000400
 8003c84:	200004ec 	.word	0x200004ec
 8003c88:	0800c4a4 	.word	0x0800c4a4
 8003c8c:	200003e0 	.word	0x200003e0
 8003c90:	200004f9 	.word	0x200004f9
 8003c94:	2000051c 	.word	0x2000051c
 8003c98:	fffffefc 	.word	0xfffffefc
 8003c9c:	20000506 	.word	0x20000506
 8003ca0:	200002d4 	.word	0x200002d4
 8003ca4:	20000204 	.word	0x20000204
 8003ca8:	20000210 	.word	0x20000210
 8003cac:	40451eb8 	.word	0x40451eb8
 8003cb0:	c5634c00 	.word	0xc5634c00
 8003cb4:	3f4b02ba 	.word	0x3f4b02ba
 8003cb8:	447a0000 	.word	0x447a0000
 8003cbc:	3c888889 	.word	0x3c888889
 8003cc0:	200004f4 	.word	0x200004f4
 8003cc4:	20000507 	.word	0x20000507
 8003cc8:	20000200 	.word	0x20000200
 8003ccc:	4756d800 	.word	0x4756d800
 8003cd0:	20000208 	.word	0x20000208
 8003cd4:	437a0000 	.word	0x437a0000
 8003cd8:	2000020c 	.word	0x2000020c
 8003cdc:	41f00000 	.word	0x41f00000
 8003ce0:	9999999a 	.word	0x9999999a
 8003ce4:	3fa99999 	.word	0x3fa99999
 8003ce8:	20000508 	.word	0x20000508
 8003cec:	200004f8 	.word	0x200004f8
		}
		else {
			triac_temp_ctrl = 1;
 8003cf0:	4b41      	ldr	r3, [pc, #260]	@ (8003df8 <main+0x53c>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8003cf6:	4b40      	ldr	r3, [pc, #256]	@ (8003df8 <main+0x53c>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d167      	bne.n	8003dce <main+0x512>
			if(BTN1_READ() == 0) {
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a3e      	ldr	r2, [pc, #248]	@ (8003dfc <main+0x540>)
 8003d04:	0019      	movs	r1, r3
 8003d06:	0010      	movs	r0, r2
 8003d08:	f002 fa38 	bl	800617c <HAL_GPIO_ReadPin>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d113      	bne.n	8003d38 <main+0x47c>
				if(BTN1_READ() == 0) {
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a39      	ldr	r2, [pc, #228]	@ (8003dfc <main+0x540>)
 8003d16:	0019      	movs	r1, r3
 8003d18:	0010      	movs	r0, r2
 8003d1a:	f002 fa2f 	bl	800617c <HAL_GPIO_ReadPin>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d000      	beq.n	8003d24 <main+0x468>
 8003d22:	e67b      	b.n	8003a1c <main+0x160>
					mode = 1;
 8003d24:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <main+0x544>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
					triac_time = 6.5; /* 130V */
 8003d2a:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <main+0x548>)
 8003d2c:	4a36      	ldr	r2, [pc, #216]	@ (8003e08 <main+0x54c>)
 8003d2e:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <main+0x550>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e671      	b.n	8003a1c <main+0x160>
				}
			}
			else if(BTN2_READ() == 0) {
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <main+0x540>)
 8003d3e:	0019      	movs	r1, r3
 8003d40:	0010      	movs	r0, r2
 8003d42:	f002 fa1b 	bl	800617c <HAL_GPIO_ReadPin>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d113      	bne.n	8003d72 <main+0x4b6>
				if(BTN2_READ() == 0) {
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dfc <main+0x540>)
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f002 fa12 	bl	800617c <HAL_GPIO_ReadPin>
 8003d58:	1e03      	subs	r3, r0, #0
 8003d5a:	d000      	beq.n	8003d5e <main+0x4a2>
 8003d5c:	e65e      	b.n	8003a1c <main+0x160>
					mode = 2;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <main+0x544>)
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
					triac_time = 5.5; /* 170V */
 8003d64:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <main+0x548>)
 8003d66:	4a2a      	ldr	r2, [pc, #168]	@ (8003e10 <main+0x554>)
 8003d68:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003d6a:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <main+0x550>)
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e654      	b.n	8003a1c <main+0x160>
				}
			}
			else if(BTN3_READ() == 0) {
 8003d72:	4b22      	ldr	r3, [pc, #136]	@ (8003dfc <main+0x540>)
 8003d74:	2180      	movs	r1, #128	@ 0x80
 8003d76:	0018      	movs	r0, r3
 8003d78:	f002 fa00 	bl	800617c <HAL_GPIO_ReadPin>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d112      	bne.n	8003da6 <main+0x4ea>
				if(BTN3_READ() == 0) {
 8003d80:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <main+0x540>)
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	0018      	movs	r0, r3
 8003d86:	f002 f9f9 	bl	800617c <HAL_GPIO_ReadPin>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d000      	beq.n	8003d90 <main+0x4d4>
 8003d8e:	e645      	b.n	8003a1c <main+0x160>
					mode = 3;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <main+0x544>)
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
					triac_time = 4; /* 205V */
 8003d96:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <main+0x548>)
 8003d98:	2281      	movs	r2, #129	@ 0x81
 8003d9a:	05d2      	lsls	r2, r2, #23
 8003d9c:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <main+0x550>)
 8003da0:	2202      	movs	r2, #2
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e63a      	b.n	8003a1c <main+0x160>
				}
			}
			else {
				mode = 0;
 8003da6:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <main+0x544>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003dac:	4b17      	ldr	r3, [pc, #92]	@ (8003e0c <main+0x550>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 8003db2:	4b18      	ldr	r3, [pc, #96]	@ (8003e14 <main+0x558>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	2101      	movs	r1, #1
 8003db8:	0018      	movs	r0, r3
 8003dba:	f002 f9fc 	bl	80061b6 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	4815      	ldr	r0, [pc, #84]	@ (8003e18 <main+0x55c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	f002 f9f5 	bl	80061b6 <HAL_GPIO_WritePin>
 8003dcc:	e626      	b.n	8003a1c <main+0x160>
			}
		}
		else {
			mode = 0;
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <main+0x544>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <main+0x550>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 8003dda:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <main+0x558>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2101      	movs	r1, #1
 8003de0:	0018      	movs	r0, r3
 8003de2:	f002 f9e8 	bl	80061b6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	480b      	ldr	r0, [pc, #44]	@ (8003e18 <main+0x55c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	0019      	movs	r1, r3
 8003df0:	f002 f9e1 	bl	80061b6 <HAL_GPIO_WritePin>
		if(kwh_update_flag == 1) {
 8003df4:	e612      	b.n	8003a1c <main+0x160>
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	200004f8 	.word	0x200004f8
 8003dfc:	50000400 	.word	0x50000400
 8003e00:	20000505 	.word	0x20000505
 8003e04:	20000500 	.word	0x20000500
 8003e08:	40d00000 	.word	0x40d00000
 8003e0c:	20000504 	.word	0x20000504
 8003e10:	40b00000 	.word	0x40b00000
 8003e14:	50001400 	.word	0x50001400
 8003e18:	50000800 	.word	0x50000800

08003e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b093      	sub	sp, #76	@ 0x4c
 8003e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e22:	2414      	movs	r4, #20
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	0018      	movs	r0, r3
 8003e28:	2334      	movs	r3, #52	@ 0x34
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f006 fb59 	bl	800a4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	0018      	movs	r0, r3
 8003e36:	2310      	movs	r3, #16
 8003e38:	001a      	movs	r2, r3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f006 fb52 	bl	800a4e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f004 f84b 	bl	8007ee0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e4a:	193b      	adds	r3, r7, r4
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e50:	193b      	adds	r3, r7, r4
 8003e52:	2280      	movs	r2, #128	@ 0x80
 8003e54:	0052      	lsls	r2, r2, #1
 8003e56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e58:	0021      	movs	r1, r4
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2240      	movs	r2, #64	@ 0x40
 8003e64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2202      	movs	r2, #2
 8003e6a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2202      	movs	r2, #2
 8003e70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2200      	movs	r2, #0
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	22b0      	movs	r2, #176	@ 0xb0
 8003e82:	0352      	lsls	r2, r2, #13
 8003e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	22a0      	movs	r2, #160	@ 0xa0
 8003e8a:	0612      	lsls	r2, r2, #24
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	0018      	movs	r0, r3
 8003e92:	f004 f871 	bl	8007f78 <HAL_RCC_OscConfig>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e9a:	f000 fb0d 	bl	80044b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f004 fb6c 	bl	8008598 <HAL_RCC_ClockConfig>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003ec4:	f000 faf8 	bl	80044b8 <Error_Handler>
  }
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b013      	add	sp, #76	@ 0x4c
 8003ece:	bd90      	pop	{r4, r7, pc}

08003ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	0018      	movs	r0, r3
 8003eda:	230c      	movs	r3, #12
 8003edc:	001a      	movs	r2, r3
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f006 fb00 	bl	800a4e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe4 <MX_ADC1_Init+0x114>)
 8003ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003eea:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003eec:	2280      	movs	r2, #128	@ 0x80
 8003eee:	0352      	lsls	r2, r2, #13
 8003ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ef8:	4b39      	ldr	r3, [pc, #228]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003efe:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f00:	2280      	movs	r2, #128	@ 0x80
 8003f02:	0392      	lsls	r2, r2, #14
 8003f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003f06:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f08:	2208      	movs	r2, #8
 8003f0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003f0c:	4b34      	ldr	r3, [pc, #208]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003f12:	4b33      	ldr	r3, [pc, #204]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003f18:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003f1e:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f20:	2203      	movs	r2, #3
 8003f22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f26:	2220      	movs	r2, #32
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f32:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f3a:	222c      	movs	r2, #44	@ 0x2c
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003f40:	4b27      	ldr	r3, [pc, #156]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003f46:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003f4c:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003f52:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f54:	223c      	movs	r2, #60	@ 0x3c
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003f5a:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f60:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fffe 	bl	8004f64 <HAL_ADC_Init>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003f6c:	f000 faa4 	bl	80044b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <MX_ADC1_Init+0x118>)
 8003f74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f82:	1d3a      	adds	r2, r7, #4
 8003f84:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003f86:	0011      	movs	r1, r2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f001 fabb 	bl	8005504 <HAL_ADC_ConfigChannel>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d001      	beq.n	8003f96 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003f92:	f000 fa91 	bl	80044b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <MX_ADC1_Init+0x11c>)
 8003f9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fa2:	1d3a      	adds	r2, r7, #4
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f001 faab 	bl	8005504 <HAL_ADC_ConfigChannel>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8003fb2:	f000 fa81 	bl	80044b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <MX_ADC1_Init+0x120>)
 8003fba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fc2:	1d3a      	adds	r2, r7, #4
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <MX_ADC1_Init+0x110>)
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 fa9b 	bl	8005504 <HAL_ADC_ConfigChannel>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003fd2:	f000 fa71 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	20000214 	.word	0x20000214
 8003fe4:	40012400 	.word	0x40012400
 8003fe8:	08000004 	.word	0x08000004
 8003fec:	0c000008 	.word	0x0c000008
 8003ff0:	b4002000 	.word	0xb4002000

08003ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <MX_I2C1_Init+0x74>)
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <MX_I2C1_Init+0x78>)
 8003ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004000:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <MX_I2C1_Init+0x7c>)
 8004002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004004:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800400a:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <MX_I2C1_Init+0x74>)
 800400c:	2201      	movs	r2, #1
 800400e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004010:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800401c:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <MX_I2C1_Init+0x74>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004024:	2200      	movs	r2, #0
 8004026:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <MX_I2C1_Init+0x74>)
 800402a:	2200      	movs	r2, #0
 800402c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004030:	0018      	movs	r0, r3
 8004032:	f002 f911 	bl	8006258 <HAL_I2C_Init>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d001      	beq.n	800403e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800403a:	f000 fa3d 	bl	80044b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004040:	2100      	movs	r1, #0
 8004042:	0018      	movs	r0, r3
 8004044:	f003 feb4 	bl	8007db0 <HAL_I2CEx_ConfigAnalogFilter>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800404c:	f000 fa34 	bl	80044b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <MX_I2C1_Init+0x74>)
 8004052:	2100      	movs	r1, #0
 8004054:	0018      	movs	r0, r3
 8004056:	f003 fef7 	bl	8007e48 <HAL_I2CEx_ConfigDigitalFilter>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d001      	beq.n	8004062 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800405e:	f000 fa2b 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200002d4 	.word	0x200002d4
 800406c:	40005400 	.word	0x40005400
 8004070:	0060112f 	.word	0x0060112f

08004074 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004078:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <MX_I2C2_Init+0x74>)
 800407a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ec <MX_I2C2_Init+0x78>)
 800407c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0060112F;
 800407e:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <MX_I2C2_Init+0x74>)
 8004080:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <MX_I2C2_Init+0x7c>)
 8004082:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 78;
 8004084:	4b18      	ldr	r3, [pc, #96]	@ (80040e8 <MX_I2C2_Init+0x74>)
 8004086:	224e      	movs	r2, #78	@ 0x4e
 8004088:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800408a:	4b17      	ldr	r3, [pc, #92]	@ (80040e8 <MX_I2C2_Init+0x74>)
 800408c:	2201      	movs	r2, #1
 800408e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004090:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <MX_I2C2_Init+0x74>)
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004096:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <MX_I2C2_Init+0x74>)
 8004098:	2200      	movs	r2, #0
 800409a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800409c:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <MX_I2C2_Init+0x74>)
 800409e:	2200      	movs	r2, #0
 80040a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <MX_I2C2_Init+0x74>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040a8:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <MX_I2C2_Init+0x74>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040ae:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <MX_I2C2_Init+0x74>)
 80040b0:	0018      	movs	r0, r3
 80040b2:	f002 f8d1 	bl	8006258 <HAL_I2C_Init>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d001      	beq.n	80040be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80040ba:	f000 f9fd 	bl	80044b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <MX_I2C2_Init+0x74>)
 80040c0:	2100      	movs	r1, #0
 80040c2:	0018      	movs	r0, r3
 80040c4:	f003 fe74 	bl	8007db0 <HAL_I2CEx_ConfigAnalogFilter>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d001      	beq.n	80040d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80040cc:	f000 f9f4 	bl	80044b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <MX_I2C2_Init+0x74>)
 80040d2:	2100      	movs	r1, #0
 80040d4:	0018      	movs	r0, r3
 80040d6:	f003 feb7 	bl	8007e48 <HAL_I2CEx_ConfigDigitalFilter>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80040de:	f000 f9eb 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000328 	.word	0x20000328
 80040ec:	40005800 	.word	0x40005800
 80040f0:	0060112f 	.word	0x0060112f

080040f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040f8:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <MX_SPI2_Init+0x78>)
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <MX_SPI2_Init+0x7c>)
 80040fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040fe:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <MX_SPI2_Init+0x78>)
 8004100:	2282      	movs	r2, #130	@ 0x82
 8004102:	0052      	lsls	r2, r2, #1
 8004104:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <MX_SPI2_Init+0x78>)
 8004108:	2280      	movs	r2, #128	@ 0x80
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <MX_SPI2_Init+0x78>)
 8004110:	22e0      	movs	r2, #224	@ 0xe0
 8004112:	00d2      	lsls	r2, r2, #3
 8004114:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <MX_SPI2_Init+0x78>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800411c:	4b13      	ldr	r3, [pc, #76]	@ (800416c <MX_SPI2_Init+0x78>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <MX_SPI2_Init+0x78>)
 8004124:	2280      	movs	r2, #128	@ 0x80
 8004126:	0092      	lsls	r2, r2, #2
 8004128:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <MX_SPI2_Init+0x78>)
 800412c:	2200      	movs	r2, #0
 800412e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004130:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <MX_SPI2_Init+0x78>)
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <MX_SPI2_Init+0x78>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <MX_SPI2_Init+0x78>)
 800413e:	2200      	movs	r2, #0
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <MX_SPI2_Init+0x78>)
 8004144:	2207      	movs	r2, #7
 8004146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <MX_SPI2_Init+0x78>)
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <MX_SPI2_Init+0x78>)
 8004150:	2208      	movs	r2, #8
 8004152:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <MX_SPI2_Init+0x78>)
 8004156:	0018      	movs	r0, r3
 8004158:	f004 fcfc 	bl	8008b54 <HAL_SPI_Init>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d001      	beq.n	8004164 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004160:	f000 f9aa 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	2000037c 	.word	0x2000037c
 8004170:	40003800 	.word	0x40003800

08004174 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004178:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <MX_TIM16_Init+0x44>)
 800417a:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <MX_TIM16_Init+0x48>)
 800417c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <MX_TIM16_Init+0x44>)
 8004180:	2220      	movs	r2, #32
 8004182:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <MX_TIM16_Init+0x44>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <MX_TIM16_Init+0x44>)
 800418c:	2264      	movs	r2, #100	@ 0x64
 800418e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004190:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <MX_TIM16_Init+0x44>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <MX_TIM16_Init+0x44>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <MX_TIM16_Init+0x44>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <MX_TIM16_Init+0x44>)
 80041a4:	0018      	movs	r0, r3
 80041a6:	f004 fd8d 	bl	8008cc4 <HAL_TIM_Base_Init>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80041ae:	f000 f983 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200003e0 	.word	0x200003e0
 80041bc:	40014400 	.word	0x40014400

080041c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80041c4:	4b16      	ldr	r3, [pc, #88]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041c6:	4a17      	ldr	r2, [pc, #92]	@ (8004224 <MX_USART3_UART_Init+0x64>)
 80041c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80041ca:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041cc:	22e1      	movs	r2, #225	@ 0xe1
 80041ce:	0252      	lsls	r2, r2, #9
 80041d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041d2:	4b13      	ldr	r3, [pc, #76]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041e6:	220c      	movs	r2, #12
 80041e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004202:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 8004204:	2200      	movs	r2, #0
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <MX_USART3_UART_Init+0x60>)
 800420a:	0018      	movs	r0, r3
 800420c:	f004 ffcc 	bl	80091a8 <HAL_UART_Init>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004214:	f000 f950 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	2000042c 	.word	0x2000042c
 8004224:	40004800 	.word	0x40004800

08004228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800422e:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <MX_DMA_Init+0x38>)
 8004230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <MX_DMA_Init+0x38>)
 8004234:	2101      	movs	r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <MX_DMA_Init+0x38>)
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	2201      	movs	r2, #1
 8004240:	4013      	ands	r3, r2
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	2009      	movs	r0, #9
 800424c:	f001 fbfe 	bl	8005a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004250:	2009      	movs	r0, #9
 8004252:	f001 fc10 	bl	8005a76 <HAL_NVIC_EnableIRQ>

}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	40021000 	.word	0x40021000

08004264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b08b      	sub	sp, #44	@ 0x2c
 8004268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426a:	2414      	movs	r4, #20
 800426c:	193b      	adds	r3, r7, r4
 800426e:	0018      	movs	r0, r3
 8004270:	2314      	movs	r3, #20
 8004272:	001a      	movs	r2, r3
 8004274:	2100      	movs	r1, #0
 8004276:	f006 f935 	bl	800a4e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800427a:	4b8a      	ldr	r3, [pc, #552]	@ (80044a4 <MX_GPIO_Init+0x240>)
 800427c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427e:	4b89      	ldr	r3, [pc, #548]	@ (80044a4 <MX_GPIO_Init+0x240>)
 8004280:	2104      	movs	r1, #4
 8004282:	430a      	orrs	r2, r1
 8004284:	635a      	str	r2, [r3, #52]	@ 0x34
 8004286:	4b87      	ldr	r3, [pc, #540]	@ (80044a4 <MX_GPIO_Init+0x240>)
 8004288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428a:	2204      	movs	r2, #4
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004292:	4b84      	ldr	r3, [pc, #528]	@ (80044a4 <MX_GPIO_Init+0x240>)
 8004294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004296:	4b83      	ldr	r3, [pc, #524]	@ (80044a4 <MX_GPIO_Init+0x240>)
 8004298:	2120      	movs	r1, #32
 800429a:	430a      	orrs	r2, r1
 800429c:	635a      	str	r2, [r3, #52]	@ 0x34
 800429e:	4b81      	ldr	r3, [pc, #516]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a2:	2220      	movs	r2, #32
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042aa:	4b7e      	ldr	r3, [pc, #504]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ae:	4b7d      	ldr	r3, [pc, #500]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042b0:	2101      	movs	r1, #1
 80042b2:	430a      	orrs	r2, r1
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042b6:	4b7b      	ldr	r3, [pc, #492]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	2201      	movs	r2, #1
 80042bc:	4013      	ands	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c2:	4b78      	ldr	r3, [pc, #480]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c6:	4b77      	ldr	r3, [pc, #476]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042c8:	2102      	movs	r1, #2
 80042ca:	430a      	orrs	r2, r1
 80042cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80042ce:	4b75      	ldr	r3, [pc, #468]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	2202      	movs	r2, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042de:	4b71      	ldr	r3, [pc, #452]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042e0:	2108      	movs	r1, #8
 80042e2:	430a      	orrs	r2, r1
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042e6:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <MX_GPIO_Init+0x240>)
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	2208      	movs	r2, #8
 80042ec:	4013      	ands	r3, r2
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80042f2:	23e0      	movs	r3, #224	@ 0xe0
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	486c      	ldr	r0, [pc, #432]	@ (80044a8 <MX_GPIO_Init+0x244>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	0019      	movs	r1, r3
 80042fc:	f001 ff5b 	bl	80061b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8004300:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <MX_GPIO_Init+0x248>)
 8004302:	2200      	movs	r2, #0
 8004304:	2103      	movs	r1, #3
 8004306:	0018      	movs	r0, r3
 8004308:	f001 ff55 	bl	80061b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 800430c:	23e0      	movs	r3, #224	@ 0xe0
 800430e:	0059      	lsls	r1, r3, #1
 8004310:	23a0      	movs	r3, #160	@ 0xa0
 8004312:	05db      	lsls	r3, r3, #23
 8004314:	2200      	movs	r2, #0
 8004316:	0018      	movs	r0, r3
 8004318:	f001 ff4d 	bl	80061b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 800431c:	23f0      	movs	r3, #240	@ 0xf0
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4863      	ldr	r0, [pc, #396]	@ (80044b0 <MX_GPIO_Init+0x24c>)
 8004322:	2200      	movs	r2, #0
 8004324:	0019      	movs	r1, r3
 8004326:	f001 ff46 	bl	80061b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800432a:	4b62      	ldr	r3, [pc, #392]	@ (80044b4 <MX_GPIO_Init+0x250>)
 800432c:	2200      	movs	r2, #0
 800432e:	2108      	movs	r1, #8
 8004330:	0018      	movs	r0, r3
 8004332:	f001 ff40 	bl	80061b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8004336:	193b      	adds	r3, r7, r4
 8004338:	22e0      	movs	r2, #224	@ 0xe0
 800433a:	0212      	lsls	r2, r2, #8
 800433c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433e:	193b      	adds	r3, r7, r4
 8004340:	2201      	movs	r2, #1
 8004342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	193b      	adds	r3, r7, r4
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434a:	193b      	adds	r3, r7, r4
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004350:	193b      	adds	r3, r7, r4
 8004352:	4a55      	ldr	r2, [pc, #340]	@ (80044a8 <MX_GPIO_Init+0x244>)
 8004354:	0019      	movs	r1, r3
 8004356:	0010      	movs	r0, r2
 8004358:	f001 fdac 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 800435c:	193b      	adds	r3, r7, r4
 800435e:	2203      	movs	r2, #3
 8004360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004362:	193b      	adds	r3, r7, r4
 8004364:	2201      	movs	r2, #1
 8004366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	193b      	adds	r3, r7, r4
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	193b      	adds	r3, r7, r4
 8004370:	2200      	movs	r2, #0
 8004372:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004374:	193b      	adds	r3, r7, r4
 8004376:	4a4d      	ldr	r2, [pc, #308]	@ (80044ac <MX_GPIO_Init+0x248>)
 8004378:	0019      	movs	r1, r3
 800437a:	0010      	movs	r0, r2
 800437c:	f001 fd9a 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8004380:	193b      	adds	r3, r7, r4
 8004382:	2210      	movs	r2, #16
 8004384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004386:	193b      	adds	r3, r7, r4
 8004388:	2284      	movs	r2, #132	@ 0x84
 800438a:	0392      	lsls	r2, r2, #14
 800438c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800438e:	193b      	adds	r3, r7, r4
 8004390:	2201      	movs	r2, #1
 8004392:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8004394:	193a      	adds	r2, r7, r4
 8004396:	23a0      	movs	r3, #160	@ 0xa0
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	0011      	movs	r1, r2
 800439c:	0018      	movs	r0, r3
 800439e:	f001 fd89 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 80043a2:	0021      	movs	r1, r4
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	22e0      	movs	r2, #224	@ 0xe0
 80043a8:	0052      	lsls	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ac:	000c      	movs	r4, r1
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	2201      	movs	r2, #1
 80043b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ba:	193b      	adds	r3, r7, r4
 80043bc:	2200      	movs	r2, #0
 80043be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	193a      	adds	r2, r7, r4
 80043c2:	23a0      	movs	r3, #160	@ 0xa0
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	0011      	movs	r1, r2
 80043c8:	0018      	movs	r0, r3
 80043ca:	f001 fd73 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC2_Pin CS_TC3_Pin CS_TC4_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin;
 80043ce:	0021      	movs	r1, r4
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	22f0      	movs	r2, #240	@ 0xf0
 80043d4:	0212      	lsls	r2, r2, #8
 80043d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d8:	000c      	movs	r4, r1
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2201      	movs	r2, #1
 80043de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	2200      	movs	r2, #0
 80043ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	193b      	adds	r3, r7, r4
 80043ee:	4a30      	ldr	r2, [pc, #192]	@ (80044b0 <MX_GPIO_Init+0x24c>)
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f001 fd5e 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 80043f8:	0021      	movs	r1, r4
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	2240      	movs	r2, #64	@ 0x40
 80043fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004400:	187b      	adds	r3, r7, r1
 8004402:	2284      	movs	r2, #132	@ 0x84
 8004404:	0392      	lsls	r2, r2, #14
 8004406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	000c      	movs	r4, r1
 800440a:	193b      	adds	r3, r7, r4
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8004410:	193b      	adds	r3, r7, r4
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <MX_GPIO_Init+0x244>)
 8004414:	0019      	movs	r1, r3
 8004416:	0010      	movs	r0, r2
 8004418:	f001 fd4c 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800441c:	193b      	adds	r3, r7, r4
 800441e:	2208      	movs	r2, #8
 8004420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004422:	193b      	adds	r3, r7, r4
 8004424:	2201      	movs	r2, #1
 8004426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	193b      	adds	r3, r7, r4
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	193b      	adds	r3, r7, r4
 8004430:	2200      	movs	r2, #0
 8004432:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004434:	193b      	adds	r3, r7, r4
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <MX_GPIO_Init+0x250>)
 8004438:	0019      	movs	r1, r3
 800443a:	0010      	movs	r0, r2
 800443c:	f001 fd3a 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004440:	193b      	adds	r3, r7, r4
 8004442:	2208      	movs	r2, #8
 8004444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	193b      	adds	r3, r7, r4
 8004448:	2202      	movs	r2, #2
 800444a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	193b      	adds	r3, r7, r4
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	193b      	adds	r3, r7, r4
 8004454:	2200      	movs	r2, #0
 8004456:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004458:	193b      	adds	r3, r7, r4
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445e:	193b      	adds	r3, r7, r4
 8004460:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <MX_GPIO_Init+0x24c>)
 8004462:	0019      	movs	r1, r3
 8004464:	0010      	movs	r0, r2
 8004466:	f001 fd25 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 800446a:	0021      	movs	r1, r4
 800446c:	187b      	adds	r3, r7, r1
 800446e:	22e0      	movs	r2, #224	@ 0xe0
 8004470:	0092      	lsls	r2, r2, #2
 8004472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	187b      	adds	r3, r7, r1
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004480:	187b      	adds	r3, r7, r1
 8004482:	4a0b      	ldr	r2, [pc, #44]	@ (80044b0 <MX_GPIO_Init+0x24c>)
 8004484:	0019      	movs	r1, r3
 8004486:	0010      	movs	r0, r2
 8004488:	f001 fd14 	bl	8005eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2100      	movs	r1, #0
 8004490:	2007      	movs	r0, #7
 8004492:	f001 fadb 	bl	8005a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004496:	2007      	movs	r0, #7
 8004498:	f001 faed 	bl	8005a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800449c:	46c0      	nop			@ (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b00b      	add	sp, #44	@ 0x2c
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	50000800 	.word	0x50000800
 80044ac:	50001400 	.word	0x50001400
 80044b0:	50000400 	.word	0x50000400
 80044b4:	50000c00 	.word	0x50000c00

080044b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044bc:	b672      	cpsid	i
}
 80044be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	e7fd      	b.n	80044c0 <Error_Handler+0x8>

080044c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <HAL_MspInit+0x44>)
 80044cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <HAL_MspInit+0x44>)
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <HAL_MspInit+0x44>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2201      	movs	r2, #1
 80044dc:	4013      	ands	r3, r2
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_MspInit+0x44>)
 80044e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_MspInit+0x44>)
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	0549      	lsls	r1, r1, #21
 80044ec:	430a      	orrs	r2, r1
 80044ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_MspInit+0x44>)
 80044f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	055b      	lsls	r3, r3, #21
 80044f8:	4013      	ands	r3, r2
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b091      	sub	sp, #68	@ 0x44
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004514:	232c      	movs	r3, #44	@ 0x2c
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	0018      	movs	r0, r3
 800451a:	2314      	movs	r3, #20
 800451c:	001a      	movs	r2, r3
 800451e:	2100      	movs	r1, #0
 8004520:	f005 ffe0 	bl	800a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004524:	2410      	movs	r4, #16
 8004526:	193b      	adds	r3, r7, r4
 8004528:	0018      	movs	r0, r3
 800452a:	231c      	movs	r3, #28
 800452c:	001a      	movs	r2, r3
 800452e:	2100      	movs	r1, #0
 8004530:	f005 ffd8 	bl	800a4e4 <memset>
  if(hadc->Instance==ADC1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3a      	ldr	r2, [pc, #232]	@ (8004624 <HAL_ADC_MspInit+0x118>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d16d      	bne.n	800461a <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800453e:	193b      	adds	r3, r7, r4
 8004540:	2280      	movs	r2, #128	@ 0x80
 8004542:	01d2      	lsls	r2, r2, #7
 8004544:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8004546:	193b      	adds	r3, r7, r4
 8004548:	2280      	movs	r2, #128	@ 0x80
 800454a:	05d2      	lsls	r2, r2, #23
 800454c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800454e:	193b      	adds	r3, r7, r4
 8004550:	0018      	movs	r0, r3
 8004552:	f004 f9cb 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d001      	beq.n	800455e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800455a:	f7ff ffad 	bl	80044b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800455e:	4b32      	ldr	r3, [pc, #200]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 8004560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004562:	4b31      	ldr	r3, [pc, #196]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 8004564:	2180      	movs	r1, #128	@ 0x80
 8004566:	0349      	lsls	r1, r1, #13
 8004568:	430a      	orrs	r2, r1
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
 800456c:	4b2e      	ldr	r3, [pc, #184]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 800456e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	035b      	lsls	r3, r3, #13
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	4b2b      	ldr	r3, [pc, #172]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 800457c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800457e:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	635a      	str	r2, [r3, #52]	@ 0x34
 8004586:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <HAL_ADC_MspInit+0x11c>)
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004592:	212c      	movs	r1, #44	@ 0x2c
 8004594:	187b      	adds	r3, r7, r1
 8004596:	220c      	movs	r2, #12
 8004598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800459a:	187b      	adds	r3, r7, r1
 800459c:	2203      	movs	r2, #3
 800459e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a6:	187a      	adds	r2, r7, r1
 80045a8:	23a0      	movs	r3, #160	@ 0xa0
 80045aa:	05db      	lsls	r3, r3, #23
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f001 fc80 	bl	8005eb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80045b4:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <HAL_ADC_MspInit+0x124>)
 80045b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80045ba:	4b1c      	ldr	r3, [pc, #112]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045bc:	2205      	movs	r2, #5
 80045be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045c0:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c6:	4b19      	ldr	r3, [pc, #100]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045cc:	4b17      	ldr	r3, [pc, #92]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045ce:	2280      	movs	r2, #128	@ 0x80
 80045d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045d4:	2280      	movs	r2, #128	@ 0x80
 80045d6:	0052      	lsls	r2, r2, #1
 80045d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045da:	4b14      	ldr	r3, [pc, #80]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045dc:	2280      	movs	r2, #128	@ 0x80
 80045de:	00d2      	lsls	r2, r2, #3
 80045e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045e4:	2220      	movs	r2, #32
 80045e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80045e8:	4b10      	ldr	r3, [pc, #64]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <HAL_ADC_MspInit+0x120>)
 80045f0:	0018      	movs	r0, r3
 80045f2:	f001 fa5d 	bl	8005ab0 <HAL_DMA_Init>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80045fa:	f7ff ff5d 	bl	80044b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <HAL_ADC_MspInit+0x120>)
 8004602:	651a      	str	r2, [r3, #80]	@ 0x50
 8004604:	4b09      	ldr	r3, [pc, #36]	@ (800462c <HAL_ADC_MspInit+0x120>)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	200c      	movs	r0, #12
 8004610:	f001 fa1c 	bl	8005a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004614:	200c      	movs	r0, #12
 8004616:	f001 fa2e 	bl	8005a76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b011      	add	sp, #68	@ 0x44
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	40012400 	.word	0x40012400
 8004628:	40021000 	.word	0x40021000
 800462c:	20000278 	.word	0x20000278
 8004630:	40020008 	.word	0x40020008

08004634 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b093      	sub	sp, #76	@ 0x4c
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	2334      	movs	r3, #52	@ 0x34
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	0018      	movs	r0, r3
 8004642:	2314      	movs	r3, #20
 8004644:	001a      	movs	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f005 ff4c 	bl	800a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800464c:	2418      	movs	r4, #24
 800464e:	193b      	adds	r3, r7, r4
 8004650:	0018      	movs	r0, r3
 8004652:	231c      	movs	r3, #28
 8004654:	001a      	movs	r2, r3
 8004656:	2100      	movs	r1, #0
 8004658:	f005 ff44 	bl	800a4e4 <memset>
  if(hi2c->Instance==I2C1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_I2C_MspInit+0x138>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d140      	bne.n	80046e8 <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004666:	193b      	adds	r3, r7, r4
 8004668:	2220      	movs	r2, #32
 800466a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800466c:	193b      	adds	r3, r7, r4
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004672:	193b      	adds	r3, r7, r4
 8004674:	0018      	movs	r0, r3
 8004676:	f004 f939 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800467e:	f7ff ff1b 	bl	80044b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 8004684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004686:	4b3a      	ldr	r3, [pc, #232]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34
 800468e:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800469a:	2134      	movs	r1, #52	@ 0x34
 800469c:	187b      	adds	r3, r7, r1
 800469e:	22c0      	movs	r2, #192	@ 0xc0
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2212      	movs	r2, #18
 80046a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2206      	movs	r2, #6
 80046ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046bc:	187a      	adds	r2, r7, r1
 80046be:	23a0      	movs	r3, #160	@ 0xa0
 80046c0:	05db      	lsls	r3, r3, #23
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f001 fbf5 	bl	8005eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046ca:	4b29      	ldr	r3, [pc, #164]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 80046cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ce:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 80046d0:	2180      	movs	r1, #128	@ 0x80
 80046d2:	0389      	lsls	r1, r1, #14
 80046d4:	430a      	orrs	r2, r1
 80046d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046d8:	4b25      	ldr	r3, [pc, #148]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 80046da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046dc:	2380      	movs	r3, #128	@ 0x80
 80046de:	039b      	lsls	r3, r3, #14
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046e6:	e03d      	b.n	8004764 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <HAL_I2C_MspInit+0x140>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d138      	bne.n	8004764 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 80046f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 80046f8:	2102      	movs	r1, #2
 80046fa:	430a      	orrs	r2, r1
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80046fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	2202      	movs	r2, #2
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800470a:	2134      	movs	r1, #52	@ 0x34
 800470c:	187b      	adds	r3, r7, r1
 800470e:	22c0      	movs	r2, #192	@ 0xc0
 8004710:	0112      	lsls	r2, r2, #4
 8004712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004714:	187b      	adds	r3, r7, r1
 8004716:	2212      	movs	r2, #18
 8004718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800471a:	187b      	adds	r3, r7, r1
 800471c:	2201      	movs	r2, #1
 800471e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	187b      	adds	r3, r7, r1
 8004722:	2200      	movs	r2, #0
 8004724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004726:	187b      	adds	r3, r7, r1
 8004728:	2206      	movs	r2, #6
 800472a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472c:	187b      	adds	r3, r7, r1
 800472e:	4a12      	ldr	r2, [pc, #72]	@ (8004778 <HAL_I2C_MspInit+0x144>)
 8004730:	0019      	movs	r1, r3
 8004732:	0010      	movs	r0, r2
 8004734:	f001 fbbe 	bl	8005eb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004738:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 800473a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 800473e:	2180      	movs	r1, #128	@ 0x80
 8004740:	03c9      	lsls	r1, r1, #15
 8004742:	430a      	orrs	r2, r1
 8004744:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_I2C_MspInit+0x13c>)
 8004748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	03db      	lsls	r3, r3, #15
 800474e:	4013      	ands	r3, r2
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8004754:	2200      	movs	r2, #0
 8004756:	2100      	movs	r1, #0
 8004758:	2018      	movs	r0, #24
 800475a:	f001 f977 	bl	8005a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800475e:	2018      	movs	r0, #24
 8004760:	f001 f989 	bl	8005a76 <HAL_NVIC_EnableIRQ>
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b013      	add	sp, #76	@ 0x4c
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	40005400 	.word	0x40005400
 8004770:	40021000 	.word	0x40021000
 8004774:	40005800 	.word	0x40005800
 8004778:	50000400 	.word	0x50000400

0800477c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b08b      	sub	sp, #44	@ 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	2414      	movs	r4, #20
 8004786:	193b      	adds	r3, r7, r4
 8004788:	0018      	movs	r0, r3
 800478a:	2314      	movs	r3, #20
 800478c:	001a      	movs	r2, r3
 800478e:	2100      	movs	r1, #0
 8004790:	f005 fea8 	bl	800a4e4 <memset>
  if(hspi->Instance==SPI2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2c      	ldr	r2, [pc, #176]	@ (800484c <HAL_SPI_MspInit+0xd0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d151      	bne.n	8004842 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800479e:	4b2c      	ldr	r3, [pc, #176]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047a4:	2180      	movs	r1, #128	@ 0x80
 80047a6:	01c9      	lsls	r1, r1, #7
 80047a8:	430a      	orrs	r2, r1
 80047aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047ac:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b0:	2380      	movs	r3, #128	@ 0x80
 80047b2:	01db      	lsls	r3, r3, #7
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ba:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047c0:	2101      	movs	r1, #1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047c6:	4b22      	ldr	r3, [pc, #136]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047d8:	2102      	movs	r1, #2
 80047da:	430a      	orrs	r2, r1
 80047dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80047de:	4b1c      	ldr	r3, [pc, #112]	@ (8004850 <HAL_SPI_MspInit+0xd4>)
 80047e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	193b      	adds	r3, r7, r4
 80047f2:	2202      	movs	r2, #2
 80047f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	193b      	adds	r3, r7, r4
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004802:	193b      	adds	r3, r7, r4
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004808:	193a      	adds	r2, r7, r4
 800480a:	23a0      	movs	r3, #160	@ 0xa0
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	0011      	movs	r1, r2
 8004810:	0018      	movs	r0, r3
 8004812:	f001 fb4f 	bl	8005eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004816:	0021      	movs	r1, r4
 8004818:	187b      	adds	r3, r7, r1
 800481a:	2204      	movs	r2, #4
 800481c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481e:	187b      	adds	r3, r7, r1
 8004820:	2202      	movs	r2, #2
 8004822:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	187b      	adds	r3, r7, r1
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	187b      	adds	r3, r7, r1
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004830:	187b      	adds	r3, r7, r1
 8004832:	2201      	movs	r2, #1
 8004834:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004836:	187b      	adds	r3, r7, r1
 8004838:	4a06      	ldr	r2, [pc, #24]	@ (8004854 <HAL_SPI_MspInit+0xd8>)
 800483a:	0019      	movs	r1, r3
 800483c:	0010      	movs	r0, r2
 800483e:	f001 fb39 	bl	8005eb4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b00b      	add	sp, #44	@ 0x2c
 8004848:	bd90      	pop	{r4, r7, pc}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	40003800 	.word	0x40003800
 8004850:	40021000 	.word	0x40021000
 8004854:	50000400 	.word	0x50000400

08004858 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0e      	ldr	r2, [pc, #56]	@ (80048a0 <HAL_TIM_Base_MspInit+0x48>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d115      	bne.n	8004896 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800486a:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <HAL_TIM_Base_MspInit+0x4c>)
 800486c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <HAL_TIM_Base_MspInit+0x4c>)
 8004870:	2180      	movs	r1, #128	@ 0x80
 8004872:	0289      	lsls	r1, r1, #10
 8004874:	430a      	orrs	r2, r1
 8004876:	641a      	str	r2, [r3, #64]	@ 0x40
 8004878:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <HAL_TIM_Base_MspInit+0x4c>)
 800487a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	2015      	movs	r0, #21
 800488c:	f001 f8de 	bl	8005a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004890:	2015      	movs	r0, #21
 8004892:	f001 f8f0 	bl	8005a76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	46bd      	mov	sp, r7
 800489a:	b004      	add	sp, #16
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b08b      	sub	sp, #44	@ 0x2c
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b0:	2414      	movs	r4, #20
 80048b2:	193b      	adds	r3, r7, r4
 80048b4:	0018      	movs	r0, r3
 80048b6:	2314      	movs	r3, #20
 80048b8:	001a      	movs	r2, r3
 80048ba:	2100      	movs	r1, #0
 80048bc:	f005 fe12 	bl	800a4e4 <memset>
  if(huart->Instance==USART3)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <HAL_UART_MspInit+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d151      	bne.n	800496e <HAL_UART_MspInit+0xc6>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80048ca:	4b2c      	ldr	r3, [pc, #176]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ce:	4b2b      	ldr	r3, [pc, #172]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	02c9      	lsls	r1, r1, #11
 80048d4:	430a      	orrs	r2, r1
 80048d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048d8:	4b28      	ldr	r3, [pc, #160]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	02db      	lsls	r3, r3, #11
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	4b25      	ldr	r3, [pc, #148]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ea:	4b24      	ldr	r3, [pc, #144]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048ec:	2101      	movs	r1, #1
 80048ee:	430a      	orrs	r2, r1
 80048f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80048f2:	4b22      	ldr	r3, [pc, #136]	@ (800497c <HAL_UART_MspInit+0xd4>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	2201      	movs	r2, #1
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fe:	4b1f      	ldr	r3, [pc, #124]	@ (800497c <HAL_UART_MspInit+0xd4>)
 8004900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004902:	4b1e      	ldr	r3, [pc, #120]	@ (800497c <HAL_UART_MspInit+0xd4>)
 8004904:	2102      	movs	r1, #2
 8004906:	430a      	orrs	r2, r1
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34
 800490a:	4b1c      	ldr	r3, [pc, #112]	@ (800497c <HAL_UART_MspInit+0xd4>)
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	2202      	movs	r2, #2
 8004910:	4013      	ands	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8004916:	193b      	adds	r3, r7, r4
 8004918:	2220      	movs	r2, #32
 800491a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491c:	193b      	adds	r3, r7, r4
 800491e:	2202      	movs	r2, #2
 8004920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	193b      	adds	r3, r7, r4
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	193b      	adds	r3, r7, r4
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800492e:	193b      	adds	r3, r7, r4
 8004930:	2204      	movs	r2, #4
 8004932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8004934:	193a      	adds	r2, r7, r4
 8004936:	23a0      	movs	r3, #160	@ 0xa0
 8004938:	05db      	lsls	r3, r3, #23
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f001 fab9 	bl	8005eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8004942:	0021      	movs	r1, r4
 8004944:	187b      	adds	r3, r7, r1
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2202      	movs	r2, #2
 800494e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	187b      	adds	r3, r7, r1
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004956:	187b      	adds	r3, r7, r1
 8004958:	2200      	movs	r2, #0
 800495a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	2204      	movs	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8004962:	187b      	adds	r3, r7, r1
 8004964:	4a06      	ldr	r2, [pc, #24]	@ (8004980 <HAL_UART_MspInit+0xd8>)
 8004966:	0019      	movs	r1, r3
 8004968:	0010      	movs	r0, r2
 800496a:	f001 faa3 	bl	8005eb4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b00b      	add	sp, #44	@ 0x2c
 8004974:	bd90      	pop	{r4, r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	40004800 	.word	0x40004800
 800497c:	40021000 	.word	0x40021000
 8004980:	50000400 	.word	0x50000400

08004984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	e7fd      	b.n	8004988 <NMI_Handler+0x4>

0800498c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	e7fd      	b.n	8004990 <HardFault_Handler+0x4>

08004994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ac:	f000 f9a2 	bl	8004cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 80049ba:	2010      	movs	r0, #16
 80049bc:	f001 fc18 	bl	80061f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 80049c0:	2040      	movs	r0, #64	@ 0x40
 80049c2:	f001 fc15 	bl	80061f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <DMA1_Channel1_IRQHandler+0x14>)
 80049d2:	0018      	movs	r0, r3
 80049d4:	f001 f960 	bl	8005c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	20000278 	.word	0x20000278

080049e4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <ADC1_IRQHandler+0x14>)
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 fc62 	bl	80052b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	20000214 	.word	0x20000214

080049fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <TIM16_IRQHandler+0x14>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f004 fa0c 	bl	8008e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004a08:	46c0      	nop			@ (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	200003e0 	.word	0x200003e0

08004a14 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <I2C2_IRQHandler+0x2c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	23e0      	movs	r3, #224	@ 0xe0
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4013      	ands	r3, r2
 8004a24:	d004      	beq.n	8004a30 <I2C2_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <I2C2_IRQHandler+0x2c>)
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f002 f83b 	bl	8006aa4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8004a2e:	e003      	b.n	8004a38 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8004a30:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <I2C2_IRQHandler+0x2c>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f002 f81c 	bl	8006a70 <HAL_I2C_EV_IRQHandler>
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	20000328 	.word	0x20000328

08004a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  return 1;
 8004a48:	2301      	movs	r3, #1
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_kill>:

int _kill(int pid, int sig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a5a:	f005 fdb3 	bl	800a5c4 <__errno>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	2216      	movs	r2, #22
 8004a62:	601a      	str	r2, [r3, #0]
  return -1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	425b      	negs	r3, r3
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_exit>:

void _exit (int status)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a78:	2301      	movs	r3, #1
 8004a7a:	425a      	negs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7ff ffe5 	bl	8004a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	e7fd      	b.n	8004a86 <_exit+0x16>

08004a8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e00a      	b.n	8004ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a9c:	e000      	b.n	8004aa0 <_read+0x16>
 8004a9e:	bf00      	nop
 8004aa0:	0001      	movs	r1, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	60ba      	str	r2, [r7, #8]
 8004aa8:	b2ca      	uxtb	r2, r1
 8004aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	dbf0      	blt.n	8004a9c <_read+0x12>
  }

  return len;
 8004aba:	687b      	ldr	r3, [r7, #4]
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b006      	add	sp, #24
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e009      	b.n	8004aea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	60ba      	str	r2, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	e000      	b.n	8004ae4 <_write+0x20>
 8004ae2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	dbf1      	blt.n	8004ad6 <_write+0x12>
  }
  return len;
 8004af2:	687b      	ldr	r3, [r7, #4]
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}

08004afc <_close>:

int _close(int file)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b04:	2301      	movs	r3, #1
 8004b06:	425b      	negs	r3, r3
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2280      	movs	r2, #128	@ 0x80
 8004b1e:	0192      	lsls	r2, r2, #6
 8004b20:	605a      	str	r2, [r3, #4]
  return 0;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_isatty>:

int _isatty(int file)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b34:	2301      	movs	r3, #1
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b004      	add	sp, #16
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b5c:	4a14      	ldr	r2, [pc, #80]	@ (8004bb0 <_sbrk+0x5c>)
 8004b5e:	4b15      	ldr	r3, [pc, #84]	@ (8004bb4 <_sbrk+0x60>)
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <_sbrk+0x64>)
 8004b72:	4a12      	ldr	r2, [pc, #72]	@ (8004bbc <_sbrk+0x68>)
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <_sbrk+0x64>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d207      	bcs.n	8004b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b84:	f005 fd1e 	bl	800a5c4 <__errno>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	425b      	negs	r3, r3
 8004b92:	e009      	b.n	8004ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b94:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <_sbrk+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	18d2      	adds	r2, r2, r3
 8004ba2:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <_sbrk+0x64>)
 8004ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b006      	add	sp, #24
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20009000 	.word	0x20009000
 8004bb4:	00000400 	.word	0x00000400
 8004bb8:	200005a8 	.word	0x200005a8
 8004bbc:	20000700 	.word	0x20000700

08004bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bcc:	480d      	ldr	r0, [pc, #52]	@ (8004c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bd0:	f7ff fff6 	bl	8004bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bd4:	480c      	ldr	r0, [pc, #48]	@ (8004c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bd6:	490d      	ldr	r1, [pc, #52]	@ (8004c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c10 <LoopForever+0xe>)
  movs r3, #0
 8004bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bdc:	e002      	b.n	8004be4 <LoopCopyDataInit>

08004bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004be2:	3304      	adds	r3, #4

08004be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004be8:	d3f9      	bcc.n	8004bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bec:	4c0a      	ldr	r4, [pc, #40]	@ (8004c18 <LoopForever+0x16>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bf0:	e001      	b.n	8004bf6 <LoopFillZerobss>

08004bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bf4:	3204      	adds	r2, #4

08004bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bf8:	d3fb      	bcc.n	8004bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bfa:	f005 fce9 	bl	800a5d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004bfe:	f7fe fe5d 	bl	80038bc <main>

08004c02 <LoopForever>:

LoopForever:
  b LoopForever
 8004c02:	e7fe      	b.n	8004c02 <LoopForever>
  ldr   r0, =_estack
 8004c04:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c0c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004c10:	0800c97c 	.word	0x0800c97c
  ldr r2, =_sbss
 8004c14:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004c18:	200006fc 	.word	0x200006fc

08004c1c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c1c:	e7fe      	b.n	8004c1c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08004c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c26:	1dfb      	adds	r3, r7, #7
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_Init+0x3c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <HAL_Init+0x3c>)
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	0049      	lsls	r1, r1, #1
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	f000 f810 	bl	8004c60 <HAL_InitTick>
 8004c40:	1e03      	subs	r3, r0, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e001      	b.n	8004c50 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004c4c:	f7ff fc3a 	bl	80044c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c50:	1dfb      	adds	r3, r7, #7
 8004c52:	781b      	ldrb	r3, [r3, #0]
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40022000 	.word	0x40022000

08004c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <HAL_InitTick+0x88>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02b      	beq.n	8004cd0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004c78:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <HAL_InitTick+0x8c>)
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <HAL_InitTick+0x88>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	0019      	movs	r1, r3
 8004c82:	23fa      	movs	r3, #250	@ 0xfa
 8004c84:	0098      	lsls	r0, r3, #2
 8004c86:	f7fb fa57 	bl	8000138 <__udivsi3>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	0020      	movs	r0, r4
 8004c90:	f7fb fa52 	bl	8000138 <__udivsi3>
 8004c94:	0003      	movs	r3, r0
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 fefd 	bl	8005a96 <HAL_SYSTICK_Config>
 8004c9c:	1e03      	subs	r3, r0, #0
 8004c9e:	d112      	bne.n	8004cc6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d80a      	bhi.n	8004cbc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	425b      	negs	r3, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 fecc 	bl	8005a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <HAL_InitTick+0x90>)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e00d      	b.n	8004cd8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004cbc:	230f      	movs	r3, #15
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e008      	b.n	8004cd8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cc6:	230f      	movs	r3, #15
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e003      	b.n	8004cd8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b005      	add	sp, #20
 8004ce4:	bd90      	pop	{r4, r7, pc}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	20000018 	.word	0x20000018
 8004cec:	20000010 	.word	0x20000010
 8004cf0:	20000014 	.word	0x20000014

08004cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <HAL_IncTick+0x1c>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_IncTick+0x20>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	18d2      	adds	r2, r2, r3
 8004d04:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <HAL_IncTick+0x20>)
 8004d06:	601a      	str	r2, [r3, #0]
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	20000018 	.word	0x20000018
 8004d14:	200005ac 	.word	0x200005ac

08004d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d1c:	4b02      	ldr	r3, [pc, #8]	@ (8004d28 <HAL_GetTick+0x10>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	200005ac 	.word	0x200005ac

08004d2c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a05      	ldr	r2, [pc, #20]	@ (8004d50 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			@ (mov r8, r8)
 8004d50:	fe3fffff 	.word	0xfe3fffff

08004d54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	23e0      	movs	r3, #224	@ 0xe0
 8004d62:	045b      	lsls	r3, r3, #17
 8004d64:	4013      	ands	r3, r2
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b002      	add	sp, #8
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	2104      	movs	r1, #4
 8004d82:	400a      	ands	r2, r1
 8004d84:	2107      	movs	r1, #7
 8004d86:	4091      	lsls	r1, r2
 8004d88:	000a      	movs	r2, r1
 8004d8a:	43d2      	mvns	r2, r2
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2104      	movs	r1, #4
 8004d92:	400b      	ands	r3, r1
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4099      	lsls	r1, r3
 8004d98:	000b      	movs	r3, r1
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b004      	add	sp, #16
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	2104      	movs	r1, #4
 8004dba:	400a      	ands	r2, r1
 8004dbc:	2107      	movs	r1, #7
 8004dbe:	4091      	lsls	r1, r2
 8004dc0:	000a      	movs	r2, r1
 8004dc2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004dca:	40da      	lsrs	r2, r3
 8004dcc:	0013      	movs	r3, r2
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	23c0      	movs	r3, #192	@ 0xc0
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	4013      	ands	r3, r2
 8004de8:	d101      	bne.n	8004dee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b002      	add	sp, #8
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	211f      	movs	r1, #31
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	210f      	movs	r1, #15
 8004e10:	4091      	lsls	r1, r2
 8004e12:	000a      	movs	r2, r1
 8004e14:	43d2      	mvns	r2, r2
 8004e16:	401a      	ands	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0e9b      	lsrs	r3, r3, #26
 8004e1c:	210f      	movs	r1, #15
 8004e1e:	4019      	ands	r1, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	201f      	movs	r0, #31
 8004e24:	4003      	ands	r3, r0
 8004e26:	4099      	lsls	r1, r3
 8004e28:	000b      	movs	r3, r1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e30:	46c0      	nop			@ (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b004      	add	sp, #16
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	035b      	lsls	r3, r3, #13
 8004e4a:	0b5b      	lsrs	r3, r3, #13
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b002      	add	sp, #8
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	0352      	lsls	r2, r2, #13
 8004e6c:	0b52      	lsrs	r2, r2, #13
 8004e6e:	43d2      	mvns	r2, r2
 8004e70:	401a      	ands	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	4013      	ands	r3, r2
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0212      	lsls	r2, r2, #8
 8004eac:	43d2      	mvns	r2, r2
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	4904      	ldr	r1, [pc, #16]	@ (8004ecc <LL_ADC_SetChannelSamplingTime+0x34>)
 8004eba:	400b      	ands	r3, r1
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	07ffff00 	.word	0x07ffff00

08004ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a05      	ldr	r2, [pc, #20]	@ (8004ef4 <LL_ADC_EnableInternalRegulator+0x24>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2280      	movs	r2, #128	@ 0x80
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	6fffffe8 	.word	0x6fffffe8

08004ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	055b      	lsls	r3, r3, #21
 8004f08:	401a      	ands	r2, r3
 8004f0a:	2380      	movs	r3, #128	@ 0x80
 8004f0c:	055b      	lsls	r3, r3, #21
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d101      	bne.n	8004f16 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <LL_ADC_IsEnabled+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <LL_ADC_IsEnabled+0x1a>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d101      	bne.n	8004f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f6c:	231f      	movs	r3, #31
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e17f      	b.n	800528a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff fab9 	bl	800450c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2254      	movs	r2, #84	@ 0x54
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff ffa3 	bl	8004ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d115      	bne.n	8004fe2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff ff88 	bl	8004ed0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fc0:	4bb4      	ldr	r3, [pc, #720]	@ (8005294 <HAL_ADC_Init+0x330>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	49b4      	ldr	r1, [pc, #720]	@ (8005298 <HAL_ADC_Init+0x334>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fb f8b6 	bl	8000138 <__udivsi3>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	3301      	adds	r3, #1
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004fd4:	e002      	b.n	8004fdc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f9      	bne.n	8004fd6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff ff86 	bl	8004ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005000:	2201      	movs	r2, #1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005008:	231f      	movs	r3, #31
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0018      	movs	r0, r3
 8005016:	f7ff ff94 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 800501a:	0003      	movs	r3, r0
 800501c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	2210      	movs	r2, #16
 8005024:	4013      	ands	r3, r2
 8005026:	d000      	beq.n	800502a <HAL_ADC_Init+0xc6>
 8005028:	e122      	b.n	8005270 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d000      	beq.n	8005032 <HAL_ADC_Init+0xce>
 8005030:	e11e      	b.n	8005270 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	4a99      	ldr	r2, [pc, #612]	@ (800529c <HAL_ADC_Init+0x338>)
 8005038:	4013      	ands	r3, r2
 800503a:	2202      	movs	r2, #2
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff ff6a 	bl	8004f20 <LL_ADC_IsEnabled>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d000      	beq.n	8005052 <HAL_ADC_Init+0xee>
 8005050:	e0ad      	b.n	80051ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7e1b      	ldrb	r3, [r3, #24]
 800505a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800505c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7e5b      	ldrb	r3, [r3, #25]
 8005062:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005064:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7e9b      	ldrb	r3, [r3, #26]
 800506a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800506c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_ADC_Init+0x118>
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	015b      	lsls	r3, r3, #5
 800507a:	e000      	b.n	800507e <HAL_ADC_Init+0x11a>
 800507c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800507e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005084:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da04      	bge.n	8005098 <HAL_ADC_Init+0x134>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	e001      	b.n	800509c <HAL_ADC_Init+0x138>
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800509c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	212c      	movs	r1, #44	@ 0x2c
 80050a2:	5c5b      	ldrb	r3, [r3, r1]
 80050a4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80050a6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	5c9b      	ldrb	r3, [r3, r2]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d115      	bne.n	80050e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	7e9b      	ldrb	r3, [r3, #26]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	0252      	lsls	r2, r2, #9
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e00b      	b.n	80050e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d0:	2220      	movs	r2, #32
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050dc:	2201      	movs	r2, #1
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050f0:	23e0      	movs	r3, #224	@ 0xe0
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80050fa:	4313      	orrs	r3, r2
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a65      	ldr	r2, [pc, #404]	@ (80052a0 <HAL_ADC_Init+0x33c>)
 800510a:	4013      	ands	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	0f9b      	lsrs	r3, r3, #30
 800511e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005124:	4313      	orrs	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	223c      	movs	r2, #60	@ 0x3c
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d111      	bne.n	800515a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	0f9b      	lsrs	r3, r3, #30
 800513c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005142:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005148:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800514e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	2201      	movs	r2, #1
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	4a50      	ldr	r2, [pc, #320]	@ (80052a4 <HAL_ADC_Init+0x340>)
 8005162:	4013      	ands	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	430a      	orrs	r2, r1
 800516e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	23c0      	movs	r3, #192	@ 0xc0
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	429a      	cmp	r2, r3
 800517a:	d018      	beq.n	80051ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	05db      	lsls	r3, r3, #23
 8005184:	429a      	cmp	r2, r3
 8005186:	d012      	beq.n	80051ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	429a      	cmp	r2, r3
 8005192:	d00c      	beq.n	80051ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005194:	4b44      	ldr	r3, [pc, #272]	@ (80052a8 <HAL_ADC_Init+0x344>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a44      	ldr	r2, [pc, #272]	@ (80052ac <HAL_ADC_Init+0x348>)
 800519a:	4013      	ands	r3, r2
 800519c:	0019      	movs	r1, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	23f0      	movs	r3, #240	@ 0xf0
 80051a4:	039b      	lsls	r3, r3, #14
 80051a6:	401a      	ands	r2, r3
 80051a8:	4b3f      	ldr	r3, [pc, #252]	@ (80052a8 <HAL_ADC_Init+0x344>)
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	001a      	movs	r2, r3
 80051b8:	2100      	movs	r1, #0
 80051ba:	f7ff fdd8 	bl	8004d6e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	493a      	ldr	r1, [pc, #232]	@ (80052b0 <HAL_ADC_Init+0x34c>)
 80051c8:	001a      	movs	r2, r3
 80051ca:	f7ff fdd0 	bl	8004d6e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2110      	movs	r1, #16
 80051e2:	4249      	negs	r1, r1
 80051e4:	430a      	orrs	r2, r1
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80051e8:	e018      	b.n	800521c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	039b      	lsls	r3, r3, #14
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d112      	bne.n	800521c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	3b01      	subs	r3, #1
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	221c      	movs	r2, #28
 8005206:	4013      	ands	r3, r2
 8005208:	2210      	movs	r2, #16
 800520a:	4252      	negs	r2, r2
 800520c:	409a      	lsls	r2, r3
 800520e:	0011      	movs	r1, r2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2100      	movs	r1, #0
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff fdc0 	bl	8004da8 <LL_ADC_GetSamplingTimeCommonChannels>
 8005228:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800522e:	429a      	cmp	r2, r3
 8005230:	d10b      	bne.n	800524a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	2203      	movs	r2, #3
 800523e:	4393      	bics	r3, r2
 8005240:	2201      	movs	r2, #1
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005248:	e01c      	b.n	8005284 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524e:	2212      	movs	r2, #18
 8005250:	4393      	bics	r3, r2
 8005252:	2210      	movs	r2, #16
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525e:	2201      	movs	r2, #1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800526e:	e009      	b.n	8005284 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005274:	2210      	movs	r2, #16
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800527c:	231f      	movs	r3, #31
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005284:	231f      	movs	r3, #31
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	781b      	ldrb	r3, [r3, #0]
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b008      	add	sp, #32
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	20000010 	.word	0x20000010
 8005298:	00030d40 	.word	0x00030d40
 800529c:	fffffefd 	.word	0xfffffefd
 80052a0:	ffde0201 	.word	0xffde0201
 80052a4:	1ffffc02 	.word	0x1ffffc02
 80052a8:	40012708 	.word	0x40012708
 80052ac:	ffc3ffff 	.word	0xffc3ffff
 80052b0:	07ffff04 	.word	0x07ffff04

080052b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2202      	movs	r2, #2
 80052d4:	4013      	ands	r3, r2
 80052d6:	d017      	beq.n	8005308 <HAL_ADC_IRQHandler+0x54>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	4013      	ands	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e4:	2210      	movs	r2, #16
 80052e6:	4013      	ands	r3, r2
 80052e8:	d106      	bne.n	80052f8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	2280      	movs	r2, #128	@ 0x80
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 faea 	bl	80058d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2204      	movs	r2, #4
 800530c:	4013      	ands	r3, r2
 800530e:	d003      	beq.n	8005318 <HAL_ADC_IRQHandler+0x64>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2204      	movs	r2, #4
 8005314:	4013      	ands	r3, r2
 8005316:	d107      	bne.n	8005328 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2208      	movs	r2, #8
 800531c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800531e:	d04d      	beq.n	80053bc <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2208      	movs	r2, #8
 8005324:	4013      	ands	r3, r2
 8005326:	d049      	beq.n	80053bc <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532c:	2210      	movs	r2, #16
 800532e:	4013      	ands	r3, r2
 8005330:	d106      	bne.n	8005340 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	2280      	movs	r2, #128	@ 0x80
 8005338:	0092      	lsls	r2, r2, #2
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0018      	movs	r0, r3
 8005346:	f7ff fd46 	bl	8004dd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800534a:	1e03      	subs	r3, r0, #0
 800534c:	d02e      	beq.n	80053ac <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7e9b      	ldrb	r3, [r3, #26]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d12a      	bne.n	80053ac <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2208      	movs	r2, #8
 800535e:	4013      	ands	r3, r2
 8005360:	2b08      	cmp	r3, #8
 8005362:	d123      	bne.n	80053ac <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff fdea 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 800536e:	1e03      	subs	r3, r0, #0
 8005370:	d110      	bne.n	8005394 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	210c      	movs	r1, #12
 800537e:	438a      	bics	r2, r1
 8005380:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005386:	4a56      	ldr	r2, [pc, #344]	@ (80054e0 <HAL_ADC_IRQHandler+0x22c>)
 8005388:	4013      	ands	r3, r2
 800538a:	2201      	movs	r2, #1
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	659a      	str	r2, [r3, #88]	@ 0x58
 8005392:	e00b      	b.n	80053ac <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005398:	2220      	movs	r2, #32
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	2201      	movs	r2, #1
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fe f850 	bl	8003454 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	220c      	movs	r2, #12
 80053ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	4013      	ands	r3, r2
 80053c2:	d012      	beq.n	80053ea <HAL_ADC_IRQHandler+0x136>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	4013      	ands	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	2280      	movs	r2, #128	@ 0x80
 80053d2:	0252      	lsls	r2, r2, #9
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 f881 	bl	80054e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2280      	movs	r2, #128	@ 0x80
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4013      	ands	r3, r2
 80053f2:	d014      	beq.n	800541e <HAL_ADC_IRQHandler+0x16a>
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4013      	ands	r3, r2
 80053fc:	d00f      	beq.n	800541e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	2280      	movs	r2, #128	@ 0x80
 8005404:	0292      	lsls	r2, r2, #10
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 fa50 	bl	80058b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2280      	movs	r2, #128	@ 0x80
 800541a:	0052      	lsls	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d014      	beq.n	8005452 <HAL_ADC_IRQHandler+0x19e>
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d00f      	beq.n	8005452 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	2280      	movs	r2, #128	@ 0x80
 8005438:	02d2      	lsls	r2, r2, #11
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	0018      	movs	r0, r3
 8005444:	f000 fa3e 	bl	80058c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2280      	movs	r2, #128	@ 0x80
 800544e:	0092      	lsls	r2, r2, #2
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2210      	movs	r2, #16
 8005456:	4013      	ands	r3, r2
 8005458:	d02b      	beq.n	80054b2 <HAL_ADC_IRQHandler+0x1fe>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2210      	movs	r2, #16
 800545e:	4013      	ands	r3, r2
 8005460:	d027      	beq.n	80054b2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800546a:	2301      	movs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e008      	b.n	8005482 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fd02 	bl	8004e7e <LL_ADC_REG_GetDMATransfer>
 800547a:	1e03      	subs	r3, r0, #0
 800547c:	d001      	beq.n	8005482 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d110      	bne.n	80054aa <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548c:	2280      	movs	r2, #128	@ 0x80
 800548e:	00d2      	lsls	r2, r2, #3
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549a:	2202      	movs	r2, #2
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 f825 	bl	80054f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	019b      	lsls	r3, r3, #6
 80054b8:	4013      	ands	r3, r2
 80054ba:	d00d      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x224>
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	4013      	ands	r3, r2
 80054c4:	d008      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f000 fa0b 	bl	80058e4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2280      	movs	r2, #128	@ 0x80
 80054d4:	0192      	lsls	r2, r2, #6
 80054d6:	601a      	str	r2, [r3, #0]
  }
}
 80054d8:	46c0      	nop			@ (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b006      	add	sp, #24
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	fffffefe 	.word	0xfffffefe

080054e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80054ec:	46c0      	nop			@ (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800550e:	2317      	movs	r3, #23
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2254      	movs	r2, #84	@ 0x54
 800551e:	5c9b      	ldrb	r3, [r3, r2]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x24>
 8005524:	2302      	movs	r3, #2
 8005526:	e1c0      	b.n	80058aa <HAL_ADC_ConfigChannel+0x3a6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2254      	movs	r2, #84	@ 0x54
 800552c:	2101      	movs	r1, #1
 800552e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0018      	movs	r0, r3
 8005536:	f7ff fd04 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 800553a:	1e03      	subs	r3, r0, #0
 800553c:	d000      	beq.n	8005540 <HAL_ADC_ConfigChannel+0x3c>
 800553e:	e1a3      	b.n	8005888 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d100      	bne.n	800554a <HAL_ADC_ConfigChannel+0x46>
 8005548:	e143      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	2380      	movs	r3, #128	@ 0x80
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	429a      	cmp	r2, r3
 8005554:	d004      	beq.n	8005560 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800555a:	4ac1      	ldr	r2, [pc, #772]	@ (8005860 <HAL_ADC_ConfigChannel+0x35c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	0019      	movs	r1, r3
 800556a:	0010      	movs	r0, r2
 800556c:	f7ff fc64 	bl	8004e38 <LL_ADC_REG_SetSequencerChAdd>
 8005570:	e0c9      	b.n	8005706 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	211f      	movs	r1, #31
 800557c:	400b      	ands	r3, r1
 800557e:	210f      	movs	r1, #15
 8005580:	4099      	lsls	r1, r3
 8005582:	000b      	movs	r3, r1
 8005584:	43db      	mvns	r3, r3
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	035b      	lsls	r3, r3, #13
 8005590:	0b5b      	lsrs	r3, r3, #13
 8005592:	d105      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x9c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0e9b      	lsrs	r3, r3, #26
 800559a:	221f      	movs	r2, #31
 800559c:	4013      	ands	r3, r2
 800559e:	e098      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	4013      	ands	r3, r2
 80055a8:	d000      	beq.n	80055ac <HAL_ADC_ConfigChannel+0xa8>
 80055aa:	e091      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x1cc>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2202      	movs	r2, #2
 80055b2:	4013      	ands	r3, r2
 80055b4:	d000      	beq.n	80055b8 <HAL_ADC_ConfigChannel+0xb4>
 80055b6:	e089      	b.n	80056cc <HAL_ADC_ConfigChannel+0x1c8>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2204      	movs	r2, #4
 80055be:	4013      	ands	r3, r2
 80055c0:	d000      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0xc0>
 80055c2:	e081      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x1c4>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4013      	ands	r3, r2
 80055cc:	d000      	beq.n	80055d0 <HAL_ADC_ConfigChannel+0xcc>
 80055ce:	e079      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x1c0>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2210      	movs	r2, #16
 80055d6:	4013      	ands	r3, r2
 80055d8:	d000      	beq.n	80055dc <HAL_ADC_ConfigChannel+0xd8>
 80055da:	e071      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x1bc>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	4013      	ands	r3, r2
 80055e4:	d000      	beq.n	80055e8 <HAL_ADC_ConfigChannel+0xe4>
 80055e6:	e069      	b.n	80056bc <HAL_ADC_ConfigChannel+0x1b8>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	4013      	ands	r3, r2
 80055f0:	d000      	beq.n	80055f4 <HAL_ADC_ConfigChannel+0xf0>
 80055f2:	e061      	b.n	80056b8 <HAL_ADC_ConfigChannel+0x1b4>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2280      	movs	r2, #128	@ 0x80
 80055fa:	4013      	ands	r3, r2
 80055fc:	d000      	beq.n	8005600 <HAL_ADC_ConfigChannel+0xfc>
 80055fe:	e059      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x1b0>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4013      	ands	r3, r2
 800560a:	d151      	bne.n	80056b0 <HAL_ADC_ConfigChannel+0x1ac>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2380      	movs	r3, #128	@ 0x80
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4013      	ands	r3, r2
 8005616:	d149      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x1a8>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4013      	ands	r3, r2
 8005622:	d141      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x1a4>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4013      	ands	r3, r2
 800562e:	d139      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x1a0>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	015b      	lsls	r3, r3, #5
 8005638:	4013      	ands	r3, r2
 800563a:	d131      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x19c>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	019b      	lsls	r3, r3, #6
 8005644:	4013      	ands	r3, r2
 8005646:	d129      	bne.n	800569c <HAL_ADC_ConfigChannel+0x198>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	4013      	ands	r3, r2
 8005652:	d121      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x194>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2380      	movs	r3, #128	@ 0x80
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	4013      	ands	r3, r2
 800565e:	d119      	bne.n	8005694 <HAL_ADC_ConfigChannel+0x190>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	4013      	ands	r3, r2
 800566a:	d111      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x18c>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	029b      	lsls	r3, r3, #10
 8005674:	4013      	ands	r3, r2
 8005676:	d109      	bne.n	800568c <HAL_ADC_ConfigChannel+0x188>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	02db      	lsls	r3, r3, #11
 8005680:	4013      	ands	r3, r2
 8005682:	d001      	beq.n	8005688 <HAL_ADC_ConfigChannel+0x184>
 8005684:	2312      	movs	r3, #18
 8005686:	e024      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005688:	2300      	movs	r3, #0
 800568a:	e022      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 800568c:	2311      	movs	r3, #17
 800568e:	e020      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005690:	2310      	movs	r3, #16
 8005692:	e01e      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005694:	230f      	movs	r3, #15
 8005696:	e01c      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005698:	230e      	movs	r3, #14
 800569a:	e01a      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 800569c:	230d      	movs	r3, #13
 800569e:	e018      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056a0:	230c      	movs	r3, #12
 80056a2:	e016      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056a4:	230b      	movs	r3, #11
 80056a6:	e014      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056a8:	230a      	movs	r3, #10
 80056aa:	e012      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056ac:	2309      	movs	r3, #9
 80056ae:	e010      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056b0:	2308      	movs	r3, #8
 80056b2:	e00e      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056b4:	2307      	movs	r3, #7
 80056b6:	e00c      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056b8:	2306      	movs	r3, #6
 80056ba:	e00a      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056bc:	2305      	movs	r3, #5
 80056be:	e008      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056c0:	2304      	movs	r3, #4
 80056c2:	e006      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056c4:	2303      	movs	r3, #3
 80056c6:	e004      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e002      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
 80056d0:	2300      	movs	r3, #0
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	6852      	ldr	r2, [r2, #4]
 80056d6:	201f      	movs	r0, #31
 80056d8:	4002      	ands	r2, r0
 80056da:	4093      	lsls	r3, r2
 80056dc:	000a      	movs	r2, r1
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d808      	bhi.n	8005706 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	001a      	movs	r2, r3
 8005702:	f7ff fb79 	bl	8004df8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	001a      	movs	r2, r3
 8005714:	f7ff fbc0 	bl	8004e98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	db00      	blt.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
 8005720:	e0bc      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005722:	4b50      	ldr	r3, [pc, #320]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff fb15 	bl	8004d54 <LL_ADC_GetCommonPathInternalCh>
 800572a:	0003      	movs	r3, r0
 800572c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a4d      	ldr	r2, [pc, #308]	@ (8005868 <HAL_ADC_ConfigChannel+0x364>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d122      	bne.n	800577e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005740:	d11d      	bne.n	800577e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2280      	movs	r2, #128	@ 0x80
 8005746:	0412      	lsls	r2, r2, #16
 8005748:	4313      	orrs	r3, r2
 800574a:	4a46      	ldr	r2, [pc, #280]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 800574c:	0019      	movs	r1, r3
 800574e:	0010      	movs	r0, r2
 8005750:	f7ff faec 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005754:	4b45      	ldr	r3, [pc, #276]	@ (800586c <HAL_ADC_ConfigChannel+0x368>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4945      	ldr	r1, [pc, #276]	@ (8005870 <HAL_ADC_ConfigChannel+0x36c>)
 800575a:	0018      	movs	r0, r3
 800575c:	f7fa fcec 	bl	8000138 <__udivsi3>
 8005760:	0003      	movs	r3, r0
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	0013      	movs	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	189b      	adds	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800576e:	e002      	b.n	8005776 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f9      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800577c:	e08e      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3c      	ldr	r2, [pc, #240]	@ (8005874 <HAL_ADC_ConfigChannel+0x370>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10e      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	045b      	lsls	r3, r3, #17
 800578e:	4013      	ands	r3, r2
 8005790:	d109      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2280      	movs	r2, #128	@ 0x80
 8005796:	0452      	lsls	r2, r2, #17
 8005798:	4313      	orrs	r3, r2
 800579a:	4a32      	ldr	r2, [pc, #200]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 800579c:	0019      	movs	r1, r3
 800579e:	0010      	movs	r0, r2
 80057a0:	f7ff fac4 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
 80057a4:	e07a      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a33      	ldr	r2, [pc, #204]	@ (8005878 <HAL_ADC_ConfigChannel+0x374>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d000      	beq.n	80057b2 <HAL_ADC_ConfigChannel+0x2ae>
 80057b0:	e074      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	03db      	lsls	r3, r3, #15
 80057b8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80057ba:	d000      	beq.n	80057be <HAL_ADC_ConfigChannel+0x2ba>
 80057bc:	e06e      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2280      	movs	r2, #128	@ 0x80
 80057c2:	03d2      	lsls	r2, r2, #15
 80057c4:	4313      	orrs	r3, r2
 80057c6:	4a27      	ldr	r2, [pc, #156]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 80057c8:	0019      	movs	r1, r3
 80057ca:	0010      	movs	r0, r2
 80057cc:	f7ff faae 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
 80057d0:	e064      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	429a      	cmp	r2, r3
 80057dc:	d004      	beq.n	80057e8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80057e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005860 <HAL_ADC_ConfigChannel+0x35c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d107      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	0019      	movs	r1, r3
 80057f2:	0010      	movs	r0, r2
 80057f4:	f7ff fb31 	bl	8004e5a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da4d      	bge.n	800589c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005800:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 8005802:	0018      	movs	r0, r3
 8005804:	f7ff faa6 	bl	8004d54 <LL_ADC_GetCommonPathInternalCh>
 8005808:	0003      	movs	r3, r0
 800580a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <HAL_ADC_ConfigChannel+0x364>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d108      	bne.n	8005828 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a18      	ldr	r2, [pc, #96]	@ (800587c <HAL_ADC_ConfigChannel+0x378>)
 800581a:	4013      	ands	r3, r2
 800581c:	4a11      	ldr	r2, [pc, #68]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 800581e:	0019      	movs	r1, r3
 8005820:	0010      	movs	r0, r2
 8005822:	f7ff fa83 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
 8005826:	e039      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a11      	ldr	r2, [pc, #68]	@ (8005874 <HAL_ADC_ConfigChannel+0x370>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4a12      	ldr	r2, [pc, #72]	@ (8005880 <HAL_ADC_ConfigChannel+0x37c>)
 8005836:	4013      	ands	r3, r2
 8005838:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 800583a:	0019      	movs	r1, r3
 800583c:	0010      	movs	r0, r2
 800583e:	f7ff fa75 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
 8005842:	e02b      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <HAL_ADC_ConfigChannel+0x374>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d126      	bne.n	800589c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4a0c      	ldr	r2, [pc, #48]	@ (8005884 <HAL_ADC_ConfigChannel+0x380>)
 8005852:	4013      	ands	r3, r2
 8005854:	4a03      	ldr	r2, [pc, #12]	@ (8005864 <HAL_ADC_ConfigChannel+0x360>)
 8005856:	0019      	movs	r1, r3
 8005858:	0010      	movs	r0, r2
 800585a:	f7ff fa67 	bl	8004d2c <LL_ADC_SetCommonPathInternalCh>
 800585e:	e01d      	b.n	800589c <HAL_ADC_ConfigChannel+0x398>
 8005860:	80000004 	.word	0x80000004
 8005864:	40012708 	.word	0x40012708
 8005868:	b0001000 	.word	0xb0001000
 800586c:	20000010 	.word	0x20000010
 8005870:	00030d40 	.word	0x00030d40
 8005874:	b8004000 	.word	0xb8004000
 8005878:	b4002000 	.word	0xb4002000
 800587c:	ff7fffff 	.word	0xff7fffff
 8005880:	feffffff 	.word	0xfeffffff
 8005884:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588c:	2220      	movs	r2, #32
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005894:	2317      	movs	r3, #23
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2254      	movs	r2, #84	@ 0x54
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80058a4:	2317      	movs	r3, #23
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b006      	add	sp, #24
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)

080058b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b002      	add	sp, #8
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b002      	add	sp, #8
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80058ec:	46c0      	nop			@ (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b002      	add	sp, #8
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	0002      	movs	r2, r0
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005900:	1dfb      	adds	r3, r7, #7
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b7f      	cmp	r3, #127	@ 0x7f
 8005906:	d809      	bhi.n	800591c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	001a      	movs	r2, r3
 800590e:	231f      	movs	r3, #31
 8005910:	401a      	ands	r2, r3
 8005912:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <__NVIC_EnableIRQ+0x30>)
 8005914:	2101      	movs	r1, #1
 8005916:	4091      	lsls	r1, r2
 8005918:	000a      	movs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b002      	add	sp, #8
 8005922:	bd80      	pop	{r7, pc}
 8005924:	e000e100 	.word	0xe000e100

08005928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	0002      	movs	r2, r0
 8005930:	6039      	str	r1, [r7, #0]
 8005932:	1dfb      	adds	r3, r7, #7
 8005934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005936:	1dfb      	adds	r3, r7, #7
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b7f      	cmp	r3, #127	@ 0x7f
 800593c:	d828      	bhi.n	8005990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800593e:	4a2f      	ldr	r2, [pc, #188]	@ (80059fc <__NVIC_SetPriority+0xd4>)
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b25b      	sxtb	r3, r3
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	33c0      	adds	r3, #192	@ 0xc0
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	589b      	ldr	r3, [r3, r2]
 800594e:	1dfa      	adds	r2, r7, #7
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	0011      	movs	r1, r2
 8005954:	2203      	movs	r2, #3
 8005956:	400a      	ands	r2, r1
 8005958:	00d2      	lsls	r2, r2, #3
 800595a:	21ff      	movs	r1, #255	@ 0xff
 800595c:	4091      	lsls	r1, r2
 800595e:	000a      	movs	r2, r1
 8005960:	43d2      	mvns	r2, r2
 8005962:	401a      	ands	r2, r3
 8005964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	22ff      	movs	r2, #255	@ 0xff
 800596c:	401a      	ands	r2, r3
 800596e:	1dfb      	adds	r3, r7, #7
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	0018      	movs	r0, r3
 8005974:	2303      	movs	r3, #3
 8005976:	4003      	ands	r3, r0
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800597c:	481f      	ldr	r0, [pc, #124]	@ (80059fc <__NVIC_SetPriority+0xd4>)
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b25b      	sxtb	r3, r3
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	430a      	orrs	r2, r1
 8005988:	33c0      	adds	r3, #192	@ 0xc0
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800598e:	e031      	b.n	80059f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005990:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <__NVIC_SetPriority+0xd8>)
 8005992:	1dfb      	adds	r3, r7, #7
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	0019      	movs	r1, r3
 8005998:	230f      	movs	r3, #15
 800599a:	400b      	ands	r3, r1
 800599c:	3b08      	subs	r3, #8
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	3306      	adds	r3, #6
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	3304      	adds	r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1dfa      	adds	r2, r7, #7
 80059ac:	7812      	ldrb	r2, [r2, #0]
 80059ae:	0011      	movs	r1, r2
 80059b0:	2203      	movs	r2, #3
 80059b2:	400a      	ands	r2, r1
 80059b4:	00d2      	lsls	r2, r2, #3
 80059b6:	21ff      	movs	r1, #255	@ 0xff
 80059b8:	4091      	lsls	r1, r2
 80059ba:	000a      	movs	r2, r1
 80059bc:	43d2      	mvns	r2, r2
 80059be:	401a      	ands	r2, r3
 80059c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	22ff      	movs	r2, #255	@ 0xff
 80059c8:	401a      	ands	r2, r3
 80059ca:	1dfb      	adds	r3, r7, #7
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	0018      	movs	r0, r3
 80059d0:	2303      	movs	r3, #3
 80059d2:	4003      	ands	r3, r0
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059d8:	4809      	ldr	r0, [pc, #36]	@ (8005a00 <__NVIC_SetPriority+0xd8>)
 80059da:	1dfb      	adds	r3, r7, #7
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	001c      	movs	r4, r3
 80059e0:	230f      	movs	r3, #15
 80059e2:	4023      	ands	r3, r4
 80059e4:	3b08      	subs	r3, #8
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	430a      	orrs	r2, r1
 80059ea:	3306      	adds	r3, #6
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	18c3      	adds	r3, r0, r3
 80059f0:	3304      	adds	r3, #4
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b003      	add	sp, #12
 80059fa:	bd90      	pop	{r4, r7, pc}
 80059fc:	e000e100 	.word	0xe000e100
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	1e5a      	subs	r2, r3, #1
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	045b      	lsls	r3, r3, #17
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d301      	bcc.n	8005a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e010      	b.n	8005a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <SysTick_Config+0x44>)
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	3a01      	subs	r2, #1
 8005a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a24:	2301      	movs	r3, #1
 8005a26:	425b      	negs	r3, r3
 8005a28:	2103      	movs	r1, #3
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff ff7c 	bl	8005928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <SysTick_Config+0x44>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a36:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <SysTick_Config+0x44>)
 8005a38:	2207      	movs	r2, #7
 8005a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	0018      	movs	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b002      	add	sp, #8
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	e000e010 	.word	0xe000e010

08005a4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	210f      	movs	r1, #15
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	1c02      	adds	r2, r0, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	187b      	adds	r3, r7, r1
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	0011      	movs	r1, r2
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7ff ff5d 	bl	8005928 <__NVIC_SetPriority>
}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b004      	add	sp, #16
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	0002      	movs	r2, r0
 8005a7e:	1dfb      	adds	r3, r7, #7
 8005a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7ff ff33 	bl	80058f4 <__NVIC_EnableIRQ>
}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b002      	add	sp, #8
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff ffaf 	bl	8005a04 <SysTick_Config>
 8005aa6:	0003      	movs	r3, r0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e077      	b.n	8005bb2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8005bbc <HAL_DMA_Init+0x10c>)
 8005ac8:	4694      	mov	ip, r2
 8005aca:	4463      	add	r3, ip
 8005acc:	2114      	movs	r1, #20
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7fa fb32 	bl	8000138 <__udivsi3>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	009a      	lsls	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2225      	movs	r2, #37	@ 0x25
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4934      	ldr	r1, [pc, #208]	@ (8005bc0 <HAL_DMA_Init+0x110>)
 8005af0:	400a      	ands	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6819      	ldr	r1, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 f971 	bl	8005e14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	01db      	lsls	r3, r3, #7
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d102      	bne.n	8005b44 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4c:	213f      	movs	r1, #63	@ 0x3f
 8005b4e:	400a      	ands	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005b5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d011      	beq.n	8005b88 <HAL_DMA_Init+0xd8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d80d      	bhi.n	8005b88 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f97c 	bl	8005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	e008      	b.n	8005b9a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2225      	movs	r2, #37	@ 0x25
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	@ 0x24
 8005bac:	2100      	movs	r1, #0
 8005bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b002      	add	sp, #8
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	bffdfff8 	.word	0xbffdfff8
 8005bc0:	ffff800f 	.word	0xffff800f

08005bc4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bcc:	210f      	movs	r1, #15
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2225      	movs	r2, #37	@ 0x25
 8005bd8:	5c9b      	ldrb	r3, [r3, r2]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d006      	beq.n	8005bee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2204      	movs	r2, #4
 8005be4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005be6:	187b      	adds	r3, r7, r1
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e049      	b.n	8005c82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	210e      	movs	r1, #14
 8005bfa:	438a      	bics	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	438a      	bics	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c18:	491d      	ldr	r1, [pc, #116]	@ (8005c90 <HAL_DMA_Abort_IT+0xcc>)
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c94 <HAL_DMA_Abort_IT+0xd0>)
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	221c      	movs	r2, #28
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_DMA_Abort_IT+0xd0>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005c3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00c      	beq.n	8005c60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c50:	490f      	ldr	r1, [pc, #60]	@ (8005c90 <HAL_DMA_Abort_IT+0xcc>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005c5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2225      	movs	r2, #37	@ 0x25
 8005c64:	2101      	movs	r1, #1
 8005c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	0010      	movs	r0, r2
 8005c80:	4798      	blx	r3
    }
  }
  return status;
 8005c82:	230f      	movs	r3, #15
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	781b      	ldrb	r3, [r3, #0]
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b004      	add	sp, #16
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	fffffeff 	.word	0xfffffeff
 8005c94:	40020000 	.word	0x40020000

08005c98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005ca0:	4b55      	ldr	r3, [pc, #340]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	221c      	movs	r2, #28
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	0013      	movs	r3, r2
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d027      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x7a>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d023      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d107      	bne.n	8005ce6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005ce6:	4b44      	ldr	r3, [pc, #272]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	221c      	movs	r2, #28
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	4b40      	ldr	r3, [pc, #256]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d100      	bne.n	8005d06 <HAL_DMA_IRQHandler+0x6e>
 8005d04:	e073      	b.n	8005dee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	0010      	movs	r0, r2
 8005d0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005d10:	e06d      	b.n	8005dee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	221c      	movs	r2, #28
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	0013      	movs	r3, r2
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	d02e      	beq.n	8005d84 <HAL_DMA_IRQHandler+0xec>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d02a      	beq.n	8005d84 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2220      	movs	r2, #32
 8005d36:	4013      	ands	r3, r2
 8005d38:	d10b      	bne.n	8005d52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	210a      	movs	r1, #10
 8005d46:	438a      	bics	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2225      	movs	r2, #37	@ 0x25
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005d52:	4b29      	ldr	r3, [pc, #164]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	221c      	movs	r2, #28
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2202      	movs	r2, #2
 8005d60:	409a      	lsls	r2, r3
 8005d62:	4b25      	ldr	r3, [pc, #148]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2224      	movs	r2, #36	@ 0x24
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d03a      	beq.n	8005dee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	0010      	movs	r0, r2
 8005d80:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005d82:	e034      	b.n	8005dee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	221c      	movs	r2, #28
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	0013      	movs	r3, r2
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4013      	ands	r3, r2
 8005d96:	d02b      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x158>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d027      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	210e      	movs	r1, #14
 8005dac:	438a      	bics	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005db0:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005db2:	6859      	ldr	r1, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	221c      	movs	r2, #28
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <HAL_DMA_IRQHandler+0x160>)
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2225      	movs	r2, #37	@ 0x25
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	0010      	movs	r0, r2
 8005dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	46c0      	nop			@ (mov r8, r8)
}
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b004      	add	sp, #16
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40020000 	.word	0x40020000

08005dfc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2225      	movs	r2, #37	@ 0x25
 8005e08:	5c9b      	ldrb	r3, [r3, r2]
 8005e0a:	b2db      	uxtb	r3, r3
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b002      	add	sp, #8
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	4a10      	ldr	r2, [pc, #64]	@ (8005e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005e24:	4694      	mov	ip, r2
 8005e26:	4463      	add	r3, ip
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	001a      	movs	r2, r3
 8005e36:	23ff      	movs	r3, #255	@ 0xff
 8005e38:	4013      	ands	r3, r2
 8005e3a:	3b08      	subs	r3, #8
 8005e3c:	2114      	movs	r1, #20
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f7fa f97a 	bl	8000138 <__udivsi3>
 8005e44:	0003      	movs	r3, r0
 8005e46:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005e4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	221f      	movs	r2, #31
 8005e52:	4013      	ands	r3, r2
 8005e54:	2201      	movs	r2, #1
 8005e56:	409a      	lsls	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b004      	add	sp, #16
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	10008200 	.word	0x10008200
 8005e68:	40020880 	.word	0x40020880

08005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	223f      	movs	r2, #63	@ 0x3f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e82:	4694      	mov	ip, r2
 8005e84:	4463      	add	r3, ip
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	001a      	movs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a07      	ldr	r2, [pc, #28]	@ (8005eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	2203      	movs	r2, #3
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b004      	add	sp, #16
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	1000823f 	.word	0x1000823f
 8005eb0:	40020940 	.word	0x40020940

08005eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ec2:	e147      	b.n	8006154 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2101      	movs	r1, #1
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4091      	lsls	r1, r2
 8005ece:	000a      	movs	r2, r1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d100      	bne.n	8005edc <HAL_GPIO_Init+0x28>
 8005eda:	e138      	b.n	800614e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d005      	beq.n	8005ef4 <HAL_GPIO_Init+0x40>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2203      	movs	r2, #3
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d130      	bne.n	8005f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	409a      	lsls	r2, r3
 8005f02:	0013      	movs	r3, r2
 8005f04:	43da      	mvns	r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	409a      	lsls	r2, r3
 8005f16:	0013      	movs	r3, r2
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	0013      	movs	r3, r2
 8005f32:	43da      	mvns	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4013      	ands	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	2201      	movs	r2, #1
 8005f42:	401a      	ands	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	409a      	lsls	r2, r3
 8005f48:	0013      	movs	r3, r2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d017      	beq.n	8005f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	0013      	movs	r3, r2
 8005f72:	43da      	mvns	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	409a      	lsls	r2, r3
 8005f84:	0013      	movs	r3, r2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2203      	movs	r2, #3
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d123      	bne.n	8005fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	08da      	lsrs	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3208      	adds	r2, #8
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	58d3      	ldr	r3, [r2, r3]
 8005faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2207      	movs	r2, #7
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	0013      	movs	r3, r2
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2107      	movs	r1, #7
 8005fca:	400b      	ands	r3, r1
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	0013      	movs	r3, r2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	08da      	lsrs	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3208      	adds	r2, #8
 8005fe0:	0092      	lsls	r2, r2, #2
 8005fe2:	6939      	ldr	r1, [r7, #16]
 8005fe4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	0013      	movs	r3, r2
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2203      	movs	r2, #3
 8006004:	401a      	ands	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	0013      	movs	r3, r2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	23c0      	movs	r3, #192	@ 0xc0
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	4013      	ands	r3, r2
 8006024:	d100      	bne.n	8006028 <HAL_GPIO_Init+0x174>
 8006026:	e092      	b.n	800614e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006028:	4a50      	ldr	r2, [pc, #320]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	3318      	adds	r3, #24
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	589b      	ldr	r3, [r3, r2]
 8006034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2203      	movs	r2, #3
 800603a:	4013      	ands	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	220f      	movs	r2, #15
 8006040:	409a      	lsls	r2, r3
 8006042:	0013      	movs	r3, r2
 8006044:	43da      	mvns	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4013      	ands	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	23a0      	movs	r3, #160	@ 0xa0
 8006050:	05db      	lsls	r3, r3, #23
 8006052:	429a      	cmp	r2, r3
 8006054:	d013      	beq.n	800607e <HAL_GPIO_Init+0x1ca>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a45      	ldr	r2, [pc, #276]	@ (8006170 <HAL_GPIO_Init+0x2bc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00d      	beq.n	800607a <HAL_GPIO_Init+0x1c6>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a44      	ldr	r2, [pc, #272]	@ (8006174 <HAL_GPIO_Init+0x2c0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <HAL_GPIO_Init+0x1c2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a43      	ldr	r2, [pc, #268]	@ (8006178 <HAL_GPIO_Init+0x2c4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_GPIO_Init+0x1be>
 800606e:	2303      	movs	r3, #3
 8006070:	e006      	b.n	8006080 <HAL_GPIO_Init+0x1cc>
 8006072:	2305      	movs	r3, #5
 8006074:	e004      	b.n	8006080 <HAL_GPIO_Init+0x1cc>
 8006076:	2302      	movs	r3, #2
 8006078:	e002      	b.n	8006080 <HAL_GPIO_Init+0x1cc>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_GPIO_Init+0x1cc>
 800607e:	2300      	movs	r3, #0
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	2103      	movs	r1, #3
 8006084:	400a      	ands	r2, r1
 8006086:	00d2      	lsls	r2, r2, #3
 8006088:	4093      	lsls	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006090:	4936      	ldr	r1, [pc, #216]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	3318      	adds	r3, #24
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800609e:	4b33      	ldr	r3, [pc, #204]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	43da      	mvns	r2, r3
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	2380      	movs	r3, #128	@ 0x80
 80060b4:	035b      	lsls	r3, r3, #13
 80060b6:	4013      	ands	r3, r2
 80060b8:	d003      	beq.n	80060c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060c2:	4b2a      	ldr	r3, [pc, #168]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80060c8:	4b28      	ldr	r3, [pc, #160]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	43da      	mvns	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4013      	ands	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	2380      	movs	r3, #128	@ 0x80
 80060de:	039b      	lsls	r3, r3, #14
 80060e0:	4013      	ands	r3, r2
 80060e2:	d003      	beq.n	80060ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060ec:	4b1f      	ldr	r3, [pc, #124]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060f2:	4a1e      	ldr	r2, [pc, #120]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 80060f4:	2384      	movs	r3, #132	@ 0x84
 80060f6:	58d3      	ldr	r3, [r2, r3]
 80060f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43da      	mvns	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	4013      	ands	r3, r2
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006118:	4914      	ldr	r1, [pc, #80]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 800611a:	2284      	movs	r2, #132	@ 0x84
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006120:	4a12      	ldr	r2, [pc, #72]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	58d3      	ldr	r3, [r2, r3]
 8006126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	43da      	mvns	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	025b      	lsls	r3, r3, #9
 800613a:	4013      	ands	r3, r2
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006146:	4909      	ldr	r1, [pc, #36]	@ (800616c <HAL_GPIO_Init+0x2b8>)
 8006148:	2280      	movs	r2, #128	@ 0x80
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	3301      	adds	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	40da      	lsrs	r2, r3
 800615c:	1e13      	subs	r3, r2, #0
 800615e:	d000      	beq.n	8006162 <HAL_GPIO_Init+0x2ae>
 8006160:	e6b0      	b.n	8005ec4 <HAL_GPIO_Init+0x10>
  }
}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b006      	add	sp, #24
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40021800 	.word	0x40021800
 8006170:	50000400 	.word	0x50000400
 8006174:	50000800 	.word	0x50000800
 8006178:	50000c00 	.word	0x50000c00

0800617c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	000a      	movs	r2, r1
 8006186:	1cbb      	adds	r3, r7, #2
 8006188:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	1cba      	adds	r2, r7, #2
 8006190:	8812      	ldrh	r2, [r2, #0]
 8006192:	4013      	ands	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006196:	230f      	movs	r3, #15
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e003      	b.n	80061a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061a0:	230f      	movs	r3, #15
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80061a8:	230f      	movs	r3, #15
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	781b      	ldrb	r3, [r3, #0]
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b004      	add	sp, #16
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	0008      	movs	r0, r1
 80061c0:	0011      	movs	r1, r2
 80061c2:	1cbb      	adds	r3, r7, #2
 80061c4:	1c02      	adds	r2, r0, #0
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	1c7b      	adds	r3, r7, #1
 80061ca:	1c0a      	adds	r2, r1, #0
 80061cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061ce:	1c7b      	adds	r3, r7, #1
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061d6:	1cbb      	adds	r3, r7, #2
 80061d8:	881a      	ldrh	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061de:	e003      	b.n	80061e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061e0:	1cbb      	adds	r3, r7, #2
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061e8:	46c0      	nop			@ (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b002      	add	sp, #8
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	0002      	movs	r2, r0
 80061f8:	1dbb      	adds	r3, r7, #6
 80061fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80061fc:	4b10      	ldr	r3, [pc, #64]	@ (8006240 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	1dba      	adds	r2, r7, #6
 8006202:	8812      	ldrh	r2, [r2, #0]
 8006204:	4013      	ands	r3, r2
 8006206:	d008      	beq.n	800621a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006208:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800620a:	1dba      	adds	r2, r7, #6
 800620c:	8812      	ldrh	r2, [r2, #0]
 800620e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006210:	1dbb      	adds	r3, r7, #6
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	0018      	movs	r0, r3
 8006216:	f000 f815 	bl	8006244 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800621a:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	1dba      	adds	r2, r7, #6
 8006220:	8812      	ldrh	r2, [r2, #0]
 8006222:	4013      	ands	r3, r2
 8006224:	d008      	beq.n	8006238 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006228:	1dba      	adds	r2, r7, #6
 800622a:	8812      	ldrh	r2, [r2, #0]
 800622c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800622e:	1dbb      	adds	r3, r7, #6
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	0018      	movs	r0, r3
 8006234:	f7fd f99e 	bl	8003574 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021800 	.word	0x40021800

08006244 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	0002      	movs	r2, r0
 800624c:	1dbb      	adds	r3, r7, #6
 800624e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006250:	46c0      	nop			@ (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b002      	add	sp, #8
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e08f      	b.n	800638a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2241      	movs	r2, #65	@ 0x41
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d107      	bne.n	8006286 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2240      	movs	r2, #64	@ 0x40
 800627a:	2100      	movs	r1, #0
 800627c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0018      	movs	r0, r3
 8006282:	f7fe f9d7 	bl	8004634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2241      	movs	r2, #65	@ 0x41
 800628a:	2124      	movs	r1, #36	@ 0x24
 800628c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2101      	movs	r1, #1
 800629a:	438a      	bics	r2, r1
 800629c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	493b      	ldr	r1, [pc, #236]	@ (8006394 <HAL_I2C_Init+0x13c>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4938      	ldr	r1, [pc, #224]	@ (8006398 <HAL_I2C_Init+0x140>)
 80062b8:	400a      	ands	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d108      	bne.n	80062d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2180      	movs	r1, #128	@ 0x80
 80062ce:	0209      	lsls	r1, r1, #8
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	e007      	b.n	80062e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2184      	movs	r1, #132	@ 0x84
 80062e0:	0209      	lsls	r1, r1, #8
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d109      	bne.n	8006302 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	0109      	lsls	r1, r1, #4
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
 8006300:	e007      	b.n	8006312 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4923      	ldr	r1, [pc, #140]	@ (800639c <HAL_I2C_Init+0x144>)
 800630e:	400a      	ands	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4920      	ldr	r1, [pc, #128]	@ (80063a0 <HAL_I2C_Init+0x148>)
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	491a      	ldr	r1, [pc, #104]	@ (8006398 <HAL_I2C_Init+0x140>)
 800632e:	400a      	ands	r2, r1
 8006330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	431a      	orrs	r2, r3
 800633c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69d9      	ldr	r1, [r3, #28]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1a      	ldr	r2, [r3, #32]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2101      	movs	r1, #1
 8006368:	430a      	orrs	r2, r1
 800636a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2241      	movs	r2, #65	@ 0x41
 8006376:	2120      	movs	r1, #32
 8006378:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2242      	movs	r2, #66	@ 0x42
 8006384:	2100      	movs	r1, #0
 8006386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b002      	add	sp, #8
 8006390:	bd80      	pop	{r7, pc}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	f0ffffff 	.word	0xf0ffffff
 8006398:	ffff7fff 	.word	0xffff7fff
 800639c:	fffff7ff 	.word	0xfffff7ff
 80063a0:	02008000 	.word	0x02008000

080063a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b089      	sub	sp, #36	@ 0x24
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	0008      	movs	r0, r1
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	0019      	movs	r1, r3
 80063b2:	230a      	movs	r3, #10
 80063b4:	18fb      	adds	r3, r7, r3
 80063b6:	1c02      	adds	r2, r0, #0
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	2308      	movs	r3, #8
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	1c0a      	adds	r2, r1, #0
 80063c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2241      	movs	r2, #65	@ 0x41
 80063c6:	5c9b      	ldrb	r3, [r3, r2]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d000      	beq.n	80063d0 <HAL_I2C_Master_Transmit+0x2c>
 80063ce:	e10a      	b.n	80065e6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	5c9b      	ldrb	r3, [r3, r2]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_I2C_Master_Transmit+0x3a>
 80063da:	2302      	movs	r3, #2
 80063dc:	e104      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2240      	movs	r2, #64	@ 0x40
 80063e2:	2101      	movs	r1, #1
 80063e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063e6:	f7fe fc97 	bl	8004d18 <HAL_GetTick>
 80063ea:	0003      	movs	r3, r0
 80063ec:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	0219      	lsls	r1, r3, #8
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2319      	movs	r3, #25
 80063fa:	2201      	movs	r2, #1
 80063fc:	f001 f9c2 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006400:	1e03      	subs	r3, r0, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0ef      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2241      	movs	r2, #65	@ 0x41
 800640c:	2121      	movs	r1, #33	@ 0x21
 800640e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2242      	movs	r2, #66	@ 0x42
 8006414:	2110      	movs	r1, #16
 8006416:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2208      	movs	r2, #8
 8006428:	18ba      	adds	r2, r7, r2
 800642a:	8812      	ldrh	r2, [r2, #0]
 800642c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2bff      	cmp	r3, #255	@ 0xff
 800643c:	d906      	bls.n	800644c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	22ff      	movs	r2, #255	@ 0xff
 8006442:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	045b      	lsls	r3, r3, #17
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e007      	b.n	800645c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	049b      	lsls	r3, r3, #18
 800645a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006460:	2b00      	cmp	r3, #0
 8006462:	d027      	beq.n	80064b4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	b2db      	uxtb	r3, r3
 800649a:	3301      	adds	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	697c      	ldr	r4, [r7, #20]
 80064a0:	230a      	movs	r3, #10
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	8819      	ldrh	r1, [r3, #0]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	4b51      	ldr	r3, [pc, #324]	@ (80065f0 <HAL_I2C_Master_Transmit+0x24c>)
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	0023      	movs	r3, r4
 80064ae:	f001 fbe1 	bl	8007c74 <I2C_TransferConfig>
 80064b2:	e06f      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	697c      	ldr	r4, [r7, #20]
 80064bc:	230a      	movs	r3, #10
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	8819      	ldrh	r1, [r3, #0]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4b4a      	ldr	r3, [pc, #296]	@ (80065f0 <HAL_I2C_Master_Transmit+0x24c>)
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	0023      	movs	r3, r4
 80064ca:	f001 fbd3 	bl	8007c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80064ce:	e061      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	0018      	movs	r0, r3
 80064d8:	f001 f9ac 	bl	8007834 <I2C_WaitOnTXISFlagUntilTimeout>
 80064dc:	1e03      	subs	r3, r0, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e081      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d03a      	beq.n	8006594 <HAL_I2C_Master_Transmit+0x1f0>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d136      	bne.n	8006594 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	0013      	movs	r3, r2
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	@ 0x80
 8006534:	f001 f926 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006538:	1e03      	subs	r3, r0, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e053      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2bff      	cmp	r3, #255	@ 0xff
 8006548:	d911      	bls.n	800656e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	045c      	lsls	r4, r3, #17
 800655a:	230a      	movs	r3, #10
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	8819      	ldrh	r1, [r3, #0]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	0023      	movs	r3, r4
 8006568:	f001 fb84 	bl	8007c74 <I2C_TransferConfig>
 800656c:	e012      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657c:	b2da      	uxtb	r2, r3
 800657e:	2380      	movs	r3, #128	@ 0x80
 8006580:	049c      	lsls	r4, r3, #18
 8006582:	230a      	movs	r3, #10
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	8819      	ldrh	r1, [r3, #0]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	2300      	movs	r3, #0
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	0023      	movs	r3, r4
 8006590:	f001 fb70 	bl	8007c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d198      	bne.n	80064d0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f001 f98b 	bl	80078c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e01a      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2220      	movs	r2, #32
 80065b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	490b      	ldr	r1, [pc, #44]	@ (80065f4 <HAL_I2C_Master_Transmit+0x250>)
 80065c6:	400a      	ands	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2241      	movs	r2, #65	@ 0x41
 80065ce:	2120      	movs	r1, #32
 80065d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2242      	movs	r2, #66	@ 0x42
 80065d6:	2100      	movs	r1, #0
 80065d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2240      	movs	r2, #64	@ 0x40
 80065de:	2100      	movs	r1, #0
 80065e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b007      	add	sp, #28
 80065ee:	bd90      	pop	{r4, r7, pc}
 80065f0:	80002000 	.word	0x80002000
 80065f4:	fe00e800 	.word	0xfe00e800

080065f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b089      	sub	sp, #36	@ 0x24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	0008      	movs	r0, r1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	0019      	movs	r1, r3
 8006606:	230a      	movs	r3, #10
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	1c02      	adds	r2, r0, #0
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	2308      	movs	r3, #8
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	1c0a      	adds	r2, r1, #0
 8006614:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2241      	movs	r2, #65	@ 0x41
 800661a:	5c9b      	ldrb	r3, [r3, r2]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b20      	cmp	r3, #32
 8006620:	d000      	beq.n	8006624 <HAL_I2C_Master_Receive+0x2c>
 8006622:	e0e8      	b.n	80067f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2240      	movs	r2, #64	@ 0x40
 8006628:	5c9b      	ldrb	r3, [r3, r2]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_I2C_Master_Receive+0x3a>
 800662e:	2302      	movs	r3, #2
 8006630:	e0e2      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2240      	movs	r2, #64	@ 0x40
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800663a:	f7fe fb6d 	bl	8004d18 <HAL_GetTick>
 800663e:	0003      	movs	r3, r0
 8006640:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006642:	2380      	movs	r3, #128	@ 0x80
 8006644:	0219      	lsls	r1, r3, #8
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	2319      	movs	r3, #25
 800664e:	2201      	movs	r2, #1
 8006650:	f001 f898 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0cd      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2241      	movs	r2, #65	@ 0x41
 8006660:	2122      	movs	r1, #34	@ 0x22
 8006662:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2242      	movs	r2, #66	@ 0x42
 8006668:	2110      	movs	r1, #16
 800666a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2208      	movs	r2, #8
 800667c:	18ba      	adds	r2, r7, r2
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2bff      	cmp	r3, #255	@ 0xff
 8006690:	d911      	bls.n	80066b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	@ 0xff
 8006696:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	2380      	movs	r3, #128	@ 0x80
 80066a0:	045c      	lsls	r4, r3, #17
 80066a2:	230a      	movs	r3, #10
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	8819      	ldrh	r1, [r3, #0]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	4b55      	ldr	r3, [pc, #340]	@ (8006800 <HAL_I2C_Master_Receive+0x208>)
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	0023      	movs	r3, r4
 80066b0:	f001 fae0 	bl	8007c74 <I2C_TransferConfig>
 80066b4:	e076      	b.n	80067a4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	2380      	movs	r3, #128	@ 0x80
 80066c8:	049c      	lsls	r4, r3, #18
 80066ca:	230a      	movs	r3, #10
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	8819      	ldrh	r1, [r3, #0]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006800 <HAL_I2C_Master_Receive+0x208>)
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	0023      	movs	r3, r4
 80066d8:	f001 facc 	bl	8007c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80066dc:	e062      	b.n	80067a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f001 f92f 	bl	8007948 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066ea:	1e03      	subs	r3, r0, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e082      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d03a      	beq.n	80067a4 <HAL_I2C_Master_Receive+0x1ac>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d136      	bne.n	80067a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	0013      	movs	r3, r2
 8006740:	2200      	movs	r2, #0
 8006742:	2180      	movs	r1, #128	@ 0x80
 8006744:	f001 f81e 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d001      	beq.n	8006750 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e053      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2bff      	cmp	r3, #255	@ 0xff
 8006758:	d911      	bls.n	800677e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	22ff      	movs	r2, #255	@ 0xff
 800675e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006764:	b2da      	uxtb	r2, r3
 8006766:	2380      	movs	r3, #128	@ 0x80
 8006768:	045c      	lsls	r4, r3, #17
 800676a:	230a      	movs	r3, #10
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	8819      	ldrh	r1, [r3, #0]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	2300      	movs	r3, #0
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	0023      	movs	r3, r4
 8006778:	f001 fa7c 	bl	8007c74 <I2C_TransferConfig>
 800677c:	e012      	b.n	80067a4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678c:	b2da      	uxtb	r2, r3
 800678e:	2380      	movs	r3, #128	@ 0x80
 8006790:	049c      	lsls	r4, r3, #18
 8006792:	230a      	movs	r3, #10
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	8819      	ldrh	r1, [r3, #0]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	2300      	movs	r3, #0
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	0023      	movs	r3, r4
 80067a0:	f001 fa68 	bl	8007c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d197      	bne.n	80066de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	0018      	movs	r0, r3
 80067b6:	f001 f883 	bl	80078c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e01a      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2220      	movs	r2, #32
 80067c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	490b      	ldr	r1, [pc, #44]	@ (8006804 <HAL_I2C_Master_Receive+0x20c>)
 80067d6:	400a      	ands	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2241      	movs	r2, #65	@ 0x41
 80067de:	2120      	movs	r1, #32
 80067e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2242      	movs	r2, #66	@ 0x42
 80067e6:	2100      	movs	r1, #0
 80067e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2240      	movs	r2, #64	@ 0x40
 80067ee:	2100      	movs	r1, #0
 80067f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b007      	add	sp, #28
 80067fe:	bd90      	pop	{r4, r7, pc}
 8006800:	80002400 	.word	0x80002400
 8006804:	fe00e800 	.word	0xfe00e800

08006808 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b089      	sub	sp, #36	@ 0x24
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	000c      	movs	r4, r1
 8006812:	0010      	movs	r0, r2
 8006814:	0019      	movs	r1, r3
 8006816:	230a      	movs	r3, #10
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	1c22      	adds	r2, r4, #0
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	2308      	movs	r3, #8
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	1c02      	adds	r2, r0, #0
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	1dbb      	adds	r3, r7, #6
 8006828:	1c0a      	adds	r2, r1, #0
 800682a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2241      	movs	r2, #65	@ 0x41
 8006830:	5c9b      	ldrb	r3, [r3, r2]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b20      	cmp	r3, #32
 8006836:	d000      	beq.n	800683a <HAL_I2C_Mem_Read+0x32>
 8006838:	e110      	b.n	8006a5c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <HAL_I2C_Mem_Read+0x42>
 8006840:	232c      	movs	r3, #44	@ 0x2c
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2280      	movs	r2, #128	@ 0x80
 800684e:	0092      	lsls	r2, r2, #2
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e103      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2240      	movs	r2, #64	@ 0x40
 800685a:	5c9b      	ldrb	r3, [r3, r2]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_I2C_Mem_Read+0x5c>
 8006860:	2302      	movs	r3, #2
 8006862:	e0fc      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2240      	movs	r2, #64	@ 0x40
 8006868:	2101      	movs	r1, #1
 800686a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800686c:	f7fe fa54 	bl	8004d18 <HAL_GetTick>
 8006870:	0003      	movs	r3, r0
 8006872:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	0219      	lsls	r1, r3, #8
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	2319      	movs	r3, #25
 8006880:	2201      	movs	r2, #1
 8006882:	f000 ff7f 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006886:	1e03      	subs	r3, r0, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0e7      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2241      	movs	r2, #65	@ 0x41
 8006892:	2122      	movs	r1, #34	@ 0x22
 8006894:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2242      	movs	r2, #66	@ 0x42
 800689a:	2140      	movs	r1, #64	@ 0x40
 800689c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	222c      	movs	r2, #44	@ 0x2c
 80068ae:	18ba      	adds	r2, r7, r2
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ba:	1dbb      	adds	r3, r7, #6
 80068bc:	881c      	ldrh	r4, [r3, #0]
 80068be:	2308      	movs	r3, #8
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	230a      	movs	r3, #10
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	8819      	ldrh	r1, [r3, #0]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	0023      	movs	r3, r4
 80068d6:	f000 fa93 	bl	8006e00 <I2C_RequestMemoryRead>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d005      	beq.n	80068ea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2240      	movs	r2, #64	@ 0x40
 80068e2:	2100      	movs	r1, #0
 80068e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e0b9      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2bff      	cmp	r3, #255	@ 0xff
 80068f2:	d911      	bls.n	8006918 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	22ff      	movs	r2, #255	@ 0xff
 80068f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	2380      	movs	r3, #128	@ 0x80
 8006902:	045c      	lsls	r4, r3, #17
 8006904:	230a      	movs	r3, #10
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	8819      	ldrh	r1, [r3, #0]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	4b56      	ldr	r3, [pc, #344]	@ (8006a68 <HAL_I2C_Mem_Read+0x260>)
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	0023      	movs	r3, r4
 8006912:	f001 f9af 	bl	8007c74 <I2C_TransferConfig>
 8006916:	e012      	b.n	800693e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006926:	b2da      	uxtb	r2, r3
 8006928:	2380      	movs	r3, #128	@ 0x80
 800692a:	049c      	lsls	r4, r3, #18
 800692c:	230a      	movs	r3, #10
 800692e:	18fb      	adds	r3, r7, r3
 8006930:	8819      	ldrh	r1, [r3, #0]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	4b4c      	ldr	r3, [pc, #304]	@ (8006a68 <HAL_I2C_Mem_Read+0x260>)
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	0023      	movs	r3, r4
 800693a:	f001 f99b 	bl	8007c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800693e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	0013      	movs	r3, r2
 8006948:	2200      	movs	r2, #0
 800694a:	2104      	movs	r1, #4
 800694c:	f000 ff1a 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d001      	beq.n	8006958 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e082      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d03a      	beq.n	8006a0a <HAL_I2C_Mem_Read+0x202>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d136      	bne.n	8006a0a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800699c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	0013      	movs	r3, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	@ 0x80
 80069aa:	f000 feeb 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e053      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2bff      	cmp	r3, #255	@ 0xff
 80069be:	d911      	bls.n	80069e4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	22ff      	movs	r2, #255	@ 0xff
 80069c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	2380      	movs	r3, #128	@ 0x80
 80069ce:	045c      	lsls	r4, r3, #17
 80069d0:	230a      	movs	r3, #10
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	8819      	ldrh	r1, [r3, #0]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	2300      	movs	r3, #0
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	0023      	movs	r3, r4
 80069de:	f001 f949 	bl	8007c74 <I2C_TransferConfig>
 80069e2:	e012      	b.n	8006a0a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	049c      	lsls	r4, r3, #18
 80069f8:	230a      	movs	r3, #10
 80069fa:	18fb      	adds	r3, r7, r3
 80069fc:	8819      	ldrh	r1, [r3, #0]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	0023      	movs	r3, r4
 8006a06:	f001 f935 	bl	8007c74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d194      	bne.n	800693e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 ff50 	bl	80078c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a20:	1e03      	subs	r3, r0, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e01a      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	490c      	ldr	r1, [pc, #48]	@ (8006a6c <HAL_I2C_Mem_Read+0x264>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2241      	movs	r2, #65	@ 0x41
 8006a44:	2120      	movs	r1, #32
 8006a46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2242      	movs	r2, #66	@ 0x42
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2240      	movs	r2, #64	@ 0x40
 8006a54:	2100      	movs	r1, #0
 8006a56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	0018      	movs	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b007      	add	sp, #28
 8006a64:	bd90      	pop	{r4, r7, pc}
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	80002400 	.word	0x80002400
 8006a6c:	fe00e800 	.word	0xfe00e800

08006a70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
  }
}
 8006a9c:	46c0      	nop			@ (mov r8, r8)
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b004      	add	sp, #16
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d010      	beq.n	8006aea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	001a      	movs	r2, r3
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ad2:	d00a      	beq.n	8006aea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad8:	2201      	movs	r2, #1
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2280      	movs	r2, #128	@ 0x80
 8006ae6:	0052      	lsls	r2, r2, #1
 8006ae8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	0a9b      	lsrs	r3, r3, #10
 8006aee:	001a      	movs	r2, r3
 8006af0:	2301      	movs	r3, #1
 8006af2:	4013      	ands	r3, r2
 8006af4:	d010      	beq.n	8006b18 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	09db      	lsrs	r3, r3, #7
 8006afa:	001a      	movs	r2, r3
 8006afc:	2301      	movs	r3, #1
 8006afe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006b00:	d00a      	beq.n	8006b18 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b06:	2208      	movs	r2, #8
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2280      	movs	r2, #128	@ 0x80
 8006b14:	00d2      	lsls	r2, r2, #3
 8006b16:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	0a5b      	lsrs	r3, r3, #9
 8006b1c:	001a      	movs	r2, r3
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d010      	beq.n	8006b46 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	09db      	lsrs	r3, r3, #7
 8006b28:	001a      	movs	r2, r3
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006b2e:	d00a      	beq.n	8006b46 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b34:	2202      	movs	r2, #2
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2280      	movs	r2, #128	@ 0x80
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	220b      	movs	r2, #11
 8006b50:	4013      	ands	r3, r2
 8006b52:	d005      	beq.n	8006b60 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0011      	movs	r1, r2
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 fca6 	bl	80074ac <I2C_ITError>
  }
}
 8006b60:	46c0      	nop			@ (mov r8, r8)
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b006      	add	sp, #24
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b80:	46c0      	nop			@ (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b002      	add	sp, #8
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	0008      	movs	r0, r1
 8006b92:	0011      	movs	r1, r2
 8006b94:	1cfb      	adds	r3, r7, #3
 8006b96:	1c02      	adds	r2, r0, #0
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	003b      	movs	r3, r7
 8006b9c:	1c0a      	adds	r2, r1, #0
 8006b9e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ba0:	46c0      	nop			@ (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006bb0:	46c0      	nop			@ (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b002      	add	sp, #8
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bc0:	46c0      	nop			@ (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bd0:	46c0      	nop			@ (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2240      	movs	r2, #64	@ 0x40
 8006bf2:	5c9b      	ldrb	r3, [r3, r2]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <I2C_Slave_ISR_IT+0x24>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e0fb      	b.n	8006df4 <I2C_Slave_ISR_IT+0x21c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2240      	movs	r2, #64	@ 0x40
 8006c00:	2101      	movs	r1, #1
 8006c02:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	001a      	movs	r2, r3
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d00c      	beq.n	8006c2a <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	001a      	movs	r2, r3
 8006c16:	2301      	movs	r3, #1
 8006c18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c1a:	d006      	beq.n	8006c2a <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	0011      	movs	r1, r2
 8006c22:	0018      	movs	r0, r3
 8006c24:	f000 fa58 	bl	80070d8 <I2C_ITSlaveCplt>
 8006c28:	e0df      	b.n	8006dea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	001a      	movs	r2, r3
 8006c30:	2301      	movs	r3, #1
 8006c32:	4013      	ands	r3, r2
 8006c34:	d054      	beq.n	8006ce0 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c40:	d04e      	beq.n	8006ce0 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d12d      	bne.n	8006ca8 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2241      	movs	r2, #65	@ 0x41
 8006c50:	5c9b      	ldrb	r3, [r3, r2]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b28      	cmp	r3, #40	@ 0x28
 8006c56:	d10b      	bne.n	8006c70 <I2C_Slave_ISR_IT+0x98>
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	2380      	movs	r3, #128	@ 0x80
 8006c5c:	049b      	lsls	r3, r3, #18
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d106      	bne.n	8006c70 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	0011      	movs	r1, r2
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 fbc5 	bl	80073f8 <I2C_ITListenCplt>
 8006c6e:	e036      	b.n	8006cde <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2241      	movs	r2, #65	@ 0x41
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b29      	cmp	r3, #41	@ 0x29
 8006c7a:	d110      	bne.n	8006c9e <I2C_Slave_ISR_IT+0xc6>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8006dfc <I2C_Slave_ISR_IT+0x224>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00c      	beq.n	8006c9e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 fd37 	bl	8007702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 f9b8 	bl	800700c <I2C_ITSlaveSeqCplt>
 8006c9c:	e01f      	b.n	8006cde <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006ca6:	e09d      	b.n	8006de4 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2210      	movs	r2, #16
 8006cae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <I2C_Slave_ISR_IT+0xf6>
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	2380      	movs	r3, #128	@ 0x80
 8006cc6:	045b      	lsls	r3, r3, #17
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d000      	beq.n	8006cce <I2C_Slave_ISR_IT+0xf6>
 8006ccc:	e08a      	b.n	8006de4 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	0011      	movs	r1, r2
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 fbe8 	bl	80074ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006cdc:	e082      	b.n	8006de4 <I2C_Slave_ISR_IT+0x20c>
 8006cde:	e081      	b.n	8006de4 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d031      	beq.n	8006d50 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006cf6:	d02b      	beq.n	8006d50 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d018      	beq.n	8006d34 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d154      	bne.n	8006de8 <I2C_Slave_ISR_IT+0x210>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4a2e      	ldr	r2, [pc, #184]	@ (8006dfc <I2C_Slave_ISR_IT+0x224>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d050      	beq.n	8006de8 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 f95f 	bl	800700c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006d4e:	e04b      	b.n	8006de8 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	08db      	lsrs	r3, r3, #3
 8006d54:	001a      	movs	r2, r3
 8006d56:	2301      	movs	r3, #1
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d00c      	beq.n	8006d76 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	001a      	movs	r2, r3
 8006d62:	2301      	movs	r3, #1
 8006d64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d66:	d006      	beq.n	8006d76 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	0011      	movs	r1, r2
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f8a8 	bl	8006ec4 <I2C_ITAddrCplt>
 8006d74:	e039      	b.n	8006dea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d033      	beq.n	8006dea <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	001a      	movs	r2, r3
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006d8c:	d02d      	beq.n	8006dea <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d018      	beq.n	8006dca <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006dc8:	e00f      	b.n	8006dea <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	045b      	lsls	r3, r3, #17
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d002      	beq.n	8006dda <I2C_Slave_ISR_IT+0x202>
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 f915 	bl	800700c <I2C_ITSlaveSeqCplt>
 8006de2:	e002      	b.n	8006dea <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8006de4:	46c0      	nop			@ (mov r8, r8)
 8006de6:	e000      	b.n	8006dea <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8006de8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2240      	movs	r2, #64	@ 0x40
 8006dee:	2100      	movs	r1, #0
 8006df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b006      	add	sp, #24
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	ffff0000 	.word	0xffff0000

08006e00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e00:	b5b0      	push	{r4, r5, r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	000c      	movs	r4, r1
 8006e0a:	0010      	movs	r0, r2
 8006e0c:	0019      	movs	r1, r3
 8006e0e:	250a      	movs	r5, #10
 8006e10:	197b      	adds	r3, r7, r5
 8006e12:	1c22      	adds	r2, r4, #0
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	2308      	movs	r3, #8
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	1c02      	adds	r2, r0, #0
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	1dbb      	adds	r3, r7, #6
 8006e20:	1c0a      	adds	r2, r1, #0
 8006e22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e24:	1dbb      	adds	r3, r7, #6
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	197b      	adds	r3, r7, r5
 8006e2c:	8819      	ldrh	r1, [r3, #0]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	4b23      	ldr	r3, [pc, #140]	@ (8006ec0 <I2C_RequestMemoryRead+0xc0>)
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	f000 ff1d 	bl	8007c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e3c:	6a39      	ldr	r1, [r7, #32]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 fcf7 	bl	8007834 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e46:	1e03      	subs	r3, r0, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e033      	b.n	8006eb6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4e:	1dbb      	adds	r3, r7, #6
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d107      	bne.n	8006e66 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e56:	2308      	movs	r3, #8
 8006e58:	18fb      	adds	r3, r7, r3
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e64:	e019      	b.n	8006e9a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e66:	2308      	movs	r3, #8
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7a:	6a39      	ldr	r1, [r7, #32]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fcd8 	bl	8007834 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e84:	1e03      	subs	r3, r0, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e014      	b.n	8006eb6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	0013      	movs	r3, r2
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2140      	movs	r1, #64	@ 0x40
 8006ea8:	f000 fc6c 	bl	8007784 <I2C_WaitOnFlagUntilTimeout>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d001      	beq.n	8006eb4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	80002000 	.word	0x80002000

08006ec4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ec4:	b5b0      	push	{r4, r5, r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2241      	movs	r2, #65	@ 0x41
 8006ed2:	5c9b      	ldrb	r3, [r3, r2]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	001a      	movs	r2, r3
 8006ed8:	2328      	movs	r3, #40	@ 0x28
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b28      	cmp	r3, #40	@ 0x28
 8006ede:	d000      	beq.n	8006ee2 <I2C_ITAddrCplt+0x1e>
 8006ee0:	e088      	b.n	8006ff4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	250f      	movs	r5, #15
 8006eee:	197b      	adds	r3, r7, r5
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	200c      	movs	r0, #12
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	21fe      	movs	r1, #254	@ 0xfe
 8006f06:	400a      	ands	r2, r1
 8006f08:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	240a      	movs	r4, #10
 8006f14:	193b      	adds	r3, r7, r4
 8006f16:	0592      	lsls	r2, r2, #22
 8006f18:	0d92      	lsrs	r2, r2, #22
 8006f1a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	2308      	movs	r3, #8
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	21fe      	movs	r1, #254	@ 0xfe
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d148      	bne.n	8006fc8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f36:	0021      	movs	r1, r4
 8006f38:	187b      	adds	r3, r7, r1
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	09db      	lsrs	r3, r3, #7
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	183b      	adds	r3, r7, r0
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	4053      	eors	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	001a      	movs	r2, r3
 8006f4a:	2306      	movs	r3, #6
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d120      	bne.n	8006f92 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006f50:	183b      	adds	r3, r7, r0
 8006f52:	187a      	adds	r2, r7, r1
 8006f54:	8812      	ldrh	r2, [r2, #0]
 8006f56:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d14c      	bne.n	8007004 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2240      	movs	r2, #64	@ 0x40
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f80:	183b      	adds	r3, r7, r0
 8006f82:	881a      	ldrh	r2, [r3, #0]
 8006f84:	197b      	adds	r3, r7, r5
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7ff fdfc 	bl	8006b88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f90:	e038      	b.n	8007004 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006f92:	240c      	movs	r4, #12
 8006f94:	193b      	adds	r3, r7, r4
 8006f96:	2208      	movs	r2, #8
 8006f98:	18ba      	adds	r2, r7, r2
 8006f9a:	8812      	ldrh	r2, [r2, #0]
 8006f9c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f9e:	2380      	movs	r3, #128	@ 0x80
 8006fa0:	021a      	lsls	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0011      	movs	r1, r2
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f000 fe9e 	bl	8007ce8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2240      	movs	r2, #64	@ 0x40
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fb4:	193b      	adds	r3, r7, r4
 8006fb6:	881a      	ldrh	r2, [r3, #0]
 8006fb8:	230f      	movs	r3, #15
 8006fba:	18fb      	adds	r3, r7, r3
 8006fbc:	7819      	ldrb	r1, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff fde1 	bl	8006b88 <HAL_I2C_AddrCallback>
}
 8006fc6:	e01d      	b.n	8007004 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	021a      	lsls	r2, r3, #8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0011      	movs	r1, r2
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f000 fe89 	bl	8007ce8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2240      	movs	r2, #64	@ 0x40
 8006fda:	2100      	movs	r1, #0
 8006fdc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fde:	230c      	movs	r3, #12
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	230f      	movs	r3, #15
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	7819      	ldrb	r1, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7ff fdcb 	bl	8006b88 <HAL_I2C_AddrCallback>
}
 8006ff2:	e007      	b.n	8007004 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2240      	movs	r2, #64	@ 0x40
 8007000:	2100      	movs	r1, #0
 8007002:	5499      	strb	r1, [r3, r2]
}
 8007004:	46c0      	nop			@ (mov r8, r8)
 8007006:	46bd      	mov	sp, r7
 8007008:	b004      	add	sp, #16
 800700a:	bdb0      	pop	{r4, r5, r7, pc}

0800700c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2242      	movs	r2, #66	@ 0x42
 8007020:	2100      	movs	r1, #0
 8007022:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0b9b      	lsrs	r3, r3, #14
 8007028:	001a      	movs	r2, r3
 800702a:	2301      	movs	r3, #1
 800702c:	4013      	ands	r3, r2
 800702e:	d008      	beq.n	8007042 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4925      	ldr	r1, [pc, #148]	@ (80070d0 <I2C_ITSlaveSeqCplt+0xc4>)
 800703c:	400a      	ands	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e00d      	b.n	800705e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	0bdb      	lsrs	r3, r3, #15
 8007046:	001a      	movs	r2, r3
 8007048:	2301      	movs	r3, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d007      	beq.n	800705e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	491e      	ldr	r1, [pc, #120]	@ (80070d4 <I2C_ITSlaveSeqCplt+0xc8>)
 800705a:	400a      	ands	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2241      	movs	r2, #65	@ 0x41
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b29      	cmp	r3, #41	@ 0x29
 8007068:	d114      	bne.n	8007094 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2241      	movs	r2, #65	@ 0x41
 800706e:	2128      	movs	r1, #40	@ 0x28
 8007070:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2221      	movs	r2, #33	@ 0x21
 8007076:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2101      	movs	r1, #1
 800707c:	0018      	movs	r0, r3
 800707e:	f000 fe33 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2240      	movs	r2, #64	@ 0x40
 8007086:	2100      	movs	r1, #0
 8007088:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff fd6b 	bl	8006b68 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007092:	e019      	b.n	80070c8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2241      	movs	r2, #65	@ 0x41
 8007098:	5c9b      	ldrb	r3, [r3, r2]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b2a      	cmp	r3, #42	@ 0x2a
 800709e:	d113      	bne.n	80070c8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2241      	movs	r2, #65	@ 0x41
 80070a4:	2128      	movs	r1, #40	@ 0x28
 80070a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2222      	movs	r2, #34	@ 0x22
 80070ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2102      	movs	r1, #2
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 fe18 	bl	8007ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	@ 0x40
 80070bc:	2100      	movs	r1, #0
 80070be:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7ff fd58 	bl	8006b78 <HAL_I2C_SlaveRxCpltCallback>
}
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b004      	add	sp, #16
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	ffffbfff 	.word	0xffffbfff
 80070d4:	ffff7fff 	.word	0xffff7fff

080070d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80070f4:	200b      	movs	r0, #11
 80070f6:	183b      	adds	r3, r7, r0
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	2141      	movs	r1, #65	@ 0x41
 80070fc:	5c52      	ldrb	r2, [r2, r1]
 80070fe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2220      	movs	r2, #32
 8007106:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007108:	183b      	adds	r3, r7, r0
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b21      	cmp	r3, #33	@ 0x21
 800710e:	d003      	beq.n	8007118 <I2C_ITSlaveCplt+0x40>
 8007110:	183b      	adds	r3, r7, r0
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b29      	cmp	r3, #41	@ 0x29
 8007116:	d109      	bne.n	800712c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007118:	4ab0      	ldr	r2, [pc, #704]	@ (80073dc <I2C_ITSlaveCplt+0x304>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	0011      	movs	r1, r2
 800711e:	0018      	movs	r0, r3
 8007120:	f000 fde2 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2221      	movs	r2, #33	@ 0x21
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
 800712a:	e020      	b.n	800716e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800712c:	220b      	movs	r2, #11
 800712e:	18bb      	adds	r3, r7, r2
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b22      	cmp	r3, #34	@ 0x22
 8007134:	d003      	beq.n	800713e <I2C_ITSlaveCplt+0x66>
 8007136:	18bb      	adds	r3, r7, r2
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b2a      	cmp	r3, #42	@ 0x2a
 800713c:	d109      	bne.n	8007152 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800713e:	4aa8      	ldr	r2, [pc, #672]	@ (80073e0 <I2C_ITSlaveCplt+0x308>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0011      	movs	r1, r2
 8007144:	0018      	movs	r0, r3
 8007146:	f000 fdcf 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2222      	movs	r2, #34	@ 0x22
 800714e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007150:	e00d      	b.n	800716e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007152:	230b      	movs	r3, #11
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b28      	cmp	r3, #40	@ 0x28
 800715a:	d108      	bne.n	800716e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800715c:	4aa1      	ldr	r2, [pc, #644]	@ (80073e4 <I2C_ITSlaveCplt+0x30c>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f000 fdc0 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2180      	movs	r1, #128	@ 0x80
 800717a:	0209      	lsls	r1, r1, #8
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4997      	ldr	r1, [pc, #604]	@ (80073e8 <I2C_ITSlaveCplt+0x310>)
 800718c:	400a      	ands	r2, r1
 800718e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0018      	movs	r0, r3
 8007194:	f000 fab5 	bl	8007702 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	0b9b      	lsrs	r3, r3, #14
 800719c:	001a      	movs	r2, r3
 800719e:	2301      	movs	r3, #1
 80071a0:	4013      	ands	r3, r2
 80071a2:	d013      	beq.n	80071cc <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	498f      	ldr	r1, [pc, #572]	@ (80073ec <I2C_ITSlaveCplt+0x314>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d020      	beq.n	80071fe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071ca:	e018      	b.n	80071fe <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	0bdb      	lsrs	r3, r3, #15
 80071d0:	001a      	movs	r2, r3
 80071d2:	2301      	movs	r3, #1
 80071d4:	4013      	ands	r3, r2
 80071d6:	d012      	beq.n	80071fe <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4983      	ldr	r1, [pc, #524]	@ (80073f0 <I2C_ITSlaveCplt+0x318>)
 80071e4:	400a      	ands	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d006      	beq.n	80071fe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	089b      	lsrs	r3, r3, #2
 8007202:	001a      	movs	r2, r3
 8007204:	2301      	movs	r3, #1
 8007206:	4013      	ands	r3, r2
 8007208:	d020      	beq.n	800724c <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2204      	movs	r2, #4
 800720e:	4393      	bics	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725a:	2204      	movs	r2, #4
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	001a      	movs	r2, r3
 8007268:	2301      	movs	r3, #1
 800726a:	4013      	ands	r3, r2
 800726c:	d051      	beq.n	8007312 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	001a      	movs	r2, r3
 8007274:	2301      	movs	r3, #1
 8007276:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007278:	d04b      	beq.n	8007312 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d12d      	bne.n	80072e0 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2241      	movs	r2, #65	@ 0x41
 8007288:	5c9b      	ldrb	r3, [r3, r2]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b28      	cmp	r3, #40	@ 0x28
 800728e:	d10b      	bne.n	80072a8 <I2C_ITSlaveCplt+0x1d0>
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	2380      	movs	r3, #128	@ 0x80
 8007294:	049b      	lsls	r3, r3, #18
 8007296:	429a      	cmp	r2, r3
 8007298:	d106      	bne.n	80072a8 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	0011      	movs	r1, r2
 80072a0:	0018      	movs	r0, r3
 80072a2:	f000 f8a9 	bl	80073f8 <I2C_ITListenCplt>
 80072a6:	e034      	b.n	8007312 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2241      	movs	r2, #65	@ 0x41
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b29      	cmp	r3, #41	@ 0x29
 80072b2:	d110      	bne.n	80072d6 <I2C_ITSlaveCplt+0x1fe>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a4f      	ldr	r2, [pc, #316]	@ (80073f4 <I2C_ITSlaveCplt+0x31c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00c      	beq.n	80072d6 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2210      	movs	r2, #16
 80072c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 fa1b 	bl	8007702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	0018      	movs	r0, r3
 80072d0:	f7ff fe9c 	bl	800700c <I2C_ITSlaveSeqCplt>
 80072d4:	e01d      	b.n	8007312 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2210      	movs	r2, #16
 80072dc:	61da      	str	r2, [r3, #28]
 80072de:	e018      	b.n	8007312 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2210      	movs	r2, #16
 80072e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ec:	2204      	movs	r2, #4
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <I2C_ITSlaveCplt+0x22c>
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	2380      	movs	r3, #128	@ 0x80
 80072fe:	045b      	lsls	r3, r3, #17
 8007300:	429a      	cmp	r2, r3
 8007302:	d106      	bne.n	8007312 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0011      	movs	r1, r2
 800730c:	0018      	movs	r0, r3
 800730e:	f000 f8cd 	bl	80074ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2242      	movs	r2, #66	@ 0x42
 8007316:	2100      	movs	r1, #0
 8007318:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007324:	2b00      	cmp	r3, #0
 8007326:	d013      	beq.n	8007350 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0011      	movs	r1, r2
 8007330:	0018      	movs	r0, r3
 8007332:	f000 f8bb 	bl	80074ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2241      	movs	r2, #65	@ 0x41
 800733a:	5c9b      	ldrb	r3, [r3, r2]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b28      	cmp	r3, #40	@ 0x28
 8007340:	d147      	bne.n	80073d2 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	0011      	movs	r1, r2
 8007348:	0018      	movs	r0, r3
 800734a:	f000 f855 	bl	80073f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800734e:	e040      	b.n	80073d2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	4a27      	ldr	r2, [pc, #156]	@ (80073f4 <I2C_ITSlaveCplt+0x31c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d016      	beq.n	8007388 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0018      	movs	r0, r3
 800735e:	f7ff fe55 	bl	800700c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a23      	ldr	r2, [pc, #140]	@ (80073f4 <I2C_ITSlaveCplt+0x31c>)
 8007366:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2241      	movs	r2, #65	@ 0x41
 800736c:	2120      	movs	r1, #32
 800736e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	@ 0x40
 800737a:	2100      	movs	r1, #0
 800737c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff fc11 	bl	8006ba8 <HAL_I2C_ListenCpltCallback>
}
 8007386:	e024      	b.n	80073d2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2241      	movs	r2, #65	@ 0x41
 800738c:	5c9b      	ldrb	r3, [r3, r2]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b22      	cmp	r3, #34	@ 0x22
 8007392:	d10f      	bne.n	80073b4 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2241      	movs	r2, #65	@ 0x41
 8007398:	2120      	movs	r1, #32
 800739a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2240      	movs	r2, #64	@ 0x40
 80073a6:	2100      	movs	r1, #0
 80073a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7ff fbe3 	bl	8006b78 <HAL_I2C_SlaveRxCpltCallback>
}
 80073b2:	e00e      	b.n	80073d2 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2241      	movs	r2, #65	@ 0x41
 80073b8:	2120      	movs	r1, #32
 80073ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2240      	movs	r2, #64	@ 0x40
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff fbcb 	bl	8006b68 <HAL_I2C_SlaveTxCpltCallback>
}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b006      	add	sp, #24
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			@ (mov r8, r8)
 80073dc:	00008001 	.word	0x00008001
 80073e0:	00008002 	.word	0x00008002
 80073e4:	00008003 	.word	0x00008003
 80073e8:	fe00e800 	.word	0xfe00e800
 80073ec:	ffffbfff 	.word	0xffffbfff
 80073f0:	ffff7fff 	.word	0xffff7fff
 80073f4:	ffff0000 	.word	0xffff0000

080073f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a27      	ldr	r2, [pc, #156]	@ (80074a4 <I2C_ITListenCplt+0xac>)
 8007406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2241      	movs	r2, #65	@ 0x41
 8007412:	2120      	movs	r1, #32
 8007414:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2242      	movs	r2, #66	@ 0x42
 800741a:	2100      	movs	r1, #0
 800741c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	001a      	movs	r2, r3
 800742a:	2301      	movs	r3, #1
 800742c:	4013      	ands	r3, r2
 800742e:	d022      	beq.n	8007476 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d012      	beq.n	8007476 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746e:	2204      	movs	r2, #4
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007476:	4a0c      	ldr	r2, [pc, #48]	@ (80074a8 <I2C_ITListenCplt+0xb0>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0011      	movs	r1, r2
 800747c:	0018      	movs	r0, r3
 800747e:	f000 fc33 	bl	8007ce8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2210      	movs	r2, #16
 8007488:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2240      	movs	r2, #64	@ 0x40
 800748e:	2100      	movs	r1, #0
 8007490:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0018      	movs	r0, r3
 8007496:	f7ff fb87 	bl	8006ba8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b002      	add	sp, #8
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	46c0      	nop			@ (mov r8, r8)
 80074a4:	ffff0000 	.word	0xffff0000
 80074a8:	00008003 	.word	0x00008003

080074ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80074b6:	200f      	movs	r0, #15
 80074b8:	183b      	adds	r3, r7, r0
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	2141      	movs	r1, #65	@ 0x41
 80074be:	5c52      	ldrb	r2, [r2, r1]
 80074c0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2242      	movs	r2, #66	@ 0x42
 80074c6:	2100      	movs	r1, #0
 80074c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a72      	ldr	r2, [pc, #456]	@ (8007698 <I2C_ITError+0x1ec>)
 80074ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80074e2:	183b      	adds	r3, r7, r0
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b28      	cmp	r3, #40	@ 0x28
 80074e8:	d007      	beq.n	80074fa <I2C_ITError+0x4e>
 80074ea:	183b      	adds	r3, r7, r0
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b29      	cmp	r3, #41	@ 0x29
 80074f0:	d003      	beq.n	80074fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80074f2:	183b      	adds	r3, r7, r0
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f8:	d10c      	bne.n	8007514 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2103      	movs	r1, #3
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 fbf2 	bl	8007ce8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2241      	movs	r2, #65	@ 0x41
 8007508:	2128      	movs	r1, #40	@ 0x28
 800750a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a63      	ldr	r2, [pc, #396]	@ (800769c <I2C_ITError+0x1f0>)
 8007510:	635a      	str	r2, [r3, #52]	@ 0x34
 8007512:	e032      	b.n	800757a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007514:	4a62      	ldr	r2, [pc, #392]	@ (80076a0 <I2C_ITError+0x1f4>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	0011      	movs	r1, r2
 800751a:	0018      	movs	r0, r3
 800751c:	f000 fbe4 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	0018      	movs	r0, r3
 8007524:	f000 f8ed 	bl	8007702 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2241      	movs	r2, #65	@ 0x41
 800752c:	5c9b      	ldrb	r3, [r3, r2]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b60      	cmp	r3, #96	@ 0x60
 8007532:	d01f      	beq.n	8007574 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2241      	movs	r2, #65	@ 0x41
 8007538:	2120      	movs	r1, #32
 800753a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2220      	movs	r2, #32
 8007544:	4013      	ands	r3, r2
 8007546:	2b20      	cmp	r3, #32
 8007548:	d114      	bne.n	8007574 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2210      	movs	r2, #16
 8007552:	4013      	ands	r3, r2
 8007554:	2b10      	cmp	r3, #16
 8007556:	d109      	bne.n	800756c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2210      	movs	r2, #16
 800755e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	2204      	movs	r2, #4
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2220      	movs	r2, #32
 8007572:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	d03b      	beq.n	8007600 <I2C_ITError+0x154>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b11      	cmp	r3, #17
 800758c:	d002      	beq.n	8007594 <I2C_ITError+0xe8>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b21      	cmp	r3, #33	@ 0x21
 8007592:	d135      	bne.n	8007600 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	01db      	lsls	r3, r3, #7
 800759e:	401a      	ands	r2, r3
 80075a0:	2380      	movs	r3, #128	@ 0x80
 80075a2:	01db      	lsls	r3, r3, #7
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d107      	bne.n	80075b8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	493c      	ldr	r1, [pc, #240]	@ (80076a4 <I2C_ITError+0x1f8>)
 80075b4:	400a      	ands	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	0018      	movs	r0, r3
 80075be:	f7fe fc1d 	bl	8005dfc <HAL_DMA_GetState>
 80075c2:	0003      	movs	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d016      	beq.n	80075f6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	4a36      	ldr	r2, [pc, #216]	@ (80076a8 <I2C_ITError+0x1fc>)
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2240      	movs	r2, #64	@ 0x40
 80075d4:	2100      	movs	r1, #0
 80075d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	0018      	movs	r0, r3
 80075de:	f7fe faf1 	bl	8005bc4 <HAL_DMA_Abort_IT>
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d051      	beq.n	800768a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	0018      	movs	r0, r3
 80075f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075f4:	e049      	b.n	800768a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0018      	movs	r0, r3
 80075fa:	f000 f859 	bl	80076b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075fe:	e044      	b.n	800768a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d03b      	beq.n	8007680 <I2C_ITError+0x1d4>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b12      	cmp	r3, #18
 800760c:	d002      	beq.n	8007614 <I2C_ITError+0x168>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b22      	cmp	r3, #34	@ 0x22
 8007612:	d135      	bne.n	8007680 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	2380      	movs	r3, #128	@ 0x80
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	401a      	ands	r2, r3
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	429a      	cmp	r2, r3
 8007626:	d107      	bne.n	8007638 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	491e      	ldr	r1, [pc, #120]	@ (80076ac <I2C_ITError+0x200>)
 8007634:	400a      	ands	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763c:	0018      	movs	r0, r3
 800763e:	f7fe fbdd 	bl	8005dfc <HAL_DMA_GetState>
 8007642:	0003      	movs	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d016      	beq.n	8007676 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764c:	4a16      	ldr	r2, [pc, #88]	@ (80076a8 <I2C_ITError+0x1fc>)
 800764e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2240      	movs	r2, #64	@ 0x40
 8007654:	2100      	movs	r1, #0
 8007656:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765c:	0018      	movs	r0, r3
 800765e:	f7fe fab1 	bl	8005bc4 <HAL_DMA_Abort_IT>
 8007662:	1e03      	subs	r3, r0, #0
 8007664:	d013      	beq.n	800768e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	0018      	movs	r0, r3
 8007672:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007674:	e00b      	b.n	800768e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 f819 	bl	80076b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800767e:	e006      	b.n	800768e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	0018      	movs	r0, r3
 8007684:	f000 f814 	bl	80076b0 <I2C_TreatErrorCallback>
  }
}
 8007688:	e002      	b.n	8007690 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	e000      	b.n	8007690 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800768e:	46c0      	nop			@ (mov r8, r8)
}
 8007690:	46c0      	nop			@ (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b004      	add	sp, #16
 8007696:	bd80      	pop	{r7, pc}
 8007698:	ffff0000 	.word	0xffff0000
 800769c:	08006bd9 	.word	0x08006bd9
 80076a0:	00008003 	.word	0x00008003
 80076a4:	ffffbfff 	.word	0xffffbfff
 80076a8:	08007747 	.word	0x08007747
 80076ac:	ffff7fff 	.word	0xffff7fff

080076b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2241      	movs	r2, #65	@ 0x41
 80076bc:	5c9b      	ldrb	r3, [r3, r2]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b60      	cmp	r3, #96	@ 0x60
 80076c2:	d10f      	bne.n	80076e4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2241      	movs	r2, #65	@ 0x41
 80076c8:	2120      	movs	r1, #32
 80076ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2240      	movs	r2, #64	@ 0x40
 80076d6:	2100      	movs	r1, #0
 80076d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	0018      	movs	r0, r3
 80076de:	f7ff fa73 	bl	8006bc8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076e2:	e00a      	b.n	80076fa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2240      	movs	r2, #64	@ 0x40
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f7ff fa5f 	bl	8006bb8 <HAL_I2C_ErrorCallback>
}
 80076fa:	46c0      	nop			@ (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b002      	add	sp, #8
 8007700:	bd80      	pop	{r7, pc}

08007702 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	2202      	movs	r2, #2
 8007712:	4013      	ands	r3, r2
 8007714:	2b02      	cmp	r3, #2
 8007716:	d103      	bne.n	8007720 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2201      	movs	r2, #1
 8007728:	4013      	ands	r3, r2
 800772a:	2b01      	cmp	r3, #1
 800772c:	d007      	beq.n	800773e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2101      	movs	r1, #1
 800773a:	430a      	orrs	r2, r1
 800773c:	619a      	str	r2, [r3, #24]
  }
}
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b002      	add	sp, #8
 8007744:	bd80      	pop	{r7, pc}

08007746 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	2200      	movs	r2, #0
 8007762:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007770:	2200      	movs	r2, #0
 8007772:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0018      	movs	r0, r3
 8007778:	f7ff ff9a 	bl	80076b0 <I2C_TreatErrorCallback>
}
 800777c:	46c0      	nop			@ (mov r8, r8)
 800777e:	46bd      	mov	sp, r7
 8007780:	b004      	add	sp, #16
 8007782:	bd80      	pop	{r7, pc}

08007784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	1dfb      	adds	r3, r7, #7
 8007792:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007794:	e03a      	b.n	800780c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f971 	bl	8007a84 <I2C_IsErrorOccurred>
 80077a2:	1e03      	subs	r3, r0, #0
 80077a4:	d001      	beq.n	80077aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e040      	b.n	800782c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	d02d      	beq.n	800780c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b0:	f7fd fab2 	bl	8004d18 <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d302      	bcc.n	80077c6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d122      	bne.n	800780c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	4013      	ands	r3, r2
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	425a      	negs	r2, r3
 80077d6:	4153      	adcs	r3, r2
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	001a      	movs	r2, r3
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d113      	bne.n	800780c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e8:	2220      	movs	r2, #32
 80077ea:	431a      	orrs	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2241      	movs	r2, #65	@ 0x41
 80077f4:	2120      	movs	r1, #32
 80077f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2242      	movs	r2, #66	@ 0x42
 80077fc:	2100      	movs	r1, #0
 80077fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2240      	movs	r2, #64	@ 0x40
 8007804:	2100      	movs	r1, #0
 8007806:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e00f      	b.n	800782c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	4013      	ands	r3, r2
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	425a      	negs	r2, r3
 800781c:	4153      	adcs	r3, r2
 800781e:	b2db      	uxtb	r3, r3
 8007820:	001a      	movs	r2, r3
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d0b5      	beq.n	8007796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	0018      	movs	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	b004      	add	sp, #16
 8007832:	bd80      	pop	{r7, pc}

08007834 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007840:	e032      	b.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0018      	movs	r0, r3
 800784a:	f000 f91b 	bl	8007a84 <I2C_IsErrorOccurred>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d001      	beq.n	8007856 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e030      	b.n	80078b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3301      	adds	r3, #1
 800785a:	d025      	beq.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785c:	f7fd fa5c 	bl	8004d18 <HAL_GetTick>
 8007860:	0002      	movs	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d11a      	bne.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2202      	movs	r2, #2
 800787a:	4013      	ands	r3, r2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d013      	beq.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007884:	2220      	movs	r2, #32
 8007886:	431a      	orrs	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2241      	movs	r2, #65	@ 0x41
 8007890:	2120      	movs	r1, #32
 8007892:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2242      	movs	r2, #66	@ 0x42
 8007898:	2100      	movs	r1, #0
 800789a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2240      	movs	r2, #64	@ 0x40
 80078a0:	2100      	movs	r1, #0
 80078a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e007      	b.n	80078b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2202      	movs	r2, #2
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d1c5      	bne.n	8007842 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b004      	add	sp, #16
 80078be:	bd80      	pop	{r7, pc}

080078c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078cc:	e02f      	b.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 f8d5 	bl	8007a84 <I2C_IsErrorOccurred>
 80078da:	1e03      	subs	r3, r0, #0
 80078dc:	d001      	beq.n	80078e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e02d      	b.n	800793e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e2:	f7fd fa19 	bl	8004d18 <HAL_GetTick>
 80078e6:	0002      	movs	r2, r0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11a      	bne.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	2220      	movs	r2, #32
 8007900:	4013      	ands	r3, r2
 8007902:	2b20      	cmp	r3, #32
 8007904:	d013      	beq.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	2220      	movs	r2, #32
 800790c:	431a      	orrs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2241      	movs	r2, #65	@ 0x41
 8007916:	2120      	movs	r1, #32
 8007918:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2242      	movs	r2, #66	@ 0x42
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2240      	movs	r2, #64	@ 0x40
 8007926:	2100      	movs	r1, #0
 8007928:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e007      	b.n	800793e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2220      	movs	r2, #32
 8007936:	4013      	ands	r3, r2
 8007938:	2b20      	cmp	r3, #32
 800793a:	d1c8      	bne.n	80078ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	0018      	movs	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	b004      	add	sp, #16
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007954:	2317      	movs	r3, #23
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800795c:	e07b      	b.n	8007a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	0018      	movs	r0, r3
 8007966:	f000 f88d 	bl	8007a84 <I2C_IsErrorOccurred>
 800796a:	1e03      	subs	r3, r0, #0
 800796c:	d003      	beq.n	8007976 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800796e:	2317      	movs	r3, #23
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2220      	movs	r2, #32
 800797e:	4013      	ands	r3, r2
 8007980:	2b20      	cmp	r3, #32
 8007982:	d140      	bne.n	8007a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007984:	2117      	movs	r1, #23
 8007986:	187b      	adds	r3, r7, r1
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d13b      	bne.n	8007a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2204      	movs	r2, #4
 8007996:	4013      	ands	r3, r2
 8007998:	2b04      	cmp	r3, #4
 800799a:	d106      	bne.n	80079aa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80079a4:	187b      	adds	r3, r7, r1
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2210      	movs	r2, #16
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d123      	bne.n	8007a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2210      	movs	r2, #16
 80079be:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2204      	movs	r2, #4
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2220      	movs	r2, #32
 80079cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4929      	ldr	r1, [pc, #164]	@ (8007a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80079da:	400a      	ands	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2241      	movs	r2, #65	@ 0x41
 80079e2:	2120      	movs	r1, #32
 80079e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2242      	movs	r2, #66	@ 0x42
 80079ea:	2100      	movs	r1, #0
 80079ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2240      	movs	r2, #64	@ 0x40
 80079f2:	2100      	movs	r1, #0
 80079f4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80079f6:	2317      	movs	r3, #23
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e002      	b.n	8007a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007a06:	f7fd f987 	bl	8004d18 <HAL_GetTick>
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d11c      	bne.n	8007a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8007a1c:	2017      	movs	r0, #23
 8007a1e:	183b      	adds	r3, r7, r0
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d117      	bne.n	8007a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d010      	beq.n	8007a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a38:	2220      	movs	r2, #32
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2241      	movs	r2, #65	@ 0x41
 8007a44:	2120      	movs	r1, #32
 8007a46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2240      	movs	r2, #64	@ 0x40
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007a50:	183b      	adds	r3, r7, r0
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d005      	beq.n	8007a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007a64:	2317      	movs	r3, #23
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d100      	bne.n	8007a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007a6e:	e776      	b.n	800795e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007a70:	2317      	movs	r3, #23
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	781b      	ldrb	r3, [r3, #0]
}
 8007a76:	0018      	movs	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b006      	add	sp, #24
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	fe00e800 	.word	0xfe00e800

08007a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	@ 0x28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a90:	2327      	movs	r3, #39	@ 0x27
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	4013      	ands	r3, r2
 8007aae:	d100      	bne.n	8007ab2 <I2C_IsErrorOccurred+0x2e>
 8007ab0:	e079      	b.n	8007ba6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007aba:	e057      	b.n	8007b6c <I2C_IsErrorOccurred+0xe8>
 8007abc:	2227      	movs	r2, #39	@ 0x27
 8007abe:	18bb      	adds	r3, r7, r2
 8007ac0:	18ba      	adds	r2, r7, r2
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	d04f      	beq.n	8007b6c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007acc:	f7fd f924 	bl	8004d18 <HAL_GetTick>
 8007ad0:	0002      	movs	r2, r0
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <I2C_IsErrorOccurred+0x5e>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d144      	bne.n	8007b6c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	2380      	movs	r3, #128	@ 0x80
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	4013      	ands	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007af0:	2013      	movs	r0, #19
 8007af2:	183b      	adds	r3, r7, r0
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	2142      	movs	r1, #66	@ 0x42
 8007af8:	5c52      	ldrb	r2, [r2, r1]
 8007afa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	2380      	movs	r3, #128	@ 0x80
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	401a      	ands	r2, r3
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d126      	bne.n	8007b5e <I2C_IsErrorOccurred+0xda>
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	2380      	movs	r3, #128	@ 0x80
 8007b14:	01db      	lsls	r3, r3, #7
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d021      	beq.n	8007b5e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007b1a:	183b      	adds	r3, r7, r0
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d01d      	beq.n	8007b5e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2180      	movs	r1, #128	@ 0x80
 8007b2e:	01c9      	lsls	r1, r1, #7
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b34:	f7fd f8f0 	bl	8004d18 <HAL_GetTick>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b3c:	e00f      	b.n	8007b5e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b3e:	f7fd f8eb 	bl	8004d18 <HAL_GetTick>
 8007b42:	0002      	movs	r2, r0
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b19      	cmp	r3, #25
 8007b4a:	d908      	bls.n	8007b5e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	4313      	orrs	r3, r2
 8007b52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b54:	2327      	movs	r3, #39	@ 0x27
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2201      	movs	r2, #1
 8007b5a:	701a      	strb	r2, [r3, #0]

              break;
 8007b5c:	e006      	b.n	8007b6c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2220      	movs	r2, #32
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d1e8      	bne.n	8007b3e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2220      	movs	r2, #32
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d004      	beq.n	8007b84 <I2C_IsErrorOccurred+0x100>
 8007b7a:	2327      	movs	r3, #39	@ 0x27
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d09b      	beq.n	8007abc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b84:	2327      	movs	r3, #39	@ 0x27
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2220      	movs	r2, #32
 8007b94:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b9e:	2327      	movs	r3, #39	@ 0x27
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	2380      	movs	r3, #128	@ 0x80
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d00c      	beq.n	8007bd2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2280      	movs	r2, #128	@ 0x80
 8007bc6:	0052      	lsls	r2, r2, #1
 8007bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bca:	2327      	movs	r3, #39	@ 0x27
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2201      	movs	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	2380      	movs	r3, #128	@ 0x80
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d00c      	beq.n	8007bf6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2208      	movs	r2, #8
 8007be0:	4313      	orrs	r3, r2
 8007be2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2280      	movs	r2, #128	@ 0x80
 8007bea:	00d2      	lsls	r2, r2, #3
 8007bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bee:	2327      	movs	r3, #39	@ 0x27
 8007bf0:	18fb      	adds	r3, r7, r3
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	2380      	movs	r3, #128	@ 0x80
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d00c      	beq.n	8007c1a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	2202      	movs	r2, #2
 8007c04:	4313      	orrs	r3, r2
 8007c06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2280      	movs	r2, #128	@ 0x80
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c12:	2327      	movs	r3, #39	@ 0x27
 8007c14:	18fb      	adds	r3, r7, r3
 8007c16:	2201      	movs	r2, #1
 8007c18:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007c1a:	2327      	movs	r3, #39	@ 0x27
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01d      	beq.n	8007c60 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	0018      	movs	r0, r3
 8007c28:	f7ff fd6b 	bl	8007702 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	490e      	ldr	r1, [pc, #56]	@ (8007c70 <I2C_IsErrorOccurred+0x1ec>)
 8007c38:	400a      	ands	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2241      	movs	r2, #65	@ 0x41
 8007c4c:	2120      	movs	r1, #32
 8007c4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2242      	movs	r2, #66	@ 0x42
 8007c54:	2100      	movs	r1, #0
 8007c56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2240      	movs	r2, #64	@ 0x40
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007c60:	2327      	movs	r3, #39	@ 0x27
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	781b      	ldrb	r3, [r3, #0]
}
 8007c66:	0018      	movs	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b00a      	add	sp, #40	@ 0x28
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	46c0      	nop			@ (mov r8, r8)
 8007c70:	fe00e800 	.word	0xfe00e800

08007c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	0008      	movs	r0, r1
 8007c7e:	0011      	movs	r1, r2
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	240a      	movs	r4, #10
 8007c84:	193b      	adds	r3, r7, r4
 8007c86:	1c02      	adds	r2, r0, #0
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	2009      	movs	r0, #9
 8007c8c:	183b      	adds	r3, r7, r0
 8007c8e:	1c0a      	adds	r2, r1, #0
 8007c90:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c92:	193b      	adds	r3, r7, r4
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	059b      	lsls	r3, r3, #22
 8007c98:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c9a:	183b      	adds	r3, r7, r0
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	0419      	lsls	r1, r3, #16
 8007ca0:	23ff      	movs	r3, #255	@ 0xff
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ca6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cbe:	0d51      	lsrs	r1, r2, #21
 8007cc0:	2280      	movs	r2, #128	@ 0x80
 8007cc2:	00d2      	lsls	r2, r2, #3
 8007cc4:	400a      	ands	r2, r1
 8007cc6:	4907      	ldr	r1, [pc, #28]	@ (8007ce4 <I2C_TransferConfig+0x70>)
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	43d2      	mvns	r2, r2
 8007ccc:	401a      	ands	r2, r3
 8007cce:	0011      	movs	r1, r2
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b007      	add	sp, #28
 8007ce0:	bd90      	pop	{r4, r7, pc}
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	03ff63ff 	.word	0x03ff63ff

08007ce8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	000a      	movs	r2, r1
 8007cf2:	1cbb      	adds	r3, r7, #2
 8007cf4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cfa:	1cbb      	adds	r3, r7, #2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4013      	ands	r3, r2
 8007d02:	d010      	beq.n	8007d26 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2242      	movs	r2, #66	@ 0x42
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2241      	movs	r2, #65	@ 0x41
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	001a      	movs	r2, r3
 8007d16:	2328      	movs	r3, #40	@ 0x28
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b28      	cmp	r3, #40	@ 0x28
 8007d1c:	d003      	beq.n	8007d26 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	22b0      	movs	r2, #176	@ 0xb0
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d26:	1cbb      	adds	r3, r7, #2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d010      	beq.n	8007d52 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2244      	movs	r2, #68	@ 0x44
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2241      	movs	r2, #65	@ 0x41
 8007d3c:	5c9b      	ldrb	r3, [r3, r2]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	001a      	movs	r2, r3
 8007d42:	2328      	movs	r3, #40	@ 0x28
 8007d44:	4013      	ands	r3, r2
 8007d46:	2b28      	cmp	r3, #40	@ 0x28
 8007d48:	d003      	beq.n	8007d52 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22b0      	movs	r2, #176	@ 0xb0
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d52:	1cbb      	adds	r3, r7, #2
 8007d54:	2200      	movs	r2, #0
 8007d56:	5e9b      	ldrsh	r3, [r3, r2]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da03      	bge.n	8007d64 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	22b8      	movs	r2, #184	@ 0xb8
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d64:	1cbb      	adds	r3, r7, #2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d103      	bne.n	8007d74 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2290      	movs	r2, #144	@ 0x90
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d74:	1cbb      	adds	r3, r7, #2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d103      	bne.n	8007d84 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d84:	1cbb      	adds	r3, r7, #2
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	2b40      	cmp	r3, #64	@ 0x40
 8007d8a:	d103      	bne.n	8007d94 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2240      	movs	r2, #64	@ 0x40
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	43d9      	mvns	r1, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	400a      	ands	r2, r1
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	46c0      	nop			@ (mov r8, r8)
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b004      	add	sp, #16
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2241      	movs	r2, #65	@ 0x41
 8007dbe:	5c9b      	ldrb	r3, [r3, r2]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d138      	bne.n	8007e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2240      	movs	r2, #64	@ 0x40
 8007dca:	5c9b      	ldrb	r3, [r3, r2]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e032      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2240      	movs	r2, #64	@ 0x40
 8007dd8:	2101      	movs	r1, #1
 8007dda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2241      	movs	r2, #65	@ 0x41
 8007de0:	2124      	movs	r1, #36	@ 0x24
 8007de2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2101      	movs	r1, #1
 8007df0:	438a      	bics	r2, r1
 8007df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007e00:	400a      	ands	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	430a      	orrs	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2241      	movs	r2, #65	@ 0x41
 8007e28:	2120      	movs	r1, #32
 8007e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	2100      	movs	r1, #0
 8007e32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	b002      	add	sp, #8
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	ffffefff 	.word	0xffffefff

08007e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2241      	movs	r2, #65	@ 0x41
 8007e56:	5c9b      	ldrb	r3, [r3, r2]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d139      	bne.n	8007ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	5c9b      	ldrb	r3, [r3, r2]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e033      	b.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	2101      	movs	r1, #1
 8007e72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2241      	movs	r2, #65	@ 0x41
 8007e78:	2124      	movs	r1, #36	@ 0x24
 8007e7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2101      	movs	r1, #1
 8007e88:	438a      	bics	r2, r1
 8007e8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a11      	ldr	r2, [pc, #68]	@ (8007edc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2101      	movs	r1, #1
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2241      	movs	r2, #65	@ 0x41
 8007ec2:	2120      	movs	r1, #32
 8007ec4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2240      	movs	r2, #64	@ 0x40
 8007eca:	2100      	movs	r1, #0
 8007ecc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b004      	add	sp, #16
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	fffff0ff 	.word	0xfffff0ff

08007ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007ee8:	4b19      	ldr	r3, [pc, #100]	@ (8007f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a19      	ldr	r2, [pc, #100]	@ (8007f54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	0019      	movs	r1, r3
 8007ef2:	4b17      	ldr	r3, [pc, #92]	@ (8007f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	2380      	movs	r3, #128	@ 0x80
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d11f      	bne.n	8007f44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007f04:	4b14      	ldr	r3, [pc, #80]	@ (8007f58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	0013      	movs	r3, r2
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	189b      	adds	r3, r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	4912      	ldr	r1, [pc, #72]	@ (8007f5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7f8 f910 	bl	8000138 <__udivsi3>
 8007f18:	0003      	movs	r3, r0
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f1e:	e008      	b.n	8007f32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e001      	b.n	8007f32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e009      	b.n	8007f46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f32:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	2380      	movs	r3, #128	@ 0x80
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	401a      	ands	r2, r3
 8007f3c:	2380      	movs	r3, #128	@ 0x80
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d0ed      	beq.n	8007f20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	0018      	movs	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b004      	add	sp, #16
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	46c0      	nop			@ (mov r8, r8)
 8007f50:	40007000 	.word	0x40007000
 8007f54:	fffff9ff 	.word	0xfffff9ff
 8007f58:	20000010 	.word	0x20000010
 8007f5c:	000f4240 	.word	0x000f4240

08007f60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007f64:	4b03      	ldr	r3, [pc, #12]	@ (8007f74 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	23e0      	movs	r3, #224	@ 0xe0
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	4013      	ands	r3, r2
}
 8007f6e:	0018      	movs	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40021000 	.word	0x40021000

08007f78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e2f3      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4013      	ands	r3, r2
 8007f92:	d100      	bne.n	8007f96 <HAL_RCC_OscConfig+0x1e>
 8007f94:	e07c      	b.n	8008090 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f96:	4bc3      	ldr	r3, [pc, #780]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2238      	movs	r2, #56	@ 0x38
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fa0:	4bc0      	ldr	r3, [pc, #768]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d102      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x3e>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d002      	beq.n	8007fbc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d10b      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fbc:	4bb9      	ldr	r3, [pc, #740]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	029b      	lsls	r3, r3, #10
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	d062      	beq.n	800808e <HAL_RCC_OscConfig+0x116>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d15e      	bne.n	800808e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e2ce      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	2380      	movs	r3, #128	@ 0x80
 8007fda:	025b      	lsls	r3, r3, #9
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x78>
 8007fe0:	4bb0      	ldr	r3, [pc, #704]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	4baf      	ldr	r3, [pc, #700]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007fe6:	2180      	movs	r1, #128	@ 0x80
 8007fe8:	0249      	lsls	r1, r1, #9
 8007fea:	430a      	orrs	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e020      	b.n	8008032 <HAL_RCC_OscConfig+0xba>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	23a0      	movs	r3, #160	@ 0xa0
 8007ff6:	02db      	lsls	r3, r3, #11
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d10e      	bne.n	800801a <HAL_RCC_OscConfig+0xa2>
 8007ffc:	4ba9      	ldr	r3, [pc, #676]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4ba8      	ldr	r3, [pc, #672]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008002:	2180      	movs	r1, #128	@ 0x80
 8008004:	02c9      	lsls	r1, r1, #11
 8008006:	430a      	orrs	r2, r1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	4ba6      	ldr	r3, [pc, #664]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4ba5      	ldr	r3, [pc, #660]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008010:	2180      	movs	r1, #128	@ 0x80
 8008012:	0249      	lsls	r1, r1, #9
 8008014:	430a      	orrs	r2, r1
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	e00b      	b.n	8008032 <HAL_RCC_OscConfig+0xba>
 800801a:	4ba2      	ldr	r3, [pc, #648]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4ba1      	ldr	r3, [pc, #644]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008020:	49a1      	ldr	r1, [pc, #644]	@ (80082a8 <HAL_RCC_OscConfig+0x330>)
 8008022:	400a      	ands	r2, r1
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	4b9f      	ldr	r3, [pc, #636]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4b9e      	ldr	r3, [pc, #632]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800802c:	499f      	ldr	r1, [pc, #636]	@ (80082ac <HAL_RCC_OscConfig+0x334>)
 800802e:	400a      	ands	r2, r1
 8008030:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d014      	beq.n	8008064 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803a:	f7fc fe6d 	bl	8004d18 <HAL_GetTick>
 800803e:	0003      	movs	r3, r0
 8008040:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008044:	f7fc fe68 	bl	8004d18 <HAL_GetTick>
 8008048:	0002      	movs	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b64      	cmp	r3, #100	@ 0x64
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e28d      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008056:	4b93      	ldr	r3, [pc, #588]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	2380      	movs	r3, #128	@ 0x80
 800805c:	029b      	lsls	r3, r3, #10
 800805e:	4013      	ands	r3, r2
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0xcc>
 8008062:	e015      	b.n	8008090 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fc fe58 	bl	8004d18 <HAL_GetTick>
 8008068:	0003      	movs	r3, r0
 800806a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800806e:	f7fc fe53 	bl	8004d18 <HAL_GetTick>
 8008072:	0002      	movs	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b64      	cmp	r3, #100	@ 0x64
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e278      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008080:	4b88      	ldr	r3, [pc, #544]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	2380      	movs	r3, #128	@ 0x80
 8008086:	029b      	lsls	r3, r3, #10
 8008088:	4013      	ands	r3, r2
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0xf6>
 800808c:	e000      	b.n	8008090 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800808e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2202      	movs	r2, #2
 8008096:	4013      	ands	r3, r2
 8008098:	d100      	bne.n	800809c <HAL_RCC_OscConfig+0x124>
 800809a:	e099      	b.n	80081d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800809c:	4b81      	ldr	r3, [pc, #516]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2238      	movs	r2, #56	@ 0x38
 80080a2:	4013      	ands	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a6:	4b7f      	ldr	r3, [pc, #508]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2203      	movs	r2, #3
 80080ac:	4013      	ands	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d102      	bne.n	80080bc <HAL_RCC_OscConfig+0x144>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d002      	beq.n	80080c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d135      	bne.n	800812e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c2:	4b78      	ldr	r3, [pc, #480]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	2380      	movs	r3, #128	@ 0x80
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4013      	ands	r3, r2
 80080cc:	d005      	beq.n	80080da <HAL_RCC_OscConfig+0x162>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e24b      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080da:	4b72      	ldr	r3, [pc, #456]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	4a74      	ldr	r2, [pc, #464]	@ (80082b0 <HAL_RCC_OscConfig+0x338>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	0019      	movs	r1, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	021a      	lsls	r2, r3, #8
 80080ea:	4b6e      	ldr	r3, [pc, #440]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80080ec:	430a      	orrs	r2, r1
 80080ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d112      	bne.n	800811c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80080f6:	4b6b      	ldr	r3, [pc, #428]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a6e      	ldr	r2, [pc, #440]	@ (80082b4 <HAL_RCC_OscConfig+0x33c>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	0019      	movs	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	4b67      	ldr	r3, [pc, #412]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008106:	430a      	orrs	r2, r1
 8008108:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800810a:	4b66      	ldr	r3, [pc, #408]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	0adb      	lsrs	r3, r3, #11
 8008110:	2207      	movs	r2, #7
 8008112:	4013      	ands	r3, r2
 8008114:	4a68      	ldr	r2, [pc, #416]	@ (80082b8 <HAL_RCC_OscConfig+0x340>)
 8008116:	40da      	lsrs	r2, r3
 8008118:	4b68      	ldr	r3, [pc, #416]	@ (80082bc <HAL_RCC_OscConfig+0x344>)
 800811a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800811c:	4b68      	ldr	r3, [pc, #416]	@ (80082c0 <HAL_RCC_OscConfig+0x348>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	0018      	movs	r0, r3
 8008122:	f7fc fd9d 	bl	8004c60 <HAL_InitTick>
 8008126:	1e03      	subs	r3, r0, #0
 8008128:	d051      	beq.n	80081ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e221      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d030      	beq.n	8008198 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008136:	4b5b      	ldr	r3, [pc, #364]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a5e      	ldr	r2, [pc, #376]	@ (80082b4 <HAL_RCC_OscConfig+0x33c>)
 800813c:	4013      	ands	r3, r2
 800813e:	0019      	movs	r1, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	4b57      	ldr	r3, [pc, #348]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008146:	430a      	orrs	r2, r1
 8008148:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800814a:	4b56      	ldr	r3, [pc, #344]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b55      	ldr	r3, [pc, #340]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008150:	2180      	movs	r1, #128	@ 0x80
 8008152:	0049      	lsls	r1, r1, #1
 8008154:	430a      	orrs	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fc fdde 	bl	8004d18 <HAL_GetTick>
 800815c:	0003      	movs	r3, r0
 800815e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008162:	f7fc fdd9 	bl	8004d18 <HAL_GetTick>
 8008166:	0002      	movs	r2, r0
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e1fe      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008174:	4b4b      	ldr	r3, [pc, #300]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	2380      	movs	r3, #128	@ 0x80
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4013      	ands	r3, r2
 800817e:	d0f0      	beq.n	8008162 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008180:	4b48      	ldr	r3, [pc, #288]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4a4a      	ldr	r2, [pc, #296]	@ (80082b0 <HAL_RCC_OscConfig+0x338>)
 8008186:	4013      	ands	r3, r2
 8008188:	0019      	movs	r1, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	021a      	lsls	r2, r3, #8
 8008190:	4b44      	ldr	r3, [pc, #272]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	e01b      	b.n	80081d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008198:	4b42      	ldr	r3, [pc, #264]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b41      	ldr	r3, [pc, #260]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800819e:	4949      	ldr	r1, [pc, #292]	@ (80082c4 <HAL_RCC_OscConfig+0x34c>)
 80081a0:	400a      	ands	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a4:	f7fc fdb8 	bl	8004d18 <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ae:	f7fc fdb3 	bl	8004d18 <HAL_GetTick>
 80081b2:	0002      	movs	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e1d8      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081c0:	4b38      	ldr	r3, [pc, #224]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	2380      	movs	r3, #128	@ 0x80
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4013      	ands	r3, r2
 80081ca:	d1f0      	bne.n	80081ae <HAL_RCC_OscConfig+0x236>
 80081cc:	e000      	b.n	80081d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2208      	movs	r2, #8
 80081d6:	4013      	ands	r3, r2
 80081d8:	d047      	beq.n	800826a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80081da:	4b32      	ldr	r3, [pc, #200]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2238      	movs	r2, #56	@ 0x38
 80081e0:	4013      	ands	r3, r2
 80081e2:	2b18      	cmp	r3, #24
 80081e4:	d10a      	bne.n	80081fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80081e6:	4b2f      	ldr	r3, [pc, #188]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 80081e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ea:	2202      	movs	r2, #2
 80081ec:	4013      	ands	r3, r2
 80081ee:	d03c      	beq.n	800826a <HAL_RCC_OscConfig+0x2f2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d138      	bne.n	800826a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e1ba      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d019      	beq.n	8008238 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008204:	4b27      	ldr	r3, [pc, #156]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008206:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008208:	4b26      	ldr	r3, [pc, #152]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800820a:	2101      	movs	r1, #1
 800820c:	430a      	orrs	r2, r1
 800820e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fc fd82 	bl	8004d18 <HAL_GetTick>
 8008214:	0003      	movs	r3, r0
 8008216:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800821a:	f7fc fd7d 	bl	8004d18 <HAL_GetTick>
 800821e:	0002      	movs	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e1a2      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800822c:	4b1d      	ldr	r3, [pc, #116]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800822e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008230:	2202      	movs	r2, #2
 8008232:	4013      	ands	r3, r2
 8008234:	d0f1      	beq.n	800821a <HAL_RCC_OscConfig+0x2a2>
 8008236:	e018      	b.n	800826a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800823a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800823c:	4b19      	ldr	r3, [pc, #100]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800823e:	2101      	movs	r1, #1
 8008240:	438a      	bics	r2, r1
 8008242:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fc fd68 	bl	8004d18 <HAL_GetTick>
 8008248:	0003      	movs	r3, r0
 800824a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800824e:	f7fc fd63 	bl	8004d18 <HAL_GetTick>
 8008252:	0002      	movs	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e188      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008260:	4b10      	ldr	r3, [pc, #64]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008264:	2202      	movs	r2, #2
 8008266:	4013      	ands	r3, r2
 8008268:	d1f1      	bne.n	800824e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2204      	movs	r2, #4
 8008270:	4013      	ands	r3, r2
 8008272:	d100      	bne.n	8008276 <HAL_RCC_OscConfig+0x2fe>
 8008274:	e0c6      	b.n	8008404 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008276:	231f      	movs	r3, #31
 8008278:	18fb      	adds	r3, r7, r3
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800827e:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2238      	movs	r2, #56	@ 0x38
 8008284:	4013      	ands	r3, r2
 8008286:	2b20      	cmp	r3, #32
 8008288:	d11e      	bne.n	80082c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800828a:	4b06      	ldr	r3, [pc, #24]	@ (80082a4 <HAL_RCC_OscConfig+0x32c>)
 800828c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828e:	2202      	movs	r2, #2
 8008290:	4013      	ands	r3, r2
 8008292:	d100      	bne.n	8008296 <HAL_RCC_OscConfig+0x31e>
 8008294:	e0b6      	b.n	8008404 <HAL_RCC_OscConfig+0x48c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d000      	beq.n	80082a0 <HAL_RCC_OscConfig+0x328>
 800829e:	e0b1      	b.n	8008404 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e166      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
 80082a4:	40021000 	.word	0x40021000
 80082a8:	fffeffff 	.word	0xfffeffff
 80082ac:	fffbffff 	.word	0xfffbffff
 80082b0:	ffff80ff 	.word	0xffff80ff
 80082b4:	ffffc7ff 	.word	0xffffc7ff
 80082b8:	00f42400 	.word	0x00f42400
 80082bc:	20000010 	.word	0x20000010
 80082c0:	20000014 	.word	0x20000014
 80082c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082c8:	4bac      	ldr	r3, [pc, #688]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80082ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082cc:	2380      	movs	r3, #128	@ 0x80
 80082ce:	055b      	lsls	r3, r3, #21
 80082d0:	4013      	ands	r3, r2
 80082d2:	d101      	bne.n	80082d8 <HAL_RCC_OscConfig+0x360>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e000      	b.n	80082da <HAL_RCC_OscConfig+0x362>
 80082d8:	2300      	movs	r3, #0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	4ba7      	ldr	r3, [pc, #668]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80082e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082e2:	4ba6      	ldr	r3, [pc, #664]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80082e4:	2180      	movs	r1, #128	@ 0x80
 80082e6:	0549      	lsls	r1, r1, #21
 80082e8:	430a      	orrs	r2, r1
 80082ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80082ec:	4ba3      	ldr	r3, [pc, #652]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80082ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082f0:	2380      	movs	r3, #128	@ 0x80
 80082f2:	055b      	lsls	r3, r3, #21
 80082f4:	4013      	ands	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80082fa:	231f      	movs	r3, #31
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	2201      	movs	r2, #1
 8008300:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008302:	4b9f      	ldr	r3, [pc, #636]	@ (8008580 <HAL_RCC_OscConfig+0x608>)
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	2380      	movs	r3, #128	@ 0x80
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	4013      	ands	r3, r2
 800830c:	d11a      	bne.n	8008344 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800830e:	4b9c      	ldr	r3, [pc, #624]	@ (8008580 <HAL_RCC_OscConfig+0x608>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b9b      	ldr	r3, [pc, #620]	@ (8008580 <HAL_RCC_OscConfig+0x608>)
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	0049      	lsls	r1, r1, #1
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800831c:	f7fc fcfc 	bl	8004d18 <HAL_GetTick>
 8008320:	0003      	movs	r3, r0
 8008322:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008326:	f7fc fcf7 	bl	8004d18 <HAL_GetTick>
 800832a:	0002      	movs	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e11c      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008338:	4b91      	ldr	r3, [pc, #580]	@ (8008580 <HAL_RCC_OscConfig+0x608>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	2380      	movs	r3, #128	@ 0x80
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	4013      	ands	r3, r2
 8008342:	d0f0      	beq.n	8008326 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d106      	bne.n	800835a <HAL_RCC_OscConfig+0x3e2>
 800834c:	4b8b      	ldr	r3, [pc, #556]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800834e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008350:	4b8a      	ldr	r3, [pc, #552]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008352:	2101      	movs	r1, #1
 8008354:	430a      	orrs	r2, r1
 8008356:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008358:	e01c      	b.n	8008394 <HAL_RCC_OscConfig+0x41c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b05      	cmp	r3, #5
 8008360:	d10c      	bne.n	800837c <HAL_RCC_OscConfig+0x404>
 8008362:	4b86      	ldr	r3, [pc, #536]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008364:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008366:	4b85      	ldr	r3, [pc, #532]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008368:	2104      	movs	r1, #4
 800836a:	430a      	orrs	r2, r1
 800836c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800836e:	4b83      	ldr	r3, [pc, #524]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008372:	4b82      	ldr	r3, [pc, #520]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008374:	2101      	movs	r1, #1
 8008376:	430a      	orrs	r2, r1
 8008378:	65da      	str	r2, [r3, #92]	@ 0x5c
 800837a:	e00b      	b.n	8008394 <HAL_RCC_OscConfig+0x41c>
 800837c:	4b7f      	ldr	r3, [pc, #508]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800837e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008380:	4b7e      	ldr	r3, [pc, #504]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008382:	2101      	movs	r1, #1
 8008384:	438a      	bics	r2, r1
 8008386:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008388:	4b7c      	ldr	r3, [pc, #496]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800838a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800838c:	4b7b      	ldr	r3, [pc, #492]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800838e:	2104      	movs	r1, #4
 8008390:	438a      	bics	r2, r1
 8008392:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d014      	beq.n	80083c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fc fcbc 	bl	8004d18 <HAL_GetTick>
 80083a0:	0003      	movs	r3, r0
 80083a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083a4:	e009      	b.n	80083ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a6:	f7fc fcb7 	bl	8004d18 <HAL_GetTick>
 80083aa:	0002      	movs	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	4a74      	ldr	r2, [pc, #464]	@ (8008584 <HAL_RCC_OscConfig+0x60c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e0db      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083ba:	4b70      	ldr	r3, [pc, #448]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80083bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083be:	2202      	movs	r2, #2
 80083c0:	4013      	ands	r3, r2
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x42e>
 80083c4:	e013      	b.n	80083ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c6:	f7fc fca7 	bl	8004d18 <HAL_GetTick>
 80083ca:	0003      	movs	r3, r0
 80083cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083ce:	e009      	b.n	80083e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d0:	f7fc fca2 	bl	8004d18 <HAL_GetTick>
 80083d4:	0002      	movs	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	4a6a      	ldr	r2, [pc, #424]	@ (8008584 <HAL_RCC_OscConfig+0x60c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d901      	bls.n	80083e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e0c6      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083e4:	4b65      	ldr	r3, [pc, #404]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80083e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e8:	2202      	movs	r2, #2
 80083ea:	4013      	ands	r3, r2
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80083ee:	231f      	movs	r3, #31
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d105      	bne.n	8008404 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80083f8:	4b60      	ldr	r3, [pc, #384]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80083fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083fc:	4b5f      	ldr	r3, [pc, #380]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80083fe:	4962      	ldr	r1, [pc, #392]	@ (8008588 <HAL_RCC_OscConfig+0x610>)
 8008400:	400a      	ands	r2, r1
 8008402:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d100      	bne.n	800840e <HAL_RCC_OscConfig+0x496>
 800840c:	e0b0      	b.n	8008570 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800840e:	4b5b      	ldr	r3, [pc, #364]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2238      	movs	r2, #56	@ 0x38
 8008414:	4013      	ands	r3, r2
 8008416:	2b10      	cmp	r3, #16
 8008418:	d100      	bne.n	800841c <HAL_RCC_OscConfig+0x4a4>
 800841a:	e078      	b.n	800850e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d153      	bne.n	80084cc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008424:	4b55      	ldr	r3, [pc, #340]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b54      	ldr	r3, [pc, #336]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800842a:	4958      	ldr	r1, [pc, #352]	@ (800858c <HAL_RCC_OscConfig+0x614>)
 800842c:	400a      	ands	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fc fc72 	bl	8004d18 <HAL_GetTick>
 8008434:	0003      	movs	r3, r0
 8008436:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008438:	e008      	b.n	800844c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843a:	f7fc fc6d 	bl	8004d18 <HAL_GetTick>
 800843e:	0002      	movs	r2, r0
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e092      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800844c:	4b4b      	ldr	r3, [pc, #300]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	2380      	movs	r3, #128	@ 0x80
 8008452:	049b      	lsls	r3, r3, #18
 8008454:	4013      	ands	r3, r2
 8008456:	d1f0      	bne.n	800843a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008458:	4b48      	ldr	r3, [pc, #288]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	4a4c      	ldr	r2, [pc, #304]	@ (8008590 <HAL_RCC_OscConfig+0x618>)
 800845e:	4013      	ands	r3, r2
 8008460:	0019      	movs	r1, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	431a      	orrs	r2, r3
 8008480:	4b3e      	ldr	r3, [pc, #248]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008482:	430a      	orrs	r2, r1
 8008484:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008486:	4b3d      	ldr	r3, [pc, #244]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b3c      	ldr	r3, [pc, #240]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800848c:	2180      	movs	r1, #128	@ 0x80
 800848e:	0449      	lsls	r1, r1, #17
 8008490:	430a      	orrs	r2, r1
 8008492:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008494:	4b39      	ldr	r3, [pc, #228]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	4b38      	ldr	r3, [pc, #224]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800849a:	2180      	movs	r1, #128	@ 0x80
 800849c:	0549      	lsls	r1, r1, #21
 800849e:	430a      	orrs	r2, r1
 80084a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a2:	f7fc fc39 	bl	8004d18 <HAL_GetTick>
 80084a6:	0003      	movs	r3, r0
 80084a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084ac:	f7fc fc34 	bl	8004d18 <HAL_GetTick>
 80084b0:	0002      	movs	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e059      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084be:	4b2f      	ldr	r3, [pc, #188]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	2380      	movs	r3, #128	@ 0x80
 80084c4:	049b      	lsls	r3, r3, #18
 80084c6:	4013      	ands	r3, r2
 80084c8:	d0f0      	beq.n	80084ac <HAL_RCC_OscConfig+0x534>
 80084ca:	e051      	b.n	8008570 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084cc:	4b2b      	ldr	r3, [pc, #172]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	4b2a      	ldr	r3, [pc, #168]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80084d2:	492e      	ldr	r1, [pc, #184]	@ (800858c <HAL_RCC_OscConfig+0x614>)
 80084d4:	400a      	ands	r2, r1
 80084d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fc fc1e 	bl	8004d18 <HAL_GetTick>
 80084dc:	0003      	movs	r3, r0
 80084de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e2:	f7fc fc19 	bl	8004d18 <HAL_GetTick>
 80084e6:	0002      	movs	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e03e      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084f4:	4b21      	ldr	r3, [pc, #132]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	2380      	movs	r3, #128	@ 0x80
 80084fa:	049b      	lsls	r3, r3, #18
 80084fc:	4013      	ands	r3, r2
 80084fe:	d1f0      	bne.n	80084e2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008500:	4b1e      	ldr	r3, [pc, #120]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 8008506:	4923      	ldr	r1, [pc, #140]	@ (8008594 <HAL_RCC_OscConfig+0x61c>)
 8008508:	400a      	ands	r2, r1
 800850a:	60da      	str	r2, [r3, #12]
 800850c:	e030      	b.n	8008570 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e02b      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800851a:	4b18      	ldr	r3, [pc, #96]	@ (800857c <HAL_RCC_OscConfig+0x604>)
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2203      	movs	r2, #3
 8008524:	401a      	ands	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	429a      	cmp	r2, r3
 800852c:	d11e      	bne.n	800856c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2270      	movs	r2, #112	@ 0x70
 8008532:	401a      	ands	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008538:	429a      	cmp	r2, r3
 800853a:	d117      	bne.n	800856c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	23fe      	movs	r3, #254	@ 0xfe
 8008540:	01db      	lsls	r3, r3, #7
 8008542:	401a      	ands	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800854a:	429a      	cmp	r2, r3
 800854c:	d10e      	bne.n	800856c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	23f8      	movs	r3, #248	@ 0xf8
 8008552:	039b      	lsls	r3, r3, #14
 8008554:	401a      	ands	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800855a:	429a      	cmp	r2, r3
 800855c:	d106      	bne.n	800856c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	0f5b      	lsrs	r3, r3, #29
 8008562:	075a      	lsls	r2, r3, #29
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008568:	429a      	cmp	r2, r3
 800856a:	d001      	beq.n	8008570 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e000      	b.n	8008572 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b008      	add	sp, #32
 8008578:	bd80      	pop	{r7, pc}
 800857a:	46c0      	nop			@ (mov r8, r8)
 800857c:	40021000 	.word	0x40021000
 8008580:	40007000 	.word	0x40007000
 8008584:	00001388 	.word	0x00001388
 8008588:	efffffff 	.word	0xefffffff
 800858c:	feffffff 	.word	0xfeffffff
 8008590:	1fc1808c 	.word	0x1fc1808c
 8008594:	effefffc 	.word	0xeffefffc

08008598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e0e9      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085ac:	4b76      	ldr	r3, [pc, #472]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2207      	movs	r2, #7
 80085b2:	4013      	ands	r3, r2
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d91e      	bls.n	80085f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ba:	4b73      	ldr	r3, [pc, #460]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2207      	movs	r2, #7
 80085c0:	4393      	bics	r3, r2
 80085c2:	0019      	movs	r1, r3
 80085c4:	4b70      	ldr	r3, [pc, #448]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085cc:	f7fc fba4 	bl	8004d18 <HAL_GetTick>
 80085d0:	0003      	movs	r3, r0
 80085d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085d4:	e009      	b.n	80085ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d6:	f7fc fb9f 	bl	8004d18 <HAL_GetTick>
 80085da:	0002      	movs	r2, r0
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	4a6a      	ldr	r2, [pc, #424]	@ (800878c <HAL_RCC_ClockConfig+0x1f4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e0ca      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085ea:	4b67      	ldr	r3, [pc, #412]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2207      	movs	r2, #7
 80085f0:	4013      	ands	r3, r2
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d1ee      	bne.n	80085d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2202      	movs	r2, #2
 80085fe:	4013      	ands	r3, r2
 8008600:	d015      	beq.n	800862e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2204      	movs	r2, #4
 8008608:	4013      	ands	r3, r2
 800860a:	d006      	beq.n	800861a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800860c:	4b60      	ldr	r3, [pc, #384]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	4b5f      	ldr	r3, [pc, #380]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 8008612:	21e0      	movs	r1, #224	@ 0xe0
 8008614:	01c9      	lsls	r1, r1, #7
 8008616:	430a      	orrs	r2, r1
 8008618:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800861a:	4b5d      	ldr	r3, [pc, #372]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	4a5d      	ldr	r2, [pc, #372]	@ (8008794 <HAL_RCC_ClockConfig+0x1fc>)
 8008620:	4013      	ands	r3, r2
 8008622:	0019      	movs	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	4b59      	ldr	r3, [pc, #356]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2201      	movs	r2, #1
 8008634:	4013      	ands	r3, r2
 8008636:	d057      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d107      	bne.n	8008650 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008640:	4b53      	ldr	r3, [pc, #332]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	2380      	movs	r3, #128	@ 0x80
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	4013      	ands	r3, r2
 800864a:	d12b      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e097      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d107      	bne.n	8008668 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008658:	4b4d      	ldr	r3, [pc, #308]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	2380      	movs	r3, #128	@ 0x80
 800865e:	049b      	lsls	r3, r3, #18
 8008660:	4013      	ands	r3, r2
 8008662:	d11f      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e08b      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d107      	bne.n	8008680 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008670:	4b47      	ldr	r3, [pc, #284]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	4013      	ands	r3, r2
 800867a:	d113      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e07f      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d106      	bne.n	8008696 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008688:	4b41      	ldr	r3, [pc, #260]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800868a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800868c:	2202      	movs	r2, #2
 800868e:	4013      	ands	r3, r2
 8008690:	d108      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e074      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008696:	4b3e      	ldr	r3, [pc, #248]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 8008698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800869a:	2202      	movs	r2, #2
 800869c:	4013      	ands	r3, r2
 800869e:	d101      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e06d      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2207      	movs	r2, #7
 80086aa:	4393      	bics	r3, r2
 80086ac:	0019      	movs	r1, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4b37      	ldr	r3, [pc, #220]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 80086b4:	430a      	orrs	r2, r1
 80086b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b8:	f7fc fb2e 	bl	8004d18 <HAL_GetTick>
 80086bc:	0003      	movs	r3, r0
 80086be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086c0:	e009      	b.n	80086d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086c2:	f7fc fb29 	bl	8004d18 <HAL_GetTick>
 80086c6:	0002      	movs	r2, r0
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	4a2f      	ldr	r2, [pc, #188]	@ (800878c <HAL_RCC_ClockConfig+0x1f4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e054      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d6:	4b2e      	ldr	r3, [pc, #184]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	2238      	movs	r2, #56	@ 0x38
 80086dc:	401a      	ands	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d1ec      	bne.n	80086c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086e8:	4b27      	ldr	r3, [pc, #156]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2207      	movs	r2, #7
 80086ee:	4013      	ands	r3, r2
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d21e      	bcs.n	8008734 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086f6:	4b24      	ldr	r3, [pc, #144]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2207      	movs	r2, #7
 80086fc:	4393      	bics	r3, r2
 80086fe:	0019      	movs	r1, r3
 8008700:	4b21      	ldr	r3, [pc, #132]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008708:	f7fc fb06 	bl	8004d18 <HAL_GetTick>
 800870c:	0003      	movs	r3, r0
 800870e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008710:	e009      	b.n	8008726 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008712:	f7fc fb01 	bl	8004d18 <HAL_GetTick>
 8008716:	0002      	movs	r2, r0
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	4a1b      	ldr	r2, [pc, #108]	@ (800878c <HAL_RCC_ClockConfig+0x1f4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e02c      	b.n	8008780 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008726:	4b18      	ldr	r3, [pc, #96]	@ (8008788 <HAL_RCC_ClockConfig+0x1f0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2207      	movs	r2, #7
 800872c:	4013      	ands	r3, r2
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d1ee      	bne.n	8008712 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2204      	movs	r2, #4
 800873a:	4013      	ands	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800873e:	4b14      	ldr	r3, [pc, #80]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <HAL_RCC_ClockConfig+0x200>)
 8008744:	4013      	ands	r3, r2
 8008746:	0019      	movs	r1, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008752:	f000 f829 	bl	80087a8 <HAL_RCC_GetSysClockFreq>
 8008756:	0001      	movs	r1, r0
 8008758:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <HAL_RCC_ClockConfig+0x1f8>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	0a1b      	lsrs	r3, r3, #8
 800875e:	220f      	movs	r2, #15
 8008760:	401a      	ands	r2, r3
 8008762:	4b0e      	ldr	r3, [pc, #56]	@ (800879c <HAL_RCC_ClockConfig+0x204>)
 8008764:	0092      	lsls	r2, r2, #2
 8008766:	58d3      	ldr	r3, [r2, r3]
 8008768:	221f      	movs	r2, #31
 800876a:	4013      	ands	r3, r2
 800876c:	000a      	movs	r2, r1
 800876e:	40da      	lsrs	r2, r3
 8008770:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <HAL_RCC_ClockConfig+0x208>)
 8008772:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008774:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <HAL_RCC_ClockConfig+0x20c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	0018      	movs	r0, r3
 800877a:	f7fc fa71 	bl	8004c60 <HAL_InitTick>
 800877e:	0003      	movs	r3, r0
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	b004      	add	sp, #16
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40022000 	.word	0x40022000
 800878c:	00001388 	.word	0x00001388
 8008790:	40021000 	.word	0x40021000
 8008794:	fffff0ff 	.word	0xfffff0ff
 8008798:	ffff8fff 	.word	0xffff8fff
 800879c:	0800c588 	.word	0x0800c588
 80087a0:	20000010 	.word	0x20000010
 80087a4:	20000014 	.word	0x20000014

080087a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087ae:	4b3c      	ldr	r3, [pc, #240]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2238      	movs	r2, #56	@ 0x38
 80087b4:	4013      	ands	r3, r2
 80087b6:	d10f      	bne.n	80087d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80087b8:	4b39      	ldr	r3, [pc, #228]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	0adb      	lsrs	r3, r3, #11
 80087be:	2207      	movs	r2, #7
 80087c0:	4013      	ands	r3, r2
 80087c2:	2201      	movs	r2, #1
 80087c4:	409a      	lsls	r2, r3
 80087c6:	0013      	movs	r3, r2
 80087c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	4835      	ldr	r0, [pc, #212]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80087ce:	f7f7 fcb3 	bl	8000138 <__udivsi3>
 80087d2:	0003      	movs	r3, r0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	e05d      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087d8:	4b31      	ldr	r3, [pc, #196]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2238      	movs	r2, #56	@ 0x38
 80087de:	4013      	ands	r3, r2
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d102      	bne.n	80087ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087e4:	4b30      	ldr	r3, [pc, #192]	@ (80088a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e054      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087ea:	4b2d      	ldr	r3, [pc, #180]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	2238      	movs	r2, #56	@ 0x38
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d138      	bne.n	8008868 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80087f6:	4b2a      	ldr	r3, [pc, #168]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2203      	movs	r2, #3
 80087fc:	4013      	ands	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008800:	4b27      	ldr	r3, [pc, #156]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	2207      	movs	r2, #7
 8008808:	4013      	ands	r3, r2
 800880a:	3301      	adds	r3, #1
 800880c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b03      	cmp	r3, #3
 8008812:	d10d      	bne.n	8008830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	4824      	ldr	r0, [pc, #144]	@ (80088a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008818:	f7f7 fc8e 	bl	8000138 <__udivsi3>
 800881c:	0003      	movs	r3, r0
 800881e:	0019      	movs	r1, r3
 8008820:	4b1f      	ldr	r3, [pc, #124]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	227f      	movs	r2, #127	@ 0x7f
 8008828:	4013      	ands	r3, r2
 800882a:	434b      	muls	r3, r1
 800882c:	617b      	str	r3, [r7, #20]
        break;
 800882e:	e00d      	b.n	800884c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008830:	68b9      	ldr	r1, [r7, #8]
 8008832:	481c      	ldr	r0, [pc, #112]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008834:	f7f7 fc80 	bl	8000138 <__udivsi3>
 8008838:	0003      	movs	r3, r0
 800883a:	0019      	movs	r1, r3
 800883c:	4b18      	ldr	r3, [pc, #96]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	227f      	movs	r2, #127	@ 0x7f
 8008844:	4013      	ands	r3, r2
 8008846:	434b      	muls	r3, r1
 8008848:	617b      	str	r3, [r7, #20]
        break;
 800884a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800884c:	4b14      	ldr	r3, [pc, #80]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	0f5b      	lsrs	r3, r3, #29
 8008852:	2207      	movs	r2, #7
 8008854:	4013      	ands	r3, r2
 8008856:	3301      	adds	r3, #1
 8008858:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	6978      	ldr	r0, [r7, #20]
 800885e:	f7f7 fc6b 	bl	8000138 <__udivsi3>
 8008862:	0003      	movs	r3, r0
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	e015      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008868:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2238      	movs	r2, #56	@ 0x38
 800886e:	4013      	ands	r3, r2
 8008870:	2b20      	cmp	r3, #32
 8008872:	d103      	bne.n	800887c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	e00b      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800887c:	4b08      	ldr	r3, [pc, #32]	@ (80088a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2238      	movs	r2, #56	@ 0x38
 8008882:	4013      	ands	r3, r2
 8008884:	2b18      	cmp	r3, #24
 8008886:	d103      	bne.n	8008890 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008888:	23fa      	movs	r3, #250	@ 0xfa
 800888a:	01db      	lsls	r3, r3, #7
 800888c:	613b      	str	r3, [r7, #16]
 800888e:	e001      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008894:	693b      	ldr	r3, [r7, #16]
}
 8008896:	0018      	movs	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	b006      	add	sp, #24
 800889c:	bd80      	pop	{r7, pc}
 800889e:	46c0      	nop			@ (mov r8, r8)
 80088a0:	40021000 	.word	0x40021000
 80088a4:	00f42400 	.word	0x00f42400
 80088a8:	007a1200 	.word	0x007a1200

080088ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088b0:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <HAL_RCC_GetHCLKFreq+0x10>)
 80088b2:	681b      	ldr	r3, [r3, #0]
}
 80088b4:	0018      	movs	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	20000010 	.word	0x20000010

080088c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088c0:	b5b0      	push	{r4, r5, r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80088c4:	f7ff fff2 	bl	80088ac <HAL_RCC_GetHCLKFreq>
 80088c8:	0004      	movs	r4, r0
 80088ca:	f7ff fb49 	bl	8007f60 <LL_RCC_GetAPB1Prescaler>
 80088ce:	0003      	movs	r3, r0
 80088d0:	0b1a      	lsrs	r2, r3, #12
 80088d2:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80088d4:	0092      	lsls	r2, r2, #2
 80088d6:	58d3      	ldr	r3, [r2, r3]
 80088d8:	221f      	movs	r2, #31
 80088da:	4013      	ands	r3, r2
 80088dc:	40dc      	lsrs	r4, r3
 80088de:	0023      	movs	r3, r4
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bdb0      	pop	{r4, r5, r7, pc}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	0800c5c8 	.word	0x0800c5c8

080088ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80088f4:	2313      	movs	r3, #19
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	2200      	movs	r2, #0
 80088fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088fc:	2312      	movs	r3, #18
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	2380      	movs	r3, #128	@ 0x80
 800890a:	029b      	lsls	r3, r3, #10
 800890c:	4013      	ands	r3, r2
 800890e:	d100      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008910:	e0a3      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008912:	2011      	movs	r0, #17
 8008914:	183b      	adds	r3, r7, r0
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800891a:	4b86      	ldr	r3, [pc, #536]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800891c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800891e:	2380      	movs	r3, #128	@ 0x80
 8008920:	055b      	lsls	r3, r3, #21
 8008922:	4013      	ands	r3, r2
 8008924:	d110      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008926:	4b83      	ldr	r3, [pc, #524]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800892a:	4b82      	ldr	r3, [pc, #520]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800892c:	2180      	movs	r1, #128	@ 0x80
 800892e:	0549      	lsls	r1, r1, #21
 8008930:	430a      	orrs	r2, r1
 8008932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008934:	4b7f      	ldr	r3, [pc, #508]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008938:	2380      	movs	r3, #128	@ 0x80
 800893a:	055b      	lsls	r3, r3, #21
 800893c:	4013      	ands	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008942:	183b      	adds	r3, r7, r0
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008948:	4b7b      	ldr	r3, [pc, #492]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b7a      	ldr	r3, [pc, #488]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800894e:	2180      	movs	r1, #128	@ 0x80
 8008950:	0049      	lsls	r1, r1, #1
 8008952:	430a      	orrs	r2, r1
 8008954:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008956:	f7fc f9df 	bl	8004d18 <HAL_GetTick>
 800895a:	0003      	movs	r3, r0
 800895c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895e:	e00b      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008960:	f7fc f9da 	bl	8004d18 <HAL_GetTick>
 8008964:	0002      	movs	r2, r0
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d904      	bls.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800896e:	2313      	movs	r3, #19
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	2203      	movs	r2, #3
 8008974:	701a      	strb	r2, [r3, #0]
        break;
 8008976:	e005      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008978:	4b6f      	ldr	r3, [pc, #444]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	2380      	movs	r3, #128	@ 0x80
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	4013      	ands	r3, r2
 8008982:	d0ed      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008984:	2313      	movs	r3, #19
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d154      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800898e:	4b69      	ldr	r3, [pc, #420]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008992:	23c0      	movs	r3, #192	@ 0xc0
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4013      	ands	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d019      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d014      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089aa:	4b62      	ldr	r3, [pc, #392]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ae:	4a63      	ldr	r2, [pc, #396]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089b8:	4b5e      	ldr	r3, [pc, #376]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	0249      	lsls	r1, r1, #9
 80089be:	430a      	orrs	r2, r1
 80089c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089c6:	4b5b      	ldr	r3, [pc, #364]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089c8:	495d      	ldr	r1, [pc, #372]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089ca:	400a      	ands	r2, r1
 80089cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089ce:	4b59      	ldr	r3, [pc, #356]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2201      	movs	r2, #1
 80089d8:	4013      	ands	r3, r2
 80089da:	d016      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089dc:	f7fc f99c 	bl	8004d18 <HAL_GetTick>
 80089e0:	0003      	movs	r3, r0
 80089e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e4:	e00c      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e6:	f7fc f997 	bl	8004d18 <HAL_GetTick>
 80089ea:	0002      	movs	r2, r0
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	4a54      	ldr	r2, [pc, #336]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d904      	bls.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80089f6:	2313      	movs	r3, #19
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	2203      	movs	r2, #3
 80089fc:	701a      	strb	r2, [r3, #0]
            break;
 80089fe:	e004      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a00:	4b4c      	ldr	r3, [pc, #304]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a04:	2202      	movs	r2, #2
 8008a06:	4013      	ands	r3, r2
 8008a08:	d0ed      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008a0a:	2313      	movs	r3, #19
 8008a0c:	18fb      	adds	r3, r7, r3
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a14:	4b47      	ldr	r3, [pc, #284]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a18:	4a48      	ldr	r2, [pc, #288]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	4b44      	ldr	r3, [pc, #272]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a24:	430a      	orrs	r2, r1
 8008a26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a28:	e00c      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a2a:	2312      	movs	r3, #18
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	2213      	movs	r2, #19
 8008a30:	18ba      	adds	r2, r7, r2
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	e005      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	2312      	movs	r3, #18
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	2213      	movs	r2, #19
 8008a3e:	18ba      	adds	r2, r7, r2
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a44:	2311      	movs	r3, #17
 8008a46:	18fb      	adds	r3, r7, r3
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d105      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a4e:	4b39      	ldr	r3, [pc, #228]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a52:	4b38      	ldr	r3, [pc, #224]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a54:	493c      	ldr	r1, [pc, #240]	@ (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008a56:	400a      	ands	r2, r1
 8008a58:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4013      	ands	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a64:	4b33      	ldr	r3, [pc, #204]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a68:	2203      	movs	r2, #3
 8008a6a:	4393      	bics	r3, r2
 8008a6c:	0019      	movs	r1, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	4b30      	ldr	r3, [pc, #192]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a74:	430a      	orrs	r2, r1
 8008a76:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d009      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a82:	4b2c      	ldr	r3, [pc, #176]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a86:	220c      	movs	r2, #12
 8008a88:	4393      	bics	r3, r2
 8008a8a:	0019      	movs	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	4b28      	ldr	r3, [pc, #160]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a92:	430a      	orrs	r2, r1
 8008a94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008aa0:	4b24      	ldr	r3, [pc, #144]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa4:	4a29      	ldr	r2, [pc, #164]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	0019      	movs	r1, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	4b21      	ldr	r3, [pc, #132]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	01db      	lsls	r3, r3, #7
 8008abc:	4013      	ands	r3, r2
 8008abe:	d015      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	0899      	lsrs	r1, r3, #2
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	4b19      	ldr	r3, [pc, #100]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	2380      	movs	r3, #128	@ 0x80
 8008ad8:	05db      	lsls	r3, r3, #23
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d106      	bne.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ae4:	2180      	movs	r1, #128	@ 0x80
 8008ae6:	0249      	lsls	r1, r1, #9
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	2380      	movs	r3, #128	@ 0x80
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	4013      	ands	r3, r2
 8008af6:	d016      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008af8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afc:	4a14      	ldr	r2, [pc, #80]	@ (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	0019      	movs	r1, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	01db      	lsls	r3, r3, #7
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d106      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b18:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	0249      	lsls	r1, r1, #9
 8008b22:	430a      	orrs	r2, r1
 8008b24:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008b26:	2312      	movs	r3, #18
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	781b      	ldrb	r3, [r3, #0]
}
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b006      	add	sp, #24
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40021000 	.word	0x40021000
 8008b38:	40007000 	.word	0x40007000
 8008b3c:	fffffcff 	.word	0xfffffcff
 8008b40:	fffeffff 	.word	0xfffeffff
 8008b44:	00001388 	.word	0x00001388
 8008b48:	efffffff 	.word	0xefffffff
 8008b4c:	ffffcfff 	.word	0xffffcfff
 8008b50:	ffff3fff 	.word	0xffff3fff

08008b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e0a8      	b.n	8008cb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	2382      	movs	r3, #130	@ 0x82
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d009      	beq.n	8008b8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	61da      	str	r2, [r3, #28]
 8008b80:	e005      	b.n	8008b8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	225d      	movs	r2, #93	@ 0x5d
 8008b98:	5c9b      	ldrb	r3, [r3, r2]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d107      	bne.n	8008bb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	225c      	movs	r2, #92	@ 0x5c
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7fb fde6 	bl	800477c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	225d      	movs	r2, #93	@ 0x5d
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2140      	movs	r1, #64	@ 0x40
 8008bc4:	438a      	bics	r2, r1
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	23e0      	movs	r3, #224	@ 0xe0
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d902      	bls.n	8008bda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	e002      	b.n	8008be0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bda:	2380      	movs	r3, #128	@ 0x80
 8008bdc:	015b      	lsls	r3, r3, #5
 8008bde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	23f0      	movs	r3, #240	@ 0xf0
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d008      	beq.n	8008bfe <HAL_SPI_Init+0xaa>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	23e0      	movs	r3, #224	@ 0xe0
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d002      	beq.n	8008bfe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	2382      	movs	r3, #130	@ 0x82
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	401a      	ands	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6899      	ldr	r1, [r3, #8]
 8008c0c:	2384      	movs	r3, #132	@ 0x84
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	400b      	ands	r3, r1
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2102      	movs	r1, #2
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	2101      	movs	r1, #1
 8008c24:	400b      	ands	r3, r1
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6999      	ldr	r1, [r3, #24]
 8008c2c:	2380      	movs	r3, #128	@ 0x80
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	400b      	ands	r3, r1
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	2138      	movs	r1, #56	@ 0x38
 8008c3a:	400b      	ands	r3, r1
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	2180      	movs	r1, #128	@ 0x80
 8008c44:	400b      	ands	r3, r1
 8008c46:	431a      	orrs	r2, r3
 8008c48:	0011      	movs	r1, r2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c4e:	2380      	movs	r3, #128	@ 0x80
 8008c50:	019b      	lsls	r3, r3, #6
 8008c52:	401a      	ands	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	2204      	movs	r2, #4
 8008c64:	401a      	ands	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6a:	2110      	movs	r1, #16
 8008c6c:	400b      	ands	r3, r1
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c74:	2108      	movs	r1, #8
 8008c76:	400b      	ands	r3, r1
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68d9      	ldr	r1, [r3, #12]
 8008c7e:	23f0      	movs	r3, #240	@ 0xf0
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	400b      	ands	r3, r1
 8008c84:	431a      	orrs	r2, r3
 8008c86:	0011      	movs	r1, r2
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	2380      	movs	r3, #128	@ 0x80
 8008c8c:	015b      	lsls	r3, r3, #5
 8008c8e:	401a      	ands	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69da      	ldr	r2, [r3, #28]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4907      	ldr	r1, [pc, #28]	@ (8008cc0 <HAL_SPI_Init+0x16c>)
 8008ca4:	400a      	ands	r2, r1
 8008ca6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	225d      	movs	r2, #93	@ 0x5d
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	0018      	movs	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	b004      	add	sp, #16
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	fffff7ff 	.word	0xfffff7ff

08008cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e04a      	b.n	8008d6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	223d      	movs	r2, #61	@ 0x3d
 8008cda:	5c9b      	ldrb	r3, [r3, r2]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d107      	bne.n	8008cf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	223c      	movs	r2, #60	@ 0x3c
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f7fb fdb3 	bl	8004858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	223d      	movs	r2, #61	@ 0x3d
 8008cf6:	2102      	movs	r1, #2
 8008cf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	0019      	movs	r1, r3
 8008d04:	0010      	movs	r0, r2
 8008d06:	f000 f9b3 	bl	8009070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2248      	movs	r2, #72	@ 0x48
 8008d0e:	2101      	movs	r1, #1
 8008d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	223e      	movs	r2, #62	@ 0x3e
 8008d16:	2101      	movs	r1, #1
 8008d18:	5499      	strb	r1, [r3, r2]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	223f      	movs	r2, #63	@ 0x3f
 8008d1e:	2101      	movs	r1, #1
 8008d20:	5499      	strb	r1, [r3, r2]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2240      	movs	r2, #64	@ 0x40
 8008d26:	2101      	movs	r1, #1
 8008d28:	5499      	strb	r1, [r3, r2]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2241      	movs	r2, #65	@ 0x41
 8008d2e:	2101      	movs	r1, #1
 8008d30:	5499      	strb	r1, [r3, r2]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2242      	movs	r2, #66	@ 0x42
 8008d36:	2101      	movs	r1, #1
 8008d38:	5499      	strb	r1, [r3, r2]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2243      	movs	r2, #67	@ 0x43
 8008d3e:	2101      	movs	r1, #1
 8008d40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2244      	movs	r2, #68	@ 0x44
 8008d46:	2101      	movs	r1, #1
 8008d48:	5499      	strb	r1, [r3, r2]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2245      	movs	r2, #69	@ 0x45
 8008d4e:	2101      	movs	r1, #1
 8008d50:	5499      	strb	r1, [r3, r2]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2246      	movs	r2, #70	@ 0x46
 8008d56:	2101      	movs	r1, #1
 8008d58:	5499      	strb	r1, [r3, r2]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2247      	movs	r2, #71	@ 0x47
 8008d5e:	2101      	movs	r1, #1
 8008d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	223d      	movs	r2, #61	@ 0x3d
 8008d66:	2101      	movs	r1, #1
 8008d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b002      	add	sp, #8
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	223d      	movs	r2, #61	@ 0x3d
 8008d80:	5c9b      	ldrb	r3, [r3, r2]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d001      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e03c      	b.n	8008e06 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	223d      	movs	r2, #61	@ 0x3d
 8008d90:	2102      	movs	r1, #2
 8008d92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2101      	movs	r1, #1
 8008da0:	430a      	orrs	r2, r1
 8008da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a19      	ldr	r2, [pc, #100]	@ (8008e10 <HAL_TIM_Base_Start_IT+0x9c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a18      	ldr	r2, [pc, #96]	@ (8008e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a16      	ldr	r2, [pc, #88]	@ (8008e18 <HAL_TIM_Base_Start_IT+0xa4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d116      	bne.n	8008df0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	4a14      	ldr	r2, [pc, #80]	@ (8008e1c <HAL_TIM_Base_Start_IT+0xa8>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b06      	cmp	r3, #6
 8008dd2:	d016      	beq.n	8008e02 <HAL_TIM_Base_Start_IT+0x8e>
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	2380      	movs	r3, #128	@ 0x80
 8008dd8:	025b      	lsls	r3, r3, #9
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d011      	beq.n	8008e02 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2101      	movs	r1, #1
 8008dea:	430a      	orrs	r2, r1
 8008dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dee:	e008      	b.n	8008e02 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	e000      	b.n	8008e04 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e02:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	0018      	movs	r0, r3
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b004      	add	sp, #16
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	00010007 	.word	0x00010007

08008e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d021      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	4013      	ands	r3, r2
 8008e46:	d01d      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	4252      	negs	r2, r2
 8008e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4013      	ands	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	0018      	movs	r0, r3
 8008e68:	f000 f8ea 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008e6c:	e007      	b.n	8008e7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0018      	movs	r0, r3
 8008e72:	f000 f8dd 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f000 f8e9 	bl	8009050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2204      	movs	r2, #4
 8008e88:	4013      	ands	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	4013      	ands	r3, r2
 8008e92:	d01e      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2205      	movs	r2, #5
 8008e9a:	4252      	negs	r2, r2
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	23c0      	movs	r3, #192	@ 0xc0
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4013      	ands	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f000 f8c3 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008eba:	e007      	b.n	8008ecc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f000 f8b6 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f000 f8c2 	bl	8009050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d021      	beq.n	8008f1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2208      	movs	r2, #8
 8008ede:	4013      	ands	r3, r2
 8008ee0:	d01d      	beq.n	8008f1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2209      	movs	r2, #9
 8008ee8:	4252      	negs	r2, r2
 8008eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2204      	movs	r2, #4
 8008ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	4013      	ands	r3, r2
 8008efc:	d004      	beq.n	8008f08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 f89d 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008f06:	e007      	b.n	8008f18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f000 f890 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 f89c 	bl	8009050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2210      	movs	r2, #16
 8008f22:	4013      	ands	r3, r2
 8008f24:	d022      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2210      	movs	r2, #16
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	d01e      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2211      	movs	r2, #17
 8008f34:	4252      	negs	r2, r2
 8008f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	23c0      	movs	r3, #192	@ 0xc0
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4013      	ands	r3, r2
 8008f4a:	d004      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f000 f876 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008f54:	e007      	b.n	8008f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 f869 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	0018      	movs	r0, r3
 8008f62:	f000 f875 	bl	8009050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4013      	ands	r3, r2
 8008f72:	d00c      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	4013      	ands	r3, r2
 8008f7a:	d008      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2202      	movs	r2, #2
 8008f82:	4252      	negs	r2, r2
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f7fa fb39 	bl	8003600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2280      	movs	r2, #128	@ 0x80
 8008f92:	4013      	ands	r3, r2
 8008f94:	d104      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	2380      	movs	r3, #128	@ 0x80
 8008f9a:	019b      	lsls	r3, r3, #6
 8008f9c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2280      	movs	r2, #128	@ 0x80
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1e      	ldr	r2, [pc, #120]	@ (8009028 <HAL_TIM_IRQHandler+0x208>)
 8008fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f000 f8e8 	bl	8009188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	2380      	movs	r3, #128	@ 0x80
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	d00b      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2280      	movs	r2, #128	@ 0x80
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	d007      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a17      	ldr	r2, [pc, #92]	@ (800902c <HAL_TIM_IRQHandler+0x20c>)
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f000 f8df 	bl	8009198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2240      	movs	r2, #64	@ 0x40
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d00c      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	d008      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2241      	movs	r2, #65	@ 0x41
 8008ff0:	4252      	negs	r2, r2
 8008ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f000 f832 	bl	8009060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2220      	movs	r2, #32
 8009000:	4013      	ands	r3, r2
 8009002:	d00c      	beq.n	800901e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2220      	movs	r2, #32
 8009008:	4013      	ands	r3, r2
 800900a:	d008      	beq.n	800901e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2221      	movs	r2, #33	@ 0x21
 8009012:	4252      	negs	r2, r2
 8009014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0018      	movs	r0, r3
 800901a:	f000 f8ad 	bl	8009178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b004      	add	sp, #16
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	ffffdf7f 	.word	0xffffdf7f
 800902c:	fffffeff 	.word	0xfffffeff

08009030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009038:	46c0      	nop			@ (mov r8, r8)
 800903a:	46bd      	mov	sp, r7
 800903c:	b002      	add	sp, #8
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009048:	46c0      	nop			@ (mov r8, r8)
 800904a:	46bd      	mov	sp, r7
 800904c:	b002      	add	sp, #8
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009058:	46c0      	nop			@ (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	b002      	add	sp, #8
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009068:	46c0      	nop			@ (mov r8, r8)
 800906a:	46bd      	mov	sp, r7
 800906c:	b002      	add	sp, #8
 800906e:	bd80      	pop	{r7, pc}

08009070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a36      	ldr	r2, [pc, #216]	@ (800915c <TIM_Base_SetConfig+0xec>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_Base_SetConfig+0x20>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a35      	ldr	r2, [pc, #212]	@ (8009160 <TIM_Base_SetConfig+0xf0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d108      	bne.n	80090a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2270      	movs	r2, #112	@ 0x70
 8009094:	4393      	bics	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a2d      	ldr	r2, [pc, #180]	@ (800915c <TIM_Base_SetConfig+0xec>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <TIM_Base_SetConfig+0x62>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009160 <TIM_Base_SetConfig+0xf0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00f      	beq.n	80090d2 <TIM_Base_SetConfig+0x62>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009164 <TIM_Base_SetConfig+0xf4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00b      	beq.n	80090d2 <TIM_Base_SetConfig+0x62>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009168 <TIM_Base_SetConfig+0xf8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d007      	beq.n	80090d2 <TIM_Base_SetConfig+0x62>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a29      	ldr	r2, [pc, #164]	@ (800916c <TIM_Base_SetConfig+0xfc>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_Base_SetConfig+0x62>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a28      	ldr	r2, [pc, #160]	@ (8009170 <TIM_Base_SetConfig+0x100>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d108      	bne.n	80090e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4a27      	ldr	r2, [pc, #156]	@ (8009174 <TIM_Base_SetConfig+0x104>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2280      	movs	r2, #128	@ 0x80
 80090e8:	4393      	bics	r3, r2
 80090ea:	001a      	movs	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a13      	ldr	r2, [pc, #76]	@ (800915c <TIM_Base_SetConfig+0xec>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00b      	beq.n	800912a <TIM_Base_SetConfig+0xba>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a14      	ldr	r2, [pc, #80]	@ (8009168 <TIM_Base_SetConfig+0xf8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d007      	beq.n	800912a <TIM_Base_SetConfig+0xba>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a13      	ldr	r2, [pc, #76]	@ (800916c <TIM_Base_SetConfig+0xfc>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d003      	beq.n	800912a <TIM_Base_SetConfig+0xba>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a12      	ldr	r2, [pc, #72]	@ (8009170 <TIM_Base_SetConfig+0x100>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d103      	bne.n	8009132 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2201      	movs	r2, #1
 800913e:	4013      	ands	r3, r2
 8009140:	2b01      	cmp	r3, #1
 8009142:	d106      	bne.n	8009152 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2201      	movs	r2, #1
 800914a:	4393      	bics	r3, r2
 800914c:	001a      	movs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	611a      	str	r2, [r3, #16]
  }
}
 8009152:	46c0      	nop			@ (mov r8, r8)
 8009154:	46bd      	mov	sp, r7
 8009156:	b004      	add	sp, #16
 8009158:	bd80      	pop	{r7, pc}
 800915a:	46c0      	nop			@ (mov r8, r8)
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40000400 	.word	0x40000400
 8009164:	40002000 	.word	0x40002000
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800
 8009174:	fffffcff 	.word	0xfffffcff

08009178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009180:	46c0      	nop			@ (mov r8, r8)
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009190:	46c0      	nop			@ (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	b002      	add	sp, #8
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a0:	46c0      	nop			@ (mov r8, r8)
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b002      	add	sp, #8
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e046      	b.n	8009248 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2288      	movs	r2, #136	@ 0x88
 80091be:	589b      	ldr	r3, [r3, r2]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d107      	bne.n	80091d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2284      	movs	r2, #132	@ 0x84
 80091c8:	2100      	movs	r1, #0
 80091ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7fb fb6a 	bl	80048a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2288      	movs	r2, #136	@ 0x88
 80091d8:	2124      	movs	r1, #36	@ 0x24
 80091da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2101      	movs	r1, #1
 80091e8:	438a      	bics	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	0018      	movs	r0, r3
 80091f8:	f000 f9d0 	bl	800959c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	0018      	movs	r0, r3
 8009200:	f000 f828 	bl	8009254 <UART_SetConfig>
 8009204:	0003      	movs	r3, r0
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e01c      	b.n	8009248 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	490d      	ldr	r1, [pc, #52]	@ (8009250 <HAL_UART_Init+0xa8>)
 800921a:	400a      	ands	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	212a      	movs	r1, #42	@ 0x2a
 800922a:	438a      	bics	r2, r1
 800922c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2101      	movs	r1, #1
 800923a:	430a      	orrs	r2, r1
 800923c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	0018      	movs	r0, r3
 8009242:	f000 fa5f 	bl	8009704 <UART_CheckIdleState>
 8009246:	0003      	movs	r3, r0
}
 8009248:	0018      	movs	r0, r3
 800924a:	46bd      	mov	sp, r7
 800924c:	b002      	add	sp, #8
 800924e:	bd80      	pop	{r7, pc}
 8009250:	ffffb7ff 	.word	0xffffb7ff

08009254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800925c:	231a      	movs	r3, #26
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4313      	orrs	r3, r2
 800927a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4abc      	ldr	r2, [pc, #752]	@ (8009574 <UART_SetConfig+0x320>)
 8009284:	4013      	ands	r3, r2
 8009286:	0019      	movs	r1, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	430a      	orrs	r2, r1
 8009290:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4ab7      	ldr	r2, [pc, #732]	@ (8009578 <UART_SetConfig+0x324>)
 800929a:	4013      	ands	r3, r2
 800929c:	0019      	movs	r1, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	4aae      	ldr	r2, [pc, #696]	@ (800957c <UART_SetConfig+0x328>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	0019      	movs	r1, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d6:	220f      	movs	r2, #15
 80092d8:	4393      	bics	r3, r2
 80092da:	0019      	movs	r1, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4aa4      	ldr	r2, [pc, #656]	@ (8009580 <UART_SetConfig+0x32c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d127      	bne.n	8009342 <UART_SetConfig+0xee>
 80092f2:	4ba4      	ldr	r3, [pc, #656]	@ (8009584 <UART_SetConfig+0x330>)
 80092f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f6:	2203      	movs	r2, #3
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d017      	beq.n	800932e <UART_SetConfig+0xda>
 80092fe:	d81b      	bhi.n	8009338 <UART_SetConfig+0xe4>
 8009300:	2b02      	cmp	r3, #2
 8009302:	d00a      	beq.n	800931a <UART_SetConfig+0xc6>
 8009304:	d818      	bhi.n	8009338 <UART_SetConfig+0xe4>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <UART_SetConfig+0xbc>
 800930a:	2b01      	cmp	r3, #1
 800930c:	d00a      	beq.n	8009324 <UART_SetConfig+0xd0>
 800930e:	e013      	b.n	8009338 <UART_SetConfig+0xe4>
 8009310:	231b      	movs	r3, #27
 8009312:	18fb      	adds	r3, r7, r3
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e058      	b.n	80093cc <UART_SetConfig+0x178>
 800931a:	231b      	movs	r3, #27
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	2202      	movs	r2, #2
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e053      	b.n	80093cc <UART_SetConfig+0x178>
 8009324:	231b      	movs	r3, #27
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	2204      	movs	r2, #4
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e04e      	b.n	80093cc <UART_SetConfig+0x178>
 800932e:	231b      	movs	r3, #27
 8009330:	18fb      	adds	r3, r7, r3
 8009332:	2208      	movs	r2, #8
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	e049      	b.n	80093cc <UART_SetConfig+0x178>
 8009338:	231b      	movs	r3, #27
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	2210      	movs	r2, #16
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e044      	b.n	80093cc <UART_SetConfig+0x178>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a90      	ldr	r2, [pc, #576]	@ (8009588 <UART_SetConfig+0x334>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d127      	bne.n	800939c <UART_SetConfig+0x148>
 800934c:	4b8d      	ldr	r3, [pc, #564]	@ (8009584 <UART_SetConfig+0x330>)
 800934e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009350:	220c      	movs	r2, #12
 8009352:	4013      	ands	r3, r2
 8009354:	2b0c      	cmp	r3, #12
 8009356:	d017      	beq.n	8009388 <UART_SetConfig+0x134>
 8009358:	d81b      	bhi.n	8009392 <UART_SetConfig+0x13e>
 800935a:	2b08      	cmp	r3, #8
 800935c:	d00a      	beq.n	8009374 <UART_SetConfig+0x120>
 800935e:	d818      	bhi.n	8009392 <UART_SetConfig+0x13e>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <UART_SetConfig+0x116>
 8009364:	2b04      	cmp	r3, #4
 8009366:	d00a      	beq.n	800937e <UART_SetConfig+0x12a>
 8009368:	e013      	b.n	8009392 <UART_SetConfig+0x13e>
 800936a:	231b      	movs	r3, #27
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	e02b      	b.n	80093cc <UART_SetConfig+0x178>
 8009374:	231b      	movs	r3, #27
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	2202      	movs	r2, #2
 800937a:	701a      	strb	r2, [r3, #0]
 800937c:	e026      	b.n	80093cc <UART_SetConfig+0x178>
 800937e:	231b      	movs	r3, #27
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	2204      	movs	r2, #4
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e021      	b.n	80093cc <UART_SetConfig+0x178>
 8009388:	231b      	movs	r3, #27
 800938a:	18fb      	adds	r3, r7, r3
 800938c:	2208      	movs	r2, #8
 800938e:	701a      	strb	r2, [r3, #0]
 8009390:	e01c      	b.n	80093cc <UART_SetConfig+0x178>
 8009392:	231b      	movs	r3, #27
 8009394:	18fb      	adds	r3, r7, r3
 8009396:	2210      	movs	r2, #16
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	e017      	b.n	80093cc <UART_SetConfig+0x178>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a7a      	ldr	r2, [pc, #488]	@ (800958c <UART_SetConfig+0x338>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d104      	bne.n	80093b0 <UART_SetConfig+0x15c>
 80093a6:	231b      	movs	r3, #27
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e00d      	b.n	80093cc <UART_SetConfig+0x178>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a76      	ldr	r2, [pc, #472]	@ (8009590 <UART_SetConfig+0x33c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d104      	bne.n	80093c4 <UART_SetConfig+0x170>
 80093ba:	231b      	movs	r3, #27
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	e003      	b.n	80093cc <UART_SetConfig+0x178>
 80093c4:	231b      	movs	r3, #27
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	2210      	movs	r2, #16
 80093ca:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	2380      	movs	r3, #128	@ 0x80
 80093d2:	021b      	lsls	r3, r3, #8
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d000      	beq.n	80093da <UART_SetConfig+0x186>
 80093d8:	e065      	b.n	80094a6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80093da:	231b      	movs	r3, #27
 80093dc:	18fb      	adds	r3, r7, r3
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d015      	beq.n	8009410 <UART_SetConfig+0x1bc>
 80093e4:	dc18      	bgt.n	8009418 <UART_SetConfig+0x1c4>
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d00d      	beq.n	8009406 <UART_SetConfig+0x1b2>
 80093ea:	dc15      	bgt.n	8009418 <UART_SetConfig+0x1c4>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <UART_SetConfig+0x1a2>
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d005      	beq.n	8009400 <UART_SetConfig+0x1ac>
 80093f4:	e010      	b.n	8009418 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f6:	f7ff fa63 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 80093fa:	0003      	movs	r3, r0
 80093fc:	617b      	str	r3, [r7, #20]
        break;
 80093fe:	e012      	b.n	8009426 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009400:	4b64      	ldr	r3, [pc, #400]	@ (8009594 <UART_SetConfig+0x340>)
 8009402:	617b      	str	r3, [r7, #20]
        break;
 8009404:	e00f      	b.n	8009426 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009406:	f7ff f9cf 	bl	80087a8 <HAL_RCC_GetSysClockFreq>
 800940a:	0003      	movs	r3, r0
 800940c:	617b      	str	r3, [r7, #20]
        break;
 800940e:	e00a      	b.n	8009426 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009410:	2380      	movs	r3, #128	@ 0x80
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	617b      	str	r3, [r7, #20]
        break;
 8009416:	e006      	b.n	8009426 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800941c:	231a      	movs	r3, #26
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	2201      	movs	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
        break;
 8009424:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d100      	bne.n	800942e <UART_SetConfig+0x1da>
 800942c:	e08d      	b.n	800954a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009432:	4b59      	ldr	r3, [pc, #356]	@ (8009598 <UART_SetConfig+0x344>)
 8009434:	0052      	lsls	r2, r2, #1
 8009436:	5ad3      	ldrh	r3, [r2, r3]
 8009438:	0019      	movs	r1, r3
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f7f6 fe7c 	bl	8000138 <__udivsi3>
 8009440:	0003      	movs	r3, r0
 8009442:	005a      	lsls	r2, r3, #1
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	085b      	lsrs	r3, r3, #1
 800944a:	18d2      	adds	r2, r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	0019      	movs	r1, r3
 8009452:	0010      	movs	r0, r2
 8009454:	f7f6 fe70 	bl	8000138 <__udivsi3>
 8009458:	0003      	movs	r3, r0
 800945a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b0f      	cmp	r3, #15
 8009460:	d91c      	bls.n	800949c <UART_SetConfig+0x248>
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	2380      	movs	r3, #128	@ 0x80
 8009466:	025b      	lsls	r3, r3, #9
 8009468:	429a      	cmp	r2, r3
 800946a:	d217      	bcs.n	800949c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	b29a      	uxth	r2, r3
 8009470:	200e      	movs	r0, #14
 8009472:	183b      	adds	r3, r7, r0
 8009474:	210f      	movs	r1, #15
 8009476:	438a      	bics	r2, r1
 8009478:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	085b      	lsrs	r3, r3, #1
 800947e:	b29b      	uxth	r3, r3
 8009480:	2207      	movs	r2, #7
 8009482:	4013      	ands	r3, r2
 8009484:	b299      	uxth	r1, r3
 8009486:	183b      	adds	r3, r7, r0
 8009488:	183a      	adds	r2, r7, r0
 800948a:	8812      	ldrh	r2, [r2, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	183a      	adds	r2, r7, r0
 8009496:	8812      	ldrh	r2, [r2, #0]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	e056      	b.n	800954a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800949c:	231a      	movs	r3, #26
 800949e:	18fb      	adds	r3, r7, r3
 80094a0:	2201      	movs	r2, #1
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	e051      	b.n	800954a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094a6:	231b      	movs	r3, #27
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d015      	beq.n	80094dc <UART_SetConfig+0x288>
 80094b0:	dc18      	bgt.n	80094e4 <UART_SetConfig+0x290>
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d00d      	beq.n	80094d2 <UART_SetConfig+0x27e>
 80094b6:	dc15      	bgt.n	80094e4 <UART_SetConfig+0x290>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <UART_SetConfig+0x26e>
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d005      	beq.n	80094cc <UART_SetConfig+0x278>
 80094c0:	e010      	b.n	80094e4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094c2:	f7ff f9fd 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 80094c6:	0003      	movs	r3, r0
 80094c8:	617b      	str	r3, [r7, #20]
        break;
 80094ca:	e012      	b.n	80094f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094cc:	4b31      	ldr	r3, [pc, #196]	@ (8009594 <UART_SetConfig+0x340>)
 80094ce:	617b      	str	r3, [r7, #20]
        break;
 80094d0:	e00f      	b.n	80094f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094d2:	f7ff f969 	bl	80087a8 <HAL_RCC_GetSysClockFreq>
 80094d6:	0003      	movs	r3, r0
 80094d8:	617b      	str	r3, [r7, #20]
        break;
 80094da:	e00a      	b.n	80094f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094dc:	2380      	movs	r3, #128	@ 0x80
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	617b      	str	r3, [r7, #20]
        break;
 80094e2:	e006      	b.n	80094f2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094e8:	231a      	movs	r3, #26
 80094ea:	18fb      	adds	r3, r7, r3
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
        break;
 80094f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d028      	beq.n	800954a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094fc:	4b26      	ldr	r3, [pc, #152]	@ (8009598 <UART_SetConfig+0x344>)
 80094fe:	0052      	lsls	r2, r2, #1
 8009500:	5ad3      	ldrh	r3, [r2, r3]
 8009502:	0019      	movs	r1, r3
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f7f6 fe17 	bl	8000138 <__udivsi3>
 800950a:	0003      	movs	r3, r0
 800950c:	001a      	movs	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	085b      	lsrs	r3, r3, #1
 8009514:	18d2      	adds	r2, r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	0019      	movs	r1, r3
 800951c:	0010      	movs	r0, r2
 800951e:	f7f6 fe0b 	bl	8000138 <__udivsi3>
 8009522:	0003      	movs	r3, r0
 8009524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b0f      	cmp	r3, #15
 800952a:	d90a      	bls.n	8009542 <UART_SetConfig+0x2ee>
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	2380      	movs	r3, #128	@ 0x80
 8009530:	025b      	lsls	r3, r3, #9
 8009532:	429a      	cmp	r2, r3
 8009534:	d205      	bcs.n	8009542 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	e003      	b.n	800954a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009542:	231a      	movs	r3, #26
 8009544:	18fb      	adds	r3, r7, r3
 8009546:	2201      	movs	r2, #1
 8009548:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	226a      	movs	r2, #106	@ 0x6a
 800954e:	2101      	movs	r1, #1
 8009550:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2268      	movs	r2, #104	@ 0x68
 8009556:	2101      	movs	r1, #1
 8009558:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009566:	231a      	movs	r3, #26
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	781b      	ldrb	r3, [r3, #0]
}
 800956c:	0018      	movs	r0, r3
 800956e:	46bd      	mov	sp, r7
 8009570:	b008      	add	sp, #32
 8009572:	bd80      	pop	{r7, pc}
 8009574:	cfff69f3 	.word	0xcfff69f3
 8009578:	ffffcfff 	.word	0xffffcfff
 800957c:	11fff4ff 	.word	0x11fff4ff
 8009580:	40013800 	.word	0x40013800
 8009584:	40021000 	.word	0x40021000
 8009588:	40004400 	.word	0x40004400
 800958c:	40004800 	.word	0x40004800
 8009590:	40004c00 	.word	0x40004c00
 8009594:	00f42400 	.word	0x00f42400
 8009598:	0800c5e8 	.word	0x0800c5e8

0800959c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a8:	2208      	movs	r2, #8
 80095aa:	4013      	ands	r3, r2
 80095ac:	d00b      	beq.n	80095c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a4a      	ldr	r2, [pc, #296]	@ (80096e0 <UART_AdvFeatureConfig+0x144>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	0019      	movs	r1, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ca:	2201      	movs	r2, #1
 80095cc:	4013      	ands	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4a43      	ldr	r2, [pc, #268]	@ (80096e4 <UART_AdvFeatureConfig+0x148>)
 80095d8:	4013      	ands	r3, r2
 80095da:	0019      	movs	r1, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	2202      	movs	r2, #2
 80095ee:	4013      	ands	r3, r2
 80095f0:	d00b      	beq.n	800960a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4a3b      	ldr	r2, [pc, #236]	@ (80096e8 <UART_AdvFeatureConfig+0x14c>)
 80095fa:	4013      	ands	r3, r2
 80095fc:	0019      	movs	r1, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	2204      	movs	r2, #4
 8009610:	4013      	ands	r3, r2
 8009612:	d00b      	beq.n	800962c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4a34      	ldr	r2, [pc, #208]	@ (80096ec <UART_AdvFeatureConfig+0x150>)
 800961c:	4013      	ands	r3, r2
 800961e:	0019      	movs	r1, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009630:	2210      	movs	r2, #16
 8009632:	4013      	ands	r3, r2
 8009634:	d00b      	beq.n	800964e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	4a2c      	ldr	r2, [pc, #176]	@ (80096f0 <UART_AdvFeatureConfig+0x154>)
 800963e:	4013      	ands	r3, r2
 8009640:	0019      	movs	r1, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	2220      	movs	r2, #32
 8009654:	4013      	ands	r3, r2
 8009656:	d00b      	beq.n	8009670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	4a25      	ldr	r2, [pc, #148]	@ (80096f4 <UART_AdvFeatureConfig+0x158>)
 8009660:	4013      	ands	r3, r2
 8009662:	0019      	movs	r1, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009674:	2240      	movs	r2, #64	@ 0x40
 8009676:	4013      	ands	r3, r2
 8009678:	d01d      	beq.n	80096b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	4a1d      	ldr	r2, [pc, #116]	@ (80096f8 <UART_AdvFeatureConfig+0x15c>)
 8009682:	4013      	ands	r3, r2
 8009684:	0019      	movs	r1, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009696:	2380      	movs	r3, #128	@ 0x80
 8009698:	035b      	lsls	r3, r3, #13
 800969a:	429a      	cmp	r2, r3
 800969c:	d10b      	bne.n	80096b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	4a15      	ldr	r2, [pc, #84]	@ (80096fc <UART_AdvFeatureConfig+0x160>)
 80096a6:	4013      	ands	r3, r2
 80096a8:	0019      	movs	r1, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	2280      	movs	r2, #128	@ 0x80
 80096bc:	4013      	ands	r3, r2
 80096be:	d00b      	beq.n	80096d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009700 <UART_AdvFeatureConfig+0x164>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	0019      	movs	r1, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]
  }
}
 80096d8:	46c0      	nop			@ (mov r8, r8)
 80096da:	46bd      	mov	sp, r7
 80096dc:	b002      	add	sp, #8
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	ffff7fff 	.word	0xffff7fff
 80096e4:	fffdffff 	.word	0xfffdffff
 80096e8:	fffeffff 	.word	0xfffeffff
 80096ec:	fffbffff 	.word	0xfffbffff
 80096f0:	ffffefff 	.word	0xffffefff
 80096f4:	ffffdfff 	.word	0xffffdfff
 80096f8:	ffefffff 	.word	0xffefffff
 80096fc:	ff9fffff 	.word	0xff9fffff
 8009700:	fff7ffff 	.word	0xfff7ffff

08009704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b092      	sub	sp, #72	@ 0x48
 8009708:	af02      	add	r7, sp, #8
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2290      	movs	r2, #144	@ 0x90
 8009710:	2100      	movs	r1, #0
 8009712:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009714:	f7fb fb00 	bl	8004d18 <HAL_GetTick>
 8009718:	0003      	movs	r3, r0
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2208      	movs	r2, #8
 8009724:	4013      	ands	r3, r2
 8009726:	2b08      	cmp	r3, #8
 8009728:	d12d      	bne.n	8009786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800972a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972c:	2280      	movs	r2, #128	@ 0x80
 800972e:	0391      	lsls	r1, r2, #14
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4a47      	ldr	r2, [pc, #284]	@ (8009850 <UART_CheckIdleState+0x14c>)
 8009734:	9200      	str	r2, [sp, #0]
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f88e 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d022      	beq.n	8009786 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009740:	f3ef 8310 	mrs	r3, PRIMASK
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800974a:	2301      	movs	r3, #1
 800974c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	f383 8810 	msr	PRIMASK, r3
}
 8009754:	46c0      	nop			@ (mov r8, r8)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2180      	movs	r1, #128	@ 0x80
 8009762:	438a      	bics	r2, r1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	f383 8810 	msr	PRIMASK, r3
}
 8009770:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2288      	movs	r2, #136	@ 0x88
 8009776:	2120      	movs	r1, #32
 8009778:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2284      	movs	r2, #132	@ 0x84
 800977e:	2100      	movs	r1, #0
 8009780:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e060      	b.n	8009848 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2204      	movs	r2, #4
 800978e:	4013      	ands	r3, r2
 8009790:	2b04      	cmp	r3, #4
 8009792:	d146      	bne.n	8009822 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009796:	2280      	movs	r2, #128	@ 0x80
 8009798:	03d1      	lsls	r1, r2, #15
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	4a2c      	ldr	r2, [pc, #176]	@ (8009850 <UART_CheckIdleState+0x14c>)
 800979e:	9200      	str	r2, [sp, #0]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f000 f859 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 80097a6:	1e03      	subs	r3, r0, #0
 80097a8:	d03b      	beq.n	8009822 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097aa:	f3ef 8310 	mrs	r3, PRIMASK
 80097ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80097b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b4:	2301      	movs	r3, #1
 80097b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f383 8810 	msr	PRIMASK, r3
}
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4922      	ldr	r1, [pc, #136]	@ (8009854 <UART_CheckIdleState+0x150>)
 80097cc:	400a      	ands	r2, r1
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f383 8810 	msr	PRIMASK, r3
}
 80097da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097dc:	f3ef 8310 	mrs	r3, PRIMASK
 80097e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80097e2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097e6:	2301      	movs	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f383 8810 	msr	PRIMASK, r3
}
 80097f0:	46c0      	nop			@ (mov r8, r8)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2101      	movs	r1, #1
 80097fe:	438a      	bics	r2, r1
 8009800:	609a      	str	r2, [r3, #8]
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	228c      	movs	r2, #140	@ 0x8c
 8009812:	2120      	movs	r1, #32
 8009814:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2284      	movs	r2, #132	@ 0x84
 800981a:	2100      	movs	r1, #0
 800981c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e012      	b.n	8009848 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2288      	movs	r2, #136	@ 0x88
 8009826:	2120      	movs	r1, #32
 8009828:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	228c      	movs	r2, #140	@ 0x8c
 800982e:	2120      	movs	r1, #32
 8009830:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2284      	movs	r2, #132	@ 0x84
 8009842:	2100      	movs	r1, #0
 8009844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	0018      	movs	r0, r3
 800984a:	46bd      	mov	sp, r7
 800984c:	b010      	add	sp, #64	@ 0x40
 800984e:	bd80      	pop	{r7, pc}
 8009850:	01ffffff 	.word	0x01ffffff
 8009854:	fffffedf 	.word	0xfffffedf

08009858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	1dfb      	adds	r3, r7, #7
 8009866:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009868:	e051      	b.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	3301      	adds	r3, #1
 800986e:	d04e      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009870:	f7fb fa52 	bl	8004d18 <HAL_GetTick>
 8009874:	0002      	movs	r2, r0
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	429a      	cmp	r2, r3
 800987e:	d302      	bcc.n	8009886 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e051      	b.n	800992e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2204      	movs	r2, #4
 8009892:	4013      	ands	r3, r2
 8009894:	d03b      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b80      	cmp	r3, #128	@ 0x80
 800989a:	d038      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b40      	cmp	r3, #64	@ 0x40
 80098a0:	d035      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	2208      	movs	r2, #8
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d111      	bne.n	80098d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2208      	movs	r2, #8
 80098b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	0018      	movs	r0, r3
 80098bc:	f000 f83c 	bl	8009938 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2290      	movs	r2, #144	@ 0x90
 80098c4:	2108      	movs	r1, #8
 80098c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2284      	movs	r2, #132	@ 0x84
 80098cc:	2100      	movs	r1, #0
 80098ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e02c      	b.n	800992e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69da      	ldr	r2, [r3, #28]
 80098da:	2380      	movs	r3, #128	@ 0x80
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	401a      	ands	r2, r3
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d112      	bne.n	800990e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2280      	movs	r2, #128	@ 0x80
 80098ee:	0112      	lsls	r2, r2, #4
 80098f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	0018      	movs	r0, r3
 80098f6:	f000 f81f 	bl	8009938 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2290      	movs	r2, #144	@ 0x90
 80098fe:	2120      	movs	r1, #32
 8009900:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2284      	movs	r2, #132	@ 0x84
 8009906:	2100      	movs	r1, #0
 8009908:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e00f      	b.n	800992e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	4013      	ands	r3, r2
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	425a      	negs	r2, r3
 800991e:	4153      	adcs	r3, r2
 8009920:	b2db      	uxtb	r3, r3
 8009922:	001a      	movs	r2, r3
 8009924:	1dfb      	adds	r3, r7, #7
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d09e      	beq.n	800986a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	0018      	movs	r0, r3
 8009930:	46bd      	mov	sp, r7
 8009932:	b004      	add	sp, #16
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08e      	sub	sp, #56	@ 0x38
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009940:	f3ef 8310 	mrs	r3, PRIMASK
 8009944:	617b      	str	r3, [r7, #20]
  return(result);
 8009946:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009948:	637b      	str	r3, [r7, #52]	@ 0x34
 800994a:	2301      	movs	r3, #1
 800994c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	f383 8810 	msr	PRIMASK, r3
}
 8009954:	46c0      	nop			@ (mov r8, r8)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4926      	ldr	r1, [pc, #152]	@ (80099fc <UART_EndRxTransfer+0xc4>)
 8009962:	400a      	ands	r2, r1
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	f383 8810 	msr	PRIMASK, r3
}
 8009970:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009972:	f3ef 8310 	mrs	r3, PRIMASK
 8009976:	623b      	str	r3, [r7, #32]
  return(result);
 8009978:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997a:	633b      	str	r3, [r7, #48]	@ 0x30
 800997c:	2301      	movs	r3, #1
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	f383 8810 	msr	PRIMASK, r3
}
 8009986:	46c0      	nop			@ (mov r8, r8)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	491b      	ldr	r1, [pc, #108]	@ (8009a00 <UART_EndRxTransfer+0xc8>)
 8009994:	400a      	ands	r2, r1
 8009996:	609a      	str	r2, [r3, #8]
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	f383 8810 	msr	PRIMASK, r3
}
 80099a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d118      	bne.n	80099de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ac:	f3ef 8310 	mrs	r3, PRIMASK
 80099b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80099b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099b6:	2301      	movs	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f383 8810 	msr	PRIMASK, r3
}
 80099c0:	46c0      	nop			@ (mov r8, r8)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2110      	movs	r1, #16
 80099ce:	438a      	bics	r2, r1
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f383 8810 	msr	PRIMASK, r3
}
 80099dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	228c      	movs	r2, #140	@ 0x8c
 80099e2:	2120      	movs	r1, #32
 80099e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099f2:	46c0      	nop			@ (mov r8, r8)
 80099f4:	46bd      	mov	sp, r7
 80099f6:	b00e      	add	sp, #56	@ 0x38
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	46c0      	nop			@ (mov r8, r8)
 80099fc:	fffffedf 	.word	0xfffffedf
 8009a00:	effffffe 	.word	0xeffffffe

08009a04 <__cvt>:
 8009a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a06:	001f      	movs	r7, r3
 8009a08:	2300      	movs	r3, #0
 8009a0a:	0016      	movs	r6, r2
 8009a0c:	b08b      	sub	sp, #44	@ 0x2c
 8009a0e:	429f      	cmp	r7, r3
 8009a10:	da04      	bge.n	8009a1c <__cvt+0x18>
 8009a12:	2180      	movs	r1, #128	@ 0x80
 8009a14:	0609      	lsls	r1, r1, #24
 8009a16:	187b      	adds	r3, r7, r1
 8009a18:	001f      	movs	r7, r3
 8009a1a:	232d      	movs	r3, #45	@ 0x2d
 8009a1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a1e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009a20:	7013      	strb	r3, [r2, #0]
 8009a22:	2320      	movs	r3, #32
 8009a24:	2203      	movs	r2, #3
 8009a26:	439d      	bics	r5, r3
 8009a28:	2d46      	cmp	r5, #70	@ 0x46
 8009a2a:	d007      	beq.n	8009a3c <__cvt+0x38>
 8009a2c:	002b      	movs	r3, r5
 8009a2e:	3b45      	subs	r3, #69	@ 0x45
 8009a30:	4259      	negs	r1, r3
 8009a32:	414b      	adcs	r3, r1
 8009a34:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009a36:	3a01      	subs	r2, #1
 8009a38:	18cb      	adds	r3, r1, r3
 8009a3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a3c:	ab09      	add	r3, sp, #36	@ 0x24
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	ab08      	add	r3, sp, #32
 8009a42:	9303      	str	r3, [sp, #12]
 8009a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a46:	9200      	str	r2, [sp, #0]
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a4c:	0032      	movs	r2, r6
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	003b      	movs	r3, r7
 8009a52:	f000 fe75 	bl	800a740 <_dtoa_r>
 8009a56:	0004      	movs	r4, r0
 8009a58:	2d47      	cmp	r5, #71	@ 0x47
 8009a5a:	d11b      	bne.n	8009a94 <__cvt+0x90>
 8009a5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a5e:	07db      	lsls	r3, r3, #31
 8009a60:	d511      	bpl.n	8009a86 <__cvt+0x82>
 8009a62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a64:	18c3      	adds	r3, r0, r3
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	0030      	movs	r0, r6
 8009a6e:	0039      	movs	r1, r7
 8009a70:	f7f6 fce8 	bl	8000444 <__aeabi_dcmpeq>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d001      	beq.n	8009a7c <__cvt+0x78>
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7c:	2230      	movs	r2, #48	@ 0x30
 8009a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a80:	9907      	ldr	r1, [sp, #28]
 8009a82:	428b      	cmp	r3, r1
 8009a84:	d320      	bcc.n	8009ac8 <__cvt+0xc4>
 8009a86:	0020      	movs	r0, r4
 8009a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009a8c:	1b1b      	subs	r3, r3, r4
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	b00b      	add	sp, #44	@ 0x2c
 8009a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a96:	18c3      	adds	r3, r0, r3
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	2d46      	cmp	r5, #70	@ 0x46
 8009a9c:	d1e4      	bne.n	8009a68 <__cvt+0x64>
 8009a9e:	7803      	ldrb	r3, [r0, #0]
 8009aa0:	2b30      	cmp	r3, #48	@ 0x30
 8009aa2:	d10c      	bne.n	8009abe <__cvt+0xba>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	0030      	movs	r0, r6
 8009aaa:	0039      	movs	r1, r7
 8009aac:	f7f6 fcca 	bl	8000444 <__aeabi_dcmpeq>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d104      	bne.n	8009abe <__cvt+0xba>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009ab8:	1a9b      	subs	r3, r3, r2
 8009aba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ac0:	9a07      	ldr	r2, [sp, #28]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	18d3      	adds	r3, r2, r3
 8009ac6:	e7ce      	b.n	8009a66 <__cvt+0x62>
 8009ac8:	1c59      	adds	r1, r3, #1
 8009aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	e7d6      	b.n	8009a7e <__cvt+0x7a>

08009ad0 <__exponent>:
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad2:	232b      	movs	r3, #43	@ 0x2b
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	0005      	movs	r5, r0
 8009ad8:	1e0c      	subs	r4, r1, #0
 8009ada:	7002      	strb	r2, [r0, #0]
 8009adc:	da01      	bge.n	8009ae2 <__exponent+0x12>
 8009ade:	424c      	negs	r4, r1
 8009ae0:	3302      	adds	r3, #2
 8009ae2:	706b      	strb	r3, [r5, #1]
 8009ae4:	2c09      	cmp	r4, #9
 8009ae6:	dd2c      	ble.n	8009b42 <__exponent+0x72>
 8009ae8:	ab02      	add	r3, sp, #8
 8009aea:	1dde      	adds	r6, r3, #7
 8009aec:	0020      	movs	r0, r4
 8009aee:	210a      	movs	r1, #10
 8009af0:	f7f6 fc92 	bl	8000418 <__aeabi_idivmod>
 8009af4:	0037      	movs	r7, r6
 8009af6:	3130      	adds	r1, #48	@ 0x30
 8009af8:	3e01      	subs	r6, #1
 8009afa:	0020      	movs	r0, r4
 8009afc:	7031      	strb	r1, [r6, #0]
 8009afe:	210a      	movs	r1, #10
 8009b00:	9401      	str	r4, [sp, #4]
 8009b02:	f7f6 fba3 	bl	800024c <__divsi3>
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	0004      	movs	r4, r0
 8009b0a:	2b63      	cmp	r3, #99	@ 0x63
 8009b0c:	dcee      	bgt.n	8009aec <__exponent+0x1c>
 8009b0e:	1eba      	subs	r2, r7, #2
 8009b10:	1ca8      	adds	r0, r5, #2
 8009b12:	0001      	movs	r1, r0
 8009b14:	0013      	movs	r3, r2
 8009b16:	3430      	adds	r4, #48	@ 0x30
 8009b18:	7014      	strb	r4, [r2, #0]
 8009b1a:	ac02      	add	r4, sp, #8
 8009b1c:	3407      	adds	r4, #7
 8009b1e:	429c      	cmp	r4, r3
 8009b20:	d80a      	bhi.n	8009b38 <__exponent+0x68>
 8009b22:	2300      	movs	r3, #0
 8009b24:	4294      	cmp	r4, r2
 8009b26:	d303      	bcc.n	8009b30 <__exponent+0x60>
 8009b28:	3309      	adds	r3, #9
 8009b2a:	aa02      	add	r2, sp, #8
 8009b2c:	189b      	adds	r3, r3, r2
 8009b2e:	1bdb      	subs	r3, r3, r7
 8009b30:	18c0      	adds	r0, r0, r3
 8009b32:	1b40      	subs	r0, r0, r5
 8009b34:	b005      	add	sp, #20
 8009b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b38:	781c      	ldrb	r4, [r3, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	700c      	strb	r4, [r1, #0]
 8009b3e:	3101      	adds	r1, #1
 8009b40:	e7eb      	b.n	8009b1a <__exponent+0x4a>
 8009b42:	2330      	movs	r3, #48	@ 0x30
 8009b44:	18e4      	adds	r4, r4, r3
 8009b46:	70ab      	strb	r3, [r5, #2]
 8009b48:	1d28      	adds	r0, r5, #4
 8009b4a:	70ec      	strb	r4, [r5, #3]
 8009b4c:	e7f1      	b.n	8009b32 <__exponent+0x62>
	...

08009b50 <_printf_float>:
 8009b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b52:	b097      	sub	sp, #92	@ 0x5c
 8009b54:	000d      	movs	r5, r1
 8009b56:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b58:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b5e:	f000 fcdf 	bl	800a520 <_localeconv_r>
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	0018      	movs	r0, r3
 8009b66:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b68:	f7f6 faca 	bl	8000100 <strlen>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009b70:	9314      	str	r3, [sp, #80]	@ 0x50
 8009b72:	7e2b      	ldrb	r3, [r5, #24]
 8009b74:	2207      	movs	r2, #7
 8009b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	05c9      	lsls	r1, r1, #23
 8009b82:	d545      	bpl.n	8009c10 <_printf_float+0xc0>
 8009b84:	189b      	adds	r3, r3, r2
 8009b86:	4393      	bics	r3, r2
 8009b88:	001a      	movs	r2, r3
 8009b8a:	3208      	adds	r2, #8
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	681e      	ldr	r6, [r3, #0]
 8009b92:	685f      	ldr	r7, [r3, #4]
 8009b94:	007b      	lsls	r3, r7, #1
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b9a:	9610      	str	r6, [sp, #64]	@ 0x40
 8009b9c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8009b9e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009ba0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009ba2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009ba4:	4ba7      	ldr	r3, [pc, #668]	@ (8009e44 <_printf_float+0x2f4>)
 8009ba6:	4252      	negs	r2, r2
 8009ba8:	f7f9 f954 	bl	8002e54 <__aeabi_dcmpun>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d131      	bne.n	8009c14 <_printf_float+0xc4>
 8009bb0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009bb2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	4ba3      	ldr	r3, [pc, #652]	@ (8009e44 <_printf_float+0x2f4>)
 8009bb8:	4252      	negs	r2, r2
 8009bba:	f7f6 fc53 	bl	8000464 <__aeabi_dcmple>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d128      	bne.n	8009c14 <_printf_float+0xc4>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	0030      	movs	r0, r6
 8009bc8:	0039      	movs	r1, r7
 8009bca:	f7f6 fc41 	bl	8000450 <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d003      	beq.n	8009bda <_printf_float+0x8a>
 8009bd2:	002b      	movs	r3, r5
 8009bd4:	222d      	movs	r2, #45	@ 0x2d
 8009bd6:	3343      	adds	r3, #67	@ 0x43
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bdc:	4f9a      	ldr	r7, [pc, #616]	@ (8009e48 <_printf_float+0x2f8>)
 8009bde:	2b47      	cmp	r3, #71	@ 0x47
 8009be0:	d800      	bhi.n	8009be4 <_printf_float+0x94>
 8009be2:	4f9a      	ldr	r7, [pc, #616]	@ (8009e4c <_printf_float+0x2fc>)
 8009be4:	2303      	movs	r3, #3
 8009be6:	2400      	movs	r4, #0
 8009be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bea:	612b      	str	r3, [r5, #16]
 8009bec:	3301      	adds	r3, #1
 8009bee:	439a      	bics	r2, r3
 8009bf0:	602a      	str	r2, [r5, #0]
 8009bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bf4:	0029      	movs	r1, r5
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bfc:	aa15      	add	r2, sp, #84	@ 0x54
 8009bfe:	f000 f9e5 	bl	8009fcc <_printf_common>
 8009c02:	3001      	adds	r0, #1
 8009c04:	d000      	beq.n	8009c08 <_printf_float+0xb8>
 8009c06:	e09e      	b.n	8009d46 <_printf_float+0x1f6>
 8009c08:	2001      	movs	r0, #1
 8009c0a:	4240      	negs	r0, r0
 8009c0c:	b017      	add	sp, #92	@ 0x5c
 8009c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c10:	3307      	adds	r3, #7
 8009c12:	e7b8      	b.n	8009b86 <_printf_float+0x36>
 8009c14:	0032      	movs	r2, r6
 8009c16:	003b      	movs	r3, r7
 8009c18:	0030      	movs	r0, r6
 8009c1a:	0039      	movs	r1, r7
 8009c1c:	f7f9 f91a 	bl	8002e54 <__aeabi_dcmpun>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d00b      	beq.n	8009c3c <_printf_float+0xec>
 8009c24:	2f00      	cmp	r7, #0
 8009c26:	da03      	bge.n	8009c30 <_printf_float+0xe0>
 8009c28:	002b      	movs	r3, r5
 8009c2a:	222d      	movs	r2, #45	@ 0x2d
 8009c2c:	3343      	adds	r3, #67	@ 0x43
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c32:	4f87      	ldr	r7, [pc, #540]	@ (8009e50 <_printf_float+0x300>)
 8009c34:	2b47      	cmp	r3, #71	@ 0x47
 8009c36:	d8d5      	bhi.n	8009be4 <_printf_float+0x94>
 8009c38:	4f86      	ldr	r7, [pc, #536]	@ (8009e54 <_printf_float+0x304>)
 8009c3a:	e7d3      	b.n	8009be4 <_printf_float+0x94>
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009c40:	686b      	ldr	r3, [r5, #4]
 8009c42:	4394      	bics	r4, r2
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	d146      	bne.n	8009cd6 <_printf_float+0x186>
 8009c48:	3307      	adds	r3, #7
 8009c4a:	606b      	str	r3, [r5, #4]
 8009c4c:	2380      	movs	r3, #128	@ 0x80
 8009c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c50:	00db      	lsls	r3, r3, #3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	2200      	movs	r2, #0
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	9206      	str	r2, [sp, #24]
 8009c5a:	aa14      	add	r2, sp, #80	@ 0x50
 8009c5c:	9205      	str	r2, [sp, #20]
 8009c5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c60:	a90a      	add	r1, sp, #40	@ 0x28
 8009c62:	9204      	str	r2, [sp, #16]
 8009c64:	aa13      	add	r2, sp, #76	@ 0x4c
 8009c66:	9203      	str	r2, [sp, #12]
 8009c68:	2223      	movs	r2, #35	@ 0x23
 8009c6a:	1852      	adds	r2, r2, r1
 8009c6c:	9202      	str	r2, [sp, #8]
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	686b      	ldr	r3, [r5, #4]
 8009c72:	0032      	movs	r2, r6
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c78:	003b      	movs	r3, r7
 8009c7a:	f7ff fec3 	bl	8009a04 <__cvt>
 8009c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c80:	0007      	movs	r7, r0
 8009c82:	2c47      	cmp	r4, #71	@ 0x47
 8009c84:	d12d      	bne.n	8009ce2 <_printf_float+0x192>
 8009c86:	1cd3      	adds	r3, r2, #3
 8009c88:	db02      	blt.n	8009c90 <_printf_float+0x140>
 8009c8a:	686b      	ldr	r3, [r5, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	dd47      	ble.n	8009d20 <_printf_float+0x1d0>
 8009c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c92:	3b02      	subs	r3, #2
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c98:	0028      	movs	r0, r5
 8009c9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c9e:	3901      	subs	r1, #1
 8009ca0:	3050      	adds	r0, #80	@ 0x50
 8009ca2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009ca4:	f7ff ff14 	bl	8009ad0 <__exponent>
 8009ca8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009caa:	0004      	movs	r4, r0
 8009cac:	1813      	adds	r3, r2, r0
 8009cae:	612b      	str	r3, [r5, #16]
 8009cb0:	2a01      	cmp	r2, #1
 8009cb2:	dc02      	bgt.n	8009cba <_printf_float+0x16a>
 8009cb4:	682a      	ldr	r2, [r5, #0]
 8009cb6:	07d2      	lsls	r2, r2, #31
 8009cb8:	d501      	bpl.n	8009cbe <_printf_float+0x16e>
 8009cba:	3301      	adds	r3, #1
 8009cbc:	612b      	str	r3, [r5, #16]
 8009cbe:	2323      	movs	r3, #35	@ 0x23
 8009cc0:	aa0a      	add	r2, sp, #40	@ 0x28
 8009cc2:	189b      	adds	r3, r3, r2
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d100      	bne.n	8009ccc <_printf_float+0x17c>
 8009cca:	e792      	b.n	8009bf2 <_printf_float+0xa2>
 8009ccc:	002b      	movs	r3, r5
 8009cce:	222d      	movs	r2, #45	@ 0x2d
 8009cd0:	3343      	adds	r3, #67	@ 0x43
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	e78d      	b.n	8009bf2 <_printf_float+0xa2>
 8009cd6:	2c47      	cmp	r4, #71	@ 0x47
 8009cd8:	d1b8      	bne.n	8009c4c <_printf_float+0xfc>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1b6      	bne.n	8009c4c <_printf_float+0xfc>
 8009cde:	3301      	adds	r3, #1
 8009ce0:	e7b3      	b.n	8009c4a <_printf_float+0xfa>
 8009ce2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ce4:	2b65      	cmp	r3, #101	@ 0x65
 8009ce6:	d9d7      	bls.n	8009c98 <_printf_float+0x148>
 8009ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cea:	2b66      	cmp	r3, #102	@ 0x66
 8009cec:	d11a      	bne.n	8009d24 <_printf_float+0x1d4>
 8009cee:	686b      	ldr	r3, [r5, #4]
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	dd09      	ble.n	8009d08 <_printf_float+0x1b8>
 8009cf4:	612a      	str	r2, [r5, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <_printf_float+0x1b0>
 8009cfa:	6829      	ldr	r1, [r5, #0]
 8009cfc:	07c9      	lsls	r1, r1, #31
 8009cfe:	d50b      	bpl.n	8009d18 <_printf_float+0x1c8>
 8009d00:	3301      	adds	r3, #1
 8009d02:	189b      	adds	r3, r3, r2
 8009d04:	612b      	str	r3, [r5, #16]
 8009d06:	e007      	b.n	8009d18 <_printf_float+0x1c8>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <_printf_float+0x1c4>
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	4211      	tst	r1, r2
 8009d12:	d000      	beq.n	8009d16 <_printf_float+0x1c6>
 8009d14:	1c9a      	adds	r2, r3, #2
 8009d16:	612a      	str	r2, [r5, #16]
 8009d18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d1a:	2400      	movs	r4, #0
 8009d1c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009d1e:	e7ce      	b.n	8009cbe <_printf_float+0x16e>
 8009d20:	2367      	movs	r3, #103	@ 0x67
 8009d22:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d24:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009d26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	db06      	blt.n	8009d3a <_printf_float+0x1ea>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	6129      	str	r1, [r5, #16]
 8009d30:	07db      	lsls	r3, r3, #31
 8009d32:	d5f1      	bpl.n	8009d18 <_printf_float+0x1c8>
 8009d34:	3101      	adds	r1, #1
 8009d36:	6129      	str	r1, [r5, #16]
 8009d38:	e7ee      	b.n	8009d18 <_printf_float+0x1c8>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	dce0      	bgt.n	8009d02 <_printf_float+0x1b2>
 8009d40:	1892      	adds	r2, r2, r2
 8009d42:	1a52      	subs	r2, r2, r1
 8009d44:	e7dd      	b.n	8009d02 <_printf_float+0x1b2>
 8009d46:	682a      	ldr	r2, [r5, #0]
 8009d48:	0553      	lsls	r3, r2, #21
 8009d4a:	d408      	bmi.n	8009d5e <_printf_float+0x20e>
 8009d4c:	692b      	ldr	r3, [r5, #16]
 8009d4e:	003a      	movs	r2, r7
 8009d50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d56:	47a0      	blx	r4
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d129      	bne.n	8009db0 <_printf_float+0x260>
 8009d5c:	e754      	b.n	8009c08 <_printf_float+0xb8>
 8009d5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d60:	2b65      	cmp	r3, #101	@ 0x65
 8009d62:	d800      	bhi.n	8009d66 <_printf_float+0x216>
 8009d64:	e0db      	b.n	8009f1e <_printf_float+0x3ce>
 8009d66:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009d68:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f7f6 fb69 	bl	8000444 <__aeabi_dcmpeq>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d033      	beq.n	8009dde <_printf_float+0x28e>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4a37      	ldr	r2, [pc, #220]	@ (8009e58 <_printf_float+0x308>)
 8009d7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d80:	47a0      	blx	r4
 8009d82:	3001      	adds	r0, #1
 8009d84:	d100      	bne.n	8009d88 <_printf_float+0x238>
 8009d86:	e73f      	b.n	8009c08 <_printf_float+0xb8>
 8009d88:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009d8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d8c:	42b3      	cmp	r3, r6
 8009d8e:	db02      	blt.n	8009d96 <_printf_float+0x246>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	07db      	lsls	r3, r3, #31
 8009d94:	d50c      	bpl.n	8009db0 <_printf_float+0x260>
 8009d96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da0:	47a0      	blx	r4
 8009da2:	2400      	movs	r4, #0
 8009da4:	3001      	adds	r0, #1
 8009da6:	d100      	bne.n	8009daa <_printf_float+0x25a>
 8009da8:	e72e      	b.n	8009c08 <_printf_float+0xb8>
 8009daa:	1e73      	subs	r3, r6, #1
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	dc0a      	bgt.n	8009dc6 <_printf_float+0x276>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	079b      	lsls	r3, r3, #30
 8009db4:	d500      	bpl.n	8009db8 <_printf_float+0x268>
 8009db6:	e106      	b.n	8009fc6 <_printf_float+0x476>
 8009db8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dba:	68e8      	ldr	r0, [r5, #12]
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	db00      	blt.n	8009dc2 <_printf_float+0x272>
 8009dc0:	e724      	b.n	8009c0c <_printf_float+0xbc>
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	e722      	b.n	8009c0c <_printf_float+0xbc>
 8009dc6:	002a      	movs	r2, r5
 8009dc8:	2301      	movs	r3, #1
 8009dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dce:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009dd0:	321a      	adds	r2, #26
 8009dd2:	47b8      	blx	r7
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d100      	bne.n	8009dda <_printf_float+0x28a>
 8009dd8:	e716      	b.n	8009c08 <_printf_float+0xb8>
 8009dda:	3401      	adds	r4, #1
 8009ddc:	e7e5      	b.n	8009daa <_printf_float+0x25a>
 8009dde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc3b      	bgt.n	8009e5c <_printf_float+0x30c>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e58 <_printf_float+0x308>)
 8009de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009dee:	47a0      	blx	r4
 8009df0:	3001      	adds	r0, #1
 8009df2:	d100      	bne.n	8009df6 <_printf_float+0x2a6>
 8009df4:	e708      	b.n	8009c08 <_printf_float+0xb8>
 8009df6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009df8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dfa:	4333      	orrs	r3, r6
 8009dfc:	d102      	bne.n	8009e04 <_printf_float+0x2b4>
 8009dfe:	682b      	ldr	r3, [r5, #0]
 8009e00:	07db      	lsls	r3, r3, #31
 8009e02:	d5d5      	bpl.n	8009db0 <_printf_float+0x260>
 8009e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e0e:	47a0      	blx	r4
 8009e10:	2300      	movs	r3, #0
 8009e12:	3001      	adds	r0, #1
 8009e14:	d100      	bne.n	8009e18 <_printf_float+0x2c8>
 8009e16:	e6f7      	b.n	8009c08 <_printf_float+0xb8>
 8009e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e1e:	425b      	negs	r3, r3
 8009e20:	4293      	cmp	r3, r2
 8009e22:	dc01      	bgt.n	8009e28 <_printf_float+0x2d8>
 8009e24:	0033      	movs	r3, r6
 8009e26:	e792      	b.n	8009d4e <_printf_float+0x1fe>
 8009e28:	002a      	movs	r2, r5
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e32:	321a      	adds	r2, #26
 8009e34:	47a0      	blx	r4
 8009e36:	3001      	adds	r0, #1
 8009e38:	d100      	bne.n	8009e3c <_printf_float+0x2ec>
 8009e3a:	e6e5      	b.n	8009c08 <_printf_float+0xb8>
 8009e3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e3e:	3301      	adds	r3, #1
 8009e40:	e7ea      	b.n	8009e18 <_printf_float+0x2c8>
 8009e42:	46c0      	nop			@ (mov r8, r8)
 8009e44:	7fefffff 	.word	0x7fefffff
 8009e48:	0800c604 	.word	0x0800c604
 8009e4c:	0800c600 	.word	0x0800c600
 8009e50:	0800c60c 	.word	0x0800c60c
 8009e54:	0800c608 	.word	0x0800c608
 8009e58:	0800c610 	.word	0x0800c610
 8009e5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e5e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e62:	429e      	cmp	r6, r3
 8009e64:	dd00      	ble.n	8009e68 <_printf_float+0x318>
 8009e66:	001e      	movs	r6, r3
 8009e68:	2e00      	cmp	r6, #0
 8009e6a:	dc31      	bgt.n	8009ed0 <_printf_float+0x380>
 8009e6c:	43f3      	mvns	r3, r6
 8009e6e:	2400      	movs	r4, #0
 8009e70:	17db      	asrs	r3, r3, #31
 8009e72:	4033      	ands	r3, r6
 8009e74:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7a:	1af3      	subs	r3, r6, r3
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	dc30      	bgt.n	8009ee2 <_printf_float+0x392>
 8009e80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e84:	429a      	cmp	r2, r3
 8009e86:	dc38      	bgt.n	8009efa <_printf_float+0x3aa>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	07db      	lsls	r3, r3, #31
 8009e8c:	d435      	bmi.n	8009efa <_printf_float+0x3aa>
 8009e8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e94:	1b9b      	subs	r3, r3, r6
 8009e96:	1b14      	subs	r4, r2, r4
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	dd00      	ble.n	8009e9e <_printf_float+0x34e>
 8009e9c:	001c      	movs	r4, r3
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	dc34      	bgt.n	8009f0c <_printf_float+0x3bc>
 8009ea2:	43e3      	mvns	r3, r4
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	17db      	asrs	r3, r3, #31
 8009ea8:	401c      	ands	r4, r3
 8009eaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009eac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	1b1b      	subs	r3, r3, r4
 8009eb2:	42b3      	cmp	r3, r6
 8009eb4:	dc00      	bgt.n	8009eb8 <_printf_float+0x368>
 8009eb6:	e77b      	b.n	8009db0 <_printf_float+0x260>
 8009eb8:	002a      	movs	r2, r5
 8009eba:	2301      	movs	r3, #1
 8009ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009ec2:	321a      	adds	r2, #26
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d100      	bne.n	8009ecc <_printf_float+0x37c>
 8009eca:	e69d      	b.n	8009c08 <_printf_float+0xb8>
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7ec      	b.n	8009eaa <_printf_float+0x35a>
 8009ed0:	0033      	movs	r3, r6
 8009ed2:	003a      	movs	r2, r7
 8009ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ed8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009eda:	47a0      	blx	r4
 8009edc:	3001      	adds	r0, #1
 8009ede:	d1c5      	bne.n	8009e6c <_printf_float+0x31c>
 8009ee0:	e692      	b.n	8009c08 <_printf_float+0xb8>
 8009ee2:	002a      	movs	r2, r5
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009eec:	321a      	adds	r2, #26
 8009eee:	47b0      	blx	r6
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d100      	bne.n	8009ef6 <_printf_float+0x3a6>
 8009ef4:	e688      	b.n	8009c08 <_printf_float+0xb8>
 8009ef6:	3401      	adds	r4, #1
 8009ef8:	e7bd      	b.n	8009e76 <_printf_float+0x326>
 8009efa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009efc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009f04:	47a0      	blx	r4
 8009f06:	3001      	adds	r0, #1
 8009f08:	d1c1      	bne.n	8009e8e <_printf_float+0x33e>
 8009f0a:	e67d      	b.n	8009c08 <_printf_float+0xb8>
 8009f0c:	19ba      	adds	r2, r7, r6
 8009f0e:	0023      	movs	r3, r4
 8009f10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f16:	47b0      	blx	r6
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d1c2      	bne.n	8009ea2 <_printf_float+0x352>
 8009f1c:	e674      	b.n	8009c08 <_printf_float+0xb8>
 8009f1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	dc02      	bgt.n	8009f2c <_printf_float+0x3dc>
 8009f26:	2301      	movs	r3, #1
 8009f28:	421a      	tst	r2, r3
 8009f2a:	d039      	beq.n	8009fa0 <_printf_float+0x450>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	003a      	movs	r2, r7
 8009f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f36:	47b0      	blx	r6
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d100      	bne.n	8009f3e <_printf_float+0x3ee>
 8009f3c:	e664      	b.n	8009c08 <_printf_float+0xb8>
 8009f3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f46:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f48:	47b0      	blx	r6
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d100      	bne.n	8009f50 <_printf_float+0x400>
 8009f4e:	e65b      	b.n	8009c08 <_printf_float+0xb8>
 8009f50:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009f52:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f56:	2200      	movs	r2, #0
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f7f6 fa71 	bl	8000444 <__aeabi_dcmpeq>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d11a      	bne.n	8009f9c <_printf_float+0x44c>
 8009f66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f68:	1c7a      	adds	r2, r7, #1
 8009f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f70:	47b0      	blx	r6
 8009f72:	3001      	adds	r0, #1
 8009f74:	d10e      	bne.n	8009f94 <_printf_float+0x444>
 8009f76:	e647      	b.n	8009c08 <_printf_float+0xb8>
 8009f78:	002a      	movs	r2, r5
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009f82:	321a      	adds	r2, #26
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	d100      	bne.n	8009f8c <_printf_float+0x43c>
 8009f8a:	e63d      	b.n	8009c08 <_printf_float+0xb8>
 8009f8c:	3601      	adds	r6, #1
 8009f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f90:	429e      	cmp	r6, r3
 8009f92:	dbf1      	blt.n	8009f78 <_printf_float+0x428>
 8009f94:	002a      	movs	r2, r5
 8009f96:	0023      	movs	r3, r4
 8009f98:	3250      	adds	r2, #80	@ 0x50
 8009f9a:	e6d9      	b.n	8009d50 <_printf_float+0x200>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	e7f6      	b.n	8009f8e <_printf_float+0x43e>
 8009fa0:	003a      	movs	r2, r7
 8009fa2:	e7e2      	b.n	8009f6a <_printf_float+0x41a>
 8009fa4:	002a      	movs	r2, r5
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009fae:	3219      	adds	r2, #25
 8009fb0:	47b0      	blx	r6
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d100      	bne.n	8009fb8 <_printf_float+0x468>
 8009fb6:	e627      	b.n	8009c08 <_printf_float+0xb8>
 8009fb8:	3401      	adds	r4, #1
 8009fba:	68eb      	ldr	r3, [r5, #12]
 8009fbc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	dcef      	bgt.n	8009fa4 <_printf_float+0x454>
 8009fc4:	e6f8      	b.n	8009db8 <_printf_float+0x268>
 8009fc6:	2400      	movs	r4, #0
 8009fc8:	e7f7      	b.n	8009fba <_printf_float+0x46a>
 8009fca:	46c0      	nop			@ (mov r8, r8)

08009fcc <_printf_common>:
 8009fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fce:	0016      	movs	r6, r2
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	688a      	ldr	r2, [r1, #8]
 8009fd4:	690b      	ldr	r3, [r1, #16]
 8009fd6:	000c      	movs	r4, r1
 8009fd8:	9000      	str	r0, [sp, #0]
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	da00      	bge.n	8009fe0 <_printf_common+0x14>
 8009fde:	0013      	movs	r3, r2
 8009fe0:	0022      	movs	r2, r4
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	3243      	adds	r2, #67	@ 0x43
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	d001      	beq.n	8009ff0 <_printf_common+0x24>
 8009fec:	3301      	adds	r3, #1
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	069b      	lsls	r3, r3, #26
 8009ff4:	d502      	bpl.n	8009ffc <_printf_common+0x30>
 8009ff6:	6833      	ldr	r3, [r6, #0]
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	2306      	movs	r3, #6
 800a000:	0015      	movs	r5, r2
 800a002:	401d      	ands	r5, r3
 800a004:	421a      	tst	r2, r3
 800a006:	d027      	beq.n	800a058 <_printf_common+0x8c>
 800a008:	0023      	movs	r3, r4
 800a00a:	3343      	adds	r3, #67	@ 0x43
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	4193      	sbcs	r3, r2
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	0692      	lsls	r2, r2, #26
 800a016:	d430      	bmi.n	800a07a <_printf_common+0xae>
 800a018:	0022      	movs	r2, r4
 800a01a:	9901      	ldr	r1, [sp, #4]
 800a01c:	9800      	ldr	r0, [sp, #0]
 800a01e:	9d08      	ldr	r5, [sp, #32]
 800a020:	3243      	adds	r2, #67	@ 0x43
 800a022:	47a8      	blx	r5
 800a024:	3001      	adds	r0, #1
 800a026:	d025      	beq.n	800a074 <_printf_common+0xa8>
 800a028:	2206      	movs	r2, #6
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	2500      	movs	r5, #0
 800a02e:	4013      	ands	r3, r2
 800a030:	2b04      	cmp	r3, #4
 800a032:	d105      	bne.n	800a040 <_printf_common+0x74>
 800a034:	6833      	ldr	r3, [r6, #0]
 800a036:	68e5      	ldr	r5, [r4, #12]
 800a038:	1aed      	subs	r5, r5, r3
 800a03a:	43eb      	mvns	r3, r5
 800a03c:	17db      	asrs	r3, r3, #31
 800a03e:	401d      	ands	r5, r3
 800a040:	68a3      	ldr	r3, [r4, #8]
 800a042:	6922      	ldr	r2, [r4, #16]
 800a044:	4293      	cmp	r3, r2
 800a046:	dd01      	ble.n	800a04c <_printf_common+0x80>
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	18ed      	adds	r5, r5, r3
 800a04c:	2600      	movs	r6, #0
 800a04e:	42b5      	cmp	r5, r6
 800a050:	d120      	bne.n	800a094 <_printf_common+0xc8>
 800a052:	2000      	movs	r0, #0
 800a054:	e010      	b.n	800a078 <_printf_common+0xac>
 800a056:	3501      	adds	r5, #1
 800a058:	68e3      	ldr	r3, [r4, #12]
 800a05a:	6832      	ldr	r2, [r6, #0]
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	42ab      	cmp	r3, r5
 800a060:	ddd2      	ble.n	800a008 <_printf_common+0x3c>
 800a062:	0022      	movs	r2, r4
 800a064:	2301      	movs	r3, #1
 800a066:	9901      	ldr	r1, [sp, #4]
 800a068:	9800      	ldr	r0, [sp, #0]
 800a06a:	9f08      	ldr	r7, [sp, #32]
 800a06c:	3219      	adds	r2, #25
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	d1f0      	bne.n	800a056 <_printf_common+0x8a>
 800a074:	2001      	movs	r0, #1
 800a076:	4240      	negs	r0, r0
 800a078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a07a:	2030      	movs	r0, #48	@ 0x30
 800a07c:	18e1      	adds	r1, r4, r3
 800a07e:	3143      	adds	r1, #67	@ 0x43
 800a080:	7008      	strb	r0, [r1, #0]
 800a082:	0021      	movs	r1, r4
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	3145      	adds	r1, #69	@ 0x45
 800a088:	7809      	ldrb	r1, [r1, #0]
 800a08a:	18a2      	adds	r2, r4, r2
 800a08c:	3243      	adds	r2, #67	@ 0x43
 800a08e:	3302      	adds	r3, #2
 800a090:	7011      	strb	r1, [r2, #0]
 800a092:	e7c1      	b.n	800a018 <_printf_common+0x4c>
 800a094:	0022      	movs	r2, r4
 800a096:	2301      	movs	r3, #1
 800a098:	9901      	ldr	r1, [sp, #4]
 800a09a:	9800      	ldr	r0, [sp, #0]
 800a09c:	9f08      	ldr	r7, [sp, #32]
 800a09e:	321a      	adds	r2, #26
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d0e6      	beq.n	800a074 <_printf_common+0xa8>
 800a0a6:	3601      	adds	r6, #1
 800a0a8:	e7d1      	b.n	800a04e <_printf_common+0x82>
	...

0800a0ac <_printf_i>:
 800a0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ae:	b08b      	sub	sp, #44	@ 0x2c
 800a0b0:	9206      	str	r2, [sp, #24]
 800a0b2:	000a      	movs	r2, r1
 800a0b4:	3243      	adds	r2, #67	@ 0x43
 800a0b6:	9307      	str	r3, [sp, #28]
 800a0b8:	9005      	str	r0, [sp, #20]
 800a0ba:	9203      	str	r2, [sp, #12]
 800a0bc:	7e0a      	ldrb	r2, [r1, #24]
 800a0be:	000c      	movs	r4, r1
 800a0c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0c2:	2a78      	cmp	r2, #120	@ 0x78
 800a0c4:	d809      	bhi.n	800a0da <_printf_i+0x2e>
 800a0c6:	2a62      	cmp	r2, #98	@ 0x62
 800a0c8:	d80b      	bhi.n	800a0e2 <_printf_i+0x36>
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	d100      	bne.n	800a0d0 <_printf_i+0x24>
 800a0ce:	e0ba      	b.n	800a246 <_printf_i+0x19a>
 800a0d0:	497a      	ldr	r1, [pc, #488]	@ (800a2bc <_printf_i+0x210>)
 800a0d2:	9104      	str	r1, [sp, #16]
 800a0d4:	2a58      	cmp	r2, #88	@ 0x58
 800a0d6:	d100      	bne.n	800a0da <_printf_i+0x2e>
 800a0d8:	e08e      	b.n	800a1f8 <_printf_i+0x14c>
 800a0da:	0025      	movs	r5, r4
 800a0dc:	3542      	adds	r5, #66	@ 0x42
 800a0de:	702a      	strb	r2, [r5, #0]
 800a0e0:	e022      	b.n	800a128 <_printf_i+0x7c>
 800a0e2:	0010      	movs	r0, r2
 800a0e4:	3863      	subs	r0, #99	@ 0x63
 800a0e6:	2815      	cmp	r0, #21
 800a0e8:	d8f7      	bhi.n	800a0da <_printf_i+0x2e>
 800a0ea:	f7f6 f81b 	bl	8000124 <__gnu_thumb1_case_shi>
 800a0ee:	0016      	.short	0x0016
 800a0f0:	fff6001f 	.word	0xfff6001f
 800a0f4:	fff6fff6 	.word	0xfff6fff6
 800a0f8:	001ffff6 	.word	0x001ffff6
 800a0fc:	fff6fff6 	.word	0xfff6fff6
 800a100:	fff6fff6 	.word	0xfff6fff6
 800a104:	0036009f 	.word	0x0036009f
 800a108:	fff6007e 	.word	0xfff6007e
 800a10c:	00b0fff6 	.word	0x00b0fff6
 800a110:	0036fff6 	.word	0x0036fff6
 800a114:	fff6fff6 	.word	0xfff6fff6
 800a118:	0082      	.short	0x0082
 800a11a:	0025      	movs	r5, r4
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	3542      	adds	r5, #66	@ 0x42
 800a120:	1d11      	adds	r1, r2, #4
 800a122:	6019      	str	r1, [r3, #0]
 800a124:	6813      	ldr	r3, [r2, #0]
 800a126:	702b      	strb	r3, [r5, #0]
 800a128:	2301      	movs	r3, #1
 800a12a:	e09e      	b.n	800a26a <_printf_i+0x1be>
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	6809      	ldr	r1, [r1, #0]
 800a130:	1d02      	adds	r2, r0, #4
 800a132:	060d      	lsls	r5, r1, #24
 800a134:	d50b      	bpl.n	800a14e <_printf_i+0xa2>
 800a136:	6806      	ldr	r6, [r0, #0]
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	da03      	bge.n	800a146 <_printf_i+0x9a>
 800a13e:	232d      	movs	r3, #45	@ 0x2d
 800a140:	9a03      	ldr	r2, [sp, #12]
 800a142:	4276      	negs	r6, r6
 800a144:	7013      	strb	r3, [r2, #0]
 800a146:	4b5d      	ldr	r3, [pc, #372]	@ (800a2bc <_printf_i+0x210>)
 800a148:	270a      	movs	r7, #10
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	e018      	b.n	800a180 <_printf_i+0xd4>
 800a14e:	6806      	ldr	r6, [r0, #0]
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	0649      	lsls	r1, r1, #25
 800a154:	d5f1      	bpl.n	800a13a <_printf_i+0x8e>
 800a156:	b236      	sxth	r6, r6
 800a158:	e7ef      	b.n	800a13a <_printf_i+0x8e>
 800a15a:	6808      	ldr	r0, [r1, #0]
 800a15c:	6819      	ldr	r1, [r3, #0]
 800a15e:	c940      	ldmia	r1!, {r6}
 800a160:	0605      	lsls	r5, r0, #24
 800a162:	d402      	bmi.n	800a16a <_printf_i+0xbe>
 800a164:	0640      	lsls	r0, r0, #25
 800a166:	d500      	bpl.n	800a16a <_printf_i+0xbe>
 800a168:	b2b6      	uxth	r6, r6
 800a16a:	6019      	str	r1, [r3, #0]
 800a16c:	4b53      	ldr	r3, [pc, #332]	@ (800a2bc <_printf_i+0x210>)
 800a16e:	270a      	movs	r7, #10
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	2a6f      	cmp	r2, #111	@ 0x6f
 800a174:	d100      	bne.n	800a178 <_printf_i+0xcc>
 800a176:	3f02      	subs	r7, #2
 800a178:	0023      	movs	r3, r4
 800a17a:	2200      	movs	r2, #0
 800a17c:	3343      	adds	r3, #67	@ 0x43
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	60a3      	str	r3, [r4, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	db06      	blt.n	800a196 <_printf_i+0xea>
 800a188:	2104      	movs	r1, #4
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	9d03      	ldr	r5, [sp, #12]
 800a18e:	438a      	bics	r2, r1
 800a190:	6022      	str	r2, [r4, #0]
 800a192:	4333      	orrs	r3, r6
 800a194:	d00c      	beq.n	800a1b0 <_printf_i+0x104>
 800a196:	9d03      	ldr	r5, [sp, #12]
 800a198:	0030      	movs	r0, r6
 800a19a:	0039      	movs	r1, r7
 800a19c:	f7f6 f852 	bl	8000244 <__aeabi_uidivmod>
 800a1a0:	9b04      	ldr	r3, [sp, #16]
 800a1a2:	3d01      	subs	r5, #1
 800a1a4:	5c5b      	ldrb	r3, [r3, r1]
 800a1a6:	702b      	strb	r3, [r5, #0]
 800a1a8:	0033      	movs	r3, r6
 800a1aa:	0006      	movs	r6, r0
 800a1ac:	429f      	cmp	r7, r3
 800a1ae:	d9f3      	bls.n	800a198 <_printf_i+0xec>
 800a1b0:	2f08      	cmp	r7, #8
 800a1b2:	d109      	bne.n	800a1c8 <_printf_i+0x11c>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	07db      	lsls	r3, r3, #31
 800a1b8:	d506      	bpl.n	800a1c8 <_printf_i+0x11c>
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	dc02      	bgt.n	800a1c8 <_printf_i+0x11c>
 800a1c2:	2330      	movs	r3, #48	@ 0x30
 800a1c4:	3d01      	subs	r5, #1
 800a1c6:	702b      	strb	r3, [r5, #0]
 800a1c8:	9b03      	ldr	r3, [sp, #12]
 800a1ca:	1b5b      	subs	r3, r3, r5
 800a1cc:	6123      	str	r3, [r4, #16]
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	0021      	movs	r1, r4
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	9805      	ldr	r0, [sp, #20]
 800a1d6:	9b06      	ldr	r3, [sp, #24]
 800a1d8:	aa09      	add	r2, sp, #36	@ 0x24
 800a1da:	f7ff fef7 	bl	8009fcc <_printf_common>
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d148      	bne.n	800a274 <_printf_i+0x1c8>
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	4240      	negs	r0, r0
 800a1e6:	b00b      	add	sp, #44	@ 0x2c
 800a1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	6809      	ldr	r1, [r1, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	2278      	movs	r2, #120	@ 0x78
 800a1f4:	4932      	ldr	r1, [pc, #200]	@ (800a2c0 <_printf_i+0x214>)
 800a1f6:	9104      	str	r1, [sp, #16]
 800a1f8:	0021      	movs	r1, r4
 800a1fa:	3145      	adds	r1, #69	@ 0x45
 800a1fc:	700a      	strb	r2, [r1, #0]
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	6822      	ldr	r2, [r4, #0]
 800a202:	c940      	ldmia	r1!, {r6}
 800a204:	0610      	lsls	r0, r2, #24
 800a206:	d402      	bmi.n	800a20e <_printf_i+0x162>
 800a208:	0650      	lsls	r0, r2, #25
 800a20a:	d500      	bpl.n	800a20e <_printf_i+0x162>
 800a20c:	b2b6      	uxth	r6, r6
 800a20e:	6019      	str	r1, [r3, #0]
 800a210:	07d3      	lsls	r3, r2, #31
 800a212:	d502      	bpl.n	800a21a <_printf_i+0x16e>
 800a214:	2320      	movs	r3, #32
 800a216:	4313      	orrs	r3, r2
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d001      	beq.n	800a222 <_printf_i+0x176>
 800a21e:	2710      	movs	r7, #16
 800a220:	e7aa      	b.n	800a178 <_printf_i+0xcc>
 800a222:	2220      	movs	r2, #32
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	4393      	bics	r3, r2
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	e7f8      	b.n	800a21e <_printf_i+0x172>
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	680d      	ldr	r5, [r1, #0]
 800a230:	1d10      	adds	r0, r2, #4
 800a232:	6949      	ldr	r1, [r1, #20]
 800a234:	6018      	str	r0, [r3, #0]
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	062e      	lsls	r6, r5, #24
 800a23a:	d501      	bpl.n	800a240 <_printf_i+0x194>
 800a23c:	6019      	str	r1, [r3, #0]
 800a23e:	e002      	b.n	800a246 <_printf_i+0x19a>
 800a240:	066d      	lsls	r5, r5, #25
 800a242:	d5fb      	bpl.n	800a23c <_printf_i+0x190>
 800a244:	8019      	strh	r1, [r3, #0]
 800a246:	2300      	movs	r3, #0
 800a248:	9d03      	ldr	r5, [sp, #12]
 800a24a:	6123      	str	r3, [r4, #16]
 800a24c:	e7bf      	b.n	800a1ce <_printf_i+0x122>
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	1d11      	adds	r1, r2, #4
 800a252:	6019      	str	r1, [r3, #0]
 800a254:	6815      	ldr	r5, [r2, #0]
 800a256:	2100      	movs	r1, #0
 800a258:	0028      	movs	r0, r5
 800a25a:	6862      	ldr	r2, [r4, #4]
 800a25c:	f000 f9df 	bl	800a61e <memchr>
 800a260:	2800      	cmp	r0, #0
 800a262:	d001      	beq.n	800a268 <_printf_i+0x1bc>
 800a264:	1b40      	subs	r0, r0, r5
 800a266:	6060      	str	r0, [r4, #4]
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	2300      	movs	r3, #0
 800a26e:	9a03      	ldr	r2, [sp, #12]
 800a270:	7013      	strb	r3, [r2, #0]
 800a272:	e7ac      	b.n	800a1ce <_printf_i+0x122>
 800a274:	002a      	movs	r2, r5
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	9906      	ldr	r1, [sp, #24]
 800a27a:	9805      	ldr	r0, [sp, #20]
 800a27c:	9d07      	ldr	r5, [sp, #28]
 800a27e:	47a8      	blx	r5
 800a280:	3001      	adds	r0, #1
 800a282:	d0ae      	beq.n	800a1e2 <_printf_i+0x136>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	079b      	lsls	r3, r3, #30
 800a288:	d415      	bmi.n	800a2b6 <_printf_i+0x20a>
 800a28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28c:	68e0      	ldr	r0, [r4, #12]
 800a28e:	4298      	cmp	r0, r3
 800a290:	daa9      	bge.n	800a1e6 <_printf_i+0x13a>
 800a292:	0018      	movs	r0, r3
 800a294:	e7a7      	b.n	800a1e6 <_printf_i+0x13a>
 800a296:	0022      	movs	r2, r4
 800a298:	2301      	movs	r3, #1
 800a29a:	9906      	ldr	r1, [sp, #24]
 800a29c:	9805      	ldr	r0, [sp, #20]
 800a29e:	9e07      	ldr	r6, [sp, #28]
 800a2a0:	3219      	adds	r2, #25
 800a2a2:	47b0      	blx	r6
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d09c      	beq.n	800a1e2 <_printf_i+0x136>
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	68e3      	ldr	r3, [r4, #12]
 800a2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ae:	1a9b      	subs	r3, r3, r2
 800a2b0:	42ab      	cmp	r3, r5
 800a2b2:	dcf0      	bgt.n	800a296 <_printf_i+0x1ea>
 800a2b4:	e7e9      	b.n	800a28a <_printf_i+0x1de>
 800a2b6:	2500      	movs	r5, #0
 800a2b8:	e7f7      	b.n	800a2aa <_printf_i+0x1fe>
 800a2ba:	46c0      	nop			@ (mov r8, r8)
 800a2bc:	0800c612 	.word	0x0800c612
 800a2c0:	0800c623 	.word	0x0800c623

0800a2c4 <std>:
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	0004      	movs	r4, r0
 800a2ca:	6003      	str	r3, [r0, #0]
 800a2cc:	6043      	str	r3, [r0, #4]
 800a2ce:	6083      	str	r3, [r0, #8]
 800a2d0:	8181      	strh	r1, [r0, #12]
 800a2d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2d4:	81c2      	strh	r2, [r0, #14]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	6143      	str	r3, [r0, #20]
 800a2da:	6183      	str	r3, [r0, #24]
 800a2dc:	0019      	movs	r1, r3
 800a2de:	2208      	movs	r2, #8
 800a2e0:	305c      	adds	r0, #92	@ 0x5c
 800a2e2:	f000 f8ff 	bl	800a4e4 <memset>
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a314 <std+0x50>)
 800a2e8:	6224      	str	r4, [r4, #32]
 800a2ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a318 <std+0x54>)
 800a2ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a31c <std+0x58>)
 800a2f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a320 <std+0x5c>)
 800a2f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a324 <std+0x60>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d005      	beq.n	800a30a <std+0x46>
 800a2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <std+0x64>)
 800a300:	429c      	cmp	r4, r3
 800a302:	d002      	beq.n	800a30a <std+0x46>
 800a304:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <std+0x68>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d103      	bne.n	800a312 <std+0x4e>
 800a30a:	0020      	movs	r0, r4
 800a30c:	3058      	adds	r0, #88	@ 0x58
 800a30e:	f000 f983 	bl	800a618 <__retarget_lock_init_recursive>
 800a312:	bd10      	pop	{r4, pc}
 800a314:	0800a44d 	.word	0x0800a44d
 800a318:	0800a475 	.word	0x0800a475
 800a31c:	0800a4ad 	.word	0x0800a4ad
 800a320:	0800a4d9 	.word	0x0800a4d9
 800a324:	200005b0 	.word	0x200005b0
 800a328:	20000618 	.word	0x20000618
 800a32c:	20000680 	.word	0x20000680

0800a330 <stdio_exit_handler>:
 800a330:	b510      	push	{r4, lr}
 800a332:	4a03      	ldr	r2, [pc, #12]	@ (800a340 <stdio_exit_handler+0x10>)
 800a334:	4903      	ldr	r1, [pc, #12]	@ (800a344 <stdio_exit_handler+0x14>)
 800a336:	4804      	ldr	r0, [pc, #16]	@ (800a348 <stdio_exit_handler+0x18>)
 800a338:	f000 f86c 	bl	800a414 <_fwalk_sglue>
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	2000001c 	.word	0x2000001c
 800a344:	0800bd71 	.word	0x0800bd71
 800a348:	2000002c 	.word	0x2000002c

0800a34c <cleanup_stdio>:
 800a34c:	6841      	ldr	r1, [r0, #4]
 800a34e:	4b0b      	ldr	r3, [pc, #44]	@ (800a37c <cleanup_stdio+0x30>)
 800a350:	b510      	push	{r4, lr}
 800a352:	0004      	movs	r4, r0
 800a354:	4299      	cmp	r1, r3
 800a356:	d001      	beq.n	800a35c <cleanup_stdio+0x10>
 800a358:	f001 fd0a 	bl	800bd70 <_fflush_r>
 800a35c:	68a1      	ldr	r1, [r4, #8]
 800a35e:	4b08      	ldr	r3, [pc, #32]	@ (800a380 <cleanup_stdio+0x34>)
 800a360:	4299      	cmp	r1, r3
 800a362:	d002      	beq.n	800a36a <cleanup_stdio+0x1e>
 800a364:	0020      	movs	r0, r4
 800a366:	f001 fd03 	bl	800bd70 <_fflush_r>
 800a36a:	68e1      	ldr	r1, [r4, #12]
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <cleanup_stdio+0x38>)
 800a36e:	4299      	cmp	r1, r3
 800a370:	d002      	beq.n	800a378 <cleanup_stdio+0x2c>
 800a372:	0020      	movs	r0, r4
 800a374:	f001 fcfc 	bl	800bd70 <_fflush_r>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	200005b0 	.word	0x200005b0
 800a380:	20000618 	.word	0x20000618
 800a384:	20000680 	.word	0x20000680

0800a388 <global_stdio_init.part.0>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <global_stdio_init.part.0+0x28>)
 800a38c:	4a09      	ldr	r2, [pc, #36]	@ (800a3b4 <global_stdio_init.part.0+0x2c>)
 800a38e:	2104      	movs	r1, #4
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	4809      	ldr	r0, [pc, #36]	@ (800a3b8 <global_stdio_init.part.0+0x30>)
 800a394:	2200      	movs	r2, #0
 800a396:	f7ff ff95 	bl	800a2c4 <std>
 800a39a:	2201      	movs	r2, #1
 800a39c:	2109      	movs	r1, #9
 800a39e:	4807      	ldr	r0, [pc, #28]	@ (800a3bc <global_stdio_init.part.0+0x34>)
 800a3a0:	f7ff ff90 	bl	800a2c4 <std>
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	2112      	movs	r1, #18
 800a3a8:	4805      	ldr	r0, [pc, #20]	@ (800a3c0 <global_stdio_init.part.0+0x38>)
 800a3aa:	f7ff ff8b 	bl	800a2c4 <std>
 800a3ae:	bd10      	pop	{r4, pc}
 800a3b0:	200006e8 	.word	0x200006e8
 800a3b4:	0800a331 	.word	0x0800a331
 800a3b8:	200005b0 	.word	0x200005b0
 800a3bc:	20000618 	.word	0x20000618
 800a3c0:	20000680 	.word	0x20000680

0800a3c4 <__sfp_lock_acquire>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	4802      	ldr	r0, [pc, #8]	@ (800a3d0 <__sfp_lock_acquire+0xc>)
 800a3c8:	f000 f927 	bl	800a61a <__retarget_lock_acquire_recursive>
 800a3cc:	bd10      	pop	{r4, pc}
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	200006f1 	.word	0x200006f1

0800a3d4 <__sfp_lock_release>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	4802      	ldr	r0, [pc, #8]	@ (800a3e0 <__sfp_lock_release+0xc>)
 800a3d8:	f000 f920 	bl	800a61c <__retarget_lock_release_recursive>
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	46c0      	nop			@ (mov r8, r8)
 800a3e0:	200006f1 	.word	0x200006f1

0800a3e4 <__sinit>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	0004      	movs	r4, r0
 800a3e8:	f7ff ffec 	bl	800a3c4 <__sfp_lock_acquire>
 800a3ec:	6a23      	ldr	r3, [r4, #32]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <__sinit+0x14>
 800a3f2:	f7ff ffef 	bl	800a3d4 <__sfp_lock_release>
 800a3f6:	bd10      	pop	{r4, pc}
 800a3f8:	4b04      	ldr	r3, [pc, #16]	@ (800a40c <__sinit+0x28>)
 800a3fa:	6223      	str	r3, [r4, #32]
 800a3fc:	4b04      	ldr	r3, [pc, #16]	@ (800a410 <__sinit+0x2c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1f6      	bne.n	800a3f2 <__sinit+0xe>
 800a404:	f7ff ffc0 	bl	800a388 <global_stdio_init.part.0>
 800a408:	e7f3      	b.n	800a3f2 <__sinit+0xe>
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	0800a34d 	.word	0x0800a34d
 800a410:	200006e8 	.word	0x200006e8

0800a414 <_fwalk_sglue>:
 800a414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a416:	0014      	movs	r4, r2
 800a418:	2600      	movs	r6, #0
 800a41a:	9000      	str	r0, [sp, #0]
 800a41c:	9101      	str	r1, [sp, #4]
 800a41e:	68a5      	ldr	r5, [r4, #8]
 800a420:	6867      	ldr	r7, [r4, #4]
 800a422:	3f01      	subs	r7, #1
 800a424:	d504      	bpl.n	800a430 <_fwalk_sglue+0x1c>
 800a426:	6824      	ldr	r4, [r4, #0]
 800a428:	2c00      	cmp	r4, #0
 800a42a:	d1f8      	bne.n	800a41e <_fwalk_sglue+0xa>
 800a42c:	0030      	movs	r0, r6
 800a42e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a430:	89ab      	ldrh	r3, [r5, #12]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d908      	bls.n	800a448 <_fwalk_sglue+0x34>
 800a436:	220e      	movs	r2, #14
 800a438:	5eab      	ldrsh	r3, [r5, r2]
 800a43a:	3301      	adds	r3, #1
 800a43c:	d004      	beq.n	800a448 <_fwalk_sglue+0x34>
 800a43e:	0029      	movs	r1, r5
 800a440:	9800      	ldr	r0, [sp, #0]
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	4798      	blx	r3
 800a446:	4306      	orrs	r6, r0
 800a448:	3568      	adds	r5, #104	@ 0x68
 800a44a:	e7ea      	b.n	800a422 <_fwalk_sglue+0xe>

0800a44c <__sread>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	000c      	movs	r4, r1
 800a450:	250e      	movs	r5, #14
 800a452:	5f49      	ldrsh	r1, [r1, r5]
 800a454:	f000 f88e 	bl	800a574 <_read_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	db03      	blt.n	800a464 <__sread+0x18>
 800a45c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a45e:	181b      	adds	r3, r3, r0
 800a460:	6563      	str	r3, [r4, #84]	@ 0x54
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	4a02      	ldr	r2, [pc, #8]	@ (800a470 <__sread+0x24>)
 800a468:	4013      	ands	r3, r2
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	e7f9      	b.n	800a462 <__sread+0x16>
 800a46e:	46c0      	nop			@ (mov r8, r8)
 800a470:	ffffefff 	.word	0xffffefff

0800a474 <__swrite>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	001f      	movs	r7, r3
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	0005      	movs	r5, r0
 800a47c:	000c      	movs	r4, r1
 800a47e:	0016      	movs	r6, r2
 800a480:	05db      	lsls	r3, r3, #23
 800a482:	d505      	bpl.n	800a490 <__swrite+0x1c>
 800a484:	230e      	movs	r3, #14
 800a486:	5ec9      	ldrsh	r1, [r1, r3]
 800a488:	2200      	movs	r2, #0
 800a48a:	2302      	movs	r3, #2
 800a48c:	f000 f85e 	bl	800a54c <_lseek_r>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	4a05      	ldr	r2, [pc, #20]	@ (800a4a8 <__swrite+0x34>)
 800a494:	0028      	movs	r0, r5
 800a496:	4013      	ands	r3, r2
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	0032      	movs	r2, r6
 800a49c:	230e      	movs	r3, #14
 800a49e:	5ee1      	ldrsh	r1, [r4, r3]
 800a4a0:	003b      	movs	r3, r7
 800a4a2:	f000 f87b 	bl	800a59c <_write_r>
 800a4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a8:	ffffefff 	.word	0xffffefff

0800a4ac <__sseek>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	000c      	movs	r4, r1
 800a4b0:	250e      	movs	r5, #14
 800a4b2:	5f49      	ldrsh	r1, [r1, r5]
 800a4b4:	f000 f84a 	bl	800a54c <_lseek_r>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	1c42      	adds	r2, r0, #1
 800a4bc:	d103      	bne.n	800a4c6 <__sseek+0x1a>
 800a4be:	4a05      	ldr	r2, [pc, #20]	@ (800a4d4 <__sseek+0x28>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	2280      	movs	r2, #128	@ 0x80
 800a4c8:	0152      	lsls	r2, r2, #5
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4d0:	e7f8      	b.n	800a4c4 <__sseek+0x18>
 800a4d2:	46c0      	nop			@ (mov r8, r8)
 800a4d4:	ffffefff 	.word	0xffffefff

0800a4d8 <__sclose>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	230e      	movs	r3, #14
 800a4dc:	5ec9      	ldrsh	r1, [r1, r3]
 800a4de:	f000 f823 	bl	800a528 <_close_r>
 800a4e2:	bd10      	pop	{r4, pc}

0800a4e4 <memset>:
 800a4e4:	0003      	movs	r3, r0
 800a4e6:	1882      	adds	r2, r0, r2
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d100      	bne.n	800a4ee <memset+0xa>
 800a4ec:	4770      	bx	lr
 800a4ee:	7019      	strb	r1, [r3, #0]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	e7f9      	b.n	800a4e8 <memset+0x4>

0800a4f4 <strstr>:
 800a4f4:	780a      	ldrb	r2, [r1, #0]
 800a4f6:	b530      	push	{r4, r5, lr}
 800a4f8:	2a00      	cmp	r2, #0
 800a4fa:	d10c      	bne.n	800a516 <strstr+0x22>
 800a4fc:	bd30      	pop	{r4, r5, pc}
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d108      	bne.n	800a514 <strstr+0x20>
 800a502:	2301      	movs	r3, #1
 800a504:	5ccc      	ldrb	r4, [r1, r3]
 800a506:	2c00      	cmp	r4, #0
 800a508:	d0f8      	beq.n	800a4fc <strstr+0x8>
 800a50a:	5cc5      	ldrb	r5, [r0, r3]
 800a50c:	42a5      	cmp	r5, r4
 800a50e:	d101      	bne.n	800a514 <strstr+0x20>
 800a510:	3301      	adds	r3, #1
 800a512:	e7f7      	b.n	800a504 <strstr+0x10>
 800a514:	3001      	adds	r0, #1
 800a516:	7803      	ldrb	r3, [r0, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1f0      	bne.n	800a4fe <strstr+0xa>
 800a51c:	0018      	movs	r0, r3
 800a51e:	e7ed      	b.n	800a4fc <strstr+0x8>

0800a520 <_localeconv_r>:
 800a520:	4800      	ldr	r0, [pc, #0]	@ (800a524 <_localeconv_r+0x4>)
 800a522:	4770      	bx	lr
 800a524:	20000168 	.word	0x20000168

0800a528 <_close_r>:
 800a528:	2300      	movs	r3, #0
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	4d06      	ldr	r5, [pc, #24]	@ (800a548 <_close_r+0x20>)
 800a52e:	0004      	movs	r4, r0
 800a530:	0008      	movs	r0, r1
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	f7fa fae2 	bl	8004afc <_close>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d103      	bne.n	800a544 <_close_r+0x1c>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d000      	beq.n	800a544 <_close_r+0x1c>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	200006ec 	.word	0x200006ec

0800a54c <_lseek_r>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	0004      	movs	r4, r0
 800a550:	0008      	movs	r0, r1
 800a552:	0011      	movs	r1, r2
 800a554:	001a      	movs	r2, r3
 800a556:	2300      	movs	r3, #0
 800a558:	4d05      	ldr	r5, [pc, #20]	@ (800a570 <_lseek_r+0x24>)
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7fa faef 	bl	8004b3e <_lseek>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d103      	bne.n	800a56c <_lseek_r+0x20>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d000      	beq.n	800a56c <_lseek_r+0x20>
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	46c0      	nop			@ (mov r8, r8)
 800a570:	200006ec 	.word	0x200006ec

0800a574 <_read_r>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	0004      	movs	r4, r0
 800a578:	0008      	movs	r0, r1
 800a57a:	0011      	movs	r1, r2
 800a57c:	001a      	movs	r2, r3
 800a57e:	2300      	movs	r3, #0
 800a580:	4d05      	ldr	r5, [pc, #20]	@ (800a598 <_read_r+0x24>)
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7fa fa81 	bl	8004a8a <_read>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d103      	bne.n	800a594 <_read_r+0x20>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d000      	beq.n	800a594 <_read_r+0x20>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd70      	pop	{r4, r5, r6, pc}
 800a596:	46c0      	nop			@ (mov r8, r8)
 800a598:	200006ec 	.word	0x200006ec

0800a59c <_write_r>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	0004      	movs	r4, r0
 800a5a0:	0008      	movs	r0, r1
 800a5a2:	0011      	movs	r1, r2
 800a5a4:	001a      	movs	r2, r3
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4d05      	ldr	r5, [pc, #20]	@ (800a5c0 <_write_r+0x24>)
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	f7fa fa8a 	bl	8004ac4 <_write>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d103      	bne.n	800a5bc <_write_r+0x20>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d000      	beq.n	800a5bc <_write_r+0x20>
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	bd70      	pop	{r4, r5, r6, pc}
 800a5be:	46c0      	nop			@ (mov r8, r8)
 800a5c0:	200006ec 	.word	0x200006ec

0800a5c4 <__errno>:
 800a5c4:	4b01      	ldr	r3, [pc, #4]	@ (800a5cc <__errno+0x8>)
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	4770      	bx	lr
 800a5ca:	46c0      	nop			@ (mov r8, r8)
 800a5cc:	20000028 	.word	0x20000028

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	2600      	movs	r6, #0
 800a5d4:	4c0c      	ldr	r4, [pc, #48]	@ (800a608 <__libc_init_array+0x38>)
 800a5d6:	4d0d      	ldr	r5, [pc, #52]	@ (800a60c <__libc_init_array+0x3c>)
 800a5d8:	1b64      	subs	r4, r4, r5
 800a5da:	10a4      	asrs	r4, r4, #2
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	2600      	movs	r6, #0
 800a5e2:	f001 ff4b 	bl	800c47c <_init>
 800a5e6:	4c0a      	ldr	r4, [pc, #40]	@ (800a610 <__libc_init_array+0x40>)
 800a5e8:	4d0a      	ldr	r5, [pc, #40]	@ (800a614 <__libc_init_array+0x44>)
 800a5ea:	1b64      	subs	r4, r4, r5
 800a5ec:	10a4      	asrs	r4, r4, #2
 800a5ee:	42a6      	cmp	r6, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	00b3      	lsls	r3, r6, #2
 800a5f6:	58eb      	ldr	r3, [r5, r3]
 800a5f8:	4798      	blx	r3
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	00b3      	lsls	r3, r6, #2
 800a600:	58eb      	ldr	r3, [r5, r3]
 800a602:	4798      	blx	r3
 800a604:	3601      	adds	r6, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800c974 	.word	0x0800c974
 800a60c:	0800c974 	.word	0x0800c974
 800a610:	0800c978 	.word	0x0800c978
 800a614:	0800c974 	.word	0x0800c974

0800a618 <__retarget_lock_init_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_acquire_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <__retarget_lock_release_recursive>:
 800a61c:	4770      	bx	lr

0800a61e <memchr>:
 800a61e:	b2c9      	uxtb	r1, r1
 800a620:	1882      	adds	r2, r0, r2
 800a622:	4290      	cmp	r0, r2
 800a624:	d101      	bne.n	800a62a <memchr+0xc>
 800a626:	2000      	movs	r0, #0
 800a628:	4770      	bx	lr
 800a62a:	7803      	ldrb	r3, [r0, #0]
 800a62c:	428b      	cmp	r3, r1
 800a62e:	d0fb      	beq.n	800a628 <memchr+0xa>
 800a630:	3001      	adds	r0, #1
 800a632:	e7f6      	b.n	800a622 <memchr+0x4>

0800a634 <quorem>:
 800a634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a636:	6903      	ldr	r3, [r0, #16]
 800a638:	690c      	ldr	r4, [r1, #16]
 800a63a:	b089      	sub	sp, #36	@ 0x24
 800a63c:	9003      	str	r0, [sp, #12]
 800a63e:	9106      	str	r1, [sp, #24]
 800a640:	2000      	movs	r0, #0
 800a642:	42a3      	cmp	r3, r4
 800a644:	db63      	blt.n	800a70e <quorem+0xda>
 800a646:	000b      	movs	r3, r1
 800a648:	3c01      	subs	r4, #1
 800a64a:	3314      	adds	r3, #20
 800a64c:	00a5      	lsls	r5, r4, #2
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	195b      	adds	r3, r3, r5
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	3314      	adds	r3, #20
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	195d      	adds	r5, r3, r5
 800a65c:	9b05      	ldr	r3, [sp, #20]
 800a65e:	682f      	ldr	r7, [r5, #0]
 800a660:	681e      	ldr	r6, [r3, #0]
 800a662:	0038      	movs	r0, r7
 800a664:	3601      	adds	r6, #1
 800a666:	0031      	movs	r1, r6
 800a668:	f7f5 fd66 	bl	8000138 <__udivsi3>
 800a66c:	9002      	str	r0, [sp, #8]
 800a66e:	42b7      	cmp	r7, r6
 800a670:	d327      	bcc.n	800a6c2 <quorem+0x8e>
 800a672:	9b04      	ldr	r3, [sp, #16]
 800a674:	2700      	movs	r7, #0
 800a676:	469c      	mov	ip, r3
 800a678:	9e01      	ldr	r6, [sp, #4]
 800a67a:	9707      	str	r7, [sp, #28]
 800a67c:	4662      	mov	r2, ip
 800a67e:	ca08      	ldmia	r2!, {r3}
 800a680:	6830      	ldr	r0, [r6, #0]
 800a682:	4694      	mov	ip, r2
 800a684:	9a02      	ldr	r2, [sp, #8]
 800a686:	b299      	uxth	r1, r3
 800a688:	4351      	muls	r1, r2
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	4353      	muls	r3, r2
 800a68e:	19c9      	adds	r1, r1, r7
 800a690:	0c0a      	lsrs	r2, r1, #16
 800a692:	189b      	adds	r3, r3, r2
 800a694:	b289      	uxth	r1, r1
 800a696:	b282      	uxth	r2, r0
 800a698:	1a52      	subs	r2, r2, r1
 800a69a:	9907      	ldr	r1, [sp, #28]
 800a69c:	0c1f      	lsrs	r7, r3, #16
 800a69e:	1852      	adds	r2, r2, r1
 800a6a0:	0c00      	lsrs	r0, r0, #16
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	1411      	asrs	r1, r2, #16
 800a6a6:	1ac3      	subs	r3, r0, r3
 800a6a8:	185b      	adds	r3, r3, r1
 800a6aa:	1419      	asrs	r1, r3, #16
 800a6ac:	b292      	uxth	r2, r2
 800a6ae:	041b      	lsls	r3, r3, #16
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	9b05      	ldr	r3, [sp, #20]
 800a6b4:	9107      	str	r1, [sp, #28]
 800a6b6:	c604      	stmia	r6!, {r2}
 800a6b8:	4563      	cmp	r3, ip
 800a6ba:	d2df      	bcs.n	800a67c <quorem+0x48>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d02b      	beq.n	800a71a <quorem+0xe6>
 800a6c2:	9906      	ldr	r1, [sp, #24]
 800a6c4:	9803      	ldr	r0, [sp, #12]
 800a6c6:	f001 f9b7 	bl	800ba38 <__mcmp>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	db1e      	blt.n	800a70c <quorem+0xd8>
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	9d01      	ldr	r5, [sp, #4]
 800a6d2:	9904      	ldr	r1, [sp, #16]
 800a6d4:	c901      	ldmia	r1!, {r0}
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	b287      	uxth	r7, r0
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	1bd2      	subs	r2, r2, r7
 800a6de:	1992      	adds	r2, r2, r6
 800a6e0:	0c00      	lsrs	r0, r0, #16
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	1a1b      	subs	r3, r3, r0
 800a6e6:	1410      	asrs	r0, r2, #16
 800a6e8:	181b      	adds	r3, r3, r0
 800a6ea:	141e      	asrs	r6, r3, #16
 800a6ec:	b292      	uxth	r2, r2
 800a6ee:	041b      	lsls	r3, r3, #16
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	9b05      	ldr	r3, [sp, #20]
 800a6f4:	c504      	stmia	r5!, {r2}
 800a6f6:	428b      	cmp	r3, r1
 800a6f8:	d2ec      	bcs.n	800a6d4 <quorem+0xa0>
 800a6fa:	9a01      	ldr	r2, [sp, #4]
 800a6fc:	00a3      	lsls	r3, r4, #2
 800a6fe:	18d3      	adds	r3, r2, r3
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	2a00      	cmp	r2, #0
 800a704:	d014      	beq.n	800a730 <quorem+0xfc>
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	3301      	adds	r3, #1
 800a70a:	9302      	str	r3, [sp, #8]
 800a70c:	9802      	ldr	r0, [sp, #8]
 800a70e:	b009      	add	sp, #36	@ 0x24
 800a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a712:	682b      	ldr	r3, [r5, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <quorem+0xee>
 800a718:	3c01      	subs	r4, #1
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	3d04      	subs	r5, #4
 800a71e:	42ab      	cmp	r3, r5
 800a720:	d3f7      	bcc.n	800a712 <quorem+0xde>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	611c      	str	r4, [r3, #16]
 800a726:	e7cc      	b.n	800a6c2 <quorem+0x8e>
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	d104      	bne.n	800a738 <quorem+0x104>
 800a72e:	3c01      	subs	r4, #1
 800a730:	9a01      	ldr	r2, [sp, #4]
 800a732:	3b04      	subs	r3, #4
 800a734:	429a      	cmp	r2, r3
 800a736:	d3f7      	bcc.n	800a728 <quorem+0xf4>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	611c      	str	r4, [r3, #16]
 800a73c:	e7e3      	b.n	800a706 <quorem+0xd2>
	...

0800a740 <_dtoa_r>:
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a742:	0014      	movs	r4, r2
 800a744:	001d      	movs	r5, r3
 800a746:	69c6      	ldr	r6, [r0, #28]
 800a748:	b09d      	sub	sp, #116	@ 0x74
 800a74a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a74c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a74e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a750:	9003      	str	r0, [sp, #12]
 800a752:	2e00      	cmp	r6, #0
 800a754:	d10f      	bne.n	800a776 <_dtoa_r+0x36>
 800a756:	2010      	movs	r0, #16
 800a758:	f000 fe2c 	bl	800b3b4 <malloc>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	1e02      	subs	r2, r0, #0
 800a760:	61d8      	str	r0, [r3, #28]
 800a762:	d104      	bne.n	800a76e <_dtoa_r+0x2e>
 800a764:	21ef      	movs	r1, #239	@ 0xef
 800a766:	4bc7      	ldr	r3, [pc, #796]	@ (800aa84 <_dtoa_r+0x344>)
 800a768:	48c7      	ldr	r0, [pc, #796]	@ (800aa88 <_dtoa_r+0x348>)
 800a76a:	f001 fb49 	bl	800be00 <__assert_func>
 800a76e:	6046      	str	r6, [r0, #4]
 800a770:	6086      	str	r6, [r0, #8]
 800a772:	6006      	str	r6, [r0, #0]
 800a774:	60c6      	str	r6, [r0, #12]
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	2900      	cmp	r1, #0
 800a77e:	d00b      	beq.n	800a798 <_dtoa_r+0x58>
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	2301      	movs	r3, #1
 800a784:	4093      	lsls	r3, r2
 800a786:	604a      	str	r2, [r1, #4]
 800a788:	608b      	str	r3, [r1, #8]
 800a78a:	9803      	ldr	r0, [sp, #12]
 800a78c:	f000 ff12 	bl	800b5b4 <_Bfree>
 800a790:	2200      	movs	r2, #0
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	2d00      	cmp	r5, #0
 800a79a:	da1e      	bge.n	800a7da <_dtoa_r+0x9a>
 800a79c:	2301      	movs	r3, #1
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	006b      	lsls	r3, r5, #1
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a7a8:	4bb8      	ldr	r3, [pc, #736]	@ (800aa8c <_dtoa_r+0x34c>)
 800a7aa:	4ab8      	ldr	r2, [pc, #736]	@ (800aa8c <_dtoa_r+0x34c>)
 800a7ac:	403b      	ands	r3, r7
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d116      	bne.n	800a7e0 <_dtoa_r+0xa0>
 800a7b2:	4bb7      	ldr	r3, [pc, #732]	@ (800aa90 <_dtoa_r+0x350>)
 800a7b4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	033b      	lsls	r3, r7, #12
 800a7ba:	0b1b      	lsrs	r3, r3, #12
 800a7bc:	4323      	orrs	r3, r4
 800a7be:	d101      	bne.n	800a7c4 <_dtoa_r+0x84>
 800a7c0:	f000 fd80 	bl	800b2c4 <_dtoa_r+0xb84>
 800a7c4:	4bb3      	ldr	r3, [pc, #716]	@ (800aa94 <_dtoa_r+0x354>)
 800a7c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a7c8:	9308      	str	r3, [sp, #32]
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	d002      	beq.n	800a7d4 <_dtoa_r+0x94>
 800a7ce:	4bb2      	ldr	r3, [pc, #712]	@ (800aa98 <_dtoa_r+0x358>)
 800a7d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	9808      	ldr	r0, [sp, #32]
 800a7d6:	b01d      	add	sp, #116	@ 0x74
 800a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7da:	2300      	movs	r3, #0
 800a7dc:	603b      	str	r3, [r7, #0]
 800a7de:	e7e2      	b.n	800a7a6 <_dtoa_r+0x66>
 800a7e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7e4:	9212      	str	r2, [sp, #72]	@ 0x48
 800a7e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a7ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f7f5 fe28 	bl	8000444 <__aeabi_dcmpeq>
 800a7f4:	1e06      	subs	r6, r0, #0
 800a7f6:	d00b      	beq.n	800a810 <_dtoa_r+0xd0>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <_dtoa_r+0xca>
 800a804:	4ba5      	ldr	r3, [pc, #660]	@ (800aa9c <_dtoa_r+0x35c>)
 800a806:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	4ba5      	ldr	r3, [pc, #660]	@ (800aaa0 <_dtoa_r+0x360>)
 800a80c:	9308      	str	r3, [sp, #32]
 800a80e:	e7e1      	b.n	800a7d4 <_dtoa_r+0x94>
 800a810:	ab1a      	add	r3, sp, #104	@ 0x68
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	9803      	ldr	r0, [sp, #12]
 800a81a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a81e:	f001 f9c1 	bl	800bba4 <__d2b>
 800a822:	007a      	lsls	r2, r7, #1
 800a824:	9005      	str	r0, [sp, #20]
 800a826:	0d52      	lsrs	r2, r2, #21
 800a828:	d100      	bne.n	800a82c <_dtoa_r+0xec>
 800a82a:	e07b      	b.n	800a924 <_dtoa_r+0x1e4>
 800a82c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a82e:	9618      	str	r6, [sp, #96]	@ 0x60
 800a830:	0319      	lsls	r1, r3, #12
 800a832:	4b9c      	ldr	r3, [pc, #624]	@ (800aaa4 <_dtoa_r+0x364>)
 800a834:	0b09      	lsrs	r1, r1, #12
 800a836:	430b      	orrs	r3, r1
 800a838:	499b      	ldr	r1, [pc, #620]	@ (800aaa8 <_dtoa_r+0x368>)
 800a83a:	1857      	adds	r7, r2, r1
 800a83c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a83e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a840:	0019      	movs	r1, r3
 800a842:	2200      	movs	r2, #0
 800a844:	4b99      	ldr	r3, [pc, #612]	@ (800aaac <_dtoa_r+0x36c>)
 800a846:	f7f7 fefb 	bl	8002640 <__aeabi_dsub>
 800a84a:	4a99      	ldr	r2, [pc, #612]	@ (800aab0 <_dtoa_r+0x370>)
 800a84c:	4b99      	ldr	r3, [pc, #612]	@ (800aab4 <_dtoa_r+0x374>)
 800a84e:	f7f7 fc11 	bl	8002074 <__aeabi_dmul>
 800a852:	4a99      	ldr	r2, [pc, #612]	@ (800aab8 <_dtoa_r+0x378>)
 800a854:	4b99      	ldr	r3, [pc, #612]	@ (800aabc <_dtoa_r+0x37c>)
 800a856:	f7f6 fc0d 	bl	8001074 <__aeabi_dadd>
 800a85a:	0004      	movs	r4, r0
 800a85c:	0038      	movs	r0, r7
 800a85e:	000d      	movs	r5, r1
 800a860:	f7f8 fb56 	bl	8002f10 <__aeabi_i2d>
 800a864:	4a96      	ldr	r2, [pc, #600]	@ (800aac0 <_dtoa_r+0x380>)
 800a866:	4b97      	ldr	r3, [pc, #604]	@ (800aac4 <_dtoa_r+0x384>)
 800a868:	f7f7 fc04 	bl	8002074 <__aeabi_dmul>
 800a86c:	0002      	movs	r2, r0
 800a86e:	000b      	movs	r3, r1
 800a870:	0020      	movs	r0, r4
 800a872:	0029      	movs	r1, r5
 800a874:	f7f6 fbfe 	bl	8001074 <__aeabi_dadd>
 800a878:	0004      	movs	r4, r0
 800a87a:	000d      	movs	r5, r1
 800a87c:	f7f8 fb0c 	bl	8002e98 <__aeabi_d2iz>
 800a880:	2200      	movs	r2, #0
 800a882:	9004      	str	r0, [sp, #16]
 800a884:	2300      	movs	r3, #0
 800a886:	0020      	movs	r0, r4
 800a888:	0029      	movs	r1, r5
 800a88a:	f7f5 fde1 	bl	8000450 <__aeabi_dcmplt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d00b      	beq.n	800a8aa <_dtoa_r+0x16a>
 800a892:	9804      	ldr	r0, [sp, #16]
 800a894:	f7f8 fb3c 	bl	8002f10 <__aeabi_i2d>
 800a898:	002b      	movs	r3, r5
 800a89a:	0022      	movs	r2, r4
 800a89c:	f7f5 fdd2 	bl	8000444 <__aeabi_dcmpeq>
 800a8a0:	4243      	negs	r3, r0
 800a8a2:	4158      	adcs	r0, r3
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	1a1b      	subs	r3, r3, r0
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	2b16      	cmp	r3, #22
 800a8b2:	d810      	bhi.n	800a8d6 <_dtoa_r+0x196>
 800a8b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a8b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a8b8:	9a04      	ldr	r2, [sp, #16]
 800a8ba:	4b83      	ldr	r3, [pc, #524]	@ (800aac8 <_dtoa_r+0x388>)
 800a8bc:	00d2      	lsls	r2, r2, #3
 800a8be:	189b      	adds	r3, r3, r2
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f7f5 fdc4 	bl	8000450 <__aeabi_dcmplt>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d047      	beq.n	800a95c <_dtoa_r+0x21c>
 800a8cc:	9b04      	ldr	r3, [sp, #16]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a8da:	9206      	str	r2, [sp, #24]
 800a8dc:	1bdb      	subs	r3, r3, r7
 800a8de:	1e5a      	subs	r2, r3, #1
 800a8e0:	d53e      	bpl.n	800a960 <_dtoa_r+0x220>
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	9306      	str	r3, [sp, #24]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	db38      	blt.n	800a964 <_dtoa_r+0x224>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8f6:	4694      	mov	ip, r2
 800a8f8:	4463      	add	r3, ip
 800a8fa:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	9214      	str	r2, [sp, #80]	@ 0x50
 800a900:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a902:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a904:	2401      	movs	r4, #1
 800a906:	2b09      	cmp	r3, #9
 800a908:	d862      	bhi.n	800a9d0 <_dtoa_r+0x290>
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	dd02      	ble.n	800a914 <_dtoa_r+0x1d4>
 800a90e:	2400      	movs	r4, #0
 800a910:	3b04      	subs	r3, #4
 800a912:	9322      	str	r3, [sp, #136]	@ 0x88
 800a914:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a916:	1e98      	subs	r0, r3, #2
 800a918:	2803      	cmp	r0, #3
 800a91a:	d863      	bhi.n	800a9e4 <_dtoa_r+0x2a4>
 800a91c:	f7f5 fbf8 	bl	8000110 <__gnu_thumb1_case_uqi>
 800a920:	2b385654 	.word	0x2b385654
 800a924:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a926:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a928:	18f6      	adds	r6, r6, r3
 800a92a:	4b68      	ldr	r3, [pc, #416]	@ (800aacc <_dtoa_r+0x38c>)
 800a92c:	18f2      	adds	r2, r6, r3
 800a92e:	2a20      	cmp	r2, #32
 800a930:	dd0f      	ble.n	800a952 <_dtoa_r+0x212>
 800a932:	2340      	movs	r3, #64	@ 0x40
 800a934:	1a9b      	subs	r3, r3, r2
 800a936:	409f      	lsls	r7, r3
 800a938:	4b65      	ldr	r3, [pc, #404]	@ (800aad0 <_dtoa_r+0x390>)
 800a93a:	0038      	movs	r0, r7
 800a93c:	18f3      	adds	r3, r6, r3
 800a93e:	40dc      	lsrs	r4, r3
 800a940:	4320      	orrs	r0, r4
 800a942:	f7f8 fb13 	bl	8002f6c <__aeabi_ui2d>
 800a946:	2201      	movs	r2, #1
 800a948:	4b62      	ldr	r3, [pc, #392]	@ (800aad4 <_dtoa_r+0x394>)
 800a94a:	1e77      	subs	r7, r6, #1
 800a94c:	18cb      	adds	r3, r1, r3
 800a94e:	9218      	str	r2, [sp, #96]	@ 0x60
 800a950:	e776      	b.n	800a840 <_dtoa_r+0x100>
 800a952:	2320      	movs	r3, #32
 800a954:	0020      	movs	r0, r4
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	4098      	lsls	r0, r3
 800a95a:	e7f2      	b.n	800a942 <_dtoa_r+0x202>
 800a95c:	9015      	str	r0, [sp, #84]	@ 0x54
 800a95e:	e7ba      	b.n	800a8d6 <_dtoa_r+0x196>
 800a960:	920d      	str	r2, [sp, #52]	@ 0x34
 800a962:	e7c3      	b.n	800a8ec <_dtoa_r+0x1ac>
 800a964:	9b06      	ldr	r3, [sp, #24]
 800a966:	9a04      	ldr	r2, [sp, #16]
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	9306      	str	r3, [sp, #24]
 800a96c:	4253      	negs	r3, r2
 800a96e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a970:	2300      	movs	r3, #0
 800a972:	9314      	str	r3, [sp, #80]	@ 0x50
 800a974:	e7c5      	b.n	800a902 <_dtoa_r+0x1c2>
 800a976:	2301      	movs	r3, #1
 800a978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a97a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a97c:	4694      	mov	ip, r2
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	4463      	add	r3, ip
 800a982:	930e      	str	r3, [sp, #56]	@ 0x38
 800a984:	3301      	adds	r3, #1
 800a986:	9309      	str	r3, [sp, #36]	@ 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dc08      	bgt.n	800a99e <_dtoa_r+0x25e>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e006      	b.n	800a99e <_dtoa_r+0x25e>
 800a990:	2301      	movs	r3, #1
 800a992:	9310      	str	r3, [sp, #64]	@ 0x40
 800a994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a996:	2b00      	cmp	r3, #0
 800a998:	dd28      	ble.n	800a9ec <_dtoa_r+0x2ac>
 800a99a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99e:	9a03      	ldr	r2, [sp, #12]
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	69d0      	ldr	r0, [r2, #28]
 800a9a4:	2204      	movs	r2, #4
 800a9a6:	0015      	movs	r5, r2
 800a9a8:	3514      	adds	r5, #20
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	d923      	bls.n	800a9f6 <_dtoa_r+0x2b6>
 800a9ae:	6041      	str	r1, [r0, #4]
 800a9b0:	9803      	ldr	r0, [sp, #12]
 800a9b2:	f000 fdbb 	bl	800b52c <_Balloc>
 800a9b6:	9008      	str	r0, [sp, #32]
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d11f      	bne.n	800a9fc <_dtoa_r+0x2bc>
 800a9bc:	21b0      	movs	r1, #176	@ 0xb0
 800a9be:	4b46      	ldr	r3, [pc, #280]	@ (800aad8 <_dtoa_r+0x398>)
 800a9c0:	4831      	ldr	r0, [pc, #196]	@ (800aa88 <_dtoa_r+0x348>)
 800a9c2:	9a08      	ldr	r2, [sp, #32]
 800a9c4:	31ff      	adds	r1, #255	@ 0xff
 800a9c6:	e6d0      	b.n	800a76a <_dtoa_r+0x2a>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e7e2      	b.n	800a992 <_dtoa_r+0x252>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e7d3      	b.n	800a978 <_dtoa_r+0x238>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9410      	str	r4, [sp, #64]	@ 0x40
 800a9d4:	9322      	str	r3, [sp, #136]	@ 0x88
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	2200      	movs	r2, #0
 800a9da:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9de:	3313      	adds	r3, #19
 800a9e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a9e2:	e7dc      	b.n	800a99e <_dtoa_r+0x25e>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9e8:	3b02      	subs	r3, #2
 800a9ea:	e7f5      	b.n	800a9d8 <_dtoa_r+0x298>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	001a      	movs	r2, r3
 800a9f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9f4:	e7f4      	b.n	800a9e0 <_dtoa_r+0x2a0>
 800a9f6:	3101      	adds	r1, #1
 800a9f8:	0052      	lsls	r2, r2, #1
 800a9fa:	e7d4      	b.n	800a9a6 <_dtoa_r+0x266>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	9a08      	ldr	r2, [sp, #32]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa06:	2b0e      	cmp	r3, #14
 800aa08:	d900      	bls.n	800aa0c <_dtoa_r+0x2cc>
 800aa0a:	e0d6      	b.n	800abba <_dtoa_r+0x47a>
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	d100      	bne.n	800aa12 <_dtoa_r+0x2d2>
 800aa10:	e0d3      	b.n	800abba <_dtoa_r+0x47a>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd63      	ble.n	800aae0 <_dtoa_r+0x3a0>
 800aa18:	210f      	movs	r1, #15
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	4b2a      	ldr	r3, [pc, #168]	@ (800aac8 <_dtoa_r+0x388>)
 800aa1e:	400a      	ands	r2, r1
 800aa20:	00d2      	lsls	r2, r2, #3
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	681e      	ldr	r6, [r3, #0]
 800aa26:	685f      	ldr	r7, [r3, #4]
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	2402      	movs	r4, #2
 800aa2c:	111d      	asrs	r5, r3, #4
 800aa2e:	05db      	lsls	r3, r3, #23
 800aa30:	d50a      	bpl.n	800aa48 <_dtoa_r+0x308>
 800aa32:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <_dtoa_r+0x39c>)
 800aa34:	400d      	ands	r5, r1
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aa3c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aa3e:	f7f6 fedf 	bl	8001800 <__aeabi_ddiv>
 800aa42:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa46:	3401      	adds	r4, #1
 800aa48:	4b24      	ldr	r3, [pc, #144]	@ (800aadc <_dtoa_r+0x39c>)
 800aa4a:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	d108      	bne.n	800aa62 <_dtoa_r+0x322>
 800aa50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa54:	0032      	movs	r2, r6
 800aa56:	003b      	movs	r3, r7
 800aa58:	f7f6 fed2 	bl	8001800 <__aeabi_ddiv>
 800aa5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa60:	e059      	b.n	800ab16 <_dtoa_r+0x3d6>
 800aa62:	2301      	movs	r3, #1
 800aa64:	421d      	tst	r5, r3
 800aa66:	d009      	beq.n	800aa7c <_dtoa_r+0x33c>
 800aa68:	18e4      	adds	r4, r4, r3
 800aa6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa6c:	0030      	movs	r0, r6
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	0039      	movs	r1, r7
 800aa74:	f7f7 fafe 	bl	8002074 <__aeabi_dmul>
 800aa78:	0006      	movs	r6, r0
 800aa7a:	000f      	movs	r7, r1
 800aa7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa7e:	106d      	asrs	r5, r5, #1
 800aa80:	3308      	adds	r3, #8
 800aa82:	e7e2      	b.n	800aa4a <_dtoa_r+0x30a>
 800aa84:	0800c641 	.word	0x0800c641
 800aa88:	0800c658 	.word	0x0800c658
 800aa8c:	7ff00000 	.word	0x7ff00000
 800aa90:	0000270f 	.word	0x0000270f
 800aa94:	0800c63d 	.word	0x0800c63d
 800aa98:	0800c640 	.word	0x0800c640
 800aa9c:	0800c611 	.word	0x0800c611
 800aaa0:	0800c610 	.word	0x0800c610
 800aaa4:	3ff00000 	.word	0x3ff00000
 800aaa8:	fffffc01 	.word	0xfffffc01
 800aaac:	3ff80000 	.word	0x3ff80000
 800aab0:	636f4361 	.word	0x636f4361
 800aab4:	3fd287a7 	.word	0x3fd287a7
 800aab8:	8b60c8b3 	.word	0x8b60c8b3
 800aabc:	3fc68a28 	.word	0x3fc68a28
 800aac0:	509f79fb 	.word	0x509f79fb
 800aac4:	3fd34413 	.word	0x3fd34413
 800aac8:	0800c7a8 	.word	0x0800c7a8
 800aacc:	00000432 	.word	0x00000432
 800aad0:	00000412 	.word	0x00000412
 800aad4:	fe100000 	.word	0xfe100000
 800aad8:	0800c6b0 	.word	0x0800c6b0
 800aadc:	0800c780 	.word	0x0800c780
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	2402      	movs	r4, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d016      	beq.n	800ab16 <_dtoa_r+0x3d6>
 800aae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aaea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aaec:	220f      	movs	r2, #15
 800aaee:	425d      	negs	r5, r3
 800aaf0:	402a      	ands	r2, r5
 800aaf2:	4bd5      	ldr	r3, [pc, #852]	@ (800ae48 <_dtoa_r+0x708>)
 800aaf4:	00d2      	lsls	r2, r2, #3
 800aaf6:	189b      	adds	r3, r3, r2
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f7f7 faba 	bl	8002074 <__aeabi_dmul>
 800ab00:	2701      	movs	r7, #1
 800ab02:	2300      	movs	r3, #0
 800ab04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab06:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab08:	4ed0      	ldr	r6, [pc, #832]	@ (800ae4c <_dtoa_r+0x70c>)
 800ab0a:	112d      	asrs	r5, r5, #4
 800ab0c:	2d00      	cmp	r5, #0
 800ab0e:	d000      	beq.n	800ab12 <_dtoa_r+0x3d2>
 800ab10:	e095      	b.n	800ac3e <_dtoa_r+0x4fe>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1a2      	bne.n	800aa5c <_dtoa_r+0x31c>
 800ab16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ab1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d100      	bne.n	800ab22 <_dtoa_r+0x3e2>
 800ab20:	e098      	b.n	800ac54 <_dtoa_r+0x514>
 800ab22:	2200      	movs	r2, #0
 800ab24:	0030      	movs	r0, r6
 800ab26:	0039      	movs	r1, r7
 800ab28:	4bc9      	ldr	r3, [pc, #804]	@ (800ae50 <_dtoa_r+0x710>)
 800ab2a:	f7f5 fc91 	bl	8000450 <__aeabi_dcmplt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d100      	bne.n	800ab34 <_dtoa_r+0x3f4>
 800ab32:	e08f      	b.n	800ac54 <_dtoa_r+0x514>
 800ab34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d100      	bne.n	800ab3c <_dtoa_r+0x3fc>
 800ab3a:	e08b      	b.n	800ac54 <_dtoa_r+0x514>
 800ab3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dd37      	ble.n	800abb2 <_dtoa_r+0x472>
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	2200      	movs	r2, #0
 800ab46:	3b01      	subs	r3, #1
 800ab48:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab4a:	0030      	movs	r0, r6
 800ab4c:	4bc1      	ldr	r3, [pc, #772]	@ (800ae54 <_dtoa_r+0x714>)
 800ab4e:	0039      	movs	r1, r7
 800ab50:	f7f7 fa90 	bl	8002074 <__aeabi_dmul>
 800ab54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab56:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5a:	3401      	adds	r4, #1
 800ab5c:	0020      	movs	r0, r4
 800ab5e:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab60:	f7f8 f9d6 	bl	8002f10 <__aeabi_i2d>
 800ab64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab68:	f7f7 fa84 	bl	8002074 <__aeabi_dmul>
 800ab6c:	4bba      	ldr	r3, [pc, #744]	@ (800ae58 <_dtoa_r+0x718>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f7f6 fa80 	bl	8001074 <__aeabi_dadd>
 800ab74:	4bb9      	ldr	r3, [pc, #740]	@ (800ae5c <_dtoa_r+0x71c>)
 800ab76:	0006      	movs	r6, r0
 800ab78:	18cf      	adds	r7, r1, r3
 800ab7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d16d      	bne.n	800ac5c <_dtoa_r+0x51c>
 800ab80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab84:	2200      	movs	r2, #0
 800ab86:	4bb6      	ldr	r3, [pc, #728]	@ (800ae60 <_dtoa_r+0x720>)
 800ab88:	f7f7 fd5a 	bl	8002640 <__aeabi_dsub>
 800ab8c:	0032      	movs	r2, r6
 800ab8e:	003b      	movs	r3, r7
 800ab90:	0004      	movs	r4, r0
 800ab92:	000d      	movs	r5, r1
 800ab94:	f7f5 fc70 	bl	8000478 <__aeabi_dcmpgt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d000      	beq.n	800ab9e <_dtoa_r+0x45e>
 800ab9c:	e2b6      	b.n	800b10c <_dtoa_r+0x9cc>
 800ab9e:	2180      	movs	r1, #128	@ 0x80
 800aba0:	0609      	lsls	r1, r1, #24
 800aba2:	187b      	adds	r3, r7, r1
 800aba4:	0032      	movs	r2, r6
 800aba6:	0020      	movs	r0, r4
 800aba8:	0029      	movs	r1, r5
 800abaa:	f7f5 fc51 	bl	8000450 <__aeabi_dcmplt>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d128      	bne.n	800ac04 <_dtoa_r+0x4c4>
 800abb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abb4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800abb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da00      	bge.n	800abc2 <_dtoa_r+0x482>
 800abc0:	e174      	b.n	800aeac <_dtoa_r+0x76c>
 800abc2:	9a04      	ldr	r2, [sp, #16]
 800abc4:	2a0e      	cmp	r2, #14
 800abc6:	dd00      	ble.n	800abca <_dtoa_r+0x48a>
 800abc8:	e170      	b.n	800aeac <_dtoa_r+0x76c>
 800abca:	4b9f      	ldr	r3, [pc, #636]	@ (800ae48 <_dtoa_r+0x708>)
 800abcc:	00d2      	lsls	r2, r2, #3
 800abce:	189b      	adds	r3, r3, r2
 800abd0:	685c      	ldr	r4, [r3, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	9306      	str	r3, [sp, #24]
 800abd6:	9407      	str	r4, [sp, #28]
 800abd8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	db00      	blt.n	800abe0 <_dtoa_r+0x4a0>
 800abde:	e0e7      	b.n	800adb0 <_dtoa_r+0x670>
 800abe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dd00      	ble.n	800abe8 <_dtoa_r+0x4a8>
 800abe6:	e0e3      	b.n	800adb0 <_dtoa_r+0x670>
 800abe8:	d10c      	bne.n	800ac04 <_dtoa_r+0x4c4>
 800abea:	9806      	ldr	r0, [sp, #24]
 800abec:	9907      	ldr	r1, [sp, #28]
 800abee:	2200      	movs	r2, #0
 800abf0:	4b9b      	ldr	r3, [pc, #620]	@ (800ae60 <_dtoa_r+0x720>)
 800abf2:	f7f7 fa3f 	bl	8002074 <__aeabi_dmul>
 800abf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abfa:	f7f5 fc47 	bl	800048c <__aeabi_dcmpge>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d100      	bne.n	800ac04 <_dtoa_r+0x4c4>
 800ac02:	e286      	b.n	800b112 <_dtoa_r+0x9d2>
 800ac04:	2600      	movs	r6, #0
 800ac06:	0037      	movs	r7, r6
 800ac08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac0a:	9c08      	ldr	r4, [sp, #32]
 800ac0c:	43db      	mvns	r3, r3
 800ac0e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac10:	9704      	str	r7, [sp, #16]
 800ac12:	2700      	movs	r7, #0
 800ac14:	0031      	movs	r1, r6
 800ac16:	9803      	ldr	r0, [sp, #12]
 800ac18:	f000 fccc 	bl	800b5b4 <_Bfree>
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d100      	bne.n	800ac24 <_dtoa_r+0x4e4>
 800ac22:	e0bb      	b.n	800ad9c <_dtoa_r+0x65c>
 800ac24:	2f00      	cmp	r7, #0
 800ac26:	d005      	beq.n	800ac34 <_dtoa_r+0x4f4>
 800ac28:	429f      	cmp	r7, r3
 800ac2a:	d003      	beq.n	800ac34 <_dtoa_r+0x4f4>
 800ac2c:	0039      	movs	r1, r7
 800ac2e:	9803      	ldr	r0, [sp, #12]
 800ac30:	f000 fcc0 	bl	800b5b4 <_Bfree>
 800ac34:	9904      	ldr	r1, [sp, #16]
 800ac36:	9803      	ldr	r0, [sp, #12]
 800ac38:	f000 fcbc 	bl	800b5b4 <_Bfree>
 800ac3c:	e0ae      	b.n	800ad9c <_dtoa_r+0x65c>
 800ac3e:	423d      	tst	r5, r7
 800ac40:	d005      	beq.n	800ac4e <_dtoa_r+0x50e>
 800ac42:	6832      	ldr	r2, [r6, #0]
 800ac44:	6873      	ldr	r3, [r6, #4]
 800ac46:	f7f7 fa15 	bl	8002074 <__aeabi_dmul>
 800ac4a:	003b      	movs	r3, r7
 800ac4c:	3401      	adds	r4, #1
 800ac4e:	106d      	asrs	r5, r5, #1
 800ac50:	3608      	adds	r6, #8
 800ac52:	e75b      	b.n	800ab0c <_dtoa_r+0x3cc>
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac5a:	e77f      	b.n	800ab5c <_dtoa_r+0x41c>
 800ac5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac5e:	4b7a      	ldr	r3, [pc, #488]	@ (800ae48 <_dtoa_r+0x708>)
 800ac60:	3a01      	subs	r2, #1
 800ac62:	00d2      	lsls	r2, r2, #3
 800ac64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ac66:	189b      	adds	r3, r3, r2
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	d04c      	beq.n	800ad0a <_dtoa_r+0x5ca>
 800ac70:	2000      	movs	r0, #0
 800ac72:	497c      	ldr	r1, [pc, #496]	@ (800ae64 <_dtoa_r+0x724>)
 800ac74:	f7f6 fdc4 	bl	8001800 <__aeabi_ddiv>
 800ac78:	0032      	movs	r2, r6
 800ac7a:	003b      	movs	r3, r7
 800ac7c:	f7f7 fce0 	bl	8002640 <__aeabi_dsub>
 800ac80:	9a08      	ldr	r2, [sp, #32]
 800ac82:	0006      	movs	r6, r0
 800ac84:	4694      	mov	ip, r2
 800ac86:	000f      	movs	r7, r1
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac8e:	4463      	add	r3, ip
 800ac90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac96:	f7f8 f8ff 	bl	8002e98 <__aeabi_d2iz>
 800ac9a:	0005      	movs	r5, r0
 800ac9c:	f7f8 f938 	bl	8002f10 <__aeabi_i2d>
 800aca0:	0002      	movs	r2, r0
 800aca2:	000b      	movs	r3, r1
 800aca4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aca6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aca8:	f7f7 fcca 	bl	8002640 <__aeabi_dsub>
 800acac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acae:	3530      	adds	r5, #48	@ 0x30
 800acb0:	1c5c      	adds	r4, r3, #1
 800acb2:	701d      	strb	r5, [r3, #0]
 800acb4:	0032      	movs	r2, r6
 800acb6:	003b      	movs	r3, r7
 800acb8:	900a      	str	r0, [sp, #40]	@ 0x28
 800acba:	910b      	str	r1, [sp, #44]	@ 0x2c
 800acbc:	f7f5 fbc8 	bl	8000450 <__aeabi_dcmplt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d16b      	bne.n	800ad9c <_dtoa_r+0x65c>
 800acc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acc8:	2000      	movs	r0, #0
 800acca:	4961      	ldr	r1, [pc, #388]	@ (800ae50 <_dtoa_r+0x710>)
 800accc:	f7f7 fcb8 	bl	8002640 <__aeabi_dsub>
 800acd0:	0032      	movs	r2, r6
 800acd2:	003b      	movs	r3, r7
 800acd4:	f7f5 fbbc 	bl	8000450 <__aeabi_dcmplt>
 800acd8:	2800      	cmp	r0, #0
 800acda:	d000      	beq.n	800acde <_dtoa_r+0x59e>
 800acdc:	e0c6      	b.n	800ae6c <_dtoa_r+0x72c>
 800acde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d100      	bne.n	800ace6 <_dtoa_r+0x5a6>
 800ace4:	e765      	b.n	800abb2 <_dtoa_r+0x472>
 800ace6:	2200      	movs	r2, #0
 800ace8:	0030      	movs	r0, r6
 800acea:	0039      	movs	r1, r7
 800acec:	4b59      	ldr	r3, [pc, #356]	@ (800ae54 <_dtoa_r+0x714>)
 800acee:	f7f7 f9c1 	bl	8002074 <__aeabi_dmul>
 800acf2:	2200      	movs	r2, #0
 800acf4:	0006      	movs	r6, r0
 800acf6:	000f      	movs	r7, r1
 800acf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800acfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acfc:	4b55      	ldr	r3, [pc, #340]	@ (800ae54 <_dtoa_r+0x714>)
 800acfe:	f7f7 f9b9 	bl	8002074 <__aeabi_dmul>
 800ad02:	9416      	str	r4, [sp, #88]	@ 0x58
 800ad04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad06:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad08:	e7c3      	b.n	800ac92 <_dtoa_r+0x552>
 800ad0a:	0030      	movs	r0, r6
 800ad0c:	0039      	movs	r1, r7
 800ad0e:	f7f7 f9b1 	bl	8002074 <__aeabi_dmul>
 800ad12:	9d08      	ldr	r5, [sp, #32]
 800ad14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad16:	002b      	movs	r3, r5
 800ad18:	4694      	mov	ip, r2
 800ad1a:	9016      	str	r0, [sp, #88]	@ 0x58
 800ad1c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ad1e:	4463      	add	r3, ip
 800ad20:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad26:	f7f8 f8b7 	bl	8002e98 <__aeabi_d2iz>
 800ad2a:	0004      	movs	r4, r0
 800ad2c:	f7f8 f8f0 	bl	8002f10 <__aeabi_i2d>
 800ad30:	000b      	movs	r3, r1
 800ad32:	0002      	movs	r2, r0
 800ad34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad38:	f7f7 fc82 	bl	8002640 <__aeabi_dsub>
 800ad3c:	3430      	adds	r4, #48	@ 0x30
 800ad3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad40:	702c      	strb	r4, [r5, #0]
 800ad42:	3501      	adds	r5, #1
 800ad44:	0006      	movs	r6, r0
 800ad46:	000f      	movs	r7, r1
 800ad48:	42ab      	cmp	r3, r5
 800ad4a:	d12a      	bne.n	800ada2 <_dtoa_r+0x662>
 800ad4c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ad4e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800ad54:	469c      	mov	ip, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	4b42      	ldr	r3, [pc, #264]	@ (800ae64 <_dtoa_r+0x724>)
 800ad5a:	4464      	add	r4, ip
 800ad5c:	f7f6 f98a 	bl	8001074 <__aeabi_dadd>
 800ad60:	0002      	movs	r2, r0
 800ad62:	000b      	movs	r3, r1
 800ad64:	0030      	movs	r0, r6
 800ad66:	0039      	movs	r1, r7
 800ad68:	f7f5 fb86 	bl	8000478 <__aeabi_dcmpgt>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d000      	beq.n	800ad72 <_dtoa_r+0x632>
 800ad70:	e07c      	b.n	800ae6c <_dtoa_r+0x72c>
 800ad72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad76:	2000      	movs	r0, #0
 800ad78:	493a      	ldr	r1, [pc, #232]	@ (800ae64 <_dtoa_r+0x724>)
 800ad7a:	f7f7 fc61 	bl	8002640 <__aeabi_dsub>
 800ad7e:	0002      	movs	r2, r0
 800ad80:	000b      	movs	r3, r1
 800ad82:	0030      	movs	r0, r6
 800ad84:	0039      	movs	r1, r7
 800ad86:	f7f5 fb63 	bl	8000450 <__aeabi_dcmplt>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d100      	bne.n	800ad90 <_dtoa_r+0x650>
 800ad8e:	e710      	b.n	800abb2 <_dtoa_r+0x472>
 800ad90:	0023      	movs	r3, r4
 800ad92:	3c01      	subs	r4, #1
 800ad94:	7822      	ldrb	r2, [r4, #0]
 800ad96:	2a30      	cmp	r2, #48	@ 0x30
 800ad98:	d0fa      	beq.n	800ad90 <_dtoa_r+0x650>
 800ad9a:	001c      	movs	r4, r3
 800ad9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	e042      	b.n	800ae28 <_dtoa_r+0x6e8>
 800ada2:	2200      	movs	r2, #0
 800ada4:	4b2b      	ldr	r3, [pc, #172]	@ (800ae54 <_dtoa_r+0x714>)
 800ada6:	f7f7 f965 	bl	8002074 <__aeabi_dmul>
 800adaa:	900a      	str	r0, [sp, #40]	@ 0x28
 800adac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800adae:	e7b8      	b.n	800ad22 <_dtoa_r+0x5e2>
 800adb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb2:	9d08      	ldr	r5, [sp, #32]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	195b      	adds	r3, r3, r5
 800adb8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800adba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800adbc:	930a      	str	r3, [sp, #40]	@ 0x28
 800adbe:	9a06      	ldr	r2, [sp, #24]
 800adc0:	9b07      	ldr	r3, [sp, #28]
 800adc2:	0030      	movs	r0, r6
 800adc4:	0039      	movs	r1, r7
 800adc6:	f7f6 fd1b 	bl	8001800 <__aeabi_ddiv>
 800adca:	f7f8 f865 	bl	8002e98 <__aeabi_d2iz>
 800adce:	9009      	str	r0, [sp, #36]	@ 0x24
 800add0:	f7f8 f89e 	bl	8002f10 <__aeabi_i2d>
 800add4:	9a06      	ldr	r2, [sp, #24]
 800add6:	9b07      	ldr	r3, [sp, #28]
 800add8:	f7f7 f94c 	bl	8002074 <__aeabi_dmul>
 800addc:	0002      	movs	r2, r0
 800adde:	000b      	movs	r3, r1
 800ade0:	0030      	movs	r0, r6
 800ade2:	0039      	movs	r1, r7
 800ade4:	f7f7 fc2c 	bl	8002640 <__aeabi_dsub>
 800ade8:	002b      	movs	r3, r5
 800adea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adec:	3501      	adds	r5, #1
 800adee:	3230      	adds	r2, #48	@ 0x30
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adf4:	002c      	movs	r4, r5
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d14b      	bne.n	800ae92 <_dtoa_r+0x752>
 800adfa:	0002      	movs	r2, r0
 800adfc:	000b      	movs	r3, r1
 800adfe:	f7f6 f939 	bl	8001074 <__aeabi_dadd>
 800ae02:	9a06      	ldr	r2, [sp, #24]
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	0006      	movs	r6, r0
 800ae08:	000f      	movs	r7, r1
 800ae0a:	f7f5 fb35 	bl	8000478 <__aeabi_dcmpgt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d12a      	bne.n	800ae68 <_dtoa_r+0x728>
 800ae12:	9a06      	ldr	r2, [sp, #24]
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	0030      	movs	r0, r6
 800ae18:	0039      	movs	r1, r7
 800ae1a:	f7f5 fb13 	bl	8000444 <__aeabi_dcmpeq>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d002      	beq.n	800ae28 <_dtoa_r+0x6e8>
 800ae22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae24:	07dd      	lsls	r5, r3, #31
 800ae26:	d41f      	bmi.n	800ae68 <_dtoa_r+0x728>
 800ae28:	9905      	ldr	r1, [sp, #20]
 800ae2a:	9803      	ldr	r0, [sp, #12]
 800ae2c:	f000 fbc2 	bl	800b5b4 <_Bfree>
 800ae30:	2300      	movs	r3, #0
 800ae32:	7023      	strb	r3, [r4, #0]
 800ae34:	9b04      	ldr	r3, [sp, #16]
 800ae36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ae38:	3301      	adds	r3, #1
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d100      	bne.n	800ae44 <_dtoa_r+0x704>
 800ae42:	e4c7      	b.n	800a7d4 <_dtoa_r+0x94>
 800ae44:	601c      	str	r4, [r3, #0]
 800ae46:	e4c5      	b.n	800a7d4 <_dtoa_r+0x94>
 800ae48:	0800c7a8 	.word	0x0800c7a8
 800ae4c:	0800c780 	.word	0x0800c780
 800ae50:	3ff00000 	.word	0x3ff00000
 800ae54:	40240000 	.word	0x40240000
 800ae58:	401c0000 	.word	0x401c0000
 800ae5c:	fcc00000 	.word	0xfcc00000
 800ae60:	40140000 	.word	0x40140000
 800ae64:	3fe00000 	.word	0x3fe00000
 800ae68:	9b04      	ldr	r3, [sp, #16]
 800ae6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae6c:	0023      	movs	r3, r4
 800ae6e:	001c      	movs	r4, r3
 800ae70:	3b01      	subs	r3, #1
 800ae72:	781a      	ldrb	r2, [r3, #0]
 800ae74:	2a39      	cmp	r2, #57	@ 0x39
 800ae76:	d108      	bne.n	800ae8a <_dtoa_r+0x74a>
 800ae78:	9a08      	ldr	r2, [sp, #32]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d1f7      	bne.n	800ae6e <_dtoa_r+0x72e>
 800ae7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae80:	9908      	ldr	r1, [sp, #32]
 800ae82:	3201      	adds	r2, #1
 800ae84:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae86:	2230      	movs	r2, #48	@ 0x30
 800ae88:	700a      	strb	r2, [r1, #0]
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	3201      	adds	r2, #1
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	e784      	b.n	800ad9c <_dtoa_r+0x65c>
 800ae92:	2200      	movs	r2, #0
 800ae94:	4bc6      	ldr	r3, [pc, #792]	@ (800b1b0 <_dtoa_r+0xa70>)
 800ae96:	f7f7 f8ed 	bl	8002074 <__aeabi_dmul>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	0006      	movs	r6, r0
 800aea0:	000f      	movs	r7, r1
 800aea2:	f7f5 facf 	bl	8000444 <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d089      	beq.n	800adbe <_dtoa_r+0x67e>
 800aeaa:	e7bd      	b.n	800ae28 <_dtoa_r+0x6e8>
 800aeac:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800aeae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800aeb0:	9c06      	ldr	r4, [sp, #24]
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	d014      	beq.n	800aee0 <_dtoa_r+0x7a0>
 800aeb6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aeb8:	2a01      	cmp	r2, #1
 800aeba:	dd00      	ble.n	800aebe <_dtoa_r+0x77e>
 800aebc:	e0e4      	b.n	800b088 <_dtoa_r+0x948>
 800aebe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	d100      	bne.n	800aec6 <_dtoa_r+0x786>
 800aec4:	e0da      	b.n	800b07c <_dtoa_r+0x93c>
 800aec6:	4abb      	ldr	r2, [pc, #748]	@ (800b1b4 <_dtoa_r+0xa74>)
 800aec8:	189b      	adds	r3, r3, r2
 800aeca:	9a06      	ldr	r2, [sp, #24]
 800aecc:	2101      	movs	r1, #1
 800aece:	18d2      	adds	r2, r2, r3
 800aed0:	9206      	str	r2, [sp, #24]
 800aed2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aed4:	9803      	ldr	r0, [sp, #12]
 800aed6:	18d3      	adds	r3, r2, r3
 800aed8:	930d      	str	r3, [sp, #52]	@ 0x34
 800aeda:	f000 fc23 	bl	800b724 <__i2b>
 800aede:	0007      	movs	r7, r0
 800aee0:	2c00      	cmp	r4, #0
 800aee2:	d00e      	beq.n	800af02 <_dtoa_r+0x7c2>
 800aee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	dd0b      	ble.n	800af02 <_dtoa_r+0x7c2>
 800aeea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeec:	0023      	movs	r3, r4
 800aeee:	4294      	cmp	r4, r2
 800aef0:	dd00      	ble.n	800aef4 <_dtoa_r+0x7b4>
 800aef2:	0013      	movs	r3, r2
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	1ae4      	subs	r4, r4, r3
 800aef8:	1ad2      	subs	r2, r2, r3
 800aefa:	9206      	str	r2, [sp, #24]
 800aefc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	930d      	str	r3, [sp, #52]	@ 0x34
 800af02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d021      	beq.n	800af4c <_dtoa_r+0x80c>
 800af08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d100      	bne.n	800af10 <_dtoa_r+0x7d0>
 800af0e:	e0d3      	b.n	800b0b8 <_dtoa_r+0x978>
 800af10:	9e05      	ldr	r6, [sp, #20]
 800af12:	2d00      	cmp	r5, #0
 800af14:	d014      	beq.n	800af40 <_dtoa_r+0x800>
 800af16:	0039      	movs	r1, r7
 800af18:	002a      	movs	r2, r5
 800af1a:	9803      	ldr	r0, [sp, #12]
 800af1c:	f000 fcc4 	bl	800b8a8 <__pow5mult>
 800af20:	9a05      	ldr	r2, [sp, #20]
 800af22:	0001      	movs	r1, r0
 800af24:	0007      	movs	r7, r0
 800af26:	9803      	ldr	r0, [sp, #12]
 800af28:	f000 fc14 	bl	800b754 <__multiply>
 800af2c:	0006      	movs	r6, r0
 800af2e:	9905      	ldr	r1, [sp, #20]
 800af30:	9803      	ldr	r0, [sp, #12]
 800af32:	f000 fb3f 	bl	800b5b4 <_Bfree>
 800af36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af38:	9605      	str	r6, [sp, #20]
 800af3a:	1b5b      	subs	r3, r3, r5
 800af3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af3e:	d005      	beq.n	800af4c <_dtoa_r+0x80c>
 800af40:	0031      	movs	r1, r6
 800af42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af44:	9803      	ldr	r0, [sp, #12]
 800af46:	f000 fcaf 	bl	800b8a8 <__pow5mult>
 800af4a:	9005      	str	r0, [sp, #20]
 800af4c:	2101      	movs	r1, #1
 800af4e:	9803      	ldr	r0, [sp, #12]
 800af50:	f000 fbe8 	bl	800b724 <__i2b>
 800af54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af56:	0006      	movs	r6, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d100      	bne.n	800af5e <_dtoa_r+0x81e>
 800af5c:	e1bc      	b.n	800b2d8 <_dtoa_r+0xb98>
 800af5e:	001a      	movs	r2, r3
 800af60:	0001      	movs	r1, r0
 800af62:	9803      	ldr	r0, [sp, #12]
 800af64:	f000 fca0 	bl	800b8a8 <__pow5mult>
 800af68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af6a:	0006      	movs	r6, r0
 800af6c:	2500      	movs	r5, #0
 800af6e:	2b01      	cmp	r3, #1
 800af70:	dc16      	bgt.n	800afa0 <_dtoa_r+0x860>
 800af72:	2500      	movs	r5, #0
 800af74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af76:	42ab      	cmp	r3, r5
 800af78:	d10e      	bne.n	800af98 <_dtoa_r+0x858>
 800af7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af7c:	031b      	lsls	r3, r3, #12
 800af7e:	42ab      	cmp	r3, r5
 800af80:	d10a      	bne.n	800af98 <_dtoa_r+0x858>
 800af82:	4b8d      	ldr	r3, [pc, #564]	@ (800b1b8 <_dtoa_r+0xa78>)
 800af84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af86:	4213      	tst	r3, r2
 800af88:	d006      	beq.n	800af98 <_dtoa_r+0x858>
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	3501      	adds	r5, #1
 800af8e:	3301      	adds	r3, #1
 800af90:	9306      	str	r3, [sp, #24]
 800af92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af94:	3301      	adds	r3, #1
 800af96:	930d      	str	r3, [sp, #52]	@ 0x34
 800af98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af9a:	2001      	movs	r0, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <_dtoa_r+0x872>
 800afa0:	6933      	ldr	r3, [r6, #16]
 800afa2:	3303      	adds	r3, #3
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	18f3      	adds	r3, r6, r3
 800afa8:	6858      	ldr	r0, [r3, #4]
 800afaa:	f000 fb6b 	bl	800b684 <__hi0bits>
 800afae:	2320      	movs	r3, #32
 800afb0:	1a18      	subs	r0, r3, r0
 800afb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb4:	1818      	adds	r0, r3, r0
 800afb6:	0002      	movs	r2, r0
 800afb8:	231f      	movs	r3, #31
 800afba:	401a      	ands	r2, r3
 800afbc:	4218      	tst	r0, r3
 800afbe:	d100      	bne.n	800afc2 <_dtoa_r+0x882>
 800afc0:	e081      	b.n	800b0c6 <_dtoa_r+0x986>
 800afc2:	3301      	adds	r3, #1
 800afc4:	1a9b      	subs	r3, r3, r2
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	dd79      	ble.n	800b0be <_dtoa_r+0x97e>
 800afca:	231c      	movs	r3, #28
 800afcc:	1a9b      	subs	r3, r3, r2
 800afce:	9a06      	ldr	r2, [sp, #24]
 800afd0:	18e4      	adds	r4, r4, r3
 800afd2:	18d2      	adds	r2, r2, r3
 800afd4:	9206      	str	r2, [sp, #24]
 800afd6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afd8:	18d3      	adds	r3, r2, r3
 800afda:	930d      	str	r3, [sp, #52]	@ 0x34
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	dd05      	ble.n	800afee <_dtoa_r+0x8ae>
 800afe2:	001a      	movs	r2, r3
 800afe4:	9905      	ldr	r1, [sp, #20]
 800afe6:	9803      	ldr	r0, [sp, #12]
 800afe8:	f000 fcba 	bl	800b960 <__lshift>
 800afec:	9005      	str	r0, [sp, #20]
 800afee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dd05      	ble.n	800b000 <_dtoa_r+0x8c0>
 800aff4:	0031      	movs	r1, r6
 800aff6:	001a      	movs	r2, r3
 800aff8:	9803      	ldr	r0, [sp, #12]
 800affa:	f000 fcb1 	bl	800b960 <__lshift>
 800affe:	0006      	movs	r6, r0
 800b000:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b002:	2b00      	cmp	r3, #0
 800b004:	d061      	beq.n	800b0ca <_dtoa_r+0x98a>
 800b006:	0031      	movs	r1, r6
 800b008:	9805      	ldr	r0, [sp, #20]
 800b00a:	f000 fd15 	bl	800ba38 <__mcmp>
 800b00e:	2800      	cmp	r0, #0
 800b010:	da5b      	bge.n	800b0ca <_dtoa_r+0x98a>
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	220a      	movs	r2, #10
 800b016:	3b01      	subs	r3, #1
 800b018:	930c      	str	r3, [sp, #48]	@ 0x30
 800b01a:	9905      	ldr	r1, [sp, #20]
 800b01c:	2300      	movs	r3, #0
 800b01e:	9803      	ldr	r0, [sp, #12]
 800b020:	f000 faec 	bl	800b5fc <__multadd>
 800b024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b026:	9005      	str	r0, [sp, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d100      	bne.n	800b02e <_dtoa_r+0x8ee>
 800b02c:	e15b      	b.n	800b2e6 <_dtoa_r+0xba6>
 800b02e:	2300      	movs	r3, #0
 800b030:	0039      	movs	r1, r7
 800b032:	220a      	movs	r2, #10
 800b034:	9803      	ldr	r0, [sp, #12]
 800b036:	f000 fae1 	bl	800b5fc <__multadd>
 800b03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03c:	0007      	movs	r7, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dc4d      	bgt.n	800b0de <_dtoa_r+0x99e>
 800b042:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b044:	2b02      	cmp	r3, #2
 800b046:	dd46      	ble.n	800b0d6 <_dtoa_r+0x996>
 800b048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d000      	beq.n	800b050 <_dtoa_r+0x910>
 800b04e:	e5db      	b.n	800ac08 <_dtoa_r+0x4c8>
 800b050:	0031      	movs	r1, r6
 800b052:	2205      	movs	r2, #5
 800b054:	9803      	ldr	r0, [sp, #12]
 800b056:	f000 fad1 	bl	800b5fc <__multadd>
 800b05a:	0006      	movs	r6, r0
 800b05c:	0001      	movs	r1, r0
 800b05e:	9805      	ldr	r0, [sp, #20]
 800b060:	f000 fcea 	bl	800ba38 <__mcmp>
 800b064:	2800      	cmp	r0, #0
 800b066:	dc00      	bgt.n	800b06a <_dtoa_r+0x92a>
 800b068:	e5ce      	b.n	800ac08 <_dtoa_r+0x4c8>
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	9a08      	ldr	r2, [sp, #32]
 800b06e:	1c5c      	adds	r4, r3, #1
 800b070:	2331      	movs	r3, #49	@ 0x31
 800b072:	7013      	strb	r3, [r2, #0]
 800b074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b076:	3301      	adds	r3, #1
 800b078:	930c      	str	r3, [sp, #48]	@ 0x30
 800b07a:	e5c9      	b.n	800ac10 <_dtoa_r+0x4d0>
 800b07c:	2336      	movs	r3, #54	@ 0x36
 800b07e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b080:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	9c06      	ldr	r4, [sp, #24]
 800b086:	e720      	b.n	800aeca <_dtoa_r+0x78a>
 800b088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08a:	1e5d      	subs	r5, r3, #1
 800b08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b08e:	42ab      	cmp	r3, r5
 800b090:	db08      	blt.n	800b0a4 <_dtoa_r+0x964>
 800b092:	1b5d      	subs	r5, r3, r5
 800b094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	daf4      	bge.n	800b084 <_dtoa_r+0x944>
 800b09a:	9b06      	ldr	r3, [sp, #24]
 800b09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b09e:	1a9c      	subs	r4, r3, r2
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e712      	b.n	800aeca <_dtoa_r+0x78a>
 800b0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0a8:	1aeb      	subs	r3, r5, r3
 800b0aa:	18d3      	adds	r3, r2, r3
 800b0ac:	9314      	str	r3, [sp, #80]	@ 0x50
 800b0ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b0b0:	9c06      	ldr	r4, [sp, #24]
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b6:	e708      	b.n	800aeca <_dtoa_r+0x78a>
 800b0b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0ba:	9905      	ldr	r1, [sp, #20]
 800b0bc:	e742      	b.n	800af44 <_dtoa_r+0x804>
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d08c      	beq.n	800afdc <_dtoa_r+0x89c>
 800b0c2:	331c      	adds	r3, #28
 800b0c4:	e783      	b.n	800afce <_dtoa_r+0x88e>
 800b0c6:	0013      	movs	r3, r2
 800b0c8:	e7fb      	b.n	800b0c2 <_dtoa_r+0x982>
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	ddb5      	ble.n	800b042 <_dtoa_r+0x902>
 800b0d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d100      	bne.n	800b0de <_dtoa_r+0x99e>
 800b0dc:	e107      	b.n	800b2ee <_dtoa_r+0xbae>
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	dd05      	ble.n	800b0ee <_dtoa_r+0x9ae>
 800b0e2:	0039      	movs	r1, r7
 800b0e4:	0022      	movs	r2, r4
 800b0e6:	9803      	ldr	r0, [sp, #12]
 800b0e8:	f000 fc3a 	bl	800b960 <__lshift>
 800b0ec:	0007      	movs	r7, r0
 800b0ee:	9704      	str	r7, [sp, #16]
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	d020      	beq.n	800b136 <_dtoa_r+0x9f6>
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	9803      	ldr	r0, [sp, #12]
 800b0f8:	f000 fa18 	bl	800b52c <_Balloc>
 800b0fc:	1e04      	subs	r4, r0, #0
 800b0fe:	d10c      	bne.n	800b11a <_dtoa_r+0x9da>
 800b100:	0022      	movs	r2, r4
 800b102:	4b2e      	ldr	r3, [pc, #184]	@ (800b1bc <_dtoa_r+0xa7c>)
 800b104:	482e      	ldr	r0, [pc, #184]	@ (800b1c0 <_dtoa_r+0xa80>)
 800b106:	492f      	ldr	r1, [pc, #188]	@ (800b1c4 <_dtoa_r+0xa84>)
 800b108:	f7ff fb2f 	bl	800a76a <_dtoa_r+0x2a>
 800b10c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b10e:	0037      	movs	r7, r6
 800b110:	e7ab      	b.n	800b06a <_dtoa_r+0x92a>
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b116:	930c      	str	r3, [sp, #48]	@ 0x30
 800b118:	e7f9      	b.n	800b10e <_dtoa_r+0x9ce>
 800b11a:	0039      	movs	r1, r7
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	310c      	adds	r1, #12
 800b120:	3202      	adds	r2, #2
 800b122:	0092      	lsls	r2, r2, #2
 800b124:	300c      	adds	r0, #12
 800b126:	f000 fe61 	bl	800bdec <memcpy>
 800b12a:	2201      	movs	r2, #1
 800b12c:	0021      	movs	r1, r4
 800b12e:	9803      	ldr	r0, [sp, #12]
 800b130:	f000 fc16 	bl	800b960 <__lshift>
 800b134:	9004      	str	r0, [sp, #16]
 800b136:	9b08      	ldr	r3, [sp, #32]
 800b138:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b13a:	9306      	str	r3, [sp, #24]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	189b      	adds	r3, r3, r2
 800b140:	2201      	movs	r2, #1
 800b142:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b146:	4013      	ands	r3, r2
 800b148:	930e      	str	r3, [sp, #56]	@ 0x38
 800b14a:	0031      	movs	r1, r6
 800b14c:	9805      	ldr	r0, [sp, #20]
 800b14e:	f7ff fa71 	bl	800a634 <quorem>
 800b152:	0039      	movs	r1, r7
 800b154:	0005      	movs	r5, r0
 800b156:	900a      	str	r0, [sp, #40]	@ 0x28
 800b158:	9805      	ldr	r0, [sp, #20]
 800b15a:	f000 fc6d 	bl	800ba38 <__mcmp>
 800b15e:	9a04      	ldr	r2, [sp, #16]
 800b160:	900d      	str	r0, [sp, #52]	@ 0x34
 800b162:	0031      	movs	r1, r6
 800b164:	9803      	ldr	r0, [sp, #12]
 800b166:	f000 fc83 	bl	800ba70 <__mdiff>
 800b16a:	2201      	movs	r2, #1
 800b16c:	68c3      	ldr	r3, [r0, #12]
 800b16e:	0004      	movs	r4, r0
 800b170:	3530      	adds	r5, #48	@ 0x30
 800b172:	9209      	str	r2, [sp, #36]	@ 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <_dtoa_r+0xa42>
 800b178:	0001      	movs	r1, r0
 800b17a:	9805      	ldr	r0, [sp, #20]
 800b17c:	f000 fc5c 	bl	800ba38 <__mcmp>
 800b180:	9009      	str	r0, [sp, #36]	@ 0x24
 800b182:	0021      	movs	r1, r4
 800b184:	9803      	ldr	r0, [sp, #12]
 800b186:	f000 fa15 	bl	800b5b4 <_Bfree>
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b18e:	1c5c      	adds	r4, r3, #1
 800b190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b192:	4313      	orrs	r3, r2
 800b194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b196:	4313      	orrs	r3, r2
 800b198:	d116      	bne.n	800b1c8 <_dtoa_r+0xa88>
 800b19a:	2d39      	cmp	r5, #57	@ 0x39
 800b19c:	d02f      	beq.n	800b1fe <_dtoa_r+0xabe>
 800b19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd01      	ble.n	800b1a8 <_dtoa_r+0xa68>
 800b1a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b1a6:	3531      	adds	r5, #49	@ 0x31
 800b1a8:	9b06      	ldr	r3, [sp, #24]
 800b1aa:	701d      	strb	r5, [r3, #0]
 800b1ac:	e532      	b.n	800ac14 <_dtoa_r+0x4d4>
 800b1ae:	46c0      	nop			@ (mov r8, r8)
 800b1b0:	40240000 	.word	0x40240000
 800b1b4:	00000433 	.word	0x00000433
 800b1b8:	7ff00000 	.word	0x7ff00000
 800b1bc:	0800c6b0 	.word	0x0800c6b0
 800b1c0:	0800c658 	.word	0x0800c658
 800b1c4:	000002ef 	.word	0x000002ef
 800b1c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	db04      	blt.n	800b1d8 <_dtoa_r+0xa98>
 800b1ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	d11e      	bne.n	800b216 <_dtoa_r+0xad6>
 800b1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dde4      	ble.n	800b1a8 <_dtoa_r+0xa68>
 800b1de:	9905      	ldr	r1, [sp, #20]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	9803      	ldr	r0, [sp, #12]
 800b1e4:	f000 fbbc 	bl	800b960 <__lshift>
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	9005      	str	r0, [sp, #20]
 800b1ec:	f000 fc24 	bl	800ba38 <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dc02      	bgt.n	800b1fa <_dtoa_r+0xaba>
 800b1f4:	d1d8      	bne.n	800b1a8 <_dtoa_r+0xa68>
 800b1f6:	07eb      	lsls	r3, r5, #31
 800b1f8:	d5d6      	bpl.n	800b1a8 <_dtoa_r+0xa68>
 800b1fa:	2d39      	cmp	r5, #57	@ 0x39
 800b1fc:	d1d2      	bne.n	800b1a4 <_dtoa_r+0xa64>
 800b1fe:	2339      	movs	r3, #57	@ 0x39
 800b200:	9a06      	ldr	r2, [sp, #24]
 800b202:	7013      	strb	r3, [r2, #0]
 800b204:	0023      	movs	r3, r4
 800b206:	001c      	movs	r4, r3
 800b208:	3b01      	subs	r3, #1
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	2a39      	cmp	r2, #57	@ 0x39
 800b20e:	d050      	beq.n	800b2b2 <_dtoa_r+0xb72>
 800b210:	3201      	adds	r2, #1
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e4fe      	b.n	800ac14 <_dtoa_r+0x4d4>
 800b216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dd03      	ble.n	800b224 <_dtoa_r+0xae4>
 800b21c:	2d39      	cmp	r5, #57	@ 0x39
 800b21e:	d0ee      	beq.n	800b1fe <_dtoa_r+0xabe>
 800b220:	3501      	adds	r5, #1
 800b222:	e7c1      	b.n	800b1a8 <_dtoa_r+0xa68>
 800b224:	9b06      	ldr	r3, [sp, #24]
 800b226:	9a06      	ldr	r2, [sp, #24]
 800b228:	701d      	strb	r5, [r3, #0]
 800b22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d02b      	beq.n	800b288 <_dtoa_r+0xb48>
 800b230:	2300      	movs	r3, #0
 800b232:	220a      	movs	r2, #10
 800b234:	9905      	ldr	r1, [sp, #20]
 800b236:	9803      	ldr	r0, [sp, #12]
 800b238:	f000 f9e0 	bl	800b5fc <__multadd>
 800b23c:	9b04      	ldr	r3, [sp, #16]
 800b23e:	9005      	str	r0, [sp, #20]
 800b240:	429f      	cmp	r7, r3
 800b242:	d109      	bne.n	800b258 <_dtoa_r+0xb18>
 800b244:	0039      	movs	r1, r7
 800b246:	2300      	movs	r3, #0
 800b248:	220a      	movs	r2, #10
 800b24a:	9803      	ldr	r0, [sp, #12]
 800b24c:	f000 f9d6 	bl	800b5fc <__multadd>
 800b250:	0007      	movs	r7, r0
 800b252:	9004      	str	r0, [sp, #16]
 800b254:	9406      	str	r4, [sp, #24]
 800b256:	e778      	b.n	800b14a <_dtoa_r+0xa0a>
 800b258:	0039      	movs	r1, r7
 800b25a:	2300      	movs	r3, #0
 800b25c:	220a      	movs	r2, #10
 800b25e:	9803      	ldr	r0, [sp, #12]
 800b260:	f000 f9cc 	bl	800b5fc <__multadd>
 800b264:	2300      	movs	r3, #0
 800b266:	0007      	movs	r7, r0
 800b268:	220a      	movs	r2, #10
 800b26a:	9904      	ldr	r1, [sp, #16]
 800b26c:	9803      	ldr	r0, [sp, #12]
 800b26e:	f000 f9c5 	bl	800b5fc <__multadd>
 800b272:	9004      	str	r0, [sp, #16]
 800b274:	e7ee      	b.n	800b254 <_dtoa_r+0xb14>
 800b276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b278:	2401      	movs	r4, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dd00      	ble.n	800b280 <_dtoa_r+0xb40>
 800b27e:	001c      	movs	r4, r3
 800b280:	9704      	str	r7, [sp, #16]
 800b282:	2700      	movs	r7, #0
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	191c      	adds	r4, r3, r4
 800b288:	9905      	ldr	r1, [sp, #20]
 800b28a:	2201      	movs	r2, #1
 800b28c:	9803      	ldr	r0, [sp, #12]
 800b28e:	f000 fb67 	bl	800b960 <__lshift>
 800b292:	0031      	movs	r1, r6
 800b294:	9005      	str	r0, [sp, #20]
 800b296:	f000 fbcf 	bl	800ba38 <__mcmp>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	dcb2      	bgt.n	800b204 <_dtoa_r+0xac4>
 800b29e:	d101      	bne.n	800b2a4 <_dtoa_r+0xb64>
 800b2a0:	07ed      	lsls	r5, r5, #31
 800b2a2:	d4af      	bmi.n	800b204 <_dtoa_r+0xac4>
 800b2a4:	0023      	movs	r3, r4
 800b2a6:	001c      	movs	r4, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	2a30      	cmp	r2, #48	@ 0x30
 800b2ae:	d0fa      	beq.n	800b2a6 <_dtoa_r+0xb66>
 800b2b0:	e4b0      	b.n	800ac14 <_dtoa_r+0x4d4>
 800b2b2:	9a08      	ldr	r2, [sp, #32]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d1a6      	bne.n	800b206 <_dtoa_r+0xac6>
 800b2b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2be:	2331      	movs	r3, #49	@ 0x31
 800b2c0:	7013      	strb	r3, [r2, #0]
 800b2c2:	e4a7      	b.n	800ac14 <_dtoa_r+0x4d4>
 800b2c4:	4b14      	ldr	r3, [pc, #80]	@ (800b318 <_dtoa_r+0xbd8>)
 800b2c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b2c8:	9308      	str	r3, [sp, #32]
 800b2ca:	4b14      	ldr	r3, [pc, #80]	@ (800b31c <_dtoa_r+0xbdc>)
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	d001      	beq.n	800b2d4 <_dtoa_r+0xb94>
 800b2d0:	f7ff fa7e 	bl	800a7d0 <_dtoa_r+0x90>
 800b2d4:	f7ff fa7e 	bl	800a7d4 <_dtoa_r+0x94>
 800b2d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	dc00      	bgt.n	800b2e0 <_dtoa_r+0xba0>
 800b2de:	e648      	b.n	800af72 <_dtoa_r+0x832>
 800b2e0:	2001      	movs	r0, #1
 800b2e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b2e4:	e665      	b.n	800afb2 <_dtoa_r+0x872>
 800b2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dc00      	bgt.n	800b2ee <_dtoa_r+0xbae>
 800b2ec:	e6a9      	b.n	800b042 <_dtoa_r+0x902>
 800b2ee:	2400      	movs	r4, #0
 800b2f0:	0031      	movs	r1, r6
 800b2f2:	9805      	ldr	r0, [sp, #20]
 800b2f4:	f7ff f99e 	bl	800a634 <quorem>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	3030      	adds	r0, #48	@ 0x30
 800b2fc:	5518      	strb	r0, [r3, r4]
 800b2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b300:	3401      	adds	r4, #1
 800b302:	0005      	movs	r5, r0
 800b304:	42a3      	cmp	r3, r4
 800b306:	ddb6      	ble.n	800b276 <_dtoa_r+0xb36>
 800b308:	2300      	movs	r3, #0
 800b30a:	220a      	movs	r2, #10
 800b30c:	9905      	ldr	r1, [sp, #20]
 800b30e:	9803      	ldr	r0, [sp, #12]
 800b310:	f000 f974 	bl	800b5fc <__multadd>
 800b314:	9005      	str	r0, [sp, #20]
 800b316:	e7eb      	b.n	800b2f0 <_dtoa_r+0xbb0>
 800b318:	0800c634 	.word	0x0800c634
 800b31c:	0800c63c 	.word	0x0800c63c

0800b320 <_free_r>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	0005      	movs	r5, r0
 800b324:	1e0c      	subs	r4, r1, #0
 800b326:	d010      	beq.n	800b34a <_free_r+0x2a>
 800b328:	3c04      	subs	r4, #4
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da00      	bge.n	800b332 <_free_r+0x12>
 800b330:	18e4      	adds	r4, r4, r3
 800b332:	0028      	movs	r0, r5
 800b334:	f000 f8ea 	bl	800b50c <__malloc_lock>
 800b338:	4a1d      	ldr	r2, [pc, #116]	@ (800b3b0 <_free_r+0x90>)
 800b33a:	6813      	ldr	r3, [r2, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d105      	bne.n	800b34c <_free_r+0x2c>
 800b340:	6063      	str	r3, [r4, #4]
 800b342:	6014      	str	r4, [r2, #0]
 800b344:	0028      	movs	r0, r5
 800b346:	f000 f8e9 	bl	800b51c <__malloc_unlock>
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	d908      	bls.n	800b362 <_free_r+0x42>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	1821      	adds	r1, r4, r0
 800b354:	428b      	cmp	r3, r1
 800b356:	d1f3      	bne.n	800b340 <_free_r+0x20>
 800b358:	6819      	ldr	r1, [r3, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	1809      	adds	r1, r1, r0
 800b35e:	6021      	str	r1, [r4, #0]
 800b360:	e7ee      	b.n	800b340 <_free_r+0x20>
 800b362:	001a      	movs	r2, r3
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <_free_r+0x4e>
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	d9f9      	bls.n	800b362 <_free_r+0x42>
 800b36e:	6811      	ldr	r1, [r2, #0]
 800b370:	1850      	adds	r0, r2, r1
 800b372:	42a0      	cmp	r0, r4
 800b374:	d10b      	bne.n	800b38e <_free_r+0x6e>
 800b376:	6820      	ldr	r0, [r4, #0]
 800b378:	1809      	adds	r1, r1, r0
 800b37a:	1850      	adds	r0, r2, r1
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	4283      	cmp	r3, r0
 800b380:	d1e0      	bne.n	800b344 <_free_r+0x24>
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	1841      	adds	r1, r0, r1
 800b388:	6011      	str	r1, [r2, #0]
 800b38a:	6053      	str	r3, [r2, #4]
 800b38c:	e7da      	b.n	800b344 <_free_r+0x24>
 800b38e:	42a0      	cmp	r0, r4
 800b390:	d902      	bls.n	800b398 <_free_r+0x78>
 800b392:	230c      	movs	r3, #12
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	e7d5      	b.n	800b344 <_free_r+0x24>
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	1821      	adds	r1, r4, r0
 800b39c:	428b      	cmp	r3, r1
 800b39e:	d103      	bne.n	800b3a8 <_free_r+0x88>
 800b3a0:	6819      	ldr	r1, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	1809      	adds	r1, r1, r0
 800b3a6:	6021      	str	r1, [r4, #0]
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6054      	str	r4, [r2, #4]
 800b3ac:	e7ca      	b.n	800b344 <_free_r+0x24>
 800b3ae:	46c0      	nop			@ (mov r8, r8)
 800b3b0:	200006f8 	.word	0x200006f8

0800b3b4 <malloc>:
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	4b03      	ldr	r3, [pc, #12]	@ (800b3c4 <malloc+0x10>)
 800b3b8:	0001      	movs	r1, r0
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	f000 f826 	bl	800b40c <_malloc_r>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	46c0      	nop			@ (mov r8, r8)
 800b3c4:	20000028 	.word	0x20000028

0800b3c8 <sbrk_aligned>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	4e0f      	ldr	r6, [pc, #60]	@ (800b408 <sbrk_aligned+0x40>)
 800b3cc:	000d      	movs	r5, r1
 800b3ce:	6831      	ldr	r1, [r6, #0]
 800b3d0:	0004      	movs	r4, r0
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	d102      	bne.n	800b3dc <sbrk_aligned+0x14>
 800b3d6:	f000 fcf7 	bl	800bdc8 <_sbrk_r>
 800b3da:	6030      	str	r0, [r6, #0]
 800b3dc:	0029      	movs	r1, r5
 800b3de:	0020      	movs	r0, r4
 800b3e0:	f000 fcf2 	bl	800bdc8 <_sbrk_r>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d103      	bne.n	800b3f0 <sbrk_aligned+0x28>
 800b3e8:	2501      	movs	r5, #1
 800b3ea:	426d      	negs	r5, r5
 800b3ec:	0028      	movs	r0, r5
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	1cc5      	adds	r5, r0, #3
 800b3f4:	439d      	bics	r5, r3
 800b3f6:	42a8      	cmp	r0, r5
 800b3f8:	d0f8      	beq.n	800b3ec <sbrk_aligned+0x24>
 800b3fa:	1a29      	subs	r1, r5, r0
 800b3fc:	0020      	movs	r0, r4
 800b3fe:	f000 fce3 	bl	800bdc8 <_sbrk_r>
 800b402:	3001      	adds	r0, #1
 800b404:	d1f2      	bne.n	800b3ec <sbrk_aligned+0x24>
 800b406:	e7ef      	b.n	800b3e8 <sbrk_aligned+0x20>
 800b408:	200006f4 	.word	0x200006f4

0800b40c <_malloc_r>:
 800b40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b40e:	2203      	movs	r2, #3
 800b410:	1ccb      	adds	r3, r1, #3
 800b412:	4393      	bics	r3, r2
 800b414:	3308      	adds	r3, #8
 800b416:	0005      	movs	r5, r0
 800b418:	001f      	movs	r7, r3
 800b41a:	2b0c      	cmp	r3, #12
 800b41c:	d234      	bcs.n	800b488 <_malloc_r+0x7c>
 800b41e:	270c      	movs	r7, #12
 800b420:	42b9      	cmp	r1, r7
 800b422:	d833      	bhi.n	800b48c <_malloc_r+0x80>
 800b424:	0028      	movs	r0, r5
 800b426:	f000 f871 	bl	800b50c <__malloc_lock>
 800b42a:	4e37      	ldr	r6, [pc, #220]	@ (800b508 <_malloc_r+0xfc>)
 800b42c:	6833      	ldr	r3, [r6, #0]
 800b42e:	001c      	movs	r4, r3
 800b430:	2c00      	cmp	r4, #0
 800b432:	d12f      	bne.n	800b494 <_malloc_r+0x88>
 800b434:	0039      	movs	r1, r7
 800b436:	0028      	movs	r0, r5
 800b438:	f7ff ffc6 	bl	800b3c8 <sbrk_aligned>
 800b43c:	0004      	movs	r4, r0
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d15f      	bne.n	800b502 <_malloc_r+0xf6>
 800b442:	6834      	ldr	r4, [r6, #0]
 800b444:	9400      	str	r4, [sp, #0]
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d14a      	bne.n	800b4e2 <_malloc_r+0xd6>
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	d052      	beq.n	800b4f6 <_malloc_r+0xea>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	0028      	movs	r0, r5
 800b454:	18e3      	adds	r3, r4, r3
 800b456:	9900      	ldr	r1, [sp, #0]
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f000 fcb5 	bl	800bdc8 <_sbrk_r>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	4283      	cmp	r3, r0
 800b462:	d148      	bne.n	800b4f6 <_malloc_r+0xea>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	0028      	movs	r0, r5
 800b468:	1aff      	subs	r7, r7, r3
 800b46a:	0039      	movs	r1, r7
 800b46c:	f7ff ffac 	bl	800b3c8 <sbrk_aligned>
 800b470:	3001      	adds	r0, #1
 800b472:	d040      	beq.n	800b4f6 <_malloc_r+0xea>
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	19db      	adds	r3, r3, r7
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	6833      	ldr	r3, [r6, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	2a00      	cmp	r2, #0
 800b480:	d133      	bne.n	800b4ea <_malloc_r+0xde>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	6033      	str	r3, [r6, #0]
 800b486:	e019      	b.n	800b4bc <_malloc_r+0xb0>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dac9      	bge.n	800b420 <_malloc_r+0x14>
 800b48c:	230c      	movs	r3, #12
 800b48e:	602b      	str	r3, [r5, #0]
 800b490:	2000      	movs	r0, #0
 800b492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b494:	6821      	ldr	r1, [r4, #0]
 800b496:	1bc9      	subs	r1, r1, r7
 800b498:	d420      	bmi.n	800b4dc <_malloc_r+0xd0>
 800b49a:	290b      	cmp	r1, #11
 800b49c:	d90a      	bls.n	800b4b4 <_malloc_r+0xa8>
 800b49e:	19e2      	adds	r2, r4, r7
 800b4a0:	6027      	str	r7, [r4, #0]
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	d104      	bne.n	800b4b0 <_malloc_r+0xa4>
 800b4a6:	6032      	str	r2, [r6, #0]
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	6011      	str	r1, [r2, #0]
 800b4ac:	6053      	str	r3, [r2, #4]
 800b4ae:	e005      	b.n	800b4bc <_malloc_r+0xb0>
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	e7f9      	b.n	800b4a8 <_malloc_r+0x9c>
 800b4b4:	6862      	ldr	r2, [r4, #4]
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	d10e      	bne.n	800b4d8 <_malloc_r+0xcc>
 800b4ba:	6032      	str	r2, [r6, #0]
 800b4bc:	0028      	movs	r0, r5
 800b4be:	f000 f82d 	bl	800b51c <__malloc_unlock>
 800b4c2:	0020      	movs	r0, r4
 800b4c4:	2207      	movs	r2, #7
 800b4c6:	300b      	adds	r0, #11
 800b4c8:	1d23      	adds	r3, r4, #4
 800b4ca:	4390      	bics	r0, r2
 800b4cc:	1ac2      	subs	r2, r0, r3
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	d0df      	beq.n	800b492 <_malloc_r+0x86>
 800b4d2:	1a1b      	subs	r3, r3, r0
 800b4d4:	50a3      	str	r3, [r4, r2]
 800b4d6:	e7dc      	b.n	800b492 <_malloc_r+0x86>
 800b4d8:	605a      	str	r2, [r3, #4]
 800b4da:	e7ef      	b.n	800b4bc <_malloc_r+0xb0>
 800b4dc:	0023      	movs	r3, r4
 800b4de:	6864      	ldr	r4, [r4, #4]
 800b4e0:	e7a6      	b.n	800b430 <_malloc_r+0x24>
 800b4e2:	9c00      	ldr	r4, [sp, #0]
 800b4e4:	6863      	ldr	r3, [r4, #4]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	e7ad      	b.n	800b446 <_malloc_r+0x3a>
 800b4ea:	001a      	movs	r2, r3
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	42a3      	cmp	r3, r4
 800b4f0:	d1fb      	bne.n	800b4ea <_malloc_r+0xde>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e7da      	b.n	800b4ac <_malloc_r+0xa0>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	0028      	movs	r0, r5
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f000 f80e 	bl	800b51c <__malloc_unlock>
 800b500:	e7c6      	b.n	800b490 <_malloc_r+0x84>
 800b502:	6007      	str	r7, [r0, #0]
 800b504:	e7da      	b.n	800b4bc <_malloc_r+0xb0>
 800b506:	46c0      	nop			@ (mov r8, r8)
 800b508:	200006f8 	.word	0x200006f8

0800b50c <__malloc_lock>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	4802      	ldr	r0, [pc, #8]	@ (800b518 <__malloc_lock+0xc>)
 800b510:	f7ff f883 	bl	800a61a <__retarget_lock_acquire_recursive>
 800b514:	bd10      	pop	{r4, pc}
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	200006f0 	.word	0x200006f0

0800b51c <__malloc_unlock>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	4802      	ldr	r0, [pc, #8]	@ (800b528 <__malloc_unlock+0xc>)
 800b520:	f7ff f87c 	bl	800a61c <__retarget_lock_release_recursive>
 800b524:	bd10      	pop	{r4, pc}
 800b526:	46c0      	nop			@ (mov r8, r8)
 800b528:	200006f0 	.word	0x200006f0

0800b52c <_Balloc>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	69c5      	ldr	r5, [r0, #28]
 800b530:	0006      	movs	r6, r0
 800b532:	000c      	movs	r4, r1
 800b534:	2d00      	cmp	r5, #0
 800b536:	d10e      	bne.n	800b556 <_Balloc+0x2a>
 800b538:	2010      	movs	r0, #16
 800b53a:	f7ff ff3b 	bl	800b3b4 <malloc>
 800b53e:	1e02      	subs	r2, r0, #0
 800b540:	61f0      	str	r0, [r6, #28]
 800b542:	d104      	bne.n	800b54e <_Balloc+0x22>
 800b544:	216b      	movs	r1, #107	@ 0x6b
 800b546:	4b19      	ldr	r3, [pc, #100]	@ (800b5ac <_Balloc+0x80>)
 800b548:	4819      	ldr	r0, [pc, #100]	@ (800b5b0 <_Balloc+0x84>)
 800b54a:	f000 fc59 	bl	800be00 <__assert_func>
 800b54e:	6045      	str	r5, [r0, #4]
 800b550:	6085      	str	r5, [r0, #8]
 800b552:	6005      	str	r5, [r0, #0]
 800b554:	60c5      	str	r5, [r0, #12]
 800b556:	69f5      	ldr	r5, [r6, #28]
 800b558:	68eb      	ldr	r3, [r5, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d013      	beq.n	800b586 <_Balloc+0x5a>
 800b55e:	69f3      	ldr	r3, [r6, #28]
 800b560:	00a2      	lsls	r2, r4, #2
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	189b      	adds	r3, r3, r2
 800b566:	6818      	ldr	r0, [r3, #0]
 800b568:	2800      	cmp	r0, #0
 800b56a:	d118      	bne.n	800b59e <_Balloc+0x72>
 800b56c:	2101      	movs	r1, #1
 800b56e:	000d      	movs	r5, r1
 800b570:	40a5      	lsls	r5, r4
 800b572:	1d6a      	adds	r2, r5, #5
 800b574:	0030      	movs	r0, r6
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	f000 fc60 	bl	800be3c <_calloc_r>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d00c      	beq.n	800b59a <_Balloc+0x6e>
 800b580:	6044      	str	r4, [r0, #4]
 800b582:	6085      	str	r5, [r0, #8]
 800b584:	e00d      	b.n	800b5a2 <_Balloc+0x76>
 800b586:	2221      	movs	r2, #33	@ 0x21
 800b588:	2104      	movs	r1, #4
 800b58a:	0030      	movs	r0, r6
 800b58c:	f000 fc56 	bl	800be3c <_calloc_r>
 800b590:	69f3      	ldr	r3, [r6, #28]
 800b592:	60e8      	str	r0, [r5, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e1      	bne.n	800b55e <_Balloc+0x32>
 800b59a:	2000      	movs	r0, #0
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	6802      	ldr	r2, [r0, #0]
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	6103      	str	r3, [r0, #16]
 800b5a6:	60c3      	str	r3, [r0, #12]
 800b5a8:	e7f8      	b.n	800b59c <_Balloc+0x70>
 800b5aa:	46c0      	nop			@ (mov r8, r8)
 800b5ac:	0800c641 	.word	0x0800c641
 800b5b0:	0800c6c1 	.word	0x0800c6c1

0800b5b4 <_Bfree>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	69c6      	ldr	r6, [r0, #28]
 800b5b8:	0005      	movs	r5, r0
 800b5ba:	000c      	movs	r4, r1
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	d10e      	bne.n	800b5de <_Bfree+0x2a>
 800b5c0:	2010      	movs	r0, #16
 800b5c2:	f7ff fef7 	bl	800b3b4 <malloc>
 800b5c6:	1e02      	subs	r2, r0, #0
 800b5c8:	61e8      	str	r0, [r5, #28]
 800b5ca:	d104      	bne.n	800b5d6 <_Bfree+0x22>
 800b5cc:	218f      	movs	r1, #143	@ 0x8f
 800b5ce:	4b09      	ldr	r3, [pc, #36]	@ (800b5f4 <_Bfree+0x40>)
 800b5d0:	4809      	ldr	r0, [pc, #36]	@ (800b5f8 <_Bfree+0x44>)
 800b5d2:	f000 fc15 	bl	800be00 <__assert_func>
 800b5d6:	6046      	str	r6, [r0, #4]
 800b5d8:	6086      	str	r6, [r0, #8]
 800b5da:	6006      	str	r6, [r0, #0]
 800b5dc:	60c6      	str	r6, [r0, #12]
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	d007      	beq.n	800b5f2 <_Bfree+0x3e>
 800b5e2:	69eb      	ldr	r3, [r5, #28]
 800b5e4:	6862      	ldr	r2, [r4, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	0092      	lsls	r2, r2, #2
 800b5ea:	189b      	adds	r3, r3, r2
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	6022      	str	r2, [r4, #0]
 800b5f0:	601c      	str	r4, [r3, #0]
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}
 800b5f4:	0800c641 	.word	0x0800c641
 800b5f8:	0800c6c1 	.word	0x0800c6c1

0800b5fc <__multadd>:
 800b5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5fe:	000f      	movs	r7, r1
 800b600:	9001      	str	r0, [sp, #4]
 800b602:	000c      	movs	r4, r1
 800b604:	001e      	movs	r6, r3
 800b606:	2000      	movs	r0, #0
 800b608:	690d      	ldr	r5, [r1, #16]
 800b60a:	3714      	adds	r7, #20
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	3001      	adds	r0, #1
 800b610:	b299      	uxth	r1, r3
 800b612:	4351      	muls	r1, r2
 800b614:	0c1b      	lsrs	r3, r3, #16
 800b616:	4353      	muls	r3, r2
 800b618:	1989      	adds	r1, r1, r6
 800b61a:	0c0e      	lsrs	r6, r1, #16
 800b61c:	199b      	adds	r3, r3, r6
 800b61e:	0c1e      	lsrs	r6, r3, #16
 800b620:	b289      	uxth	r1, r1
 800b622:	041b      	lsls	r3, r3, #16
 800b624:	185b      	adds	r3, r3, r1
 800b626:	c708      	stmia	r7!, {r3}
 800b628:	4285      	cmp	r5, r0
 800b62a:	dcef      	bgt.n	800b60c <__multadd+0x10>
 800b62c:	2e00      	cmp	r6, #0
 800b62e:	d022      	beq.n	800b676 <__multadd+0x7a>
 800b630:	68a3      	ldr	r3, [r4, #8]
 800b632:	42ab      	cmp	r3, r5
 800b634:	dc19      	bgt.n	800b66a <__multadd+0x6e>
 800b636:	6861      	ldr	r1, [r4, #4]
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	3101      	adds	r1, #1
 800b63c:	f7ff ff76 	bl	800b52c <_Balloc>
 800b640:	1e07      	subs	r7, r0, #0
 800b642:	d105      	bne.n	800b650 <__multadd+0x54>
 800b644:	003a      	movs	r2, r7
 800b646:	21ba      	movs	r1, #186	@ 0xba
 800b648:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <__multadd+0x80>)
 800b64a:	480d      	ldr	r0, [pc, #52]	@ (800b680 <__multadd+0x84>)
 800b64c:	f000 fbd8 	bl	800be00 <__assert_func>
 800b650:	0021      	movs	r1, r4
 800b652:	6922      	ldr	r2, [r4, #16]
 800b654:	310c      	adds	r1, #12
 800b656:	3202      	adds	r2, #2
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	300c      	adds	r0, #12
 800b65c:	f000 fbc6 	bl	800bdec <memcpy>
 800b660:	0021      	movs	r1, r4
 800b662:	9801      	ldr	r0, [sp, #4]
 800b664:	f7ff ffa6 	bl	800b5b4 <_Bfree>
 800b668:	003c      	movs	r4, r7
 800b66a:	1d2b      	adds	r3, r5, #4
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	18e3      	adds	r3, r4, r3
 800b670:	3501      	adds	r5, #1
 800b672:	605e      	str	r6, [r3, #4]
 800b674:	6125      	str	r5, [r4, #16]
 800b676:	0020      	movs	r0, r4
 800b678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b67a:	46c0      	nop			@ (mov r8, r8)
 800b67c:	0800c6b0 	.word	0x0800c6b0
 800b680:	0800c6c1 	.word	0x0800c6c1

0800b684 <__hi0bits>:
 800b684:	2280      	movs	r2, #128	@ 0x80
 800b686:	0003      	movs	r3, r0
 800b688:	0252      	lsls	r2, r2, #9
 800b68a:	2000      	movs	r0, #0
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d201      	bcs.n	800b694 <__hi0bits+0x10>
 800b690:	041b      	lsls	r3, r3, #16
 800b692:	3010      	adds	r0, #16
 800b694:	2280      	movs	r2, #128	@ 0x80
 800b696:	0452      	lsls	r2, r2, #17
 800b698:	4293      	cmp	r3, r2
 800b69a:	d201      	bcs.n	800b6a0 <__hi0bits+0x1c>
 800b69c:	3008      	adds	r0, #8
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	2280      	movs	r2, #128	@ 0x80
 800b6a2:	0552      	lsls	r2, r2, #21
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d201      	bcs.n	800b6ac <__hi0bits+0x28>
 800b6a8:	3004      	adds	r0, #4
 800b6aa:	011b      	lsls	r3, r3, #4
 800b6ac:	2280      	movs	r2, #128	@ 0x80
 800b6ae:	05d2      	lsls	r2, r2, #23
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d201      	bcs.n	800b6b8 <__hi0bits+0x34>
 800b6b4:	3002      	adds	r0, #2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	db03      	blt.n	800b6c4 <__hi0bits+0x40>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	4213      	tst	r3, r2
 800b6c0:	d100      	bne.n	800b6c4 <__hi0bits+0x40>
 800b6c2:	2020      	movs	r0, #32
 800b6c4:	4770      	bx	lr

0800b6c6 <__lo0bits>:
 800b6c6:	6803      	ldr	r3, [r0, #0]
 800b6c8:	0001      	movs	r1, r0
 800b6ca:	2207      	movs	r2, #7
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	4010      	ands	r0, r2
 800b6d0:	4213      	tst	r3, r2
 800b6d2:	d00d      	beq.n	800b6f0 <__lo0bits+0x2a>
 800b6d4:	3a06      	subs	r2, #6
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	4213      	tst	r3, r2
 800b6da:	d105      	bne.n	800b6e8 <__lo0bits+0x22>
 800b6dc:	3002      	adds	r0, #2
 800b6de:	4203      	tst	r3, r0
 800b6e0:	d003      	beq.n	800b6ea <__lo0bits+0x24>
 800b6e2:	40d3      	lsrs	r3, r2
 800b6e4:	0010      	movs	r0, r2
 800b6e6:	600b      	str	r3, [r1, #0]
 800b6e8:	4770      	bx	lr
 800b6ea:	089b      	lsrs	r3, r3, #2
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	e7fb      	b.n	800b6e8 <__lo0bits+0x22>
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d101      	bne.n	800b6fa <__lo0bits+0x34>
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	0c1b      	lsrs	r3, r3, #16
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d101      	bne.n	800b704 <__lo0bits+0x3e>
 800b700:	3008      	adds	r0, #8
 800b702:	0a1b      	lsrs	r3, r3, #8
 800b704:	071a      	lsls	r2, r3, #28
 800b706:	d101      	bne.n	800b70c <__lo0bits+0x46>
 800b708:	3004      	adds	r0, #4
 800b70a:	091b      	lsrs	r3, r3, #4
 800b70c:	079a      	lsls	r2, r3, #30
 800b70e:	d101      	bne.n	800b714 <__lo0bits+0x4e>
 800b710:	3002      	adds	r0, #2
 800b712:	089b      	lsrs	r3, r3, #2
 800b714:	07da      	lsls	r2, r3, #31
 800b716:	d4e9      	bmi.n	800b6ec <__lo0bits+0x26>
 800b718:	3001      	adds	r0, #1
 800b71a:	085b      	lsrs	r3, r3, #1
 800b71c:	d1e6      	bne.n	800b6ec <__lo0bits+0x26>
 800b71e:	2020      	movs	r0, #32
 800b720:	e7e2      	b.n	800b6e8 <__lo0bits+0x22>
	...

0800b724 <__i2b>:
 800b724:	b510      	push	{r4, lr}
 800b726:	000c      	movs	r4, r1
 800b728:	2101      	movs	r1, #1
 800b72a:	f7ff feff 	bl	800b52c <_Balloc>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d107      	bne.n	800b742 <__i2b+0x1e>
 800b732:	2146      	movs	r1, #70	@ 0x46
 800b734:	4c05      	ldr	r4, [pc, #20]	@ (800b74c <__i2b+0x28>)
 800b736:	0002      	movs	r2, r0
 800b738:	4b05      	ldr	r3, [pc, #20]	@ (800b750 <__i2b+0x2c>)
 800b73a:	0020      	movs	r0, r4
 800b73c:	31ff      	adds	r1, #255	@ 0xff
 800b73e:	f000 fb5f 	bl	800be00 <__assert_func>
 800b742:	2301      	movs	r3, #1
 800b744:	6144      	str	r4, [r0, #20]
 800b746:	6103      	str	r3, [r0, #16]
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	46c0      	nop			@ (mov r8, r8)
 800b74c:	0800c6c1 	.word	0x0800c6c1
 800b750:	0800c6b0 	.word	0x0800c6b0

0800b754 <__multiply>:
 800b754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b756:	0014      	movs	r4, r2
 800b758:	690a      	ldr	r2, [r1, #16]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	000d      	movs	r5, r1
 800b75e:	b089      	sub	sp, #36	@ 0x24
 800b760:	429a      	cmp	r2, r3
 800b762:	db02      	blt.n	800b76a <__multiply+0x16>
 800b764:	0023      	movs	r3, r4
 800b766:	000c      	movs	r4, r1
 800b768:	001d      	movs	r5, r3
 800b76a:	6927      	ldr	r7, [r4, #16]
 800b76c:	692e      	ldr	r6, [r5, #16]
 800b76e:	6861      	ldr	r1, [r4, #4]
 800b770:	19bb      	adds	r3, r7, r6
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	68a3      	ldr	r3, [r4, #8]
 800b776:	19ba      	adds	r2, r7, r6
 800b778:	4293      	cmp	r3, r2
 800b77a:	da00      	bge.n	800b77e <__multiply+0x2a>
 800b77c:	3101      	adds	r1, #1
 800b77e:	f7ff fed5 	bl	800b52c <_Balloc>
 800b782:	4684      	mov	ip, r0
 800b784:	2800      	cmp	r0, #0
 800b786:	d106      	bne.n	800b796 <__multiply+0x42>
 800b788:	21b1      	movs	r1, #177	@ 0xb1
 800b78a:	4662      	mov	r2, ip
 800b78c:	4b44      	ldr	r3, [pc, #272]	@ (800b8a0 <__multiply+0x14c>)
 800b78e:	4845      	ldr	r0, [pc, #276]	@ (800b8a4 <__multiply+0x150>)
 800b790:	0049      	lsls	r1, r1, #1
 800b792:	f000 fb35 	bl	800be00 <__assert_func>
 800b796:	0002      	movs	r2, r0
 800b798:	19bb      	adds	r3, r7, r6
 800b79a:	3214      	adds	r2, #20
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	18d3      	adds	r3, r2, r3
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	0013      	movs	r3, r2
 800b7a6:	9801      	ldr	r0, [sp, #4]
 800b7a8:	4283      	cmp	r3, r0
 800b7aa:	d328      	bcc.n	800b7fe <__multiply+0xaa>
 800b7ac:	0023      	movs	r3, r4
 800b7ae:	00bf      	lsls	r7, r7, #2
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	3514      	adds	r5, #20
 800b7b6:	19db      	adds	r3, r3, r7
 800b7b8:	00b6      	lsls	r6, r6, #2
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	19ab      	adds	r3, r5, r6
 800b7be:	9307      	str	r3, [sp, #28]
 800b7c0:	2304      	movs	r3, #4
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	0023      	movs	r3, r4
 800b7c6:	9902      	ldr	r1, [sp, #8]
 800b7c8:	3315      	adds	r3, #21
 800b7ca:	4299      	cmp	r1, r3
 800b7cc:	d305      	bcc.n	800b7da <__multiply+0x86>
 800b7ce:	1b0c      	subs	r4, r1, r4
 800b7d0:	3c15      	subs	r4, #21
 800b7d2:	08a4      	lsrs	r4, r4, #2
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	00a3      	lsls	r3, r4, #2
 800b7d8:	9305      	str	r3, [sp, #20]
 800b7da:	9b07      	ldr	r3, [sp, #28]
 800b7dc:	429d      	cmp	r5, r3
 800b7de:	d310      	bcc.n	800b802 <__multiply+0xae>
 800b7e0:	9b00      	ldr	r3, [sp, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	dd05      	ble.n	800b7f2 <__multiply+0x9e>
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	3b04      	subs	r3, #4
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d052      	beq.n	800b898 <__multiply+0x144>
 800b7f2:	4663      	mov	r3, ip
 800b7f4:	4660      	mov	r0, ip
 800b7f6:	9a00      	ldr	r2, [sp, #0]
 800b7f8:	611a      	str	r2, [r3, #16]
 800b7fa:	b009      	add	sp, #36	@ 0x24
 800b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7fe:	c302      	stmia	r3!, {r1}
 800b800:	e7d1      	b.n	800b7a6 <__multiply+0x52>
 800b802:	682c      	ldr	r4, [r5, #0]
 800b804:	b2a4      	uxth	r4, r4
 800b806:	2c00      	cmp	r4, #0
 800b808:	d01f      	beq.n	800b84a <__multiply+0xf6>
 800b80a:	2300      	movs	r3, #0
 800b80c:	0017      	movs	r7, r2
 800b80e:	9e04      	ldr	r6, [sp, #16]
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	ce08      	ldmia	r6!, {r3}
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	9306      	str	r3, [sp, #24]
 800b818:	466b      	mov	r3, sp
 800b81a:	8b1b      	ldrh	r3, [r3, #24]
 800b81c:	b288      	uxth	r0, r1
 800b81e:	4363      	muls	r3, r4
 800b820:	181b      	adds	r3, r3, r0
 800b822:	9803      	ldr	r0, [sp, #12]
 800b824:	0c09      	lsrs	r1, r1, #16
 800b826:	181b      	adds	r3, r3, r0
 800b828:	9806      	ldr	r0, [sp, #24]
 800b82a:	0c00      	lsrs	r0, r0, #16
 800b82c:	4360      	muls	r0, r4
 800b82e:	1840      	adds	r0, r0, r1
 800b830:	0c19      	lsrs	r1, r3, #16
 800b832:	1841      	adds	r1, r0, r1
 800b834:	0c08      	lsrs	r0, r1, #16
 800b836:	b29b      	uxth	r3, r3
 800b838:	0409      	lsls	r1, r1, #16
 800b83a:	4319      	orrs	r1, r3
 800b83c:	9b02      	ldr	r3, [sp, #8]
 800b83e:	9003      	str	r0, [sp, #12]
 800b840:	c702      	stmia	r7!, {r1}
 800b842:	42b3      	cmp	r3, r6
 800b844:	d8e5      	bhi.n	800b812 <__multiply+0xbe>
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	50d0      	str	r0, [r2, r3]
 800b84a:	682c      	ldr	r4, [r5, #0]
 800b84c:	0c24      	lsrs	r4, r4, #16
 800b84e:	d020      	beq.n	800b892 <__multiply+0x13e>
 800b850:	2100      	movs	r1, #0
 800b852:	0010      	movs	r0, r2
 800b854:	6813      	ldr	r3, [r2, #0]
 800b856:	9e04      	ldr	r6, [sp, #16]
 800b858:	9103      	str	r1, [sp, #12]
 800b85a:	6831      	ldr	r1, [r6, #0]
 800b85c:	6807      	ldr	r7, [r0, #0]
 800b85e:	b289      	uxth	r1, r1
 800b860:	4361      	muls	r1, r4
 800b862:	0c3f      	lsrs	r7, r7, #16
 800b864:	19c9      	adds	r1, r1, r7
 800b866:	9f03      	ldr	r7, [sp, #12]
 800b868:	b29b      	uxth	r3, r3
 800b86a:	19c9      	adds	r1, r1, r7
 800b86c:	040f      	lsls	r7, r1, #16
 800b86e:	431f      	orrs	r7, r3
 800b870:	6007      	str	r7, [r0, #0]
 800b872:	ce80      	ldmia	r6!, {r7}
 800b874:	6843      	ldr	r3, [r0, #4]
 800b876:	0c3f      	lsrs	r7, r7, #16
 800b878:	4367      	muls	r7, r4
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	0c09      	lsrs	r1, r1, #16
 800b87e:	18fb      	adds	r3, r7, r3
 800b880:	185b      	adds	r3, r3, r1
 800b882:	0c19      	lsrs	r1, r3, #16
 800b884:	9103      	str	r1, [sp, #12]
 800b886:	9902      	ldr	r1, [sp, #8]
 800b888:	3004      	adds	r0, #4
 800b88a:	42b1      	cmp	r1, r6
 800b88c:	d8e5      	bhi.n	800b85a <__multiply+0x106>
 800b88e:	9905      	ldr	r1, [sp, #20]
 800b890:	5053      	str	r3, [r2, r1]
 800b892:	3504      	adds	r5, #4
 800b894:	3204      	adds	r2, #4
 800b896:	e7a0      	b.n	800b7da <__multiply+0x86>
 800b898:	9b00      	ldr	r3, [sp, #0]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	e79f      	b.n	800b7e0 <__multiply+0x8c>
 800b8a0:	0800c6b0 	.word	0x0800c6b0
 800b8a4:	0800c6c1 	.word	0x0800c6c1

0800b8a8 <__pow5mult>:
 800b8a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	0015      	movs	r5, r2
 800b8ae:	0007      	movs	r7, r0
 800b8b0:	000e      	movs	r6, r1
 800b8b2:	401a      	ands	r2, r3
 800b8b4:	421d      	tst	r5, r3
 800b8b6:	d008      	beq.n	800b8ca <__pow5mult+0x22>
 800b8b8:	4925      	ldr	r1, [pc, #148]	@ (800b950 <__pow5mult+0xa8>)
 800b8ba:	3a01      	subs	r2, #1
 800b8bc:	0092      	lsls	r2, r2, #2
 800b8be:	5852      	ldr	r2, [r2, r1]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	0031      	movs	r1, r6
 800b8c4:	f7ff fe9a 	bl	800b5fc <__multadd>
 800b8c8:	0006      	movs	r6, r0
 800b8ca:	10ad      	asrs	r5, r5, #2
 800b8cc:	d03d      	beq.n	800b94a <__pow5mult+0xa2>
 800b8ce:	69fc      	ldr	r4, [r7, #28]
 800b8d0:	2c00      	cmp	r4, #0
 800b8d2:	d10f      	bne.n	800b8f4 <__pow5mult+0x4c>
 800b8d4:	2010      	movs	r0, #16
 800b8d6:	f7ff fd6d 	bl	800b3b4 <malloc>
 800b8da:	1e02      	subs	r2, r0, #0
 800b8dc:	61f8      	str	r0, [r7, #28]
 800b8de:	d105      	bne.n	800b8ec <__pow5mult+0x44>
 800b8e0:	21b4      	movs	r1, #180	@ 0xb4
 800b8e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b954 <__pow5mult+0xac>)
 800b8e4:	481c      	ldr	r0, [pc, #112]	@ (800b958 <__pow5mult+0xb0>)
 800b8e6:	31ff      	adds	r1, #255	@ 0xff
 800b8e8:	f000 fa8a 	bl	800be00 <__assert_func>
 800b8ec:	6044      	str	r4, [r0, #4]
 800b8ee:	6084      	str	r4, [r0, #8]
 800b8f0:	6004      	str	r4, [r0, #0]
 800b8f2:	60c4      	str	r4, [r0, #12]
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	689c      	ldr	r4, [r3, #8]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	d108      	bne.n	800b910 <__pow5mult+0x68>
 800b8fe:	0038      	movs	r0, r7
 800b900:	4916      	ldr	r1, [pc, #88]	@ (800b95c <__pow5mult+0xb4>)
 800b902:	f7ff ff0f 	bl	800b724 <__i2b>
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	0004      	movs	r4, r0
 800b90a:	6098      	str	r0, [r3, #8]
 800b90c:	2300      	movs	r3, #0
 800b90e:	6003      	str	r3, [r0, #0]
 800b910:	2301      	movs	r3, #1
 800b912:	421d      	tst	r5, r3
 800b914:	d00a      	beq.n	800b92c <__pow5mult+0x84>
 800b916:	0031      	movs	r1, r6
 800b918:	0022      	movs	r2, r4
 800b91a:	0038      	movs	r0, r7
 800b91c:	f7ff ff1a 	bl	800b754 <__multiply>
 800b920:	0031      	movs	r1, r6
 800b922:	9001      	str	r0, [sp, #4]
 800b924:	0038      	movs	r0, r7
 800b926:	f7ff fe45 	bl	800b5b4 <_Bfree>
 800b92a:	9e01      	ldr	r6, [sp, #4]
 800b92c:	106d      	asrs	r5, r5, #1
 800b92e:	d00c      	beq.n	800b94a <__pow5mult+0xa2>
 800b930:	6820      	ldr	r0, [r4, #0]
 800b932:	2800      	cmp	r0, #0
 800b934:	d107      	bne.n	800b946 <__pow5mult+0x9e>
 800b936:	0022      	movs	r2, r4
 800b938:	0021      	movs	r1, r4
 800b93a:	0038      	movs	r0, r7
 800b93c:	f7ff ff0a 	bl	800b754 <__multiply>
 800b940:	2300      	movs	r3, #0
 800b942:	6020      	str	r0, [r4, #0]
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	0004      	movs	r4, r0
 800b948:	e7e2      	b.n	800b910 <__pow5mult+0x68>
 800b94a:	0030      	movs	r0, r6
 800b94c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b94e:	46c0      	nop			@ (mov r8, r8)
 800b950:	0800c774 	.word	0x0800c774
 800b954:	0800c641 	.word	0x0800c641
 800b958:	0800c6c1 	.word	0x0800c6c1
 800b95c:	00000271 	.word	0x00000271

0800b960 <__lshift>:
 800b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b962:	000c      	movs	r4, r1
 800b964:	0016      	movs	r6, r2
 800b966:	6923      	ldr	r3, [r4, #16]
 800b968:	1157      	asrs	r7, r2, #5
 800b96a:	b085      	sub	sp, #20
 800b96c:	18fb      	adds	r3, r7, r3
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	3301      	adds	r3, #1
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	6849      	ldr	r1, [r1, #4]
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	9002      	str	r0, [sp, #8]
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	4293      	cmp	r3, r2
 800b97e:	db10      	blt.n	800b9a2 <__lshift+0x42>
 800b980:	9802      	ldr	r0, [sp, #8]
 800b982:	f7ff fdd3 	bl	800b52c <_Balloc>
 800b986:	2300      	movs	r3, #0
 800b988:	0001      	movs	r1, r0
 800b98a:	0005      	movs	r5, r0
 800b98c:	001a      	movs	r2, r3
 800b98e:	3114      	adds	r1, #20
 800b990:	4298      	cmp	r0, r3
 800b992:	d10c      	bne.n	800b9ae <__lshift+0x4e>
 800b994:	21ef      	movs	r1, #239	@ 0xef
 800b996:	002a      	movs	r2, r5
 800b998:	4b25      	ldr	r3, [pc, #148]	@ (800ba30 <__lshift+0xd0>)
 800b99a:	4826      	ldr	r0, [pc, #152]	@ (800ba34 <__lshift+0xd4>)
 800b99c:	0049      	lsls	r1, r1, #1
 800b99e:	f000 fa2f 	bl	800be00 <__assert_func>
 800b9a2:	3101      	adds	r1, #1
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	e7e8      	b.n	800b97a <__lshift+0x1a>
 800b9a8:	0098      	lsls	r0, r3, #2
 800b9aa:	500a      	str	r2, [r1, r0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	42bb      	cmp	r3, r7
 800b9b0:	dbfa      	blt.n	800b9a8 <__lshift+0x48>
 800b9b2:	43fb      	mvns	r3, r7
 800b9b4:	17db      	asrs	r3, r3, #31
 800b9b6:	401f      	ands	r7, r3
 800b9b8:	00bf      	lsls	r7, r7, #2
 800b9ba:	0023      	movs	r3, r4
 800b9bc:	201f      	movs	r0, #31
 800b9be:	19c9      	adds	r1, r1, r7
 800b9c0:	0037      	movs	r7, r6
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	3314      	adds	r3, #20
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	189a      	adds	r2, r3, r2
 800b9ca:	4007      	ands	r7, r0
 800b9cc:	4206      	tst	r6, r0
 800b9ce:	d029      	beq.n	800ba24 <__lshift+0xc4>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	1bc0      	subs	r0, r0, r7
 800b9d4:	9003      	str	r0, [sp, #12]
 800b9d6:	468c      	mov	ip, r1
 800b9d8:	2000      	movs	r0, #0
 800b9da:	681e      	ldr	r6, [r3, #0]
 800b9dc:	40be      	lsls	r6, r7
 800b9de:	4306      	orrs	r6, r0
 800b9e0:	4660      	mov	r0, ip
 800b9e2:	c040      	stmia	r0!, {r6}
 800b9e4:	4684      	mov	ip, r0
 800b9e6:	9e03      	ldr	r6, [sp, #12]
 800b9e8:	cb01      	ldmia	r3!, {r0}
 800b9ea:	40f0      	lsrs	r0, r6
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d8f4      	bhi.n	800b9da <__lshift+0x7a>
 800b9f0:	0026      	movs	r6, r4
 800b9f2:	3615      	adds	r6, #21
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	42b2      	cmp	r2, r6
 800b9f8:	d304      	bcc.n	800ba04 <__lshift+0xa4>
 800b9fa:	1b13      	subs	r3, r2, r4
 800b9fc:	3b15      	subs	r3, #21
 800b9fe:	089b      	lsrs	r3, r3, #2
 800ba00:	3301      	adds	r3, #1
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	50c8      	str	r0, [r1, r3]
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d002      	beq.n	800ba10 <__lshift+0xb0>
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	3302      	adds	r3, #2
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	9802      	ldr	r0, [sp, #8]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	0021      	movs	r1, r4
 800ba18:	612b      	str	r3, [r5, #16]
 800ba1a:	f7ff fdcb 	bl	800b5b4 <_Bfree>
 800ba1e:	0028      	movs	r0, r5
 800ba20:	b005      	add	sp, #20
 800ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba24:	cb01      	ldmia	r3!, {r0}
 800ba26:	c101      	stmia	r1!, {r0}
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d8fb      	bhi.n	800ba24 <__lshift+0xc4>
 800ba2c:	e7f0      	b.n	800ba10 <__lshift+0xb0>
 800ba2e:	46c0      	nop			@ (mov r8, r8)
 800ba30:	0800c6b0 	.word	0x0800c6b0
 800ba34:	0800c6c1 	.word	0x0800c6c1

0800ba38 <__mcmp>:
 800ba38:	b530      	push	{r4, r5, lr}
 800ba3a:	690b      	ldr	r3, [r1, #16]
 800ba3c:	6904      	ldr	r4, [r0, #16]
 800ba3e:	0002      	movs	r2, r0
 800ba40:	1ae0      	subs	r0, r4, r3
 800ba42:	429c      	cmp	r4, r3
 800ba44:	d10f      	bne.n	800ba66 <__mcmp+0x2e>
 800ba46:	3214      	adds	r2, #20
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	3114      	adds	r1, #20
 800ba4c:	0014      	movs	r4, r2
 800ba4e:	18c9      	adds	r1, r1, r3
 800ba50:	18d2      	adds	r2, r2, r3
 800ba52:	3a04      	subs	r2, #4
 800ba54:	3904      	subs	r1, #4
 800ba56:	6815      	ldr	r5, [r2, #0]
 800ba58:	680b      	ldr	r3, [r1, #0]
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	d004      	beq.n	800ba68 <__mcmp+0x30>
 800ba5e:	2001      	movs	r0, #1
 800ba60:	429d      	cmp	r5, r3
 800ba62:	d200      	bcs.n	800ba66 <__mcmp+0x2e>
 800ba64:	3802      	subs	r0, #2
 800ba66:	bd30      	pop	{r4, r5, pc}
 800ba68:	4294      	cmp	r4, r2
 800ba6a:	d3f2      	bcc.n	800ba52 <__mcmp+0x1a>
 800ba6c:	e7fb      	b.n	800ba66 <__mcmp+0x2e>
	...

0800ba70 <__mdiff>:
 800ba70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba72:	000c      	movs	r4, r1
 800ba74:	b087      	sub	sp, #28
 800ba76:	9000      	str	r0, [sp, #0]
 800ba78:	0011      	movs	r1, r2
 800ba7a:	0020      	movs	r0, r4
 800ba7c:	0017      	movs	r7, r2
 800ba7e:	f7ff ffdb 	bl	800ba38 <__mcmp>
 800ba82:	1e05      	subs	r5, r0, #0
 800ba84:	d110      	bne.n	800baa8 <__mdiff+0x38>
 800ba86:	0001      	movs	r1, r0
 800ba88:	9800      	ldr	r0, [sp, #0]
 800ba8a:	f7ff fd4f 	bl	800b52c <_Balloc>
 800ba8e:	1e02      	subs	r2, r0, #0
 800ba90:	d104      	bne.n	800ba9c <__mdiff+0x2c>
 800ba92:	4b40      	ldr	r3, [pc, #256]	@ (800bb94 <__mdiff+0x124>)
 800ba94:	4840      	ldr	r0, [pc, #256]	@ (800bb98 <__mdiff+0x128>)
 800ba96:	4941      	ldr	r1, [pc, #260]	@ (800bb9c <__mdiff+0x12c>)
 800ba98:	f000 f9b2 	bl	800be00 <__assert_func>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	6145      	str	r5, [r0, #20]
 800baa0:	6103      	str	r3, [r0, #16]
 800baa2:	0010      	movs	r0, r2
 800baa4:	b007      	add	sp, #28
 800baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa8:	2600      	movs	r6, #0
 800baaa:	42b0      	cmp	r0, r6
 800baac:	da03      	bge.n	800bab6 <__mdiff+0x46>
 800baae:	0023      	movs	r3, r4
 800bab0:	003c      	movs	r4, r7
 800bab2:	001f      	movs	r7, r3
 800bab4:	3601      	adds	r6, #1
 800bab6:	6861      	ldr	r1, [r4, #4]
 800bab8:	9800      	ldr	r0, [sp, #0]
 800baba:	f7ff fd37 	bl	800b52c <_Balloc>
 800babe:	1e02      	subs	r2, r0, #0
 800bac0:	d103      	bne.n	800baca <__mdiff+0x5a>
 800bac2:	4b34      	ldr	r3, [pc, #208]	@ (800bb94 <__mdiff+0x124>)
 800bac4:	4834      	ldr	r0, [pc, #208]	@ (800bb98 <__mdiff+0x128>)
 800bac6:	4936      	ldr	r1, [pc, #216]	@ (800bba0 <__mdiff+0x130>)
 800bac8:	e7e6      	b.n	800ba98 <__mdiff+0x28>
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	3414      	adds	r4, #20
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	18e3      	adds	r3, r4, r3
 800bad4:	0021      	movs	r1, r4
 800bad6:	9401      	str	r4, [sp, #4]
 800bad8:	003c      	movs	r4, r7
 800bada:	9302      	str	r3, [sp, #8]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3414      	adds	r4, #20
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	18e3      	adds	r3, r4, r3
 800bae4:	9303      	str	r3, [sp, #12]
 800bae6:	0003      	movs	r3, r0
 800bae8:	60c6      	str	r6, [r0, #12]
 800baea:	468c      	mov	ip, r1
 800baec:	2000      	movs	r0, #0
 800baee:	3314      	adds	r3, #20
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	9305      	str	r3, [sp, #20]
 800baf4:	4663      	mov	r3, ip
 800baf6:	cb20      	ldmia	r3!, {r5}
 800baf8:	b2a9      	uxth	r1, r5
 800bafa:	000e      	movs	r6, r1
 800bafc:	469c      	mov	ip, r3
 800bafe:	cc08      	ldmia	r4!, {r3}
 800bb00:	0c2d      	lsrs	r5, r5, #16
 800bb02:	b299      	uxth	r1, r3
 800bb04:	1a71      	subs	r1, r6, r1
 800bb06:	1809      	adds	r1, r1, r0
 800bb08:	0c1b      	lsrs	r3, r3, #16
 800bb0a:	1408      	asrs	r0, r1, #16
 800bb0c:	1aeb      	subs	r3, r5, r3
 800bb0e:	181b      	adds	r3, r3, r0
 800bb10:	1418      	asrs	r0, r3, #16
 800bb12:	b289      	uxth	r1, r1
 800bb14:	041b      	lsls	r3, r3, #16
 800bb16:	4319      	orrs	r1, r3
 800bb18:	9b05      	ldr	r3, [sp, #20]
 800bb1a:	c302      	stmia	r3!, {r1}
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d8e7      	bhi.n	800baf4 <__mdiff+0x84>
 800bb24:	0039      	movs	r1, r7
 800bb26:	9c03      	ldr	r4, [sp, #12]
 800bb28:	3115      	adds	r1, #21
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	428c      	cmp	r4, r1
 800bb2e:	d304      	bcc.n	800bb3a <__mdiff+0xca>
 800bb30:	1be3      	subs	r3, r4, r7
 800bb32:	3b15      	subs	r3, #21
 800bb34:	089b      	lsrs	r3, r3, #2
 800bb36:	3301      	adds	r3, #1
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	9901      	ldr	r1, [sp, #4]
 800bb3c:	18cd      	adds	r5, r1, r3
 800bb3e:	9904      	ldr	r1, [sp, #16]
 800bb40:	002e      	movs	r6, r5
 800bb42:	18cb      	adds	r3, r1, r3
 800bb44:	001f      	movs	r7, r3
 800bb46:	9902      	ldr	r1, [sp, #8]
 800bb48:	428e      	cmp	r6, r1
 800bb4a:	d311      	bcc.n	800bb70 <__mdiff+0x100>
 800bb4c:	9c02      	ldr	r4, [sp, #8]
 800bb4e:	1ee9      	subs	r1, r5, #3
 800bb50:	2000      	movs	r0, #0
 800bb52:	428c      	cmp	r4, r1
 800bb54:	d304      	bcc.n	800bb60 <__mdiff+0xf0>
 800bb56:	0021      	movs	r1, r4
 800bb58:	3103      	adds	r1, #3
 800bb5a:	1b49      	subs	r1, r1, r5
 800bb5c:	0889      	lsrs	r1, r1, #2
 800bb5e:	0088      	lsls	r0, r1, #2
 800bb60:	181b      	adds	r3, r3, r0
 800bb62:	3b04      	subs	r3, #4
 800bb64:	6819      	ldr	r1, [r3, #0]
 800bb66:	2900      	cmp	r1, #0
 800bb68:	d010      	beq.n	800bb8c <__mdiff+0x11c>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	6113      	str	r3, [r2, #16]
 800bb6e:	e798      	b.n	800baa2 <__mdiff+0x32>
 800bb70:	4684      	mov	ip, r0
 800bb72:	ce02      	ldmia	r6!, {r1}
 800bb74:	b288      	uxth	r0, r1
 800bb76:	4460      	add	r0, ip
 800bb78:	1400      	asrs	r0, r0, #16
 800bb7a:	0c0c      	lsrs	r4, r1, #16
 800bb7c:	1904      	adds	r4, r0, r4
 800bb7e:	4461      	add	r1, ip
 800bb80:	1420      	asrs	r0, r4, #16
 800bb82:	b289      	uxth	r1, r1
 800bb84:	0424      	lsls	r4, r4, #16
 800bb86:	4321      	orrs	r1, r4
 800bb88:	c702      	stmia	r7!, {r1}
 800bb8a:	e7dc      	b.n	800bb46 <__mdiff+0xd6>
 800bb8c:	9900      	ldr	r1, [sp, #0]
 800bb8e:	3901      	subs	r1, #1
 800bb90:	9100      	str	r1, [sp, #0]
 800bb92:	e7e6      	b.n	800bb62 <__mdiff+0xf2>
 800bb94:	0800c6b0 	.word	0x0800c6b0
 800bb98:	0800c6c1 	.word	0x0800c6c1
 800bb9c:	00000237 	.word	0x00000237
 800bba0:	00000245 	.word	0x00000245

0800bba4 <__d2b>:
 800bba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bba6:	2101      	movs	r1, #1
 800bba8:	0016      	movs	r6, r2
 800bbaa:	001f      	movs	r7, r3
 800bbac:	f7ff fcbe 	bl	800b52c <_Balloc>
 800bbb0:	1e04      	subs	r4, r0, #0
 800bbb2:	d105      	bne.n	800bbc0 <__d2b+0x1c>
 800bbb4:	0022      	movs	r2, r4
 800bbb6:	4b25      	ldr	r3, [pc, #148]	@ (800bc4c <__d2b+0xa8>)
 800bbb8:	4825      	ldr	r0, [pc, #148]	@ (800bc50 <__d2b+0xac>)
 800bbba:	4926      	ldr	r1, [pc, #152]	@ (800bc54 <__d2b+0xb0>)
 800bbbc:	f000 f920 	bl	800be00 <__assert_func>
 800bbc0:	033b      	lsls	r3, r7, #12
 800bbc2:	007d      	lsls	r5, r7, #1
 800bbc4:	0b1b      	lsrs	r3, r3, #12
 800bbc6:	0d6d      	lsrs	r5, r5, #21
 800bbc8:	d002      	beq.n	800bbd0 <__d2b+0x2c>
 800bbca:	2280      	movs	r2, #128	@ 0x80
 800bbcc:	0352      	lsls	r2, r2, #13
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d025      	beq.n	800bc22 <__d2b+0x7e>
 800bbd6:	4668      	mov	r0, sp
 800bbd8:	9600      	str	r6, [sp, #0]
 800bbda:	f7ff fd74 	bl	800b6c6 <__lo0bits>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	9900      	ldr	r1, [sp, #0]
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d01b      	beq.n	800bc1e <__d2b+0x7a>
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	001e      	movs	r6, r3
 800bbea:	1a12      	subs	r2, r2, r0
 800bbec:	4096      	lsls	r6, r2
 800bbee:	0032      	movs	r2, r6
 800bbf0:	40c3      	lsrs	r3, r0
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	6162      	str	r2, [r4, #20]
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	9e01      	ldr	r6, [sp, #4]
 800bbfa:	61a6      	str	r6, [r4, #24]
 800bbfc:	1e73      	subs	r3, r6, #1
 800bbfe:	419e      	sbcs	r6, r3
 800bc00:	3601      	adds	r6, #1
 800bc02:	6126      	str	r6, [r4, #16]
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	d014      	beq.n	800bc32 <__d2b+0x8e>
 800bc08:	2635      	movs	r6, #53	@ 0x35
 800bc0a:	4b13      	ldr	r3, [pc, #76]	@ (800bc58 <__d2b+0xb4>)
 800bc0c:	18ed      	adds	r5, r5, r3
 800bc0e:	9b08      	ldr	r3, [sp, #32]
 800bc10:	182d      	adds	r5, r5, r0
 800bc12:	601d      	str	r5, [r3, #0]
 800bc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc16:	1a36      	subs	r6, r6, r0
 800bc18:	601e      	str	r6, [r3, #0]
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc1e:	6161      	str	r1, [r4, #20]
 800bc20:	e7ea      	b.n	800bbf8 <__d2b+0x54>
 800bc22:	a801      	add	r0, sp, #4
 800bc24:	f7ff fd4f 	bl	800b6c6 <__lo0bits>
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	2601      	movs	r6, #1
 800bc2c:	6163      	str	r3, [r4, #20]
 800bc2e:	3020      	adds	r0, #32
 800bc30:	e7e7      	b.n	800bc02 <__d2b+0x5e>
 800bc32:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <__d2b+0xb8>)
 800bc34:	18c0      	adds	r0, r0, r3
 800bc36:	9b08      	ldr	r3, [sp, #32]
 800bc38:	6018      	str	r0, [r3, #0]
 800bc3a:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <__d2b+0xbc>)
 800bc3c:	18f3      	adds	r3, r6, r3
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	18e3      	adds	r3, r4, r3
 800bc42:	6958      	ldr	r0, [r3, #20]
 800bc44:	f7ff fd1e 	bl	800b684 <__hi0bits>
 800bc48:	0176      	lsls	r6, r6, #5
 800bc4a:	e7e3      	b.n	800bc14 <__d2b+0x70>
 800bc4c:	0800c6b0 	.word	0x0800c6b0
 800bc50:	0800c6c1 	.word	0x0800c6c1
 800bc54:	0000030f 	.word	0x0000030f
 800bc58:	fffffbcd 	.word	0xfffffbcd
 800bc5c:	fffffbce 	.word	0xfffffbce
 800bc60:	3fffffff 	.word	0x3fffffff

0800bc64 <__sflush_r>:
 800bc64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc66:	220c      	movs	r2, #12
 800bc68:	5e8b      	ldrsh	r3, [r1, r2]
 800bc6a:	0005      	movs	r5, r0
 800bc6c:	000c      	movs	r4, r1
 800bc6e:	071a      	lsls	r2, r3, #28
 800bc70:	d456      	bmi.n	800bd20 <__sflush_r+0xbc>
 800bc72:	684a      	ldr	r2, [r1, #4]
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	dc02      	bgt.n	800bc7e <__sflush_r+0x1a>
 800bc78:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	dd4e      	ble.n	800bd1c <__sflush_r+0xb8>
 800bc7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bc80:	2f00      	cmp	r7, #0
 800bc82:	d04b      	beq.n	800bd1c <__sflush_r+0xb8>
 800bc84:	2200      	movs	r2, #0
 800bc86:	2080      	movs	r0, #128	@ 0x80
 800bc88:	682e      	ldr	r6, [r5, #0]
 800bc8a:	602a      	str	r2, [r5, #0]
 800bc8c:	001a      	movs	r2, r3
 800bc8e:	0140      	lsls	r0, r0, #5
 800bc90:	6a21      	ldr	r1, [r4, #32]
 800bc92:	4002      	ands	r2, r0
 800bc94:	4203      	tst	r3, r0
 800bc96:	d033      	beq.n	800bd00 <__sflush_r+0x9c>
 800bc98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	075b      	lsls	r3, r3, #29
 800bc9e:	d506      	bpl.n	800bcae <__sflush_r+0x4a>
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <__sflush_r+0x4a>
 800bcaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcac:	1ad2      	subs	r2, r2, r3
 800bcae:	2300      	movs	r3, #0
 800bcb0:	0028      	movs	r0, r5
 800bcb2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bcb4:	6a21      	ldr	r1, [r4, #32]
 800bcb6:	47b8      	blx	r7
 800bcb8:	89a2      	ldrh	r2, [r4, #12]
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d106      	bne.n	800bccc <__sflush_r+0x68>
 800bcbe:	6829      	ldr	r1, [r5, #0]
 800bcc0:	291d      	cmp	r1, #29
 800bcc2:	d846      	bhi.n	800bd52 <__sflush_r+0xee>
 800bcc4:	4b29      	ldr	r3, [pc, #164]	@ (800bd6c <__sflush_r+0x108>)
 800bcc6:	40cb      	lsrs	r3, r1
 800bcc8:	07db      	lsls	r3, r3, #31
 800bcca:	d542      	bpl.n	800bd52 <__sflush_r+0xee>
 800bccc:	2300      	movs	r3, #0
 800bcce:	6063      	str	r3, [r4, #4]
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	6023      	str	r3, [r4, #0]
 800bcd4:	04d2      	lsls	r2, r2, #19
 800bcd6:	d505      	bpl.n	800bce4 <__sflush_r+0x80>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <__sflush_r+0x7e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d100      	bne.n	800bce4 <__sflush_r+0x80>
 800bce2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce6:	602e      	str	r6, [r5, #0]
 800bce8:	2900      	cmp	r1, #0
 800bcea:	d017      	beq.n	800bd1c <__sflush_r+0xb8>
 800bcec:	0023      	movs	r3, r4
 800bcee:	3344      	adds	r3, #68	@ 0x44
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	d002      	beq.n	800bcfa <__sflush_r+0x96>
 800bcf4:	0028      	movs	r0, r5
 800bcf6:	f7ff fb13 	bl	800b320 <_free_r>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfe:	e00d      	b.n	800bd1c <__sflush_r+0xb8>
 800bd00:	2301      	movs	r3, #1
 800bd02:	0028      	movs	r0, r5
 800bd04:	47b8      	blx	r7
 800bd06:	0002      	movs	r2, r0
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d1c6      	bne.n	800bc9a <__sflush_r+0x36>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0c3      	beq.n	800bc9a <__sflush_r+0x36>
 800bd12:	2b1d      	cmp	r3, #29
 800bd14:	d001      	beq.n	800bd1a <__sflush_r+0xb6>
 800bd16:	2b16      	cmp	r3, #22
 800bd18:	d11a      	bne.n	800bd50 <__sflush_r+0xec>
 800bd1a:	602e      	str	r6, [r5, #0]
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e01e      	b.n	800bd5e <__sflush_r+0xfa>
 800bd20:	690e      	ldr	r6, [r1, #16]
 800bd22:	2e00      	cmp	r6, #0
 800bd24:	d0fa      	beq.n	800bd1c <__sflush_r+0xb8>
 800bd26:	680f      	ldr	r7, [r1, #0]
 800bd28:	600e      	str	r6, [r1, #0]
 800bd2a:	1bba      	subs	r2, r7, r6
 800bd2c:	9201      	str	r2, [sp, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	079b      	lsls	r3, r3, #30
 800bd32:	d100      	bne.n	800bd36 <__sflush_r+0xd2>
 800bd34:	694a      	ldr	r2, [r1, #20]
 800bd36:	60a2      	str	r2, [r4, #8]
 800bd38:	9b01      	ldr	r3, [sp, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	ddee      	ble.n	800bd1c <__sflush_r+0xb8>
 800bd3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bd40:	0032      	movs	r2, r6
 800bd42:	001f      	movs	r7, r3
 800bd44:	0028      	movs	r0, r5
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	6a21      	ldr	r1, [r4, #32]
 800bd4a:	47b8      	blx	r7
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	dc07      	bgt.n	800bd60 <__sflush_r+0xfc>
 800bd50:	89a2      	ldrh	r2, [r4, #12]
 800bd52:	2340      	movs	r3, #64	@ 0x40
 800bd54:	2001      	movs	r0, #1
 800bd56:	4313      	orrs	r3, r2
 800bd58:	b21b      	sxth	r3, r3
 800bd5a:	81a3      	strh	r3, [r4, #12]
 800bd5c:	4240      	negs	r0, r0
 800bd5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	1836      	adds	r6, r6, r0
 800bd64:	1a1b      	subs	r3, r3, r0
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	e7e6      	b.n	800bd38 <__sflush_r+0xd4>
 800bd6a:	46c0      	nop			@ (mov r8, r8)
 800bd6c:	20400001 	.word	0x20400001

0800bd70 <_fflush_r>:
 800bd70:	690b      	ldr	r3, [r1, #16]
 800bd72:	b570      	push	{r4, r5, r6, lr}
 800bd74:	0005      	movs	r5, r0
 800bd76:	000c      	movs	r4, r1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d102      	bne.n	800bd82 <_fflush_r+0x12>
 800bd7c:	2500      	movs	r5, #0
 800bd7e:	0028      	movs	r0, r5
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d004      	beq.n	800bd90 <_fflush_r+0x20>
 800bd86:	6a03      	ldr	r3, [r0, #32]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d101      	bne.n	800bd90 <_fflush_r+0x20>
 800bd8c:	f7fe fb2a 	bl	800a3e4 <__sinit>
 800bd90:	220c      	movs	r2, #12
 800bd92:	5ea3      	ldrsh	r3, [r4, r2]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0f1      	beq.n	800bd7c <_fflush_r+0xc>
 800bd98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd9a:	07d2      	lsls	r2, r2, #31
 800bd9c:	d404      	bmi.n	800bda8 <_fflush_r+0x38>
 800bd9e:	059b      	lsls	r3, r3, #22
 800bda0:	d402      	bmi.n	800bda8 <_fflush_r+0x38>
 800bda2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bda4:	f7fe fc39 	bl	800a61a <__retarget_lock_acquire_recursive>
 800bda8:	0028      	movs	r0, r5
 800bdaa:	0021      	movs	r1, r4
 800bdac:	f7ff ff5a 	bl	800bc64 <__sflush_r>
 800bdb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdb2:	0005      	movs	r5, r0
 800bdb4:	07db      	lsls	r3, r3, #31
 800bdb6:	d4e2      	bmi.n	800bd7e <_fflush_r+0xe>
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	059b      	lsls	r3, r3, #22
 800bdbc:	d4df      	bmi.n	800bd7e <_fflush_r+0xe>
 800bdbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdc0:	f7fe fc2c 	bl	800a61c <__retarget_lock_release_recursive>
 800bdc4:	e7db      	b.n	800bd7e <_fflush_r+0xe>
	...

0800bdc8 <_sbrk_r>:
 800bdc8:	2300      	movs	r3, #0
 800bdca:	b570      	push	{r4, r5, r6, lr}
 800bdcc:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_sbrk_r+0x20>)
 800bdce:	0004      	movs	r4, r0
 800bdd0:	0008      	movs	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f8 febe 	bl	8004b54 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d103      	bne.n	800bde4 <_sbrk_r+0x1c>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d000      	beq.n	800bde4 <_sbrk_r+0x1c>
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	bd70      	pop	{r4, r5, r6, pc}
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	200006ec 	.word	0x200006ec

0800bdec <memcpy>:
 800bdec:	2300      	movs	r3, #0
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d100      	bne.n	800bdf6 <memcpy+0xa>
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	5ccc      	ldrb	r4, [r1, r3]
 800bdf8:	54c4      	strb	r4, [r0, r3]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	e7f8      	b.n	800bdf0 <memcpy+0x4>
	...

0800be00 <__assert_func>:
 800be00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be02:	0014      	movs	r4, r2
 800be04:	001a      	movs	r2, r3
 800be06:	4b09      	ldr	r3, [pc, #36]	@ (800be2c <__assert_func+0x2c>)
 800be08:	0005      	movs	r5, r0
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	000e      	movs	r6, r1
 800be0e:	68d8      	ldr	r0, [r3, #12]
 800be10:	4b07      	ldr	r3, [pc, #28]	@ (800be30 <__assert_func+0x30>)
 800be12:	2c00      	cmp	r4, #0
 800be14:	d101      	bne.n	800be1a <__assert_func+0x1a>
 800be16:	4b07      	ldr	r3, [pc, #28]	@ (800be34 <__assert_func+0x34>)
 800be18:	001c      	movs	r4, r3
 800be1a:	4907      	ldr	r1, [pc, #28]	@ (800be38 <__assert_func+0x38>)
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	9402      	str	r4, [sp, #8]
 800be20:	002b      	movs	r3, r5
 800be22:	9600      	str	r6, [sp, #0]
 800be24:	f000 f856 	bl	800bed4 <fiprintf>
 800be28:	f000 f864 	bl	800bef4 <abort>
 800be2c:	20000028 	.word	0x20000028
 800be30:	0800c724 	.word	0x0800c724
 800be34:	0800c75f 	.word	0x0800c75f
 800be38:	0800c731 	.word	0x0800c731

0800be3c <_calloc_r>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	0c0b      	lsrs	r3, r1, #16
 800be40:	0c15      	lsrs	r5, r2, #16
 800be42:	2b00      	cmp	r3, #0
 800be44:	d11e      	bne.n	800be84 <_calloc_r+0x48>
 800be46:	2d00      	cmp	r5, #0
 800be48:	d10c      	bne.n	800be64 <_calloc_r+0x28>
 800be4a:	b289      	uxth	r1, r1
 800be4c:	b294      	uxth	r4, r2
 800be4e:	434c      	muls	r4, r1
 800be50:	0021      	movs	r1, r4
 800be52:	f7ff fadb 	bl	800b40c <_malloc_r>
 800be56:	1e05      	subs	r5, r0, #0
 800be58:	d01b      	beq.n	800be92 <_calloc_r+0x56>
 800be5a:	0022      	movs	r2, r4
 800be5c:	2100      	movs	r1, #0
 800be5e:	f7fe fb41 	bl	800a4e4 <memset>
 800be62:	e016      	b.n	800be92 <_calloc_r+0x56>
 800be64:	1c2b      	adds	r3, r5, #0
 800be66:	1c0c      	adds	r4, r1, #0
 800be68:	b289      	uxth	r1, r1
 800be6a:	b292      	uxth	r2, r2
 800be6c:	434a      	muls	r2, r1
 800be6e:	b29b      	uxth	r3, r3
 800be70:	b2a1      	uxth	r1, r4
 800be72:	4359      	muls	r1, r3
 800be74:	0c14      	lsrs	r4, r2, #16
 800be76:	190c      	adds	r4, r1, r4
 800be78:	0c23      	lsrs	r3, r4, #16
 800be7a:	d107      	bne.n	800be8c <_calloc_r+0x50>
 800be7c:	0424      	lsls	r4, r4, #16
 800be7e:	b292      	uxth	r2, r2
 800be80:	4314      	orrs	r4, r2
 800be82:	e7e5      	b.n	800be50 <_calloc_r+0x14>
 800be84:	2d00      	cmp	r5, #0
 800be86:	d101      	bne.n	800be8c <_calloc_r+0x50>
 800be88:	1c14      	adds	r4, r2, #0
 800be8a:	e7ed      	b.n	800be68 <_calloc_r+0x2c>
 800be8c:	230c      	movs	r3, #12
 800be8e:	2500      	movs	r5, #0
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	0028      	movs	r0, r5
 800be94:	bd70      	pop	{r4, r5, r6, pc}

0800be96 <__ascii_mbtowc>:
 800be96:	b082      	sub	sp, #8
 800be98:	2900      	cmp	r1, #0
 800be9a:	d100      	bne.n	800be9e <__ascii_mbtowc+0x8>
 800be9c:	a901      	add	r1, sp, #4
 800be9e:	1e10      	subs	r0, r2, #0
 800bea0:	d006      	beq.n	800beb0 <__ascii_mbtowc+0x1a>
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <__ascii_mbtowc+0x1e>
 800bea6:	7813      	ldrb	r3, [r2, #0]
 800bea8:	600b      	str	r3, [r1, #0]
 800beaa:	7810      	ldrb	r0, [r2, #0]
 800beac:	1e43      	subs	r3, r0, #1
 800beae:	4198      	sbcs	r0, r3
 800beb0:	b002      	add	sp, #8
 800beb2:	4770      	bx	lr
 800beb4:	2002      	movs	r0, #2
 800beb6:	4240      	negs	r0, r0
 800beb8:	e7fa      	b.n	800beb0 <__ascii_mbtowc+0x1a>

0800beba <__ascii_wctomb>:
 800beba:	0003      	movs	r3, r0
 800bebc:	1e08      	subs	r0, r1, #0
 800bebe:	d005      	beq.n	800becc <__ascii_wctomb+0x12>
 800bec0:	2aff      	cmp	r2, #255	@ 0xff
 800bec2:	d904      	bls.n	800bece <__ascii_wctomb+0x14>
 800bec4:	228a      	movs	r2, #138	@ 0x8a
 800bec6:	2001      	movs	r0, #1
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	4240      	negs	r0, r0
 800becc:	4770      	bx	lr
 800bece:	2001      	movs	r0, #1
 800bed0:	700a      	strb	r2, [r1, #0]
 800bed2:	e7fb      	b.n	800becc <__ascii_wctomb+0x12>

0800bed4 <fiprintf>:
 800bed4:	b40e      	push	{r1, r2, r3}
 800bed6:	b517      	push	{r0, r1, r2, r4, lr}
 800bed8:	4c05      	ldr	r4, [pc, #20]	@ (800bef0 <fiprintf+0x1c>)
 800beda:	ab05      	add	r3, sp, #20
 800bedc:	cb04      	ldmia	r3!, {r2}
 800bede:	0001      	movs	r1, r0
 800bee0:	6820      	ldr	r0, [r4, #0]
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	f000 f834 	bl	800bf50 <_vfiprintf_r>
 800bee8:	bc1e      	pop	{r1, r2, r3, r4}
 800beea:	bc08      	pop	{r3}
 800beec:	b003      	add	sp, #12
 800beee:	4718      	bx	r3
 800bef0:	20000028 	.word	0x20000028

0800bef4 <abort>:
 800bef4:	2006      	movs	r0, #6
 800bef6:	b510      	push	{r4, lr}
 800bef8:	f000 fa10 	bl	800c31c <raise>
 800befc:	2001      	movs	r0, #1
 800befe:	f7f8 fdb7 	bl	8004a70 <_exit>

0800bf02 <__sfputc_r>:
 800bf02:	6893      	ldr	r3, [r2, #8]
 800bf04:	b510      	push	{r4, lr}
 800bf06:	3b01      	subs	r3, #1
 800bf08:	6093      	str	r3, [r2, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da04      	bge.n	800bf18 <__sfputc_r+0x16>
 800bf0e:	6994      	ldr	r4, [r2, #24]
 800bf10:	42a3      	cmp	r3, r4
 800bf12:	db07      	blt.n	800bf24 <__sfputc_r+0x22>
 800bf14:	290a      	cmp	r1, #10
 800bf16:	d005      	beq.n	800bf24 <__sfputc_r+0x22>
 800bf18:	6813      	ldr	r3, [r2, #0]
 800bf1a:	1c58      	adds	r0, r3, #1
 800bf1c:	6010      	str	r0, [r2, #0]
 800bf1e:	7019      	strb	r1, [r3, #0]
 800bf20:	0008      	movs	r0, r1
 800bf22:	bd10      	pop	{r4, pc}
 800bf24:	f000 f930 	bl	800c188 <__swbuf_r>
 800bf28:	0001      	movs	r1, r0
 800bf2a:	e7f9      	b.n	800bf20 <__sfputc_r+0x1e>

0800bf2c <__sfputs_r>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	0006      	movs	r6, r0
 800bf30:	000f      	movs	r7, r1
 800bf32:	0014      	movs	r4, r2
 800bf34:	18d5      	adds	r5, r2, r3
 800bf36:	42ac      	cmp	r4, r5
 800bf38:	d101      	bne.n	800bf3e <__sfputs_r+0x12>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	e007      	b.n	800bf4e <__sfputs_r+0x22>
 800bf3e:	7821      	ldrb	r1, [r4, #0]
 800bf40:	003a      	movs	r2, r7
 800bf42:	0030      	movs	r0, r6
 800bf44:	f7ff ffdd 	bl	800bf02 <__sfputc_r>
 800bf48:	3401      	adds	r4, #1
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	d1f3      	bne.n	800bf36 <__sfputs_r+0xa>
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf50 <_vfiprintf_r>:
 800bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf52:	b0a1      	sub	sp, #132	@ 0x84
 800bf54:	000f      	movs	r7, r1
 800bf56:	0015      	movs	r5, r2
 800bf58:	001e      	movs	r6, r3
 800bf5a:	9003      	str	r0, [sp, #12]
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d004      	beq.n	800bf6a <_vfiprintf_r+0x1a>
 800bf60:	6a03      	ldr	r3, [r0, #32]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <_vfiprintf_r+0x1a>
 800bf66:	f7fe fa3d 	bl	800a3e4 <__sinit>
 800bf6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf6c:	07db      	lsls	r3, r3, #31
 800bf6e:	d405      	bmi.n	800bf7c <_vfiprintf_r+0x2c>
 800bf70:	89bb      	ldrh	r3, [r7, #12]
 800bf72:	059b      	lsls	r3, r3, #22
 800bf74:	d402      	bmi.n	800bf7c <_vfiprintf_r+0x2c>
 800bf76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bf78:	f7fe fb4f 	bl	800a61a <__retarget_lock_acquire_recursive>
 800bf7c:	89bb      	ldrh	r3, [r7, #12]
 800bf7e:	071b      	lsls	r3, r3, #28
 800bf80:	d502      	bpl.n	800bf88 <_vfiprintf_r+0x38>
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d113      	bne.n	800bfb0 <_vfiprintf_r+0x60>
 800bf88:	0039      	movs	r1, r7
 800bf8a:	9803      	ldr	r0, [sp, #12]
 800bf8c:	f000 f93e 	bl	800c20c <__swsetup_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d00d      	beq.n	800bfb0 <_vfiprintf_r+0x60>
 800bf94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf96:	07db      	lsls	r3, r3, #31
 800bf98:	d503      	bpl.n	800bfa2 <_vfiprintf_r+0x52>
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	4240      	negs	r0, r0
 800bf9e:	b021      	add	sp, #132	@ 0x84
 800bfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa2:	89bb      	ldrh	r3, [r7, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d4f8      	bmi.n	800bf9a <_vfiprintf_r+0x4a>
 800bfa8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bfaa:	f7fe fb37 	bl	800a61c <__retarget_lock_release_recursive>
 800bfae:	e7f4      	b.n	800bf9a <_vfiprintf_r+0x4a>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	ac08      	add	r4, sp, #32
 800bfb4:	6163      	str	r3, [r4, #20]
 800bfb6:	3320      	adds	r3, #32
 800bfb8:	7663      	strb	r3, [r4, #25]
 800bfba:	3310      	adds	r3, #16
 800bfbc:	76a3      	strb	r3, [r4, #26]
 800bfbe:	9607      	str	r6, [sp, #28]
 800bfc0:	002e      	movs	r6, r5
 800bfc2:	7833      	ldrb	r3, [r6, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <_vfiprintf_r+0x7c>
 800bfc8:	2b25      	cmp	r3, #37	@ 0x25
 800bfca:	d148      	bne.n	800c05e <_vfiprintf_r+0x10e>
 800bfcc:	1b73      	subs	r3, r6, r5
 800bfce:	9305      	str	r3, [sp, #20]
 800bfd0:	42ae      	cmp	r6, r5
 800bfd2:	d00b      	beq.n	800bfec <_vfiprintf_r+0x9c>
 800bfd4:	002a      	movs	r2, r5
 800bfd6:	0039      	movs	r1, r7
 800bfd8:	9803      	ldr	r0, [sp, #12]
 800bfda:	f7ff ffa7 	bl	800bf2c <__sfputs_r>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d100      	bne.n	800bfe4 <_vfiprintf_r+0x94>
 800bfe2:	e0ae      	b.n	800c142 <_vfiprintf_r+0x1f2>
 800bfe4:	6963      	ldr	r3, [r4, #20]
 800bfe6:	9a05      	ldr	r2, [sp, #20]
 800bfe8:	189b      	adds	r3, r3, r2
 800bfea:	6163      	str	r3, [r4, #20]
 800bfec:	7833      	ldrb	r3, [r6, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d100      	bne.n	800bff4 <_vfiprintf_r+0xa4>
 800bff2:	e0a6      	b.n	800c142 <_vfiprintf_r+0x1f2>
 800bff4:	2201      	movs	r2, #1
 800bff6:	2300      	movs	r3, #0
 800bff8:	4252      	negs	r2, r2
 800bffa:	6062      	str	r2, [r4, #4]
 800bffc:	a904      	add	r1, sp, #16
 800bffe:	3254      	adds	r2, #84	@ 0x54
 800c000:	1852      	adds	r2, r2, r1
 800c002:	1c75      	adds	r5, r6, #1
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	60e3      	str	r3, [r4, #12]
 800c008:	60a3      	str	r3, [r4, #8]
 800c00a:	7013      	strb	r3, [r2, #0]
 800c00c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c00e:	4b59      	ldr	r3, [pc, #356]	@ (800c174 <_vfiprintf_r+0x224>)
 800c010:	2205      	movs	r2, #5
 800c012:	0018      	movs	r0, r3
 800c014:	7829      	ldrb	r1, [r5, #0]
 800c016:	9305      	str	r3, [sp, #20]
 800c018:	f7fe fb01 	bl	800a61e <memchr>
 800c01c:	1c6e      	adds	r6, r5, #1
 800c01e:	2800      	cmp	r0, #0
 800c020:	d11f      	bne.n	800c062 <_vfiprintf_r+0x112>
 800c022:	6822      	ldr	r2, [r4, #0]
 800c024:	06d3      	lsls	r3, r2, #27
 800c026:	d504      	bpl.n	800c032 <_vfiprintf_r+0xe2>
 800c028:	2353      	movs	r3, #83	@ 0x53
 800c02a:	a904      	add	r1, sp, #16
 800c02c:	185b      	adds	r3, r3, r1
 800c02e:	2120      	movs	r1, #32
 800c030:	7019      	strb	r1, [r3, #0]
 800c032:	0713      	lsls	r3, r2, #28
 800c034:	d504      	bpl.n	800c040 <_vfiprintf_r+0xf0>
 800c036:	2353      	movs	r3, #83	@ 0x53
 800c038:	a904      	add	r1, sp, #16
 800c03a:	185b      	adds	r3, r3, r1
 800c03c:	212b      	movs	r1, #43	@ 0x2b
 800c03e:	7019      	strb	r1, [r3, #0]
 800c040:	782b      	ldrb	r3, [r5, #0]
 800c042:	2b2a      	cmp	r3, #42	@ 0x2a
 800c044:	d016      	beq.n	800c074 <_vfiprintf_r+0x124>
 800c046:	002e      	movs	r6, r5
 800c048:	2100      	movs	r1, #0
 800c04a:	200a      	movs	r0, #10
 800c04c:	68e3      	ldr	r3, [r4, #12]
 800c04e:	7832      	ldrb	r2, [r6, #0]
 800c050:	1c75      	adds	r5, r6, #1
 800c052:	3a30      	subs	r2, #48	@ 0x30
 800c054:	2a09      	cmp	r2, #9
 800c056:	d950      	bls.n	800c0fa <_vfiprintf_r+0x1aa>
 800c058:	2900      	cmp	r1, #0
 800c05a:	d111      	bne.n	800c080 <_vfiprintf_r+0x130>
 800c05c:	e017      	b.n	800c08e <_vfiprintf_r+0x13e>
 800c05e:	3601      	adds	r6, #1
 800c060:	e7af      	b.n	800bfc2 <_vfiprintf_r+0x72>
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	1ac0      	subs	r0, r0, r3
 800c068:	2301      	movs	r3, #1
 800c06a:	4083      	lsls	r3, r0
 800c06c:	4313      	orrs	r3, r2
 800c06e:	0035      	movs	r5, r6
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	e7cc      	b.n	800c00e <_vfiprintf_r+0xbe>
 800c074:	9b07      	ldr	r3, [sp, #28]
 800c076:	1d19      	adds	r1, r3, #4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	9107      	str	r1, [sp, #28]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	db01      	blt.n	800c084 <_vfiprintf_r+0x134>
 800c080:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c082:	e004      	b.n	800c08e <_vfiprintf_r+0x13e>
 800c084:	425b      	negs	r3, r3
 800c086:	60e3      	str	r3, [r4, #12]
 800c088:	2302      	movs	r3, #2
 800c08a:	4313      	orrs	r3, r2
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	7833      	ldrb	r3, [r6, #0]
 800c090:	2b2e      	cmp	r3, #46	@ 0x2e
 800c092:	d10c      	bne.n	800c0ae <_vfiprintf_r+0x15e>
 800c094:	7873      	ldrb	r3, [r6, #1]
 800c096:	2b2a      	cmp	r3, #42	@ 0x2a
 800c098:	d134      	bne.n	800c104 <_vfiprintf_r+0x1b4>
 800c09a:	9b07      	ldr	r3, [sp, #28]
 800c09c:	3602      	adds	r6, #2
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	9207      	str	r2, [sp, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da01      	bge.n	800c0ac <_vfiprintf_r+0x15c>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	425b      	negs	r3, r3
 800c0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ae:	4d32      	ldr	r5, [pc, #200]	@ (800c178 <_vfiprintf_r+0x228>)
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	0028      	movs	r0, r5
 800c0b4:	7831      	ldrb	r1, [r6, #0]
 800c0b6:	f7fe fab2 	bl	800a61e <memchr>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d006      	beq.n	800c0cc <_vfiprintf_r+0x17c>
 800c0be:	2340      	movs	r3, #64	@ 0x40
 800c0c0:	1b40      	subs	r0, r0, r5
 800c0c2:	4083      	lsls	r3, r0
 800c0c4:	6822      	ldr	r2, [r4, #0]
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	7831      	ldrb	r1, [r6, #0]
 800c0ce:	2206      	movs	r2, #6
 800c0d0:	482a      	ldr	r0, [pc, #168]	@ (800c17c <_vfiprintf_r+0x22c>)
 800c0d2:	1c75      	adds	r5, r6, #1
 800c0d4:	7621      	strb	r1, [r4, #24]
 800c0d6:	f7fe faa2 	bl	800a61e <memchr>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d040      	beq.n	800c160 <_vfiprintf_r+0x210>
 800c0de:	4b28      	ldr	r3, [pc, #160]	@ (800c180 <_vfiprintf_r+0x230>)
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d122      	bne.n	800c12a <_vfiprintf_r+0x1da>
 800c0e4:	2207      	movs	r2, #7
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	3307      	adds	r3, #7
 800c0ea:	4393      	bics	r3, r2
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	9307      	str	r3, [sp, #28]
 800c0f0:	6963      	ldr	r3, [r4, #20]
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	6163      	str	r3, [r4, #20]
 800c0f8:	e762      	b.n	800bfc0 <_vfiprintf_r+0x70>
 800c0fa:	4343      	muls	r3, r0
 800c0fc:	002e      	movs	r6, r5
 800c0fe:	2101      	movs	r1, #1
 800c100:	189b      	adds	r3, r3, r2
 800c102:	e7a4      	b.n	800c04e <_vfiprintf_r+0xfe>
 800c104:	2300      	movs	r3, #0
 800c106:	200a      	movs	r0, #10
 800c108:	0019      	movs	r1, r3
 800c10a:	3601      	adds	r6, #1
 800c10c:	6063      	str	r3, [r4, #4]
 800c10e:	7832      	ldrb	r2, [r6, #0]
 800c110:	1c75      	adds	r5, r6, #1
 800c112:	3a30      	subs	r2, #48	@ 0x30
 800c114:	2a09      	cmp	r2, #9
 800c116:	d903      	bls.n	800c120 <_vfiprintf_r+0x1d0>
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0c8      	beq.n	800c0ae <_vfiprintf_r+0x15e>
 800c11c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c11e:	e7c6      	b.n	800c0ae <_vfiprintf_r+0x15e>
 800c120:	4341      	muls	r1, r0
 800c122:	002e      	movs	r6, r5
 800c124:	2301      	movs	r3, #1
 800c126:	1889      	adds	r1, r1, r2
 800c128:	e7f1      	b.n	800c10e <_vfiprintf_r+0x1be>
 800c12a:	aa07      	add	r2, sp, #28
 800c12c:	9200      	str	r2, [sp, #0]
 800c12e:	0021      	movs	r1, r4
 800c130:	003a      	movs	r2, r7
 800c132:	4b14      	ldr	r3, [pc, #80]	@ (800c184 <_vfiprintf_r+0x234>)
 800c134:	9803      	ldr	r0, [sp, #12]
 800c136:	f7fd fd0b 	bl	8009b50 <_printf_float>
 800c13a:	9004      	str	r0, [sp, #16]
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	3301      	adds	r3, #1
 800c140:	d1d6      	bne.n	800c0f0 <_vfiprintf_r+0x1a0>
 800c142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c144:	07db      	lsls	r3, r3, #31
 800c146:	d405      	bmi.n	800c154 <_vfiprintf_r+0x204>
 800c148:	89bb      	ldrh	r3, [r7, #12]
 800c14a:	059b      	lsls	r3, r3, #22
 800c14c:	d402      	bmi.n	800c154 <_vfiprintf_r+0x204>
 800c14e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c150:	f7fe fa64 	bl	800a61c <__retarget_lock_release_recursive>
 800c154:	89bb      	ldrh	r3, [r7, #12]
 800c156:	065b      	lsls	r3, r3, #25
 800c158:	d500      	bpl.n	800c15c <_vfiprintf_r+0x20c>
 800c15a:	e71e      	b.n	800bf9a <_vfiprintf_r+0x4a>
 800c15c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c15e:	e71e      	b.n	800bf9e <_vfiprintf_r+0x4e>
 800c160:	aa07      	add	r2, sp, #28
 800c162:	9200      	str	r2, [sp, #0]
 800c164:	0021      	movs	r1, r4
 800c166:	003a      	movs	r2, r7
 800c168:	4b06      	ldr	r3, [pc, #24]	@ (800c184 <_vfiprintf_r+0x234>)
 800c16a:	9803      	ldr	r0, [sp, #12]
 800c16c:	f7fd ff9e 	bl	800a0ac <_printf_i>
 800c170:	e7e3      	b.n	800c13a <_vfiprintf_r+0x1ea>
 800c172:	46c0      	nop			@ (mov r8, r8)
 800c174:	0800c760 	.word	0x0800c760
 800c178:	0800c766 	.word	0x0800c766
 800c17c:	0800c76a 	.word	0x0800c76a
 800c180:	08009b51 	.word	0x08009b51
 800c184:	0800bf2d 	.word	0x0800bf2d

0800c188 <__swbuf_r>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	0006      	movs	r6, r0
 800c18c:	000d      	movs	r5, r1
 800c18e:	0014      	movs	r4, r2
 800c190:	2800      	cmp	r0, #0
 800c192:	d004      	beq.n	800c19e <__swbuf_r+0x16>
 800c194:	6a03      	ldr	r3, [r0, #32]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <__swbuf_r+0x16>
 800c19a:	f7fe f923 	bl	800a3e4 <__sinit>
 800c19e:	69a3      	ldr	r3, [r4, #24]
 800c1a0:	60a3      	str	r3, [r4, #8]
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	071b      	lsls	r3, r3, #28
 800c1a6:	d502      	bpl.n	800c1ae <__swbuf_r+0x26>
 800c1a8:	6923      	ldr	r3, [r4, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <__swbuf_r+0x3a>
 800c1ae:	0021      	movs	r1, r4
 800c1b0:	0030      	movs	r0, r6
 800c1b2:	f000 f82b 	bl	800c20c <__swsetup_r>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d003      	beq.n	800c1c2 <__swbuf_r+0x3a>
 800c1ba:	2501      	movs	r5, #1
 800c1bc:	426d      	negs	r5, r5
 800c1be:	0028      	movs	r0, r5
 800c1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6820      	ldr	r0, [r4, #0]
 800c1c6:	b2ef      	uxtb	r7, r5
 800c1c8:	1ac0      	subs	r0, r0, r3
 800c1ca:	6963      	ldr	r3, [r4, #20]
 800c1cc:	b2ed      	uxtb	r5, r5
 800c1ce:	4283      	cmp	r3, r0
 800c1d0:	dc05      	bgt.n	800c1de <__swbuf_r+0x56>
 800c1d2:	0021      	movs	r1, r4
 800c1d4:	0030      	movs	r0, r6
 800c1d6:	f7ff fdcb 	bl	800bd70 <_fflush_r>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d1ed      	bne.n	800c1ba <__swbuf_r+0x32>
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	60a3      	str	r3, [r4, #8]
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	6022      	str	r2, [r4, #0]
 800c1ec:	701f      	strb	r7, [r3, #0]
 800c1ee:	6963      	ldr	r3, [r4, #20]
 800c1f0:	4283      	cmp	r3, r0
 800c1f2:	d004      	beq.n	800c1fe <__swbuf_r+0x76>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	07db      	lsls	r3, r3, #31
 800c1f8:	d5e1      	bpl.n	800c1be <__swbuf_r+0x36>
 800c1fa:	2d0a      	cmp	r5, #10
 800c1fc:	d1df      	bne.n	800c1be <__swbuf_r+0x36>
 800c1fe:	0021      	movs	r1, r4
 800c200:	0030      	movs	r0, r6
 800c202:	f7ff fdb5 	bl	800bd70 <_fflush_r>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0d9      	beq.n	800c1be <__swbuf_r+0x36>
 800c20a:	e7d6      	b.n	800c1ba <__swbuf_r+0x32>

0800c20c <__swsetup_r>:
 800c20c:	4b2d      	ldr	r3, [pc, #180]	@ (800c2c4 <__swsetup_r+0xb8>)
 800c20e:	b570      	push	{r4, r5, r6, lr}
 800c210:	0005      	movs	r5, r0
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	000c      	movs	r4, r1
 800c216:	2800      	cmp	r0, #0
 800c218:	d004      	beq.n	800c224 <__swsetup_r+0x18>
 800c21a:	6a03      	ldr	r3, [r0, #32]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <__swsetup_r+0x18>
 800c220:	f7fe f8e0 	bl	800a3e4 <__sinit>
 800c224:	220c      	movs	r2, #12
 800c226:	5ea3      	ldrsh	r3, [r4, r2]
 800c228:	071a      	lsls	r2, r3, #28
 800c22a:	d423      	bmi.n	800c274 <__swsetup_r+0x68>
 800c22c:	06da      	lsls	r2, r3, #27
 800c22e:	d407      	bmi.n	800c240 <__swsetup_r+0x34>
 800c230:	2209      	movs	r2, #9
 800c232:	602a      	str	r2, [r5, #0]
 800c234:	2240      	movs	r2, #64	@ 0x40
 800c236:	2001      	movs	r0, #1
 800c238:	4313      	orrs	r3, r2
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	4240      	negs	r0, r0
 800c23e:	e03a      	b.n	800c2b6 <__swsetup_r+0xaa>
 800c240:	075b      	lsls	r3, r3, #29
 800c242:	d513      	bpl.n	800c26c <__swsetup_r+0x60>
 800c244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c246:	2900      	cmp	r1, #0
 800c248:	d008      	beq.n	800c25c <__swsetup_r+0x50>
 800c24a:	0023      	movs	r3, r4
 800c24c:	3344      	adds	r3, #68	@ 0x44
 800c24e:	4299      	cmp	r1, r3
 800c250:	d002      	beq.n	800c258 <__swsetup_r+0x4c>
 800c252:	0028      	movs	r0, r5
 800c254:	f7ff f864 	bl	800b320 <_free_r>
 800c258:	2300      	movs	r3, #0
 800c25a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c25c:	2224      	movs	r2, #36	@ 0x24
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	4393      	bics	r3, r2
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	2300      	movs	r3, #0
 800c266:	6063      	str	r3, [r4, #4]
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2308      	movs	r3, #8
 800c26e:	89a2      	ldrh	r2, [r4, #12]
 800c270:	4313      	orrs	r3, r2
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10b      	bne.n	800c292 <__swsetup_r+0x86>
 800c27a:	21a0      	movs	r1, #160	@ 0xa0
 800c27c:	2280      	movs	r2, #128	@ 0x80
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	0089      	lsls	r1, r1, #2
 800c282:	0092      	lsls	r2, r2, #2
 800c284:	400b      	ands	r3, r1
 800c286:	4293      	cmp	r3, r2
 800c288:	d003      	beq.n	800c292 <__swsetup_r+0x86>
 800c28a:	0021      	movs	r1, r4
 800c28c:	0028      	movs	r0, r5
 800c28e:	f000 f88f 	bl	800c3b0 <__smakebuf_r>
 800c292:	220c      	movs	r2, #12
 800c294:	5ea3      	ldrsh	r3, [r4, r2]
 800c296:	2101      	movs	r1, #1
 800c298:	001a      	movs	r2, r3
 800c29a:	400a      	ands	r2, r1
 800c29c:	420b      	tst	r3, r1
 800c29e:	d00b      	beq.n	800c2b8 <__swsetup_r+0xac>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	60a2      	str	r2, [r4, #8]
 800c2a4:	6962      	ldr	r2, [r4, #20]
 800c2a6:	4252      	negs	r2, r2
 800c2a8:	61a2      	str	r2, [r4, #24]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	6922      	ldr	r2, [r4, #16]
 800c2ae:	4282      	cmp	r2, r0
 800c2b0:	d101      	bne.n	800c2b6 <__swsetup_r+0xaa>
 800c2b2:	061a      	lsls	r2, r3, #24
 800c2b4:	d4be      	bmi.n	800c234 <__swsetup_r+0x28>
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	0799      	lsls	r1, r3, #30
 800c2ba:	d400      	bmi.n	800c2be <__swsetup_r+0xb2>
 800c2bc:	6962      	ldr	r2, [r4, #20]
 800c2be:	60a2      	str	r2, [r4, #8]
 800c2c0:	e7f3      	b.n	800c2aa <__swsetup_r+0x9e>
 800c2c2:	46c0      	nop			@ (mov r8, r8)
 800c2c4:	20000028 	.word	0x20000028

0800c2c8 <_raise_r>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	0004      	movs	r4, r0
 800c2cc:	000d      	movs	r5, r1
 800c2ce:	291f      	cmp	r1, #31
 800c2d0:	d904      	bls.n	800c2dc <_raise_r+0x14>
 800c2d2:	2316      	movs	r3, #22
 800c2d4:	6003      	str	r3, [r0, #0]
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	4240      	negs	r0, r0
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <_raise_r+0x24>
 800c2e2:	008a      	lsls	r2, r1, #2
 800c2e4:	189b      	adds	r3, r3, r2
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d108      	bne.n	800c2fe <_raise_r+0x36>
 800c2ec:	0020      	movs	r0, r4
 800c2ee:	f000 f831 	bl	800c354 <_getpid_r>
 800c2f2:	002a      	movs	r2, r5
 800c2f4:	0001      	movs	r1, r0
 800c2f6:	0020      	movs	r0, r4
 800c2f8:	f000 f81a 	bl	800c330 <_kill_r>
 800c2fc:	e7ed      	b.n	800c2da <_raise_r+0x12>
 800c2fe:	2a01      	cmp	r2, #1
 800c300:	d009      	beq.n	800c316 <_raise_r+0x4e>
 800c302:	1c51      	adds	r1, r2, #1
 800c304:	d103      	bne.n	800c30e <_raise_r+0x46>
 800c306:	2316      	movs	r3, #22
 800c308:	6003      	str	r3, [r0, #0]
 800c30a:	2001      	movs	r0, #1
 800c30c:	e7e5      	b.n	800c2da <_raise_r+0x12>
 800c30e:	2100      	movs	r1, #0
 800c310:	0028      	movs	r0, r5
 800c312:	6019      	str	r1, [r3, #0]
 800c314:	4790      	blx	r2
 800c316:	2000      	movs	r0, #0
 800c318:	e7df      	b.n	800c2da <_raise_r+0x12>
	...

0800c31c <raise>:
 800c31c:	b510      	push	{r4, lr}
 800c31e:	4b03      	ldr	r3, [pc, #12]	@ (800c32c <raise+0x10>)
 800c320:	0001      	movs	r1, r0
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	f7ff ffd0 	bl	800c2c8 <_raise_r>
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	46c0      	nop			@ (mov r8, r8)
 800c32c:	20000028 	.word	0x20000028

0800c330 <_kill_r>:
 800c330:	2300      	movs	r3, #0
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	4d06      	ldr	r5, [pc, #24]	@ (800c350 <_kill_r+0x20>)
 800c336:	0004      	movs	r4, r0
 800c338:	0008      	movs	r0, r1
 800c33a:	0011      	movs	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f8 fb87 	bl	8004a50 <_kill>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d103      	bne.n	800c34e <_kill_r+0x1e>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d000      	beq.n	800c34e <_kill_r+0x1e>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	200006ec 	.word	0x200006ec

0800c354 <_getpid_r>:
 800c354:	b510      	push	{r4, lr}
 800c356:	f7f8 fb75 	bl	8004a44 <_getpid>
 800c35a:	bd10      	pop	{r4, pc}

0800c35c <__swhatbuf_r>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	000e      	movs	r6, r1
 800c360:	001d      	movs	r5, r3
 800c362:	230e      	movs	r3, #14
 800c364:	5ec9      	ldrsh	r1, [r1, r3]
 800c366:	0014      	movs	r4, r2
 800c368:	b096      	sub	sp, #88	@ 0x58
 800c36a:	2900      	cmp	r1, #0
 800c36c:	da0c      	bge.n	800c388 <__swhatbuf_r+0x2c>
 800c36e:	89b2      	ldrh	r2, [r6, #12]
 800c370:	2380      	movs	r3, #128	@ 0x80
 800c372:	0011      	movs	r1, r2
 800c374:	4019      	ands	r1, r3
 800c376:	421a      	tst	r2, r3
 800c378:	d114      	bne.n	800c3a4 <__swhatbuf_r+0x48>
 800c37a:	2380      	movs	r3, #128	@ 0x80
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	2000      	movs	r0, #0
 800c380:	6029      	str	r1, [r5, #0]
 800c382:	6023      	str	r3, [r4, #0]
 800c384:	b016      	add	sp, #88	@ 0x58
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	466a      	mov	r2, sp
 800c38a:	f000 f853 	bl	800c434 <_fstat_r>
 800c38e:	2800      	cmp	r0, #0
 800c390:	dbed      	blt.n	800c36e <__swhatbuf_r+0x12>
 800c392:	23f0      	movs	r3, #240	@ 0xf0
 800c394:	9901      	ldr	r1, [sp, #4]
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	4019      	ands	r1, r3
 800c39a:	4b04      	ldr	r3, [pc, #16]	@ (800c3ac <__swhatbuf_r+0x50>)
 800c39c:	18c9      	adds	r1, r1, r3
 800c39e:	424b      	negs	r3, r1
 800c3a0:	4159      	adcs	r1, r3
 800c3a2:	e7ea      	b.n	800c37a <__swhatbuf_r+0x1e>
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	2340      	movs	r3, #64	@ 0x40
 800c3a8:	e7e9      	b.n	800c37e <__swhatbuf_r+0x22>
 800c3aa:	46c0      	nop			@ (mov r8, r8)
 800c3ac:	ffffe000 	.word	0xffffe000

0800c3b0 <__smakebuf_r>:
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	2602      	movs	r6, #2
 800c3b4:	898b      	ldrh	r3, [r1, #12]
 800c3b6:	0005      	movs	r5, r0
 800c3b8:	000c      	movs	r4, r1
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	4233      	tst	r3, r6
 800c3be:	d007      	beq.n	800c3d0 <__smakebuf_r+0x20>
 800c3c0:	0023      	movs	r3, r4
 800c3c2:	3347      	adds	r3, #71	@ 0x47
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	6163      	str	r3, [r4, #20]
 800c3cc:	b005      	add	sp, #20
 800c3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3d0:	ab03      	add	r3, sp, #12
 800c3d2:	aa02      	add	r2, sp, #8
 800c3d4:	f7ff ffc2 	bl	800c35c <__swhatbuf_r>
 800c3d8:	9f02      	ldr	r7, [sp, #8]
 800c3da:	9001      	str	r0, [sp, #4]
 800c3dc:	0039      	movs	r1, r7
 800c3de:	0028      	movs	r0, r5
 800c3e0:	f7ff f814 	bl	800b40c <_malloc_r>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d108      	bne.n	800c3fa <__smakebuf_r+0x4a>
 800c3e8:	220c      	movs	r2, #12
 800c3ea:	5ea3      	ldrsh	r3, [r4, r2]
 800c3ec:	059a      	lsls	r2, r3, #22
 800c3ee:	d4ed      	bmi.n	800c3cc <__smakebuf_r+0x1c>
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4393      	bics	r3, r2
 800c3f4:	431e      	orrs	r6, r3
 800c3f6:	81a6      	strh	r6, [r4, #12]
 800c3f8:	e7e2      	b.n	800c3c0 <__smakebuf_r+0x10>
 800c3fa:	2380      	movs	r3, #128	@ 0x80
 800c3fc:	89a2      	ldrh	r2, [r4, #12]
 800c3fe:	6020      	str	r0, [r4, #0]
 800c400:	4313      	orrs	r3, r2
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	6120      	str	r0, [r4, #16]
 800c408:	6167      	str	r7, [r4, #20]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <__smakebuf_r+0x78>
 800c40e:	0028      	movs	r0, r5
 800c410:	230e      	movs	r3, #14
 800c412:	5ee1      	ldrsh	r1, [r4, r3]
 800c414:	f000 f820 	bl	800c458 <_isatty_r>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d005      	beq.n	800c428 <__smakebuf_r+0x78>
 800c41c:	2303      	movs	r3, #3
 800c41e:	89a2      	ldrh	r2, [r4, #12]
 800c420:	439a      	bics	r2, r3
 800c422:	3b02      	subs	r3, #2
 800c424:	4313      	orrs	r3, r2
 800c426:	81a3      	strh	r3, [r4, #12]
 800c428:	89a3      	ldrh	r3, [r4, #12]
 800c42a:	9a01      	ldr	r2, [sp, #4]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	e7cc      	b.n	800c3cc <__smakebuf_r+0x1c>
	...

0800c434 <_fstat_r>:
 800c434:	2300      	movs	r3, #0
 800c436:	b570      	push	{r4, r5, r6, lr}
 800c438:	4d06      	ldr	r5, [pc, #24]	@ (800c454 <_fstat_r+0x20>)
 800c43a:	0004      	movs	r4, r0
 800c43c:	0008      	movs	r0, r1
 800c43e:	0011      	movs	r1, r2
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	f7f8 fb65 	bl	8004b10 <_fstat>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	d103      	bne.n	800c452 <_fstat_r+0x1e>
 800c44a:	682b      	ldr	r3, [r5, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d000      	beq.n	800c452 <_fstat_r+0x1e>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	200006ec 	.word	0x200006ec

0800c458 <_isatty_r>:
 800c458:	2300      	movs	r3, #0
 800c45a:	b570      	push	{r4, r5, r6, lr}
 800c45c:	4d06      	ldr	r5, [pc, #24]	@ (800c478 <_isatty_r+0x20>)
 800c45e:	0004      	movs	r4, r0
 800c460:	0008      	movs	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f8 fb62 	bl	8004b2c <_isatty>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d103      	bne.n	800c474 <_isatty_r+0x1c>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d000      	beq.n	800c474 <_isatty_r+0x1c>
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	46c0      	nop			@ (mov r8, r8)
 800c478:	200006ec 	.word	0x200006ec

0800c47c <_init>:
 800c47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47e:	46c0      	nop			@ (mov r8, r8)
 800c480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c482:	bc08      	pop	{r3}
 800c484:	469e      	mov	lr, r3
 800c486:	4770      	bx	lr

0800c488 <_fini>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	46c0      	nop			@ (mov r8, r8)
 800c48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c48e:	bc08      	pop	{r3}
 800c490:	469e      	mov	lr, r3
 800c492:	4770      	bx	lr
