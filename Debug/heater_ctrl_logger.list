
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a990  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800aa48  0800aa48  0000ba48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae90  0800ae90  0000c1e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae90  0800ae90  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae94  0800ae94  0000be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ae98  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200001e0  0800b078  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800b078  0000c6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018308  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00024510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000274d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001186  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a21  00000000  00000000  00029c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b286  00000000  00000000  0002e6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e9a  00000000  00000000  0004993d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea7d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  000ea81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  000f0b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e0 	.word	0x200001e0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800aa30 	.word	0x0800aa30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e4 	.word	0x200001e4
 80000fc:	0800aa30 	.word	0x0800aa30

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa35 	bl	80018a4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f975 	bl	8001734 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa27 	bl	80018a4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa1d 	bl	80018a4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f99f 	bl	80017bc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f995 	bl	80017bc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f82b 	bl	8000514 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f89d 	bl	8000604 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f893 	bl	8000604 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f839 	bl	8000564 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f82f 	bl	8000564 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_fmul>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	b5c0      	push	{r6, r7, lr}
 80006b0:	4699      	mov	r9, r3
 80006b2:	1c0f      	adds	r7, r1, #0
 80006b4:	0e2d      	lsrs	r5, r5, #24
 80006b6:	0fc6      	lsrs	r6, r0, #31
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fmul+0x1e>
 80006bc:	e088      	b.n	80007d0 <__aeabi_fmul+0x130>
 80006be:	2dff      	cmp	r5, #255	@ 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x24>
 80006c2:	e08d      	b.n	80007e0 <__aeabi_fmul+0x140>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4691      	mov	r9, r2
 80006d0:	4698      	mov	r8, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3d7f      	subs	r5, #127	@ 0x7f
 80006d6:	027c      	lsls	r4, r7, #9
 80006d8:	007b      	lsls	r3, r7, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0fff      	lsrs	r7, r7, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d068      	beq.n	80007b6 <__aeabi_fmul+0x116>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d021      	beq.n	800072c <__aeabi_fmul+0x8c>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	2100      	movs	r1, #0
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	2a0a      	cmp	r2, #10
 80006fc:	dc2e      	bgt.n	800075c <__aeabi_fmul+0xbc>
 80006fe:	407e      	eors	r6, r7
 8000700:	4642      	mov	r2, r8
 8000702:	2a02      	cmp	r2, #2
 8000704:	dc23      	bgt.n	800074e <__aeabi_fmul+0xae>
 8000706:	3a01      	subs	r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d900      	bls.n	800070e <__aeabi_fmul+0x6e>
 800070c:	e0bd      	b.n	800088a <__aeabi_fmul+0x1ea>
 800070e:	2902      	cmp	r1, #2
 8000710:	d06e      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000712:	2901      	cmp	r1, #1
 8000714:	d12c      	bne.n	8000770 <__aeabi_fmul+0xd0>
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	07f6      	lsls	r6, r6, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4330      	orrs	r0, r6
 8000722:	bce0      	pop	{r5, r6, r7}
 8000724:	46ba      	mov	sl, r7
 8000726:	46b1      	mov	r9, r6
 8000728:	46a8      	mov	r8, r5
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	002b      	movs	r3, r5
 800072e:	33ff      	adds	r3, #255	@ 0xff
 8000730:	2c00      	cmp	r4, #0
 8000732:	d065      	beq.n	8000800 <__aeabi_fmul+0x160>
 8000734:	2203      	movs	r2, #3
 8000736:	4641      	mov	r1, r8
 8000738:	4311      	orrs	r1, r2
 800073a:	0032      	movs	r2, r6
 800073c:	3501      	adds	r5, #1
 800073e:	4688      	mov	r8, r1
 8000740:	407a      	eors	r2, r7
 8000742:	35ff      	adds	r5, #255	@ 0xff
 8000744:	290a      	cmp	r1, #10
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0xaa>
 8000748:	e0d8      	b.n	80008fc <__aeabi_fmul+0x25c>
 800074a:	0016      	movs	r6, r2
 800074c:	2103      	movs	r1, #3
 800074e:	4640      	mov	r0, r8
 8000750:	2201      	movs	r2, #1
 8000752:	4082      	lsls	r2, r0
 8000754:	20a6      	movs	r0, #166	@ 0xa6
 8000756:	00c0      	lsls	r0, r0, #3
 8000758:	4202      	tst	r2, r0
 800075a:	d020      	beq.n	800079e <__aeabi_fmul+0xfe>
 800075c:	4653      	mov	r3, sl
 800075e:	2b02      	cmp	r3, #2
 8000760:	d046      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fmul+0xc8>
 8000766:	e0bb      	b.n	80008e0 <__aeabi_fmul+0x240>
 8000768:	4651      	mov	r1, sl
 800076a:	464c      	mov	r4, r9
 800076c:	2901      	cmp	r1, #1
 800076e:	d0d2      	beq.n	8000716 <__aeabi_fmul+0x76>
 8000770:	002b      	movs	r3, r5
 8000772:	337f      	adds	r3, #127	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd70      	ble.n	800085a <__aeabi_fmul+0x1ba>
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fmul+0xe6>
 800077c:	220f      	movs	r2, #15
 800077e:	4022      	ands	r2, r4
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fmul+0xe6>
 8000784:	3404      	adds	r4, #4
 8000786:	0122      	lsls	r2, r4, #4
 8000788:	d503      	bpl.n	8000792 <__aeabi_fmul+0xf2>
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <__aeabi_fmul+0x278>)
 800078c:	401c      	ands	r4, r3
 800078e:	002b      	movs	r3, r5
 8000790:	3380      	adds	r3, #128	@ 0x80
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dc2c      	bgt.n	80007f0 <__aeabi_fmul+0x150>
 8000796:	01a2      	lsls	r2, r4, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	b2d8      	uxtb	r0, r3
 800079c:	e7bd      	b.n	800071a <__aeabi_fmul+0x7a>
 800079e:	2090      	movs	r0, #144	@ 0x90
 80007a0:	0080      	lsls	r0, r0, #2
 80007a2:	4202      	tst	r2, r0
 80007a4:	d127      	bne.n	80007f6 <__aeabi_fmul+0x156>
 80007a6:	38b9      	subs	r0, #185	@ 0xb9
 80007a8:	38ff      	subs	r0, #255	@ 0xff
 80007aa:	4210      	tst	r0, r2
 80007ac:	d06d      	beq.n	800088a <__aeabi_fmul+0x1ea>
 80007ae:	003e      	movs	r6, r7
 80007b0:	46a1      	mov	r9, r4
 80007b2:	468a      	mov	sl, r1
 80007b4:	e7d2      	b.n	800075c <__aeabi_fmul+0xbc>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d141      	bne.n	800083e <__aeabi_fmul+0x19e>
 80007ba:	2301      	movs	r3, #1
 80007bc:	4642      	mov	r2, r8
 80007be:	431a      	orrs	r2, r3
 80007c0:	4690      	mov	r8, r2
 80007c2:	002b      	movs	r3, r5
 80007c4:	4642      	mov	r2, r8
 80007c6:	2101      	movs	r1, #1
 80007c8:	1c5d      	adds	r5, r3, #1
 80007ca:	2a0a      	cmp	r2, #10
 80007cc:	dd97      	ble.n	80006fe <__aeabi_fmul+0x5e>
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xbc>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d126      	bne.n	8000822 <__aeabi_fmul+0x182>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4698      	mov	r8, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2500      	movs	r5, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fmul+0x176>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4698      	mov	r8, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	25ff      	movs	r5, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e772      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	e791      	b.n	800071a <__aeabi_fmul+0x7a>
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	2600      	movs	r6, #0
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	e78c      	b.n	800071a <__aeabi_fmul+0x7a>
 8000800:	4641      	mov	r1, r8
 8000802:	2202      	movs	r2, #2
 8000804:	3501      	adds	r5, #1
 8000806:	4311      	orrs	r1, r2
 8000808:	4688      	mov	r8, r1
 800080a:	35ff      	adds	r5, #255	@ 0xff
 800080c:	290a      	cmp	r1, #10
 800080e:	dca5      	bgt.n	800075c <__aeabi_fmul+0xbc>
 8000810:	2102      	movs	r1, #2
 8000812:	407e      	eors	r6, r7
 8000814:	e774      	b.n	8000700 <__aeabi_fmul+0x60>
 8000816:	230c      	movs	r3, #12
 8000818:	4698      	mov	r8, r3
 800081a:	3b09      	subs	r3, #9
 800081c:	25ff      	movs	r5, #255	@ 0xff
 800081e:	469a      	mov	sl, r3
 8000820:	e759      	b.n	80006d6 <__aeabi_fmul+0x36>
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f890 	bl	8002948 <__clzsi2>
 8000828:	464a      	mov	r2, r9
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	2576      	movs	r5, #118	@ 0x76
 800082e:	409a      	lsls	r2, r3
 8000830:	2300      	movs	r3, #0
 8000832:	426d      	negs	r5, r5
 8000834:	4691      	mov	r9, r2
 8000836:	4698      	mov	r8, r3
 8000838:	469a      	mov	sl, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	e74b      	b.n	80006d6 <__aeabi_fmul+0x36>
 800083e:	0020      	movs	r0, r4
 8000840:	f002 f882 	bl	8002948 <__clzsi2>
 8000844:	4642      	mov	r2, r8
 8000846:	1f43      	subs	r3, r0, #5
 8000848:	409c      	lsls	r4, r3
 800084a:	1a2b      	subs	r3, r5, r0
 800084c:	3b76      	subs	r3, #118	@ 0x76
 800084e:	2100      	movs	r1, #0
 8000850:	1c5d      	adds	r5, r3, #1
 8000852:	2a0a      	cmp	r2, #10
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fmul+0x1b8>
 8000856:	e752      	b.n	80006fe <__aeabi_fmul+0x5e>
 8000858:	e780      	b.n	800075c <__aeabi_fmul+0xbc>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dd00      	ble.n	8000864 <__aeabi_fmul+0x1c4>
 8000862:	e758      	b.n	8000716 <__aeabi_fmul+0x76>
 8000864:	359e      	adds	r5, #158	@ 0x9e
 8000866:	0022      	movs	r2, r4
 8000868:	40ac      	lsls	r4, r5
 800086a:	40da      	lsrs	r2, r3
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	4322      	orrs	r2, r4
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d537      	bpl.n	80008f4 <__aeabi_fmul+0x254>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e747      	b.n	800071a <__aeabi_fmul+0x7a>
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	464a      	mov	r2, r9
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	0c24      	lsrs	r4, r4, #16
 8000892:	0027      	movs	r7, r4
 8000894:	0c10      	lsrs	r0, r2, #16
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	0c12      	lsrs	r2, r2, #16
 800089a:	4344      	muls	r4, r0
 800089c:	4357      	muls	r7, r2
 800089e:	4348      	muls	r0, r1
 80008a0:	4351      	muls	r1, r2
 80008a2:	0c3a      	lsrs	r2, r7, #16
 80008a4:	1909      	adds	r1, r1, r4
 80008a6:	1852      	adds	r2, r2, r1
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0x214>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4460      	add	r0, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	0411      	lsls	r1, r2, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19c9      	adds	r1, r1, r7
 80008bc:	018c      	lsls	r4, r1, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	0e89      	lsrs	r1, r1, #26
 80008c6:	1812      	adds	r2, r2, r0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	d50e      	bpl.n	80008f0 <__aeabi_fmul+0x250>
 80008d2:	2301      	movs	r3, #1
 80008d4:	0862      	lsrs	r2, r4, #1
 80008d6:	401c      	ands	r4, r3
 80008d8:	4314      	orrs	r4, r2
 80008da:	e749      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008dc:	003e      	movs	r6, r7
 80008de:	46a1      	mov	r9, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	464b      	mov	r3, r9
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e714      	b.n	800071a <__aeabi_fmul+0x7a>
 80008f0:	001d      	movs	r5, r3
 80008f2:	e73d      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	e70e      	b.n	800071a <__aeabi_fmul+0x7a>
 80008fc:	290f      	cmp	r1, #15
 80008fe:	d1ed      	bne.n	80008dc <__aeabi_fmul+0x23c>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	464b      	mov	r3, r9
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d0ea      	beq.n	80008e0 <__aeabi_fmul+0x240>
 800090a:	4214      	tst	r4, r2
 800090c:	d1e8      	bne.n	80008e0 <__aeabi_fmul+0x240>
 800090e:	003e      	movs	r6, r7
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	4322      	orrs	r2, r4
 8000914:	e701      	b.n	800071a <__aeabi_fmul+0x7a>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_i2f>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	2800      	cmp	r0, #0
 8000920:	d013      	beq.n	800094a <__aeabi_i2f+0x2e>
 8000922:	17c3      	asrs	r3, r0, #31
 8000924:	18c5      	adds	r5, r0, r3
 8000926:	405d      	eors	r5, r3
 8000928:	0fc4      	lsrs	r4, r0, #31
 800092a:	0028      	movs	r0, r5
 800092c:	f002 f80c 	bl	8002948 <__clzsi2>
 8000930:	239e      	movs	r3, #158	@ 0x9e
 8000932:	0001      	movs	r1, r0
 8000934:	1a1b      	subs	r3, r3, r0
 8000936:	2b96      	cmp	r3, #150	@ 0x96
 8000938:	dc0f      	bgt.n	800095a <__aeabi_i2f+0x3e>
 800093a:	2808      	cmp	r0, #8
 800093c:	d034      	beq.n	80009a8 <__aeabi_i2f+0x8c>
 800093e:	3908      	subs	r1, #8
 8000940:	408d      	lsls	r5, r1
 8000942:	026d      	lsls	r5, r5, #9
 8000944:	0a6d      	lsrs	r5, r5, #9
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	e002      	b.n	8000950 <__aeabi_i2f+0x34>
 800094a:	2400      	movs	r4, #0
 800094c:	2000      	movs	r0, #0
 800094e:	2500      	movs	r5, #0
 8000950:	05c0      	lsls	r0, r0, #23
 8000952:	4328      	orrs	r0, r5
 8000954:	07e4      	lsls	r4, r4, #31
 8000956:	4320      	orrs	r0, r4
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	2b99      	cmp	r3, #153	@ 0x99
 800095c:	dc16      	bgt.n	800098c <__aeabi_i2f+0x70>
 800095e:	1f42      	subs	r2, r0, #5
 8000960:	2805      	cmp	r0, #5
 8000962:	d000      	beq.n	8000966 <__aeabi_i2f+0x4a>
 8000964:	4095      	lsls	r5, r2
 8000966:	002a      	movs	r2, r5
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <__aeabi_i2f+0x94>)
 800096a:	4002      	ands	r2, r0
 800096c:	076e      	lsls	r6, r5, #29
 800096e:	d009      	beq.n	8000984 <__aeabi_i2f+0x68>
 8000970:	260f      	movs	r6, #15
 8000972:	4035      	ands	r5, r6
 8000974:	2d04      	cmp	r5, #4
 8000976:	d005      	beq.n	8000984 <__aeabi_i2f+0x68>
 8000978:	3204      	adds	r2, #4
 800097a:	0155      	lsls	r5, r2, #5
 800097c:	d502      	bpl.n	8000984 <__aeabi_i2f+0x68>
 800097e:	239f      	movs	r3, #159	@ 0x9f
 8000980:	4002      	ands	r2, r0
 8000982:	1a5b      	subs	r3, r3, r1
 8000984:	0192      	lsls	r2, r2, #6
 8000986:	0a55      	lsrs	r5, r2, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e7e1      	b.n	8000950 <__aeabi_i2f+0x34>
 800098c:	2205      	movs	r2, #5
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	0028      	movs	r0, r5
 8000992:	40d0      	lsrs	r0, r2
 8000994:	0002      	movs	r2, r0
 8000996:	0008      	movs	r0, r1
 8000998:	301b      	adds	r0, #27
 800099a:	4085      	lsls	r5, r0
 800099c:	0028      	movs	r0, r5
 800099e:	1e45      	subs	r5, r0, #1
 80009a0:	41a8      	sbcs	r0, r5
 80009a2:	4302      	orrs	r2, r0
 80009a4:	0015      	movs	r5, r2
 80009a6:	e7de      	b.n	8000966 <__aeabi_i2f+0x4a>
 80009a8:	026d      	lsls	r5, r5, #9
 80009aa:	2096      	movs	r0, #150	@ 0x96
 80009ac:	0a6d      	lsrs	r5, r5, #9
 80009ae:	e7cf      	b.n	8000950 <__aeabi_i2f+0x34>
 80009b0:	fbffffff 	.word	0xfbffffff

080009b4 <__aeabi_ui2f>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	1e04      	subs	r4, r0, #0
 80009b8:	d00e      	beq.n	80009d8 <__aeabi_ui2f+0x24>
 80009ba:	f001 ffc5 	bl	8002948 <__clzsi2>
 80009be:	239e      	movs	r3, #158	@ 0x9e
 80009c0:	0001      	movs	r1, r0
 80009c2:	1a1b      	subs	r3, r3, r0
 80009c4:	2b96      	cmp	r3, #150	@ 0x96
 80009c6:	dc0c      	bgt.n	80009e2 <__aeabi_ui2f+0x2e>
 80009c8:	2808      	cmp	r0, #8
 80009ca:	d02f      	beq.n	8000a2c <__aeabi_ui2f+0x78>
 80009cc:	3908      	subs	r1, #8
 80009ce:	408c      	lsls	r4, r1
 80009d0:	0264      	lsls	r4, r4, #9
 80009d2:	0a64      	lsrs	r4, r4, #9
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	e001      	b.n	80009dc <__aeabi_ui2f+0x28>
 80009d8:	2000      	movs	r0, #0
 80009da:	2400      	movs	r4, #0
 80009dc:	05c0      	lsls	r0, r0, #23
 80009de:	4320      	orrs	r0, r4
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	2b99      	cmp	r3, #153	@ 0x99
 80009e4:	dc16      	bgt.n	8000a14 <__aeabi_ui2f+0x60>
 80009e6:	1f42      	subs	r2, r0, #5
 80009e8:	2805      	cmp	r0, #5
 80009ea:	d000      	beq.n	80009ee <__aeabi_ui2f+0x3a>
 80009ec:	4094      	lsls	r4, r2
 80009ee:	0022      	movs	r2, r4
 80009f0:	4810      	ldr	r0, [pc, #64]	@ (8000a34 <__aeabi_ui2f+0x80>)
 80009f2:	4002      	ands	r2, r0
 80009f4:	0765      	lsls	r5, r4, #29
 80009f6:	d009      	beq.n	8000a0c <__aeabi_ui2f+0x58>
 80009f8:	250f      	movs	r5, #15
 80009fa:	402c      	ands	r4, r5
 80009fc:	2c04      	cmp	r4, #4
 80009fe:	d005      	beq.n	8000a0c <__aeabi_ui2f+0x58>
 8000a00:	3204      	adds	r2, #4
 8000a02:	0154      	lsls	r4, r2, #5
 8000a04:	d502      	bpl.n	8000a0c <__aeabi_ui2f+0x58>
 8000a06:	239f      	movs	r3, #159	@ 0x9f
 8000a08:	4002      	ands	r2, r0
 8000a0a:	1a5b      	subs	r3, r3, r1
 8000a0c:	0192      	lsls	r2, r2, #6
 8000a0e:	0a54      	lsrs	r4, r2, #9
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	e7e3      	b.n	80009dc <__aeabi_ui2f+0x28>
 8000a14:	0002      	movs	r2, r0
 8000a16:	0020      	movs	r0, r4
 8000a18:	321b      	adds	r2, #27
 8000a1a:	4090      	lsls	r0, r2
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	1e50      	subs	r0, r2, #1
 8000a20:	4182      	sbcs	r2, r0
 8000a22:	2005      	movs	r0, #5
 8000a24:	1a40      	subs	r0, r0, r1
 8000a26:	40c4      	lsrs	r4, r0
 8000a28:	4314      	orrs	r4, r2
 8000a2a:	e7e0      	b.n	80009ee <__aeabi_ui2f+0x3a>
 8000a2c:	0264      	lsls	r4, r4, #9
 8000a2e:	2096      	movs	r0, #150	@ 0x96
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	e7d3      	b.n	80009dc <__aeabi_ui2f+0x28>
 8000a34:	fbffffff 	.word	0xfbffffff

08000a38 <__aeabi_dadd>:
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	4657      	mov	r7, sl
 8000a3c:	464e      	mov	r6, r9
 8000a3e:	4645      	mov	r5, r8
 8000a40:	46de      	mov	lr, fp
 8000a42:	b5e0      	push	{r5, r6, r7, lr}
 8000a44:	b083      	sub	sp, #12
 8000a46:	9000      	str	r0, [sp, #0]
 8000a48:	9101      	str	r1, [sp, #4]
 8000a4a:	030c      	lsls	r4, r1, #12
 8000a4c:	004f      	lsls	r7, r1, #1
 8000a4e:	0fce      	lsrs	r6, r1, #31
 8000a50:	0a61      	lsrs	r1, r4, #9
 8000a52:	9c00      	ldr	r4, [sp, #0]
 8000a54:	031d      	lsls	r5, r3, #12
 8000a56:	0f64      	lsrs	r4, r4, #29
 8000a58:	430c      	orrs	r4, r1
 8000a5a:	9900      	ldr	r1, [sp, #0]
 8000a5c:	9200      	str	r2, [sp, #0]
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	00c8      	lsls	r0, r1, #3
 8000a62:	0059      	lsls	r1, r3, #1
 8000a64:	0d4b      	lsrs	r3, r1, #21
 8000a66:	4699      	mov	r9, r3
 8000a68:	9a00      	ldr	r2, [sp, #0]
 8000a6a:	9b01      	ldr	r3, [sp, #4]
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	0fd9      	lsrs	r1, r3, #31
 8000a70:	0f53      	lsrs	r3, r2, #29
 8000a72:	432b      	orrs	r3, r5
 8000a74:	469a      	mov	sl, r3
 8000a76:	9b00      	ldr	r3, [sp, #0]
 8000a78:	0d7f      	lsrs	r7, r7, #21
 8000a7a:	00da      	lsls	r2, r3, #3
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	464a      	mov	r2, r9
 8000a80:	46b0      	mov	r8, r6
 8000a82:	1aba      	subs	r2, r7, r2
 8000a84:	428e      	cmp	r6, r1
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x52>
 8000a88:	e0b0      	b.n	8000bec <__aeabi_dadd+0x1b4>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	dc00      	bgt.n	8000a90 <__aeabi_dadd+0x58>
 8000a8e:	e078      	b.n	8000b82 <__aeabi_dadd+0x14a>
 8000a90:	4649      	mov	r1, r9
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x60>
 8000a96:	e0e9      	b.n	8000c6c <__aeabi_dadd+0x234>
 8000a98:	49c9      	ldr	r1, [pc, #804]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000a9a:	428f      	cmp	r7, r1
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dadd+0x68>
 8000a9e:	e195      	b.n	8000dcc <__aeabi_dadd+0x394>
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	2a38      	cmp	r2, #56	@ 0x38
 8000aa4:	dc16      	bgt.n	8000ad4 <__aeabi_dadd+0x9c>
 8000aa6:	2180      	movs	r1, #128	@ 0x80
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	0409      	lsls	r1, r1, #16
 8000aac:	430b      	orrs	r3, r1
 8000aae:	469a      	mov	sl, r3
 8000ab0:	2a1f      	cmp	r2, #31
 8000ab2:	dd00      	ble.n	8000ab6 <__aeabi_dadd+0x7e>
 8000ab4:	e1e7      	b.n	8000e86 <__aeabi_dadd+0x44e>
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	4655      	mov	r5, sl
 8000aba:	1a8b      	subs	r3, r1, r2
 8000abc:	4661      	mov	r1, ip
 8000abe:	409d      	lsls	r5, r3
 8000ac0:	40d1      	lsrs	r1, r2
 8000ac2:	430d      	orrs	r5, r1
 8000ac4:	4661      	mov	r1, ip
 8000ac6:	4099      	lsls	r1, r3
 8000ac8:	1e4b      	subs	r3, r1, #1
 8000aca:	4199      	sbcs	r1, r3
 8000acc:	4653      	mov	r3, sl
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	430d      	orrs	r5, r1
 8000ad2:	1ae4      	subs	r4, r4, r3
 8000ad4:	1b45      	subs	r5, r0, r5
 8000ad6:	42a8      	cmp	r0, r5
 8000ad8:	4180      	sbcs	r0, r0
 8000ada:	4240      	negs	r0, r0
 8000adc:	1a24      	subs	r4, r4, r0
 8000ade:	0223      	lsls	r3, r4, #8
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_dadd+0xac>
 8000ae2:	e10f      	b.n	8000d04 <__aeabi_dadd+0x2cc>
 8000ae4:	0264      	lsls	r4, r4, #9
 8000ae6:	0a64      	lsrs	r4, r4, #9
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0xb6>
 8000aec:	e139      	b.n	8000d62 <__aeabi_dadd+0x32a>
 8000aee:	0020      	movs	r0, r4
 8000af0:	f001 ff2a 	bl	8002948 <__clzsi2>
 8000af4:	0003      	movs	r3, r0
 8000af6:	3b08      	subs	r3, #8
 8000af8:	2120      	movs	r1, #32
 8000afa:	0028      	movs	r0, r5
 8000afc:	1aca      	subs	r2, r1, r3
 8000afe:	40d0      	lsrs	r0, r2
 8000b00:	409c      	lsls	r4, r3
 8000b02:	0002      	movs	r2, r0
 8000b04:	409d      	lsls	r5, r3
 8000b06:	4322      	orrs	r2, r4
 8000b08:	429f      	cmp	r7, r3
 8000b0a:	dd00      	ble.n	8000b0e <__aeabi_dadd+0xd6>
 8000b0c:	e173      	b.n	8000df6 <__aeabi_dadd+0x3be>
 8000b0e:	1bd8      	subs	r0, r3, r7
 8000b10:	3001      	adds	r0, #1
 8000b12:	1a09      	subs	r1, r1, r0
 8000b14:	002c      	movs	r4, r5
 8000b16:	408d      	lsls	r5, r1
 8000b18:	40c4      	lsrs	r4, r0
 8000b1a:	1e6b      	subs	r3, r5, #1
 8000b1c:	419d      	sbcs	r5, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	40c2      	lsrs	r2, r0
 8000b22:	408b      	lsls	r3, r1
 8000b24:	4325      	orrs	r5, r4
 8000b26:	2700      	movs	r7, #0
 8000b28:	0014      	movs	r4, r2
 8000b2a:	431d      	orrs	r5, r3
 8000b2c:	076b      	lsls	r3, r5, #29
 8000b2e:	d009      	beq.n	8000b44 <__aeabi_dadd+0x10c>
 8000b30:	230f      	movs	r3, #15
 8000b32:	402b      	ands	r3, r5
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d005      	beq.n	8000b44 <__aeabi_dadd+0x10c>
 8000b38:	1d2b      	adds	r3, r5, #4
 8000b3a:	42ab      	cmp	r3, r5
 8000b3c:	41ad      	sbcs	r5, r5
 8000b3e:	426d      	negs	r5, r5
 8000b40:	1964      	adds	r4, r4, r5
 8000b42:	001d      	movs	r5, r3
 8000b44:	0223      	lsls	r3, r4, #8
 8000b46:	d400      	bmi.n	8000b4a <__aeabi_dadd+0x112>
 8000b48:	e12d      	b.n	8000da6 <__aeabi_dadd+0x36e>
 8000b4a:	4a9d      	ldr	r2, [pc, #628]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000b4c:	3701      	adds	r7, #1
 8000b4e:	4297      	cmp	r7, r2
 8000b50:	d100      	bne.n	8000b54 <__aeabi_dadd+0x11c>
 8000b52:	e0d3      	b.n	8000cfc <__aeabi_dadd+0x2c4>
 8000b54:	4646      	mov	r6, r8
 8000b56:	499b      	ldr	r1, [pc, #620]	@ (8000dc4 <__aeabi_dadd+0x38c>)
 8000b58:	08ed      	lsrs	r5, r5, #3
 8000b5a:	4021      	ands	r1, r4
 8000b5c:	074a      	lsls	r2, r1, #29
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	057c      	lsls	r4, r7, #21
 8000b62:	024d      	lsls	r5, r1, #9
 8000b64:	0b2d      	lsrs	r5, r5, #12
 8000b66:	0d64      	lsrs	r4, r4, #21
 8000b68:	0524      	lsls	r4, r4, #20
 8000b6a:	432c      	orrs	r4, r5
 8000b6c:	07f6      	lsls	r6, r6, #31
 8000b6e:	4334      	orrs	r4, r6
 8000b70:	0010      	movs	r0, r2
 8000b72:	0021      	movs	r1, r4
 8000b74:	b003      	add	sp, #12
 8000b76:	bcf0      	pop	{r4, r5, r6, r7}
 8000b78:	46bb      	mov	fp, r7
 8000b7a:	46b2      	mov	sl, r6
 8000b7c:	46a9      	mov	r9, r5
 8000b7e:	46a0      	mov	r8, r4
 8000b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x150>
 8000b86:	e084      	b.n	8000c92 <__aeabi_dadd+0x25a>
 8000b88:	464a      	mov	r2, r9
 8000b8a:	1bd2      	subs	r2, r2, r7
 8000b8c:	2f00      	cmp	r7, #0
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dadd+0x15a>
 8000b90:	e16d      	b.n	8000e6e <__aeabi_dadd+0x436>
 8000b92:	0025      	movs	r5, r4
 8000b94:	4305      	orrs	r5, r0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x162>
 8000b98:	e127      	b.n	8000dea <__aeabi_dadd+0x3b2>
 8000b9a:	1e56      	subs	r6, r2, #1
 8000b9c:	2a01      	cmp	r2, #1
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x16a>
 8000ba0:	e23b      	b.n	800101a <__aeabi_dadd+0x5e2>
 8000ba2:	4d87      	ldr	r5, [pc, #540]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000ba4:	42aa      	cmp	r2, r5
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x172>
 8000ba8:	e26a      	b.n	8001080 <__aeabi_dadd+0x648>
 8000baa:	2501      	movs	r5, #1
 8000bac:	2e38      	cmp	r6, #56	@ 0x38
 8000bae:	dc12      	bgt.n	8000bd6 <__aeabi_dadd+0x19e>
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	2a1f      	cmp	r2, #31
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dadd+0x180>
 8000bb6:	e1f8      	b.n	8000faa <__aeabi_dadd+0x572>
 8000bb8:	2620      	movs	r6, #32
 8000bba:	0025      	movs	r5, r4
 8000bbc:	1ab6      	subs	r6, r6, r2
 8000bbe:	0007      	movs	r7, r0
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	40b0      	lsls	r0, r6
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	40b5      	lsls	r5, r6
 8000bc8:	40d7      	lsrs	r7, r2
 8000bca:	1e46      	subs	r6, r0, #1
 8000bcc:	41b0      	sbcs	r0, r6
 8000bce:	1b1b      	subs	r3, r3, r4
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	433d      	orrs	r5, r7
 8000bd4:	4305      	orrs	r5, r0
 8000bd6:	4662      	mov	r2, ip
 8000bd8:	1b55      	subs	r5, r2, r5
 8000bda:	45ac      	cmp	ip, r5
 8000bdc:	4192      	sbcs	r2, r2
 8000bde:	4653      	mov	r3, sl
 8000be0:	4252      	negs	r2, r2
 8000be2:	000e      	movs	r6, r1
 8000be4:	464f      	mov	r7, r9
 8000be6:	4688      	mov	r8, r1
 8000be8:	1a9c      	subs	r4, r3, r2
 8000bea:	e778      	b.n	8000ade <__aeabi_dadd+0xa6>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	dc00      	bgt.n	8000bf2 <__aeabi_dadd+0x1ba>
 8000bf0:	e08e      	b.n	8000d10 <__aeabi_dadd+0x2d8>
 8000bf2:	4649      	mov	r1, r9
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d175      	bne.n	8000ce4 <__aeabi_dadd+0x2ac>
 8000bf8:	4661      	mov	r1, ip
 8000bfa:	4653      	mov	r3, sl
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x1ca>
 8000c00:	e0f6      	b.n	8000df0 <__aeabi_dadd+0x3b8>
 8000c02:	1e51      	subs	r1, r2, #1
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x1d2>
 8000c08:	e191      	b.n	8000f2e <__aeabi_dadd+0x4f6>
 8000c0a:	4d6d      	ldr	r5, [pc, #436]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000c0c:	42aa      	cmp	r2, r5
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x1da>
 8000c10:	e0dc      	b.n	8000dcc <__aeabi_dadd+0x394>
 8000c12:	2501      	movs	r5, #1
 8000c14:	2938      	cmp	r1, #56	@ 0x38
 8000c16:	dc14      	bgt.n	8000c42 <__aeabi_dadd+0x20a>
 8000c18:	000a      	movs	r2, r1
 8000c1a:	2a1f      	cmp	r2, #31
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_dadd+0x1e8>
 8000c1e:	e1a2      	b.n	8000f66 <__aeabi_dadd+0x52e>
 8000c20:	2120      	movs	r1, #32
 8000c22:	4653      	mov	r3, sl
 8000c24:	1a89      	subs	r1, r1, r2
 8000c26:	408b      	lsls	r3, r1
 8000c28:	001d      	movs	r5, r3
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	40d3      	lsrs	r3, r2
 8000c2e:	431d      	orrs	r5, r3
 8000c30:	4663      	mov	r3, ip
 8000c32:	408b      	lsls	r3, r1
 8000c34:	0019      	movs	r1, r3
 8000c36:	1e4b      	subs	r3, r1, #1
 8000c38:	4199      	sbcs	r1, r3
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	40d3      	lsrs	r3, r2
 8000c3e:	430d      	orrs	r5, r1
 8000c40:	18e4      	adds	r4, r4, r3
 8000c42:	182d      	adds	r5, r5, r0
 8000c44:	4285      	cmp	r5, r0
 8000c46:	4180      	sbcs	r0, r0
 8000c48:	4240      	negs	r0, r0
 8000c4a:	1824      	adds	r4, r4, r0
 8000c4c:	0223      	lsls	r3, r4, #8
 8000c4e:	d559      	bpl.n	8000d04 <__aeabi_dadd+0x2cc>
 8000c50:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000c52:	3701      	adds	r7, #1
 8000c54:	429f      	cmp	r7, r3
 8000c56:	d051      	beq.n	8000cfc <__aeabi_dadd+0x2c4>
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000dc4 <__aeabi_dadd+0x38c>)
 8000c5c:	086a      	lsrs	r2, r5, #1
 8000c5e:	401c      	ands	r4, r3
 8000c60:	4029      	ands	r1, r5
 8000c62:	430a      	orrs	r2, r1
 8000c64:	07e5      	lsls	r5, r4, #31
 8000c66:	4315      	orrs	r5, r2
 8000c68:	0864      	lsrs	r4, r4, #1
 8000c6a:	e75f      	b.n	8000b2c <__aeabi_dadd+0xf4>
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	4653      	mov	r3, sl
 8000c70:	4319      	orrs	r1, r3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x23e>
 8000c74:	e0bc      	b.n	8000df0 <__aeabi_dadd+0x3b8>
 8000c76:	1e51      	subs	r1, r2, #1
 8000c78:	2a01      	cmp	r2, #1
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x246>
 8000c7c:	e164      	b.n	8000f48 <__aeabi_dadd+0x510>
 8000c7e:	4d50      	ldr	r5, [pc, #320]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000c80:	42aa      	cmp	r2, r5
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x24e>
 8000c84:	e16a      	b.n	8000f5c <__aeabi_dadd+0x524>
 8000c86:	2501      	movs	r5, #1
 8000c88:	2938      	cmp	r1, #56	@ 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dadd+0x256>
 8000c8c:	e722      	b.n	8000ad4 <__aeabi_dadd+0x9c>
 8000c8e:	000a      	movs	r2, r1
 8000c90:	e70e      	b.n	8000ab0 <__aeabi_dadd+0x78>
 8000c92:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc8 <__aeabi_dadd+0x390>)
 8000c94:	1c7d      	adds	r5, r7, #1
 8000c96:	4215      	tst	r5, r2
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x264>
 8000c9a:	e0d0      	b.n	8000e3e <__aeabi_dadd+0x406>
 8000c9c:	0025      	movs	r5, r4
 8000c9e:	4662      	mov	r2, ip
 8000ca0:	4653      	mov	r3, sl
 8000ca2:	4305      	orrs	r5, r0
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dadd+0x274>
 8000caa:	e137      	b.n	8000f1c <__aeabi_dadd+0x4e4>
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x27a>
 8000cb0:	e1a8      	b.n	8001004 <__aeabi_dadd+0x5cc>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x280>
 8000cb6:	e16a      	b.n	8000f8e <__aeabi_dadd+0x556>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	1ac5      	subs	r5, r0, r3
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	1ae2      	subs	r2, r4, r3
 8000cc0:	42a8      	cmp	r0, r5
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	021a      	lsls	r2, r3, #8
 8000cca:	d400      	bmi.n	8000cce <__aeabi_dadd+0x296>
 8000ccc:	e203      	b.n	80010d6 <__aeabi_dadd+0x69e>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	1a1d      	subs	r5, r3, r0
 8000cd2:	45ac      	cmp	ip, r5
 8000cd4:	4192      	sbcs	r2, r2
 8000cd6:	4653      	mov	r3, sl
 8000cd8:	4252      	negs	r2, r2
 8000cda:	1b1c      	subs	r4, r3, r4
 8000cdc:	000e      	movs	r6, r1
 8000cde:	4688      	mov	r8, r1
 8000ce0:	1aa4      	subs	r4, r4, r2
 8000ce2:	e723      	b.n	8000b2c <__aeabi_dadd+0xf4>
 8000ce4:	4936      	ldr	r1, [pc, #216]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000ce6:	428f      	cmp	r7, r1
 8000ce8:	d070      	beq.n	8000dcc <__aeabi_dadd+0x394>
 8000cea:	2501      	movs	r5, #1
 8000cec:	2a38      	cmp	r2, #56	@ 0x38
 8000cee:	dca8      	bgt.n	8000c42 <__aeabi_dadd+0x20a>
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	0409      	lsls	r1, r1, #16
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	e78e      	b.n	8000c1a <__aeabi_dadd+0x1e2>
 8000cfc:	003c      	movs	r4, r7
 8000cfe:	2500      	movs	r5, #0
 8000d00:	2200      	movs	r2, #0
 8000d02:	e731      	b.n	8000b68 <__aeabi_dadd+0x130>
 8000d04:	2307      	movs	r3, #7
 8000d06:	402b      	ands	r3, r5
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dadd+0x2d6>
 8000d0c:	e710      	b.n	8000b30 <__aeabi_dadd+0xf8>
 8000d0e:	e093      	b.n	8000e38 <__aeabi_dadd+0x400>
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d074      	beq.n	8000dfe <__aeabi_dadd+0x3c6>
 8000d14:	464a      	mov	r2, r9
 8000d16:	1bd2      	subs	r2, r2, r7
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_dadd+0x2e6>
 8000d1c:	e0c7      	b.n	8000eae <__aeabi_dadd+0x476>
 8000d1e:	4928      	ldr	r1, [pc, #160]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000d20:	4589      	cmp	r9, r1
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dadd+0x2ee>
 8000d24:	e185      	b.n	8001032 <__aeabi_dadd+0x5fa>
 8000d26:	2501      	movs	r5, #1
 8000d28:	2a38      	cmp	r2, #56	@ 0x38
 8000d2a:	dc12      	bgt.n	8000d52 <__aeabi_dadd+0x31a>
 8000d2c:	2180      	movs	r1, #128	@ 0x80
 8000d2e:	0409      	lsls	r1, r1, #16
 8000d30:	430c      	orrs	r4, r1
 8000d32:	2a1f      	cmp	r2, #31
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_dadd+0x300>
 8000d36:	e1ab      	b.n	8001090 <__aeabi_dadd+0x658>
 8000d38:	2120      	movs	r1, #32
 8000d3a:	0025      	movs	r5, r4
 8000d3c:	1a89      	subs	r1, r1, r2
 8000d3e:	0007      	movs	r7, r0
 8000d40:	4088      	lsls	r0, r1
 8000d42:	408d      	lsls	r5, r1
 8000d44:	40d7      	lsrs	r7, r2
 8000d46:	1e41      	subs	r1, r0, #1
 8000d48:	4188      	sbcs	r0, r1
 8000d4a:	40d4      	lsrs	r4, r2
 8000d4c:	433d      	orrs	r5, r7
 8000d4e:	4305      	orrs	r5, r0
 8000d50:	44a2      	add	sl, r4
 8000d52:	4465      	add	r5, ip
 8000d54:	4565      	cmp	r5, ip
 8000d56:	4192      	sbcs	r2, r2
 8000d58:	4252      	negs	r2, r2
 8000d5a:	4452      	add	r2, sl
 8000d5c:	0014      	movs	r4, r2
 8000d5e:	464f      	mov	r7, r9
 8000d60:	e774      	b.n	8000c4c <__aeabi_dadd+0x214>
 8000d62:	0028      	movs	r0, r5
 8000d64:	f001 fdf0 	bl	8002948 <__clzsi2>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	2b1f      	cmp	r3, #31
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_dadd+0x33a>
 8000d70:	e6c2      	b.n	8000af8 <__aeabi_dadd+0xc0>
 8000d72:	002a      	movs	r2, r5
 8000d74:	3808      	subs	r0, #8
 8000d76:	4082      	lsls	r2, r0
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	dd00      	ble.n	8000d7e <__aeabi_dadd+0x346>
 8000d7c:	e0a9      	b.n	8000ed2 <__aeabi_dadd+0x49a>
 8000d7e:	1bdb      	subs	r3, r3, r7
 8000d80:	1c58      	adds	r0, r3, #1
 8000d82:	281f      	cmp	r0, #31
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_dadd+0x350>
 8000d86:	e1ac      	b.n	80010e2 <__aeabi_dadd+0x6aa>
 8000d88:	0015      	movs	r5, r2
 8000d8a:	3b1f      	subs	r3, #31
 8000d8c:	40dd      	lsrs	r5, r3
 8000d8e:	2820      	cmp	r0, #32
 8000d90:	d005      	beq.n	8000d9e <__aeabi_dadd+0x366>
 8000d92:	2340      	movs	r3, #64	@ 0x40
 8000d94:	1a1b      	subs	r3, r3, r0
 8000d96:	409a      	lsls	r2, r3
 8000d98:	1e53      	subs	r3, r2, #1
 8000d9a:	419a      	sbcs	r2, r3
 8000d9c:	4315      	orrs	r5, r2
 8000d9e:	2307      	movs	r3, #7
 8000da0:	2700      	movs	r7, #0
 8000da2:	402b      	ands	r3, r5
 8000da4:	e7b0      	b.n	8000d08 <__aeabi_dadd+0x2d0>
 8000da6:	08ed      	lsrs	r5, r5, #3
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <__aeabi_dadd+0x388>)
 8000daa:	0762      	lsls	r2, r4, #29
 8000dac:	432a      	orrs	r2, r5
 8000dae:	08e4      	lsrs	r4, r4, #3
 8000db0:	429f      	cmp	r7, r3
 8000db2:	d00f      	beq.n	8000dd4 <__aeabi_dadd+0x39c>
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	0b25      	lsrs	r5, r4, #12
 8000db8:	057c      	lsls	r4, r7, #21
 8000dba:	0d64      	lsrs	r4, r4, #21
 8000dbc:	e6d4      	b.n	8000b68 <__aeabi_dadd+0x130>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	ff7fffff 	.word	0xff7fffff
 8000dc8:	000007fe 	.word	0x000007fe
 8000dcc:	08c0      	lsrs	r0, r0, #3
 8000dce:	0762      	lsls	r2, r4, #29
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	08e4      	lsrs	r4, r4, #3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	4323      	orrs	r3, r4
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x3a4>
 8000dda:	e186      	b.n	80010ea <__aeabi_dadd+0x6b2>
 8000ddc:	2580      	movs	r5, #128	@ 0x80
 8000dde:	032d      	lsls	r5, r5, #12
 8000de0:	4325      	orrs	r5, r4
 8000de2:	032d      	lsls	r5, r5, #12
 8000de4:	4cc3      	ldr	r4, [pc, #780]	@ (80010f4 <__aeabi_dadd+0x6bc>)
 8000de6:	0b2d      	lsrs	r5, r5, #12
 8000de8:	e6be      	b.n	8000b68 <__aeabi_dadd+0x130>
 8000dea:	4660      	mov	r0, ip
 8000dec:	4654      	mov	r4, sl
 8000dee:	000e      	movs	r6, r1
 8000df0:	0017      	movs	r7, r2
 8000df2:	08c5      	lsrs	r5, r0, #3
 8000df4:	e7d8      	b.n	8000da8 <__aeabi_dadd+0x370>
 8000df6:	4cc0      	ldr	r4, [pc, #768]	@ (80010f8 <__aeabi_dadd+0x6c0>)
 8000df8:	1aff      	subs	r7, r7, r3
 8000dfa:	4014      	ands	r4, r2
 8000dfc:	e696      	b.n	8000b2c <__aeabi_dadd+0xf4>
 8000dfe:	4abf      	ldr	r2, [pc, #764]	@ (80010fc <__aeabi_dadd+0x6c4>)
 8000e00:	1c79      	adds	r1, r7, #1
 8000e02:	4211      	tst	r1, r2
 8000e04:	d16b      	bne.n	8000ede <__aeabi_dadd+0x4a6>
 8000e06:	0022      	movs	r2, r4
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_dadd+0x3d8>
 8000e0e:	e0db      	b.n	8000fc8 <__aeabi_dadd+0x590>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dadd+0x3de>
 8000e14:	e12d      	b.n	8001072 <__aeabi_dadd+0x63a>
 8000e16:	4662      	mov	r2, ip
 8000e18:	4653      	mov	r3, sl
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x3e8>
 8000e1e:	e0b6      	b.n	8000f8e <__aeabi_dadd+0x556>
 8000e20:	4663      	mov	r3, ip
 8000e22:	18c5      	adds	r5, r0, r3
 8000e24:	4285      	cmp	r5, r0
 8000e26:	4180      	sbcs	r0, r0
 8000e28:	4454      	add	r4, sl
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	1824      	adds	r4, r4, r0
 8000e2e:	0223      	lsls	r3, r4, #8
 8000e30:	d502      	bpl.n	8000e38 <__aeabi_dadd+0x400>
 8000e32:	000f      	movs	r7, r1
 8000e34:	4bb0      	ldr	r3, [pc, #704]	@ (80010f8 <__aeabi_dadd+0x6c0>)
 8000e36:	401c      	ands	r4, r3
 8000e38:	003a      	movs	r2, r7
 8000e3a:	0028      	movs	r0, r5
 8000e3c:	e7d8      	b.n	8000df0 <__aeabi_dadd+0x3b8>
 8000e3e:	4662      	mov	r2, ip
 8000e40:	1a85      	subs	r5, r0, r2
 8000e42:	42a8      	cmp	r0, r5
 8000e44:	4192      	sbcs	r2, r2
 8000e46:	4653      	mov	r3, sl
 8000e48:	4252      	negs	r2, r2
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	1ae3      	subs	r3, r4, r3
 8000e4e:	001a      	movs	r2, r3
 8000e50:	464b      	mov	r3, r9
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	4691      	mov	r9, r2
 8000e58:	021a      	lsls	r2, r3, #8
 8000e5a:	d454      	bmi.n	8000f06 <__aeabi_dadd+0x4ce>
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	464c      	mov	r4, r9
 8000e60:	432a      	orrs	r2, r5
 8000e62:	d000      	beq.n	8000e66 <__aeabi_dadd+0x42e>
 8000e64:	e640      	b.n	8000ae8 <__aeabi_dadd+0xb0>
 8000e66:	2600      	movs	r6, #0
 8000e68:	2400      	movs	r4, #0
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	e67c      	b.n	8000b68 <__aeabi_dadd+0x130>
 8000e6e:	4da1      	ldr	r5, [pc, #644]	@ (80010f4 <__aeabi_dadd+0x6bc>)
 8000e70:	45a9      	cmp	r9, r5
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x43e>
 8000e74:	e090      	b.n	8000f98 <__aeabi_dadd+0x560>
 8000e76:	2501      	movs	r5, #1
 8000e78:	2a38      	cmp	r2, #56	@ 0x38
 8000e7a:	dd00      	ble.n	8000e7e <__aeabi_dadd+0x446>
 8000e7c:	e6ab      	b.n	8000bd6 <__aeabi_dadd+0x19e>
 8000e7e:	2580      	movs	r5, #128	@ 0x80
 8000e80:	042d      	lsls	r5, r5, #16
 8000e82:	432c      	orrs	r4, r5
 8000e84:	e695      	b.n	8000bb2 <__aeabi_dadd+0x17a>
 8000e86:	0011      	movs	r1, r2
 8000e88:	4655      	mov	r5, sl
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cd      	lsrs	r5, r1
 8000e8e:	46a9      	mov	r9, r5
 8000e90:	2a20      	cmp	r2, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dadd+0x46a>
 8000e94:	2140      	movs	r1, #64	@ 0x40
 8000e96:	4653      	mov	r3, sl
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	4665      	mov	r5, ip
 8000ea4:	1e6b      	subs	r3, r5, #1
 8000ea6:	419d      	sbcs	r5, r3
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	431d      	orrs	r5, r3
 8000eac:	e612      	b.n	8000ad4 <__aeabi_dadd+0x9c>
 8000eae:	0021      	movs	r1, r4
 8000eb0:	4301      	orrs	r1, r0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0x47e>
 8000eb4:	e0c4      	b.n	8001040 <__aeabi_dadd+0x608>
 8000eb6:	1e51      	subs	r1, r2, #1
 8000eb8:	2a01      	cmp	r2, #1
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x486>
 8000ebc:	e0fb      	b.n	80010b6 <__aeabi_dadd+0x67e>
 8000ebe:	4d8d      	ldr	r5, [pc, #564]	@ (80010f4 <__aeabi_dadd+0x6bc>)
 8000ec0:	42aa      	cmp	r2, r5
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dadd+0x48e>
 8000ec4:	e0b5      	b.n	8001032 <__aeabi_dadd+0x5fa>
 8000ec6:	2501      	movs	r5, #1
 8000ec8:	2938      	cmp	r1, #56	@ 0x38
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0x496>
 8000ecc:	e741      	b.n	8000d52 <__aeabi_dadd+0x31a>
 8000ece:	000a      	movs	r2, r1
 8000ed0:	e72f      	b.n	8000d32 <__aeabi_dadd+0x2fa>
 8000ed2:	4c89      	ldr	r4, [pc, #548]	@ (80010f8 <__aeabi_dadd+0x6c0>)
 8000ed4:	1aff      	subs	r7, r7, r3
 8000ed6:	4014      	ands	r4, r2
 8000ed8:	0762      	lsls	r2, r4, #29
 8000eda:	08e4      	lsrs	r4, r4, #3
 8000edc:	e76a      	b.n	8000db4 <__aeabi_dadd+0x37c>
 8000ede:	4a85      	ldr	r2, [pc, #532]	@ (80010f4 <__aeabi_dadd+0x6bc>)
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x4ae>
 8000ee4:	e0e3      	b.n	80010ae <__aeabi_dadd+0x676>
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	18c2      	adds	r2, r0, r3
 8000eea:	4282      	cmp	r2, r0
 8000eec:	4180      	sbcs	r0, r0
 8000eee:	0023      	movs	r3, r4
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	4453      	add	r3, sl
 8000ef4:	181b      	adds	r3, r3, r0
 8000ef6:	07dd      	lsls	r5, r3, #31
 8000ef8:	085c      	lsrs	r4, r3, #1
 8000efa:	2307      	movs	r3, #7
 8000efc:	0852      	lsrs	r2, r2, #1
 8000efe:	4315      	orrs	r5, r2
 8000f00:	000f      	movs	r7, r1
 8000f02:	402b      	ands	r3, r5
 8000f04:	e700      	b.n	8000d08 <__aeabi_dadd+0x2d0>
 8000f06:	4663      	mov	r3, ip
 8000f08:	1a1d      	subs	r5, r3, r0
 8000f0a:	45ac      	cmp	ip, r5
 8000f0c:	4192      	sbcs	r2, r2
 8000f0e:	4653      	mov	r3, sl
 8000f10:	4252      	negs	r2, r2
 8000f12:	1b1c      	subs	r4, r3, r4
 8000f14:	000e      	movs	r6, r1
 8000f16:	4688      	mov	r8, r1
 8000f18:	1aa4      	subs	r4, r4, r2
 8000f1a:	e5e5      	b.n	8000ae8 <__aeabi_dadd+0xb0>
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_dadd+0x4ea>
 8000f20:	e091      	b.n	8001046 <__aeabi_dadd+0x60e>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d138      	bne.n	8000f98 <__aeabi_dadd+0x560>
 8000f26:	2480      	movs	r4, #128	@ 0x80
 8000f28:	2600      	movs	r6, #0
 8000f2a:	0324      	lsls	r4, r4, #12
 8000f2c:	e756      	b.n	8000ddc <__aeabi_dadd+0x3a4>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	18c5      	adds	r5, r0, r3
 8000f32:	4285      	cmp	r5, r0
 8000f34:	4180      	sbcs	r0, r0
 8000f36:	4454      	add	r4, sl
 8000f38:	4240      	negs	r0, r0
 8000f3a:	1824      	adds	r4, r4, r0
 8000f3c:	2701      	movs	r7, #1
 8000f3e:	0223      	lsls	r3, r4, #8
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_dadd+0x50c>
 8000f42:	e6df      	b.n	8000d04 <__aeabi_dadd+0x2cc>
 8000f44:	2702      	movs	r7, #2
 8000f46:	e687      	b.n	8000c58 <__aeabi_dadd+0x220>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	1ac5      	subs	r5, r0, r3
 8000f4c:	42a8      	cmp	r0, r5
 8000f4e:	4180      	sbcs	r0, r0
 8000f50:	4653      	mov	r3, sl
 8000f52:	4240      	negs	r0, r0
 8000f54:	1ae4      	subs	r4, r4, r3
 8000f56:	2701      	movs	r7, #1
 8000f58:	1a24      	subs	r4, r4, r0
 8000f5a:	e5c0      	b.n	8000ade <__aeabi_dadd+0xa6>
 8000f5c:	0762      	lsls	r2, r4, #29
 8000f5e:	08c0      	lsrs	r0, r0, #3
 8000f60:	4302      	orrs	r2, r0
 8000f62:	08e4      	lsrs	r4, r4, #3
 8000f64:	e736      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 8000f66:	0011      	movs	r1, r2
 8000f68:	4653      	mov	r3, sl
 8000f6a:	3920      	subs	r1, #32
 8000f6c:	40cb      	lsrs	r3, r1
 8000f6e:	4699      	mov	r9, r3
 8000f70:	2a20      	cmp	r2, #32
 8000f72:	d006      	beq.n	8000f82 <__aeabi_dadd+0x54a>
 8000f74:	2140      	movs	r1, #64	@ 0x40
 8000f76:	4653      	mov	r3, sl
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	4662      	mov	r2, ip
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	4694      	mov	ip, r2
 8000f82:	4665      	mov	r5, ip
 8000f84:	1e6b      	subs	r3, r5, #1
 8000f86:	419d      	sbcs	r5, r3
 8000f88:	464b      	mov	r3, r9
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	e659      	b.n	8000c42 <__aeabi_dadd+0x20a>
 8000f8e:	0762      	lsls	r2, r4, #29
 8000f90:	08c0      	lsrs	r0, r0, #3
 8000f92:	4302      	orrs	r2, r0
 8000f94:	08e4      	lsrs	r4, r4, #3
 8000f96:	e70d      	b.n	8000db4 <__aeabi_dadd+0x37c>
 8000f98:	4653      	mov	r3, sl
 8000f9a:	075a      	lsls	r2, r3, #29
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	08d8      	lsrs	r0, r3, #3
 8000fa0:	4653      	mov	r3, sl
 8000fa2:	000e      	movs	r6, r1
 8000fa4:	4302      	orrs	r2, r0
 8000fa6:	08dc      	lsrs	r4, r3, #3
 8000fa8:	e714      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 8000faa:	0015      	movs	r5, r2
 8000fac:	0026      	movs	r6, r4
 8000fae:	3d20      	subs	r5, #32
 8000fb0:	40ee      	lsrs	r6, r5
 8000fb2:	2a20      	cmp	r2, #32
 8000fb4:	d003      	beq.n	8000fbe <__aeabi_dadd+0x586>
 8000fb6:	2540      	movs	r5, #64	@ 0x40
 8000fb8:	1aaa      	subs	r2, r5, r2
 8000fba:	4094      	lsls	r4, r2
 8000fbc:	4320      	orrs	r0, r4
 8000fbe:	1e42      	subs	r2, r0, #1
 8000fc0:	4190      	sbcs	r0, r2
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4335      	orrs	r5, r6
 8000fc6:	e606      	b.n	8000bd6 <__aeabi_dadd+0x19e>
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d07c      	beq.n	80010c6 <__aeabi_dadd+0x68e>
 8000fcc:	4662      	mov	r2, ip
 8000fce:	4653      	mov	r3, sl
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x5a0>
 8000fd6:	e6fa      	b.n	8000dce <__aeabi_dadd+0x396>
 8000fd8:	0762      	lsls	r2, r4, #29
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	2280      	movs	r2, #128	@ 0x80
 8000fde:	08e4      	lsrs	r4, r4, #3
 8000fe0:	0312      	lsls	r2, r2, #12
 8000fe2:	4214      	tst	r4, r2
 8000fe4:	d008      	beq.n	8000ff8 <__aeabi_dadd+0x5c0>
 8000fe6:	08d9      	lsrs	r1, r3, #3
 8000fe8:	4211      	tst	r1, r2
 8000fea:	d105      	bne.n	8000ff8 <__aeabi_dadd+0x5c0>
 8000fec:	4663      	mov	r3, ip
 8000fee:	08d8      	lsrs	r0, r3, #3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	075b      	lsls	r3, r3, #29
 8000ff6:	4318      	orrs	r0, r3
 8000ff8:	0f42      	lsrs	r2, r0, #29
 8000ffa:	00c0      	lsls	r0, r0, #3
 8000ffc:	08c0      	lsrs	r0, r0, #3
 8000ffe:	0752      	lsls	r2, r2, #29
 8001000:	4302      	orrs	r2, r0
 8001002:	e6e7      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x5d2>
 8001008:	e72d      	b.n	8000e66 <__aeabi_dadd+0x42e>
 800100a:	4663      	mov	r3, ip
 800100c:	08d8      	lsrs	r0, r3, #3
 800100e:	4653      	mov	r3, sl
 8001010:	075a      	lsls	r2, r3, #29
 8001012:	000e      	movs	r6, r1
 8001014:	4302      	orrs	r2, r0
 8001016:	08dc      	lsrs	r4, r3, #3
 8001018:	e6cc      	b.n	8000db4 <__aeabi_dadd+0x37c>
 800101a:	4663      	mov	r3, ip
 800101c:	1a1d      	subs	r5, r3, r0
 800101e:	45ac      	cmp	ip, r5
 8001020:	4192      	sbcs	r2, r2
 8001022:	4653      	mov	r3, sl
 8001024:	4252      	negs	r2, r2
 8001026:	1b1c      	subs	r4, r3, r4
 8001028:	000e      	movs	r6, r1
 800102a:	4688      	mov	r8, r1
 800102c:	1aa4      	subs	r4, r4, r2
 800102e:	3701      	adds	r7, #1
 8001030:	e555      	b.n	8000ade <__aeabi_dadd+0xa6>
 8001032:	4663      	mov	r3, ip
 8001034:	08d9      	lsrs	r1, r3, #3
 8001036:	4653      	mov	r3, sl
 8001038:	075a      	lsls	r2, r3, #29
 800103a:	430a      	orrs	r2, r1
 800103c:	08dc      	lsrs	r4, r3, #3
 800103e:	e6c9      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 8001040:	4660      	mov	r0, ip
 8001042:	4654      	mov	r4, sl
 8001044:	e6d4      	b.n	8000df0 <__aeabi_dadd+0x3b8>
 8001046:	08c0      	lsrs	r0, r0, #3
 8001048:	2a00      	cmp	r2, #0
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x616>
 800104c:	e6bf      	b.n	8000dce <__aeabi_dadd+0x396>
 800104e:	0762      	lsls	r2, r4, #29
 8001050:	4310      	orrs	r0, r2
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	08e4      	lsrs	r4, r4, #3
 8001056:	0312      	lsls	r2, r2, #12
 8001058:	4214      	tst	r4, r2
 800105a:	d0cd      	beq.n	8000ff8 <__aeabi_dadd+0x5c0>
 800105c:	08dd      	lsrs	r5, r3, #3
 800105e:	4215      	tst	r5, r2
 8001060:	d1ca      	bne.n	8000ff8 <__aeabi_dadd+0x5c0>
 8001062:	4663      	mov	r3, ip
 8001064:	08d8      	lsrs	r0, r3, #3
 8001066:	4653      	mov	r3, sl
 8001068:	075b      	lsls	r3, r3, #29
 800106a:	000e      	movs	r6, r1
 800106c:	002c      	movs	r4, r5
 800106e:	4318      	orrs	r0, r3
 8001070:	e7c2      	b.n	8000ff8 <__aeabi_dadd+0x5c0>
 8001072:	4663      	mov	r3, ip
 8001074:	08d9      	lsrs	r1, r3, #3
 8001076:	4653      	mov	r3, sl
 8001078:	075a      	lsls	r2, r3, #29
 800107a:	430a      	orrs	r2, r1
 800107c:	08dc      	lsrs	r4, r3, #3
 800107e:	e699      	b.n	8000db4 <__aeabi_dadd+0x37c>
 8001080:	4663      	mov	r3, ip
 8001082:	08d8      	lsrs	r0, r3, #3
 8001084:	4653      	mov	r3, sl
 8001086:	075a      	lsls	r2, r3, #29
 8001088:	000e      	movs	r6, r1
 800108a:	4302      	orrs	r2, r0
 800108c:	08dc      	lsrs	r4, r3, #3
 800108e:	e6a1      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 8001090:	0011      	movs	r1, r2
 8001092:	0027      	movs	r7, r4
 8001094:	3920      	subs	r1, #32
 8001096:	40cf      	lsrs	r7, r1
 8001098:	2a20      	cmp	r2, #32
 800109a:	d003      	beq.n	80010a4 <__aeabi_dadd+0x66c>
 800109c:	2140      	movs	r1, #64	@ 0x40
 800109e:	1a8a      	subs	r2, r1, r2
 80010a0:	4094      	lsls	r4, r2
 80010a2:	4320      	orrs	r0, r4
 80010a4:	1e42      	subs	r2, r0, #1
 80010a6:	4190      	sbcs	r0, r2
 80010a8:	0005      	movs	r5, r0
 80010aa:	433d      	orrs	r5, r7
 80010ac:	e651      	b.n	8000d52 <__aeabi_dadd+0x31a>
 80010ae:	000c      	movs	r4, r1
 80010b0:	2500      	movs	r5, #0
 80010b2:	2200      	movs	r2, #0
 80010b4:	e558      	b.n	8000b68 <__aeabi_dadd+0x130>
 80010b6:	4460      	add	r0, ip
 80010b8:	4560      	cmp	r0, ip
 80010ba:	4192      	sbcs	r2, r2
 80010bc:	4454      	add	r4, sl
 80010be:	4252      	negs	r2, r2
 80010c0:	0005      	movs	r5, r0
 80010c2:	18a4      	adds	r4, r4, r2
 80010c4:	e73a      	b.n	8000f3c <__aeabi_dadd+0x504>
 80010c6:	4653      	mov	r3, sl
 80010c8:	075a      	lsls	r2, r3, #29
 80010ca:	4663      	mov	r3, ip
 80010cc:	08d9      	lsrs	r1, r3, #3
 80010ce:	4653      	mov	r3, sl
 80010d0:	430a      	orrs	r2, r1
 80010d2:	08dc      	lsrs	r4, r3, #3
 80010d4:	e67e      	b.n	8000dd4 <__aeabi_dadd+0x39c>
 80010d6:	001a      	movs	r2, r3
 80010d8:	001c      	movs	r4, r3
 80010da:	432a      	orrs	r2, r5
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x6a8>
 80010de:	e6ab      	b.n	8000e38 <__aeabi_dadd+0x400>
 80010e0:	e6c1      	b.n	8000e66 <__aeabi_dadd+0x42e>
 80010e2:	2120      	movs	r1, #32
 80010e4:	2500      	movs	r5, #0
 80010e6:	1a09      	subs	r1, r1, r0
 80010e8:	e519      	b.n	8000b1e <__aeabi_dadd+0xe6>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2500      	movs	r5, #0
 80010ee:	4c01      	ldr	r4, [pc, #4]	@ (80010f4 <__aeabi_dadd+0x6bc>)
 80010f0:	e53a      	b.n	8000b68 <__aeabi_dadd+0x130>
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	ff7fffff 	.word	0xff7fffff
 80010fc:	000007fe 	.word	0x000007fe

08001100 <__aeabi_ddiv>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	46de      	mov	lr, fp
 8001104:	4645      	mov	r5, r8
 8001106:	4657      	mov	r7, sl
 8001108:	464e      	mov	r6, r9
 800110a:	b5e0      	push	{r5, r6, r7, lr}
 800110c:	b087      	sub	sp, #28
 800110e:	9200      	str	r2, [sp, #0]
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	030b      	lsls	r3, r1, #12
 8001114:	0b1b      	lsrs	r3, r3, #12
 8001116:	469b      	mov	fp, r3
 8001118:	0fca      	lsrs	r2, r1, #31
 800111a:	004b      	lsls	r3, r1, #1
 800111c:	0004      	movs	r4, r0
 800111e:	4680      	mov	r8, r0
 8001120:	0d5b      	lsrs	r3, r3, #21
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	d100      	bne.n	8001128 <__aeabi_ddiv+0x28>
 8001126:	e16a      	b.n	80013fe <__aeabi_ddiv+0x2fe>
 8001128:	4ad4      	ldr	r2, [pc, #848]	@ (800147c <__aeabi_ddiv+0x37c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x30>
 800112e:	e18c      	b.n	800144a <__aeabi_ddiv+0x34a>
 8001130:	4659      	mov	r1, fp
 8001132:	0f42      	lsrs	r2, r0, #29
 8001134:	00c9      	lsls	r1, r1, #3
 8001136:	430a      	orrs	r2, r1
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	0409      	lsls	r1, r1, #16
 800113c:	4311      	orrs	r1, r2
 800113e:	00c2      	lsls	r2, r0, #3
 8001140:	4690      	mov	r8, r2
 8001142:	4acf      	ldr	r2, [pc, #828]	@ (8001480 <__aeabi_ddiv+0x380>)
 8001144:	4689      	mov	r9, r1
 8001146:	4692      	mov	sl, r2
 8001148:	449a      	add	sl, r3
 800114a:	2300      	movs	r3, #0
 800114c:	2400      	movs	r4, #0
 800114e:	9303      	str	r3, [sp, #12]
 8001150:	9e00      	ldr	r6, [sp, #0]
 8001152:	9f01      	ldr	r7, [sp, #4]
 8001154:	033b      	lsls	r3, r7, #12
 8001156:	0b1b      	lsrs	r3, r3, #12
 8001158:	469b      	mov	fp, r3
 800115a:	007b      	lsls	r3, r7, #1
 800115c:	0030      	movs	r0, r6
 800115e:	0d5b      	lsrs	r3, r3, #21
 8001160:	0ffd      	lsrs	r5, r7, #31
 8001162:	2b00      	cmp	r3, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x68>
 8001166:	e128      	b.n	80013ba <__aeabi_ddiv+0x2ba>
 8001168:	4ac4      	ldr	r2, [pc, #784]	@ (800147c <__aeabi_ddiv+0x37c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x70>
 800116e:	e177      	b.n	8001460 <__aeabi_ddiv+0x360>
 8001170:	4659      	mov	r1, fp
 8001172:	0f72      	lsrs	r2, r6, #29
 8001174:	00c9      	lsls	r1, r1, #3
 8001176:	430a      	orrs	r2, r1
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	0409      	lsls	r1, r1, #16
 800117c:	4311      	orrs	r1, r2
 800117e:	468b      	mov	fp, r1
 8001180:	49bf      	ldr	r1, [pc, #764]	@ (8001480 <__aeabi_ddiv+0x380>)
 8001182:	00f2      	lsls	r2, r6, #3
 8001184:	468c      	mov	ip, r1
 8001186:	4651      	mov	r1, sl
 8001188:	4463      	add	r3, ip
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	469a      	mov	sl, r3
 800118e:	2300      	movs	r3, #0
 8001190:	9e02      	ldr	r6, [sp, #8]
 8001192:	406e      	eors	r6, r5
 8001194:	2c0f      	cmp	r4, #15
 8001196:	d827      	bhi.n	80011e8 <__aeabi_ddiv+0xe8>
 8001198:	49ba      	ldr	r1, [pc, #744]	@ (8001484 <__aeabi_ddiv+0x384>)
 800119a:	00a4      	lsls	r4, r4, #2
 800119c:	5909      	ldr	r1, [r1, r4]
 800119e:	468f      	mov	pc, r1
 80011a0:	46cb      	mov	fp, r9
 80011a2:	4642      	mov	r2, r8
 80011a4:	9e02      	ldr	r6, [sp, #8]
 80011a6:	9b03      	ldr	r3, [sp, #12]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d016      	beq.n	80011da <__aeabi_ddiv+0xda>
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0xb2>
 80011b0:	e2a6      	b.n	8001700 <__aeabi_ddiv+0x600>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d000      	beq.n	80011b8 <__aeabi_ddiv+0xb8>
 80011b6:	e0df      	b.n	8001378 <__aeabi_ddiv+0x278>
 80011b8:	2200      	movs	r2, #0
 80011ba:	2300      	movs	r3, #0
 80011bc:	2400      	movs	r4, #0
 80011be:	4690      	mov	r8, r2
 80011c0:	051b      	lsls	r3, r3, #20
 80011c2:	4323      	orrs	r3, r4
 80011c4:	07f6      	lsls	r6, r6, #31
 80011c6:	4333      	orrs	r3, r6
 80011c8:	4640      	mov	r0, r8
 80011ca:	0019      	movs	r1, r3
 80011cc:	b007      	add	sp, #28
 80011ce:	bcf0      	pop	{r4, r5, r6, r7}
 80011d0:	46bb      	mov	fp, r7
 80011d2:	46b2      	mov	sl, r6
 80011d4:	46a9      	mov	r9, r5
 80011d6:	46a0      	mov	r8, r4
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	2200      	movs	r2, #0
 80011dc:	2400      	movs	r4, #0
 80011de:	4690      	mov	r8, r2
 80011e0:	4ba6      	ldr	r3, [pc, #664]	@ (800147c <__aeabi_ddiv+0x37c>)
 80011e2:	e7ed      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 80011e4:	002e      	movs	r6, r5
 80011e6:	e7df      	b.n	80011a8 <__aeabi_ddiv+0xa8>
 80011e8:	45cb      	cmp	fp, r9
 80011ea:	d200      	bcs.n	80011ee <__aeabi_ddiv+0xee>
 80011ec:	e1d4      	b.n	8001598 <__aeabi_ddiv+0x498>
 80011ee:	d100      	bne.n	80011f2 <__aeabi_ddiv+0xf2>
 80011f0:	e1cf      	b.n	8001592 <__aeabi_ddiv+0x492>
 80011f2:	2301      	movs	r3, #1
 80011f4:	425b      	negs	r3, r3
 80011f6:	469c      	mov	ip, r3
 80011f8:	4644      	mov	r4, r8
 80011fa:	4648      	mov	r0, r9
 80011fc:	2700      	movs	r7, #0
 80011fe:	44e2      	add	sl, ip
 8001200:	465b      	mov	r3, fp
 8001202:	0e15      	lsrs	r5, r2, #24
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	431d      	orrs	r5, r3
 8001208:	0c19      	lsrs	r1, r3, #16
 800120a:	042b      	lsls	r3, r5, #16
 800120c:	0212      	lsls	r2, r2, #8
 800120e:	9500      	str	r5, [sp, #0]
 8001210:	0c1d      	lsrs	r5, r3, #16
 8001212:	4691      	mov	r9, r2
 8001214:	9102      	str	r1, [sp, #8]
 8001216:	9503      	str	r5, [sp, #12]
 8001218:	f7ff f814 	bl	8000244 <__aeabi_uidivmod>
 800121c:	0002      	movs	r2, r0
 800121e:	436a      	muls	r2, r5
 8001220:	040b      	lsls	r3, r1, #16
 8001222:	0c21      	lsrs	r1, r4, #16
 8001224:	4680      	mov	r8, r0
 8001226:	4319      	orrs	r1, r3
 8001228:	428a      	cmp	r2, r1
 800122a:	d909      	bls.n	8001240 <__aeabi_ddiv+0x140>
 800122c:	9d00      	ldr	r5, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	46ac      	mov	ip, r5
 8001232:	425b      	negs	r3, r3
 8001234:	4461      	add	r1, ip
 8001236:	469c      	mov	ip, r3
 8001238:	44e0      	add	r8, ip
 800123a:	428d      	cmp	r5, r1
 800123c:	d800      	bhi.n	8001240 <__aeabi_ddiv+0x140>
 800123e:	e1fb      	b.n	8001638 <__aeabi_ddiv+0x538>
 8001240:	1a88      	subs	r0, r1, r2
 8001242:	9902      	ldr	r1, [sp, #8]
 8001244:	f7fe fffe 	bl	8000244 <__aeabi_uidivmod>
 8001248:	9a03      	ldr	r2, [sp, #12]
 800124a:	0424      	lsls	r4, r4, #16
 800124c:	4342      	muls	r2, r0
 800124e:	0409      	lsls	r1, r1, #16
 8001250:	0c24      	lsrs	r4, r4, #16
 8001252:	0003      	movs	r3, r0
 8001254:	430c      	orrs	r4, r1
 8001256:	42a2      	cmp	r2, r4
 8001258:	d906      	bls.n	8001268 <__aeabi_ddiv+0x168>
 800125a:	9900      	ldr	r1, [sp, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	468c      	mov	ip, r1
 8001260:	4464      	add	r4, ip
 8001262:	42a1      	cmp	r1, r4
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x168>
 8001266:	e1e1      	b.n	800162c <__aeabi_ddiv+0x52c>
 8001268:	1aa0      	subs	r0, r4, r2
 800126a:	4642      	mov	r2, r8
 800126c:	0412      	lsls	r2, r2, #16
 800126e:	431a      	orrs	r2, r3
 8001270:	4693      	mov	fp, r2
 8001272:	464b      	mov	r3, r9
 8001274:	4659      	mov	r1, fp
 8001276:	0c1b      	lsrs	r3, r3, #16
 8001278:	001d      	movs	r5, r3
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	040b      	lsls	r3, r1, #16
 800127e:	4649      	mov	r1, r9
 8001280:	0409      	lsls	r1, r1, #16
 8001282:	0c09      	lsrs	r1, r1, #16
 8001284:	000c      	movs	r4, r1
 8001286:	0c1b      	lsrs	r3, r3, #16
 8001288:	435c      	muls	r4, r3
 800128a:	0c12      	lsrs	r2, r2, #16
 800128c:	436b      	muls	r3, r5
 800128e:	4688      	mov	r8, r1
 8001290:	4351      	muls	r1, r2
 8001292:	436a      	muls	r2, r5
 8001294:	0c25      	lsrs	r5, r4, #16
 8001296:	46ac      	mov	ip, r5
 8001298:	185b      	adds	r3, r3, r1
 800129a:	4463      	add	r3, ip
 800129c:	4299      	cmp	r1, r3
 800129e:	d903      	bls.n	80012a8 <__aeabi_ddiv+0x1a8>
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0249      	lsls	r1, r1, #9
 80012a4:	468c      	mov	ip, r1
 80012a6:	4462      	add	r2, ip
 80012a8:	0c19      	lsrs	r1, r3, #16
 80012aa:	0424      	lsls	r4, r4, #16
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	0c24      	lsrs	r4, r4, #16
 80012b0:	188a      	adds	r2, r1, r2
 80012b2:	191c      	adds	r4, r3, r4
 80012b4:	4290      	cmp	r0, r2
 80012b6:	d302      	bcc.n	80012be <__aeabi_ddiv+0x1be>
 80012b8:	d116      	bne.n	80012e8 <__aeabi_ddiv+0x1e8>
 80012ba:	42a7      	cmp	r7, r4
 80012bc:	d214      	bcs.n	80012e8 <__aeabi_ddiv+0x1e8>
 80012be:	465b      	mov	r3, fp
 80012c0:	9d00      	ldr	r5, [sp, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	444f      	add	r7, r9
 80012c6:	9305      	str	r3, [sp, #20]
 80012c8:	454f      	cmp	r7, r9
 80012ca:	419b      	sbcs	r3, r3
 80012cc:	46ac      	mov	ip, r5
 80012ce:	425b      	negs	r3, r3
 80012d0:	4463      	add	r3, ip
 80012d2:	18c0      	adds	r0, r0, r3
 80012d4:	4285      	cmp	r5, r0
 80012d6:	d300      	bcc.n	80012da <__aeabi_ddiv+0x1da>
 80012d8:	e1a1      	b.n	800161e <__aeabi_ddiv+0x51e>
 80012da:	4282      	cmp	r2, r0
 80012dc:	d900      	bls.n	80012e0 <__aeabi_ddiv+0x1e0>
 80012de:	e1f6      	b.n	80016ce <__aeabi_ddiv+0x5ce>
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x1e4>
 80012e2:	e1f1      	b.n	80016c8 <__aeabi_ddiv+0x5c8>
 80012e4:	9b05      	ldr	r3, [sp, #20]
 80012e6:	469b      	mov	fp, r3
 80012e8:	1b3c      	subs	r4, r7, r4
 80012ea:	42a7      	cmp	r7, r4
 80012ec:	41bf      	sbcs	r7, r7
 80012ee:	9d00      	ldr	r5, [sp, #0]
 80012f0:	1a80      	subs	r0, r0, r2
 80012f2:	427f      	negs	r7, r7
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	4285      	cmp	r5, r0
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x1fc>
 80012fa:	e1d0      	b.n	800169e <__aeabi_ddiv+0x59e>
 80012fc:	9902      	ldr	r1, [sp, #8]
 80012fe:	f7fe ffa1 	bl	8000244 <__aeabi_uidivmod>
 8001302:	9a03      	ldr	r2, [sp, #12]
 8001304:	040b      	lsls	r3, r1, #16
 8001306:	4342      	muls	r2, r0
 8001308:	0c21      	lsrs	r1, r4, #16
 800130a:	0007      	movs	r7, r0
 800130c:	4319      	orrs	r1, r3
 800130e:	428a      	cmp	r2, r1
 8001310:	d900      	bls.n	8001314 <__aeabi_ddiv+0x214>
 8001312:	e178      	b.n	8001606 <__aeabi_ddiv+0x506>
 8001314:	1a88      	subs	r0, r1, r2
 8001316:	9902      	ldr	r1, [sp, #8]
 8001318:	f7fe ff94 	bl	8000244 <__aeabi_uidivmod>
 800131c:	9a03      	ldr	r2, [sp, #12]
 800131e:	0424      	lsls	r4, r4, #16
 8001320:	4342      	muls	r2, r0
 8001322:	0409      	lsls	r1, r1, #16
 8001324:	0c24      	lsrs	r4, r4, #16
 8001326:	0003      	movs	r3, r0
 8001328:	430c      	orrs	r4, r1
 800132a:	42a2      	cmp	r2, r4
 800132c:	d900      	bls.n	8001330 <__aeabi_ddiv+0x230>
 800132e:	e15d      	b.n	80015ec <__aeabi_ddiv+0x4ec>
 8001330:	4641      	mov	r1, r8
 8001332:	1aa4      	subs	r4, r4, r2
 8001334:	043a      	lsls	r2, r7, #16
 8001336:	431a      	orrs	r2, r3
 8001338:	9d04      	ldr	r5, [sp, #16]
 800133a:	0413      	lsls	r3, r2, #16
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	4359      	muls	r1, r3
 8001340:	4647      	mov	r7, r8
 8001342:	436b      	muls	r3, r5
 8001344:	469c      	mov	ip, r3
 8001346:	0c10      	lsrs	r0, r2, #16
 8001348:	4347      	muls	r7, r0
 800134a:	0c0b      	lsrs	r3, r1, #16
 800134c:	44bc      	add	ip, r7
 800134e:	4463      	add	r3, ip
 8001350:	4368      	muls	r0, r5
 8001352:	429f      	cmp	r7, r3
 8001354:	d903      	bls.n	800135e <__aeabi_ddiv+0x25e>
 8001356:	2580      	movs	r5, #128	@ 0x80
 8001358:	026d      	lsls	r5, r5, #9
 800135a:	46ac      	mov	ip, r5
 800135c:	4460      	add	r0, ip
 800135e:	0c1f      	lsrs	r7, r3, #16
 8001360:	0409      	lsls	r1, r1, #16
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	0c09      	lsrs	r1, r1, #16
 8001366:	183f      	adds	r7, r7, r0
 8001368:	185b      	adds	r3, r3, r1
 800136a:	42bc      	cmp	r4, r7
 800136c:	d200      	bcs.n	8001370 <__aeabi_ddiv+0x270>
 800136e:	e102      	b.n	8001576 <__aeabi_ddiv+0x476>
 8001370:	d100      	bne.n	8001374 <__aeabi_ddiv+0x274>
 8001372:	e0fd      	b.n	8001570 <__aeabi_ddiv+0x470>
 8001374:	2301      	movs	r3, #1
 8001376:	431a      	orrs	r2, r3
 8001378:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <__aeabi_ddiv+0x388>)
 800137a:	4453      	add	r3, sl
 800137c:	2b00      	cmp	r3, #0
 800137e:	dc00      	bgt.n	8001382 <__aeabi_ddiv+0x282>
 8001380:	e0ae      	b.n	80014e0 <__aeabi_ddiv+0x3e0>
 8001382:	0751      	lsls	r1, r2, #29
 8001384:	d000      	beq.n	8001388 <__aeabi_ddiv+0x288>
 8001386:	e198      	b.n	80016ba <__aeabi_ddiv+0x5ba>
 8001388:	4659      	mov	r1, fp
 800138a:	01c9      	lsls	r1, r1, #7
 800138c:	d506      	bpl.n	800139c <__aeabi_ddiv+0x29c>
 800138e:	4659      	mov	r1, fp
 8001390:	4b3e      	ldr	r3, [pc, #248]	@ (800148c <__aeabi_ddiv+0x38c>)
 8001392:	4019      	ands	r1, r3
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	468b      	mov	fp, r1
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4453      	add	r3, sl
 800139c:	493c      	ldr	r1, [pc, #240]	@ (8001490 <__aeabi_ddiv+0x390>)
 800139e:	428b      	cmp	r3, r1
 80013a0:	dd00      	ble.n	80013a4 <__aeabi_ddiv+0x2a4>
 80013a2:	e71a      	b.n	80011da <__aeabi_ddiv+0xda>
 80013a4:	4659      	mov	r1, fp
 80013a6:	08d2      	lsrs	r2, r2, #3
 80013a8:	0749      	lsls	r1, r1, #29
 80013aa:	4311      	orrs	r1, r2
 80013ac:	465a      	mov	r2, fp
 80013ae:	055b      	lsls	r3, r3, #21
 80013b0:	0254      	lsls	r4, r2, #9
 80013b2:	4688      	mov	r8, r1
 80013b4:	0b24      	lsrs	r4, r4, #12
 80013b6:	0d5b      	lsrs	r3, r3, #21
 80013b8:	e702      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 80013ba:	465a      	mov	r2, fp
 80013bc:	9b00      	ldr	r3, [sp, #0]
 80013be:	431a      	orrs	r2, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_ddiv+0x2c4>
 80013c2:	e07e      	b.n	80014c2 <__aeabi_ddiv+0x3c2>
 80013c4:	465b      	mov	r3, fp
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <__aeabi_ddiv+0x2cc>
 80013ca:	e100      	b.n	80015ce <__aeabi_ddiv+0x4ce>
 80013cc:	4658      	mov	r0, fp
 80013ce:	f001 fabb 	bl	8002948 <__clzsi2>
 80013d2:	0002      	movs	r2, r0
 80013d4:	0003      	movs	r3, r0
 80013d6:	3a0b      	subs	r2, #11
 80013d8:	271d      	movs	r7, #29
 80013da:	9e00      	ldr	r6, [sp, #0]
 80013dc:	1aba      	subs	r2, r7, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	4658      	mov	r0, fp
 80013e2:	40d6      	lsrs	r6, r2
 80013e4:	3908      	subs	r1, #8
 80013e6:	4088      	lsls	r0, r1
 80013e8:	0032      	movs	r2, r6
 80013ea:	4302      	orrs	r2, r0
 80013ec:	4693      	mov	fp, r2
 80013ee:	9a00      	ldr	r2, [sp, #0]
 80013f0:	408a      	lsls	r2, r1
 80013f2:	4928      	ldr	r1, [pc, #160]	@ (8001494 <__aeabi_ddiv+0x394>)
 80013f4:	4453      	add	r3, sl
 80013f6:	468a      	mov	sl, r1
 80013f8:	449a      	add	sl, r3
 80013fa:	2300      	movs	r3, #0
 80013fc:	e6c8      	b.n	8001190 <__aeabi_ddiv+0x90>
 80013fe:	465b      	mov	r3, fp
 8001400:	4303      	orrs	r3, r0
 8001402:	4699      	mov	r9, r3
 8001404:	d056      	beq.n	80014b4 <__aeabi_ddiv+0x3b4>
 8001406:	465b      	mov	r3, fp
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <__aeabi_ddiv+0x30e>
 800140c:	e0cd      	b.n	80015aa <__aeabi_ddiv+0x4aa>
 800140e:	4658      	mov	r0, fp
 8001410:	f001 fa9a 	bl	8002948 <__clzsi2>
 8001414:	230b      	movs	r3, #11
 8001416:	425b      	negs	r3, r3
 8001418:	469c      	mov	ip, r3
 800141a:	0002      	movs	r2, r0
 800141c:	4484      	add	ip, r0
 800141e:	4666      	mov	r6, ip
 8001420:	231d      	movs	r3, #29
 8001422:	1b9b      	subs	r3, r3, r6
 8001424:	0026      	movs	r6, r4
 8001426:	0011      	movs	r1, r2
 8001428:	4658      	mov	r0, fp
 800142a:	40de      	lsrs	r6, r3
 800142c:	3908      	subs	r1, #8
 800142e:	4088      	lsls	r0, r1
 8001430:	0033      	movs	r3, r6
 8001432:	4303      	orrs	r3, r0
 8001434:	4699      	mov	r9, r3
 8001436:	0023      	movs	r3, r4
 8001438:	408b      	lsls	r3, r1
 800143a:	4698      	mov	r8, r3
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <__aeabi_ddiv+0x398>)
 800143e:	2400      	movs	r4, #0
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	469a      	mov	sl, r3
 8001444:	2300      	movs	r3, #0
 8001446:	9303      	str	r3, [sp, #12]
 8001448:	e682      	b.n	8001150 <__aeabi_ddiv+0x50>
 800144a:	465a      	mov	r2, fp
 800144c:	4302      	orrs	r2, r0
 800144e:	4691      	mov	r9, r2
 8001450:	d12a      	bne.n	80014a8 <__aeabi_ddiv+0x3a8>
 8001452:	2200      	movs	r2, #0
 8001454:	469a      	mov	sl, r3
 8001456:	2302      	movs	r3, #2
 8001458:	4690      	mov	r8, r2
 800145a:	2408      	movs	r4, #8
 800145c:	9303      	str	r3, [sp, #12]
 800145e:	e677      	b.n	8001150 <__aeabi_ddiv+0x50>
 8001460:	465a      	mov	r2, fp
 8001462:	9b00      	ldr	r3, [sp, #0]
 8001464:	431a      	orrs	r2, r3
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <__aeabi_ddiv+0x39c>)
 8001468:	469c      	mov	ip, r3
 800146a:	44e2      	add	sl, ip
 800146c:	2a00      	cmp	r2, #0
 800146e:	d117      	bne.n	80014a0 <__aeabi_ddiv+0x3a0>
 8001470:	2302      	movs	r3, #2
 8001472:	431c      	orrs	r4, r3
 8001474:	2300      	movs	r3, #0
 8001476:	469b      	mov	fp, r3
 8001478:	3302      	adds	r3, #2
 800147a:	e689      	b.n	8001190 <__aeabi_ddiv+0x90>
 800147c:	000007ff 	.word	0x000007ff
 8001480:	fffffc01 	.word	0xfffffc01
 8001484:	0800aa68 	.word	0x0800aa68
 8001488:	000003ff 	.word	0x000003ff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	000007fe 	.word	0x000007fe
 8001494:	000003f3 	.word	0x000003f3
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	fffff801 	.word	0xfffff801
 80014a0:	2303      	movs	r3, #3
 80014a2:	0032      	movs	r2, r6
 80014a4:	431c      	orrs	r4, r3
 80014a6:	e673      	b.n	8001190 <__aeabi_ddiv+0x90>
 80014a8:	469a      	mov	sl, r3
 80014aa:	2303      	movs	r3, #3
 80014ac:	46d9      	mov	r9, fp
 80014ae:	240c      	movs	r4, #12
 80014b0:	9303      	str	r3, [sp, #12]
 80014b2:	e64d      	b.n	8001150 <__aeabi_ddiv+0x50>
 80014b4:	2300      	movs	r3, #0
 80014b6:	4698      	mov	r8, r3
 80014b8:	469a      	mov	sl, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	2404      	movs	r4, #4
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	e646      	b.n	8001150 <__aeabi_ddiv+0x50>
 80014c2:	2301      	movs	r3, #1
 80014c4:	431c      	orrs	r4, r3
 80014c6:	2300      	movs	r3, #0
 80014c8:	469b      	mov	fp, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	e660      	b.n	8001190 <__aeabi_ddiv+0x90>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2480      	movs	r4, #128	@ 0x80
 80014d2:	4698      	mov	r8, r3
 80014d4:	2600      	movs	r6, #0
 80014d6:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <__aeabi_ddiv+0x620>)
 80014d8:	0324      	lsls	r4, r4, #12
 80014da:	e671      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 80014dc:	2201      	movs	r2, #1
 80014de:	4252      	negs	r2, r2
 80014e0:	2101      	movs	r1, #1
 80014e2:	1ac9      	subs	r1, r1, r3
 80014e4:	2938      	cmp	r1, #56	@ 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_ddiv+0x3ea>
 80014e8:	e666      	b.n	80011b8 <__aeabi_ddiv+0xb8>
 80014ea:	291f      	cmp	r1, #31
 80014ec:	dc00      	bgt.n	80014f0 <__aeabi_ddiv+0x3f0>
 80014ee:	e0ab      	b.n	8001648 <__aeabi_ddiv+0x548>
 80014f0:	201f      	movs	r0, #31
 80014f2:	4240      	negs	r0, r0
 80014f4:	1ac3      	subs	r3, r0, r3
 80014f6:	4658      	mov	r0, fp
 80014f8:	40d8      	lsrs	r0, r3
 80014fa:	0003      	movs	r3, r0
 80014fc:	2920      	cmp	r1, #32
 80014fe:	d004      	beq.n	800150a <__aeabi_ddiv+0x40a>
 8001500:	4658      	mov	r0, fp
 8001502:	4988      	ldr	r1, [pc, #544]	@ (8001724 <__aeabi_ddiv+0x624>)
 8001504:	4451      	add	r1, sl
 8001506:	4088      	lsls	r0, r1
 8001508:	4302      	orrs	r2, r0
 800150a:	1e51      	subs	r1, r2, #1
 800150c:	418a      	sbcs	r2, r1
 800150e:	431a      	orrs	r2, r3
 8001510:	2307      	movs	r3, #7
 8001512:	0019      	movs	r1, r3
 8001514:	2400      	movs	r4, #0
 8001516:	4011      	ands	r1, r2
 8001518:	4213      	tst	r3, r2
 800151a:	d00c      	beq.n	8001536 <__aeabi_ddiv+0x436>
 800151c:	230f      	movs	r3, #15
 800151e:	4013      	ands	r3, r2
 8001520:	2b04      	cmp	r3, #4
 8001522:	d100      	bne.n	8001526 <__aeabi_ddiv+0x426>
 8001524:	e0f9      	b.n	800171a <__aeabi_ddiv+0x61a>
 8001526:	1d11      	adds	r1, r2, #4
 8001528:	4291      	cmp	r1, r2
 800152a:	419b      	sbcs	r3, r3
 800152c:	000a      	movs	r2, r1
 800152e:	425b      	negs	r3, r3
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	0b1c      	lsrs	r4, r3, #12
 8001536:	08d2      	lsrs	r2, r2, #3
 8001538:	430a      	orrs	r2, r1
 800153a:	4690      	mov	r8, r2
 800153c:	2300      	movs	r3, #0
 800153e:	e63f      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 8001540:	2480      	movs	r4, #128	@ 0x80
 8001542:	464b      	mov	r3, r9
 8001544:	0324      	lsls	r4, r4, #12
 8001546:	4223      	tst	r3, r4
 8001548:	d009      	beq.n	800155e <__aeabi_ddiv+0x45e>
 800154a:	465b      	mov	r3, fp
 800154c:	4223      	tst	r3, r4
 800154e:	d106      	bne.n	800155e <__aeabi_ddiv+0x45e>
 8001550:	431c      	orrs	r4, r3
 8001552:	0324      	lsls	r4, r4, #12
 8001554:	002e      	movs	r6, r5
 8001556:	4690      	mov	r8, r2
 8001558:	4b71      	ldr	r3, [pc, #452]	@ (8001720 <__aeabi_ddiv+0x620>)
 800155a:	0b24      	lsrs	r4, r4, #12
 800155c:	e630      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 800155e:	2480      	movs	r4, #128	@ 0x80
 8001560:	464b      	mov	r3, r9
 8001562:	0324      	lsls	r4, r4, #12
 8001564:	431c      	orrs	r4, r3
 8001566:	0324      	lsls	r4, r4, #12
 8001568:	9e02      	ldr	r6, [sp, #8]
 800156a:	4b6d      	ldr	r3, [pc, #436]	@ (8001720 <__aeabi_ddiv+0x620>)
 800156c:	0b24      	lsrs	r4, r4, #12
 800156e:	e627      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 8001570:	2b00      	cmp	r3, #0
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x476>
 8001574:	e700      	b.n	8001378 <__aeabi_ddiv+0x278>
 8001576:	9800      	ldr	r0, [sp, #0]
 8001578:	1e51      	subs	r1, r2, #1
 800157a:	4684      	mov	ip, r0
 800157c:	4464      	add	r4, ip
 800157e:	4284      	cmp	r4, r0
 8001580:	d200      	bcs.n	8001584 <__aeabi_ddiv+0x484>
 8001582:	e084      	b.n	800168e <__aeabi_ddiv+0x58e>
 8001584:	42bc      	cmp	r4, r7
 8001586:	d200      	bcs.n	800158a <__aeabi_ddiv+0x48a>
 8001588:	e0ae      	b.n	80016e8 <__aeabi_ddiv+0x5e8>
 800158a:	d100      	bne.n	800158e <__aeabi_ddiv+0x48e>
 800158c:	e0c1      	b.n	8001712 <__aeabi_ddiv+0x612>
 800158e:	000a      	movs	r2, r1
 8001590:	e6f0      	b.n	8001374 <__aeabi_ddiv+0x274>
 8001592:	4542      	cmp	r2, r8
 8001594:	d900      	bls.n	8001598 <__aeabi_ddiv+0x498>
 8001596:	e62c      	b.n	80011f2 <__aeabi_ddiv+0xf2>
 8001598:	464b      	mov	r3, r9
 800159a:	07dc      	lsls	r4, r3, #31
 800159c:	0858      	lsrs	r0, r3, #1
 800159e:	4643      	mov	r3, r8
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	431c      	orrs	r4, r3
 80015a4:	4643      	mov	r3, r8
 80015a6:	07df      	lsls	r7, r3, #31
 80015a8:	e62a      	b.n	8001200 <__aeabi_ddiv+0x100>
 80015aa:	f001 f9cd 	bl	8002948 <__clzsi2>
 80015ae:	2315      	movs	r3, #21
 80015b0:	469c      	mov	ip, r3
 80015b2:	4484      	add	ip, r0
 80015b4:	0002      	movs	r2, r0
 80015b6:	4663      	mov	r3, ip
 80015b8:	3220      	adds	r2, #32
 80015ba:	2b1c      	cmp	r3, #28
 80015bc:	dc00      	bgt.n	80015c0 <__aeabi_ddiv+0x4c0>
 80015be:	e72e      	b.n	800141e <__aeabi_ddiv+0x31e>
 80015c0:	0023      	movs	r3, r4
 80015c2:	3808      	subs	r0, #8
 80015c4:	4083      	lsls	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	4698      	mov	r8, r3
 80015cc:	e736      	b.n	800143c <__aeabi_ddiv+0x33c>
 80015ce:	f001 f9bb 	bl	8002948 <__clzsi2>
 80015d2:	0002      	movs	r2, r0
 80015d4:	0003      	movs	r3, r0
 80015d6:	3215      	adds	r2, #21
 80015d8:	3320      	adds	r3, #32
 80015da:	2a1c      	cmp	r2, #28
 80015dc:	dc00      	bgt.n	80015e0 <__aeabi_ddiv+0x4e0>
 80015de:	e6fb      	b.n	80013d8 <__aeabi_ddiv+0x2d8>
 80015e0:	9900      	ldr	r1, [sp, #0]
 80015e2:	3808      	subs	r0, #8
 80015e4:	4081      	lsls	r1, r0
 80015e6:	2200      	movs	r2, #0
 80015e8:	468b      	mov	fp, r1
 80015ea:	e702      	b.n	80013f2 <__aeabi_ddiv+0x2f2>
 80015ec:	9900      	ldr	r1, [sp, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	468c      	mov	ip, r1
 80015f2:	4464      	add	r4, ip
 80015f4:	42a1      	cmp	r1, r4
 80015f6:	d900      	bls.n	80015fa <__aeabi_ddiv+0x4fa>
 80015f8:	e69a      	b.n	8001330 <__aeabi_ddiv+0x230>
 80015fa:	42a2      	cmp	r2, r4
 80015fc:	d800      	bhi.n	8001600 <__aeabi_ddiv+0x500>
 80015fe:	e697      	b.n	8001330 <__aeabi_ddiv+0x230>
 8001600:	1e83      	subs	r3, r0, #2
 8001602:	4464      	add	r4, ip
 8001604:	e694      	b.n	8001330 <__aeabi_ddiv+0x230>
 8001606:	46ac      	mov	ip, r5
 8001608:	4461      	add	r1, ip
 800160a:	3f01      	subs	r7, #1
 800160c:	428d      	cmp	r5, r1
 800160e:	d900      	bls.n	8001612 <__aeabi_ddiv+0x512>
 8001610:	e680      	b.n	8001314 <__aeabi_ddiv+0x214>
 8001612:	428a      	cmp	r2, r1
 8001614:	d800      	bhi.n	8001618 <__aeabi_ddiv+0x518>
 8001616:	e67d      	b.n	8001314 <__aeabi_ddiv+0x214>
 8001618:	1e87      	subs	r7, r0, #2
 800161a:	4461      	add	r1, ip
 800161c:	e67a      	b.n	8001314 <__aeabi_ddiv+0x214>
 800161e:	4285      	cmp	r5, r0
 8001620:	d000      	beq.n	8001624 <__aeabi_ddiv+0x524>
 8001622:	e65f      	b.n	80012e4 <__aeabi_ddiv+0x1e4>
 8001624:	45b9      	cmp	r9, r7
 8001626:	d900      	bls.n	800162a <__aeabi_ddiv+0x52a>
 8001628:	e65c      	b.n	80012e4 <__aeabi_ddiv+0x1e4>
 800162a:	e656      	b.n	80012da <__aeabi_ddiv+0x1da>
 800162c:	42a2      	cmp	r2, r4
 800162e:	d800      	bhi.n	8001632 <__aeabi_ddiv+0x532>
 8001630:	e61a      	b.n	8001268 <__aeabi_ddiv+0x168>
 8001632:	1e83      	subs	r3, r0, #2
 8001634:	4464      	add	r4, ip
 8001636:	e617      	b.n	8001268 <__aeabi_ddiv+0x168>
 8001638:	428a      	cmp	r2, r1
 800163a:	d800      	bhi.n	800163e <__aeabi_ddiv+0x53e>
 800163c:	e600      	b.n	8001240 <__aeabi_ddiv+0x140>
 800163e:	46ac      	mov	ip, r5
 8001640:	1e83      	subs	r3, r0, #2
 8001642:	4698      	mov	r8, r3
 8001644:	4461      	add	r1, ip
 8001646:	e5fb      	b.n	8001240 <__aeabi_ddiv+0x140>
 8001648:	4837      	ldr	r0, [pc, #220]	@ (8001728 <__aeabi_ddiv+0x628>)
 800164a:	0014      	movs	r4, r2
 800164c:	4450      	add	r0, sl
 800164e:	4082      	lsls	r2, r0
 8001650:	465b      	mov	r3, fp
 8001652:	0017      	movs	r7, r2
 8001654:	4083      	lsls	r3, r0
 8001656:	40cc      	lsrs	r4, r1
 8001658:	1e7a      	subs	r2, r7, #1
 800165a:	4197      	sbcs	r7, r2
 800165c:	4323      	orrs	r3, r4
 800165e:	433b      	orrs	r3, r7
 8001660:	001a      	movs	r2, r3
 8001662:	465b      	mov	r3, fp
 8001664:	40cb      	lsrs	r3, r1
 8001666:	0751      	lsls	r1, r2, #29
 8001668:	d009      	beq.n	800167e <__aeabi_ddiv+0x57e>
 800166a:	210f      	movs	r1, #15
 800166c:	4011      	ands	r1, r2
 800166e:	2904      	cmp	r1, #4
 8001670:	d005      	beq.n	800167e <__aeabi_ddiv+0x57e>
 8001672:	1d11      	adds	r1, r2, #4
 8001674:	4291      	cmp	r1, r2
 8001676:	4192      	sbcs	r2, r2
 8001678:	4252      	negs	r2, r2
 800167a:	189b      	adds	r3, r3, r2
 800167c:	000a      	movs	r2, r1
 800167e:	0219      	lsls	r1, r3, #8
 8001680:	d400      	bmi.n	8001684 <__aeabi_ddiv+0x584>
 8001682:	e755      	b.n	8001530 <__aeabi_ddiv+0x430>
 8001684:	2200      	movs	r2, #0
 8001686:	2301      	movs	r3, #1
 8001688:	2400      	movs	r4, #0
 800168a:	4690      	mov	r8, r2
 800168c:	e598      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 800168e:	000a      	movs	r2, r1
 8001690:	42bc      	cmp	r4, r7
 8001692:	d000      	beq.n	8001696 <__aeabi_ddiv+0x596>
 8001694:	e66e      	b.n	8001374 <__aeabi_ddiv+0x274>
 8001696:	454b      	cmp	r3, r9
 8001698:	d000      	beq.n	800169c <__aeabi_ddiv+0x59c>
 800169a:	e66b      	b.n	8001374 <__aeabi_ddiv+0x274>
 800169c:	e66c      	b.n	8001378 <__aeabi_ddiv+0x278>
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <__aeabi_ddiv+0x62c>)
 80016a0:	4a23      	ldr	r2, [pc, #140]	@ (8001730 <__aeabi_ddiv+0x630>)
 80016a2:	4453      	add	r3, sl
 80016a4:	4592      	cmp	sl, r2
 80016a6:	da00      	bge.n	80016aa <__aeabi_ddiv+0x5aa>
 80016a8:	e718      	b.n	80014dc <__aeabi_ddiv+0x3dc>
 80016aa:	2101      	movs	r1, #1
 80016ac:	4249      	negs	r1, r1
 80016ae:	1d0a      	adds	r2, r1, #4
 80016b0:	428a      	cmp	r2, r1
 80016b2:	4189      	sbcs	r1, r1
 80016b4:	4249      	negs	r1, r1
 80016b6:	448b      	add	fp, r1
 80016b8:	e666      	b.n	8001388 <__aeabi_ddiv+0x288>
 80016ba:	210f      	movs	r1, #15
 80016bc:	4011      	ands	r1, r2
 80016be:	2904      	cmp	r1, #4
 80016c0:	d100      	bne.n	80016c4 <__aeabi_ddiv+0x5c4>
 80016c2:	e661      	b.n	8001388 <__aeabi_ddiv+0x288>
 80016c4:	0011      	movs	r1, r2
 80016c6:	e7f2      	b.n	80016ae <__aeabi_ddiv+0x5ae>
 80016c8:	42bc      	cmp	r4, r7
 80016ca:	d800      	bhi.n	80016ce <__aeabi_ddiv+0x5ce>
 80016cc:	e60a      	b.n	80012e4 <__aeabi_ddiv+0x1e4>
 80016ce:	2302      	movs	r3, #2
 80016d0:	425b      	negs	r3, r3
 80016d2:	469c      	mov	ip, r3
 80016d4:	9900      	ldr	r1, [sp, #0]
 80016d6:	444f      	add	r7, r9
 80016d8:	454f      	cmp	r7, r9
 80016da:	419b      	sbcs	r3, r3
 80016dc:	44e3      	add	fp, ip
 80016de:	468c      	mov	ip, r1
 80016e0:	425b      	negs	r3, r3
 80016e2:	4463      	add	r3, ip
 80016e4:	18c0      	adds	r0, r0, r3
 80016e6:	e5ff      	b.n	80012e8 <__aeabi_ddiv+0x1e8>
 80016e8:	4649      	mov	r1, r9
 80016ea:	9d00      	ldr	r5, [sp, #0]
 80016ec:	0048      	lsls	r0, r1, #1
 80016ee:	4548      	cmp	r0, r9
 80016f0:	4189      	sbcs	r1, r1
 80016f2:	46ac      	mov	ip, r5
 80016f4:	4249      	negs	r1, r1
 80016f6:	4461      	add	r1, ip
 80016f8:	4681      	mov	r9, r0
 80016fa:	3a02      	subs	r2, #2
 80016fc:	1864      	adds	r4, r4, r1
 80016fe:	e7c7      	b.n	8001690 <__aeabi_ddiv+0x590>
 8001700:	2480      	movs	r4, #128	@ 0x80
 8001702:	465b      	mov	r3, fp
 8001704:	0324      	lsls	r4, r4, #12
 8001706:	431c      	orrs	r4, r3
 8001708:	0324      	lsls	r4, r4, #12
 800170a:	4690      	mov	r8, r2
 800170c:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <__aeabi_ddiv+0x620>)
 800170e:	0b24      	lsrs	r4, r4, #12
 8001710:	e556      	b.n	80011c0 <__aeabi_ddiv+0xc0>
 8001712:	4599      	cmp	r9, r3
 8001714:	d3e8      	bcc.n	80016e8 <__aeabi_ddiv+0x5e8>
 8001716:	000a      	movs	r2, r1
 8001718:	e7bd      	b.n	8001696 <__aeabi_ddiv+0x596>
 800171a:	2300      	movs	r3, #0
 800171c:	e708      	b.n	8001530 <__aeabi_ddiv+0x430>
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	000007ff 	.word	0x000007ff
 8001724:	0000043e 	.word	0x0000043e
 8001728:	0000041e 	.word	0x0000041e
 800172c:	000003ff 	.word	0x000003ff
 8001730:	fffffc02 	.word	0xfffffc02

08001734 <__eqdf2>:
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	4657      	mov	r7, sl
 8001738:	46de      	mov	lr, fp
 800173a:	464e      	mov	r6, r9
 800173c:	4645      	mov	r5, r8
 800173e:	b5e0      	push	{r5, r6, r7, lr}
 8001740:	000d      	movs	r5, r1
 8001742:	0004      	movs	r4, r0
 8001744:	0fe8      	lsrs	r0, r5, #31
 8001746:	4683      	mov	fp, r0
 8001748:	0309      	lsls	r1, r1, #12
 800174a:	0fd8      	lsrs	r0, r3, #31
 800174c:	0b09      	lsrs	r1, r1, #12
 800174e:	4682      	mov	sl, r0
 8001750:	4819      	ldr	r0, [pc, #100]	@ (80017b8 <__eqdf2+0x84>)
 8001752:	468c      	mov	ip, r1
 8001754:	031f      	lsls	r7, r3, #12
 8001756:	0069      	lsls	r1, r5, #1
 8001758:	005e      	lsls	r6, r3, #1
 800175a:	0d49      	lsrs	r1, r1, #21
 800175c:	0b3f      	lsrs	r7, r7, #12
 800175e:	0d76      	lsrs	r6, r6, #21
 8001760:	4281      	cmp	r1, r0
 8001762:	d018      	beq.n	8001796 <__eqdf2+0x62>
 8001764:	4286      	cmp	r6, r0
 8001766:	d00f      	beq.n	8001788 <__eqdf2+0x54>
 8001768:	2001      	movs	r0, #1
 800176a:	42b1      	cmp	r1, r6
 800176c:	d10d      	bne.n	800178a <__eqdf2+0x56>
 800176e:	45bc      	cmp	ip, r7
 8001770:	d10b      	bne.n	800178a <__eqdf2+0x56>
 8001772:	4294      	cmp	r4, r2
 8001774:	d109      	bne.n	800178a <__eqdf2+0x56>
 8001776:	45d3      	cmp	fp, sl
 8001778:	d01c      	beq.n	80017b4 <__eqdf2+0x80>
 800177a:	2900      	cmp	r1, #0
 800177c:	d105      	bne.n	800178a <__eqdf2+0x56>
 800177e:	4660      	mov	r0, ip
 8001780:	4320      	orrs	r0, r4
 8001782:	1e43      	subs	r3, r0, #1
 8001784:	4198      	sbcs	r0, r3
 8001786:	e000      	b.n	800178a <__eqdf2+0x56>
 8001788:	2001      	movs	r0, #1
 800178a:	bcf0      	pop	{r4, r5, r6, r7}
 800178c:	46bb      	mov	fp, r7
 800178e:	46b2      	mov	sl, r6
 8001790:	46a9      	mov	r9, r5
 8001792:	46a0      	mov	r8, r4
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	2001      	movs	r0, #1
 8001798:	428e      	cmp	r6, r1
 800179a:	d1f6      	bne.n	800178a <__eqdf2+0x56>
 800179c:	4661      	mov	r1, ip
 800179e:	4339      	orrs	r1, r7
 80017a0:	000f      	movs	r7, r1
 80017a2:	4317      	orrs	r7, r2
 80017a4:	4327      	orrs	r7, r4
 80017a6:	d1f0      	bne.n	800178a <__eqdf2+0x56>
 80017a8:	465b      	mov	r3, fp
 80017aa:	4652      	mov	r2, sl
 80017ac:	1a98      	subs	r0, r3, r2
 80017ae:	1e43      	subs	r3, r0, #1
 80017b0:	4198      	sbcs	r0, r3
 80017b2:	e7ea      	b.n	800178a <__eqdf2+0x56>
 80017b4:	2000      	movs	r0, #0
 80017b6:	e7e8      	b.n	800178a <__eqdf2+0x56>
 80017b8:	000007ff 	.word	0x000007ff

080017bc <__gedf2>:
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	4657      	mov	r7, sl
 80017c0:	464e      	mov	r6, r9
 80017c2:	4645      	mov	r5, r8
 80017c4:	46de      	mov	lr, fp
 80017c6:	b5e0      	push	{r5, r6, r7, lr}
 80017c8:	000d      	movs	r5, r1
 80017ca:	030f      	lsls	r7, r1, #12
 80017cc:	0b39      	lsrs	r1, r7, #12
 80017ce:	b083      	sub	sp, #12
 80017d0:	0004      	movs	r4, r0
 80017d2:	4680      	mov	r8, r0
 80017d4:	9101      	str	r1, [sp, #4]
 80017d6:	0058      	lsls	r0, r3, #1
 80017d8:	0fe9      	lsrs	r1, r5, #31
 80017da:	4f31      	ldr	r7, [pc, #196]	@ (80018a0 <__gedf2+0xe4>)
 80017dc:	0d40      	lsrs	r0, r0, #21
 80017de:	468c      	mov	ip, r1
 80017e0:	006e      	lsls	r6, r5, #1
 80017e2:	0319      	lsls	r1, r3, #12
 80017e4:	4682      	mov	sl, r0
 80017e6:	4691      	mov	r9, r2
 80017e8:	0d76      	lsrs	r6, r6, #21
 80017ea:	0b09      	lsrs	r1, r1, #12
 80017ec:	0fd8      	lsrs	r0, r3, #31
 80017ee:	42be      	cmp	r6, r7
 80017f0:	d01f      	beq.n	8001832 <__gedf2+0x76>
 80017f2:	45ba      	cmp	sl, r7
 80017f4:	d00f      	beq.n	8001816 <__gedf2+0x5a>
 80017f6:	2e00      	cmp	r6, #0
 80017f8:	d12f      	bne.n	800185a <__gedf2+0x9e>
 80017fa:	4655      	mov	r5, sl
 80017fc:	9e01      	ldr	r6, [sp, #4]
 80017fe:	4334      	orrs	r4, r6
 8001800:	2d00      	cmp	r5, #0
 8001802:	d127      	bne.n	8001854 <__gedf2+0x98>
 8001804:	430a      	orrs	r2, r1
 8001806:	d03a      	beq.n	800187e <__gedf2+0xc2>
 8001808:	2c00      	cmp	r4, #0
 800180a:	d145      	bne.n	8001898 <__gedf2+0xdc>
 800180c:	2800      	cmp	r0, #0
 800180e:	d11a      	bne.n	8001846 <__gedf2+0x8a>
 8001810:	2001      	movs	r0, #1
 8001812:	4240      	negs	r0, r0
 8001814:	e017      	b.n	8001846 <__gedf2+0x8a>
 8001816:	4311      	orrs	r1, r2
 8001818:	d13b      	bne.n	8001892 <__gedf2+0xd6>
 800181a:	2e00      	cmp	r6, #0
 800181c:	d102      	bne.n	8001824 <__gedf2+0x68>
 800181e:	9f01      	ldr	r7, [sp, #4]
 8001820:	4327      	orrs	r7, r4
 8001822:	d0f3      	beq.n	800180c <__gedf2+0x50>
 8001824:	4584      	cmp	ip, r0
 8001826:	d109      	bne.n	800183c <__gedf2+0x80>
 8001828:	4663      	mov	r3, ip
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <__gedf2+0x54>
 800182e:	4660      	mov	r0, ip
 8001830:	e009      	b.n	8001846 <__gedf2+0x8a>
 8001832:	9f01      	ldr	r7, [sp, #4]
 8001834:	4327      	orrs	r7, r4
 8001836:	d12c      	bne.n	8001892 <__gedf2+0xd6>
 8001838:	45b2      	cmp	sl, r6
 800183a:	d024      	beq.n	8001886 <__gedf2+0xca>
 800183c:	4663      	mov	r3, ip
 800183e:	2002      	movs	r0, #2
 8001840:	3b01      	subs	r3, #1
 8001842:	4018      	ands	r0, r3
 8001844:	3801      	subs	r0, #1
 8001846:	b003      	add	sp, #12
 8001848:	bcf0      	pop	{r4, r5, r6, r7}
 800184a:	46bb      	mov	fp, r7
 800184c:	46b2      	mov	sl, r6
 800184e:	46a9      	mov	r9, r5
 8001850:	46a0      	mov	r8, r4
 8001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001854:	2c00      	cmp	r4, #0
 8001856:	d0d9      	beq.n	800180c <__gedf2+0x50>
 8001858:	e7e4      	b.n	8001824 <__gedf2+0x68>
 800185a:	4654      	mov	r4, sl
 800185c:	2c00      	cmp	r4, #0
 800185e:	d0ed      	beq.n	800183c <__gedf2+0x80>
 8001860:	4584      	cmp	ip, r0
 8001862:	d1eb      	bne.n	800183c <__gedf2+0x80>
 8001864:	4556      	cmp	r6, sl
 8001866:	dce9      	bgt.n	800183c <__gedf2+0x80>
 8001868:	dbde      	blt.n	8001828 <__gedf2+0x6c>
 800186a:	9b01      	ldr	r3, [sp, #4]
 800186c:	428b      	cmp	r3, r1
 800186e:	d8e5      	bhi.n	800183c <__gedf2+0x80>
 8001870:	d1da      	bne.n	8001828 <__gedf2+0x6c>
 8001872:	45c8      	cmp	r8, r9
 8001874:	d8e2      	bhi.n	800183c <__gedf2+0x80>
 8001876:	2000      	movs	r0, #0
 8001878:	45c8      	cmp	r8, r9
 800187a:	d2e4      	bcs.n	8001846 <__gedf2+0x8a>
 800187c:	e7d4      	b.n	8001828 <__gedf2+0x6c>
 800187e:	2000      	movs	r0, #0
 8001880:	2c00      	cmp	r4, #0
 8001882:	d0e0      	beq.n	8001846 <__gedf2+0x8a>
 8001884:	e7da      	b.n	800183c <__gedf2+0x80>
 8001886:	4311      	orrs	r1, r2
 8001888:	d103      	bne.n	8001892 <__gedf2+0xd6>
 800188a:	4584      	cmp	ip, r0
 800188c:	d1d6      	bne.n	800183c <__gedf2+0x80>
 800188e:	2000      	movs	r0, #0
 8001890:	e7d9      	b.n	8001846 <__gedf2+0x8a>
 8001892:	2002      	movs	r0, #2
 8001894:	4240      	negs	r0, r0
 8001896:	e7d6      	b.n	8001846 <__gedf2+0x8a>
 8001898:	4584      	cmp	ip, r0
 800189a:	d0e6      	beq.n	800186a <__gedf2+0xae>
 800189c:	e7ce      	b.n	800183c <__gedf2+0x80>
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff

080018a4 <__ledf2>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	4657      	mov	r7, sl
 80018a8:	464e      	mov	r6, r9
 80018aa:	4645      	mov	r5, r8
 80018ac:	46de      	mov	lr, fp
 80018ae:	b5e0      	push	{r5, r6, r7, lr}
 80018b0:	000d      	movs	r5, r1
 80018b2:	030f      	lsls	r7, r1, #12
 80018b4:	0004      	movs	r4, r0
 80018b6:	4680      	mov	r8, r0
 80018b8:	0fe8      	lsrs	r0, r5, #31
 80018ba:	0b39      	lsrs	r1, r7, #12
 80018bc:	4684      	mov	ip, r0
 80018be:	b083      	sub	sp, #12
 80018c0:	0058      	lsls	r0, r3, #1
 80018c2:	4f30      	ldr	r7, [pc, #192]	@ (8001984 <__ledf2+0xe0>)
 80018c4:	0d40      	lsrs	r0, r0, #21
 80018c6:	9101      	str	r1, [sp, #4]
 80018c8:	031e      	lsls	r6, r3, #12
 80018ca:	0069      	lsls	r1, r5, #1
 80018cc:	4682      	mov	sl, r0
 80018ce:	4691      	mov	r9, r2
 80018d0:	0d49      	lsrs	r1, r1, #21
 80018d2:	0b36      	lsrs	r6, r6, #12
 80018d4:	0fd8      	lsrs	r0, r3, #31
 80018d6:	42b9      	cmp	r1, r7
 80018d8:	d020      	beq.n	800191c <__ledf2+0x78>
 80018da:	45ba      	cmp	sl, r7
 80018dc:	d00f      	beq.n	80018fe <__ledf2+0x5a>
 80018de:	2900      	cmp	r1, #0
 80018e0:	d12b      	bne.n	800193a <__ledf2+0x96>
 80018e2:	9901      	ldr	r1, [sp, #4]
 80018e4:	430c      	orrs	r4, r1
 80018e6:	4651      	mov	r1, sl
 80018e8:	2900      	cmp	r1, #0
 80018ea:	d137      	bne.n	800195c <__ledf2+0xb8>
 80018ec:	4332      	orrs	r2, r6
 80018ee:	d038      	beq.n	8001962 <__ledf2+0xbe>
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	d144      	bne.n	800197e <__ledf2+0xda>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d119      	bne.n	800192c <__ledf2+0x88>
 80018f8:	2001      	movs	r0, #1
 80018fa:	4240      	negs	r0, r0
 80018fc:	e016      	b.n	800192c <__ledf2+0x88>
 80018fe:	4316      	orrs	r6, r2
 8001900:	d113      	bne.n	800192a <__ledf2+0x86>
 8001902:	2900      	cmp	r1, #0
 8001904:	d102      	bne.n	800190c <__ledf2+0x68>
 8001906:	9f01      	ldr	r7, [sp, #4]
 8001908:	4327      	orrs	r7, r4
 800190a:	d0f3      	beq.n	80018f4 <__ledf2+0x50>
 800190c:	4584      	cmp	ip, r0
 800190e:	d020      	beq.n	8001952 <__ledf2+0xae>
 8001910:	4663      	mov	r3, ip
 8001912:	2002      	movs	r0, #2
 8001914:	3b01      	subs	r3, #1
 8001916:	4018      	ands	r0, r3
 8001918:	3801      	subs	r0, #1
 800191a:	e007      	b.n	800192c <__ledf2+0x88>
 800191c:	9f01      	ldr	r7, [sp, #4]
 800191e:	4327      	orrs	r7, r4
 8001920:	d103      	bne.n	800192a <__ledf2+0x86>
 8001922:	458a      	cmp	sl, r1
 8001924:	d1f4      	bne.n	8001910 <__ledf2+0x6c>
 8001926:	4316      	orrs	r6, r2
 8001928:	d01f      	beq.n	800196a <__ledf2+0xc6>
 800192a:	2002      	movs	r0, #2
 800192c:	b003      	add	sp, #12
 800192e:	bcf0      	pop	{r4, r5, r6, r7}
 8001930:	46bb      	mov	fp, r7
 8001932:	46b2      	mov	sl, r6
 8001934:	46a9      	mov	r9, r5
 8001936:	46a0      	mov	r8, r4
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	4654      	mov	r4, sl
 800193c:	2c00      	cmp	r4, #0
 800193e:	d0e7      	beq.n	8001910 <__ledf2+0x6c>
 8001940:	4584      	cmp	ip, r0
 8001942:	d1e5      	bne.n	8001910 <__ledf2+0x6c>
 8001944:	4551      	cmp	r1, sl
 8001946:	dce3      	bgt.n	8001910 <__ledf2+0x6c>
 8001948:	db03      	blt.n	8001952 <__ledf2+0xae>
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	42b3      	cmp	r3, r6
 800194e:	d8df      	bhi.n	8001910 <__ledf2+0x6c>
 8001950:	d00f      	beq.n	8001972 <__ledf2+0xce>
 8001952:	4663      	mov	r3, ip
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0cf      	beq.n	80018f8 <__ledf2+0x54>
 8001958:	4660      	mov	r0, ip
 800195a:	e7e7      	b.n	800192c <__ledf2+0x88>
 800195c:	2c00      	cmp	r4, #0
 800195e:	d0c9      	beq.n	80018f4 <__ledf2+0x50>
 8001960:	e7d4      	b.n	800190c <__ledf2+0x68>
 8001962:	2000      	movs	r0, #0
 8001964:	2c00      	cmp	r4, #0
 8001966:	d0e1      	beq.n	800192c <__ledf2+0x88>
 8001968:	e7d2      	b.n	8001910 <__ledf2+0x6c>
 800196a:	4584      	cmp	ip, r0
 800196c:	d1d0      	bne.n	8001910 <__ledf2+0x6c>
 800196e:	2000      	movs	r0, #0
 8001970:	e7dc      	b.n	800192c <__ledf2+0x88>
 8001972:	45c8      	cmp	r8, r9
 8001974:	d8cc      	bhi.n	8001910 <__ledf2+0x6c>
 8001976:	2000      	movs	r0, #0
 8001978:	45c8      	cmp	r8, r9
 800197a:	d2d7      	bcs.n	800192c <__ledf2+0x88>
 800197c:	e7e9      	b.n	8001952 <__ledf2+0xae>
 800197e:	4584      	cmp	ip, r0
 8001980:	d0e3      	beq.n	800194a <__ledf2+0xa6>
 8001982:	e7c5      	b.n	8001910 <__ledf2+0x6c>
 8001984:	000007ff 	.word	0x000007ff

08001988 <__aeabi_dmul>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	4657      	mov	r7, sl
 800198c:	46de      	mov	lr, fp
 800198e:	464e      	mov	r6, r9
 8001990:	4645      	mov	r5, r8
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	001f      	movs	r7, r3
 8001996:	030b      	lsls	r3, r1, #12
 8001998:	0b1b      	lsrs	r3, r3, #12
 800199a:	0016      	movs	r6, r2
 800199c:	469a      	mov	sl, r3
 800199e:	0fca      	lsrs	r2, r1, #31
 80019a0:	004b      	lsls	r3, r1, #1
 80019a2:	0004      	movs	r4, r0
 80019a4:	4693      	mov	fp, r2
 80019a6:	b087      	sub	sp, #28
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	d100      	bne.n	80019ae <__aeabi_dmul+0x26>
 80019ac:	e0d5      	b.n	8001b5a <__aeabi_dmul+0x1d2>
 80019ae:	4abb      	ldr	r2, [pc, #748]	@ (8001c9c <__aeabi_dmul+0x314>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dmul+0x2e>
 80019b4:	e0f8      	b.n	8001ba8 <__aeabi_dmul+0x220>
 80019b6:	4651      	mov	r1, sl
 80019b8:	0f42      	lsrs	r2, r0, #29
 80019ba:	00c9      	lsls	r1, r1, #3
 80019bc:	430a      	orrs	r2, r1
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	0409      	lsls	r1, r1, #16
 80019c2:	4311      	orrs	r1, r2
 80019c4:	00c2      	lsls	r2, r0, #3
 80019c6:	4691      	mov	r9, r2
 80019c8:	4ab5      	ldr	r2, [pc, #724]	@ (8001ca0 <__aeabi_dmul+0x318>)
 80019ca:	468a      	mov	sl, r1
 80019cc:	189d      	adds	r5, r3, r2
 80019ce:	2300      	movs	r3, #0
 80019d0:	4698      	mov	r8, r3
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	033c      	lsls	r4, r7, #12
 80019d6:	007b      	lsls	r3, r7, #1
 80019d8:	0ffa      	lsrs	r2, r7, #31
 80019da:	0030      	movs	r0, r6
 80019dc:	0b24      	lsrs	r4, r4, #12
 80019de:	0d5b      	lsrs	r3, r3, #21
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dmul+0x5e>
 80019e4:	e096      	b.n	8001b14 <__aeabi_dmul+0x18c>
 80019e6:	4aad      	ldr	r2, [pc, #692]	@ (8001c9c <__aeabi_dmul+0x314>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d031      	beq.n	8001a50 <__aeabi_dmul+0xc8>
 80019ec:	0f72      	lsrs	r2, r6, #29
 80019ee:	00e4      	lsls	r4, r4, #3
 80019f0:	4322      	orrs	r2, r4
 80019f2:	2480      	movs	r4, #128	@ 0x80
 80019f4:	0424      	lsls	r4, r4, #16
 80019f6:	4314      	orrs	r4, r2
 80019f8:	4aa9      	ldr	r2, [pc, #676]	@ (8001ca0 <__aeabi_dmul+0x318>)
 80019fa:	00f0      	lsls	r0, r6, #3
 80019fc:	4694      	mov	ip, r2
 80019fe:	4463      	add	r3, ip
 8001a00:	195b      	adds	r3, r3, r5
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	9201      	str	r2, [sp, #4]
 8001a06:	4642      	mov	r2, r8
 8001a08:	2600      	movs	r6, #0
 8001a0a:	2a0a      	cmp	r2, #10
 8001a0c:	dc42      	bgt.n	8001a94 <__aeabi_dmul+0x10c>
 8001a0e:	465a      	mov	r2, fp
 8001a10:	9900      	ldr	r1, [sp, #0]
 8001a12:	404a      	eors	r2, r1
 8001a14:	4693      	mov	fp, r2
 8001a16:	4642      	mov	r2, r8
 8001a18:	2a02      	cmp	r2, #2
 8001a1a:	dc32      	bgt.n	8001a82 <__aeabi_dmul+0xfa>
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	2a01      	cmp	r2, #1
 8001a20:	d900      	bls.n	8001a24 <__aeabi_dmul+0x9c>
 8001a22:	e149      	b.n	8001cb8 <__aeabi_dmul+0x330>
 8001a24:	2e02      	cmp	r6, #2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dmul+0xa2>
 8001a28:	e0ca      	b.n	8001bc0 <__aeabi_dmul+0x238>
 8001a2a:	2e01      	cmp	r6, #1
 8001a2c:	d13d      	bne.n	8001aaa <__aeabi_dmul+0x122>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2400      	movs	r4, #0
 8001a32:	2200      	movs	r2, #0
 8001a34:	0010      	movs	r0, r2
 8001a36:	465a      	mov	r2, fp
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	07d2      	lsls	r2, r2, #31
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	b007      	add	sp, #28
 8001a44:	bcf0      	pop	{r4, r5, r6, r7}
 8001a46:	46bb      	mov	fp, r7
 8001a48:	46b2      	mov	sl, r6
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	46a0      	mov	r8, r4
 8001a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a50:	4b92      	ldr	r3, [pc, #584]	@ (8001c9c <__aeabi_dmul+0x314>)
 8001a52:	4326      	orrs	r6, r4
 8001a54:	18eb      	adds	r3, r5, r3
 8001a56:	2e00      	cmp	r6, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dmul+0xd4>
 8001a5a:	e0bb      	b.n	8001bd4 <__aeabi_dmul+0x24c>
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4641      	mov	r1, r8
 8001a60:	4311      	orrs	r1, r2
 8001a62:	465a      	mov	r2, fp
 8001a64:	4688      	mov	r8, r1
 8001a66:	9900      	ldr	r1, [sp, #0]
 8001a68:	404a      	eors	r2, r1
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	0109      	lsls	r1, r1, #4
 8001a6e:	468c      	mov	ip, r1
 8001a70:	0029      	movs	r1, r5
 8001a72:	4461      	add	r1, ip
 8001a74:	9101      	str	r1, [sp, #4]
 8001a76:	4641      	mov	r1, r8
 8001a78:	290a      	cmp	r1, #10
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dmul+0xf6>
 8001a7c:	e233      	b.n	8001ee6 <__aeabi_dmul+0x55e>
 8001a7e:	4693      	mov	fp, r2
 8001a80:	2603      	movs	r6, #3
 8001a82:	4642      	mov	r2, r8
 8001a84:	2701      	movs	r7, #1
 8001a86:	4097      	lsls	r7, r2
 8001a88:	21a6      	movs	r1, #166	@ 0xa6
 8001a8a:	003a      	movs	r2, r7
 8001a8c:	00c9      	lsls	r1, r1, #3
 8001a8e:	400a      	ands	r2, r1
 8001a90:	420f      	tst	r7, r1
 8001a92:	d031      	beq.n	8001af8 <__aeabi_dmul+0x170>
 8001a94:	9e02      	ldr	r6, [sp, #8]
 8001a96:	2e02      	cmp	r6, #2
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dmul+0x114>
 8001a9a:	e235      	b.n	8001f08 <__aeabi_dmul+0x580>
 8001a9c:	2e03      	cmp	r6, #3
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dmul+0x11a>
 8001aa0:	e1d2      	b.n	8001e48 <__aeabi_dmul+0x4c0>
 8001aa2:	4654      	mov	r4, sl
 8001aa4:	4648      	mov	r0, r9
 8001aa6:	2e01      	cmp	r6, #1
 8001aa8:	d0c1      	beq.n	8001a2e <__aeabi_dmul+0xa6>
 8001aaa:	9a01      	ldr	r2, [sp, #4]
 8001aac:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca4 <__aeabi_dmul+0x31c>)
 8001aae:	4694      	mov	ip, r2
 8001ab0:	4463      	add	r3, ip
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	dc00      	bgt.n	8001ab8 <__aeabi_dmul+0x130>
 8001ab6:	e0c0      	b.n	8001c3a <__aeabi_dmul+0x2b2>
 8001ab8:	0742      	lsls	r2, r0, #29
 8001aba:	d009      	beq.n	8001ad0 <__aeabi_dmul+0x148>
 8001abc:	220f      	movs	r2, #15
 8001abe:	4002      	ands	r2, r0
 8001ac0:	2a04      	cmp	r2, #4
 8001ac2:	d005      	beq.n	8001ad0 <__aeabi_dmul+0x148>
 8001ac4:	1d02      	adds	r2, r0, #4
 8001ac6:	4282      	cmp	r2, r0
 8001ac8:	4180      	sbcs	r0, r0
 8001aca:	4240      	negs	r0, r0
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	0010      	movs	r0, r2
 8001ad0:	01e2      	lsls	r2, r4, #7
 8001ad2:	d506      	bpl.n	8001ae2 <__aeabi_dmul+0x15a>
 8001ad4:	4b74      	ldr	r3, [pc, #464]	@ (8001ca8 <__aeabi_dmul+0x320>)
 8001ad6:	9a01      	ldr	r2, [sp, #4]
 8001ad8:	401c      	ands	r4, r3
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	4694      	mov	ip, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4463      	add	r3, ip
 8001ae2:	4a72      	ldr	r2, [pc, #456]	@ (8001cac <__aeabi_dmul+0x324>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	dc6b      	bgt.n	8001bc0 <__aeabi_dmul+0x238>
 8001ae8:	0762      	lsls	r2, r4, #29
 8001aea:	08c0      	lsrs	r0, r0, #3
 8001aec:	0264      	lsls	r4, r4, #9
 8001aee:	055b      	lsls	r3, r3, #21
 8001af0:	4302      	orrs	r2, r0
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d5b      	lsrs	r3, r3, #21
 8001af6:	e79d      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001af8:	2190      	movs	r1, #144	@ 0x90
 8001afa:	0089      	lsls	r1, r1, #2
 8001afc:	420f      	tst	r7, r1
 8001afe:	d163      	bne.n	8001bc8 <__aeabi_dmul+0x240>
 8001b00:	2288      	movs	r2, #136	@ 0x88
 8001b02:	423a      	tst	r2, r7
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dmul+0x180>
 8001b06:	e0d7      	b.n	8001cb8 <__aeabi_dmul+0x330>
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	46a2      	mov	sl, r4
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	4681      	mov	r9, r0
 8001b10:	9602      	str	r6, [sp, #8]
 8001b12:	e7bf      	b.n	8001a94 <__aeabi_dmul+0x10c>
 8001b14:	0023      	movs	r3, r4
 8001b16:	4333      	orrs	r3, r6
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dmul+0x194>
 8001b1a:	e07f      	b.n	8001c1c <__aeabi_dmul+0x294>
 8001b1c:	2c00      	cmp	r4, #0
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x19a>
 8001b20:	e1ad      	b.n	8001e7e <__aeabi_dmul+0x4f6>
 8001b22:	0020      	movs	r0, r4
 8001b24:	f000 ff10 	bl	8002948 <__clzsi2>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	3a0b      	subs	r2, #11
 8001b2e:	201d      	movs	r0, #29
 8001b30:	0019      	movs	r1, r3
 8001b32:	1a82      	subs	r2, r0, r2
 8001b34:	0030      	movs	r0, r6
 8001b36:	3908      	subs	r1, #8
 8001b38:	40d0      	lsrs	r0, r2
 8001b3a:	408c      	lsls	r4, r1
 8001b3c:	4304      	orrs	r4, r0
 8001b3e:	0030      	movs	r0, r6
 8001b40:	4088      	lsls	r0, r1
 8001b42:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb0 <__aeabi_dmul+0x328>)
 8001b44:	1aeb      	subs	r3, r5, r3
 8001b46:	4694      	mov	ip, r2
 8001b48:	4463      	add	r3, ip
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	9201      	str	r2, [sp, #4]
 8001b4e:	4642      	mov	r2, r8
 8001b50:	2600      	movs	r6, #0
 8001b52:	2a0a      	cmp	r2, #10
 8001b54:	dc00      	bgt.n	8001b58 <__aeabi_dmul+0x1d0>
 8001b56:	e75a      	b.n	8001a0e <__aeabi_dmul+0x86>
 8001b58:	e79c      	b.n	8001a94 <__aeabi_dmul+0x10c>
 8001b5a:	4653      	mov	r3, sl
 8001b5c:	4303      	orrs	r3, r0
 8001b5e:	4699      	mov	r9, r3
 8001b60:	d054      	beq.n	8001c0c <__aeabi_dmul+0x284>
 8001b62:	4653      	mov	r3, sl
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dmul+0x1e2>
 8001b68:	e177      	b.n	8001e5a <__aeabi_dmul+0x4d2>
 8001b6a:	4650      	mov	r0, sl
 8001b6c:	f000 feec 	bl	8002948 <__clzsi2>
 8001b70:	230b      	movs	r3, #11
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	0002      	movs	r2, r0
 8001b78:	4484      	add	ip, r0
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	4650      	mov	r0, sl
 8001b7e:	3908      	subs	r1, #8
 8001b80:	4088      	lsls	r0, r1
 8001b82:	231d      	movs	r3, #29
 8001b84:	4680      	mov	r8, r0
 8001b86:	4660      	mov	r0, ip
 8001b88:	1a1b      	subs	r3, r3, r0
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	40d8      	lsrs	r0, r3
 8001b8e:	0003      	movs	r3, r0
 8001b90:	4640      	mov	r0, r8
 8001b92:	4303      	orrs	r3, r0
 8001b94:	469a      	mov	sl, r3
 8001b96:	0023      	movs	r3, r4
 8001b98:	408b      	lsls	r3, r1
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4d44      	ldr	r5, [pc, #272]	@ (8001cb0 <__aeabi_dmul+0x328>)
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	1aad      	subs	r5, r5, r2
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	e715      	b.n	80019d4 <__aeabi_dmul+0x4c>
 8001ba8:	4652      	mov	r2, sl
 8001baa:	4302      	orrs	r2, r0
 8001bac:	4691      	mov	r9, r2
 8001bae:	d126      	bne.n	8001bfe <__aeabi_dmul+0x276>
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	001d      	movs	r5, r3
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	4692      	mov	sl, r2
 8001bb8:	3208      	adds	r2, #8
 8001bba:	4690      	mov	r8, r2
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	e709      	b.n	80019d4 <__aeabi_dmul+0x4c>
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <__aeabi_dmul+0x314>)
 8001bc6:	e735      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2480      	movs	r4, #128	@ 0x80
 8001bcc:	469b      	mov	fp, r3
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <__aeabi_dmul+0x314>)
 8001bd2:	e72f      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4641      	mov	r1, r8
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	4694      	mov	ip, r2
 8001be0:	002a      	movs	r2, r5
 8001be2:	4462      	add	r2, ip
 8001be4:	4688      	mov	r8, r1
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	290a      	cmp	r1, #10
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dmul+0x266>
 8001bec:	e752      	b.n	8001a94 <__aeabi_dmul+0x10c>
 8001bee:	465a      	mov	r2, fp
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	9900      	ldr	r1, [sp, #0]
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	404a      	eors	r2, r1
 8001bf8:	4693      	mov	fp, r2
 8001bfa:	2602      	movs	r6, #2
 8001bfc:	e70b      	b.n	8001a16 <__aeabi_dmul+0x8e>
 8001bfe:	220c      	movs	r2, #12
 8001c00:	001d      	movs	r5, r3
 8001c02:	2303      	movs	r3, #3
 8001c04:	4681      	mov	r9, r0
 8001c06:	4690      	mov	r8, r2
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	e6e3      	b.n	80019d4 <__aeabi_dmul+0x4c>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	3304      	adds	r3, #4
 8001c12:	4698      	mov	r8, r3
 8001c14:	3b03      	subs	r3, #3
 8001c16:	2500      	movs	r5, #0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	e6db      	b.n	80019d4 <__aeabi_dmul+0x4c>
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	3301      	adds	r3, #1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	002b      	movs	r3, r5
 8001c24:	4690      	mov	r8, r2
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	9201      	str	r2, [sp, #4]
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	2000      	movs	r0, #0
 8001c30:	2601      	movs	r6, #1
 8001c32:	2a0a      	cmp	r2, #10
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_dmul+0x2b0>
 8001c36:	e6ea      	b.n	8001a0e <__aeabi_dmul+0x86>
 8001c38:	e72c      	b.n	8001a94 <__aeabi_dmul+0x10c>
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	2a38      	cmp	r2, #56	@ 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dmul+0x2bc>
 8001c42:	e6f4      	b.n	8001a2e <__aeabi_dmul+0xa6>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dmul+0x2c2>
 8001c48:	e12a      	b.n	8001ea0 <__aeabi_dmul+0x518>
 8001c4a:	211f      	movs	r1, #31
 8001c4c:	4249      	negs	r1, r1
 8001c4e:	1acb      	subs	r3, r1, r3
 8001c50:	0021      	movs	r1, r4
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	000b      	movs	r3, r1
 8001c56:	2a20      	cmp	r2, #32
 8001c58:	d005      	beq.n	8001c66 <__aeabi_dmul+0x2de>
 8001c5a:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <__aeabi_dmul+0x32c>)
 8001c5c:	9d01      	ldr	r5, [sp, #4]
 8001c5e:	4694      	mov	ip, r2
 8001c60:	4465      	add	r5, ip
 8001c62:	40ac      	lsls	r4, r5
 8001c64:	4320      	orrs	r0, r4
 8001c66:	1e42      	subs	r2, r0, #1
 8001c68:	4190      	sbcs	r0, r2
 8001c6a:	4318      	orrs	r0, r3
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	0019      	movs	r1, r3
 8001c70:	2400      	movs	r4, #0
 8001c72:	4001      	ands	r1, r0
 8001c74:	4203      	tst	r3, r0
 8001c76:	d00c      	beq.n	8001c92 <__aeabi_dmul+0x30a>
 8001c78:	230f      	movs	r3, #15
 8001c7a:	4003      	ands	r3, r0
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dmul+0x2fa>
 8001c80:	e140      	b.n	8001f04 <__aeabi_dmul+0x57c>
 8001c82:	1d03      	adds	r3, r0, #4
 8001c84:	4283      	cmp	r3, r0
 8001c86:	41a4      	sbcs	r4, r4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	4264      	negs	r4, r4
 8001c8c:	0761      	lsls	r1, r4, #29
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	0b24      	lsrs	r4, r4, #12
 8001c92:	08c2      	lsrs	r2, r0, #3
 8001c94:	2300      	movs	r3, #0
 8001c96:	430a      	orrs	r2, r1
 8001c98:	e6cc      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	000007ff 	.word	0x000007ff
 8001ca0:	fffffc01 	.word	0xfffffc01
 8001ca4:	000003ff 	.word	0x000003ff
 8001ca8:	feffffff 	.word	0xfeffffff
 8001cac:	000007fe 	.word	0x000007fe
 8001cb0:	fffffc0d 	.word	0xfffffc0d
 8001cb4:	0000043e 	.word	0x0000043e
 8001cb8:	4649      	mov	r1, r9
 8001cba:	464a      	mov	r2, r9
 8001cbc:	0409      	lsls	r1, r1, #16
 8001cbe:	0c09      	lsrs	r1, r1, #16
 8001cc0:	000d      	movs	r5, r1
 8001cc2:	0c16      	lsrs	r6, r2, #16
 8001cc4:	0c02      	lsrs	r2, r0, #16
 8001cc6:	0400      	lsls	r0, r0, #16
 8001cc8:	0c00      	lsrs	r0, r0, #16
 8001cca:	4345      	muls	r5, r0
 8001ccc:	46ac      	mov	ip, r5
 8001cce:	0005      	movs	r5, r0
 8001cd0:	4375      	muls	r5, r6
 8001cd2:	46a8      	mov	r8, r5
 8001cd4:	0015      	movs	r5, r2
 8001cd6:	000f      	movs	r7, r1
 8001cd8:	4375      	muls	r5, r6
 8001cda:	9200      	str	r2, [sp, #0]
 8001cdc:	9502      	str	r5, [sp, #8]
 8001cde:	002a      	movs	r2, r5
 8001ce0:	9d00      	ldr	r5, [sp, #0]
 8001ce2:	436f      	muls	r7, r5
 8001ce4:	4665      	mov	r5, ip
 8001ce6:	0c2d      	lsrs	r5, r5, #16
 8001ce8:	46a9      	mov	r9, r5
 8001cea:	4447      	add	r7, r8
 8001cec:	444f      	add	r7, r9
 8001cee:	45b8      	cmp	r8, r7
 8001cf0:	d905      	bls.n	8001cfe <__aeabi_dmul+0x376>
 8001cf2:	0015      	movs	r5, r2
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	0252      	lsls	r2, r2, #9
 8001cf8:	4690      	mov	r8, r2
 8001cfa:	4445      	add	r5, r8
 8001cfc:	9502      	str	r5, [sp, #8]
 8001cfe:	0c3d      	lsrs	r5, r7, #16
 8001d00:	9503      	str	r5, [sp, #12]
 8001d02:	4665      	mov	r5, ip
 8001d04:	042d      	lsls	r5, r5, #16
 8001d06:	043f      	lsls	r7, r7, #16
 8001d08:	0c2d      	lsrs	r5, r5, #16
 8001d0a:	46ac      	mov	ip, r5
 8001d0c:	003d      	movs	r5, r7
 8001d0e:	4465      	add	r5, ip
 8001d10:	9504      	str	r5, [sp, #16]
 8001d12:	0c25      	lsrs	r5, r4, #16
 8001d14:	0424      	lsls	r4, r4, #16
 8001d16:	0c24      	lsrs	r4, r4, #16
 8001d18:	46ac      	mov	ip, r5
 8001d1a:	0025      	movs	r5, r4
 8001d1c:	4375      	muls	r5, r6
 8001d1e:	46a8      	mov	r8, r5
 8001d20:	4665      	mov	r5, ip
 8001d22:	000f      	movs	r7, r1
 8001d24:	4369      	muls	r1, r5
 8001d26:	4441      	add	r1, r8
 8001d28:	4689      	mov	r9, r1
 8001d2a:	4367      	muls	r7, r4
 8001d2c:	0c39      	lsrs	r1, r7, #16
 8001d2e:	4449      	add	r1, r9
 8001d30:	436e      	muls	r6, r5
 8001d32:	4588      	cmp	r8, r1
 8001d34:	d903      	bls.n	8001d3e <__aeabi_dmul+0x3b6>
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	0252      	lsls	r2, r2, #9
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4446      	add	r6, r8
 8001d3e:	0c0d      	lsrs	r5, r1, #16
 8001d40:	46a8      	mov	r8, r5
 8001d42:	0035      	movs	r5, r6
 8001d44:	4445      	add	r5, r8
 8001d46:	9505      	str	r5, [sp, #20]
 8001d48:	9d03      	ldr	r5, [sp, #12]
 8001d4a:	043f      	lsls	r7, r7, #16
 8001d4c:	46a8      	mov	r8, r5
 8001d4e:	0c3f      	lsrs	r7, r7, #16
 8001d50:	0409      	lsls	r1, r1, #16
 8001d52:	19c9      	adds	r1, r1, r7
 8001d54:	4488      	add	r8, r1
 8001d56:	4645      	mov	r5, r8
 8001d58:	9503      	str	r5, [sp, #12]
 8001d5a:	4655      	mov	r5, sl
 8001d5c:	042e      	lsls	r6, r5, #16
 8001d5e:	0c36      	lsrs	r6, r6, #16
 8001d60:	0c2f      	lsrs	r7, r5, #16
 8001d62:	0035      	movs	r5, r6
 8001d64:	4345      	muls	r5, r0
 8001d66:	4378      	muls	r0, r7
 8001d68:	4681      	mov	r9, r0
 8001d6a:	0038      	movs	r0, r7
 8001d6c:	46a8      	mov	r8, r5
 8001d6e:	0c2d      	lsrs	r5, r5, #16
 8001d70:	46aa      	mov	sl, r5
 8001d72:	9a00      	ldr	r2, [sp, #0]
 8001d74:	4350      	muls	r0, r2
 8001d76:	4372      	muls	r2, r6
 8001d78:	444a      	add	r2, r9
 8001d7a:	4452      	add	r2, sl
 8001d7c:	4591      	cmp	r9, r2
 8001d7e:	d903      	bls.n	8001d88 <__aeabi_dmul+0x400>
 8001d80:	2580      	movs	r5, #128	@ 0x80
 8001d82:	026d      	lsls	r5, r5, #9
 8001d84:	46a9      	mov	r9, r5
 8001d86:	4448      	add	r0, r9
 8001d88:	0c15      	lsrs	r5, r2, #16
 8001d8a:	46a9      	mov	r9, r5
 8001d8c:	4645      	mov	r5, r8
 8001d8e:	042d      	lsls	r5, r5, #16
 8001d90:	0c2d      	lsrs	r5, r5, #16
 8001d92:	46a8      	mov	r8, r5
 8001d94:	4665      	mov	r5, ip
 8001d96:	437d      	muls	r5, r7
 8001d98:	0412      	lsls	r2, r2, #16
 8001d9a:	4448      	add	r0, r9
 8001d9c:	4490      	add	r8, r2
 8001d9e:	46a9      	mov	r9, r5
 8001da0:	0032      	movs	r2, r6
 8001da2:	4665      	mov	r5, ip
 8001da4:	4362      	muls	r2, r4
 8001da6:	436e      	muls	r6, r5
 8001da8:	437c      	muls	r4, r7
 8001daa:	0c17      	lsrs	r7, r2, #16
 8001dac:	1936      	adds	r6, r6, r4
 8001dae:	19bf      	adds	r7, r7, r6
 8001db0:	42bc      	cmp	r4, r7
 8001db2:	d903      	bls.n	8001dbc <__aeabi_dmul+0x434>
 8001db4:	2480      	movs	r4, #128	@ 0x80
 8001db6:	0264      	lsls	r4, r4, #9
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44e1      	add	r9, ip
 8001dbc:	9c02      	ldr	r4, [sp, #8]
 8001dbe:	9e03      	ldr	r6, [sp, #12]
 8001dc0:	46a4      	mov	ip, r4
 8001dc2:	9d05      	ldr	r5, [sp, #20]
 8001dc4:	4466      	add	r6, ip
 8001dc6:	428e      	cmp	r6, r1
 8001dc8:	4189      	sbcs	r1, r1
 8001dca:	46ac      	mov	ip, r5
 8001dcc:	0412      	lsls	r2, r2, #16
 8001dce:	043c      	lsls	r4, r7, #16
 8001dd0:	0c12      	lsrs	r2, r2, #16
 8001dd2:	18a2      	adds	r2, r4, r2
 8001dd4:	4462      	add	r2, ip
 8001dd6:	4249      	negs	r1, r1
 8001dd8:	1854      	adds	r4, r2, r1
 8001dda:	4446      	add	r6, r8
 8001ddc:	46a4      	mov	ip, r4
 8001dde:	4546      	cmp	r6, r8
 8001de0:	41a4      	sbcs	r4, r4
 8001de2:	4682      	mov	sl, r0
 8001de4:	4264      	negs	r4, r4
 8001de6:	46a0      	mov	r8, r4
 8001de8:	42aa      	cmp	r2, r5
 8001dea:	4192      	sbcs	r2, r2
 8001dec:	458c      	cmp	ip, r1
 8001dee:	4189      	sbcs	r1, r1
 8001df0:	44e2      	add	sl, ip
 8001df2:	44d0      	add	r8, sl
 8001df4:	4249      	negs	r1, r1
 8001df6:	4252      	negs	r2, r2
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	45a0      	cmp	r8, r4
 8001dfc:	41a4      	sbcs	r4, r4
 8001dfe:	4582      	cmp	sl, r0
 8001e00:	4189      	sbcs	r1, r1
 8001e02:	4264      	negs	r4, r4
 8001e04:	4249      	negs	r1, r1
 8001e06:	430c      	orrs	r4, r1
 8001e08:	4641      	mov	r1, r8
 8001e0a:	0c3f      	lsrs	r7, r7, #16
 8001e0c:	19d2      	adds	r2, r2, r7
 8001e0e:	1912      	adds	r2, r2, r4
 8001e10:	0dcc      	lsrs	r4, r1, #23
 8001e12:	9904      	ldr	r1, [sp, #16]
 8001e14:	0270      	lsls	r0, r6, #9
 8001e16:	4308      	orrs	r0, r1
 8001e18:	1e41      	subs	r1, r0, #1
 8001e1a:	4188      	sbcs	r0, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	444a      	add	r2, r9
 8001e20:	0df6      	lsrs	r6, r6, #23
 8001e22:	0252      	lsls	r2, r2, #9
 8001e24:	4330      	orrs	r0, r6
 8001e26:	0249      	lsls	r1, r1, #9
 8001e28:	4314      	orrs	r4, r2
 8001e2a:	4308      	orrs	r0, r1
 8001e2c:	01d2      	lsls	r2, r2, #7
 8001e2e:	d535      	bpl.n	8001e9c <__aeabi_dmul+0x514>
 8001e30:	2201      	movs	r2, #1
 8001e32:	0843      	lsrs	r3, r0, #1
 8001e34:	4002      	ands	r2, r0
 8001e36:	4313      	orrs	r3, r2
 8001e38:	07e0      	lsls	r0, r4, #31
 8001e3a:	4318      	orrs	r0, r3
 8001e3c:	0864      	lsrs	r4, r4, #1
 8001e3e:	e634      	b.n	8001aaa <__aeabi_dmul+0x122>
 8001e40:	9b00      	ldr	r3, [sp, #0]
 8001e42:	46a2      	mov	sl, r4
 8001e44:	469b      	mov	fp, r3
 8001e46:	4681      	mov	r9, r0
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	4653      	mov	r3, sl
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	431c      	orrs	r4, r3
 8001e50:	0324      	lsls	r4, r4, #12
 8001e52:	464a      	mov	r2, r9
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <__aeabi_dmul+0x588>)
 8001e56:	0b24      	lsrs	r4, r4, #12
 8001e58:	e5ec      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001e5a:	f000 fd75 	bl	8002948 <__clzsi2>
 8001e5e:	2315      	movs	r3, #21
 8001e60:	469c      	mov	ip, r3
 8001e62:	4484      	add	ip, r0
 8001e64:	0002      	movs	r2, r0
 8001e66:	4663      	mov	r3, ip
 8001e68:	3220      	adds	r2, #32
 8001e6a:	2b1c      	cmp	r3, #28
 8001e6c:	dc00      	bgt.n	8001e70 <__aeabi_dmul+0x4e8>
 8001e6e:	e684      	b.n	8001b7a <__aeabi_dmul+0x1f2>
 8001e70:	2300      	movs	r3, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	0023      	movs	r3, r4
 8001e76:	3808      	subs	r0, #8
 8001e78:	4083      	lsls	r3, r0
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	e68e      	b.n	8001b9c <__aeabi_dmul+0x214>
 8001e7e:	f000 fd63 	bl	8002948 <__clzsi2>
 8001e82:	0002      	movs	r2, r0
 8001e84:	0003      	movs	r3, r0
 8001e86:	3215      	adds	r2, #21
 8001e88:	3320      	adds	r3, #32
 8001e8a:	2a1c      	cmp	r2, #28
 8001e8c:	dc00      	bgt.n	8001e90 <__aeabi_dmul+0x508>
 8001e8e:	e64e      	b.n	8001b2e <__aeabi_dmul+0x1a6>
 8001e90:	0002      	movs	r2, r0
 8001e92:	0034      	movs	r4, r6
 8001e94:	3a08      	subs	r2, #8
 8001e96:	2000      	movs	r0, #0
 8001e98:	4094      	lsls	r4, r2
 8001e9a:	e652      	b.n	8001b42 <__aeabi_dmul+0x1ba>
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	e604      	b.n	8001aaa <__aeabi_dmul+0x122>
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <__aeabi_dmul+0x58c>)
 8001ea2:	0021      	movs	r1, r4
 8001ea4:	469c      	mov	ip, r3
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	9d01      	ldr	r5, [sp, #4]
 8001eaa:	40d3      	lsrs	r3, r2
 8001eac:	4465      	add	r5, ip
 8001eae:	40a9      	lsls	r1, r5
 8001eb0:	4319      	orrs	r1, r3
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	40ab      	lsls	r3, r5
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	4183      	sbcs	r3, r0
 8001eba:	4319      	orrs	r1, r3
 8001ebc:	0008      	movs	r0, r1
 8001ebe:	40d4      	lsrs	r4, r2
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	d009      	beq.n	8001ed8 <__aeabi_dmul+0x550>
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d005      	beq.n	8001ed8 <__aeabi_dmul+0x550>
 8001ecc:	1d0b      	adds	r3, r1, #4
 8001ece:	428b      	cmp	r3, r1
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	4240      	negs	r0, r0
 8001ed4:	1824      	adds	r4, r4, r0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	0223      	lsls	r3, r4, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dmul+0x556>
 8001edc:	e6d6      	b.n	8001c8c <__aeabi_dmul+0x304>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e5a6      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001ee6:	290f      	cmp	r1, #15
 8001ee8:	d1aa      	bne.n	8001e40 <__aeabi_dmul+0x4b8>
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	4652      	mov	r2, sl
 8001eee:	031b      	lsls	r3, r3, #12
 8001ef0:	421a      	tst	r2, r3
 8001ef2:	d0a9      	beq.n	8001e48 <__aeabi_dmul+0x4c0>
 8001ef4:	421c      	tst	r4, r3
 8001ef6:	d1a7      	bne.n	8001e48 <__aeabi_dmul+0x4c0>
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	9b00      	ldr	r3, [sp, #0]
 8001efc:	0002      	movs	r2, r0
 8001efe:	469b      	mov	fp, r3
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <__aeabi_dmul+0x588>)
 8001f02:	e597      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001f04:	2400      	movs	r4, #0
 8001f06:	e6c1      	b.n	8001c8c <__aeabi_dmul+0x304>
 8001f08:	2400      	movs	r4, #0
 8001f0a:	4b01      	ldr	r3, [pc, #4]	@ (8001f10 <__aeabi_dmul+0x588>)
 8001f0c:	0022      	movs	r2, r4
 8001f0e:	e591      	b.n	8001a34 <__aeabi_dmul+0xac>
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	0000041e 	.word	0x0000041e

08001f18 <__aeabi_dsub>:
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	464e      	mov	r6, r9
 8001f1c:	4645      	mov	r5, r8
 8001f1e:	46de      	mov	lr, fp
 8001f20:	4657      	mov	r7, sl
 8001f22:	b5e0      	push	{r5, r6, r7, lr}
 8001f24:	b085      	sub	sp, #20
 8001f26:	9000      	str	r0, [sp, #0]
 8001f28:	9101      	str	r1, [sp, #4]
 8001f2a:	030c      	lsls	r4, r1, #12
 8001f2c:	004f      	lsls	r7, r1, #1
 8001f2e:	0fce      	lsrs	r6, r1, #31
 8001f30:	0a61      	lsrs	r1, r4, #9
 8001f32:	9c00      	ldr	r4, [sp, #0]
 8001f34:	46b0      	mov	r8, r6
 8001f36:	0f64      	lsrs	r4, r4, #29
 8001f38:	430c      	orrs	r4, r1
 8001f3a:	9900      	ldr	r1, [sp, #0]
 8001f3c:	0d7f      	lsrs	r7, r7, #21
 8001f3e:	00c8      	lsls	r0, r1, #3
 8001f40:	0011      	movs	r1, r2
 8001f42:	001a      	movs	r2, r3
 8001f44:	031b      	lsls	r3, r3, #12
 8001f46:	469c      	mov	ip, r3
 8001f48:	9100      	str	r1, [sp, #0]
 8001f4a:	9201      	str	r2, [sp, #4]
 8001f4c:	0051      	lsls	r1, r2, #1
 8001f4e:	0d4b      	lsrs	r3, r1, #21
 8001f50:	4699      	mov	r9, r3
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	9d00      	ldr	r5, [sp, #0]
 8001f56:	0fd9      	lsrs	r1, r3, #31
 8001f58:	4663      	mov	r3, ip
 8001f5a:	0f6a      	lsrs	r2, r5, #29
 8001f5c:	0a5b      	lsrs	r3, r3, #9
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	00ea      	lsls	r2, r5, #3
 8001f62:	4694      	mov	ip, r2
 8001f64:	4693      	mov	fp, r2
 8001f66:	4ac1      	ldr	r2, [pc, #772]	@ (800226c <__aeabi_dsub+0x354>)
 8001f68:	9003      	str	r0, [sp, #12]
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	4591      	cmp	r9, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x5a>
 8001f70:	e0cd      	b.n	800210e <__aeabi_dsub+0x1f6>
 8001f72:	2501      	movs	r5, #1
 8001f74:	4069      	eors	r1, r5
 8001f76:	464d      	mov	r5, r9
 8001f78:	1b7d      	subs	r5, r7, r5
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	428e      	cmp	r6, r1
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x6a>
 8001f80:	e080      	b.n	8002084 <__aeabi_dsub+0x16c>
 8001f82:	2d00      	cmp	r5, #0
 8001f84:	dc00      	bgt.n	8001f88 <__aeabi_dsub+0x70>
 8001f86:	e335      	b.n	80025f4 <__aeabi_dsub+0x6dc>
 8001f88:	4649      	mov	r1, r9
 8001f8a:	2900      	cmp	r1, #0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x78>
 8001f8e:	e0df      	b.n	8002150 <__aeabi_dsub+0x238>
 8001f90:	4297      	cmp	r7, r2
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x7e>
 8001f94:	e194      	b.n	80022c0 <__aeabi_dsub+0x3a8>
 8001f96:	4652      	mov	r2, sl
 8001f98:	2501      	movs	r5, #1
 8001f9a:	2a38      	cmp	r2, #56	@ 0x38
 8001f9c:	dc19      	bgt.n	8001fd2 <__aeabi_dsub+0xba>
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	9b02      	ldr	r3, [sp, #8]
 8001fa2:	0412      	lsls	r2, r2, #16
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	4652      	mov	r2, sl
 8001faa:	2a1f      	cmp	r2, #31
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0x98>
 8001fae:	e1e3      	b.n	8002378 <__aeabi_dsub+0x460>
 8001fb0:	4653      	mov	r3, sl
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	9d02      	ldr	r5, [sp, #8]
 8001fb8:	1ad2      	subs	r2, r2, r3
 8001fba:	4095      	lsls	r5, r2
 8001fbc:	40d9      	lsrs	r1, r3
 8001fbe:	430d      	orrs	r5, r1
 8001fc0:	4661      	mov	r1, ip
 8001fc2:	4091      	lsls	r1, r2
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	1e51      	subs	r1, r2, #1
 8001fc8:	418a      	sbcs	r2, r1
 8001fca:	4315      	orrs	r5, r2
 8001fcc:	9a02      	ldr	r2, [sp, #8]
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	1aa4      	subs	r4, r4, r2
 8001fd2:	1b45      	subs	r5, r0, r5
 8001fd4:	42a8      	cmp	r0, r5
 8001fd6:	4180      	sbcs	r0, r0
 8001fd8:	4240      	negs	r0, r0
 8001fda:	1a24      	subs	r4, r4, r0
 8001fdc:	0223      	lsls	r3, r4, #8
 8001fde:	d400      	bmi.n	8001fe2 <__aeabi_dsub+0xca>
 8001fe0:	e13d      	b.n	800225e <__aeabi_dsub+0x346>
 8001fe2:	0264      	lsls	r4, r4, #9
 8001fe4:	0a64      	lsrs	r4, r4, #9
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0xd4>
 8001fea:	e147      	b.n	800227c <__aeabi_dsub+0x364>
 8001fec:	0020      	movs	r0, r4
 8001fee:	f000 fcab 	bl	8002948 <__clzsi2>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	1aca      	subs	r2, r1, r3
 8001ffc:	40d0      	lsrs	r0, r2
 8001ffe:	409c      	lsls	r4, r3
 8002000:	0002      	movs	r2, r0
 8002002:	409d      	lsls	r5, r3
 8002004:	4322      	orrs	r2, r4
 8002006:	429f      	cmp	r7, r3
 8002008:	dd00      	ble.n	800200c <__aeabi_dsub+0xf4>
 800200a:	e177      	b.n	80022fc <__aeabi_dsub+0x3e4>
 800200c:	1bd8      	subs	r0, r3, r7
 800200e:	3001      	adds	r0, #1
 8002010:	1a09      	subs	r1, r1, r0
 8002012:	002c      	movs	r4, r5
 8002014:	408d      	lsls	r5, r1
 8002016:	40c4      	lsrs	r4, r0
 8002018:	1e6b      	subs	r3, r5, #1
 800201a:	419d      	sbcs	r5, r3
 800201c:	0013      	movs	r3, r2
 800201e:	40c2      	lsrs	r2, r0
 8002020:	408b      	lsls	r3, r1
 8002022:	4325      	orrs	r5, r4
 8002024:	2700      	movs	r7, #0
 8002026:	0014      	movs	r4, r2
 8002028:	431d      	orrs	r5, r3
 800202a:	076b      	lsls	r3, r5, #29
 800202c:	d009      	beq.n	8002042 <__aeabi_dsub+0x12a>
 800202e:	230f      	movs	r3, #15
 8002030:	402b      	ands	r3, r5
 8002032:	2b04      	cmp	r3, #4
 8002034:	d005      	beq.n	8002042 <__aeabi_dsub+0x12a>
 8002036:	1d2b      	adds	r3, r5, #4
 8002038:	42ab      	cmp	r3, r5
 800203a:	41ad      	sbcs	r5, r5
 800203c:	426d      	negs	r5, r5
 800203e:	1964      	adds	r4, r4, r5
 8002040:	001d      	movs	r5, r3
 8002042:	0223      	lsls	r3, r4, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x130>
 8002046:	e140      	b.n	80022ca <__aeabi_dsub+0x3b2>
 8002048:	4a88      	ldr	r2, [pc, #544]	@ (800226c <__aeabi_dsub+0x354>)
 800204a:	3701      	adds	r7, #1
 800204c:	4297      	cmp	r7, r2
 800204e:	d100      	bne.n	8002052 <__aeabi_dsub+0x13a>
 8002050:	e101      	b.n	8002256 <__aeabi_dsub+0x33e>
 8002052:	2601      	movs	r6, #1
 8002054:	4643      	mov	r3, r8
 8002056:	4986      	ldr	r1, [pc, #536]	@ (8002270 <__aeabi_dsub+0x358>)
 8002058:	08ed      	lsrs	r5, r5, #3
 800205a:	4021      	ands	r1, r4
 800205c:	074a      	lsls	r2, r1, #29
 800205e:	432a      	orrs	r2, r5
 8002060:	057c      	lsls	r4, r7, #21
 8002062:	024d      	lsls	r5, r1, #9
 8002064:	0b2d      	lsrs	r5, r5, #12
 8002066:	0d64      	lsrs	r4, r4, #21
 8002068:	401e      	ands	r6, r3
 800206a:	0524      	lsls	r4, r4, #20
 800206c:	432c      	orrs	r4, r5
 800206e:	07f6      	lsls	r6, r6, #31
 8002070:	4334      	orrs	r4, r6
 8002072:	0010      	movs	r0, r2
 8002074:	0021      	movs	r1, r4
 8002076:	b005      	add	sp, #20
 8002078:	bcf0      	pop	{r4, r5, r6, r7}
 800207a:	46bb      	mov	fp, r7
 800207c:	46b2      	mov	sl, r6
 800207e:	46a9      	mov	r9, r5
 8002080:	46a0      	mov	r8, r4
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	2d00      	cmp	r5, #0
 8002086:	dc00      	bgt.n	800208a <__aeabi_dsub+0x172>
 8002088:	e2d0      	b.n	800262c <__aeabi_dsub+0x714>
 800208a:	4649      	mov	r1, r9
 800208c:	2900      	cmp	r1, #0
 800208e:	d000      	beq.n	8002092 <__aeabi_dsub+0x17a>
 8002090:	e0d4      	b.n	800223c <__aeabi_dsub+0x324>
 8002092:	4661      	mov	r1, ip
 8002094:	9b02      	ldr	r3, [sp, #8]
 8002096:	4319      	orrs	r1, r3
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x184>
 800209a:	e12b      	b.n	80022f4 <__aeabi_dsub+0x3dc>
 800209c:	1e69      	subs	r1, r5, #1
 800209e:	2d01      	cmp	r5, #1
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x18c>
 80020a2:	e1d9      	b.n	8002458 <__aeabi_dsub+0x540>
 80020a4:	4295      	cmp	r5, r2
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x192>
 80020a8:	e10a      	b.n	80022c0 <__aeabi_dsub+0x3a8>
 80020aa:	2501      	movs	r5, #1
 80020ac:	2938      	cmp	r1, #56	@ 0x38
 80020ae:	dc17      	bgt.n	80020e0 <__aeabi_dsub+0x1c8>
 80020b0:	468a      	mov	sl, r1
 80020b2:	4653      	mov	r3, sl
 80020b4:	2b1f      	cmp	r3, #31
 80020b6:	dd00      	ble.n	80020ba <__aeabi_dsub+0x1a2>
 80020b8:	e1e7      	b.n	800248a <__aeabi_dsub+0x572>
 80020ba:	2220      	movs	r2, #32
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	9b02      	ldr	r3, [sp, #8]
 80020c0:	4661      	mov	r1, ip
 80020c2:	4093      	lsls	r3, r2
 80020c4:	001d      	movs	r5, r3
 80020c6:	4653      	mov	r3, sl
 80020c8:	40d9      	lsrs	r1, r3
 80020ca:	4663      	mov	r3, ip
 80020cc:	4093      	lsls	r3, r2
 80020ce:	001a      	movs	r2, r3
 80020d0:	430d      	orrs	r5, r1
 80020d2:	1e51      	subs	r1, r2, #1
 80020d4:	418a      	sbcs	r2, r1
 80020d6:	4653      	mov	r3, sl
 80020d8:	4315      	orrs	r5, r2
 80020da:	9a02      	ldr	r2, [sp, #8]
 80020dc:	40da      	lsrs	r2, r3
 80020de:	18a4      	adds	r4, r4, r2
 80020e0:	182d      	adds	r5, r5, r0
 80020e2:	4285      	cmp	r5, r0
 80020e4:	4180      	sbcs	r0, r0
 80020e6:	4240      	negs	r0, r0
 80020e8:	1824      	adds	r4, r4, r0
 80020ea:	0223      	lsls	r3, r4, #8
 80020ec:	d400      	bmi.n	80020f0 <__aeabi_dsub+0x1d8>
 80020ee:	e0b6      	b.n	800225e <__aeabi_dsub+0x346>
 80020f0:	4b5e      	ldr	r3, [pc, #376]	@ (800226c <__aeabi_dsub+0x354>)
 80020f2:	3701      	adds	r7, #1
 80020f4:	429f      	cmp	r7, r3
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x1e2>
 80020f8:	e0ad      	b.n	8002256 <__aeabi_dsub+0x33e>
 80020fa:	2101      	movs	r1, #1
 80020fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002270 <__aeabi_dsub+0x358>)
 80020fe:	086a      	lsrs	r2, r5, #1
 8002100:	401c      	ands	r4, r3
 8002102:	4029      	ands	r1, r5
 8002104:	430a      	orrs	r2, r1
 8002106:	07e5      	lsls	r5, r4, #31
 8002108:	4315      	orrs	r5, r2
 800210a:	0864      	lsrs	r4, r4, #1
 800210c:	e78d      	b.n	800202a <__aeabi_dsub+0x112>
 800210e:	4a59      	ldr	r2, [pc, #356]	@ (8002274 <__aeabi_dsub+0x35c>)
 8002110:	9b02      	ldr	r3, [sp, #8]
 8002112:	4692      	mov	sl, r2
 8002114:	4662      	mov	r2, ip
 8002116:	44ba      	add	sl, r7
 8002118:	431a      	orrs	r2, r3
 800211a:	d02c      	beq.n	8002176 <__aeabi_dsub+0x25e>
 800211c:	428e      	cmp	r6, r1
 800211e:	d02e      	beq.n	800217e <__aeabi_dsub+0x266>
 8002120:	4652      	mov	r2, sl
 8002122:	2a00      	cmp	r2, #0
 8002124:	d060      	beq.n	80021e8 <__aeabi_dsub+0x2d0>
 8002126:	2f00      	cmp	r7, #0
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x214>
 800212a:	e0db      	b.n	80022e4 <__aeabi_dsub+0x3cc>
 800212c:	4663      	mov	r3, ip
 800212e:	000e      	movs	r6, r1
 8002130:	9c02      	ldr	r4, [sp, #8]
 8002132:	08d8      	lsrs	r0, r3, #3
 8002134:	0762      	lsls	r2, r4, #29
 8002136:	4302      	orrs	r2, r0
 8002138:	08e4      	lsrs	r4, r4, #3
 800213a:	0013      	movs	r3, r2
 800213c:	4323      	orrs	r3, r4
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x22a>
 8002140:	e254      	b.n	80025ec <__aeabi_dsub+0x6d4>
 8002142:	2580      	movs	r5, #128	@ 0x80
 8002144:	032d      	lsls	r5, r5, #12
 8002146:	4325      	orrs	r5, r4
 8002148:	032d      	lsls	r5, r5, #12
 800214a:	4c48      	ldr	r4, [pc, #288]	@ (800226c <__aeabi_dsub+0x354>)
 800214c:	0b2d      	lsrs	r5, r5, #12
 800214e:	e78c      	b.n	800206a <__aeabi_dsub+0x152>
 8002150:	4661      	mov	r1, ip
 8002152:	9b02      	ldr	r3, [sp, #8]
 8002154:	4319      	orrs	r1, r3
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x242>
 8002158:	e0cc      	b.n	80022f4 <__aeabi_dsub+0x3dc>
 800215a:	0029      	movs	r1, r5
 800215c:	3901      	subs	r1, #1
 800215e:	2d01      	cmp	r5, #1
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x24c>
 8002162:	e188      	b.n	8002476 <__aeabi_dsub+0x55e>
 8002164:	4295      	cmp	r5, r2
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0x252>
 8002168:	e0aa      	b.n	80022c0 <__aeabi_dsub+0x3a8>
 800216a:	2501      	movs	r5, #1
 800216c:	2938      	cmp	r1, #56	@ 0x38
 800216e:	dd00      	ble.n	8002172 <__aeabi_dsub+0x25a>
 8002170:	e72f      	b.n	8001fd2 <__aeabi_dsub+0xba>
 8002172:	468a      	mov	sl, r1
 8002174:	e718      	b.n	8001fa8 <__aeabi_dsub+0x90>
 8002176:	2201      	movs	r2, #1
 8002178:	4051      	eors	r1, r2
 800217a:	428e      	cmp	r6, r1
 800217c:	d1d0      	bne.n	8002120 <__aeabi_dsub+0x208>
 800217e:	4653      	mov	r3, sl
 8002180:	2b00      	cmp	r3, #0
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x26e>
 8002184:	e0be      	b.n	8002304 <__aeabi_dsub+0x3ec>
 8002186:	2f00      	cmp	r7, #0
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x274>
 800218a:	e138      	b.n	80023fe <__aeabi_dsub+0x4e6>
 800218c:	46ca      	mov	sl, r9
 800218e:	0022      	movs	r2, r4
 8002190:	4302      	orrs	r2, r0
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x27e>
 8002194:	e1e2      	b.n	800255c <__aeabi_dsub+0x644>
 8002196:	4653      	mov	r3, sl
 8002198:	1e59      	subs	r1, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x288>
 800219e:	e20d      	b.n	80025bc <__aeabi_dsub+0x6a4>
 80021a0:	4a32      	ldr	r2, [pc, #200]	@ (800226c <__aeabi_dsub+0x354>)
 80021a2:	4592      	cmp	sl, r2
 80021a4:	d100      	bne.n	80021a8 <__aeabi_dsub+0x290>
 80021a6:	e1d2      	b.n	800254e <__aeabi_dsub+0x636>
 80021a8:	2701      	movs	r7, #1
 80021aa:	2938      	cmp	r1, #56	@ 0x38
 80021ac:	dc13      	bgt.n	80021d6 <__aeabi_dsub+0x2be>
 80021ae:	291f      	cmp	r1, #31
 80021b0:	dd00      	ble.n	80021b4 <__aeabi_dsub+0x29c>
 80021b2:	e1ee      	b.n	8002592 <__aeabi_dsub+0x67a>
 80021b4:	2220      	movs	r2, #32
 80021b6:	9b02      	ldr	r3, [sp, #8]
 80021b8:	1a52      	subs	r2, r2, r1
 80021ba:	0025      	movs	r5, r4
 80021bc:	0007      	movs	r7, r0
 80021be:	469a      	mov	sl, r3
 80021c0:	40cc      	lsrs	r4, r1
 80021c2:	4090      	lsls	r0, r2
 80021c4:	4095      	lsls	r5, r2
 80021c6:	40cf      	lsrs	r7, r1
 80021c8:	44a2      	add	sl, r4
 80021ca:	1e42      	subs	r2, r0, #1
 80021cc:	4190      	sbcs	r0, r2
 80021ce:	4653      	mov	r3, sl
 80021d0:	432f      	orrs	r7, r5
 80021d2:	4307      	orrs	r7, r0
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	003d      	movs	r5, r7
 80021d8:	4465      	add	r5, ip
 80021da:	4565      	cmp	r5, ip
 80021dc:	4192      	sbcs	r2, r2
 80021de:	9b02      	ldr	r3, [sp, #8]
 80021e0:	4252      	negs	r2, r2
 80021e2:	464f      	mov	r7, r9
 80021e4:	18d4      	adds	r4, r2, r3
 80021e6:	e780      	b.n	80020ea <__aeabi_dsub+0x1d2>
 80021e8:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <__aeabi_dsub+0x360>)
 80021ea:	1c7d      	adds	r5, r7, #1
 80021ec:	4215      	tst	r5, r2
 80021ee:	d000      	beq.n	80021f2 <__aeabi_dsub+0x2da>
 80021f0:	e0aa      	b.n	8002348 <__aeabi_dsub+0x430>
 80021f2:	4662      	mov	r2, ip
 80021f4:	0025      	movs	r5, r4
 80021f6:	9b02      	ldr	r3, [sp, #8]
 80021f8:	4305      	orrs	r5, r0
 80021fa:	431a      	orrs	r2, r3
 80021fc:	2f00      	cmp	r7, #0
 80021fe:	d000      	beq.n	8002202 <__aeabi_dsub+0x2ea>
 8002200:	e0f5      	b.n	80023ee <__aeabi_dsub+0x4d6>
 8002202:	2d00      	cmp	r5, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x2f0>
 8002206:	e16b      	b.n	80024e0 <__aeabi_dsub+0x5c8>
 8002208:	2a00      	cmp	r2, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x2f6>
 800220c:	e152      	b.n	80024b4 <__aeabi_dsub+0x59c>
 800220e:	4663      	mov	r3, ip
 8002210:	1ac5      	subs	r5, r0, r3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	1ae2      	subs	r2, r4, r3
 8002216:	42a8      	cmp	r0, r5
 8002218:	419b      	sbcs	r3, r3
 800221a:	425b      	negs	r3, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	d400      	bmi.n	8002224 <__aeabi_dsub+0x30c>
 8002222:	e1d5      	b.n	80025d0 <__aeabi_dsub+0x6b8>
 8002224:	4663      	mov	r3, ip
 8002226:	1a1d      	subs	r5, r3, r0
 8002228:	45ac      	cmp	ip, r5
 800222a:	4192      	sbcs	r2, r2
 800222c:	2601      	movs	r6, #1
 800222e:	9b02      	ldr	r3, [sp, #8]
 8002230:	4252      	negs	r2, r2
 8002232:	1b1c      	subs	r4, r3, r4
 8002234:	4688      	mov	r8, r1
 8002236:	1aa4      	subs	r4, r4, r2
 8002238:	400e      	ands	r6, r1
 800223a:	e6f6      	b.n	800202a <__aeabi_dsub+0x112>
 800223c:	4297      	cmp	r7, r2
 800223e:	d03f      	beq.n	80022c0 <__aeabi_dsub+0x3a8>
 8002240:	4652      	mov	r2, sl
 8002242:	2501      	movs	r5, #1
 8002244:	2a38      	cmp	r2, #56	@ 0x38
 8002246:	dd00      	ble.n	800224a <__aeabi_dsub+0x332>
 8002248:	e74a      	b.n	80020e0 <__aeabi_dsub+0x1c8>
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	9b02      	ldr	r3, [sp, #8]
 800224e:	0412      	lsls	r2, r2, #16
 8002250:	4313      	orrs	r3, r2
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	e72d      	b.n	80020b2 <__aeabi_dsub+0x19a>
 8002256:	003c      	movs	r4, r7
 8002258:	2500      	movs	r5, #0
 800225a:	2200      	movs	r2, #0
 800225c:	e705      	b.n	800206a <__aeabi_dsub+0x152>
 800225e:	2307      	movs	r3, #7
 8002260:	402b      	ands	r3, r5
 8002262:	2b00      	cmp	r3, #0
 8002264:	d000      	beq.n	8002268 <__aeabi_dsub+0x350>
 8002266:	e6e2      	b.n	800202e <__aeabi_dsub+0x116>
 8002268:	e06b      	b.n	8002342 <__aeabi_dsub+0x42a>
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	000007ff 	.word	0x000007ff
 8002270:	ff7fffff 	.word	0xff7fffff
 8002274:	fffff801 	.word	0xfffff801
 8002278:	000007fe 	.word	0x000007fe
 800227c:	0028      	movs	r0, r5
 800227e:	f000 fb63 	bl	8002948 <__clzsi2>
 8002282:	0003      	movs	r3, r0
 8002284:	3318      	adds	r3, #24
 8002286:	2b1f      	cmp	r3, #31
 8002288:	dc00      	bgt.n	800228c <__aeabi_dsub+0x374>
 800228a:	e6b4      	b.n	8001ff6 <__aeabi_dsub+0xde>
 800228c:	002a      	movs	r2, r5
 800228e:	3808      	subs	r0, #8
 8002290:	4082      	lsls	r2, r0
 8002292:	429f      	cmp	r7, r3
 8002294:	dd00      	ble.n	8002298 <__aeabi_dsub+0x380>
 8002296:	e0b9      	b.n	800240c <__aeabi_dsub+0x4f4>
 8002298:	1bdb      	subs	r3, r3, r7
 800229a:	1c58      	adds	r0, r3, #1
 800229c:	281f      	cmp	r0, #31
 800229e:	dc00      	bgt.n	80022a2 <__aeabi_dsub+0x38a>
 80022a0:	e1a0      	b.n	80025e4 <__aeabi_dsub+0x6cc>
 80022a2:	0015      	movs	r5, r2
 80022a4:	3b1f      	subs	r3, #31
 80022a6:	40dd      	lsrs	r5, r3
 80022a8:	2820      	cmp	r0, #32
 80022aa:	d005      	beq.n	80022b8 <__aeabi_dsub+0x3a0>
 80022ac:	2340      	movs	r3, #64	@ 0x40
 80022ae:	1a1b      	subs	r3, r3, r0
 80022b0:	409a      	lsls	r2, r3
 80022b2:	1e53      	subs	r3, r2, #1
 80022b4:	419a      	sbcs	r2, r3
 80022b6:	4315      	orrs	r5, r2
 80022b8:	2307      	movs	r3, #7
 80022ba:	2700      	movs	r7, #0
 80022bc:	402b      	ands	r3, r5
 80022be:	e7d0      	b.n	8002262 <__aeabi_dsub+0x34a>
 80022c0:	08c0      	lsrs	r0, r0, #3
 80022c2:	0762      	lsls	r2, r4, #29
 80022c4:	4302      	orrs	r2, r0
 80022c6:	08e4      	lsrs	r4, r4, #3
 80022c8:	e737      	b.n	800213a <__aeabi_dsub+0x222>
 80022ca:	08ea      	lsrs	r2, r5, #3
 80022cc:	0763      	lsls	r3, r4, #29
 80022ce:	431a      	orrs	r2, r3
 80022d0:	4bd3      	ldr	r3, [pc, #844]	@ (8002620 <__aeabi_dsub+0x708>)
 80022d2:	08e4      	lsrs	r4, r4, #3
 80022d4:	429f      	cmp	r7, r3
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x3c2>
 80022d8:	e72f      	b.n	800213a <__aeabi_dsub+0x222>
 80022da:	0324      	lsls	r4, r4, #12
 80022dc:	0b25      	lsrs	r5, r4, #12
 80022de:	057c      	lsls	r4, r7, #21
 80022e0:	0d64      	lsrs	r4, r4, #21
 80022e2:	e6c2      	b.n	800206a <__aeabi_dsub+0x152>
 80022e4:	46ca      	mov	sl, r9
 80022e6:	0022      	movs	r2, r4
 80022e8:	4302      	orrs	r2, r0
 80022ea:	d158      	bne.n	800239e <__aeabi_dsub+0x486>
 80022ec:	4663      	mov	r3, ip
 80022ee:	000e      	movs	r6, r1
 80022f0:	9c02      	ldr	r4, [sp, #8]
 80022f2:	9303      	str	r3, [sp, #12]
 80022f4:	9b03      	ldr	r3, [sp, #12]
 80022f6:	4657      	mov	r7, sl
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	e7e7      	b.n	80022cc <__aeabi_dsub+0x3b4>
 80022fc:	4cc9      	ldr	r4, [pc, #804]	@ (8002624 <__aeabi_dsub+0x70c>)
 80022fe:	1aff      	subs	r7, r7, r3
 8002300:	4014      	ands	r4, r2
 8002302:	e692      	b.n	800202a <__aeabi_dsub+0x112>
 8002304:	4dc8      	ldr	r5, [pc, #800]	@ (8002628 <__aeabi_dsub+0x710>)
 8002306:	1c7a      	adds	r2, r7, #1
 8002308:	422a      	tst	r2, r5
 800230a:	d000      	beq.n	800230e <__aeabi_dsub+0x3f6>
 800230c:	e084      	b.n	8002418 <__aeabi_dsub+0x500>
 800230e:	0022      	movs	r2, r4
 8002310:	4302      	orrs	r2, r0
 8002312:	2f00      	cmp	r7, #0
 8002314:	d000      	beq.n	8002318 <__aeabi_dsub+0x400>
 8002316:	e0ef      	b.n	80024f8 <__aeabi_dsub+0x5e0>
 8002318:	2a00      	cmp	r2, #0
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x406>
 800231c:	e0e5      	b.n	80024ea <__aeabi_dsub+0x5d2>
 800231e:	4662      	mov	r2, ip
 8002320:	9902      	ldr	r1, [sp, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x410>
 8002326:	e0c5      	b.n	80024b4 <__aeabi_dsub+0x59c>
 8002328:	4663      	mov	r3, ip
 800232a:	18c5      	adds	r5, r0, r3
 800232c:	468c      	mov	ip, r1
 800232e:	4285      	cmp	r5, r0
 8002330:	4180      	sbcs	r0, r0
 8002332:	4464      	add	r4, ip
 8002334:	4240      	negs	r0, r0
 8002336:	1824      	adds	r4, r4, r0
 8002338:	0223      	lsls	r3, r4, #8
 800233a:	d502      	bpl.n	8002342 <__aeabi_dsub+0x42a>
 800233c:	4bb9      	ldr	r3, [pc, #740]	@ (8002624 <__aeabi_dsub+0x70c>)
 800233e:	3701      	adds	r7, #1
 8002340:	401c      	ands	r4, r3
 8002342:	46ba      	mov	sl, r7
 8002344:	9503      	str	r5, [sp, #12]
 8002346:	e7d5      	b.n	80022f4 <__aeabi_dsub+0x3dc>
 8002348:	4662      	mov	r2, ip
 800234a:	1a85      	subs	r5, r0, r2
 800234c:	42a8      	cmp	r0, r5
 800234e:	4192      	sbcs	r2, r2
 8002350:	4252      	negs	r2, r2
 8002352:	4691      	mov	r9, r2
 8002354:	9b02      	ldr	r3, [sp, #8]
 8002356:	1ae3      	subs	r3, r4, r3
 8002358:	001a      	movs	r2, r3
 800235a:	464b      	mov	r3, r9
 800235c:	1ad2      	subs	r2, r2, r3
 800235e:	0013      	movs	r3, r2
 8002360:	4691      	mov	r9, r2
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	d46c      	bmi.n	8002440 <__aeabi_dsub+0x528>
 8002366:	464a      	mov	r2, r9
 8002368:	464c      	mov	r4, r9
 800236a:	432a      	orrs	r2, r5
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x458>
 800236e:	e63a      	b.n	8001fe6 <__aeabi_dsub+0xce>
 8002370:	2600      	movs	r6, #0
 8002372:	2400      	movs	r4, #0
 8002374:	2500      	movs	r5, #0
 8002376:	e678      	b.n	800206a <__aeabi_dsub+0x152>
 8002378:	9902      	ldr	r1, [sp, #8]
 800237a:	4653      	mov	r3, sl
 800237c:	000d      	movs	r5, r1
 800237e:	3a20      	subs	r2, #32
 8002380:	40d5      	lsrs	r5, r2
 8002382:	2b20      	cmp	r3, #32
 8002384:	d006      	beq.n	8002394 <__aeabi_dsub+0x47c>
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	000b      	movs	r3, r1
 800238c:	4093      	lsls	r3, r2
 800238e:	4662      	mov	r2, ip
 8002390:	431a      	orrs	r2, r3
 8002392:	4693      	mov	fp, r2
 8002394:	465b      	mov	r3, fp
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	4193      	sbcs	r3, r2
 800239a:	431d      	orrs	r5, r3
 800239c:	e619      	b.n	8001fd2 <__aeabi_dsub+0xba>
 800239e:	4653      	mov	r3, sl
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x490>
 80023a6:	e0c6      	b.n	8002536 <__aeabi_dsub+0x61e>
 80023a8:	4e9d      	ldr	r6, [pc, #628]	@ (8002620 <__aeabi_dsub+0x708>)
 80023aa:	45b2      	cmp	sl, r6
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x498>
 80023ae:	e6bd      	b.n	800212c <__aeabi_dsub+0x214>
 80023b0:	4688      	mov	r8, r1
 80023b2:	000e      	movs	r6, r1
 80023b4:	2501      	movs	r5, #1
 80023b6:	2a38      	cmp	r2, #56	@ 0x38
 80023b8:	dc10      	bgt.n	80023dc <__aeabi_dsub+0x4c4>
 80023ba:	2a1f      	cmp	r2, #31
 80023bc:	dc7f      	bgt.n	80024be <__aeabi_dsub+0x5a6>
 80023be:	2120      	movs	r1, #32
 80023c0:	0025      	movs	r5, r4
 80023c2:	1a89      	subs	r1, r1, r2
 80023c4:	0007      	movs	r7, r0
 80023c6:	4088      	lsls	r0, r1
 80023c8:	408d      	lsls	r5, r1
 80023ca:	40d7      	lsrs	r7, r2
 80023cc:	40d4      	lsrs	r4, r2
 80023ce:	1e41      	subs	r1, r0, #1
 80023d0:	4188      	sbcs	r0, r1
 80023d2:	9b02      	ldr	r3, [sp, #8]
 80023d4:	433d      	orrs	r5, r7
 80023d6:	1b1b      	subs	r3, r3, r4
 80023d8:	4305      	orrs	r5, r0
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	4662      	mov	r2, ip
 80023de:	1b55      	subs	r5, r2, r5
 80023e0:	45ac      	cmp	ip, r5
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	9b02      	ldr	r3, [sp, #8]
 80023e6:	4252      	negs	r2, r2
 80023e8:	464f      	mov	r7, r9
 80023ea:	1a9c      	subs	r4, r3, r2
 80023ec:	e5f6      	b.n	8001fdc <__aeabi_dsub+0xc4>
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	d000      	beq.n	80023f4 <__aeabi_dsub+0x4dc>
 80023f2:	e0b7      	b.n	8002564 <__aeabi_dsub+0x64c>
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x4e2>
 80023f8:	e0f0      	b.n	80025dc <__aeabi_dsub+0x6c4>
 80023fa:	2601      	movs	r6, #1
 80023fc:	400e      	ands	r6, r1
 80023fe:	4663      	mov	r3, ip
 8002400:	9802      	ldr	r0, [sp, #8]
 8002402:	08d9      	lsrs	r1, r3, #3
 8002404:	0742      	lsls	r2, r0, #29
 8002406:	430a      	orrs	r2, r1
 8002408:	08c4      	lsrs	r4, r0, #3
 800240a:	e696      	b.n	800213a <__aeabi_dsub+0x222>
 800240c:	4c85      	ldr	r4, [pc, #532]	@ (8002624 <__aeabi_dsub+0x70c>)
 800240e:	1aff      	subs	r7, r7, r3
 8002410:	4014      	ands	r4, r2
 8002412:	0762      	lsls	r2, r4, #29
 8002414:	08e4      	lsrs	r4, r4, #3
 8002416:	e760      	b.n	80022da <__aeabi_dsub+0x3c2>
 8002418:	4981      	ldr	r1, [pc, #516]	@ (8002620 <__aeabi_dsub+0x708>)
 800241a:	428a      	cmp	r2, r1
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x508>
 800241e:	e0c9      	b.n	80025b4 <__aeabi_dsub+0x69c>
 8002420:	4663      	mov	r3, ip
 8002422:	18c1      	adds	r1, r0, r3
 8002424:	4281      	cmp	r1, r0
 8002426:	4180      	sbcs	r0, r0
 8002428:	9b02      	ldr	r3, [sp, #8]
 800242a:	4240      	negs	r0, r0
 800242c:	18e3      	adds	r3, r4, r3
 800242e:	181b      	adds	r3, r3, r0
 8002430:	07dd      	lsls	r5, r3, #31
 8002432:	085c      	lsrs	r4, r3, #1
 8002434:	2307      	movs	r3, #7
 8002436:	0849      	lsrs	r1, r1, #1
 8002438:	430d      	orrs	r5, r1
 800243a:	0017      	movs	r7, r2
 800243c:	402b      	ands	r3, r5
 800243e:	e710      	b.n	8002262 <__aeabi_dsub+0x34a>
 8002440:	4663      	mov	r3, ip
 8002442:	1a1d      	subs	r5, r3, r0
 8002444:	45ac      	cmp	ip, r5
 8002446:	4192      	sbcs	r2, r2
 8002448:	2601      	movs	r6, #1
 800244a:	9b02      	ldr	r3, [sp, #8]
 800244c:	4252      	negs	r2, r2
 800244e:	1b1c      	subs	r4, r3, r4
 8002450:	4688      	mov	r8, r1
 8002452:	1aa4      	subs	r4, r4, r2
 8002454:	400e      	ands	r6, r1
 8002456:	e5c6      	b.n	8001fe6 <__aeabi_dsub+0xce>
 8002458:	4663      	mov	r3, ip
 800245a:	18c5      	adds	r5, r0, r3
 800245c:	9b02      	ldr	r3, [sp, #8]
 800245e:	4285      	cmp	r5, r0
 8002460:	4180      	sbcs	r0, r0
 8002462:	469c      	mov	ip, r3
 8002464:	4240      	negs	r0, r0
 8002466:	4464      	add	r4, ip
 8002468:	1824      	adds	r4, r4, r0
 800246a:	2701      	movs	r7, #1
 800246c:	0223      	lsls	r3, r4, #8
 800246e:	d400      	bmi.n	8002472 <__aeabi_dsub+0x55a>
 8002470:	e6f5      	b.n	800225e <__aeabi_dsub+0x346>
 8002472:	2702      	movs	r7, #2
 8002474:	e641      	b.n	80020fa <__aeabi_dsub+0x1e2>
 8002476:	4663      	mov	r3, ip
 8002478:	1ac5      	subs	r5, r0, r3
 800247a:	42a8      	cmp	r0, r5
 800247c:	4180      	sbcs	r0, r0
 800247e:	9b02      	ldr	r3, [sp, #8]
 8002480:	4240      	negs	r0, r0
 8002482:	1ae4      	subs	r4, r4, r3
 8002484:	2701      	movs	r7, #1
 8002486:	1a24      	subs	r4, r4, r0
 8002488:	e5a8      	b.n	8001fdc <__aeabi_dsub+0xc4>
 800248a:	9d02      	ldr	r5, [sp, #8]
 800248c:	4652      	mov	r2, sl
 800248e:	002b      	movs	r3, r5
 8002490:	3a20      	subs	r2, #32
 8002492:	40d3      	lsrs	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	4653      	mov	r3, sl
 8002498:	2b20      	cmp	r3, #32
 800249a:	d006      	beq.n	80024aa <__aeabi_dsub+0x592>
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	1ad2      	subs	r2, r2, r3
 80024a0:	002b      	movs	r3, r5
 80024a2:	4093      	lsls	r3, r2
 80024a4:	4662      	mov	r2, ip
 80024a6:	431a      	orrs	r2, r3
 80024a8:	4693      	mov	fp, r2
 80024aa:	465d      	mov	r5, fp
 80024ac:	1e6b      	subs	r3, r5, #1
 80024ae:	419d      	sbcs	r5, r3
 80024b0:	430d      	orrs	r5, r1
 80024b2:	e615      	b.n	80020e0 <__aeabi_dsub+0x1c8>
 80024b4:	0762      	lsls	r2, r4, #29
 80024b6:	08c0      	lsrs	r0, r0, #3
 80024b8:	4302      	orrs	r2, r0
 80024ba:	08e4      	lsrs	r4, r4, #3
 80024bc:	e70d      	b.n	80022da <__aeabi_dsub+0x3c2>
 80024be:	0011      	movs	r1, r2
 80024c0:	0027      	movs	r7, r4
 80024c2:	3920      	subs	r1, #32
 80024c4:	40cf      	lsrs	r7, r1
 80024c6:	2a20      	cmp	r2, #32
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dsub+0x5be>
 80024ca:	2140      	movs	r1, #64	@ 0x40
 80024cc:	1a8a      	subs	r2, r1, r2
 80024ce:	4094      	lsls	r4, r2
 80024d0:	0025      	movs	r5, r4
 80024d2:	4305      	orrs	r5, r0
 80024d4:	9503      	str	r5, [sp, #12]
 80024d6:	9d03      	ldr	r5, [sp, #12]
 80024d8:	1e6a      	subs	r2, r5, #1
 80024da:	4195      	sbcs	r5, r2
 80024dc:	433d      	orrs	r5, r7
 80024de:	e77d      	b.n	80023dc <__aeabi_dsub+0x4c4>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x5ce>
 80024e4:	e744      	b.n	8002370 <__aeabi_dsub+0x458>
 80024e6:	2601      	movs	r6, #1
 80024e8:	400e      	ands	r6, r1
 80024ea:	4663      	mov	r3, ip
 80024ec:	08d9      	lsrs	r1, r3, #3
 80024ee:	9b02      	ldr	r3, [sp, #8]
 80024f0:	075a      	lsls	r2, r3, #29
 80024f2:	430a      	orrs	r2, r1
 80024f4:	08dc      	lsrs	r4, r3, #3
 80024f6:	e6f0      	b.n	80022da <__aeabi_dsub+0x3c2>
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d028      	beq.n	800254e <__aeabi_dsub+0x636>
 80024fc:	4662      	mov	r2, ip
 80024fe:	9f02      	ldr	r7, [sp, #8]
 8002500:	08c0      	lsrs	r0, r0, #3
 8002502:	433a      	orrs	r2, r7
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x5f0>
 8002506:	e6dc      	b.n	80022c2 <__aeabi_dsub+0x3aa>
 8002508:	0762      	lsls	r2, r4, #29
 800250a:	4310      	orrs	r0, r2
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	08e4      	lsrs	r4, r4, #3
 8002510:	0312      	lsls	r2, r2, #12
 8002512:	4214      	tst	r4, r2
 8002514:	d009      	beq.n	800252a <__aeabi_dsub+0x612>
 8002516:	08fd      	lsrs	r5, r7, #3
 8002518:	4215      	tst	r5, r2
 800251a:	d106      	bne.n	800252a <__aeabi_dsub+0x612>
 800251c:	4663      	mov	r3, ip
 800251e:	2601      	movs	r6, #1
 8002520:	002c      	movs	r4, r5
 8002522:	08d8      	lsrs	r0, r3, #3
 8002524:	077b      	lsls	r3, r7, #29
 8002526:	4318      	orrs	r0, r3
 8002528:	400e      	ands	r6, r1
 800252a:	0f42      	lsrs	r2, r0, #29
 800252c:	00c0      	lsls	r0, r0, #3
 800252e:	08c0      	lsrs	r0, r0, #3
 8002530:	0752      	lsls	r2, r2, #29
 8002532:	4302      	orrs	r2, r0
 8002534:	e601      	b.n	800213a <__aeabi_dsub+0x222>
 8002536:	4663      	mov	r3, ip
 8002538:	1a1d      	subs	r5, r3, r0
 800253a:	45ac      	cmp	ip, r5
 800253c:	4192      	sbcs	r2, r2
 800253e:	9b02      	ldr	r3, [sp, #8]
 8002540:	4252      	negs	r2, r2
 8002542:	1b1c      	subs	r4, r3, r4
 8002544:	000e      	movs	r6, r1
 8002546:	4688      	mov	r8, r1
 8002548:	2701      	movs	r7, #1
 800254a:	1aa4      	subs	r4, r4, r2
 800254c:	e546      	b.n	8001fdc <__aeabi_dsub+0xc4>
 800254e:	4663      	mov	r3, ip
 8002550:	08d9      	lsrs	r1, r3, #3
 8002552:	9b02      	ldr	r3, [sp, #8]
 8002554:	075a      	lsls	r2, r3, #29
 8002556:	430a      	orrs	r2, r1
 8002558:	08dc      	lsrs	r4, r3, #3
 800255a:	e5ee      	b.n	800213a <__aeabi_dsub+0x222>
 800255c:	4663      	mov	r3, ip
 800255e:	9c02      	ldr	r4, [sp, #8]
 8002560:	9303      	str	r3, [sp, #12]
 8002562:	e6c7      	b.n	80022f4 <__aeabi_dsub+0x3dc>
 8002564:	08c0      	lsrs	r0, r0, #3
 8002566:	2a00      	cmp	r2, #0
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x654>
 800256a:	e6aa      	b.n	80022c2 <__aeabi_dsub+0x3aa>
 800256c:	0762      	lsls	r2, r4, #29
 800256e:	4310      	orrs	r0, r2
 8002570:	2280      	movs	r2, #128	@ 0x80
 8002572:	08e4      	lsrs	r4, r4, #3
 8002574:	0312      	lsls	r2, r2, #12
 8002576:	4214      	tst	r4, r2
 8002578:	d0d7      	beq.n	800252a <__aeabi_dsub+0x612>
 800257a:	9f02      	ldr	r7, [sp, #8]
 800257c:	08fd      	lsrs	r5, r7, #3
 800257e:	4215      	tst	r5, r2
 8002580:	d1d3      	bne.n	800252a <__aeabi_dsub+0x612>
 8002582:	4663      	mov	r3, ip
 8002584:	2601      	movs	r6, #1
 8002586:	08d8      	lsrs	r0, r3, #3
 8002588:	077b      	lsls	r3, r7, #29
 800258a:	002c      	movs	r4, r5
 800258c:	4318      	orrs	r0, r3
 800258e:	400e      	ands	r6, r1
 8002590:	e7cb      	b.n	800252a <__aeabi_dsub+0x612>
 8002592:	000a      	movs	r2, r1
 8002594:	0027      	movs	r7, r4
 8002596:	3a20      	subs	r2, #32
 8002598:	40d7      	lsrs	r7, r2
 800259a:	2920      	cmp	r1, #32
 800259c:	d005      	beq.n	80025aa <__aeabi_dsub+0x692>
 800259e:	2240      	movs	r2, #64	@ 0x40
 80025a0:	1a52      	subs	r2, r2, r1
 80025a2:	4094      	lsls	r4, r2
 80025a4:	0025      	movs	r5, r4
 80025a6:	4305      	orrs	r5, r0
 80025a8:	9503      	str	r5, [sp, #12]
 80025aa:	9d03      	ldr	r5, [sp, #12]
 80025ac:	1e6a      	subs	r2, r5, #1
 80025ae:	4195      	sbcs	r5, r2
 80025b0:	432f      	orrs	r7, r5
 80025b2:	e610      	b.n	80021d6 <__aeabi_dsub+0x2be>
 80025b4:	0014      	movs	r4, r2
 80025b6:	2500      	movs	r5, #0
 80025b8:	2200      	movs	r2, #0
 80025ba:	e556      	b.n	800206a <__aeabi_dsub+0x152>
 80025bc:	9b02      	ldr	r3, [sp, #8]
 80025be:	4460      	add	r0, ip
 80025c0:	4699      	mov	r9, r3
 80025c2:	4560      	cmp	r0, ip
 80025c4:	4192      	sbcs	r2, r2
 80025c6:	444c      	add	r4, r9
 80025c8:	4252      	negs	r2, r2
 80025ca:	0005      	movs	r5, r0
 80025cc:	18a4      	adds	r4, r4, r2
 80025ce:	e74c      	b.n	800246a <__aeabi_dsub+0x552>
 80025d0:	001a      	movs	r2, r3
 80025d2:	001c      	movs	r4, r3
 80025d4:	432a      	orrs	r2, r5
 80025d6:	d000      	beq.n	80025da <__aeabi_dsub+0x6c2>
 80025d8:	e6b3      	b.n	8002342 <__aeabi_dsub+0x42a>
 80025da:	e6c9      	b.n	8002370 <__aeabi_dsub+0x458>
 80025dc:	2480      	movs	r4, #128	@ 0x80
 80025de:	2600      	movs	r6, #0
 80025e0:	0324      	lsls	r4, r4, #12
 80025e2:	e5ae      	b.n	8002142 <__aeabi_dsub+0x22a>
 80025e4:	2120      	movs	r1, #32
 80025e6:	2500      	movs	r5, #0
 80025e8:	1a09      	subs	r1, r1, r0
 80025ea:	e517      	b.n	800201c <__aeabi_dsub+0x104>
 80025ec:	2200      	movs	r2, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002620 <__aeabi_dsub+0x708>)
 80025f2:	e53a      	b.n	800206a <__aeabi_dsub+0x152>
 80025f4:	2d00      	cmp	r5, #0
 80025f6:	d100      	bne.n	80025fa <__aeabi_dsub+0x6e2>
 80025f8:	e5f6      	b.n	80021e8 <__aeabi_dsub+0x2d0>
 80025fa:	464b      	mov	r3, r9
 80025fc:	1bda      	subs	r2, r3, r7
 80025fe:	4692      	mov	sl, r2
 8002600:	2f00      	cmp	r7, #0
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x6ee>
 8002604:	e66f      	b.n	80022e6 <__aeabi_dsub+0x3ce>
 8002606:	2a38      	cmp	r2, #56	@ 0x38
 8002608:	dc05      	bgt.n	8002616 <__aeabi_dsub+0x6fe>
 800260a:	2680      	movs	r6, #128	@ 0x80
 800260c:	0436      	lsls	r6, r6, #16
 800260e:	4334      	orrs	r4, r6
 8002610:	4688      	mov	r8, r1
 8002612:	000e      	movs	r6, r1
 8002614:	e6d1      	b.n	80023ba <__aeabi_dsub+0x4a2>
 8002616:	4688      	mov	r8, r1
 8002618:	000e      	movs	r6, r1
 800261a:	2501      	movs	r5, #1
 800261c:	e6de      	b.n	80023dc <__aeabi_dsub+0x4c4>
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff
 8002624:	ff7fffff 	.word	0xff7fffff
 8002628:	000007fe 	.word	0x000007fe
 800262c:	2d00      	cmp	r5, #0
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x71a>
 8002630:	e668      	b.n	8002304 <__aeabi_dsub+0x3ec>
 8002632:	464b      	mov	r3, r9
 8002634:	1bd9      	subs	r1, r3, r7
 8002636:	2f00      	cmp	r7, #0
 8002638:	d101      	bne.n	800263e <__aeabi_dsub+0x726>
 800263a:	468a      	mov	sl, r1
 800263c:	e5a7      	b.n	800218e <__aeabi_dsub+0x276>
 800263e:	2701      	movs	r7, #1
 8002640:	2938      	cmp	r1, #56	@ 0x38
 8002642:	dd00      	ble.n	8002646 <__aeabi_dsub+0x72e>
 8002644:	e5c7      	b.n	80021d6 <__aeabi_dsub+0x2be>
 8002646:	2280      	movs	r2, #128	@ 0x80
 8002648:	0412      	lsls	r2, r2, #16
 800264a:	4314      	orrs	r4, r2
 800264c:	e5af      	b.n	80021ae <__aeabi_dsub+0x296>
 800264e:	46c0      	nop			@ (mov r8, r8)

08002650 <__aeabi_dcmpun>:
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	46c6      	mov	lr, r8
 8002654:	031e      	lsls	r6, r3, #12
 8002656:	0b36      	lsrs	r6, r6, #12
 8002658:	46b0      	mov	r8, r6
 800265a:	4e0d      	ldr	r6, [pc, #52]	@ (8002690 <__aeabi_dcmpun+0x40>)
 800265c:	030c      	lsls	r4, r1, #12
 800265e:	004d      	lsls	r5, r1, #1
 8002660:	005f      	lsls	r7, r3, #1
 8002662:	b500      	push	{lr}
 8002664:	0b24      	lsrs	r4, r4, #12
 8002666:	0d6d      	lsrs	r5, r5, #21
 8002668:	0d7f      	lsrs	r7, r7, #21
 800266a:	42b5      	cmp	r5, r6
 800266c:	d00b      	beq.n	8002686 <__aeabi_dcmpun+0x36>
 800266e:	4908      	ldr	r1, [pc, #32]	@ (8002690 <__aeabi_dcmpun+0x40>)
 8002670:	2000      	movs	r0, #0
 8002672:	428f      	cmp	r7, r1
 8002674:	d104      	bne.n	8002680 <__aeabi_dcmpun+0x30>
 8002676:	4646      	mov	r6, r8
 8002678:	4316      	orrs	r6, r2
 800267a:	0030      	movs	r0, r6
 800267c:	1e43      	subs	r3, r0, #1
 800267e:	4198      	sbcs	r0, r3
 8002680:	bc80      	pop	{r7}
 8002682:	46b8      	mov	r8, r7
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002686:	4304      	orrs	r4, r0
 8002688:	2001      	movs	r0, #1
 800268a:	2c00      	cmp	r4, #0
 800268c:	d1f8      	bne.n	8002680 <__aeabi_dcmpun+0x30>
 800268e:	e7ee      	b.n	800266e <__aeabi_dcmpun+0x1e>
 8002690:	000007ff 	.word	0x000007ff

08002694 <__aeabi_d2iz>:
 8002694:	000b      	movs	r3, r1
 8002696:	0002      	movs	r2, r0
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	4d16      	ldr	r5, [pc, #88]	@ (80026f4 <__aeabi_d2iz+0x60>)
 800269c:	030c      	lsls	r4, r1, #12
 800269e:	b082      	sub	sp, #8
 80026a0:	0049      	lsls	r1, r1, #1
 80026a2:	2000      	movs	r0, #0
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	0b24      	lsrs	r4, r4, #12
 80026aa:	0d49      	lsrs	r1, r1, #21
 80026ac:	0fde      	lsrs	r6, r3, #31
 80026ae:	42a9      	cmp	r1, r5
 80026b0:	dd04      	ble.n	80026bc <__aeabi_d2iz+0x28>
 80026b2:	4811      	ldr	r0, [pc, #68]	@ (80026f8 <__aeabi_d2iz+0x64>)
 80026b4:	4281      	cmp	r1, r0
 80026b6:	dd03      	ble.n	80026c0 <__aeabi_d2iz+0x2c>
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <__aeabi_d2iz+0x68>)
 80026ba:	18f0      	adds	r0, r6, r3
 80026bc:	b002      	add	sp, #8
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	2080      	movs	r0, #128	@ 0x80
 80026c2:	0340      	lsls	r0, r0, #13
 80026c4:	4320      	orrs	r0, r4
 80026c6:	4c0e      	ldr	r4, [pc, #56]	@ (8002700 <__aeabi_d2iz+0x6c>)
 80026c8:	1a64      	subs	r4, r4, r1
 80026ca:	2c1f      	cmp	r4, #31
 80026cc:	dd08      	ble.n	80026e0 <__aeabi_d2iz+0x4c>
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <__aeabi_d2iz+0x70>)
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	40d8      	lsrs	r0, r3
 80026d4:	0003      	movs	r3, r0
 80026d6:	4258      	negs	r0, r3
 80026d8:	2e00      	cmp	r6, #0
 80026da:	d1ef      	bne.n	80026bc <__aeabi_d2iz+0x28>
 80026dc:	0018      	movs	r0, r3
 80026de:	e7ed      	b.n	80026bc <__aeabi_d2iz+0x28>
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <__aeabi_d2iz+0x74>)
 80026e2:	9a00      	ldr	r2, [sp, #0]
 80026e4:	469c      	mov	ip, r3
 80026e6:	0003      	movs	r3, r0
 80026e8:	4461      	add	r1, ip
 80026ea:	408b      	lsls	r3, r1
 80026ec:	40e2      	lsrs	r2, r4
 80026ee:	4313      	orrs	r3, r2
 80026f0:	e7f1      	b.n	80026d6 <__aeabi_d2iz+0x42>
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	000003fe 	.word	0x000003fe
 80026f8:	0000041d 	.word	0x0000041d
 80026fc:	7fffffff 	.word	0x7fffffff
 8002700:	00000433 	.word	0x00000433
 8002704:	00000413 	.word	0x00000413
 8002708:	fffffbed 	.word	0xfffffbed

0800270c <__aeabi_i2d>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2800      	cmp	r0, #0
 8002710:	d016      	beq.n	8002740 <__aeabi_i2d+0x34>
 8002712:	17c3      	asrs	r3, r0, #31
 8002714:	18c5      	adds	r5, r0, r3
 8002716:	405d      	eors	r5, r3
 8002718:	0fc4      	lsrs	r4, r0, #31
 800271a:	0028      	movs	r0, r5
 800271c:	f000 f914 	bl	8002948 <__clzsi2>
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <__aeabi_i2d+0x58>)
 8002722:	1a1b      	subs	r3, r3, r0
 8002724:	055b      	lsls	r3, r3, #21
 8002726:	0d5b      	lsrs	r3, r3, #21
 8002728:	280a      	cmp	r0, #10
 800272a:	dc14      	bgt.n	8002756 <__aeabi_i2d+0x4a>
 800272c:	0002      	movs	r2, r0
 800272e:	002e      	movs	r6, r5
 8002730:	3215      	adds	r2, #21
 8002732:	4096      	lsls	r6, r2
 8002734:	220b      	movs	r2, #11
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	40d5      	lsrs	r5, r2
 800273a:	032d      	lsls	r5, r5, #12
 800273c:	0b2d      	lsrs	r5, r5, #12
 800273e:	e003      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002740:	2400      	movs	r4, #0
 8002742:	2300      	movs	r3, #0
 8002744:	2500      	movs	r5, #0
 8002746:	2600      	movs	r6, #0
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	432b      	orrs	r3, r5
 800274c:	07e4      	lsls	r4, r4, #31
 800274e:	4323      	orrs	r3, r4
 8002750:	0030      	movs	r0, r6
 8002752:	0019      	movs	r1, r3
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	380b      	subs	r0, #11
 8002758:	4085      	lsls	r5, r0
 800275a:	032d      	lsls	r5, r5, #12
 800275c:	2600      	movs	r6, #0
 800275e:	0b2d      	lsrs	r5, r5, #12
 8002760:	e7f2      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	0000041e 	.word	0x0000041e

08002768 <__aeabi_ui2d>:
 8002768:	b510      	push	{r4, lr}
 800276a:	1e04      	subs	r4, r0, #0
 800276c:	d010      	beq.n	8002790 <__aeabi_ui2d+0x28>
 800276e:	f000 f8eb 	bl	8002948 <__clzsi2>
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <__aeabi_ui2d+0x44>)
 8002774:	1a1b      	subs	r3, r3, r0
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	0d5b      	lsrs	r3, r3, #21
 800277a:	280a      	cmp	r0, #10
 800277c:	dc0f      	bgt.n	800279e <__aeabi_ui2d+0x36>
 800277e:	220b      	movs	r2, #11
 8002780:	0021      	movs	r1, r4
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	40d1      	lsrs	r1, r2
 8002786:	3015      	adds	r0, #21
 8002788:	030a      	lsls	r2, r1, #12
 800278a:	4084      	lsls	r4, r0
 800278c:	0b12      	lsrs	r2, r2, #12
 800278e:	e001      	b.n	8002794 <__aeabi_ui2d+0x2c>
 8002790:	2300      	movs	r3, #0
 8002792:	2200      	movs	r2, #0
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	4313      	orrs	r3, r2
 8002798:	0020      	movs	r0, r4
 800279a:	0019      	movs	r1, r3
 800279c:	bd10      	pop	{r4, pc}
 800279e:	0022      	movs	r2, r4
 80027a0:	380b      	subs	r0, #11
 80027a2:	4082      	lsls	r2, r0
 80027a4:	0312      	lsls	r2, r2, #12
 80027a6:	2400      	movs	r4, #0
 80027a8:	0b12      	lsrs	r2, r2, #12
 80027aa:	e7f3      	b.n	8002794 <__aeabi_ui2d+0x2c>
 80027ac:	0000041e 	.word	0x0000041e

080027b0 <__aeabi_f2d>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	0242      	lsls	r2, r0, #9
 80027b4:	0043      	lsls	r3, r0, #1
 80027b6:	0fc4      	lsrs	r4, r0, #31
 80027b8:	20fe      	movs	r0, #254	@ 0xfe
 80027ba:	0e1b      	lsrs	r3, r3, #24
 80027bc:	1c59      	adds	r1, r3, #1
 80027be:	0a55      	lsrs	r5, r2, #9
 80027c0:	4208      	tst	r0, r1
 80027c2:	d00c      	beq.n	80027de <__aeabi_f2d+0x2e>
 80027c4:	21e0      	movs	r1, #224	@ 0xe0
 80027c6:	0089      	lsls	r1, r1, #2
 80027c8:	468c      	mov	ip, r1
 80027ca:	076d      	lsls	r5, r5, #29
 80027cc:	0b12      	lsrs	r2, r2, #12
 80027ce:	4463      	add	r3, ip
 80027d0:	051b      	lsls	r3, r3, #20
 80027d2:	4313      	orrs	r3, r2
 80027d4:	07e4      	lsls	r4, r4, #31
 80027d6:	4323      	orrs	r3, r4
 80027d8:	0028      	movs	r0, r5
 80027da:	0019      	movs	r1, r3
 80027dc:	bd70      	pop	{r4, r5, r6, pc}
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d114      	bne.n	800280c <__aeabi_f2d+0x5c>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d01b      	beq.n	800281e <__aeabi_f2d+0x6e>
 80027e6:	0028      	movs	r0, r5
 80027e8:	f000 f8ae 	bl	8002948 <__clzsi2>
 80027ec:	280a      	cmp	r0, #10
 80027ee:	dc1c      	bgt.n	800282a <__aeabi_f2d+0x7a>
 80027f0:	230b      	movs	r3, #11
 80027f2:	002a      	movs	r2, r5
 80027f4:	1a1b      	subs	r3, r3, r0
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	0003      	movs	r3, r0
 80027fa:	3315      	adds	r3, #21
 80027fc:	409d      	lsls	r5, r3
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <__aeabi_f2d+0x88>)
 8002800:	0312      	lsls	r2, r2, #12
 8002802:	1a1b      	subs	r3, r3, r0
 8002804:	055b      	lsls	r3, r3, #21
 8002806:	0b12      	lsrs	r2, r2, #12
 8002808:	0d5b      	lsrs	r3, r3, #21
 800280a:	e7e1      	b.n	80027d0 <__aeabi_f2d+0x20>
 800280c:	2d00      	cmp	r5, #0
 800280e:	d009      	beq.n	8002824 <__aeabi_f2d+0x74>
 8002810:	0b13      	lsrs	r3, r2, #12
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	0312      	lsls	r2, r2, #12
 8002816:	431a      	orrs	r2, r3
 8002818:	076d      	lsls	r5, r5, #29
 800281a:	4b08      	ldr	r3, [pc, #32]	@ (800283c <__aeabi_f2d+0x8c>)
 800281c:	e7d8      	b.n	80027d0 <__aeabi_f2d+0x20>
 800281e:	2300      	movs	r3, #0
 8002820:	2200      	movs	r2, #0
 8002822:	e7d5      	b.n	80027d0 <__aeabi_f2d+0x20>
 8002824:	2200      	movs	r2, #0
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <__aeabi_f2d+0x8c>)
 8002828:	e7d2      	b.n	80027d0 <__aeabi_f2d+0x20>
 800282a:	0003      	movs	r3, r0
 800282c:	002a      	movs	r2, r5
 800282e:	3b0b      	subs	r3, #11
 8002830:	409a      	lsls	r2, r3
 8002832:	2500      	movs	r5, #0
 8002834:	e7e3      	b.n	80027fe <__aeabi_f2d+0x4e>
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	00000389 	.word	0x00000389
 800283c:	000007ff 	.word	0x000007ff

08002840 <__aeabi_d2f>:
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	004b      	lsls	r3, r1, #1
 8002844:	030f      	lsls	r7, r1, #12
 8002846:	0d5b      	lsrs	r3, r3, #21
 8002848:	4c3b      	ldr	r4, [pc, #236]	@ (8002938 <__aeabi_d2f+0xf8>)
 800284a:	0f45      	lsrs	r5, r0, #29
 800284c:	b083      	sub	sp, #12
 800284e:	0a7f      	lsrs	r7, r7, #9
 8002850:	1c5e      	adds	r6, r3, #1
 8002852:	432f      	orrs	r7, r5
 8002854:	9000      	str	r0, [sp, #0]
 8002856:	9101      	str	r1, [sp, #4]
 8002858:	0fca      	lsrs	r2, r1, #31
 800285a:	00c5      	lsls	r5, r0, #3
 800285c:	4226      	tst	r6, r4
 800285e:	d00b      	beq.n	8002878 <__aeabi_d2f+0x38>
 8002860:	4936      	ldr	r1, [pc, #216]	@ (800293c <__aeabi_d2f+0xfc>)
 8002862:	185c      	adds	r4, r3, r1
 8002864:	2cfe      	cmp	r4, #254	@ 0xfe
 8002866:	dd13      	ble.n	8002890 <__aeabi_d2f+0x50>
 8002868:	20ff      	movs	r0, #255	@ 0xff
 800286a:	2300      	movs	r3, #0
 800286c:	05c0      	lsls	r0, r0, #23
 800286e:	4318      	orrs	r0, r3
 8002870:	07d2      	lsls	r2, r2, #31
 8002872:	4310      	orrs	r0, r2
 8002874:	b003      	add	sp, #12
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <__aeabi_d2f+0x42>
 800287c:	2000      	movs	r0, #0
 800287e:	2300      	movs	r3, #0
 8002880:	e7f4      	b.n	800286c <__aeabi_d2f+0x2c>
 8002882:	433d      	orrs	r5, r7
 8002884:	d0f0      	beq.n	8002868 <__aeabi_d2f+0x28>
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	03db      	lsls	r3, r3, #15
 800288a:	20ff      	movs	r0, #255	@ 0xff
 800288c:	433b      	orrs	r3, r7
 800288e:	e7ed      	b.n	800286c <__aeabi_d2f+0x2c>
 8002890:	2c00      	cmp	r4, #0
 8002892:	dd14      	ble.n	80028be <__aeabi_d2f+0x7e>
 8002894:	9b00      	ldr	r3, [sp, #0]
 8002896:	00ff      	lsls	r7, r7, #3
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	4183      	sbcs	r3, r0
 800289e:	0f69      	lsrs	r1, r5, #29
 80028a0:	433b      	orrs	r3, r7
 80028a2:	430b      	orrs	r3, r1
 80028a4:	0759      	lsls	r1, r3, #29
 80028a6:	d041      	beq.n	800292c <__aeabi_d2f+0xec>
 80028a8:	210f      	movs	r1, #15
 80028aa:	4019      	ands	r1, r3
 80028ac:	2904      	cmp	r1, #4
 80028ae:	d028      	beq.n	8002902 <__aeabi_d2f+0xc2>
 80028b0:	3304      	adds	r3, #4
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	d525      	bpl.n	8002902 <__aeabi_d2f+0xc2>
 80028b6:	3401      	adds	r4, #1
 80028b8:	2300      	movs	r3, #0
 80028ba:	b2e0      	uxtb	r0, r4
 80028bc:	e7d6      	b.n	800286c <__aeabi_d2f+0x2c>
 80028be:	0021      	movs	r1, r4
 80028c0:	3117      	adds	r1, #23
 80028c2:	dbdb      	blt.n	800287c <__aeabi_d2f+0x3c>
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	201e      	movs	r0, #30
 80028c8:	0409      	lsls	r1, r1, #16
 80028ca:	4339      	orrs	r1, r7
 80028cc:	1b00      	subs	r0, r0, r4
 80028ce:	281f      	cmp	r0, #31
 80028d0:	dd1b      	ble.n	800290a <__aeabi_d2f+0xca>
 80028d2:	2602      	movs	r6, #2
 80028d4:	4276      	negs	r6, r6
 80028d6:	1b34      	subs	r4, r6, r4
 80028d8:	000e      	movs	r6, r1
 80028da:	40e6      	lsrs	r6, r4
 80028dc:	0034      	movs	r4, r6
 80028de:	2820      	cmp	r0, #32
 80028e0:	d004      	beq.n	80028ec <__aeabi_d2f+0xac>
 80028e2:	4817      	ldr	r0, [pc, #92]	@ (8002940 <__aeabi_d2f+0x100>)
 80028e4:	4684      	mov	ip, r0
 80028e6:	4463      	add	r3, ip
 80028e8:	4099      	lsls	r1, r3
 80028ea:	430d      	orrs	r5, r1
 80028ec:	002b      	movs	r3, r5
 80028ee:	1e59      	subs	r1, r3, #1
 80028f0:	418b      	sbcs	r3, r1
 80028f2:	4323      	orrs	r3, r4
 80028f4:	0759      	lsls	r1, r3, #29
 80028f6:	d015      	beq.n	8002924 <__aeabi_d2f+0xe4>
 80028f8:	210f      	movs	r1, #15
 80028fa:	2400      	movs	r4, #0
 80028fc:	4019      	ands	r1, r3
 80028fe:	2904      	cmp	r1, #4
 8002900:	d117      	bne.n	8002932 <__aeabi_d2f+0xf2>
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	0a5b      	lsrs	r3, r3, #9
 8002906:	b2e0      	uxtb	r0, r4
 8002908:	e7b0      	b.n	800286c <__aeabi_d2f+0x2c>
 800290a:	4c0e      	ldr	r4, [pc, #56]	@ (8002944 <__aeabi_d2f+0x104>)
 800290c:	191c      	adds	r4, r3, r4
 800290e:	002b      	movs	r3, r5
 8002910:	40a5      	lsls	r5, r4
 8002912:	40c3      	lsrs	r3, r0
 8002914:	40a1      	lsls	r1, r4
 8002916:	1e68      	subs	r0, r5, #1
 8002918:	4185      	sbcs	r5, r0
 800291a:	4329      	orrs	r1, r5
 800291c:	430b      	orrs	r3, r1
 800291e:	2400      	movs	r4, #0
 8002920:	0759      	lsls	r1, r3, #29
 8002922:	d1c1      	bne.n	80028a8 <__aeabi_d2f+0x68>
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	2000      	movs	r0, #0
 8002928:	0a5b      	lsrs	r3, r3, #9
 800292a:	e79f      	b.n	800286c <__aeabi_d2f+0x2c>
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	b2e0      	uxtb	r0, r4
 8002930:	e79c      	b.n	800286c <__aeabi_d2f+0x2c>
 8002932:	3304      	adds	r3, #4
 8002934:	e7e5      	b.n	8002902 <__aeabi_d2f+0xc2>
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	000007fe 	.word	0x000007fe
 800293c:	fffffc80 	.word	0xfffffc80
 8002940:	fffffca2 	.word	0xfffffca2
 8002944:	fffffc82 	.word	0xfffffc82

08002948 <__clzsi2>:
 8002948:	211c      	movs	r1, #28
 800294a:	2301      	movs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	4298      	cmp	r0, r3
 8002950:	d301      	bcc.n	8002956 <__clzsi2+0xe>
 8002952:	0c00      	lsrs	r0, r0, #16
 8002954:	3910      	subs	r1, #16
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	4298      	cmp	r0, r3
 800295a:	d301      	bcc.n	8002960 <__clzsi2+0x18>
 800295c:	0a00      	lsrs	r0, r0, #8
 800295e:	3908      	subs	r1, #8
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	4298      	cmp	r0, r3
 8002964:	d301      	bcc.n	800296a <__clzsi2+0x22>
 8002966:	0900      	lsrs	r0, r0, #4
 8002968:	3904      	subs	r1, #4
 800296a:	a202      	add	r2, pc, #8	@ (adr r2, 8002974 <__clzsi2+0x2c>)
 800296c:	5c10      	ldrb	r0, [r2, r0]
 800296e:	1840      	adds	r0, r0, r1
 8002970:	4770      	bx	lr
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	02020304 	.word	0x02020304
 8002978:	01010101 	.word	0x01010101
	...

08002984 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 800298c:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_ADC_ConvCpltCallback+0x10c>)
 800298e:	881a      	ldrh	r2, [r3, #0]
 8002990:	23fa      	movs	r3, #250	@ 0xfa
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	429a      	cmp	r2, r3
 8002996:	d34f      	bcc.n	8002a38 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e041      	b.n	8002a26 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80029a2:	250f      	movs	r5, #15
 80029a4:	197b      	adds	r3, r7, r5
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	58d2      	ldr	r2, [r2, r3]
 80029ae:	197b      	adds	r3, r7, r5
 80029b0:	781c      	ldrb	r4, [r3, #0]
 80029b2:	23fa      	movs	r3, #250	@ 0xfa
 80029b4:	0059      	lsls	r1, r3, #1
 80029b6:	0010      	movs	r0, r2
 80029b8:	f7fd fbbe 	bl	8000138 <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	0019      	movs	r1, r3
 80029c0:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 80029c2:	00a2      	lsls	r2, r4, #2
 80029c4:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 80029c6:	197b      	adds	r3, r7, r5
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	58d3      	ldr	r3, [r2, r3]
 80029d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80029d2:	d805      	bhi.n	80029e0 <HAL_ADC_ConvCpltCallback+0x5c>
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	2100      	movs	r1, #0
 80029de:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 80029e0:	250f      	movs	r5, #15
 80029e2:	197b      	adds	r3, r7, r5
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	58d3      	ldr	r3, [r2, r3]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fd ffe1 	bl	80009b4 <__aeabi_ui2f>
 80029f2:	197b      	adds	r3, r7, r5
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	4b28      	ldr	r3, [pc, #160]	@ (8002a98 <HAL_ADC_ConvCpltCallback+0x114>)
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	58d2      	ldr	r2, [r2, r3]
 80029fc:	197b      	adds	r3, r7, r5
 80029fe:	781c      	ldrb	r4, [r3, #0]
 8002a00:	1c11      	adds	r1, r2, #0
 8002a02:	f7fd fe4d 	bl	80006a0 <__aeabi_fmul>
 8002a06:	1c03      	adds	r3, r0, #0
 8002a08:	1c19      	adds	r1, r3, #0
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_ADC_ConvCpltCallback+0x118>)
 8002a0c:	00a2      	lsls	r2, r4, #2
 8002a0e:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	2100      	movs	r1, #0
 8002a1a:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002a1c:	197b      	adds	r3, r7, r5
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	197b      	adds	r3, r7, r5
 8002a22:	3201      	adds	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	230f      	movs	r3, #15
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d9b8      	bls.n	80029a2 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8002a36:	e026      	b.n	8002a86 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002a38:	230e      	movs	r3, #14
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e016      	b.n	8002a70 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8002a42:	200e      	movs	r0, #14
 8002a44:	183b      	adds	r3, r7, r0
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	58d3      	ldr	r3, [r2, r3]
 8002a4e:	183a      	adds	r2, r7, r0
 8002a50:	7811      	ldrb	r1, [r2, #0]
 8002a52:	4a13      	ldr	r2, [pc, #76]	@ (8002aa0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002a54:	0049      	lsls	r1, r1, #1
 8002a56:	5a8a      	ldrh	r2, [r1, r2]
 8002a58:	0011      	movs	r1, r2
 8002a5a:	183a      	adds	r2, r7, r0
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	1859      	adds	r1, r3, r1
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_ADC_ConvCpltCallback+0x110>)
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	183b      	adds	r3, r7, r0
 8002a6c:	3201      	adds	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	230e      	movs	r3, #14
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d9e3      	bls.n	8002a42 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002a84:	801a      	strh	r2, [r3, #0]
}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	20000578 	.word	0x20000578
 8002a94:	2000057c 	.word	0x2000057c
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	200004c8 	.word	0x200004c8
 8002aa0:	200004d4 	.word	0x200004d4

08002aa4 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	0002      	movs	r2, r0
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 8002ab0:	1dbb      	adds	r3, r7, #6
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d112      	bne.n	8002ade <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2101      	movs	r1, #1
 8002aca:	0018      	movs	r0, r3
 8002acc:	f002 fcd9 	bl	8005482 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	480a      	ldr	r0, [pc, #40]	@ (8002b00 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	0019      	movs	r1, r3
 8002ada:	f002 fcd2 	bl	8005482 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8002ade:	1dbb      	adds	r3, r7, #6
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d102      	bne.n	8002aec <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200004dc 	.word	0x200004dc
 8002af8:	200004db 	.word	0x200004db
 8002afc:	50001400 	.word	0x50001400
 8002b00:	50000800 	.word	0x50000800
 8002b04:	200004e6 	.word	0x200004e6

08002b08 <gsm_is_valid_resp>:
	strcpy(gsm_match_resp, op_check);
	gsm_status = GSM_WAIT;
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
}

uint8_t gsm_is_valid_resp() {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <gsm_is_valid_resp+0x20>)
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <gsm_is_valid_resp+0x24>)
 8002b10:	0011      	movs	r1, r2
 8002b12:	0018      	movs	r0, r3
 8002b14:	f005 ffb4 	bl	8008a80 <strstr>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	4193      	sbcs	r3, r2
 8002b1e:	b2db      	uxtb	r3, r3
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	20000564 	.word	0x20000564
 8002b2c:	20000500 	.word	0x20000500

08002b30 <HAL_TIM_PeriodElapsedCallback>:
		gsm_rx_flag = 1;
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d000      	beq.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x14>
 8002b42:	e10c      	b.n	8002d5e <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8002b44:	4b89      	ldr	r3, [pc, #548]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a89      	ldr	r2, [pc, #548]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d924      	bls.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(sec > 60) {
 8002b4e:	4b89      	ldr	r3, [pc, #548]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b54:	d916      	bls.n	8002b84 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8002b56:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b5c:	d909      	bls.n	8002b72 <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8002b5e:	4b86      	ldr	r3, [pc, #536]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
					hr++;
 8002b64:	4b85      	ldr	r3, [pc, #532]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b83      	ldr	r3, [pc, #524]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e004      	b.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 8002b72:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002b7a:	601a      	str	r2, [r3, #0]
				sec = 0;
 8002b7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e005      	b.n	8002b90 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8002b84:	4b7b      	ldr	r3, [pc, #492]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002b8e:	701a      	strb	r2, [r3, #0]
			ms = 0;
 8002b90:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e004      	b.n	8002ba2 <HAL_TIM_PeriodElapsedCallback+0x72>
			/*###*/
		} else ms++;
 8002b98:	4b74      	ldr	r3, [pc, #464]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4b73      	ldr	r3, [pc, #460]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002ba0:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 8002ba2:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4976      	ldr	r1, [pc, #472]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7fd fb4b 	bl	8000244 <__aeabi_uidivmod>
 8002bae:	1e0b      	subs	r3, r1, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_TIM_PeriodElapsedCallback+0x88>
			sensor_refresh_flag = 1;
 8002bb2:	4b74      	ldr	r3, [pc, #464]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
		vi_update_flag = 1;
 8002bb8:	4b73      	ldr	r3, [pc, #460]	@ (8002d88 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8002bbe:	4b73      	ldr	r3, [pc, #460]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	e000      	b.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002bd4:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	e000      	b.n	8002bea <HAL_TIM_PeriodElapsedCallback+0xba>
 8002be8:	2200      	movs	r2, #0
 8002bea:	4b6b      	ldr	r3, [pc, #428]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002bec:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8002bee:	4b6b      	ldr	r3, [pc, #428]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	e000      	b.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8002c00:	2200      	movs	r2, #0
 8002c02:	4b67      	ldr	r3, [pc, #412]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002c04:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002c0e:	4b66      	ldr	r3, [pc, #408]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	e000      	b.n	8002c1a <HAL_TIM_PeriodElapsedCallback+0xea>
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002c1c:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8002c1e:	4b62      	ldr	r3, [pc, #392]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	23fa      	movs	r3, #250	@ 0xfa
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d908      	bls.n	8002c3c <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 8002c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8002c30:	4b5e      	ldr	r3, [pc, #376]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	2102      	movs	r1, #2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f002 fc23 	bl	8005482 <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8002c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d14f      	bne.n	8002ce4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8002c44:	4b5b      	ldr	r3, [pc, #364]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_TIM_PeriodElapsedCallback+0x13e>
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1c18      	adds	r0, r3, #0
 8002c52:	f7ff fdad 	bl	80027b0 <__aeabi_f2d>
 8002c56:	4a59      	ldr	r2, [pc, #356]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002c5a:	f7fd feed 	bl	8000a38 <__aeabi_dadd>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	000b      	movs	r3, r1
 8002c62:	0010      	movs	r0, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	f7ff fdeb 	bl	8002840 <__aeabi_d2f>
 8002c6a:	1c02      	adds	r2, r0, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x140>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4b51      	ldr	r3, [pc, #324]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c72:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 8002c74:	4b50      	ldr	r3, [pc, #320]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b52      	ldr	r3, [pc, #328]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c19      	adds	r1, r3, #0
 8002c7e:	1c10      	adds	r0, r2, #0
 8002c80:	f7fd fc3e 	bl	8000500 <__aeabi_fcmpge>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d03d      	beq.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 8002c88:	4b4a      	ldr	r3, [pc, #296]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	2101      	movs	r1, #1
 8002c94:	0018      	movs	r0, r3
 8002c96:	f002 fbf4 	bl	8005482 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	484a      	ldr	r0, [pc, #296]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	f002 fbed 	bl	8005482 <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 80; i++);
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_PeriodElapsedCallback+0x18e>
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	3201      	adds	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b4f      	cmp	r3, #79	@ 0x4f
 8002cc6:	d9f4      	bls.n	8002cb2 <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 8002cc8:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f002 fbd7 	bl	8005482 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	019b      	lsls	r3, r3, #6
 8002cd8:	483b      	ldr	r0, [pc, #236]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	0019      	movs	r1, r3
 8002cde:	f002 fbd0 	bl	8005482 <HAL_GPIO_WritePin>
 8002ce2:	e00f      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2101      	movs	r1, #1
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 fbc9 	bl	8005482 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	019b      	lsls	r3, r3, #6
 8002cf4:	4834      	ldr	r0, [pc, #208]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	f002 fbc2 	bl	8005482 <HAL_GPIO_WritePin>
			triac_time = 0;
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8002d04:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	e000      	b.n	8002d1c <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d1e:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d916      	bls.n	8002d5e <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 8002d36:	f7ff fee7 	bl	8002b08 <gsm_is_valid_resp>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e002      	b.n	8002d4c <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002d48:	2263      	movs	r2, #99	@ 0x63
 8002d4a:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		}


	}
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	200004b8 	.word	0x200004b8
 8002d70:	00002710 	.word	0x00002710
 8002d74:	200004bc 	.word	0x200004bc
 8002d78:	200004c0 	.word	0x200004c0
 8002d7c:	200004c4 	.word	0x200004c4
 8002d80:	00001388 	.word	0x00001388
 8002d84:	200004b5 	.word	0x200004b5
 8002d88:	200004e7 	.word	0x200004e7
 8002d8c:	200004a8 	.word	0x200004a8
 8002d90:	200004ac 	.word	0x200004ac
 8002d94:	200004a9 	.word	0x200004a9
 8002d98:	200004ae 	.word	0x200004ae
 8002d9c:	200004aa 	.word	0x200004aa
 8002da0:	200004b0 	.word	0x200004b0
 8002da4:	200004b4 	.word	0x200004b4
 8002da8:	200004b2 	.word	0x200004b2
 8002dac:	50001400 	.word	0x50001400
 8002db0:	200004e4 	.word	0x200004e4
 8002db4:	200004db 	.word	0x200004db
 8002db8:	200004dc 	.word	0x200004dc
 8002dbc:	9999999a 	.word	0x9999999a
 8002dc0:	3fb99999 	.word	0x3fb99999
 8002dc4:	200004e0 	.word	0x200004e0
 8002dc8:	50000800 	.word	0x50000800
 8002dcc:	200004fd 	.word	0x200004fd
 8002dd0:	200004f8 	.word	0x200004f8
 8002dd4:	200004fa 	.word	0x200004fa
 8002dd8:	200004f6 	.word	0x200004f6
 8002ddc:	200004f4 	.word	0x200004f4
 8002de0:	200004f5 	.word	0x200004f5

08002de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b0be      	sub	sp, #248	@ 0xf8
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dea:	f001 f87f 	bl	8003eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dee:	f000 f97b 	bl	80030e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df2:	f000 fb9d 	bl	8003530 <MX_GPIO_Init>
  MX_DMA_Init();
 8002df6:	f000 fb7d 	bl	80034f4 <MX_DMA_Init>
  MX_I2C2_Init();
 8002dfa:	f000 faa1 	bl	8003340 <MX_I2C2_Init>
  MX_TIM16_Init();
 8002dfe:	f000 fb1f 	bl	8003440 <MX_TIM16_Init>
  MX_I2C1_Init();
 8002e02:	f000 fa5d 	bl	80032c0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002e06:	f000 fb41 	bl	800348c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002e0a:	f000 f9c7 	bl	800319c <MX_ADC1_Init>
  MX_SPI2_Init();
 8002e0e:	f000 fad7 	bl	80033c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 8002e12:	4ba6      	ldr	r3, [pc, #664]	@ (80030ac <main+0x2c8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	2101      	movs	r1, #1
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f002 fb32 	bl	8005482 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	48a3      	ldr	r0, [pc, #652]	@ (80030b0 <main+0x2cc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	0019      	movs	r1, r3
 8002e28:	f002 fb2b 	bl	8005482 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8002e2c:	23ec      	movs	r3, #236	@ 0xec
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 8002e34:	23f7      	movs	r3, #247	@ 0xf7
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8002e3c:	23f4      	movs	r3, #244	@ 0xf4
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 8002e44:	4b9b      	ldr	r3, [pc, #620]	@ (80030b4 <main+0x2d0>)
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8002e4c:	4b99      	ldr	r3, [pc, #612]	@ (80030b4 <main+0x2d0>)
 8002e4e:	2280      	movs	r2, #128	@ 0x80
 8002e50:	0152      	lsls	r2, r2, #5
 8002e52:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8002e54:	4b97      	ldr	r3, [pc, #604]	@ (80030b4 <main+0x2d0>)
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	0192      	lsls	r2, r2, #6
 8002e5a:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8002e5c:	4b95      	ldr	r3, [pc, #596]	@ (80030b4 <main+0x2d0>)
 8002e5e:	2280      	movs	r2, #128	@ 0x80
 8002e60:	01d2      	lsls	r2, r2, #7
 8002e62:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8002e64:	4b93      	ldr	r3, [pc, #588]	@ (80030b4 <main+0x2d0>)
 8002e66:	2280      	movs	r2, #128	@ 0x80
 8002e68:	0212      	lsls	r2, r2, #8
 8002e6a:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8002e76:	4b8f      	ldr	r3, [pc, #572]	@ (80030b4 <main+0x2d0>)
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 8002e7e:	4b8e      	ldr	r3, [pc, #568]	@ (80030b8 <main+0x2d4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <main+0x2d4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80030b8 <main+0x2d4>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 8002e90:	2324      	movs	r3, #36	@ 0x24
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	22c4      	movs	r2, #196	@ 0xc4
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f005 fde6 	bl	8008a70 <memset>
	char api_key[20] = "07AFUS2QQTX0QLDF"; /* key for production */
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	18f9      	adds	r1, r7, r3
 8002ea8:	4a84      	ldr	r2, [pc, #528]	@ (80030bc <main+0x2d8>)
 8002eaa:	000b      	movs	r3, r1
 8002eac:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002eae:	c331      	stmia	r3!, {r0, r4, r5}
 8002eb0:	6810      	ldr	r0, [r2, #0]
 8002eb2:	6018      	str	r0, [r3, #0]
 8002eb4:	7912      	ldrb	r2, [r2, #4]
 8002eb6:	711a      	strb	r2, [r3, #4]
 8002eb8:	2311      	movs	r3, #17
 8002eba:	18cb      	adds	r3, r1, r3
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f005 fdd5 	bl	8008a70 <memset>
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
//	HAL_Delay(700);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
//	HAL_Delay(15000);
//
	uint8_t prev_idx = 1;
 8002ec6:	23f3      	movs	r3, #243	@ 0xf3
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 8002ece:	23f2      	movs	r3, #242	@ 0xf2
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 8002ed6:	23f0      	movs	r3, #240	@ 0xf0
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	22c8      	movs	r2, #200	@ 0xc8
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 8002ee0:	4b77      	ldr	r3, [pc, #476]	@ (80030c0 <main+0x2dc>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f004 fa0a 	bl	80072fc <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 8002ee8:	4b76      	ldr	r3, [pc, #472]	@ (80030c4 <main+0x2e0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8002eee:	4b76      	ldr	r3, [pc, #472]	@ (80030c8 <main+0x2e4>)
 8002ef0:	22ff      	movs	r2, #255	@ 0xff
 8002ef2:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 8002ef4:	003b      	movs	r3, r7
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	2307      	movs	r3, #7
 8002efa:	001a      	movs	r2, r3
 8002efc:	2100      	movs	r1, #0
 8002efe:	f005 fdb7 	bl	8008a70 <memset>
	ti.day = 14;
 8002f02:	2108      	movs	r1, #8
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	220e      	movs	r2, #14
 8002f08:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	220b      	movs	r2, #11
 8002f0e:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2218      	movs	r2, #24
 8002f14:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2202      	movs	r2, #2
 8002f1a:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2215      	movs	r2, #21
 8002f20:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	220e      	movs	r2, #14
 8002f26:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	719a      	strb	r2, [r3, #6]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 8002f2e:	21ec      	movs	r1, #236	@ 0xec
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2200      	movs	r2, #0
 8002f3a:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8002f3c:	23ee      	movs	r3, #238	@ 0xee
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8002f44:	23f4      	movs	r3, #244	@ 0xf4
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	@ (80030cc <main+0x2e8>)
 8002f4e:	681c      	ldr	r4, [r3, #0]
 8002f50:	25f0      	movs	r5, #240	@ 0xf0
 8002f52:	197b      	adds	r3, r7, r5
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fce0 	bl	800091c <__aeabi_i2f>
 8002f5c:	1c03      	adds	r3, r0, #0
 8002f5e:	1c19      	adds	r1, r3, #0
 8002f60:	1c20      	adds	r0, r4, #0
 8002f62:	f7fd facd 	bl	8000500 <__aeabi_fcmpge>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d10d      	bne.n	8002f86 <main+0x1a2>
 8002f6a:	4b58      	ldr	r3, [pc, #352]	@ (80030cc <main+0x2e8>)
 8002f6c:	685c      	ldr	r4, [r3, #4]
 8002f6e:	197b      	adds	r3, r7, r5
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fd fcd2 	bl	800091c <__aeabi_i2f>
 8002f78:	1c03      	adds	r3, r0, #0
 8002f7a:	1c19      	adds	r1, r3, #0
 8002f7c:	1c20      	adds	r0, r4, #0
 8002f7e:	f7fd fabf 	bl	8000500 <__aeabi_fcmpge>
 8002f82:	1e03      	subs	r3, r0, #0
 8002f84:	d010      	beq.n	8002fa8 <main+0x1c4>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8002f86:	4b49      	ldr	r3, [pc, #292]	@ (80030ac <main+0x2c8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f002 fa78 	bl	8005482 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	4846      	ldr	r0, [pc, #280]	@ (80030b0 <main+0x2cc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	f002 fa71 	bl	8005482 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <main+0x2ec>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e002      	b.n	8002fae <main+0x1ca>
		}
		else {
			triac_temp_ctrl = 1;
 8002fa8:	4b49      	ldr	r3, [pc, #292]	@ (80030d0 <main+0x2ec>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8002fae:	4b48      	ldr	r3, [pc, #288]	@ (80030d0 <main+0x2ec>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d165      	bne.n	8003082 <main+0x29e>
			if(BTN1_READ() == 0) {
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4a3e      	ldr	r2, [pc, #248]	@ (80030b4 <main+0x2d0>)
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	f002 fa42 	bl	8005448 <HAL_GPIO_ReadPin>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d112      	bne.n	8002fee <main+0x20a>
				if(BTN1_READ() == 0) {
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a39      	ldr	r2, [pc, #228]	@ (80030b4 <main+0x2d0>)
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f002 fa39 	bl	8005448 <HAL_GPIO_ReadPin>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d1a9      	bne.n	8002f2e <main+0x14a>
					mode = 1;
 8002fda:	4b3e      	ldr	r3, [pc, #248]	@ (80030d4 <main+0x2f0>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
					triac_time = 6.5; /* 130V */
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <main+0x2f4>)
 8002fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80030dc <main+0x2f8>)
 8002fe4:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80030e0 <main+0x2fc>)
 8002fe8:	2202      	movs	r2, #2
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e79f      	b.n	8002f2e <main+0x14a>
				}
			}
			else if(BTN2_READ() == 0) {
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <main+0x2d0>)
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	0010      	movs	r0, r2
 8002ff8:	f002 fa26 	bl	8005448 <HAL_GPIO_ReadPin>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d112      	bne.n	8003026 <main+0x242>
				if(BTN2_READ() == 0) {
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4a2b      	ldr	r2, [pc, #172]	@ (80030b4 <main+0x2d0>)
 8003006:	0019      	movs	r1, r3
 8003008:	0010      	movs	r0, r2
 800300a:	f002 fa1d 	bl	8005448 <HAL_GPIO_ReadPin>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d18d      	bne.n	8002f2e <main+0x14a>
					mode = 2;
 8003012:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <main+0x2f0>)
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
					triac_time = 5.5; /* 170V */
 8003018:	4b2f      	ldr	r3, [pc, #188]	@ (80030d8 <main+0x2f4>)
 800301a:	4a32      	ldr	r2, [pc, #200]	@ (80030e4 <main+0x300>)
 800301c:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800301e:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <main+0x2fc>)
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e783      	b.n	8002f2e <main+0x14a>
				}
			}
			else if(BTN3_READ() == 0) {
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <main+0x2d0>)
 8003028:	2180      	movs	r1, #128	@ 0x80
 800302a:	0018      	movs	r0, r3
 800302c:	f002 fa0c 	bl	8005448 <HAL_GPIO_ReadPin>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d112      	bne.n	800305a <main+0x276>
				if(BTN3_READ() == 0) {
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <main+0x2d0>)
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	0018      	movs	r0, r3
 800303a:	f002 fa05 	bl	8005448 <HAL_GPIO_ReadPin>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d000      	beq.n	8003044 <main+0x260>
 8003042:	e774      	b.n	8002f2e <main+0x14a>
					mode = 3;
 8003044:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <main+0x2f0>)
 8003046:	2203      	movs	r2, #3
 8003048:	701a      	strb	r2, [r3, #0]
					triac_time = 4; /* 205V */
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <main+0x2f4>)
 800304c:	2281      	movs	r2, #129	@ 0x81
 800304e:	05d2      	lsls	r2, r2, #23
 8003050:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003052:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <main+0x2fc>)
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e769      	b.n	8002f2e <main+0x14a>
				}
			}
			else {
				mode = 0;
 800305a:	4b1e      	ldr	r3, [pc, #120]	@ (80030d4 <main+0x2f0>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003060:	4b1f      	ldr	r3, [pc, #124]	@ (80030e0 <main+0x2fc>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <main+0x2c8>)
 8003068:	2200      	movs	r2, #0
 800306a:	2101      	movs	r1, #1
 800306c:	0018      	movs	r0, r3
 800306e:	f002 fa08 	bl	8005482 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003072:	2380      	movs	r3, #128	@ 0x80
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <main+0x2cc>)
 8003078:	2200      	movs	r2, #0
 800307a:	0019      	movs	r1, r3
 800307c:	f002 fa01 	bl	8005482 <HAL_GPIO_WritePin>
 8003080:	e755      	b.n	8002f2e <main+0x14a>
			}
		}
		else {
			mode = 0;
 8003082:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <main+0x2f0>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <main+0x2fc>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <main+0x2c8>)
 8003090:	2200      	movs	r2, #0
 8003092:	2101      	movs	r1, #1
 8003094:	0018      	movs	r0, r3
 8003096:	f002 f9f4 	bl	8005482 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	4804      	ldr	r0, [pc, #16]	@ (80030b0 <main+0x2cc>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	0019      	movs	r1, r3
 80030a4:	f002 f9ed 	bl	8005482 <HAL_GPIO_WritePin>
		sdo[0] = 0;
 80030a8:	e741      	b.n	8002f2e <main+0x14a>
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	50001400 	.word	0x50001400
 80030b0:	50000800 	.word	0x50000800
 80030b4:	50000400 	.word	0x50000400
 80030b8:	200004d4 	.word	0x200004d4
 80030bc:	0800aa54 	.word	0x0800aa54
 80030c0:	200003c8 	.word	0x200003c8
 80030c4:	200004db 	.word	0x200004db
 80030c8:	200004fc 	.word	0x200004fc
 80030cc:	200004e8 	.word	0x200004e8
 80030d0:	200004da 	.word	0x200004da
 80030d4:	200004e5 	.word	0x200004e5
 80030d8:	200004e0 	.word	0x200004e0
 80030dc:	40d00000 	.word	0x40d00000
 80030e0:	200004e4 	.word	0x200004e4
 80030e4:	40b00000 	.word	0x40b00000

080030e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b093      	sub	sp, #76	@ 0x4c
 80030ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ee:	2414      	movs	r4, #20
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	0018      	movs	r0, r3
 80030f4:	2334      	movs	r3, #52	@ 0x34
 80030f6:	001a      	movs	r2, r3
 80030f8:	2100      	movs	r1, #0
 80030fa:	f005 fcb9 	bl	8008a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	0018      	movs	r0, r3
 8003102:	2310      	movs	r3, #16
 8003104:	001a      	movs	r2, r3
 8003106:	2100      	movs	r1, #0
 8003108:	f005 fcb2 	bl	8008a70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	0018      	movs	r0, r3
 8003112:	f003 f9a9 	bl	8006468 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003116:	193b      	adds	r3, r7, r4
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800311c:	193b      	adds	r3, r7, r4
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	0052      	lsls	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003124:	0021      	movs	r1, r4
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2240      	movs	r2, #64	@ 0x40
 8003130:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2202      	movs	r2, #2
 8003136:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2202      	movs	r2, #2
 800313c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2200      	movs	r2, #0
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	220c      	movs	r2, #12
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 800314a:	187b      	adds	r3, r7, r1
 800314c:	22b0      	movs	r2, #176	@ 0xb0
 800314e:	0352      	lsls	r2, r2, #13
 8003150:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8003152:	187b      	adds	r3, r7, r1
 8003154:	22a0      	movs	r2, #160	@ 0xa0
 8003156:	0612      	lsls	r2, r2, #24
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800315a:	187b      	adds	r3, r7, r1
 800315c:	0018      	movs	r0, r3
 800315e:	f003 f9cf 	bl	8006500 <HAL_RCC_OscConfig>
 8003162:	1e03      	subs	r3, r0, #0
 8003164:	d001      	beq.n	800316a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003166:	f000 fb0d 	bl	8003784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2202      	movs	r2, #2
 8003174:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	2101      	movs	r1, #1
 8003186:	0018      	movs	r0, r3
 8003188:	f003 fcca 	bl	8006b20 <HAL_RCC_ClockConfig>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d001      	beq.n	8003194 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003190:	f000 faf8 	bl	8003784 <Error_Handler>
  }
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b013      	add	sp, #76	@ 0x4c
 800319a:	bd90      	pop	{r4, r7, pc}

0800319c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	0018      	movs	r0, r3
 80031a6:	230c      	movs	r3, #12
 80031a8:	001a      	movs	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f005 fc60 	bl	8008a70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031b0:	4b3e      	ldr	r3, [pc, #248]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031b2:	4a3f      	ldr	r2, [pc, #252]	@ (80032b0 <MX_ADC1_Init+0x114>)
 80031b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	0352      	lsls	r2, r2, #13
 80031bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031c4:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031cc:	2280      	movs	r2, #128	@ 0x80
 80031ce:	0392      	lsls	r2, r2, #14
 80031d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031d2:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031d4:	2208      	movs	r2, #8
 80031d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031d8:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031da:	2200      	movs	r2, #0
 80031dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031e4:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80031ea:	4b30      	ldr	r3, [pc, #192]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031ec:	2203      	movs	r2, #3
 80031ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031f0:	4b2e      	ldr	r3, [pc, #184]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031f2:	2220      	movs	r2, #32
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031f8:	4b2c      	ldr	r3, [pc, #176]	@ (80032ac <MX_ADC1_Init+0x110>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003200:	2200      	movs	r2, #0
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003206:	222c      	movs	r2, #44	@ 0x2c
 8003208:	2101      	movs	r1, #1
 800320a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800320c:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <MX_ADC1_Init+0x110>)
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003212:	4b26      	ldr	r3, [pc, #152]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003214:	2200      	movs	r2, #0
 8003216:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003218:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <MX_ADC1_Init+0x110>)
 800321a:	2200      	movs	r2, #0
 800321c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003220:	223c      	movs	r2, #60	@ 0x3c
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003226:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003228:	2200      	movs	r2, #0
 800322a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <MX_ADC1_Init+0x110>)
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fffe 	bl	8004230 <HAL_ADC_Init>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d001      	beq.n	800323c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003238:	f000 faa4 	bl	8003784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <MX_ADC1_Init+0x118>)
 8003240:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800324e:	1d3a      	adds	r2, r7, #4
 8003250:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f001 fabb 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800325e:	f000 fa91 	bl	8003784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <MX_ADC1_Init+0x11c>)
 8003266:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	2204      	movs	r2, #4
 800326c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800326e:	1d3a      	adds	r2, r7, #4
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f001 faab 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d001      	beq.n	8003282 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800327e:	f000 fa81 	bl	8003784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <MX_ADC1_Init+0x120>)
 8003286:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	2208      	movs	r2, #8
 800328c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800328e:	1d3a      	adds	r2, r7, #4
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <MX_ADC1_Init+0x110>)
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fa9b 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800329e:	f000 fa71 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	200001fc 	.word	0x200001fc
 80032b0:	40012400 	.word	0x40012400
 80032b4:	08000004 	.word	0x08000004
 80032b8:	0c000008 	.word	0x0c000008
 80032bc:	b4002000 	.word	0xb4002000

080032c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <MX_I2C1_Init+0x78>)
 80032c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032cc:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <MX_I2C1_Init+0x7c>)
 80032ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032d0:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032d8:	2201      	movs	r2, #1
 80032da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_I2C1_Init+0x74>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f002 f911 	bl	8005524 <HAL_I2C_Init>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003306:	f000 fa3d 	bl	8003784 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <MX_I2C1_Init+0x74>)
 800330c:	2100      	movs	r1, #0
 800330e:	0018      	movs	r0, r3
 8003310:	f003 f812 	bl	8006338 <HAL_I2CEx_ConfigAnalogFilter>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d001      	beq.n	800331c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003318:	f000 fa34 	bl	8003784 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <MX_I2C1_Init+0x74>)
 800331e:	2100      	movs	r1, #0
 8003320:	0018      	movs	r0, r3
 8003322:	f003 f855 	bl	80063d0 <HAL_I2CEx_ConfigDigitalFilter>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d001      	beq.n	800332e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800332a:	f000 fa2b 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200002bc 	.word	0x200002bc
 8003338:	40005400 	.word	0x40005400
 800333c:	0060112f 	.word	0x0060112f

08003340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003346:	4a1c      	ldr	r2, [pc, #112]	@ (80033b8 <MX_I2C2_Init+0x78>)
 8003348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0060112F;
 800334a:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <MX_I2C2_Init+0x7c>)
 800334e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 78;
 8003350:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003352:	224e      	movs	r2, #78	@ 0x4e
 8003354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003356:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003358:	2201      	movs	r2, #1
 800335a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800335c:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003362:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800336e:	4b11      	ldr	r3, [pc, #68]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003370:	2200      	movs	r2, #0
 8003372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003374:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <MX_I2C2_Init+0x74>)
 8003376:	2200      	movs	r2, #0
 8003378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800337c:	0018      	movs	r0, r3
 800337e:	f002 f8d1 	bl	8005524 <HAL_I2C_Init>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003386:	f000 f9fd 	bl	8003784 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800338a:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800338c:	2100      	movs	r1, #0
 800338e:	0018      	movs	r0, r3
 8003390:	f002 ffd2 	bl	8006338 <HAL_I2CEx_ConfigAnalogFilter>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003398:	f000 f9f4 	bl	8003784 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <MX_I2C2_Init+0x74>)
 800339e:	2100      	movs	r1, #0
 80033a0:	0018      	movs	r0, r3
 80033a2:	f003 f815 	bl	80063d0 <HAL_I2CEx_ConfigDigitalFilter>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d001      	beq.n	80033ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80033aa:	f000 f9eb 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000310 	.word	0x20000310
 80033b8:	40005800 	.word	0x40005800
 80033bc:	0060112f 	.word	0x0060112f

080033c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033c6:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <MX_SPI2_Init+0x7c>)
 80033c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033cc:	2282      	movs	r2, #130	@ 0x82
 80033ce:	0052      	lsls	r2, r2, #1
 80033d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033da:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033dc:	22e0      	movs	r2, #224	@ 0xe0
 80033de:	00d2      	lsls	r2, r2, #3
 80033e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033e8:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033ee:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f6:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <MX_SPI2_Init+0x78>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <MX_SPI2_Init+0x78>)
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <MX_SPI2_Init+0x78>)
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <MX_SPI2_Init+0x78>)
 8003410:	2207      	movs	r2, #7
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <MX_SPI2_Init+0x78>)
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <MX_SPI2_Init+0x78>)
 800341c:	2208      	movs	r2, #8
 800341e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <MX_SPI2_Init+0x78>)
 8003422:	0018      	movs	r0, r3
 8003424:	f003 fe5a 	bl	80070dc <HAL_SPI_Init>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800342c:	f000 f9aa 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003430:	46c0      	nop			@ (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	20000364 	.word	0x20000364
 800343c:	40003800 	.word	0x40003800

08003440 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003444:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <MX_TIM16_Init+0x44>)
 8003446:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <MX_TIM16_Init+0x48>)
 8003448:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 800344a:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <MX_TIM16_Init+0x44>)
 800344c:	2220      	movs	r2, #32
 800344e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <MX_TIM16_Init+0x44>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <MX_TIM16_Init+0x44>)
 8003458:	2264      	movs	r2, #100	@ 0x64
 800345a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345c:	4b09      	ldr	r3, [pc, #36]	@ (8003484 <MX_TIM16_Init+0x44>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <MX_TIM16_Init+0x44>)
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <MX_TIM16_Init+0x44>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <MX_TIM16_Init+0x44>)
 8003470:	0018      	movs	r0, r3
 8003472:	f003 feeb 	bl	800724c <HAL_TIM_Base_Init>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800347a:	f000 f983 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200003c8 	.word	0x200003c8
 8003488:	40014400 	.word	0x40014400

0800348c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003490:	4b16      	ldr	r3, [pc, #88]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 8003492:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <MX_USART3_UART_Init+0x64>)
 8003494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 8003498:	22e1      	movs	r2, #225	@ 0xe1
 800349a:	0252      	lsls	r2, r2, #9
 800349c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ce:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <MX_USART3_UART_Init+0x60>)
 80034d6:	0018      	movs	r0, r3
 80034d8:	f004 f92a 	bl	8007730 <HAL_UART_Init>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80034e0:	f000 f950 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	20000414 	.word	0x20000414
 80034f0:	40004800 	.word	0x40004800

080034f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <MX_DMA_Init+0x38>)
 80034fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <MX_DMA_Init+0x38>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <MX_DMA_Init+0x38>)
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	2201      	movs	r2, #1
 800350c:	4013      	ands	r3, r2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2009      	movs	r0, #9
 8003518:	f001 fbfe 	bl	8004d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800351c:	2009      	movs	r0, #9
 800351e:	f001 fc10 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	40021000 	.word	0x40021000

08003530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b08b      	sub	sp, #44	@ 0x2c
 8003534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	2414      	movs	r4, #20
 8003538:	193b      	adds	r3, r7, r4
 800353a:	0018      	movs	r0, r3
 800353c:	2314      	movs	r3, #20
 800353e:	001a      	movs	r2, r3
 8003540:	2100      	movs	r1, #0
 8003542:	f005 fa95 	bl	8008a70 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003546:	4b8a      	ldr	r3, [pc, #552]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354a:	4b89      	ldr	r3, [pc, #548]	@ (8003770 <MX_GPIO_Init+0x240>)
 800354c:	2104      	movs	r1, #4
 800354e:	430a      	orrs	r2, r1
 8003550:	635a      	str	r2, [r3, #52]	@ 0x34
 8003552:	4b87      	ldr	r3, [pc, #540]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800355e:	4b84      	ldr	r3, [pc, #528]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	4b83      	ldr	r3, [pc, #524]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003564:	2120      	movs	r1, #32
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
 800356a:	4b81      	ldr	r3, [pc, #516]	@ (8003770 <MX_GPIO_Init+0x240>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	2220      	movs	r2, #32
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	4b7e      	ldr	r3, [pc, #504]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800357a:	4b7d      	ldr	r3, [pc, #500]	@ (8003770 <MX_GPIO_Init+0x240>)
 800357c:	2101      	movs	r1, #1
 800357e:	430a      	orrs	r2, r1
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34
 8003582:	4b7b      	ldr	r3, [pc, #492]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	4b78      	ldr	r3, [pc, #480]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003592:	4b77      	ldr	r3, [pc, #476]	@ (8003770 <MX_GPIO_Init+0x240>)
 8003594:	2102      	movs	r1, #2
 8003596:	430a      	orrs	r2, r1
 8003598:	635a      	str	r2, [r3, #52]	@ 0x34
 800359a:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <MX_GPIO_Init+0x240>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	2202      	movs	r2, #2
 80035a0:	4013      	ands	r3, r2
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <MX_GPIO_Init+0x240>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035aa:	4b71      	ldr	r3, [pc, #452]	@ (8003770 <MX_GPIO_Init+0x240>)
 80035ac:	2108      	movs	r1, #8
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003770 <MX_GPIO_Init+0x240>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	2208      	movs	r2, #8
 80035b8:	4013      	ands	r3, r2
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80035be:	23e0      	movs	r3, #224	@ 0xe0
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	486c      	ldr	r0, [pc, #432]	@ (8003774 <MX_GPIO_Init+0x244>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	0019      	movs	r1, r3
 80035c8:	f001 ff5b 	bl	8005482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 80035cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003778 <MX_GPIO_Init+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	2103      	movs	r1, #3
 80035d2:	0018      	movs	r0, r3
 80035d4:	f001 ff55 	bl	8005482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 80035d8:	23e0      	movs	r3, #224	@ 0xe0
 80035da:	0059      	lsls	r1, r3, #1
 80035dc:	23a0      	movs	r3, #160	@ 0xa0
 80035de:	05db      	lsls	r3, r3, #23
 80035e0:	2200      	movs	r2, #0
 80035e2:	0018      	movs	r0, r3
 80035e4:	f001 ff4d 	bl	8005482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 80035e8:	23f0      	movs	r3, #240	@ 0xf0
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	4863      	ldr	r0, [pc, #396]	@ (800377c <MX_GPIO_Init+0x24c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	0019      	movs	r1, r3
 80035f2:	f001 ff46 	bl	8005482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80035f6:	4b62      	ldr	r3, [pc, #392]	@ (8003780 <MX_GPIO_Init+0x250>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	2108      	movs	r1, #8
 80035fc:	0018      	movs	r0, r3
 80035fe:	f001 ff40 	bl	8005482 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8003602:	193b      	adds	r3, r7, r4
 8003604:	22e0      	movs	r2, #224	@ 0xe0
 8003606:	0212      	lsls	r2, r2, #8
 8003608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360a:	193b      	adds	r3, r7, r4
 800360c:	2201      	movs	r2, #1
 800360e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	193b      	adds	r3, r7, r4
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	193b      	adds	r3, r7, r4
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361c:	193b      	adds	r3, r7, r4
 800361e:	4a55      	ldr	r2, [pc, #340]	@ (8003774 <MX_GPIO_Init+0x244>)
 8003620:	0019      	movs	r1, r3
 8003622:	0010      	movs	r0, r2
 8003624:	f001 fdac 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 8003628:	193b      	adds	r3, r7, r4
 800362a:	2203      	movs	r2, #3
 800362c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	2201      	movs	r2, #1
 8003632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	193b      	adds	r3, r7, r4
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	193b      	adds	r3, r7, r4
 800363c:	2200      	movs	r2, #0
 800363e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003640:	193b      	adds	r3, r7, r4
 8003642:	4a4d      	ldr	r2, [pc, #308]	@ (8003778 <MX_GPIO_Init+0x248>)
 8003644:	0019      	movs	r1, r3
 8003646:	0010      	movs	r0, r2
 8003648:	f001 fd9a 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 800364c:	193b      	adds	r3, r7, r4
 800364e:	2210      	movs	r2, #16
 8003650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2284      	movs	r2, #132	@ 0x84
 8003656:	0392      	lsls	r2, r2, #14
 8003658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2201      	movs	r2, #1
 800365e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8003660:	193a      	adds	r2, r7, r4
 8003662:	23a0      	movs	r3, #160	@ 0xa0
 8003664:	05db      	lsls	r3, r3, #23
 8003666:	0011      	movs	r1, r2
 8003668:	0018      	movs	r0, r3
 800366a:	f001 fd89 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 800366e:	0021      	movs	r1, r4
 8003670:	187b      	adds	r3, r7, r1
 8003672:	22e0      	movs	r2, #224	@ 0xe0
 8003674:	0052      	lsls	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	000c      	movs	r4, r1
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2201      	movs	r2, #1
 800367e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	193b      	adds	r3, r7, r4
 8003688:	2200      	movs	r2, #0
 800368a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	193a      	adds	r2, r7, r4
 800368e:	23a0      	movs	r3, #160	@ 0xa0
 8003690:	05db      	lsls	r3, r3, #23
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fd73 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC2_Pin CS_TC3_Pin CS_TC4_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin;
 800369a:	0021      	movs	r1, r4
 800369c:	187b      	adds	r3, r7, r1
 800369e:	22f0      	movs	r2, #240	@ 0xf0
 80036a0:	0212      	lsls	r2, r2, #8
 80036a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a4:	000c      	movs	r4, r1
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	2201      	movs	r2, #1
 80036aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	4a30      	ldr	r2, [pc, #192]	@ (800377c <MX_GPIO_Init+0x24c>)
 80036bc:	0019      	movs	r1, r3
 80036be:	0010      	movs	r0, r2
 80036c0:	f001 fd5e 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 80036c4:	0021      	movs	r1, r4
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2284      	movs	r2, #132	@ 0x84
 80036d0:	0392      	lsls	r2, r2, #14
 80036d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	000c      	movs	r4, r1
 80036d6:	193b      	adds	r3, r7, r4
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 80036dc:	193b      	adds	r3, r7, r4
 80036de:	4a25      	ldr	r2, [pc, #148]	@ (8003774 <MX_GPIO_Init+0x244>)
 80036e0:	0019      	movs	r1, r3
 80036e2:	0010      	movs	r0, r2
 80036e4:	f001 fd4c 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	2208      	movs	r2, #8
 80036ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	2201      	movs	r2, #1
 80036f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003700:	193b      	adds	r3, r7, r4
 8003702:	4a1f      	ldr	r2, [pc, #124]	@ (8003780 <MX_GPIO_Init+0x250>)
 8003704:	0019      	movs	r1, r3
 8003706:	0010      	movs	r0, r2
 8003708:	f001 fd3a 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800370c:	193b      	adds	r3, r7, r4
 800370e:	2208      	movs	r2, #8
 8003710:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	193b      	adds	r3, r7, r4
 8003714:	2202      	movs	r2, #2
 8003716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	193b      	adds	r3, r7, r4
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <MX_GPIO_Init+0x24c>)
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f001 fd25 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 8003736:	0021      	movs	r1, r4
 8003738:	187b      	adds	r3, r7, r1
 800373a:	22e0      	movs	r2, #224	@ 0xe0
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	187b      	adds	r3, r7, r1
 800374e:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <MX_GPIO_Init+0x24c>)
 8003750:	0019      	movs	r1, r3
 8003752:	0010      	movs	r0, r2
 8003754:	f001 fd14 	bl	8005180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	2007      	movs	r0, #7
 800375e:	f001 fadb 	bl	8004d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003762:	2007      	movs	r0, #7
 8003764:	f001 faed 	bl	8004d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b00b      	add	sp, #44	@ 0x2c
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	50000800 	.word	0x50000800
 8003778:	50001400 	.word	0x50001400
 800377c:	50000400 	.word	0x50000400
 8003780:	50000c00 	.word	0x50000c00

08003784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	e7fd      	b.n	800378c <Error_Handler+0x8>

08003790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <HAL_MspInit+0x44>)
 8003798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <HAL_MspInit+0x44>)
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_MspInit+0x44>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2201      	movs	r2, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_MspInit+0x44>)
 80037b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_MspInit+0x44>)
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	0549      	lsls	r1, r1, #21
 80037b8:	430a      	orrs	r2, r1
 80037ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_MspInit+0x44>)
 80037be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	055b      	lsls	r3, r3, #21
 80037c4:	4013      	ands	r3, r2
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b091      	sub	sp, #68	@ 0x44
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	232c      	movs	r3, #44	@ 0x2c
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	0018      	movs	r0, r3
 80037e6:	2314      	movs	r3, #20
 80037e8:	001a      	movs	r2, r3
 80037ea:	2100      	movs	r1, #0
 80037ec:	f005 f940 	bl	8008a70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037f0:	2410      	movs	r4, #16
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	0018      	movs	r0, r3
 80037f6:	231c      	movs	r3, #28
 80037f8:	001a      	movs	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f005 f938 	bl	8008a70 <memset>
  if(hadc->Instance==ADC1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3a      	ldr	r2, [pc, #232]	@ (80038f0 <HAL_ADC_MspInit+0x118>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d16d      	bne.n	80038e6 <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800380a:	193b      	adds	r3, r7, r4
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	01d2      	lsls	r2, r2, #7
 8003810:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8003812:	193b      	adds	r3, r7, r4
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	05d2      	lsls	r2, r2, #23
 8003818:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800381a:	193b      	adds	r3, r7, r4
 800381c:	0018      	movs	r0, r3
 800381e:	f003 fb29 	bl	8006e74 <HAL_RCCEx_PeriphCLKConfig>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003826:	f7ff ffad 	bl	8003784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800382a:	4b32      	ldr	r3, [pc, #200]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 800382c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800382e:	4b31      	ldr	r3, [pc, #196]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 8003830:	2180      	movs	r1, #128	@ 0x80
 8003832:	0349      	lsls	r1, r1, #13
 8003834:	430a      	orrs	r2, r1
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40
 8003838:	4b2e      	ldr	r3, [pc, #184]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 800383a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	035b      	lsls	r3, r3, #13
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 8003848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800384a:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 800384c:	2101      	movs	r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
 8003852:	4b28      	ldr	r3, [pc, #160]	@ (80038f4 <HAL_ADC_MspInit+0x11c>)
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	2201      	movs	r2, #1
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800385e:	212c      	movs	r1, #44	@ 0x2c
 8003860:	187b      	adds	r3, r7, r1
 8003862:	220c      	movs	r2, #12
 8003864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003866:	187b      	adds	r3, r7, r1
 8003868:	2203      	movs	r2, #3
 800386a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	187b      	adds	r3, r7, r1
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	187a      	adds	r2, r7, r1
 8003874:	23a0      	movs	r3, #160	@ 0xa0
 8003876:	05db      	lsls	r3, r3, #23
 8003878:	0011      	movs	r1, r2
 800387a:	0018      	movs	r0, r3
 800387c:	f001 fc80 	bl	8005180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 8003882:	4a1e      	ldr	r2, [pc, #120]	@ (80038fc <HAL_ADC_MspInit+0x124>)
 8003884:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003886:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 8003888:	2205      	movs	r2, #5
 800388a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800388c:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 8003894:	2200      	movs	r2, #0
 8003896:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003898:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 800389a:	2280      	movs	r2, #128	@ 0x80
 800389c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	0052      	lsls	r2, r2, #1
 80038a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	00d2      	lsls	r2, r2, #3
 80038ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038ae:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038b0:	2220      	movs	r2, #32
 80038b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038b4:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f001 fa5d 	bl	8004d7c <HAL_DMA_Init>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80038c6:	f7ff ff5d 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_ADC_MspInit+0x120>)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	200c      	movs	r0, #12
 80038dc:	f001 fa1c 	bl	8004d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80038e0:	200c      	movs	r0, #12
 80038e2:	f001 fa2e 	bl	8004d42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b011      	add	sp, #68	@ 0x44
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	40012400 	.word	0x40012400
 80038f4:	40021000 	.word	0x40021000
 80038f8:	20000260 	.word	0x20000260
 80038fc:	40020008 	.word	0x40020008

08003900 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b093      	sub	sp, #76	@ 0x4c
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	2334      	movs	r3, #52	@ 0x34
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	0018      	movs	r0, r3
 800390e:	2314      	movs	r3, #20
 8003910:	001a      	movs	r2, r3
 8003912:	2100      	movs	r1, #0
 8003914:	f005 f8ac 	bl	8008a70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003918:	2418      	movs	r4, #24
 800391a:	193b      	adds	r3, r7, r4
 800391c:	0018      	movs	r0, r3
 800391e:	231c      	movs	r3, #28
 8003920:	001a      	movs	r2, r3
 8003922:	2100      	movs	r1, #0
 8003924:	f005 f8a4 	bl	8008a70 <memset>
  if(hi2c->Instance==I2C1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a42      	ldr	r2, [pc, #264]	@ (8003a38 <HAL_I2C_MspInit+0x138>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d140      	bne.n	80039b4 <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003932:	193b      	adds	r3, r7, r4
 8003934:	2220      	movs	r2, #32
 8003936:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003938:	193b      	adds	r3, r7, r4
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800393e:	193b      	adds	r3, r7, r4
 8003940:	0018      	movs	r0, r3
 8003942:	f003 fa97 	bl	8006e74 <HAL_RCCEx_PeriphCLKConfig>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800394a:	f7ff ff1b 	bl	8003784 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003952:	4b3a      	ldr	r3, [pc, #232]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34
 800395a:	4b38      	ldr	r3, [pc, #224]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003966:	2134      	movs	r1, #52	@ 0x34
 8003968:	187b      	adds	r3, r7, r1
 800396a:	22c0      	movs	r2, #192	@ 0xc0
 800396c:	00d2      	lsls	r2, r2, #3
 800396e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2212      	movs	r2, #18
 8003974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2206      	movs	r2, #6
 8003986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	187a      	adds	r2, r7, r1
 800398a:	23a0      	movs	r3, #160	@ 0xa0
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	0011      	movs	r1, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f001 fbf5 	bl	8005180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003996:	4b29      	ldr	r3, [pc, #164]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399a:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	0389      	lsls	r1, r1, #14
 80039a0:	430a      	orrs	r2, r1
 80039a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 80039a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	039b      	lsls	r3, r3, #14
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039b2:	e03d      	b.n	8003a30 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a21      	ldr	r2, [pc, #132]	@ (8003a40 <HAL_I2C_MspInit+0x140>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d138      	bne.n	8003a30 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039be:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 80039c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 80039c4:	2102      	movs	r1, #2
 80039c6:	430a      	orrs	r2, r1
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039d6:	2134      	movs	r1, #52	@ 0x34
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	22c0      	movs	r2, #192	@ 0xc0
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2212      	movs	r2, #18
 80039e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2201      	movs	r2, #1
 80039ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2206      	movs	r2, #6
 80039f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	4a12      	ldr	r2, [pc, #72]	@ (8003a44 <HAL_I2C_MspInit+0x144>)
 80039fc:	0019      	movs	r1, r3
 80039fe:	0010      	movs	r0, r2
 8003a00:	f001 fbbe 	bl	8005180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a04:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003a0a:	2180      	movs	r1, #128	@ 0x80
 8003a0c:	03c9      	lsls	r1, r1, #15
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a12:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_I2C_MspInit+0x13c>)
 8003a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	03db      	lsls	r3, r3, #15
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8003a20:	2200      	movs	r2, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	2018      	movs	r0, #24
 8003a26:	f001 f977 	bl	8004d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8003a2a:	2018      	movs	r0, #24
 8003a2c:	f001 f989 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b013      	add	sp, #76	@ 0x4c
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	40005400 	.word	0x40005400
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40005800 	.word	0x40005800
 8003a44:	50000400 	.word	0x50000400

08003a48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08b      	sub	sp, #44	@ 0x2c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	2414      	movs	r4, #20
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	0018      	movs	r0, r3
 8003a56:	2314      	movs	r3, #20
 8003a58:	001a      	movs	r2, r3
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f005 f808 	bl	8008a70 <memset>
  if(hspi->Instance==SPI2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <HAL_SPI_MspInit+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d151      	bne.n	8003b0e <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a70:	2180      	movs	r1, #128	@ 0x80
 8003a72:	01c9      	lsls	r1, r1, #7
 8003a74:	430a      	orrs	r2, r1
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a78:	4b28      	ldr	r3, [pc, #160]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	01db      	lsls	r3, r3, #7
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a92:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	2201      	movs	r2, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <HAL_SPI_MspInit+0xd4>)
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	2202      	movs	r2, #2
 8003ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	2200      	movs	r2, #0
 8003acc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	193a      	adds	r2, r7, r4
 8003ad6:	23a0      	movs	r3, #160	@ 0xa0
 8003ad8:	05db      	lsls	r3, r3, #23
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f001 fb4f 	bl	8005180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ae2:	0021      	movs	r1, r4
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	2202      	movs	r2, #2
 8003aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2200      	movs	r2, #0
 8003afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2201      	movs	r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <HAL_SPI_MspInit+0xd8>)
 8003b06:	0019      	movs	r1, r3
 8003b08:	0010      	movs	r0, r2
 8003b0a:	f001 fb39 	bl	8005180 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b00b      	add	sp, #44	@ 0x2c
 8003b14:	bd90      	pop	{r4, r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	40003800 	.word	0x40003800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	50000400 	.word	0x50000400

08003b24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0e      	ldr	r2, [pc, #56]	@ (8003b6c <HAL_TIM_Base_MspInit+0x48>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d115      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <HAL_TIM_Base_MspInit+0x4c>)
 8003b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <HAL_TIM_Base_MspInit+0x4c>)
 8003b3c:	2180      	movs	r1, #128	@ 0x80
 8003b3e:	0289      	lsls	r1, r1, #10
 8003b40:	430a      	orrs	r2, r1
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b44:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_TIM_Base_MspInit+0x4c>)
 8003b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	2015      	movs	r0, #21
 8003b58:	f001 f8de 	bl	8004d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003b5c:	2015      	movs	r0, #21
 8003b5e:	f001 f8f0 	bl	8004d42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b004      	add	sp, #16
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b08b      	sub	sp, #44	@ 0x2c
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	2414      	movs	r4, #20
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	0018      	movs	r0, r3
 8003b82:	2314      	movs	r3, #20
 8003b84:	001a      	movs	r2, r3
 8003b86:	2100      	movs	r1, #0
 8003b88:	f004 ff72 	bl	8008a70 <memset>
  if(huart->Instance==USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <HAL_UART_MspInit+0xd0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d151      	bne.n	8003c3a <HAL_UART_MspInit+0xc6>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b96:	4b2c      	ldr	r3, [pc, #176]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003b9c:	2180      	movs	r1, #128	@ 0x80
 8003b9e:	02c9      	lsls	r1, r1, #11
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ba4:	4b28      	ldr	r3, [pc, #160]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	02db      	lsls	r3, r3, #11
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bbe:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b1f      	ldr	r3, [pc, #124]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <HAL_UART_MspInit+0xd4>)
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	2220      	movs	r2, #32
 8003be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	2202      	movs	r2, #2
 8003bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8003c00:	193a      	adds	r2, r7, r4
 8003c02:	23a0      	movs	r3, #160	@ 0xa0
 8003c04:	05db      	lsls	r3, r3, #23
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f001 fab9 	bl	8005180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8003c0e:	0021      	movs	r1, r4
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2202      	movs	r2, #2
 8003c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	2200      	movs	r2, #0
 8003c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8003c2e:	187b      	adds	r3, r7, r1
 8003c30:	4a06      	ldr	r2, [pc, #24]	@ (8003c4c <HAL_UART_MspInit+0xd8>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	0010      	movs	r0, r2
 8003c36:	f001 faa3 	bl	8005180 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b00b      	add	sp, #44	@ 0x2c
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	50000400 	.word	0x50000400

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	e7fd      	b.n	8003c54 <NMI_Handler+0x4>

08003c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5c:	46c0      	nop			@ (mov r8, r8)
 8003c5e:	e7fd      	b.n	8003c5c <HardFault_Handler+0x4>

08003c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c78:	f000 f9a2 	bl	8003fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 8003c86:	2010      	movs	r0, #16
 8003c88:	f001 fc18 	bl	80054bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8003c8c:	2040      	movs	r0, #64	@ 0x40
 8003c8e:	f001 fc15 	bl	80054bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c9c:	4b03      	ldr	r3, [pc, #12]	@ (8003cac <DMA1_Channel1_IRQHandler+0x14>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f001 f960 	bl	8004f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	20000260 	.word	0x20000260

08003cb0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <ADC1_IRQHandler+0x14>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fc62 	bl	8004580 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003cbc:	46c0      	nop			@ (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	200001fc 	.word	0x200001fc

08003cc8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <TIM16_IRQHandler+0x14>)
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f003 fb6a 	bl	80073a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	200003c8 	.word	0x200003c8

08003ce0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <I2C2_IRQHandler+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	23e0      	movs	r3, #224	@ 0xe0
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <I2C2_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <I2C2_IRQHandler+0x2c>)
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f001 fcd5 	bl	80056a4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8003cfa:	e003      	b.n	8003d04 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <I2C2_IRQHandler+0x2c>)
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f001 fcb6 	bl	8005670 <HAL_I2C_EV_IRQHandler>
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000310 	.word	0x20000310

08003d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  return 1;
 8003d14:	2301      	movs	r3, #1
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_kill>:

int _kill(int pid, int sig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d26:	f004 ff13 	bl	8008b50 <__errno>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	2216      	movs	r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	425b      	negs	r3, r3
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_exit>:

void _exit (int status)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d44:	2301      	movs	r3, #1
 8003d46:	425a      	negs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0011      	movs	r1, r2
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff ffe5 	bl	8003d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	e7fd      	b.n	8003d52 <_exit+0x16>

08003d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e00a      	b.n	8003d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d68:	e000      	b.n	8003d6c <_read+0x16>
 8003d6a:	bf00      	nop
 8003d6c:	0001      	movs	r1, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	60ba      	str	r2, [r7, #8]
 8003d74:	b2ca      	uxtb	r2, r1
 8003d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	dbf0      	blt.n	8003d68 <_read+0x12>
  }

  return len;
 8003d86:	687b      	ldr	r3, [r7, #4]
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b006      	add	sp, #24
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e009      	b.n	8003db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	60ba      	str	r2, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	0018      	movs	r0, r3
 8003dac:	e000      	b.n	8003db0 <_write+0x20>
 8003dae:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3301      	adds	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	dbf1      	blt.n	8003da2 <_write+0x12>
  }
  return len;
 8003dbe:	687b      	ldr	r3, [r7, #4]
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b006      	add	sp, #24
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_close>:

int _close(int file)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	425b      	negs	r3, r3
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	0192      	lsls	r2, r2, #6
 8003dec:	605a      	str	r2, [r3, #4]
  return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <_isatty>:

int _isatty(int file)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e28:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <_sbrk+0x5c>)
 8003e2a:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <_sbrk+0x60>)
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e34:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <_sbrk+0x64>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <_sbrk+0x64>)
 8003e3e:	4a12      	ldr	r2, [pc, #72]	@ (8003e88 <_sbrk+0x68>)
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <_sbrk+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e50:	f004 fe7e 	bl	8008b50 <__errno>
 8003e54:	0003      	movs	r3, r0
 8003e56:	220c      	movs	r2, #12
 8003e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	e009      	b.n	8003e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e60:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <_sbrk+0x64>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e66:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <_sbrk+0x64>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	18d2      	adds	r2, r2, r3
 8003e6e:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <_sbrk+0x64>)
 8003e70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20009000 	.word	0x20009000
 8003e80:	00000400 	.word	0x00000400
 8003e84:	20000588 	.word	0x20000588
 8003e88:	200006e0 	.word	0x200006e0

08003e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e98:	480d      	ldr	r0, [pc, #52]	@ (8003ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e9c:	f7ff fff6 	bl	8003e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea0:	480c      	ldr	r0, [pc, #48]	@ (8003ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ea2:	490d      	ldr	r1, [pc, #52]	@ (8003ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8003edc <LoopForever+0xe>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ee4 <LoopForever+0x16>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ec6:	f004 fe49 	bl	8008b5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003eca:	f7fe ff8b 	bl	8002de4 <main>

08003ece <LoopForever>:

LoopForever:
  b LoopForever
 8003ece:	e7fe      	b.n	8003ece <LoopForever>
  ldr   r0, =_estack
 8003ed0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003edc:	0800ae98 	.word	0x0800ae98
  ldr r2, =_sbss
 8003ee0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003ee4:	200006dc 	.word	0x200006dc

08003ee8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ee8:	e7fe      	b.n	8003ee8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08003eec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ef2:	1dfb      	adds	r3, r7, #7
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_Init+0x3c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_Init+0x3c>)
 8003efe:	2180      	movs	r1, #128	@ 0x80
 8003f00:	0049      	lsls	r1, r1, #1
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f06:	2003      	movs	r0, #3
 8003f08:	f000 f810 	bl	8003f2c <HAL_InitTick>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e001      	b.n	8003f1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003f18:	f7ff fc3a 	bl	8003790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f1c:	1dfb      	adds	r3, r7, #7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40022000 	.word	0x40022000

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f34:	230f      	movs	r3, #15
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb4 <HAL_InitTick+0x88>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02b      	beq.n	8003f9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003f44:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <HAL_InitTick+0x8c>)
 8003f46:	681c      	ldr	r4, [r3, #0]
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_InitTick+0x88>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	23fa      	movs	r3, #250	@ 0xfa
 8003f50:	0098      	lsls	r0, r3, #2
 8003f52:	f7fc f8f1 	bl	8000138 <__udivsi3>
 8003f56:	0003      	movs	r3, r0
 8003f58:	0019      	movs	r1, r3
 8003f5a:	0020      	movs	r0, r4
 8003f5c:	f7fc f8ec 	bl	8000138 <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fefd 	bl	8004d62 <HAL_SYSTICK_Config>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d112      	bne.n	8003f92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d80a      	bhi.n	8003f88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	2301      	movs	r3, #1
 8003f76:	425b      	negs	r3, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 fecc 	bl	8004d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f80:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <HAL_InitTick+0x90>)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00d      	b.n	8003fa4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003f88:	230f      	movs	r3, #15
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e008      	b.n	8003fa4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f92:	230f      	movs	r3, #15
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e003      	b.n	8003fa4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b005      	add	sp, #20
 8003fb0:	bd90      	pop	{r4, r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	20000014 	.word	0x20000014
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <HAL_IncTick+0x1c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	001a      	movs	r2, r3
 8003fca:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_IncTick+0x20>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	18d2      	adds	r2, r2, r3
 8003fd0:	4b03      	ldr	r3, [pc, #12]	@ (8003fe0 <HAL_IncTick+0x20>)
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	20000014 	.word	0x20000014
 8003fe0:	2000058c 	.word	0x2000058c

08003fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe8:	4b02      	ldr	r3, [pc, #8]	@ (8003ff4 <HAL_GetTick+0x10>)
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	2000058c 	.word	0x2000058c

08003ff8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a05      	ldr	r2, [pc, #20]	@ (800401c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004008:	401a      	ands	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	fe3fffff 	.word	0xfe3fffff

08004020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	23e0      	movs	r3, #224	@ 0xe0
 800402e:	045b      	lsls	r3, r3, #17
 8004030:	4013      	ands	r3, r2
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}

0800403a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	2104      	movs	r1, #4
 800404e:	400a      	ands	r2, r1
 8004050:	2107      	movs	r1, #7
 8004052:	4091      	lsls	r1, r2
 8004054:	000a      	movs	r2, r1
 8004056:	43d2      	mvns	r2, r2
 8004058:	401a      	ands	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2104      	movs	r1, #4
 800405e:	400b      	ands	r3, r1
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4099      	lsls	r1, r3
 8004064:	000b      	movs	r3, r1
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	2104      	movs	r1, #4
 8004086:	400a      	ands	r2, r1
 8004088:	2107      	movs	r1, #7
 800408a:	4091      	lsls	r1, r2
 800408c:	000a      	movs	r2, r1
 800408e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2104      	movs	r1, #4
 8004094:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004096:	40da      	lsrs	r2, r3
 8004098:	0013      	movs	r3, r2
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	23c0      	movs	r3, #192	@ 0xc0
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4013      	ands	r3, r2
 80040b4:	d101      	bne.n	80040ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	211f      	movs	r1, #31
 80040d8:	400a      	ands	r2, r1
 80040da:	210f      	movs	r1, #15
 80040dc:	4091      	lsls	r1, r2
 80040de:	000a      	movs	r2, r1
 80040e0:	43d2      	mvns	r2, r2
 80040e2:	401a      	ands	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	0e9b      	lsrs	r3, r3, #26
 80040e8:	210f      	movs	r1, #15
 80040ea:	4019      	ands	r1, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	201f      	movs	r0, #31
 80040f0:	4003      	ands	r3, r0
 80040f2:	4099      	lsls	r1, r3
 80040f4:	000b      	movs	r3, r1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}

08004104 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	035b      	lsls	r3, r3, #13
 8004116:	0b5b      	lsrs	r3, r3, #13
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}

08004126 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	0352      	lsls	r2, r2, #13
 8004138:	0b52      	lsrs	r2, r2, #13
 800413a:	43d2      	mvns	r2, r2
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}

0800414a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2203      	movs	r2, #3
 8004158:	4013      	ands	r3, r2
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	0212      	lsls	r2, r2, #8
 8004178:	43d2      	mvns	r2, r2
 800417a:	401a      	ands	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	400b      	ands	r3, r1
 8004184:	4904      	ldr	r1, [pc, #16]	@ (8004198 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004186:	400b      	ands	r3, r1
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	07ffff00 	.word	0x07ffff00

0800419c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a05      	ldr	r2, [pc, #20]	@ (80041c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	2280      	movs	r2, #128	@ 0x80
 80041ae:	0552      	lsls	r2, r2, #21
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b002      	add	sp, #8
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	6fffffe8 	.word	0x6fffffe8

080041c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	055b      	lsls	r3, r3, #21
 80041d4:	401a      	ands	r2, r3
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	055b      	lsls	r3, r3, #21
 80041da:	429a      	cmp	r2, r3
 80041dc:	d101      	bne.n	80041e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <LL_ADC_IsEnabled+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_IsEnabled+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}

0800420e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2204      	movs	r2, #4
 800421c:	4013      	ands	r3, r2
 800421e:	2b04      	cmp	r3, #4
 8004220:	d101      	bne.n	8004226 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004238:	231f      	movs	r3, #31
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e17f      	b.n	8004556 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff fab9 	bl	80037d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2254      	movs	r2, #84	@ 0x54
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff ffa3 	bl	80041c4 <LL_ADC_IsInternalRegulatorEnabled>
 800427e:	1e03      	subs	r3, r0, #0
 8004280:	d115      	bne.n	80042ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff ff88 	bl	800419c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800428c:	4bb4      	ldr	r3, [pc, #720]	@ (8004560 <HAL_ADC_Init+0x330>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	49b4      	ldr	r1, [pc, #720]	@ (8004564 <HAL_ADC_Init+0x334>)
 8004292:	0018      	movs	r0, r3
 8004294:	f7fb ff50 	bl	8000138 <__udivsi3>
 8004298:	0003      	movs	r3, r0
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff86 	bl	80041c4 <LL_ADC_IsInternalRegulatorEnabled>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d10f      	bne.n	80042dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	2210      	movs	r2, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	2201      	movs	r2, #1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042d4:	231f      	movs	r3, #31
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff ff94 	bl	800420e <LL_ADC_REG_IsConversionOngoing>
 80042e6:	0003      	movs	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	2210      	movs	r2, #16
 80042f0:	4013      	ands	r3, r2
 80042f2:	d000      	beq.n	80042f6 <HAL_ADC_Init+0xc6>
 80042f4:	e122      	b.n	800453c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d000      	beq.n	80042fe <HAL_ADC_Init+0xce>
 80042fc:	e11e      	b.n	800453c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004302:	4a99      	ldr	r2, [pc, #612]	@ (8004568 <HAL_ADC_Init+0x338>)
 8004304:	4013      	ands	r3, r2
 8004306:	2202      	movs	r2, #2
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	0018      	movs	r0, r3
 8004314:	f7ff ff6a 	bl	80041ec <LL_ADC_IsEnabled>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d000      	beq.n	800431e <HAL_ADC_Init+0xee>
 800431c:	e0ad      	b.n	800447a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004328:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7e5b      	ldrb	r3, [r3, #25]
 800432e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004330:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7e9b      	ldrb	r3, [r3, #26]
 8004336:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004338:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_ADC_Init+0x118>
 8004342:	2380      	movs	r3, #128	@ 0x80
 8004344:	015b      	lsls	r3, r3, #5
 8004346:	e000      	b.n	800434a <HAL_ADC_Init+0x11a>
 8004348:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800434a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004350:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da04      	bge.n	8004364 <HAL_ADC_Init+0x134>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	e001      	b.n	8004368 <HAL_ADC_Init+0x138>
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004368:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	212c      	movs	r1, #44	@ 0x2c
 800436e:	5c5b      	ldrb	r3, [r3, r1]
 8004370:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004372:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d115      	bne.n	80043b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7e9b      	ldrb	r3, [r3, #26]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2280      	movs	r2, #128	@ 0x80
 8004390:	0252      	lsls	r2, r2, #9
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e00b      	b.n	80043b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	2220      	movs	r2, #32
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	2201      	movs	r2, #1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043bc:	23e0      	movs	r3, #224	@ 0xe0
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043c6:	4313      	orrs	r3, r2
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_ADC_Init+0x33c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0f9b      	lsrs	r3, r3, #30
 80043ea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043f0:	4313      	orrs	r3, r2
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	223c      	movs	r2, #60	@ 0x3c
 80043fc:	5c9b      	ldrb	r3, [r3, r2]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d111      	bne.n	8004426 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	0f9b      	lsrs	r3, r3, #30
 8004408:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800440e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004414:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800441a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	2201      	movs	r2, #1
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	4a50      	ldr	r2, [pc, #320]	@ (8004570 <HAL_ADC_Init+0x340>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	430a      	orrs	r2, r1
 800443a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	23c0      	movs	r3, #192	@ 0xc0
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	429a      	cmp	r2, r3
 8004446:	d018      	beq.n	800447a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	05db      	lsls	r3, r3, #23
 8004450:	429a      	cmp	r2, r3
 8004452:	d012      	beq.n	800447a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	429a      	cmp	r2, r3
 800445e:	d00c      	beq.n	800447a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004460:	4b44      	ldr	r3, [pc, #272]	@ (8004574 <HAL_ADC_Init+0x344>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a44      	ldr	r2, [pc, #272]	@ (8004578 <HAL_ADC_Init+0x348>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	23f0      	movs	r3, #240	@ 0xf0
 8004470:	039b      	lsls	r3, r3, #14
 8004472:	401a      	ands	r2, r3
 8004474:	4b3f      	ldr	r3, [pc, #252]	@ (8004574 <HAL_ADC_Init+0x344>)
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004482:	001a      	movs	r2, r3
 8004484:	2100      	movs	r1, #0
 8004486:	f7ff fdd8 	bl	800403a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	493a      	ldr	r1, [pc, #232]	@ (800457c <HAL_ADC_Init+0x34c>)
 8004494:	001a      	movs	r2, r3
 8004496:	f7ff fdd0 	bl	800403a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2110      	movs	r1, #16
 80044ae:	4249      	negs	r1, r1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b4:	e018      	b.n	80044e8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	039b      	lsls	r3, r3, #14
 80044be:	429a      	cmp	r2, r3
 80044c0:	d112      	bne.n	80044e8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	221c      	movs	r2, #28
 80044d2:	4013      	ands	r3, r2
 80044d4:	2210      	movs	r2, #16
 80044d6:	4252      	negs	r2, r2
 80044d8:	409a      	lsls	r2, r3
 80044da:	0011      	movs	r1, r2
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2100      	movs	r1, #0
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7ff fdc0 	bl	8004074 <LL_ADC_GetSamplingTimeCommonChannels>
 80044f4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d10b      	bne.n	8004516 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	2203      	movs	r2, #3
 800450a:	4393      	bics	r3, r2
 800450c:	2201      	movs	r2, #1
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004514:	e01c      	b.n	8004550 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	2212      	movs	r2, #18
 800451c:	4393      	bics	r3, r2
 800451e:	2210      	movs	r2, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	2201      	movs	r2, #1
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004532:	231f      	movs	r3, #31
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800453a:	e009      	b.n	8004550 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004540:	2210      	movs	r2, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004548:	231f      	movs	r3, #31
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004550:	231f      	movs	r3, #31
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b008      	add	sp, #32
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	2000000c 	.word	0x2000000c
 8004564:	00030d40 	.word	0x00030d40
 8004568:	fffffefd 	.word	0xfffffefd
 800456c:	ffde0201 	.word	0xffde0201
 8004570:	1ffffc02 	.word	0x1ffffc02
 8004574:	40012708 	.word	0x40012708
 8004578:	ffc3ffff 	.word	0xffc3ffff
 800457c:	07ffff04 	.word	0x07ffff04

08004580 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2202      	movs	r2, #2
 80045a0:	4013      	ands	r3, r2
 80045a2:	d017      	beq.n	80045d4 <HAL_ADC_IRQHandler+0x54>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	2210      	movs	r2, #16
 80045b2:	4013      	ands	r3, r2
 80045b4:	d106      	bne.n	80045c4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	2280      	movs	r2, #128	@ 0x80
 80045bc:	0112      	lsls	r2, r2, #4
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 faea 	bl	8004ba0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2202      	movs	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2204      	movs	r2, #4
 80045d8:	4013      	ands	r3, r2
 80045da:	d003      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x64>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2204      	movs	r2, #4
 80045e0:	4013      	ands	r3, r2
 80045e2:	d107      	bne.n	80045f4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2208      	movs	r2, #8
 80045e8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045ea:	d04d      	beq.n	8004688 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2208      	movs	r2, #8
 80045f0:	4013      	ands	r3, r2
 80045f2:	d049      	beq.n	8004688 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	2210      	movs	r2, #16
 80045fa:	4013      	ands	r3, r2
 80045fc:	d106      	bne.n	800460c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004602:	2280      	movs	r2, #128	@ 0x80
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff fd46 	bl	80040a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004616:	1e03      	subs	r3, r0, #0
 8004618:	d02e      	beq.n	8004678 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7e9b      	ldrb	r3, [r3, #26]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d12a      	bne.n	8004678 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2208      	movs	r2, #8
 800462a:	4013      	ands	r3, r2
 800462c:	2b08      	cmp	r3, #8
 800462e:	d123      	bne.n	8004678 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff fdea 	bl	800420e <LL_ADC_REG_IsConversionOngoing>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d110      	bne.n	8004660 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	210c      	movs	r1, #12
 800464a:	438a      	bics	r2, r1
 800464c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	4a56      	ldr	r2, [pc, #344]	@ (80047ac <HAL_ADC_IRQHandler+0x22c>)
 8004654:	4013      	ands	r3, r2
 8004656:	2201      	movs	r2, #1
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	659a      	str	r2, [r3, #88]	@ 0x58
 800465e:	e00b      	b.n	8004678 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	2220      	movs	r2, #32
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	2201      	movs	r2, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f7fe f982 	bl	8002984 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	220c      	movs	r2, #12
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2280      	movs	r2, #128	@ 0x80
 800468c:	4013      	ands	r3, r2
 800468e:	d012      	beq.n	80046b6 <HAL_ADC_IRQHandler+0x136>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2280      	movs	r2, #128	@ 0x80
 8004694:	4013      	ands	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469c:	2280      	movs	r2, #128	@ 0x80
 800469e:	0252      	lsls	r2, r2, #9
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f881 	bl	80047b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2280      	movs	r2, #128	@ 0x80
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4013      	ands	r3, r2
 80046be:	d014      	beq.n	80046ea <HAL_ADC_IRQHandler+0x16a>
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00f      	beq.n	80046ea <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	2280      	movs	r2, #128	@ 0x80
 80046d0:	0292      	lsls	r2, r2, #10
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 fa50 	bl	8004b80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2280      	movs	r2, #128	@ 0x80
 80046e6:	0052      	lsls	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4013      	ands	r3, r2
 80046f2:	d014      	beq.n	800471e <HAL_ADC_IRQHandler+0x19e>
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	2380      	movs	r3, #128	@ 0x80
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4013      	ands	r3, r2
 80046fc:	d00f      	beq.n	800471e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004702:	2280      	movs	r2, #128	@ 0x80
 8004704:	02d2      	lsls	r2, r2, #11
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 fa3e 	bl	8004b90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2280      	movs	r2, #128	@ 0x80
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2210      	movs	r2, #16
 8004722:	4013      	ands	r3, r2
 8004724:	d02b      	beq.n	800477e <HAL_ADC_IRQHandler+0x1fe>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2210      	movs	r2, #16
 800472a:	4013      	ands	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e008      	b.n	800474e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0018      	movs	r0, r3
 8004742:	f7ff fd02 	bl	800414a <LL_ADC_REG_GetDMATransfer>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d001      	beq.n	800474e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d110      	bne.n	8004776 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	2280      	movs	r2, #128	@ 0x80
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004766:	2202      	movs	r2, #2
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f825 	bl	80047c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2210      	movs	r2, #16
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	019b      	lsls	r3, r3, #6
 8004784:	4013      	ands	r3, r2
 8004786:	d00d      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x224>
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	4013      	ands	r3, r2
 8004790:	d008      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fa0b 	bl	8004bb0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	0192      	lsls	r2, r2, #6
 80047a2:	601a      	str	r2, [r3, #0]
  }
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	fffffefe 	.word	0xfffffefe

080047b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047b8:	46c0      	nop			@ (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047da:	2317      	movs	r3, #23
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2254      	movs	r2, #84	@ 0x54
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x24>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e1c0      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x3a6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2254      	movs	r2, #84	@ 0x54
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff fd04 	bl	800420e <LL_ADC_REG_IsConversionOngoing>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d000      	beq.n	800480c <HAL_ADC_ConfigChannel+0x3c>
 800480a:	e1a3      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d100      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x46>
 8004814:	e143      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	2380      	movs	r3, #128	@ 0x80
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	429a      	cmp	r2, r3
 8004820:	d004      	beq.n	800482c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004826:	4ac1      	ldr	r2, [pc, #772]	@ (8004b2c <HAL_ADC_ConfigChannel+0x35c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0019      	movs	r1, r3
 8004836:	0010      	movs	r0, r2
 8004838:	f7ff fc64 	bl	8004104 <LL_ADC_REG_SetSequencerChAdd>
 800483c:	e0c9      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	211f      	movs	r1, #31
 8004848:	400b      	ands	r3, r1
 800484a:	210f      	movs	r1, #15
 800484c:	4099      	lsls	r1, r3
 800484e:	000b      	movs	r3, r1
 8004850:	43db      	mvns	r3, r3
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	035b      	lsls	r3, r3, #13
 800485c:	0b5b      	lsrs	r3, r3, #13
 800485e:	d105      	bne.n	800486c <HAL_ADC_ConfigChannel+0x9c>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	221f      	movs	r2, #31
 8004868:	4013      	ands	r3, r2
 800486a:	e098      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d000      	beq.n	8004878 <HAL_ADC_ConfigChannel+0xa8>
 8004876:	e091      	b.n	800499c <HAL_ADC_ConfigChannel+0x1cc>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2202      	movs	r2, #2
 800487e:	4013      	ands	r3, r2
 8004880:	d000      	beq.n	8004884 <HAL_ADC_ConfigChannel+0xb4>
 8004882:	e089      	b.n	8004998 <HAL_ADC_ConfigChannel+0x1c8>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2204      	movs	r2, #4
 800488a:	4013      	ands	r3, r2
 800488c:	d000      	beq.n	8004890 <HAL_ADC_ConfigChannel+0xc0>
 800488e:	e081      	b.n	8004994 <HAL_ADC_ConfigChannel+0x1c4>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	4013      	ands	r3, r2
 8004898:	d000      	beq.n	800489c <HAL_ADC_ConfigChannel+0xcc>
 800489a:	e079      	b.n	8004990 <HAL_ADC_ConfigChannel+0x1c0>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d000      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0xd8>
 80048a6:	e071      	b.n	800498c <HAL_ADC_ConfigChannel+0x1bc>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2220      	movs	r2, #32
 80048ae:	4013      	ands	r3, r2
 80048b0:	d000      	beq.n	80048b4 <HAL_ADC_ConfigChannel+0xe4>
 80048b2:	e069      	b.n	8004988 <HAL_ADC_ConfigChannel+0x1b8>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2240      	movs	r2, #64	@ 0x40
 80048ba:	4013      	ands	r3, r2
 80048bc:	d000      	beq.n	80048c0 <HAL_ADC_ConfigChannel+0xf0>
 80048be:	e061      	b.n	8004984 <HAL_ADC_ConfigChannel+0x1b4>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2280      	movs	r2, #128	@ 0x80
 80048c6:	4013      	ands	r3, r2
 80048c8:	d000      	beq.n	80048cc <HAL_ADC_ConfigChannel+0xfc>
 80048ca:	e059      	b.n	8004980 <HAL_ADC_ConfigChannel+0x1b0>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4013      	ands	r3, r2
 80048d6:	d151      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1ac>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4013      	ands	r3, r2
 80048e2:	d149      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x1a8>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	d141      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1a4>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	4013      	ands	r3, r2
 80048fa:	d139      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1a0>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	@ 0x80
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	4013      	ands	r3, r2
 8004906:	d131      	bne.n	800496c <HAL_ADC_ConfigChannel+0x19c>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	019b      	lsls	r3, r3, #6
 8004910:	4013      	ands	r3, r2
 8004912:	d129      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x198>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	4013      	ands	r3, r2
 800491e:	d121      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x194>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2380      	movs	r3, #128	@ 0x80
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	4013      	ands	r3, r2
 800492a:	d119      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x190>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	025b      	lsls	r3, r3, #9
 8004934:	4013      	ands	r3, r2
 8004936:	d111      	bne.n	800495c <HAL_ADC_ConfigChannel+0x18c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	4013      	ands	r3, r2
 8004942:	d109      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x188>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	02db      	lsls	r3, r3, #11
 800494c:	4013      	ands	r3, r2
 800494e:	d001      	beq.n	8004954 <HAL_ADC_ConfigChannel+0x184>
 8004950:	2312      	movs	r3, #18
 8004952:	e024      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004954:	2300      	movs	r3, #0
 8004956:	e022      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004958:	2311      	movs	r3, #17
 800495a:	e020      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800495c:	2310      	movs	r3, #16
 800495e:	e01e      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004960:	230f      	movs	r3, #15
 8004962:	e01c      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004964:	230e      	movs	r3, #14
 8004966:	e01a      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004968:	230d      	movs	r3, #13
 800496a:	e018      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800496c:	230c      	movs	r3, #12
 800496e:	e016      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004970:	230b      	movs	r3, #11
 8004972:	e014      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004974:	230a      	movs	r3, #10
 8004976:	e012      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004978:	2309      	movs	r3, #9
 800497a:	e010      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800497c:	2308      	movs	r3, #8
 800497e:	e00e      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004980:	2307      	movs	r3, #7
 8004982:	e00c      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004984:	2306      	movs	r3, #6
 8004986:	e00a      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004988:	2305      	movs	r3, #5
 800498a:	e008      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800498c:	2304      	movs	r3, #4
 800498e:	e006      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004990:	2303      	movs	r3, #3
 8004992:	e004      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004994:	2302      	movs	r3, #2
 8004996:	e002      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <HAL_ADC_ConfigChannel+0x1ce>
 800499c:	2300      	movs	r3, #0
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	6852      	ldr	r2, [r2, #4]
 80049a2:	201f      	movs	r0, #31
 80049a4:	4002      	ands	r2, r0
 80049a6:	4093      	lsls	r3, r2
 80049a8:	000a      	movs	r2, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d808      	bhi.n	80049d2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	001a      	movs	r2, r3
 80049ce:	f7ff fb79 	bl	80040c4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	001a      	movs	r2, r3
 80049e0:	f7ff fbc0 	bl	8004164 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db00      	blt.n	80049ee <HAL_ADC_ConfigChannel+0x21e>
 80049ec:	e0bc      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049ee:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7ff fb15 	bl	8004020 <LL_ADC_GetCommonPathInternalCh>
 80049f6:	0003      	movs	r3, r0
 80049f8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004b34 <HAL_ADC_ConfigChannel+0x364>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d122      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a0c:	d11d      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2280      	movs	r2, #128	@ 0x80
 8004a12:	0412      	lsls	r2, r2, #16
 8004a14:	4313      	orrs	r3, r2
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004a18:	0019      	movs	r1, r3
 8004a1a:	0010      	movs	r0, r2
 8004a1c:	f7ff faec 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a20:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <HAL_ADC_ConfigChannel+0x368>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4945      	ldr	r1, [pc, #276]	@ (8004b3c <HAL_ADC_ConfigChannel+0x36c>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7fb fb86 	bl	8000138 <__udivsi3>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	0013      	movs	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a3a:	e002      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f9      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a48:	e08e      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b40 <HAL_ADC_ConfigChannel+0x370>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10e      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	045b      	lsls	r3, r3, #17
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d109      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2280      	movs	r2, #128	@ 0x80
 8004a62:	0452      	lsls	r2, r2, #17
 8004a64:	4313      	orrs	r3, r2
 8004a66:	4a32      	ldr	r2, [pc, #200]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004a68:	0019      	movs	r1, r3
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	f7ff fac4 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004a70:	e07a      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a33      	ldr	r2, [pc, #204]	@ (8004b44 <HAL_ADC_ConfigChannel+0x374>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d000      	beq.n	8004a7e <HAL_ADC_ConfigChannel+0x2ae>
 8004a7c:	e074      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	03db      	lsls	r3, r3, #15
 8004a84:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a86:	d000      	beq.n	8004a8a <HAL_ADC_ConfigChannel+0x2ba>
 8004a88:	e06e      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2280      	movs	r2, #128	@ 0x80
 8004a8e:	03d2      	lsls	r2, r2, #15
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a27      	ldr	r2, [pc, #156]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	0010      	movs	r0, r2
 8004a98:	f7ff faae 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004a9c:	e064      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d004      	beq.n	8004ab4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004aae:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_ADC_ConfigChannel+0x35c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0019      	movs	r1, r3
 8004abe:	0010      	movs	r0, r2
 8004ac0:	f7ff fb31 	bl	8004126 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da4d      	bge.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004acc:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7ff faa6 	bl	8004020 <LL_ADC_GetCommonPathInternalCh>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <HAL_ADC_ConfigChannel+0x364>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <HAL_ADC_ConfigChannel+0x378>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	4a11      	ldr	r2, [pc, #68]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7ff fa83 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004af2:	e039      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <HAL_ADC_ConfigChannel+0x370>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d108      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4a12      	ldr	r2, [pc, #72]	@ (8004b4c <HAL_ADC_ConfigChannel+0x37c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004b06:	0019      	movs	r1, r3
 8004b08:	0010      	movs	r0, r2
 8004b0a:	f7ff fa75 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004b0e:	e02b      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <HAL_ADC_ConfigChannel+0x374>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d126      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <HAL_ADC_ConfigChannel+0x380>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	4a03      	ldr	r2, [pc, #12]	@ (8004b30 <HAL_ADC_ConfigChannel+0x360>)
 8004b22:	0019      	movs	r1, r3
 8004b24:	0010      	movs	r0, r2
 8004b26:	f7ff fa67 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004b2a:	e01d      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x398>
 8004b2c:	80000004 	.word	0x80000004
 8004b30:	40012708 	.word	0x40012708
 8004b34:	b0001000 	.word	0xb0001000
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	00030d40 	.word	0x00030d40
 8004b40:	b8004000 	.word	0xb8004000
 8004b44:	b4002000 	.word	0xb4002000
 8004b48:	ff7fffff 	.word	0xff7fffff
 8004b4c:	feffffff 	.word	0xfeffffff
 8004b50:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	2220      	movs	r2, #32
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b60:	2317      	movs	r3, #23
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2254      	movs	r2, #84	@ 0x54
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004b70:	2317      	movs	r3, #23
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	781b      	ldrb	r3, [r3, #0]
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b006      	add	sp, #24
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)

08004b80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd2:	d809      	bhi.n	8004be8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd4:	1dfb      	adds	r3, r7, #7
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	001a      	movs	r2, r3
 8004bda:	231f      	movs	r3, #31
 8004bdc:	401a      	ands	r2, r3
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__NVIC_EnableIRQ+0x30>)
 8004be0:	2101      	movs	r1, #1
 8004be2:	4091      	lsls	r1, r2
 8004be4:	000a      	movs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004be8:	46c0      	nop			@ (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	1dfb      	adds	r3, r7, #7
 8004c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c02:	1dfb      	adds	r3, r7, #7
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c08:	d828      	bhi.n	8004c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc8 <__NVIC_SetPriority+0xd4>)
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	33c0      	adds	r3, #192	@ 0xc0
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	589b      	ldr	r3, [r3, r2]
 8004c1a:	1dfa      	adds	r2, r7, #7
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	0011      	movs	r1, r2
 8004c20:	2203      	movs	r2, #3
 8004c22:	400a      	ands	r2, r1
 8004c24:	00d2      	lsls	r2, r2, #3
 8004c26:	21ff      	movs	r1, #255	@ 0xff
 8004c28:	4091      	lsls	r1, r2
 8004c2a:	000a      	movs	r2, r1
 8004c2c:	43d2      	mvns	r2, r2
 8004c2e:	401a      	ands	r2, r3
 8004c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	019b      	lsls	r3, r3, #6
 8004c36:	22ff      	movs	r2, #255	@ 0xff
 8004c38:	401a      	ands	r2, r3
 8004c3a:	1dfb      	adds	r3, r7, #7
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	2303      	movs	r3, #3
 8004c42:	4003      	ands	r3, r0
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c48:	481f      	ldr	r0, [pc, #124]	@ (8004cc8 <__NVIC_SetPriority+0xd4>)
 8004c4a:	1dfb      	adds	r3, r7, #7
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	430a      	orrs	r2, r1
 8004c54:	33c0      	adds	r3, #192	@ 0xc0
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c5a:	e031      	b.n	8004cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ccc <__NVIC_SetPriority+0xd8>)
 8004c5e:	1dfb      	adds	r3, r7, #7
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	0019      	movs	r1, r3
 8004c64:	230f      	movs	r3, #15
 8004c66:	400b      	ands	r3, r1
 8004c68:	3b08      	subs	r3, #8
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	3306      	adds	r3, #6
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	3304      	adds	r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1dfa      	adds	r2, r7, #7
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	0011      	movs	r1, r2
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	400a      	ands	r2, r1
 8004c80:	00d2      	lsls	r2, r2, #3
 8004c82:	21ff      	movs	r1, #255	@ 0xff
 8004c84:	4091      	lsls	r1, r2
 8004c86:	000a      	movs	r2, r1
 8004c88:	43d2      	mvns	r2, r2
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	019b      	lsls	r3, r3, #6
 8004c92:	22ff      	movs	r2, #255	@ 0xff
 8004c94:	401a      	ands	r2, r3
 8004c96:	1dfb      	adds	r3, r7, #7
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	4003      	ands	r3, r0
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ca4:	4809      	ldr	r0, [pc, #36]	@ (8004ccc <__NVIC_SetPriority+0xd8>)
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	001c      	movs	r4, r3
 8004cac:	230f      	movs	r3, #15
 8004cae:	4023      	ands	r3, r4
 8004cb0:	3b08      	subs	r3, #8
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	3306      	adds	r3, #6
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	18c3      	adds	r3, r0, r3
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	601a      	str	r2, [r3, #0]
}
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bd90      	pop	{r4, r7, pc}
 8004cc8:	e000e100 	.word	0xe000e100
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1e5a      	subs	r2, r3, #1
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	045b      	lsls	r3, r3, #17
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d301      	bcc.n	8004ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e010      	b.n	8004d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <SysTick_Config+0x44>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	3a01      	subs	r2, #1
 8004cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	425b      	negs	r3, r3
 8004cf4:	2103      	movs	r1, #3
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f7ff ff7c 	bl	8004bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <SysTick_Config+0x44>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d02:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <SysTick_Config+0x44>)
 8004d04:	2207      	movs	r2, #7
 8004d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	e000e010 	.word	0xe000e010

08004d18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	210f      	movs	r1, #15
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	1c02      	adds	r2, r0, #0
 8004d28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b25b      	sxtb	r3, r3
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff ff5d 	bl	8004bf4 <__NVIC_SetPriority>
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b004      	add	sp, #16
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	0002      	movs	r2, r0
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4e:	1dfb      	adds	r3, r7, #7
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7ff ff33 	bl	8004bc0 <__NVIC_EnableIRQ>
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff ffaf 	bl	8004cd0 <SysTick_Config>
 8004d72:	0003      	movs	r3, r0
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e077      	b.n	8004e7e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3d      	ldr	r2, [pc, #244]	@ (8004e88 <HAL_DMA_Init+0x10c>)
 8004d94:	4694      	mov	ip, r2
 8004d96:	4463      	add	r3, ip
 8004d98:	2114      	movs	r1, #20
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fb f9cc 	bl	8000138 <__udivsi3>
 8004da0:	0003      	movs	r3, r0
 8004da2:	009a      	lsls	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2225      	movs	r2, #37	@ 0x25
 8004dac:	2102      	movs	r1, #2
 8004dae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4934      	ldr	r1, [pc, #208]	@ (8004e8c <HAL_DMA_Init+0x110>)
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 f971 	bl	80050e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	01db      	lsls	r3, r3, #7
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d102      	bne.n	8004e10 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e18:	213f      	movs	r1, #63	@ 0x3f
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <HAL_DMA_Init+0xd8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d80d      	bhi.n	8004e54 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 f97c 	bl	8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e008      	b.n	8004e66 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2225      	movs	r2, #37	@ 0x25
 8004e70:	2101      	movs	r1, #1
 8004e72:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b002      	add	sp, #8
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	bffdfff8 	.word	0xbffdfff8
 8004e8c:	ffff800f 	.word	0xffff800f

08004e90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e98:	210f      	movs	r1, #15
 8004e9a:	187b      	adds	r3, r7, r1
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2225      	movs	r2, #37	@ 0x25
 8004ea4:	5c9b      	ldrb	r3, [r3, r2]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d006      	beq.n	8004eba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004eb2:	187b      	adds	r3, r7, r1
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e049      	b.n	8004f4e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	210e      	movs	r1, #14
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee4:	491d      	ldr	r1, [pc, #116]	@ (8004f5c <HAL_DMA_Abort_IT+0xcc>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_DMA_Abort_IT+0xd0>)
 8004eec:	6859      	ldr	r1, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	221c      	movs	r2, #28
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_DMA_Abort_IT+0xd0>)
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00c      	beq.n	8004f2c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1c:	490f      	ldr	r1, [pc, #60]	@ (8004f5c <HAL_DMA_Abort_IT+0xcc>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2225      	movs	r2, #37	@ 0x25
 8004f30:	2101      	movs	r1, #1
 8004f32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	@ 0x24
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	0010      	movs	r0, r2
 8004f4c:	4798      	blx	r3
    }
  }
  return status;
 8004f4e:	230f      	movs	r3, #15
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	fffffeff 	.word	0xfffffeff
 8004f60:	40020000 	.word	0x40020000

08004f64 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004f6c:	4b55      	ldr	r3, [pc, #340]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	221c      	movs	r2, #28
 8004f80:	4013      	ands	r3, r2
 8004f82:	2204      	movs	r2, #4
 8004f84:	409a      	lsls	r2, r3
 8004f86:	0013      	movs	r3, r2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_IRQHandler+0x7a>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2204      	movs	r2, #4
 8004f92:	4013      	ands	r3, r2
 8004f94:	d023      	beq.n	8004fde <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d107      	bne.n	8004fb2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2104      	movs	r1, #4
 8004fae:	438a      	bics	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004fb2:	4b44      	ldr	r3, [pc, #272]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	221c      	movs	r2, #28
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	4b40      	ldr	r3, [pc, #256]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d100      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0x6e>
 8004fd0:	e073      	b.n	80050ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	0010      	movs	r0, r2
 8004fda:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004fdc:	e06d      	b.n	80050ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	221c      	movs	r2, #28
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	0013      	movs	r3, r2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d02e      	beq.n	8005050 <HAL_DMA_IRQHandler+0xec>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d02a      	beq.n	8005050 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2220      	movs	r2, #32
 8005002:	4013      	ands	r3, r2
 8005004:	d10b      	bne.n	800501e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	210a      	movs	r1, #10
 8005012:	438a      	bics	r2, r1
 8005014:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2225      	movs	r2, #37	@ 0x25
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800501e:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	221c      	movs	r2, #28
 8005028:	4013      	ands	r3, r2
 800502a:	2202      	movs	r2, #2
 800502c:	409a      	lsls	r2, r3
 800502e:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	@ 0x24
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03a      	beq.n	80050ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	0010      	movs	r0, r2
 800504c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800504e:	e034      	b.n	80050ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	221c      	movs	r2, #28
 8005056:	4013      	ands	r3, r2
 8005058:	2208      	movs	r2, #8
 800505a:	409a      	lsls	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4013      	ands	r3, r2
 8005062:	d02b      	beq.n	80050bc <HAL_DMA_IRQHandler+0x158>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2208      	movs	r2, #8
 8005068:	4013      	ands	r3, r2
 800506a:	d027      	beq.n	80050bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	210e      	movs	r1, #14
 8005078:	438a      	bics	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800507c:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	221c      	movs	r2, #28
 8005086:	4013      	ands	r3, r2
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <HAL_DMA_IRQHandler+0x160>)
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2225      	movs	r2, #37	@ 0x25
 800509c:	2101      	movs	r1, #1
 800509e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	2100      	movs	r1, #0
 80050a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	0010      	movs	r0, r2
 80050b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	46c0      	nop			@ (mov r8, r8)
}
 80050be:	46bd      	mov	sp, r7
 80050c0:	b004      	add	sp, #16
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40020000 	.word	0x40020000

080050c8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2225      	movs	r2, #37	@ 0x25
 80050d4:	5c9b      	ldrb	r3, [r3, r2]
 80050d6:	b2db      	uxtb	r3, r3
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}

080050e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	4a10      	ldr	r2, [pc, #64]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80050f0:	4694      	mov	ip, r2
 80050f2:	4463      	add	r3, ip
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	001a      	movs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	001a      	movs	r2, r3
 8005102:	23ff      	movs	r3, #255	@ 0xff
 8005104:	4013      	ands	r3, r2
 8005106:	3b08      	subs	r3, #8
 8005108:	2114      	movs	r1, #20
 800510a:	0018      	movs	r0, r3
 800510c:	f7fb f814 	bl	8000138 <__udivsi3>
 8005110:	0003      	movs	r3, r0
 8005112:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a07      	ldr	r2, [pc, #28]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005118:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	221f      	movs	r2, #31
 800511e:	4013      	ands	r3, r2
 8005120:	2201      	movs	r2, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b004      	add	sp, #16
 800512e:	bd80      	pop	{r7, pc}
 8005130:	10008200 	.word	0x10008200
 8005134:	40020880 	.word	0x40020880

08005138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	223f      	movs	r2, #63	@ 0x3f
 8005146:	4013      	ands	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a0a      	ldr	r2, [pc, #40]	@ (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800514e:	4694      	mov	ip, r2
 8005150:	4463      	add	r3, ip
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	001a      	movs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a07      	ldr	r2, [pc, #28]	@ (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3b01      	subs	r3, #1
 8005164:	2203      	movs	r2, #3
 8005166:	4013      	ands	r3, r2
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b004      	add	sp, #16
 8005176:	bd80      	pop	{r7, pc}
 8005178:	1000823f 	.word	0x1000823f
 800517c:	40020940 	.word	0x40020940

08005180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800518e:	e147      	b.n	8005420 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4091      	lsls	r1, r2
 800519a:	000a      	movs	r2, r1
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d100      	bne.n	80051a8 <HAL_GPIO_Init+0x28>
 80051a6:	e138      	b.n	800541a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2203      	movs	r2, #3
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d005      	beq.n	80051c0 <HAL_GPIO_Init+0x40>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2203      	movs	r2, #3
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d130      	bne.n	8005222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	409a      	lsls	r2, r3
 80051ce:	0013      	movs	r3, r2
 80051d0:	43da      	mvns	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	409a      	lsls	r2, r3
 80051e2:	0013      	movs	r3, r2
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051f6:	2201      	movs	r2, #1
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	409a      	lsls	r2, r3
 80051fc:	0013      	movs	r3, r2
 80051fe:	43da      	mvns	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	2201      	movs	r2, #1
 800520e:	401a      	ands	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2203      	movs	r2, #3
 8005228:	4013      	ands	r3, r2
 800522a:	2b03      	cmp	r3, #3
 800522c:	d017      	beq.n	800525e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	409a      	lsls	r2, r3
 800523c:	0013      	movs	r3, r2
 800523e:	43da      	mvns	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	0013      	movs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	4013      	ands	r3, r2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d123      	bne.n	80052b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	08da      	lsrs	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3208      	adds	r2, #8
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	58d3      	ldr	r3, [r2, r3]
 8005276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2207      	movs	r2, #7
 800527c:	4013      	ands	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	220f      	movs	r2, #15
 8005282:	409a      	lsls	r2, r3
 8005284:	0013      	movs	r3, r2
 8005286:	43da      	mvns	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2107      	movs	r1, #7
 8005296:	400b      	ands	r3, r1
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	08da      	lsrs	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3208      	adds	r2, #8
 80052ac:	0092      	lsls	r2, r2, #2
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	2203      	movs	r2, #3
 80052be:	409a      	lsls	r2, r3
 80052c0:	0013      	movs	r3, r2
 80052c2:	43da      	mvns	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2203      	movs	r2, #3
 80052d0:	401a      	ands	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	23c0      	movs	r3, #192	@ 0xc0
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	4013      	ands	r3, r2
 80052f0:	d100      	bne.n	80052f4 <HAL_GPIO_Init+0x174>
 80052f2:	e092      	b.n	800541a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80052f4:	4a50      	ldr	r2, [pc, #320]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	3318      	adds	r3, #24
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	589b      	ldr	r3, [r3, r2]
 8005300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2203      	movs	r2, #3
 8005306:	4013      	ands	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	220f      	movs	r2, #15
 800530c:	409a      	lsls	r2, r3
 800530e:	0013      	movs	r3, r2
 8005310:	43da      	mvns	r2, r3
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	23a0      	movs	r3, #160	@ 0xa0
 800531c:	05db      	lsls	r3, r3, #23
 800531e:	429a      	cmp	r2, r3
 8005320:	d013      	beq.n	800534a <HAL_GPIO_Init+0x1ca>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a45      	ldr	r2, [pc, #276]	@ (800543c <HAL_GPIO_Init+0x2bc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00d      	beq.n	8005346 <HAL_GPIO_Init+0x1c6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a44      	ldr	r2, [pc, #272]	@ (8005440 <HAL_GPIO_Init+0x2c0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <HAL_GPIO_Init+0x1c2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a43      	ldr	r2, [pc, #268]	@ (8005444 <HAL_GPIO_Init+0x2c4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_GPIO_Init+0x1be>
 800533a:	2303      	movs	r3, #3
 800533c:	e006      	b.n	800534c <HAL_GPIO_Init+0x1cc>
 800533e:	2305      	movs	r3, #5
 8005340:	e004      	b.n	800534c <HAL_GPIO_Init+0x1cc>
 8005342:	2302      	movs	r3, #2
 8005344:	e002      	b.n	800534c <HAL_GPIO_Init+0x1cc>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_GPIO_Init+0x1cc>
 800534a:	2300      	movs	r3, #0
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	2103      	movs	r1, #3
 8005350:	400a      	ands	r2, r1
 8005352:	00d2      	lsls	r2, r2, #3
 8005354:	4093      	lsls	r3, r2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800535c:	4936      	ldr	r1, [pc, #216]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	3318      	adds	r3, #24
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800536a:	4b33      	ldr	r3, [pc, #204]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43da      	mvns	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	035b      	lsls	r3, r3, #13
 8005382:	4013      	ands	r3, r2
 8005384:	d003      	beq.n	800538e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800538e:	4b2a      	ldr	r3, [pc, #168]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005394:	4b28      	ldr	r3, [pc, #160]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	43da      	mvns	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	039b      	lsls	r3, r3, #14
 80053ac:	4013      	ands	r3, r2
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80053be:	4a1e      	ldr	r2, [pc, #120]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 80053c0:	2384      	movs	r3, #132	@ 0x84
 80053c2:	58d3      	ldr	r3, [r2, r3]
 80053c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43da      	mvns	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	4013      	ands	r3, r2
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053e4:	4914      	ldr	r1, [pc, #80]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 80053e6:	2284      	movs	r2, #132	@ 0x84
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80053ec:	4a12      	ldr	r2, [pc, #72]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	58d3      	ldr	r3, [r2, r3]
 80053f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4013      	ands	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	025b      	lsls	r3, r3, #9
 8005406:	4013      	ands	r3, r2
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005412:	4909      	ldr	r1, [pc, #36]	@ (8005438 <HAL_GPIO_Init+0x2b8>)
 8005414:	2280      	movs	r2, #128	@ 0x80
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3301      	adds	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	40da      	lsrs	r2, r3
 8005428:	1e13      	subs	r3, r2, #0
 800542a:	d000      	beq.n	800542e <HAL_GPIO_Init+0x2ae>
 800542c:	e6b0      	b.n	8005190 <HAL_GPIO_Init+0x10>
  }
}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b006      	add	sp, #24
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021800 	.word	0x40021800
 800543c:	50000400 	.word	0x50000400
 8005440:	50000800 	.word	0x50000800
 8005444:	50000c00 	.word	0x50000c00

08005448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	000a      	movs	r2, r1
 8005452:	1cbb      	adds	r3, r7, #2
 8005454:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	1cba      	adds	r2, r7, #2
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	4013      	ands	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005462:	230f      	movs	r3, #15
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e003      	b.n	8005474 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800546c:	230f      	movs	r3, #15
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005474:	230f      	movs	r3, #15
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	781b      	ldrb	r3, [r3, #0]
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b004      	add	sp, #16
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	0008      	movs	r0, r1
 800548c:	0011      	movs	r1, r2
 800548e:	1cbb      	adds	r3, r7, #2
 8005490:	1c02      	adds	r2, r0, #0
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	1c7b      	adds	r3, r7, #1
 8005496:	1c0a      	adds	r2, r1, #0
 8005498:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800549a:	1c7b      	adds	r3, r7, #1
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054a2:	1cbb      	adds	r3, r7, #2
 80054a4:	881a      	ldrh	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054aa:	e003      	b.n	80054b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ac:	1cbb      	adds	r3, r7, #2
 80054ae:	881a      	ldrh	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054b4:	46c0      	nop			@ (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	0002      	movs	r2, r0
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80054c8:	4b10      	ldr	r3, [pc, #64]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	1dba      	adds	r2, r7, #6
 80054ce:	8812      	ldrh	r2, [r2, #0]
 80054d0:	4013      	ands	r3, r2
 80054d2:	d008      	beq.n	80054e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80054d4:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80054d6:	1dba      	adds	r2, r7, #6
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80054dc:	1dbb      	adds	r3, r7, #6
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 f815 	bl	8005510 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80054e6:	4b09      	ldr	r3, [pc, #36]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	1dba      	adds	r2, r7, #6
 80054ec:	8812      	ldrh	r2, [r2, #0]
 80054ee:	4013      	ands	r3, r2
 80054f0:	d008      	beq.n	8005504 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80054f4:	1dba      	adds	r2, r7, #6
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80054fa:	1dbb      	adds	r3, r7, #6
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fd fad0 	bl	8002aa4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021800 	.word	0x40021800

08005510 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	0002      	movs	r2, r0
 8005518:	1dbb      	adds	r3, r7, #6
 800551a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800551c:	46c0      	nop			@ (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e08f      	b.n	8005656 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2241      	movs	r2, #65	@ 0x41
 800553a:	5c9b      	ldrb	r3, [r3, r2]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2240      	movs	r2, #64	@ 0x40
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f7fe f9d7 	bl	8003900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2241      	movs	r2, #65	@ 0x41
 8005556:	2124      	movs	r1, #36	@ 0x24
 8005558:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2101      	movs	r1, #1
 8005566:	438a      	bics	r2, r1
 8005568:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	493b      	ldr	r1, [pc, #236]	@ (8005660 <HAL_I2C_Init+0x13c>)
 8005574:	400a      	ands	r2, r1
 8005576:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4938      	ldr	r1, [pc, #224]	@ (8005664 <HAL_I2C_Init+0x140>)
 8005584:	400a      	ands	r2, r1
 8005586:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d108      	bne.n	80055a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2180      	movs	r1, #128	@ 0x80
 800559a:	0209      	lsls	r1, r1, #8
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	e007      	b.n	80055b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2184      	movs	r1, #132	@ 0x84
 80055ac:	0209      	lsls	r1, r1, #8
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d109      	bne.n	80055ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2180      	movs	r1, #128	@ 0x80
 80055c6:	0109      	lsls	r1, r1, #4
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
 80055cc:	e007      	b.n	80055de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4923      	ldr	r1, [pc, #140]	@ (8005668 <HAL_I2C_Init+0x144>)
 80055da:	400a      	ands	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4920      	ldr	r1, [pc, #128]	@ (800566c <HAL_I2C_Init+0x148>)
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	491a      	ldr	r1, [pc, #104]	@ (8005664 <HAL_I2C_Init+0x140>)
 80055fa:	400a      	ands	r2, r1
 80055fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	431a      	orrs	r2, r3
 8005608:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69d9      	ldr	r1, [r3, #28]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2241      	movs	r2, #65	@ 0x41
 8005642:	2120      	movs	r1, #32
 8005644:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2242      	movs	r2, #66	@ 0x42
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b002      	add	sp, #8
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	f0ffffff 	.word	0xf0ffffff
 8005664:	ffff7fff 	.word	0xffff7fff
 8005668:	fffff7ff 	.word	0xfffff7ff
 800566c:	02008000 	.word	0x02008000

08005670 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4798      	blx	r3
  }
}
 800569c:	46c0      	nop			@ (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2280      	movs	r2, #128	@ 0x80
 80056ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056cc:	d00a      	beq.n	80056e4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d2:	2201      	movs	r2, #1
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2280      	movs	r2, #128	@ 0x80
 80056e0:	0052      	lsls	r2, r2, #1
 80056e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	2380      	movs	r3, #128	@ 0x80
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4013      	ands	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2280      	movs	r2, #128	@ 0x80
 80056f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056f4:	d00a      	beq.n	800570c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	2208      	movs	r2, #8
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2280      	movs	r2, #128	@ 0x80
 8005708:	00d2      	lsls	r2, r2, #3
 800570a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2280      	movs	r2, #128	@ 0x80
 800571a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800571c:	d00a      	beq.n	8005734 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	2202      	movs	r2, #2
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2280      	movs	r2, #128	@ 0x80
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005738:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	220b      	movs	r2, #11
 800573e:	4013      	ands	r3, r2
 8005740:	d005      	beq.n	800574e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	0011      	movs	r1, r2
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fc25 	bl	8005f98 <I2C_ITError>
  }
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b006      	add	sp, #24
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b002      	add	sp, #8
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	0008      	movs	r0, r1
 8005780:	0011      	movs	r1, r2
 8005782:	1cfb      	adds	r3, r7, #3
 8005784:	1c02      	adds	r2, r0, #0
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	003b      	movs	r3, r7
 800578a:	1c0a      	adds	r2, r1, #0
 800578c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b002      	add	sp, #8
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b002      	add	sp, #8
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2240      	movs	r2, #64	@ 0x40
 80057e2:	5c9b      	ldrb	r3, [r3, r2]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <I2C_Slave_ISR_IT+0x24>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0e7      	b.n	80059bc <I2C_Slave_ISR_IT+0x1f4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	2101      	movs	r1, #1
 80057f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2220      	movs	r2, #32
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00a      	beq.n	8005812 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005802:	d006      	beq.n	8005812 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0011      	movs	r1, r2
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f9e4 	bl	8005bd8 <I2C_ITSlaveCplt>
 8005810:	e0cf      	b.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2210      	movs	r2, #16
 8005816:	4013      	ands	r3, r2
 8005818:	d052      	beq.n	80058c0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2210      	movs	r2, #16
 800581e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005820:	d04e      	beq.n	80058c0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d12d      	bne.n	8005888 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2241      	movs	r2, #65	@ 0x41
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b28      	cmp	r3, #40	@ 0x28
 8005836:	d10b      	bne.n	8005850 <I2C_Slave_ISR_IT+0x88>
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	2380      	movs	r3, #128	@ 0x80
 800583c:	049b      	lsls	r3, r3, #18
 800583e:	429a      	cmp	r2, r3
 8005840:	d106      	bne.n	8005850 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0011      	movs	r1, r2
 8005848:	0018      	movs	r0, r3
 800584a:	f000 fb4d 	bl	8005ee8 <I2C_ITListenCplt>
 800584e:	e036      	b.n	80058be <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2241      	movs	r2, #65	@ 0x41
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b29      	cmp	r3, #41	@ 0x29
 800585a:	d110      	bne.n	800587e <I2C_Slave_ISR_IT+0xb6>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4a59      	ldr	r2, [pc, #356]	@ (80059c4 <I2C_Slave_ISR_IT+0x1fc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00c      	beq.n	800587e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2210      	movs	r2, #16
 800586a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fcbd 	bl	80061ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f94a 	bl	8005b10 <I2C_ITSlaveSeqCplt>
 800587c:	e01f      	b.n	80058be <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2210      	movs	r2, #16
 8005884:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005886:	e091      	b.n	80059ac <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	2204      	movs	r2, #4
 8005896:	431a      	orrs	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <I2C_Slave_ISR_IT+0xe6>
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	2380      	movs	r3, #128	@ 0x80
 80058a6:	045b      	lsls	r3, r3, #17
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d000      	beq.n	80058ae <I2C_Slave_ISR_IT+0xe6>
 80058ac:	e07e      	b.n	80059ac <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	0011      	movs	r1, r2
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fb6e 	bl	8005f98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058bc:	e076      	b.n	80059ac <I2C_Slave_ISR_IT+0x1e4>
 80058be:	e075      	b.n	80059ac <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2204      	movs	r2, #4
 80058c4:	4013      	ands	r3, r2
 80058c6:	d02f      	beq.n	8005928 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058ce:	d02b      	beq.n	8005928 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d14c      	bne.n	80059b0 <I2C_Slave_ISR_IT+0x1e8>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <I2C_Slave_ISR_IT+0x1fc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d048      	beq.n	80059b0 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f8f5 	bl	8005b10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005926:	e043      	b.n	80059b0 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2208      	movs	r2, #8
 800592c:	4013      	ands	r3, r2
 800592e:	d00a      	beq.n	8005946 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2208      	movs	r2, #8
 8005934:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005936:	d006      	beq.n	8005946 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	0011      	movs	r1, r2
 800593e:	0018      	movs	r0, r3
 8005940:	f000 f842 	bl	80059c8 <I2C_ITAddrCplt>
 8005944:	e035      	b.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2202      	movs	r2, #2
 800594a:	4013      	ands	r3, r2
 800594c:	d031      	beq.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005954:	d02d      	beq.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d018      	beq.n	8005992 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005990:	e00f      	b.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	045b      	lsls	r3, r3, #17
 8005998:	429a      	cmp	r2, r3
 800599a:	d002      	beq.n	80059a2 <I2C_Slave_ISR_IT+0x1da>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 f8b3 	bl	8005b10 <I2C_ITSlaveSeqCplt>
 80059aa:	e002      	b.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80059ac:	46c0      	nop			@ (mov r8, r8)
 80059ae:	e000      	b.n	80059b2 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80059b0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2240      	movs	r2, #64	@ 0x40
 80059b6:	2100      	movs	r1, #0
 80059b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b006      	add	sp, #24
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	ffff0000 	.word	0xffff0000

080059c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059c8:	b5b0      	push	{r4, r5, r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2241      	movs	r2, #65	@ 0x41
 80059d6:	5c9b      	ldrb	r3, [r3, r2]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	001a      	movs	r2, r3
 80059dc:	2328      	movs	r3, #40	@ 0x28
 80059de:	4013      	ands	r3, r2
 80059e0:	2b28      	cmp	r3, #40	@ 0x28
 80059e2:	d000      	beq.n	80059e6 <I2C_ITAddrCplt+0x1e>
 80059e4:	e088      	b.n	8005af8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	250f      	movs	r5, #15
 80059f2:	197b      	adds	r3, r7, r5
 80059f4:	2101      	movs	r1, #1
 80059f6:	400a      	ands	r2, r1
 80059f8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	200c      	movs	r0, #12
 8005a06:	183b      	adds	r3, r7, r0
 8005a08:	21fe      	movs	r1, #254	@ 0xfe
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	240a      	movs	r4, #10
 8005a18:	193b      	adds	r3, r7, r4
 8005a1a:	0592      	lsls	r2, r2, #22
 8005a1c:	0d92      	lsrs	r2, r2, #22
 8005a1e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	2308      	movs	r3, #8
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	21fe      	movs	r1, #254	@ 0xfe
 8005a2e:	400a      	ands	r2, r1
 8005a30:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d148      	bne.n	8005acc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a3a:	0021      	movs	r1, r4
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	4053      	eors	r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	2306      	movs	r3, #6
 8005a50:	4013      	ands	r3, r2
 8005a52:	d120      	bne.n	8005a96 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005a54:	183b      	adds	r3, r7, r0
 8005a56:	187a      	adds	r2, r7, r1
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d14c      	bne.n	8005b08 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2240      	movs	r2, #64	@ 0x40
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	881a      	ldrh	r2, [r3, #0]
 8005a88:	197b      	adds	r3, r7, r5
 8005a8a:	7819      	ldrb	r1, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7ff fe71 	bl	8005776 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a94:	e038      	b.n	8005b08 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005a96:	240c      	movs	r4, #12
 8005a98:	193b      	adds	r3, r7, r4
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	18ba      	adds	r2, r7, r2
 8005a9e:	8812      	ldrh	r2, [r2, #0]
 8005aa0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	021a      	lsls	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0011      	movs	r1, r2
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 fbe0 	bl	8006270 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	@ 0x40
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	230f      	movs	r3, #15
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	7819      	ldrb	r1, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff fe56 	bl	8005776 <HAL_I2C_AddrCallback>
}
 8005aca:	e01d      	b.n	8005b08 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 fbcb 	bl	8006270 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2240      	movs	r2, #64	@ 0x40
 8005ade:	2100      	movs	r1, #0
 8005ae0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	230f      	movs	r3, #15
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	7819      	ldrb	r1, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff fe40 	bl	8005776 <HAL_I2C_AddrCallback>
}
 8005af6:	e007      	b.n	8005b08 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2208      	movs	r2, #8
 8005afe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2240      	movs	r2, #64	@ 0x40
 8005b04:	2100      	movs	r1, #0
 8005b06:	5499      	strb	r1, [r3, r2]
}
 8005b08:	46c0      	nop			@ (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bdb0      	pop	{r4, r5, r7, pc}

08005b10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2242      	movs	r2, #66	@ 0x42
 8005b24:	2100      	movs	r1, #0
 8005b26:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d008      	beq.n	8005b44 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4924      	ldr	r1, [pc, #144]	@ (8005bd0 <I2C_ITSlaveSeqCplt+0xc0>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e00c      	b.n	8005b5e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	491e      	ldr	r1, [pc, #120]	@ (8005bd4 <I2C_ITSlaveSeqCplt+0xc4>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2241      	movs	r2, #65	@ 0x41
 8005b62:	5c9b      	ldrb	r3, [r3, r2]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b29      	cmp	r3, #41	@ 0x29
 8005b68:	d114      	bne.n	8005b94 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2241      	movs	r2, #65	@ 0x41
 8005b6e:	2128      	movs	r1, #40	@ 0x28
 8005b70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2221      	movs	r2, #33	@ 0x21
 8005b76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 fb77 	bl	8006270 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2240      	movs	r2, #64	@ 0x40
 8005b86:	2100      	movs	r1, #0
 8005b88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff fde2 	bl	8005756 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b92:	e019      	b.n	8005bc8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2241      	movs	r2, #65	@ 0x41
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9e:	d113      	bne.n	8005bc8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2241      	movs	r2, #65	@ 0x41
 8005ba4:	2128      	movs	r1, #40	@ 0x28
 8005ba6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2222      	movs	r2, #34	@ 0x22
 8005bac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fb5c 	bl	8006270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2240      	movs	r2, #64	@ 0x40
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7ff fdcf 	bl	8005766 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bc8:	46c0      	nop			@ (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b004      	add	sp, #16
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	ffffbfff 	.word	0xffffbfff
 8005bd4:	ffff7fff 	.word	0xffff7fff

08005bd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bf4:	200b      	movs	r0, #11
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	2141      	movs	r1, #65	@ 0x41
 8005bfc:	5c52      	ldrb	r2, [r2, r1]
 8005bfe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2220      	movs	r2, #32
 8005c06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c08:	183b      	adds	r3, r7, r0
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b21      	cmp	r3, #33	@ 0x21
 8005c0e:	d003      	beq.n	8005c18 <I2C_ITSlaveCplt+0x40>
 8005c10:	183b      	adds	r3, r7, r0
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b29      	cmp	r3, #41	@ 0x29
 8005c16:	d109      	bne.n	8005c2c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c18:	4aac      	ldr	r2, [pc, #688]	@ (8005ecc <I2C_ITSlaveCplt+0x2f4>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0011      	movs	r1, r2
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 fb26 	bl	8006270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2221      	movs	r2, #33	@ 0x21
 8005c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c2a:	e020      	b.n	8005c6e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c2c:	220b      	movs	r2, #11
 8005c2e:	18bb      	adds	r3, r7, r2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	d003      	beq.n	8005c3e <I2C_ITSlaveCplt+0x66>
 8005c36:	18bb      	adds	r3, r7, r2
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3c:	d109      	bne.n	8005c52 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c3e:	4aa4      	ldr	r2, [pc, #656]	@ (8005ed0 <I2C_ITSlaveCplt+0x2f8>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 fb13 	bl	8006270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2222      	movs	r2, #34	@ 0x22
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c50:	e00d      	b.n	8005c6e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005c52:	230b      	movs	r3, #11
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b28      	cmp	r3, #40	@ 0x28
 8005c5a:	d108      	bne.n	8005c6e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c5c:	4a9d      	ldr	r2, [pc, #628]	@ (8005ed4 <I2C_ITSlaveCplt+0x2fc>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 fb04 	bl	8006270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2180      	movs	r1, #128	@ 0x80
 8005c7a:	0209      	lsls	r1, r1, #8
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4993      	ldr	r1, [pc, #588]	@ (8005ed8 <I2C_ITSlaveCplt+0x300>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 faab 	bl	80061ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	01db      	lsls	r3, r3, #7
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d013      	beq.n	8005cca <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	498b      	ldr	r1, [pc, #556]	@ (8005edc <I2C_ITSlaveCplt+0x304>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01f      	beq.n	8005cfa <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cc8:	e017      	b.n	8005cfa <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d012      	beq.n	8005cfa <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4980      	ldr	r1, [pc, #512]	@ (8005ee0 <I2C_ITSlaveCplt+0x308>)
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d020      	beq.n	8005d44 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2204      	movs	r2, #4
 8005d06:	4393      	bics	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	2204      	movs	r2, #4
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d04f      	beq.n	8005e02 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2210      	movs	r2, #16
 8005d66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d68:	d04b      	beq.n	8005e02 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d12d      	bne.n	8005dd0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2241      	movs	r2, #65	@ 0x41
 8005d78:	5c9b      	ldrb	r3, [r3, r2]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b28      	cmp	r3, #40	@ 0x28
 8005d7e:	d10b      	bne.n	8005d98 <I2C_ITSlaveCplt+0x1c0>
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	049b      	lsls	r3, r3, #18
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d106      	bne.n	8005d98 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0011      	movs	r1, r2
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f8a9 	bl	8005ee8 <I2C_ITListenCplt>
 8005d96:	e034      	b.n	8005e02 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2241      	movs	r2, #65	@ 0x41
 8005d9c:	5c9b      	ldrb	r3, [r3, r2]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b29      	cmp	r3, #41	@ 0x29
 8005da2:	d110      	bne.n	8005dc6 <I2C_ITSlaveCplt+0x1ee>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a4f      	ldr	r2, [pc, #316]	@ (8005ee4 <I2C_ITSlaveCplt+0x30c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00c      	beq.n	8005dc6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	0018      	movs	r0, r3
 8005db8:	f000 fa19 	bl	80061ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff fea6 	bl	8005b10 <I2C_ITSlaveSeqCplt>
 8005dc4:	e01d      	b.n	8005e02 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	e018      	b.n	8005e02 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ddc:	2204      	movs	r2, #4
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <I2C_ITSlaveCplt+0x21c>
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	045b      	lsls	r3, r3, #17
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d106      	bne.n	8005e02 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0011      	movs	r1, r2
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 f8cb 	bl	8005f98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2242      	movs	r2, #66	@ 0x42
 8005e06:	2100      	movs	r1, #0
 8005e08:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f8b9 	bl	8005f98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2241      	movs	r2, #65	@ 0x41
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b28      	cmp	r3, #40	@ 0x28
 8005e30:	d147      	bne.n	8005ec2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0011      	movs	r1, r2
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 f855 	bl	8005ee8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e3e:	e040      	b.n	8005ec2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a27      	ldr	r2, [pc, #156]	@ (8005ee4 <I2C_ITSlaveCplt+0x30c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d016      	beq.n	8005e78 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7ff fe5f 	bl	8005b10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a23      	ldr	r2, [pc, #140]	@ (8005ee4 <I2C_ITSlaveCplt+0x30c>)
 8005e56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2241      	movs	r2, #65	@ 0x41
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2240      	movs	r2, #64	@ 0x40
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7ff fc90 	bl	8005796 <HAL_I2C_ListenCpltCallback>
}
 8005e76:	e024      	b.n	8005ec2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2241      	movs	r2, #65	@ 0x41
 8005e7c:	5c9b      	ldrb	r3, [r3, r2]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b22      	cmp	r3, #34	@ 0x22
 8005e82:	d10f      	bne.n	8005ea4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2241      	movs	r2, #65	@ 0x41
 8005e88:	2120      	movs	r1, #32
 8005e8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2240      	movs	r2, #64	@ 0x40
 8005e96:	2100      	movs	r1, #0
 8005e98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f7ff fc62 	bl	8005766 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ea2:	e00e      	b.n	8005ec2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2241      	movs	r2, #65	@ 0x41
 8005ea8:	2120      	movs	r1, #32
 8005eaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2240      	movs	r2, #64	@ 0x40
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff fc4a 	bl	8005756 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b006      	add	sp, #24
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	00008001 	.word	0x00008001
 8005ed0:	00008002 	.word	0x00008002
 8005ed4:	00008003 	.word	0x00008003
 8005ed8:	fe00e800 	.word	0xfe00e800
 8005edc:	ffffbfff 	.word	0xffffbfff
 8005ee0:	ffff7fff 	.word	0xffff7fff
 8005ee4:	ffff0000 	.word	0xffff0000

08005ee8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <I2C_ITListenCplt+0xa8>)
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2241      	movs	r2, #65	@ 0x41
 8005f02:	2120      	movs	r1, #32
 8005f04:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2242      	movs	r2, #66	@ 0x42
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2204      	movs	r2, #4
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d012      	beq.n	8005f62 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f62:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <I2C_ITListenCplt+0xac>)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f981 	bl	8006270 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2210      	movs	r2, #16
 8005f74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2240      	movs	r2, #64	@ 0x40
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7ff fc08 	bl	8005796 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b002      	add	sp, #8
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	ffff0000 	.word	0xffff0000
 8005f94:	00008003 	.word	0x00008003

08005f98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fa2:	200f      	movs	r0, #15
 8005fa4:	183b      	adds	r3, r7, r0
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	2141      	movs	r1, #65	@ 0x41
 8005faa:	5c52      	ldrb	r2, [r2, r1]
 8005fac:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2242      	movs	r2, #66	@ 0x42
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a72      	ldr	r2, [pc, #456]	@ (8006184 <I2C_ITError+0x1ec>)
 8005fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fce:	183b      	adds	r3, r7, r0
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b28      	cmp	r3, #40	@ 0x28
 8005fd4:	d007      	beq.n	8005fe6 <I2C_ITError+0x4e>
 8005fd6:	183b      	adds	r3, r7, r0
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b29      	cmp	r3, #41	@ 0x29
 8005fdc:	d003      	beq.n	8005fe6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fde:	183b      	adds	r3, r7, r0
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe4:	d10c      	bne.n	8006000 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2103      	movs	r1, #3
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f940 	bl	8006270 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2241      	movs	r2, #65	@ 0x41
 8005ff4:	2128      	movs	r1, #40	@ 0x28
 8005ff6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a63      	ldr	r2, [pc, #396]	@ (8006188 <I2C_ITError+0x1f0>)
 8005ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ffe:	e032      	b.n	8006066 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006000:	4a62      	ldr	r2, [pc, #392]	@ (800618c <I2C_ITError+0x1f4>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0011      	movs	r1, r2
 8006006:	0018      	movs	r0, r3
 8006008:	f000 f932 	bl	8006270 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 f8ed 	bl	80061ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2241      	movs	r2, #65	@ 0x41
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b60      	cmp	r3, #96	@ 0x60
 800601e:	d01f      	beq.n	8006060 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2241      	movs	r2, #65	@ 0x41
 8006024:	2120      	movs	r1, #32
 8006026:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2220      	movs	r2, #32
 8006030:	4013      	ands	r3, r2
 8006032:	2b20      	cmp	r3, #32
 8006034:	d114      	bne.n	8006060 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2210      	movs	r2, #16
 800603e:	4013      	ands	r3, r2
 8006040:	2b10      	cmp	r3, #16
 8006042:	d109      	bne.n	8006058 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2210      	movs	r2, #16
 800604a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006050:	2204      	movs	r2, #4
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2220      	movs	r2, #32
 800605e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	2b00      	cmp	r3, #0
 8006072:	d03b      	beq.n	80060ec <I2C_ITError+0x154>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b11      	cmp	r3, #17
 8006078:	d002      	beq.n	8006080 <I2C_ITError+0xe8>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b21      	cmp	r3, #33	@ 0x21
 800607e:	d135      	bne.n	80060ec <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	2380      	movs	r3, #128	@ 0x80
 8006088:	01db      	lsls	r3, r3, #7
 800608a:	401a      	ands	r2, r3
 800608c:	2380      	movs	r3, #128	@ 0x80
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	429a      	cmp	r2, r3
 8006092:	d107      	bne.n	80060a4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	493c      	ldr	r1, [pc, #240]	@ (8006190 <I2C_ITError+0x1f8>)
 80060a0:	400a      	ands	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff f80d 	bl	80050c8 <HAL_DMA_GetState>
 80060ae:	0003      	movs	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d016      	beq.n	80060e2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	4a36      	ldr	r2, [pc, #216]	@ (8006194 <I2C_ITError+0x1fc>)
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2240      	movs	r2, #64	@ 0x40
 80060c0:	2100      	movs	r1, #0
 80060c2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7fe fee1 	bl	8004e90 <HAL_DMA_Abort_IT>
 80060ce:	1e03      	subs	r3, r0, #0
 80060d0:	d051      	beq.n	8006176 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	0018      	movs	r0, r3
 80060de:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060e0:	e049      	b.n	8006176 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f000 f859 	bl	800619c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060ea:	e044      	b.n	8006176 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d03b      	beq.n	800616c <I2C_ITError+0x1d4>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b12      	cmp	r3, #18
 80060f8:	d002      	beq.n	8006100 <I2C_ITError+0x168>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b22      	cmp	r3, #34	@ 0x22
 80060fe:	d135      	bne.n	800616c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	2380      	movs	r3, #128	@ 0x80
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	401a      	ands	r2, r3
 800610c:	2380      	movs	r3, #128	@ 0x80
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	429a      	cmp	r2, r3
 8006112:	d107      	bne.n	8006124 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	491e      	ldr	r1, [pc, #120]	@ (8006198 <I2C_ITError+0x200>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	0018      	movs	r0, r3
 800612a:	f7fe ffcd 	bl	80050c8 <HAL_DMA_GetState>
 800612e:	0003      	movs	r3, r0
 8006130:	2b01      	cmp	r3, #1
 8006132:	d016      	beq.n	8006162 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006138:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <I2C_ITError+0x1fc>)
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2240      	movs	r2, #64	@ 0x40
 8006140:	2100      	movs	r1, #0
 8006142:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006148:	0018      	movs	r0, r3
 800614a:	f7fe fea1 	bl	8004e90 <HAL_DMA_Abort_IT>
 800614e:	1e03      	subs	r3, r0, #0
 8006150:	d013      	beq.n	800617a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615c:	0018      	movs	r0, r3
 800615e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006160:	e00b      	b.n	800617a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	0018      	movs	r0, r3
 8006166:	f000 f819 	bl	800619c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800616a:	e006      	b.n	800617a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	0018      	movs	r0, r3
 8006170:	f000 f814 	bl	800619c <I2C_TreatErrorCallback>
  }
}
 8006174:	e002      	b.n	800617c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	e000      	b.n	800617c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800617a:	46c0      	nop			@ (mov r8, r8)
}
 800617c:	46c0      	nop			@ (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	ffff0000 	.word	0xffff0000
 8006188:	080057c9 	.word	0x080057c9
 800618c:	00008003 	.word	0x00008003
 8006190:	ffffbfff 	.word	0xffffbfff
 8006194:	08006233 	.word	0x08006233
 8006198:	ffff7fff 	.word	0xffff7fff

0800619c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2241      	movs	r2, #65	@ 0x41
 80061a8:	5c9b      	ldrb	r3, [r3, r2]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b60      	cmp	r3, #96	@ 0x60
 80061ae:	d10f      	bne.n	80061d0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2241      	movs	r2, #65	@ 0x41
 80061b4:	2120      	movs	r1, #32
 80061b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2240      	movs	r2, #64	@ 0x40
 80061c2:	2100      	movs	r1, #0
 80061c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7ff faf4 	bl	80057b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ce:	e00a      	b.n	80061e6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2240      	movs	r2, #64	@ 0x40
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f7ff fae0 	bl	80057a6 <HAL_I2C_ErrorCallback>
}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b002      	add	sp, #8
 80061ec:	bd80      	pop	{r7, pc}

080061ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2202      	movs	r2, #2
 80061fe:	4013      	ands	r3, r2
 8006200:	2b02      	cmp	r3, #2
 8006202:	d103      	bne.n	800620c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2201      	movs	r2, #1
 8006214:	4013      	ands	r3, r2
 8006216:	2b01      	cmp	r3, #1
 8006218:	d007      	beq.n	800622a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2101      	movs	r1, #1
 8006226:	430a      	orrs	r2, r1
 8006228:	619a      	str	r2, [r3, #24]
  }
}
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	46bd      	mov	sp, r7
 800622e:	b002      	add	sp, #8
 8006230:	bd80      	pop	{r7, pc}

08006232 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	2200      	movs	r2, #0
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	2200      	movs	r2, #0
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff ff9a 	bl	800619c <I2C_TreatErrorCallback>
}
 8006268:	46c0      	nop			@ (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b004      	add	sp, #16
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	000a      	movs	r2, r1
 800627a:	1cbb      	adds	r3, r7, #2
 800627c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006282:	1cbb      	adds	r3, r7, #2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d010      	beq.n	80062ae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2242      	movs	r2, #66	@ 0x42
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2241      	movs	r2, #65	@ 0x41
 8006298:	5c9b      	ldrb	r3, [r3, r2]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	001a      	movs	r2, r3
 800629e:	2328      	movs	r3, #40	@ 0x28
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b28      	cmp	r3, #40	@ 0x28
 80062a4:	d003      	beq.n	80062ae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	22b0      	movs	r2, #176	@ 0xb0
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	2202      	movs	r2, #2
 80062b4:	4013      	ands	r3, r2
 80062b6:	d010      	beq.n	80062da <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2244      	movs	r2, #68	@ 0x44
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2241      	movs	r2, #65	@ 0x41
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	001a      	movs	r2, r3
 80062ca:	2328      	movs	r3, #40	@ 0x28
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b28      	cmp	r3, #40	@ 0x28
 80062d0:	d003      	beq.n	80062da <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	22b0      	movs	r2, #176	@ 0xb0
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80062da:	1cbb      	adds	r3, r7, #2
 80062dc:	2200      	movs	r2, #0
 80062de:	5e9b      	ldrsh	r3, [r3, r2]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da03      	bge.n	80062ec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	22b8      	movs	r2, #184	@ 0xb8
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80062ec:	1cbb      	adds	r3, r7, #2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d103      	bne.n	80062fc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2290      	movs	r2, #144	@ 0x90
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80062fc:	1cbb      	adds	r3, r7, #2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	2b20      	cmp	r3, #32
 8006302:	d103      	bne.n	800630c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800630c:	1cbb      	adds	r3, r7, #2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d103      	bne.n	800631c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2240      	movs	r2, #64	@ 0x40
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	43d9      	mvns	r1, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	400a      	ands	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b004      	add	sp, #16
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2241      	movs	r2, #65	@ 0x41
 8006346:	5c9b      	ldrb	r3, [r3, r2]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b20      	cmp	r3, #32
 800634c:	d138      	bne.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2240      	movs	r2, #64	@ 0x40
 8006352:	5c9b      	ldrb	r3, [r3, r2]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006358:	2302      	movs	r3, #2
 800635a:	e032      	b.n	80063c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	2101      	movs	r1, #1
 8006362:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2241      	movs	r2, #65	@ 0x41
 8006368:	2124      	movs	r1, #36	@ 0x24
 800636a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2101      	movs	r1, #1
 8006378:	438a      	bics	r2, r1
 800637a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4911      	ldr	r1, [pc, #68]	@ (80063cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006388:	400a      	ands	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2101      	movs	r1, #1
 80063a8:	430a      	orrs	r2, r1
 80063aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2241      	movs	r2, #65	@ 0x41
 80063b0:	2120      	movs	r1, #32
 80063b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2240      	movs	r2, #64	@ 0x40
 80063b8:	2100      	movs	r1, #0
 80063ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
  }
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b002      	add	sp, #8
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	ffffefff 	.word	0xffffefff

080063d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2241      	movs	r2, #65	@ 0x41
 80063de:	5c9b      	ldrb	r3, [r3, r2]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d139      	bne.n	800645a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2240      	movs	r2, #64	@ 0x40
 80063ea:	5c9b      	ldrb	r3, [r3, r2]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e033      	b.n	800645c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2240      	movs	r2, #64	@ 0x40
 80063f8:	2101      	movs	r1, #1
 80063fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2241      	movs	r2, #65	@ 0x41
 8006400:	2124      	movs	r1, #36	@ 0x24
 8006402:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2101      	movs	r1, #1
 8006410:	438a      	bics	r2, r1
 8006412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2241      	movs	r2, #65	@ 0x41
 800644a:	2120      	movs	r1, #32
 800644c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2240      	movs	r2, #64	@ 0x40
 8006452:	2100      	movs	r1, #0
 8006454:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
  }
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b004      	add	sp, #16
 8006462:	bd80      	pop	{r7, pc}
 8006464:	fffff0ff 	.word	0xfffff0ff

08006468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006470:	4b19      	ldr	r3, [pc, #100]	@ (80064d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006476:	4013      	ands	r3, r2
 8006478:	0019      	movs	r1, r3
 800647a:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	2380      	movs	r3, #128	@ 0x80
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	429a      	cmp	r2, r3
 800648a:	d11f      	bne.n	80064cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800648c:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	0013      	movs	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	189b      	adds	r3, r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4912      	ldr	r1, [pc, #72]	@ (80064e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800649a:	0018      	movs	r0, r3
 800649c:	f7f9 fe4c 	bl	8000138 <__udivsi3>
 80064a0:	0003      	movs	r3, r0
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064a6:	e008      	b.n	80064ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e001      	b.n	80064ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e009      	b.n	80064ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064ba:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	401a      	ands	r2, r3
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d0ed      	beq.n	80064a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	0018      	movs	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b004      	add	sp, #16
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	40007000 	.word	0x40007000
 80064dc:	fffff9ff 	.word	0xfffff9ff
 80064e0:	2000000c 	.word	0x2000000c
 80064e4:	000f4240 	.word	0x000f4240

080064e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80064ec:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	23e0      	movs	r3, #224	@ 0xe0
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4013      	ands	r3, r2
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000

08006500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e2f3      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2201      	movs	r2, #1
 8006518:	4013      	ands	r3, r2
 800651a:	d100      	bne.n	800651e <HAL_RCC_OscConfig+0x1e>
 800651c:	e07c      	b.n	8006618 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800651e:	4bc3      	ldr	r3, [pc, #780]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2238      	movs	r2, #56	@ 0x38
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006528:	4bc0      	ldr	r3, [pc, #768]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2203      	movs	r2, #3
 800652e:	4013      	ands	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b10      	cmp	r3, #16
 8006536:	d102      	bne.n	800653e <HAL_RCC_OscConfig+0x3e>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d002      	beq.n	8006544 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d10b      	bne.n	800655c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006544:	4bb9      	ldr	r3, [pc, #740]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	4013      	ands	r3, r2
 800654e:	d062      	beq.n	8006616 <HAL_RCC_OscConfig+0x116>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d15e      	bne.n	8006616 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e2ce      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	025b      	lsls	r3, r3, #9
 8006564:	429a      	cmp	r2, r3
 8006566:	d107      	bne.n	8006578 <HAL_RCC_OscConfig+0x78>
 8006568:	4bb0      	ldr	r3, [pc, #704]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4baf      	ldr	r3, [pc, #700]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800656e:	2180      	movs	r1, #128	@ 0x80
 8006570:	0249      	lsls	r1, r1, #9
 8006572:	430a      	orrs	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e020      	b.n	80065ba <HAL_RCC_OscConfig+0xba>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	23a0      	movs	r3, #160	@ 0xa0
 800657e:	02db      	lsls	r3, r3, #11
 8006580:	429a      	cmp	r2, r3
 8006582:	d10e      	bne.n	80065a2 <HAL_RCC_OscConfig+0xa2>
 8006584:	4ba9      	ldr	r3, [pc, #676]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	4ba8      	ldr	r3, [pc, #672]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	02c9      	lsls	r1, r1, #11
 800658e:	430a      	orrs	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	4ba6      	ldr	r3, [pc, #664]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4ba5      	ldr	r3, [pc, #660]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006598:	2180      	movs	r1, #128	@ 0x80
 800659a:	0249      	lsls	r1, r1, #9
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e00b      	b.n	80065ba <HAL_RCC_OscConfig+0xba>
 80065a2:	4ba2      	ldr	r3, [pc, #648]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4ba1      	ldr	r3, [pc, #644]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80065a8:	49a1      	ldr	r1, [pc, #644]	@ (8006830 <HAL_RCC_OscConfig+0x330>)
 80065aa:	400a      	ands	r2, r1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	4b9f      	ldr	r3, [pc, #636]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b9e      	ldr	r3, [pc, #632]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80065b4:	499f      	ldr	r1, [pc, #636]	@ (8006834 <HAL_RCC_OscConfig+0x334>)
 80065b6:	400a      	ands	r2, r1
 80065b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d014      	beq.n	80065ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7fd fd0f 	bl	8003fe4 <HAL_GetTick>
 80065c6:	0003      	movs	r3, r0
 80065c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fd fd0a 	bl	8003fe4 <HAL_GetTick>
 80065d0:	0002      	movs	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	@ 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e28d      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065de:	4b93      	ldr	r3, [pc, #588]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	4013      	ands	r3, r2
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0xcc>
 80065ea:	e015      	b.n	8006618 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fd fcfa 	bl	8003fe4 <HAL_GetTick>
 80065f0:	0003      	movs	r3, r0
 80065f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f6:	f7fd fcf5 	bl	8003fe4 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b64      	cmp	r3, #100	@ 0x64
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e278      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006608:	4b88      	ldr	r3, [pc, #544]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	2380      	movs	r3, #128	@ 0x80
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	4013      	ands	r3, r2
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCC_OscConfig+0xf6>
 8006614:	e000      	b.n	8006618 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006616:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2202      	movs	r2, #2
 800661e:	4013      	ands	r3, r2
 8006620:	d100      	bne.n	8006624 <HAL_RCC_OscConfig+0x124>
 8006622:	e099      	b.n	8006758 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006624:	4b81      	ldr	r3, [pc, #516]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2238      	movs	r2, #56	@ 0x38
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800662e:	4b7f      	ldr	r3, [pc, #508]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2203      	movs	r2, #3
 8006634:	4013      	ands	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b10      	cmp	r3, #16
 800663c:	d102      	bne.n	8006644 <HAL_RCC_OscConfig+0x144>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d002      	beq.n	800664a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d135      	bne.n	80066b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664a:	4b78      	ldr	r3, [pc, #480]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	2380      	movs	r3, #128	@ 0x80
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4013      	ands	r3, r2
 8006654:	d005      	beq.n	8006662 <HAL_RCC_OscConfig+0x162>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e24b      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b72      	ldr	r3, [pc, #456]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4a74      	ldr	r2, [pc, #464]	@ (8006838 <HAL_RCC_OscConfig+0x338>)
 8006668:	4013      	ands	r3, r2
 800666a:	0019      	movs	r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	4b6e      	ldr	r3, [pc, #440]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d112      	bne.n	80066a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800667e:	4b6b      	ldr	r3, [pc, #428]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a6e      	ldr	r2, [pc, #440]	@ (800683c <HAL_RCC_OscConfig+0x33c>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	4b67      	ldr	r3, [pc, #412]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800668e:	430a      	orrs	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006692:	4b66      	ldr	r3, [pc, #408]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	0adb      	lsrs	r3, r3, #11
 8006698:	2207      	movs	r2, #7
 800669a:	4013      	ands	r3, r2
 800669c:	4a68      	ldr	r2, [pc, #416]	@ (8006840 <HAL_RCC_OscConfig+0x340>)
 800669e:	40da      	lsrs	r2, r3
 80066a0:	4b68      	ldr	r3, [pc, #416]	@ (8006844 <HAL_RCC_OscConfig+0x344>)
 80066a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066a4:	4b68      	ldr	r3, [pc, #416]	@ (8006848 <HAL_RCC_OscConfig+0x348>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f7fd fc3f 	bl	8003f2c <HAL_InitTick>
 80066ae:	1e03      	subs	r3, r0, #0
 80066b0:	d051      	beq.n	8006756 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e221      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d030      	beq.n	8006720 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80066be:	4b5b      	ldr	r3, [pc, #364]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a5e      	ldr	r2, [pc, #376]	@ (800683c <HAL_RCC_OscConfig+0x33c>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	0019      	movs	r1, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	4b57      	ldr	r3, [pc, #348]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80066ce:	430a      	orrs	r2, r1
 80066d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80066d2:	4b56      	ldr	r3, [pc, #344]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b55      	ldr	r3, [pc, #340]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80066d8:	2180      	movs	r1, #128	@ 0x80
 80066da:	0049      	lsls	r1, r1, #1
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fd fc80 	bl	8003fe4 <HAL_GetTick>
 80066e4:	0003      	movs	r3, r0
 80066e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fd fc7b 	bl	8003fe4 <HAL_GetTick>
 80066ee:	0002      	movs	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e1fe      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066fc:	4b4b      	ldr	r3, [pc, #300]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4013      	ands	r3, r2
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006708:	4b48      	ldr	r3, [pc, #288]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a4a      	ldr	r2, [pc, #296]	@ (8006838 <HAL_RCC_OscConfig+0x338>)
 800670e:	4013      	ands	r3, r2
 8006710:	0019      	movs	r1, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	021a      	lsls	r2, r3, #8
 8006718:	4b44      	ldr	r3, [pc, #272]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	e01b      	b.n	8006758 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006720:	4b42      	ldr	r3, [pc, #264]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b41      	ldr	r3, [pc, #260]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006726:	4949      	ldr	r1, [pc, #292]	@ (800684c <HAL_RCC_OscConfig+0x34c>)
 8006728:	400a      	ands	r2, r1
 800672a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fd fc5a 	bl	8003fe4 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006736:	f7fd fc55 	bl	8003fe4 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e1d8      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006748:	4b38      	ldr	r3, [pc, #224]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4013      	ands	r3, r2
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x236>
 8006754:	e000      	b.n	8006758 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006756:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2208      	movs	r2, #8
 800675e:	4013      	ands	r3, r2
 8006760:	d047      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006762:	4b32      	ldr	r3, [pc, #200]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2238      	movs	r2, #56	@ 0x38
 8006768:	4013      	ands	r3, r2
 800676a:	2b18      	cmp	r3, #24
 800676c:	d10a      	bne.n	8006784 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800676e:	4b2f      	ldr	r3, [pc, #188]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006772:	2202      	movs	r2, #2
 8006774:	4013      	ands	r3, r2
 8006776:	d03c      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2f2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d138      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e1ba      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d019      	beq.n	80067c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800678c:	4b27      	ldr	r3, [pc, #156]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 800678e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006790:	4b26      	ldr	r3, [pc, #152]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006792:	2101      	movs	r1, #1
 8006794:	430a      	orrs	r2, r1
 8006796:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fd fc24 	bl	8003fe4 <HAL_GetTick>
 800679c:	0003      	movs	r3, r0
 800679e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a2:	f7fd fc1f 	bl	8003fe4 <HAL_GetTick>
 80067a6:	0002      	movs	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e1a2      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067b4:	4b1d      	ldr	r3, [pc, #116]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80067b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b8:	2202      	movs	r2, #2
 80067ba:	4013      	ands	r3, r2
 80067bc:	d0f1      	beq.n	80067a2 <HAL_RCC_OscConfig+0x2a2>
 80067be:	e018      	b.n	80067f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80067c0:	4b1a      	ldr	r3, [pc, #104]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80067c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80067c6:	2101      	movs	r1, #1
 80067c8:	438a      	bics	r2, r1
 80067ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fd fc0a 	bl	8003fe4 <HAL_GetTick>
 80067d0:	0003      	movs	r3, r0
 80067d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d6:	f7fd fc05 	bl	8003fe4 <HAL_GetTick>
 80067da:	0002      	movs	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e188      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067e8:	4b10      	ldr	r3, [pc, #64]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 80067ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ec:	2202      	movs	r2, #2
 80067ee:	4013      	ands	r3, r2
 80067f0:	d1f1      	bne.n	80067d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2204      	movs	r2, #4
 80067f8:	4013      	ands	r3, r2
 80067fa:	d100      	bne.n	80067fe <HAL_RCC_OscConfig+0x2fe>
 80067fc:	e0c6      	b.n	800698c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067fe:	231f      	movs	r3, #31
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006806:	4b09      	ldr	r3, [pc, #36]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2238      	movs	r2, #56	@ 0x38
 800680c:	4013      	ands	r3, r2
 800680e:	2b20      	cmp	r3, #32
 8006810:	d11e      	bne.n	8006850 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <HAL_RCC_OscConfig+0x32c>)
 8006814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006816:	2202      	movs	r2, #2
 8006818:	4013      	ands	r3, r2
 800681a:	d100      	bne.n	800681e <HAL_RCC_OscConfig+0x31e>
 800681c:	e0b6      	b.n	800698c <HAL_RCC_OscConfig+0x48c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d000      	beq.n	8006828 <HAL_RCC_OscConfig+0x328>
 8006826:	e0b1      	b.n	800698c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e166      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
 800682c:	40021000 	.word	0x40021000
 8006830:	fffeffff 	.word	0xfffeffff
 8006834:	fffbffff 	.word	0xfffbffff
 8006838:	ffff80ff 	.word	0xffff80ff
 800683c:	ffffc7ff 	.word	0xffffc7ff
 8006840:	00f42400 	.word	0x00f42400
 8006844:	2000000c 	.word	0x2000000c
 8006848:	20000010 	.word	0x20000010
 800684c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006850:	4bac      	ldr	r3, [pc, #688]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	055b      	lsls	r3, r3, #21
 8006858:	4013      	ands	r3, r2
 800685a:	d101      	bne.n	8006860 <HAL_RCC_OscConfig+0x360>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <HAL_RCC_OscConfig+0x362>
 8006860:	2300      	movs	r3, #0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006866:	4ba7      	ldr	r3, [pc, #668]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800686a:	4ba6      	ldr	r3, [pc, #664]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 800686c:	2180      	movs	r1, #128	@ 0x80
 800686e:	0549      	lsls	r1, r1, #21
 8006870:	430a      	orrs	r2, r1
 8006872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006874:	4ba3      	ldr	r3, [pc, #652]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	055b      	lsls	r3, r3, #21
 800687c:	4013      	ands	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006882:	231f      	movs	r3, #31
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800688a:	4b9f      	ldr	r3, [pc, #636]	@ (8006b08 <HAL_RCC_OscConfig+0x608>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	2380      	movs	r3, #128	@ 0x80
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4013      	ands	r3, r2
 8006894:	d11a      	bne.n	80068cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006896:	4b9c      	ldr	r3, [pc, #624]	@ (8006b08 <HAL_RCC_OscConfig+0x608>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b9b      	ldr	r3, [pc, #620]	@ (8006b08 <HAL_RCC_OscConfig+0x608>)
 800689c:	2180      	movs	r1, #128	@ 0x80
 800689e:	0049      	lsls	r1, r1, #1
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80068a4:	f7fd fb9e 	bl	8003fe4 <HAL_GetTick>
 80068a8:	0003      	movs	r3, r0
 80068aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ae:	f7fd fb99 	bl	8003fe4 <HAL_GetTick>
 80068b2:	0002      	movs	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e11c      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c0:	4b91      	ldr	r3, [pc, #580]	@ (8006b08 <HAL_RCC_OscConfig+0x608>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	@ 0x80
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	4013      	ands	r3, r2
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d106      	bne.n	80068e2 <HAL_RCC_OscConfig+0x3e2>
 80068d4:	4b8b      	ldr	r3, [pc, #556]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068d8:	4b8a      	ldr	r3, [pc, #552]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068da:	2101      	movs	r1, #1
 80068dc:	430a      	orrs	r2, r1
 80068de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068e0:	e01c      	b.n	800691c <HAL_RCC_OscConfig+0x41c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0x404>
 80068ea:	4b86      	ldr	r3, [pc, #536]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068ee:	4b85      	ldr	r3, [pc, #532]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068f0:	2104      	movs	r1, #4
 80068f2:	430a      	orrs	r2, r1
 80068f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068f6:	4b83      	ldr	r3, [pc, #524]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068fa:	4b82      	ldr	r3, [pc, #520]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80068fc:	2101      	movs	r1, #1
 80068fe:	430a      	orrs	r2, r1
 8006900:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0x41c>
 8006904:	4b7f      	ldr	r3, [pc, #508]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006906:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006908:	4b7e      	ldr	r3, [pc, #504]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 800690a:	2101      	movs	r1, #1
 800690c:	438a      	bics	r2, r1
 800690e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006910:	4b7c      	ldr	r3, [pc, #496]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006912:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006914:	4b7b      	ldr	r3, [pc, #492]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006916:	2104      	movs	r1, #4
 8006918:	438a      	bics	r2, r1
 800691a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d014      	beq.n	800694e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fd fb5e 	bl	8003fe4 <HAL_GetTick>
 8006928:	0003      	movs	r3, r0
 800692a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692c:	e009      	b.n	8006942 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fd fb59 	bl	8003fe4 <HAL_GetTick>
 8006932:	0002      	movs	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	4a74      	ldr	r2, [pc, #464]	@ (8006b0c <HAL_RCC_OscConfig+0x60c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e0db      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006942:	4b70      	ldr	r3, [pc, #448]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006946:	2202      	movs	r2, #2
 8006948:	4013      	ands	r3, r2
 800694a:	d0f0      	beq.n	800692e <HAL_RCC_OscConfig+0x42e>
 800694c:	e013      	b.n	8006976 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fd fb49 	bl	8003fe4 <HAL_GetTick>
 8006952:	0003      	movs	r3, r0
 8006954:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006956:	e009      	b.n	800696c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fd fb44 	bl	8003fe4 <HAL_GetTick>
 800695c:	0002      	movs	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a6a      	ldr	r2, [pc, #424]	@ (8006b0c <HAL_RCC_OscConfig+0x60c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e0c6      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800696c:	4b65      	ldr	r3, [pc, #404]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 800696e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006970:	2202      	movs	r2, #2
 8006972:	4013      	ands	r3, r2
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006976:	231f      	movs	r3, #31
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d105      	bne.n	800698c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006980:	4b60      	ldr	r3, [pc, #384]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006984:	4b5f      	ldr	r3, [pc, #380]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006986:	4962      	ldr	r1, [pc, #392]	@ (8006b10 <HAL_RCC_OscConfig+0x610>)
 8006988:	400a      	ands	r2, r1
 800698a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d100      	bne.n	8006996 <HAL_RCC_OscConfig+0x496>
 8006994:	e0b0      	b.n	8006af8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006996:	4b5b      	ldr	r3, [pc, #364]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2238      	movs	r2, #56	@ 0x38
 800699c:	4013      	ands	r3, r2
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d100      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4a4>
 80069a2:	e078      	b.n	8006a96 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d153      	bne.n	8006a54 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ac:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b54      	ldr	r3, [pc, #336]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80069b2:	4958      	ldr	r1, [pc, #352]	@ (8006b14 <HAL_RCC_OscConfig+0x614>)
 80069b4:	400a      	ands	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fd fb14 	bl	8003fe4 <HAL_GetTick>
 80069bc:	0003      	movs	r3, r0
 80069be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fd fb0f 	bl	8003fe4 <HAL_GetTick>
 80069c6:	0002      	movs	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e092      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	2380      	movs	r3, #128	@ 0x80
 80069da:	049b      	lsls	r3, r3, #18
 80069dc:	4013      	ands	r3, r2
 80069de:	d1f0      	bne.n	80069c2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e0:	4b48      	ldr	r3, [pc, #288]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006b18 <HAL_RCC_OscConfig+0x618>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	431a      	orrs	r2, r3
 8006a08:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b3c      	ldr	r3, [pc, #240]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a14:	2180      	movs	r1, #128	@ 0x80
 8006a16:	0449      	lsls	r1, r1, #17
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006a1c:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	4b38      	ldr	r3, [pc, #224]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a22:	2180      	movs	r1, #128	@ 0x80
 8006a24:	0549      	lsls	r1, r1, #21
 8006a26:	430a      	orrs	r2, r1
 8006a28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2a:	f7fd fadb 	bl	8003fe4 <HAL_GetTick>
 8006a2e:	0003      	movs	r3, r0
 8006a30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fd fad6 	bl	8003fe4 <HAL_GetTick>
 8006a38:	0002      	movs	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e059      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a46:	4b2f      	ldr	r3, [pc, #188]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	2380      	movs	r3, #128	@ 0x80
 8006a4c:	049b      	lsls	r3, r3, #18
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x534>
 8006a52:	e051      	b.n	8006af8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a54:	4b2b      	ldr	r3, [pc, #172]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4b2a      	ldr	r3, [pc, #168]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a5a:	492e      	ldr	r1, [pc, #184]	@ (8006b14 <HAL_RCC_OscConfig+0x614>)
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fd fac0 	bl	8003fe4 <HAL_GetTick>
 8006a64:	0003      	movs	r3, r0
 8006a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6a:	f7fd fabb 	bl	8003fe4 <HAL_GetTick>
 8006a6e:	0002      	movs	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e03e      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7c:	4b21      	ldr	r3, [pc, #132]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	2380      	movs	r3, #128	@ 0x80
 8006a82:	049b      	lsls	r3, r3, #18
 8006a84:	4013      	ands	r3, r2
 8006a86:	d1f0      	bne.n	8006a6a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006a88:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006a8e:	4923      	ldr	r1, [pc, #140]	@ (8006b1c <HAL_RCC_OscConfig+0x61c>)
 8006a90:	400a      	ands	r2, r1
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e030      	b.n	8006af8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02b      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006aa2:	4b18      	ldr	r3, [pc, #96]	@ (8006b04 <HAL_RCC_OscConfig+0x604>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	401a      	ands	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d11e      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2270      	movs	r2, #112	@ 0x70
 8006aba:	401a      	ands	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d117      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	23fe      	movs	r3, #254	@ 0xfe
 8006ac8:	01db      	lsls	r3, r3, #7
 8006aca:	401a      	ands	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d10e      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	23f8      	movs	r3, #248	@ 0xf8
 8006ada:	039b      	lsls	r3, r3, #14
 8006adc:	401a      	ands	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	0f5b      	lsrs	r3, r3, #29
 8006aea:	075a      	lsls	r2, r3, #29
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	0018      	movs	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b008      	add	sp, #32
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	40021000 	.word	0x40021000
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	00001388 	.word	0x00001388
 8006b10:	efffffff 	.word	0xefffffff
 8006b14:	feffffff 	.word	0xfeffffff
 8006b18:	1fc1808c 	.word	0x1fc1808c
 8006b1c:	effefffc 	.word	0xeffefffc

08006b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0e9      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b34:	4b76      	ldr	r3, [pc, #472]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2207      	movs	r2, #7
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d91e      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b42:	4b73      	ldr	r3, [pc, #460]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2207      	movs	r2, #7
 8006b48:	4393      	bics	r3, r2
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	4b70      	ldr	r3, [pc, #448]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b54:	f7fd fa46 	bl	8003fe4 <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b5c:	e009      	b.n	8006b72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5e:	f7fd fa41 	bl	8003fe4 <HAL_GetTick>
 8006b62:	0002      	movs	r2, r0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	4a6a      	ldr	r2, [pc, #424]	@ (8006d14 <HAL_RCC_ClockConfig+0x1f4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e0ca      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b72:	4b67      	ldr	r3, [pc, #412]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2207      	movs	r2, #7
 8006b78:	4013      	ands	r3, r2
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d1ee      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2202      	movs	r2, #2
 8006b86:	4013      	ands	r3, r2
 8006b88:	d015      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	4013      	ands	r3, r2
 8006b92:	d006      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b94:	4b60      	ldr	r3, [pc, #384]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	4b5f      	ldr	r3, [pc, #380]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006b9a:	21e0      	movs	r1, #224	@ 0xe0
 8006b9c:	01c9      	lsls	r1, r1, #7
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8006d1c <HAL_RCC_ClockConfig+0x1fc>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	4b59      	ldr	r3, [pc, #356]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d057      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bc8:	4b53      	ldr	r3, [pc, #332]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	2380      	movs	r3, #128	@ 0x80
 8006bce:	029b      	lsls	r3, r3, #10
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d12b      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e097      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be0:	4b4d      	ldr	r3, [pc, #308]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	2380      	movs	r3, #128	@ 0x80
 8006be6:	049b      	lsls	r3, r3, #18
 8006be8:	4013      	ands	r3, r2
 8006bea:	d11f      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e08b      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bf8:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4013      	ands	r3, r2
 8006c02:	d113      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e07f      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c10:	4b41      	ldr	r3, [pc, #260]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c14:	2202      	movs	r2, #2
 8006c16:	4013      	ands	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e074      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c22:	2202      	movs	r2, #2
 8006c24:	4013      	ands	r3, r2
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e06d      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2207      	movs	r2, #7
 8006c32:	4393      	bics	r3, r2
 8006c34:	0019      	movs	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4b37      	ldr	r3, [pc, #220]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c40:	f7fd f9d0 	bl	8003fe4 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c48:	e009      	b.n	8006c5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4a:	f7fd f9cb 	bl	8003fe4 <HAL_GetTick>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	4a2f      	ldr	r2, [pc, #188]	@ (8006d14 <HAL_RCC_ClockConfig+0x1f4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e054      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2238      	movs	r2, #56	@ 0x38
 8006c64:	401a      	ands	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d1ec      	bne.n	8006c4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c70:	4b27      	ldr	r3, [pc, #156]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2207      	movs	r2, #7
 8006c76:	4013      	ands	r3, r2
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d21e      	bcs.n	8006cbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7e:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2207      	movs	r2, #7
 8006c84:	4393      	bics	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	4b21      	ldr	r3, [pc, #132]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c90:	f7fd f9a8 	bl	8003fe4 <HAL_GetTick>
 8006c94:	0003      	movs	r3, r0
 8006c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c98:	e009      	b.n	8006cae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c9a:	f7fd f9a3 	bl	8003fe4 <HAL_GetTick>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <HAL_RCC_ClockConfig+0x1f4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e02c      	b.n	8006d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006cae:	4b18      	ldr	r3, [pc, #96]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d1ee      	bne.n	8006c9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc6:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	4a15      	ldr	r2, [pc, #84]	@ (8006d20 <HAL_RCC_ClockConfig+0x200>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	4b10      	ldr	r3, [pc, #64]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006cda:	f000 f829 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006cde:	0001      	movs	r1, r0
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f8>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	220f      	movs	r2, #15
 8006ce8:	401a      	ands	r2, r3
 8006cea:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <HAL_RCC_ClockConfig+0x204>)
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	58d3      	ldr	r3, [r2, r3]
 8006cf0:	221f      	movs	r2, #31
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	000a      	movs	r2, r1
 8006cf6:	40da      	lsrs	r2, r3
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <HAL_RCC_ClockConfig+0x208>)
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d2c <HAL_RCC_ClockConfig+0x20c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7fd f913 	bl	8003f2c <HAL_InitTick>
 8006d06:	0003      	movs	r3, r0
}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b004      	add	sp, #16
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40022000 	.word	0x40022000
 8006d14:	00001388 	.word	0x00001388
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	fffff0ff 	.word	0xfffff0ff
 8006d20:	ffff8fff 	.word	0xffff8fff
 8006d24:	0800aaa8 	.word	0x0800aaa8
 8006d28:	2000000c 	.word	0x2000000c
 8006d2c:	20000010 	.word	0x20000010

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d36:	4b3c      	ldr	r3, [pc, #240]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2238      	movs	r2, #56	@ 0x38
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d10f      	bne.n	8006d60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006d40:	4b39      	ldr	r3, [pc, #228]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0adb      	lsrs	r3, r3, #11
 8006d46:	2207      	movs	r2, #7
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	409a      	lsls	r2, r3
 8006d4e:	0013      	movs	r3, r2
 8006d50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	4835      	ldr	r0, [pc, #212]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d56:	f7f9 f9ef 	bl	8000138 <__udivsi3>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e05d      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d60:	4b31      	ldr	r3, [pc, #196]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2238      	movs	r2, #56	@ 0x38
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d102      	bne.n	8006d72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d6c:	4b30      	ldr	r3, [pc, #192]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	e054      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d72:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2238      	movs	r2, #56	@ 0x38
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d138      	bne.n	8006df0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d88:	4b27      	ldr	r3, [pc, #156]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	2207      	movs	r2, #7
 8006d90:	4013      	ands	r3, r2
 8006d92:	3301      	adds	r3, #1
 8006d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d10d      	bne.n	8006db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	4824      	ldr	r0, [pc, #144]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8006da0:	f7f9 f9ca 	bl	8000138 <__udivsi3>
 8006da4:	0003      	movs	r3, r0
 8006da6:	0019      	movs	r1, r3
 8006da8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	0a1b      	lsrs	r3, r3, #8
 8006dae:	227f      	movs	r2, #127	@ 0x7f
 8006db0:	4013      	ands	r3, r2
 8006db2:	434b      	muls	r3, r1
 8006db4:	617b      	str	r3, [r7, #20]
        break;
 8006db6:	e00d      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	481c      	ldr	r0, [pc, #112]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006dbc:	f7f9 f9bc 	bl	8000138 <__udivsi3>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	4b18      	ldr	r3, [pc, #96]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	227f      	movs	r2, #127	@ 0x7f
 8006dcc:	4013      	ands	r3, r2
 8006dce:	434b      	muls	r3, r1
 8006dd0:	617b      	str	r3, [r7, #20]
        break;
 8006dd2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	0f5b      	lsrs	r3, r3, #29
 8006dda:	2207      	movs	r2, #7
 8006ddc:	4013      	ands	r3, r2
 8006dde:	3301      	adds	r3, #1
 8006de0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	6978      	ldr	r0, [r7, #20]
 8006de6:	f7f9 f9a7 	bl	8000138 <__udivsi3>
 8006dea:	0003      	movs	r3, r0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e015      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006df0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2238      	movs	r2, #56	@ 0x38
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d103      	bne.n	8006e04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006dfc:	2380      	movs	r3, #128	@ 0x80
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e00b      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006e04:	4b08      	ldr	r3, [pc, #32]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2238      	movs	r2, #56	@ 0x38
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b18      	cmp	r3, #24
 8006e0e:	d103      	bne.n	8006e18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006e10:	23fa      	movs	r3, #250	@ 0xfa
 8006e12:	01db      	lsls	r3, r3, #7
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e001      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e1c:	693b      	ldr	r3, [r7, #16]
}
 8006e1e:	0018      	movs	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b006      	add	sp, #24
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	007a1200 	.word	0x007a1200

08006e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e38:	4b02      	ldr	r3, [pc, #8]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			@ (mov r8, r8)
 8006e44:	2000000c 	.word	0x2000000c

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b5b0      	push	{r4, r5, r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e4c:	f7ff fff2 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e50:	0004      	movs	r4, r0
 8006e52:	f7ff fb49 	bl	80064e8 <LL_RCC_GetAPB1Prescaler>
 8006e56:	0003      	movs	r3, r0
 8006e58:	0b1a      	lsrs	r2, r3, #12
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e5c:	0092      	lsls	r2, r2, #2
 8006e5e:	58d3      	ldr	r3, [r2, r3]
 8006e60:	221f      	movs	r2, #31
 8006e62:	4013      	ands	r3, r2
 8006e64:	40dc      	lsrs	r4, r3
 8006e66:	0023      	movs	r3, r4
}
 8006e68:	0018      	movs	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	0800aae8 	.word	0x0800aae8

08006e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006e7c:	2313      	movs	r3, #19
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e84:	2312      	movs	r3, #18
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	029b      	lsls	r3, r3, #10
 8006e94:	4013      	ands	r3, r2
 8006e96:	d100      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006e98:	e0a3      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9a:	2011      	movs	r0, #17
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea2:	4b86      	ldr	r3, [pc, #536]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ea6:	2380      	movs	r3, #128	@ 0x80
 8006ea8:	055b      	lsls	r3, r3, #21
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d110      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eae:	4b83      	ldr	r3, [pc, #524]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb2:	4b82      	ldr	r3, [pc, #520]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006eb4:	2180      	movs	r1, #128	@ 0x80
 8006eb6:	0549      	lsls	r1, r1, #21
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ebc:	4b7f      	ldr	r3, [pc, #508]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ec0:	2380      	movs	r3, #128	@ 0x80
 8006ec2:	055b      	lsls	r3, r3, #21
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eca:	183b      	adds	r3, r7, r0
 8006ecc:	2201      	movs	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ed6:	2180      	movs	r1, #128	@ 0x80
 8006ed8:	0049      	lsls	r1, r1, #1
 8006eda:	430a      	orrs	r2, r1
 8006edc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ede:	f7fd f881 	bl	8003fe4 <HAL_GetTick>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee6:	e00b      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee8:	f7fd f87c 	bl	8003fe4 <HAL_GetTick>
 8006eec:	0002      	movs	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d904      	bls.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006ef6:	2313      	movs	r3, #19
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	2203      	movs	r2, #3
 8006efc:	701a      	strb	r2, [r3, #0]
        break;
 8006efe:	e005      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f00:	4b6f      	ldr	r3, [pc, #444]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d0ed      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006f0c:	2313      	movs	r3, #19
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d154      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f16:	4b69      	ldr	r3, [pc, #420]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f1a:	23c0      	movs	r3, #192	@ 0xc0
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4013      	ands	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d019      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d014      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f32:	4b62      	ldr	r3, [pc, #392]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f36:	4a63      	ldr	r2, [pc, #396]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f40:	4b5e      	ldr	r3, [pc, #376]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f42:	2180      	movs	r1, #128	@ 0x80
 8006f44:	0249      	lsls	r1, r1, #9
 8006f46:	430a      	orrs	r2, r1
 8006f48:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f50:	495d      	ldr	r1, [pc, #372]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f52:	400a      	ands	r2, r1
 8006f54:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f56:	4b59      	ldr	r3, [pc, #356]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4013      	ands	r3, r2
 8006f62:	d016      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fd f83e 	bl	8003fe4 <HAL_GetTick>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6c:	e00c      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f6e:	f7fd f839 	bl	8003fe4 <HAL_GetTick>
 8006f72:	0002      	movs	r2, r0
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	4a54      	ldr	r2, [pc, #336]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d904      	bls.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006f7e:	2313      	movs	r3, #19
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
            break;
 8006f86:	e004      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f88:	4b4c      	ldr	r3, [pc, #304]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d0ed      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006f92:	2313      	movs	r3, #19
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f9c:	4b47      	ldr	r3, [pc, #284]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa0:	4a48      	ldr	r2, [pc, #288]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	4b44      	ldr	r3, [pc, #272]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fac:	430a      	orrs	r2, r1
 8006fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006fb0:	e00c      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fb2:	2312      	movs	r3, #18
 8006fb4:	18fb      	adds	r3, r7, r3
 8006fb6:	2213      	movs	r2, #19
 8006fb8:	18ba      	adds	r2, r7, r2
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e005      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	2312      	movs	r3, #18
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	2213      	movs	r2, #19
 8006fc6:	18ba      	adds	r2, r7, r2
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fcc:	2311      	movs	r3, #17
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d105      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd6:	4b39      	ldr	r3, [pc, #228]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fda:	4b38      	ldr	r3, [pc, #224]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fdc:	493c      	ldr	r1, [pc, #240]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006fde:	400a      	ands	r2, r1
 8006fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fec:	4b33      	ldr	r3, [pc, #204]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	4393      	bics	r3, r2
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b30      	ldr	r3, [pc, #192]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2202      	movs	r2, #2
 8007006:	4013      	ands	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800700a:	4b2c      	ldr	r3, [pc, #176]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	220c      	movs	r2, #12
 8007010:	4393      	bics	r3, r2
 8007012:	0019      	movs	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	4b28      	ldr	r3, [pc, #160]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800701a:	430a      	orrs	r2, r1
 800701c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2220      	movs	r2, #32
 8007024:	4013      	ands	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007028:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800702a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702c:	4a29      	ldr	r2, [pc, #164]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702e:	4013      	ands	r3, r2
 8007030:	0019      	movs	r1, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	4b21      	ldr	r3, [pc, #132]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007038:	430a      	orrs	r2, r1
 800703a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	2380      	movs	r3, #128	@ 0x80
 8007042:	01db      	lsls	r3, r3, #7
 8007044:	4013      	ands	r3, r2
 8007046:	d015      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007048:	4b1c      	ldr	r3, [pc, #112]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800704a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	0899      	lsrs	r1, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007056:	430a      	orrs	r2, r1
 8007058:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	2380      	movs	r3, #128	@ 0x80
 8007060:	05db      	lsls	r3, r3, #23
 8007062:	429a      	cmp	r2, r3
 8007064:	d106      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007066:	4b15      	ldr	r3, [pc, #84]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	4b14      	ldr	r3, [pc, #80]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800706c:	2180      	movs	r1, #128	@ 0x80
 800706e:	0249      	lsls	r1, r1, #9
 8007070:	430a      	orrs	r2, r1
 8007072:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4013      	ands	r3, r2
 800707e:	d016      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007080:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007084:	4a14      	ldr	r2, [pc, #80]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007086:	4013      	ands	r3, r2
 8007088:	0019      	movs	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007090:	430a      	orrs	r2, r1
 8007092:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	2380      	movs	r3, #128	@ 0x80
 800709a:	01db      	lsls	r3, r3, #7
 800709c:	429a      	cmp	r2, r3
 800709e:	d106      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070a6:	2180      	movs	r1, #128	@ 0x80
 80070a8:	0249      	lsls	r1, r1, #9
 80070aa:	430a      	orrs	r2, r1
 80070ac:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80070ae:	2312      	movs	r3, #18
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
}
 80070b4:	0018      	movs	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	b006      	add	sp, #24
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40007000 	.word	0x40007000
 80070c4:	fffffcff 	.word	0xfffffcff
 80070c8:	fffeffff 	.word	0xfffeffff
 80070cc:	00001388 	.word	0x00001388
 80070d0:	efffffff 	.word	0xefffffff
 80070d4:	ffffcfff 	.word	0xffffcfff
 80070d8:	ffff3fff 	.word	0xffff3fff

080070dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e0a8      	b.n	8007240 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	2382      	movs	r3, #130	@ 0x82
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	429a      	cmp	r2, r3
 8007100:	d009      	beq.n	8007116 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	61da      	str	r2, [r3, #28]
 8007108:	e005      	b.n	8007116 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	225d      	movs	r2, #93	@ 0x5d
 8007120:	5c9b      	ldrb	r3, [r3, r2]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	225c      	movs	r2, #92	@ 0x5c
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0018      	movs	r0, r3
 8007134:	f7fc fc88 	bl	8003a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	225d      	movs	r2, #93	@ 0x5d
 800713c:	2102      	movs	r1, #2
 800713e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2140      	movs	r1, #64	@ 0x40
 800714c:	438a      	bics	r2, r1
 800714e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	23e0      	movs	r3, #224	@ 0xe0
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	429a      	cmp	r2, r3
 800715a:	d902      	bls.n	8007162 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e002      	b.n	8007168 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007162:	2380      	movs	r3, #128	@ 0x80
 8007164:	015b      	lsls	r3, r3, #5
 8007166:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	23f0      	movs	r3, #240	@ 0xf0
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	429a      	cmp	r2, r3
 8007172:	d008      	beq.n	8007186 <HAL_SPI_Init+0xaa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	23e0      	movs	r3, #224	@ 0xe0
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	429a      	cmp	r2, r3
 800717e:	d002      	beq.n	8007186 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	2382      	movs	r3, #130	@ 0x82
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	401a      	ands	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6899      	ldr	r1, [r3, #8]
 8007194:	2384      	movs	r3, #132	@ 0x84
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	400b      	ands	r3, r1
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2102      	movs	r1, #2
 80071a2:	400b      	ands	r3, r1
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	2101      	movs	r1, #1
 80071ac:	400b      	ands	r3, r1
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6999      	ldr	r1, [r3, #24]
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	400b      	ands	r3, r1
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	2138      	movs	r1, #56	@ 0x38
 80071c2:	400b      	ands	r3, r1
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	2180      	movs	r1, #128	@ 0x80
 80071cc:	400b      	ands	r3, r1
 80071ce:	431a      	orrs	r2, r3
 80071d0:	0011      	movs	r1, r2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071d6:	2380      	movs	r3, #128	@ 0x80
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	401a      	ands	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	2204      	movs	r2, #4
 80071ec:	401a      	ands	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	2110      	movs	r1, #16
 80071f4:	400b      	ands	r3, r1
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fc:	2108      	movs	r1, #8
 80071fe:	400b      	ands	r3, r1
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68d9      	ldr	r1, [r3, #12]
 8007206:	23f0      	movs	r3, #240	@ 0xf0
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	400b      	ands	r3, r1
 800720c:	431a      	orrs	r2, r3
 800720e:	0011      	movs	r1, r2
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	2380      	movs	r3, #128	@ 0x80
 8007214:	015b      	lsls	r3, r3, #5
 8007216:	401a      	ands	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69da      	ldr	r2, [r3, #28]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4907      	ldr	r1, [pc, #28]	@ (8007248 <HAL_SPI_Init+0x16c>)
 800722c:	400a      	ands	r2, r1
 800722e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	225d      	movs	r2, #93	@ 0x5d
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	0018      	movs	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	b004      	add	sp, #16
 8007246:	bd80      	pop	{r7, pc}
 8007248:	fffff7ff 	.word	0xfffff7ff

0800724c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e04a      	b.n	80072f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	223d      	movs	r2, #61	@ 0x3d
 8007262:	5c9b      	ldrb	r3, [r3, r2]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d107      	bne.n	800727a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	223c      	movs	r2, #60	@ 0x3c
 800726e:	2100      	movs	r1, #0
 8007270:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0018      	movs	r0, r3
 8007276:	f7fc fc55 	bl	8003b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	223d      	movs	r2, #61	@ 0x3d
 800727e:	2102      	movs	r1, #2
 8007280:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	0019      	movs	r1, r3
 800728c:	0010      	movs	r0, r2
 800728e:	f000 f9b3 	bl	80075f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2248      	movs	r2, #72	@ 0x48
 8007296:	2101      	movs	r1, #1
 8007298:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223e      	movs	r2, #62	@ 0x3e
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	223f      	movs	r2, #63	@ 0x3f
 80072a6:	2101      	movs	r1, #1
 80072a8:	5499      	strb	r1, [r3, r2]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2240      	movs	r2, #64	@ 0x40
 80072ae:	2101      	movs	r1, #1
 80072b0:	5499      	strb	r1, [r3, r2]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2241      	movs	r2, #65	@ 0x41
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2242      	movs	r2, #66	@ 0x42
 80072be:	2101      	movs	r1, #1
 80072c0:	5499      	strb	r1, [r3, r2]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2243      	movs	r2, #67	@ 0x43
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2244      	movs	r2, #68	@ 0x44
 80072ce:	2101      	movs	r1, #1
 80072d0:	5499      	strb	r1, [r3, r2]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2245      	movs	r2, #69	@ 0x45
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2246      	movs	r2, #70	@ 0x46
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2247      	movs	r2, #71	@ 0x47
 80072e6:	2101      	movs	r1, #1
 80072e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	223d      	movs	r2, #61	@ 0x3d
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	0018      	movs	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	b002      	add	sp, #8
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	223d      	movs	r2, #61	@ 0x3d
 8007308:	5c9b      	ldrb	r3, [r3, r2]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e03c      	b.n	800738e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	223d      	movs	r2, #61	@ 0x3d
 8007318:	2102      	movs	r1, #2
 800731a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2101      	movs	r1, #1
 8007328:	430a      	orrs	r2, r1
 800732a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a19      	ldr	r2, [pc, #100]	@ (8007398 <HAL_TIM_Base_Start_IT+0x9c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d009      	beq.n	800734a <HAL_TIM_Base_Start_IT+0x4e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a18      	ldr	r2, [pc, #96]	@ (800739c <HAL_TIM_Base_Start_IT+0xa0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d004      	beq.n	800734a <HAL_TIM_Base_Start_IT+0x4e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a16      	ldr	r2, [pc, #88]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d116      	bne.n	8007378 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	4a14      	ldr	r2, [pc, #80]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8007352:	4013      	ands	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b06      	cmp	r3, #6
 800735a:	d016      	beq.n	800738a <HAL_TIM_Base_Start_IT+0x8e>
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	2380      	movs	r3, #128	@ 0x80
 8007360:	025b      	lsls	r3, r3, #9
 8007362:	429a      	cmp	r2, r3
 8007364:	d011      	beq.n	800738a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2101      	movs	r1, #1
 8007372:	430a      	orrs	r2, r1
 8007374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007376:	e008      	b.n	800738a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2101      	movs	r1, #1
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e000      	b.n	800738c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b004      	add	sp, #16
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40000400 	.word	0x40000400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	00010007 	.word	0x00010007

080073a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2202      	movs	r2, #2
 80073c4:	4013      	ands	r3, r2
 80073c6:	d021      	beq.n	800740c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2202      	movs	r2, #2
 80073cc:	4013      	ands	r3, r2
 80073ce:	d01d      	beq.n	800740c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2203      	movs	r2, #3
 80073d6:	4252      	negs	r2, r2
 80073d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2203      	movs	r2, #3
 80073e8:	4013      	ands	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 f8ea 	bl	80075c8 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e007      	b.n	8007406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 f8dd 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0018      	movs	r0, r3
 8007402:	f000 f8e9 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2204      	movs	r2, #4
 8007410:	4013      	ands	r3, r2
 8007412:	d022      	beq.n	800745a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2204      	movs	r2, #4
 8007418:	4013      	ands	r3, r2
 800741a:	d01e      	beq.n	800745a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2205      	movs	r2, #5
 8007422:	4252      	negs	r2, r2
 8007424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	23c0      	movs	r3, #192	@ 0xc0
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4013      	ands	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f000 f8c3 	bl	80075c8 <HAL_TIM_IC_CaptureCallback>
 8007442:	e007      	b.n	8007454 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 f8b6 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0018      	movs	r0, r3
 8007450:	f000 f8c2 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2208      	movs	r2, #8
 800745e:	4013      	ands	r3, r2
 8007460:	d021      	beq.n	80074a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2208      	movs	r2, #8
 8007466:	4013      	ands	r3, r2
 8007468:	d01d      	beq.n	80074a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2209      	movs	r2, #9
 8007470:	4252      	negs	r2, r2
 8007472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2203      	movs	r2, #3
 8007482:	4013      	ands	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	0018      	movs	r0, r3
 800748a:	f000 f89d 	bl	80075c8 <HAL_TIM_IC_CaptureCallback>
 800748e:	e007      	b.n	80074a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f890 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	0018      	movs	r0, r3
 800749c:	f000 f89c 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2210      	movs	r2, #16
 80074aa:	4013      	ands	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2210      	movs	r2, #16
 80074b2:	4013      	ands	r3, r2
 80074b4:	d01e      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2211      	movs	r2, #17
 80074bc:	4252      	negs	r2, r2
 80074be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2208      	movs	r2, #8
 80074c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	23c0      	movs	r3, #192	@ 0xc0
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4013      	ands	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 f876 	bl	80075c8 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e007      	b.n	80074ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 f869 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	0018      	movs	r0, r3
 80074ea:	f000 f875 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2201      	movs	r2, #1
 80074f8:	4013      	ands	r3, r2
 80074fa:	d00c      	beq.n	8007516 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	4013      	ands	r3, r2
 8007502:	d008      	beq.n	8007516 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2202      	movs	r2, #2
 800750a:	4252      	negs	r2, r2
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	0018      	movs	r0, r3
 8007512:	f7fb fb0d 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2280      	movs	r2, #128	@ 0x80
 800751a:	4013      	ands	r3, r2
 800751c:	d104      	bne.n	8007528 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	2380      	movs	r3, #128	@ 0x80
 8007522:	019b      	lsls	r3, r3, #6
 8007524:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007526:	d00b      	beq.n	8007540 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2280      	movs	r2, #128	@ 0x80
 800752c:	4013      	ands	r3, r2
 800752e:	d007      	beq.n	8007540 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1e      	ldr	r2, [pc, #120]	@ (80075b0 <HAL_TIM_IRQHandler+0x208>)
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0018      	movs	r0, r3
 800753c:	f000 f8e8 	bl	8007710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	2380      	movs	r3, #128	@ 0x80
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4013      	ands	r3, r2
 8007548:	d00b      	beq.n	8007562 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2280      	movs	r2, #128	@ 0x80
 800754e:	4013      	ands	r3, r2
 8007550:	d007      	beq.n	8007562 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a17      	ldr	r2, [pc, #92]	@ (80075b4 <HAL_TIM_IRQHandler+0x20c>)
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	0018      	movs	r0, r3
 800755e:	f000 f8df 	bl	8007720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2240      	movs	r2, #64	@ 0x40
 8007566:	4013      	ands	r3, r2
 8007568:	d00c      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2240      	movs	r2, #64	@ 0x40
 800756e:	4013      	ands	r3, r2
 8007570:	d008      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2241      	movs	r2, #65	@ 0x41
 8007578:	4252      	negs	r2, r2
 800757a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	0018      	movs	r0, r3
 8007580:	f000 f832 	bl	80075e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2220      	movs	r2, #32
 8007588:	4013      	ands	r3, r2
 800758a:	d00c      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	4013      	ands	r3, r2
 8007592:	d008      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2221      	movs	r2, #33	@ 0x21
 800759a:	4252      	negs	r2, r2
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	0018      	movs	r0, r3
 80075a2:	f000 f8ad 	bl	8007700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b004      	add	sp, #16
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	ffffdf7f 	.word	0xffffdf7f
 80075b4:	fffffeff 	.word	0xfffffeff

080075b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c0:	46c0      	nop			@ (mov r8, r8)
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b002      	add	sp, #8
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075d0:	46c0      	nop			@ (mov r8, r8)
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b002      	add	sp, #8
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b002      	add	sp, #8
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f0:	46c0      	nop			@ (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a36      	ldr	r2, [pc, #216]	@ (80076e4 <TIM_Base_SetConfig+0xec>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0x20>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a35      	ldr	r2, [pc, #212]	@ (80076e8 <TIM_Base_SetConfig+0xf0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2270      	movs	r2, #112	@ 0x70
 800761c:	4393      	bics	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2d      	ldr	r2, [pc, #180]	@ (80076e4 <TIM_Base_SetConfig+0xec>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <TIM_Base_SetConfig+0x62>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2c      	ldr	r2, [pc, #176]	@ (80076e8 <TIM_Base_SetConfig+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00f      	beq.n	800765a <TIM_Base_SetConfig+0x62>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2b      	ldr	r2, [pc, #172]	@ (80076ec <TIM_Base_SetConfig+0xf4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00b      	beq.n	800765a <TIM_Base_SetConfig+0x62>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2a      	ldr	r2, [pc, #168]	@ (80076f0 <TIM_Base_SetConfig+0xf8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d007      	beq.n	800765a <TIM_Base_SetConfig+0x62>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a29      	ldr	r2, [pc, #164]	@ (80076f4 <TIM_Base_SetConfig+0xfc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_Base_SetConfig+0x62>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a28      	ldr	r2, [pc, #160]	@ (80076f8 <TIM_Base_SetConfig+0x100>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d108      	bne.n	800766c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a27      	ldr	r2, [pc, #156]	@ (80076fc <TIM_Base_SetConfig+0x104>)
 800765e:	4013      	ands	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	4393      	bics	r3, r2
 8007672:	001a      	movs	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a13      	ldr	r2, [pc, #76]	@ (80076e4 <TIM_Base_SetConfig+0xec>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00b      	beq.n	80076b2 <TIM_Base_SetConfig+0xba>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a14      	ldr	r2, [pc, #80]	@ (80076f0 <TIM_Base_SetConfig+0xf8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d007      	beq.n	80076b2 <TIM_Base_SetConfig+0xba>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a13      	ldr	r2, [pc, #76]	@ (80076f4 <TIM_Base_SetConfig+0xfc>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_Base_SetConfig+0xba>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a12      	ldr	r2, [pc, #72]	@ (80076f8 <TIM_Base_SetConfig+0x100>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d103      	bne.n	80076ba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2201      	movs	r2, #1
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2201      	movs	r2, #1
 80076d2:	4393      	bics	r3, r2
 80076d4:	001a      	movs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]
  }
}
 80076da:	46c0      	nop			@ (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b004      	add	sp, #16
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40002000 	.word	0x40002000
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800
 80076fc:	fffffcff 	.word	0xfffffcff

08007700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007708:	46c0      	nop			@ (mov r8, r8)
 800770a:	46bd      	mov	sp, r7
 800770c:	b002      	add	sp, #8
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b002      	add	sp, #8
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007728:	46c0      	nop			@ (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	b002      	add	sp, #8
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e046      	b.n	80077d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2288      	movs	r2, #136	@ 0x88
 8007746:	589b      	ldr	r3, [r3, r2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2284      	movs	r2, #132	@ 0x84
 8007750:	2100      	movs	r1, #0
 8007752:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	0018      	movs	r0, r3
 8007758:	f7fc fa0c 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2288      	movs	r2, #136	@ 0x88
 8007760:	2124      	movs	r1, #36	@ 0x24
 8007762:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2101      	movs	r1, #1
 8007770:	438a      	bics	r2, r1
 8007772:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0018      	movs	r0, r3
 8007780:	f000 f9d0 	bl	8007b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	0018      	movs	r0, r3
 8007788:	f000 f828 	bl	80077dc <UART_SetConfig>
 800778c:	0003      	movs	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e01c      	b.n	80077d0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	490d      	ldr	r1, [pc, #52]	@ (80077d8 <HAL_UART_Init+0xa8>)
 80077a2:	400a      	ands	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	212a      	movs	r1, #42	@ 0x2a
 80077b2:	438a      	bics	r2, r1
 80077b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2101      	movs	r1, #1
 80077c2:	430a      	orrs	r2, r1
 80077c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 fa5f 	bl	8007c8c <UART_CheckIdleState>
 80077ce:	0003      	movs	r3, r0
}
 80077d0:	0018      	movs	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b002      	add	sp, #8
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	ffffb7ff 	.word	0xffffb7ff

080077dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077e4:	231a      	movs	r3, #26
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	4313      	orrs	r3, r2
 8007802:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4abc      	ldr	r2, [pc, #752]	@ (8007afc <UART_SetConfig+0x320>)
 800780c:	4013      	ands	r3, r2
 800780e:	0019      	movs	r1, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	430a      	orrs	r2, r1
 8007818:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4ab7      	ldr	r2, [pc, #732]	@ (8007b00 <UART_SetConfig+0x324>)
 8007822:	4013      	ands	r3, r2
 8007824:	0019      	movs	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	4313      	orrs	r3, r2
 8007840:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4aae      	ldr	r2, [pc, #696]	@ (8007b04 <UART_SetConfig+0x328>)
 800784a:	4013      	ands	r3, r2
 800784c:	0019      	movs	r1, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	430a      	orrs	r2, r1
 8007856:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	220f      	movs	r2, #15
 8007860:	4393      	bics	r3, r2
 8007862:	0019      	movs	r1, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4aa4      	ldr	r2, [pc, #656]	@ (8007b08 <UART_SetConfig+0x32c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d127      	bne.n	80078ca <UART_SetConfig+0xee>
 800787a:	4ba4      	ldr	r3, [pc, #656]	@ (8007b0c <UART_SetConfig+0x330>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	2203      	movs	r2, #3
 8007880:	4013      	ands	r3, r2
 8007882:	2b03      	cmp	r3, #3
 8007884:	d017      	beq.n	80078b6 <UART_SetConfig+0xda>
 8007886:	d81b      	bhi.n	80078c0 <UART_SetConfig+0xe4>
 8007888:	2b02      	cmp	r3, #2
 800788a:	d00a      	beq.n	80078a2 <UART_SetConfig+0xc6>
 800788c:	d818      	bhi.n	80078c0 <UART_SetConfig+0xe4>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <UART_SetConfig+0xbc>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d00a      	beq.n	80078ac <UART_SetConfig+0xd0>
 8007896:	e013      	b.n	80078c0 <UART_SetConfig+0xe4>
 8007898:	231b      	movs	r3, #27
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e058      	b.n	8007954 <UART_SetConfig+0x178>
 80078a2:	231b      	movs	r3, #27
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	2202      	movs	r2, #2
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e053      	b.n	8007954 <UART_SetConfig+0x178>
 80078ac:	231b      	movs	r3, #27
 80078ae:	18fb      	adds	r3, r7, r3
 80078b0:	2204      	movs	r2, #4
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	e04e      	b.n	8007954 <UART_SetConfig+0x178>
 80078b6:	231b      	movs	r3, #27
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2208      	movs	r2, #8
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e049      	b.n	8007954 <UART_SetConfig+0x178>
 80078c0:	231b      	movs	r3, #27
 80078c2:	18fb      	adds	r3, r7, r3
 80078c4:	2210      	movs	r2, #16
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e044      	b.n	8007954 <UART_SetConfig+0x178>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a90      	ldr	r2, [pc, #576]	@ (8007b10 <UART_SetConfig+0x334>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d127      	bne.n	8007924 <UART_SetConfig+0x148>
 80078d4:	4b8d      	ldr	r3, [pc, #564]	@ (8007b0c <UART_SetConfig+0x330>)
 80078d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d8:	220c      	movs	r2, #12
 80078da:	4013      	ands	r3, r2
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d017      	beq.n	8007910 <UART_SetConfig+0x134>
 80078e0:	d81b      	bhi.n	800791a <UART_SetConfig+0x13e>
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d00a      	beq.n	80078fc <UART_SetConfig+0x120>
 80078e6:	d818      	bhi.n	800791a <UART_SetConfig+0x13e>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <UART_SetConfig+0x116>
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d00a      	beq.n	8007906 <UART_SetConfig+0x12a>
 80078f0:	e013      	b.n	800791a <UART_SetConfig+0x13e>
 80078f2:	231b      	movs	r3, #27
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e02b      	b.n	8007954 <UART_SetConfig+0x178>
 80078fc:	231b      	movs	r3, #27
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	2202      	movs	r2, #2
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	e026      	b.n	8007954 <UART_SetConfig+0x178>
 8007906:	231b      	movs	r3, #27
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	2204      	movs	r2, #4
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e021      	b.n	8007954 <UART_SetConfig+0x178>
 8007910:	231b      	movs	r3, #27
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	2208      	movs	r2, #8
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e01c      	b.n	8007954 <UART_SetConfig+0x178>
 800791a:	231b      	movs	r3, #27
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	2210      	movs	r2, #16
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e017      	b.n	8007954 <UART_SetConfig+0x178>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a7a      	ldr	r2, [pc, #488]	@ (8007b14 <UART_SetConfig+0x338>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d104      	bne.n	8007938 <UART_SetConfig+0x15c>
 800792e:	231b      	movs	r3, #27
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	e00d      	b.n	8007954 <UART_SetConfig+0x178>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a76      	ldr	r2, [pc, #472]	@ (8007b18 <UART_SetConfig+0x33c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d104      	bne.n	800794c <UART_SetConfig+0x170>
 8007942:	231b      	movs	r3, #27
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e003      	b.n	8007954 <UART_SetConfig+0x178>
 800794c:	231b      	movs	r3, #27
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	2210      	movs	r2, #16
 8007952:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	429a      	cmp	r2, r3
 800795e:	d000      	beq.n	8007962 <UART_SetConfig+0x186>
 8007960:	e065      	b.n	8007a2e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007962:	231b      	movs	r3, #27
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d015      	beq.n	8007998 <UART_SetConfig+0x1bc>
 800796c:	dc18      	bgt.n	80079a0 <UART_SetConfig+0x1c4>
 800796e:	2b04      	cmp	r3, #4
 8007970:	d00d      	beq.n	800798e <UART_SetConfig+0x1b2>
 8007972:	dc15      	bgt.n	80079a0 <UART_SetConfig+0x1c4>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <UART_SetConfig+0x1a2>
 8007978:	2b02      	cmp	r3, #2
 800797a:	d005      	beq.n	8007988 <UART_SetConfig+0x1ac>
 800797c:	e010      	b.n	80079a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800797e:	f7ff fa63 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8007982:	0003      	movs	r3, r0
 8007984:	617b      	str	r3, [r7, #20]
        break;
 8007986:	e012      	b.n	80079ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007988:	4b64      	ldr	r3, [pc, #400]	@ (8007b1c <UART_SetConfig+0x340>)
 800798a:	617b      	str	r3, [r7, #20]
        break;
 800798c:	e00f      	b.n	80079ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798e:	f7ff f9cf 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8007992:	0003      	movs	r3, r0
 8007994:	617b      	str	r3, [r7, #20]
        break;
 8007996:	e00a      	b.n	80079ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007998:	2380      	movs	r3, #128	@ 0x80
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	617b      	str	r3, [r7, #20]
        break;
 800799e:	e006      	b.n	80079ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80079a4:	231a      	movs	r3, #26
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	2201      	movs	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
        break;
 80079ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d100      	bne.n	80079b6 <UART_SetConfig+0x1da>
 80079b4:	e08d      	b.n	8007ad2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ba:	4b59      	ldr	r3, [pc, #356]	@ (8007b20 <UART_SetConfig+0x344>)
 80079bc:	0052      	lsls	r2, r2, #1
 80079be:	5ad3      	ldrh	r3, [r2, r3]
 80079c0:	0019      	movs	r1, r3
 80079c2:	6978      	ldr	r0, [r7, #20]
 80079c4:	f7f8 fbb8 	bl	8000138 <__udivsi3>
 80079c8:	0003      	movs	r3, r0
 80079ca:	005a      	lsls	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	18d2      	adds	r2, r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	0019      	movs	r1, r3
 80079da:	0010      	movs	r0, r2
 80079dc:	f7f8 fbac 	bl	8000138 <__udivsi3>
 80079e0:	0003      	movs	r3, r0
 80079e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d91c      	bls.n	8007a24 <UART_SetConfig+0x248>
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	025b      	lsls	r3, r3, #9
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d217      	bcs.n	8007a24 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	200e      	movs	r0, #14
 80079fa:	183b      	adds	r3, r7, r0
 80079fc:	210f      	movs	r1, #15
 80079fe:	438a      	bics	r2, r1
 8007a00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	085b      	lsrs	r3, r3, #1
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2207      	movs	r2, #7
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	b299      	uxth	r1, r3
 8007a0e:	183b      	adds	r3, r7, r0
 8007a10:	183a      	adds	r2, r7, r0
 8007a12:	8812      	ldrh	r2, [r2, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	183a      	adds	r2, r7, r0
 8007a1e:	8812      	ldrh	r2, [r2, #0]
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	e056      	b.n	8007ad2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007a24:	231a      	movs	r3, #26
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e051      	b.n	8007ad2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a2e:	231b      	movs	r3, #27
 8007a30:	18fb      	adds	r3, r7, r3
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d015      	beq.n	8007a64 <UART_SetConfig+0x288>
 8007a38:	dc18      	bgt.n	8007a6c <UART_SetConfig+0x290>
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d00d      	beq.n	8007a5a <UART_SetConfig+0x27e>
 8007a3e:	dc15      	bgt.n	8007a6c <UART_SetConfig+0x290>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <UART_SetConfig+0x26e>
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d005      	beq.n	8007a54 <UART_SetConfig+0x278>
 8007a48:	e010      	b.n	8007a6c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7ff f9fd 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8007a4e:	0003      	movs	r3, r0
 8007a50:	617b      	str	r3, [r7, #20]
        break;
 8007a52:	e012      	b.n	8007a7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b31      	ldr	r3, [pc, #196]	@ (8007b1c <UART_SetConfig+0x340>)
 8007a56:	617b      	str	r3, [r7, #20]
        break;
 8007a58:	e00f      	b.n	8007a7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7ff f969 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8007a5e:	0003      	movs	r3, r0
 8007a60:	617b      	str	r3, [r7, #20]
        break;
 8007a62:	e00a      	b.n	8007a7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a64:	2380      	movs	r3, #128	@ 0x80
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	617b      	str	r3, [r7, #20]
        break;
 8007a6a:	e006      	b.n	8007a7a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a70:	231a      	movs	r3, #26
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
        break;
 8007a78:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d028      	beq.n	8007ad2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a84:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <UART_SetConfig+0x344>)
 8007a86:	0052      	lsls	r2, r2, #1
 8007a88:	5ad3      	ldrh	r3, [r2, r3]
 8007a8a:	0019      	movs	r1, r3
 8007a8c:	6978      	ldr	r0, [r7, #20]
 8007a8e:	f7f8 fb53 	bl	8000138 <__udivsi3>
 8007a92:	0003      	movs	r3, r0
 8007a94:	001a      	movs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	085b      	lsrs	r3, r3, #1
 8007a9c:	18d2      	adds	r2, r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	0010      	movs	r0, r2
 8007aa6:	f7f8 fb47 	bl	8000138 <__udivsi3>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b0f      	cmp	r3, #15
 8007ab2:	d90a      	bls.n	8007aca <UART_SetConfig+0x2ee>
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	2380      	movs	r3, #128	@ 0x80
 8007ab8:	025b      	lsls	r3, r3, #9
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d205      	bcs.n	8007aca <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e003      	b.n	8007ad2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007aca:	231a      	movs	r3, #26
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	226a      	movs	r2, #106	@ 0x6a
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2268      	movs	r2, #104	@ 0x68
 8007ade:	2101      	movs	r1, #1
 8007ae0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007aee:	231a      	movs	r3, #26
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
}
 8007af4:	0018      	movs	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b008      	add	sp, #32
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	cfff69f3 	.word	0xcfff69f3
 8007b00:	ffffcfff 	.word	0xffffcfff
 8007b04:	11fff4ff 	.word	0x11fff4ff
 8007b08:	40013800 	.word	0x40013800
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	40004400 	.word	0x40004400
 8007b14:	40004800 	.word	0x40004800
 8007b18:	40004c00 	.word	0x40004c00
 8007b1c:	00f42400 	.word	0x00f42400
 8007b20:	0800ab08 	.word	0x0800ab08

08007b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	2208      	movs	r2, #8
 8007b32:	4013      	ands	r3, r2
 8007b34:	d00b      	beq.n	8007b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c68 <UART_AdvFeatureConfig+0x144>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	2201      	movs	r2, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4a43      	ldr	r2, [pc, #268]	@ (8007c6c <UART_AdvFeatureConfig+0x148>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	0019      	movs	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	2202      	movs	r2, #2
 8007b76:	4013      	ands	r3, r2
 8007b78:	d00b      	beq.n	8007b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a3b      	ldr	r2, [pc, #236]	@ (8007c70 <UART_AdvFeatureConfig+0x14c>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	0019      	movs	r1, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b96:	2204      	movs	r2, #4
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	4a34      	ldr	r2, [pc, #208]	@ (8007c74 <UART_AdvFeatureConfig+0x150>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	2210      	movs	r2, #16
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c78 <UART_AdvFeatureConfig+0x154>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	0019      	movs	r1, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	2220      	movs	r2, #32
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4a25      	ldr	r2, [pc, #148]	@ (8007c7c <UART_AdvFeatureConfig+0x158>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	0019      	movs	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	2240      	movs	r2, #64	@ 0x40
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d01d      	beq.n	8007c3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a1d      	ldr	r2, [pc, #116]	@ (8007c80 <UART_AdvFeatureConfig+0x15c>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c1e:	2380      	movs	r3, #128	@ 0x80
 8007c20:	035b      	lsls	r3, r3, #13
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d10b      	bne.n	8007c3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <UART_AdvFeatureConfig+0x160>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	0019      	movs	r1, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	2280      	movs	r2, #128	@ 0x80
 8007c44:	4013      	ands	r3, r2
 8007c46:	d00b      	beq.n	8007c60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c88 <UART_AdvFeatureConfig+0x164>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	0019      	movs	r1, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	605a      	str	r2, [r3, #4]
  }
}
 8007c60:	46c0      	nop			@ (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	ffff7fff 	.word	0xffff7fff
 8007c6c:	fffdffff 	.word	0xfffdffff
 8007c70:	fffeffff 	.word	0xfffeffff
 8007c74:	fffbffff 	.word	0xfffbffff
 8007c78:	ffffefff 	.word	0xffffefff
 8007c7c:	ffffdfff 	.word	0xffffdfff
 8007c80:	ffefffff 	.word	0xffefffff
 8007c84:	ff9fffff 	.word	0xff9fffff
 8007c88:	fff7ffff 	.word	0xfff7ffff

08007c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b092      	sub	sp, #72	@ 0x48
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2290      	movs	r2, #144	@ 0x90
 8007c98:	2100      	movs	r1, #0
 8007c9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c9c:	f7fc f9a2 	bl	8003fe4 <HAL_GetTick>
 8007ca0:	0003      	movs	r3, r0
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d12d      	bne.n	8007d0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2280      	movs	r2, #128	@ 0x80
 8007cb6:	0391      	lsls	r1, r2, #14
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4a47      	ldr	r2, [pc, #284]	@ (8007dd8 <UART_CheckIdleState+0x14c>)
 8007cbc:	9200      	str	r2, [sp, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f000 f88e 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 8007cc4:	1e03      	subs	r3, r0, #0
 8007cc6:	d022      	beq.n	8007d0e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	46c0      	nop			@ (mov r8, r8)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2180      	movs	r1, #128	@ 0x80
 8007cea:	438a      	bics	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf4:	f383 8810 	msr	PRIMASK, r3
}
 8007cf8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2288      	movs	r2, #136	@ 0x88
 8007cfe:	2120      	movs	r1, #32
 8007d00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2284      	movs	r2, #132	@ 0x84
 8007d06:	2100      	movs	r1, #0
 8007d08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e060      	b.n	8007dd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2204      	movs	r2, #4
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d146      	bne.n	8007daa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1e:	2280      	movs	r2, #128	@ 0x80
 8007d20:	03d1      	lsls	r1, r2, #15
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <UART_CheckIdleState+0x14c>)
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f000 f859 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 8007d2e:	1e03      	subs	r3, r0, #0
 8007d30:	d03b      	beq.n	8007daa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d32:	f3ef 8310 	mrs	r3, PRIMASK
 8007d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f383 8810 	msr	PRIMASK, r3
}
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4922      	ldr	r1, [pc, #136]	@ (8007ddc <UART_CheckIdleState+0x150>)
 8007d54:	400a      	ands	r2, r1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f383 8810 	msr	PRIMASK, r3
}
 8007d62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d64:	f3ef 8310 	mrs	r3, PRIMASK
 8007d68:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f383 8810 	msr	PRIMASK, r3
}
 8007d78:	46c0      	nop			@ (mov r8, r8)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2101      	movs	r1, #1
 8007d86:	438a      	bics	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	f383 8810 	msr	PRIMASK, r3
}
 8007d94:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	228c      	movs	r2, #140	@ 0x8c
 8007d9a:	2120      	movs	r1, #32
 8007d9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2284      	movs	r2, #132	@ 0x84
 8007da2:	2100      	movs	r1, #0
 8007da4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e012      	b.n	8007dd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2288      	movs	r2, #136	@ 0x88
 8007dae:	2120      	movs	r1, #32
 8007db0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	228c      	movs	r2, #140	@ 0x8c
 8007db6:	2120      	movs	r1, #32
 8007db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2284      	movs	r2, #132	@ 0x84
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b010      	add	sp, #64	@ 0x40
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	01ffffff 	.word	0x01ffffff
 8007ddc:	fffffedf 	.word	0xfffffedf

08007de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	1dfb      	adds	r3, r7, #7
 8007dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df0:	e051      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	3301      	adds	r3, #1
 8007df6:	d04e      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df8:	f7fc f8f4 	bl	8003fe4 <HAL_GetTick>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d302      	bcc.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e051      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d03b      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d038      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d035      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2208      	movs	r2, #8
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d111      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f83c 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2290      	movs	r2, #144	@ 0x90
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2284      	movs	r2, #132	@ 0x84
 8007e54:	2100      	movs	r1, #0
 8007e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e02c      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	2380      	movs	r3, #128	@ 0x80
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	401a      	ands	r2, r3
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d112      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2280      	movs	r2, #128	@ 0x80
 8007e76:	0112      	lsls	r2, r2, #4
 8007e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f81f 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2290      	movs	r2, #144	@ 0x90
 8007e86:	2120      	movs	r1, #32
 8007e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2284      	movs	r2, #132	@ 0x84
 8007e8e:	2100      	movs	r1, #0
 8007e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	425a      	negs	r2, r3
 8007ea6:	4153      	adcs	r3, r2
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	001a      	movs	r2, r3
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d09e      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	46c0      	nop			@ (mov r8, r8)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4926      	ldr	r1, [pc, #152]	@ (8007f84 <UART_EndRxTransfer+0xc4>)
 8007eea:	400a      	ands	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f383 8810 	msr	PRIMASK, r3
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efa:	f3ef 8310 	mrs	r3, PRIMASK
 8007efe:	623b      	str	r3, [r7, #32]
  return(result);
 8007f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	f383 8810 	msr	PRIMASK, r3
}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	491b      	ldr	r1, [pc, #108]	@ (8007f88 <UART_EndRxTransfer+0xc8>)
 8007f1c:	400a      	ands	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d118      	bne.n	8007f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
 8007f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2110      	movs	r1, #16
 8007f56:	438a      	bics	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	228c      	movs	r2, #140	@ 0x8c
 8007f6a:	2120      	movs	r1, #32
 8007f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b00e      	add	sp, #56	@ 0x38
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	fffffedf 	.word	0xfffffedf
 8007f88:	effffffe 	.word	0xeffffffe

08007f8c <__cvt>:
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	001f      	movs	r7, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	0016      	movs	r6, r2
 8007f94:	b08b      	sub	sp, #44	@ 0x2c
 8007f96:	429f      	cmp	r7, r3
 8007f98:	da04      	bge.n	8007fa4 <__cvt+0x18>
 8007f9a:	2180      	movs	r1, #128	@ 0x80
 8007f9c:	0609      	lsls	r1, r1, #24
 8007f9e:	187b      	adds	r3, r7, r1
 8007fa0:	001f      	movs	r7, r3
 8007fa2:	232d      	movs	r3, #45	@ 0x2d
 8007fa4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fa6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007fa8:	7013      	strb	r3, [r2, #0]
 8007faa:	2320      	movs	r3, #32
 8007fac:	2203      	movs	r2, #3
 8007fae:	439d      	bics	r5, r3
 8007fb0:	2d46      	cmp	r5, #70	@ 0x46
 8007fb2:	d007      	beq.n	8007fc4 <__cvt+0x38>
 8007fb4:	002b      	movs	r3, r5
 8007fb6:	3b45      	subs	r3, #69	@ 0x45
 8007fb8:	4259      	negs	r1, r3
 8007fba:	414b      	adcs	r3, r1
 8007fbc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007fbe:	3a01      	subs	r2, #1
 8007fc0:	18cb      	adds	r3, r1, r3
 8007fc2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fc4:	ab09      	add	r3, sp, #36	@ 0x24
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	ab08      	add	r3, sp, #32
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fd4:	0032      	movs	r2, r6
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	003b      	movs	r3, r7
 8007fda:	f000 fe7f 	bl	8008cdc <_dtoa_r>
 8007fde:	0004      	movs	r4, r0
 8007fe0:	2d47      	cmp	r5, #71	@ 0x47
 8007fe2:	d11b      	bne.n	800801c <__cvt+0x90>
 8007fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d511      	bpl.n	800800e <__cvt+0x82>
 8007fea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fec:	18c3      	adds	r3, r0, r3
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	0030      	movs	r0, r6
 8007ff6:	0039      	movs	r1, r7
 8007ff8:	f7f8 fa24 	bl	8000444 <__aeabi_dcmpeq>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d001      	beq.n	8008004 <__cvt+0x78>
 8008000:	9b07      	ldr	r3, [sp, #28]
 8008002:	9309      	str	r3, [sp, #36]	@ 0x24
 8008004:	2230      	movs	r2, #48	@ 0x30
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	9907      	ldr	r1, [sp, #28]
 800800a:	428b      	cmp	r3, r1
 800800c:	d320      	bcc.n	8008050 <__cvt+0xc4>
 800800e:	0020      	movs	r0, r4
 8008010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008012:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008014:	1b1b      	subs	r3, r3, r4
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	b00b      	add	sp, #44	@ 0x2c
 800801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800801e:	18c3      	adds	r3, r0, r3
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	2d46      	cmp	r5, #70	@ 0x46
 8008024:	d1e4      	bne.n	8007ff0 <__cvt+0x64>
 8008026:	7803      	ldrb	r3, [r0, #0]
 8008028:	2b30      	cmp	r3, #48	@ 0x30
 800802a:	d10c      	bne.n	8008046 <__cvt+0xba>
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	0030      	movs	r0, r6
 8008032:	0039      	movs	r1, r7
 8008034:	f7f8 fa06 	bl	8000444 <__aeabi_dcmpeq>
 8008038:	2800      	cmp	r0, #0
 800803a:	d104      	bne.n	8008046 <__cvt+0xba>
 800803c:	2301      	movs	r3, #1
 800803e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008048:	9a07      	ldr	r2, [sp, #28]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	18d3      	adds	r3, r2, r3
 800804e:	e7ce      	b.n	8007fee <__cvt+0x62>
 8008050:	1c59      	adds	r1, r3, #1
 8008052:	9109      	str	r1, [sp, #36]	@ 0x24
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e7d6      	b.n	8008006 <__cvt+0x7a>

08008058 <__exponent>:
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	232b      	movs	r3, #43	@ 0x2b
 800805c:	0005      	movs	r5, r0
 800805e:	000c      	movs	r4, r1
 8008060:	b085      	sub	sp, #20
 8008062:	7002      	strb	r2, [r0, #0]
 8008064:	2900      	cmp	r1, #0
 8008066:	da01      	bge.n	800806c <__exponent+0x14>
 8008068:	424c      	negs	r4, r1
 800806a:	3302      	adds	r3, #2
 800806c:	706b      	strb	r3, [r5, #1]
 800806e:	2c09      	cmp	r4, #9
 8008070:	dd2c      	ble.n	80080cc <__exponent+0x74>
 8008072:	ab02      	add	r3, sp, #8
 8008074:	1dde      	adds	r6, r3, #7
 8008076:	0020      	movs	r0, r4
 8008078:	210a      	movs	r1, #10
 800807a:	f7f8 f9cd 	bl	8000418 <__aeabi_idivmod>
 800807e:	0037      	movs	r7, r6
 8008080:	3130      	adds	r1, #48	@ 0x30
 8008082:	3e01      	subs	r6, #1
 8008084:	0020      	movs	r0, r4
 8008086:	7031      	strb	r1, [r6, #0]
 8008088:	210a      	movs	r1, #10
 800808a:	9401      	str	r4, [sp, #4]
 800808c:	f7f8 f8de 	bl	800024c <__divsi3>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	0004      	movs	r4, r0
 8008094:	2b63      	cmp	r3, #99	@ 0x63
 8008096:	dcee      	bgt.n	8008076 <__exponent+0x1e>
 8008098:	1eba      	subs	r2, r7, #2
 800809a:	1ca8      	adds	r0, r5, #2
 800809c:	0001      	movs	r1, r0
 800809e:	0013      	movs	r3, r2
 80080a0:	3430      	adds	r4, #48	@ 0x30
 80080a2:	7014      	strb	r4, [r2, #0]
 80080a4:	ac02      	add	r4, sp, #8
 80080a6:	3407      	adds	r4, #7
 80080a8:	429c      	cmp	r4, r3
 80080aa:	d80a      	bhi.n	80080c2 <__exponent+0x6a>
 80080ac:	2300      	movs	r3, #0
 80080ae:	42a2      	cmp	r2, r4
 80080b0:	d803      	bhi.n	80080ba <__exponent+0x62>
 80080b2:	3309      	adds	r3, #9
 80080b4:	aa02      	add	r2, sp, #8
 80080b6:	189b      	adds	r3, r3, r2
 80080b8:	1bdb      	subs	r3, r3, r7
 80080ba:	18c0      	adds	r0, r0, r3
 80080bc:	1b40      	subs	r0, r0, r5
 80080be:	b005      	add	sp, #20
 80080c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c2:	781c      	ldrb	r4, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	700c      	strb	r4, [r1, #0]
 80080c8:	3101      	adds	r1, #1
 80080ca:	e7eb      	b.n	80080a4 <__exponent+0x4c>
 80080cc:	2330      	movs	r3, #48	@ 0x30
 80080ce:	18e4      	adds	r4, r4, r3
 80080d0:	70ab      	strb	r3, [r5, #2]
 80080d2:	1d28      	adds	r0, r5, #4
 80080d4:	70ec      	strb	r4, [r5, #3]
 80080d6:	e7f1      	b.n	80080bc <__exponent+0x64>

080080d8 <_printf_float>:
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	b097      	sub	sp, #92	@ 0x5c
 80080dc:	000d      	movs	r5, r1
 80080de:	920a      	str	r2, [sp, #40]	@ 0x28
 80080e0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80080e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80080e6:	f000 fce1 	bl	8008aac <_localeconv_r>
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	0018      	movs	r0, r3
 80080ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80080f0:	f7f8 f806 	bl	8000100 <strlen>
 80080f4:	2300      	movs	r3, #0
 80080f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80080fa:	7e2b      	ldrb	r3, [r5, #24]
 80080fc:	2207      	movs	r2, #7
 80080fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	930e      	str	r3, [sp, #56]	@ 0x38
 8008104:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	05c9      	lsls	r1, r1, #23
 800810a:	d545      	bpl.n	8008198 <_printf_float+0xc0>
 800810c:	189b      	adds	r3, r3, r2
 800810e:	4393      	bics	r3, r2
 8008110:	001a      	movs	r2, r3
 8008112:	3208      	adds	r2, #8
 8008114:	6022      	str	r2, [r4, #0]
 8008116:	2201      	movs	r2, #1
 8008118:	681e      	ldr	r6, [r3, #0]
 800811a:	685f      	ldr	r7, [r3, #4]
 800811c:	007b      	lsls	r3, r7, #1
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	9311      	str	r3, [sp, #68]	@ 0x44
 8008122:	9610      	str	r6, [sp, #64]	@ 0x40
 8008124:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008126:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008128:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800812a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800812c:	4ba7      	ldr	r3, [pc, #668]	@ (80083cc <_printf_float+0x2f4>)
 800812e:	4252      	negs	r2, r2
 8008130:	f7fa fa8e 	bl	8002650 <__aeabi_dcmpun>
 8008134:	2800      	cmp	r0, #0
 8008136:	d131      	bne.n	800819c <_printf_float+0xc4>
 8008138:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800813a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800813c:	2201      	movs	r2, #1
 800813e:	4ba3      	ldr	r3, [pc, #652]	@ (80083cc <_printf_float+0x2f4>)
 8008140:	4252      	negs	r2, r2
 8008142:	f7f8 f98f 	bl	8000464 <__aeabi_dcmple>
 8008146:	2800      	cmp	r0, #0
 8008148:	d128      	bne.n	800819c <_printf_float+0xc4>
 800814a:	2200      	movs	r2, #0
 800814c:	2300      	movs	r3, #0
 800814e:	0030      	movs	r0, r6
 8008150:	0039      	movs	r1, r7
 8008152:	f7f8 f97d 	bl	8000450 <__aeabi_dcmplt>
 8008156:	2800      	cmp	r0, #0
 8008158:	d003      	beq.n	8008162 <_printf_float+0x8a>
 800815a:	002b      	movs	r3, r5
 800815c:	222d      	movs	r2, #45	@ 0x2d
 800815e:	3343      	adds	r3, #67	@ 0x43
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008164:	4f9a      	ldr	r7, [pc, #616]	@ (80083d0 <_printf_float+0x2f8>)
 8008166:	2b47      	cmp	r3, #71	@ 0x47
 8008168:	d900      	bls.n	800816c <_printf_float+0x94>
 800816a:	4f9a      	ldr	r7, [pc, #616]	@ (80083d4 <_printf_float+0x2fc>)
 800816c:	2303      	movs	r3, #3
 800816e:	2400      	movs	r4, #0
 8008170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008172:	612b      	str	r3, [r5, #16]
 8008174:	3301      	adds	r3, #1
 8008176:	439a      	bics	r2, r3
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800817c:	0029      	movs	r1, r5
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008184:	aa15      	add	r2, sp, #84	@ 0x54
 8008186:	f000 f9e5 	bl	8008554 <_printf_common>
 800818a:	3001      	adds	r0, #1
 800818c:	d000      	beq.n	8008190 <_printf_float+0xb8>
 800818e:	e09f      	b.n	80082d0 <_printf_float+0x1f8>
 8008190:	2001      	movs	r0, #1
 8008192:	4240      	negs	r0, r0
 8008194:	b017      	add	sp, #92	@ 0x5c
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008198:	3307      	adds	r3, #7
 800819a:	e7b8      	b.n	800810e <_printf_float+0x36>
 800819c:	0032      	movs	r2, r6
 800819e:	003b      	movs	r3, r7
 80081a0:	0030      	movs	r0, r6
 80081a2:	0039      	movs	r1, r7
 80081a4:	f7fa fa54 	bl	8002650 <__aeabi_dcmpun>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d00b      	beq.n	80081c4 <_printf_float+0xec>
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	da03      	bge.n	80081b8 <_printf_float+0xe0>
 80081b0:	002b      	movs	r3, r5
 80081b2:	222d      	movs	r2, #45	@ 0x2d
 80081b4:	3343      	adds	r3, #67	@ 0x43
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081ba:	4f87      	ldr	r7, [pc, #540]	@ (80083d8 <_printf_float+0x300>)
 80081bc:	2b47      	cmp	r3, #71	@ 0x47
 80081be:	d9d5      	bls.n	800816c <_printf_float+0x94>
 80081c0:	4f86      	ldr	r7, [pc, #536]	@ (80083dc <_printf_float+0x304>)
 80081c2:	e7d3      	b.n	800816c <_printf_float+0x94>
 80081c4:	2220      	movs	r2, #32
 80081c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80081c8:	686b      	ldr	r3, [r5, #4]
 80081ca:	4394      	bics	r4, r2
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	d146      	bne.n	800825e <_printf_float+0x186>
 80081d0:	3307      	adds	r3, #7
 80081d2:	606b      	str	r3, [r5, #4]
 80081d4:	2380      	movs	r3, #128	@ 0x80
 80081d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4313      	orrs	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	9206      	str	r2, [sp, #24]
 80081e2:	aa14      	add	r2, sp, #80	@ 0x50
 80081e4:	9205      	str	r2, [sp, #20]
 80081e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081e8:	a90a      	add	r1, sp, #40	@ 0x28
 80081ea:	9204      	str	r2, [sp, #16]
 80081ec:	aa13      	add	r2, sp, #76	@ 0x4c
 80081ee:	9203      	str	r2, [sp, #12]
 80081f0:	2223      	movs	r2, #35	@ 0x23
 80081f2:	1852      	adds	r2, r2, r1
 80081f4:	9202      	str	r2, [sp, #8]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	686b      	ldr	r3, [r5, #4]
 80081fa:	0032      	movs	r2, r6
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008200:	003b      	movs	r3, r7
 8008202:	f7ff fec3 	bl	8007f8c <__cvt>
 8008206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008208:	0007      	movs	r7, r0
 800820a:	2c47      	cmp	r4, #71	@ 0x47
 800820c:	d12d      	bne.n	800826a <_printf_float+0x192>
 800820e:	1cd3      	adds	r3, r2, #3
 8008210:	db02      	blt.n	8008218 <_printf_float+0x140>
 8008212:	686b      	ldr	r3, [r5, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	dd48      	ble.n	80082aa <_printf_float+0x1d2>
 8008218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800821a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800821c:	3b02      	subs	r3, #2
 800821e:	b2db      	uxtb	r3, r3
 8008220:	930c      	str	r3, [sp, #48]	@ 0x30
 8008222:	0028      	movs	r0, r5
 8008224:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008226:	3901      	subs	r1, #1
 8008228:	3050      	adds	r0, #80	@ 0x50
 800822a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800822c:	f7ff ff14 	bl	8008058 <__exponent>
 8008230:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008232:	0004      	movs	r4, r0
 8008234:	1813      	adds	r3, r2, r0
 8008236:	612b      	str	r3, [r5, #16]
 8008238:	2a01      	cmp	r2, #1
 800823a:	dc02      	bgt.n	8008242 <_printf_float+0x16a>
 800823c:	682a      	ldr	r2, [r5, #0]
 800823e:	07d2      	lsls	r2, r2, #31
 8008240:	d501      	bpl.n	8008246 <_printf_float+0x16e>
 8008242:	3301      	adds	r3, #1
 8008244:	612b      	str	r3, [r5, #16]
 8008246:	2323      	movs	r3, #35	@ 0x23
 8008248:	aa0a      	add	r2, sp, #40	@ 0x28
 800824a:	189b      	adds	r3, r3, r2
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d100      	bne.n	8008254 <_printf_float+0x17c>
 8008252:	e792      	b.n	800817a <_printf_float+0xa2>
 8008254:	002b      	movs	r3, r5
 8008256:	222d      	movs	r2, #45	@ 0x2d
 8008258:	3343      	adds	r3, #67	@ 0x43
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e78d      	b.n	800817a <_printf_float+0xa2>
 800825e:	2c47      	cmp	r4, #71	@ 0x47
 8008260:	d1b8      	bne.n	80081d4 <_printf_float+0xfc>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1b6      	bne.n	80081d4 <_printf_float+0xfc>
 8008266:	3301      	adds	r3, #1
 8008268:	e7b3      	b.n	80081d2 <_printf_float+0xfa>
 800826a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800826c:	0011      	movs	r1, r2
 800826e:	2b65      	cmp	r3, #101	@ 0x65
 8008270:	d9d7      	bls.n	8008222 <_printf_float+0x14a>
 8008272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008274:	2b66      	cmp	r3, #102	@ 0x66
 8008276:	d11a      	bne.n	80082ae <_printf_float+0x1d6>
 8008278:	686b      	ldr	r3, [r5, #4]
 800827a:	2a00      	cmp	r2, #0
 800827c:	dd09      	ble.n	8008292 <_printf_float+0x1ba>
 800827e:	612a      	str	r2, [r5, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <_printf_float+0x1b2>
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	07c9      	lsls	r1, r1, #31
 8008288:	d50b      	bpl.n	80082a2 <_printf_float+0x1ca>
 800828a:	3301      	adds	r3, #1
 800828c:	189b      	adds	r3, r3, r2
 800828e:	612b      	str	r3, [r5, #16]
 8008290:	e007      	b.n	80082a2 <_printf_float+0x1ca>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <_printf_float+0x1c6>
 8008296:	2201      	movs	r2, #1
 8008298:	6829      	ldr	r1, [r5, #0]
 800829a:	4211      	tst	r1, r2
 800829c:	d000      	beq.n	80082a0 <_printf_float+0x1c8>
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	612a      	str	r2, [r5, #16]
 80082a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082a4:	2400      	movs	r4, #0
 80082a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80082a8:	e7cd      	b.n	8008246 <_printf_float+0x16e>
 80082aa:	2367      	movs	r3, #103	@ 0x67
 80082ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80082ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80082b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082b2:	4299      	cmp	r1, r3
 80082b4:	db06      	blt.n	80082c4 <_printf_float+0x1ec>
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	6129      	str	r1, [r5, #16]
 80082ba:	07db      	lsls	r3, r3, #31
 80082bc:	d5f1      	bpl.n	80082a2 <_printf_float+0x1ca>
 80082be:	3101      	adds	r1, #1
 80082c0:	6129      	str	r1, [r5, #16]
 80082c2:	e7ee      	b.n	80082a2 <_printf_float+0x1ca>
 80082c4:	2201      	movs	r2, #1
 80082c6:	2900      	cmp	r1, #0
 80082c8:	dce0      	bgt.n	800828c <_printf_float+0x1b4>
 80082ca:	1892      	adds	r2, r2, r2
 80082cc:	1a52      	subs	r2, r2, r1
 80082ce:	e7dd      	b.n	800828c <_printf_float+0x1b4>
 80082d0:	682a      	ldr	r2, [r5, #0]
 80082d2:	0553      	lsls	r3, r2, #21
 80082d4:	d408      	bmi.n	80082e8 <_printf_float+0x210>
 80082d6:	692b      	ldr	r3, [r5, #16]
 80082d8:	003a      	movs	r2, r7
 80082da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80082e0:	47a0      	blx	r4
 80082e2:	3001      	adds	r0, #1
 80082e4:	d129      	bne.n	800833a <_printf_float+0x262>
 80082e6:	e753      	b.n	8008190 <_printf_float+0xb8>
 80082e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ea:	2b65      	cmp	r3, #101	@ 0x65
 80082ec:	d800      	bhi.n	80082f0 <_printf_float+0x218>
 80082ee:	e0da      	b.n	80084a6 <_printf_float+0x3ce>
 80082f0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80082f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80082f4:	2200      	movs	r2, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	f7f8 f8a4 	bl	8000444 <__aeabi_dcmpeq>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d033      	beq.n	8008368 <_printf_float+0x290>
 8008300:	2301      	movs	r3, #1
 8008302:	4a37      	ldr	r2, [pc, #220]	@ (80083e0 <_printf_float+0x308>)
 8008304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008308:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800830a:	47a0      	blx	r4
 800830c:	3001      	adds	r0, #1
 800830e:	d100      	bne.n	8008312 <_printf_float+0x23a>
 8008310:	e73e      	b.n	8008190 <_printf_float+0xb8>
 8008312:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008316:	42b3      	cmp	r3, r6
 8008318:	db02      	blt.n	8008320 <_printf_float+0x248>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	07db      	lsls	r3, r3, #31
 800831e:	d50c      	bpl.n	800833a <_printf_float+0x262>
 8008320:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008326:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008328:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800832a:	47a0      	blx	r4
 800832c:	2400      	movs	r4, #0
 800832e:	3001      	adds	r0, #1
 8008330:	d100      	bne.n	8008334 <_printf_float+0x25c>
 8008332:	e72d      	b.n	8008190 <_printf_float+0xb8>
 8008334:	1e73      	subs	r3, r6, #1
 8008336:	42a3      	cmp	r3, r4
 8008338:	dc0a      	bgt.n	8008350 <_printf_float+0x278>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	079b      	lsls	r3, r3, #30
 800833e:	d500      	bpl.n	8008342 <_printf_float+0x26a>
 8008340:	e105      	b.n	800854e <_printf_float+0x476>
 8008342:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008344:	68e8      	ldr	r0, [r5, #12]
 8008346:	4298      	cmp	r0, r3
 8008348:	db00      	blt.n	800834c <_printf_float+0x274>
 800834a:	e723      	b.n	8008194 <_printf_float+0xbc>
 800834c:	0018      	movs	r0, r3
 800834e:	e721      	b.n	8008194 <_printf_float+0xbc>
 8008350:	002a      	movs	r2, r5
 8008352:	2301      	movs	r3, #1
 8008354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008358:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800835a:	321a      	adds	r2, #26
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	d100      	bne.n	8008364 <_printf_float+0x28c>
 8008362:	e715      	b.n	8008190 <_printf_float+0xb8>
 8008364:	3401      	adds	r4, #1
 8008366:	e7e5      	b.n	8008334 <_printf_float+0x25c>
 8008368:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc3a      	bgt.n	80083e4 <_printf_float+0x30c>
 800836e:	2301      	movs	r3, #1
 8008370:	4a1b      	ldr	r2, [pc, #108]	@ (80083e0 <_printf_float+0x308>)
 8008372:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008374:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008376:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008378:	47a0      	blx	r4
 800837a:	3001      	adds	r0, #1
 800837c:	d100      	bne.n	8008380 <_printf_float+0x2a8>
 800837e:	e707      	b.n	8008190 <_printf_float+0xb8>
 8008380:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008382:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008384:	4333      	orrs	r3, r6
 8008386:	d102      	bne.n	800838e <_printf_float+0x2b6>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d5d5      	bpl.n	800833a <_printf_float+0x262>
 800838e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008396:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008398:	47a0      	blx	r4
 800839a:	2300      	movs	r3, #0
 800839c:	3001      	adds	r0, #1
 800839e:	d100      	bne.n	80083a2 <_printf_float+0x2ca>
 80083a0:	e6f6      	b.n	8008190 <_printf_float+0xb8>
 80083a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80083a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083a8:	425b      	negs	r3, r3
 80083aa:	4293      	cmp	r3, r2
 80083ac:	dc01      	bgt.n	80083b2 <_printf_float+0x2da>
 80083ae:	0033      	movs	r3, r6
 80083b0:	e792      	b.n	80082d8 <_printf_float+0x200>
 80083b2:	002a      	movs	r2, r5
 80083b4:	2301      	movs	r3, #1
 80083b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083bc:	321a      	adds	r2, #26
 80083be:	47a0      	blx	r4
 80083c0:	3001      	adds	r0, #1
 80083c2:	d100      	bne.n	80083c6 <_printf_float+0x2ee>
 80083c4:	e6e4      	b.n	8008190 <_printf_float+0xb8>
 80083c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083c8:	3301      	adds	r3, #1
 80083ca:	e7ea      	b.n	80083a2 <_printf_float+0x2ca>
 80083cc:	7fefffff 	.word	0x7fefffff
 80083d0:	0800ab20 	.word	0x0800ab20
 80083d4:	0800ab24 	.word	0x0800ab24
 80083d8:	0800ab28 	.word	0x0800ab28
 80083dc:	0800ab2c 	.word	0x0800ab2c
 80083e0:	0800ab30 	.word	0x0800ab30
 80083e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80083e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ea:	429e      	cmp	r6, r3
 80083ec:	dd00      	ble.n	80083f0 <_printf_float+0x318>
 80083ee:	001e      	movs	r6, r3
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	dc31      	bgt.n	8008458 <_printf_float+0x380>
 80083f4:	43f3      	mvns	r3, r6
 80083f6:	2400      	movs	r4, #0
 80083f8:	17db      	asrs	r3, r3, #31
 80083fa:	4033      	ands	r3, r6
 80083fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80083fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008402:	1af3      	subs	r3, r6, r3
 8008404:	42a3      	cmp	r3, r4
 8008406:	dc30      	bgt.n	800846a <_printf_float+0x392>
 8008408:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800840a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800840c:	429a      	cmp	r2, r3
 800840e:	dc38      	bgt.n	8008482 <_printf_float+0x3aa>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	07db      	lsls	r3, r3, #31
 8008414:	d435      	bmi.n	8008482 <_printf_float+0x3aa>
 8008416:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800841a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800841c:	1b9b      	subs	r3, r3, r6
 800841e:	1b14      	subs	r4, r2, r4
 8008420:	429c      	cmp	r4, r3
 8008422:	dd00      	ble.n	8008426 <_printf_float+0x34e>
 8008424:	001c      	movs	r4, r3
 8008426:	2c00      	cmp	r4, #0
 8008428:	dc34      	bgt.n	8008494 <_printf_float+0x3bc>
 800842a:	43e3      	mvns	r3, r4
 800842c:	2600      	movs	r6, #0
 800842e:	17db      	asrs	r3, r3, #31
 8008430:	401c      	ands	r4, r3
 8008432:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008434:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	1b1b      	subs	r3, r3, r4
 800843a:	42b3      	cmp	r3, r6
 800843c:	dc00      	bgt.n	8008440 <_printf_float+0x368>
 800843e:	e77c      	b.n	800833a <_printf_float+0x262>
 8008440:	002a      	movs	r2, r5
 8008442:	2301      	movs	r3, #1
 8008444:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008448:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800844a:	321a      	adds	r2, #26
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	d100      	bne.n	8008454 <_printf_float+0x37c>
 8008452:	e69d      	b.n	8008190 <_printf_float+0xb8>
 8008454:	3601      	adds	r6, #1
 8008456:	e7ec      	b.n	8008432 <_printf_float+0x35a>
 8008458:	0033      	movs	r3, r6
 800845a:	003a      	movs	r2, r7
 800845c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800845e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008460:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008462:	47a0      	blx	r4
 8008464:	3001      	adds	r0, #1
 8008466:	d1c5      	bne.n	80083f4 <_printf_float+0x31c>
 8008468:	e692      	b.n	8008190 <_printf_float+0xb8>
 800846a:	002a      	movs	r2, r5
 800846c:	2301      	movs	r3, #1
 800846e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008470:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008472:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008474:	321a      	adds	r2, #26
 8008476:	47b0      	blx	r6
 8008478:	3001      	adds	r0, #1
 800847a:	d100      	bne.n	800847e <_printf_float+0x3a6>
 800847c:	e688      	b.n	8008190 <_printf_float+0xb8>
 800847e:	3401      	adds	r4, #1
 8008480:	e7bd      	b.n	80083fe <_printf_float+0x326>
 8008482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008486:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008488:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800848a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800848c:	47a0      	blx	r4
 800848e:	3001      	adds	r0, #1
 8008490:	d1c1      	bne.n	8008416 <_printf_float+0x33e>
 8008492:	e67d      	b.n	8008190 <_printf_float+0xb8>
 8008494:	19ba      	adds	r2, r7, r6
 8008496:	0023      	movs	r3, r4
 8008498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800849a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800849c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800849e:	47b0      	blx	r6
 80084a0:	3001      	adds	r0, #1
 80084a2:	d1c2      	bne.n	800842a <_printf_float+0x352>
 80084a4:	e674      	b.n	8008190 <_printf_float+0xb8>
 80084a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	dc02      	bgt.n	80084b4 <_printf_float+0x3dc>
 80084ae:	2301      	movs	r3, #1
 80084b0:	421a      	tst	r2, r3
 80084b2:	d039      	beq.n	8008528 <_printf_float+0x450>
 80084b4:	2301      	movs	r3, #1
 80084b6:	003a      	movs	r2, r7
 80084b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084be:	47b0      	blx	r6
 80084c0:	3001      	adds	r0, #1
 80084c2:	d100      	bne.n	80084c6 <_printf_float+0x3ee>
 80084c4:	e664      	b.n	8008190 <_printf_float+0xb8>
 80084c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084d0:	47b0      	blx	r6
 80084d2:	3001      	adds	r0, #1
 80084d4:	d100      	bne.n	80084d8 <_printf_float+0x400>
 80084d6:	e65b      	b.n	8008190 <_printf_float+0xb8>
 80084d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80084da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80084dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084de:	2200      	movs	r2, #0
 80084e0:	3b01      	subs	r3, #1
 80084e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80084e4:	2300      	movs	r3, #0
 80084e6:	f7f7 ffad 	bl	8000444 <__aeabi_dcmpeq>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d11a      	bne.n	8008524 <_printf_float+0x44c>
 80084ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084f0:	1c7a      	adds	r2, r7, #1
 80084f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084f8:	47b0      	blx	r6
 80084fa:	3001      	adds	r0, #1
 80084fc:	d10e      	bne.n	800851c <_printf_float+0x444>
 80084fe:	e647      	b.n	8008190 <_printf_float+0xb8>
 8008500:	002a      	movs	r2, r5
 8008502:	2301      	movs	r3, #1
 8008504:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008508:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800850a:	321a      	adds	r2, #26
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	d100      	bne.n	8008514 <_printf_float+0x43c>
 8008512:	e63d      	b.n	8008190 <_printf_float+0xb8>
 8008514:	3601      	adds	r6, #1
 8008516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008518:	429e      	cmp	r6, r3
 800851a:	dbf1      	blt.n	8008500 <_printf_float+0x428>
 800851c:	002a      	movs	r2, r5
 800851e:	0023      	movs	r3, r4
 8008520:	3250      	adds	r2, #80	@ 0x50
 8008522:	e6da      	b.n	80082da <_printf_float+0x202>
 8008524:	2600      	movs	r6, #0
 8008526:	e7f6      	b.n	8008516 <_printf_float+0x43e>
 8008528:	003a      	movs	r2, r7
 800852a:	e7e2      	b.n	80084f2 <_printf_float+0x41a>
 800852c:	002a      	movs	r2, r5
 800852e:	2301      	movs	r3, #1
 8008530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008534:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008536:	3219      	adds	r2, #25
 8008538:	47b0      	blx	r6
 800853a:	3001      	adds	r0, #1
 800853c:	d100      	bne.n	8008540 <_printf_float+0x468>
 800853e:	e627      	b.n	8008190 <_printf_float+0xb8>
 8008540:	3401      	adds	r4, #1
 8008542:	68eb      	ldr	r3, [r5, #12]
 8008544:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	42a3      	cmp	r3, r4
 800854a:	dcef      	bgt.n	800852c <_printf_float+0x454>
 800854c:	e6f9      	b.n	8008342 <_printf_float+0x26a>
 800854e:	2400      	movs	r4, #0
 8008550:	e7f7      	b.n	8008542 <_printf_float+0x46a>
 8008552:	46c0      	nop			@ (mov r8, r8)

08008554 <_printf_common>:
 8008554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008556:	0016      	movs	r6, r2
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	688a      	ldr	r2, [r1, #8]
 800855c:	690b      	ldr	r3, [r1, #16]
 800855e:	000c      	movs	r4, r1
 8008560:	9000      	str	r0, [sp, #0]
 8008562:	4293      	cmp	r3, r2
 8008564:	da00      	bge.n	8008568 <_printf_common+0x14>
 8008566:	0013      	movs	r3, r2
 8008568:	0022      	movs	r2, r4
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	3243      	adds	r2, #67	@ 0x43
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	2a00      	cmp	r2, #0
 8008572:	d001      	beq.n	8008578 <_printf_common+0x24>
 8008574:	3301      	adds	r3, #1
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	069b      	lsls	r3, r3, #26
 800857c:	d502      	bpl.n	8008584 <_printf_common+0x30>
 800857e:	6833      	ldr	r3, [r6, #0]
 8008580:	3302      	adds	r3, #2
 8008582:	6033      	str	r3, [r6, #0]
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	2306      	movs	r3, #6
 8008588:	0015      	movs	r5, r2
 800858a:	401d      	ands	r5, r3
 800858c:	421a      	tst	r2, r3
 800858e:	d027      	beq.n	80085e0 <_printf_common+0x8c>
 8008590:	0023      	movs	r3, r4
 8008592:	3343      	adds	r3, #67	@ 0x43
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	1e5a      	subs	r2, r3, #1
 8008598:	4193      	sbcs	r3, r2
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	0692      	lsls	r2, r2, #26
 800859e:	d430      	bmi.n	8008602 <_printf_common+0xae>
 80085a0:	0022      	movs	r2, r4
 80085a2:	9901      	ldr	r1, [sp, #4]
 80085a4:	9800      	ldr	r0, [sp, #0]
 80085a6:	9d08      	ldr	r5, [sp, #32]
 80085a8:	3243      	adds	r2, #67	@ 0x43
 80085aa:	47a8      	blx	r5
 80085ac:	3001      	adds	r0, #1
 80085ae:	d025      	beq.n	80085fc <_printf_common+0xa8>
 80085b0:	2206      	movs	r2, #6
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	2500      	movs	r5, #0
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d105      	bne.n	80085c8 <_printf_common+0x74>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	68e5      	ldr	r5, [r4, #12]
 80085c0:	1aed      	subs	r5, r5, r3
 80085c2:	43eb      	mvns	r3, r5
 80085c4:	17db      	asrs	r3, r3, #31
 80085c6:	401d      	ands	r5, r3
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	dd01      	ble.n	80085d4 <_printf_common+0x80>
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	18ed      	adds	r5, r5, r3
 80085d4:	2600      	movs	r6, #0
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d120      	bne.n	800861c <_printf_common+0xc8>
 80085da:	2000      	movs	r0, #0
 80085dc:	e010      	b.n	8008600 <_printf_common+0xac>
 80085de:	3501      	adds	r5, #1
 80085e0:	68e3      	ldr	r3, [r4, #12]
 80085e2:	6832      	ldr	r2, [r6, #0]
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	42ab      	cmp	r3, r5
 80085e8:	ddd2      	ble.n	8008590 <_printf_common+0x3c>
 80085ea:	0022      	movs	r2, r4
 80085ec:	2301      	movs	r3, #1
 80085ee:	9901      	ldr	r1, [sp, #4]
 80085f0:	9800      	ldr	r0, [sp, #0]
 80085f2:	9f08      	ldr	r7, [sp, #32]
 80085f4:	3219      	adds	r2, #25
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	d1f0      	bne.n	80085de <_printf_common+0x8a>
 80085fc:	2001      	movs	r0, #1
 80085fe:	4240      	negs	r0, r0
 8008600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008602:	2030      	movs	r0, #48	@ 0x30
 8008604:	18e1      	adds	r1, r4, r3
 8008606:	3143      	adds	r1, #67	@ 0x43
 8008608:	7008      	strb	r0, [r1, #0]
 800860a:	0021      	movs	r1, r4
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	3145      	adds	r1, #69	@ 0x45
 8008610:	7809      	ldrb	r1, [r1, #0]
 8008612:	18a2      	adds	r2, r4, r2
 8008614:	3243      	adds	r2, #67	@ 0x43
 8008616:	3302      	adds	r3, #2
 8008618:	7011      	strb	r1, [r2, #0]
 800861a:	e7c1      	b.n	80085a0 <_printf_common+0x4c>
 800861c:	0022      	movs	r2, r4
 800861e:	2301      	movs	r3, #1
 8008620:	9901      	ldr	r1, [sp, #4]
 8008622:	9800      	ldr	r0, [sp, #0]
 8008624:	9f08      	ldr	r7, [sp, #32]
 8008626:	321a      	adds	r2, #26
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	d0e6      	beq.n	80085fc <_printf_common+0xa8>
 800862e:	3601      	adds	r6, #1
 8008630:	e7d1      	b.n	80085d6 <_printf_common+0x82>
	...

08008634 <_printf_i>:
 8008634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008636:	b08b      	sub	sp, #44	@ 0x2c
 8008638:	9206      	str	r2, [sp, #24]
 800863a:	000a      	movs	r2, r1
 800863c:	3243      	adds	r2, #67	@ 0x43
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	9005      	str	r0, [sp, #20]
 8008642:	9203      	str	r2, [sp, #12]
 8008644:	7e0a      	ldrb	r2, [r1, #24]
 8008646:	000c      	movs	r4, r1
 8008648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800864a:	2a78      	cmp	r2, #120	@ 0x78
 800864c:	d809      	bhi.n	8008662 <_printf_i+0x2e>
 800864e:	2a62      	cmp	r2, #98	@ 0x62
 8008650:	d80b      	bhi.n	800866a <_printf_i+0x36>
 8008652:	2a00      	cmp	r2, #0
 8008654:	d100      	bne.n	8008658 <_printf_i+0x24>
 8008656:	e0bc      	b.n	80087d2 <_printf_i+0x19e>
 8008658:	497b      	ldr	r1, [pc, #492]	@ (8008848 <_printf_i+0x214>)
 800865a:	9104      	str	r1, [sp, #16]
 800865c:	2a58      	cmp	r2, #88	@ 0x58
 800865e:	d100      	bne.n	8008662 <_printf_i+0x2e>
 8008660:	e090      	b.n	8008784 <_printf_i+0x150>
 8008662:	0025      	movs	r5, r4
 8008664:	3542      	adds	r5, #66	@ 0x42
 8008666:	702a      	strb	r2, [r5, #0]
 8008668:	e022      	b.n	80086b0 <_printf_i+0x7c>
 800866a:	0010      	movs	r0, r2
 800866c:	3863      	subs	r0, #99	@ 0x63
 800866e:	2815      	cmp	r0, #21
 8008670:	d8f7      	bhi.n	8008662 <_printf_i+0x2e>
 8008672:	f7f7 fd57 	bl	8000124 <__gnu_thumb1_case_shi>
 8008676:	0016      	.short	0x0016
 8008678:	fff6001f 	.word	0xfff6001f
 800867c:	fff6fff6 	.word	0xfff6fff6
 8008680:	001ffff6 	.word	0x001ffff6
 8008684:	fff6fff6 	.word	0xfff6fff6
 8008688:	fff6fff6 	.word	0xfff6fff6
 800868c:	003600a1 	.word	0x003600a1
 8008690:	fff60080 	.word	0xfff60080
 8008694:	00b2fff6 	.word	0x00b2fff6
 8008698:	0036fff6 	.word	0x0036fff6
 800869c:	fff6fff6 	.word	0xfff6fff6
 80086a0:	0084      	.short	0x0084
 80086a2:	0025      	movs	r5, r4
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	3542      	adds	r5, #66	@ 0x42
 80086a8:	1d11      	adds	r1, r2, #4
 80086aa:	6019      	str	r1, [r3, #0]
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	702b      	strb	r3, [r5, #0]
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0a0      	b.n	80087f6 <_printf_i+0x1c2>
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	6809      	ldr	r1, [r1, #0]
 80086b8:	1d02      	adds	r2, r0, #4
 80086ba:	060d      	lsls	r5, r1, #24
 80086bc:	d50b      	bpl.n	80086d6 <_printf_i+0xa2>
 80086be:	6806      	ldr	r6, [r0, #0]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	da03      	bge.n	80086ce <_printf_i+0x9a>
 80086c6:	232d      	movs	r3, #45	@ 0x2d
 80086c8:	9a03      	ldr	r2, [sp, #12]
 80086ca:	4276      	negs	r6, r6
 80086cc:	7013      	strb	r3, [r2, #0]
 80086ce:	4b5e      	ldr	r3, [pc, #376]	@ (8008848 <_printf_i+0x214>)
 80086d0:	270a      	movs	r7, #10
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	e018      	b.n	8008708 <_printf_i+0xd4>
 80086d6:	6806      	ldr	r6, [r0, #0]
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	0649      	lsls	r1, r1, #25
 80086dc:	d5f1      	bpl.n	80086c2 <_printf_i+0x8e>
 80086de:	b236      	sxth	r6, r6
 80086e0:	e7ef      	b.n	80086c2 <_printf_i+0x8e>
 80086e2:	6808      	ldr	r0, [r1, #0]
 80086e4:	6819      	ldr	r1, [r3, #0]
 80086e6:	c940      	ldmia	r1!, {r6}
 80086e8:	0605      	lsls	r5, r0, #24
 80086ea:	d402      	bmi.n	80086f2 <_printf_i+0xbe>
 80086ec:	0640      	lsls	r0, r0, #25
 80086ee:	d500      	bpl.n	80086f2 <_printf_i+0xbe>
 80086f0:	b2b6      	uxth	r6, r6
 80086f2:	6019      	str	r1, [r3, #0]
 80086f4:	4b54      	ldr	r3, [pc, #336]	@ (8008848 <_printf_i+0x214>)
 80086f6:	270a      	movs	r7, #10
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80086fc:	d100      	bne.n	8008700 <_printf_i+0xcc>
 80086fe:	3f02      	subs	r7, #2
 8008700:	0023      	movs	r3, r4
 8008702:	2200      	movs	r2, #0
 8008704:	3343      	adds	r3, #67	@ 0x43
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	60a3      	str	r3, [r4, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	db03      	blt.n	8008718 <_printf_i+0xe4>
 8008710:	2104      	movs	r1, #4
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	438a      	bics	r2, r1
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	2e00      	cmp	r6, #0
 800871a:	d102      	bne.n	8008722 <_printf_i+0xee>
 800871c:	9d03      	ldr	r5, [sp, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <_printf_i+0x108>
 8008722:	9d03      	ldr	r5, [sp, #12]
 8008724:	0030      	movs	r0, r6
 8008726:	0039      	movs	r1, r7
 8008728:	f7f7 fd8c 	bl	8000244 <__aeabi_uidivmod>
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	3d01      	subs	r5, #1
 8008730:	5c5b      	ldrb	r3, [r3, r1]
 8008732:	702b      	strb	r3, [r5, #0]
 8008734:	0033      	movs	r3, r6
 8008736:	0006      	movs	r6, r0
 8008738:	429f      	cmp	r7, r3
 800873a:	d9f3      	bls.n	8008724 <_printf_i+0xf0>
 800873c:	2f08      	cmp	r7, #8
 800873e:	d109      	bne.n	8008754 <_printf_i+0x120>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	07db      	lsls	r3, r3, #31
 8008744:	d506      	bpl.n	8008754 <_printf_i+0x120>
 8008746:	6862      	ldr	r2, [r4, #4]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	dc02      	bgt.n	8008754 <_printf_i+0x120>
 800874e:	2330      	movs	r3, #48	@ 0x30
 8008750:	3d01      	subs	r5, #1
 8008752:	702b      	strb	r3, [r5, #0]
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	1b5b      	subs	r3, r3, r5
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	9b07      	ldr	r3, [sp, #28]
 800875c:	0021      	movs	r1, r4
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	9805      	ldr	r0, [sp, #20]
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	aa09      	add	r2, sp, #36	@ 0x24
 8008766:	f7ff fef5 	bl	8008554 <_printf_common>
 800876a:	3001      	adds	r0, #1
 800876c:	d148      	bne.n	8008800 <_printf_i+0x1cc>
 800876e:	2001      	movs	r0, #1
 8008770:	4240      	negs	r0, r0
 8008772:	b00b      	add	sp, #44	@ 0x2c
 8008774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008776:	2220      	movs	r2, #32
 8008778:	6809      	ldr	r1, [r1, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	2278      	movs	r2, #120	@ 0x78
 8008780:	4932      	ldr	r1, [pc, #200]	@ (800884c <_printf_i+0x218>)
 8008782:	9104      	str	r1, [sp, #16]
 8008784:	0021      	movs	r1, r4
 8008786:	3145      	adds	r1, #69	@ 0x45
 8008788:	700a      	strb	r2, [r1, #0]
 800878a:	6819      	ldr	r1, [r3, #0]
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	c940      	ldmia	r1!, {r6}
 8008790:	0610      	lsls	r0, r2, #24
 8008792:	d402      	bmi.n	800879a <_printf_i+0x166>
 8008794:	0650      	lsls	r0, r2, #25
 8008796:	d500      	bpl.n	800879a <_printf_i+0x166>
 8008798:	b2b6      	uxth	r6, r6
 800879a:	6019      	str	r1, [r3, #0]
 800879c:	07d3      	lsls	r3, r2, #31
 800879e:	d502      	bpl.n	80087a6 <_printf_i+0x172>
 80087a0:	2320      	movs	r3, #32
 80087a2:	4313      	orrs	r3, r2
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	d001      	beq.n	80087ae <_printf_i+0x17a>
 80087aa:	2710      	movs	r7, #16
 80087ac:	e7a8      	b.n	8008700 <_printf_i+0xcc>
 80087ae:	2220      	movs	r2, #32
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	4393      	bics	r3, r2
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	e7f8      	b.n	80087aa <_printf_i+0x176>
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	680d      	ldr	r5, [r1, #0]
 80087bc:	1d10      	adds	r0, r2, #4
 80087be:	6949      	ldr	r1, [r1, #20]
 80087c0:	6018      	str	r0, [r3, #0]
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	062e      	lsls	r6, r5, #24
 80087c6:	d501      	bpl.n	80087cc <_printf_i+0x198>
 80087c8:	6019      	str	r1, [r3, #0]
 80087ca:	e002      	b.n	80087d2 <_printf_i+0x19e>
 80087cc:	066d      	lsls	r5, r5, #25
 80087ce:	d5fb      	bpl.n	80087c8 <_printf_i+0x194>
 80087d0:	8019      	strh	r1, [r3, #0]
 80087d2:	2300      	movs	r3, #0
 80087d4:	9d03      	ldr	r5, [sp, #12]
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	e7bf      	b.n	800875a <_printf_i+0x126>
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	1d11      	adds	r1, r2, #4
 80087de:	6019      	str	r1, [r3, #0]
 80087e0:	6815      	ldr	r5, [r2, #0]
 80087e2:	2100      	movs	r1, #0
 80087e4:	0028      	movs	r0, r5
 80087e6:	6862      	ldr	r2, [r4, #4]
 80087e8:	f000 f9df 	bl	8008baa <memchr>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d001      	beq.n	80087f4 <_printf_i+0x1c0>
 80087f0:	1b40      	subs	r0, r0, r5
 80087f2:	6060      	str	r0, [r4, #4]
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	2300      	movs	r3, #0
 80087fa:	9a03      	ldr	r2, [sp, #12]
 80087fc:	7013      	strb	r3, [r2, #0]
 80087fe:	e7ac      	b.n	800875a <_printf_i+0x126>
 8008800:	002a      	movs	r2, r5
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	9906      	ldr	r1, [sp, #24]
 8008806:	9805      	ldr	r0, [sp, #20]
 8008808:	9d07      	ldr	r5, [sp, #28]
 800880a:	47a8      	blx	r5
 800880c:	3001      	adds	r0, #1
 800880e:	d0ae      	beq.n	800876e <_printf_i+0x13a>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	079b      	lsls	r3, r3, #30
 8008814:	d415      	bmi.n	8008842 <_printf_i+0x20e>
 8008816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008818:	68e0      	ldr	r0, [r4, #12]
 800881a:	4298      	cmp	r0, r3
 800881c:	daa9      	bge.n	8008772 <_printf_i+0x13e>
 800881e:	0018      	movs	r0, r3
 8008820:	e7a7      	b.n	8008772 <_printf_i+0x13e>
 8008822:	0022      	movs	r2, r4
 8008824:	2301      	movs	r3, #1
 8008826:	9906      	ldr	r1, [sp, #24]
 8008828:	9805      	ldr	r0, [sp, #20]
 800882a:	9e07      	ldr	r6, [sp, #28]
 800882c:	3219      	adds	r2, #25
 800882e:	47b0      	blx	r6
 8008830:	3001      	adds	r0, #1
 8008832:	d09c      	beq.n	800876e <_printf_i+0x13a>
 8008834:	3501      	adds	r5, #1
 8008836:	68e3      	ldr	r3, [r4, #12]
 8008838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	42ab      	cmp	r3, r5
 800883e:	dcf0      	bgt.n	8008822 <_printf_i+0x1ee>
 8008840:	e7e9      	b.n	8008816 <_printf_i+0x1e2>
 8008842:	2500      	movs	r5, #0
 8008844:	e7f7      	b.n	8008836 <_printf_i+0x202>
 8008846:	46c0      	nop			@ (mov r8, r8)
 8008848:	0800ab32 	.word	0x0800ab32
 800884c:	0800ab43 	.word	0x0800ab43

08008850 <std>:
 8008850:	2300      	movs	r3, #0
 8008852:	b510      	push	{r4, lr}
 8008854:	0004      	movs	r4, r0
 8008856:	6003      	str	r3, [r0, #0]
 8008858:	6043      	str	r3, [r0, #4]
 800885a:	6083      	str	r3, [r0, #8]
 800885c:	8181      	strh	r1, [r0, #12]
 800885e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008860:	81c2      	strh	r2, [r0, #14]
 8008862:	6103      	str	r3, [r0, #16]
 8008864:	6143      	str	r3, [r0, #20]
 8008866:	6183      	str	r3, [r0, #24]
 8008868:	0019      	movs	r1, r3
 800886a:	2208      	movs	r2, #8
 800886c:	305c      	adds	r0, #92	@ 0x5c
 800886e:	f000 f8ff 	bl	8008a70 <memset>
 8008872:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <std+0x50>)
 8008874:	6224      	str	r4, [r4, #32]
 8008876:	6263      	str	r3, [r4, #36]	@ 0x24
 8008878:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <std+0x54>)
 800887a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800887c:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <std+0x58>)
 800887e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008880:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <std+0x5c>)
 8008882:	6323      	str	r3, [r4, #48]	@ 0x30
 8008884:	4b0a      	ldr	r3, [pc, #40]	@ (80088b0 <std+0x60>)
 8008886:	429c      	cmp	r4, r3
 8008888:	d005      	beq.n	8008896 <std+0x46>
 800888a:	4b0a      	ldr	r3, [pc, #40]	@ (80088b4 <std+0x64>)
 800888c:	429c      	cmp	r4, r3
 800888e:	d002      	beq.n	8008896 <std+0x46>
 8008890:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <std+0x68>)
 8008892:	429c      	cmp	r4, r3
 8008894:	d103      	bne.n	800889e <std+0x4e>
 8008896:	0020      	movs	r0, r4
 8008898:	3058      	adds	r0, #88	@ 0x58
 800889a:	f000 f983 	bl	8008ba4 <__retarget_lock_init_recursive>
 800889e:	bd10      	pop	{r4, pc}
 80088a0:	080089d9 	.word	0x080089d9
 80088a4:	08008a01 	.word	0x08008a01
 80088a8:	08008a39 	.word	0x08008a39
 80088ac:	08008a65 	.word	0x08008a65
 80088b0:	20000590 	.word	0x20000590
 80088b4:	200005f8 	.word	0x200005f8
 80088b8:	20000660 	.word	0x20000660

080088bc <stdio_exit_handler>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4a03      	ldr	r2, [pc, #12]	@ (80088cc <stdio_exit_handler+0x10>)
 80088c0:	4903      	ldr	r1, [pc, #12]	@ (80088d0 <stdio_exit_handler+0x14>)
 80088c2:	4804      	ldr	r0, [pc, #16]	@ (80088d4 <stdio_exit_handler+0x18>)
 80088c4:	f000 f86c 	bl	80089a0 <_fwalk_sglue>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	20000018 	.word	0x20000018
 80088d0:	0800a325 	.word	0x0800a325
 80088d4:	20000028 	.word	0x20000028

080088d8 <cleanup_stdio>:
 80088d8:	6841      	ldr	r1, [r0, #4]
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <cleanup_stdio+0x30>)
 80088dc:	b510      	push	{r4, lr}
 80088de:	0004      	movs	r4, r0
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d001      	beq.n	80088e8 <cleanup_stdio+0x10>
 80088e4:	f001 fd1e 	bl	800a324 <_fflush_r>
 80088e8:	68a1      	ldr	r1, [r4, #8]
 80088ea:	4b08      	ldr	r3, [pc, #32]	@ (800890c <cleanup_stdio+0x34>)
 80088ec:	4299      	cmp	r1, r3
 80088ee:	d002      	beq.n	80088f6 <cleanup_stdio+0x1e>
 80088f0:	0020      	movs	r0, r4
 80088f2:	f001 fd17 	bl	800a324 <_fflush_r>
 80088f6:	68e1      	ldr	r1, [r4, #12]
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <cleanup_stdio+0x38>)
 80088fa:	4299      	cmp	r1, r3
 80088fc:	d002      	beq.n	8008904 <cleanup_stdio+0x2c>
 80088fe:	0020      	movs	r0, r4
 8008900:	f001 fd10 	bl	800a324 <_fflush_r>
 8008904:	bd10      	pop	{r4, pc}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	20000590 	.word	0x20000590
 800890c:	200005f8 	.word	0x200005f8
 8008910:	20000660 	.word	0x20000660

08008914 <global_stdio_init.part.0>:
 8008914:	b510      	push	{r4, lr}
 8008916:	4b09      	ldr	r3, [pc, #36]	@ (800893c <global_stdio_init.part.0+0x28>)
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <global_stdio_init.part.0+0x2c>)
 800891a:	2104      	movs	r1, #4
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	4809      	ldr	r0, [pc, #36]	@ (8008944 <global_stdio_init.part.0+0x30>)
 8008920:	2200      	movs	r2, #0
 8008922:	f7ff ff95 	bl	8008850 <std>
 8008926:	2201      	movs	r2, #1
 8008928:	2109      	movs	r1, #9
 800892a:	4807      	ldr	r0, [pc, #28]	@ (8008948 <global_stdio_init.part.0+0x34>)
 800892c:	f7ff ff90 	bl	8008850 <std>
 8008930:	2202      	movs	r2, #2
 8008932:	2112      	movs	r1, #18
 8008934:	4805      	ldr	r0, [pc, #20]	@ (800894c <global_stdio_init.part.0+0x38>)
 8008936:	f7ff ff8b 	bl	8008850 <std>
 800893a:	bd10      	pop	{r4, pc}
 800893c:	200006c8 	.word	0x200006c8
 8008940:	080088bd 	.word	0x080088bd
 8008944:	20000590 	.word	0x20000590
 8008948:	200005f8 	.word	0x200005f8
 800894c:	20000660 	.word	0x20000660

08008950 <__sfp_lock_acquire>:
 8008950:	b510      	push	{r4, lr}
 8008952:	4802      	ldr	r0, [pc, #8]	@ (800895c <__sfp_lock_acquire+0xc>)
 8008954:	f000 f927 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	200006d1 	.word	0x200006d1

08008960 <__sfp_lock_release>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4802      	ldr	r0, [pc, #8]	@ (800896c <__sfp_lock_release+0xc>)
 8008964:	f000 f920 	bl	8008ba8 <__retarget_lock_release_recursive>
 8008968:	bd10      	pop	{r4, pc}
 800896a:	46c0      	nop			@ (mov r8, r8)
 800896c:	200006d1 	.word	0x200006d1

08008970 <__sinit>:
 8008970:	b510      	push	{r4, lr}
 8008972:	0004      	movs	r4, r0
 8008974:	f7ff ffec 	bl	8008950 <__sfp_lock_acquire>
 8008978:	6a23      	ldr	r3, [r4, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <__sinit+0x14>
 800897e:	f7ff ffef 	bl	8008960 <__sfp_lock_release>
 8008982:	bd10      	pop	{r4, pc}
 8008984:	4b04      	ldr	r3, [pc, #16]	@ (8008998 <__sinit+0x28>)
 8008986:	6223      	str	r3, [r4, #32]
 8008988:	4b04      	ldr	r3, [pc, #16]	@ (800899c <__sinit+0x2c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f6      	bne.n	800897e <__sinit+0xe>
 8008990:	f7ff ffc0 	bl	8008914 <global_stdio_init.part.0>
 8008994:	e7f3      	b.n	800897e <__sinit+0xe>
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	080088d9 	.word	0x080088d9
 800899c:	200006c8 	.word	0x200006c8

080089a0 <_fwalk_sglue>:
 80089a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089a2:	0014      	movs	r4, r2
 80089a4:	2600      	movs	r6, #0
 80089a6:	9000      	str	r0, [sp, #0]
 80089a8:	9101      	str	r1, [sp, #4]
 80089aa:	68a5      	ldr	r5, [r4, #8]
 80089ac:	6867      	ldr	r7, [r4, #4]
 80089ae:	3f01      	subs	r7, #1
 80089b0:	d504      	bpl.n	80089bc <_fwalk_sglue+0x1c>
 80089b2:	6824      	ldr	r4, [r4, #0]
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d1f8      	bne.n	80089aa <_fwalk_sglue+0xa>
 80089b8:	0030      	movs	r0, r6
 80089ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089bc:	89ab      	ldrh	r3, [r5, #12]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d908      	bls.n	80089d4 <_fwalk_sglue+0x34>
 80089c2:	220e      	movs	r2, #14
 80089c4:	5eab      	ldrsh	r3, [r5, r2]
 80089c6:	3301      	adds	r3, #1
 80089c8:	d004      	beq.n	80089d4 <_fwalk_sglue+0x34>
 80089ca:	0029      	movs	r1, r5
 80089cc:	9800      	ldr	r0, [sp, #0]
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	4798      	blx	r3
 80089d2:	4306      	orrs	r6, r0
 80089d4:	3568      	adds	r5, #104	@ 0x68
 80089d6:	e7ea      	b.n	80089ae <_fwalk_sglue+0xe>

080089d8 <__sread>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	000c      	movs	r4, r1
 80089dc:	250e      	movs	r5, #14
 80089de:	5f49      	ldrsh	r1, [r1, r5]
 80089e0:	f000 f88e 	bl	8008b00 <_read_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	db03      	blt.n	80089f0 <__sread+0x18>
 80089e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80089ea:	181b      	adds	r3, r3, r0
 80089ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	4a02      	ldr	r2, [pc, #8]	@ (80089fc <__sread+0x24>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	e7f9      	b.n	80089ee <__sread+0x16>
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	ffffefff 	.word	0xffffefff

08008a00 <__swrite>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	001f      	movs	r7, r3
 8008a04:	898b      	ldrh	r3, [r1, #12]
 8008a06:	0005      	movs	r5, r0
 8008a08:	000c      	movs	r4, r1
 8008a0a:	0016      	movs	r6, r2
 8008a0c:	05db      	lsls	r3, r3, #23
 8008a0e:	d505      	bpl.n	8008a1c <__swrite+0x1c>
 8008a10:	230e      	movs	r3, #14
 8008a12:	5ec9      	ldrsh	r1, [r1, r3]
 8008a14:	2200      	movs	r2, #0
 8008a16:	2302      	movs	r3, #2
 8008a18:	f000 f85e 	bl	8008ad8 <_lseek_r>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	4a05      	ldr	r2, [pc, #20]	@ (8008a34 <__swrite+0x34>)
 8008a20:	0028      	movs	r0, r5
 8008a22:	4013      	ands	r3, r2
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	0032      	movs	r2, r6
 8008a28:	230e      	movs	r3, #14
 8008a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8008a2c:	003b      	movs	r3, r7
 8008a2e:	f000 f87b 	bl	8008b28 <_write_r>
 8008a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a34:	ffffefff 	.word	0xffffefff

08008a38 <__sseek>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	000c      	movs	r4, r1
 8008a3c:	250e      	movs	r5, #14
 8008a3e:	5f49      	ldrsh	r1, [r1, r5]
 8008a40:	f000 f84a 	bl	8008ad8 <_lseek_r>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	1c42      	adds	r2, r0, #1
 8008a48:	d103      	bne.n	8008a52 <__sseek+0x1a>
 8008a4a:	4a05      	ldr	r2, [pc, #20]	@ (8008a60 <__sseek+0x28>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
 8008a52:	2280      	movs	r2, #128	@ 0x80
 8008a54:	0152      	lsls	r2, r2, #5
 8008a56:	4313      	orrs	r3, r2
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a5c:	e7f8      	b.n	8008a50 <__sseek+0x18>
 8008a5e:	46c0      	nop			@ (mov r8, r8)
 8008a60:	ffffefff 	.word	0xffffefff

08008a64 <__sclose>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	230e      	movs	r3, #14
 8008a68:	5ec9      	ldrsh	r1, [r1, r3]
 8008a6a:	f000 f823 	bl	8008ab4 <_close_r>
 8008a6e:	bd10      	pop	{r4, pc}

08008a70 <memset>:
 8008a70:	0003      	movs	r3, r0
 8008a72:	1882      	adds	r2, r0, r2
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	7019      	strb	r1, [r3, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <strstr>:
 8008a80:	780a      	ldrb	r2, [r1, #0]
 8008a82:	b530      	push	{r4, r5, lr}
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d10c      	bne.n	8008aa2 <strstr+0x22>
 8008a88:	bd30      	pop	{r4, r5, pc}
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d108      	bne.n	8008aa0 <strstr+0x20>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	5ccc      	ldrb	r4, [r1, r3]
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d0f8      	beq.n	8008a88 <strstr+0x8>
 8008a96:	5cc5      	ldrb	r5, [r0, r3]
 8008a98:	42a5      	cmp	r5, r4
 8008a9a:	d101      	bne.n	8008aa0 <strstr+0x20>
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	e7f7      	b.n	8008a90 <strstr+0x10>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	7803      	ldrb	r3, [r0, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f0      	bne.n	8008a8a <strstr+0xa>
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	e7ed      	b.n	8008a88 <strstr+0x8>

08008aac <_localeconv_r>:
 8008aac:	4800      	ldr	r0, [pc, #0]	@ (8008ab0 <_localeconv_r+0x4>)
 8008aae:	4770      	bx	lr
 8008ab0:	20000164 	.word	0x20000164

08008ab4 <_close_r>:
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	b570      	push	{r4, r5, r6, lr}
 8008ab8:	4d06      	ldr	r5, [pc, #24]	@ (8008ad4 <_close_r+0x20>)
 8008aba:	0004      	movs	r4, r0
 8008abc:	0008      	movs	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7fb f982 	bl	8003dc8 <_close>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d103      	bne.n	8008ad0 <_close_r+0x1c>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d000      	beq.n	8008ad0 <_close_r+0x1c>
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	200006cc 	.word	0x200006cc

08008ad8 <_lseek_r>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	0004      	movs	r4, r0
 8008adc:	0008      	movs	r0, r1
 8008ade:	0011      	movs	r1, r2
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4d05      	ldr	r5, [pc, #20]	@ (8008afc <_lseek_r+0x24>)
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7fb f98f 	bl	8003e0a <_lseek>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d103      	bne.n	8008af8 <_lseek_r+0x20>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d000      	beq.n	8008af8 <_lseek_r+0x20>
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	bd70      	pop	{r4, r5, r6, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	200006cc 	.word	0x200006cc

08008b00 <_read_r>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	0004      	movs	r4, r0
 8008b04:	0008      	movs	r0, r1
 8008b06:	0011      	movs	r1, r2
 8008b08:	001a      	movs	r2, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4d05      	ldr	r5, [pc, #20]	@ (8008b24 <_read_r+0x24>)
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7fb f921 	bl	8003d56 <_read>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d103      	bne.n	8008b20 <_read_r+0x20>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d000      	beq.n	8008b20 <_read_r+0x20>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	200006cc 	.word	0x200006cc

08008b28 <_write_r>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	0004      	movs	r4, r0
 8008b2c:	0008      	movs	r0, r1
 8008b2e:	0011      	movs	r1, r2
 8008b30:	001a      	movs	r2, r3
 8008b32:	2300      	movs	r3, #0
 8008b34:	4d05      	ldr	r5, [pc, #20]	@ (8008b4c <_write_r+0x24>)
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7fb f92a 	bl	8003d90 <_write>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d103      	bne.n	8008b48 <_write_r+0x20>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d000      	beq.n	8008b48 <_write_r+0x20>
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	46c0      	nop			@ (mov r8, r8)
 8008b4c:	200006cc 	.word	0x200006cc

08008b50 <__errno>:
 8008b50:	4b01      	ldr	r3, [pc, #4]	@ (8008b58 <__errno+0x8>)
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	4770      	bx	lr
 8008b56:	46c0      	nop			@ (mov r8, r8)
 8008b58:	20000024 	.word	0x20000024

08008b5c <__libc_init_array>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	2600      	movs	r6, #0
 8008b60:	4c0c      	ldr	r4, [pc, #48]	@ (8008b94 <__libc_init_array+0x38>)
 8008b62:	4d0d      	ldr	r5, [pc, #52]	@ (8008b98 <__libc_init_array+0x3c>)
 8008b64:	1b64      	subs	r4, r4, r5
 8008b66:	10a4      	asrs	r4, r4, #2
 8008b68:	42a6      	cmp	r6, r4
 8008b6a:	d109      	bne.n	8008b80 <__libc_init_array+0x24>
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	f001 ff5f 	bl	800aa30 <_init>
 8008b72:	4c0a      	ldr	r4, [pc, #40]	@ (8008b9c <__libc_init_array+0x40>)
 8008b74:	4d0a      	ldr	r5, [pc, #40]	@ (8008ba0 <__libc_init_array+0x44>)
 8008b76:	1b64      	subs	r4, r4, r5
 8008b78:	10a4      	asrs	r4, r4, #2
 8008b7a:	42a6      	cmp	r6, r4
 8008b7c:	d105      	bne.n	8008b8a <__libc_init_array+0x2e>
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	00b3      	lsls	r3, r6, #2
 8008b82:	58eb      	ldr	r3, [r5, r3]
 8008b84:	4798      	blx	r3
 8008b86:	3601      	adds	r6, #1
 8008b88:	e7ee      	b.n	8008b68 <__libc_init_array+0xc>
 8008b8a:	00b3      	lsls	r3, r6, #2
 8008b8c:	58eb      	ldr	r3, [r5, r3]
 8008b8e:	4798      	blx	r3
 8008b90:	3601      	adds	r6, #1
 8008b92:	e7f2      	b.n	8008b7a <__libc_init_array+0x1e>
 8008b94:	0800ae90 	.word	0x0800ae90
 8008b98:	0800ae90 	.word	0x0800ae90
 8008b9c:	0800ae94 	.word	0x0800ae94
 8008ba0:	0800ae90 	.word	0x0800ae90

08008ba4 <__retarget_lock_init_recursive>:
 8008ba4:	4770      	bx	lr

08008ba6 <__retarget_lock_acquire_recursive>:
 8008ba6:	4770      	bx	lr

08008ba8 <__retarget_lock_release_recursive>:
 8008ba8:	4770      	bx	lr

08008baa <memchr>:
 8008baa:	b2c9      	uxtb	r1, r1
 8008bac:	1882      	adds	r2, r0, r2
 8008bae:	4290      	cmp	r0, r2
 8008bb0:	d101      	bne.n	8008bb6 <memchr+0xc>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	4770      	bx	lr
 8008bb6:	7803      	ldrb	r3, [r0, #0]
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	d0fb      	beq.n	8008bb4 <memchr+0xa>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	e7f6      	b.n	8008bae <memchr+0x4>

08008bc0 <quorem>:
 8008bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc2:	6902      	ldr	r2, [r0, #16]
 8008bc4:	690f      	ldr	r7, [r1, #16]
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	0006      	movs	r6, r0
 8008bca:	000b      	movs	r3, r1
 8008bcc:	2000      	movs	r0, #0
 8008bce:	9102      	str	r1, [sp, #8]
 8008bd0:	42ba      	cmp	r2, r7
 8008bd2:	db6d      	blt.n	8008cb0 <quorem+0xf0>
 8008bd4:	3f01      	subs	r7, #1
 8008bd6:	00bc      	lsls	r4, r7, #2
 8008bd8:	3314      	adds	r3, #20
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	191b      	adds	r3, r3, r4
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	0033      	movs	r3, r6
 8008be2:	3314      	adds	r3, #20
 8008be4:	191c      	adds	r4, r3, r4
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	9804      	ldr	r0, [sp, #16]
 8008bf0:	681d      	ldr	r5, [r3, #0]
 8008bf2:	3501      	adds	r5, #1
 8008bf4:	0029      	movs	r1, r5
 8008bf6:	f7f7 fa9f 	bl	8000138 <__udivsi3>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	9000      	str	r0, [sp, #0]
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	d32b      	bcc.n	8008c5a <quorem+0x9a>
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	9d01      	ldr	r5, [sp, #4]
 8008c06:	469c      	mov	ip, r3
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	4662      	mov	r2, ip
 8008c10:	ca08      	ldmia	r2!, {r3}
 8008c12:	6828      	ldr	r0, [r5, #0]
 8008c14:	4694      	mov	ip, r2
 8008c16:	9a00      	ldr	r2, [sp, #0]
 8008c18:	b299      	uxth	r1, r3
 8008c1a:	4351      	muls	r1, r2
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	1889      	adds	r1, r1, r2
 8008c22:	9a00      	ldr	r2, [sp, #0]
 8008c24:	4353      	muls	r3, r2
 8008c26:	0c0a      	lsrs	r2, r1, #16
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	0c1a      	lsrs	r2, r3, #16
 8008c2c:	b289      	uxth	r1, r1
 8008c2e:	9205      	str	r2, [sp, #20]
 8008c30:	b282      	uxth	r2, r0
 8008c32:	1a52      	subs	r2, r2, r1
 8008c34:	9904      	ldr	r1, [sp, #16]
 8008c36:	0c00      	lsrs	r0, r0, #16
 8008c38:	1852      	adds	r2, r2, r1
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	1411      	asrs	r1, r2, #16
 8008c3e:	1ac3      	subs	r3, r0, r3
 8008c40:	185b      	adds	r3, r3, r1
 8008c42:	1419      	asrs	r1, r3, #16
 8008c44:	b292      	uxth	r2, r2
 8008c46:	041b      	lsls	r3, r3, #16
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	9104      	str	r1, [sp, #16]
 8008c4e:	c504      	stmia	r5!, {r2}
 8008c50:	4563      	cmp	r3, ip
 8008c52:	d2dc      	bcs.n	8008c0e <quorem+0x4e>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d030      	beq.n	8008cbc <quorem+0xfc>
 8008c5a:	0030      	movs	r0, r6
 8008c5c:	9902      	ldr	r1, [sp, #8]
 8008c5e:	f001 f9c5 	bl	8009fec <__mcmp>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	db23      	blt.n	8008cae <quorem+0xee>
 8008c66:	0034      	movs	r4, r6
 8008c68:	2500      	movs	r5, #0
 8008c6a:	9902      	ldr	r1, [sp, #8]
 8008c6c:	3414      	adds	r4, #20
 8008c6e:	3114      	adds	r1, #20
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	c901      	ldmia	r1!, {r0}
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	466b      	mov	r3, sp
 8008c78:	891b      	ldrh	r3, [r3, #8]
 8008c7a:	b282      	uxth	r2, r0
 8008c7c:	1a9a      	subs	r2, r3, r2
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	1952      	adds	r2, r2, r5
 8008c82:	0c00      	lsrs	r0, r0, #16
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	1a1b      	subs	r3, r3, r0
 8008c88:	1410      	asrs	r0, r2, #16
 8008c8a:	181b      	adds	r3, r3, r0
 8008c8c:	141d      	asrs	r5, r3, #16
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	431a      	orrs	r2, r3
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	c404      	stmia	r4!, {r2}
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	d2e9      	bcs.n	8008c70 <quorem+0xb0>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	00bb      	lsls	r3, r7, #2
 8008ca0:	18d3      	adds	r3, r2, r3
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	d013      	beq.n	8008cd0 <quorem+0x110>
 8008ca8:	9b00      	ldr	r3, [sp, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	9800      	ldr	r0, [sp, #0]
 8008cb0:	b007      	add	sp, #28
 8008cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <quorem+0x104>
 8008cba:	3f01      	subs	r7, #1
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	3c04      	subs	r4, #4
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	d3f7      	bcc.n	8008cb4 <quorem+0xf4>
 8008cc4:	6137      	str	r7, [r6, #16]
 8008cc6:	e7c8      	b.n	8008c5a <quorem+0x9a>
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d104      	bne.n	8008cd8 <quorem+0x118>
 8008cce:	3f01      	subs	r7, #1
 8008cd0:	9a01      	ldr	r2, [sp, #4]
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d3f7      	bcc.n	8008cc8 <quorem+0x108>
 8008cd8:	6137      	str	r7, [r6, #16]
 8008cda:	e7e5      	b.n	8008ca8 <quorem+0xe8>

08008cdc <_dtoa_r>:
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	0014      	movs	r4, r2
 8008ce0:	001d      	movs	r5, r3
 8008ce2:	69c6      	ldr	r6, [r0, #28]
 8008ce4:	b09d      	sub	sp, #116	@ 0x74
 8008ce6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ce8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008cea:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008cec:	9003      	str	r0, [sp, #12]
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	d10f      	bne.n	8008d12 <_dtoa_r+0x36>
 8008cf2:	2010      	movs	r0, #16
 8008cf4:	f000 fe30 	bl	8009958 <malloc>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	1e02      	subs	r2, r0, #0
 8008cfc:	61d8      	str	r0, [r3, #28]
 8008cfe:	d104      	bne.n	8008d0a <_dtoa_r+0x2e>
 8008d00:	21ef      	movs	r1, #239	@ 0xef
 8008d02:	4bc7      	ldr	r3, [pc, #796]	@ (8009020 <_dtoa_r+0x344>)
 8008d04:	48c7      	ldr	r0, [pc, #796]	@ (8009024 <_dtoa_r+0x348>)
 8008d06:	f001 fb55 	bl	800a3b4 <__assert_func>
 8008d0a:	6046      	str	r6, [r0, #4]
 8008d0c:	6086      	str	r6, [r0, #8]
 8008d0e:	6006      	str	r6, [r0, #0]
 8008d10:	60c6      	str	r6, [r0, #12]
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	d00b      	beq.n	8008d34 <_dtoa_r+0x58>
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4093      	lsls	r3, r2
 8008d22:	604a      	str	r2, [r1, #4]
 8008d24:	608b      	str	r3, [r1, #8]
 8008d26:	9803      	ldr	r0, [sp, #12]
 8008d28:	f000 ff16 	bl	8009b58 <_Bfree>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	da1e      	bge.n	8008d76 <_dtoa_r+0x9a>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	006b      	lsls	r3, r5, #1
 8008d3e:	085b      	lsrs	r3, r3, #1
 8008d40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d42:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008d44:	4bb8      	ldr	r3, [pc, #736]	@ (8009028 <_dtoa_r+0x34c>)
 8008d46:	4ab8      	ldr	r2, [pc, #736]	@ (8009028 <_dtoa_r+0x34c>)
 8008d48:	403b      	ands	r3, r7
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d116      	bne.n	8008d7c <_dtoa_r+0xa0>
 8008d4e:	4bb7      	ldr	r3, [pc, #732]	@ (800902c <_dtoa_r+0x350>)
 8008d50:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	033b      	lsls	r3, r7, #12
 8008d56:	0b1b      	lsrs	r3, r3, #12
 8008d58:	4323      	orrs	r3, r4
 8008d5a:	d101      	bne.n	8008d60 <_dtoa_r+0x84>
 8008d5c:	f000 fd83 	bl	8009866 <_dtoa_r+0xb8a>
 8008d60:	4bb3      	ldr	r3, [pc, #716]	@ (8009030 <_dtoa_r+0x354>)
 8008d62:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	d002      	beq.n	8008d70 <_dtoa_r+0x94>
 8008d6a:	4bb2      	ldr	r3, [pc, #712]	@ (8009034 <_dtoa_r+0x358>)
 8008d6c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	9808      	ldr	r0, [sp, #32]
 8008d72:	b01d      	add	sp, #116	@ 0x74
 8008d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d76:	2300      	movs	r3, #0
 8008d78:	603b      	str	r3, [r7, #0]
 8008d7a:	e7e2      	b.n	8008d42 <_dtoa_r+0x66>
 8008d7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d80:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fb5a 	bl	8000444 <__aeabi_dcmpeq>
 8008d90:	1e06      	subs	r6, r0, #0
 8008d92:	d00b      	beq.n	8008dac <_dtoa_r+0xd0>
 8008d94:	2301      	movs	r3, #1
 8008d96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <_dtoa_r+0xca>
 8008da0:	4ba5      	ldr	r3, [pc, #660]	@ (8009038 <_dtoa_r+0x35c>)
 8008da2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	4ba5      	ldr	r3, [pc, #660]	@ (800903c <_dtoa_r+0x360>)
 8008da8:	9308      	str	r3, [sp, #32]
 8008daa:	e7e1      	b.n	8008d70 <_dtoa_r+0x94>
 8008dac:	ab1a      	add	r3, sp, #104	@ 0x68
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	9803      	ldr	r0, [sp, #12]
 8008db6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008db8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dba:	f001 f9cd 	bl	800a158 <__d2b>
 8008dbe:	007a      	lsls	r2, r7, #1
 8008dc0:	9005      	str	r0, [sp, #20]
 8008dc2:	0d52      	lsrs	r2, r2, #21
 8008dc4:	d100      	bne.n	8008dc8 <_dtoa_r+0xec>
 8008dc6:	e07b      	b.n	8008ec0 <_dtoa_r+0x1e4>
 8008dc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dca:	9618      	str	r6, [sp, #96]	@ 0x60
 8008dcc:	0319      	lsls	r1, r3, #12
 8008dce:	4b9c      	ldr	r3, [pc, #624]	@ (8009040 <_dtoa_r+0x364>)
 8008dd0:	0b09      	lsrs	r1, r1, #12
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	499b      	ldr	r1, [pc, #620]	@ (8009044 <_dtoa_r+0x368>)
 8008dd6:	1857      	adds	r7, r2, r1
 8008dd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008dda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008ddc:	0019      	movs	r1, r3
 8008dde:	2200      	movs	r2, #0
 8008de0:	4b99      	ldr	r3, [pc, #612]	@ (8009048 <_dtoa_r+0x36c>)
 8008de2:	f7f9 f899 	bl	8001f18 <__aeabi_dsub>
 8008de6:	4a99      	ldr	r2, [pc, #612]	@ (800904c <_dtoa_r+0x370>)
 8008de8:	4b99      	ldr	r3, [pc, #612]	@ (8009050 <_dtoa_r+0x374>)
 8008dea:	f7f8 fdcd 	bl	8001988 <__aeabi_dmul>
 8008dee:	4a99      	ldr	r2, [pc, #612]	@ (8009054 <_dtoa_r+0x378>)
 8008df0:	4b99      	ldr	r3, [pc, #612]	@ (8009058 <_dtoa_r+0x37c>)
 8008df2:	f7f7 fe21 	bl	8000a38 <__aeabi_dadd>
 8008df6:	0004      	movs	r4, r0
 8008df8:	0038      	movs	r0, r7
 8008dfa:	000d      	movs	r5, r1
 8008dfc:	f7f9 fc86 	bl	800270c <__aeabi_i2d>
 8008e00:	4a96      	ldr	r2, [pc, #600]	@ (800905c <_dtoa_r+0x380>)
 8008e02:	4b97      	ldr	r3, [pc, #604]	@ (8009060 <_dtoa_r+0x384>)
 8008e04:	f7f8 fdc0 	bl	8001988 <__aeabi_dmul>
 8008e08:	0002      	movs	r2, r0
 8008e0a:	000b      	movs	r3, r1
 8008e0c:	0020      	movs	r0, r4
 8008e0e:	0029      	movs	r1, r5
 8008e10:	f7f7 fe12 	bl	8000a38 <__aeabi_dadd>
 8008e14:	0004      	movs	r4, r0
 8008e16:	000d      	movs	r5, r1
 8008e18:	f7f9 fc3c 	bl	8002694 <__aeabi_d2iz>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	9004      	str	r0, [sp, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	0020      	movs	r0, r4
 8008e24:	0029      	movs	r1, r5
 8008e26:	f7f7 fb13 	bl	8000450 <__aeabi_dcmplt>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d00b      	beq.n	8008e46 <_dtoa_r+0x16a>
 8008e2e:	9804      	ldr	r0, [sp, #16]
 8008e30:	f7f9 fc6c 	bl	800270c <__aeabi_i2d>
 8008e34:	002b      	movs	r3, r5
 8008e36:	0022      	movs	r2, r4
 8008e38:	f7f7 fb04 	bl	8000444 <__aeabi_dcmpeq>
 8008e3c:	4243      	negs	r3, r0
 8008e3e:	4158      	adcs	r0, r3
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	1a1b      	subs	r3, r3, r0
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	2301      	movs	r3, #1
 8008e48:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	2b16      	cmp	r3, #22
 8008e4e:	d810      	bhi.n	8008e72 <_dtoa_r+0x196>
 8008e50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008e52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e54:	9a04      	ldr	r2, [sp, #16]
 8008e56:	4b83      	ldr	r3, [pc, #524]	@ (8009064 <_dtoa_r+0x388>)
 8008e58:	00d2      	lsls	r2, r2, #3
 8008e5a:	189b      	adds	r3, r3, r2
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f7f7 faf6 	bl	8000450 <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d047      	beq.n	8008ef8 <_dtoa_r+0x21c>
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e72:	2200      	movs	r2, #0
 8008e74:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008e76:	9206      	str	r2, [sp, #24]
 8008e78:	1bdb      	subs	r3, r3, r7
 8008e7a:	1e5a      	subs	r2, r3, #1
 8008e7c:	d53e      	bpl.n	8008efc <_dtoa_r+0x220>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	9306      	str	r3, [sp, #24]
 8008e84:	2300      	movs	r3, #0
 8008e86:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e88:	9b04      	ldr	r3, [sp, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	db38      	blt.n	8008f00 <_dtoa_r+0x224>
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e92:	4694      	mov	ip, r2
 8008e94:	4463      	add	r3, ip
 8008e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ea0:	2401      	movs	r4, #1
 8008ea2:	2b09      	cmp	r3, #9
 8008ea4:	d867      	bhi.n	8008f76 <_dtoa_r+0x29a>
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	dd02      	ble.n	8008eb0 <_dtoa_r+0x1d4>
 8008eaa:	2400      	movs	r4, #0
 8008eac:	3b04      	subs	r3, #4
 8008eae:	9322      	str	r3, [sp, #136]	@ 0x88
 8008eb0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008eb2:	1e98      	subs	r0, r3, #2
 8008eb4:	2803      	cmp	r0, #3
 8008eb6:	d867      	bhi.n	8008f88 <_dtoa_r+0x2ac>
 8008eb8:	f7f7 f92a 	bl	8000110 <__gnu_thumb1_case_uqi>
 8008ebc:	5b383a2b 	.word	0x5b383a2b
 8008ec0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008ec2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008ec4:	18f6      	adds	r6, r6, r3
 8008ec6:	4b68      	ldr	r3, [pc, #416]	@ (8009068 <_dtoa_r+0x38c>)
 8008ec8:	18f2      	adds	r2, r6, r3
 8008eca:	2a20      	cmp	r2, #32
 8008ecc:	dd0f      	ble.n	8008eee <_dtoa_r+0x212>
 8008ece:	2340      	movs	r3, #64	@ 0x40
 8008ed0:	1a9b      	subs	r3, r3, r2
 8008ed2:	409f      	lsls	r7, r3
 8008ed4:	4b65      	ldr	r3, [pc, #404]	@ (800906c <_dtoa_r+0x390>)
 8008ed6:	0038      	movs	r0, r7
 8008ed8:	18f3      	adds	r3, r6, r3
 8008eda:	40dc      	lsrs	r4, r3
 8008edc:	4320      	orrs	r0, r4
 8008ede:	f7f9 fc43 	bl	8002768 <__aeabi_ui2d>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4b62      	ldr	r3, [pc, #392]	@ (8009070 <_dtoa_r+0x394>)
 8008ee6:	1e77      	subs	r7, r6, #1
 8008ee8:	18cb      	adds	r3, r1, r3
 8008eea:	9218      	str	r2, [sp, #96]	@ 0x60
 8008eec:	e776      	b.n	8008ddc <_dtoa_r+0x100>
 8008eee:	2320      	movs	r3, #32
 8008ef0:	0020      	movs	r0, r4
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	4098      	lsls	r0, r3
 8008ef6:	e7f2      	b.n	8008ede <_dtoa_r+0x202>
 8008ef8:	9015      	str	r0, [sp, #84]	@ 0x54
 8008efa:	e7ba      	b.n	8008e72 <_dtoa_r+0x196>
 8008efc:	920d      	str	r2, [sp, #52]	@ 0x34
 8008efe:	e7c3      	b.n	8008e88 <_dtoa_r+0x1ac>
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	9306      	str	r3, [sp, #24]
 8008f08:	4253      	negs	r3, r2
 8008f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008f10:	e7c5      	b.n	8008e9e <_dtoa_r+0x1c2>
 8008f12:	2300      	movs	r3, #0
 8008f14:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f18:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dc13      	bgt.n	8008f48 <_dtoa_r+0x26c>
 8008f20:	2301      	movs	r3, #1
 8008f22:	001a      	movs	r2, r3
 8008f24:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f28:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008f2a:	e00d      	b.n	8008f48 <_dtoa_r+0x26c>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f1      	b.n	8008f14 <_dtoa_r+0x238>
 8008f30:	2300      	movs	r3, #0
 8008f32:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f34:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f36:	4694      	mov	ip, r2
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	4463      	add	r3, ip
 8008f3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f3e:	3301      	adds	r3, #1
 8008f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dc00      	bgt.n	8008f48 <_dtoa_r+0x26c>
 8008f46:	2301      	movs	r3, #1
 8008f48:	9a03      	ldr	r2, [sp, #12]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	69d0      	ldr	r0, [r2, #28]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	0015      	movs	r5, r2
 8008f52:	3514      	adds	r5, #20
 8008f54:	429d      	cmp	r5, r3
 8008f56:	d91b      	bls.n	8008f90 <_dtoa_r+0x2b4>
 8008f58:	6041      	str	r1, [r0, #4]
 8008f5a:	9803      	ldr	r0, [sp, #12]
 8008f5c:	f000 fdb8 	bl	8009ad0 <_Balloc>
 8008f60:	9008      	str	r0, [sp, #32]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d117      	bne.n	8008f96 <_dtoa_r+0x2ba>
 8008f66:	21b0      	movs	r1, #176	@ 0xb0
 8008f68:	4b42      	ldr	r3, [pc, #264]	@ (8009074 <_dtoa_r+0x398>)
 8008f6a:	482e      	ldr	r0, [pc, #184]	@ (8009024 <_dtoa_r+0x348>)
 8008f6c:	9a08      	ldr	r2, [sp, #32]
 8008f6e:	31ff      	adds	r1, #255	@ 0xff
 8008f70:	e6c9      	b.n	8008d06 <_dtoa_r+0x2a>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7dd      	b.n	8008f32 <_dtoa_r+0x256>
 8008f76:	2300      	movs	r3, #0
 8008f78:	9410      	str	r4, [sp, #64]	@ 0x40
 8008f7a:	9322      	str	r3, [sp, #136]	@ 0x88
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	3313      	adds	r3, #19
 8008f86:	e7cf      	b.n	8008f28 <_dtoa_r+0x24c>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f8c:	3b02      	subs	r3, #2
 8008f8e:	e7f6      	b.n	8008f7e <_dtoa_r+0x2a2>
 8008f90:	3101      	adds	r1, #1
 8008f92:	0052      	lsls	r2, r2, #1
 8008f94:	e7dc      	b.n	8008f50 <_dtoa_r+0x274>
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	9a08      	ldr	r2, [sp, #32]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	2b0e      	cmp	r3, #14
 8008fa2:	d900      	bls.n	8008fa6 <_dtoa_r+0x2ca>
 8008fa4:	e0d9      	b.n	800915a <_dtoa_r+0x47e>
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d100      	bne.n	8008fac <_dtoa_r+0x2d0>
 8008faa:	e0d6      	b.n	800915a <_dtoa_r+0x47e>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	dd64      	ble.n	800907c <_dtoa_r+0x3a0>
 8008fb2:	210f      	movs	r1, #15
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8009064 <_dtoa_r+0x388>)
 8008fb8:	400a      	ands	r2, r1
 8008fba:	00d2      	lsls	r2, r2, #3
 8008fbc:	189b      	adds	r3, r3, r2
 8008fbe:	681e      	ldr	r6, [r3, #0]
 8008fc0:	685f      	ldr	r7, [r3, #4]
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	2402      	movs	r4, #2
 8008fc6:	111d      	asrs	r5, r3, #4
 8008fc8:	05db      	lsls	r3, r3, #23
 8008fca:	d50a      	bpl.n	8008fe2 <_dtoa_r+0x306>
 8008fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8009078 <_dtoa_r+0x39c>)
 8008fce:	400d      	ands	r5, r1
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008fd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008fd8:	f7f8 f892 	bl	8001100 <__aeabi_ddiv>
 8008fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008fe0:	3401      	adds	r4, #1
 8008fe2:	4b25      	ldr	r3, [pc, #148]	@ (8009078 <_dtoa_r+0x39c>)
 8008fe4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	d108      	bne.n	8008ffc <_dtoa_r+0x320>
 8008fea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008fec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fee:	0032      	movs	r2, r6
 8008ff0:	003b      	movs	r3, r7
 8008ff2:	f7f8 f885 	bl	8001100 <__aeabi_ddiv>
 8008ff6:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ff8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ffa:	e05a      	b.n	80090b2 <_dtoa_r+0x3d6>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	421d      	tst	r5, r3
 8009000:	d009      	beq.n	8009016 <_dtoa_r+0x33a>
 8009002:	18e4      	adds	r4, r4, r3
 8009004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009006:	0030      	movs	r0, r6
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	0039      	movs	r1, r7
 800900e:	f7f8 fcbb 	bl	8001988 <__aeabi_dmul>
 8009012:	0006      	movs	r6, r0
 8009014:	000f      	movs	r7, r1
 8009016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009018:	106d      	asrs	r5, r5, #1
 800901a:	3308      	adds	r3, #8
 800901c:	e7e2      	b.n	8008fe4 <_dtoa_r+0x308>
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	0800ab61 	.word	0x0800ab61
 8009024:	0800ab78 	.word	0x0800ab78
 8009028:	7ff00000 	.word	0x7ff00000
 800902c:	0000270f 	.word	0x0000270f
 8009030:	0800ab5d 	.word	0x0800ab5d
 8009034:	0800ab60 	.word	0x0800ab60
 8009038:	0800ab31 	.word	0x0800ab31
 800903c:	0800ab30 	.word	0x0800ab30
 8009040:	3ff00000 	.word	0x3ff00000
 8009044:	fffffc01 	.word	0xfffffc01
 8009048:	3ff80000 	.word	0x3ff80000
 800904c:	636f4361 	.word	0x636f4361
 8009050:	3fd287a7 	.word	0x3fd287a7
 8009054:	8b60c8b3 	.word	0x8b60c8b3
 8009058:	3fc68a28 	.word	0x3fc68a28
 800905c:	509f79fb 	.word	0x509f79fb
 8009060:	3fd34413 	.word	0x3fd34413
 8009064:	0800ac70 	.word	0x0800ac70
 8009068:	00000432 	.word	0x00000432
 800906c:	00000412 	.word	0x00000412
 8009070:	fe100000 	.word	0xfe100000
 8009074:	0800abd0 	.word	0x0800abd0
 8009078:	0800ac48 	.word	0x0800ac48
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	2402      	movs	r4, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d016      	beq.n	80090b2 <_dtoa_r+0x3d6>
 8009084:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009086:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009088:	220f      	movs	r2, #15
 800908a:	425d      	negs	r5, r3
 800908c:	402a      	ands	r2, r5
 800908e:	4bd7      	ldr	r3, [pc, #860]	@ (80093ec <_dtoa_r+0x710>)
 8009090:	00d2      	lsls	r2, r2, #3
 8009092:	189b      	adds	r3, r3, r2
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f7f8 fc76 	bl	8001988 <__aeabi_dmul>
 800909c:	2701      	movs	r7, #1
 800909e:	2300      	movs	r3, #0
 80090a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80090a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090a4:	4ed2      	ldr	r6, [pc, #840]	@ (80093f0 <_dtoa_r+0x714>)
 80090a6:	112d      	asrs	r5, r5, #4
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	d000      	beq.n	80090ae <_dtoa_r+0x3d2>
 80090ac:	e0ba      	b.n	8009224 <_dtoa_r+0x548>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1a1      	bne.n	8008ff6 <_dtoa_r+0x31a>
 80090b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80090b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d100      	bne.n	80090be <_dtoa_r+0x3e2>
 80090bc:	e0bd      	b.n	800923a <_dtoa_r+0x55e>
 80090be:	2200      	movs	r2, #0
 80090c0:	0030      	movs	r0, r6
 80090c2:	0039      	movs	r1, r7
 80090c4:	4bcb      	ldr	r3, [pc, #812]	@ (80093f4 <_dtoa_r+0x718>)
 80090c6:	f7f7 f9c3 	bl	8000450 <__aeabi_dcmplt>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d100      	bne.n	80090d0 <_dtoa_r+0x3f4>
 80090ce:	e0b4      	b.n	800923a <_dtoa_r+0x55e>
 80090d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d100      	bne.n	80090d8 <_dtoa_r+0x3fc>
 80090d6:	e0b0      	b.n	800923a <_dtoa_r+0x55e>
 80090d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd39      	ble.n	8009152 <_dtoa_r+0x476>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	2200      	movs	r2, #0
 80090e2:	3b01      	subs	r3, #1
 80090e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090e6:	0030      	movs	r0, r6
 80090e8:	4bc3      	ldr	r3, [pc, #780]	@ (80093f8 <_dtoa_r+0x71c>)
 80090ea:	0039      	movs	r1, r7
 80090ec:	f7f8 fc4c 	bl	8001988 <__aeabi_dmul>
 80090f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80090f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090f6:	3401      	adds	r4, #1
 80090f8:	0020      	movs	r0, r4
 80090fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80090fc:	f7f9 fb06 	bl	800270c <__aeabi_i2d>
 8009100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009104:	f7f8 fc40 	bl	8001988 <__aeabi_dmul>
 8009108:	4bbc      	ldr	r3, [pc, #752]	@ (80093fc <_dtoa_r+0x720>)
 800910a:	2200      	movs	r2, #0
 800910c:	f7f7 fc94 	bl	8000a38 <__aeabi_dadd>
 8009110:	4bbb      	ldr	r3, [pc, #748]	@ (8009400 <_dtoa_r+0x724>)
 8009112:	0006      	movs	r6, r0
 8009114:	18cf      	adds	r7, r1, r3
 8009116:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009118:	2b00      	cmp	r3, #0
 800911a:	d000      	beq.n	800911e <_dtoa_r+0x442>
 800911c:	e091      	b.n	8009242 <_dtoa_r+0x566>
 800911e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009122:	2200      	movs	r2, #0
 8009124:	4bb7      	ldr	r3, [pc, #732]	@ (8009404 <_dtoa_r+0x728>)
 8009126:	f7f8 fef7 	bl	8001f18 <__aeabi_dsub>
 800912a:	0032      	movs	r2, r6
 800912c:	003b      	movs	r3, r7
 800912e:	0004      	movs	r4, r0
 8009130:	000d      	movs	r5, r1
 8009132:	f7f7 f9a1 	bl	8000478 <__aeabi_dcmpgt>
 8009136:	2800      	cmp	r0, #0
 8009138:	d000      	beq.n	800913c <_dtoa_r+0x460>
 800913a:	e29d      	b.n	8009678 <_dtoa_r+0x99c>
 800913c:	2180      	movs	r1, #128	@ 0x80
 800913e:	0609      	lsls	r1, r1, #24
 8009140:	187b      	adds	r3, r7, r1
 8009142:	0032      	movs	r2, r6
 8009144:	0020      	movs	r0, r4
 8009146:	0029      	movs	r1, r5
 8009148:	f7f7 f982 	bl	8000450 <__aeabi_dcmplt>
 800914c:	2800      	cmp	r0, #0
 800914e:	d000      	beq.n	8009152 <_dtoa_r+0x476>
 8009150:	e130      	b.n	80093b4 <_dtoa_r+0x6d8>
 8009152:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009154:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009156:	930a      	str	r3, [sp, #40]	@ 0x28
 8009158:	940b      	str	r4, [sp, #44]	@ 0x2c
 800915a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800915c:	2b00      	cmp	r3, #0
 800915e:	da00      	bge.n	8009162 <_dtoa_r+0x486>
 8009160:	e177      	b.n	8009452 <_dtoa_r+0x776>
 8009162:	9a04      	ldr	r2, [sp, #16]
 8009164:	2a0e      	cmp	r2, #14
 8009166:	dd00      	ble.n	800916a <_dtoa_r+0x48e>
 8009168:	e173      	b.n	8009452 <_dtoa_r+0x776>
 800916a:	4ba0      	ldr	r3, [pc, #640]	@ (80093ec <_dtoa_r+0x710>)
 800916c:	00d2      	lsls	r2, r2, #3
 800916e:	189b      	adds	r3, r3, r2
 8009170:	685c      	ldr	r4, [r3, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	9306      	str	r3, [sp, #24]
 8009176:	9407      	str	r4, [sp, #28]
 8009178:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800917a:	2b00      	cmp	r3, #0
 800917c:	da03      	bge.n	8009186 <_dtoa_r+0x4aa>
 800917e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc00      	bgt.n	8009186 <_dtoa_r+0x4aa>
 8009184:	e106      	b.n	8009394 <_dtoa_r+0x6b8>
 8009186:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009188:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918c:	9d08      	ldr	r5, [sp, #32]
 800918e:	3b01      	subs	r3, #1
 8009190:	195b      	adds	r3, r3, r5
 8009192:	930a      	str	r3, [sp, #40]	@ 0x28
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	9b07      	ldr	r3, [sp, #28]
 8009198:	0030      	movs	r0, r6
 800919a:	0039      	movs	r1, r7
 800919c:	f7f7 ffb0 	bl	8001100 <__aeabi_ddiv>
 80091a0:	f7f9 fa78 	bl	8002694 <__aeabi_d2iz>
 80091a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80091a6:	f7f9 fab1 	bl	800270c <__aeabi_i2d>
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	f7f8 fbeb 	bl	8001988 <__aeabi_dmul>
 80091b2:	0002      	movs	r2, r0
 80091b4:	000b      	movs	r3, r1
 80091b6:	0030      	movs	r0, r6
 80091b8:	0039      	movs	r1, r7
 80091ba:	f7f8 fead 	bl	8001f18 <__aeabi_dsub>
 80091be:	002b      	movs	r3, r5
 80091c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c2:	3501      	adds	r5, #1
 80091c4:	3230      	adds	r2, #48	@ 0x30
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091ca:	002c      	movs	r4, r5
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d000      	beq.n	80091d2 <_dtoa_r+0x4f6>
 80091d0:	e131      	b.n	8009436 <_dtoa_r+0x75a>
 80091d2:	0002      	movs	r2, r0
 80091d4:	000b      	movs	r3, r1
 80091d6:	f7f7 fc2f 	bl	8000a38 <__aeabi_dadd>
 80091da:	9a06      	ldr	r2, [sp, #24]
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	0006      	movs	r6, r0
 80091e0:	000f      	movs	r7, r1
 80091e2:	f7f7 f949 	bl	8000478 <__aeabi_dcmpgt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d000      	beq.n	80091ec <_dtoa_r+0x510>
 80091ea:	e10f      	b.n	800940c <_dtoa_r+0x730>
 80091ec:	9a06      	ldr	r2, [sp, #24]
 80091ee:	9b07      	ldr	r3, [sp, #28]
 80091f0:	0030      	movs	r0, r6
 80091f2:	0039      	movs	r1, r7
 80091f4:	f7f7 f926 	bl	8000444 <__aeabi_dcmpeq>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d003      	beq.n	8009204 <_dtoa_r+0x528>
 80091fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fe:	07dd      	lsls	r5, r3, #31
 8009200:	d500      	bpl.n	8009204 <_dtoa_r+0x528>
 8009202:	e103      	b.n	800940c <_dtoa_r+0x730>
 8009204:	9905      	ldr	r1, [sp, #20]
 8009206:	9803      	ldr	r0, [sp, #12]
 8009208:	f000 fca6 	bl	8009b58 <_Bfree>
 800920c:	2300      	movs	r3, #0
 800920e:	7023      	strb	r3, [r4, #0]
 8009210:	9b04      	ldr	r3, [sp, #16]
 8009212:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009214:	3301      	adds	r3, #1
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800921a:	2b00      	cmp	r3, #0
 800921c:	d100      	bne.n	8009220 <_dtoa_r+0x544>
 800921e:	e5a7      	b.n	8008d70 <_dtoa_r+0x94>
 8009220:	601c      	str	r4, [r3, #0]
 8009222:	e5a5      	b.n	8008d70 <_dtoa_r+0x94>
 8009224:	423d      	tst	r5, r7
 8009226:	d005      	beq.n	8009234 <_dtoa_r+0x558>
 8009228:	6832      	ldr	r2, [r6, #0]
 800922a:	6873      	ldr	r3, [r6, #4]
 800922c:	f7f8 fbac 	bl	8001988 <__aeabi_dmul>
 8009230:	003b      	movs	r3, r7
 8009232:	3401      	adds	r4, #1
 8009234:	106d      	asrs	r5, r5, #1
 8009236:	3608      	adds	r6, #8
 8009238:	e736      	b.n	80090a8 <_dtoa_r+0x3cc>
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	930c      	str	r3, [sp, #48]	@ 0x30
 800923e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009240:	e75a      	b.n	80090f8 <_dtoa_r+0x41c>
 8009242:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009244:	4b69      	ldr	r3, [pc, #420]	@ (80093ec <_dtoa_r+0x710>)
 8009246:	3a01      	subs	r2, #1
 8009248:	00d2      	lsls	r2, r2, #3
 800924a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800924c:	189b      	adds	r3, r3, r2
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2900      	cmp	r1, #0
 8009254:	d04c      	beq.n	80092f0 <_dtoa_r+0x614>
 8009256:	2000      	movs	r0, #0
 8009258:	496b      	ldr	r1, [pc, #428]	@ (8009408 <_dtoa_r+0x72c>)
 800925a:	f7f7 ff51 	bl	8001100 <__aeabi_ddiv>
 800925e:	0032      	movs	r2, r6
 8009260:	003b      	movs	r3, r7
 8009262:	f7f8 fe59 	bl	8001f18 <__aeabi_dsub>
 8009266:	9a08      	ldr	r2, [sp, #32]
 8009268:	0006      	movs	r6, r0
 800926a:	4694      	mov	ip, r2
 800926c:	000f      	movs	r7, r1
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	9316      	str	r3, [sp, #88]	@ 0x58
 8009272:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009274:	4463      	add	r3, ip
 8009276:	9311      	str	r3, [sp, #68]	@ 0x44
 8009278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800927a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800927c:	f7f9 fa0a 	bl	8002694 <__aeabi_d2iz>
 8009280:	0005      	movs	r5, r0
 8009282:	f7f9 fa43 	bl	800270c <__aeabi_i2d>
 8009286:	0002      	movs	r2, r0
 8009288:	000b      	movs	r3, r1
 800928a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800928c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800928e:	f7f8 fe43 	bl	8001f18 <__aeabi_dsub>
 8009292:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009294:	3530      	adds	r5, #48	@ 0x30
 8009296:	1c5c      	adds	r4, r3, #1
 8009298:	701d      	strb	r5, [r3, #0]
 800929a:	0032      	movs	r2, r6
 800929c:	003b      	movs	r3, r7
 800929e:	900a      	str	r0, [sp, #40]	@ 0x28
 80092a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092a2:	f7f7 f8d5 	bl	8000450 <__aeabi_dcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d16a      	bne.n	8009380 <_dtoa_r+0x6a4>
 80092aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ae:	2000      	movs	r0, #0
 80092b0:	4950      	ldr	r1, [pc, #320]	@ (80093f4 <_dtoa_r+0x718>)
 80092b2:	f7f8 fe31 	bl	8001f18 <__aeabi_dsub>
 80092b6:	0032      	movs	r2, r6
 80092b8:	003b      	movs	r3, r7
 80092ba:	f7f7 f8c9 	bl	8000450 <__aeabi_dcmplt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d000      	beq.n	80092c4 <_dtoa_r+0x5e8>
 80092c2:	e0a5      	b.n	8009410 <_dtoa_r+0x734>
 80092c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	d100      	bne.n	80092cc <_dtoa_r+0x5f0>
 80092ca:	e742      	b.n	8009152 <_dtoa_r+0x476>
 80092cc:	2200      	movs	r2, #0
 80092ce:	0030      	movs	r0, r6
 80092d0:	0039      	movs	r1, r7
 80092d2:	4b49      	ldr	r3, [pc, #292]	@ (80093f8 <_dtoa_r+0x71c>)
 80092d4:	f7f8 fb58 	bl	8001988 <__aeabi_dmul>
 80092d8:	2200      	movs	r2, #0
 80092da:	0006      	movs	r6, r0
 80092dc:	000f      	movs	r7, r1
 80092de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092e2:	4b45      	ldr	r3, [pc, #276]	@ (80093f8 <_dtoa_r+0x71c>)
 80092e4:	f7f8 fb50 	bl	8001988 <__aeabi_dmul>
 80092e8:	9416      	str	r4, [sp, #88]	@ 0x58
 80092ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80092ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092ee:	e7c3      	b.n	8009278 <_dtoa_r+0x59c>
 80092f0:	0030      	movs	r0, r6
 80092f2:	0039      	movs	r1, r7
 80092f4:	f7f8 fb48 	bl	8001988 <__aeabi_dmul>
 80092f8:	9d08      	ldr	r5, [sp, #32]
 80092fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80092fc:	002b      	movs	r3, r5
 80092fe:	4694      	mov	ip, r2
 8009300:	9016      	str	r0, [sp, #88]	@ 0x58
 8009302:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009304:	4463      	add	r3, ip
 8009306:	9319      	str	r3, [sp, #100]	@ 0x64
 8009308:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800930a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800930c:	f7f9 f9c2 	bl	8002694 <__aeabi_d2iz>
 8009310:	0004      	movs	r4, r0
 8009312:	f7f9 f9fb 	bl	800270c <__aeabi_i2d>
 8009316:	000b      	movs	r3, r1
 8009318:	0002      	movs	r2, r0
 800931a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800931c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800931e:	f7f8 fdfb 	bl	8001f18 <__aeabi_dsub>
 8009322:	3430      	adds	r4, #48	@ 0x30
 8009324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009326:	702c      	strb	r4, [r5, #0]
 8009328:	3501      	adds	r5, #1
 800932a:	0006      	movs	r6, r0
 800932c:	000f      	movs	r7, r1
 800932e:	42ab      	cmp	r3, r5
 8009330:	d129      	bne.n	8009386 <_dtoa_r+0x6aa>
 8009332:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009334:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800933a:	469c      	mov	ip, r3
 800933c:	2200      	movs	r2, #0
 800933e:	4b32      	ldr	r3, [pc, #200]	@ (8009408 <_dtoa_r+0x72c>)
 8009340:	4464      	add	r4, ip
 8009342:	f7f7 fb79 	bl	8000a38 <__aeabi_dadd>
 8009346:	0002      	movs	r2, r0
 8009348:	000b      	movs	r3, r1
 800934a:	0030      	movs	r0, r6
 800934c:	0039      	movs	r1, r7
 800934e:	f7f7 f893 	bl	8000478 <__aeabi_dcmpgt>
 8009352:	2800      	cmp	r0, #0
 8009354:	d15c      	bne.n	8009410 <_dtoa_r+0x734>
 8009356:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009358:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800935a:	2000      	movs	r0, #0
 800935c:	492a      	ldr	r1, [pc, #168]	@ (8009408 <_dtoa_r+0x72c>)
 800935e:	f7f8 fddb 	bl	8001f18 <__aeabi_dsub>
 8009362:	0002      	movs	r2, r0
 8009364:	000b      	movs	r3, r1
 8009366:	0030      	movs	r0, r6
 8009368:	0039      	movs	r1, r7
 800936a:	f7f7 f871 	bl	8000450 <__aeabi_dcmplt>
 800936e:	2800      	cmp	r0, #0
 8009370:	d100      	bne.n	8009374 <_dtoa_r+0x698>
 8009372:	e6ee      	b.n	8009152 <_dtoa_r+0x476>
 8009374:	0023      	movs	r3, r4
 8009376:	3c01      	subs	r4, #1
 8009378:	7822      	ldrb	r2, [r4, #0]
 800937a:	2a30      	cmp	r2, #48	@ 0x30
 800937c:	d0fa      	beq.n	8009374 <_dtoa_r+0x698>
 800937e:	001c      	movs	r4, r3
 8009380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	e73e      	b.n	8009204 <_dtoa_r+0x528>
 8009386:	2200      	movs	r2, #0
 8009388:	4b1b      	ldr	r3, [pc, #108]	@ (80093f8 <_dtoa_r+0x71c>)
 800938a:	f7f8 fafd 	bl	8001988 <__aeabi_dmul>
 800938e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009390:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009392:	e7b9      	b.n	8009308 <_dtoa_r+0x62c>
 8009394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10c      	bne.n	80093b4 <_dtoa_r+0x6d8>
 800939a:	9806      	ldr	r0, [sp, #24]
 800939c:	9907      	ldr	r1, [sp, #28]
 800939e:	2200      	movs	r2, #0
 80093a0:	4b18      	ldr	r3, [pc, #96]	@ (8009404 <_dtoa_r+0x728>)
 80093a2:	f7f8 faf1 	bl	8001988 <__aeabi_dmul>
 80093a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093aa:	f7f7 f86f 	bl	800048c <__aeabi_dcmpge>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d100      	bne.n	80093b4 <_dtoa_r+0x6d8>
 80093b2:	e164      	b.n	800967e <_dtoa_r+0x9a2>
 80093b4:	2600      	movs	r6, #0
 80093b6:	0037      	movs	r7, r6
 80093b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ba:	9c08      	ldr	r4, [sp, #32]
 80093bc:	43db      	mvns	r3, r3
 80093be:	930c      	str	r3, [sp, #48]	@ 0x30
 80093c0:	2300      	movs	r3, #0
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	0031      	movs	r1, r6
 80093c6:	9803      	ldr	r0, [sp, #12]
 80093c8:	f000 fbc6 	bl	8009b58 <_Bfree>
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	d0d7      	beq.n	8009380 <_dtoa_r+0x6a4>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <_dtoa_r+0x706>
 80093d6:	42bb      	cmp	r3, r7
 80093d8:	d003      	beq.n	80093e2 <_dtoa_r+0x706>
 80093da:	0019      	movs	r1, r3
 80093dc:	9803      	ldr	r0, [sp, #12]
 80093de:	f000 fbbb 	bl	8009b58 <_Bfree>
 80093e2:	0039      	movs	r1, r7
 80093e4:	9803      	ldr	r0, [sp, #12]
 80093e6:	f000 fbb7 	bl	8009b58 <_Bfree>
 80093ea:	e7c9      	b.n	8009380 <_dtoa_r+0x6a4>
 80093ec:	0800ac70 	.word	0x0800ac70
 80093f0:	0800ac48 	.word	0x0800ac48
 80093f4:	3ff00000 	.word	0x3ff00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	401c0000 	.word	0x401c0000
 8009400:	fcc00000 	.word	0xfcc00000
 8009404:	40140000 	.word	0x40140000
 8009408:	3fe00000 	.word	0x3fe00000
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009410:	0023      	movs	r3, r4
 8009412:	001c      	movs	r4, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	2a39      	cmp	r2, #57	@ 0x39
 800941a:	d108      	bne.n	800942e <_dtoa_r+0x752>
 800941c:	9a08      	ldr	r2, [sp, #32]
 800941e:	429a      	cmp	r2, r3
 8009420:	d1f7      	bne.n	8009412 <_dtoa_r+0x736>
 8009422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009424:	9908      	ldr	r1, [sp, #32]
 8009426:	3201      	adds	r2, #1
 8009428:	920c      	str	r2, [sp, #48]	@ 0x30
 800942a:	2230      	movs	r2, #48	@ 0x30
 800942c:	700a      	strb	r2, [r1, #0]
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	3201      	adds	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	e7a4      	b.n	8009380 <_dtoa_r+0x6a4>
 8009436:	2200      	movs	r2, #0
 8009438:	4bc6      	ldr	r3, [pc, #792]	@ (8009754 <_dtoa_r+0xa78>)
 800943a:	f7f8 faa5 	bl	8001988 <__aeabi_dmul>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	0006      	movs	r6, r0
 8009444:	000f      	movs	r7, r1
 8009446:	f7f6 fffd 	bl	8000444 <__aeabi_dcmpeq>
 800944a:	2800      	cmp	r0, #0
 800944c:	d100      	bne.n	8009450 <_dtoa_r+0x774>
 800944e:	e6a1      	b.n	8009194 <_dtoa_r+0x4b8>
 8009450:	e6d8      	b.n	8009204 <_dtoa_r+0x528>
 8009452:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009454:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009456:	9c06      	ldr	r4, [sp, #24]
 8009458:	2f00      	cmp	r7, #0
 800945a:	d014      	beq.n	8009486 <_dtoa_r+0x7aa>
 800945c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800945e:	2a01      	cmp	r2, #1
 8009460:	dd00      	ble.n	8009464 <_dtoa_r+0x788>
 8009462:	e0c8      	b.n	80095f6 <_dtoa_r+0x91a>
 8009464:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009466:	2a00      	cmp	r2, #0
 8009468:	d100      	bne.n	800946c <_dtoa_r+0x790>
 800946a:	e0be      	b.n	80095ea <_dtoa_r+0x90e>
 800946c:	4aba      	ldr	r2, [pc, #744]	@ (8009758 <_dtoa_r+0xa7c>)
 800946e:	189b      	adds	r3, r3, r2
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	2101      	movs	r1, #1
 8009474:	18d2      	adds	r2, r2, r3
 8009476:	9206      	str	r2, [sp, #24]
 8009478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800947a:	9803      	ldr	r0, [sp, #12]
 800947c:	18d3      	adds	r3, r2, r3
 800947e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009480:	f000 fc22 	bl	8009cc8 <__i2b>
 8009484:	0007      	movs	r7, r0
 8009486:	2c00      	cmp	r4, #0
 8009488:	d00e      	beq.n	80094a8 <_dtoa_r+0x7cc>
 800948a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd0b      	ble.n	80094a8 <_dtoa_r+0x7cc>
 8009490:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009492:	0023      	movs	r3, r4
 8009494:	4294      	cmp	r4, r2
 8009496:	dd00      	ble.n	800949a <_dtoa_r+0x7be>
 8009498:	0013      	movs	r3, r2
 800949a:	9a06      	ldr	r2, [sp, #24]
 800949c:	1ae4      	subs	r4, r4, r3
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	9206      	str	r2, [sp, #24]
 80094a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80094a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01f      	beq.n	80094ee <_dtoa_r+0x812>
 80094ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d100      	bne.n	80094b6 <_dtoa_r+0x7da>
 80094b4:	e0b5      	b.n	8009622 <_dtoa_r+0x946>
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	d010      	beq.n	80094dc <_dtoa_r+0x800>
 80094ba:	0039      	movs	r1, r7
 80094bc:	002a      	movs	r2, r5
 80094be:	9803      	ldr	r0, [sp, #12]
 80094c0:	f000 fccc 	bl	8009e5c <__pow5mult>
 80094c4:	9a05      	ldr	r2, [sp, #20]
 80094c6:	0001      	movs	r1, r0
 80094c8:	0007      	movs	r7, r0
 80094ca:	9803      	ldr	r0, [sp, #12]
 80094cc:	f000 fc14 	bl	8009cf8 <__multiply>
 80094d0:	0006      	movs	r6, r0
 80094d2:	9905      	ldr	r1, [sp, #20]
 80094d4:	9803      	ldr	r0, [sp, #12]
 80094d6:	f000 fb3f 	bl	8009b58 <_Bfree>
 80094da:	9605      	str	r6, [sp, #20]
 80094dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094de:	1b5a      	subs	r2, r3, r5
 80094e0:	42ab      	cmp	r3, r5
 80094e2:	d004      	beq.n	80094ee <_dtoa_r+0x812>
 80094e4:	9905      	ldr	r1, [sp, #20]
 80094e6:	9803      	ldr	r0, [sp, #12]
 80094e8:	f000 fcb8 	bl	8009e5c <__pow5mult>
 80094ec:	9005      	str	r0, [sp, #20]
 80094ee:	2101      	movs	r1, #1
 80094f0:	9803      	ldr	r0, [sp, #12]
 80094f2:	f000 fbe9 	bl	8009cc8 <__i2b>
 80094f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094f8:	0006      	movs	r6, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d100      	bne.n	8009500 <_dtoa_r+0x824>
 80094fe:	e1bc      	b.n	800987a <_dtoa_r+0xb9e>
 8009500:	001a      	movs	r2, r3
 8009502:	0001      	movs	r1, r0
 8009504:	9803      	ldr	r0, [sp, #12]
 8009506:	f000 fca9 	bl	8009e5c <__pow5mult>
 800950a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800950c:	0006      	movs	r6, r0
 800950e:	2500      	movs	r5, #0
 8009510:	2b01      	cmp	r3, #1
 8009512:	dc16      	bgt.n	8009542 <_dtoa_r+0x866>
 8009514:	2500      	movs	r5, #0
 8009516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009518:	42ab      	cmp	r3, r5
 800951a:	d10e      	bne.n	800953a <_dtoa_r+0x85e>
 800951c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800951e:	031b      	lsls	r3, r3, #12
 8009520:	42ab      	cmp	r3, r5
 8009522:	d10a      	bne.n	800953a <_dtoa_r+0x85e>
 8009524:	4b8d      	ldr	r3, [pc, #564]	@ (800975c <_dtoa_r+0xa80>)
 8009526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009528:	4213      	tst	r3, r2
 800952a:	d006      	beq.n	800953a <_dtoa_r+0x85e>
 800952c:	9b06      	ldr	r3, [sp, #24]
 800952e:	3501      	adds	r5, #1
 8009530:	3301      	adds	r3, #1
 8009532:	9306      	str	r3, [sp, #24]
 8009534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009536:	3301      	adds	r3, #1
 8009538:	930d      	str	r3, [sp, #52]	@ 0x34
 800953a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800953c:	2001      	movs	r0, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d008      	beq.n	8009554 <_dtoa_r+0x878>
 8009542:	6933      	ldr	r3, [r6, #16]
 8009544:	3303      	adds	r3, #3
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	18f3      	adds	r3, r6, r3
 800954a:	6858      	ldr	r0, [r3, #4]
 800954c:	f000 fb6c 	bl	8009c28 <__hi0bits>
 8009550:	2320      	movs	r3, #32
 8009552:	1a18      	subs	r0, r3, r0
 8009554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009556:	1818      	adds	r0, r3, r0
 8009558:	0002      	movs	r2, r0
 800955a:	231f      	movs	r3, #31
 800955c:	401a      	ands	r2, r3
 800955e:	4218      	tst	r0, r3
 8009560:	d065      	beq.n	800962e <_dtoa_r+0x952>
 8009562:	3301      	adds	r3, #1
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	2b04      	cmp	r3, #4
 8009568:	dd5d      	ble.n	8009626 <_dtoa_r+0x94a>
 800956a:	231c      	movs	r3, #28
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	9a06      	ldr	r2, [sp, #24]
 8009570:	18e4      	adds	r4, r4, r3
 8009572:	18d2      	adds	r2, r2, r3
 8009574:	9206      	str	r2, [sp, #24]
 8009576:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009578:	18d3      	adds	r3, r2, r3
 800957a:	930d      	str	r3, [sp, #52]	@ 0x34
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd05      	ble.n	800958e <_dtoa_r+0x8b2>
 8009582:	001a      	movs	r2, r3
 8009584:	9905      	ldr	r1, [sp, #20]
 8009586:	9803      	ldr	r0, [sp, #12]
 8009588:	f000 fcc4 	bl	8009f14 <__lshift>
 800958c:	9005      	str	r0, [sp, #20]
 800958e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	dd05      	ble.n	80095a0 <_dtoa_r+0x8c4>
 8009594:	0031      	movs	r1, r6
 8009596:	001a      	movs	r2, r3
 8009598:	9803      	ldr	r0, [sp, #12]
 800959a:	f000 fcbb 	bl	8009f14 <__lshift>
 800959e:	0006      	movs	r6, r0
 80095a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d045      	beq.n	8009632 <_dtoa_r+0x956>
 80095a6:	0031      	movs	r1, r6
 80095a8:	9805      	ldr	r0, [sp, #20]
 80095aa:	f000 fd1f 	bl	8009fec <__mcmp>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	da3f      	bge.n	8009632 <_dtoa_r+0x956>
 80095b2:	9b04      	ldr	r3, [sp, #16]
 80095b4:	220a      	movs	r2, #10
 80095b6:	3b01      	subs	r3, #1
 80095b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80095ba:	9905      	ldr	r1, [sp, #20]
 80095bc:	2300      	movs	r3, #0
 80095be:	9803      	ldr	r0, [sp, #12]
 80095c0:	f000 faee 	bl	8009ba0 <__multadd>
 80095c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095c6:	9005      	str	r0, [sp, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d100      	bne.n	80095ce <_dtoa_r+0x8f2>
 80095cc:	e15c      	b.n	8009888 <_dtoa_r+0xbac>
 80095ce:	2300      	movs	r3, #0
 80095d0:	0039      	movs	r1, r7
 80095d2:	220a      	movs	r2, #10
 80095d4:	9803      	ldr	r0, [sp, #12]
 80095d6:	f000 fae3 	bl	8009ba0 <__multadd>
 80095da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095dc:	0007      	movs	r7, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dc55      	bgt.n	800968e <_dtoa_r+0x9b2>
 80095e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	dc2d      	bgt.n	8009644 <_dtoa_r+0x968>
 80095e8:	e051      	b.n	800968e <_dtoa_r+0x9b2>
 80095ea:	2336      	movs	r3, #54	@ 0x36
 80095ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095ee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80095f0:	9c06      	ldr	r4, [sp, #24]
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	e73c      	b.n	8009470 <_dtoa_r+0x794>
 80095f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f8:	1e5d      	subs	r5, r3, #1
 80095fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	db08      	blt.n	8009612 <_dtoa_r+0x936>
 8009600:	1b5d      	subs	r5, r3, r5
 8009602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009604:	9c06      	ldr	r4, [sp, #24]
 8009606:	2b00      	cmp	r3, #0
 8009608:	db00      	blt.n	800960c <_dtoa_r+0x930>
 800960a:	e731      	b.n	8009470 <_dtoa_r+0x794>
 800960c:	1ae4      	subs	r4, r4, r3
 800960e:	2300      	movs	r3, #0
 8009610:	e72e      	b.n	8009470 <_dtoa_r+0x794>
 8009612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009614:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009616:	1aeb      	subs	r3, r5, r3
 8009618:	18d3      	adds	r3, r2, r3
 800961a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800961c:	9314      	str	r3, [sp, #80]	@ 0x50
 800961e:	2500      	movs	r5, #0
 8009620:	e7ef      	b.n	8009602 <_dtoa_r+0x926>
 8009622:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009624:	e75e      	b.n	80094e4 <_dtoa_r+0x808>
 8009626:	2b04      	cmp	r3, #4
 8009628:	d0a8      	beq.n	800957c <_dtoa_r+0x8a0>
 800962a:	331c      	adds	r3, #28
 800962c:	e79f      	b.n	800956e <_dtoa_r+0x892>
 800962e:	0013      	movs	r3, r2
 8009630:	e7fb      	b.n	800962a <_dtoa_r+0x94e>
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	930c      	str	r3, [sp, #48]	@ 0x30
 8009636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009638:	930e      	str	r3, [sp, #56]	@ 0x38
 800963a:	2b00      	cmp	r3, #0
 800963c:	dc23      	bgt.n	8009686 <_dtoa_r+0x9aa>
 800963e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009640:	2b02      	cmp	r3, #2
 8009642:	dd20      	ble.n	8009686 <_dtoa_r+0x9aa>
 8009644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d000      	beq.n	800964c <_dtoa_r+0x970>
 800964a:	e6b5      	b.n	80093b8 <_dtoa_r+0x6dc>
 800964c:	0031      	movs	r1, r6
 800964e:	2205      	movs	r2, #5
 8009650:	9803      	ldr	r0, [sp, #12]
 8009652:	f000 faa5 	bl	8009ba0 <__multadd>
 8009656:	0006      	movs	r6, r0
 8009658:	0001      	movs	r1, r0
 800965a:	9805      	ldr	r0, [sp, #20]
 800965c:	f000 fcc6 	bl	8009fec <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	dc00      	bgt.n	8009666 <_dtoa_r+0x98a>
 8009664:	e6a8      	b.n	80093b8 <_dtoa_r+0x6dc>
 8009666:	9b08      	ldr	r3, [sp, #32]
 8009668:	9a08      	ldr	r2, [sp, #32]
 800966a:	1c5c      	adds	r4, r3, #1
 800966c:	2331      	movs	r3, #49	@ 0x31
 800966e:	7013      	strb	r3, [r2, #0]
 8009670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009672:	3301      	adds	r3, #1
 8009674:	930c      	str	r3, [sp, #48]	@ 0x30
 8009676:	e6a3      	b.n	80093c0 <_dtoa_r+0x6e4>
 8009678:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800967a:	0037      	movs	r7, r6
 800967c:	e7f3      	b.n	8009666 <_dtoa_r+0x98a>
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009682:	930c      	str	r3, [sp, #48]	@ 0x30
 8009684:	e7f9      	b.n	800967a <_dtoa_r+0x99e>
 8009686:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d100      	bne.n	800968e <_dtoa_r+0x9b2>
 800968c:	e100      	b.n	8009890 <_dtoa_r+0xbb4>
 800968e:	2c00      	cmp	r4, #0
 8009690:	dd05      	ble.n	800969e <_dtoa_r+0x9c2>
 8009692:	0039      	movs	r1, r7
 8009694:	0022      	movs	r2, r4
 8009696:	9803      	ldr	r0, [sp, #12]
 8009698:	f000 fc3c 	bl	8009f14 <__lshift>
 800969c:	0007      	movs	r7, r0
 800969e:	0038      	movs	r0, r7
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	d018      	beq.n	80096d6 <_dtoa_r+0x9fa>
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	9803      	ldr	r0, [sp, #12]
 80096a8:	f000 fa12 	bl	8009ad0 <_Balloc>
 80096ac:	1e04      	subs	r4, r0, #0
 80096ae:	d105      	bne.n	80096bc <_dtoa_r+0x9e0>
 80096b0:	0022      	movs	r2, r4
 80096b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009760 <_dtoa_r+0xa84>)
 80096b4:	482b      	ldr	r0, [pc, #172]	@ (8009764 <_dtoa_r+0xa88>)
 80096b6:	492c      	ldr	r1, [pc, #176]	@ (8009768 <_dtoa_r+0xa8c>)
 80096b8:	f7ff fb25 	bl	8008d06 <_dtoa_r+0x2a>
 80096bc:	0039      	movs	r1, r7
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	310c      	adds	r1, #12
 80096c2:	3202      	adds	r2, #2
 80096c4:	0092      	lsls	r2, r2, #2
 80096c6:	300c      	adds	r0, #12
 80096c8:	f000 fe6a 	bl	800a3a0 <memcpy>
 80096cc:	2201      	movs	r2, #1
 80096ce:	0021      	movs	r1, r4
 80096d0:	9803      	ldr	r0, [sp, #12]
 80096d2:	f000 fc1f 	bl	8009f14 <__lshift>
 80096d6:	9b08      	ldr	r3, [sp, #32]
 80096d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096da:	9306      	str	r3, [sp, #24]
 80096dc:	3b01      	subs	r3, #1
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	2201      	movs	r2, #1
 80096e2:	9704      	str	r7, [sp, #16]
 80096e4:	0007      	movs	r7, r0
 80096e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ea:	4013      	ands	r3, r2
 80096ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80096ee:	0031      	movs	r1, r6
 80096f0:	9805      	ldr	r0, [sp, #20]
 80096f2:	f7ff fa65 	bl	8008bc0 <quorem>
 80096f6:	9904      	ldr	r1, [sp, #16]
 80096f8:	0005      	movs	r5, r0
 80096fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80096fc:	9805      	ldr	r0, [sp, #20]
 80096fe:	f000 fc75 	bl	8009fec <__mcmp>
 8009702:	003a      	movs	r2, r7
 8009704:	900d      	str	r0, [sp, #52]	@ 0x34
 8009706:	0031      	movs	r1, r6
 8009708:	9803      	ldr	r0, [sp, #12]
 800970a:	f000 fc8b 	bl	800a024 <__mdiff>
 800970e:	2201      	movs	r2, #1
 8009710:	68c3      	ldr	r3, [r0, #12]
 8009712:	0004      	movs	r4, r0
 8009714:	3530      	adds	r5, #48	@ 0x30
 8009716:	9209      	str	r2, [sp, #36]	@ 0x24
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <_dtoa_r+0xa4a>
 800971c:	0001      	movs	r1, r0
 800971e:	9805      	ldr	r0, [sp, #20]
 8009720:	f000 fc64 	bl	8009fec <__mcmp>
 8009724:	9009      	str	r0, [sp, #36]	@ 0x24
 8009726:	0021      	movs	r1, r4
 8009728:	9803      	ldr	r0, [sp, #12]
 800972a:	f000 fa15 	bl	8009b58 <_Bfree>
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009732:	1c5c      	adds	r4, r3, #1
 8009734:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009736:	4313      	orrs	r3, r2
 8009738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800973a:	4313      	orrs	r3, r2
 800973c:	d116      	bne.n	800976c <_dtoa_r+0xa90>
 800973e:	2d39      	cmp	r5, #57	@ 0x39
 8009740:	d02f      	beq.n	80097a2 <_dtoa_r+0xac6>
 8009742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd01      	ble.n	800974c <_dtoa_r+0xa70>
 8009748:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800974a:	3531      	adds	r5, #49	@ 0x31
 800974c:	9b06      	ldr	r3, [sp, #24]
 800974e:	701d      	strb	r5, [r3, #0]
 8009750:	e638      	b.n	80093c4 <_dtoa_r+0x6e8>
 8009752:	46c0      	nop			@ (mov r8, r8)
 8009754:	40240000 	.word	0x40240000
 8009758:	00000433 	.word	0x00000433
 800975c:	7ff00000 	.word	0x7ff00000
 8009760:	0800abd0 	.word	0x0800abd0
 8009764:	0800ab78 	.word	0x0800ab78
 8009768:	000002ef 	.word	0x000002ef
 800976c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800976e:	2b00      	cmp	r3, #0
 8009770:	db04      	blt.n	800977c <_dtoa_r+0xaa0>
 8009772:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009774:	4313      	orrs	r3, r2
 8009776:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009778:	4313      	orrs	r3, r2
 800977a:	d11e      	bne.n	80097ba <_dtoa_r+0xade>
 800977c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	dde4      	ble.n	800974c <_dtoa_r+0xa70>
 8009782:	9905      	ldr	r1, [sp, #20]
 8009784:	2201      	movs	r2, #1
 8009786:	9803      	ldr	r0, [sp, #12]
 8009788:	f000 fbc4 	bl	8009f14 <__lshift>
 800978c:	0031      	movs	r1, r6
 800978e:	9005      	str	r0, [sp, #20]
 8009790:	f000 fc2c 	bl	8009fec <__mcmp>
 8009794:	2800      	cmp	r0, #0
 8009796:	dc02      	bgt.n	800979e <_dtoa_r+0xac2>
 8009798:	d1d8      	bne.n	800974c <_dtoa_r+0xa70>
 800979a:	07eb      	lsls	r3, r5, #31
 800979c:	d5d6      	bpl.n	800974c <_dtoa_r+0xa70>
 800979e:	2d39      	cmp	r5, #57	@ 0x39
 80097a0:	d1d2      	bne.n	8009748 <_dtoa_r+0xa6c>
 80097a2:	2339      	movs	r3, #57	@ 0x39
 80097a4:	9a06      	ldr	r2, [sp, #24]
 80097a6:	7013      	strb	r3, [r2, #0]
 80097a8:	0023      	movs	r3, r4
 80097aa:	001c      	movs	r4, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	2a39      	cmp	r2, #57	@ 0x39
 80097b2:	d04f      	beq.n	8009854 <_dtoa_r+0xb78>
 80097b4:	3201      	adds	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e604      	b.n	80093c4 <_dtoa_r+0x6e8>
 80097ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd03      	ble.n	80097c8 <_dtoa_r+0xaec>
 80097c0:	2d39      	cmp	r5, #57	@ 0x39
 80097c2:	d0ee      	beq.n	80097a2 <_dtoa_r+0xac6>
 80097c4:	3501      	adds	r5, #1
 80097c6:	e7c1      	b.n	800974c <_dtoa_r+0xa70>
 80097c8:	9b06      	ldr	r3, [sp, #24]
 80097ca:	9a06      	ldr	r2, [sp, #24]
 80097cc:	701d      	strb	r5, [r3, #0]
 80097ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d02a      	beq.n	800982a <_dtoa_r+0xb4e>
 80097d4:	2300      	movs	r3, #0
 80097d6:	220a      	movs	r2, #10
 80097d8:	9905      	ldr	r1, [sp, #20]
 80097da:	9803      	ldr	r0, [sp, #12]
 80097dc:	f000 f9e0 	bl	8009ba0 <__multadd>
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	9005      	str	r0, [sp, #20]
 80097e4:	42bb      	cmp	r3, r7
 80097e6:	d109      	bne.n	80097fc <_dtoa_r+0xb20>
 80097e8:	2300      	movs	r3, #0
 80097ea:	220a      	movs	r2, #10
 80097ec:	9904      	ldr	r1, [sp, #16]
 80097ee:	9803      	ldr	r0, [sp, #12]
 80097f0:	f000 f9d6 	bl	8009ba0 <__multadd>
 80097f4:	9004      	str	r0, [sp, #16]
 80097f6:	0007      	movs	r7, r0
 80097f8:	9406      	str	r4, [sp, #24]
 80097fa:	e778      	b.n	80096ee <_dtoa_r+0xa12>
 80097fc:	9904      	ldr	r1, [sp, #16]
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	9803      	ldr	r0, [sp, #12]
 8009804:	f000 f9cc 	bl	8009ba0 <__multadd>
 8009808:	2300      	movs	r3, #0
 800980a:	9004      	str	r0, [sp, #16]
 800980c:	220a      	movs	r2, #10
 800980e:	0039      	movs	r1, r7
 8009810:	9803      	ldr	r0, [sp, #12]
 8009812:	f000 f9c5 	bl	8009ba0 <__multadd>
 8009816:	e7ee      	b.n	80097f6 <_dtoa_r+0xb1a>
 8009818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800981a:	2401      	movs	r4, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd00      	ble.n	8009822 <_dtoa_r+0xb46>
 8009820:	001c      	movs	r4, r3
 8009822:	9b08      	ldr	r3, [sp, #32]
 8009824:	191c      	adds	r4, r3, r4
 8009826:	2300      	movs	r3, #0
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	9905      	ldr	r1, [sp, #20]
 800982c:	2201      	movs	r2, #1
 800982e:	9803      	ldr	r0, [sp, #12]
 8009830:	f000 fb70 	bl	8009f14 <__lshift>
 8009834:	0031      	movs	r1, r6
 8009836:	9005      	str	r0, [sp, #20]
 8009838:	f000 fbd8 	bl	8009fec <__mcmp>
 800983c:	2800      	cmp	r0, #0
 800983e:	dcb3      	bgt.n	80097a8 <_dtoa_r+0xacc>
 8009840:	d101      	bne.n	8009846 <_dtoa_r+0xb6a>
 8009842:	07ed      	lsls	r5, r5, #31
 8009844:	d4b0      	bmi.n	80097a8 <_dtoa_r+0xacc>
 8009846:	0023      	movs	r3, r4
 8009848:	001c      	movs	r4, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	2a30      	cmp	r2, #48	@ 0x30
 8009850:	d0fa      	beq.n	8009848 <_dtoa_r+0xb6c>
 8009852:	e5b7      	b.n	80093c4 <_dtoa_r+0x6e8>
 8009854:	9a08      	ldr	r2, [sp, #32]
 8009856:	429a      	cmp	r2, r3
 8009858:	d1a7      	bne.n	80097aa <_dtoa_r+0xace>
 800985a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800985c:	3301      	adds	r3, #1
 800985e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009860:	2331      	movs	r3, #49	@ 0x31
 8009862:	7013      	strb	r3, [r2, #0]
 8009864:	e5ae      	b.n	80093c4 <_dtoa_r+0x6e8>
 8009866:	4b15      	ldr	r3, [pc, #84]	@ (80098bc <_dtoa_r+0xbe0>)
 8009868:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800986a:	9308      	str	r3, [sp, #32]
 800986c:	4b14      	ldr	r3, [pc, #80]	@ (80098c0 <_dtoa_r+0xbe4>)
 800986e:	2a00      	cmp	r2, #0
 8009870:	d001      	beq.n	8009876 <_dtoa_r+0xb9a>
 8009872:	f7ff fa7b 	bl	8008d6c <_dtoa_r+0x90>
 8009876:	f7ff fa7b 	bl	8008d70 <_dtoa_r+0x94>
 800987a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800987c:	2b01      	cmp	r3, #1
 800987e:	dc00      	bgt.n	8009882 <_dtoa_r+0xba6>
 8009880:	e648      	b.n	8009514 <_dtoa_r+0x838>
 8009882:	2001      	movs	r0, #1
 8009884:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009886:	e665      	b.n	8009554 <_dtoa_r+0x878>
 8009888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800988a:	2b00      	cmp	r3, #0
 800988c:	dc00      	bgt.n	8009890 <_dtoa_r+0xbb4>
 800988e:	e6d6      	b.n	800963e <_dtoa_r+0x962>
 8009890:	2400      	movs	r4, #0
 8009892:	0031      	movs	r1, r6
 8009894:	9805      	ldr	r0, [sp, #20]
 8009896:	f7ff f993 	bl	8008bc0 <quorem>
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	3030      	adds	r0, #48	@ 0x30
 800989e:	5518      	strb	r0, [r3, r4]
 80098a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a2:	3401      	adds	r4, #1
 80098a4:	0005      	movs	r5, r0
 80098a6:	429c      	cmp	r4, r3
 80098a8:	dab6      	bge.n	8009818 <_dtoa_r+0xb3c>
 80098aa:	2300      	movs	r3, #0
 80098ac:	220a      	movs	r2, #10
 80098ae:	9905      	ldr	r1, [sp, #20]
 80098b0:	9803      	ldr	r0, [sp, #12]
 80098b2:	f000 f975 	bl	8009ba0 <__multadd>
 80098b6:	9005      	str	r0, [sp, #20]
 80098b8:	e7eb      	b.n	8009892 <_dtoa_r+0xbb6>
 80098ba:	46c0      	nop			@ (mov r8, r8)
 80098bc:	0800ab54 	.word	0x0800ab54
 80098c0:	0800ab5c 	.word	0x0800ab5c

080098c4 <_free_r>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	0005      	movs	r5, r0
 80098c8:	1e0c      	subs	r4, r1, #0
 80098ca:	d010      	beq.n	80098ee <_free_r+0x2a>
 80098cc:	3c04      	subs	r4, #4
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	da00      	bge.n	80098d6 <_free_r+0x12>
 80098d4:	18e4      	adds	r4, r4, r3
 80098d6:	0028      	movs	r0, r5
 80098d8:	f000 f8ea 	bl	8009ab0 <__malloc_lock>
 80098dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009954 <_free_r+0x90>)
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <_free_r+0x2c>
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	6014      	str	r4, [r2, #0]
 80098e8:	0028      	movs	r0, r5
 80098ea:	f000 f8e9 	bl	8009ac0 <__malloc_unlock>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d908      	bls.n	8009906 <_free_r+0x42>
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	1821      	adds	r1, r4, r0
 80098f8:	428b      	cmp	r3, r1
 80098fa:	d1f3      	bne.n	80098e4 <_free_r+0x20>
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	1809      	adds	r1, r1, r0
 8009902:	6021      	str	r1, [r4, #0]
 8009904:	e7ee      	b.n	80098e4 <_free_r+0x20>
 8009906:	001a      	movs	r2, r3
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <_free_r+0x4e>
 800990e:	42a3      	cmp	r3, r4
 8009910:	d9f9      	bls.n	8009906 <_free_r+0x42>
 8009912:	6811      	ldr	r1, [r2, #0]
 8009914:	1850      	adds	r0, r2, r1
 8009916:	42a0      	cmp	r0, r4
 8009918:	d10b      	bne.n	8009932 <_free_r+0x6e>
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	1809      	adds	r1, r1, r0
 800991e:	1850      	adds	r0, r2, r1
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	4283      	cmp	r3, r0
 8009924:	d1e0      	bne.n	80098e8 <_free_r+0x24>
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	1841      	adds	r1, r0, r1
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	6053      	str	r3, [r2, #4]
 8009930:	e7da      	b.n	80098e8 <_free_r+0x24>
 8009932:	42a0      	cmp	r0, r4
 8009934:	d902      	bls.n	800993c <_free_r+0x78>
 8009936:	230c      	movs	r3, #12
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	e7d5      	b.n	80098e8 <_free_r+0x24>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	1821      	adds	r1, r4, r0
 8009940:	428b      	cmp	r3, r1
 8009942:	d103      	bne.n	800994c <_free_r+0x88>
 8009944:	6819      	ldr	r1, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	1809      	adds	r1, r1, r0
 800994a:	6021      	str	r1, [r4, #0]
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6054      	str	r4, [r2, #4]
 8009950:	e7ca      	b.n	80098e8 <_free_r+0x24>
 8009952:	46c0      	nop			@ (mov r8, r8)
 8009954:	200006d8 	.word	0x200006d8

08009958 <malloc>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4b03      	ldr	r3, [pc, #12]	@ (8009968 <malloc+0x10>)
 800995c:	0001      	movs	r1, r0
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	f000 f826 	bl	80099b0 <_malloc_r>
 8009964:	bd10      	pop	{r4, pc}
 8009966:	46c0      	nop			@ (mov r8, r8)
 8009968:	20000024 	.word	0x20000024

0800996c <sbrk_aligned>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4e0f      	ldr	r6, [pc, #60]	@ (80099ac <sbrk_aligned+0x40>)
 8009970:	000d      	movs	r5, r1
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	0004      	movs	r4, r0
 8009976:	2900      	cmp	r1, #0
 8009978:	d102      	bne.n	8009980 <sbrk_aligned+0x14>
 800997a:	f000 fcff 	bl	800a37c <_sbrk_r>
 800997e:	6030      	str	r0, [r6, #0]
 8009980:	0029      	movs	r1, r5
 8009982:	0020      	movs	r0, r4
 8009984:	f000 fcfa 	bl	800a37c <_sbrk_r>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d103      	bne.n	8009994 <sbrk_aligned+0x28>
 800998c:	2501      	movs	r5, #1
 800998e:	426d      	negs	r5, r5
 8009990:	0028      	movs	r0, r5
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	2303      	movs	r3, #3
 8009996:	1cc5      	adds	r5, r0, #3
 8009998:	439d      	bics	r5, r3
 800999a:	42a8      	cmp	r0, r5
 800999c:	d0f8      	beq.n	8009990 <sbrk_aligned+0x24>
 800999e:	1a29      	subs	r1, r5, r0
 80099a0:	0020      	movs	r0, r4
 80099a2:	f000 fceb 	bl	800a37c <_sbrk_r>
 80099a6:	3001      	adds	r0, #1
 80099a8:	d1f2      	bne.n	8009990 <sbrk_aligned+0x24>
 80099aa:	e7ef      	b.n	800998c <sbrk_aligned+0x20>
 80099ac:	200006d4 	.word	0x200006d4

080099b0 <_malloc_r>:
 80099b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099b2:	2203      	movs	r2, #3
 80099b4:	1ccb      	adds	r3, r1, #3
 80099b6:	4393      	bics	r3, r2
 80099b8:	3308      	adds	r3, #8
 80099ba:	0005      	movs	r5, r0
 80099bc:	001f      	movs	r7, r3
 80099be:	2b0c      	cmp	r3, #12
 80099c0:	d234      	bcs.n	8009a2c <_malloc_r+0x7c>
 80099c2:	270c      	movs	r7, #12
 80099c4:	42b9      	cmp	r1, r7
 80099c6:	d833      	bhi.n	8009a30 <_malloc_r+0x80>
 80099c8:	0028      	movs	r0, r5
 80099ca:	f000 f871 	bl	8009ab0 <__malloc_lock>
 80099ce:	4e37      	ldr	r6, [pc, #220]	@ (8009aac <_malloc_r+0xfc>)
 80099d0:	6833      	ldr	r3, [r6, #0]
 80099d2:	001c      	movs	r4, r3
 80099d4:	2c00      	cmp	r4, #0
 80099d6:	d12f      	bne.n	8009a38 <_malloc_r+0x88>
 80099d8:	0039      	movs	r1, r7
 80099da:	0028      	movs	r0, r5
 80099dc:	f7ff ffc6 	bl	800996c <sbrk_aligned>
 80099e0:	0004      	movs	r4, r0
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	d15f      	bne.n	8009aa6 <_malloc_r+0xf6>
 80099e6:	6834      	ldr	r4, [r6, #0]
 80099e8:	9400      	str	r4, [sp, #0]
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d14a      	bne.n	8009a86 <_malloc_r+0xd6>
 80099f0:	2c00      	cmp	r4, #0
 80099f2:	d052      	beq.n	8009a9a <_malloc_r+0xea>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	0028      	movs	r0, r5
 80099f8:	18e3      	adds	r3, r4, r3
 80099fa:	9900      	ldr	r1, [sp, #0]
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	f000 fcbd 	bl	800a37c <_sbrk_r>
 8009a02:	9b01      	ldr	r3, [sp, #4]
 8009a04:	4283      	cmp	r3, r0
 8009a06:	d148      	bne.n	8009a9a <_malloc_r+0xea>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	0028      	movs	r0, r5
 8009a0c:	1aff      	subs	r7, r7, r3
 8009a0e:	0039      	movs	r1, r7
 8009a10:	f7ff ffac 	bl	800996c <sbrk_aligned>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d040      	beq.n	8009a9a <_malloc_r+0xea>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	19db      	adds	r3, r3, r7
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	6833      	ldr	r3, [r6, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	d133      	bne.n	8009a8e <_malloc_r+0xde>
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	e019      	b.n	8009a60 <_malloc_r+0xb0>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	dac9      	bge.n	80099c4 <_malloc_r+0x14>
 8009a30:	230c      	movs	r3, #12
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	2000      	movs	r0, #0
 8009a36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	1bc9      	subs	r1, r1, r7
 8009a3c:	d420      	bmi.n	8009a80 <_malloc_r+0xd0>
 8009a3e:	290b      	cmp	r1, #11
 8009a40:	d90a      	bls.n	8009a58 <_malloc_r+0xa8>
 8009a42:	19e2      	adds	r2, r4, r7
 8009a44:	6027      	str	r7, [r4, #0]
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	d104      	bne.n	8009a54 <_malloc_r+0xa4>
 8009a4a:	6032      	str	r2, [r6, #0]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	6011      	str	r1, [r2, #0]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	e005      	b.n	8009a60 <_malloc_r+0xb0>
 8009a54:	605a      	str	r2, [r3, #4]
 8009a56:	e7f9      	b.n	8009a4c <_malloc_r+0x9c>
 8009a58:	6862      	ldr	r2, [r4, #4]
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	d10e      	bne.n	8009a7c <_malloc_r+0xcc>
 8009a5e:	6032      	str	r2, [r6, #0]
 8009a60:	0028      	movs	r0, r5
 8009a62:	f000 f82d 	bl	8009ac0 <__malloc_unlock>
 8009a66:	0020      	movs	r0, r4
 8009a68:	2207      	movs	r2, #7
 8009a6a:	300b      	adds	r0, #11
 8009a6c:	1d23      	adds	r3, r4, #4
 8009a6e:	4390      	bics	r0, r2
 8009a70:	1ac2      	subs	r2, r0, r3
 8009a72:	4298      	cmp	r0, r3
 8009a74:	d0df      	beq.n	8009a36 <_malloc_r+0x86>
 8009a76:	1a1b      	subs	r3, r3, r0
 8009a78:	50a3      	str	r3, [r4, r2]
 8009a7a:	e7dc      	b.n	8009a36 <_malloc_r+0x86>
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	e7ef      	b.n	8009a60 <_malloc_r+0xb0>
 8009a80:	0023      	movs	r3, r4
 8009a82:	6864      	ldr	r4, [r4, #4]
 8009a84:	e7a6      	b.n	80099d4 <_malloc_r+0x24>
 8009a86:	9c00      	ldr	r4, [sp, #0]
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	e7ad      	b.n	80099ea <_malloc_r+0x3a>
 8009a8e:	001a      	movs	r2, r3
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	42a3      	cmp	r3, r4
 8009a94:	d1fb      	bne.n	8009a8e <_malloc_r+0xde>
 8009a96:	2300      	movs	r3, #0
 8009a98:	e7da      	b.n	8009a50 <_malloc_r+0xa0>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	0028      	movs	r0, r5
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f000 f80e 	bl	8009ac0 <__malloc_unlock>
 8009aa4:	e7c6      	b.n	8009a34 <_malloc_r+0x84>
 8009aa6:	6007      	str	r7, [r0, #0]
 8009aa8:	e7da      	b.n	8009a60 <_malloc_r+0xb0>
 8009aaa:	46c0      	nop			@ (mov r8, r8)
 8009aac:	200006d8 	.word	0x200006d8

08009ab0 <__malloc_lock>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	4802      	ldr	r0, [pc, #8]	@ (8009abc <__malloc_lock+0xc>)
 8009ab4:	f7ff f877 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	46c0      	nop			@ (mov r8, r8)
 8009abc:	200006d0 	.word	0x200006d0

08009ac0 <__malloc_unlock>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4802      	ldr	r0, [pc, #8]	@ (8009acc <__malloc_unlock+0xc>)
 8009ac4:	f7ff f870 	bl	8008ba8 <__retarget_lock_release_recursive>
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	200006d0 	.word	0x200006d0

08009ad0 <_Balloc>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	69c5      	ldr	r5, [r0, #28]
 8009ad4:	0006      	movs	r6, r0
 8009ad6:	000c      	movs	r4, r1
 8009ad8:	2d00      	cmp	r5, #0
 8009ada:	d10e      	bne.n	8009afa <_Balloc+0x2a>
 8009adc:	2010      	movs	r0, #16
 8009ade:	f7ff ff3b 	bl	8009958 <malloc>
 8009ae2:	1e02      	subs	r2, r0, #0
 8009ae4:	61f0      	str	r0, [r6, #28]
 8009ae6:	d104      	bne.n	8009af2 <_Balloc+0x22>
 8009ae8:	216b      	movs	r1, #107	@ 0x6b
 8009aea:	4b19      	ldr	r3, [pc, #100]	@ (8009b50 <_Balloc+0x80>)
 8009aec:	4819      	ldr	r0, [pc, #100]	@ (8009b54 <_Balloc+0x84>)
 8009aee:	f000 fc61 	bl	800a3b4 <__assert_func>
 8009af2:	6045      	str	r5, [r0, #4]
 8009af4:	6085      	str	r5, [r0, #8]
 8009af6:	6005      	str	r5, [r0, #0]
 8009af8:	60c5      	str	r5, [r0, #12]
 8009afa:	69f5      	ldr	r5, [r6, #28]
 8009afc:	68eb      	ldr	r3, [r5, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d013      	beq.n	8009b2a <_Balloc+0x5a>
 8009b02:	69f3      	ldr	r3, [r6, #28]
 8009b04:	00a2      	lsls	r2, r4, #2
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	189b      	adds	r3, r3, r2
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d118      	bne.n	8009b42 <_Balloc+0x72>
 8009b10:	2101      	movs	r1, #1
 8009b12:	000d      	movs	r5, r1
 8009b14:	40a5      	lsls	r5, r4
 8009b16:	1d6a      	adds	r2, r5, #5
 8009b18:	0030      	movs	r0, r6
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	f000 fc68 	bl	800a3f0 <_calloc_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d00c      	beq.n	8009b3e <_Balloc+0x6e>
 8009b24:	6044      	str	r4, [r0, #4]
 8009b26:	6085      	str	r5, [r0, #8]
 8009b28:	e00d      	b.n	8009b46 <_Balloc+0x76>
 8009b2a:	2221      	movs	r2, #33	@ 0x21
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	0030      	movs	r0, r6
 8009b30:	f000 fc5e 	bl	800a3f0 <_calloc_r>
 8009b34:	69f3      	ldr	r3, [r6, #28]
 8009b36:	60e8      	str	r0, [r5, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e1      	bne.n	8009b02 <_Balloc+0x32>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	6802      	ldr	r2, [r0, #0]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	6103      	str	r3, [r0, #16]
 8009b4a:	60c3      	str	r3, [r0, #12]
 8009b4c:	e7f8      	b.n	8009b40 <_Balloc+0x70>
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	0800ab61 	.word	0x0800ab61
 8009b54:	0800abe1 	.word	0x0800abe1

08009b58 <_Bfree>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	69c6      	ldr	r6, [r0, #28]
 8009b5c:	0005      	movs	r5, r0
 8009b5e:	000c      	movs	r4, r1
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	d10e      	bne.n	8009b82 <_Bfree+0x2a>
 8009b64:	2010      	movs	r0, #16
 8009b66:	f7ff fef7 	bl	8009958 <malloc>
 8009b6a:	1e02      	subs	r2, r0, #0
 8009b6c:	61e8      	str	r0, [r5, #28]
 8009b6e:	d104      	bne.n	8009b7a <_Bfree+0x22>
 8009b70:	218f      	movs	r1, #143	@ 0x8f
 8009b72:	4b09      	ldr	r3, [pc, #36]	@ (8009b98 <_Bfree+0x40>)
 8009b74:	4809      	ldr	r0, [pc, #36]	@ (8009b9c <_Bfree+0x44>)
 8009b76:	f000 fc1d 	bl	800a3b4 <__assert_func>
 8009b7a:	6046      	str	r6, [r0, #4]
 8009b7c:	6086      	str	r6, [r0, #8]
 8009b7e:	6006      	str	r6, [r0, #0]
 8009b80:	60c6      	str	r6, [r0, #12]
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	d007      	beq.n	8009b96 <_Bfree+0x3e>
 8009b86:	69eb      	ldr	r3, [r5, #28]
 8009b88:	6862      	ldr	r2, [r4, #4]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	0092      	lsls	r2, r2, #2
 8009b8e:	189b      	adds	r3, r3, r2
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	601c      	str	r4, [r3, #0]
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	0800ab61 	.word	0x0800ab61
 8009b9c:	0800abe1 	.word	0x0800abe1

08009ba0 <__multadd>:
 8009ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ba2:	000f      	movs	r7, r1
 8009ba4:	9001      	str	r0, [sp, #4]
 8009ba6:	000c      	movs	r4, r1
 8009ba8:	001e      	movs	r6, r3
 8009baa:	2000      	movs	r0, #0
 8009bac:	690d      	ldr	r5, [r1, #16]
 8009bae:	3714      	adds	r7, #20
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	b299      	uxth	r1, r3
 8009bb6:	4351      	muls	r1, r2
 8009bb8:	0c1b      	lsrs	r3, r3, #16
 8009bba:	4353      	muls	r3, r2
 8009bbc:	1989      	adds	r1, r1, r6
 8009bbe:	0c0e      	lsrs	r6, r1, #16
 8009bc0:	199b      	adds	r3, r3, r6
 8009bc2:	0c1e      	lsrs	r6, r3, #16
 8009bc4:	b289      	uxth	r1, r1
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	185b      	adds	r3, r3, r1
 8009bca:	c708      	stmia	r7!, {r3}
 8009bcc:	4285      	cmp	r5, r0
 8009bce:	dcef      	bgt.n	8009bb0 <__multadd+0x10>
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	d022      	beq.n	8009c1a <__multadd+0x7a>
 8009bd4:	68a3      	ldr	r3, [r4, #8]
 8009bd6:	42ab      	cmp	r3, r5
 8009bd8:	dc19      	bgt.n	8009c0e <__multadd+0x6e>
 8009bda:	6861      	ldr	r1, [r4, #4]
 8009bdc:	9801      	ldr	r0, [sp, #4]
 8009bde:	3101      	adds	r1, #1
 8009be0:	f7ff ff76 	bl	8009ad0 <_Balloc>
 8009be4:	1e07      	subs	r7, r0, #0
 8009be6:	d105      	bne.n	8009bf4 <__multadd+0x54>
 8009be8:	003a      	movs	r2, r7
 8009bea:	21ba      	movs	r1, #186	@ 0xba
 8009bec:	4b0c      	ldr	r3, [pc, #48]	@ (8009c20 <__multadd+0x80>)
 8009bee:	480d      	ldr	r0, [pc, #52]	@ (8009c24 <__multadd+0x84>)
 8009bf0:	f000 fbe0 	bl	800a3b4 <__assert_func>
 8009bf4:	0021      	movs	r1, r4
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	310c      	adds	r1, #12
 8009bfa:	3202      	adds	r2, #2
 8009bfc:	0092      	lsls	r2, r2, #2
 8009bfe:	300c      	adds	r0, #12
 8009c00:	f000 fbce 	bl	800a3a0 <memcpy>
 8009c04:	0021      	movs	r1, r4
 8009c06:	9801      	ldr	r0, [sp, #4]
 8009c08:	f7ff ffa6 	bl	8009b58 <_Bfree>
 8009c0c:	003c      	movs	r4, r7
 8009c0e:	1d2b      	adds	r3, r5, #4
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	18e3      	adds	r3, r4, r3
 8009c14:	3501      	adds	r5, #1
 8009c16:	605e      	str	r6, [r3, #4]
 8009c18:	6125      	str	r5, [r4, #16]
 8009c1a:	0020      	movs	r0, r4
 8009c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c1e:	46c0      	nop			@ (mov r8, r8)
 8009c20:	0800abd0 	.word	0x0800abd0
 8009c24:	0800abe1 	.word	0x0800abe1

08009c28 <__hi0bits>:
 8009c28:	2280      	movs	r2, #128	@ 0x80
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	0252      	lsls	r2, r2, #9
 8009c2e:	2000      	movs	r0, #0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d201      	bcs.n	8009c38 <__hi0bits+0x10>
 8009c34:	041b      	lsls	r3, r3, #16
 8009c36:	3010      	adds	r0, #16
 8009c38:	2280      	movs	r2, #128	@ 0x80
 8009c3a:	0452      	lsls	r2, r2, #17
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d201      	bcs.n	8009c44 <__hi0bits+0x1c>
 8009c40:	3008      	adds	r0, #8
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	2280      	movs	r2, #128	@ 0x80
 8009c46:	0552      	lsls	r2, r2, #21
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d201      	bcs.n	8009c50 <__hi0bits+0x28>
 8009c4c:	3004      	adds	r0, #4
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	2280      	movs	r2, #128	@ 0x80
 8009c52:	05d2      	lsls	r2, r2, #23
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d201      	bcs.n	8009c5c <__hi0bits+0x34>
 8009c58:	3002      	adds	r0, #2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	db03      	blt.n	8009c68 <__hi0bits+0x40>
 8009c60:	3001      	adds	r0, #1
 8009c62:	4213      	tst	r3, r2
 8009c64:	d100      	bne.n	8009c68 <__hi0bits+0x40>
 8009c66:	2020      	movs	r0, #32
 8009c68:	4770      	bx	lr

08009c6a <__lo0bits>:
 8009c6a:	6803      	ldr	r3, [r0, #0]
 8009c6c:	0001      	movs	r1, r0
 8009c6e:	2207      	movs	r2, #7
 8009c70:	0018      	movs	r0, r3
 8009c72:	4010      	ands	r0, r2
 8009c74:	4213      	tst	r3, r2
 8009c76:	d00d      	beq.n	8009c94 <__lo0bits+0x2a>
 8009c78:	3a06      	subs	r2, #6
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	4213      	tst	r3, r2
 8009c7e:	d105      	bne.n	8009c8c <__lo0bits+0x22>
 8009c80:	3002      	adds	r0, #2
 8009c82:	4203      	tst	r3, r0
 8009c84:	d003      	beq.n	8009c8e <__lo0bits+0x24>
 8009c86:	40d3      	lsrs	r3, r2
 8009c88:	0010      	movs	r0, r2
 8009c8a:	600b      	str	r3, [r1, #0]
 8009c8c:	4770      	bx	lr
 8009c8e:	089b      	lsrs	r3, r3, #2
 8009c90:	600b      	str	r3, [r1, #0]
 8009c92:	e7fb      	b.n	8009c8c <__lo0bits+0x22>
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d101      	bne.n	8009c9e <__lo0bits+0x34>
 8009c9a:	2010      	movs	r0, #16
 8009c9c:	0c1b      	lsrs	r3, r3, #16
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d101      	bne.n	8009ca8 <__lo0bits+0x3e>
 8009ca4:	3008      	adds	r0, #8
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	071a      	lsls	r2, r3, #28
 8009caa:	d101      	bne.n	8009cb0 <__lo0bits+0x46>
 8009cac:	3004      	adds	r0, #4
 8009cae:	091b      	lsrs	r3, r3, #4
 8009cb0:	079a      	lsls	r2, r3, #30
 8009cb2:	d101      	bne.n	8009cb8 <__lo0bits+0x4e>
 8009cb4:	3002      	adds	r0, #2
 8009cb6:	089b      	lsrs	r3, r3, #2
 8009cb8:	07da      	lsls	r2, r3, #31
 8009cba:	d4e9      	bmi.n	8009c90 <__lo0bits+0x26>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	085b      	lsrs	r3, r3, #1
 8009cc0:	d1e6      	bne.n	8009c90 <__lo0bits+0x26>
 8009cc2:	2020      	movs	r0, #32
 8009cc4:	e7e2      	b.n	8009c8c <__lo0bits+0x22>
	...

08009cc8 <__i2b>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	000c      	movs	r4, r1
 8009ccc:	2101      	movs	r1, #1
 8009cce:	f7ff feff 	bl	8009ad0 <_Balloc>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d107      	bne.n	8009ce6 <__i2b+0x1e>
 8009cd6:	2146      	movs	r1, #70	@ 0x46
 8009cd8:	4c05      	ldr	r4, [pc, #20]	@ (8009cf0 <__i2b+0x28>)
 8009cda:	0002      	movs	r2, r0
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <__i2b+0x2c>)
 8009cde:	0020      	movs	r0, r4
 8009ce0:	31ff      	adds	r1, #255	@ 0xff
 8009ce2:	f000 fb67 	bl	800a3b4 <__assert_func>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	6144      	str	r4, [r0, #20]
 8009cea:	6103      	str	r3, [r0, #16]
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	46c0      	nop			@ (mov r8, r8)
 8009cf0:	0800abe1 	.word	0x0800abe1
 8009cf4:	0800abd0 	.word	0x0800abd0

08009cf8 <__multiply>:
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	0014      	movs	r4, r2
 8009cfc:	690a      	ldr	r2, [r1, #16]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	000d      	movs	r5, r1
 8009d02:	b08b      	sub	sp, #44	@ 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	db02      	blt.n	8009d0e <__multiply+0x16>
 8009d08:	0023      	movs	r3, r4
 8009d0a:	000c      	movs	r4, r1
 8009d0c:	001d      	movs	r5, r3
 8009d0e:	6927      	ldr	r7, [r4, #16]
 8009d10:	692e      	ldr	r6, [r5, #16]
 8009d12:	6861      	ldr	r1, [r4, #4]
 8009d14:	19bb      	adds	r3, r7, r6
 8009d16:	9303      	str	r3, [sp, #12]
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	19ba      	adds	r2, r7, r6
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	da00      	bge.n	8009d22 <__multiply+0x2a>
 8009d20:	3101      	adds	r1, #1
 8009d22:	f7ff fed5 	bl	8009ad0 <_Balloc>
 8009d26:	9002      	str	r0, [sp, #8]
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d106      	bne.n	8009d3a <__multiply+0x42>
 8009d2c:	21b1      	movs	r1, #177	@ 0xb1
 8009d2e:	4b49      	ldr	r3, [pc, #292]	@ (8009e54 <__multiply+0x15c>)
 8009d30:	4849      	ldr	r0, [pc, #292]	@ (8009e58 <__multiply+0x160>)
 8009d32:	9a02      	ldr	r2, [sp, #8]
 8009d34:	0049      	lsls	r1, r1, #1
 8009d36:	f000 fb3d 	bl	800a3b4 <__assert_func>
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	3314      	adds	r3, #20
 8009d40:	469c      	mov	ip, r3
 8009d42:	19bb      	adds	r3, r7, r6
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4463      	add	r3, ip
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	4663      	mov	r3, ip
 8009d4c:	9904      	ldr	r1, [sp, #16]
 8009d4e:	428b      	cmp	r3, r1
 8009d50:	d32a      	bcc.n	8009da8 <__multiply+0xb0>
 8009d52:	0023      	movs	r3, r4
 8009d54:	00bf      	lsls	r7, r7, #2
 8009d56:	3314      	adds	r3, #20
 8009d58:	3514      	adds	r5, #20
 8009d5a:	9308      	str	r3, [sp, #32]
 8009d5c:	00b6      	lsls	r6, r6, #2
 8009d5e:	19db      	adds	r3, r3, r7
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	19ab      	adds	r3, r5, r6
 8009d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d66:	2304      	movs	r3, #4
 8009d68:	9306      	str	r3, [sp, #24]
 8009d6a:	0023      	movs	r3, r4
 8009d6c:	9a05      	ldr	r2, [sp, #20]
 8009d6e:	3315      	adds	r3, #21
 8009d70:	9501      	str	r5, [sp, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d305      	bcc.n	8009d82 <__multiply+0x8a>
 8009d76:	1b13      	subs	r3, r2, r4
 8009d78:	3b15      	subs	r3, #21
 8009d7a:	089b      	lsrs	r3, r3, #2
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	9306      	str	r3, [sp, #24]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d310      	bcc.n	8009dac <__multiply+0xb4>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd05      	ble.n	8009d9c <__multiply+0xa4>
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	3b04      	subs	r3, #4
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d056      	beq.n	8009e4a <__multiply+0x152>
 8009d9c:	9b02      	ldr	r3, [sp, #8]
 8009d9e:	9a03      	ldr	r2, [sp, #12]
 8009da0:	0018      	movs	r0, r3
 8009da2:	611a      	str	r2, [r3, #16]
 8009da4:	b00b      	add	sp, #44	@ 0x2c
 8009da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da8:	c304      	stmia	r3!, {r2}
 8009daa:	e7cf      	b.n	8009d4c <__multiply+0x54>
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	b280      	uxth	r0, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d01e      	beq.n	8009df4 <__multiply+0xfc>
 8009db6:	4667      	mov	r7, ip
 8009db8:	2500      	movs	r5, #0
 8009dba:	9e08      	ldr	r6, [sp, #32]
 8009dbc:	ce02      	ldmia	r6!, {r1}
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	9307      	str	r3, [sp, #28]
 8009dc2:	b28b      	uxth	r3, r1
 8009dc4:	4343      	muls	r3, r0
 8009dc6:	001a      	movs	r2, r3
 8009dc8:	466b      	mov	r3, sp
 8009dca:	0c09      	lsrs	r1, r1, #16
 8009dcc:	8b9b      	ldrh	r3, [r3, #28]
 8009dce:	4341      	muls	r1, r0
 8009dd0:	18d3      	adds	r3, r2, r3
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	195b      	adds	r3, r3, r5
 8009dd6:	0c12      	lsrs	r2, r2, #16
 8009dd8:	1889      	adds	r1, r1, r2
 8009dda:	0c1a      	lsrs	r2, r3, #16
 8009ddc:	188a      	adds	r2, r1, r2
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	0c15      	lsrs	r5, r2, #16
 8009de2:	0412      	lsls	r2, r2, #16
 8009de4:	431a      	orrs	r2, r3
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	c704      	stmia	r7!, {r2}
 8009dea:	42b3      	cmp	r3, r6
 8009dec:	d8e6      	bhi.n	8009dbc <__multiply+0xc4>
 8009dee:	4663      	mov	r3, ip
 8009df0:	9a06      	ldr	r2, [sp, #24]
 8009df2:	509d      	str	r5, [r3, r2]
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	0c00      	lsrs	r0, r0, #16
 8009dfa:	d020      	beq.n	8009e3e <__multiply+0x146>
 8009dfc:	4663      	mov	r3, ip
 8009dfe:	0025      	movs	r5, r4
 8009e00:	4661      	mov	r1, ip
 8009e02:	2700      	movs	r7, #0
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3514      	adds	r5, #20
 8009e08:	682a      	ldr	r2, [r5, #0]
 8009e0a:	680e      	ldr	r6, [r1, #0]
 8009e0c:	b292      	uxth	r2, r2
 8009e0e:	4342      	muls	r2, r0
 8009e10:	0c36      	lsrs	r6, r6, #16
 8009e12:	1992      	adds	r2, r2, r6
 8009e14:	19d2      	adds	r2, r2, r7
 8009e16:	0416      	lsls	r6, r2, #16
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	431e      	orrs	r6, r3
 8009e1c:	600e      	str	r6, [r1, #0]
 8009e1e:	cd40      	ldmia	r5!, {r6}
 8009e20:	684b      	ldr	r3, [r1, #4]
 8009e22:	0c36      	lsrs	r6, r6, #16
 8009e24:	4346      	muls	r6, r0
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	0c12      	lsrs	r2, r2, #16
 8009e2a:	18f3      	adds	r3, r6, r3
 8009e2c:	189b      	adds	r3, r3, r2
 8009e2e:	9a05      	ldr	r2, [sp, #20]
 8009e30:	0c1f      	lsrs	r7, r3, #16
 8009e32:	3104      	adds	r1, #4
 8009e34:	42aa      	cmp	r2, r5
 8009e36:	d8e7      	bhi.n	8009e08 <__multiply+0x110>
 8009e38:	4662      	mov	r2, ip
 8009e3a:	9906      	ldr	r1, [sp, #24]
 8009e3c:	5053      	str	r3, [r2, r1]
 8009e3e:	9b01      	ldr	r3, [sp, #4]
 8009e40:	3304      	adds	r3, #4
 8009e42:	9301      	str	r3, [sp, #4]
 8009e44:	2304      	movs	r3, #4
 8009e46:	449c      	add	ip, r3
 8009e48:	e79b      	b.n	8009d82 <__multiply+0x8a>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	e79b      	b.n	8009d8a <__multiply+0x92>
 8009e52:	46c0      	nop			@ (mov r8, r8)
 8009e54:	0800abd0 	.word	0x0800abd0
 8009e58:	0800abe1 	.word	0x0800abe1

08009e5c <__pow5mult>:
 8009e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5e:	2303      	movs	r3, #3
 8009e60:	0015      	movs	r5, r2
 8009e62:	0007      	movs	r7, r0
 8009e64:	000e      	movs	r6, r1
 8009e66:	401a      	ands	r2, r3
 8009e68:	421d      	tst	r5, r3
 8009e6a:	d008      	beq.n	8009e7e <__pow5mult+0x22>
 8009e6c:	4925      	ldr	r1, [pc, #148]	@ (8009f04 <__pow5mult+0xa8>)
 8009e6e:	3a01      	subs	r2, #1
 8009e70:	0092      	lsls	r2, r2, #2
 8009e72:	5852      	ldr	r2, [r2, r1]
 8009e74:	2300      	movs	r3, #0
 8009e76:	0031      	movs	r1, r6
 8009e78:	f7ff fe92 	bl	8009ba0 <__multadd>
 8009e7c:	0006      	movs	r6, r0
 8009e7e:	10ad      	asrs	r5, r5, #2
 8009e80:	d03d      	beq.n	8009efe <__pow5mult+0xa2>
 8009e82:	69fc      	ldr	r4, [r7, #28]
 8009e84:	2c00      	cmp	r4, #0
 8009e86:	d10f      	bne.n	8009ea8 <__pow5mult+0x4c>
 8009e88:	2010      	movs	r0, #16
 8009e8a:	f7ff fd65 	bl	8009958 <malloc>
 8009e8e:	1e02      	subs	r2, r0, #0
 8009e90:	61f8      	str	r0, [r7, #28]
 8009e92:	d105      	bne.n	8009ea0 <__pow5mult+0x44>
 8009e94:	21b4      	movs	r1, #180	@ 0xb4
 8009e96:	4b1c      	ldr	r3, [pc, #112]	@ (8009f08 <__pow5mult+0xac>)
 8009e98:	481c      	ldr	r0, [pc, #112]	@ (8009f0c <__pow5mult+0xb0>)
 8009e9a:	31ff      	adds	r1, #255	@ 0xff
 8009e9c:	f000 fa8a 	bl	800a3b4 <__assert_func>
 8009ea0:	6044      	str	r4, [r0, #4]
 8009ea2:	6084      	str	r4, [r0, #8]
 8009ea4:	6004      	str	r4, [r0, #0]
 8009ea6:	60c4      	str	r4, [r0, #12]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	689c      	ldr	r4, [r3, #8]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	2c00      	cmp	r4, #0
 8009eb0:	d108      	bne.n	8009ec4 <__pow5mult+0x68>
 8009eb2:	0038      	movs	r0, r7
 8009eb4:	4916      	ldr	r1, [pc, #88]	@ (8009f10 <__pow5mult+0xb4>)
 8009eb6:	f7ff ff07 	bl	8009cc8 <__i2b>
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	0004      	movs	r4, r0
 8009ebe:	6098      	str	r0, [r3, #8]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6003      	str	r3, [r0, #0]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	421d      	tst	r5, r3
 8009ec8:	d00a      	beq.n	8009ee0 <__pow5mult+0x84>
 8009eca:	0031      	movs	r1, r6
 8009ecc:	0022      	movs	r2, r4
 8009ece:	0038      	movs	r0, r7
 8009ed0:	f7ff ff12 	bl	8009cf8 <__multiply>
 8009ed4:	0031      	movs	r1, r6
 8009ed6:	9001      	str	r0, [sp, #4]
 8009ed8:	0038      	movs	r0, r7
 8009eda:	f7ff fe3d 	bl	8009b58 <_Bfree>
 8009ede:	9e01      	ldr	r6, [sp, #4]
 8009ee0:	106d      	asrs	r5, r5, #1
 8009ee2:	d00c      	beq.n	8009efe <__pow5mult+0xa2>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d107      	bne.n	8009efa <__pow5mult+0x9e>
 8009eea:	0022      	movs	r2, r4
 8009eec:	0021      	movs	r1, r4
 8009eee:	0038      	movs	r0, r7
 8009ef0:	f7ff ff02 	bl	8009cf8 <__multiply>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	6003      	str	r3, [r0, #0]
 8009efa:	0004      	movs	r4, r0
 8009efc:	e7e2      	b.n	8009ec4 <__pow5mult+0x68>
 8009efe:	0030      	movs	r0, r6
 8009f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f02:	46c0      	nop			@ (mov r8, r8)
 8009f04:	0800ac3c 	.word	0x0800ac3c
 8009f08:	0800ab61 	.word	0x0800ab61
 8009f0c:	0800abe1 	.word	0x0800abe1
 8009f10:	00000271 	.word	0x00000271

08009f14 <__lshift>:
 8009f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f16:	000c      	movs	r4, r1
 8009f18:	0016      	movs	r6, r2
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	1157      	asrs	r7, r2, #5
 8009f1e:	b085      	sub	sp, #20
 8009f20:	18fb      	adds	r3, r7, r3
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	3301      	adds	r3, #1
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	6849      	ldr	r1, [r1, #4]
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	9002      	str	r0, [sp, #8]
 8009f2e:	9a00      	ldr	r2, [sp, #0]
 8009f30:	4293      	cmp	r3, r2
 8009f32:	db10      	blt.n	8009f56 <__lshift+0x42>
 8009f34:	9802      	ldr	r0, [sp, #8]
 8009f36:	f7ff fdcb 	bl	8009ad0 <_Balloc>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	0001      	movs	r1, r0
 8009f3e:	0005      	movs	r5, r0
 8009f40:	001a      	movs	r2, r3
 8009f42:	3114      	adds	r1, #20
 8009f44:	4298      	cmp	r0, r3
 8009f46:	d10c      	bne.n	8009f62 <__lshift+0x4e>
 8009f48:	21ef      	movs	r1, #239	@ 0xef
 8009f4a:	002a      	movs	r2, r5
 8009f4c:	4b25      	ldr	r3, [pc, #148]	@ (8009fe4 <__lshift+0xd0>)
 8009f4e:	4826      	ldr	r0, [pc, #152]	@ (8009fe8 <__lshift+0xd4>)
 8009f50:	0049      	lsls	r1, r1, #1
 8009f52:	f000 fa2f 	bl	800a3b4 <__assert_func>
 8009f56:	3101      	adds	r1, #1
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	e7e8      	b.n	8009f2e <__lshift+0x1a>
 8009f5c:	0098      	lsls	r0, r3, #2
 8009f5e:	500a      	str	r2, [r1, r0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	42bb      	cmp	r3, r7
 8009f64:	dbfa      	blt.n	8009f5c <__lshift+0x48>
 8009f66:	43fb      	mvns	r3, r7
 8009f68:	17db      	asrs	r3, r3, #31
 8009f6a:	401f      	ands	r7, r3
 8009f6c:	00bf      	lsls	r7, r7, #2
 8009f6e:	0023      	movs	r3, r4
 8009f70:	201f      	movs	r0, #31
 8009f72:	19c9      	adds	r1, r1, r7
 8009f74:	0037      	movs	r7, r6
 8009f76:	6922      	ldr	r2, [r4, #16]
 8009f78:	3314      	adds	r3, #20
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	189a      	adds	r2, r3, r2
 8009f7e:	4007      	ands	r7, r0
 8009f80:	4206      	tst	r6, r0
 8009f82:	d029      	beq.n	8009fd8 <__lshift+0xc4>
 8009f84:	3001      	adds	r0, #1
 8009f86:	1bc0      	subs	r0, r0, r7
 8009f88:	9003      	str	r0, [sp, #12]
 8009f8a:	468c      	mov	ip, r1
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	681e      	ldr	r6, [r3, #0]
 8009f90:	40be      	lsls	r6, r7
 8009f92:	4306      	orrs	r6, r0
 8009f94:	4660      	mov	r0, ip
 8009f96:	c040      	stmia	r0!, {r6}
 8009f98:	4684      	mov	ip, r0
 8009f9a:	9e03      	ldr	r6, [sp, #12]
 8009f9c:	cb01      	ldmia	r3!, {r0}
 8009f9e:	40f0      	lsrs	r0, r6
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d8f4      	bhi.n	8009f8e <__lshift+0x7a>
 8009fa4:	0026      	movs	r6, r4
 8009fa6:	3615      	adds	r6, #21
 8009fa8:	2304      	movs	r3, #4
 8009faa:	42b2      	cmp	r2, r6
 8009fac:	d304      	bcc.n	8009fb8 <__lshift+0xa4>
 8009fae:	1b13      	subs	r3, r2, r4
 8009fb0:	3b15      	subs	r3, #21
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	50c8      	str	r0, [r1, r3]
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d002      	beq.n	8009fc4 <__lshift+0xb0>
 8009fbe:	9b01      	ldr	r3, [sp, #4]
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	9b00      	ldr	r3, [sp, #0]
 8009fc6:	9802      	ldr	r0, [sp, #8]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	0021      	movs	r1, r4
 8009fcc:	612b      	str	r3, [r5, #16]
 8009fce:	f7ff fdc3 	bl	8009b58 <_Bfree>
 8009fd2:	0028      	movs	r0, r5
 8009fd4:	b005      	add	sp, #20
 8009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd8:	cb01      	ldmia	r3!, {r0}
 8009fda:	c101      	stmia	r1!, {r0}
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d8fb      	bhi.n	8009fd8 <__lshift+0xc4>
 8009fe0:	e7f0      	b.n	8009fc4 <__lshift+0xb0>
 8009fe2:	46c0      	nop			@ (mov r8, r8)
 8009fe4:	0800abd0 	.word	0x0800abd0
 8009fe8:	0800abe1 	.word	0x0800abe1

08009fec <__mcmp>:
 8009fec:	b530      	push	{r4, r5, lr}
 8009fee:	690b      	ldr	r3, [r1, #16]
 8009ff0:	6904      	ldr	r4, [r0, #16]
 8009ff2:	0002      	movs	r2, r0
 8009ff4:	1ae0      	subs	r0, r4, r3
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	d10f      	bne.n	800a01a <__mcmp+0x2e>
 8009ffa:	3214      	adds	r2, #20
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3114      	adds	r1, #20
 800a000:	0014      	movs	r4, r2
 800a002:	18c9      	adds	r1, r1, r3
 800a004:	18d2      	adds	r2, r2, r3
 800a006:	3a04      	subs	r2, #4
 800a008:	3904      	subs	r1, #4
 800a00a:	6815      	ldr	r5, [r2, #0]
 800a00c:	680b      	ldr	r3, [r1, #0]
 800a00e:	429d      	cmp	r5, r3
 800a010:	d004      	beq.n	800a01c <__mcmp+0x30>
 800a012:	2001      	movs	r0, #1
 800a014:	429d      	cmp	r5, r3
 800a016:	d200      	bcs.n	800a01a <__mcmp+0x2e>
 800a018:	3802      	subs	r0, #2
 800a01a:	bd30      	pop	{r4, r5, pc}
 800a01c:	4294      	cmp	r4, r2
 800a01e:	d3f2      	bcc.n	800a006 <__mcmp+0x1a>
 800a020:	e7fb      	b.n	800a01a <__mcmp+0x2e>
	...

0800a024 <__mdiff>:
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	000c      	movs	r4, r1
 800a028:	b087      	sub	sp, #28
 800a02a:	9000      	str	r0, [sp, #0]
 800a02c:	0011      	movs	r1, r2
 800a02e:	0020      	movs	r0, r4
 800a030:	0017      	movs	r7, r2
 800a032:	f7ff ffdb 	bl	8009fec <__mcmp>
 800a036:	1e05      	subs	r5, r0, #0
 800a038:	d110      	bne.n	800a05c <__mdiff+0x38>
 800a03a:	0001      	movs	r1, r0
 800a03c:	9800      	ldr	r0, [sp, #0]
 800a03e:	f7ff fd47 	bl	8009ad0 <_Balloc>
 800a042:	1e02      	subs	r2, r0, #0
 800a044:	d104      	bne.n	800a050 <__mdiff+0x2c>
 800a046:	4b40      	ldr	r3, [pc, #256]	@ (800a148 <__mdiff+0x124>)
 800a048:	4840      	ldr	r0, [pc, #256]	@ (800a14c <__mdiff+0x128>)
 800a04a:	4941      	ldr	r1, [pc, #260]	@ (800a150 <__mdiff+0x12c>)
 800a04c:	f000 f9b2 	bl	800a3b4 <__assert_func>
 800a050:	2301      	movs	r3, #1
 800a052:	6145      	str	r5, [r0, #20]
 800a054:	6103      	str	r3, [r0, #16]
 800a056:	0010      	movs	r0, r2
 800a058:	b007      	add	sp, #28
 800a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05c:	2600      	movs	r6, #0
 800a05e:	42b0      	cmp	r0, r6
 800a060:	da03      	bge.n	800a06a <__mdiff+0x46>
 800a062:	0023      	movs	r3, r4
 800a064:	003c      	movs	r4, r7
 800a066:	001f      	movs	r7, r3
 800a068:	3601      	adds	r6, #1
 800a06a:	6861      	ldr	r1, [r4, #4]
 800a06c:	9800      	ldr	r0, [sp, #0]
 800a06e:	f7ff fd2f 	bl	8009ad0 <_Balloc>
 800a072:	1e02      	subs	r2, r0, #0
 800a074:	d103      	bne.n	800a07e <__mdiff+0x5a>
 800a076:	4b34      	ldr	r3, [pc, #208]	@ (800a148 <__mdiff+0x124>)
 800a078:	4834      	ldr	r0, [pc, #208]	@ (800a14c <__mdiff+0x128>)
 800a07a:	4936      	ldr	r1, [pc, #216]	@ (800a154 <__mdiff+0x130>)
 800a07c:	e7e6      	b.n	800a04c <__mdiff+0x28>
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	3414      	adds	r4, #20
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	18e3      	adds	r3, r4, r3
 800a088:	0021      	movs	r1, r4
 800a08a:	9401      	str	r4, [sp, #4]
 800a08c:	003c      	movs	r4, r7
 800a08e:	9302      	str	r3, [sp, #8]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	3414      	adds	r4, #20
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	18e3      	adds	r3, r4, r3
 800a098:	9303      	str	r3, [sp, #12]
 800a09a:	0003      	movs	r3, r0
 800a09c:	60c6      	str	r6, [r0, #12]
 800a09e:	468c      	mov	ip, r1
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	3314      	adds	r3, #20
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	4663      	mov	r3, ip
 800a0aa:	cb20      	ldmia	r3!, {r5}
 800a0ac:	b2a9      	uxth	r1, r5
 800a0ae:	000e      	movs	r6, r1
 800a0b0:	469c      	mov	ip, r3
 800a0b2:	cc08      	ldmia	r4!, {r3}
 800a0b4:	0c2d      	lsrs	r5, r5, #16
 800a0b6:	b299      	uxth	r1, r3
 800a0b8:	1a71      	subs	r1, r6, r1
 800a0ba:	1809      	adds	r1, r1, r0
 800a0bc:	0c1b      	lsrs	r3, r3, #16
 800a0be:	1408      	asrs	r0, r1, #16
 800a0c0:	1aeb      	subs	r3, r5, r3
 800a0c2:	181b      	adds	r3, r3, r0
 800a0c4:	1418      	asrs	r0, r3, #16
 800a0c6:	b289      	uxth	r1, r1
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4319      	orrs	r1, r3
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	c302      	stmia	r3!, {r1}
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	d8e7      	bhi.n	800a0a8 <__mdiff+0x84>
 800a0d8:	0039      	movs	r1, r7
 800a0da:	9c03      	ldr	r4, [sp, #12]
 800a0dc:	3115      	adds	r1, #21
 800a0de:	2304      	movs	r3, #4
 800a0e0:	428c      	cmp	r4, r1
 800a0e2:	d304      	bcc.n	800a0ee <__mdiff+0xca>
 800a0e4:	1be3      	subs	r3, r4, r7
 800a0e6:	3b15      	subs	r3, #21
 800a0e8:	089b      	lsrs	r3, r3, #2
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	9901      	ldr	r1, [sp, #4]
 800a0f0:	18cd      	adds	r5, r1, r3
 800a0f2:	9904      	ldr	r1, [sp, #16]
 800a0f4:	002e      	movs	r6, r5
 800a0f6:	18cb      	adds	r3, r1, r3
 800a0f8:	001f      	movs	r7, r3
 800a0fa:	9902      	ldr	r1, [sp, #8]
 800a0fc:	428e      	cmp	r6, r1
 800a0fe:	d311      	bcc.n	800a124 <__mdiff+0x100>
 800a100:	9c02      	ldr	r4, [sp, #8]
 800a102:	1ee9      	subs	r1, r5, #3
 800a104:	2000      	movs	r0, #0
 800a106:	428c      	cmp	r4, r1
 800a108:	d304      	bcc.n	800a114 <__mdiff+0xf0>
 800a10a:	0021      	movs	r1, r4
 800a10c:	3103      	adds	r1, #3
 800a10e:	1b49      	subs	r1, r1, r5
 800a110:	0889      	lsrs	r1, r1, #2
 800a112:	0088      	lsls	r0, r1, #2
 800a114:	181b      	adds	r3, r3, r0
 800a116:	3b04      	subs	r3, #4
 800a118:	6819      	ldr	r1, [r3, #0]
 800a11a:	2900      	cmp	r1, #0
 800a11c:	d010      	beq.n	800a140 <__mdiff+0x11c>
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	6113      	str	r3, [r2, #16]
 800a122:	e798      	b.n	800a056 <__mdiff+0x32>
 800a124:	4684      	mov	ip, r0
 800a126:	ce02      	ldmia	r6!, {r1}
 800a128:	b288      	uxth	r0, r1
 800a12a:	4460      	add	r0, ip
 800a12c:	1400      	asrs	r0, r0, #16
 800a12e:	0c0c      	lsrs	r4, r1, #16
 800a130:	1904      	adds	r4, r0, r4
 800a132:	4461      	add	r1, ip
 800a134:	1420      	asrs	r0, r4, #16
 800a136:	b289      	uxth	r1, r1
 800a138:	0424      	lsls	r4, r4, #16
 800a13a:	4321      	orrs	r1, r4
 800a13c:	c702      	stmia	r7!, {r1}
 800a13e:	e7dc      	b.n	800a0fa <__mdiff+0xd6>
 800a140:	9900      	ldr	r1, [sp, #0]
 800a142:	3901      	subs	r1, #1
 800a144:	9100      	str	r1, [sp, #0]
 800a146:	e7e6      	b.n	800a116 <__mdiff+0xf2>
 800a148:	0800abd0 	.word	0x0800abd0
 800a14c:	0800abe1 	.word	0x0800abe1
 800a150:	00000237 	.word	0x00000237
 800a154:	00000245 	.word	0x00000245

0800a158 <__d2b>:
 800a158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a15a:	2101      	movs	r1, #1
 800a15c:	0016      	movs	r6, r2
 800a15e:	001f      	movs	r7, r3
 800a160:	f7ff fcb6 	bl	8009ad0 <_Balloc>
 800a164:	1e04      	subs	r4, r0, #0
 800a166:	d105      	bne.n	800a174 <__d2b+0x1c>
 800a168:	0022      	movs	r2, r4
 800a16a:	4b25      	ldr	r3, [pc, #148]	@ (800a200 <__d2b+0xa8>)
 800a16c:	4825      	ldr	r0, [pc, #148]	@ (800a204 <__d2b+0xac>)
 800a16e:	4926      	ldr	r1, [pc, #152]	@ (800a208 <__d2b+0xb0>)
 800a170:	f000 f920 	bl	800a3b4 <__assert_func>
 800a174:	033b      	lsls	r3, r7, #12
 800a176:	007d      	lsls	r5, r7, #1
 800a178:	0b1b      	lsrs	r3, r3, #12
 800a17a:	0d6d      	lsrs	r5, r5, #21
 800a17c:	d002      	beq.n	800a184 <__d2b+0x2c>
 800a17e:	2280      	movs	r2, #128	@ 0x80
 800a180:	0352      	lsls	r2, r2, #13
 800a182:	4313      	orrs	r3, r2
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	2e00      	cmp	r6, #0
 800a188:	d025      	beq.n	800a1d6 <__d2b+0x7e>
 800a18a:	4668      	mov	r0, sp
 800a18c:	9600      	str	r6, [sp, #0]
 800a18e:	f7ff fd6c 	bl	8009c6a <__lo0bits>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	9900      	ldr	r1, [sp, #0]
 800a196:	2800      	cmp	r0, #0
 800a198:	d01b      	beq.n	800a1d2 <__d2b+0x7a>
 800a19a:	2220      	movs	r2, #32
 800a19c:	001e      	movs	r6, r3
 800a19e:	1a12      	subs	r2, r2, r0
 800a1a0:	4096      	lsls	r6, r2
 800a1a2:	0032      	movs	r2, r6
 800a1a4:	40c3      	lsrs	r3, r0
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	6162      	str	r2, [r4, #20]
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	9e01      	ldr	r6, [sp, #4]
 800a1ae:	61a6      	str	r6, [r4, #24]
 800a1b0:	1e73      	subs	r3, r6, #1
 800a1b2:	419e      	sbcs	r6, r3
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	6126      	str	r6, [r4, #16]
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	d014      	beq.n	800a1e6 <__d2b+0x8e>
 800a1bc:	2635      	movs	r6, #53	@ 0x35
 800a1be:	4b13      	ldr	r3, [pc, #76]	@ (800a20c <__d2b+0xb4>)
 800a1c0:	18ed      	adds	r5, r5, r3
 800a1c2:	9b08      	ldr	r3, [sp, #32]
 800a1c4:	182d      	adds	r5, r5, r0
 800a1c6:	601d      	str	r5, [r3, #0]
 800a1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ca:	1a36      	subs	r6, r6, r0
 800a1cc:	601e      	str	r6, [r3, #0]
 800a1ce:	0020      	movs	r0, r4
 800a1d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1d2:	6161      	str	r1, [r4, #20]
 800a1d4:	e7ea      	b.n	800a1ac <__d2b+0x54>
 800a1d6:	a801      	add	r0, sp, #4
 800a1d8:	f7ff fd47 	bl	8009c6a <__lo0bits>
 800a1dc:	9b01      	ldr	r3, [sp, #4]
 800a1de:	2601      	movs	r6, #1
 800a1e0:	6163      	str	r3, [r4, #20]
 800a1e2:	3020      	adds	r0, #32
 800a1e4:	e7e7      	b.n	800a1b6 <__d2b+0x5e>
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a210 <__d2b+0xb8>)
 800a1e8:	18c0      	adds	r0, r0, r3
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	6018      	str	r0, [r3, #0]
 800a1ee:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <__d2b+0xbc>)
 800a1f0:	18f3      	adds	r3, r6, r3
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	18e3      	adds	r3, r4, r3
 800a1f6:	6958      	ldr	r0, [r3, #20]
 800a1f8:	f7ff fd16 	bl	8009c28 <__hi0bits>
 800a1fc:	0176      	lsls	r6, r6, #5
 800a1fe:	e7e3      	b.n	800a1c8 <__d2b+0x70>
 800a200:	0800abd0 	.word	0x0800abd0
 800a204:	0800abe1 	.word	0x0800abe1
 800a208:	0000030f 	.word	0x0000030f
 800a20c:	fffffbcd 	.word	0xfffffbcd
 800a210:	fffffbce 	.word	0xfffffbce
 800a214:	3fffffff 	.word	0x3fffffff

0800a218 <__sflush_r>:
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	220c      	movs	r2, #12
 800a21c:	5e8b      	ldrsh	r3, [r1, r2]
 800a21e:	0005      	movs	r5, r0
 800a220:	000c      	movs	r4, r1
 800a222:	071a      	lsls	r2, r3, #28
 800a224:	d456      	bmi.n	800a2d4 <__sflush_r+0xbc>
 800a226:	684a      	ldr	r2, [r1, #4]
 800a228:	2a00      	cmp	r2, #0
 800a22a:	dc02      	bgt.n	800a232 <__sflush_r+0x1a>
 800a22c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a22e:	2a00      	cmp	r2, #0
 800a230:	dd4e      	ble.n	800a2d0 <__sflush_r+0xb8>
 800a232:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a234:	2f00      	cmp	r7, #0
 800a236:	d04b      	beq.n	800a2d0 <__sflush_r+0xb8>
 800a238:	2200      	movs	r2, #0
 800a23a:	2080      	movs	r0, #128	@ 0x80
 800a23c:	682e      	ldr	r6, [r5, #0]
 800a23e:	602a      	str	r2, [r5, #0]
 800a240:	001a      	movs	r2, r3
 800a242:	0140      	lsls	r0, r0, #5
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	4002      	ands	r2, r0
 800a248:	4203      	tst	r3, r0
 800a24a:	d033      	beq.n	800a2b4 <__sflush_r+0x9c>
 800a24c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	075b      	lsls	r3, r3, #29
 800a252:	d506      	bpl.n	800a262 <__sflush_r+0x4a>
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	1ad2      	subs	r2, r2, r3
 800a258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <__sflush_r+0x4a>
 800a25e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a260:	1ad2      	subs	r2, r2, r3
 800a262:	2300      	movs	r3, #0
 800a264:	0028      	movs	r0, r5
 800a266:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a268:	6a21      	ldr	r1, [r4, #32]
 800a26a:	47b8      	blx	r7
 800a26c:	89a2      	ldrh	r2, [r4, #12]
 800a26e:	1c43      	adds	r3, r0, #1
 800a270:	d106      	bne.n	800a280 <__sflush_r+0x68>
 800a272:	6829      	ldr	r1, [r5, #0]
 800a274:	291d      	cmp	r1, #29
 800a276:	d846      	bhi.n	800a306 <__sflush_r+0xee>
 800a278:	4b29      	ldr	r3, [pc, #164]	@ (800a320 <__sflush_r+0x108>)
 800a27a:	410b      	asrs	r3, r1
 800a27c:	07db      	lsls	r3, r3, #31
 800a27e:	d442      	bmi.n	800a306 <__sflush_r+0xee>
 800a280:	2300      	movs	r3, #0
 800a282:	6063      	str	r3, [r4, #4]
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	04d2      	lsls	r2, r2, #19
 800a28a:	d505      	bpl.n	800a298 <__sflush_r+0x80>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <__sflush_r+0x7e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d100      	bne.n	800a298 <__sflush_r+0x80>
 800a296:	6560      	str	r0, [r4, #84]	@ 0x54
 800a298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a29a:	602e      	str	r6, [r5, #0]
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d017      	beq.n	800a2d0 <__sflush_r+0xb8>
 800a2a0:	0023      	movs	r3, r4
 800a2a2:	3344      	adds	r3, #68	@ 0x44
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d002      	beq.n	800a2ae <__sflush_r+0x96>
 800a2a8:	0028      	movs	r0, r5
 800a2aa:	f7ff fb0b 	bl	80098c4 <_free_r>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2b2:	e00d      	b.n	800a2d0 <__sflush_r+0xb8>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	0028      	movs	r0, r5
 800a2b8:	47b8      	blx	r7
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d1c6      	bne.n	800a24e <__sflush_r+0x36>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0c3      	beq.n	800a24e <__sflush_r+0x36>
 800a2c6:	2b1d      	cmp	r3, #29
 800a2c8:	d001      	beq.n	800a2ce <__sflush_r+0xb6>
 800a2ca:	2b16      	cmp	r3, #22
 800a2cc:	d11a      	bne.n	800a304 <__sflush_r+0xec>
 800a2ce:	602e      	str	r6, [r5, #0]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e01e      	b.n	800a312 <__sflush_r+0xfa>
 800a2d4:	690e      	ldr	r6, [r1, #16]
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	d0fa      	beq.n	800a2d0 <__sflush_r+0xb8>
 800a2da:	680f      	ldr	r7, [r1, #0]
 800a2dc:	600e      	str	r6, [r1, #0]
 800a2de:	1bba      	subs	r2, r7, r6
 800a2e0:	9201      	str	r2, [sp, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	079b      	lsls	r3, r3, #30
 800a2e6:	d100      	bne.n	800a2ea <__sflush_r+0xd2>
 800a2e8:	694a      	ldr	r2, [r1, #20]
 800a2ea:	60a2      	str	r2, [r4, #8]
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	ddee      	ble.n	800a2d0 <__sflush_r+0xb8>
 800a2f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a2f4:	0032      	movs	r2, r6
 800a2f6:	001f      	movs	r7, r3
 800a2f8:	0028      	movs	r0, r5
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	6a21      	ldr	r1, [r4, #32]
 800a2fe:	47b8      	blx	r7
 800a300:	2800      	cmp	r0, #0
 800a302:	dc07      	bgt.n	800a314 <__sflush_r+0xfc>
 800a304:	89a2      	ldrh	r2, [r4, #12]
 800a306:	2340      	movs	r3, #64	@ 0x40
 800a308:	2001      	movs	r0, #1
 800a30a:	4313      	orrs	r3, r2
 800a30c:	b21b      	sxth	r3, r3
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	4240      	negs	r0, r0
 800a312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	1836      	adds	r6, r6, r0
 800a318:	1a1b      	subs	r3, r3, r0
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	e7e6      	b.n	800a2ec <__sflush_r+0xd4>
 800a31e:	46c0      	nop			@ (mov r8, r8)
 800a320:	dfbffffe 	.word	0xdfbffffe

0800a324 <_fflush_r>:
 800a324:	690b      	ldr	r3, [r1, #16]
 800a326:	b570      	push	{r4, r5, r6, lr}
 800a328:	0005      	movs	r5, r0
 800a32a:	000c      	movs	r4, r1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <_fflush_r+0x12>
 800a330:	2500      	movs	r5, #0
 800a332:	0028      	movs	r0, r5
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	2800      	cmp	r0, #0
 800a338:	d004      	beq.n	800a344 <_fflush_r+0x20>
 800a33a:	6a03      	ldr	r3, [r0, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <_fflush_r+0x20>
 800a340:	f7fe fb16 	bl	8008970 <__sinit>
 800a344:	220c      	movs	r2, #12
 800a346:	5ea3      	ldrsh	r3, [r4, r2]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0f1      	beq.n	800a330 <_fflush_r+0xc>
 800a34c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a34e:	07d2      	lsls	r2, r2, #31
 800a350:	d404      	bmi.n	800a35c <_fflush_r+0x38>
 800a352:	059b      	lsls	r3, r3, #22
 800a354:	d402      	bmi.n	800a35c <_fflush_r+0x38>
 800a356:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a358:	f7fe fc25 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 800a35c:	0028      	movs	r0, r5
 800a35e:	0021      	movs	r1, r4
 800a360:	f7ff ff5a 	bl	800a218 <__sflush_r>
 800a364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a366:	0005      	movs	r5, r0
 800a368:	07db      	lsls	r3, r3, #31
 800a36a:	d4e2      	bmi.n	800a332 <_fflush_r+0xe>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	059b      	lsls	r3, r3, #22
 800a370:	d4df      	bmi.n	800a332 <_fflush_r+0xe>
 800a372:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a374:	f7fe fc18 	bl	8008ba8 <__retarget_lock_release_recursive>
 800a378:	e7db      	b.n	800a332 <_fflush_r+0xe>
	...

0800a37c <_sbrk_r>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b570      	push	{r4, r5, r6, lr}
 800a380:	4d06      	ldr	r5, [pc, #24]	@ (800a39c <_sbrk_r+0x20>)
 800a382:	0004      	movs	r4, r0
 800a384:	0008      	movs	r0, r1
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	f7f9 fd4a 	bl	8003e20 <_sbrk>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d103      	bne.n	800a398 <_sbrk_r+0x1c>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d000      	beq.n	800a398 <_sbrk_r+0x1c>
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	bd70      	pop	{r4, r5, r6, pc}
 800a39a:	46c0      	nop			@ (mov r8, r8)
 800a39c:	200006cc 	.word	0x200006cc

0800a3a0 <memcpy>:
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d100      	bne.n	800a3aa <memcpy+0xa>
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	5ccc      	ldrb	r4, [r1, r3]
 800a3ac:	54c4      	strb	r4, [r0, r3]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	e7f8      	b.n	800a3a4 <memcpy+0x4>
	...

0800a3b4 <__assert_func>:
 800a3b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a3b6:	0014      	movs	r4, r2
 800a3b8:	001a      	movs	r2, r3
 800a3ba:	4b09      	ldr	r3, [pc, #36]	@ (800a3e0 <__assert_func+0x2c>)
 800a3bc:	0005      	movs	r5, r0
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	000e      	movs	r6, r1
 800a3c2:	68d8      	ldr	r0, [r3, #12]
 800a3c4:	4b07      	ldr	r3, [pc, #28]	@ (800a3e4 <__assert_func+0x30>)
 800a3c6:	2c00      	cmp	r4, #0
 800a3c8:	d101      	bne.n	800a3ce <__assert_func+0x1a>
 800a3ca:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <__assert_func+0x34>)
 800a3cc:	001c      	movs	r4, r3
 800a3ce:	4907      	ldr	r1, [pc, #28]	@ (800a3ec <__assert_func+0x38>)
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	9402      	str	r4, [sp, #8]
 800a3d4:	002b      	movs	r3, r5
 800a3d6:	9600      	str	r6, [sp, #0]
 800a3d8:	f000 f856 	bl	800a488 <fiprintf>
 800a3dc:	f000 f864 	bl	800a4a8 <abort>
 800a3e0:	20000024 	.word	0x20000024
 800a3e4:	0800ad42 	.word	0x0800ad42
 800a3e8:	0800ad7d 	.word	0x0800ad7d
 800a3ec:	0800ad4f 	.word	0x0800ad4f

0800a3f0 <_calloc_r>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	0c0b      	lsrs	r3, r1, #16
 800a3f4:	0c15      	lsrs	r5, r2, #16
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11e      	bne.n	800a438 <_calloc_r+0x48>
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	d10c      	bne.n	800a418 <_calloc_r+0x28>
 800a3fe:	b289      	uxth	r1, r1
 800a400:	b294      	uxth	r4, r2
 800a402:	434c      	muls	r4, r1
 800a404:	0021      	movs	r1, r4
 800a406:	f7ff fad3 	bl	80099b0 <_malloc_r>
 800a40a:	1e05      	subs	r5, r0, #0
 800a40c:	d01a      	beq.n	800a444 <_calloc_r+0x54>
 800a40e:	0022      	movs	r2, r4
 800a410:	2100      	movs	r1, #0
 800a412:	f7fe fb2d 	bl	8008a70 <memset>
 800a416:	e016      	b.n	800a446 <_calloc_r+0x56>
 800a418:	1c2b      	adds	r3, r5, #0
 800a41a:	1c0c      	adds	r4, r1, #0
 800a41c:	b289      	uxth	r1, r1
 800a41e:	b292      	uxth	r2, r2
 800a420:	434a      	muls	r2, r1
 800a422:	b29b      	uxth	r3, r3
 800a424:	b2a1      	uxth	r1, r4
 800a426:	4359      	muls	r1, r3
 800a428:	0c14      	lsrs	r4, r2, #16
 800a42a:	190c      	adds	r4, r1, r4
 800a42c:	0c23      	lsrs	r3, r4, #16
 800a42e:	d107      	bne.n	800a440 <_calloc_r+0x50>
 800a430:	0424      	lsls	r4, r4, #16
 800a432:	b292      	uxth	r2, r2
 800a434:	4314      	orrs	r4, r2
 800a436:	e7e5      	b.n	800a404 <_calloc_r+0x14>
 800a438:	2d00      	cmp	r5, #0
 800a43a:	d101      	bne.n	800a440 <_calloc_r+0x50>
 800a43c:	1c14      	adds	r4, r2, #0
 800a43e:	e7ed      	b.n	800a41c <_calloc_r+0x2c>
 800a440:	230c      	movs	r3, #12
 800a442:	6003      	str	r3, [r0, #0]
 800a444:	2500      	movs	r5, #0
 800a446:	0028      	movs	r0, r5
 800a448:	bd70      	pop	{r4, r5, r6, pc}

0800a44a <__ascii_mbtowc>:
 800a44a:	b082      	sub	sp, #8
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d100      	bne.n	800a452 <__ascii_mbtowc+0x8>
 800a450:	a901      	add	r1, sp, #4
 800a452:	1e10      	subs	r0, r2, #0
 800a454:	d006      	beq.n	800a464 <__ascii_mbtowc+0x1a>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <__ascii_mbtowc+0x1e>
 800a45a:	7813      	ldrb	r3, [r2, #0]
 800a45c:	600b      	str	r3, [r1, #0]
 800a45e:	7810      	ldrb	r0, [r2, #0]
 800a460:	1e43      	subs	r3, r0, #1
 800a462:	4198      	sbcs	r0, r3
 800a464:	b002      	add	sp, #8
 800a466:	4770      	bx	lr
 800a468:	2002      	movs	r0, #2
 800a46a:	4240      	negs	r0, r0
 800a46c:	e7fa      	b.n	800a464 <__ascii_mbtowc+0x1a>

0800a46e <__ascii_wctomb>:
 800a46e:	0003      	movs	r3, r0
 800a470:	1e08      	subs	r0, r1, #0
 800a472:	d005      	beq.n	800a480 <__ascii_wctomb+0x12>
 800a474:	2aff      	cmp	r2, #255	@ 0xff
 800a476:	d904      	bls.n	800a482 <__ascii_wctomb+0x14>
 800a478:	228a      	movs	r2, #138	@ 0x8a
 800a47a:	2001      	movs	r0, #1
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	4240      	negs	r0, r0
 800a480:	4770      	bx	lr
 800a482:	2001      	movs	r0, #1
 800a484:	700a      	strb	r2, [r1, #0]
 800a486:	e7fb      	b.n	800a480 <__ascii_wctomb+0x12>

0800a488 <fiprintf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b517      	push	{r0, r1, r2, r4, lr}
 800a48c:	4c05      	ldr	r4, [pc, #20]	@ (800a4a4 <fiprintf+0x1c>)
 800a48e:	ab05      	add	r3, sp, #20
 800a490:	cb04      	ldmia	r3!, {r2}
 800a492:	0001      	movs	r1, r0
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	f000 f834 	bl	800a504 <_vfiprintf_r>
 800a49c:	bc1e      	pop	{r1, r2, r3, r4}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	b003      	add	sp, #12
 800a4a2:	4718      	bx	r3
 800a4a4:	20000024 	.word	0x20000024

0800a4a8 <abort>:
 800a4a8:	2006      	movs	r0, #6
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	f000 fa10 	bl	800a8d0 <raise>
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	f7f9 fc43 	bl	8003d3c <_exit>

0800a4b6 <__sfputc_r>:
 800a4b6:	6893      	ldr	r3, [r2, #8]
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	6093      	str	r3, [r2, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da04      	bge.n	800a4cc <__sfputc_r+0x16>
 800a4c2:	6994      	ldr	r4, [r2, #24]
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	db07      	blt.n	800a4d8 <__sfputc_r+0x22>
 800a4c8:	290a      	cmp	r1, #10
 800a4ca:	d005      	beq.n	800a4d8 <__sfputc_r+0x22>
 800a4cc:	6813      	ldr	r3, [r2, #0]
 800a4ce:	1c58      	adds	r0, r3, #1
 800a4d0:	6010      	str	r0, [r2, #0]
 800a4d2:	7019      	strb	r1, [r3, #0]
 800a4d4:	0008      	movs	r0, r1
 800a4d6:	bd10      	pop	{r4, pc}
 800a4d8:	f000 f930 	bl	800a73c <__swbuf_r>
 800a4dc:	0001      	movs	r1, r0
 800a4de:	e7f9      	b.n	800a4d4 <__sfputc_r+0x1e>

0800a4e0 <__sfputs_r>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	0006      	movs	r6, r0
 800a4e4:	000f      	movs	r7, r1
 800a4e6:	0014      	movs	r4, r2
 800a4e8:	18d5      	adds	r5, r2, r3
 800a4ea:	42ac      	cmp	r4, r5
 800a4ec:	d101      	bne.n	800a4f2 <__sfputs_r+0x12>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e007      	b.n	800a502 <__sfputs_r+0x22>
 800a4f2:	7821      	ldrb	r1, [r4, #0]
 800a4f4:	003a      	movs	r2, r7
 800a4f6:	0030      	movs	r0, r6
 800a4f8:	f7ff ffdd 	bl	800a4b6 <__sfputc_r>
 800a4fc:	3401      	adds	r4, #1
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d1f3      	bne.n	800a4ea <__sfputs_r+0xa>
 800a502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a504 <_vfiprintf_r>:
 800a504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a506:	b0a1      	sub	sp, #132	@ 0x84
 800a508:	000f      	movs	r7, r1
 800a50a:	0015      	movs	r5, r2
 800a50c:	001e      	movs	r6, r3
 800a50e:	9003      	str	r0, [sp, #12]
 800a510:	2800      	cmp	r0, #0
 800a512:	d004      	beq.n	800a51e <_vfiprintf_r+0x1a>
 800a514:	6a03      	ldr	r3, [r0, #32]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <_vfiprintf_r+0x1a>
 800a51a:	f7fe fa29 	bl	8008970 <__sinit>
 800a51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a520:	07db      	lsls	r3, r3, #31
 800a522:	d405      	bmi.n	800a530 <_vfiprintf_r+0x2c>
 800a524:	89bb      	ldrh	r3, [r7, #12]
 800a526:	059b      	lsls	r3, r3, #22
 800a528:	d402      	bmi.n	800a530 <_vfiprintf_r+0x2c>
 800a52a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a52c:	f7fe fb3b 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 800a530:	89bb      	ldrh	r3, [r7, #12]
 800a532:	071b      	lsls	r3, r3, #28
 800a534:	d502      	bpl.n	800a53c <_vfiprintf_r+0x38>
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d113      	bne.n	800a564 <_vfiprintf_r+0x60>
 800a53c:	0039      	movs	r1, r7
 800a53e:	9803      	ldr	r0, [sp, #12]
 800a540:	f000 f93e 	bl	800a7c0 <__swsetup_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	d00d      	beq.n	800a564 <_vfiprintf_r+0x60>
 800a548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a54a:	07db      	lsls	r3, r3, #31
 800a54c:	d503      	bpl.n	800a556 <_vfiprintf_r+0x52>
 800a54e:	2001      	movs	r0, #1
 800a550:	4240      	negs	r0, r0
 800a552:	b021      	add	sp, #132	@ 0x84
 800a554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a556:	89bb      	ldrh	r3, [r7, #12]
 800a558:	059b      	lsls	r3, r3, #22
 800a55a:	d4f8      	bmi.n	800a54e <_vfiprintf_r+0x4a>
 800a55c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a55e:	f7fe fb23 	bl	8008ba8 <__retarget_lock_release_recursive>
 800a562:	e7f4      	b.n	800a54e <_vfiprintf_r+0x4a>
 800a564:	2300      	movs	r3, #0
 800a566:	ac08      	add	r4, sp, #32
 800a568:	6163      	str	r3, [r4, #20]
 800a56a:	3320      	adds	r3, #32
 800a56c:	7663      	strb	r3, [r4, #25]
 800a56e:	3310      	adds	r3, #16
 800a570:	76a3      	strb	r3, [r4, #26]
 800a572:	9607      	str	r6, [sp, #28]
 800a574:	002e      	movs	r6, r5
 800a576:	7833      	ldrb	r3, [r6, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <_vfiprintf_r+0x7c>
 800a57c:	2b25      	cmp	r3, #37	@ 0x25
 800a57e:	d148      	bne.n	800a612 <_vfiprintf_r+0x10e>
 800a580:	1b73      	subs	r3, r6, r5
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	42ae      	cmp	r6, r5
 800a586:	d00b      	beq.n	800a5a0 <_vfiprintf_r+0x9c>
 800a588:	002a      	movs	r2, r5
 800a58a:	0039      	movs	r1, r7
 800a58c:	9803      	ldr	r0, [sp, #12]
 800a58e:	f7ff ffa7 	bl	800a4e0 <__sfputs_r>
 800a592:	3001      	adds	r0, #1
 800a594:	d100      	bne.n	800a598 <_vfiprintf_r+0x94>
 800a596:	e0ae      	b.n	800a6f6 <_vfiprintf_r+0x1f2>
 800a598:	6963      	ldr	r3, [r4, #20]
 800a59a:	9a05      	ldr	r2, [sp, #20]
 800a59c:	189b      	adds	r3, r3, r2
 800a59e:	6163      	str	r3, [r4, #20]
 800a5a0:	7833      	ldrb	r3, [r6, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d100      	bne.n	800a5a8 <_vfiprintf_r+0xa4>
 800a5a6:	e0a6      	b.n	800a6f6 <_vfiprintf_r+0x1f2>
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4252      	negs	r2, r2
 800a5ae:	6062      	str	r2, [r4, #4]
 800a5b0:	a904      	add	r1, sp, #16
 800a5b2:	3254      	adds	r2, #84	@ 0x54
 800a5b4:	1852      	adds	r2, r2, r1
 800a5b6:	1c75      	adds	r5, r6, #1
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	60e3      	str	r3, [r4, #12]
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	7013      	strb	r3, [r2, #0]
 800a5c0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a5c2:	4b59      	ldr	r3, [pc, #356]	@ (800a728 <_vfiprintf_r+0x224>)
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	0018      	movs	r0, r3
 800a5c8:	7829      	ldrb	r1, [r5, #0]
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	f7fe faed 	bl	8008baa <memchr>
 800a5d0:	1c6e      	adds	r6, r5, #1
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d11f      	bne.n	800a616 <_vfiprintf_r+0x112>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	06d3      	lsls	r3, r2, #27
 800a5da:	d504      	bpl.n	800a5e6 <_vfiprintf_r+0xe2>
 800a5dc:	2353      	movs	r3, #83	@ 0x53
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	185b      	adds	r3, r3, r1
 800a5e2:	2120      	movs	r1, #32
 800a5e4:	7019      	strb	r1, [r3, #0]
 800a5e6:	0713      	lsls	r3, r2, #28
 800a5e8:	d504      	bpl.n	800a5f4 <_vfiprintf_r+0xf0>
 800a5ea:	2353      	movs	r3, #83	@ 0x53
 800a5ec:	a904      	add	r1, sp, #16
 800a5ee:	185b      	adds	r3, r3, r1
 800a5f0:	212b      	movs	r1, #43	@ 0x2b
 800a5f2:	7019      	strb	r1, [r3, #0]
 800a5f4:	782b      	ldrb	r3, [r5, #0]
 800a5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5f8:	d016      	beq.n	800a628 <_vfiprintf_r+0x124>
 800a5fa:	002e      	movs	r6, r5
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	200a      	movs	r0, #10
 800a600:	68e3      	ldr	r3, [r4, #12]
 800a602:	7832      	ldrb	r2, [r6, #0]
 800a604:	1c75      	adds	r5, r6, #1
 800a606:	3a30      	subs	r2, #48	@ 0x30
 800a608:	2a09      	cmp	r2, #9
 800a60a:	d950      	bls.n	800a6ae <_vfiprintf_r+0x1aa>
 800a60c:	2900      	cmp	r1, #0
 800a60e:	d111      	bne.n	800a634 <_vfiprintf_r+0x130>
 800a610:	e017      	b.n	800a642 <_vfiprintf_r+0x13e>
 800a612:	3601      	adds	r6, #1
 800a614:	e7af      	b.n	800a576 <_vfiprintf_r+0x72>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	1ac0      	subs	r0, r0, r3
 800a61c:	2301      	movs	r3, #1
 800a61e:	4083      	lsls	r3, r0
 800a620:	4313      	orrs	r3, r2
 800a622:	0035      	movs	r5, r6
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	e7cc      	b.n	800a5c2 <_vfiprintf_r+0xbe>
 800a628:	9b07      	ldr	r3, [sp, #28]
 800a62a:	1d19      	adds	r1, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	9107      	str	r1, [sp, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	db01      	blt.n	800a638 <_vfiprintf_r+0x134>
 800a634:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a636:	e004      	b.n	800a642 <_vfiprintf_r+0x13e>
 800a638:	425b      	negs	r3, r3
 800a63a:	60e3      	str	r3, [r4, #12]
 800a63c:	2302      	movs	r3, #2
 800a63e:	4313      	orrs	r3, r2
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	7833      	ldrb	r3, [r6, #0]
 800a644:	2b2e      	cmp	r3, #46	@ 0x2e
 800a646:	d10c      	bne.n	800a662 <_vfiprintf_r+0x15e>
 800a648:	7873      	ldrb	r3, [r6, #1]
 800a64a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a64c:	d134      	bne.n	800a6b8 <_vfiprintf_r+0x1b4>
 800a64e:	9b07      	ldr	r3, [sp, #28]
 800a650:	3602      	adds	r6, #2
 800a652:	1d1a      	adds	r2, r3, #4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	9207      	str	r2, [sp, #28]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	da01      	bge.n	800a660 <_vfiprintf_r+0x15c>
 800a65c:	2301      	movs	r3, #1
 800a65e:	425b      	negs	r3, r3
 800a660:	9309      	str	r3, [sp, #36]	@ 0x24
 800a662:	4d32      	ldr	r5, [pc, #200]	@ (800a72c <_vfiprintf_r+0x228>)
 800a664:	2203      	movs	r2, #3
 800a666:	0028      	movs	r0, r5
 800a668:	7831      	ldrb	r1, [r6, #0]
 800a66a:	f7fe fa9e 	bl	8008baa <memchr>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d006      	beq.n	800a680 <_vfiprintf_r+0x17c>
 800a672:	2340      	movs	r3, #64	@ 0x40
 800a674:	1b40      	subs	r0, r0, r5
 800a676:	4083      	lsls	r3, r0
 800a678:	6822      	ldr	r2, [r4, #0]
 800a67a:	3601      	adds	r6, #1
 800a67c:	4313      	orrs	r3, r2
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	7831      	ldrb	r1, [r6, #0]
 800a682:	2206      	movs	r2, #6
 800a684:	482a      	ldr	r0, [pc, #168]	@ (800a730 <_vfiprintf_r+0x22c>)
 800a686:	1c75      	adds	r5, r6, #1
 800a688:	7621      	strb	r1, [r4, #24]
 800a68a:	f7fe fa8e 	bl	8008baa <memchr>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d040      	beq.n	800a714 <_vfiprintf_r+0x210>
 800a692:	4b28      	ldr	r3, [pc, #160]	@ (800a734 <_vfiprintf_r+0x230>)
 800a694:	2b00      	cmp	r3, #0
 800a696:	d122      	bne.n	800a6de <_vfiprintf_r+0x1da>
 800a698:	2207      	movs	r2, #7
 800a69a:	9b07      	ldr	r3, [sp, #28]
 800a69c:	3307      	adds	r3, #7
 800a69e:	4393      	bics	r3, r2
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	6963      	ldr	r3, [r4, #20]
 800a6a6:	9a04      	ldr	r2, [sp, #16]
 800a6a8:	189b      	adds	r3, r3, r2
 800a6aa:	6163      	str	r3, [r4, #20]
 800a6ac:	e762      	b.n	800a574 <_vfiprintf_r+0x70>
 800a6ae:	4343      	muls	r3, r0
 800a6b0:	002e      	movs	r6, r5
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	189b      	adds	r3, r3, r2
 800a6b6:	e7a4      	b.n	800a602 <_vfiprintf_r+0xfe>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	200a      	movs	r0, #10
 800a6bc:	0019      	movs	r1, r3
 800a6be:	3601      	adds	r6, #1
 800a6c0:	6063      	str	r3, [r4, #4]
 800a6c2:	7832      	ldrb	r2, [r6, #0]
 800a6c4:	1c75      	adds	r5, r6, #1
 800a6c6:	3a30      	subs	r2, #48	@ 0x30
 800a6c8:	2a09      	cmp	r2, #9
 800a6ca:	d903      	bls.n	800a6d4 <_vfiprintf_r+0x1d0>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0c8      	beq.n	800a662 <_vfiprintf_r+0x15e>
 800a6d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6d2:	e7c6      	b.n	800a662 <_vfiprintf_r+0x15e>
 800a6d4:	4341      	muls	r1, r0
 800a6d6:	002e      	movs	r6, r5
 800a6d8:	2301      	movs	r3, #1
 800a6da:	1889      	adds	r1, r1, r2
 800a6dc:	e7f1      	b.n	800a6c2 <_vfiprintf_r+0x1be>
 800a6de:	aa07      	add	r2, sp, #28
 800a6e0:	9200      	str	r2, [sp, #0]
 800a6e2:	0021      	movs	r1, r4
 800a6e4:	003a      	movs	r2, r7
 800a6e6:	4b14      	ldr	r3, [pc, #80]	@ (800a738 <_vfiprintf_r+0x234>)
 800a6e8:	9803      	ldr	r0, [sp, #12]
 800a6ea:	f7fd fcf5 	bl	80080d8 <_printf_float>
 800a6ee:	9004      	str	r0, [sp, #16]
 800a6f0:	9b04      	ldr	r3, [sp, #16]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	d1d6      	bne.n	800a6a4 <_vfiprintf_r+0x1a0>
 800a6f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f8:	07db      	lsls	r3, r3, #31
 800a6fa:	d405      	bmi.n	800a708 <_vfiprintf_r+0x204>
 800a6fc:	89bb      	ldrh	r3, [r7, #12]
 800a6fe:	059b      	lsls	r3, r3, #22
 800a700:	d402      	bmi.n	800a708 <_vfiprintf_r+0x204>
 800a702:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a704:	f7fe fa50 	bl	8008ba8 <__retarget_lock_release_recursive>
 800a708:	89bb      	ldrh	r3, [r7, #12]
 800a70a:	065b      	lsls	r3, r3, #25
 800a70c:	d500      	bpl.n	800a710 <_vfiprintf_r+0x20c>
 800a70e:	e71e      	b.n	800a54e <_vfiprintf_r+0x4a>
 800a710:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a712:	e71e      	b.n	800a552 <_vfiprintf_r+0x4e>
 800a714:	aa07      	add	r2, sp, #28
 800a716:	9200      	str	r2, [sp, #0]
 800a718:	0021      	movs	r1, r4
 800a71a:	003a      	movs	r2, r7
 800a71c:	4b06      	ldr	r3, [pc, #24]	@ (800a738 <_vfiprintf_r+0x234>)
 800a71e:	9803      	ldr	r0, [sp, #12]
 800a720:	f7fd ff88 	bl	8008634 <_printf_i>
 800a724:	e7e3      	b.n	800a6ee <_vfiprintf_r+0x1ea>
 800a726:	46c0      	nop			@ (mov r8, r8)
 800a728:	0800ae7f 	.word	0x0800ae7f
 800a72c:	0800ae85 	.word	0x0800ae85
 800a730:	0800ae89 	.word	0x0800ae89
 800a734:	080080d9 	.word	0x080080d9
 800a738:	0800a4e1 	.word	0x0800a4e1

0800a73c <__swbuf_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	0006      	movs	r6, r0
 800a740:	000d      	movs	r5, r1
 800a742:	0014      	movs	r4, r2
 800a744:	2800      	cmp	r0, #0
 800a746:	d004      	beq.n	800a752 <__swbuf_r+0x16>
 800a748:	6a03      	ldr	r3, [r0, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <__swbuf_r+0x16>
 800a74e:	f7fe f90f 	bl	8008970 <__sinit>
 800a752:	69a3      	ldr	r3, [r4, #24]
 800a754:	60a3      	str	r3, [r4, #8]
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	071b      	lsls	r3, r3, #28
 800a75a:	d502      	bpl.n	800a762 <__swbuf_r+0x26>
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d109      	bne.n	800a776 <__swbuf_r+0x3a>
 800a762:	0021      	movs	r1, r4
 800a764:	0030      	movs	r0, r6
 800a766:	f000 f82b 	bl	800a7c0 <__swsetup_r>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d003      	beq.n	800a776 <__swbuf_r+0x3a>
 800a76e:	2501      	movs	r5, #1
 800a770:	426d      	negs	r5, r5
 800a772:	0028      	movs	r0, r5
 800a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	b2ef      	uxtb	r7, r5
 800a77c:	1ac0      	subs	r0, r0, r3
 800a77e:	6963      	ldr	r3, [r4, #20]
 800a780:	b2ed      	uxtb	r5, r5
 800a782:	4283      	cmp	r3, r0
 800a784:	dc05      	bgt.n	800a792 <__swbuf_r+0x56>
 800a786:	0021      	movs	r1, r4
 800a788:	0030      	movs	r0, r6
 800a78a:	f7ff fdcb 	bl	800a324 <_fflush_r>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1ed      	bne.n	800a76e <__swbuf_r+0x32>
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	3001      	adds	r0, #1
 800a796:	3b01      	subs	r3, #1
 800a798:	60a3      	str	r3, [r4, #8]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	6022      	str	r2, [r4, #0]
 800a7a0:	701f      	strb	r7, [r3, #0]
 800a7a2:	6963      	ldr	r3, [r4, #20]
 800a7a4:	4283      	cmp	r3, r0
 800a7a6:	d004      	beq.n	800a7b2 <__swbuf_r+0x76>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	07db      	lsls	r3, r3, #31
 800a7ac:	d5e1      	bpl.n	800a772 <__swbuf_r+0x36>
 800a7ae:	2d0a      	cmp	r5, #10
 800a7b0:	d1df      	bne.n	800a772 <__swbuf_r+0x36>
 800a7b2:	0021      	movs	r1, r4
 800a7b4:	0030      	movs	r0, r6
 800a7b6:	f7ff fdb5 	bl	800a324 <_fflush_r>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0d9      	beq.n	800a772 <__swbuf_r+0x36>
 800a7be:	e7d6      	b.n	800a76e <__swbuf_r+0x32>

0800a7c0 <__swsetup_r>:
 800a7c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a878 <__swsetup_r+0xb8>)
 800a7c2:	b570      	push	{r4, r5, r6, lr}
 800a7c4:	0005      	movs	r5, r0
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	000c      	movs	r4, r1
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d004      	beq.n	800a7d8 <__swsetup_r+0x18>
 800a7ce:	6a03      	ldr	r3, [r0, #32]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <__swsetup_r+0x18>
 800a7d4:	f7fe f8cc 	bl	8008970 <__sinit>
 800a7d8:	230c      	movs	r3, #12
 800a7da:	5ee2      	ldrsh	r2, [r4, r3]
 800a7dc:	0713      	lsls	r3, r2, #28
 800a7de:	d423      	bmi.n	800a828 <__swsetup_r+0x68>
 800a7e0:	06d3      	lsls	r3, r2, #27
 800a7e2:	d407      	bmi.n	800a7f4 <__swsetup_r+0x34>
 800a7e4:	2309      	movs	r3, #9
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	2340      	movs	r3, #64	@ 0x40
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	4240      	negs	r0, r0
 800a7f2:	e03a      	b.n	800a86a <__swsetup_r+0xaa>
 800a7f4:	0752      	lsls	r2, r2, #29
 800a7f6:	d513      	bpl.n	800a820 <__swsetup_r+0x60>
 800a7f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d008      	beq.n	800a810 <__swsetup_r+0x50>
 800a7fe:	0023      	movs	r3, r4
 800a800:	3344      	adds	r3, #68	@ 0x44
 800a802:	4299      	cmp	r1, r3
 800a804:	d002      	beq.n	800a80c <__swsetup_r+0x4c>
 800a806:	0028      	movs	r0, r5
 800a808:	f7ff f85c 	bl	80098c4 <_free_r>
 800a80c:	2300      	movs	r3, #0
 800a80e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a810:	2224      	movs	r2, #36	@ 0x24
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	4393      	bics	r3, r2
 800a816:	81a3      	strh	r3, [r4, #12]
 800a818:	2300      	movs	r3, #0
 800a81a:	6063      	str	r3, [r4, #4]
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	2308      	movs	r3, #8
 800a822:	89a2      	ldrh	r2, [r4, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10b      	bne.n	800a846 <__swsetup_r+0x86>
 800a82e:	21a0      	movs	r1, #160	@ 0xa0
 800a830:	2280      	movs	r2, #128	@ 0x80
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	0089      	lsls	r1, r1, #2
 800a836:	0092      	lsls	r2, r2, #2
 800a838:	400b      	ands	r3, r1
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d003      	beq.n	800a846 <__swsetup_r+0x86>
 800a83e:	0021      	movs	r1, r4
 800a840:	0028      	movs	r0, r5
 800a842:	f000 f88f 	bl	800a964 <__smakebuf_r>
 800a846:	230c      	movs	r3, #12
 800a848:	5ee2      	ldrsh	r2, [r4, r3]
 800a84a:	2101      	movs	r1, #1
 800a84c:	0013      	movs	r3, r2
 800a84e:	400b      	ands	r3, r1
 800a850:	420a      	tst	r2, r1
 800a852:	d00b      	beq.n	800a86c <__swsetup_r+0xac>
 800a854:	2300      	movs	r3, #0
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	6963      	ldr	r3, [r4, #20]
 800a85a:	425b      	negs	r3, r3
 800a85c:	61a3      	str	r3, [r4, #24]
 800a85e:	2000      	movs	r0, #0
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	4283      	cmp	r3, r0
 800a864:	d101      	bne.n	800a86a <__swsetup_r+0xaa>
 800a866:	0613      	lsls	r3, r2, #24
 800a868:	d4be      	bmi.n	800a7e8 <__swsetup_r+0x28>
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	0791      	lsls	r1, r2, #30
 800a86e:	d400      	bmi.n	800a872 <__swsetup_r+0xb2>
 800a870:	6963      	ldr	r3, [r4, #20]
 800a872:	60a3      	str	r3, [r4, #8]
 800a874:	e7f3      	b.n	800a85e <__swsetup_r+0x9e>
 800a876:	46c0      	nop			@ (mov r8, r8)
 800a878:	20000024 	.word	0x20000024

0800a87c <_raise_r>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	0004      	movs	r4, r0
 800a880:	000d      	movs	r5, r1
 800a882:	291f      	cmp	r1, #31
 800a884:	d904      	bls.n	800a890 <_raise_r+0x14>
 800a886:	2316      	movs	r3, #22
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	2001      	movs	r0, #1
 800a88c:	4240      	negs	r0, r0
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
 800a890:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <_raise_r+0x24>
 800a896:	008a      	lsls	r2, r1, #2
 800a898:	189b      	adds	r3, r3, r2
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	d108      	bne.n	800a8b2 <_raise_r+0x36>
 800a8a0:	0020      	movs	r0, r4
 800a8a2:	f000 f831 	bl	800a908 <_getpid_r>
 800a8a6:	002a      	movs	r2, r5
 800a8a8:	0001      	movs	r1, r0
 800a8aa:	0020      	movs	r0, r4
 800a8ac:	f000 f81a 	bl	800a8e4 <_kill_r>
 800a8b0:	e7ed      	b.n	800a88e <_raise_r+0x12>
 800a8b2:	2a01      	cmp	r2, #1
 800a8b4:	d009      	beq.n	800a8ca <_raise_r+0x4e>
 800a8b6:	1c51      	adds	r1, r2, #1
 800a8b8:	d103      	bne.n	800a8c2 <_raise_r+0x46>
 800a8ba:	2316      	movs	r3, #22
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e7e5      	b.n	800a88e <_raise_r+0x12>
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	0028      	movs	r0, r5
 800a8c6:	6019      	str	r1, [r3, #0]
 800a8c8:	4790      	blx	r2
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e7df      	b.n	800a88e <_raise_r+0x12>
	...

0800a8d0 <raise>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	4b03      	ldr	r3, [pc, #12]	@ (800a8e0 <raise+0x10>)
 800a8d4:	0001      	movs	r1, r0
 800a8d6:	6818      	ldr	r0, [r3, #0]
 800a8d8:	f7ff ffd0 	bl	800a87c <_raise_r>
 800a8dc:	bd10      	pop	{r4, pc}
 800a8de:	46c0      	nop			@ (mov r8, r8)
 800a8e0:	20000024 	.word	0x20000024

0800a8e4 <_kill_r>:
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	b570      	push	{r4, r5, r6, lr}
 800a8e8:	4d06      	ldr	r5, [pc, #24]	@ (800a904 <_kill_r+0x20>)
 800a8ea:	0004      	movs	r4, r0
 800a8ec:	0008      	movs	r0, r1
 800a8ee:	0011      	movs	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f9 fa13 	bl	8003d1c <_kill>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d103      	bne.n	800a902 <_kill_r+0x1e>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d000      	beq.n	800a902 <_kill_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	200006cc 	.word	0x200006cc

0800a908 <_getpid_r>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	f7f9 fa01 	bl	8003d10 <_getpid>
 800a90e:	bd10      	pop	{r4, pc}

0800a910 <__swhatbuf_r>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	000e      	movs	r6, r1
 800a914:	001d      	movs	r5, r3
 800a916:	230e      	movs	r3, #14
 800a918:	5ec9      	ldrsh	r1, [r1, r3]
 800a91a:	0014      	movs	r4, r2
 800a91c:	b096      	sub	sp, #88	@ 0x58
 800a91e:	2900      	cmp	r1, #0
 800a920:	da0c      	bge.n	800a93c <__swhatbuf_r+0x2c>
 800a922:	89b2      	ldrh	r2, [r6, #12]
 800a924:	2380      	movs	r3, #128	@ 0x80
 800a926:	0011      	movs	r1, r2
 800a928:	4019      	ands	r1, r3
 800a92a:	421a      	tst	r2, r3
 800a92c:	d114      	bne.n	800a958 <__swhatbuf_r+0x48>
 800a92e:	2380      	movs	r3, #128	@ 0x80
 800a930:	00db      	lsls	r3, r3, #3
 800a932:	2000      	movs	r0, #0
 800a934:	6029      	str	r1, [r5, #0]
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	b016      	add	sp, #88	@ 0x58
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	466a      	mov	r2, sp
 800a93e:	f000 f853 	bl	800a9e8 <_fstat_r>
 800a942:	2800      	cmp	r0, #0
 800a944:	dbed      	blt.n	800a922 <__swhatbuf_r+0x12>
 800a946:	23f0      	movs	r3, #240	@ 0xf0
 800a948:	9901      	ldr	r1, [sp, #4]
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	4019      	ands	r1, r3
 800a94e:	4b04      	ldr	r3, [pc, #16]	@ (800a960 <__swhatbuf_r+0x50>)
 800a950:	18c9      	adds	r1, r1, r3
 800a952:	424b      	negs	r3, r1
 800a954:	4159      	adcs	r1, r3
 800a956:	e7ea      	b.n	800a92e <__swhatbuf_r+0x1e>
 800a958:	2100      	movs	r1, #0
 800a95a:	2340      	movs	r3, #64	@ 0x40
 800a95c:	e7e9      	b.n	800a932 <__swhatbuf_r+0x22>
 800a95e:	46c0      	nop			@ (mov r8, r8)
 800a960:	ffffe000 	.word	0xffffe000

0800a964 <__smakebuf_r>:
 800a964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a966:	2602      	movs	r6, #2
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	0005      	movs	r5, r0
 800a96c:	000c      	movs	r4, r1
 800a96e:	b085      	sub	sp, #20
 800a970:	4233      	tst	r3, r6
 800a972:	d007      	beq.n	800a984 <__smakebuf_r+0x20>
 800a974:	0023      	movs	r3, r4
 800a976:	3347      	adds	r3, #71	@ 0x47
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	6123      	str	r3, [r4, #16]
 800a97c:	2301      	movs	r3, #1
 800a97e:	6163      	str	r3, [r4, #20]
 800a980:	b005      	add	sp, #20
 800a982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a984:	ab03      	add	r3, sp, #12
 800a986:	aa02      	add	r2, sp, #8
 800a988:	f7ff ffc2 	bl	800a910 <__swhatbuf_r>
 800a98c:	9f02      	ldr	r7, [sp, #8]
 800a98e:	9001      	str	r0, [sp, #4]
 800a990:	0039      	movs	r1, r7
 800a992:	0028      	movs	r0, r5
 800a994:	f7ff f80c 	bl	80099b0 <_malloc_r>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d108      	bne.n	800a9ae <__smakebuf_r+0x4a>
 800a99c:	220c      	movs	r2, #12
 800a99e:	5ea3      	ldrsh	r3, [r4, r2]
 800a9a0:	059a      	lsls	r2, r3, #22
 800a9a2:	d4ed      	bmi.n	800a980 <__smakebuf_r+0x1c>
 800a9a4:	2203      	movs	r2, #3
 800a9a6:	4393      	bics	r3, r2
 800a9a8:	431e      	orrs	r6, r3
 800a9aa:	81a6      	strh	r6, [r4, #12]
 800a9ac:	e7e2      	b.n	800a974 <__smakebuf_r+0x10>
 800a9ae:	2380      	movs	r3, #128	@ 0x80
 800a9b0:	89a2      	ldrh	r2, [r4, #12]
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	6120      	str	r0, [r4, #16]
 800a9bc:	6167      	str	r7, [r4, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <__smakebuf_r+0x78>
 800a9c2:	0028      	movs	r0, r5
 800a9c4:	230e      	movs	r3, #14
 800a9c6:	5ee1      	ldrsh	r1, [r4, r3]
 800a9c8:	f000 f820 	bl	800aa0c <_isatty_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d005      	beq.n	800a9dc <__smakebuf_r+0x78>
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	89a2      	ldrh	r2, [r4, #12]
 800a9d4:	439a      	bics	r2, r3
 800a9d6:	3b02      	subs	r3, #2
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	9a01      	ldr	r2, [sp, #4]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	e7cc      	b.n	800a980 <__smakebuf_r+0x1c>
	...

0800a9e8 <_fstat_r>:
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	b570      	push	{r4, r5, r6, lr}
 800a9ec:	4d06      	ldr	r5, [pc, #24]	@ (800aa08 <_fstat_r+0x20>)
 800a9ee:	0004      	movs	r4, r0
 800a9f0:	0008      	movs	r0, r1
 800a9f2:	0011      	movs	r1, r2
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	f7f9 f9f1 	bl	8003ddc <_fstat>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	d103      	bne.n	800aa06 <_fstat_r+0x1e>
 800a9fe:	682b      	ldr	r3, [r5, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d000      	beq.n	800aa06 <_fstat_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	200006cc 	.word	0x200006cc

0800aa0c <_isatty_r>:
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	b570      	push	{r4, r5, r6, lr}
 800aa10:	4d06      	ldr	r5, [pc, #24]	@ (800aa2c <_isatty_r+0x20>)
 800aa12:	0004      	movs	r4, r0
 800aa14:	0008      	movs	r0, r1
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	f7f9 f9ee 	bl	8003df8 <_isatty>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d103      	bne.n	800aa28 <_isatty_r+0x1c>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d000      	beq.n	800aa28 <_isatty_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd70      	pop	{r4, r5, r6, pc}
 800aa2a:	46c0      	nop			@ (mov r8, r8)
 800aa2c:	200006cc 	.word	0x200006cc

0800aa30 <_init>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	46c0      	nop			@ (mov r8, r8)
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr

0800aa3c <_fini>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	46c0      	nop			@ (mov r8, r8)
 800aa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa42:	bc08      	pop	{r3}
 800aa44:	469e      	mov	lr, r3
 800aa46:	4770      	bx	lr
