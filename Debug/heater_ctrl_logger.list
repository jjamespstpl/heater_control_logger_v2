
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0b8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800e170  0800e170  0000f170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e814  0800e814  000101e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e814  0800e814  000101e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e814  0800e814  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e814  0800e814  0000f814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e818  0800e818  0000f818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800e81c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001e4  0800ea00  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800ea00  00010760  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a380  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ac  00000000  00000000  0002a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002db38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001280  00000000  00000000  0002f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a14c  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2ad  00000000  00000000  0004a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14ea  00000000  00000000  00067939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069cc  00000000  00000000  00108e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  0010f834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800e158 	.word	0x0800e158

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800e158 	.word	0x0800e158

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fdcf 	bl	8001fd8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd13 	bl	8001e70 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fdc1 	bl	8001fd8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fdb7 	bl	8001fd8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd3d 	bl	8001ef8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd33 	bl	8001ef8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbab 	bl	8000c04 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb33 	bl	8000b24 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb9d 	bl	8000c04 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb93 	bl	8000c04 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb41 	bl	8000b74 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb37 	bl	8000b74 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	024b      	lsls	r3, r1, #9
 8000518:	0a5a      	lsrs	r2, r3, #9
 800051a:	4694      	mov	ip, r2
 800051c:	004a      	lsls	r2, r1, #1
 800051e:	0fc9      	lsrs	r1, r1, #31
 8000520:	46ce      	mov	lr, r9
 8000522:	4647      	mov	r7, r8
 8000524:	4689      	mov	r9, r1
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0246      	lsls	r6, r0, #9
 800052a:	0e2d      	lsrs	r5, r5, #24
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	b580      	push	{r7, lr}
 8000530:	0999      	lsrs	r1, r3, #6
 8000532:	0a77      	lsrs	r7, r6, #9
 8000534:	0fc4      	lsrs	r4, r0, #31
 8000536:	09b6      	lsrs	r6, r6, #6
 8000538:	1aab      	subs	r3, r5, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	d020      	beq.n	8000580 <__aeabi_fadd+0x6c>
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd0c      	ble.n	800055c <__aeabi_fadd+0x48>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d134      	bne.n	80005b0 <__aeabi_fadd+0x9c>
 8000546:	2900      	cmp	r1, #0
 8000548:	d02a      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	2b01      	cmp	r3, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x3e>
 8000550:	e08f      	b.n	8000672 <__aeabi_fadd+0x15e>
 8000552:	2bff      	cmp	r3, #255	@ 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x44>
 8000556:	e0cd      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000558:	0013      	movs	r3, r2
 800055a:	e02f      	b.n	80005bc <__aeabi_fadd+0xa8>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d060      	beq.n	8000622 <__aeabi_fadd+0x10e>
 8000560:	1b53      	subs	r3, r2, r5
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x54>
 8000566:	e0ee      	b.n	8000746 <__aeabi_fadd+0x232>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x5a>
 800056c:	e13e      	b.n	80007ec <__aeabi_fadd+0x2d8>
 800056e:	1e5c      	subs	r4, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e16b      	b.n	800084e <__aeabi_fadd+0x33a>
 8000576:	2bff      	cmp	r3, #255	@ 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x68>
 800057a:	e0b9      	b.n	80006f0 <__aeabi_fadd+0x1dc>
 800057c:	0023      	movs	r3, r4
 800057e:	e0e7      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000580:	2b00      	cmp	r3, #0
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fadd+0x72>
 8000584:	e0a4      	b.n	80006d0 <__aeabi_fadd+0x1bc>
 8000586:	2a00      	cmp	r2, #0
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x14a>
 800058a:	2dff      	cmp	r5, #255	@ 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e0b1      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	4311      	orrs	r1, r2
 8000596:	2b1b      	cmp	r3, #27
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x88>
 800059a:	e0e9      	b.n	8000770 <__aeabi_fadd+0x25c>
 800059c:	002b      	movs	r3, r5
 800059e:	3605      	adds	r6, #5
 80005a0:	08f7      	lsrs	r7, r6, #3
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x94>
 80005a6:	e0a5      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005a8:	027a      	lsls	r2, r7, #9
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e030      	b.n	8000612 <__aeabi_fadd+0xfe>
 80005b0:	2dff      	cmp	r5, #255	@ 0xff
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xa2>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	4311      	orrs	r1, r2
 80005bc:	2001      	movs	r0, #1
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dc08      	bgt.n	80005d4 <__aeabi_fadd+0xc0>
 80005c2:	0008      	movs	r0, r1
 80005c4:	2220      	movs	r2, #32
 80005c6:	40d8      	lsrs	r0, r3
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4099      	lsls	r1, r3
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	4193      	sbcs	r3, r2
 80005d2:	4318      	orrs	r0, r3
 80005d4:	1a36      	subs	r6, r6, r0
 80005d6:	0173      	lsls	r3, r6, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0xc8>
 80005da:	e071      	b.n	80006c0 <__aeabi_fadd+0x1ac>
 80005dc:	01b6      	lsls	r6, r6, #6
 80005de:	09b7      	lsrs	r7, r6, #6
 80005e0:	0038      	movs	r0, r7
 80005e2:	f002 fdd1 	bl	8003188 <__clzsi2>
 80005e6:	003b      	movs	r3, r7
 80005e8:	3805      	subs	r0, #5
 80005ea:	4083      	lsls	r3, r0
 80005ec:	4285      	cmp	r5, r0
 80005ee:	dd4d      	ble.n	800068c <__aeabi_fadd+0x178>
 80005f0:	4eb4      	ldr	r6, [pc, #720]	@ (80008c4 <__aeabi_fadd+0x3b0>)
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	401e      	ands	r6, r3
 80005f6:	075a      	lsls	r2, r3, #29
 80005f8:	d068      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80005fa:	220f      	movs	r2, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d064      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 8000602:	3604      	adds	r6, #4
 8000604:	0173      	lsls	r3, r6, #5
 8000606:	d561      	bpl.n	80006cc <__aeabi_fadd+0x1b8>
 8000608:	1c68      	adds	r0, r5, #1
 800060a:	2dfe      	cmp	r5, #254	@ 0xfe
 800060c:	d154      	bne.n	80006b8 <__aeabi_fadd+0x1a4>
 800060e:	20ff      	movs	r0, #255	@ 0xff
 8000610:	2200      	movs	r2, #0
 8000612:	05c0      	lsls	r0, r0, #23
 8000614:	4310      	orrs	r0, r2
 8000616:	07e4      	lsls	r4, r4, #31
 8000618:	4320      	orrs	r0, r4
 800061a:	bcc0      	pop	{r6, r7}
 800061c:	46b9      	mov	r9, r7
 800061e:	46b0      	mov	r8, r6
 8000620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000622:	22fe      	movs	r2, #254	@ 0xfe
 8000624:	4690      	mov	r8, r2
 8000626:	1c68      	adds	r0, r5, #1
 8000628:	0002      	movs	r2, r0
 800062a:	4640      	mov	r0, r8
 800062c:	4210      	tst	r0, r2
 800062e:	d16b      	bne.n	8000708 <__aeabi_fadd+0x1f4>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0dd      	b.n	80007f2 <__aeabi_fadd+0x2de>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x128>
 800063a:	e102      	b.n	8000842 <__aeabi_fadd+0x32e>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0b3      	beq.n	80005a8 <__aeabi_fadd+0x94>
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	1a77      	subs	r7, r6, r1
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4217      	tst	r7, r2
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x138>
 800064a:	e136      	b.n	80008ba <__aeabi_fadd+0x3a6>
 800064c:	464c      	mov	r4, r9
 800064e:	1b8e      	subs	r6, r1, r6
 8000650:	d061      	beq.n	8000716 <__aeabi_fadd+0x202>
 8000652:	2001      	movs	r0, #1
 8000654:	4216      	tst	r6, r2
 8000656:	d130      	bne.n	80006ba <__aeabi_fadd+0x1a6>
 8000658:	2300      	movs	r3, #0
 800065a:	08f7      	lsrs	r7, r6, #3
 800065c:	e7a4      	b.n	80005a8 <__aeabi_fadd+0x94>
 800065e:	2900      	cmp	r1, #0
 8000660:	d09e      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	2b01      	cmp	r3, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x156>
 8000668:	e0ca      	b.n	8000800 <__aeabi_fadd+0x2ec>
 800066a:	2bff      	cmp	r3, #255	@ 0xff
 800066c:	d042      	beq.n	80006f4 <__aeabi_fadd+0x1e0>
 800066e:	0013      	movs	r3, r2
 8000670:	e791      	b.n	8000596 <__aeabi_fadd+0x82>
 8000672:	1a71      	subs	r1, r6, r1
 8000674:	014b      	lsls	r3, r1, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x166>
 8000678:	e0d1      	b.n	800081e <__aeabi_fadd+0x30a>
 800067a:	018f      	lsls	r7, r1, #6
 800067c:	09bf      	lsrs	r7, r7, #6
 800067e:	0038      	movs	r0, r7
 8000680:	f002 fd82 	bl	8003188 <__clzsi2>
 8000684:	003b      	movs	r3, r7
 8000686:	3805      	subs	r0, #5
 8000688:	4083      	lsls	r3, r0
 800068a:	2501      	movs	r5, #1
 800068c:	2220      	movs	r2, #32
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	3001      	adds	r0, #1
 8000692:	1a12      	subs	r2, r2, r0
 8000694:	001e      	movs	r6, r3
 8000696:	4093      	lsls	r3, r2
 8000698:	40c6      	lsrs	r6, r0
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431e      	orrs	r6, r3
 80006a0:	d039      	beq.n	8000716 <__aeabi_fadd+0x202>
 80006a2:	0773      	lsls	r3, r6, #29
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x194>
 80006a6:	e11b      	b.n	80008e0 <__aeabi_fadd+0x3cc>
 80006a8:	230f      	movs	r3, #15
 80006aa:	2500      	movs	r5, #0
 80006ac:	4033      	ands	r3, r6
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d1a7      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006b2:	2001      	movs	r0, #1
 80006b4:	0172      	lsls	r2, r6, #5
 80006b6:	d57c      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80006b8:	b2c0      	uxtb	r0, r0
 80006ba:	01b2      	lsls	r2, r6, #6
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	e7a8      	b.n	8000612 <__aeabi_fadd+0xfe>
 80006c0:	0773      	lsls	r3, r6, #29
 80006c2:	d003      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4033      	ands	r3, r6
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d19a      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006cc:	002b      	movs	r3, r5
 80006ce:	e767      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <__aeabi_fadd+0x208>
 80006d4:	1b53      	subs	r3, r2, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d17b      	bne.n	80007d2 <__aeabi_fadd+0x2be>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x1cc>
 80006de:	e086      	b.n	80007ee <__aeabi_fadd+0x2da>
 80006e0:	1e5d      	subs	r5, r3, #1
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1d4>
 80006e6:	e08b      	b.n	8000800 <__aeabi_fadd+0x2ec>
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d002      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80006ec:	002b      	movs	r3, r5
 80006ee:	e075      	b.n	80007dc <__aeabi_fadd+0x2c8>
 80006f0:	464c      	mov	r4, r9
 80006f2:	4667      	mov	r7, ip
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x1e6>
 80006f8:	e789      	b.n	800060e <__aeabi_fadd+0xfa>
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	433a      	orrs	r2, r7
 8000700:	0252      	lsls	r2, r2, #9
 8000702:	20ff      	movs	r0, #255	@ 0xff
 8000704:	0a52      	lsrs	r2, r2, #9
 8000706:	e784      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000708:	1a77      	subs	r7, r6, r1
 800070a:	017b      	lsls	r3, r7, #5
 800070c:	d46b      	bmi.n	80007e6 <__aeabi_fadd+0x2d2>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x200>
 8000712:	e765      	b.n	80005e0 <__aeabi_fadd+0xcc>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	e77a      	b.n	8000612 <__aeabi_fadd+0xfe>
 800071c:	22fe      	movs	r2, #254	@ 0xfe
 800071e:	1c6b      	adds	r3, r5, #1
 8000720:	421a      	tst	r2, r3
 8000722:	d149      	bne.n	80007b8 <__aeabi_fadd+0x2a4>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x216>
 8000728:	e09f      	b.n	800086a <__aeabi_fadd+0x356>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x21c>
 800072e:	e0ba      	b.n	80008a6 <__aeabi_fadd+0x392>
 8000730:	2900      	cmp	r1, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x222>
 8000734:	e0cf      	b.n	80008d6 <__aeabi_fadd+0x3c2>
 8000736:	1872      	adds	r2, r6, r1
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x22a>
 800073c:	e0cd      	b.n	80008da <__aeabi_fadd+0x3c6>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	2001      	movs	r0, #1
 8000742:	0a52      	lsrs	r2, r2, #9
 8000744:	e765      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000746:	2aff      	cmp	r2, #255	@ 0xff
 8000748:	d0d2      	beq.n	80006f0 <__aeabi_fadd+0x1dc>
 800074a:	2080      	movs	r0, #128	@ 0x80
 800074c:	04c0      	lsls	r0, r0, #19
 800074e:	4306      	orrs	r6, r0
 8000750:	2001      	movs	r0, #1
 8000752:	2b1b      	cmp	r3, #27
 8000754:	dc08      	bgt.n	8000768 <__aeabi_fadd+0x254>
 8000756:	0030      	movs	r0, r6
 8000758:	2420      	movs	r4, #32
 800075a:	40d8      	lsrs	r0, r3
 800075c:	1ae3      	subs	r3, r4, r3
 800075e:	409e      	lsls	r6, r3
 8000760:	0033      	movs	r3, r6
 8000762:	1e5c      	subs	r4, r3, #1
 8000764:	41a3      	sbcs	r3, r4
 8000766:	4318      	orrs	r0, r3
 8000768:	464c      	mov	r4, r9
 800076a:	0015      	movs	r5, r2
 800076c:	1a0e      	subs	r6, r1, r0
 800076e:	e732      	b.n	80005d6 <__aeabi_fadd+0xc2>
 8000770:	0008      	movs	r0, r1
 8000772:	2220      	movs	r2, #32
 8000774:	40d8      	lsrs	r0, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	4099      	lsls	r1, r3
 800077a:	000b      	movs	r3, r1
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	4193      	sbcs	r3, r2
 8000780:	4303      	orrs	r3, r0
 8000782:	18f6      	adds	r6, r6, r3
 8000784:	0173      	lsls	r3, r6, #5
 8000786:	d59b      	bpl.n	80006c0 <__aeabi_fadd+0x1ac>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x27c>
 800078e:	e73e      	b.n	800060e <__aeabi_fadd+0xfa>
 8000790:	2301      	movs	r3, #1
 8000792:	494d      	ldr	r1, [pc, #308]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000794:	0872      	lsrs	r2, r6, #1
 8000796:	4033      	ands	r3, r6
 8000798:	400a      	ands	r2, r1
 800079a:	431a      	orrs	r2, r3
 800079c:	0016      	movs	r6, r2
 800079e:	0753      	lsls	r3, r2, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e72a      	b.n	8000602 <__aeabi_fadd+0xee>
 80007ac:	0173      	lsls	r3, r6, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80007b0:	e72a      	b.n	8000608 <__aeabi_fadd+0xf4>
 80007b2:	002b      	movs	r3, r5
 80007b4:	08f7      	lsrs	r7, r6, #3
 80007b6:	e6f7      	b.n	80005a8 <__aeabi_fadd+0x94>
 80007b8:	2bff      	cmp	r3, #255	@ 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x2aa>
 80007bc:	e727      	b.n	800060e <__aeabi_fadd+0xfa>
 80007be:	1871      	adds	r1, r6, r1
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	074a      	lsls	r2, r1, #29
 80007c4:	d02f      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007c6:	220f      	movs	r2, #15
 80007c8:	400a      	ands	r2, r1
 80007ca:	2a04      	cmp	r2, #4
 80007cc:	d02b      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007ce:	1d0e      	adds	r6, r1, #4
 80007d0:	e6e6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d08d      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	04c0      	lsls	r0, r0, #19
 80007da:	4306      	orrs	r6, r0
 80007dc:	2b1b      	cmp	r3, #27
 80007de:	dd24      	ble.n	800082a <__aeabi_fadd+0x316>
 80007e0:	0013      	movs	r3, r2
 80007e2:	1d4e      	adds	r6, r1, #5
 80007e4:	e6dc      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007e6:	464c      	mov	r4, r9
 80007e8:	1b8f      	subs	r7, r1, r6
 80007ea:	e6f9      	b.n	80005e0 <__aeabi_fadd+0xcc>
 80007ec:	464c      	mov	r4, r9
 80007ee:	000e      	movs	r6, r1
 80007f0:	e6d6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d149      	bne.n	800088a <__aeabi_fadd+0x376>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d068      	beq.n	80008cc <__aeabi_fadd+0x3b8>
 80007fa:	4667      	mov	r7, ip
 80007fc:	464c      	mov	r4, r9
 80007fe:	e77c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000800:	1870      	adds	r0, r6, r1
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d574      	bpl.n	80008f0 <__aeabi_fadd+0x3dc>
 8000806:	4930      	ldr	r1, [pc, #192]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000808:	0840      	lsrs	r0, r0, #1
 800080a:	4001      	ands	r1, r0
 800080c:	0743      	lsls	r3, r0, #29
 800080e:	d009      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000810:	230f      	movs	r3, #15
 8000812:	4003      	ands	r3, r0
 8000814:	2b04      	cmp	r3, #4
 8000816:	d005      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000818:	2302      	movs	r3, #2
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	e6c0      	b.n	80005a0 <__aeabi_fadd+0x8c>
 800081e:	2301      	movs	r3, #1
 8000820:	08cf      	lsrs	r7, r1, #3
 8000822:	e6c1      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000824:	2302      	movs	r3, #2
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e6be      	b.n	80005a8 <__aeabi_fadd+0x94>
 800082a:	2520      	movs	r5, #32
 800082c:	0030      	movs	r0, r6
 800082e:	40d8      	lsrs	r0, r3
 8000830:	1aeb      	subs	r3, r5, r3
 8000832:	409e      	lsls	r6, r3
 8000834:	0033      	movs	r3, r6
 8000836:	1e5d      	subs	r5, r3, #1
 8000838:	41ab      	sbcs	r3, r5
 800083a:	4303      	orrs	r3, r0
 800083c:	0015      	movs	r5, r2
 800083e:	185e      	adds	r6, r3, r1
 8000840:	e7a0      	b.n	8000784 <__aeabi_fadd+0x270>
 8000842:	2900      	cmp	r1, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x334>
 8000846:	e765      	b.n	8000714 <__aeabi_fadd+0x200>
 8000848:	464c      	mov	r4, r9
 800084a:	4667      	mov	r7, ip
 800084c:	e6ac      	b.n	80005a8 <__aeabi_fadd+0x94>
 800084e:	1b8f      	subs	r7, r1, r6
 8000850:	017b      	lsls	r3, r7, #5
 8000852:	d52e      	bpl.n	80008b2 <__aeabi_fadd+0x39e>
 8000854:	01bf      	lsls	r7, r7, #6
 8000856:	09bf      	lsrs	r7, r7, #6
 8000858:	0038      	movs	r0, r7
 800085a:	f002 fc95 	bl	8003188 <__clzsi2>
 800085e:	003b      	movs	r3, r7
 8000860:	3805      	subs	r0, #5
 8000862:	4083      	lsls	r3, r0
 8000864:	464c      	mov	r4, r9
 8000866:	3501      	adds	r5, #1
 8000868:	e710      	b.n	800068c <__aeabi_fadd+0x178>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x35c>
 800086e:	e740      	b.n	80006f2 <__aeabi_fadd+0x1de>
 8000870:	2900      	cmp	r1, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x362>
 8000874:	e741      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	429f      	cmp	r7, r3
 800087c:	d200      	bcs.n	8000880 <__aeabi_fadd+0x36c>
 800087e:	e73c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000880:	459c      	cmp	ip, r3
 8000882:	d300      	bcc.n	8000886 <__aeabi_fadd+0x372>
 8000884:	e739      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000886:	4667      	mov	r7, ip
 8000888:	e737      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800088a:	2900      	cmp	r1, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x37c>
 800088e:	e734      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	429f      	cmp	r7, r3
 8000896:	d200      	bcs.n	800089a <__aeabi_fadd+0x386>
 8000898:	e72f      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800089a:	459c      	cmp	ip, r3
 800089c:	d300      	bcc.n	80008a0 <__aeabi_fadd+0x38c>
 800089e:	e72c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a0:	464c      	mov	r4, r9
 80008a2:	4667      	mov	r7, ip
 80008a4:	e729      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x398>
 80008aa:	e734      	b.n	8000716 <__aeabi_fadd+0x202>
 80008ac:	2300      	movs	r3, #0
 80008ae:	08cf      	lsrs	r7, r1, #3
 80008b0:	e67a      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008b2:	464c      	mov	r4, r9
 80008b4:	2301      	movs	r3, #1
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	e676      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x3ac>
 80008be:	e729      	b.n	8000714 <__aeabi_fadd+0x200>
 80008c0:	08ff      	lsrs	r7, r7, #3
 80008c2:	e671      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008c4:	fbffffff 	.word	0xfbffffff
 80008c8:	7dffffff 	.word	0x7dffffff
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2400      	movs	r4, #0
 80008d0:	20ff      	movs	r0, #255	@ 0xff
 80008d2:	03d2      	lsls	r2, r2, #15
 80008d4:	e69d      	b.n	8000612 <__aeabi_fadd+0xfe>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e666      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008da:	2300      	movs	r3, #0
 80008dc:	08d7      	lsrs	r7, r2, #3
 80008de:	e663      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008e0:	2001      	movs	r0, #1
 80008e2:	0172      	lsls	r2, r6, #5
 80008e4:	d500      	bpl.n	80008e8 <__aeabi_fadd+0x3d4>
 80008e6:	e6e7      	b.n	80006b8 <__aeabi_fadd+0x1a4>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2300      	movs	r3, #0
 80008ec:	08cf      	lsrs	r7, r1, #3
 80008ee:	e65b      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f0:	2301      	movs	r3, #1
 80008f2:	08c7      	lsrs	r7, r0, #3
 80008f4:	e658      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f6:	46c0      	nop			@ (mov r8, r8)

080008f8 <__aeabi_fdiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	4646      	mov	r6, r8
 80008fc:	464f      	mov	r7, r9
 80008fe:	46d6      	mov	lr, sl
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0047      	lsls	r7, r0, #1
 8000908:	4698      	mov	r8, r3
 800090a:	1c0e      	adds	r6, r1, #0
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e3f      	lsrs	r7, r7, #24
 8000910:	d05b      	beq.n	80009ca <__aeabi_fdiv+0xd2>
 8000912:	2fff      	cmp	r7, #255	@ 0xff
 8000914:	d021      	beq.n	800095a <__aeabi_fdiv+0x62>
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	00ed      	lsls	r5, r5, #3
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	431d      	orrs	r5, r3
 800091e:	2300      	movs	r3, #0
 8000920:	4699      	mov	r9, r3
 8000922:	469a      	mov	sl, r3
 8000924:	3f7f      	subs	r7, #127	@ 0x7f
 8000926:	0274      	lsls	r4, r6, #9
 8000928:	0073      	lsls	r3, r6, #1
 800092a:	0a64      	lsrs	r4, r4, #9
 800092c:	0e1b      	lsrs	r3, r3, #24
 800092e:	0ff6      	lsrs	r6, r6, #31
 8000930:	2b00      	cmp	r3, #0
 8000932:	d020      	beq.n	8000976 <__aeabi_fdiv+0x7e>
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d043      	beq.n	80009c0 <__aeabi_fdiv+0xc8>
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	2000      	movs	r0, #0
 800093c:	00e4      	lsls	r4, r4, #3
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4314      	orrs	r4, r2
 8000942:	3b7f      	subs	r3, #127	@ 0x7f
 8000944:	4642      	mov	r2, r8
 8000946:	1aff      	subs	r7, r7, r3
 8000948:	464b      	mov	r3, r9
 800094a:	4072      	eors	r2, r6
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d900      	bls.n	8000952 <__aeabi_fdiv+0x5a>
 8000950:	e09d      	b.n	8000a8e <__aeabi_fdiv+0x196>
 8000952:	4971      	ldr	r1, [pc, #452]	@ (8000b18 <__aeabi_fdiv+0x220>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	58cb      	ldr	r3, [r1, r3]
 8000958:	469f      	mov	pc, r3
 800095a:	2d00      	cmp	r5, #0
 800095c:	d15a      	bne.n	8000a14 <__aeabi_fdiv+0x11c>
 800095e:	2308      	movs	r3, #8
 8000960:	4699      	mov	r9, r3
 8000962:	3b06      	subs	r3, #6
 8000964:	0274      	lsls	r4, r6, #9
 8000966:	469a      	mov	sl, r3
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	27ff      	movs	r7, #255	@ 0xff
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	0ff6      	lsrs	r6, r6, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1de      	bne.n	8000934 <__aeabi_fdiv+0x3c>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d13b      	bne.n	80009f2 <__aeabi_fdiv+0xfa>
 800097a:	2301      	movs	r3, #1
 800097c:	4642      	mov	r2, r8
 800097e:	4649      	mov	r1, r9
 8000980:	4072      	eors	r2, r6
 8000982:	4319      	orrs	r1, r3
 8000984:	290e      	cmp	r1, #14
 8000986:	d818      	bhi.n	80009ba <__aeabi_fdiv+0xc2>
 8000988:	4864      	ldr	r0, [pc, #400]	@ (8000b1c <__aeabi_fdiv+0x224>)
 800098a:	0089      	lsls	r1, r1, #2
 800098c:	5841      	ldr	r1, [r0, r1]
 800098e:	468f      	mov	pc, r1
 8000990:	4653      	mov	r3, sl
 8000992:	2b02      	cmp	r3, #2
 8000994:	d100      	bne.n	8000998 <__aeabi_fdiv+0xa0>
 8000996:	e0b8      	b.n	8000b0a <__aeabi_fdiv+0x212>
 8000998:	2b03      	cmp	r3, #3
 800099a:	d06e      	beq.n	8000a7a <__aeabi_fdiv+0x182>
 800099c:	4642      	mov	r2, r8
 800099e:	002c      	movs	r4, r5
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d140      	bne.n	8000a26 <__aeabi_fdiv+0x12e>
 80009a4:	2000      	movs	r0, #0
 80009a6:	2400      	movs	r4, #0
 80009a8:	05c0      	lsls	r0, r0, #23
 80009aa:	4320      	orrs	r0, r4
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4310      	orrs	r0, r2
 80009b0:	bce0      	pop	{r5, r6, r7}
 80009b2:	46ba      	mov	sl, r7
 80009b4:	46b1      	mov	r9, r6
 80009b6:	46a8      	mov	r8, r5
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2400      	movs	r4, #0
 80009be:	e7f3      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	d120      	bne.n	8000a06 <__aeabi_fdiv+0x10e>
 80009c4:	2302      	movs	r3, #2
 80009c6:	3fff      	subs	r7, #255	@ 0xff
 80009c8:	e7d8      	b.n	800097c <__aeabi_fdiv+0x84>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d105      	bne.n	80009da <__aeabi_fdiv+0xe2>
 80009ce:	2304      	movs	r3, #4
 80009d0:	4699      	mov	r9, r3
 80009d2:	3b03      	subs	r3, #3
 80009d4:	2700      	movs	r7, #0
 80009d6:	469a      	mov	sl, r3
 80009d8:	e7a5      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009da:	0028      	movs	r0, r5
 80009dc:	f002 fbd4 	bl	8003188 <__clzsi2>
 80009e0:	2776      	movs	r7, #118	@ 0x76
 80009e2:	1f43      	subs	r3, r0, #5
 80009e4:	409d      	lsls	r5, r3
 80009e6:	2300      	movs	r3, #0
 80009e8:	427f      	negs	r7, r7
 80009ea:	4699      	mov	r9, r3
 80009ec:	469a      	mov	sl, r3
 80009ee:	1a3f      	subs	r7, r7, r0
 80009f0:	e799      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009f2:	0020      	movs	r0, r4
 80009f4:	f002 fbc8 	bl	8003188 <__clzsi2>
 80009f8:	1f43      	subs	r3, r0, #5
 80009fa:	409c      	lsls	r4, r3
 80009fc:	2376      	movs	r3, #118	@ 0x76
 80009fe:	425b      	negs	r3, r3
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	2000      	movs	r0, #0
 8000a04:	e79e      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	464a      	mov	r2, r9
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	4691      	mov	r9, r2
 8000a0e:	2003      	movs	r0, #3
 8000a10:	33fc      	adds	r3, #252	@ 0xfc
 8000a12:	e797      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a14:	230c      	movs	r3, #12
 8000a16:	4699      	mov	r9, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	27ff      	movs	r7, #255	@ 0xff
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	e782      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a20:	2803      	cmp	r0, #3
 8000a22:	d02c      	beq.n	8000a7e <__aeabi_fdiv+0x186>
 8000a24:	0032      	movs	r2, r6
 8000a26:	0038      	movs	r0, r7
 8000a28:	307f      	adds	r0, #127	@ 0x7f
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	dd47      	ble.n	8000abe <__aeabi_fdiv+0x1c6>
 8000a2e:	0763      	lsls	r3, r4, #29
 8000a30:	d004      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a32:	230f      	movs	r3, #15
 8000a34:	4023      	ands	r3, r4
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a3a:	3404      	adds	r4, #4
 8000a3c:	0123      	lsls	r3, r4, #4
 8000a3e:	d503      	bpl.n	8000a48 <__aeabi_fdiv+0x150>
 8000a40:	0038      	movs	r0, r7
 8000a42:	4b37      	ldr	r3, [pc, #220]	@ (8000b20 <__aeabi_fdiv+0x228>)
 8000a44:	3080      	adds	r0, #128	@ 0x80
 8000a46:	401c      	ands	r4, r3
 8000a48:	28fe      	cmp	r0, #254	@ 0xfe
 8000a4a:	dcb6      	bgt.n	80009ba <__aeabi_fdiv+0xc2>
 8000a4c:	01a4      	lsls	r4, r4, #6
 8000a4e:	0a64      	lsrs	r4, r4, #9
 8000a50:	b2c0      	uxtb	r0, r0
 8000a52:	e7a9      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a54:	2480      	movs	r4, #128	@ 0x80
 8000a56:	2200      	movs	r2, #0
 8000a58:	20ff      	movs	r0, #255	@ 0xff
 8000a5a:	03e4      	lsls	r4, r4, #15
 8000a5c:	e7a4      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	421d      	tst	r5, r3
 8000a64:	d001      	beq.n	8000a6a <__aeabi_fdiv+0x172>
 8000a66:	421c      	tst	r4, r3
 8000a68:	d00b      	beq.n	8000a82 <__aeabi_fdiv+0x18a>
 8000a6a:	2480      	movs	r4, #128	@ 0x80
 8000a6c:	03e4      	lsls	r4, r4, #15
 8000a6e:	432c      	orrs	r4, r5
 8000a70:	0264      	lsls	r4, r4, #9
 8000a72:	4642      	mov	r2, r8
 8000a74:	20ff      	movs	r0, #255	@ 0xff
 8000a76:	0a64      	lsrs	r4, r4, #9
 8000a78:	e796      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a7a:	4646      	mov	r6, r8
 8000a7c:	002c      	movs	r4, r5
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	03db      	lsls	r3, r3, #15
 8000a82:	431c      	orrs	r4, r3
 8000a84:	0264      	lsls	r4, r4, #9
 8000a86:	0032      	movs	r2, r6
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	0a64      	lsrs	r4, r4, #9
 8000a8c:	e78c      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a8e:	016d      	lsls	r5, r5, #5
 8000a90:	0160      	lsls	r0, r4, #5
 8000a92:	4285      	cmp	r5, r0
 8000a94:	d22d      	bcs.n	8000af2 <__aeabi_fdiv+0x1fa>
 8000a96:	231b      	movs	r3, #27
 8000a98:	2400      	movs	r4, #0
 8000a9a:	3f01      	subs	r7, #1
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	0029      	movs	r1, r5
 8000aa0:	0064      	lsls	r4, r4, #1
 8000aa2:	006d      	lsls	r5, r5, #1
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	db01      	blt.n	8000aac <__aeabi_fdiv+0x1b4>
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	d301      	bcc.n	8000ab0 <__aeabi_fdiv+0x1b8>
 8000aac:	1a2d      	subs	r5, r5, r0
 8000aae:	4334      	orrs	r4, r6
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f3      	bne.n	8000a9e <__aeabi_fdiv+0x1a6>
 8000ab6:	1e6b      	subs	r3, r5, #1
 8000ab8:	419d      	sbcs	r5, r3
 8000aba:	432c      	orrs	r4, r5
 8000abc:	e7b3      	b.n	8000a26 <__aeabi_fdiv+0x12e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	1a1b      	subs	r3, r3, r0
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_fdiv+0x1d0>
 8000ac6:	e76d      	b.n	80009a4 <__aeabi_fdiv+0xac>
 8000ac8:	0021      	movs	r1, r4
 8000aca:	379e      	adds	r7, #158	@ 0x9e
 8000acc:	40d9      	lsrs	r1, r3
 8000ace:	40bc      	lsls	r4, r7
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	1e61      	subs	r1, r4, #1
 8000ad4:	418c      	sbcs	r4, r1
 8000ad6:	4323      	orrs	r3, r4
 8000ad8:	0759      	lsls	r1, r3, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000adc:	210f      	movs	r1, #15
 8000ade:	4019      	ands	r1, r3
 8000ae0:	2904      	cmp	r1, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	0159      	lsls	r1, r3, #5
 8000ae8:	d413      	bmi.n	8000b12 <__aeabi_fdiv+0x21a>
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a5c      	lsrs	r4, r3, #9
 8000af0:	e75a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000af2:	231a      	movs	r3, #26
 8000af4:	2401      	movs	r4, #1
 8000af6:	1a2d      	subs	r5, r5, r0
 8000af8:	e7d0      	b.n	8000a9c <__aeabi_fdiv+0x1a4>
 8000afa:	1e98      	subs	r0, r3, #2
 8000afc:	4243      	negs	r3, r0
 8000afe:	4158      	adcs	r0, r3
 8000b00:	4240      	negs	r0, r0
 8000b02:	0032      	movs	r2, r6
 8000b04:	2400      	movs	r4, #0
 8000b06:	b2c0      	uxtb	r0, r0
 8000b08:	e74e      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	2400      	movs	r4, #0
 8000b10:	e74a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b12:	2001      	movs	r0, #1
 8000b14:	2400      	movs	r4, #0
 8000b16:	e747      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b18:	0800e2fc 	.word	0x0800e2fc
 8000b1c:	0800e33c 	.word	0x0800e33c
 8000b20:	f7ffffff 	.word	0xf7ffffff

08000b24 <__eqsf2>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	0042      	lsls	r2, r0, #1
 8000b28:	024e      	lsls	r6, r1, #9
 8000b2a:	004c      	lsls	r4, r1, #1
 8000b2c:	0245      	lsls	r5, r0, #9
 8000b2e:	0a6d      	lsrs	r5, r5, #9
 8000b30:	0e12      	lsrs	r2, r2, #24
 8000b32:	0fc3      	lsrs	r3, r0, #31
 8000b34:	0a76      	lsrs	r6, r6, #9
 8000b36:	0e24      	lsrs	r4, r4, #24
 8000b38:	0fc9      	lsrs	r1, r1, #31
 8000b3a:	2aff      	cmp	r2, #255	@ 0xff
 8000b3c:	d010      	beq.n	8000b60 <__eqsf2+0x3c>
 8000b3e:	2cff      	cmp	r4, #255	@ 0xff
 8000b40:	d00c      	beq.n	8000b5c <__eqsf2+0x38>
 8000b42:	2001      	movs	r0, #1
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	d10a      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d108      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d00f      	beq.n	8000b70 <__eqsf2+0x4c>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d104      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b54:	0028      	movs	r0, r5
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	e000      	b.n	8000b5e <__eqsf2+0x3a>
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	2001      	movs	r0, #1
 8000b62:	2cff      	cmp	r4, #255	@ 0xff
 8000b64:	d1fb      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b66:	4335      	orrs	r5, r6
 8000b68:	d1f9      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b6a:	404b      	eors	r3, r1
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	e7f6      	b.n	8000b5e <__eqsf2+0x3a>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7f4      	b.n	8000b5e <__eqsf2+0x3a>

08000b74 <__gesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d018      	beq.n	8000bc0 <__gesf2+0x4c>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00a      	beq.n	8000ba8 <__gesf2+0x34>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__gesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10a      	bne.n	8000bb0 <__gesf2+0x3c>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d029      	beq.n	8000bf2 <__gesf2+0x7e>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d12d      	bne.n	8000bfe <__gesf2+0x8a>
 8000ba2:	0048      	lsls	r0, r1, #1
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	bd30      	pop	{r4, r5, pc}
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d125      	bne.n	8000bf8 <__gesf2+0x84>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d101      	bne.n	8000bb4 <__gesf2+0x40>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d0f6      	beq.n	8000ba2 <__gesf2+0x2e>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d019      	beq.n	8000bec <__gesf2+0x78>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	4318      	orrs	r0, r3
 8000bbe:	e7f2      	b.n	8000ba6 <__gesf2+0x32>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d119      	bne.n	8000bf8 <__gesf2+0x84>
 8000bc4:	28ff      	cmp	r0, #255	@ 0xff
 8000bc6:	d1f7      	bne.n	8000bb8 <__gesf2+0x44>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d115      	bne.n	8000bf8 <__gesf2+0x84>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d1f2      	bne.n	8000bb8 <__gesf2+0x44>
 8000bd2:	e7e8      	b.n	8000ba6 <__gesf2+0x32>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0ef      	beq.n	8000bb8 <__gesf2+0x44>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1ed      	bne.n	8000bb8 <__gesf2+0x44>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dceb      	bgt.n	8000bb8 <__gesf2+0x44>
 8000be0:	db04      	blt.n	8000bec <__gesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8e8      	bhi.n	8000bb8 <__gesf2+0x44>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2dc      	bcs.n	8000ba6 <__gesf2+0x32>
 8000bec:	0058      	lsls	r0, r3, #1
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7d9      	b.n	8000ba6 <__gesf2+0x32>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d0d7      	beq.n	8000ba6 <__gesf2+0x32>
 8000bf6:	e7df      	b.n	8000bb8 <__gesf2+0x44>
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	e7d3      	b.n	8000ba6 <__gesf2+0x32>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d1da      	bne.n	8000bb8 <__gesf2+0x44>
 8000c02:	e7ee      	b.n	8000be2 <__gesf2+0x6e>

08000c04 <__lesf2>:
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	0042      	lsls	r2, r0, #1
 8000c08:	0244      	lsls	r4, r0, #9
 8000c0a:	024d      	lsls	r5, r1, #9
 8000c0c:	0fc3      	lsrs	r3, r0, #31
 8000c0e:	0048      	lsls	r0, r1, #1
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0e12      	lsrs	r2, r2, #24
 8000c14:	0a6d      	lsrs	r5, r5, #9
 8000c16:	0e00      	lsrs	r0, r0, #24
 8000c18:	0fc9      	lsrs	r1, r1, #31
 8000c1a:	2aff      	cmp	r2, #255	@ 0xff
 8000c1c:	d017      	beq.n	8000c4e <__lesf2+0x4a>
 8000c1e:	28ff      	cmp	r0, #255	@ 0xff
 8000c20:	d00a      	beq.n	8000c38 <__lesf2+0x34>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d11b      	bne.n	8000c5e <__lesf2+0x5a>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d10a      	bne.n	8000c40 <__lesf2+0x3c>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d01d      	beq.n	8000c6a <__lesf2+0x66>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d12d      	bne.n	8000c8e <__lesf2+0x8a>
 8000c32:	0048      	lsls	r0, r1, #1
 8000c34:	3801      	subs	r0, #1
 8000c36:	e011      	b.n	8000c5c <__lesf2+0x58>
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d10e      	bne.n	8000c5a <__lesf2+0x56>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d101      	bne.n	8000c44 <__lesf2+0x40>
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d0f6      	beq.n	8000c32 <__lesf2+0x2e>
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d10c      	bne.n	8000c62 <__lesf2+0x5e>
 8000c48:	0058      	lsls	r0, r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e006      	b.n	8000c5c <__lesf2+0x58>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d103      	bne.n	8000c5a <__lesf2+0x56>
 8000c52:	28ff      	cmp	r0, #255	@ 0xff
 8000c54:	d105      	bne.n	8000c62 <__lesf2+0x5e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d015      	beq.n	8000c86 <__lesf2+0x82>
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	bd30      	pop	{r4, r5, pc}
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d106      	bne.n	8000c70 <__lesf2+0x6c>
 8000c62:	2001      	movs	r0, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	4318      	orrs	r0, r3
 8000c68:	e7f8      	b.n	8000c5c <__lesf2+0x58>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d0f6      	beq.n	8000c5c <__lesf2+0x58>
 8000c6e:	e7f8      	b.n	8000c62 <__lesf2+0x5e>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d1f6      	bne.n	8000c62 <__lesf2+0x5e>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	dcf4      	bgt.n	8000c62 <__lesf2+0x5e>
 8000c78:	dbe6      	blt.n	8000c48 <__lesf2+0x44>
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	d8f1      	bhi.n	8000c62 <__lesf2+0x5e>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	42ac      	cmp	r4, r5
 8000c82:	d2eb      	bcs.n	8000c5c <__lesf2+0x58>
 8000c84:	e7e0      	b.n	8000c48 <__lesf2+0x44>
 8000c86:	2000      	movs	r0, #0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d1ea      	bne.n	8000c62 <__lesf2+0x5e>
 8000c8c:	e7e6      	b.n	8000c5c <__lesf2+0x58>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d1e7      	bne.n	8000c62 <__lesf2+0x5e>
 8000c92:	e7f2      	b.n	8000c7a <__lesf2+0x76>

08000c94 <__aeabi_fmul>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	464f      	mov	r7, r9
 8000c98:	4646      	mov	r6, r8
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	0044      	lsls	r4, r0, #1
 8000c9e:	b5c0      	push	{r6, r7, lr}
 8000ca0:	0246      	lsls	r6, r0, #9
 8000ca2:	1c0f      	adds	r7, r1, #0
 8000ca4:	0a76      	lsrs	r6, r6, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc5      	lsrs	r5, r0, #31
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x1c>
 8000cae:	e0da      	b.n	8000e66 <__aeabi_fmul+0x1d2>
 8000cb0:	2cff      	cmp	r4, #255	@ 0xff
 8000cb2:	d074      	beq.n	8000d9e <__aeabi_fmul+0x10a>
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	00f6      	lsls	r6, r6, #3
 8000cb8:	04db      	lsls	r3, r3, #19
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	3c7f      	subs	r4, #127	@ 0x7f
 8000cc4:	027b      	lsls	r3, r7, #9
 8000cc6:	0a5b      	lsrs	r3, r3, #9
 8000cc8:	4698      	mov	r8, r3
 8000cca:	007b      	lsls	r3, r7, #1
 8000ccc:	0e1b      	lsrs	r3, r3, #24
 8000cce:	0fff      	lsrs	r7, r7, #31
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d074      	beq.n	8000dbe <__aeabi_fmul+0x12a>
 8000cd4:	2bff      	cmp	r3, #255	@ 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fmul+0x46>
 8000cd8:	e08e      	b.n	8000df8 <__aeabi_fmul+0x164>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	04c9      	lsls	r1, r1, #19
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ce6:	002a      	movs	r2, r5
 8000ce8:	18e4      	adds	r4, r4, r3
 8000cea:	464b      	mov	r3, r9
 8000cec:	407a      	eors	r2, r7
 8000cee:	4688      	mov	r8, r1
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	dc75      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd0f      	ble.n	8000d1e <__aeabi_fmul+0x8a>
 8000cfe:	4649      	mov	r1, r9
 8000d00:	2301      	movs	r3, #1
 8000d02:	408b      	lsls	r3, r1
 8000d04:	21a6      	movs	r1, #166	@ 0xa6
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	420b      	tst	r3, r1
 8000d0a:	d169      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000d0c:	2190      	movs	r1, #144	@ 0x90
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	420b      	tst	r3, r1
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x82>
 8000d14:	e100      	b.n	8000f18 <__aeabi_fmul+0x284>
 8000d16:	2188      	movs	r1, #136	@ 0x88
 8000d18:	4219      	tst	r1, r3
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fmul+0x8a>
 8000d1c:	e0f5      	b.n	8000f0a <__aeabi_fmul+0x276>
 8000d1e:	4641      	mov	r1, r8
 8000d20:	0409      	lsls	r1, r1, #16
 8000d22:	0c09      	lsrs	r1, r1, #16
 8000d24:	4643      	mov	r3, r8
 8000d26:	0008      	movs	r0, r1
 8000d28:	0c35      	lsrs	r5, r6, #16
 8000d2a:	0436      	lsls	r6, r6, #16
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0c36      	lsrs	r6, r6, #16
 8000d30:	4370      	muls	r0, r6
 8000d32:	4369      	muls	r1, r5
 8000d34:	435e      	muls	r6, r3
 8000d36:	435d      	muls	r5, r3
 8000d38:	1876      	adds	r6, r6, r1
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	199b      	adds	r3, r3, r6
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d903      	bls.n	8000d4a <__aeabi_fmul+0xb6>
 8000d42:	2180      	movs	r1, #128	@ 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	468c      	mov	ip, r1
 8000d48:	4465      	add	r5, ip
 8000d4a:	0400      	lsls	r0, r0, #16
 8000d4c:	0419      	lsls	r1, r3, #16
 8000d4e:	0c00      	lsrs	r0, r0, #16
 8000d50:	1809      	adds	r1, r1, r0
 8000d52:	018e      	lsls	r6, r1, #6
 8000d54:	1e70      	subs	r0, r6, #1
 8000d56:	4186      	sbcs	r6, r0
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	0e89      	lsrs	r1, r1, #26
 8000d5c:	195b      	adds	r3, r3, r5
 8000d5e:	430e      	orrs	r6, r1
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	431e      	orrs	r6, r3
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	d46c      	bmi.n	8000e42 <__aeabi_fmul+0x1ae>
 8000d68:	0023      	movs	r3, r4
 8000d6a:	337f      	adds	r3, #127	@ 0x7f
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_fmul+0xde>
 8000d70:	e0b1      	b.n	8000ed6 <__aeabi_fmul+0x242>
 8000d72:	0015      	movs	r5, r2
 8000d74:	0771      	lsls	r1, r6, #29
 8000d76:	d00b      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d78:	200f      	movs	r0, #15
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	4030      	ands	r0, r6
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d006      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d82:	3604      	adds	r6, #4
 8000d84:	0132      	lsls	r2, r6, #4
 8000d86:	d503      	bpl.n	8000d90 <__aeabi_fmul+0xfc>
 8000d88:	4b6e      	ldr	r3, [pc, #440]	@ (8000f44 <__aeabi_fmul+0x2b0>)
 8000d8a:	401e      	ands	r6, r3
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	3380      	adds	r3, #128	@ 0x80
 8000d90:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_fmul+0x102>
 8000d94:	e0bd      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000d96:	01b2      	lsls	r2, r6, #6
 8000d98:	0a52      	lsrs	r2, r2, #9
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	e048      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fmul+0x110>
 8000da2:	e092      	b.n	8000eca <__aeabi_fmul+0x236>
 8000da4:	2308      	movs	r3, #8
 8000da6:	4699      	mov	r9, r3
 8000da8:	3b06      	subs	r3, #6
 8000daa:	469a      	mov	sl, r3
 8000dac:	027b      	lsls	r3, r7, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	4698      	mov	r8, r3
 8000db2:	007b      	lsls	r3, r7, #1
 8000db4:	24ff      	movs	r4, #255	@ 0xff
 8000db6:	0e1b      	lsrs	r3, r3, #24
 8000db8:	0fff      	lsrs	r7, r7, #31
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d18a      	bne.n	8000cd4 <__aeabi_fmul+0x40>
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d164      	bne.n	8000e8e <__aeabi_fmul+0x1fa>
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	3201      	adds	r2, #1
 8000dc8:	4311      	orrs	r1, r2
 8000dca:	4689      	mov	r9, r1
 8000dcc:	290a      	cmp	r1, #10
 8000dce:	dc08      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000dd0:	407d      	eors	r5, r7
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	b2ea      	uxtb	r2, r5
 8000dd6:	2902      	cmp	r1, #2
 8000dd8:	dc91      	bgt.n	8000cfe <__aeabi_fmul+0x6a>
 8000dda:	0015      	movs	r5, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	e027      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000de0:	0015      	movs	r5, r2
 8000de2:	4653      	mov	r3, sl
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d100      	bne.n	8000dea <__aeabi_fmul+0x156>
 8000de8:	e093      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d01a      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d12c      	bne.n	8000e4c <__aeabi_fmul+0x1b8>
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	e01b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000df8:	4643      	mov	r3, r8
 8000dfa:	34ff      	adds	r4, #255	@ 0xff
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d055      	beq.n	8000eac <__aeabi_fmul+0x218>
 8000e00:	2103      	movs	r1, #3
 8000e02:	464b      	mov	r3, r9
 8000e04:	430b      	orrs	r3, r1
 8000e06:	0019      	movs	r1, r3
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	dc00      	bgt.n	8000e0e <__aeabi_fmul+0x17a>
 8000e0c:	e092      	b.n	8000f34 <__aeabi_fmul+0x2a0>
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fmul+0x180>
 8000e12:	e08c      	b.n	8000f2e <__aeabi_fmul+0x29a>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	03d2      	lsls	r2, r2, #15
 8000e18:	4216      	tst	r6, r2
 8000e1a:	d003      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4213      	tst	r3, r2
 8000e20:	d100      	bne.n	8000e24 <__aeabi_fmul+0x190>
 8000e22:	e07d      	b.n	8000f20 <__aeabi_fmul+0x28c>
 8000e24:	2280      	movs	r2, #128	@ 0x80
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	4332      	orrs	r2, r6
 8000e2a:	0252      	lsls	r2, r2, #9
 8000e2c:	0a52      	lsrs	r2, r2, #9
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	05d8      	lsls	r0, r3, #23
 8000e32:	07ed      	lsls	r5, r5, #31
 8000e34:	4310      	orrs	r0, r2
 8000e36:	4328      	orrs	r0, r5
 8000e38:	bce0      	pop	{r5, r6, r7}
 8000e3a:	46ba      	mov	sl, r7
 8000e3c:	46b1      	mov	r9, r6
 8000e3e:	46a8      	mov	r8, r5
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	2301      	movs	r3, #1
 8000e44:	0015      	movs	r5, r2
 8000e46:	0871      	lsrs	r1, r6, #1
 8000e48:	401e      	ands	r6, r3
 8000e4a:	430e      	orrs	r6, r1
 8000e4c:	0023      	movs	r3, r4
 8000e4e:	3380      	adds	r3, #128	@ 0x80
 8000e50:	1c61      	adds	r1, r4, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd41      	ble.n	8000eda <__aeabi_fmul+0x246>
 8000e56:	0772      	lsls	r2, r6, #29
 8000e58:	d094      	beq.n	8000d84 <__aeabi_fmul+0xf0>
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	4032      	ands	r2, r6
 8000e5e:	2a04      	cmp	r2, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x1d0>
 8000e62:	e78e      	b.n	8000d82 <__aeabi_fmul+0xee>
 8000e64:	e78e      	b.n	8000d84 <__aeabi_fmul+0xf0>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d105      	bne.n	8000e76 <__aeabi_fmul+0x1e2>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	3b03      	subs	r3, #3
 8000e70:	2400      	movs	r4, #0
 8000e72:	469a      	mov	sl, r3
 8000e74:	e726      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e76:	0030      	movs	r0, r6
 8000e78:	f002 f986 	bl	8003188 <__clzsi2>
 8000e7c:	2476      	movs	r4, #118	@ 0x76
 8000e7e:	1f43      	subs	r3, r0, #5
 8000e80:	409e      	lsls	r6, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	4264      	negs	r4, r4
 8000e86:	4699      	mov	r9, r3
 8000e88:	469a      	mov	sl, r3
 8000e8a:	1a24      	subs	r4, r4, r0
 8000e8c:	e71a      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f002 f97a 	bl	8003188 <__clzsi2>
 8000e94:	464b      	mov	r3, r9
 8000e96:	1a24      	subs	r4, r4, r0
 8000e98:	3c76      	subs	r4, #118	@ 0x76
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	dca1      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	3805      	subs	r0, #5
 8000ea2:	4083      	lsls	r3, r0
 8000ea4:	407d      	eors	r5, r7
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	b2ea      	uxtb	r2, r5
 8000eaa:	e724      	b.n	8000cf6 <__aeabi_fmul+0x62>
 8000eac:	464a      	mov	r2, r9
 8000eae:	3302      	adds	r3, #2
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	002a      	movs	r2, r5
 8000eb4:	407a      	eors	r2, r7
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	dc92      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	0015      	movs	r5, r2
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d026      	beq.n	8000f12 <__aeabi_fmul+0x27e>
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	e719      	b.n	8000cfe <__aeabi_fmul+0x6a>
 8000eca:	230c      	movs	r3, #12
 8000ecc:	4699      	mov	r9, r3
 8000ece:	3b09      	subs	r3, #9
 8000ed0:	24ff      	movs	r4, #255	@ 0xff
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	e6f6      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	0021      	movs	r1, r4
 8000eda:	2201      	movs	r2, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b1b      	cmp	r3, #27
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_fmul+0x250>
 8000ee2:	e786      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000ee4:	319e      	adds	r1, #158	@ 0x9e
 8000ee6:	0032      	movs	r2, r6
 8000ee8:	408e      	lsls	r6, r1
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	1e73      	subs	r3, r6, #1
 8000eee:	419e      	sbcs	r6, r3
 8000ef0:	4332      	orrs	r2, r6
 8000ef2:	0753      	lsls	r3, r2, #29
 8000ef4:	d004      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d000      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000efe:	3204      	adds	r2, #4
 8000f00:	0153      	lsls	r3, r2, #5
 8000f02:	d510      	bpl.n	8000f26 <__aeabi_fmul+0x292>
 8000f04:	2301      	movs	r3, #1
 8000f06:	2200      	movs	r2, #0
 8000f08:	e792      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f0a:	003d      	movs	r5, r7
 8000f0c:	4646      	mov	r6, r8
 8000f0e:	4682      	mov	sl, r0
 8000f10:	e767      	b.n	8000de2 <__aeabi_fmul+0x14e>
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	2200      	movs	r2, #0
 8000f16:	e78b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	03d2      	lsls	r2, r2, #15
 8000f1e:	e786      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f20:	003d      	movs	r5, r7
 8000f22:	431a      	orrs	r2, r3
 8000f24:	e783      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f26:	0192      	lsls	r2, r2, #6
 8000f28:	2300      	movs	r3, #0
 8000f2a:	0a52      	lsrs	r2, r2, #9
 8000f2c:	e780      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f2e:	003d      	movs	r5, r7
 8000f30:	4646      	mov	r6, r8
 8000f32:	e777      	b.n	8000e24 <__aeabi_fmul+0x190>
 8000f34:	002a      	movs	r2, r5
 8000f36:	2301      	movs	r3, #1
 8000f38:	407a      	eors	r2, r7
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	e6e9      	b.n	8000d16 <__aeabi_fmul+0x82>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	f7ffffff 	.word	0xf7ffffff

08000f48 <__aeabi_f2iz>:
 8000f48:	0241      	lsls	r1, r0, #9
 8000f4a:	0042      	lsls	r2, r0, #1
 8000f4c:	0fc3      	lsrs	r3, r0, #31
 8000f4e:	0a49      	lsrs	r1, r1, #9
 8000f50:	2000      	movs	r0, #0
 8000f52:	0e12      	lsrs	r2, r2, #24
 8000f54:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f56:	dd03      	ble.n	8000f60 <__aeabi_f2iz+0x18>
 8000f58:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f5a:	dd02      	ble.n	8000f62 <__aeabi_f2iz+0x1a>
 8000f5c:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <__aeabi_f2iz+0x3c>)
 8000f5e:	1898      	adds	r0, r3, r2
 8000f60:	4770      	bx	lr
 8000f62:	2080      	movs	r0, #128	@ 0x80
 8000f64:	0400      	lsls	r0, r0, #16
 8000f66:	4301      	orrs	r1, r0
 8000f68:	2a95      	cmp	r2, #149	@ 0x95
 8000f6a:	dc07      	bgt.n	8000f7c <__aeabi_f2iz+0x34>
 8000f6c:	2096      	movs	r0, #150	@ 0x96
 8000f6e:	1a82      	subs	r2, r0, r2
 8000f70:	40d1      	lsrs	r1, r2
 8000f72:	4248      	negs	r0, r1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f3      	bne.n	8000f60 <__aeabi_f2iz+0x18>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	e7f1      	b.n	8000f60 <__aeabi_f2iz+0x18>
 8000f7c:	3a96      	subs	r2, #150	@ 0x96
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	e7f7      	b.n	8000f72 <__aeabi_f2iz+0x2a>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	7fffffff 	.word	0x7fffffff

08000f88 <__aeabi_i2f>:
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d012      	beq.n	8000fb4 <__aeabi_i2f+0x2c>
 8000f8e:	17c3      	asrs	r3, r0, #31
 8000f90:	18c5      	adds	r5, r0, r3
 8000f92:	405d      	eors	r5, r3
 8000f94:	0fc4      	lsrs	r4, r0, #31
 8000f96:	0028      	movs	r0, r5
 8000f98:	f002 f8f6 	bl	8003188 <__clzsi2>
 8000f9c:	239e      	movs	r3, #158	@ 0x9e
 8000f9e:	1a1b      	subs	r3, r3, r0
 8000fa0:	2b96      	cmp	r3, #150	@ 0x96
 8000fa2:	dc0f      	bgt.n	8000fc4 <__aeabi_i2f+0x3c>
 8000fa4:	2808      	cmp	r0, #8
 8000fa6:	d038      	beq.n	800101a <__aeabi_i2f+0x92>
 8000fa8:	3808      	subs	r0, #8
 8000faa:	4085      	lsls	r5, r0
 8000fac:	026d      	lsls	r5, r5, #9
 8000fae:	0a6d      	lsrs	r5, r5, #9
 8000fb0:	b2d8      	uxtb	r0, r3
 8000fb2:	e002      	b.n	8000fba <__aeabi_i2f+0x32>
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	2500      	movs	r5, #0
 8000fba:	05c0      	lsls	r0, r0, #23
 8000fbc:	4328      	orrs	r0, r5
 8000fbe:	07e4      	lsls	r4, r4, #31
 8000fc0:	4320      	orrs	r0, r4
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	2b99      	cmp	r3, #153	@ 0x99
 8000fc6:	dc14      	bgt.n	8000ff2 <__aeabi_i2f+0x6a>
 8000fc8:	1f42      	subs	r2, r0, #5
 8000fca:	4095      	lsls	r5, r2
 8000fcc:	002a      	movs	r2, r5
 8000fce:	4915      	ldr	r1, [pc, #84]	@ (8001024 <__aeabi_i2f+0x9c>)
 8000fd0:	4011      	ands	r1, r2
 8000fd2:	0755      	lsls	r5, r2, #29
 8000fd4:	d01c      	beq.n	8001010 <__aeabi_i2f+0x88>
 8000fd6:	250f      	movs	r5, #15
 8000fd8:	402a      	ands	r2, r5
 8000fda:	2a04      	cmp	r2, #4
 8000fdc:	d018      	beq.n	8001010 <__aeabi_i2f+0x88>
 8000fde:	3104      	adds	r1, #4
 8000fe0:	08ca      	lsrs	r2, r1, #3
 8000fe2:	0149      	lsls	r1, r1, #5
 8000fe4:	d515      	bpl.n	8001012 <__aeabi_i2f+0x8a>
 8000fe6:	239f      	movs	r3, #159	@ 0x9f
 8000fe8:	0252      	lsls	r2, r2, #9
 8000fea:	1a18      	subs	r0, r3, r0
 8000fec:	0a55      	lsrs	r5, r2, #9
 8000fee:	b2c0      	uxtb	r0, r0
 8000ff0:	e7e3      	b.n	8000fba <__aeabi_i2f+0x32>
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	0029      	movs	r1, r5
 8000ff6:	1a12      	subs	r2, r2, r0
 8000ff8:	40d1      	lsrs	r1, r2
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	321b      	adds	r2, #27
 8000ffe:	4095      	lsls	r5, r2
 8001000:	002a      	movs	r2, r5
 8001002:	1e55      	subs	r5, r2, #1
 8001004:	41aa      	sbcs	r2, r5
 8001006:	430a      	orrs	r2, r1
 8001008:	4906      	ldr	r1, [pc, #24]	@ (8001024 <__aeabi_i2f+0x9c>)
 800100a:	4011      	ands	r1, r2
 800100c:	0755      	lsls	r5, r2, #29
 800100e:	d1e2      	bne.n	8000fd6 <__aeabi_i2f+0x4e>
 8001010:	08ca      	lsrs	r2, r1, #3
 8001012:	0252      	lsls	r2, r2, #9
 8001014:	0a55      	lsrs	r5, r2, #9
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	e7cf      	b.n	8000fba <__aeabi_i2f+0x32>
 800101a:	026d      	lsls	r5, r5, #9
 800101c:	0a6d      	lsrs	r5, r5, #9
 800101e:	308e      	adds	r0, #142	@ 0x8e
 8001020:	e7cb      	b.n	8000fba <__aeabi_i2f+0x32>
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	fbffffff 	.word	0xfbffffff

08001028 <__aeabi_ui2f>:
 8001028:	b510      	push	{r4, lr}
 800102a:	1e04      	subs	r4, r0, #0
 800102c:	d00d      	beq.n	800104a <__aeabi_ui2f+0x22>
 800102e:	f002 f8ab 	bl	8003188 <__clzsi2>
 8001032:	239e      	movs	r3, #158	@ 0x9e
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	2b96      	cmp	r3, #150	@ 0x96
 8001038:	dc0c      	bgt.n	8001054 <__aeabi_ui2f+0x2c>
 800103a:	2808      	cmp	r0, #8
 800103c:	d034      	beq.n	80010a8 <__aeabi_ui2f+0x80>
 800103e:	3808      	subs	r0, #8
 8001040:	4084      	lsls	r4, r0
 8001042:	0264      	lsls	r4, r4, #9
 8001044:	0a64      	lsrs	r4, r4, #9
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	e001      	b.n	800104e <__aeabi_ui2f+0x26>
 800104a:	2000      	movs	r0, #0
 800104c:	2400      	movs	r4, #0
 800104e:	05c0      	lsls	r0, r0, #23
 8001050:	4320      	orrs	r0, r4
 8001052:	bd10      	pop	{r4, pc}
 8001054:	2b99      	cmp	r3, #153	@ 0x99
 8001056:	dc13      	bgt.n	8001080 <__aeabi_ui2f+0x58>
 8001058:	1f42      	subs	r2, r0, #5
 800105a:	4094      	lsls	r4, r2
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <__aeabi_ui2f+0x88>)
 800105e:	4022      	ands	r2, r4
 8001060:	0761      	lsls	r1, r4, #29
 8001062:	d01c      	beq.n	800109e <__aeabi_ui2f+0x76>
 8001064:	210f      	movs	r1, #15
 8001066:	4021      	ands	r1, r4
 8001068:	2904      	cmp	r1, #4
 800106a:	d018      	beq.n	800109e <__aeabi_ui2f+0x76>
 800106c:	3204      	adds	r2, #4
 800106e:	08d4      	lsrs	r4, r2, #3
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	d515      	bpl.n	80010a0 <__aeabi_ui2f+0x78>
 8001074:	239f      	movs	r3, #159	@ 0x9f
 8001076:	0264      	lsls	r4, r4, #9
 8001078:	1a18      	subs	r0, r3, r0
 800107a:	0a64      	lsrs	r4, r4, #9
 800107c:	b2c0      	uxtb	r0, r0
 800107e:	e7e6      	b.n	800104e <__aeabi_ui2f+0x26>
 8001080:	0002      	movs	r2, r0
 8001082:	0021      	movs	r1, r4
 8001084:	321b      	adds	r2, #27
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	1e51      	subs	r1, r2, #1
 800108c:	418a      	sbcs	r2, r1
 800108e:	2105      	movs	r1, #5
 8001090:	1a09      	subs	r1, r1, r0
 8001092:	40cc      	lsrs	r4, r1
 8001094:	4314      	orrs	r4, r2
 8001096:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <__aeabi_ui2f+0x88>)
 8001098:	4022      	ands	r2, r4
 800109a:	0761      	lsls	r1, r4, #29
 800109c:	d1e2      	bne.n	8001064 <__aeabi_ui2f+0x3c>
 800109e:	08d4      	lsrs	r4, r2, #3
 80010a0:	0264      	lsls	r4, r4, #9
 80010a2:	0a64      	lsrs	r4, r4, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7d2      	b.n	800104e <__aeabi_ui2f+0x26>
 80010a8:	0264      	lsls	r4, r4, #9
 80010aa:	0a64      	lsrs	r4, r4, #9
 80010ac:	308e      	adds	r0, #142	@ 0x8e
 80010ae:	e7ce      	b.n	800104e <__aeabi_ui2f+0x26>
 80010b0:	fbffffff 	.word	0xfbffffff

080010b4 <__aeabi_dadd>:
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	464f      	mov	r7, r9
 80010b8:	4646      	mov	r6, r8
 80010ba:	46d6      	mov	lr, sl
 80010bc:	b5c0      	push	{r6, r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	9000      	str	r0, [sp, #0]
 80010c2:	9101      	str	r1, [sp, #4]
 80010c4:	030e      	lsls	r6, r1, #12
 80010c6:	004c      	lsls	r4, r1, #1
 80010c8:	0fcd      	lsrs	r5, r1, #31
 80010ca:	0a71      	lsrs	r1, r6, #9
 80010cc:	9e00      	ldr	r6, [sp, #0]
 80010ce:	005f      	lsls	r7, r3, #1
 80010d0:	0f76      	lsrs	r6, r6, #29
 80010d2:	430e      	orrs	r6, r1
 80010d4:	9900      	ldr	r1, [sp, #0]
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	00c9      	lsls	r1, r1, #3
 80010dc:	4689      	mov	r9, r1
 80010de:	0319      	lsls	r1, r3, #12
 80010e0:	0d7b      	lsrs	r3, r7, #21
 80010e2:	4698      	mov	r8, r3
 80010e4:	9b01      	ldr	r3, [sp, #4]
 80010e6:	0a49      	lsrs	r1, r1, #9
 80010e8:	0fdb      	lsrs	r3, r3, #31
 80010ea:	469c      	mov	ip, r3
 80010ec:	9b00      	ldr	r3, [sp, #0]
 80010ee:	9a00      	ldr	r2, [sp, #0]
 80010f0:	0f5b      	lsrs	r3, r3, #29
 80010f2:	430b      	orrs	r3, r1
 80010f4:	4641      	mov	r1, r8
 80010f6:	0d64      	lsrs	r4, r4, #21
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	1a61      	subs	r1, r4, r1
 80010fc:	4565      	cmp	r5, ip
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0x4e>
 8001100:	e0a6      	b.n	8001250 <__aeabi_dadd+0x19c>
 8001102:	2900      	cmp	r1, #0
 8001104:	dd72      	ble.n	80011ec <__aeabi_dadd+0x138>
 8001106:	4647      	mov	r7, r8
 8001108:	2f00      	cmp	r7, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x5a>
 800110c:	e0dd      	b.n	80012ca <__aeabi_dadd+0x216>
 800110e:	4fcc      	ldr	r7, [pc, #816]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001110:	42bc      	cmp	r4, r7
 8001112:	d100      	bne.n	8001116 <__aeabi_dadd+0x62>
 8001114:	e19a      	b.n	800144c <__aeabi_dadd+0x398>
 8001116:	2701      	movs	r7, #1
 8001118:	2938      	cmp	r1, #56	@ 0x38
 800111a:	dc17      	bgt.n	800114c <__aeabi_dadd+0x98>
 800111c:	2780      	movs	r7, #128	@ 0x80
 800111e:	043f      	lsls	r7, r7, #16
 8001120:	433b      	orrs	r3, r7
 8001122:	291f      	cmp	r1, #31
 8001124:	dd00      	ble.n	8001128 <__aeabi_dadd+0x74>
 8001126:	e1dd      	b.n	80014e4 <__aeabi_dadd+0x430>
 8001128:	2720      	movs	r7, #32
 800112a:	1a78      	subs	r0, r7, r1
 800112c:	001f      	movs	r7, r3
 800112e:	4087      	lsls	r7, r0
 8001130:	46ba      	mov	sl, r7
 8001132:	0017      	movs	r7, r2
 8001134:	40cf      	lsrs	r7, r1
 8001136:	4684      	mov	ip, r0
 8001138:	0038      	movs	r0, r7
 800113a:	4657      	mov	r7, sl
 800113c:	4307      	orrs	r7, r0
 800113e:	4660      	mov	r0, ip
 8001140:	4082      	lsls	r2, r0
 8001142:	40cb      	lsrs	r3, r1
 8001144:	1e50      	subs	r0, r2, #1
 8001146:	4182      	sbcs	r2, r0
 8001148:	1af6      	subs	r6, r6, r3
 800114a:	4317      	orrs	r7, r2
 800114c:	464b      	mov	r3, r9
 800114e:	1bdf      	subs	r7, r3, r7
 8001150:	45b9      	cmp	r9, r7
 8001152:	4180      	sbcs	r0, r0
 8001154:	4240      	negs	r0, r0
 8001156:	1a36      	subs	r6, r6, r0
 8001158:	0233      	lsls	r3, r6, #8
 800115a:	d400      	bmi.n	800115e <__aeabi_dadd+0xaa>
 800115c:	e0ff      	b.n	800135e <__aeabi_dadd+0x2aa>
 800115e:	0276      	lsls	r6, r6, #9
 8001160:	0a76      	lsrs	r6, r6, #9
 8001162:	2e00      	cmp	r6, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0xb4>
 8001166:	e13c      	b.n	80013e2 <__aeabi_dadd+0x32e>
 8001168:	0030      	movs	r0, r6
 800116a:	f002 f80d 	bl	8003188 <__clzsi2>
 800116e:	0003      	movs	r3, r0
 8001170:	3b08      	subs	r3, #8
 8001172:	2120      	movs	r1, #32
 8001174:	0038      	movs	r0, r7
 8001176:	1aca      	subs	r2, r1, r3
 8001178:	40d0      	lsrs	r0, r2
 800117a:	409e      	lsls	r6, r3
 800117c:	0002      	movs	r2, r0
 800117e:	409f      	lsls	r7, r3
 8001180:	4332      	orrs	r2, r6
 8001182:	429c      	cmp	r4, r3
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0xd4>
 8001186:	e1a6      	b.n	80014d6 <__aeabi_dadd+0x422>
 8001188:	1b18      	subs	r0, r3, r4
 800118a:	3001      	adds	r0, #1
 800118c:	1a09      	subs	r1, r1, r0
 800118e:	003e      	movs	r6, r7
 8001190:	408f      	lsls	r7, r1
 8001192:	40c6      	lsrs	r6, r0
 8001194:	1e7b      	subs	r3, r7, #1
 8001196:	419f      	sbcs	r7, r3
 8001198:	0013      	movs	r3, r2
 800119a:	408b      	lsls	r3, r1
 800119c:	4337      	orrs	r7, r6
 800119e:	431f      	orrs	r7, r3
 80011a0:	40c2      	lsrs	r2, r0
 80011a2:	003b      	movs	r3, r7
 80011a4:	0016      	movs	r6, r2
 80011a6:	2400      	movs	r4, #0
 80011a8:	4313      	orrs	r3, r2
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0xfa>
 80011ac:	e1df      	b.n	800156e <__aeabi_dadd+0x4ba>
 80011ae:	077b      	lsls	r3, r7, #29
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dadd+0x100>
 80011b2:	e332      	b.n	800181a <__aeabi_dadd+0x766>
 80011b4:	230f      	movs	r3, #15
 80011b6:	003a      	movs	r2, r7
 80011b8:	403b      	ands	r3, r7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x114>
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	42ba      	cmp	r2, r7
 80011c2:	41bf      	sbcs	r7, r7
 80011c4:	427f      	negs	r7, r7
 80011c6:	19f6      	adds	r6, r6, r7
 80011c8:	0233      	lsls	r3, r6, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dadd+0x11a>
 80011cc:	e323      	b.n	8001816 <__aeabi_dadd+0x762>
 80011ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001440 <__aeabi_dadd+0x38c>)
 80011d0:	3401      	adds	r4, #1
 80011d2:	429c      	cmp	r4, r3
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x124>
 80011d6:	e0b4      	b.n	8001342 <__aeabi_dadd+0x28e>
 80011d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001444 <__aeabi_dadd+0x390>)
 80011da:	0564      	lsls	r4, r4, #21
 80011dc:	401e      	ands	r6, r3
 80011de:	0d64      	lsrs	r4, r4, #21
 80011e0:	0777      	lsls	r7, r6, #29
 80011e2:	08d2      	lsrs	r2, r2, #3
 80011e4:	0276      	lsls	r6, r6, #9
 80011e6:	4317      	orrs	r7, r2
 80011e8:	0b36      	lsrs	r6, r6, #12
 80011ea:	e0ac      	b.n	8001346 <__aeabi_dadd+0x292>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x13e>
 80011f0:	e07e      	b.n	80012f0 <__aeabi_dadd+0x23c>
 80011f2:	4641      	mov	r1, r8
 80011f4:	1b09      	subs	r1, r1, r4
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d000      	beq.n	80011fc <__aeabi_dadd+0x148>
 80011fa:	e160      	b.n	80014be <__aeabi_dadd+0x40a>
 80011fc:	0034      	movs	r4, r6
 80011fe:	4648      	mov	r0, r9
 8001200:	4304      	orrs	r4, r0
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x152>
 8001204:	e1c9      	b.n	800159a <__aeabi_dadd+0x4e6>
 8001206:	1e4c      	subs	r4, r1, #1
 8001208:	2901      	cmp	r1, #1
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x15a>
 800120c:	e22e      	b.n	800166c <__aeabi_dadd+0x5b8>
 800120e:	4d8c      	ldr	r5, [pc, #560]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001210:	42a9      	cmp	r1, r5
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x162>
 8001214:	e224      	b.n	8001660 <__aeabi_dadd+0x5ac>
 8001216:	2701      	movs	r7, #1
 8001218:	2c38      	cmp	r4, #56	@ 0x38
 800121a:	dc11      	bgt.n	8001240 <__aeabi_dadd+0x18c>
 800121c:	0021      	movs	r1, r4
 800121e:	291f      	cmp	r1, #31
 8001220:	dd00      	ble.n	8001224 <__aeabi_dadd+0x170>
 8001222:	e20b      	b.n	800163c <__aeabi_dadd+0x588>
 8001224:	2420      	movs	r4, #32
 8001226:	0037      	movs	r7, r6
 8001228:	4648      	mov	r0, r9
 800122a:	1a64      	subs	r4, r4, r1
 800122c:	40a7      	lsls	r7, r4
 800122e:	40c8      	lsrs	r0, r1
 8001230:	4307      	orrs	r7, r0
 8001232:	4648      	mov	r0, r9
 8001234:	40a0      	lsls	r0, r4
 8001236:	40ce      	lsrs	r6, r1
 8001238:	1e44      	subs	r4, r0, #1
 800123a:	41a0      	sbcs	r0, r4
 800123c:	1b9b      	subs	r3, r3, r6
 800123e:	4307      	orrs	r7, r0
 8001240:	1bd7      	subs	r7, r2, r7
 8001242:	42ba      	cmp	r2, r7
 8001244:	4192      	sbcs	r2, r2
 8001246:	4252      	negs	r2, r2
 8001248:	4665      	mov	r5, ip
 800124a:	4644      	mov	r4, r8
 800124c:	1a9e      	subs	r6, r3, r2
 800124e:	e783      	b.n	8001158 <__aeabi_dadd+0xa4>
 8001250:	2900      	cmp	r1, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dadd+0x1a2>
 8001254:	e09c      	b.n	8001390 <__aeabi_dadd+0x2dc>
 8001256:	4647      	mov	r7, r8
 8001258:	2f00      	cmp	r7, #0
 800125a:	d167      	bne.n	800132c <__aeabi_dadd+0x278>
 800125c:	001f      	movs	r7, r3
 800125e:	4317      	orrs	r7, r2
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x1b0>
 8001262:	e0e4      	b.n	800142e <__aeabi_dadd+0x37a>
 8001264:	1e48      	subs	r0, r1, #1
 8001266:	2901      	cmp	r1, #1
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x1b8>
 800126a:	e19b      	b.n	80015a4 <__aeabi_dadd+0x4f0>
 800126c:	4f74      	ldr	r7, [pc, #464]	@ (8001440 <__aeabi_dadd+0x38c>)
 800126e:	42b9      	cmp	r1, r7
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x1c0>
 8001272:	e0eb      	b.n	800144c <__aeabi_dadd+0x398>
 8001274:	2701      	movs	r7, #1
 8001276:	0001      	movs	r1, r0
 8001278:	2838      	cmp	r0, #56	@ 0x38
 800127a:	dc11      	bgt.n	80012a0 <__aeabi_dadd+0x1ec>
 800127c:	291f      	cmp	r1, #31
 800127e:	dd00      	ble.n	8001282 <__aeabi_dadd+0x1ce>
 8001280:	e1c7      	b.n	8001612 <__aeabi_dadd+0x55e>
 8001282:	2720      	movs	r7, #32
 8001284:	1a78      	subs	r0, r7, r1
 8001286:	001f      	movs	r7, r3
 8001288:	4684      	mov	ip, r0
 800128a:	4087      	lsls	r7, r0
 800128c:	0010      	movs	r0, r2
 800128e:	40c8      	lsrs	r0, r1
 8001290:	4307      	orrs	r7, r0
 8001292:	4660      	mov	r0, ip
 8001294:	4082      	lsls	r2, r0
 8001296:	40cb      	lsrs	r3, r1
 8001298:	1e50      	subs	r0, r2, #1
 800129a:	4182      	sbcs	r2, r0
 800129c:	18f6      	adds	r6, r6, r3
 800129e:	4317      	orrs	r7, r2
 80012a0:	444f      	add	r7, r9
 80012a2:	454f      	cmp	r7, r9
 80012a4:	4180      	sbcs	r0, r0
 80012a6:	4240      	negs	r0, r0
 80012a8:	1836      	adds	r6, r6, r0
 80012aa:	0233      	lsls	r3, r6, #8
 80012ac:	d557      	bpl.n	800135e <__aeabi_dadd+0x2aa>
 80012ae:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <__aeabi_dadd+0x38c>)
 80012b0:	3401      	adds	r4, #1
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d045      	beq.n	8001342 <__aeabi_dadd+0x28e>
 80012b6:	2101      	movs	r1, #1
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <__aeabi_dadd+0x390>)
 80012ba:	087a      	lsrs	r2, r7, #1
 80012bc:	401e      	ands	r6, r3
 80012be:	4039      	ands	r1, r7
 80012c0:	430a      	orrs	r2, r1
 80012c2:	07f7      	lsls	r7, r6, #31
 80012c4:	4317      	orrs	r7, r2
 80012c6:	0876      	lsrs	r6, r6, #1
 80012c8:	e771      	b.n	80011ae <__aeabi_dadd+0xfa>
 80012ca:	001f      	movs	r7, r3
 80012cc:	4317      	orrs	r7, r2
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x21e>
 80012d0:	e0ad      	b.n	800142e <__aeabi_dadd+0x37a>
 80012d2:	1e4f      	subs	r7, r1, #1
 80012d4:	46bc      	mov	ip, r7
 80012d6:	2901      	cmp	r1, #1
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x228>
 80012da:	e182      	b.n	80015e2 <__aeabi_dadd+0x52e>
 80012dc:	4f58      	ldr	r7, [pc, #352]	@ (8001440 <__aeabi_dadd+0x38c>)
 80012de:	42b9      	cmp	r1, r7
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x230>
 80012e2:	e190      	b.n	8001606 <__aeabi_dadd+0x552>
 80012e4:	4661      	mov	r1, ip
 80012e6:	2701      	movs	r7, #1
 80012e8:	2938      	cmp	r1, #56	@ 0x38
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0x23a>
 80012ec:	e72e      	b.n	800114c <__aeabi_dadd+0x98>
 80012ee:	e718      	b.n	8001122 <__aeabi_dadd+0x6e>
 80012f0:	4f55      	ldr	r7, [pc, #340]	@ (8001448 <__aeabi_dadd+0x394>)
 80012f2:	1c61      	adds	r1, r4, #1
 80012f4:	4239      	tst	r1, r7
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x246>
 80012f8:	e0d0      	b.n	800149c <__aeabi_dadd+0x3e8>
 80012fa:	0031      	movs	r1, r6
 80012fc:	4648      	mov	r0, r9
 80012fe:	001f      	movs	r7, r3
 8001300:	4301      	orrs	r1, r0
 8001302:	4317      	orrs	r7, r2
 8001304:	2c00      	cmp	r4, #0
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x256>
 8001308:	e13d      	b.n	8001586 <__aeabi_dadd+0x4d2>
 800130a:	2900      	cmp	r1, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x25c>
 800130e:	e1bc      	b.n	800168a <__aeabi_dadd+0x5d6>
 8001310:	2f00      	cmp	r7, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x262>
 8001314:	e1bf      	b.n	8001696 <__aeabi_dadd+0x5e2>
 8001316:	464b      	mov	r3, r9
 8001318:	2100      	movs	r1, #0
 800131a:	08d8      	lsrs	r0, r3, #3
 800131c:	0777      	lsls	r7, r6, #29
 800131e:	4307      	orrs	r7, r0
 8001320:	08f0      	lsrs	r0, r6, #3
 8001322:	0306      	lsls	r6, r0, #12
 8001324:	054c      	lsls	r4, r1, #21
 8001326:	0b36      	lsrs	r6, r6, #12
 8001328:	0d64      	lsrs	r4, r4, #21
 800132a:	e00c      	b.n	8001346 <__aeabi_dadd+0x292>
 800132c:	4f44      	ldr	r7, [pc, #272]	@ (8001440 <__aeabi_dadd+0x38c>)
 800132e:	42bc      	cmp	r4, r7
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x280>
 8001332:	e08b      	b.n	800144c <__aeabi_dadd+0x398>
 8001334:	2701      	movs	r7, #1
 8001336:	2938      	cmp	r1, #56	@ 0x38
 8001338:	dcb2      	bgt.n	80012a0 <__aeabi_dadd+0x1ec>
 800133a:	2780      	movs	r7, #128	@ 0x80
 800133c:	043f      	lsls	r7, r7, #16
 800133e:	433b      	orrs	r3, r7
 8001340:	e79c      	b.n	800127c <__aeabi_dadd+0x1c8>
 8001342:	2600      	movs	r6, #0
 8001344:	2700      	movs	r7, #0
 8001346:	0524      	lsls	r4, r4, #20
 8001348:	4334      	orrs	r4, r6
 800134a:	07ed      	lsls	r5, r5, #31
 800134c:	432c      	orrs	r4, r5
 800134e:	0038      	movs	r0, r7
 8001350:	0021      	movs	r1, r4
 8001352:	b002      	add	sp, #8
 8001354:	bce0      	pop	{r5, r6, r7}
 8001356:	46ba      	mov	sl, r7
 8001358:	46b1      	mov	r9, r6
 800135a:	46a8      	mov	r8, r5
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	077b      	lsls	r3, r7, #29
 8001360:	d004      	beq.n	800136c <__aeabi_dadd+0x2b8>
 8001362:	230f      	movs	r3, #15
 8001364:	403b      	ands	r3, r7
 8001366:	2b04      	cmp	r3, #4
 8001368:	d000      	beq.n	800136c <__aeabi_dadd+0x2b8>
 800136a:	e728      	b.n	80011be <__aeabi_dadd+0x10a>
 800136c:	08f8      	lsrs	r0, r7, #3
 800136e:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001370:	0777      	lsls	r7, r6, #29
 8001372:	4307      	orrs	r7, r0
 8001374:	08f0      	lsrs	r0, r6, #3
 8001376:	429c      	cmp	r4, r3
 8001378:	d000      	beq.n	800137c <__aeabi_dadd+0x2c8>
 800137a:	e24a      	b.n	8001812 <__aeabi_dadd+0x75e>
 800137c:	003b      	movs	r3, r7
 800137e:	4303      	orrs	r3, r0
 8001380:	d059      	beq.n	8001436 <__aeabi_dadd+0x382>
 8001382:	2680      	movs	r6, #128	@ 0x80
 8001384:	0336      	lsls	r6, r6, #12
 8001386:	4306      	orrs	r6, r0
 8001388:	0336      	lsls	r6, r6, #12
 800138a:	4c2d      	ldr	r4, [pc, #180]	@ (8001440 <__aeabi_dadd+0x38c>)
 800138c:	0b36      	lsrs	r6, r6, #12
 800138e:	e7da      	b.n	8001346 <__aeabi_dadd+0x292>
 8001390:	2900      	cmp	r1, #0
 8001392:	d061      	beq.n	8001458 <__aeabi_dadd+0x3a4>
 8001394:	4641      	mov	r1, r8
 8001396:	1b09      	subs	r1, r1, r4
 8001398:	2c00      	cmp	r4, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x2ea>
 800139c:	e0b9      	b.n	8001512 <__aeabi_dadd+0x45e>
 800139e:	4c28      	ldr	r4, [pc, #160]	@ (8001440 <__aeabi_dadd+0x38c>)
 80013a0:	45a0      	cmp	r8, r4
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x2f2>
 80013a4:	e1a5      	b.n	80016f2 <__aeabi_dadd+0x63e>
 80013a6:	2701      	movs	r7, #1
 80013a8:	2938      	cmp	r1, #56	@ 0x38
 80013aa:	dc13      	bgt.n	80013d4 <__aeabi_dadd+0x320>
 80013ac:	2480      	movs	r4, #128	@ 0x80
 80013ae:	0424      	lsls	r4, r4, #16
 80013b0:	4326      	orrs	r6, r4
 80013b2:	291f      	cmp	r1, #31
 80013b4:	dd00      	ble.n	80013b8 <__aeabi_dadd+0x304>
 80013b6:	e1c8      	b.n	800174a <__aeabi_dadd+0x696>
 80013b8:	2420      	movs	r4, #32
 80013ba:	0037      	movs	r7, r6
 80013bc:	4648      	mov	r0, r9
 80013be:	1a64      	subs	r4, r4, r1
 80013c0:	40a7      	lsls	r7, r4
 80013c2:	40c8      	lsrs	r0, r1
 80013c4:	4307      	orrs	r7, r0
 80013c6:	4648      	mov	r0, r9
 80013c8:	40a0      	lsls	r0, r4
 80013ca:	40ce      	lsrs	r6, r1
 80013cc:	1e44      	subs	r4, r0, #1
 80013ce:	41a0      	sbcs	r0, r4
 80013d0:	199b      	adds	r3, r3, r6
 80013d2:	4307      	orrs	r7, r0
 80013d4:	18bf      	adds	r7, r7, r2
 80013d6:	4297      	cmp	r7, r2
 80013d8:	4192      	sbcs	r2, r2
 80013da:	4252      	negs	r2, r2
 80013dc:	4644      	mov	r4, r8
 80013de:	18d6      	adds	r6, r2, r3
 80013e0:	e763      	b.n	80012aa <__aeabi_dadd+0x1f6>
 80013e2:	0038      	movs	r0, r7
 80013e4:	f001 fed0 	bl	8003188 <__clzsi2>
 80013e8:	0003      	movs	r3, r0
 80013ea:	3318      	adds	r3, #24
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dadd+0x33e>
 80013f0:	e6bf      	b.n	8001172 <__aeabi_dadd+0xbe>
 80013f2:	003a      	movs	r2, r7
 80013f4:	3808      	subs	r0, #8
 80013f6:	4082      	lsls	r2, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	dd00      	ble.n	80013fe <__aeabi_dadd+0x34a>
 80013fc:	e083      	b.n	8001506 <__aeabi_dadd+0x452>
 80013fe:	1b1b      	subs	r3, r3, r4
 8001400:	1c58      	adds	r0, r3, #1
 8001402:	281f      	cmp	r0, #31
 8001404:	dc00      	bgt.n	8001408 <__aeabi_dadd+0x354>
 8001406:	e1b4      	b.n	8001772 <__aeabi_dadd+0x6be>
 8001408:	0017      	movs	r7, r2
 800140a:	3b1f      	subs	r3, #31
 800140c:	40df      	lsrs	r7, r3
 800140e:	2820      	cmp	r0, #32
 8001410:	d005      	beq.n	800141e <__aeabi_dadd+0x36a>
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	1a1b      	subs	r3, r3, r0
 8001416:	409a      	lsls	r2, r3
 8001418:	1e53      	subs	r3, r2, #1
 800141a:	419a      	sbcs	r2, r3
 800141c:	4317      	orrs	r7, r2
 800141e:	2400      	movs	r4, #0
 8001420:	2f00      	cmp	r7, #0
 8001422:	d00a      	beq.n	800143a <__aeabi_dadd+0x386>
 8001424:	077b      	lsls	r3, r7, #29
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x376>
 8001428:	e6c4      	b.n	80011b4 <__aeabi_dadd+0x100>
 800142a:	0026      	movs	r6, r4
 800142c:	e79e      	b.n	800136c <__aeabi_dadd+0x2b8>
 800142e:	464b      	mov	r3, r9
 8001430:	000c      	movs	r4, r1
 8001432:	08d8      	lsrs	r0, r3, #3
 8001434:	e79b      	b.n	800136e <__aeabi_dadd+0x2ba>
 8001436:	2700      	movs	r7, #0
 8001438:	4c01      	ldr	r4, [pc, #4]	@ (8001440 <__aeabi_dadd+0x38c>)
 800143a:	2600      	movs	r6, #0
 800143c:	e783      	b.n	8001346 <__aeabi_dadd+0x292>
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff
 8001444:	ff7fffff 	.word	0xff7fffff
 8001448:	000007fe 	.word	0x000007fe
 800144c:	464b      	mov	r3, r9
 800144e:	0777      	lsls	r7, r6, #29
 8001450:	08d8      	lsrs	r0, r3, #3
 8001452:	4307      	orrs	r7, r0
 8001454:	08f0      	lsrs	r0, r6, #3
 8001456:	e791      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001458:	4fcd      	ldr	r7, [pc, #820]	@ (8001790 <__aeabi_dadd+0x6dc>)
 800145a:	1c61      	adds	r1, r4, #1
 800145c:	4239      	tst	r1, r7
 800145e:	d16b      	bne.n	8001538 <__aeabi_dadd+0x484>
 8001460:	0031      	movs	r1, r6
 8001462:	4648      	mov	r0, r9
 8001464:	4301      	orrs	r1, r0
 8001466:	2c00      	cmp	r4, #0
 8001468:	d000      	beq.n	800146c <__aeabi_dadd+0x3b8>
 800146a:	e14b      	b.n	8001704 <__aeabi_dadd+0x650>
 800146c:	001f      	movs	r7, r3
 800146e:	4317      	orrs	r7, r2
 8001470:	2900      	cmp	r1, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x3c2>
 8001474:	e181      	b.n	800177a <__aeabi_dadd+0x6c6>
 8001476:	2f00      	cmp	r7, #0
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x3c8>
 800147a:	e74c      	b.n	8001316 <__aeabi_dadd+0x262>
 800147c:	444a      	add	r2, r9
 800147e:	454a      	cmp	r2, r9
 8001480:	4180      	sbcs	r0, r0
 8001482:	18f6      	adds	r6, r6, r3
 8001484:	4240      	negs	r0, r0
 8001486:	1836      	adds	r6, r6, r0
 8001488:	0233      	lsls	r3, r6, #8
 800148a:	d500      	bpl.n	800148e <__aeabi_dadd+0x3da>
 800148c:	e1b0      	b.n	80017f0 <__aeabi_dadd+0x73c>
 800148e:	0017      	movs	r7, r2
 8001490:	4691      	mov	r9, r2
 8001492:	4337      	orrs	r7, r6
 8001494:	d000      	beq.n	8001498 <__aeabi_dadd+0x3e4>
 8001496:	e73e      	b.n	8001316 <__aeabi_dadd+0x262>
 8001498:	2600      	movs	r6, #0
 800149a:	e754      	b.n	8001346 <__aeabi_dadd+0x292>
 800149c:	4649      	mov	r1, r9
 800149e:	1a89      	subs	r1, r1, r2
 80014a0:	4688      	mov	r8, r1
 80014a2:	45c1      	cmp	r9, r8
 80014a4:	41bf      	sbcs	r7, r7
 80014a6:	1af1      	subs	r1, r6, r3
 80014a8:	427f      	negs	r7, r7
 80014aa:	1bc9      	subs	r1, r1, r7
 80014ac:	020f      	lsls	r7, r1, #8
 80014ae:	d461      	bmi.n	8001574 <__aeabi_dadd+0x4c0>
 80014b0:	4647      	mov	r7, r8
 80014b2:	430f      	orrs	r7, r1
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x404>
 80014b6:	e0bd      	b.n	8001634 <__aeabi_dadd+0x580>
 80014b8:	000e      	movs	r6, r1
 80014ba:	4647      	mov	r7, r8
 80014bc:	e651      	b.n	8001162 <__aeabi_dadd+0xae>
 80014be:	4cb5      	ldr	r4, [pc, #724]	@ (8001794 <__aeabi_dadd+0x6e0>)
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x412>
 80014c4:	e100      	b.n	80016c8 <__aeabi_dadd+0x614>
 80014c6:	2701      	movs	r7, #1
 80014c8:	2938      	cmp	r1, #56	@ 0x38
 80014ca:	dd00      	ble.n	80014ce <__aeabi_dadd+0x41a>
 80014cc:	e6b8      	b.n	8001240 <__aeabi_dadd+0x18c>
 80014ce:	2480      	movs	r4, #128	@ 0x80
 80014d0:	0424      	lsls	r4, r4, #16
 80014d2:	4326      	orrs	r6, r4
 80014d4:	e6a3      	b.n	800121e <__aeabi_dadd+0x16a>
 80014d6:	4eb0      	ldr	r6, [pc, #704]	@ (8001798 <__aeabi_dadd+0x6e4>)
 80014d8:	1ae4      	subs	r4, r4, r3
 80014da:	4016      	ands	r6, r2
 80014dc:	077b      	lsls	r3, r7, #29
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x42e>
 80014e0:	e73f      	b.n	8001362 <__aeabi_dadd+0x2ae>
 80014e2:	e743      	b.n	800136c <__aeabi_dadd+0x2b8>
 80014e4:	000f      	movs	r7, r1
 80014e6:	0018      	movs	r0, r3
 80014e8:	3f20      	subs	r7, #32
 80014ea:	40f8      	lsrs	r0, r7
 80014ec:	4684      	mov	ip, r0
 80014ee:	2920      	cmp	r1, #32
 80014f0:	d003      	beq.n	80014fa <__aeabi_dadd+0x446>
 80014f2:	2740      	movs	r7, #64	@ 0x40
 80014f4:	1a79      	subs	r1, r7, r1
 80014f6:	408b      	lsls	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	1e53      	subs	r3, r2, #1
 80014fc:	419a      	sbcs	r2, r3
 80014fe:	4663      	mov	r3, ip
 8001500:	0017      	movs	r7, r2
 8001502:	431f      	orrs	r7, r3
 8001504:	e622      	b.n	800114c <__aeabi_dadd+0x98>
 8001506:	48a4      	ldr	r0, [pc, #656]	@ (8001798 <__aeabi_dadd+0x6e4>)
 8001508:	1ae1      	subs	r1, r4, r3
 800150a:	4010      	ands	r0, r2
 800150c:	0747      	lsls	r7, r0, #29
 800150e:	08c0      	lsrs	r0, r0, #3
 8001510:	e707      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001512:	0034      	movs	r4, r6
 8001514:	4648      	mov	r0, r9
 8001516:	4304      	orrs	r4, r0
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x468>
 800151a:	e0fa      	b.n	8001712 <__aeabi_dadd+0x65e>
 800151c:	1e4c      	subs	r4, r1, #1
 800151e:	2901      	cmp	r1, #1
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x470>
 8001522:	e0d7      	b.n	80016d4 <__aeabi_dadd+0x620>
 8001524:	4f9b      	ldr	r7, [pc, #620]	@ (8001794 <__aeabi_dadd+0x6e0>)
 8001526:	42b9      	cmp	r1, r7
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x478>
 800152a:	e0e2      	b.n	80016f2 <__aeabi_dadd+0x63e>
 800152c:	2701      	movs	r7, #1
 800152e:	2c38      	cmp	r4, #56	@ 0x38
 8001530:	dd00      	ble.n	8001534 <__aeabi_dadd+0x480>
 8001532:	e74f      	b.n	80013d4 <__aeabi_dadd+0x320>
 8001534:	0021      	movs	r1, r4
 8001536:	e73c      	b.n	80013b2 <__aeabi_dadd+0x2fe>
 8001538:	4c96      	ldr	r4, [pc, #600]	@ (8001794 <__aeabi_dadd+0x6e0>)
 800153a:	42a1      	cmp	r1, r4
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x48c>
 800153e:	e0dd      	b.n	80016fc <__aeabi_dadd+0x648>
 8001540:	444a      	add	r2, r9
 8001542:	454a      	cmp	r2, r9
 8001544:	4180      	sbcs	r0, r0
 8001546:	18f3      	adds	r3, r6, r3
 8001548:	4240      	negs	r0, r0
 800154a:	1818      	adds	r0, r3, r0
 800154c:	07c7      	lsls	r7, r0, #31
 800154e:	0852      	lsrs	r2, r2, #1
 8001550:	4317      	orrs	r7, r2
 8001552:	0846      	lsrs	r6, r0, #1
 8001554:	0752      	lsls	r2, r2, #29
 8001556:	d005      	beq.n	8001564 <__aeabi_dadd+0x4b0>
 8001558:	220f      	movs	r2, #15
 800155a:	000c      	movs	r4, r1
 800155c:	403a      	ands	r2, r7
 800155e:	2a04      	cmp	r2, #4
 8001560:	d000      	beq.n	8001564 <__aeabi_dadd+0x4b0>
 8001562:	e62c      	b.n	80011be <__aeabi_dadd+0x10a>
 8001564:	0776      	lsls	r6, r6, #29
 8001566:	08ff      	lsrs	r7, r7, #3
 8001568:	4337      	orrs	r7, r6
 800156a:	0900      	lsrs	r0, r0, #4
 800156c:	e6d9      	b.n	8001322 <__aeabi_dadd+0x26e>
 800156e:	2700      	movs	r7, #0
 8001570:	2600      	movs	r6, #0
 8001572:	e6e8      	b.n	8001346 <__aeabi_dadd+0x292>
 8001574:	4649      	mov	r1, r9
 8001576:	1a57      	subs	r7, r2, r1
 8001578:	42ba      	cmp	r2, r7
 800157a:	4192      	sbcs	r2, r2
 800157c:	1b9e      	subs	r6, r3, r6
 800157e:	4252      	negs	r2, r2
 8001580:	4665      	mov	r5, ip
 8001582:	1ab6      	subs	r6, r6, r2
 8001584:	e5ed      	b.n	8001162 <__aeabi_dadd+0xae>
 8001586:	2900      	cmp	r1, #0
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x4d8>
 800158a:	e0c6      	b.n	800171a <__aeabi_dadd+0x666>
 800158c:	2f00      	cmp	r7, #0
 800158e:	d167      	bne.n	8001660 <__aeabi_dadd+0x5ac>
 8001590:	2680      	movs	r6, #128	@ 0x80
 8001592:	2500      	movs	r5, #0
 8001594:	4c7f      	ldr	r4, [pc, #508]	@ (8001794 <__aeabi_dadd+0x6e0>)
 8001596:	0336      	lsls	r6, r6, #12
 8001598:	e6d5      	b.n	8001346 <__aeabi_dadd+0x292>
 800159a:	4665      	mov	r5, ip
 800159c:	000c      	movs	r4, r1
 800159e:	001e      	movs	r6, r3
 80015a0:	08d0      	lsrs	r0, r2, #3
 80015a2:	e6e4      	b.n	800136e <__aeabi_dadd+0x2ba>
 80015a4:	444a      	add	r2, r9
 80015a6:	454a      	cmp	r2, r9
 80015a8:	4180      	sbcs	r0, r0
 80015aa:	18f3      	adds	r3, r6, r3
 80015ac:	4240      	negs	r0, r0
 80015ae:	1818      	adds	r0, r3, r0
 80015b0:	0011      	movs	r1, r2
 80015b2:	0203      	lsls	r3, r0, #8
 80015b4:	d400      	bmi.n	80015b8 <__aeabi_dadd+0x504>
 80015b6:	e096      	b.n	80016e6 <__aeabi_dadd+0x632>
 80015b8:	4b77      	ldr	r3, [pc, #476]	@ (8001798 <__aeabi_dadd+0x6e4>)
 80015ba:	0849      	lsrs	r1, r1, #1
 80015bc:	4018      	ands	r0, r3
 80015be:	07c3      	lsls	r3, r0, #31
 80015c0:	430b      	orrs	r3, r1
 80015c2:	0844      	lsrs	r4, r0, #1
 80015c4:	0749      	lsls	r1, r1, #29
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x516>
 80015c8:	e129      	b.n	800181e <__aeabi_dadd+0x76a>
 80015ca:	220f      	movs	r2, #15
 80015cc:	401a      	ands	r2, r3
 80015ce:	2a04      	cmp	r2, #4
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x520>
 80015d2:	e0ea      	b.n	80017aa <__aeabi_dadd+0x6f6>
 80015d4:	1d1f      	adds	r7, r3, #4
 80015d6:	429f      	cmp	r7, r3
 80015d8:	41b6      	sbcs	r6, r6
 80015da:	4276      	negs	r6, r6
 80015dc:	1936      	adds	r6, r6, r4
 80015de:	2402      	movs	r4, #2
 80015e0:	e6c4      	b.n	800136c <__aeabi_dadd+0x2b8>
 80015e2:	4649      	mov	r1, r9
 80015e4:	1a8f      	subs	r7, r1, r2
 80015e6:	45b9      	cmp	r9, r7
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	1af6      	subs	r6, r6, r3
 80015ec:	4240      	negs	r0, r0
 80015ee:	1a36      	subs	r6, r6, r0
 80015f0:	0233      	lsls	r3, r6, #8
 80015f2:	d406      	bmi.n	8001602 <__aeabi_dadd+0x54e>
 80015f4:	0773      	lsls	r3, r6, #29
 80015f6:	08ff      	lsrs	r7, r7, #3
 80015f8:	2101      	movs	r1, #1
 80015fa:	431f      	orrs	r7, r3
 80015fc:	08f0      	lsrs	r0, r6, #3
 80015fe:	e690      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001600:	4665      	mov	r5, ip
 8001602:	2401      	movs	r4, #1
 8001604:	e5ab      	b.n	800115e <__aeabi_dadd+0xaa>
 8001606:	464b      	mov	r3, r9
 8001608:	0777      	lsls	r7, r6, #29
 800160a:	08d8      	lsrs	r0, r3, #3
 800160c:	4307      	orrs	r7, r0
 800160e:	08f0      	lsrs	r0, r6, #3
 8001610:	e6b4      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001612:	000f      	movs	r7, r1
 8001614:	0018      	movs	r0, r3
 8001616:	3f20      	subs	r7, #32
 8001618:	40f8      	lsrs	r0, r7
 800161a:	4684      	mov	ip, r0
 800161c:	2920      	cmp	r1, #32
 800161e:	d003      	beq.n	8001628 <__aeabi_dadd+0x574>
 8001620:	2740      	movs	r7, #64	@ 0x40
 8001622:	1a79      	subs	r1, r7, r1
 8001624:	408b      	lsls	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	1e53      	subs	r3, r2, #1
 800162a:	419a      	sbcs	r2, r3
 800162c:	4663      	mov	r3, ip
 800162e:	0017      	movs	r7, r2
 8001630:	431f      	orrs	r7, r3
 8001632:	e635      	b.n	80012a0 <__aeabi_dadd+0x1ec>
 8001634:	2500      	movs	r5, #0
 8001636:	2400      	movs	r4, #0
 8001638:	2600      	movs	r6, #0
 800163a:	e684      	b.n	8001346 <__aeabi_dadd+0x292>
 800163c:	000c      	movs	r4, r1
 800163e:	0035      	movs	r5, r6
 8001640:	3c20      	subs	r4, #32
 8001642:	40e5      	lsrs	r5, r4
 8001644:	2920      	cmp	r1, #32
 8001646:	d005      	beq.n	8001654 <__aeabi_dadd+0x5a0>
 8001648:	2440      	movs	r4, #64	@ 0x40
 800164a:	1a61      	subs	r1, r4, r1
 800164c:	408e      	lsls	r6, r1
 800164e:	4649      	mov	r1, r9
 8001650:	4331      	orrs	r1, r6
 8001652:	4689      	mov	r9, r1
 8001654:	4648      	mov	r0, r9
 8001656:	1e41      	subs	r1, r0, #1
 8001658:	4188      	sbcs	r0, r1
 800165a:	0007      	movs	r7, r0
 800165c:	432f      	orrs	r7, r5
 800165e:	e5ef      	b.n	8001240 <__aeabi_dadd+0x18c>
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	075f      	lsls	r7, r3, #29
 8001664:	4665      	mov	r5, ip
 8001666:	4317      	orrs	r7, r2
 8001668:	08d8      	lsrs	r0, r3, #3
 800166a:	e687      	b.n	800137c <__aeabi_dadd+0x2c8>
 800166c:	1a17      	subs	r7, r2, r0
 800166e:	42ba      	cmp	r2, r7
 8001670:	4192      	sbcs	r2, r2
 8001672:	1b9e      	subs	r6, r3, r6
 8001674:	4252      	negs	r2, r2
 8001676:	1ab6      	subs	r6, r6, r2
 8001678:	0233      	lsls	r3, r6, #8
 800167a:	d4c1      	bmi.n	8001600 <__aeabi_dadd+0x54c>
 800167c:	0773      	lsls	r3, r6, #29
 800167e:	08ff      	lsrs	r7, r7, #3
 8001680:	4665      	mov	r5, ip
 8001682:	2101      	movs	r1, #1
 8001684:	431f      	orrs	r7, r3
 8001686:	08f0      	lsrs	r0, r6, #3
 8001688:	e64b      	b.n	8001322 <__aeabi_dadd+0x26e>
 800168a:	2f00      	cmp	r7, #0
 800168c:	d07b      	beq.n	8001786 <__aeabi_dadd+0x6d2>
 800168e:	4665      	mov	r5, ip
 8001690:	001e      	movs	r6, r3
 8001692:	4691      	mov	r9, r2
 8001694:	e63f      	b.n	8001316 <__aeabi_dadd+0x262>
 8001696:	1a81      	subs	r1, r0, r2
 8001698:	4688      	mov	r8, r1
 800169a:	45c1      	cmp	r9, r8
 800169c:	41a4      	sbcs	r4, r4
 800169e:	1af1      	subs	r1, r6, r3
 80016a0:	4264      	negs	r4, r4
 80016a2:	1b09      	subs	r1, r1, r4
 80016a4:	2480      	movs	r4, #128	@ 0x80
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	4221      	tst	r1, r4
 80016aa:	d077      	beq.n	800179c <__aeabi_dadd+0x6e8>
 80016ac:	1a10      	subs	r0, r2, r0
 80016ae:	4282      	cmp	r2, r0
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	0007      	movs	r7, r0
 80016b4:	1b9e      	subs	r6, r3, r6
 80016b6:	4252      	negs	r2, r2
 80016b8:	1ab6      	subs	r6, r6, r2
 80016ba:	4337      	orrs	r7, r6
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dadd+0x60c>
 80016be:	e0a0      	b.n	8001802 <__aeabi_dadd+0x74e>
 80016c0:	4665      	mov	r5, ip
 80016c2:	2400      	movs	r4, #0
 80016c4:	2600      	movs	r6, #0
 80016c6:	e63e      	b.n	8001346 <__aeabi_dadd+0x292>
 80016c8:	075f      	lsls	r7, r3, #29
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	4665      	mov	r5, ip
 80016ce:	4317      	orrs	r7, r2
 80016d0:	08d8      	lsrs	r0, r3, #3
 80016d2:	e653      	b.n	800137c <__aeabi_dadd+0x2c8>
 80016d4:	1881      	adds	r1, r0, r2
 80016d6:	4291      	cmp	r1, r2
 80016d8:	4192      	sbcs	r2, r2
 80016da:	18f0      	adds	r0, r6, r3
 80016dc:	4252      	negs	r2, r2
 80016de:	1880      	adds	r0, r0, r2
 80016e0:	0203      	lsls	r3, r0, #8
 80016e2:	d500      	bpl.n	80016e6 <__aeabi_dadd+0x632>
 80016e4:	e768      	b.n	80015b8 <__aeabi_dadd+0x504>
 80016e6:	0747      	lsls	r7, r0, #29
 80016e8:	08c9      	lsrs	r1, r1, #3
 80016ea:	430f      	orrs	r7, r1
 80016ec:	08c0      	lsrs	r0, r0, #3
 80016ee:	2101      	movs	r1, #1
 80016f0:	e617      	b.n	8001322 <__aeabi_dadd+0x26e>
 80016f2:	08d2      	lsrs	r2, r2, #3
 80016f4:	075f      	lsls	r7, r3, #29
 80016f6:	4317      	orrs	r7, r2
 80016f8:	08d8      	lsrs	r0, r3, #3
 80016fa:	e63f      	b.n	800137c <__aeabi_dadd+0x2c8>
 80016fc:	000c      	movs	r4, r1
 80016fe:	2600      	movs	r6, #0
 8001700:	2700      	movs	r7, #0
 8001702:	e620      	b.n	8001346 <__aeabi_dadd+0x292>
 8001704:	2900      	cmp	r1, #0
 8001706:	d156      	bne.n	80017b6 <__aeabi_dadd+0x702>
 8001708:	075f      	lsls	r7, r3, #29
 800170a:	08d2      	lsrs	r2, r2, #3
 800170c:	4317      	orrs	r7, r2
 800170e:	08d8      	lsrs	r0, r3, #3
 8001710:	e634      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001712:	000c      	movs	r4, r1
 8001714:	001e      	movs	r6, r3
 8001716:	08d0      	lsrs	r0, r2, #3
 8001718:	e629      	b.n	800136e <__aeabi_dadd+0x2ba>
 800171a:	08c1      	lsrs	r1, r0, #3
 800171c:	0770      	lsls	r0, r6, #29
 800171e:	4301      	orrs	r1, r0
 8001720:	08f0      	lsrs	r0, r6, #3
 8001722:	2f00      	cmp	r7, #0
 8001724:	d062      	beq.n	80017ec <__aeabi_dadd+0x738>
 8001726:	2480      	movs	r4, #128	@ 0x80
 8001728:	0324      	lsls	r4, r4, #12
 800172a:	4220      	tst	r0, r4
 800172c:	d007      	beq.n	800173e <__aeabi_dadd+0x68a>
 800172e:	08de      	lsrs	r6, r3, #3
 8001730:	4226      	tst	r6, r4
 8001732:	d104      	bne.n	800173e <__aeabi_dadd+0x68a>
 8001734:	4665      	mov	r5, ip
 8001736:	0030      	movs	r0, r6
 8001738:	08d1      	lsrs	r1, r2, #3
 800173a:	075b      	lsls	r3, r3, #29
 800173c:	4319      	orrs	r1, r3
 800173e:	0f4f      	lsrs	r7, r1, #29
 8001740:	00c9      	lsls	r1, r1, #3
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	077f      	lsls	r7, r7, #29
 8001746:	430f      	orrs	r7, r1
 8001748:	e618      	b.n	800137c <__aeabi_dadd+0x2c8>
 800174a:	000c      	movs	r4, r1
 800174c:	0030      	movs	r0, r6
 800174e:	3c20      	subs	r4, #32
 8001750:	40e0      	lsrs	r0, r4
 8001752:	4684      	mov	ip, r0
 8001754:	2920      	cmp	r1, #32
 8001756:	d005      	beq.n	8001764 <__aeabi_dadd+0x6b0>
 8001758:	2440      	movs	r4, #64	@ 0x40
 800175a:	1a61      	subs	r1, r4, r1
 800175c:	408e      	lsls	r6, r1
 800175e:	4649      	mov	r1, r9
 8001760:	4331      	orrs	r1, r6
 8001762:	4689      	mov	r9, r1
 8001764:	4648      	mov	r0, r9
 8001766:	1e41      	subs	r1, r0, #1
 8001768:	4188      	sbcs	r0, r1
 800176a:	4661      	mov	r1, ip
 800176c:	0007      	movs	r7, r0
 800176e:	430f      	orrs	r7, r1
 8001770:	e630      	b.n	80013d4 <__aeabi_dadd+0x320>
 8001772:	2120      	movs	r1, #32
 8001774:	2700      	movs	r7, #0
 8001776:	1a09      	subs	r1, r1, r0
 8001778:	e50e      	b.n	8001198 <__aeabi_dadd+0xe4>
 800177a:	001e      	movs	r6, r3
 800177c:	2f00      	cmp	r7, #0
 800177e:	d000      	beq.n	8001782 <__aeabi_dadd+0x6ce>
 8001780:	e522      	b.n	80011c8 <__aeabi_dadd+0x114>
 8001782:	2400      	movs	r4, #0
 8001784:	e758      	b.n	8001638 <__aeabi_dadd+0x584>
 8001786:	2500      	movs	r5, #0
 8001788:	2400      	movs	r4, #0
 800178a:	2600      	movs	r6, #0
 800178c:	e5db      	b.n	8001346 <__aeabi_dadd+0x292>
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	000007fe 	.word	0x000007fe
 8001794:	000007ff 	.word	0x000007ff
 8001798:	ff7fffff 	.word	0xff7fffff
 800179c:	4647      	mov	r7, r8
 800179e:	430f      	orrs	r7, r1
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x6f0>
 80017a2:	e747      	b.n	8001634 <__aeabi_dadd+0x580>
 80017a4:	000e      	movs	r6, r1
 80017a6:	46c1      	mov	r9, r8
 80017a8:	e5b5      	b.n	8001316 <__aeabi_dadd+0x262>
 80017aa:	08df      	lsrs	r7, r3, #3
 80017ac:	0764      	lsls	r4, r4, #29
 80017ae:	2102      	movs	r1, #2
 80017b0:	4327      	orrs	r7, r4
 80017b2:	0900      	lsrs	r0, r0, #4
 80017b4:	e5b5      	b.n	8001322 <__aeabi_dadd+0x26e>
 80017b6:	0019      	movs	r1, r3
 80017b8:	08c0      	lsrs	r0, r0, #3
 80017ba:	0777      	lsls	r7, r6, #29
 80017bc:	4307      	orrs	r7, r0
 80017be:	4311      	orrs	r1, r2
 80017c0:	08f0      	lsrs	r0, r6, #3
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dadd+0x714>
 80017c6:	e5d9      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0309      	lsls	r1, r1, #12
 80017cc:	4208      	tst	r0, r1
 80017ce:	d007      	beq.n	80017e0 <__aeabi_dadd+0x72c>
 80017d0:	08dc      	lsrs	r4, r3, #3
 80017d2:	420c      	tst	r4, r1
 80017d4:	d104      	bne.n	80017e0 <__aeabi_dadd+0x72c>
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	431a      	orrs	r2, r3
 80017dc:	0017      	movs	r7, r2
 80017de:	0020      	movs	r0, r4
 80017e0:	0f7b      	lsrs	r3, r7, #29
 80017e2:	00ff      	lsls	r7, r7, #3
 80017e4:	08ff      	lsrs	r7, r7, #3
 80017e6:	075b      	lsls	r3, r3, #29
 80017e8:	431f      	orrs	r7, r3
 80017ea:	e5c7      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017ec:	000f      	movs	r7, r1
 80017ee:	e5c5      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <__aeabi_dadd+0x788>)
 80017f2:	08d2      	lsrs	r2, r2, #3
 80017f4:	4033      	ands	r3, r6
 80017f6:	075f      	lsls	r7, r3, #29
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	2401      	movs	r4, #1
 80017fc:	4317      	orrs	r7, r2
 80017fe:	0b1e      	lsrs	r6, r3, #12
 8001800:	e5a1      	b.n	8001346 <__aeabi_dadd+0x292>
 8001802:	4226      	tst	r6, r4
 8001804:	d012      	beq.n	800182c <__aeabi_dadd+0x778>
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <__aeabi_dadd+0x788>)
 8001808:	4665      	mov	r5, ip
 800180a:	0002      	movs	r2, r0
 800180c:	2401      	movs	r4, #1
 800180e:	401e      	ands	r6, r3
 8001810:	e4e6      	b.n	80011e0 <__aeabi_dadd+0x12c>
 8001812:	0021      	movs	r1, r4
 8001814:	e585      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001816:	0017      	movs	r7, r2
 8001818:	e5a8      	b.n	800136c <__aeabi_dadd+0x2b8>
 800181a:	003a      	movs	r2, r7
 800181c:	e4d4      	b.n	80011c8 <__aeabi_dadd+0x114>
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	0764      	lsls	r4, r4, #29
 8001822:	431c      	orrs	r4, r3
 8001824:	0027      	movs	r7, r4
 8001826:	2102      	movs	r1, #2
 8001828:	0900      	lsrs	r0, r0, #4
 800182a:	e57a      	b.n	8001322 <__aeabi_dadd+0x26e>
 800182c:	08c0      	lsrs	r0, r0, #3
 800182e:	0777      	lsls	r7, r6, #29
 8001830:	4307      	orrs	r7, r0
 8001832:	4665      	mov	r5, ip
 8001834:	2100      	movs	r1, #0
 8001836:	08f0      	lsrs	r0, r6, #3
 8001838:	e573      	b.n	8001322 <__aeabi_dadd+0x26e>
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	ff7fffff 	.word	0xff7fffff

08001840 <__aeabi_ddiv>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	46de      	mov	lr, fp
 8001844:	4645      	mov	r5, r8
 8001846:	4657      	mov	r7, sl
 8001848:	464e      	mov	r6, r9
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	b087      	sub	sp, #28
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	030b      	lsls	r3, r1, #12
 8001854:	0b1b      	lsrs	r3, r3, #12
 8001856:	469b      	mov	fp, r3
 8001858:	0fca      	lsrs	r2, r1, #31
 800185a:	004b      	lsls	r3, r1, #1
 800185c:	0004      	movs	r4, r0
 800185e:	4680      	mov	r8, r0
 8001860:	0d5b      	lsrs	r3, r3, #21
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	d100      	bne.n	8001868 <__aeabi_ddiv+0x28>
 8001866:	e098      	b.n	800199a <__aeabi_ddiv+0x15a>
 8001868:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d037      	beq.n	80018de <__aeabi_ddiv+0x9e>
 800186e:	4659      	mov	r1, fp
 8001870:	0f42      	lsrs	r2, r0, #29
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	430a      	orrs	r2, r1
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0409      	lsls	r1, r1, #16
 800187a:	4311      	orrs	r1, r2
 800187c:	00c2      	lsls	r2, r0, #3
 800187e:	4690      	mov	r8, r2
 8001880:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <__aeabi_ddiv+0x220>)
 8001882:	4689      	mov	r9, r1
 8001884:	4692      	mov	sl, r2
 8001886:	449a      	add	sl, r3
 8001888:	2300      	movs	r3, #0
 800188a:	2400      	movs	r4, #0
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	9e00      	ldr	r6, [sp, #0]
 8001890:	9f01      	ldr	r7, [sp, #4]
 8001892:	033b      	lsls	r3, r7, #12
 8001894:	0b1b      	lsrs	r3, r3, #12
 8001896:	469b      	mov	fp, r3
 8001898:	007b      	lsls	r3, r7, #1
 800189a:	0030      	movs	r0, r6
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	0ffd      	lsrs	r5, r7, #31
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d059      	beq.n	8001958 <__aeabi_ddiv+0x118>
 80018a4:	4a6d      	ldr	r2, [pc, #436]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d048      	beq.n	800193c <__aeabi_ddiv+0xfc>
 80018aa:	4659      	mov	r1, fp
 80018ac:	0f72      	lsrs	r2, r6, #29
 80018ae:	00c9      	lsls	r1, r1, #3
 80018b0:	430a      	orrs	r2, r1
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	0409      	lsls	r1, r1, #16
 80018b6:	4311      	orrs	r1, r2
 80018b8:	468b      	mov	fp, r1
 80018ba:	4969      	ldr	r1, [pc, #420]	@ (8001a60 <__aeabi_ddiv+0x220>)
 80018bc:	00f2      	lsls	r2, r6, #3
 80018be:	468c      	mov	ip, r1
 80018c0:	4651      	mov	r1, sl
 80018c2:	4463      	add	r3, ip
 80018c4:	1acb      	subs	r3, r1, r3
 80018c6:	469a      	mov	sl, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	9e02      	ldr	r6, [sp, #8]
 80018cc:	406e      	eors	r6, r5
 80018ce:	b2f6      	uxtb	r6, r6
 80018d0:	2c0f      	cmp	r4, #15
 80018d2:	d900      	bls.n	80018d6 <__aeabi_ddiv+0x96>
 80018d4:	e0ce      	b.n	8001a74 <__aeabi_ddiv+0x234>
 80018d6:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <__aeabi_ddiv+0x224>)
 80018d8:	00a4      	lsls	r4, r4, #2
 80018da:	591b      	ldr	r3, [r3, r4]
 80018dc:	469f      	mov	pc, r3
 80018de:	465a      	mov	r2, fp
 80018e0:	4302      	orrs	r2, r0
 80018e2:	4691      	mov	r9, r2
 80018e4:	d000      	beq.n	80018e8 <__aeabi_ddiv+0xa8>
 80018e6:	e090      	b.n	8001a0a <__aeabi_ddiv+0x1ca>
 80018e8:	469a      	mov	sl, r3
 80018ea:	2302      	movs	r3, #2
 80018ec:	4690      	mov	r8, r2
 80018ee:	2408      	movs	r4, #8
 80018f0:	9303      	str	r3, [sp, #12]
 80018f2:	e7cc      	b.n	800188e <__aeabi_ddiv+0x4e>
 80018f4:	46cb      	mov	fp, r9
 80018f6:	4642      	mov	r2, r8
 80018f8:	9d02      	ldr	r5, [sp, #8]
 80018fa:	9903      	ldr	r1, [sp, #12]
 80018fc:	2902      	cmp	r1, #2
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0xc2>
 8001900:	e1de      	b.n	8001cc0 <__aeabi_ddiv+0x480>
 8001902:	2903      	cmp	r1, #3
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0xc8>
 8001906:	e08d      	b.n	8001a24 <__aeabi_ddiv+0x1e4>
 8001908:	2901      	cmp	r1, #1
 800190a:	d000      	beq.n	800190e <__aeabi_ddiv+0xce>
 800190c:	e179      	b.n	8001c02 <__aeabi_ddiv+0x3c2>
 800190e:	002e      	movs	r6, r5
 8001910:	2200      	movs	r2, #0
 8001912:	2300      	movs	r3, #0
 8001914:	2400      	movs	r4, #0
 8001916:	4690      	mov	r8, r2
 8001918:	051b      	lsls	r3, r3, #20
 800191a:	4323      	orrs	r3, r4
 800191c:	07f6      	lsls	r6, r6, #31
 800191e:	4333      	orrs	r3, r6
 8001920:	4640      	mov	r0, r8
 8001922:	0019      	movs	r1, r3
 8001924:	b007      	add	sp, #28
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	2200      	movs	r2, #0
 8001934:	2400      	movs	r4, #0
 8001936:	4690      	mov	r8, r2
 8001938:	4b48      	ldr	r3, [pc, #288]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 800193a:	e7ed      	b.n	8001918 <__aeabi_ddiv+0xd8>
 800193c:	465a      	mov	r2, fp
 800193e:	9b00      	ldr	r3, [sp, #0]
 8001940:	431a      	orrs	r2, r3
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_ddiv+0x228>)
 8001944:	469c      	mov	ip, r3
 8001946:	44e2      	add	sl, ip
 8001948:	2a00      	cmp	r2, #0
 800194a:	d159      	bne.n	8001a00 <__aeabi_ddiv+0x1c0>
 800194c:	2302      	movs	r3, #2
 800194e:	431c      	orrs	r4, r3
 8001950:	2300      	movs	r3, #0
 8001952:	2102      	movs	r1, #2
 8001954:	469b      	mov	fp, r3
 8001956:	e7b8      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001958:	465a      	mov	r2, fp
 800195a:	9b00      	ldr	r3, [sp, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	d049      	beq.n	80019f4 <__aeabi_ddiv+0x1b4>
 8001960:	465b      	mov	r3, fp
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_ddiv+0x128>
 8001966:	e19c      	b.n	8001ca2 <__aeabi_ddiv+0x462>
 8001968:	4658      	mov	r0, fp
 800196a:	f001 fc0d 	bl	8003188 <__clzsi2>
 800196e:	0002      	movs	r2, r0
 8001970:	0003      	movs	r3, r0
 8001972:	3a0b      	subs	r2, #11
 8001974:	271d      	movs	r7, #29
 8001976:	9e00      	ldr	r6, [sp, #0]
 8001978:	1aba      	subs	r2, r7, r2
 800197a:	0019      	movs	r1, r3
 800197c:	4658      	mov	r0, fp
 800197e:	40d6      	lsrs	r6, r2
 8001980:	3908      	subs	r1, #8
 8001982:	4088      	lsls	r0, r1
 8001984:	0032      	movs	r2, r6
 8001986:	4302      	orrs	r2, r0
 8001988:	4693      	mov	fp, r2
 800198a:	9a00      	ldr	r2, [sp, #0]
 800198c:	408a      	lsls	r2, r1
 800198e:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <__aeabi_ddiv+0x22c>)
 8001990:	4453      	add	r3, sl
 8001992:	468a      	mov	sl, r1
 8001994:	2100      	movs	r1, #0
 8001996:	449a      	add	sl, r3
 8001998:	e797      	b.n	80018ca <__aeabi_ddiv+0x8a>
 800199a:	465b      	mov	r3, fp
 800199c:	4303      	orrs	r3, r0
 800199e:	4699      	mov	r9, r3
 80019a0:	d021      	beq.n	80019e6 <__aeabi_ddiv+0x1a6>
 80019a2:	465b      	mov	r3, fp
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_ddiv+0x16a>
 80019a8:	e169      	b.n	8001c7e <__aeabi_ddiv+0x43e>
 80019aa:	4658      	mov	r0, fp
 80019ac:	f001 fbec 	bl	8003188 <__clzsi2>
 80019b0:	230b      	movs	r3, #11
 80019b2:	425b      	negs	r3, r3
 80019b4:	469c      	mov	ip, r3
 80019b6:	0002      	movs	r2, r0
 80019b8:	4484      	add	ip, r0
 80019ba:	4666      	mov	r6, ip
 80019bc:	231d      	movs	r3, #29
 80019be:	1b9b      	subs	r3, r3, r6
 80019c0:	0026      	movs	r6, r4
 80019c2:	0011      	movs	r1, r2
 80019c4:	4658      	mov	r0, fp
 80019c6:	40de      	lsrs	r6, r3
 80019c8:	3908      	subs	r1, #8
 80019ca:	4088      	lsls	r0, r1
 80019cc:	0033      	movs	r3, r6
 80019ce:	4303      	orrs	r3, r0
 80019d0:	4699      	mov	r9, r3
 80019d2:	0023      	movs	r3, r4
 80019d4:	408b      	lsls	r3, r1
 80019d6:	4698      	mov	r8, r3
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <__aeabi_ddiv+0x230>)
 80019da:	2400      	movs	r4, #0
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	469a      	mov	sl, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	e753      	b.n	800188e <__aeabi_ddiv+0x4e>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4698      	mov	r8, r3
 80019ea:	469a      	mov	sl, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	2404      	movs	r4, #4
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	e74c      	b.n	800188e <__aeabi_ddiv+0x4e>
 80019f4:	2301      	movs	r3, #1
 80019f6:	431c      	orrs	r4, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	2101      	movs	r1, #1
 80019fc:	469b      	mov	fp, r3
 80019fe:	e764      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001a00:	2303      	movs	r3, #3
 8001a02:	0032      	movs	r2, r6
 8001a04:	2103      	movs	r1, #3
 8001a06:	431c      	orrs	r4, r3
 8001a08:	e75f      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001a0a:	469a      	mov	sl, r3
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	46d9      	mov	r9, fp
 8001a10:	240c      	movs	r4, #12
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	e73b      	b.n	800188e <__aeabi_ddiv+0x4e>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2480      	movs	r4, #128	@ 0x80
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a20:	0324      	lsls	r4, r4, #12
 8001a22:	e779      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a24:	2480      	movs	r4, #128	@ 0x80
 8001a26:	465b      	mov	r3, fp
 8001a28:	0324      	lsls	r4, r4, #12
 8001a2a:	431c      	orrs	r4, r3
 8001a2c:	0324      	lsls	r4, r4, #12
 8001a2e:	002e      	movs	r6, r5
 8001a30:	4690      	mov	r8, r2
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	e76f      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a38:	2480      	movs	r4, #128	@ 0x80
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	0324      	lsls	r4, r4, #12
 8001a3e:	4223      	tst	r3, r4
 8001a40:	d002      	beq.n	8001a48 <__aeabi_ddiv+0x208>
 8001a42:	465b      	mov	r3, fp
 8001a44:	4223      	tst	r3, r4
 8001a46:	d0f0      	beq.n	8001a2a <__aeabi_ddiv+0x1ea>
 8001a48:	2480      	movs	r4, #128	@ 0x80
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	0324      	lsls	r4, r4, #12
 8001a4e:	431c      	orrs	r4, r3
 8001a50:	0324      	lsls	r4, r4, #12
 8001a52:	9e02      	ldr	r6, [sp, #8]
 8001a54:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a56:	0b24      	lsrs	r4, r4, #12
 8001a58:	e75e      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	fffffc01 	.word	0xfffffc01
 8001a64:	0800e378 	.word	0x0800e378
 8001a68:	fffff801 	.word	0xfffff801
 8001a6c:	000003f3 	.word	0x000003f3
 8001a70:	fffffc0d 	.word	0xfffffc0d
 8001a74:	45cb      	cmp	fp, r9
 8001a76:	d200      	bcs.n	8001a7a <__aeabi_ddiv+0x23a>
 8001a78:	e0f8      	b.n	8001c6c <__aeabi_ddiv+0x42c>
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_ddiv+0x23e>
 8001a7c:	e0f3      	b.n	8001c66 <__aeabi_ddiv+0x426>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	425b      	negs	r3, r3
 8001a82:	469c      	mov	ip, r3
 8001a84:	4644      	mov	r4, r8
 8001a86:	4648      	mov	r0, r9
 8001a88:	2500      	movs	r5, #0
 8001a8a:	44e2      	add	sl, ip
 8001a8c:	465b      	mov	r3, fp
 8001a8e:	0e17      	lsrs	r7, r2, #24
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	431f      	orrs	r7, r3
 8001a94:	0c19      	lsrs	r1, r3, #16
 8001a96:	043b      	lsls	r3, r7, #16
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	9700      	str	r7, [sp, #0]
 8001a9c:	0c1f      	lsrs	r7, r3, #16
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	9102      	str	r1, [sp, #8]
 8001aa2:	9703      	str	r7, [sp, #12]
 8001aa4:	f7fe fbce 	bl	8000244 <__aeabi_uidivmod>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	437a      	muls	r2, r7
 8001aac:	040b      	lsls	r3, r1, #16
 8001aae:	0c21      	lsrs	r1, r4, #16
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4319      	orrs	r1, r3
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d909      	bls.n	8001acc <__aeabi_ddiv+0x28c>
 8001ab8:	9f00      	ldr	r7, [sp, #0]
 8001aba:	2301      	movs	r3, #1
 8001abc:	46bc      	mov	ip, r7
 8001abe:	425b      	negs	r3, r3
 8001ac0:	4461      	add	r1, ip
 8001ac2:	469c      	mov	ip, r3
 8001ac4:	44e0      	add	r8, ip
 8001ac6:	428f      	cmp	r7, r1
 8001ac8:	d800      	bhi.n	8001acc <__aeabi_ddiv+0x28c>
 8001aca:	e15c      	b.n	8001d86 <__aeabi_ddiv+0x546>
 8001acc:	1a88      	subs	r0, r1, r2
 8001ace:	9902      	ldr	r1, [sp, #8]
 8001ad0:	f7fe fbb8 	bl	8000244 <__aeabi_uidivmod>
 8001ad4:	9a03      	ldr	r2, [sp, #12]
 8001ad6:	0424      	lsls	r4, r4, #16
 8001ad8:	4342      	muls	r2, r0
 8001ada:	0409      	lsls	r1, r1, #16
 8001adc:	0c24      	lsrs	r4, r4, #16
 8001ade:	0003      	movs	r3, r0
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	d906      	bls.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	468c      	mov	ip, r1
 8001aec:	4464      	add	r4, ip
 8001aee:	42a1      	cmp	r1, r4
 8001af0:	d800      	bhi.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001af2:	e142      	b.n	8001d7a <__aeabi_ddiv+0x53a>
 8001af4:	1aa0      	subs	r0, r4, r2
 8001af6:	4642      	mov	r2, r8
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	4693      	mov	fp, r2
 8001afe:	464b      	mov	r3, r9
 8001b00:	4659      	mov	r1, fp
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	001f      	movs	r7, r3
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	040b      	lsls	r3, r1, #16
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	0409      	lsls	r1, r1, #16
 8001b0e:	0c09      	lsrs	r1, r1, #16
 8001b10:	000c      	movs	r4, r1
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	435c      	muls	r4, r3
 8001b16:	0c12      	lsrs	r2, r2, #16
 8001b18:	437b      	muls	r3, r7
 8001b1a:	4688      	mov	r8, r1
 8001b1c:	4351      	muls	r1, r2
 8001b1e:	437a      	muls	r2, r7
 8001b20:	0c27      	lsrs	r7, r4, #16
 8001b22:	46bc      	mov	ip, r7
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	4463      	add	r3, ip
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	d903      	bls.n	8001b34 <__aeabi_ddiv+0x2f4>
 8001b2c:	2180      	movs	r1, #128	@ 0x80
 8001b2e:	0249      	lsls	r1, r1, #9
 8001b30:	468c      	mov	ip, r1
 8001b32:	4462      	add	r2, ip
 8001b34:	0c19      	lsrs	r1, r3, #16
 8001b36:	0424      	lsls	r4, r4, #16
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	0c24      	lsrs	r4, r4, #16
 8001b3c:	188a      	adds	r2, r1, r2
 8001b3e:	191c      	adds	r4, r3, r4
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d302      	bcc.n	8001b4a <__aeabi_ddiv+0x30a>
 8001b44:	d116      	bne.n	8001b74 <__aeabi_ddiv+0x334>
 8001b46:	42a5      	cmp	r5, r4
 8001b48:	d214      	bcs.n	8001b74 <__aeabi_ddiv+0x334>
 8001b4a:	465b      	mov	r3, fp
 8001b4c:	9f00      	ldr	r7, [sp, #0]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	444d      	add	r5, r9
 8001b52:	9305      	str	r3, [sp, #20]
 8001b54:	454d      	cmp	r5, r9
 8001b56:	419b      	sbcs	r3, r3
 8001b58:	46bc      	mov	ip, r7
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	4463      	add	r3, ip
 8001b5e:	18c0      	adds	r0, r0, r3
 8001b60:	4287      	cmp	r7, r0
 8001b62:	d300      	bcc.n	8001b66 <__aeabi_ddiv+0x326>
 8001b64:	e102      	b.n	8001d6c <__aeabi_ddiv+0x52c>
 8001b66:	4282      	cmp	r2, r0
 8001b68:	d900      	bls.n	8001b6c <__aeabi_ddiv+0x32c>
 8001b6a:	e129      	b.n	8001dc0 <__aeabi_ddiv+0x580>
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x330>
 8001b6e:	e124      	b.n	8001dba <__aeabi_ddiv+0x57a>
 8001b70:	9b05      	ldr	r3, [sp, #20]
 8001b72:	469b      	mov	fp, r3
 8001b74:	1b2c      	subs	r4, r5, r4
 8001b76:	42a5      	cmp	r5, r4
 8001b78:	41ad      	sbcs	r5, r5
 8001b7a:	9b00      	ldr	r3, [sp, #0]
 8001b7c:	1a80      	subs	r0, r0, r2
 8001b7e:	426d      	negs	r5, r5
 8001b80:	1b40      	subs	r0, r0, r5
 8001b82:	4283      	cmp	r3, r0
 8001b84:	d100      	bne.n	8001b88 <__aeabi_ddiv+0x348>
 8001b86:	e10f      	b.n	8001da8 <__aeabi_ddiv+0x568>
 8001b88:	9902      	ldr	r1, [sp, #8]
 8001b8a:	f7fe fb5b 	bl	8000244 <__aeabi_uidivmod>
 8001b8e:	9a03      	ldr	r2, [sp, #12]
 8001b90:	040b      	lsls	r3, r1, #16
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c21      	lsrs	r1, r4, #16
 8001b96:	0005      	movs	r5, r0
 8001b98:	4319      	orrs	r1, r3
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d900      	bls.n	8001ba0 <__aeabi_ddiv+0x360>
 8001b9e:	e0cb      	b.n	8001d38 <__aeabi_ddiv+0x4f8>
 8001ba0:	1a88      	subs	r0, r1, r2
 8001ba2:	9902      	ldr	r1, [sp, #8]
 8001ba4:	f7fe fb4e 	bl	8000244 <__aeabi_uidivmod>
 8001ba8:	9a03      	ldr	r2, [sp, #12]
 8001baa:	0424      	lsls	r4, r4, #16
 8001bac:	4342      	muls	r2, r0
 8001bae:	0409      	lsls	r1, r1, #16
 8001bb0:	0c24      	lsrs	r4, r4, #16
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	430c      	orrs	r4, r1
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d900      	bls.n	8001bbc <__aeabi_ddiv+0x37c>
 8001bba:	e0ca      	b.n	8001d52 <__aeabi_ddiv+0x512>
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	1aa4      	subs	r4, r4, r2
 8001bc0:	042a      	lsls	r2, r5, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	9f04      	ldr	r7, [sp, #16]
 8001bc6:	0413      	lsls	r3, r2, #16
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	4359      	muls	r1, r3
 8001bcc:	4640      	mov	r0, r8
 8001bce:	437b      	muls	r3, r7
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	4368      	muls	r0, r5
 8001bd6:	0c0b      	lsrs	r3, r1, #16
 8001bd8:	4484      	add	ip, r0
 8001bda:	4463      	add	r3, ip
 8001bdc:	437d      	muls	r5, r7
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d903      	bls.n	8001bea <__aeabi_ddiv+0x3aa>
 8001be2:	2080      	movs	r0, #128	@ 0x80
 8001be4:	0240      	lsls	r0, r0, #9
 8001be6:	4684      	mov	ip, r0
 8001be8:	4465      	add	r5, ip
 8001bea:	0c18      	lsrs	r0, r3, #16
 8001bec:	0409      	lsls	r1, r1, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c09      	lsrs	r1, r1, #16
 8001bf2:	1940      	adds	r0, r0, r5
 8001bf4:	185b      	adds	r3, r3, r1
 8001bf6:	4284      	cmp	r4, r0
 8001bf8:	d327      	bcc.n	8001c4a <__aeabi_ddiv+0x40a>
 8001bfa:	d023      	beq.n	8001c44 <__aeabi_ddiv+0x404>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	0035      	movs	r5, r6
 8001c00:	431a      	orrs	r2, r3
 8001c02:	4b94      	ldr	r3, [pc, #592]	@ (8001e54 <__aeabi_ddiv+0x614>)
 8001c04:	4453      	add	r3, sl
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dd60      	ble.n	8001ccc <__aeabi_ddiv+0x48c>
 8001c0a:	0751      	lsls	r1, r2, #29
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_ddiv+0x3d0>
 8001c0e:	e086      	b.n	8001d1e <__aeabi_ddiv+0x4de>
 8001c10:	002e      	movs	r6, r5
 8001c12:	08d1      	lsrs	r1, r2, #3
 8001c14:	465a      	mov	r2, fp
 8001c16:	01d2      	lsls	r2, r2, #7
 8001c18:	d506      	bpl.n	8001c28 <__aeabi_ddiv+0x3e8>
 8001c1a:	465a      	mov	r2, fp
 8001c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e58 <__aeabi_ddiv+0x618>)
 8001c1e:	401a      	ands	r2, r3
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	4693      	mov	fp, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4453      	add	r3, sl
 8001c28:	4a8c      	ldr	r2, [pc, #560]	@ (8001e5c <__aeabi_ddiv+0x61c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dd00      	ble.n	8001c30 <__aeabi_ddiv+0x3f0>
 8001c2e:	e680      	b.n	8001932 <__aeabi_ddiv+0xf2>
 8001c30:	465a      	mov	r2, fp
 8001c32:	0752      	lsls	r2, r2, #29
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4690      	mov	r8, r2
 8001c38:	465a      	mov	r2, fp
 8001c3a:	055b      	lsls	r3, r3, #21
 8001c3c:	0254      	lsls	r4, r2, #9
 8001c3e:	0b24      	lsrs	r4, r4, #12
 8001c40:	0d5b      	lsrs	r3, r3, #21
 8001c42:	e669      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001c44:	0035      	movs	r5, r6
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0db      	beq.n	8001c02 <__aeabi_ddiv+0x3c2>
 8001c4a:	9d00      	ldr	r5, [sp, #0]
 8001c4c:	1e51      	subs	r1, r2, #1
 8001c4e:	46ac      	mov	ip, r5
 8001c50:	4464      	add	r4, ip
 8001c52:	42ac      	cmp	r4, r5
 8001c54:	d200      	bcs.n	8001c58 <__aeabi_ddiv+0x418>
 8001c56:	e09e      	b.n	8001d96 <__aeabi_ddiv+0x556>
 8001c58:	4284      	cmp	r4, r0
 8001c5a:	d200      	bcs.n	8001c5e <__aeabi_ddiv+0x41e>
 8001c5c:	e0e1      	b.n	8001e22 <__aeabi_ddiv+0x5e2>
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_ddiv+0x422>
 8001c60:	e0ee      	b.n	8001e40 <__aeabi_ddiv+0x600>
 8001c62:	000a      	movs	r2, r1
 8001c64:	e7ca      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001c66:	4542      	cmp	r2, r8
 8001c68:	d900      	bls.n	8001c6c <__aeabi_ddiv+0x42c>
 8001c6a:	e708      	b.n	8001a7e <__aeabi_ddiv+0x23e>
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	07dc      	lsls	r4, r3, #31
 8001c70:	0858      	lsrs	r0, r3, #1
 8001c72:	4643      	mov	r3, r8
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	431c      	orrs	r4, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	07dd      	lsls	r5, r3, #31
 8001c7c:	e706      	b.n	8001a8c <__aeabi_ddiv+0x24c>
 8001c7e:	f001 fa83 	bl	8003188 <__clzsi2>
 8001c82:	2315      	movs	r3, #21
 8001c84:	469c      	mov	ip, r3
 8001c86:	4484      	add	ip, r0
 8001c88:	0002      	movs	r2, r0
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	3220      	adds	r2, #32
 8001c8e:	2b1c      	cmp	r3, #28
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_ddiv+0x454>
 8001c92:	e692      	b.n	80019ba <__aeabi_ddiv+0x17a>
 8001c94:	0023      	movs	r3, r4
 8001c96:	3808      	subs	r0, #8
 8001c98:	4083      	lsls	r3, r0
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	e69a      	b.n	80019d8 <__aeabi_ddiv+0x198>
 8001ca2:	f001 fa71 	bl	8003188 <__clzsi2>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	0003      	movs	r3, r0
 8001caa:	3215      	adds	r2, #21
 8001cac:	3320      	adds	r3, #32
 8001cae:	2a1c      	cmp	r2, #28
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_ddiv+0x474>
 8001cb2:	e65f      	b.n	8001974 <__aeabi_ddiv+0x134>
 8001cb4:	9900      	ldr	r1, [sp, #0]
 8001cb6:	3808      	subs	r0, #8
 8001cb8:	4081      	lsls	r1, r0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	468b      	mov	fp, r1
 8001cbe:	e666      	b.n	800198e <__aeabi_ddiv+0x14e>
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4b65      	ldr	r3, [pc, #404]	@ (8001e60 <__aeabi_ddiv+0x620>)
 8001cca:	e625      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001ccc:	002e      	movs	r6, r5
 8001cce:	2101      	movs	r1, #1
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	2938      	cmp	r1, #56	@ 0x38
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_ddiv+0x498>
 8001cd6:	e61b      	b.n	8001910 <__aeabi_ddiv+0xd0>
 8001cd8:	291f      	cmp	r1, #31
 8001cda:	dc7e      	bgt.n	8001dda <__aeabi_ddiv+0x59a>
 8001cdc:	4861      	ldr	r0, [pc, #388]	@ (8001e64 <__aeabi_ddiv+0x624>)
 8001cde:	0014      	movs	r4, r2
 8001ce0:	4450      	add	r0, sl
 8001ce2:	465b      	mov	r3, fp
 8001ce4:	4082      	lsls	r2, r0
 8001ce6:	4083      	lsls	r3, r0
 8001ce8:	40cc      	lsrs	r4, r1
 8001cea:	1e50      	subs	r0, r2, #1
 8001cec:	4182      	sbcs	r2, r0
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	465b      	mov	r3, fp
 8001cf4:	40cb      	lsrs	r3, r1
 8001cf6:	0751      	lsls	r1, r2, #29
 8001cf8:	d009      	beq.n	8001d0e <__aeabi_ddiv+0x4ce>
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	4011      	ands	r1, r2
 8001cfe:	2904      	cmp	r1, #4
 8001d00:	d005      	beq.n	8001d0e <__aeabi_ddiv+0x4ce>
 8001d02:	1d11      	adds	r1, r2, #4
 8001d04:	4291      	cmp	r1, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	0219      	lsls	r1, r3, #8
 8001d10:	d400      	bmi.n	8001d14 <__aeabi_ddiv+0x4d4>
 8001d12:	e09b      	b.n	8001e4c <__aeabi_ddiv+0x60c>
 8001d14:	2200      	movs	r2, #0
 8001d16:	2301      	movs	r3, #1
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	e5fc      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001d1e:	210f      	movs	r1, #15
 8001d20:	4011      	ands	r1, r2
 8001d22:	2904      	cmp	r1, #4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x4e8>
 8001d26:	e773      	b.n	8001c10 <__aeabi_ddiv+0x3d0>
 8001d28:	1d11      	adds	r1, r2, #4
 8001d2a:	4291      	cmp	r1, r2
 8001d2c:	4192      	sbcs	r2, r2
 8001d2e:	4252      	negs	r2, r2
 8001d30:	002e      	movs	r6, r5
 8001d32:	08c9      	lsrs	r1, r1, #3
 8001d34:	4493      	add	fp, r2
 8001d36:	e76d      	b.n	8001c14 <__aeabi_ddiv+0x3d4>
 8001d38:	9b00      	ldr	r3, [sp, #0]
 8001d3a:	3d01      	subs	r5, #1
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	4461      	add	r1, ip
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d900      	bls.n	8001d46 <__aeabi_ddiv+0x506>
 8001d44:	e72c      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d46:	428a      	cmp	r2, r1
 8001d48:	d800      	bhi.n	8001d4c <__aeabi_ddiv+0x50c>
 8001d4a:	e729      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d4c:	1e85      	subs	r5, r0, #2
 8001d4e:	4461      	add	r1, ip
 8001d50:	e726      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d52:	9900      	ldr	r1, [sp, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	468c      	mov	ip, r1
 8001d58:	4464      	add	r4, ip
 8001d5a:	42a1      	cmp	r1, r4
 8001d5c:	d900      	bls.n	8001d60 <__aeabi_ddiv+0x520>
 8001d5e:	e72d      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d60:	42a2      	cmp	r2, r4
 8001d62:	d800      	bhi.n	8001d66 <__aeabi_ddiv+0x526>
 8001d64:	e72a      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d66:	1e83      	subs	r3, r0, #2
 8001d68:	4464      	add	r4, ip
 8001d6a:	e727      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d6c:	4287      	cmp	r7, r0
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_ddiv+0x532>
 8001d70:	e6fe      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001d72:	45a9      	cmp	r9, r5
 8001d74:	d900      	bls.n	8001d78 <__aeabi_ddiv+0x538>
 8001d76:	e6fb      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001d78:	e6f5      	b.n	8001b66 <__aeabi_ddiv+0x326>
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x540>
 8001d7e:	e6b9      	b.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	4464      	add	r4, ip
 8001d84:	e6b6      	b.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001d86:	428a      	cmp	r2, r1
 8001d88:	d800      	bhi.n	8001d8c <__aeabi_ddiv+0x54c>
 8001d8a:	e69f      	b.n	8001acc <__aeabi_ddiv+0x28c>
 8001d8c:	46bc      	mov	ip, r7
 8001d8e:	1e83      	subs	r3, r0, #2
 8001d90:	4698      	mov	r8, r3
 8001d92:	4461      	add	r1, ip
 8001d94:	e69a      	b.n	8001acc <__aeabi_ddiv+0x28c>
 8001d96:	000a      	movs	r2, r1
 8001d98:	4284      	cmp	r4, r0
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_ddiv+0x55e>
 8001d9c:	e72e      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001d9e:	454b      	cmp	r3, r9
 8001da0:	d000      	beq.n	8001da4 <__aeabi_ddiv+0x564>
 8001da2:	e72b      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001da4:	0035      	movs	r5, r6
 8001da6:	e72c      	b.n	8001c02 <__aeabi_ddiv+0x3c2>
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <__aeabi_ddiv+0x614>)
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <__aeabi_ddiv+0x628>)
 8001dac:	4453      	add	r3, sl
 8001dae:	4592      	cmp	sl, r2
 8001db0:	db43      	blt.n	8001e3a <__aeabi_ddiv+0x5fa>
 8001db2:	2201      	movs	r2, #1
 8001db4:	2100      	movs	r1, #0
 8001db6:	4493      	add	fp, r2
 8001db8:	e72c      	b.n	8001c14 <__aeabi_ddiv+0x3d4>
 8001dba:	42ac      	cmp	r4, r5
 8001dbc:	d800      	bhi.n	8001dc0 <__aeabi_ddiv+0x580>
 8001dbe:	e6d7      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	469c      	mov	ip, r3
 8001dc6:	9900      	ldr	r1, [sp, #0]
 8001dc8:	444d      	add	r5, r9
 8001dca:	454d      	cmp	r5, r9
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	44e3      	add	fp, ip
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	4463      	add	r3, ip
 8001dd6:	18c0      	adds	r0, r0, r3
 8001dd8:	e6cc      	b.n	8001b74 <__aeabi_ddiv+0x334>
 8001dda:	201f      	movs	r0, #31
 8001ddc:	4240      	negs	r0, r0
 8001dde:	1ac3      	subs	r3, r0, r3
 8001de0:	4658      	mov	r0, fp
 8001de2:	40d8      	lsrs	r0, r3
 8001de4:	2920      	cmp	r1, #32
 8001de6:	d004      	beq.n	8001df2 <__aeabi_ddiv+0x5b2>
 8001de8:	4659      	mov	r1, fp
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <__aeabi_ddiv+0x62c>)
 8001dec:	4453      	add	r3, sl
 8001dee:	4099      	lsls	r1, r3
 8001df0:	430a      	orrs	r2, r1
 8001df2:	1e53      	subs	r3, r2, #1
 8001df4:	419a      	sbcs	r2, r3
 8001df6:	2307      	movs	r3, #7
 8001df8:	0019      	movs	r1, r3
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4011      	ands	r1, r2
 8001e00:	4213      	tst	r3, r2
 8001e02:	d009      	beq.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e04:	3308      	adds	r3, #8
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d01d      	beq.n	8001e48 <__aeabi_ddiv+0x608>
 8001e0c:	1d13      	adds	r3, r2, #4
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	4189      	sbcs	r1, r1
 8001e12:	001a      	movs	r2, r3
 8001e14:	4249      	negs	r1, r1
 8001e16:	0749      	lsls	r1, r1, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e57a      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001e22:	4649      	mov	r1, r9
 8001e24:	9f00      	ldr	r7, [sp, #0]
 8001e26:	004d      	lsls	r5, r1, #1
 8001e28:	454d      	cmp	r5, r9
 8001e2a:	4189      	sbcs	r1, r1
 8001e2c:	46bc      	mov	ip, r7
 8001e2e:	4249      	negs	r1, r1
 8001e30:	4461      	add	r1, ip
 8001e32:	46a9      	mov	r9, r5
 8001e34:	3a02      	subs	r2, #2
 8001e36:	1864      	adds	r4, r4, r1
 8001e38:	e7ae      	b.n	8001d98 <__aeabi_ddiv+0x558>
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4252      	negs	r2, r2
 8001e3e:	e746      	b.n	8001cce <__aeabi_ddiv+0x48e>
 8001e40:	4599      	cmp	r9, r3
 8001e42:	d3ee      	bcc.n	8001e22 <__aeabi_ddiv+0x5e2>
 8001e44:	000a      	movs	r2, r1
 8001e46:	e7aa      	b.n	8001d9e <__aeabi_ddiv+0x55e>
 8001e48:	2100      	movs	r1, #0
 8001e4a:	e7e5      	b.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e4c:	0759      	lsls	r1, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1c      	lsrs	r4, r3, #12
 8001e52:	e7e1      	b.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e54:	000003ff 	.word	0x000003ff
 8001e58:	feffffff 	.word	0xfeffffff
 8001e5c:	000007fe 	.word	0x000007fe
 8001e60:	000007ff 	.word	0x000007ff
 8001e64:	0000041e 	.word	0x0000041e
 8001e68:	fffffc02 	.word	0xfffffc02
 8001e6c:	0000043e 	.word	0x0000043e

08001e70 <__eqdf2>:
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	4657      	mov	r7, sl
 8001e74:	46de      	mov	lr, fp
 8001e76:	464e      	mov	r6, r9
 8001e78:	4645      	mov	r5, r8
 8001e7a:	b5e0      	push	{r5, r6, r7, lr}
 8001e7c:	000d      	movs	r5, r1
 8001e7e:	0004      	movs	r4, r0
 8001e80:	0fe8      	lsrs	r0, r5, #31
 8001e82:	4683      	mov	fp, r0
 8001e84:	0309      	lsls	r1, r1, #12
 8001e86:	0fd8      	lsrs	r0, r3, #31
 8001e88:	0b09      	lsrs	r1, r1, #12
 8001e8a:	4682      	mov	sl, r0
 8001e8c:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <__eqdf2+0x84>)
 8001e8e:	468c      	mov	ip, r1
 8001e90:	031f      	lsls	r7, r3, #12
 8001e92:	0069      	lsls	r1, r5, #1
 8001e94:	005e      	lsls	r6, r3, #1
 8001e96:	0d49      	lsrs	r1, r1, #21
 8001e98:	0b3f      	lsrs	r7, r7, #12
 8001e9a:	0d76      	lsrs	r6, r6, #21
 8001e9c:	4281      	cmp	r1, r0
 8001e9e:	d018      	beq.n	8001ed2 <__eqdf2+0x62>
 8001ea0:	4286      	cmp	r6, r0
 8001ea2:	d00f      	beq.n	8001ec4 <__eqdf2+0x54>
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	42b1      	cmp	r1, r6
 8001ea8:	d10d      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eaa:	45bc      	cmp	ip, r7
 8001eac:	d10b      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eae:	4294      	cmp	r4, r2
 8001eb0:	d109      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eb2:	45d3      	cmp	fp, sl
 8001eb4:	d01c      	beq.n	8001ef0 <__eqdf2+0x80>
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	d105      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eba:	4660      	mov	r0, ip
 8001ebc:	4320      	orrs	r0, r4
 8001ebe:	1e43      	subs	r3, r0, #1
 8001ec0:	4198      	sbcs	r0, r3
 8001ec2:	e000      	b.n	8001ec6 <__eqdf2+0x56>
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ec8:	46bb      	mov	fp, r7
 8001eca:	46b2      	mov	sl, r6
 8001ecc:	46a9      	mov	r9, r5
 8001ece:	46a0      	mov	r8, r4
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	428e      	cmp	r6, r1
 8001ed6:	d1f6      	bne.n	8001ec6 <__eqdf2+0x56>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	4339      	orrs	r1, r7
 8001edc:	000f      	movs	r7, r1
 8001ede:	4317      	orrs	r7, r2
 8001ee0:	4327      	orrs	r7, r4
 8001ee2:	d1f0      	bne.n	8001ec6 <__eqdf2+0x56>
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	4652      	mov	r2, sl
 8001ee8:	1a98      	subs	r0, r3, r2
 8001eea:	1e43      	subs	r3, r0, #1
 8001eec:	4198      	sbcs	r0, r3
 8001eee:	e7ea      	b.n	8001ec6 <__eqdf2+0x56>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e7e8      	b.n	8001ec6 <__eqdf2+0x56>
 8001ef4:	000007ff 	.word	0x000007ff

08001ef8 <__gedf2>:
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	4657      	mov	r7, sl
 8001efc:	464e      	mov	r6, r9
 8001efe:	4645      	mov	r5, r8
 8001f00:	46de      	mov	lr, fp
 8001f02:	b5e0      	push	{r5, r6, r7, lr}
 8001f04:	000d      	movs	r5, r1
 8001f06:	030e      	lsls	r6, r1, #12
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	0d49      	lsrs	r1, r1, #21
 8001f0c:	468a      	mov	sl, r1
 8001f0e:	0fdf      	lsrs	r7, r3, #31
 8001f10:	0fe9      	lsrs	r1, r5, #31
 8001f12:	46bc      	mov	ip, r7
 8001f14:	b083      	sub	sp, #12
 8001f16:	4f2f      	ldr	r7, [pc, #188]	@ (8001fd4 <__gedf2+0xdc>)
 8001f18:	0004      	movs	r4, r0
 8001f1a:	4680      	mov	r8, r0
 8001f1c:	9101      	str	r1, [sp, #4]
 8001f1e:	0058      	lsls	r0, r3, #1
 8001f20:	0319      	lsls	r1, r3, #12
 8001f22:	4691      	mov	r9, r2
 8001f24:	0b36      	lsrs	r6, r6, #12
 8001f26:	0b09      	lsrs	r1, r1, #12
 8001f28:	0d40      	lsrs	r0, r0, #21
 8001f2a:	45ba      	cmp	sl, r7
 8001f2c:	d01d      	beq.n	8001f6a <__gedf2+0x72>
 8001f2e:	42b8      	cmp	r0, r7
 8001f30:	d00d      	beq.n	8001f4e <__gedf2+0x56>
 8001f32:	4657      	mov	r7, sl
 8001f34:	2f00      	cmp	r7, #0
 8001f36:	d12a      	bne.n	8001f8e <__gedf2+0x96>
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d124      	bne.n	8001f88 <__gedf2+0x90>
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d036      	beq.n	8001fb0 <__gedf2+0xb8>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d141      	bne.n	8001fca <__gedf2+0xd2>
 8001f46:	4663      	mov	r3, ip
 8001f48:	0058      	lsls	r0, r3, #1
 8001f4a:	3801      	subs	r0, #1
 8001f4c:	e015      	b.n	8001f7a <__gedf2+0x82>
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	d138      	bne.n	8001fc4 <__gedf2+0xcc>
 8001f52:	4653      	mov	r3, sl
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <__gedf2+0x64>
 8001f58:	4326      	orrs	r6, r4
 8001f5a:	d0f4      	beq.n	8001f46 <__gedf2+0x4e>
 8001f5c:	9b01      	ldr	r3, [sp, #4]
 8001f5e:	4563      	cmp	r3, ip
 8001f60:	d107      	bne.n	8001f72 <__gedf2+0x7a>
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	0058      	lsls	r0, r3, #1
 8001f66:	3801      	subs	r0, #1
 8001f68:	e007      	b.n	8001f7a <__gedf2+0x82>
 8001f6a:	4326      	orrs	r6, r4
 8001f6c:	d12a      	bne.n	8001fc4 <__gedf2+0xcc>
 8001f6e:	4550      	cmp	r0, sl
 8001f70:	d021      	beq.n	8001fb6 <__gedf2+0xbe>
 8001f72:	2001      	movs	r0, #1
 8001f74:	9b01      	ldr	r3, [sp, #4]
 8001f76:	425f      	negs	r7, r3
 8001f78:	4338      	orrs	r0, r7
 8001f7a:	b003      	add	sp, #12
 8001f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7e:	46bb      	mov	fp, r7
 8001f80:	46b2      	mov	sl, r6
 8001f82:	46a9      	mov	r9, r5
 8001f84:	46a0      	mov	r8, r4
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	2c00      	cmp	r4, #0
 8001f8a:	d0dc      	beq.n	8001f46 <__gedf2+0x4e>
 8001f8c:	e7e6      	b.n	8001f5c <__gedf2+0x64>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0ef      	beq.n	8001f72 <__gedf2+0x7a>
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	4563      	cmp	r3, ip
 8001f96:	d1ec      	bne.n	8001f72 <__gedf2+0x7a>
 8001f98:	4582      	cmp	sl, r0
 8001f9a:	dcea      	bgt.n	8001f72 <__gedf2+0x7a>
 8001f9c:	dbe1      	blt.n	8001f62 <__gedf2+0x6a>
 8001f9e:	428e      	cmp	r6, r1
 8001fa0:	d8e7      	bhi.n	8001f72 <__gedf2+0x7a>
 8001fa2:	d1de      	bne.n	8001f62 <__gedf2+0x6a>
 8001fa4:	45c8      	cmp	r8, r9
 8001fa6:	d8e4      	bhi.n	8001f72 <__gedf2+0x7a>
 8001fa8:	2000      	movs	r0, #0
 8001faa:	45c8      	cmp	r8, r9
 8001fac:	d2e5      	bcs.n	8001f7a <__gedf2+0x82>
 8001fae:	e7d8      	b.n	8001f62 <__gedf2+0x6a>
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d0e2      	beq.n	8001f7a <__gedf2+0x82>
 8001fb4:	e7dd      	b.n	8001f72 <__gedf2+0x7a>
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	d104      	bne.n	8001fc4 <__gedf2+0xcc>
 8001fba:	9b01      	ldr	r3, [sp, #4]
 8001fbc:	4563      	cmp	r3, ip
 8001fbe:	d1d8      	bne.n	8001f72 <__gedf2+0x7a>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e7da      	b.n	8001f7a <__gedf2+0x82>
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	e7d7      	b.n	8001f7a <__gedf2+0x82>
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	4563      	cmp	r3, ip
 8001fce:	d0e6      	beq.n	8001f9e <__gedf2+0xa6>
 8001fd0:	e7cf      	b.n	8001f72 <__gedf2+0x7a>
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	000007ff 	.word	0x000007ff

08001fd8 <__ledf2>:
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	4657      	mov	r7, sl
 8001fdc:	464e      	mov	r6, r9
 8001fde:	4645      	mov	r5, r8
 8001fe0:	46de      	mov	lr, fp
 8001fe2:	b5e0      	push	{r5, r6, r7, lr}
 8001fe4:	000d      	movs	r5, r1
 8001fe6:	030e      	lsls	r6, r1, #12
 8001fe8:	0049      	lsls	r1, r1, #1
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	468a      	mov	sl, r1
 8001fee:	0fdf      	lsrs	r7, r3, #31
 8001ff0:	0fe9      	lsrs	r1, r5, #31
 8001ff2:	46bc      	mov	ip, r7
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	4f2e      	ldr	r7, [pc, #184]	@ (80020b0 <__ledf2+0xd8>)
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	4680      	mov	r8, r0
 8001ffc:	9101      	str	r1, [sp, #4]
 8001ffe:	0058      	lsls	r0, r3, #1
 8002000:	0319      	lsls	r1, r3, #12
 8002002:	4691      	mov	r9, r2
 8002004:	0b36      	lsrs	r6, r6, #12
 8002006:	0b09      	lsrs	r1, r1, #12
 8002008:	0d40      	lsrs	r0, r0, #21
 800200a:	45ba      	cmp	sl, r7
 800200c:	d01e      	beq.n	800204c <__ledf2+0x74>
 800200e:	42b8      	cmp	r0, r7
 8002010:	d00d      	beq.n	800202e <__ledf2+0x56>
 8002012:	4657      	mov	r7, sl
 8002014:	2f00      	cmp	r7, #0
 8002016:	d127      	bne.n	8002068 <__ledf2+0x90>
 8002018:	4334      	orrs	r4, r6
 800201a:	2800      	cmp	r0, #0
 800201c:	d133      	bne.n	8002086 <__ledf2+0xae>
 800201e:	430a      	orrs	r2, r1
 8002020:	d034      	beq.n	800208c <__ledf2+0xb4>
 8002022:	2c00      	cmp	r4, #0
 8002024:	d140      	bne.n	80020a8 <__ledf2+0xd0>
 8002026:	4663      	mov	r3, ip
 8002028:	0058      	lsls	r0, r3, #1
 800202a:	3801      	subs	r0, #1
 800202c:	e015      	b.n	800205a <__ledf2+0x82>
 800202e:	4311      	orrs	r1, r2
 8002030:	d112      	bne.n	8002058 <__ledf2+0x80>
 8002032:	4653      	mov	r3, sl
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <__ledf2+0x64>
 8002038:	4326      	orrs	r6, r4
 800203a:	d0f4      	beq.n	8002026 <__ledf2+0x4e>
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	4563      	cmp	r3, ip
 8002040:	d01d      	beq.n	800207e <__ledf2+0xa6>
 8002042:	2001      	movs	r0, #1
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	425f      	negs	r7, r3
 8002048:	4338      	orrs	r0, r7
 800204a:	e006      	b.n	800205a <__ledf2+0x82>
 800204c:	4326      	orrs	r6, r4
 800204e:	d103      	bne.n	8002058 <__ledf2+0x80>
 8002050:	4550      	cmp	r0, sl
 8002052:	d1f6      	bne.n	8002042 <__ledf2+0x6a>
 8002054:	4311      	orrs	r1, r2
 8002056:	d01c      	beq.n	8002092 <__ledf2+0xba>
 8002058:	2002      	movs	r0, #2
 800205a:	b003      	add	sp, #12
 800205c:	bcf0      	pop	{r4, r5, r6, r7}
 800205e:	46bb      	mov	fp, r7
 8002060:	46b2      	mov	sl, r6
 8002062:	46a9      	mov	r9, r5
 8002064:	46a0      	mov	r8, r4
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002068:	2800      	cmp	r0, #0
 800206a:	d0ea      	beq.n	8002042 <__ledf2+0x6a>
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	4563      	cmp	r3, ip
 8002070:	d1e7      	bne.n	8002042 <__ledf2+0x6a>
 8002072:	4582      	cmp	sl, r0
 8002074:	dce5      	bgt.n	8002042 <__ledf2+0x6a>
 8002076:	db02      	blt.n	800207e <__ledf2+0xa6>
 8002078:	428e      	cmp	r6, r1
 800207a:	d8e2      	bhi.n	8002042 <__ledf2+0x6a>
 800207c:	d00e      	beq.n	800209c <__ledf2+0xc4>
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	0058      	lsls	r0, r3, #1
 8002082:	3801      	subs	r0, #1
 8002084:	e7e9      	b.n	800205a <__ledf2+0x82>
 8002086:	2c00      	cmp	r4, #0
 8002088:	d0cd      	beq.n	8002026 <__ledf2+0x4e>
 800208a:	e7d7      	b.n	800203c <__ledf2+0x64>
 800208c:	2c00      	cmp	r4, #0
 800208e:	d0e4      	beq.n	800205a <__ledf2+0x82>
 8002090:	e7d7      	b.n	8002042 <__ledf2+0x6a>
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	2000      	movs	r0, #0
 8002096:	4563      	cmp	r3, ip
 8002098:	d0df      	beq.n	800205a <__ledf2+0x82>
 800209a:	e7d2      	b.n	8002042 <__ledf2+0x6a>
 800209c:	45c8      	cmp	r8, r9
 800209e:	d8d0      	bhi.n	8002042 <__ledf2+0x6a>
 80020a0:	2000      	movs	r0, #0
 80020a2:	45c8      	cmp	r8, r9
 80020a4:	d2d9      	bcs.n	800205a <__ledf2+0x82>
 80020a6:	e7ea      	b.n	800207e <__ledf2+0xa6>
 80020a8:	9b01      	ldr	r3, [sp, #4]
 80020aa:	4563      	cmp	r3, ip
 80020ac:	d0e4      	beq.n	8002078 <__ledf2+0xa0>
 80020ae:	e7c8      	b.n	8002042 <__ledf2+0x6a>
 80020b0:	000007ff 	.word	0x000007ff

080020b4 <__aeabi_dmul>:
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	4657      	mov	r7, sl
 80020b8:	464e      	mov	r6, r9
 80020ba:	46de      	mov	lr, fp
 80020bc:	4645      	mov	r5, r8
 80020be:	b5e0      	push	{r5, r6, r7, lr}
 80020c0:	001f      	movs	r7, r3
 80020c2:	030b      	lsls	r3, r1, #12
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	0016      	movs	r6, r2
 80020c8:	469a      	mov	sl, r3
 80020ca:	0fca      	lsrs	r2, r1, #31
 80020cc:	004b      	lsls	r3, r1, #1
 80020ce:	0004      	movs	r4, r0
 80020d0:	4691      	mov	r9, r2
 80020d2:	b085      	sub	sp, #20
 80020d4:	0d5b      	lsrs	r3, r3, #21
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x26>
 80020d8:	e1cf      	b.n	800247a <__aeabi_dmul+0x3c6>
 80020da:	4acd      	ldr	r2, [pc, #820]	@ (8002410 <__aeabi_dmul+0x35c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d055      	beq.n	800218c <__aeabi_dmul+0xd8>
 80020e0:	4651      	mov	r1, sl
 80020e2:	0f42      	lsrs	r2, r0, #29
 80020e4:	00c9      	lsls	r1, r1, #3
 80020e6:	430a      	orrs	r2, r1
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0409      	lsls	r1, r1, #16
 80020ec:	4311      	orrs	r1, r2
 80020ee:	00c2      	lsls	r2, r0, #3
 80020f0:	4690      	mov	r8, r2
 80020f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002414 <__aeabi_dmul+0x360>)
 80020f4:	468a      	mov	sl, r1
 80020f6:	4693      	mov	fp, r2
 80020f8:	449b      	add	fp, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	2500      	movs	r5, #0
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	033c      	lsls	r4, r7, #12
 8002102:	007b      	lsls	r3, r7, #1
 8002104:	0ffa      	lsrs	r2, r7, #31
 8002106:	9601      	str	r6, [sp, #4]
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	d100      	bne.n	8002112 <__aeabi_dmul+0x5e>
 8002110:	e188      	b.n	8002424 <__aeabi_dmul+0x370>
 8002112:	4abf      	ldr	r2, [pc, #764]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x66>
 8002118:	e092      	b.n	8002240 <__aeabi_dmul+0x18c>
 800211a:	4abe      	ldr	r2, [pc, #760]	@ (8002414 <__aeabi_dmul+0x360>)
 800211c:	4694      	mov	ip, r2
 800211e:	4463      	add	r3, ip
 8002120:	449b      	add	fp, r3
 8002122:	2d0a      	cmp	r5, #10
 8002124:	dc42      	bgt.n	80021ac <__aeabi_dmul+0xf8>
 8002126:	00e4      	lsls	r4, r4, #3
 8002128:	0f73      	lsrs	r3, r6, #29
 800212a:	4323      	orrs	r3, r4
 800212c:	2480      	movs	r4, #128	@ 0x80
 800212e:	4649      	mov	r1, r9
 8002130:	0424      	lsls	r4, r4, #16
 8002132:	431c      	orrs	r4, r3
 8002134:	00f3      	lsls	r3, r6, #3
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	2000      	movs	r0, #0
 800213c:	4059      	eors	r1, r3
 800213e:	b2cb      	uxtb	r3, r1
 8002140:	9303      	str	r3, [sp, #12]
 8002142:	2d02      	cmp	r5, #2
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dmul+0x94>
 8002146:	e094      	b.n	8002272 <__aeabi_dmul+0x1be>
 8002148:	2301      	movs	r3, #1
 800214a:	40ab      	lsls	r3, r5
 800214c:	001d      	movs	r5, r3
 800214e:	23a6      	movs	r3, #166	@ 0xa6
 8002150:	002a      	movs	r2, r5
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	401a      	ands	r2, r3
 8002156:	421d      	tst	r5, r3
 8002158:	d000      	beq.n	800215c <__aeabi_dmul+0xa8>
 800215a:	e229      	b.n	80025b0 <__aeabi_dmul+0x4fc>
 800215c:	2390      	movs	r3, #144	@ 0x90
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	421d      	tst	r5, r3
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0xb2>
 8002164:	e24d      	b.n	8002602 <__aeabi_dmul+0x54e>
 8002166:	2300      	movs	r3, #0
 8002168:	2480      	movs	r4, #128	@ 0x80
 800216a:	4699      	mov	r9, r3
 800216c:	0324      	lsls	r4, r4, #12
 800216e:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002170:	0010      	movs	r0, r2
 8002172:	464a      	mov	r2, r9
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	4323      	orrs	r3, r4
 8002178:	07d2      	lsls	r2, r2, #31
 800217a:	4313      	orrs	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	b005      	add	sp, #20
 8002180:	bcf0      	pop	{r4, r5, r6, r7}
 8002182:	46bb      	mov	fp, r7
 8002184:	46b2      	mov	sl, r6
 8002186:	46a9      	mov	r9, r5
 8002188:	46a0      	mov	r8, r4
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218c:	4652      	mov	r2, sl
 800218e:	4302      	orrs	r2, r0
 8002190:	4690      	mov	r8, r2
 8002192:	d000      	beq.n	8002196 <__aeabi_dmul+0xe2>
 8002194:	e1ac      	b.n	80024f0 <__aeabi_dmul+0x43c>
 8002196:	469b      	mov	fp, r3
 8002198:	2302      	movs	r3, #2
 800219a:	4692      	mov	sl, r2
 800219c:	2508      	movs	r5, #8
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	e7ae      	b.n	8002100 <__aeabi_dmul+0x4c>
 80021a2:	9b00      	ldr	r3, [sp, #0]
 80021a4:	46a2      	mov	sl, r4
 80021a6:	4699      	mov	r9, r3
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	4698      	mov	r8, r3
 80021ac:	9b02      	ldr	r3, [sp, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0x100>
 80021b2:	e1ca      	b.n	800254a <__aeabi_dmul+0x496>
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x106>
 80021b8:	e192      	b.n	80024e0 <__aeabi_dmul+0x42c>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d110      	bne.n	80021e0 <__aeabi_dmul+0x12c>
 80021be:	2300      	movs	r3, #0
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	e7d4      	b.n	8002170 <__aeabi_dmul+0xbc>
 80021c6:	2201      	movs	r2, #1
 80021c8:	087b      	lsrs	r3, r7, #1
 80021ca:	403a      	ands	r2, r7
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4652      	mov	r2, sl
 80021d0:	07d2      	lsls	r2, r2, #31
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4698      	mov	r8, r3
 80021d6:	4653      	mov	r3, sl
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	469a      	mov	sl, r3
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	4699      	mov	r9, r3
 80021e0:	465b      	mov	r3, fp
 80021e2:	1c58      	adds	r0, r3, #1
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	445b      	add	r3, fp
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dc00      	bgt.n	80021f0 <__aeabi_dmul+0x13c>
 80021ee:	e1b1      	b.n	8002554 <__aeabi_dmul+0x4a0>
 80021f0:	4642      	mov	r2, r8
 80021f2:	0752      	lsls	r2, r2, #29
 80021f4:	d00b      	beq.n	800220e <__aeabi_dmul+0x15a>
 80021f6:	220f      	movs	r2, #15
 80021f8:	4641      	mov	r1, r8
 80021fa:	400a      	ands	r2, r1
 80021fc:	2a04      	cmp	r2, #4
 80021fe:	d006      	beq.n	800220e <__aeabi_dmul+0x15a>
 8002200:	4642      	mov	r2, r8
 8002202:	1d11      	adds	r1, r2, #4
 8002204:	4541      	cmp	r1, r8
 8002206:	4192      	sbcs	r2, r2
 8002208:	4688      	mov	r8, r1
 800220a:	4252      	negs	r2, r2
 800220c:	4492      	add	sl, r2
 800220e:	4652      	mov	r2, sl
 8002210:	01d2      	lsls	r2, r2, #7
 8002212:	d506      	bpl.n	8002222 <__aeabi_dmul+0x16e>
 8002214:	4652      	mov	r2, sl
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <__aeabi_dmul+0x364>)
 8002218:	401a      	ands	r2, r3
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	4692      	mov	sl, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	18c3      	adds	r3, r0, r3
 8002222:	4a7e      	ldr	r2, [pc, #504]	@ (800241c <__aeabi_dmul+0x368>)
 8002224:	4293      	cmp	r3, r2
 8002226:	dd00      	ble.n	800222a <__aeabi_dmul+0x176>
 8002228:	e18f      	b.n	800254a <__aeabi_dmul+0x496>
 800222a:	4642      	mov	r2, r8
 800222c:	08d1      	lsrs	r1, r2, #3
 800222e:	4652      	mov	r2, sl
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	430a      	orrs	r2, r1
 8002234:	4651      	mov	r1, sl
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	024c      	lsls	r4, r1, #9
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	0d5b      	lsrs	r3, r3, #21
 800223e:	e797      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002240:	4b73      	ldr	r3, [pc, #460]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002242:	4326      	orrs	r6, r4
 8002244:	469c      	mov	ip, r3
 8002246:	44e3      	add	fp, ip
 8002248:	2e00      	cmp	r6, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x19a>
 800224c:	e16f      	b.n	800252e <__aeabi_dmul+0x47a>
 800224e:	2303      	movs	r3, #3
 8002250:	4649      	mov	r1, r9
 8002252:	431d      	orrs	r5, r3
 8002254:	9b00      	ldr	r3, [sp, #0]
 8002256:	4059      	eors	r1, r3
 8002258:	b2cb      	uxtb	r3, r1
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	2d0a      	cmp	r5, #10
 800225e:	dd00      	ble.n	8002262 <__aeabi_dmul+0x1ae>
 8002260:	e133      	b.n	80024ca <__aeabi_dmul+0x416>
 8002262:	2301      	movs	r3, #1
 8002264:	40ab      	lsls	r3, r5
 8002266:	001d      	movs	r5, r3
 8002268:	2303      	movs	r3, #3
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	2288      	movs	r2, #136	@ 0x88
 800226e:	422a      	tst	r2, r5
 8002270:	d197      	bne.n	80021a2 <__aeabi_dmul+0xee>
 8002272:	4642      	mov	r2, r8
 8002274:	4643      	mov	r3, r8
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	0c12      	lsrs	r2, r2, #16
 800227a:	0016      	movs	r6, r2
 800227c:	9801      	ldr	r0, [sp, #4]
 800227e:	0c1d      	lsrs	r5, r3, #16
 8002280:	0c03      	lsrs	r3, r0, #16
 8002282:	0400      	lsls	r0, r0, #16
 8002284:	0c00      	lsrs	r0, r0, #16
 8002286:	4346      	muls	r6, r0
 8002288:	46b4      	mov	ip, r6
 800228a:	001e      	movs	r6, r3
 800228c:	436e      	muls	r6, r5
 800228e:	9600      	str	r6, [sp, #0]
 8002290:	0016      	movs	r6, r2
 8002292:	0007      	movs	r7, r0
 8002294:	435e      	muls	r6, r3
 8002296:	4661      	mov	r1, ip
 8002298:	46b0      	mov	r8, r6
 800229a:	436f      	muls	r7, r5
 800229c:	0c0e      	lsrs	r6, r1, #16
 800229e:	44b8      	add	r8, r7
 80022a0:	4446      	add	r6, r8
 80022a2:	42b7      	cmp	r7, r6
 80022a4:	d905      	bls.n	80022b2 <__aeabi_dmul+0x1fe>
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	4688      	mov	r8, r1
 80022ac:	9f00      	ldr	r7, [sp, #0]
 80022ae:	4447      	add	r7, r8
 80022b0:	9700      	str	r7, [sp, #0]
 80022b2:	4661      	mov	r1, ip
 80022b4:	0409      	lsls	r1, r1, #16
 80022b6:	0c09      	lsrs	r1, r1, #16
 80022b8:	0c37      	lsrs	r7, r6, #16
 80022ba:	0436      	lsls	r6, r6, #16
 80022bc:	468c      	mov	ip, r1
 80022be:	0031      	movs	r1, r6
 80022c0:	4461      	add	r1, ip
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	0011      	movs	r1, r2
 80022c6:	0c26      	lsrs	r6, r4, #16
 80022c8:	0424      	lsls	r4, r4, #16
 80022ca:	0c24      	lsrs	r4, r4, #16
 80022cc:	4361      	muls	r1, r4
 80022ce:	468c      	mov	ip, r1
 80022d0:	0021      	movs	r1, r4
 80022d2:	4369      	muls	r1, r5
 80022d4:	4689      	mov	r9, r1
 80022d6:	4661      	mov	r1, ip
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4372      	muls	r2, r6
 80022de:	444a      	add	r2, r9
 80022e0:	4442      	add	r2, r8
 80022e2:	4375      	muls	r5, r6
 80022e4:	4591      	cmp	r9, r2
 80022e6:	d903      	bls.n	80022f0 <__aeabi_dmul+0x23c>
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	0249      	lsls	r1, r1, #9
 80022ec:	4688      	mov	r8, r1
 80022ee:	4445      	add	r5, r8
 80022f0:	0c11      	lsrs	r1, r2, #16
 80022f2:	4688      	mov	r8, r1
 80022f4:	4661      	mov	r1, ip
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468c      	mov	ip, r1
 80022fc:	0412      	lsls	r2, r2, #16
 80022fe:	4462      	add	r2, ip
 8002300:	18b9      	adds	r1, r7, r2
 8002302:	9102      	str	r1, [sp, #8]
 8002304:	4651      	mov	r1, sl
 8002306:	0c09      	lsrs	r1, r1, #16
 8002308:	468c      	mov	ip, r1
 800230a:	4651      	mov	r1, sl
 800230c:	040f      	lsls	r7, r1, #16
 800230e:	0c3f      	lsrs	r7, r7, #16
 8002310:	0039      	movs	r1, r7
 8002312:	4341      	muls	r1, r0
 8002314:	4445      	add	r5, r8
 8002316:	4688      	mov	r8, r1
 8002318:	4661      	mov	r1, ip
 800231a:	4341      	muls	r1, r0
 800231c:	468a      	mov	sl, r1
 800231e:	4641      	mov	r1, r8
 8002320:	4660      	mov	r0, ip
 8002322:	0c09      	lsrs	r1, r1, #16
 8002324:	4689      	mov	r9, r1
 8002326:	4358      	muls	r0, r3
 8002328:	437b      	muls	r3, r7
 800232a:	4453      	add	r3, sl
 800232c:	444b      	add	r3, r9
 800232e:	459a      	cmp	sl, r3
 8002330:	d903      	bls.n	800233a <__aeabi_dmul+0x286>
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	4689      	mov	r9, r1
 8002338:	4448      	add	r0, r9
 800233a:	0c19      	lsrs	r1, r3, #16
 800233c:	4689      	mov	r9, r1
 800233e:	4641      	mov	r1, r8
 8002340:	0409      	lsls	r1, r1, #16
 8002342:	0c09      	lsrs	r1, r1, #16
 8002344:	4688      	mov	r8, r1
 8002346:	0039      	movs	r1, r7
 8002348:	4361      	muls	r1, r4
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	4443      	add	r3, r8
 800234e:	4688      	mov	r8, r1
 8002350:	4661      	mov	r1, ip
 8002352:	434c      	muls	r4, r1
 8002354:	4371      	muls	r1, r6
 8002356:	468c      	mov	ip, r1
 8002358:	4641      	mov	r1, r8
 800235a:	4377      	muls	r7, r6
 800235c:	0c0e      	lsrs	r6, r1, #16
 800235e:	193f      	adds	r7, r7, r4
 8002360:	19f6      	adds	r6, r6, r7
 8002362:	4448      	add	r0, r9
 8002364:	42b4      	cmp	r4, r6
 8002366:	d903      	bls.n	8002370 <__aeabi_dmul+0x2bc>
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	4689      	mov	r9, r1
 800236e:	44cc      	add	ip, r9
 8002370:	9902      	ldr	r1, [sp, #8]
 8002372:	9f00      	ldr	r7, [sp, #0]
 8002374:	4689      	mov	r9, r1
 8002376:	0431      	lsls	r1, r6, #16
 8002378:	444f      	add	r7, r9
 800237a:	4689      	mov	r9, r1
 800237c:	4641      	mov	r1, r8
 800237e:	4297      	cmp	r7, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	040c      	lsls	r4, r1, #16
 8002384:	0c24      	lsrs	r4, r4, #16
 8002386:	444c      	add	r4, r9
 8002388:	18ff      	adds	r7, r7, r3
 800238a:	4252      	negs	r2, r2
 800238c:	1964      	adds	r4, r4, r5
 800238e:	18a1      	adds	r1, r4, r2
 8002390:	429f      	cmp	r7, r3
 8002392:	419b      	sbcs	r3, r3
 8002394:	4688      	mov	r8, r1
 8002396:	4682      	mov	sl, r0
 8002398:	425b      	negs	r3, r3
 800239a:	4699      	mov	r9, r3
 800239c:	4590      	cmp	r8, r2
 800239e:	4192      	sbcs	r2, r2
 80023a0:	42ac      	cmp	r4, r5
 80023a2:	41a4      	sbcs	r4, r4
 80023a4:	44c2      	add	sl, r8
 80023a6:	44d1      	add	r9, sl
 80023a8:	4252      	negs	r2, r2
 80023aa:	4264      	negs	r4, r4
 80023ac:	4314      	orrs	r4, r2
 80023ae:	4599      	cmp	r9, r3
 80023b0:	419b      	sbcs	r3, r3
 80023b2:	4582      	cmp	sl, r0
 80023b4:	4192      	sbcs	r2, r2
 80023b6:	425b      	negs	r3, r3
 80023b8:	4252      	negs	r2, r2
 80023ba:	4313      	orrs	r3, r2
 80023bc:	464a      	mov	r2, r9
 80023be:	0c36      	lsrs	r6, r6, #16
 80023c0:	19a4      	adds	r4, r4, r6
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	4463      	add	r3, ip
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	0dd2      	lsrs	r2, r2, #23
 80023ca:	431a      	orrs	r2, r3
 80023cc:	9901      	ldr	r1, [sp, #4]
 80023ce:	4692      	mov	sl, r2
 80023d0:	027a      	lsls	r2, r7, #9
 80023d2:	430a      	orrs	r2, r1
 80023d4:	1e50      	subs	r0, r2, #1
 80023d6:	4182      	sbcs	r2, r0
 80023d8:	0dff      	lsrs	r7, r7, #23
 80023da:	4317      	orrs	r7, r2
 80023dc:	464a      	mov	r2, r9
 80023de:	0252      	lsls	r2, r2, #9
 80023e0:	4317      	orrs	r7, r2
 80023e2:	46b8      	mov	r8, r7
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	d500      	bpl.n	80023ea <__aeabi_dmul+0x336>
 80023e8:	e6ed      	b.n	80021c6 <__aeabi_dmul+0x112>
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <__aeabi_dmul+0x36c>)
 80023ec:	9a03      	ldr	r2, [sp, #12]
 80023ee:	445b      	add	r3, fp
 80023f0:	4691      	mov	r9, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	dc00      	bgt.n	80023f8 <__aeabi_dmul+0x344>
 80023f6:	e0ac      	b.n	8002552 <__aeabi_dmul+0x49e>
 80023f8:	003a      	movs	r2, r7
 80023fa:	0752      	lsls	r2, r2, #29
 80023fc:	d100      	bne.n	8002400 <__aeabi_dmul+0x34c>
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0x16e>
 8002400:	220f      	movs	r2, #15
 8002402:	4658      	mov	r0, fp
 8002404:	403a      	ands	r2, r7
 8002406:	2a04      	cmp	r2, #4
 8002408:	d000      	beq.n	800240c <__aeabi_dmul+0x358>
 800240a:	e6f9      	b.n	8002200 <__aeabi_dmul+0x14c>
 800240c:	e709      	b.n	8002222 <__aeabi_dmul+0x16e>
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	000007ff 	.word	0x000007ff
 8002414:	fffffc01 	.word	0xfffffc01
 8002418:	feffffff 	.word	0xfeffffff
 800241c:	000007fe 	.word	0x000007fe
 8002420:	000003ff 	.word	0x000003ff
 8002424:	0022      	movs	r2, r4
 8002426:	4332      	orrs	r2, r6
 8002428:	d06f      	beq.n	800250a <__aeabi_dmul+0x456>
 800242a:	2c00      	cmp	r4, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x37c>
 800242e:	e0c2      	b.n	80025b6 <__aeabi_dmul+0x502>
 8002430:	0020      	movs	r0, r4
 8002432:	f000 fea9 	bl	8003188 <__clzsi2>
 8002436:	0002      	movs	r2, r0
 8002438:	0003      	movs	r3, r0
 800243a:	3a0b      	subs	r2, #11
 800243c:	201d      	movs	r0, #29
 800243e:	1a82      	subs	r2, r0, r2
 8002440:	0030      	movs	r0, r6
 8002442:	0019      	movs	r1, r3
 8002444:	40d0      	lsrs	r0, r2
 8002446:	3908      	subs	r1, #8
 8002448:	408c      	lsls	r4, r1
 800244a:	0002      	movs	r2, r0
 800244c:	4322      	orrs	r2, r4
 800244e:	0034      	movs	r4, r6
 8002450:	408c      	lsls	r4, r1
 8002452:	4659      	mov	r1, fp
 8002454:	1acb      	subs	r3, r1, r3
 8002456:	4986      	ldr	r1, [pc, #536]	@ (8002670 <__aeabi_dmul+0x5bc>)
 8002458:	468b      	mov	fp, r1
 800245a:	449b      	add	fp, r3
 800245c:	2d0a      	cmp	r5, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x3ae>
 8002460:	e6a4      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002462:	4649      	mov	r1, r9
 8002464:	9b00      	ldr	r3, [sp, #0]
 8002466:	9401      	str	r4, [sp, #4]
 8002468:	4059      	eors	r1, r3
 800246a:	b2cb      	uxtb	r3, r1
 800246c:	0014      	movs	r4, r2
 800246e:	2000      	movs	r0, #0
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	2d02      	cmp	r5, #2
 8002474:	dd00      	ble.n	8002478 <__aeabi_dmul+0x3c4>
 8002476:	e667      	b.n	8002148 <__aeabi_dmul+0x94>
 8002478:	e6fb      	b.n	8002272 <__aeabi_dmul+0x1be>
 800247a:	4653      	mov	r3, sl
 800247c:	4303      	orrs	r3, r0
 800247e:	4698      	mov	r8, r3
 8002480:	d03c      	beq.n	80024fc <__aeabi_dmul+0x448>
 8002482:	4653      	mov	r3, sl
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <__aeabi_dmul+0x3d6>
 8002488:	e0a3      	b.n	80025d2 <__aeabi_dmul+0x51e>
 800248a:	4650      	mov	r0, sl
 800248c:	f000 fe7c 	bl	8003188 <__clzsi2>
 8002490:	230b      	movs	r3, #11
 8002492:	425b      	negs	r3, r3
 8002494:	469c      	mov	ip, r3
 8002496:	0002      	movs	r2, r0
 8002498:	4484      	add	ip, r0
 800249a:	0011      	movs	r1, r2
 800249c:	4650      	mov	r0, sl
 800249e:	3908      	subs	r1, #8
 80024a0:	4088      	lsls	r0, r1
 80024a2:	231d      	movs	r3, #29
 80024a4:	4680      	mov	r8, r0
 80024a6:	4660      	mov	r0, ip
 80024a8:	1a1b      	subs	r3, r3, r0
 80024aa:	0020      	movs	r0, r4
 80024ac:	40d8      	lsrs	r0, r3
 80024ae:	0003      	movs	r3, r0
 80024b0:	4640      	mov	r0, r8
 80024b2:	4303      	orrs	r3, r0
 80024b4:	469a      	mov	sl, r3
 80024b6:	0023      	movs	r3, r4
 80024b8:	408b      	lsls	r3, r1
 80024ba:	4698      	mov	r8, r3
 80024bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <__aeabi_dmul+0x5bc>)
 80024be:	2500      	movs	r5, #0
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	469b      	mov	fp, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	e61a      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024ca:	2d0f      	cmp	r5, #15
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dmul+0x41c>
 80024ce:	e0c9      	b.n	8002664 <__aeabi_dmul+0x5b0>
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	4652      	mov	r2, sl
 80024d4:	031b      	lsls	r3, r3, #12
 80024d6:	421a      	tst	r2, r3
 80024d8:	d002      	beq.n	80024e0 <__aeabi_dmul+0x42c>
 80024da:	421c      	tst	r4, r3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dmul+0x42c>
 80024de:	e092      	b.n	8002606 <__aeabi_dmul+0x552>
 80024e0:	2480      	movs	r4, #128	@ 0x80
 80024e2:	4653      	mov	r3, sl
 80024e4:	0324      	lsls	r4, r4, #12
 80024e6:	431c      	orrs	r4, r3
 80024e8:	0324      	lsls	r4, r4, #12
 80024ea:	4642      	mov	r2, r8
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	e63e      	b.n	800216e <__aeabi_dmul+0xba>
 80024f0:	469b      	mov	fp, r3
 80024f2:	2303      	movs	r3, #3
 80024f4:	4680      	mov	r8, r0
 80024f6:	250c      	movs	r5, #12
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	e601      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024fc:	2300      	movs	r3, #0
 80024fe:	469a      	mov	sl, r3
 8002500:	469b      	mov	fp, r3
 8002502:	3301      	adds	r3, #1
 8002504:	2504      	movs	r5, #4
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	e5fa      	b.n	8002100 <__aeabi_dmul+0x4c>
 800250a:	2101      	movs	r1, #1
 800250c:	430d      	orrs	r5, r1
 800250e:	2d0a      	cmp	r5, #10
 8002510:	dd00      	ble.n	8002514 <__aeabi_dmul+0x460>
 8002512:	e64b      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002514:	4649      	mov	r1, r9
 8002516:	9800      	ldr	r0, [sp, #0]
 8002518:	4041      	eors	r1, r0
 800251a:	b2c9      	uxtb	r1, r1
 800251c:	9103      	str	r1, [sp, #12]
 800251e:	2d02      	cmp	r5, #2
 8002520:	dc00      	bgt.n	8002524 <__aeabi_dmul+0x470>
 8002522:	e096      	b.n	8002652 <__aeabi_dmul+0x59e>
 8002524:	2300      	movs	r3, #0
 8002526:	2400      	movs	r4, #0
 8002528:	2001      	movs	r0, #1
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	e60c      	b.n	8002148 <__aeabi_dmul+0x94>
 800252e:	4649      	mov	r1, r9
 8002530:	2302      	movs	r3, #2
 8002532:	9a00      	ldr	r2, [sp, #0]
 8002534:	432b      	orrs	r3, r5
 8002536:	4051      	eors	r1, r2
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	9203      	str	r2, [sp, #12]
 800253c:	2b0a      	cmp	r3, #10
 800253e:	dd00      	ble.n	8002542 <__aeabi_dmul+0x48e>
 8002540:	e634      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002542:	2d00      	cmp	r5, #0
 8002544:	d157      	bne.n	80025f6 <__aeabi_dmul+0x542>
 8002546:	9b03      	ldr	r3, [sp, #12]
 8002548:	4699      	mov	r9, r3
 800254a:	2400      	movs	r4, #0
 800254c:	2200      	movs	r2, #0
 800254e:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <__aeabi_dmul+0x5c0>)
 8002550:	e60e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002552:	4658      	mov	r0, fp
 8002554:	2101      	movs	r1, #1
 8002556:	1ac9      	subs	r1, r1, r3
 8002558:	2938      	cmp	r1, #56	@ 0x38
 800255a:	dd00      	ble.n	800255e <__aeabi_dmul+0x4aa>
 800255c:	e62f      	b.n	80021be <__aeabi_dmul+0x10a>
 800255e:	291f      	cmp	r1, #31
 8002560:	dd56      	ble.n	8002610 <__aeabi_dmul+0x55c>
 8002562:	221f      	movs	r2, #31
 8002564:	4654      	mov	r4, sl
 8002566:	4252      	negs	r2, r2
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	40dc      	lsrs	r4, r3
 800256c:	2920      	cmp	r1, #32
 800256e:	d007      	beq.n	8002580 <__aeabi_dmul+0x4cc>
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <__aeabi_dmul+0x5c4>)
 8002572:	4642      	mov	r2, r8
 8002574:	469c      	mov	ip, r3
 8002576:	4653      	mov	r3, sl
 8002578:	4460      	add	r0, ip
 800257a:	4083      	lsls	r3, r0
 800257c:	431a      	orrs	r2, r3
 800257e:	4690      	mov	r8, r2
 8002580:	4642      	mov	r2, r8
 8002582:	2107      	movs	r1, #7
 8002584:	1e53      	subs	r3, r2, #1
 8002586:	419a      	sbcs	r2, r3
 8002588:	000b      	movs	r3, r1
 800258a:	4322      	orrs	r2, r4
 800258c:	4013      	ands	r3, r2
 800258e:	2400      	movs	r4, #0
 8002590:	4211      	tst	r1, r2
 8002592:	d009      	beq.n	80025a8 <__aeabi_dmul+0x4f4>
 8002594:	230f      	movs	r3, #15
 8002596:	4013      	ands	r3, r2
 8002598:	2b04      	cmp	r3, #4
 800259a:	d05d      	beq.n	8002658 <__aeabi_dmul+0x5a4>
 800259c:	1d11      	adds	r1, r2, #4
 800259e:	4291      	cmp	r1, r2
 80025a0:	419b      	sbcs	r3, r3
 80025a2:	000a      	movs	r2, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	075b      	lsls	r3, r3, #29
 80025a8:	08d2      	lsrs	r2, r2, #3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	e5df      	b.n	8002170 <__aeabi_dmul+0xbc>
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4699      	mov	r9, r3
 80025b4:	e5fa      	b.n	80021ac <__aeabi_dmul+0xf8>
 80025b6:	9801      	ldr	r0, [sp, #4]
 80025b8:	f000 fde6 	bl	8003188 <__clzsi2>
 80025bc:	0002      	movs	r2, r0
 80025be:	0003      	movs	r3, r0
 80025c0:	3215      	adds	r2, #21
 80025c2:	3320      	adds	r3, #32
 80025c4:	2a1c      	cmp	r2, #28
 80025c6:	dc00      	bgt.n	80025ca <__aeabi_dmul+0x516>
 80025c8:	e738      	b.n	800243c <__aeabi_dmul+0x388>
 80025ca:	9a01      	ldr	r2, [sp, #4]
 80025cc:	3808      	subs	r0, #8
 80025ce:	4082      	lsls	r2, r0
 80025d0:	e73f      	b.n	8002452 <__aeabi_dmul+0x39e>
 80025d2:	f000 fdd9 	bl	8003188 <__clzsi2>
 80025d6:	2315      	movs	r3, #21
 80025d8:	469c      	mov	ip, r3
 80025da:	4484      	add	ip, r0
 80025dc:	0002      	movs	r2, r0
 80025de:	4663      	mov	r3, ip
 80025e0:	3220      	adds	r2, #32
 80025e2:	2b1c      	cmp	r3, #28
 80025e4:	dc00      	bgt.n	80025e8 <__aeabi_dmul+0x534>
 80025e6:	e758      	b.n	800249a <__aeabi_dmul+0x3e6>
 80025e8:	2300      	movs	r3, #0
 80025ea:	4698      	mov	r8, r3
 80025ec:	0023      	movs	r3, r4
 80025ee:	3808      	subs	r0, #8
 80025f0:	4083      	lsls	r3, r0
 80025f2:	469a      	mov	sl, r3
 80025f4:	e762      	b.n	80024bc <__aeabi_dmul+0x408>
 80025f6:	001d      	movs	r5, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	2400      	movs	r4, #0
 80025fc:	2002      	movs	r0, #2
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	e5a2      	b.n	8002148 <__aeabi_dmul+0x94>
 8002602:	9002      	str	r0, [sp, #8]
 8002604:	e632      	b.n	800226c <__aeabi_dmul+0x1b8>
 8002606:	431c      	orrs	r4, r3
 8002608:	9b00      	ldr	r3, [sp, #0]
 800260a:	9a01      	ldr	r2, [sp, #4]
 800260c:	4699      	mov	r9, r3
 800260e:	e5ae      	b.n	800216e <__aeabi_dmul+0xba>
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <__aeabi_dmul+0x5c8>)
 8002612:	4652      	mov	r2, sl
 8002614:	18c3      	adds	r3, r0, r3
 8002616:	4640      	mov	r0, r8
 8002618:	409a      	lsls	r2, r3
 800261a:	40c8      	lsrs	r0, r1
 800261c:	4302      	orrs	r2, r0
 800261e:	4640      	mov	r0, r8
 8002620:	4098      	lsls	r0, r3
 8002622:	0003      	movs	r3, r0
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	4183      	sbcs	r3, r0
 8002628:	4654      	mov	r4, sl
 800262a:	431a      	orrs	r2, r3
 800262c:	40cc      	lsrs	r4, r1
 800262e:	0753      	lsls	r3, r2, #29
 8002630:	d009      	beq.n	8002646 <__aeabi_dmul+0x592>
 8002632:	230f      	movs	r3, #15
 8002634:	4013      	ands	r3, r2
 8002636:	2b04      	cmp	r3, #4
 8002638:	d005      	beq.n	8002646 <__aeabi_dmul+0x592>
 800263a:	1d13      	adds	r3, r2, #4
 800263c:	4293      	cmp	r3, r2
 800263e:	4192      	sbcs	r2, r2
 8002640:	4252      	negs	r2, r2
 8002642:	18a4      	adds	r4, r4, r2
 8002644:	001a      	movs	r2, r3
 8002646:	0223      	lsls	r3, r4, #8
 8002648:	d508      	bpl.n	800265c <__aeabi_dmul+0x5a8>
 800264a:	2301      	movs	r3, #1
 800264c:	2400      	movs	r4, #0
 800264e:	2200      	movs	r2, #0
 8002650:	e58e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002652:	4689      	mov	r9, r1
 8002654:	2400      	movs	r4, #0
 8002656:	e58b      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002658:	2300      	movs	r3, #0
 800265a:	e7a5      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	0264      	lsls	r4, r4, #9
 8002660:	0b24      	lsrs	r4, r4, #12
 8002662:	e7a1      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 8002664:	9b00      	ldr	r3, [sp, #0]
 8002666:	46a2      	mov	sl, r4
 8002668:	4699      	mov	r9, r3
 800266a:	9b01      	ldr	r3, [sp, #4]
 800266c:	4698      	mov	r8, r3
 800266e:	e737      	b.n	80024e0 <__aeabi_dmul+0x42c>
 8002670:	fffffc0d 	.word	0xfffffc0d
 8002674:	000007ff 	.word	0x000007ff
 8002678:	0000043e 	.word	0x0000043e
 800267c:	0000041e 	.word	0x0000041e

08002680 <__aeabi_dsub>:
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	4657      	mov	r7, sl
 8002684:	464e      	mov	r6, r9
 8002686:	4645      	mov	r5, r8
 8002688:	46de      	mov	lr, fp
 800268a:	b5e0      	push	{r5, r6, r7, lr}
 800268c:	b083      	sub	sp, #12
 800268e:	9000      	str	r0, [sp, #0]
 8002690:	9101      	str	r1, [sp, #4]
 8002692:	030c      	lsls	r4, r1, #12
 8002694:	004d      	lsls	r5, r1, #1
 8002696:	0fce      	lsrs	r6, r1, #31
 8002698:	0a61      	lsrs	r1, r4, #9
 800269a:	9c00      	ldr	r4, [sp, #0]
 800269c:	005f      	lsls	r7, r3, #1
 800269e:	0f64      	lsrs	r4, r4, #29
 80026a0:	430c      	orrs	r4, r1
 80026a2:	9900      	ldr	r1, [sp, #0]
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	00c8      	lsls	r0, r1, #3
 80026aa:	0319      	lsls	r1, r3, #12
 80026ac:	0d7b      	lsrs	r3, r7, #21
 80026ae:	4699      	mov	r9, r3
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	4fcc      	ldr	r7, [pc, #816]	@ (80029e4 <__aeabi_dsub+0x364>)
 80026b4:	0fdb      	lsrs	r3, r3, #31
 80026b6:	469c      	mov	ip, r3
 80026b8:	0a4b      	lsrs	r3, r1, #9
 80026ba:	9900      	ldr	r1, [sp, #0]
 80026bc:	4680      	mov	r8, r0
 80026be:	0f49      	lsrs	r1, r1, #29
 80026c0:	4319      	orrs	r1, r3
 80026c2:	9b00      	ldr	r3, [sp, #0]
 80026c4:	468b      	mov	fp, r1
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	4692      	mov	sl, r2
 80026ca:	0d6d      	lsrs	r5, r5, #21
 80026cc:	45b9      	cmp	r9, r7
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x52>
 80026d0:	e0bf      	b.n	8002852 <__aeabi_dsub+0x1d2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	4661      	mov	r1, ip
 80026d6:	4059      	eors	r1, r3
 80026d8:	464b      	mov	r3, r9
 80026da:	468c      	mov	ip, r1
 80026dc:	1aeb      	subs	r3, r5, r3
 80026de:	428e      	cmp	r6, r1
 80026e0:	d075      	beq.n	80027ce <__aeabi_dsub+0x14e>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dc00      	bgt.n	80026e8 <__aeabi_dsub+0x68>
 80026e6:	e2a3      	b.n	8002c30 <__aeabi_dsub+0x5b0>
 80026e8:	4649      	mov	r1, r9
 80026ea:	2900      	cmp	r1, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x70>
 80026ee:	e0ce      	b.n	800288e <__aeabi_dsub+0x20e>
 80026f0:	42bd      	cmp	r5, r7
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dsub+0x76>
 80026f4:	e200      	b.n	8002af8 <__aeabi_dsub+0x478>
 80026f6:	2701      	movs	r7, #1
 80026f8:	2b38      	cmp	r3, #56	@ 0x38
 80026fa:	dc19      	bgt.n	8002730 <__aeabi_dsub+0xb0>
 80026fc:	2780      	movs	r7, #128	@ 0x80
 80026fe:	4659      	mov	r1, fp
 8002700:	043f      	lsls	r7, r7, #16
 8002702:	4339      	orrs	r1, r7
 8002704:	468b      	mov	fp, r1
 8002706:	2b1f      	cmp	r3, #31
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0x8c>
 800270a:	e1fa      	b.n	8002b02 <__aeabi_dsub+0x482>
 800270c:	2720      	movs	r7, #32
 800270e:	1af9      	subs	r1, r7, r3
 8002710:	468c      	mov	ip, r1
 8002712:	4659      	mov	r1, fp
 8002714:	4667      	mov	r7, ip
 8002716:	40b9      	lsls	r1, r7
 8002718:	000f      	movs	r7, r1
 800271a:	0011      	movs	r1, r2
 800271c:	40d9      	lsrs	r1, r3
 800271e:	430f      	orrs	r7, r1
 8002720:	4661      	mov	r1, ip
 8002722:	408a      	lsls	r2, r1
 8002724:	1e51      	subs	r1, r2, #1
 8002726:	418a      	sbcs	r2, r1
 8002728:	4659      	mov	r1, fp
 800272a:	40d9      	lsrs	r1, r3
 800272c:	4317      	orrs	r7, r2
 800272e:	1a64      	subs	r4, r4, r1
 8002730:	1bc7      	subs	r7, r0, r7
 8002732:	42b8      	cmp	r0, r7
 8002734:	4180      	sbcs	r0, r0
 8002736:	4240      	negs	r0, r0
 8002738:	1a24      	subs	r4, r4, r0
 800273a:	0223      	lsls	r3, r4, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0xc0>
 800273e:	e140      	b.n	80029c2 <__aeabi_dsub+0x342>
 8002740:	0264      	lsls	r4, r4, #9
 8002742:	0a64      	lsrs	r4, r4, #9
 8002744:	2c00      	cmp	r4, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0xca>
 8002748:	e154      	b.n	80029f4 <__aeabi_dsub+0x374>
 800274a:	0020      	movs	r0, r4
 800274c:	f000 fd1c 	bl	8003188 <__clzsi2>
 8002750:	0003      	movs	r3, r0
 8002752:	3b08      	subs	r3, #8
 8002754:	2120      	movs	r1, #32
 8002756:	0038      	movs	r0, r7
 8002758:	1aca      	subs	r2, r1, r3
 800275a:	40d0      	lsrs	r0, r2
 800275c:	409c      	lsls	r4, r3
 800275e:	0002      	movs	r2, r0
 8002760:	409f      	lsls	r7, r3
 8002762:	4322      	orrs	r2, r4
 8002764:	429d      	cmp	r5, r3
 8002766:	dd00      	ble.n	800276a <__aeabi_dsub+0xea>
 8002768:	e1a6      	b.n	8002ab8 <__aeabi_dsub+0x438>
 800276a:	1b58      	subs	r0, r3, r5
 800276c:	3001      	adds	r0, #1
 800276e:	1a09      	subs	r1, r1, r0
 8002770:	003c      	movs	r4, r7
 8002772:	408f      	lsls	r7, r1
 8002774:	40c4      	lsrs	r4, r0
 8002776:	1e7b      	subs	r3, r7, #1
 8002778:	419f      	sbcs	r7, r3
 800277a:	0013      	movs	r3, r2
 800277c:	408b      	lsls	r3, r1
 800277e:	4327      	orrs	r7, r4
 8002780:	431f      	orrs	r7, r3
 8002782:	40c2      	lsrs	r2, r0
 8002784:	003b      	movs	r3, r7
 8002786:	0014      	movs	r4, r2
 8002788:	2500      	movs	r5, #0
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x110>
 800278e:	e1f7      	b.n	8002b80 <__aeabi_dsub+0x500>
 8002790:	077b      	lsls	r3, r7, #29
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x116>
 8002794:	e377      	b.n	8002e86 <__aeabi_dsub+0x806>
 8002796:	230f      	movs	r3, #15
 8002798:	0038      	movs	r0, r7
 800279a:	403b      	ands	r3, r7
 800279c:	2b04      	cmp	r3, #4
 800279e:	d004      	beq.n	80027aa <__aeabi_dsub+0x12a>
 80027a0:	1d38      	adds	r0, r7, #4
 80027a2:	42b8      	cmp	r0, r7
 80027a4:	41bf      	sbcs	r7, r7
 80027a6:	427f      	negs	r7, r7
 80027a8:	19e4      	adds	r4, r4, r7
 80027aa:	0223      	lsls	r3, r4, #8
 80027ac:	d400      	bmi.n	80027b0 <__aeabi_dsub+0x130>
 80027ae:	e368      	b.n	8002e82 <__aeabi_dsub+0x802>
 80027b0:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <__aeabi_dsub+0x364>)
 80027b2:	3501      	adds	r5, #1
 80027b4:	429d      	cmp	r5, r3
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x13a>
 80027b8:	e0f4      	b.n	80029a4 <__aeabi_dsub+0x324>
 80027ba:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <__aeabi_dsub+0x368>)
 80027bc:	056d      	lsls	r5, r5, #21
 80027be:	401c      	ands	r4, r3
 80027c0:	0d6d      	lsrs	r5, r5, #21
 80027c2:	0767      	lsls	r7, r4, #29
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	0264      	lsls	r4, r4, #9
 80027c8:	4307      	orrs	r7, r0
 80027ca:	0b24      	lsrs	r4, r4, #12
 80027cc:	e0ec      	b.n	80029a8 <__aeabi_dsub+0x328>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dc00      	bgt.n	80027d4 <__aeabi_dsub+0x154>
 80027d2:	e329      	b.n	8002e28 <__aeabi_dsub+0x7a8>
 80027d4:	4649      	mov	r1, r9
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d000      	beq.n	80027dc <__aeabi_dsub+0x15c>
 80027da:	e0d6      	b.n	800298a <__aeabi_dsub+0x30a>
 80027dc:	4659      	mov	r1, fp
 80027de:	4311      	orrs	r1, r2
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x164>
 80027e2:	e12e      	b.n	8002a42 <__aeabi_dsub+0x3c2>
 80027e4:	1e59      	subs	r1, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x16c>
 80027ea:	e1e6      	b.n	8002bba <__aeabi_dsub+0x53a>
 80027ec:	42bb      	cmp	r3, r7
 80027ee:	d100      	bne.n	80027f2 <__aeabi_dsub+0x172>
 80027f0:	e182      	b.n	8002af8 <__aeabi_dsub+0x478>
 80027f2:	2701      	movs	r7, #1
 80027f4:	000b      	movs	r3, r1
 80027f6:	2938      	cmp	r1, #56	@ 0x38
 80027f8:	dc14      	bgt.n	8002824 <__aeabi_dsub+0x1a4>
 80027fa:	2b1f      	cmp	r3, #31
 80027fc:	dd00      	ble.n	8002800 <__aeabi_dsub+0x180>
 80027fe:	e23c      	b.n	8002c7a <__aeabi_dsub+0x5fa>
 8002800:	2720      	movs	r7, #32
 8002802:	1af9      	subs	r1, r7, r3
 8002804:	468c      	mov	ip, r1
 8002806:	4659      	mov	r1, fp
 8002808:	4667      	mov	r7, ip
 800280a:	40b9      	lsls	r1, r7
 800280c:	000f      	movs	r7, r1
 800280e:	0011      	movs	r1, r2
 8002810:	40d9      	lsrs	r1, r3
 8002812:	430f      	orrs	r7, r1
 8002814:	4661      	mov	r1, ip
 8002816:	408a      	lsls	r2, r1
 8002818:	1e51      	subs	r1, r2, #1
 800281a:	418a      	sbcs	r2, r1
 800281c:	4659      	mov	r1, fp
 800281e:	40d9      	lsrs	r1, r3
 8002820:	4317      	orrs	r7, r2
 8002822:	1864      	adds	r4, r4, r1
 8002824:	183f      	adds	r7, r7, r0
 8002826:	4287      	cmp	r7, r0
 8002828:	4180      	sbcs	r0, r0
 800282a:	4240      	negs	r0, r0
 800282c:	1824      	adds	r4, r4, r0
 800282e:	0223      	lsls	r3, r4, #8
 8002830:	d400      	bmi.n	8002834 <__aeabi_dsub+0x1b4>
 8002832:	e0c6      	b.n	80029c2 <__aeabi_dsub+0x342>
 8002834:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <__aeabi_dsub+0x364>)
 8002836:	3501      	adds	r5, #1
 8002838:	429d      	cmp	r5, r3
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x1be>
 800283c:	e0b2      	b.n	80029a4 <__aeabi_dsub+0x324>
 800283e:	2101      	movs	r1, #1
 8002840:	4b69      	ldr	r3, [pc, #420]	@ (80029e8 <__aeabi_dsub+0x368>)
 8002842:	087a      	lsrs	r2, r7, #1
 8002844:	401c      	ands	r4, r3
 8002846:	4039      	ands	r1, r7
 8002848:	430a      	orrs	r2, r1
 800284a:	07e7      	lsls	r7, r4, #31
 800284c:	4317      	orrs	r7, r2
 800284e:	0864      	lsrs	r4, r4, #1
 8002850:	e79e      	b.n	8002790 <__aeabi_dsub+0x110>
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <__aeabi_dsub+0x36c>)
 8002854:	4311      	orrs	r1, r2
 8002856:	468a      	mov	sl, r1
 8002858:	18eb      	adds	r3, r5, r3
 800285a:	2900      	cmp	r1, #0
 800285c:	d028      	beq.n	80028b0 <__aeabi_dsub+0x230>
 800285e:	4566      	cmp	r6, ip
 8002860:	d02c      	beq.n	80028bc <__aeabi_dsub+0x23c>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d05b      	beq.n	800291e <__aeabi_dsub+0x29e>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x1ec>
 800286a:	e12c      	b.n	8002ac6 <__aeabi_dsub+0x446>
 800286c:	465b      	mov	r3, fp
 800286e:	4666      	mov	r6, ip
 8002870:	075f      	lsls	r7, r3, #29
 8002872:	08d2      	lsrs	r2, r2, #3
 8002874:	4317      	orrs	r7, r2
 8002876:	08dd      	lsrs	r5, r3, #3
 8002878:	003b      	movs	r3, r7
 800287a:	432b      	orrs	r3, r5
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x200>
 800287e:	e0e2      	b.n	8002a46 <__aeabi_dsub+0x3c6>
 8002880:	2480      	movs	r4, #128	@ 0x80
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	432c      	orrs	r4, r5
 8002886:	0324      	lsls	r4, r4, #12
 8002888:	4d56      	ldr	r5, [pc, #344]	@ (80029e4 <__aeabi_dsub+0x364>)
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	e08c      	b.n	80029a8 <__aeabi_dsub+0x328>
 800288e:	4659      	mov	r1, fp
 8002890:	4311      	orrs	r1, r2
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x216>
 8002894:	e0d5      	b.n	8002a42 <__aeabi_dsub+0x3c2>
 8002896:	1e59      	subs	r1, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x21e>
 800289c:	e1b9      	b.n	8002c12 <__aeabi_dsub+0x592>
 800289e:	42bb      	cmp	r3, r7
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x224>
 80028a2:	e1b1      	b.n	8002c08 <__aeabi_dsub+0x588>
 80028a4:	2701      	movs	r7, #1
 80028a6:	000b      	movs	r3, r1
 80028a8:	2938      	cmp	r1, #56	@ 0x38
 80028aa:	dd00      	ble.n	80028ae <__aeabi_dsub+0x22e>
 80028ac:	e740      	b.n	8002730 <__aeabi_dsub+0xb0>
 80028ae:	e72a      	b.n	8002706 <__aeabi_dsub+0x86>
 80028b0:	4661      	mov	r1, ip
 80028b2:	2701      	movs	r7, #1
 80028b4:	4079      	eors	r1, r7
 80028b6:	468c      	mov	ip, r1
 80028b8:	4566      	cmp	r6, ip
 80028ba:	d1d2      	bne.n	8002862 <__aeabi_dsub+0x1e2>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x242>
 80028c0:	e0c5      	b.n	8002a4e <__aeabi_dsub+0x3ce>
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d000      	beq.n	80028c8 <__aeabi_dsub+0x248>
 80028c6:	e155      	b.n	8002b74 <__aeabi_dsub+0x4f4>
 80028c8:	464b      	mov	r3, r9
 80028ca:	0025      	movs	r5, r4
 80028cc:	4305      	orrs	r5, r0
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x252>
 80028d0:	e212      	b.n	8002cf8 <__aeabi_dsub+0x678>
 80028d2:	1e59      	subs	r1, r3, #1
 80028d4:	468c      	mov	ip, r1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x25c>
 80028da:	e249      	b.n	8002d70 <__aeabi_dsub+0x6f0>
 80028dc:	4d41      	ldr	r5, [pc, #260]	@ (80029e4 <__aeabi_dsub+0x364>)
 80028de:	42ab      	cmp	r3, r5
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x264>
 80028e2:	e28f      	b.n	8002e04 <__aeabi_dsub+0x784>
 80028e4:	2701      	movs	r7, #1
 80028e6:	2938      	cmp	r1, #56	@ 0x38
 80028e8:	dc11      	bgt.n	800290e <__aeabi_dsub+0x28e>
 80028ea:	4663      	mov	r3, ip
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0x272>
 80028f0:	e25b      	b.n	8002daa <__aeabi_dsub+0x72a>
 80028f2:	4661      	mov	r1, ip
 80028f4:	2320      	movs	r3, #32
 80028f6:	0027      	movs	r7, r4
 80028f8:	1a5b      	subs	r3, r3, r1
 80028fa:	0005      	movs	r5, r0
 80028fc:	4098      	lsls	r0, r3
 80028fe:	409f      	lsls	r7, r3
 8002900:	40cd      	lsrs	r5, r1
 8002902:	1e43      	subs	r3, r0, #1
 8002904:	4198      	sbcs	r0, r3
 8002906:	40cc      	lsrs	r4, r1
 8002908:	432f      	orrs	r7, r5
 800290a:	4307      	orrs	r7, r0
 800290c:	44a3      	add	fp, r4
 800290e:	18bf      	adds	r7, r7, r2
 8002910:	4297      	cmp	r7, r2
 8002912:	4192      	sbcs	r2, r2
 8002914:	4252      	negs	r2, r2
 8002916:	445a      	add	r2, fp
 8002918:	0014      	movs	r4, r2
 800291a:	464d      	mov	r5, r9
 800291c:	e787      	b.n	800282e <__aeabi_dsub+0x1ae>
 800291e:	4f34      	ldr	r7, [pc, #208]	@ (80029f0 <__aeabi_dsub+0x370>)
 8002920:	1c6b      	adds	r3, r5, #1
 8002922:	423b      	tst	r3, r7
 8002924:	d000      	beq.n	8002928 <__aeabi_dsub+0x2a8>
 8002926:	e0b6      	b.n	8002a96 <__aeabi_dsub+0x416>
 8002928:	4659      	mov	r1, fp
 800292a:	0023      	movs	r3, r4
 800292c:	4311      	orrs	r1, r2
 800292e:	000f      	movs	r7, r1
 8002930:	4303      	orrs	r3, r0
 8002932:	2d00      	cmp	r5, #0
 8002934:	d000      	beq.n	8002938 <__aeabi_dsub+0x2b8>
 8002936:	e126      	b.n	8002b86 <__aeabi_dsub+0x506>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <__aeabi_dsub+0x2be>
 800293c:	e1c0      	b.n	8002cc0 <__aeabi_dsub+0x640>
 800293e:	2900      	cmp	r1, #0
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x2c4>
 8002942:	e0a1      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002944:	1a83      	subs	r3, r0, r2
 8002946:	4698      	mov	r8, r3
 8002948:	465b      	mov	r3, fp
 800294a:	4540      	cmp	r0, r8
 800294c:	41ad      	sbcs	r5, r5
 800294e:	1ae3      	subs	r3, r4, r3
 8002950:	426d      	negs	r5, r5
 8002952:	1b5b      	subs	r3, r3, r5
 8002954:	2580      	movs	r5, #128	@ 0x80
 8002956:	042d      	lsls	r5, r5, #16
 8002958:	422b      	tst	r3, r5
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x2de>
 800295c:	e14b      	b.n	8002bf6 <__aeabi_dsub+0x576>
 800295e:	465b      	mov	r3, fp
 8002960:	1a10      	subs	r0, r2, r0
 8002962:	4282      	cmp	r2, r0
 8002964:	4192      	sbcs	r2, r2
 8002966:	1b1c      	subs	r4, r3, r4
 8002968:	0007      	movs	r7, r0
 800296a:	2601      	movs	r6, #1
 800296c:	4663      	mov	r3, ip
 800296e:	4252      	negs	r2, r2
 8002970:	1aa4      	subs	r4, r4, r2
 8002972:	4327      	orrs	r7, r4
 8002974:	401e      	ands	r6, r3
 8002976:	2f00      	cmp	r7, #0
 8002978:	d100      	bne.n	800297c <__aeabi_dsub+0x2fc>
 800297a:	e142      	b.n	8002c02 <__aeabi_dsub+0x582>
 800297c:	422c      	tst	r4, r5
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x302>
 8002980:	e26d      	b.n	8002e5e <__aeabi_dsub+0x7de>
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <__aeabi_dsub+0x368>)
 8002984:	2501      	movs	r5, #1
 8002986:	401c      	ands	r4, r3
 8002988:	e71b      	b.n	80027c2 <__aeabi_dsub+0x142>
 800298a:	42bd      	cmp	r5, r7
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x310>
 800298e:	e13b      	b.n	8002c08 <__aeabi_dsub+0x588>
 8002990:	2701      	movs	r7, #1
 8002992:	2b38      	cmp	r3, #56	@ 0x38
 8002994:	dd00      	ble.n	8002998 <__aeabi_dsub+0x318>
 8002996:	e745      	b.n	8002824 <__aeabi_dsub+0x1a4>
 8002998:	2780      	movs	r7, #128	@ 0x80
 800299a:	4659      	mov	r1, fp
 800299c:	043f      	lsls	r7, r7, #16
 800299e:	4339      	orrs	r1, r7
 80029a0:	468b      	mov	fp, r1
 80029a2:	e72a      	b.n	80027fa <__aeabi_dsub+0x17a>
 80029a4:	2400      	movs	r4, #0
 80029a6:	2700      	movs	r7, #0
 80029a8:	052d      	lsls	r5, r5, #20
 80029aa:	4325      	orrs	r5, r4
 80029ac:	07f6      	lsls	r6, r6, #31
 80029ae:	4335      	orrs	r5, r6
 80029b0:	0038      	movs	r0, r7
 80029b2:	0029      	movs	r1, r5
 80029b4:	b003      	add	sp, #12
 80029b6:	bcf0      	pop	{r4, r5, r6, r7}
 80029b8:	46bb      	mov	fp, r7
 80029ba:	46b2      	mov	sl, r6
 80029bc:	46a9      	mov	r9, r5
 80029be:	46a0      	mov	r8, r4
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c2:	077b      	lsls	r3, r7, #29
 80029c4:	d004      	beq.n	80029d0 <__aeabi_dsub+0x350>
 80029c6:	230f      	movs	r3, #15
 80029c8:	403b      	ands	r3, r7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d000      	beq.n	80029d0 <__aeabi_dsub+0x350>
 80029ce:	e6e7      	b.n	80027a0 <__aeabi_dsub+0x120>
 80029d0:	002b      	movs	r3, r5
 80029d2:	08f8      	lsrs	r0, r7, #3
 80029d4:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <__aeabi_dsub+0x364>)
 80029d6:	0767      	lsls	r7, r4, #29
 80029d8:	4307      	orrs	r7, r0
 80029da:	08e5      	lsrs	r5, r4, #3
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x362>
 80029e0:	e74a      	b.n	8002878 <__aeabi_dsub+0x1f8>
 80029e2:	e0a5      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 80029e4:	000007ff 	.word	0x000007ff
 80029e8:	ff7fffff 	.word	0xff7fffff
 80029ec:	fffff801 	.word	0xfffff801
 80029f0:	000007fe 	.word	0x000007fe
 80029f4:	0038      	movs	r0, r7
 80029f6:	f000 fbc7 	bl	8003188 <__clzsi2>
 80029fa:	0003      	movs	r3, r0
 80029fc:	3318      	adds	r3, #24
 80029fe:	2b1f      	cmp	r3, #31
 8002a00:	dc00      	bgt.n	8002a04 <__aeabi_dsub+0x384>
 8002a02:	e6a7      	b.n	8002754 <__aeabi_dsub+0xd4>
 8002a04:	003a      	movs	r2, r7
 8002a06:	3808      	subs	r0, #8
 8002a08:	4082      	lsls	r2, r0
 8002a0a:	429d      	cmp	r5, r3
 8002a0c:	dd00      	ble.n	8002a10 <__aeabi_dsub+0x390>
 8002a0e:	e08a      	b.n	8002b26 <__aeabi_dsub+0x4a6>
 8002a10:	1b5b      	subs	r3, r3, r5
 8002a12:	1c58      	adds	r0, r3, #1
 8002a14:	281f      	cmp	r0, #31
 8002a16:	dc00      	bgt.n	8002a1a <__aeabi_dsub+0x39a>
 8002a18:	e1d8      	b.n	8002dcc <__aeabi_dsub+0x74c>
 8002a1a:	0017      	movs	r7, r2
 8002a1c:	3b1f      	subs	r3, #31
 8002a1e:	40df      	lsrs	r7, r3
 8002a20:	2820      	cmp	r0, #32
 8002a22:	d005      	beq.n	8002a30 <__aeabi_dsub+0x3b0>
 8002a24:	2340      	movs	r3, #64	@ 0x40
 8002a26:	1a1b      	subs	r3, r3, r0
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	1e53      	subs	r3, r2, #1
 8002a2c:	419a      	sbcs	r2, r3
 8002a2e:	4317      	orrs	r7, r2
 8002a30:	2500      	movs	r5, #0
 8002a32:	2f00      	cmp	r7, #0
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x3b8>
 8002a36:	e0e5      	b.n	8002c04 <__aeabi_dsub+0x584>
 8002a38:	077b      	lsls	r3, r7, #29
 8002a3a:	d000      	beq.n	8002a3e <__aeabi_dsub+0x3be>
 8002a3c:	e6ab      	b.n	8002796 <__aeabi_dsub+0x116>
 8002a3e:	002c      	movs	r4, r5
 8002a40:	e7c6      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002a42:	08c0      	lsrs	r0, r0, #3
 8002a44:	e7c6      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002a46:	2700      	movs	r7, #0
 8002a48:	2400      	movs	r4, #0
 8002a4a:	4dd1      	ldr	r5, [pc, #836]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002a4c:	e7ac      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002a4e:	4fd1      	ldr	r7, [pc, #836]	@ (8002d94 <__aeabi_dsub+0x714>)
 8002a50:	1c6b      	adds	r3, r5, #1
 8002a52:	423b      	tst	r3, r7
 8002a54:	d171      	bne.n	8002b3a <__aeabi_dsub+0x4ba>
 8002a56:	0023      	movs	r3, r4
 8002a58:	4303      	orrs	r3, r0
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	d000      	beq.n	8002a60 <__aeabi_dsub+0x3e0>
 8002a5e:	e14e      	b.n	8002cfe <__aeabi_dsub+0x67e>
 8002a60:	4657      	mov	r7, sl
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x3e8>
 8002a66:	e1b5      	b.n	8002dd4 <__aeabi_dsub+0x754>
 8002a68:	2f00      	cmp	r7, #0
 8002a6a:	d00d      	beq.n	8002a88 <__aeabi_dsub+0x408>
 8002a6c:	1883      	adds	r3, r0, r2
 8002a6e:	4283      	cmp	r3, r0
 8002a70:	4180      	sbcs	r0, r0
 8002a72:	445c      	add	r4, fp
 8002a74:	4240      	negs	r0, r0
 8002a76:	1824      	adds	r4, r4, r0
 8002a78:	0222      	lsls	r2, r4, #8
 8002a7a:	d500      	bpl.n	8002a7e <__aeabi_dsub+0x3fe>
 8002a7c:	e1c8      	b.n	8002e10 <__aeabi_dsub+0x790>
 8002a7e:	001f      	movs	r7, r3
 8002a80:	4698      	mov	r8, r3
 8002a82:	4327      	orrs	r7, r4
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x408>
 8002a86:	e0bc      	b.n	8002c02 <__aeabi_dsub+0x582>
 8002a88:	4643      	mov	r3, r8
 8002a8a:	0767      	lsls	r7, r4, #29
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	431f      	orrs	r7, r3
 8002a90:	08e5      	lsrs	r5, r4, #3
 8002a92:	2300      	movs	r3, #0
 8002a94:	e04c      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002a96:	1a83      	subs	r3, r0, r2
 8002a98:	4698      	mov	r8, r3
 8002a9a:	465b      	mov	r3, fp
 8002a9c:	4540      	cmp	r0, r8
 8002a9e:	41bf      	sbcs	r7, r7
 8002aa0:	1ae3      	subs	r3, r4, r3
 8002aa2:	427f      	negs	r7, r7
 8002aa4:	1bdb      	subs	r3, r3, r7
 8002aa6:	021f      	lsls	r7, r3, #8
 8002aa8:	d47c      	bmi.n	8002ba4 <__aeabi_dsub+0x524>
 8002aaa:	4647      	mov	r7, r8
 8002aac:	431f      	orrs	r7, r3
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_dsub+0x432>
 8002ab0:	e0a6      	b.n	8002c00 <__aeabi_dsub+0x580>
 8002ab2:	001c      	movs	r4, r3
 8002ab4:	4647      	mov	r7, r8
 8002ab6:	e645      	b.n	8002744 <__aeabi_dsub+0xc4>
 8002ab8:	4cb7      	ldr	r4, [pc, #732]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002aba:	1aed      	subs	r5, r5, r3
 8002abc:	4014      	ands	r4, r2
 8002abe:	077b      	lsls	r3, r7, #29
 8002ac0:	d000      	beq.n	8002ac4 <__aeabi_dsub+0x444>
 8002ac2:	e780      	b.n	80029c6 <__aeabi_dsub+0x346>
 8002ac4:	e784      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	0025      	movs	r5, r4
 8002aca:	4305      	orrs	r5, r0
 8002acc:	d066      	beq.n	8002b9c <__aeabi_dsub+0x51c>
 8002ace:	1e5f      	subs	r7, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d100      	bne.n	8002ad6 <__aeabi_dsub+0x456>
 8002ad4:	e0fc      	b.n	8002cd0 <__aeabi_dsub+0x650>
 8002ad6:	4dae      	ldr	r5, [pc, #696]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002ad8:	42ab      	cmp	r3, r5
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x45e>
 8002adc:	e15e      	b.n	8002d9c <__aeabi_dsub+0x71c>
 8002ade:	4666      	mov	r6, ip
 8002ae0:	2f38      	cmp	r7, #56	@ 0x38
 8002ae2:	dc00      	bgt.n	8002ae6 <__aeabi_dsub+0x466>
 8002ae4:	e0b4      	b.n	8002c50 <__aeabi_dsub+0x5d0>
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	1a17      	subs	r7, r2, r0
 8002aea:	42ba      	cmp	r2, r7
 8002aec:	4192      	sbcs	r2, r2
 8002aee:	465b      	mov	r3, fp
 8002af0:	4252      	negs	r2, r2
 8002af2:	464d      	mov	r5, r9
 8002af4:	1a9c      	subs	r4, r3, r2
 8002af6:	e620      	b.n	800273a <__aeabi_dsub+0xba>
 8002af8:	0767      	lsls	r7, r4, #29
 8002afa:	08c0      	lsrs	r0, r0, #3
 8002afc:	4307      	orrs	r7, r0
 8002afe:	08e5      	lsrs	r5, r4, #3
 8002b00:	e6ba      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002b02:	001f      	movs	r7, r3
 8002b04:	4659      	mov	r1, fp
 8002b06:	3f20      	subs	r7, #32
 8002b08:	40f9      	lsrs	r1, r7
 8002b0a:	000f      	movs	r7, r1
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x49c>
 8002b10:	2140      	movs	r1, #64	@ 0x40
 8002b12:	1acb      	subs	r3, r1, r3
 8002b14:	4659      	mov	r1, fp
 8002b16:	4099      	lsls	r1, r3
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	4653      	mov	r3, sl
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4193      	sbcs	r3, r2
 8002b22:	431f      	orrs	r7, r3
 8002b24:	e604      	b.n	8002730 <__aeabi_dsub+0xb0>
 8002b26:	1aeb      	subs	r3, r5, r3
 8002b28:	4d9b      	ldr	r5, [pc, #620]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002b2a:	4015      	ands	r5, r2
 8002b2c:	076f      	lsls	r7, r5, #29
 8002b2e:	08ed      	lsrs	r5, r5, #3
 8002b30:	032c      	lsls	r4, r5, #12
 8002b32:	055d      	lsls	r5, r3, #21
 8002b34:	0b24      	lsrs	r4, r4, #12
 8002b36:	0d6d      	lsrs	r5, r5, #21
 8002b38:	e736      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b3a:	4d95      	ldr	r5, [pc, #596]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002b3c:	42ab      	cmp	r3, r5
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x4c2>
 8002b40:	e0d6      	b.n	8002cf0 <__aeabi_dsub+0x670>
 8002b42:	1882      	adds	r2, r0, r2
 8002b44:	0021      	movs	r1, r4
 8002b46:	4282      	cmp	r2, r0
 8002b48:	4180      	sbcs	r0, r0
 8002b4a:	4459      	add	r1, fp
 8002b4c:	4240      	negs	r0, r0
 8002b4e:	1808      	adds	r0, r1, r0
 8002b50:	07c7      	lsls	r7, r0, #31
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	4317      	orrs	r7, r2
 8002b56:	0844      	lsrs	r4, r0, #1
 8002b58:	0752      	lsls	r2, r2, #29
 8002b5a:	d400      	bmi.n	8002b5e <__aeabi_dsub+0x4de>
 8002b5c:	e185      	b.n	8002e6a <__aeabi_dsub+0x7ea>
 8002b5e:	220f      	movs	r2, #15
 8002b60:	001d      	movs	r5, r3
 8002b62:	403a      	ands	r2, r7
 8002b64:	2a04      	cmp	r2, #4
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x4ea>
 8002b68:	e61a      	b.n	80027a0 <__aeabi_dsub+0x120>
 8002b6a:	08ff      	lsrs	r7, r7, #3
 8002b6c:	0764      	lsls	r4, r4, #29
 8002b6e:	4327      	orrs	r7, r4
 8002b70:	0905      	lsrs	r5, r0, #4
 8002b72:	e7dd      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002b74:	465b      	mov	r3, fp
 8002b76:	08d2      	lsrs	r2, r2, #3
 8002b78:	075f      	lsls	r7, r3, #29
 8002b7a:	4317      	orrs	r7, r2
 8002b7c:	08dd      	lsrs	r5, r3, #3
 8002b7e:	e67b      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002b80:	2700      	movs	r7, #0
 8002b82:	2400      	movs	r4, #0
 8002b84:	e710      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d000      	beq.n	8002b8c <__aeabi_dsub+0x50c>
 8002b8a:	e0d6      	b.n	8002d3a <__aeabi_dsub+0x6ba>
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x512>
 8002b90:	e12f      	b.n	8002df2 <__aeabi_dsub+0x772>
 8002b92:	2480      	movs	r4, #128	@ 0x80
 8002b94:	2600      	movs	r6, #0
 8002b96:	4d7e      	ldr	r5, [pc, #504]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002b98:	0324      	lsls	r4, r4, #12
 8002b9a:	e705      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b9c:	4666      	mov	r6, ip
 8002b9e:	465c      	mov	r4, fp
 8002ba0:	08d0      	lsrs	r0, r2, #3
 8002ba2:	e717      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002ba4:	465b      	mov	r3, fp
 8002ba6:	1a17      	subs	r7, r2, r0
 8002ba8:	42ba      	cmp	r2, r7
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	1b1c      	subs	r4, r3, r4
 8002bae:	2601      	movs	r6, #1
 8002bb0:	4663      	mov	r3, ip
 8002bb2:	4252      	negs	r2, r2
 8002bb4:	1aa4      	subs	r4, r4, r2
 8002bb6:	401e      	ands	r6, r3
 8002bb8:	e5c4      	b.n	8002744 <__aeabi_dsub+0xc4>
 8002bba:	1883      	adds	r3, r0, r2
 8002bbc:	4283      	cmp	r3, r0
 8002bbe:	4180      	sbcs	r0, r0
 8002bc0:	445c      	add	r4, fp
 8002bc2:	4240      	negs	r0, r0
 8002bc4:	1825      	adds	r5, r4, r0
 8002bc6:	022a      	lsls	r2, r5, #8
 8002bc8:	d400      	bmi.n	8002bcc <__aeabi_dsub+0x54c>
 8002bca:	e0da      	b.n	8002d82 <__aeabi_dsub+0x702>
 8002bcc:	4a72      	ldr	r2, [pc, #456]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	4015      	ands	r5, r2
 8002bd2:	07ea      	lsls	r2, r5, #31
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	0869      	lsrs	r1, r5, #1
 8002bd8:	075b      	lsls	r3, r3, #29
 8002bda:	d400      	bmi.n	8002bde <__aeabi_dsub+0x55e>
 8002bdc:	e14a      	b.n	8002e74 <__aeabi_dsub+0x7f4>
 8002bde:	230f      	movs	r3, #15
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x568>
 8002be6:	e0fc      	b.n	8002de2 <__aeabi_dsub+0x762>
 8002be8:	1d17      	adds	r7, r2, #4
 8002bea:	4297      	cmp	r7, r2
 8002bec:	41a4      	sbcs	r4, r4
 8002bee:	4264      	negs	r4, r4
 8002bf0:	2502      	movs	r5, #2
 8002bf2:	1864      	adds	r4, r4, r1
 8002bf4:	e6ec      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	001c      	movs	r4, r3
 8002bfa:	431f      	orrs	r7, r3
 8002bfc:	d000      	beq.n	8002c00 <__aeabi_dsub+0x580>
 8002bfe:	e743      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002c00:	2600      	movs	r6, #0
 8002c02:	2500      	movs	r5, #0
 8002c04:	2400      	movs	r4, #0
 8002c06:	e6cf      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002c08:	08c0      	lsrs	r0, r0, #3
 8002c0a:	0767      	lsls	r7, r4, #29
 8002c0c:	4307      	orrs	r7, r0
 8002c0e:	08e5      	lsrs	r5, r4, #3
 8002c10:	e632      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002c12:	1a87      	subs	r7, r0, r2
 8002c14:	465b      	mov	r3, fp
 8002c16:	42b8      	cmp	r0, r7
 8002c18:	4180      	sbcs	r0, r0
 8002c1a:	1ae4      	subs	r4, r4, r3
 8002c1c:	4240      	negs	r0, r0
 8002c1e:	1a24      	subs	r4, r4, r0
 8002c20:	0223      	lsls	r3, r4, #8
 8002c22:	d428      	bmi.n	8002c76 <__aeabi_dsub+0x5f6>
 8002c24:	0763      	lsls	r3, r4, #29
 8002c26:	08ff      	lsrs	r7, r7, #3
 8002c28:	431f      	orrs	r7, r3
 8002c2a:	08e5      	lsrs	r5, r4, #3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e77f      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x5b6>
 8002c34:	e673      	b.n	800291e <__aeabi_dsub+0x29e>
 8002c36:	464b      	mov	r3, r9
 8002c38:	1b5f      	subs	r7, r3, r5
 8002c3a:	003b      	movs	r3, r7
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x5c2>
 8002c40:	e742      	b.n	8002ac8 <__aeabi_dsub+0x448>
 8002c42:	2f38      	cmp	r7, #56	@ 0x38
 8002c44:	dd00      	ble.n	8002c48 <__aeabi_dsub+0x5c8>
 8002c46:	e0ec      	b.n	8002e22 <__aeabi_dsub+0x7a2>
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	000e      	movs	r6, r1
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431c      	orrs	r4, r3
 8002c50:	2f1f      	cmp	r7, #31
 8002c52:	dc25      	bgt.n	8002ca0 <__aeabi_dsub+0x620>
 8002c54:	2520      	movs	r5, #32
 8002c56:	0023      	movs	r3, r4
 8002c58:	1bed      	subs	r5, r5, r7
 8002c5a:	0001      	movs	r1, r0
 8002c5c:	40a8      	lsls	r0, r5
 8002c5e:	40ab      	lsls	r3, r5
 8002c60:	40f9      	lsrs	r1, r7
 8002c62:	1e45      	subs	r5, r0, #1
 8002c64:	41a8      	sbcs	r0, r5
 8002c66:	430b      	orrs	r3, r1
 8002c68:	40fc      	lsrs	r4, r7
 8002c6a:	4318      	orrs	r0, r3
 8002c6c:	465b      	mov	r3, fp
 8002c6e:	1b1b      	subs	r3, r3, r4
 8002c70:	469b      	mov	fp, r3
 8002c72:	e739      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002c74:	4666      	mov	r6, ip
 8002c76:	2501      	movs	r5, #1
 8002c78:	e562      	b.n	8002740 <__aeabi_dsub+0xc0>
 8002c7a:	001f      	movs	r7, r3
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	3f20      	subs	r7, #32
 8002c80:	40f9      	lsrs	r1, r7
 8002c82:	468c      	mov	ip, r1
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d005      	beq.n	8002c94 <__aeabi_dsub+0x614>
 8002c88:	2740      	movs	r7, #64	@ 0x40
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	1afb      	subs	r3, r7, r3
 8002c8e:	4099      	lsls	r1, r3
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4692      	mov	sl, r2
 8002c94:	4657      	mov	r7, sl
 8002c96:	1e7b      	subs	r3, r7, #1
 8002c98:	419f      	sbcs	r7, r3
 8002c9a:	4663      	mov	r3, ip
 8002c9c:	431f      	orrs	r7, r3
 8002c9e:	e5c1      	b.n	8002824 <__aeabi_dsub+0x1a4>
 8002ca0:	003b      	movs	r3, r7
 8002ca2:	0025      	movs	r5, r4
 8002ca4:	3b20      	subs	r3, #32
 8002ca6:	40dd      	lsrs	r5, r3
 8002ca8:	2f20      	cmp	r7, #32
 8002caa:	d004      	beq.n	8002cb6 <__aeabi_dsub+0x636>
 8002cac:	2340      	movs	r3, #64	@ 0x40
 8002cae:	1bdb      	subs	r3, r3, r7
 8002cb0:	409c      	lsls	r4, r3
 8002cb2:	4320      	orrs	r0, r4
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	1e43      	subs	r3, r0, #1
 8002cba:	4198      	sbcs	r0, r3
 8002cbc:	4328      	orrs	r0, r5
 8002cbe:	e713      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d09d      	beq.n	8002c00 <__aeabi_dsub+0x580>
 8002cc4:	2601      	movs	r6, #1
 8002cc6:	4663      	mov	r3, ip
 8002cc8:	465c      	mov	r4, fp
 8002cca:	4690      	mov	r8, r2
 8002ccc:	401e      	ands	r6, r3
 8002cce:	e6db      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002cd0:	1a17      	subs	r7, r2, r0
 8002cd2:	465b      	mov	r3, fp
 8002cd4:	42ba      	cmp	r2, r7
 8002cd6:	4192      	sbcs	r2, r2
 8002cd8:	1b1c      	subs	r4, r3, r4
 8002cda:	4252      	negs	r2, r2
 8002cdc:	1aa4      	subs	r4, r4, r2
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d4c8      	bmi.n	8002c74 <__aeabi_dsub+0x5f4>
 8002ce2:	0763      	lsls	r3, r4, #29
 8002ce4:	08ff      	lsrs	r7, r7, #3
 8002ce6:	431f      	orrs	r7, r3
 8002ce8:	4666      	mov	r6, ip
 8002cea:	2301      	movs	r3, #1
 8002cec:	08e5      	lsrs	r5, r4, #3
 8002cee:	e71f      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002cf0:	001d      	movs	r5, r3
 8002cf2:	2400      	movs	r4, #0
 8002cf4:	2700      	movs	r7, #0
 8002cf6:	e657      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002cf8:	465c      	mov	r4, fp
 8002cfa:	08d0      	lsrs	r0, r2, #3
 8002cfc:	e66a      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x684>
 8002d02:	e737      	b.n	8002b74 <__aeabi_dsub+0x4f4>
 8002d04:	4653      	mov	r3, sl
 8002d06:	08c0      	lsrs	r0, r0, #3
 8002d08:	0767      	lsls	r7, r4, #29
 8002d0a:	4307      	orrs	r7, r0
 8002d0c:	08e5      	lsrs	r5, r4, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x694>
 8002d12:	e5b1      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	421d      	tst	r5, r3
 8002d1a:	d008      	beq.n	8002d2e <__aeabi_dsub+0x6ae>
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	08c8      	lsrs	r0, r1, #3
 8002d20:	4218      	tst	r0, r3
 8002d22:	d104      	bne.n	8002d2e <__aeabi_dsub+0x6ae>
 8002d24:	08d2      	lsrs	r2, r2, #3
 8002d26:	0749      	lsls	r1, r1, #29
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	0017      	movs	r7, r2
 8002d2c:	0005      	movs	r5, r0
 8002d2e:	0f7b      	lsrs	r3, r7, #29
 8002d30:	00ff      	lsls	r7, r7, #3
 8002d32:	08ff      	lsrs	r7, r7, #3
 8002d34:	075b      	lsls	r3, r3, #29
 8002d36:	431f      	orrs	r7, r3
 8002d38:	e59e      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d3a:	08c0      	lsrs	r0, r0, #3
 8002d3c:	0763      	lsls	r3, r4, #29
 8002d3e:	4318      	orrs	r0, r3
 8002d40:	08e5      	lsrs	r5, r4, #3
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d053      	beq.n	8002dee <__aeabi_dsub+0x76e>
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	421d      	tst	r5, r3
 8002d4c:	d00a      	beq.n	8002d64 <__aeabi_dsub+0x6e4>
 8002d4e:	4659      	mov	r1, fp
 8002d50:	08cc      	lsrs	r4, r1, #3
 8002d52:	421c      	tst	r4, r3
 8002d54:	d106      	bne.n	8002d64 <__aeabi_dsub+0x6e4>
 8002d56:	2601      	movs	r6, #1
 8002d58:	4663      	mov	r3, ip
 8002d5a:	0025      	movs	r5, r4
 8002d5c:	08d0      	lsrs	r0, r2, #3
 8002d5e:	0749      	lsls	r1, r1, #29
 8002d60:	4308      	orrs	r0, r1
 8002d62:	401e      	ands	r6, r3
 8002d64:	0f47      	lsrs	r7, r0, #29
 8002d66:	00c0      	lsls	r0, r0, #3
 8002d68:	08c0      	lsrs	r0, r0, #3
 8002d6a:	077f      	lsls	r7, r7, #29
 8002d6c:	4307      	orrs	r7, r0
 8002d6e:	e583      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d70:	1883      	adds	r3, r0, r2
 8002d72:	4293      	cmp	r3, r2
 8002d74:	4192      	sbcs	r2, r2
 8002d76:	445c      	add	r4, fp
 8002d78:	4252      	negs	r2, r2
 8002d7a:	18a5      	adds	r5, r4, r2
 8002d7c:	022a      	lsls	r2, r5, #8
 8002d7e:	d500      	bpl.n	8002d82 <__aeabi_dsub+0x702>
 8002d80:	e724      	b.n	8002bcc <__aeabi_dsub+0x54c>
 8002d82:	076f      	lsls	r7, r5, #29
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	431f      	orrs	r7, r3
 8002d88:	08ed      	lsrs	r5, r5, #3
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e6d0      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	000007ff 	.word	0x000007ff
 8002d94:	000007fe 	.word	0x000007fe
 8002d98:	ff7fffff 	.word	0xff7fffff
 8002d9c:	465b      	mov	r3, fp
 8002d9e:	08d2      	lsrs	r2, r2, #3
 8002da0:	075f      	lsls	r7, r3, #29
 8002da2:	4666      	mov	r6, ip
 8002da4:	4317      	orrs	r7, r2
 8002da6:	08dd      	lsrs	r5, r3, #3
 8002da8:	e566      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002daa:	0025      	movs	r5, r4
 8002dac:	3b20      	subs	r3, #32
 8002dae:	40dd      	lsrs	r5, r3
 8002db0:	4663      	mov	r3, ip
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d005      	beq.n	8002dc2 <__aeabi_dsub+0x742>
 8002db6:	2340      	movs	r3, #64	@ 0x40
 8002db8:	4661      	mov	r1, ip
 8002dba:	1a5b      	subs	r3, r3, r1
 8002dbc:	409c      	lsls	r4, r3
 8002dbe:	4320      	orrs	r0, r4
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4647      	mov	r7, r8
 8002dc4:	1e7b      	subs	r3, r7, #1
 8002dc6:	419f      	sbcs	r7, r3
 8002dc8:	432f      	orrs	r7, r5
 8002dca:	e5a0      	b.n	800290e <__aeabi_dsub+0x28e>
 8002dcc:	2120      	movs	r1, #32
 8002dce:	2700      	movs	r7, #0
 8002dd0:	1a09      	subs	r1, r1, r0
 8002dd2:	e4d2      	b.n	800277a <__aeabi_dsub+0xfa>
 8002dd4:	2f00      	cmp	r7, #0
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x75a>
 8002dd8:	e713      	b.n	8002c02 <__aeabi_dsub+0x582>
 8002dda:	465c      	mov	r4, fp
 8002ddc:	0017      	movs	r7, r2
 8002dde:	2500      	movs	r5, #0
 8002de0:	e5f6      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002de2:	08d7      	lsrs	r7, r2, #3
 8002de4:	0749      	lsls	r1, r1, #29
 8002de6:	2302      	movs	r3, #2
 8002de8:	430f      	orrs	r7, r1
 8002dea:	092d      	lsrs	r5, r5, #4
 8002dec:	e6a0      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002dee:	0007      	movs	r7, r0
 8002df0:	e542      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002df2:	465b      	mov	r3, fp
 8002df4:	2601      	movs	r6, #1
 8002df6:	075f      	lsls	r7, r3, #29
 8002df8:	08dd      	lsrs	r5, r3, #3
 8002dfa:	4663      	mov	r3, ip
 8002dfc:	08d2      	lsrs	r2, r2, #3
 8002dfe:	4317      	orrs	r7, r2
 8002e00:	401e      	ands	r6, r3
 8002e02:	e539      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002e04:	465b      	mov	r3, fp
 8002e06:	08d2      	lsrs	r2, r2, #3
 8002e08:	075f      	lsls	r7, r3, #29
 8002e0a:	4317      	orrs	r7, r2
 8002e0c:	08dd      	lsrs	r5, r3, #3
 8002e0e:	e533      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002e10:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <__aeabi_dsub+0x80c>)
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	4022      	ands	r2, r4
 8002e16:	0757      	lsls	r7, r2, #29
 8002e18:	0252      	lsls	r2, r2, #9
 8002e1a:	2501      	movs	r5, #1
 8002e1c:	431f      	orrs	r7, r3
 8002e1e:	0b14      	lsrs	r4, r2, #12
 8002e20:	e5c2      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002e22:	000e      	movs	r6, r1
 8002e24:	2001      	movs	r0, #1
 8002e26:	e65f      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <__aeabi_dsub+0x7c8>
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	1b5b      	subs	r3, r3, r5
 8002e30:	469c      	mov	ip, r3
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	d100      	bne.n	8002e38 <__aeabi_dsub+0x7b8>
 8002e36:	e548      	b.n	80028ca <__aeabi_dsub+0x24a>
 8002e38:	2701      	movs	r7, #1
 8002e3a:	2b38      	cmp	r3, #56	@ 0x38
 8002e3c:	dd00      	ble.n	8002e40 <__aeabi_dsub+0x7c0>
 8002e3e:	e566      	b.n	800290e <__aeabi_dsub+0x28e>
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431c      	orrs	r4, r3
 8002e46:	e550      	b.n	80028ea <__aeabi_dsub+0x26a>
 8002e48:	1c6b      	adds	r3, r5, #1
 8002e4a:	4d11      	ldr	r5, [pc, #68]	@ (8002e90 <__aeabi_dsub+0x810>)
 8002e4c:	422b      	tst	r3, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x7d2>
 8002e50:	e673      	b.n	8002b3a <__aeabi_dsub+0x4ba>
 8002e52:	4659      	mov	r1, fp
 8002e54:	0023      	movs	r3, r4
 8002e56:	4311      	orrs	r1, r2
 8002e58:	468a      	mov	sl, r1
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	e600      	b.n	8002a60 <__aeabi_dsub+0x3e0>
 8002e5e:	0767      	lsls	r7, r4, #29
 8002e60:	08c0      	lsrs	r0, r0, #3
 8002e62:	2300      	movs	r3, #0
 8002e64:	4307      	orrs	r7, r0
 8002e66:	08e5      	lsrs	r5, r4, #3
 8002e68:	e662      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e6a:	0764      	lsls	r4, r4, #29
 8002e6c:	08ff      	lsrs	r7, r7, #3
 8002e6e:	4327      	orrs	r7, r4
 8002e70:	0905      	lsrs	r5, r0, #4
 8002e72:	e65d      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e74:	08d2      	lsrs	r2, r2, #3
 8002e76:	0749      	lsls	r1, r1, #29
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	000f      	movs	r7, r1
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	092d      	lsrs	r5, r5, #4
 8002e80:	e656      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e82:	0007      	movs	r7, r0
 8002e84:	e5a4      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002e86:	0038      	movs	r0, r7
 8002e88:	e48f      	b.n	80027aa <__aeabi_dsub+0x12a>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	ff7fffff 	.word	0xff7fffff
 8002e90:	000007fe 	.word	0x000007fe

08002e94 <__aeabi_dcmpun>:
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	46c6      	mov	lr, r8
 8002e98:	031e      	lsls	r6, r3, #12
 8002e9a:	0b36      	lsrs	r6, r6, #12
 8002e9c:	46b0      	mov	r8, r6
 8002e9e:	4e0d      	ldr	r6, [pc, #52]	@ (8002ed4 <__aeabi_dcmpun+0x40>)
 8002ea0:	030c      	lsls	r4, r1, #12
 8002ea2:	004d      	lsls	r5, r1, #1
 8002ea4:	005f      	lsls	r7, r3, #1
 8002ea6:	b500      	push	{lr}
 8002ea8:	0b24      	lsrs	r4, r4, #12
 8002eaa:	0d6d      	lsrs	r5, r5, #21
 8002eac:	0d7f      	lsrs	r7, r7, #21
 8002eae:	42b5      	cmp	r5, r6
 8002eb0:	d00b      	beq.n	8002eca <__aeabi_dcmpun+0x36>
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <__aeabi_dcmpun+0x40>)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	428f      	cmp	r7, r1
 8002eb8:	d104      	bne.n	8002ec4 <__aeabi_dcmpun+0x30>
 8002eba:	4646      	mov	r6, r8
 8002ebc:	4316      	orrs	r6, r2
 8002ebe:	0030      	movs	r0, r6
 8002ec0:	1e43      	subs	r3, r0, #1
 8002ec2:	4198      	sbcs	r0, r3
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	46b8      	mov	r8, r7
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	4304      	orrs	r4, r0
 8002ecc:	2001      	movs	r0, #1
 8002ece:	2c00      	cmp	r4, #0
 8002ed0:	d1f8      	bne.n	8002ec4 <__aeabi_dcmpun+0x30>
 8002ed2:	e7ee      	b.n	8002eb2 <__aeabi_dcmpun+0x1e>
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_d2iz>:
 8002ed8:	000b      	movs	r3, r1
 8002eda:	0002      	movs	r2, r0
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	4d16      	ldr	r5, [pc, #88]	@ (8002f38 <__aeabi_d2iz+0x60>)
 8002ee0:	030c      	lsls	r4, r1, #12
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	0049      	lsls	r1, r1, #1
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	0b24      	lsrs	r4, r4, #12
 8002eee:	0d49      	lsrs	r1, r1, #21
 8002ef0:	0fde      	lsrs	r6, r3, #31
 8002ef2:	42a9      	cmp	r1, r5
 8002ef4:	dd04      	ble.n	8002f00 <__aeabi_d2iz+0x28>
 8002ef6:	4811      	ldr	r0, [pc, #68]	@ (8002f3c <__aeabi_d2iz+0x64>)
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	dd03      	ble.n	8002f04 <__aeabi_d2iz+0x2c>
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <__aeabi_d2iz+0x68>)
 8002efe:	18f0      	adds	r0, r6, r3
 8002f00:	b002      	add	sp, #8
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	2080      	movs	r0, #128	@ 0x80
 8002f06:	0340      	lsls	r0, r0, #13
 8002f08:	4320      	orrs	r0, r4
 8002f0a:	4c0e      	ldr	r4, [pc, #56]	@ (8002f44 <__aeabi_d2iz+0x6c>)
 8002f0c:	1a64      	subs	r4, r4, r1
 8002f0e:	2c1f      	cmp	r4, #31
 8002f10:	dd08      	ble.n	8002f24 <__aeabi_d2iz+0x4c>
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <__aeabi_d2iz+0x70>)
 8002f14:	1a5b      	subs	r3, r3, r1
 8002f16:	40d8      	lsrs	r0, r3
 8002f18:	0003      	movs	r3, r0
 8002f1a:	4258      	negs	r0, r3
 8002f1c:	2e00      	cmp	r6, #0
 8002f1e:	d1ef      	bne.n	8002f00 <__aeabi_d2iz+0x28>
 8002f20:	0018      	movs	r0, r3
 8002f22:	e7ed      	b.n	8002f00 <__aeabi_d2iz+0x28>
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <__aeabi_d2iz+0x74>)
 8002f26:	9a00      	ldr	r2, [sp, #0]
 8002f28:	469c      	mov	ip, r3
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	4461      	add	r1, ip
 8002f2e:	408b      	lsls	r3, r1
 8002f30:	40e2      	lsrs	r2, r4
 8002f32:	4313      	orrs	r3, r2
 8002f34:	e7f1      	b.n	8002f1a <__aeabi_d2iz+0x42>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	000003fe 	.word	0x000003fe
 8002f3c:	0000041d 	.word	0x0000041d
 8002f40:	7fffffff 	.word	0x7fffffff
 8002f44:	00000433 	.word	0x00000433
 8002f48:	00000413 	.word	0x00000413
 8002f4c:	fffffbed 	.word	0xfffffbed

08002f50 <__aeabi_i2d>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d016      	beq.n	8002f84 <__aeabi_i2d+0x34>
 8002f56:	17c3      	asrs	r3, r0, #31
 8002f58:	18c5      	adds	r5, r0, r3
 8002f5a:	405d      	eors	r5, r3
 8002f5c:	0fc4      	lsrs	r4, r0, #31
 8002f5e:	0028      	movs	r0, r5
 8002f60:	f000 f912 	bl	8003188 <__clzsi2>
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <__aeabi_i2d+0x58>)
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	055b      	lsls	r3, r3, #21
 8002f6a:	0d5b      	lsrs	r3, r3, #21
 8002f6c:	280a      	cmp	r0, #10
 8002f6e:	dc14      	bgt.n	8002f9a <__aeabi_i2d+0x4a>
 8002f70:	0002      	movs	r2, r0
 8002f72:	002e      	movs	r6, r5
 8002f74:	3215      	adds	r2, #21
 8002f76:	4096      	lsls	r6, r2
 8002f78:	220b      	movs	r2, #11
 8002f7a:	1a12      	subs	r2, r2, r0
 8002f7c:	40d5      	lsrs	r5, r2
 8002f7e:	032d      	lsls	r5, r5, #12
 8002f80:	0b2d      	lsrs	r5, r5, #12
 8002f82:	e003      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002f84:	2400      	movs	r4, #0
 8002f86:	2300      	movs	r3, #0
 8002f88:	2500      	movs	r5, #0
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	432b      	orrs	r3, r5
 8002f90:	07e4      	lsls	r4, r4, #31
 8002f92:	4323      	orrs	r3, r4
 8002f94:	0030      	movs	r0, r6
 8002f96:	0019      	movs	r1, r3
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
 8002f9a:	380b      	subs	r0, #11
 8002f9c:	4085      	lsls	r5, r0
 8002f9e:	032d      	lsls	r5, r5, #12
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	0b2d      	lsrs	r5, r5, #12
 8002fa4:	e7f2      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	0000041e 	.word	0x0000041e

08002fac <__aeabi_ui2d>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	1e04      	subs	r4, r0, #0
 8002fb0:	d010      	beq.n	8002fd4 <__aeabi_ui2d+0x28>
 8002fb2:	f000 f8e9 	bl	8003188 <__clzsi2>
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <__aeabi_ui2d+0x44>)
 8002fb8:	1a1b      	subs	r3, r3, r0
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	280a      	cmp	r0, #10
 8002fc0:	dc0f      	bgt.n	8002fe2 <__aeabi_ui2d+0x36>
 8002fc2:	220b      	movs	r2, #11
 8002fc4:	0021      	movs	r1, r4
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	40d1      	lsrs	r1, r2
 8002fca:	3015      	adds	r0, #21
 8002fcc:	030a      	lsls	r2, r1, #12
 8002fce:	4084      	lsls	r4, r0
 8002fd0:	0b12      	lsrs	r2, r2, #12
 8002fd2:	e001      	b.n	8002fd8 <__aeabi_ui2d+0x2c>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	0020      	movs	r0, r4
 8002fde:	0019      	movs	r1, r3
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	0022      	movs	r2, r4
 8002fe4:	380b      	subs	r0, #11
 8002fe6:	4082      	lsls	r2, r0
 8002fe8:	0312      	lsls	r2, r2, #12
 8002fea:	2400      	movs	r4, #0
 8002fec:	0b12      	lsrs	r2, r2, #12
 8002fee:	e7f3      	b.n	8002fd8 <__aeabi_ui2d+0x2c>
 8002ff0:	0000041e 	.word	0x0000041e

08002ff4 <__aeabi_f2d>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	0242      	lsls	r2, r0, #9
 8002ff8:	0043      	lsls	r3, r0, #1
 8002ffa:	0fc4      	lsrs	r4, r0, #31
 8002ffc:	20fe      	movs	r0, #254	@ 0xfe
 8002ffe:	0e1b      	lsrs	r3, r3, #24
 8003000:	1c59      	adds	r1, r3, #1
 8003002:	0a55      	lsrs	r5, r2, #9
 8003004:	4208      	tst	r0, r1
 8003006:	d00c      	beq.n	8003022 <__aeabi_f2d+0x2e>
 8003008:	21e0      	movs	r1, #224	@ 0xe0
 800300a:	0089      	lsls	r1, r1, #2
 800300c:	468c      	mov	ip, r1
 800300e:	076d      	lsls	r5, r5, #29
 8003010:	0b12      	lsrs	r2, r2, #12
 8003012:	4463      	add	r3, ip
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4323      	orrs	r3, r4
 800301c:	0028      	movs	r0, r5
 800301e:	0019      	movs	r1, r3
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <__aeabi_f2d+0x5c>
 8003026:	2d00      	cmp	r5, #0
 8003028:	d01b      	beq.n	8003062 <__aeabi_f2d+0x6e>
 800302a:	0028      	movs	r0, r5
 800302c:	f000 f8ac 	bl	8003188 <__clzsi2>
 8003030:	280a      	cmp	r0, #10
 8003032:	dc1c      	bgt.n	800306e <__aeabi_f2d+0x7a>
 8003034:	230b      	movs	r3, #11
 8003036:	002a      	movs	r2, r5
 8003038:	1a1b      	subs	r3, r3, r0
 800303a:	40da      	lsrs	r2, r3
 800303c:	0003      	movs	r3, r0
 800303e:	3315      	adds	r3, #21
 8003040:	409d      	lsls	r5, r3
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <__aeabi_f2d+0x88>)
 8003044:	0312      	lsls	r2, r2, #12
 8003046:	1a1b      	subs	r3, r3, r0
 8003048:	055b      	lsls	r3, r3, #21
 800304a:	0b12      	lsrs	r2, r2, #12
 800304c:	0d5b      	lsrs	r3, r3, #21
 800304e:	e7e1      	b.n	8003014 <__aeabi_f2d+0x20>
 8003050:	2d00      	cmp	r5, #0
 8003052:	d009      	beq.n	8003068 <__aeabi_f2d+0x74>
 8003054:	0b13      	lsrs	r3, r2, #12
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	0312      	lsls	r2, r2, #12
 800305a:	431a      	orrs	r2, r3
 800305c:	076d      	lsls	r5, r5, #29
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <__aeabi_f2d+0x8c>)
 8003060:	e7d8      	b.n	8003014 <__aeabi_f2d+0x20>
 8003062:	2300      	movs	r3, #0
 8003064:	2200      	movs	r2, #0
 8003066:	e7d5      	b.n	8003014 <__aeabi_f2d+0x20>
 8003068:	2200      	movs	r2, #0
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <__aeabi_f2d+0x8c>)
 800306c:	e7d2      	b.n	8003014 <__aeabi_f2d+0x20>
 800306e:	0003      	movs	r3, r0
 8003070:	002a      	movs	r2, r5
 8003072:	3b0b      	subs	r3, #11
 8003074:	409a      	lsls	r2, r3
 8003076:	2500      	movs	r5, #0
 8003078:	e7e3      	b.n	8003042 <__aeabi_f2d+0x4e>
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	00000389 	.word	0x00000389
 8003080:	000007ff 	.word	0x000007ff

08003084 <__aeabi_d2f>:
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003086:	004b      	lsls	r3, r1, #1
 8003088:	030f      	lsls	r7, r1, #12
 800308a:	0d5b      	lsrs	r3, r3, #21
 800308c:	4c3a      	ldr	r4, [pc, #232]	@ (8003178 <__aeabi_d2f+0xf4>)
 800308e:	0f45      	lsrs	r5, r0, #29
 8003090:	b083      	sub	sp, #12
 8003092:	0a7f      	lsrs	r7, r7, #9
 8003094:	1c5e      	adds	r6, r3, #1
 8003096:	432f      	orrs	r7, r5
 8003098:	9000      	str	r0, [sp, #0]
 800309a:	9101      	str	r1, [sp, #4]
 800309c:	0fca      	lsrs	r2, r1, #31
 800309e:	00c5      	lsls	r5, r0, #3
 80030a0:	4226      	tst	r6, r4
 80030a2:	d00b      	beq.n	80030bc <__aeabi_d2f+0x38>
 80030a4:	4935      	ldr	r1, [pc, #212]	@ (800317c <__aeabi_d2f+0xf8>)
 80030a6:	185c      	adds	r4, r3, r1
 80030a8:	2cfe      	cmp	r4, #254	@ 0xfe
 80030aa:	dd13      	ble.n	80030d4 <__aeabi_d2f+0x50>
 80030ac:	20ff      	movs	r0, #255	@ 0xff
 80030ae:	2300      	movs	r3, #0
 80030b0:	05c0      	lsls	r0, r0, #23
 80030b2:	4318      	orrs	r0, r3
 80030b4:	07d2      	lsls	r2, r2, #31
 80030b6:	4310      	orrs	r0, r2
 80030b8:	b003      	add	sp, #12
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	433d      	orrs	r5, r7
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <__aeabi_d2f+0x42>
 80030c2:	2000      	movs	r0, #0
 80030c4:	e7f4      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	d0f0      	beq.n	80030ac <__aeabi_d2f+0x28>
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	03db      	lsls	r3, r3, #15
 80030ce:	20ff      	movs	r0, #255	@ 0xff
 80030d0:	433b      	orrs	r3, r7
 80030d2:	e7ed      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030d4:	2c00      	cmp	r4, #0
 80030d6:	dd0c      	ble.n	80030f2 <__aeabi_d2f+0x6e>
 80030d8:	9b00      	ldr	r3, [sp, #0]
 80030da:	00ff      	lsls	r7, r7, #3
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	4183      	sbcs	r3, r0
 80030e2:	0f69      	lsrs	r1, r5, #29
 80030e4:	433b      	orrs	r3, r7
 80030e6:	430b      	orrs	r3, r1
 80030e8:	0759      	lsls	r1, r3, #29
 80030ea:	d127      	bne.n	800313c <__aeabi_d2f+0xb8>
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	b2e0      	uxtb	r0, r4
 80030f0:	e7de      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030f2:	0021      	movs	r1, r4
 80030f4:	3117      	adds	r1, #23
 80030f6:	db31      	blt.n	800315c <__aeabi_d2f+0xd8>
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	201e      	movs	r0, #30
 80030fc:	0409      	lsls	r1, r1, #16
 80030fe:	4339      	orrs	r1, r7
 8003100:	1b00      	subs	r0, r0, r4
 8003102:	281f      	cmp	r0, #31
 8003104:	dd2d      	ble.n	8003162 <__aeabi_d2f+0xde>
 8003106:	2602      	movs	r6, #2
 8003108:	4276      	negs	r6, r6
 800310a:	1b34      	subs	r4, r6, r4
 800310c:	000e      	movs	r6, r1
 800310e:	40e6      	lsrs	r6, r4
 8003110:	0034      	movs	r4, r6
 8003112:	2820      	cmp	r0, #32
 8003114:	d004      	beq.n	8003120 <__aeabi_d2f+0x9c>
 8003116:	481a      	ldr	r0, [pc, #104]	@ (8003180 <__aeabi_d2f+0xfc>)
 8003118:	4684      	mov	ip, r0
 800311a:	4463      	add	r3, ip
 800311c:	4099      	lsls	r1, r3
 800311e:	430d      	orrs	r5, r1
 8003120:	002b      	movs	r3, r5
 8003122:	1e59      	subs	r1, r3, #1
 8003124:	418b      	sbcs	r3, r1
 8003126:	4323      	orrs	r3, r4
 8003128:	0759      	lsls	r1, r3, #29
 800312a:	d003      	beq.n	8003134 <__aeabi_d2f+0xb0>
 800312c:	210f      	movs	r1, #15
 800312e:	4019      	ands	r1, r3
 8003130:	2904      	cmp	r1, #4
 8003132:	d10b      	bne.n	800314c <__aeabi_d2f+0xc8>
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	2000      	movs	r0, #0
 8003138:	0a5b      	lsrs	r3, r3, #9
 800313a:	e7b9      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800313c:	210f      	movs	r1, #15
 800313e:	4019      	ands	r1, r3
 8003140:	2904      	cmp	r1, #4
 8003142:	d104      	bne.n	800314e <__aeabi_d2f+0xca>
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	0a5b      	lsrs	r3, r3, #9
 8003148:	b2e0      	uxtb	r0, r4
 800314a:	e7b1      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800314c:	2400      	movs	r4, #0
 800314e:	3304      	adds	r3, #4
 8003150:	0159      	lsls	r1, r3, #5
 8003152:	d5f7      	bpl.n	8003144 <__aeabi_d2f+0xc0>
 8003154:	3401      	adds	r4, #1
 8003156:	2300      	movs	r3, #0
 8003158:	b2e0      	uxtb	r0, r4
 800315a:	e7a9      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800315c:	2000      	movs	r0, #0
 800315e:	2300      	movs	r3, #0
 8003160:	e7a6      	b.n	80030b0 <__aeabi_d2f+0x2c>
 8003162:	4c08      	ldr	r4, [pc, #32]	@ (8003184 <__aeabi_d2f+0x100>)
 8003164:	191c      	adds	r4, r3, r4
 8003166:	002b      	movs	r3, r5
 8003168:	40a5      	lsls	r5, r4
 800316a:	40c3      	lsrs	r3, r0
 800316c:	40a1      	lsls	r1, r4
 800316e:	1e68      	subs	r0, r5, #1
 8003170:	4185      	sbcs	r5, r0
 8003172:	4329      	orrs	r1, r5
 8003174:	430b      	orrs	r3, r1
 8003176:	e7d7      	b.n	8003128 <__aeabi_d2f+0xa4>
 8003178:	000007fe 	.word	0x000007fe
 800317c:	fffffc80 	.word	0xfffffc80
 8003180:	fffffca2 	.word	0xfffffca2
 8003184:	fffffc82 	.word	0xfffffc82

08003188 <__clzsi2>:
 8003188:	211c      	movs	r1, #28
 800318a:	2301      	movs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	4298      	cmp	r0, r3
 8003190:	d301      	bcc.n	8003196 <__clzsi2+0xe>
 8003192:	0c00      	lsrs	r0, r0, #16
 8003194:	3910      	subs	r1, #16
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	4298      	cmp	r0, r3
 800319a:	d301      	bcc.n	80031a0 <__clzsi2+0x18>
 800319c:	0a00      	lsrs	r0, r0, #8
 800319e:	3908      	subs	r1, #8
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d301      	bcc.n	80031aa <__clzsi2+0x22>
 80031a6:	0900      	lsrs	r0, r0, #4
 80031a8:	3904      	subs	r1, #4
 80031aa:	a202      	add	r2, pc, #8	@ (adr r2, 80031b4 <__clzsi2+0x2c>)
 80031ac:	5c10      	ldrb	r0, [r2, r0]
 80031ae:	1840      	adds	r0, r0, r1
 80031b0:	4770      	bx	lr
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	02020304 	.word	0x02020304
 80031b8:	01010101 	.word	0x01010101
	...

080031c4 <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	0002      	movs	r2, r0
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	1c0a      	adds	r2, r1, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 80031d6:	210c      	movs	r1, #12
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	1dfa      	adds	r2, r7, #7
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	1dba      	adds	r2, r7, #6
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <_ds3231_setreg+0x40>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	187a      	adds	r2, r7, r1
 80031ee:	23fa      	movs	r3, #250	@ 0xfa
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2302      	movs	r3, #2
 80031f6:	21d0      	movs	r1, #208	@ 0xd0
 80031f8:	f003 fe6c 	bl	8006ed4 <HAL_I2C_Master_Transmit>
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000000 	.word	0x20000000

08003208 <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b087      	sub	sp, #28
 800320c:	af02      	add	r7, sp, #8
 800320e:	0002      	movs	r2, r0
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <_ds3231_getreg+0x44>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	1dfa      	adds	r2, r7, #7
 800321a:	23fa      	movs	r3, #250	@ 0xfa
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	21d0      	movs	r1, #208	@ 0xd0
 8003224:	f003 fe56 	bl	8006ed4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 8003228:	4b08      	ldr	r3, [pc, #32]	@ (800324c <_ds3231_getreg+0x44>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	240f      	movs	r4, #15
 800322e:	193a      	adds	r2, r7, r4
 8003230:	23fa      	movs	r3, #250	@ 0xfa
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2301      	movs	r3, #1
 8003238:	21d0      	movs	r1, #208	@ 0xd0
 800323a:	f003 ff75 	bl	8007128 <HAL_I2C_Master_Receive>
	return val;
 800323e:	193b      	adds	r3, r7, r4
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b005      	add	sp, #20
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	20000000 	.word	0x20000000

08003250 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	0005      	movs	r5, r0
 8003258:	000c      	movs	r4, r1
 800325a:	0010      	movs	r0, r2
 800325c:	0019      	movs	r1, r3
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	1c2a      	adds	r2, r5, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	1c22      	adds	r2, r4, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	1d7b      	adds	r3, r7, #5
 800326c:	1c02      	adds	r2, r0, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	1c0a      	adds	r2, r1, #0
 8003274:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 8003276:	2328      	movs	r3, #40	@ 0x28
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2217      	movs	r2, #23
 800327e:	18bc      	adds	r4, r7, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f8ed 	bl	8003460 <_dec_to_bcd>
 8003286:	0003      	movs	r3, r0
 8003288:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2216      	movs	r2, #22
 8003290:	18bc      	adds	r4, r7, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f8e4 	bl	8003460 <_dec_to_bcd>
 8003298:	0003      	movs	r3, r0
 800329a:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 800329c:	1d7b      	adds	r3, r7, #5
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2215      	movs	r2, #21
 80032a2:	18bc      	adds	r4, r7, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f8db 	bl	8003460 <_dec_to_bcd>
 80032aa:	0003      	movs	r3, r0
 80032ac:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2214      	movs	r2, #20
 80032b4:	18bc      	adds	r4, r7, r2
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8d2 	bl	8003460 <_dec_to_bcd>
 80032bc:	0003      	movs	r3, r0
 80032be:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d858      	bhi.n	800337a <ds3231_setalarm1+0x12a>
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	4b54      	ldr	r3, [pc, #336]	@ (800341c <ds3231_setalarm1+0x1cc>)
 80032cc:	18d3      	adds	r3, r2, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032d2:	2214      	movs	r2, #20
 80032d4:	18bb      	adds	r3, r7, r2
 80032d6:	18ba      	adds	r2, r7, r2
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	4249      	negs	r1, r1
 80032de:	430a      	orrs	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
	  break;
 80032e2:	e04d      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032e4:	2214      	movs	r2, #20
 80032e6:	18bb      	adds	r3, r7, r2
 80032e8:	18ba      	adds	r2, r7, r2
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	4249      	negs	r1, r1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80032f4:	2215      	movs	r2, #21
 80032f6:	18bb      	adds	r3, r7, r2
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	4249      	negs	r1, r1
 8003300:	430a      	orrs	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
	  break;
 8003304:	e03c      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 8003306:	2214      	movs	r2, #20
 8003308:	18bb      	adds	r3, r7, r2
 800330a:	18ba      	adds	r2, r7, r2
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	4249      	negs	r1, r1
 8003312:	430a      	orrs	r2, r1
 8003314:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003316:	2215      	movs	r2, #21
 8003318:	18bb      	adds	r3, r7, r2
 800331a:	18ba      	adds	r2, r7, r2
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	4249      	negs	r1, r1
 8003322:	430a      	orrs	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003326:	2216      	movs	r2, #22
 8003328:	18bb      	adds	r3, r7, r2
 800332a:	18ba      	adds	r2, r7, r2
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	2180      	movs	r1, #128	@ 0x80
 8003330:	4249      	negs	r1, r1
 8003332:	430a      	orrs	r2, r1
 8003334:	701a      	strb	r2, [r3, #0]
	  break;
 8003336:	e023      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 8003338:	2214      	movs	r2, #20
 800333a:	18bb      	adds	r3, r7, r2
 800333c:	18ba      	adds	r2, r7, r2
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	2180      	movs	r1, #128	@ 0x80
 8003342:	4249      	negs	r1, r1
 8003344:	430a      	orrs	r2, r1
 8003346:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003348:	2215      	movs	r2, #21
 800334a:	18bb      	adds	r3, r7, r2
 800334c:	18ba      	adds	r2, r7, r2
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	4249      	negs	r1, r1
 8003354:	430a      	orrs	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003358:	2216      	movs	r2, #22
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	4249      	negs	r1, r1
 8003364:	430a      	orrs	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 8003368:	2217      	movs	r2, #23
 800336a:	18bb      	adds	r3, r7, r2
 800336c:	18ba      	adds	r2, r7, r2
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	2180      	movs	r1, #128	@ 0x80
 8003372:	4249      	negs	r1, r1
 8003374:	430a      	orrs	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
	  break;
 8003378:	e002      	b.n	8003380 <ds3231_setalarm1+0x130>
  default:
	  break;
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	e000      	b.n	8003380 <ds3231_setalarm1+0x130>
	  break;
 800337e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8003380:	2013      	movs	r0, #19
 8003382:	183b      	adds	r3, r7, r0
 8003384:	2207      	movs	r2, #7
 8003386:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8003388:	210c      	movs	r1, #12
 800338a:	187b      	adds	r3, r7, r1
 800338c:	183a      	adds	r2, r7, r0
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2217      	movs	r2, #23
 8003396:	18ba      	adds	r2, r7, r2
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	705a      	strb	r2, [r3, #1]
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2216      	movs	r2, #22
 80033a0:	18ba      	adds	r2, r7, r2
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	709a      	strb	r2, [r3, #2]
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2215      	movs	r2, #21
 80033aa:	18ba      	adds	r2, r7, r2
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	70da      	strb	r2, [r3, #3]
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	2214      	movs	r2, #20
 80033b4:	18ba      	adds	r2, r7, r2
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 80033ba:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <ds3231_setalarm1+0x1d0>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	187a      	adds	r2, r7, r1
 80033c0:	23fa      	movs	r3, #250	@ 0xfa
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2305      	movs	r3, #5
 80033c8:	21d0      	movs	r1, #208	@ 0xd0
 80033ca:	f003 fd83 	bl	8006ed4 <HAL_I2C_Master_Transmit>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d001      	beq.n	80033d6 <ds3231_setalarm1+0x186>
 80033d2:	2300      	movs	r3, #0
 80033d4:	e01d      	b.n	8003412 <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 80033d6:	2512      	movs	r5, #18
 80033d8:	197b      	adds	r3, r7, r5
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 80033de:	197c      	adds	r4, r7, r5
 80033e0:	200e      	movs	r0, #14
 80033e2:	f7ff ff11 	bl	8003208 <_ds3231_getreg>
 80033e6:	0003      	movs	r3, r0
 80033e8:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 80033ea:	0028      	movs	r0, r5
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	183a      	adds	r2, r7, r0
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	183a      	adds	r2, r7, r0
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	2104      	movs	r1, #4
 8003400:	430a      	orrs	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 8003404:	183b      	adds	r3, r7, r0
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	0019      	movs	r1, r3
 800340a:	200e      	movs	r0, #14
 800340c:	f7ff feda 	bl	80031c4 <_ds3231_setreg>

  return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bdb0      	pop	{r4, r5, r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	0800e3b8 	.word	0x0800e3b8
 8003420:	20000000 	.word	0x20000000

08003424 <ds3231_clearflagalarm1>:
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);

  return 1;
}

void ds3231_clearflagalarm1() {
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 800342a:	1dfc      	adds	r4, r7, #7
 800342c:	200f      	movs	r0, #15
 800342e:	f7ff feeb 	bl	8003208 <_ds3231_getreg>
 8003432:	0003      	movs	r3, r0
 8003434:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0019      	movs	r1, r3
 8003452:	200f      	movs	r0, #15
 8003454:	f7ff feb6 	bl	80031c4 <_ds3231_setreg>
  }
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b003      	add	sp, #12
 800345e:	bd90      	pop	{r4, r7, pc}

08003460 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	210a      	movs	r1, #10
 800346c:	0018      	movs	r0, r3
 800346e:	f7fc feed 	bl	800024c <__divsi3>
 8003472:	0003      	movs	r3, r0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	b2dc      	uxtb	r4, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	210a      	movs	r1, #10
 800347e:	0018      	movs	r0, r3
 8003480:	f7fc ffca 	bl	8000418 <__aeabi_idivmod>
 8003484:	000b      	movs	r3, r1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	18e3      	adds	r3, r4, r3
 800348a:	b2db      	uxtb	r3, r3
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b003      	add	sp, #12
 8003492:	bd90      	pop	{r4, r7, pc}

08003494 <led_blink>:
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;
uint8_t led_blink_flag;

void led_blink() {
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	LED_ON();
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <led_blink+0x1c>)
 800349a:	2201      	movs	r2, #1
 800349c:	2102      	movs	r1, #2
 800349e:	0018      	movs	r0, r3
 80034a0:	f003 fc21 	bl	8006ce6 <HAL_GPIO_WritePin>
	led_blink_flag = 1;
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <led_blink+0x20>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	50001400 	.word	0x50001400
 80034b4:	20000530 	.word	0x20000530

080034b8 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 80034c0:	4b40      	ldr	r3, [pc, #256]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	23fa      	movs	r3, #250	@ 0xfa
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d34f      	bcc.n	800356c <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e041      	b.n	800355a <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80034d6:	250f      	movs	r5, #15
 80034d8:	197b      	adds	r3, r7, r5
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	58d2      	ldr	r2, [r2, r3]
 80034e2:	197b      	adds	r3, r7, r5
 80034e4:	781c      	ldrb	r4, [r3, #0]
 80034e6:	23fa      	movs	r3, #250	@ 0xfa
 80034e8:	0059      	lsls	r1, r3, #1
 80034ea:	0010      	movs	r0, r2
 80034ec:	f7fc fe24 	bl	8000138 <__udivsi3>
 80034f0:	0003      	movs	r3, r0
 80034f2:	0019      	movs	r1, r3
 80034f4:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 80034f6:	00a2      	lsls	r2, r4, #2
 80034f8:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b32      	ldr	r3, [pc, #200]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	58d3      	ldr	r3, [r2, r3]
 8003504:	2bc7      	cmp	r3, #199	@ 0xc7
 8003506:	d805      	bhi.n	8003514 <HAL_ADC_ConvCpltCallback+0x5c>
 8003508:	197b      	adds	r3, r7, r5
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	4b2e      	ldr	r3, [pc, #184]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	2100      	movs	r1, #0
 8003512:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8003514:	250f      	movs	r5, #15
 8003516:	197b      	adds	r3, r7, r5
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	58d3      	ldr	r3, [r2, r3]
 8003520:	0018      	movs	r0, r3
 8003522:	f7fd fd81 	bl	8001028 <__aeabi_ui2f>
 8003526:	197b      	adds	r3, r7, r5
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_ADC_ConvCpltCallback+0x114>)
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	58d2      	ldr	r2, [r2, r3]
 8003530:	197b      	adds	r3, r7, r5
 8003532:	781c      	ldrb	r4, [r3, #0]
 8003534:	1c11      	adds	r1, r2, #0
 8003536:	f7fd fbad 	bl	8000c94 <__aeabi_fmul>
 800353a:	1c03      	adds	r3, r0, #0
 800353c:	1c19      	adds	r1, r3, #0
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_ADC_ConvCpltCallback+0x118>)
 8003540:	00a2      	lsls	r2, r4, #2
 8003542:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003544:	197b      	adds	r3, r7, r5
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	2100      	movs	r1, #0
 800354e:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003550:	197b      	adds	r3, r7, r5
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	197b      	adds	r3, r7, r5
 8003556:	3201      	adds	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	230f      	movs	r3, #15
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d9b8      	bls.n	80034d6 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 800356a:	e026      	b.n	80035ba <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 800356c:	230e      	movs	r3, #14
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e016      	b.n	80035a4 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003576:	200e      	movs	r0, #14
 8003578:	183b      	adds	r3, r7, r0
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	58d3      	ldr	r3, [r2, r3]
 8003582:	183a      	adds	r2, r7, r0
 8003584:	7811      	ldrb	r1, [r2, #0]
 8003586:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003588:	0049      	lsls	r1, r1, #1
 800358a:	5a8a      	ldrh	r2, [r1, r2]
 800358c:	0011      	movs	r1, r2
 800358e:	183a      	adds	r2, r7, r0
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	1859      	adds	r1, r3, r1
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 800359a:	183b      	adds	r3, r7, r0
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	3201      	adds	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	230e      	movs	r3, #14
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d9e3      	bls.n	8003576 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035b8:	801a      	strh	r2, [r3, #0]
}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	200005fe 	.word	0x200005fe
 80035c8:	20000600 	.word	0x20000600
 80035cc:	20000004 	.word	0x20000004
 80035d0:	20000544 	.word	0x20000544
 80035d4:	20000550 	.word	0x20000550

080035d8 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	0002      	movs	r2, r0
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d112      	bne.n	8003612 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 80035f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	2101      	movs	r1, #1
 80035fe:	0018      	movs	r0, r3
 8003600:	f003 fb71 	bl	8006ce6 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	019b      	lsls	r3, r3, #6
 8003608:	480a      	ldr	r0, [pc, #40]	@ (8003634 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800360a:	2200      	movs	r2, #0
 800360c:	0019      	movs	r1, r3
 800360e:	f003 fb6a 	bl	8006ce6 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d102      	bne.n	8003620 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000560 	.word	0x20000560
 800362c:	2000055d 	.word	0x2000055d
 8003630:	50001400 	.word	0x50001400
 8003634:	50000800 	.word	0x50000800
 8003638:	2000056a 	.word	0x2000056a

0800363c <gsm_cmd>:
/* Util funcs */
// Check if target string exists in buffer
uint8_t find_string_in_buffer(const char* buffer, const char* target) {
}

uint8_t gsm_cmd(char *cmd, char *op_check, uint16_t wtime) {
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	4c20      	ldr	r4, [pc, #128]	@ (80036c0 <gsm_cmd+0x84>)
 8003640:	44a5      	add	sp, r4
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <gsm_cmd+0x88>)
 800364a:	2582      	movs	r5, #130	@ 0x82
 800364c:	00ad      	lsls	r5, r5, #2
 800364e:	195b      	adds	r3, r3, r5
 8003650:	19db      	adds	r3, r3, r7
 8003652:	801a      	strh	r2, [r3, #0]
	char cmd_string[500];
	memset(cmd_string, 0, 20);
 8003654:	2414      	movs	r4, #20
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2214      	movs	r2, #20
 800365a:	2100      	movs	r1, #0
 800365c:	0018      	movs	r0, r3
 800365e:	f008 fbff 	bl	800be60 <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <gsm_cmd+0x8c>)
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4919      	ldr	r1, [pc, #100]	@ (80036cc <gsm_cmd+0x90>)
 8003668:	1938      	adds	r0, r7, r4
 800366a:	f008 fb8b 	bl	800bd84 <siprintf>
	gsm_tx_busy = 1;
 800366e:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <gsm_cmd+0x94>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
	gsm_rx_timeout = wtime * 10;
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <gsm_cmd+0x88>)
 8003676:	195b      	adds	r3, r3, r5
 8003678:	19db      	adds	r3, r3, r7
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	1c1a      	adds	r2, r3, #0
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	18db      	adds	r3, r3, r3
 8003684:	b29a      	uxth	r2, r3
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <gsm_cmd+0x98>)
 8003688:	801a      	strh	r2, [r3, #0]
	strcpy(gsm_match_resp, op_check);
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <gsm_cmd+0x9c>)
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f008 fc82 	bl	800bf9a <strcpy>
	gsm_status = GSM_WAIT;
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <gsm_cmd+0xa0>)
 8003698:	2202      	movs	r2, #2
 800369a:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
 800369c:	193b      	adds	r3, r7, r4
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fc fd2e 	bl	8000100 <strlen>
 80036a4:	0003      	movs	r3, r0
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	1939      	adds	r1, r7, r4
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <gsm_cmd+0xa4>)
 80036ac:	0018      	movs	r0, r3
 80036ae:	f006 fb99 	bl	8009de4 <HAL_UART_Transmit_DMA>
 80036b2:	0003      	movs	r3, r0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	2382      	movs	r3, #130	@ 0x82
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	449d      	add	sp, r3
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	fffffdf8 	.word	0xfffffdf8
 80036c4:	fffffdfe 	.word	0xfffffdfe
 80036c8:	0800e170 	.word	0x0800e170
 80036cc:	0800e174 	.word	0x0800e174
 80036d0:	20000578 	.word	0x20000578
 80036d4:	2000057e 	.word	0x2000057e
 80036d8:	200005e8 	.word	0x200005e8
 80036dc:	2000057a 	.word	0x2000057a
 80036e0:	200003d8 	.word	0x200003d8

080036e4 <gsm_is_valid_resp>:

uint8_t gsm_is_valid_resp() {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 80036e8:	4a06      	ldr	r2, [pc, #24]	@ (8003704 <gsm_is_valid_resp+0x20>)
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <gsm_is_valid_resp+0x24>)
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f008 fbbe 	bl	800be70 <strstr>
 80036f4:	0003      	movs	r3, r0
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	4193      	sbcs	r3, r2
 80036fa:	b2db      	uxtb	r3, r3
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	200005e8 	.word	0x200005e8
 8003708:	20000584 	.word	0x20000584

0800370c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_UART_TxCpltCallback+0x44>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d114      	bne.n	8003748 <HAL_UART_TxCpltCallback+0x3c>
		gsm_tx_busy = 0;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <HAL_UART_TxCpltCallback+0x48>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
		gsm_rx_busy = 1;
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <HAL_UART_TxCpltCallback+0x4c>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
		memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
 800372a:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <HAL_UART_TxCpltCallback+0x50>)
 800372c:	2264      	movs	r2, #100	@ 0x64
 800372e:	2100      	movs	r1, #0
 8003730:	0018      	movs	r0, r3
 8003732:	f008 fb95 	bl	800be60 <memset>
		HAL_UART_Receive_DMA(huart, gsm_rx_buffer, GSM_RX_BUFFER_SIZE);
 8003736:	4909      	ldr	r1, [pc, #36]	@ (800375c <HAL_UART_TxCpltCallback+0x50>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2264      	movs	r2, #100	@ 0x64
 800373c:	0018      	movs	r0, r3
 800373e:	f006 fbe3 	bl	8009f08 <HAL_UART_Receive_DMA>
		gsm_rx_flag = 1;
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_UART_TxCpltCallback+0x54>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
	}
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40004800 	.word	0x40004800
 8003754:	20000578 	.word	0x20000578
 8003758:	20000579 	.word	0x20000579
 800375c:	20000584 	.word	0x20000584
 8003760:	20000581 	.word	0x20000581

08003764 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a8a      	ldr	r2, [pc, #552]	@ (800399c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d000      	beq.n	8003778 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003776:	e10c      	b.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8003778:	4b89      	ldr	r3, [pc, #548]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a89      	ldr	r2, [pc, #548]	@ (80039a4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d927      	bls.n	80037d2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(sec > 60) {
 8003782:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b3c      	cmp	r3, #60	@ 0x3c
 8003788:	d916      	bls.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 800378a:	4b88      	ldr	r3, [pc, #544]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003790:	d909      	bls.n	80037a6 <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8003792:	4b86      	ldr	r3, [pc, #536]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
					hr++;
 8003798:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	e004      	b.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 80037a6:	4b81      	ldr	r3, [pc, #516]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4b7f      	ldr	r3, [pc, #508]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037ae:	601a      	str	r2, [r3, #0]
				sec = 0;
 80037b0:	4b7d      	ldr	r3, [pc, #500]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e005      	b.n	80037c4 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 80037b8:	4b7b      	ldr	r3, [pc, #492]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b79      	ldr	r3, [pc, #484]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037c2:	701a      	strb	r2, [r3, #0]
			ms = 0;
 80037c4:	4b76      	ldr	r3, [pc, #472]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
			vi_update_flag = 1;
 80037ca:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e004      	b.n	80037dc <HAL_TIM_PeriodElapsedCallback+0x78>
			/*###*/
		} else ms++;
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	4b71      	ldr	r3, [pc, #452]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037da:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 80037dc:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4975      	ldr	r1, [pc, #468]	@ (80039b8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fc fd2e 	bl	8000244 <__aeabi_uidivmod>
 80037e8:	1e0b      	subs	r3, r1, #0
 80037ea:	d102      	bne.n	80037f2 <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_refresh_flag = 1;
 80037ec:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 80037f2:	4b73      	ldr	r3, [pc, #460]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_PeriodElapsedCallback+0xa0>
 80037fa:	4b72      	ldr	r3, [pc, #456]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	e000      	b.n	8003806 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003804:	2200      	movs	r2, #0
 8003806:	4b6f      	ldr	r3, [pc, #444]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003808:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 800380a:	4b6f      	ldr	r3, [pc, #444]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003812:	4b6e      	ldr	r3, [pc, #440]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	e000      	b.n	800381e <HAL_TIM_PeriodElapsedCallback+0xba>
 800381c:	2200      	movs	r2, #0
 800381e:	4b6b      	ldr	r3, [pc, #428]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003820:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003822:	4b6b      	ldr	r3, [pc, #428]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800382a:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	e000      	b.n	8003836 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003834:	2200      	movs	r2, #0
 8003836:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003838:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 800383a:	4b67      	ldr	r3, [pc, #412]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_TIM_PeriodElapsedCallback+0xe8>
 8003842:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	e000      	b.n	800384e <HAL_TIM_PeriodElapsedCallback+0xea>
 800384c:	2200      	movs	r2, #0
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003850:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8003852:	4b62      	ldr	r3, [pc, #392]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	23fa      	movs	r3, #250	@ 0xfa
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	429a      	cmp	r2, r3
 800385c:	d908      	bls.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 800385e:	4b5e      	ldr	r3, [pc, #376]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003864:	4b5e      	ldr	r3, [pc, #376]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003866:	2200      	movs	r2, #0
 8003868:	2102      	movs	r1, #2
 800386a:	0018      	movs	r0, r3
 800386c:	f003 fa3b 	bl	8006ce6 <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8003870:	4b5c      	ldr	r3, [pc, #368]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d14f      	bne.n	8003918 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8003878:	4b5b      	ldr	r3, [pc, #364]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8003880:	4b5a      	ldr	r3, [pc, #360]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1c18      	adds	r0, r3, #0
 8003886:	f7ff fbb5 	bl	8002ff4 <__aeabi_f2d>
 800388a:	4a59      	ldr	r2, [pc, #356]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800388e:	f7fd fc11 	bl	80010b4 <__aeabi_dadd>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	0010      	movs	r0, r2
 8003898:	0019      	movs	r1, r3
 800389a:	f7ff fbf3 	bl	8003084 <__aeabi_d2f>
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_PeriodElapsedCallback+0x140>
 80038a2:	2200      	movs	r2, #0
 80038a4:	4b51      	ldr	r3, [pc, #324]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80038a6:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 80038a8:	4b50      	ldr	r3, [pc, #320]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b52      	ldr	r3, [pc, #328]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c19      	adds	r1, r3, #0
 80038b2:	1c10      	adds	r0, r2, #0
 80038b4:	f7fc fe24 	bl	8000500 <__aeabi_fcmpge>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d03d      	beq.n	8003938 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 80038bc:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	2101      	movs	r1, #1
 80038c8:	0018      	movs	r0, r3
 80038ca:	f003 fa0c 	bl	8006ce6 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	484a      	ldr	r0, [pc, #296]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	0019      	movs	r1, r3
 80038d8:	f003 fa05 	bl	8006ce6 <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 100; i++);
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x18e>
 80038e6:	210f      	movs	r1, #15
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	3201      	adds	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	230f      	movs	r3, #15
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b63      	cmp	r3, #99	@ 0x63
 80038fa:	d9f4      	bls.n	80038e6 <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 80038fc:	4b38      	ldr	r3, [pc, #224]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	2101      	movs	r1, #1
 8003902:	0018      	movs	r0, r3
 8003904:	f003 f9ef 	bl	8006ce6 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003908:	2380      	movs	r3, #128	@ 0x80
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	483b      	ldr	r0, [pc, #236]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800390e:	2200      	movs	r2, #0
 8003910:	0019      	movs	r1, r3
 8003912:	f003 f9e8 	bl	8006ce6 <HAL_GPIO_WritePin>
 8003916:	e00f      	b.n	8003938 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800391a:	2200      	movs	r2, #0
 800391c:	2101      	movs	r1, #1
 800391e:	0018      	movs	r0, r3
 8003920:	f003 f9e1 	bl	8006ce6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	4834      	ldr	r0, [pc, #208]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800392a:	2200      	movs	r2, #0
 800392c:	0019      	movs	r1, r3
 800392e:	f003 f9da 	bl	8006ce6 <HAL_GPIO_WritePin>
			triac_time = 0;
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8003938:	4b31      	ldr	r3, [pc, #196]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8003942:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	e000      	b.n	8003950 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800394e:	2200      	movs	r2, #0
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003952:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29a      	uxth	r2, r3
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	429a      	cmp	r2, r3
 8003962:	d916      	bls.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 800396a:	f7ff febb 	bl	80036e4 <gsm_is_valid_resp>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8003972:	4b26      	ldr	r3, [pc, #152]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e002      	b.n	8003980 <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800397c:	2263      	movs	r2, #99	@ 0x63
 800397e:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8003986:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 800398c:	4b21      	ldr	r3, [pc, #132]	@ (8003a14 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	40014400 	.word	0x40014400
 80039a0:	20000534 	.word	0x20000534
 80039a4:	00002710 	.word	0x00002710
 80039a8:	20000538 	.word	0x20000538
 80039ac:	2000053c 	.word	0x2000053c
 80039b0:	20000540 	.word	0x20000540
 80039b4:	2000056b 	.word	0x2000056b
 80039b8:	00001388 	.word	0x00001388
 80039bc:	20000532 	.word	0x20000532
 80039c0:	20000524 	.word	0x20000524
 80039c4:	20000528 	.word	0x20000528
 80039c8:	20000525 	.word	0x20000525
 80039cc:	2000052a 	.word	0x2000052a
 80039d0:	20000526 	.word	0x20000526
 80039d4:	2000052c 	.word	0x2000052c
 80039d8:	20000530 	.word	0x20000530
 80039dc:	2000052e 	.word	0x2000052e
 80039e0:	50001400 	.word	0x50001400
 80039e4:	20000568 	.word	0x20000568
 80039e8:	2000055d 	.word	0x2000055d
 80039ec:	20000560 	.word	0x20000560
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	3fb99999 	.word	0x3fb99999
 80039f8:	20000564 	.word	0x20000564
 80039fc:	50000800 	.word	0x50000800
 8003a00:	20000581 	.word	0x20000581
 8003a04:	2000057c 	.word	0x2000057c
 8003a08:	2000057e 	.word	0x2000057e
 8003a0c:	2000057a 	.word	0x2000057a
 8003a10:	20000578 	.word	0x20000578
 8003a14:	20000579 	.word	0x20000579

08003a18 <EEPROM_Write>:
// Define the Page Size and number of pages
#define PAGE_SIZE 16     // in Bytes
#define PAGE_NUM  32    // number of pages

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	b08f      	sub	sp, #60	@ 0x3c
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	0004      	movs	r4, r0
 8003a20:	0008      	movs	r0, r1
 8003a22:	60ba      	str	r2, [r7, #8]
 8003a24:	0019      	movs	r1, r3
 8003a26:	250e      	movs	r5, #14
 8003a28:	197b      	adds	r3, r7, r5
 8003a2a:	1c22      	adds	r2, r4, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	240c      	movs	r4, #12
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	1c02      	adds	r2, r0, #0
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	1dbb      	adds	r3, r7, #6
 8003a38:	1c0a      	adds	r2, r1, #0
 8003a3a:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8003a40:	2326      	movs	r3, #38	@ 0x26
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	197a      	adds	r2, r7, r5
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8003a4a:	1dbb      	adds	r3, r7, #6
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da00      	bge.n	8003a5a <EEPROM_Write+0x42>
 8003a58:	330f      	adds	r3, #15
 8003a5a:	111b      	asrs	r3, r3, #4
 8003a5c:	b299      	uxth	r1, r3
 8003a5e:	201a      	movs	r0, #26
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	220e      	movs	r2, #14
 8003a64:	18ba      	adds	r2, r7, r2
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	188a      	adds	r2, r1, r2
 8003a6a:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8003a6c:	183a      	adds	r2, r7, r0
 8003a6e:	2326      	movs	r3, #38	@ 0x26
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	8812      	ldrh	r2, [r2, #0]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	2318      	movs	r3, #24
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	3201      	adds	r2, #1
 8003a80:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8003a82:	2324      	movs	r3, #36	@ 0x24
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	e044      	b.n	8003b1a <EEPROM_Write+0x102>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8003a90:	2526      	movs	r5, #38	@ 0x26
 8003a92:	197b      	adds	r3, r7, r5
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	0013      	movs	r3, r2
 8003a9c:	b21a      	sxth	r2, r3
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5e5b      	ldrsh	r3, [r3, r1]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b21a      	sxth	r2, r3
 8003aaa:	2116      	movs	r1, #22
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 8003ab0:	2414      	movs	r4, #20
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8003ab8:	2624      	movs	r6, #36	@ 0x24
 8003aba:	19bb      	adds	r3, r7, r6
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	18d3      	adds	r3, r2, r3
 8003ac2:	187a      	adds	r2, r7, r1
 8003ac4:	8811      	ldrh	r1, [r2, #0]
 8003ac6:	481a      	ldr	r0, [pc, #104]	@ (8003b30 <EEPROM_Write+0x118>)
 8003ac8:	22fa      	movs	r2, #250	@ 0xfa
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	9202      	str	r2, [sp, #8]
 8003ace:	193a      	adds	r2, r7, r4
 8003ad0:	8812      	ldrh	r2, [r2, #0]
 8003ad2:	9201      	str	r2, [sp, #4]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	000a      	movs	r2, r1
 8003ada:	21ae      	movs	r1, #174	@ 0xae
 8003adc:	f003 fc2c 	bl	8007338 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8003ae0:	197b      	adds	r3, r7, r5
 8003ae2:	197a      	adds	r2, r7, r5
 8003ae4:	8812      	ldrh	r2, [r2, #0]
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8003aea:	230c      	movs	r3, #12
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 8003af2:	1dbb      	adds	r3, r7, #6
 8003af4:	1db9      	adds	r1, r7, #6
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	8809      	ldrh	r1, [r1, #0]
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	1a8a      	subs	r2, r1, r2
 8003afe:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 8003b00:	19bb      	adds	r3, r7, r6
 8003b02:	19b9      	adds	r1, r7, r6
 8003b04:	193a      	adds	r2, r7, r4
 8003b06:	8809      	ldrh	r1, [r1, #0]
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	188a      	adds	r2, r1, r2
 8003b0c:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)/*TODO implement using timer: eeprom_busy_flag */
 8003b0e:	2005      	movs	r0, #5
 8003b10:	f001 fd64 	bl	80055dc <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	3301      	adds	r3, #1
 8003b18:	623b      	str	r3, [r7, #32]
 8003b1a:	2318      	movs	r3, #24
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	dbb4      	blt.n	8003a90 <EEPROM_Write+0x78>
	}
}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b00b      	add	sp, #44	@ 0x2c
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	200002d4 	.word	0x200002d4

08003b34 <EEPROM_Read>:
//
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	b08f      	sub	sp, #60	@ 0x3c
 8003b38:	af04      	add	r7, sp, #16
 8003b3a:	0004      	movs	r4, r0
 8003b3c:	0008      	movs	r0, r1
 8003b3e:	60ba      	str	r2, [r7, #8]
 8003b40:	0019      	movs	r1, r3
 8003b42:	250e      	movs	r5, #14
 8003b44:	197b      	adds	r3, r7, r5
 8003b46:	1c22      	adds	r2, r4, #0
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	240c      	movs	r4, #12
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	1c02      	adds	r2, r0, #0
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	1c0a      	adds	r2, r1, #0
 8003b56:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8003b58:	2304      	movs	r3, #4
 8003b5a:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8003b5c:	2326      	movs	r3, #38	@ 0x26
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	197a      	adds	r2, r7, r5
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	193b      	adds	r3, r7, r4
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da00      	bge.n	8003b76 <EEPROM_Read+0x42>
 8003b74:	330f      	adds	r3, #15
 8003b76:	111b      	asrs	r3, r3, #4
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	201a      	movs	r0, #26
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	220e      	movs	r2, #14
 8003b80:	18ba      	adds	r2, r7, r2
 8003b82:	8812      	ldrh	r2, [r2, #0]
 8003b84:	188a      	adds	r2, r1, r2
 8003b86:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 8003b88:	183a      	adds	r2, r7, r0
 8003b8a:	2326      	movs	r3, #38	@ 0x26
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	8812      	ldrh	r2, [r2, #0]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	2318      	movs	r3, #24
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	3201      	adds	r2, #1
 8003b9c:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8003b9e:	2324      	movs	r3, #36	@ 0x24
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	e03b      	b.n	8003c24 <EEPROM_Read+0xf0>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8003bac:	2426      	movs	r4, #38	@ 0x26
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	0013      	movs	r3, r2
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	260c      	movs	r6, #12
 8003bbc:	19bb      	adds	r3, r7, r6
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5e5b      	ldrsh	r3, [r3, r1]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b21a      	sxth	r2, r3
 8003bc6:	2116      	movs	r1, #22
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 8003bcc:	2514      	movs	r5, #20
 8003bce:	197b      	adds	r3, r7, r5
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, 2, 1000);
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	4818      	ldr	r0, [pc, #96]	@ (8003c3c <EEPROM_Read+0x108>)
 8003bda:	23fa      	movs	r3, #250	@ 0xfa
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	2302      	movs	r3, #2
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2302      	movs	r3, #2
 8003bea:	21ae      	movs	r1, #174	@ 0xae
 8003bec:	f003 fcd2 	bl	8007594 <HAL_I2C_Mem_Read>
		startPage += 1;
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	193a      	adds	r2, r7, r4
 8003bf4:	8812      	ldrh	r2, [r2, #0]
 8003bf6:	3201      	adds	r2, #1
 8003bf8:	801a      	strh	r2, [r3, #0]
		offset=0;
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8003c00:	1dbb      	adds	r3, r7, #6
 8003c02:	1db9      	adds	r1, r7, #6
 8003c04:	197a      	adds	r2, r7, r5
 8003c06:	8809      	ldrh	r1, [r1, #0]
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	1a8a      	subs	r2, r1, r2
 8003c0c:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	18bb      	adds	r3, r7, r2
 8003c12:	18b9      	adds	r1, r7, r2
 8003c14:	197a      	adds	r2, r7, r5
 8003c16:	8809      	ldrh	r1, [r1, #0]
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	188a      	adds	r2, r1, r2
 8003c1c:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	3301      	adds	r3, #1
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	2318      	movs	r3, #24
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dbbd      	blt.n	8003bac <EEPROM_Read+0x78>
	}
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b00b      	add	sp, #44	@ 0x2c
 8003c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	200002d4 	.word	0x200002d4

08003c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	46de      	mov	lr, fp
 8003c44:	4657      	mov	r7, sl
 8003c46:	464e      	mov	r6, r9
 8003c48:	4645      	mov	r5, r8
 8003c4a:	b5e0      	push	{r5, r6, r7, lr}
 8003c4c:	b0cd      	sub	sp, #308	@ 0x134
 8003c4e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c50:	f001 fc3e 	bl	80054d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c54:	f000 fce6 	bl	8004624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c58:	f000 fed0 	bl	80049fc <MX_GPIO_Init>
  MX_DMA_Init();
 8003c5c:	f000 fea8 	bl	80049b0 <MX_DMA_Init>
  MX_TIM16_Init();
 8003c60:	f000 fe4c 	bl	80048fc <MX_TIM16_Init>
  MX_I2C1_Init();
 8003c64:	f000 fdca 	bl	80047fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003c68:	f000 fe6e 	bl	8004948 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003c6c:	f000 fd34 	bl	80046d8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003c70:	f000 fe04 	bl	800487c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 8003c74:	4bfa      	ldr	r3, [pc, #1000]	@ (8004060 <main+0x420>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	2101      	movs	r1, #1
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f003 f833 	bl	8006ce6 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	48f7      	ldr	r0, [pc, #988]	@ (8004064 <main+0x424>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	0019      	movs	r1, r3
 8003c8a:	f003 f82c 	bl	8006ce6 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8003c8e:	23f8      	movs	r3, #248	@ 0xf8
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 8003c96:	2310      	movs	r3, #16
 8003c98:	33ff      	adds	r3, #255	@ 0xff
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8003ca0:	2386      	movs	r3, #134	@ 0x86
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 8003caa:	4bef      	ldr	r3, [pc, #956]	@ (8004068 <main+0x428>)
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003cb2:	4bed      	ldr	r3, [pc, #948]	@ (8004068 <main+0x428>)
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 8003cba:	4beb      	ldr	r3, [pc, #940]	@ (8004068 <main+0x428>)
 8003cbc:	2280      	movs	r2, #128	@ 0x80
 8003cbe:	0212      	lsls	r2, r2, #8
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 8003cc2:	4be9      	ldr	r3, [pc, #932]	@ (8004068 <main+0x428>)
 8003cc4:	2280      	movs	r2, #128	@ 0x80
 8003cc6:	0212      	lsls	r2, r2, #8
 8003cc8:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 8003cca:	4be7      	ldr	r3, [pc, #924]	@ (8004068 <main+0x428>)
 8003ccc:	2280      	movs	r2, #128	@ 0x80
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003cd2:	4be5      	ldr	r3, [pc, #916]	@ (8004068 <main+0x428>)
 8003cd4:	2280      	movs	r2, #128	@ 0x80
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 8003cda:	4be3      	ldr	r3, [pc, #908]	@ (8004068 <main+0x428>)
 8003cdc:	2280      	movs	r2, #128	@ 0x80
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 8003ce2:	4be1      	ldr	r3, [pc, #900]	@ (8004068 <main+0x428>)
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	0212      	lsls	r2, r2, #8
 8003ce8:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 8003cea:	4bdf      	ldr	r3, [pc, #892]	@ (8004068 <main+0x428>)
 8003cec:	2280      	movs	r2, #128	@ 0x80
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003cf2:	4bdd      	ldr	r3, [pc, #884]	@ (8004068 <main+0x428>)
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 8003cfa:	4bdb      	ldr	r3, [pc, #876]	@ (8004068 <main+0x428>)
 8003cfc:	2280      	movs	r2, #128	@ 0x80
 8003cfe:	0212      	lsls	r2, r2, #8
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 8003d02:	4bd9      	ldr	r3, [pc, #868]	@ (8004068 <main+0x428>)
 8003d04:	2280      	movs	r2, #128	@ 0x80
 8003d06:	0212      	lsls	r2, r2, #8
 8003d08:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8003d0a:	4bd7      	ldr	r3, [pc, #860]	@ (8004068 <main+0x428>)
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	0152      	lsls	r2, r2, #5
 8003d10:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8003d12:	4bd5      	ldr	r3, [pc, #852]	@ (8004068 <main+0x428>)
 8003d14:	2280      	movs	r2, #128	@ 0x80
 8003d16:	01d2      	lsls	r2, r2, #7
 8003d18:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8003d1a:	4bd3      	ldr	r3, [pc, #844]	@ (8004068 <main+0x428>)
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	0212      	lsls	r2, r2, #8
 8003d20:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8003d22:	23a0      	movs	r3, #160	@ 0xa0
 8003d24:	05db      	lsls	r3, r3, #23
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	0052      	lsls	r2, r2, #1
 8003d2a:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003d2c:	4bce      	ldr	r3, [pc, #824]	@ (8004068 <main+0x428>)
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 8003d34:	4bcd      	ldr	r3, [pc, #820]	@ (800406c <main+0x42c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8003d3a:	4bcc      	ldr	r3, [pc, #816]	@ (800406c <main+0x42c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8003d40:	4bca      	ldr	r3, [pc, #808]	@ (800406c <main+0x42c>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 8003d46:	2330      	movs	r3, #48	@ 0x30
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	23c8      	movs	r3, #200	@ 0xc8
 8003d4e:	001a      	movs	r2, r3
 8003d50:	2100      	movs	r1, #0
 8003d52:	f008 f885 	bl	800be60 <memset>
	char api_key[20] = "F1LOAYMJF47UO4LD"; /* key for testing */
 8003d56:	231c      	movs	r3, #28
 8003d58:	18f9      	adds	r1, r7, r3
 8003d5a:	4ac5      	ldr	r2, [pc, #788]	@ (8004070 <main+0x430>)
 8003d5c:	000b      	movs	r3, r1
 8003d5e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003d60:	c331      	stmia	r3!, {r0, r4, r5}
 8003d62:	6810      	ldr	r0, [r2, #0]
 8003d64:	6018      	str	r0, [r3, #0]
 8003d66:	7912      	ldrb	r2, [r2, #4]
 8003d68:	711a      	strb	r2, [r3, #4]
 8003d6a:	2311      	movs	r3, #17
 8003d6c:	18cb      	adds	r3, r1, r3
 8003d6e:	2203      	movs	r2, #3
 8003d70:	2100      	movs	r1, #0
 8003d72:	0018      	movs	r0, r3
 8003d74:	f008 f874 	bl	800be60 <memset>
	// "01VH0OM4JU4KG9KN"; // API key
	/* GSM powerkey dance */
	/* TODO implement this using timer interrupts */
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_RESET);
 8003d78:	23a0      	movs	r3, #160	@ 0xa0
 8003d7a:	05db      	lsls	r3, r3, #23
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2140      	movs	r1, #64	@ 0x40
 8003d80:	0018      	movs	r0, r3
 8003d82:	f002 ffb0 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003d86:	23fa      	movs	r3, #250	@ 0xfa
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f001 fc26 	bl	80055dc <HAL_Delay>
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_SET);
 8003d90:	23a0      	movs	r3, #160	@ 0xa0
 8003d92:	05db      	lsls	r3, r3, #23
 8003d94:	2201      	movs	r2, #1
 8003d96:	2140      	movs	r1, #64	@ 0x40
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f002 ffa4 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003d9e:	20c8      	movs	r0, #200	@ 0xc8
 8003da0:	f001 fc1c 	bl	80055dc <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 8003da4:	23a0      	movs	r3, #160	@ 0xa0
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	2201      	movs	r2, #1
 8003daa:	2180      	movs	r1, #128	@ 0x80
 8003dac:	0018      	movs	r0, r3
 8003dae:	f002 ff9a 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003db2:	20c8      	movs	r0, #200	@ 0xc8
 8003db4:	f001 fc12 	bl	80055dc <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
 8003db8:	23a0      	movs	r3, #160	@ 0xa0
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	@ 0x80
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f002 ff90 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8003dc6:	23af      	movs	r3, #175	@ 0xaf
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f001 fc06 	bl	80055dc <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 8003dd0:	23a0      	movs	r3, #160	@ 0xa0
 8003dd2:	05db      	lsls	r3, r3, #23
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2180      	movs	r1, #128	@ 0x80
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f002 ff84 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 8003dde:	4ba5      	ldr	r3, [pc, #660]	@ (8004074 <main+0x434>)
 8003de0:	0018      	movs	r0, r3
 8003de2:	f001 fbfb 	bl	80055dc <HAL_Delay>
	uint8_t prev_idx = 1;
 8003de6:	230c      	movs	r3, #12
 8003de8:	33ff      	adds	r3, #255	@ 0xff
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 8003df0:	2385      	movs	r3, #133	@ 0x85
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 8003dfa:	2384      	movs	r3, #132	@ 0x84
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	22c8      	movs	r2, #200	@ 0xc8
 8003e02:	0052      	lsls	r2, r2, #1
 8003e04:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 8003e06:	4b9c      	ldr	r3, [pc, #624]	@ (8004078 <main+0x438>)
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f005 fd7b 	bl	8009904 <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 8003e0e:	4b9b      	ldr	r3, [pc, #620]	@ (800407c <main+0x43c>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8003e14:	4b9a      	ldr	r3, [pc, #616]	@ (8004080 <main+0x440>)
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 8003e1a:	4b9a      	ldr	r3, [pc, #616]	@ (8004084 <main+0x444>)
 8003e1c:	2488      	movs	r4, #136	@ 0x88
 8003e1e:	0064      	lsls	r4, r4, #1
 8003e20:	191b      	adds	r3, r3, r4
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	0018      	movs	r0, r3
 8003e26:	2307      	movs	r3, #7
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f008 f818 	bl	800be60 <memset>
	ti.day = 14;
 8003e30:	2114      	movs	r1, #20
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	220e      	movs	r2, #14
 8003e36:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	220b      	movs	r2, #11
 8003e3c:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2218      	movs	r2, #24
 8003e42:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	2202      	movs	r2, #2
 8003e48:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 8003e4a:	187b      	adds	r3, r7, r1
 8003e4c:	2215      	movs	r2, #21
 8003e4e:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	220e      	movs	r2, #14
 8003e54:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2200      	movs	r2, #0
 8003e5a:	719a      	strb	r2, [r3, #6]
	uint8_t data[] = { 2, 3 };
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8004088 <main+0x448>)
 8003e5e:	191b      	adds	r3, r3, r4
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	4a8a      	ldr	r2, [pc, #552]	@ (800408c <main+0x44c>)
 8003e64:	801a      	strh	r2, [r3, #0]
	uint8_t rdata[2] = {};
 8003e66:	4b8a      	ldr	r3, [pc, #552]	@ (8004090 <main+0x450>)
 8003e68:	191b      	adds	r3, r3, r4
 8003e6a:	19db      	adds	r3, r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
	EEPROM_Write(0, 0, data, 2);
 8003e70:	2308      	movs	r3, #8
 8003e72:	18fa      	adds	r2, r7, r3
 8003e74:	2302      	movs	r3, #2
 8003e76:	2100      	movs	r1, #0
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7ff fdcd 	bl	8003a18 <EEPROM_Write>
	EEPROM_Read(0, 0, rdata, 2);
 8003e7e:	1d3a      	adds	r2, r7, #4
 8003e80:	2302      	movs	r3, #2
 8003e82:	2100      	movs	r1, #0
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7ff fe55 	bl	8003b34 <EEPROM_Read>
//	ds3231_settime(&ti);
//	ds3231_gettime(&time);
//
//	ds3231_clearalarm1();
//	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_clearflagalarm1(); /* clear alarm flag */
 8003e8a:	f7ff facb 	bl	8003424 <ds3231_clearflagalarm1>
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 8003e8e:	230a      	movs	r3, #10
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	2003      	movs	r0, #3
 8003e9a:	f7ff f9d9 	bl	8003250 <ds3231_setalarm1>
//				TRIAC2_SET(0);
//				triac_time = 0;
//			}
//		}

		if(kwh_update_flag == 1) {
 8003e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004094 <main+0x454>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d164      	bne.n	8003f70 <main+0x330>
			/* reading ACS37800 */
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_PACTAVGONEMIN, I2C_MEMADD_SIZE_8BIT, acs37800_p_buffer, 4, 100);
 8003ea6:	487c      	ldr	r0, [pc, #496]	@ (8004098 <main+0x458>)
 8003ea8:	2364      	movs	r3, #100	@ 0x64
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	2304      	movs	r3, #4
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800409c <main+0x45c>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	2222      	movs	r2, #34	@ 0x22
 8003eb8:	21fe      	movs	r1, #254	@ 0xfe
 8003eba:	f003 fb6b 	bl	8007594 <HAL_I2C_Mem_Read>
			uint16_t pavg_raw = (acs37800_p_buffer[1] << 8) | acs37800_p_buffer[0];
 8003ebe:	4b77      	ldr	r3, [pc, #476]	@ (800409c <main+0x45c>)
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	4b74      	ldr	r3, [pc, #464]	@ (800409c <main+0x45c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b21b      	sxth	r3, r3
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	b21a      	sxth	r2, r3
 8003ed2:	1dfb      	adds	r3, r7, #7
 8003ed4:	33ff      	adds	r3, #255	@ 0xff
 8003ed6:	801a      	strh	r2, [r3, #0]
			pavg_final = pavg_raw;
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	33ff      	adds	r3, #255	@ 0xff
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7fd f8a2 	bl	8001028 <__aeabi_ui2f>
 8003ee4:	1c02      	adds	r2, r0, #0
 8003ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80040a0 <main+0x460>)
 8003ee8:	601a      	str	r2, [r3, #0]
			float LSBpermW = 3.08; // LSB per mW
 8003eea:	4b6e      	ldr	r3, [pc, #440]	@ (80040a4 <main+0x464>)
 8003eec:	1c7a      	adds	r2, r7, #1
 8003eee:	32ff      	adds	r2, #255	@ 0xff
 8003ef0:	6013      	str	r3, [r2, #0]
			LSBpermW  *= 30.0 / ACS37800_CURR_SENS_RANGE; // Correct for sensor version
			pavg_final /= LSBpermW; // Convert from codes to mW
 8003ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80040a0 <main+0x460>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c7a      	adds	r2, r7, #1
 8003ef8:	32ff      	adds	r2, #255	@ 0xff
 8003efa:	6811      	ldr	r1, [r2, #0]
 8003efc:	1c18      	adds	r0, r3, #0
 8003efe:	f7fc fcfb 	bl	80008f8 <__aeabi_fdiv>
 8003f02:	1c03      	adds	r3, r0, #0
 8003f04:	1c1a      	adds	r2, r3, #0
 8003f06:	4b66      	ldr	r3, [pc, #408]	@ (80040a0 <main+0x460>)
 8003f08:	601a      	str	r2, [r3, #0]
			//Correct for the voltage divider: (RISO1 + RISO2 + RSENSE) / RSENSE
			//Or:  (RISO1 + RISO2 + RISO3 + RISO4 + RSENSE) / RSENSE
			pavg_final /= 0.0008243;
 8003f0a:	4b65      	ldr	r3, [pc, #404]	@ (80040a0 <main+0x460>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c18      	adds	r0, r3, #0
 8003f10:	f7ff f870 	bl	8002ff4 <__aeabi_f2d>
 8003f14:	4a64      	ldr	r2, [pc, #400]	@ (80040a8 <main+0x468>)
 8003f16:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <main+0x46c>)
 8003f18:	f7fd fc92 	bl	8001840 <__aeabi_ddiv>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	000b      	movs	r3, r1
 8003f20:	0010      	movs	r0, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	f7ff f8ae 	bl	8003084 <__aeabi_d2f>
 8003f28:	1c02      	adds	r2, r0, #0
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <main+0x460>)
 8003f2c:	601a      	str	r2, [r3, #0]
			pavg_final /= 1000; // Convert from mW to W
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <main+0x460>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	495f      	ldr	r1, [pc, #380]	@ (80040b0 <main+0x470>)
 8003f34:	1c18      	adds	r0, r3, #0
 8003f36:	f7fc fcdf 	bl	80008f8 <__aeabi_fdiv>
 8003f3a:	1c03      	adds	r3, r0, #0
 8003f3c:	1c1a      	adds	r2, r3, #0
 8003f3e:	4b58      	ldr	r3, [pc, #352]	@ (80040a0 <main+0x460>)
 8003f40:	601a      	str	r2, [r3, #0]

			kwh = kwh + (pavg_final * (1/(float)60));
 8003f42:	4b57      	ldr	r3, [pc, #348]	@ (80040a0 <main+0x460>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	495b      	ldr	r1, [pc, #364]	@ (80040b4 <main+0x474>)
 8003f48:	1c18      	adds	r0, r3, #0
 8003f4a:	f7fc fea3 	bl	8000c94 <__aeabi_fmul>
 8003f4e:	1c03      	adds	r3, r0, #0
 8003f50:	1c1a      	adds	r2, r3, #0
 8003f52:	4b59      	ldr	r3, [pc, #356]	@ (80040b8 <main+0x478>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	1c19      	adds	r1, r3, #0
 8003f58:	1c10      	adds	r0, r2, #0
 8003f5a:	f7fc fadb 	bl	8000514 <__aeabi_fadd>
 8003f5e:	1c03      	adds	r3, r0, #0
 8003f60:	1c1a      	adds	r2, r3, #0
 8003f62:	4b55      	ldr	r3, [pc, #340]	@ (80040b8 <main+0x478>)
 8003f64:	601a      	str	r2, [r3, #0]
			/* TODO update kwh in EEPROM */
			kwh_update_flag = 0; /* wait till next min */
 8003f66:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <main+0x454>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
			ds3231_clearflagalarm1(); /* clear alarm flag */
 8003f6c:	f7ff fa5a 	bl	8003424 <ds3231_clearflagalarm1>
		}
		if(vi_update_flag == 1) {
 8003f70:	4b52      	ldr	r3, [pc, #328]	@ (80040bc <main+0x47c>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d000      	beq.n	8003f7a <main+0x33a>
 8003f78:	e0bf      	b.n	80040fa <main+0x4ba>
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_VIRMS, I2C_MEMADD_SIZE_8BIT, acs37800_vi_buffer, 4, 100);
 8003f7a:	4847      	ldr	r0, [pc, #284]	@ (8004098 <main+0x458>)
 8003f7c:	2364      	movs	r3, #100	@ 0x64
 8003f7e:	9302      	str	r3, [sp, #8]
 8003f80:	2304      	movs	r3, #4
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	4b4e      	ldr	r3, [pc, #312]	@ (80040c0 <main+0x480>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	21fe      	movs	r1, #254	@ 0xfe
 8003f8e:	f003 fb01 	bl	8007594 <HAL_I2C_Mem_Read>
			uint16_t vrms_raw = (acs37800_vi_buffer[1] << 8) | acs37800_vi_buffer[0];
 8003f92:	4b4b      	ldr	r3, [pc, #300]	@ (80040c0 <main+0x480>)
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	b21a      	sxth	r2, r3
 8003f9c:	4b48      	ldr	r3, [pc, #288]	@ (80040c0 <main+0x480>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b21b      	sxth	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b21a      	sxth	r2, r3
 8003fa6:	21fe      	movs	r1, #254	@ 0xfe
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	801a      	strh	r2, [r3, #0]
			vrms_final = vrms_raw / (float)55000;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fc ffe9 	bl	8000f88 <__aeabi_i2f>
 8003fb6:	1c03      	adds	r3, r0, #0
 8003fb8:	4942      	ldr	r1, [pc, #264]	@ (80040c4 <main+0x484>)
 8003fba:	1c18      	adds	r0, r3, #0
 8003fbc:	f7fc fc9c 	bl	80008f8 <__aeabi_fdiv>
 8003fc0:	1c03      	adds	r3, r0, #0
 8003fc2:	1c1a      	adds	r2, r3, #0
 8003fc4:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <main+0x488>)
 8003fc6:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final * 250;
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <main+0x488>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	493f      	ldr	r1, [pc, #252]	@ (80040cc <main+0x48c>)
 8003fce:	1c18      	adds	r0, r3, #0
 8003fd0:	f7fc fe60 	bl	8000c94 <__aeabi_fmul>
 8003fd4:	1c03      	adds	r3, r0, #0
 8003fd6:	1c1a      	adds	r2, r3, #0
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <main+0x488>)
 8003fda:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 1000;
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <main+0x488>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4933      	ldr	r1, [pc, #204]	@ (80040b0 <main+0x470>)
 8003fe2:	1c18      	adds	r0, r3, #0
 8003fe4:	f7fc fc88 	bl	80008f8 <__aeabi_fdiv>
 8003fe8:	1c03      	adds	r3, r0, #0
 8003fea:	1c1a      	adds	r2, r3, #0
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <main+0x488>)
 8003fee:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 0.0008243;
 8003ff0:	4b35      	ldr	r3, [pc, #212]	@ (80040c8 <main+0x488>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1c18      	adds	r0, r3, #0
 8003ff6:	f7fe fffd 	bl	8002ff4 <__aeabi_f2d>
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80040a8 <main+0x468>)
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80040ac <main+0x46c>)
 8003ffe:	f7fd fc1f 	bl	8001840 <__aeabi_ddiv>
 8004002:	0002      	movs	r2, r0
 8004004:	000b      	movs	r3, r1
 8004006:	0010      	movs	r0, r2
 8004008:	0019      	movs	r1, r3
 800400a:	f7ff f83b 	bl	8003084 <__aeabi_d2f>
 800400e:	1c02      	adds	r2, r0, #0
 8004010:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <main+0x488>)
 8004012:	601a      	str	r2, [r3, #0]
			uint16_t irms_raw = (acs37800_vi_buffer[3] << 8) | acs37800_vi_buffer[2];
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <main+0x480>)
 8004016:	78db      	ldrb	r3, [r3, #3]
 8004018:	b21b      	sxth	r3, r3
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	b21a      	sxth	r2, r3
 800401e:	4b28      	ldr	r3, [pc, #160]	@ (80040c0 <main+0x480>)
 8004020:	789b      	ldrb	r3, [r3, #2]
 8004022:	b21b      	sxth	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b21a      	sxth	r2, r3
 8004028:	21fc      	movs	r1, #252	@ 0xfc
 800402a:	187b      	adds	r3, r7, r1
 800402c:	801a      	strh	r2, [r3, #0]
			irms_final = irms_raw / (float)55000;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	f7fc ffa8 	bl	8000f88 <__aeabi_i2f>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	4922      	ldr	r1, [pc, #136]	@ (80040c4 <main+0x484>)
 800403c:	1c18      	adds	r0, r3, #0
 800403e:	f7fc fc5b 	bl	80008f8 <__aeabi_fdiv>
 8004042:	1c03      	adds	r3, r0, #0
 8004044:	1c1a      	adds	r2, r3, #0
 8004046:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <main+0x490>)
 8004048:	601a      	str	r2, [r3, #0]
			irms_final = irms_final * ACS37800_CURR_SENS_RANGE;
 800404a:	4b21      	ldr	r3, [pc, #132]	@ (80040d0 <main+0x490>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4921      	ldr	r1, [pc, #132]	@ (80040d4 <main+0x494>)
 8004050:	1c18      	adds	r0, r3, #0
 8004052:	f7fc fe1f 	bl	8000c94 <__aeabi_fmul>
 8004056:	1c03      	adds	r3, r0, #0
 8004058:	1c1a      	adds	r2, r3, #0
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <main+0x490>)
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e03b      	b.n	80040d8 <main+0x498>
 8004060:	50001400 	.word	0x50001400
 8004064:	50000800 	.word	0x50000800
 8004068:	50000400 	.word	0x50000400
 800406c:	20000550 	.word	0x20000550
 8004070:	0800e2e8 	.word	0x0800e2e8
 8004074:	00003a98 	.word	0x00003a98
 8004078:	2000038c 	.word	0x2000038c
 800407c:	2000055d 	.word	0x2000055d
 8004080:	20000580 	.word	0x20000580
 8004084:	fffffefc 	.word	0xfffffefc
 8004088:	fffffef8 	.word	0xfffffef8
 800408c:	00000302 	.word	0x00000302
 8004090:	fffffef4 	.word	0xfffffef4
 8004094:	2000056a 	.word	0x2000056a
 8004098:	200002d4 	.word	0x200002d4
 800409c:	20000204 	.word	0x20000204
 80040a0:	20000210 	.word	0x20000210
 80040a4:	40451eb8 	.word	0x40451eb8
 80040a8:	c5634c00 	.word	0xc5634c00
 80040ac:	3f4b02ba 	.word	0x3f4b02ba
 80040b0:	447a0000 	.word	0x447a0000
 80040b4:	3c888889 	.word	0x3c888889
 80040b8:	20000558 	.word	0x20000558
 80040bc:	2000056b 	.word	0x2000056b
 80040c0:	20000200 	.word	0x20000200
 80040c4:	4756d800 	.word	0x4756d800
 80040c8:	20000208 	.word	0x20000208
 80040cc:	437a0000 	.word	0x437a0000
 80040d0:	2000020c 	.word	0x2000020c
 80040d4:	41f00000 	.word	0x41f00000
			if(irms_final < 0.050)
 80040d8:	4bdb      	ldr	r3, [pc, #876]	@ (8004448 <main+0x808>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1c18      	adds	r0, r3, #0
 80040de:	f7fe ff89 	bl	8002ff4 <__aeabi_f2d>
 80040e2:	4ada      	ldr	r2, [pc, #872]	@ (800444c <main+0x80c>)
 80040e4:	4bda      	ldr	r3, [pc, #872]	@ (8004450 <main+0x810>)
 80040e6:	f7fc f9b3 	bl	8000450 <__aeabi_dcmplt>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d002      	beq.n	80040f4 <main+0x4b4>
				irms_final = 0;
 80040ee:	4bd6      	ldr	r3, [pc, #856]	@ (8004448 <main+0x808>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
			vi_update_flag = 0; /* wait till next sec */
 80040f4:	4bd7      	ldr	r3, [pc, #860]	@ (8004454 <main+0x814>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
		/*###*/
		/* routines */

		/*### Sensor read ###*/
		/*A*/
		if(sensor_refresh_flag == 1) {
 80040fa:	4bd7      	ldr	r3, [pc, #860]	@ (8004458 <main+0x818>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d167      	bne.n	80041d2 <main+0x592>
			sensor_rx_select(sensor_idx);
 8004102:	4bd6      	ldr	r3, [pc, #856]	@ (800445c <main+0x81c>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	0018      	movs	r0, r3
 8004108:	f001 f968 	bl	80053dc <sensor_rx_select>
			HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 10);
 800410c:	24f8      	movs	r4, #248	@ 0xf8
 800410e:	1939      	adds	r1, r7, r4
 8004110:	48d3      	ldr	r0, [pc, #844]	@ (8004460 <main+0x820>)
 8004112:	230a      	movs	r3, #10
 8004114:	2202      	movs	r2, #2
 8004116:	f004 fe95 	bl	8008e44 <HAL_SPI_Receive>
			sensor_rx_disable(); // Disables all IC comms
 800411a:	f001 f93f 	bl	800539c <sensor_rx_disable>
			temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 800411e:	0020      	movs	r0, r4
 8004120:	183b      	adds	r3, r7, r0
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	001a      	movs	r2, r3
 8004126:	183b      	adds	r3, r7, r0
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	4313      	orrs	r3, r2
 800412e:	109b      	asrs	r3, r3, #2
 8004130:	b2da      	uxtb	r2, r3
 8004132:	2410      	movs	r4, #16
 8004134:	34ff      	adds	r4, #255	@ 0xff
 8004136:	193b      	adds	r3, r7, r4
 8004138:	2101      	movs	r1, #1
 800413a:	400a      	ands	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]
			temp_word = (sdo[0] | sdo[1] << 8);
 800413e:	183b      	adds	r3, r7, r0
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b21a      	sxth	r2, r3
 8004144:	183b      	adds	r3, r7, r0
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	b21b      	sxth	r3, r3
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21b      	sxth	r3, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	b21a      	sxth	r2, r3
 8004152:	21fa      	movs	r1, #250	@ 0xfa
 8004154:	187b      	adds	r3, r7, r1
 8004156:	801a      	strh	r2, [r3, #0]
			temp12b = (temp_word & 0b111111111111000) >> 3;
 8004158:	187b      	adds	r3, r7, r1
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	10db      	asrs	r3, r3, #3
 800415e:	b29a      	uxth	r2, r3
 8004160:	2386      	movs	r3, #134	@ 0x86
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	0512      	lsls	r2, r2, #20
 8004168:	0d12      	lsrs	r2, r2, #20
 800416a:	801a      	strh	r2, [r3, #0]
			/* store the temp */
			if(temp_state == 1) {
 800416c:	193b      	adds	r3, r7, r4
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <main+0x544>
				temperatures[sensor_idx - 1] = -99;
 8004174:	4bb9      	ldr	r3, [pc, #740]	@ (800445c <main+0x81c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	4bba      	ldr	r3, [pc, #744]	@ (8004464 <main+0x824>)
 800417c:	0092      	lsls	r2, r2, #2
 800417e:	49ba      	ldr	r1, [pc, #744]	@ (8004468 <main+0x828>)
 8004180:	50d1      	str	r1, [r2, r3]
 8004182:	e017      	b.n	80041b4 <main+0x574>
			}
			else {
				temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 8004184:	2386      	movs	r3, #134	@ 0x86
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	0018      	movs	r0, r3
 800418e:	f7fe fedf 	bl	8002f50 <__aeabi_i2d>
 8004192:	2200      	movs	r2, #0
 8004194:	4bb5      	ldr	r3, [pc, #724]	@ (800446c <main+0x82c>)
 8004196:	f7fd ff8d 	bl	80020b4 <__aeabi_dmul>
 800419a:	0002      	movs	r2, r0
 800419c:	000b      	movs	r3, r1
 800419e:	49af      	ldr	r1, [pc, #700]	@ (800445c <main+0x81c>)
 80041a0:	7809      	ldrb	r1, [r1, #0]
 80041a2:	1e4c      	subs	r4, r1, #1
 80041a4:	0010      	movs	r0, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	f7fe ff6c 	bl	8003084 <__aeabi_d2f>
 80041ac:	1c01      	adds	r1, r0, #0
 80041ae:	4bad      	ldr	r3, [pc, #692]	@ (8004464 <main+0x824>)
 80041b0:	00a2      	lsls	r2, r4, #2
 80041b2:	50d1      	str	r1, [r2, r3]
			}
			sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 80041b4:	4ba9      	ldr	r3, [pc, #676]	@ (800445c <main+0x81c>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d804      	bhi.n	80041c6 <main+0x586>
 80041bc:	4ba7      	ldr	r3, [pc, #668]	@ (800445c <main+0x81c>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	e000      	b.n	80041c8 <main+0x588>
 80041c6:	2201      	movs	r2, #1
 80041c8:	4ba4      	ldr	r3, [pc, #656]	@ (800445c <main+0x81c>)
 80041ca:	701a      	strb	r2, [r3, #0]
			sensor_refresh_flag = 0;
 80041cc:	4ba2      	ldr	r3, [pc, #648]	@ (8004458 <main+0x818>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 80041d2:	21f8      	movs	r1, #248	@ 0xf8
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 80041e0:	23fa      	movs	r3, #250	@ 0xfa
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2200      	movs	r2, #0
 80041e6:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 80041e8:	2386      	movs	r3, #134	@ 0x86
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2200      	movs	r2, #0
 80041f0:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 80041f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004464 <main+0x824>)
 80041f4:	681c      	ldr	r4, [r3, #0]
 80041f6:	2584      	movs	r5, #132	@ 0x84
 80041f8:	006d      	lsls	r5, r5, #1
 80041fa:	197b      	adds	r3, r7, r5
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	0018      	movs	r0, r3
 8004200:	f7fc fec2 	bl	8000f88 <__aeabi_i2f>
 8004204:	1c03      	adds	r3, r0, #0
 8004206:	1c19      	adds	r1, r3, #0
 8004208:	1c20      	adds	r0, r4, #0
 800420a:	f7fc f979 	bl	8000500 <__aeabi_fcmpge>
 800420e:	1e03      	subs	r3, r0, #0
 8004210:	d10d      	bne.n	800422e <main+0x5ee>
 8004212:	4b94      	ldr	r3, [pc, #592]	@ (8004464 <main+0x824>)
 8004214:	685c      	ldr	r4, [r3, #4]
 8004216:	197b      	adds	r3, r7, r5
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fc feb4 	bl	8000f88 <__aeabi_i2f>
 8004220:	1c03      	adds	r3, r0, #0
 8004222:	1c19      	adds	r1, r3, #0
 8004224:	1c20      	adds	r0, r4, #0
 8004226:	f7fc f96b 	bl	8000500 <__aeabi_fcmpge>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d010      	beq.n	8004250 <main+0x610>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 800422e:	4b90      	ldr	r3, [pc, #576]	@ (8004470 <main+0x830>)
 8004230:	2200      	movs	r2, #0
 8004232:	2101      	movs	r1, #1
 8004234:	0018      	movs	r0, r3
 8004236:	f002 fd56 	bl	8006ce6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	488d      	ldr	r0, [pc, #564]	@ (8004474 <main+0x834>)
 8004240:	2200      	movs	r2, #0
 8004242:	0019      	movs	r1, r3
 8004244:	f002 fd4f 	bl	8006ce6 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8004248:	4b8b      	ldr	r3, [pc, #556]	@ (8004478 <main+0x838>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e002      	b.n	8004256 <main+0x616>
		}
		else {
			triac_temp_ctrl = 1;
 8004250:	4b89      	ldr	r3, [pc, #548]	@ (8004478 <main+0x838>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8004256:	4b88      	ldr	r3, [pc, #544]	@ (8004478 <main+0x838>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d163      	bne.n	8004326 <main+0x6e6>
			if(BTN1_READ() == 0) {
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4a86      	ldr	r2, [pc, #536]	@ (800447c <main+0x83c>)
 8004264:	0019      	movs	r1, r3
 8004266:	0010      	movs	r0, r2
 8004268:	f002 fd20 	bl	8006cac <HAL_GPIO_ReadPin>
 800426c:	1e03      	subs	r3, r0, #0
 800426e:	d112      	bne.n	8004296 <main+0x656>
				if(BTN1_READ() == 0) {
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a81      	ldr	r2, [pc, #516]	@ (800447c <main+0x83c>)
 8004276:	0019      	movs	r1, r3
 8004278:	0010      	movs	r0, r2
 800427a:	f002 fd17 	bl	8006cac <HAL_GPIO_ReadPin>
 800427e:	1e03      	subs	r3, r0, #0
 8004280:	d164      	bne.n	800434c <main+0x70c>
					mode = 1;
 8004282:	4b7f      	ldr	r3, [pc, #508]	@ (8004480 <main+0x840>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
					triac_time = 4.5; /* 130V */
 8004288:	4b7e      	ldr	r3, [pc, #504]	@ (8004484 <main+0x844>)
 800428a:	4a7f      	ldr	r2, [pc, #508]	@ (8004488 <main+0x848>)
 800428c:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800428e:	4b7f      	ldr	r3, [pc, #508]	@ (800448c <main+0x84c>)
 8004290:	2202      	movs	r2, #2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e05a      	b.n	800434c <main+0x70c>
				}
			}
			else if(BTN2_READ() == 0) {
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4a78      	ldr	r2, [pc, #480]	@ (800447c <main+0x83c>)
 800429c:	0019      	movs	r1, r3
 800429e:	0010      	movs	r0, r2
 80042a0:	f002 fd04 	bl	8006cac <HAL_GPIO_ReadPin>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d112      	bne.n	80042ce <main+0x68e>
				if(BTN2_READ() == 0) {
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4a73      	ldr	r2, [pc, #460]	@ (800447c <main+0x83c>)
 80042ae:	0019      	movs	r1, r3
 80042b0:	0010      	movs	r0, r2
 80042b2:	f002 fcfb 	bl	8006cac <HAL_GPIO_ReadPin>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d148      	bne.n	800434c <main+0x70c>
					mode = 2;
 80042ba:	4b71      	ldr	r3, [pc, #452]	@ (8004480 <main+0x840>)
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]
					triac_time = 3.37; /* 170V */
 80042c0:	4b70      	ldr	r3, [pc, #448]	@ (8004484 <main+0x844>)
 80042c2:	4a73      	ldr	r2, [pc, #460]	@ (8004490 <main+0x850>)
 80042c4:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 80042c6:	4b71      	ldr	r3, [pc, #452]	@ (800448c <main+0x84c>)
 80042c8:	2202      	movs	r2, #2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e03e      	b.n	800434c <main+0x70c>
				}
			}
			else if(BTN3_READ() == 0) {
 80042ce:	4b6b      	ldr	r3, [pc, #428]	@ (800447c <main+0x83c>)
 80042d0:	2180      	movs	r1, #128	@ 0x80
 80042d2:	0018      	movs	r0, r3
 80042d4:	f002 fcea 	bl	8006cac <HAL_GPIO_ReadPin>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d110      	bne.n	80042fe <main+0x6be>
				if(BTN3_READ() == 0) {
 80042dc:	4b67      	ldr	r3, [pc, #412]	@ (800447c <main+0x83c>)
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	0018      	movs	r0, r3
 80042e2:	f002 fce3 	bl	8006cac <HAL_GPIO_ReadPin>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d130      	bne.n	800434c <main+0x70c>
					mode = 3;
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <main+0x840>)
 80042ec:	2203      	movs	r2, #3
 80042ee:	701a      	strb	r2, [r3, #0]
					triac_time = 2.4; /* 205V */
 80042f0:	4b64      	ldr	r3, [pc, #400]	@ (8004484 <main+0x844>)
 80042f2:	4a68      	ldr	r2, [pc, #416]	@ (8004494 <main+0x854>)
 80042f4:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 80042f6:	4b65      	ldr	r3, [pc, #404]	@ (800448c <main+0x84c>)
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e026      	b.n	800434c <main+0x70c>
				}
			}
			else {
				mode = 0;
 80042fe:	4b60      	ldr	r3, [pc, #384]	@ (8004480 <main+0x840>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8004304:	4b61      	ldr	r3, [pc, #388]	@ (800448c <main+0x84c>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 800430a:	4b59      	ldr	r3, [pc, #356]	@ (8004470 <main+0x830>)
 800430c:	2200      	movs	r2, #0
 800430e:	2101      	movs	r1, #1
 8004310:	0018      	movs	r0, r3
 8004312:	f002 fce8 	bl	8006ce6 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8004316:	2380      	movs	r3, #128	@ 0x80
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	4856      	ldr	r0, [pc, #344]	@ (8004474 <main+0x834>)
 800431c:	2200      	movs	r2, #0
 800431e:	0019      	movs	r1, r3
 8004320:	f002 fce1 	bl	8006ce6 <HAL_GPIO_WritePin>
 8004324:	e012      	b.n	800434c <main+0x70c>
			}
		}
		else {
			mode = 0;
 8004326:	4b56      	ldr	r3, [pc, #344]	@ (8004480 <main+0x840>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 800432c:	4b57      	ldr	r3, [pc, #348]	@ (800448c <main+0x84c>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 8004332:	4b4f      	ldr	r3, [pc, #316]	@ (8004470 <main+0x830>)
 8004334:	2200      	movs	r2, #0
 8004336:	2101      	movs	r1, #1
 8004338:	0018      	movs	r0, r3
 800433a:	f002 fcd4 	bl	8006ce6 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	484c      	ldr	r0, [pc, #304]	@ (8004474 <main+0x834>)
 8004344:	2200      	movs	r2, #0
 8004346:	0019      	movs	r1, r3
 8004348:	f002 fccd 	bl	8006ce6 <HAL_GPIO_WritePin>
		}

		/*A*/
		/* GSM stuff */
		/*########################################################################*/
		if(gsm_status != GSM_WAIT) {
 800434c:	4b52      	ldr	r3, [pc, #328]	@ (8004498 <main+0x858>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d100      	bne.n	8004358 <main+0x718>
 8004356:	e11e      	b.n	8004596 <main+0x956>
			if(upload_running) {
 8004358:	4b50      	ldr	r3, [pc, #320]	@ (800449c <main+0x85c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d100      	bne.n	8004362 <main+0x722>
 8004360:	e114      	b.n	800458c <main+0x94c>
				if(gsm_status == GSM_OK || gsm_status == GSM_NOK) {
 8004362:	4b4d      	ldr	r3, [pc, #308]	@ (8004498 <main+0x858>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <main+0x736>
 800436c:	4b4a      	ldr	r3, [pc, #296]	@ (8004498 <main+0x858>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b63      	cmp	r3, #99	@ 0x63
 8004374:	d115      	bne.n	80043a2 <main+0x762>
					if(gsm_cmd_step >= GSM_CMD_LAST_IDX) {
 8004376:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <main+0x860>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d90b      	bls.n	8004396 <main+0x756>
						upload_flag = 1; /* successful upload */
 800437e:	4b49      	ldr	r3, [pc, #292]	@ (80044a4 <main+0x864>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
						led_blink();
 8004384:	f7ff f886 	bl	8003494 <led_blink>
						gsm_cmd_step = 0; /* prep for next upload */
 8004388:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <main+0x860>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
						upload_running = 0; /* wait for next time slot */
 800438e:	4b43      	ldr	r3, [pc, #268]	@ (800449c <main+0x85c>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e005      	b.n	80043a2 <main+0x762>
					}
					else
						gsm_cmd_step += 1;
 8004396:	4b42      	ldr	r3, [pc, #264]	@ (80044a0 <main+0x860>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <main+0x860>)
 80043a0:	701a      	strb	r2, [r3, #0]
				}
//				else if(gsm_status == GSM_NOK) {
//					gsm_cmd_step = 0;
//					upload_running = 0; /* cancel upload seq */
//				}
				switch(gsm_cmd_step) {
 80043a2:	4b3f      	ldr	r3, [pc, #252]	@ (80044a0 <main+0x860>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b0e      	cmp	r3, #14
 80043a8:	d900      	bls.n	80043ac <main+0x76c>
 80043aa:	e0f4      	b.n	8004596 <main+0x956>
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <main+0x868>)
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	469f      	mov	pc, r3
				case 0:
					break;
				case 1:
					gsm_cmd("AT+NETCLOSE","OK", GSM_WAIT_TIME_LOW);
 80043b6:	23fa      	movs	r3, #250	@ 0xfa
 80043b8:	005a      	lsls	r2, r3, #1
 80043ba:	493c      	ldr	r1, [pc, #240]	@ (80044ac <main+0x86c>)
 80043bc:	4b3c      	ldr	r3, [pc, #240]	@ (80044b0 <main+0x870>)
 80043be:	0018      	movs	r0, r3
 80043c0:	f7ff f93c 	bl	800363c <gsm_cmd>
					break;
 80043c4:	e0e7      	b.n	8004596 <main+0x956>
				case 2:
					gsm_cmd("AT+CCHMODE=1","OK", GSM_WAIT_TIME_LOW);
 80043c6:	23fa      	movs	r3, #250	@ 0xfa
 80043c8:	005a      	lsls	r2, r3, #1
 80043ca:	4938      	ldr	r1, [pc, #224]	@ (80044ac <main+0x86c>)
 80043cc:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <main+0x874>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff f934 	bl	800363c <gsm_cmd>
					break;
 80043d4:	e0df      	b.n	8004596 <main+0x956>
				case 3:
					gsm_cmd("AT+CCHSET=1","OK", GSM_WAIT_TIME_LOW);
 80043d6:	23fa      	movs	r3, #250	@ 0xfa
 80043d8:	005a      	lsls	r2, r3, #1
 80043da:	4934      	ldr	r1, [pc, #208]	@ (80044ac <main+0x86c>)
 80043dc:	4b36      	ldr	r3, [pc, #216]	@ (80044b8 <main+0x878>)
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff f92c 	bl	800363c <gsm_cmd>
					break;
 80043e4:	e0d7      	b.n	8004596 <main+0x956>
				case 4:
					gsm_cmd("AT+CCHSTART","OK", GSM_WAIT_TIME_LOW);
 80043e6:	23fa      	movs	r3, #250	@ 0xfa
 80043e8:	005a      	lsls	r2, r3, #1
 80043ea:	4930      	ldr	r1, [pc, #192]	@ (80044ac <main+0x86c>)
 80043ec:	4b33      	ldr	r3, [pc, #204]	@ (80044bc <main+0x87c>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff f924 	bl	800363c <gsm_cmd>
					break;
 80043f4:	e0cf      	b.n	8004596 <main+0x956>
				case 5:
					gsm_cmd("AT+CCHSSLCFG=0,0","OK",GSM_WAIT_TIME_LOW);
 80043f6:	23fa      	movs	r3, #250	@ 0xfa
 80043f8:	005a      	lsls	r2, r3, #1
 80043fa:	492c      	ldr	r1, [pc, #176]	@ (80044ac <main+0x86c>)
 80043fc:	4b30      	ldr	r3, [pc, #192]	@ (80044c0 <main+0x880>)
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff f91c 	bl	800363c <gsm_cmd>
					break;
 8004404:	e0c7      	b.n	8004596 <main+0x956>
				case 6:
					gsm_cmd("AT+CSOCKSETPN=1","OK", GSM_WAIT_TIME_LOW);
 8004406:	23fa      	movs	r3, #250	@ 0xfa
 8004408:	005a      	lsls	r2, r3, #1
 800440a:	4928      	ldr	r1, [pc, #160]	@ (80044ac <main+0x86c>)
 800440c:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <main+0x884>)
 800440e:	0018      	movs	r0, r3
 8004410:	f7ff f914 	bl	800363c <gsm_cmd>
					break;
 8004414:	e0bf      	b.n	8004596 <main+0x956>
				case 7:
					gsm_cmd("AT+CIPMODE=0","OK", GSM_WAIT_TIME_LOW);
 8004416:	23fa      	movs	r3, #250	@ 0xfa
 8004418:	005a      	lsls	r2, r3, #1
 800441a:	4924      	ldr	r1, [pc, #144]	@ (80044ac <main+0x86c>)
 800441c:	4b2a      	ldr	r3, [pc, #168]	@ (80044c8 <main+0x888>)
 800441e:	0018      	movs	r0, r3
 8004420:	f7ff f90c 	bl	800363c <gsm_cmd>
					break;
 8004424:	e0b7      	b.n	8004596 <main+0x956>
				case 8:
					gsm_cmd("AT+NETOPEN","OK", GSM_WAIT_TIME_LOW);
 8004426:	23fa      	movs	r3, #250	@ 0xfa
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	4920      	ldr	r1, [pc, #128]	@ (80044ac <main+0x86c>)
 800442c:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <main+0x88c>)
 800442e:	0018      	movs	r0, r3
 8004430:	f7ff f904 	bl	800363c <gsm_cmd>
					break;
 8004434:	e0af      	b.n	8004596 <main+0x956>
				case 9:
					gsm_cmd("AT+CGATT=1","OK", GSM_WAIT_TIME_LOW);
 8004436:	23fa      	movs	r3, #250	@ 0xfa
 8004438:	005a      	lsls	r2, r3, #1
 800443a:	491c      	ldr	r1, [pc, #112]	@ (80044ac <main+0x86c>)
 800443c:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <main+0x890>)
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff f8fc 	bl	800363c <gsm_cmd>
					break;
 8004444:	e0a7      	b.n	8004596 <main+0x956>
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	2000020c 	.word	0x2000020c
 800444c:	9999999a 	.word	0x9999999a
 8004450:	3fa99999 	.word	0x3fa99999
 8004454:	2000056b 	.word	0x2000056b
 8004458:	20000532 	.word	0x20000532
 800445c:	20000531 	.word	0x20000531
 8004460:	20000328 	.word	0x20000328
 8004464:	2000056c 	.word	0x2000056c
 8004468:	c2c60000 	.word	0xc2c60000
 800446c:	3fd00000 	.word	0x3fd00000
 8004470:	50001400 	.word	0x50001400
 8004474:	50000800 	.word	0x50000800
 8004478:	2000055c 	.word	0x2000055c
 800447c:	50000400 	.word	0x50000400
 8004480:	20000569 	.word	0x20000569
 8004484:	20000564 	.word	0x20000564
 8004488:	40900000 	.word	0x40900000
 800448c:	20000568 	.word	0x20000568
 8004490:	4057ae14 	.word	0x4057ae14
 8004494:	4019999a 	.word	0x4019999a
 8004498:	2000057a 	.word	0x2000057a
 800449c:	200005fc 	.word	0x200005fc
 80044a0:	20000580 	.word	0x20000580
 80044a4:	200005fd 	.word	0x200005fd
 80044a8:	0800e3cc 	.word	0x0800e3cc
 80044ac:	0800e17c 	.word	0x0800e17c
 80044b0:	0800e180 	.word	0x0800e180
 80044b4:	0800e18c 	.word	0x0800e18c
 80044b8:	0800e19c 	.word	0x0800e19c
 80044bc:	0800e1a8 	.word	0x0800e1a8
 80044c0:	0800e1b4 	.word	0x0800e1b4
 80044c4:	0800e1c8 	.word	0x0800e1c8
 80044c8:	0800e1d8 	.word	0x0800e1d8
 80044cc:	0800e1e8 	.word	0x0800e1e8
 80044d0:	0800e1f4 	.word	0x0800e1f4
				case 10:
					gsm_cmd("AT+CGACT=1,1","OK", GSM_WAIT_TIME_LOW);
 80044d4:	23fa      	movs	r3, #250	@ 0xfa
 80044d6:	005a      	lsls	r2, r3, #1
 80044d8:	4940      	ldr	r1, [pc, #256]	@ (80045dc <main+0x99c>)
 80044da:	4b41      	ldr	r3, [pc, #260]	@ (80045e0 <main+0x9a0>)
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff f8ad 	bl	800363c <gsm_cmd>
					break;
 80044e2:	e058      	b.n	8004596 <main+0x956>
				case 11:
					gsm_cmd("AT+IPADDR","OK", GSM_WAIT_TIME_MED);
 80044e4:	4a3f      	ldr	r2, [pc, #252]	@ (80045e4 <main+0x9a4>)
 80044e6:	493d      	ldr	r1, [pc, #244]	@ (80045dc <main+0x99c>)
 80044e8:	4b3f      	ldr	r3, [pc, #252]	@ (80045e8 <main+0x9a8>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f7ff f8a6 	bl	800363c <gsm_cmd>
					break;
 80044f0:	e051      	b.n	8004596 <main+0x956>
				case 12:
					gsm_cmd("AT+CCHOPEN=0,\"api.thingspeak.com\",443,2","CONNECT 115200", GSM_WAIT_TIME_MED);
 80044f2:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <main+0x9a4>)
 80044f4:	493d      	ldr	r1, [pc, #244]	@ (80045ec <main+0x9ac>)
 80044f6:	4b3e      	ldr	r3, [pc, #248]	@ (80045f0 <main+0x9b0>)
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff f89f 	bl	800363c <gsm_cmd>
					break;
 80044fe:	e04a      	b.n	8004596 <main+0x956>
				case 13:
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
							"HTTP/1.1\r\nHost: api.thingspeak.com\r\n", \
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004500:	4b3c      	ldr	r3, [pc, #240]	@ (80045f4 <main+0x9b4>)
 8004502:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 8004504:	1c18      	adds	r0, r3, #0
 8004506:	f7fc fd1f 	bl	8000f48 <__aeabi_f2iz>
 800450a:	4682      	mov	sl, r0
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <main+0x9b4>)
 800450e:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 8004510:	1c18      	adds	r0, r3, #0
 8004512:	f7fc fd19 	bl	8000f48 <__aeabi_f2iz>
 8004516:	4680      	mov	r8, r0
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <main+0x9b8>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	469b      	mov	fp, r3
 800451e:	4b37      	ldr	r3, [pc, #220]	@ (80045fc <main+0x9bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1c18      	adds	r0, r3, #0
 8004524:	f7fe fd66 	bl	8002ff4 <__aeabi_f2d>
 8004528:	0004      	movs	r4, r0
 800452a:	000d      	movs	r5, r1
 800452c:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <main+0x9c0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	1c18      	adds	r0, r3, #0
 8004532:	f7fc fd09 	bl	8000f48 <__aeabi_f2iz>
 8004536:	4681      	mov	r9, r0
 8004538:	4b32      	ldr	r3, [pc, #200]	@ (8004604 <main+0x9c4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c18      	adds	r0, r3, #0
 800453e:	f7fe fd59 	bl	8002ff4 <__aeabi_f2d>
 8004542:	0002      	movs	r2, r0
 8004544:	000b      	movs	r3, r1
 8004546:	211c      	movs	r1, #28
 8004548:	187e      	adds	r6, r7, r1
 800454a:	492f      	ldr	r1, [pc, #188]	@ (8004608 <main+0x9c8>)
 800454c:	2030      	movs	r0, #48	@ 0x30
 800454e:	1838      	adds	r0, r7, r0
 8004550:	9206      	str	r2, [sp, #24]
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	464b      	mov	r3, r9
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9402      	str	r4, [sp, #8]
 800455a:	9503      	str	r5, [sp, #12]
 800455c:	465b      	mov	r3, fp
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	4643      	mov	r3, r8
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4653      	mov	r3, sl
 8004566:	0032      	movs	r2, r6
 8004568:	f007 fc0c 	bl	800bd84 <siprintf>
					 * kwh
					 * temp 1
					 * temp 2
					 *
					 */
					gsm_cmd(content_string, "200 OK", GSM_WAIT_TIME_MED);
 800456c:	4a1d      	ldr	r2, [pc, #116]	@ (80045e4 <main+0x9a4>)
 800456e:	4927      	ldr	r1, [pc, #156]	@ (800460c <main+0x9cc>)
 8004570:	2030      	movs	r0, #48	@ 0x30
 8004572:	183b      	adds	r3, r7, r0
 8004574:	0018      	movs	r0, r3
 8004576:	f7ff f861 	bl	800363c <gsm_cmd>
					break;
 800457a:	e00c      	b.n	8004596 <main+0x956>
				case 14:
					gsm_cmd("AT+CIPCLOSE=0", "OK", GSM_WAIT_TIME_LOW);
 800457c:	23fa      	movs	r3, #250	@ 0xfa
 800457e:	005a      	lsls	r2, r3, #1
 8004580:	4916      	ldr	r1, [pc, #88]	@ (80045dc <main+0x99c>)
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <main+0x9d0>)
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff f859 	bl	800363c <gsm_cmd>
					break;
 800458a:	e004      	b.n	8004596 <main+0x956>
				default:
				}
			}
			else gsm_cmd_step = 0;
 800458c:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <main+0x9d4>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e000      	b.n	8004596 <main+0x956>
					break;
 8004594:	46c0      	nop			@ (mov r8, r8)
		}
		if(sec % 30 == 0 && sec != 0) {
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <main+0x9d8>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	211e      	movs	r1, #30
 800459c:	0018      	movs	r0, r3
 800459e:	f7fb fe51 	bl	8000244 <__aeabi_uidivmod>
 80045a2:	000b      	movs	r3, r1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d112      	bne.n	80045d0 <main+0x990>
 80045aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <main+0x9d8>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <main+0x990>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80045b2:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <main+0x9dc>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10e      	bne.n	80045d8 <main+0x998>
 80045ba:	4b19      	ldr	r3, [pc, #100]	@ (8004620 <main+0x9e0>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <main+0x998>
				upload_running = 1; /* start uploading */
 80045c2:	4b16      	ldr	r3, [pc, #88]	@ (800461c <main+0x9dc>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
				gsm_cmd_step = 0; /* with the first command */
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <main+0x9d4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80045ce:	e003      	b.n	80045d8 <main+0x998>
			}
		} else upload_flag = 0;
 80045d0:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <main+0x9e0>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e462      	b.n	8003e9e <main+0x25e>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80045d8:	46c0      	nop			@ (mov r8, r8)
		if(kwh_update_flag == 1) {
 80045da:	e460      	b.n	8003e9e <main+0x25e>
 80045dc:	0800e17c 	.word	0x0800e17c
 80045e0:	0800e200 	.word	0x0800e200
 80045e4:	00002710 	.word	0x00002710
 80045e8:	0800e210 	.word	0x0800e210
 80045ec:	0800e21c 	.word	0x0800e21c
 80045f0:	0800e22c 	.word	0x0800e22c
 80045f4:	2000056c 	.word	0x2000056c
 80045f8:	20000569 	.word	0x20000569
 80045fc:	2000020c 	.word	0x2000020c
 8004600:	20000208 	.word	0x20000208
 8004604:	20000558 	.word	0x20000558
 8004608:	0800e254 	.word	0x0800e254
 800460c:	0800e2d0 	.word	0x0800e2d0
 8004610:	0800e2d8 	.word	0x0800e2d8
 8004614:	20000580 	.word	0x20000580
 8004618:	20000538 	.word	0x20000538
 800461c:	200005fc 	.word	0x200005fc
 8004620:	200005fd 	.word	0x200005fd

08004624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b093      	sub	sp, #76	@ 0x4c
 8004628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800462a:	2414      	movs	r4, #20
 800462c:	193b      	adds	r3, r7, r4
 800462e:	0018      	movs	r0, r3
 8004630:	2334      	movs	r3, #52	@ 0x34
 8004632:	001a      	movs	r2, r3
 8004634:	2100      	movs	r1, #0
 8004636:	f007 fc13 	bl	800be60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	0018      	movs	r0, r3
 800463e:	2310      	movs	r3, #16
 8004640:	001a      	movs	r2, r3
 8004642:	2100      	movs	r1, #0
 8004644:	f007 fc0c 	bl	800be60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	0018      	movs	r0, r3
 800464e:	f003 fd07 	bl	8008060 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004652:	193b      	adds	r3, r7, r4
 8004654:	2202      	movs	r2, #2
 8004656:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004658:	193b      	adds	r3, r7, r4
 800465a:	2280      	movs	r2, #128	@ 0x80
 800465c:	0052      	lsls	r2, r2, #1
 800465e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004660:	0021      	movs	r1, r4
 8004662:	187b      	adds	r3, r7, r1
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004668:	187b      	adds	r3, r7, r1
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800466e:	187b      	adds	r3, r7, r1
 8004670:	2202      	movs	r2, #2
 8004672:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2202      	movs	r2, #2
 8004678:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800467a:	187b      	adds	r3, r7, r1
 800467c:	2200      	movs	r2, #0
 800467e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8004680:	187b      	adds	r3, r7, r1
 8004682:	220c      	movs	r2, #12
 8004684:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8004686:	187b      	adds	r3, r7, r1
 8004688:	22b0      	movs	r2, #176	@ 0xb0
 800468a:	0352      	lsls	r2, r2, #13
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800468e:	187b      	adds	r3, r7, r1
 8004690:	22a0      	movs	r2, #160	@ 0xa0
 8004692:	0612      	lsls	r2, r2, #24
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004696:	187b      	adds	r3, r7, r1
 8004698:	0018      	movs	r0, r3
 800469a:	f003 fd2d 	bl	80080f8 <HAL_RCC_OscConfig>
 800469e:	1e03      	subs	r3, r0, #0
 80046a0:	d001      	beq.n	80046a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80046a2:	f000 fad5 	bl	8004c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	2207      	movs	r2, #7
 80046aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	2202      	movs	r2, #2
 80046b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	2200      	movs	r2, #0
 80046bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2101      	movs	r1, #1
 80046c2:	0018      	movs	r0, r3
 80046c4:	f004 f828 	bl	8008718 <HAL_RCC_ClockConfig>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d001      	beq.n	80046d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80046cc:	f000 fac0 	bl	8004c50 <Error_Handler>
  }
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b013      	add	sp, #76	@ 0x4c
 80046d6:	bd90      	pop	{r4, r7, pc}

080046d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	0018      	movs	r0, r3
 80046e2:	230c      	movs	r3, #12
 80046e4:	001a      	movs	r2, r3
 80046e6:	2100      	movs	r1, #0
 80046e8:	f007 fbba 	bl	800be60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80046ec:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <MX_ADC1_Init+0x110>)
 80046ee:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <MX_ADC1_Init+0x114>)
 80046f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80046f2:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <MX_ADC1_Init+0x110>)
 80046f4:	2280      	movs	r2, #128	@ 0x80
 80046f6:	0352      	lsls	r2, r2, #13
 80046f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <MX_ADC1_Init+0x110>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004702:	2200      	movs	r2, #0
 8004704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004706:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004708:	2280      	movs	r2, #128	@ 0x80
 800470a:	0392      	lsls	r2, r2, #14
 800470c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800470e:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004710:	2208      	movs	r2, #8
 8004712:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004714:	4b34      	ldr	r3, [pc, #208]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004716:	2200      	movs	r2, #0
 8004718:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800471c:	2200      	movs	r2, #0
 800471e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004722:	2201      	movs	r2, #1
 8004724:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8004726:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004728:	2203      	movs	r2, #3
 800472a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800472c:	4b2e      	ldr	r3, [pc, #184]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800472e:	2220      	movs	r2, #32
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004734:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004736:	2200      	movs	r2, #0
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800473a:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800473c:	2200      	movs	r2, #0
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004740:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004742:	222c      	movs	r2, #44	@ 0x2c
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004748:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800474e:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004750:	2200      	movs	r2, #0
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004754:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004756:	2200      	movs	r2, #0
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800475a:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800475c:	223c      	movs	r2, #60	@ 0x3c
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004762:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <MX_ADC1_Init+0x110>)
 8004764:	2200      	movs	r2, #0
 8004766:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004768:	4b1f      	ldr	r3, [pc, #124]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800476a:	0018      	movs	r0, r3
 800476c:	f001 f876 	bl	800585c <HAL_ADC_Init>
 8004770:	1e03      	subs	r3, r0, #0
 8004772:	d001      	beq.n	8004778 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004774:	f000 fa6c 	bl	8004c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <MX_ADC1_Init+0x118>)
 800477c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800478a:	1d3a      	adds	r2, r7, #4
 800478c:	4b16      	ldr	r3, [pc, #88]	@ (80047e8 <MX_ADC1_Init+0x110>)
 800478e:	0011      	movs	r1, r2
 8004790:	0018      	movs	r0, r3
 8004792:	f001 fb33 	bl	8005dfc <HAL_ADC_ConfigChannel>
 8004796:	1e03      	subs	r3, r0, #0
 8004798:	d001      	beq.n	800479e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800479a:	f000 fa59 	bl	8004c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <MX_ADC1_Init+0x11c>)
 80047a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	2204      	movs	r2, #4
 80047a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047aa:	1d3a      	adds	r2, r7, #4
 80047ac:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <MX_ADC1_Init+0x110>)
 80047ae:	0011      	movs	r1, r2
 80047b0:	0018      	movs	r0, r3
 80047b2:	f001 fb23 	bl	8005dfc <HAL_ADC_ConfigChannel>
 80047b6:	1e03      	subs	r3, r0, #0
 80047b8:	d001      	beq.n	80047be <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80047ba:	f000 fa49 	bl	8004c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <MX_ADC1_Init+0x120>)
 80047c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	2208      	movs	r2, #8
 80047c8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047ca:	1d3a      	adds	r2, r7, #4
 80047cc:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <MX_ADC1_Init+0x110>)
 80047ce:	0011      	movs	r1, r2
 80047d0:	0018      	movs	r0, r3
 80047d2:	f001 fb13 	bl	8005dfc <HAL_ADC_ConfigChannel>
 80047d6:	1e03      	subs	r3, r0, #0
 80047d8:	d001      	beq.n	80047de <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80047da:	f000 fa39 	bl	8004c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b004      	add	sp, #16
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	20000214 	.word	0x20000214
 80047ec:	40012400 	.word	0x40012400
 80047f0:	08000004 	.word	0x08000004
 80047f4:	0c000008 	.word	0x0c000008
 80047f8:	b4002000 	.word	0xb4002000

080047fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004800:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004802:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <MX_I2C1_Init+0x78>)
 8004804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8004806:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004808:	4a1b      	ldr	r2, [pc, #108]	@ (8004878 <MX_I2C1_Init+0x7c>)
 800480a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800480c:	4b18      	ldr	r3, [pc, #96]	@ (8004870 <MX_I2C1_Init+0x74>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004812:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004814:	2201      	movs	r2, #1
 8004816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004818:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <MX_I2C1_Init+0x74>)
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004820:	2200      	movs	r2, #0
 8004822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004824:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004826:	2200      	movs	r2, #0
 8004828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <MX_I2C1_Init+0x74>)
 800482c:	2200      	movs	r2, #0
 800482e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004832:	2200      	movs	r2, #0
 8004834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004838:	0018      	movs	r0, r3
 800483a:	f002 faa5 	bl	8006d88 <HAL_I2C_Init>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d001      	beq.n	8004846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004842:	f000 fa05 	bl	8004c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004846:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <MX_I2C1_Init+0x74>)
 8004848:	2100      	movs	r1, #0
 800484a:	0018      	movs	r0, r3
 800484c:	f003 fb70 	bl	8007f30 <HAL_I2CEx_ConfigAnalogFilter>
 8004850:	1e03      	subs	r3, r0, #0
 8004852:	d001      	beq.n	8004858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004854:	f000 f9fc 	bl	8004c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <MX_I2C1_Init+0x74>)
 800485a:	2100      	movs	r1, #0
 800485c:	0018      	movs	r0, r3
 800485e:	f003 fbb3 	bl	8007fc8 <HAL_I2CEx_ConfigDigitalFilter>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d001      	beq.n	800486a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004866:	f000 f9f3 	bl	8004c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200002d4 	.word	0x200002d4
 8004874:	40005400 	.word	0x40005400
 8004878:	0060112f 	.word	0x0060112f

0800487c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004880:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <MX_SPI2_Init+0x78>)
 8004882:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <MX_SPI2_Init+0x7c>)
 8004884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004886:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <MX_SPI2_Init+0x78>)
 8004888:	2282      	movs	r2, #130	@ 0x82
 800488a:	0052      	lsls	r2, r2, #1
 800488c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800488e:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <MX_SPI2_Init+0x78>)
 8004890:	2280      	movs	r2, #128	@ 0x80
 8004892:	00d2      	lsls	r2, r2, #3
 8004894:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004896:	4b17      	ldr	r3, [pc, #92]	@ (80048f4 <MX_SPI2_Init+0x78>)
 8004898:	22f0      	movs	r2, #240	@ 0xf0
 800489a:	0112      	lsls	r2, r2, #4
 800489c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800489e:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048a4:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048ac:	2280      	movs	r2, #128	@ 0x80
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048b2:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048b4:	2210      	movs	r2, #16
 80048b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b8:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80048be:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048cc:	2207      	movs	r2, #7
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048d0:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048d8:	2208      	movs	r2, #8
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <MX_SPI2_Init+0x78>)
 80048de:	0018      	movs	r0, r3
 80048e0:	f004 f9f8 	bl	8008cd4 <HAL_SPI_Init>
 80048e4:	1e03      	subs	r3, r0, #0
 80048e6:	d001      	beq.n	80048ec <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80048e8:	f000 f9b2 	bl	8004c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	20000328 	.word	0x20000328
 80048f8:	40003800 	.word	0x40003800

080048fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004900:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <MX_TIM16_Init+0x44>)
 8004902:	4a10      	ldr	r2, [pc, #64]	@ (8004944 <MX_TIM16_Init+0x48>)
 8004904:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 8004906:	4b0e      	ldr	r3, [pc, #56]	@ (8004940 <MX_TIM16_Init+0x44>)
 8004908:	2220      	movs	r2, #32
 800490a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490c:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <MX_TIM16_Init+0x44>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <MX_TIM16_Init+0x44>)
 8004914:	2264      	movs	r2, #100	@ 0x64
 8004916:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004918:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <MX_TIM16_Init+0x44>)
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <MX_TIM16_Init+0x44>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <MX_TIM16_Init+0x44>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800492a:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <MX_TIM16_Init+0x44>)
 800492c:	0018      	movs	r0, r3
 800492e:	f004 ff91 	bl	8009854 <HAL_TIM_Base_Init>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004936:	f000 f98b 	bl	8004c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000038c 	.word	0x2000038c
 8004944:	40014400 	.word	0x40014400

08004948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800494c:	4b16      	ldr	r3, [pc, #88]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 800494e:	4a17      	ldr	r2, [pc, #92]	@ (80049ac <MX_USART3_UART_Init+0x64>)
 8004950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004954:	22e1      	movs	r2, #225	@ 0xe1
 8004956:	0252      	lsls	r2, r2, #9
 8004958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800495a:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004960:	4b11      	ldr	r3, [pc, #68]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800496c:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 800496e:	220c      	movs	r2, #12
 8004970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004980:	2200      	movs	r2, #0
 8004982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004984:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 800498c:	2200      	movs	r2, #0
 800498e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <MX_USART3_UART_Init+0x60>)
 8004992:	0018      	movs	r0, r3
 8004994:	f005 f9d0 	bl	8009d38 <HAL_UART_Init>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d001      	beq.n	80049a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800499c:	f000 f958 	bl	8004c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	200003d8 	.word	0x200003d8
 80049ac:	40004800 	.word	0x40004800

080049b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <MX_DMA_Init+0x48>)
 80049b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ba:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <MX_DMA_Init+0x48>)
 80049bc:	2101      	movs	r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80049c2:	4b0d      	ldr	r3, [pc, #52]	@ (80049f8 <MX_DMA_Init+0x48>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	2009      	movs	r0, #9
 80049d4:	f001 fcb6 	bl	8006344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049d8:	2009      	movs	r0, #9
 80049da:	f001 fcc8 	bl	800636e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	200a      	movs	r0, #10
 80049e4:	f001 fcae 	bl	8006344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80049e8:	200a      	movs	r0, #10
 80049ea:	f001 fcc0 	bl	800636e <HAL_NVIC_EnableIRQ>

}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	40021000 	.word	0x40021000

080049fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b08b      	sub	sp, #44	@ 0x2c
 8004a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a02:	2414      	movs	r4, #20
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	0018      	movs	r0, r3
 8004a08:	2314      	movs	r3, #20
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f007 fa27 	bl	800be60 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a12:	4b8a      	ldr	r3, [pc, #552]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a16:	4b89      	ldr	r3, [pc, #548]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a18:	2104      	movs	r1, #4
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a1e:	4b87      	ldr	r3, [pc, #540]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a2a:	4b84      	ldr	r3, [pc, #528]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2e:	4b83      	ldr	r3, [pc, #524]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a30:	2120      	movs	r1, #32
 8004a32:	430a      	orrs	r2, r1
 8004a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a36:	4b81      	ldr	r3, [pc, #516]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	4b7e      	ldr	r3, [pc, #504]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a46:	4b7d      	ldr	r3, [pc, #500]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a48:	2101      	movs	r1, #1
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	2201      	movs	r2, #1
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5a:	4b78      	ldr	r3, [pc, #480]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a5e:	4b77      	ldr	r3, [pc, #476]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a60:	2102      	movs	r1, #2
 8004a62:	430a      	orrs	r2, r1
 8004a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a66:	4b75      	ldr	r3, [pc, #468]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a72:	4b72      	ldr	r3, [pc, #456]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a76:	4b71      	ldr	r3, [pc, #452]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a78:	2108      	movs	r1, #8
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c3c <MX_GPIO_Init+0x240>)
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	2208      	movs	r2, #8
 8004a84:	4013      	ands	r3, r2
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004a8a:	23e0      	movs	r3, #224	@ 0xe0
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	486c      	ldr	r0, [pc, #432]	@ (8004c40 <MX_GPIO_Init+0x244>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	0019      	movs	r1, r3
 8004a94:	f002 f927 	bl	8006ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8004a98:	4b6a      	ldr	r3, [pc, #424]	@ (8004c44 <MX_GPIO_Init+0x248>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f002 f921 	bl	8006ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 8004aa4:	23e0      	movs	r3, #224	@ 0xe0
 8004aa6:	0059      	lsls	r1, r3, #1
 8004aa8:	23a0      	movs	r3, #160	@ 0xa0
 8004aaa:	05db      	lsls	r3, r3, #23
 8004aac:	2200      	movs	r2, #0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f002 f919 	bl	8006ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 8004ab4:	2398      	movs	r3, #152	@ 0x98
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	4863      	ldr	r0, [pc, #396]	@ (8004c48 <MX_GPIO_Init+0x24c>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	0019      	movs	r1, r3
 8004abe:	f002 f912 	bl	8006ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004ac2:	4b62      	ldr	r3, [pc, #392]	@ (8004c4c <MX_GPIO_Init+0x250>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2108      	movs	r1, #8
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f002 f90c 	bl	8006ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8004ace:	193b      	adds	r3, r7, r4
 8004ad0:	22e0      	movs	r2, #224	@ 0xe0
 8004ad2:	0212      	lsls	r2, r2, #8
 8004ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad6:	193b      	adds	r3, r7, r4
 8004ad8:	2201      	movs	r2, #1
 8004ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004adc:	193b      	adds	r3, r7, r4
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae2:	193b      	adds	r3, r7, r4
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	4a55      	ldr	r2, [pc, #340]	@ (8004c40 <MX_GPIO_Init+0x244>)
 8004aec:	0019      	movs	r1, r3
 8004aee:	0010      	movs	r0, r2
 8004af0:	f001 ff78 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 8004af4:	193b      	adds	r3, r7, r4
 8004af6:	2203      	movs	r2, #3
 8004af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	2201      	movs	r2, #1
 8004afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b06:	193b      	adds	r3, r7, r4
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b0c:	193b      	adds	r3, r7, r4
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c44 <MX_GPIO_Init+0x248>)
 8004b10:	0019      	movs	r1, r3
 8004b12:	0010      	movs	r0, r2
 8004b14:	f001 ff66 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8004b18:	193b      	adds	r3, r7, r4
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b1e:	193b      	adds	r3, r7, r4
 8004b20:	2284      	movs	r2, #132	@ 0x84
 8004b22:	0392      	lsls	r2, r2, #14
 8004b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	2201      	movs	r2, #1
 8004b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8004b2c:	193a      	adds	r2, r7, r4
 8004b2e:	23a0      	movs	r3, #160	@ 0xa0
 8004b30:	05db      	lsls	r3, r3, #23
 8004b32:	0011      	movs	r1, r2
 8004b34:	0018      	movs	r0, r3
 8004b36:	f001 ff55 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 8004b3a:	0021      	movs	r1, r4
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	22e0      	movs	r2, #224	@ 0xe0
 8004b40:	0052      	lsls	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b44:	000c      	movs	r4, r1
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	2201      	movs	r2, #1
 8004b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	2200      	movs	r2, #0
 8004b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	193a      	adds	r2, r7, r4
 8004b5a:	23a0      	movs	r3, #160	@ 0xa0
 8004b5c:	05db      	lsls	r3, r3, #23
 8004b5e:	0011      	movs	r1, r2
 8004b60:	0018      	movs	r0, r3
 8004b62:	f001 ff3f 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC1_Pin CS_TC2_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin;
 8004b66:	0021      	movs	r1, r4
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	2298      	movs	r2, #152	@ 0x98
 8004b6c:	0212      	lsls	r2, r2, #8
 8004b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b70:	000c      	movs	r4, r1
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	2201      	movs	r2, #1
 8004b76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	2200      	movs	r2, #0
 8004b82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b84:	193b      	adds	r3, r7, r4
 8004b86:	4a30      	ldr	r2, [pc, #192]	@ (8004c48 <MX_GPIO_Init+0x24c>)
 8004b88:	0019      	movs	r1, r3
 8004b8a:	0010      	movs	r0, r2
 8004b8c:	f001 ff2a 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 8004b90:	0021      	movs	r1, r4
 8004b92:	187b      	adds	r3, r7, r1
 8004b94:	2240      	movs	r2, #64	@ 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	2284      	movs	r2, #132	@ 0x84
 8004b9c:	0392      	lsls	r2, r2, #14
 8004b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	000c      	movs	r4, r1
 8004ba2:	193b      	adds	r3, r7, r4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	4a25      	ldr	r2, [pc, #148]	@ (8004c40 <MX_GPIO_Init+0x244>)
 8004bac:	0019      	movs	r1, r3
 8004bae:	0010      	movs	r0, r2
 8004bb0:	f001 ff18 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	2200      	movs	r2, #0
 8004bca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004bcc:	193b      	adds	r3, r7, r4
 8004bce:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <MX_GPIO_Init+0x250>)
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	f001 ff06 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	2208      	movs	r2, #8
 8004bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	2202      	movs	r2, #2
 8004be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	193b      	adds	r3, r7, r4
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bea:	193b      	adds	r3, r7, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004bf0:	193b      	adds	r3, r7, r4
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	4a13      	ldr	r2, [pc, #76]	@ (8004c48 <MX_GPIO_Init+0x24c>)
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	0010      	movs	r0, r2
 8004bfe:	f001 fef1 	bl	80069e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 8004c02:	0021      	movs	r1, r4
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	22e0      	movs	r2, #224	@ 0xe0
 8004c08:	0092      	lsls	r2, r2, #2
 8004c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c48 <MX_GPIO_Init+0x24c>)
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	0010      	movs	r0, r2
 8004c20:	f001 fee0 	bl	80069e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	2007      	movs	r0, #7
 8004c2a:	f001 fb8b 	bl	8006344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004c2e:	2007      	movs	r0, #7
 8004c30:	f001 fb9d 	bl	800636e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b00b      	add	sp, #44	@ 0x2c
 8004c3a:	bd90      	pop	{r4, r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	50000800 	.word	0x50000800
 8004c44:	50001400 	.word	0x50001400
 8004c48:	50000400 	.word	0x50000400
 8004c4c:	50000c00 	.word	0x50000c00

08004c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c54:	b672      	cpsid	i
}
 8004c56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004c58:	46c0      	nop			@ (mov r8, r8)
 8004c5a:	e7fd      	b.n	8004c58 <Error_Handler+0x8>

08004c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c80:	2180      	movs	r1, #128	@ 0x80
 8004c82:	0549      	lsls	r1, r1, #21
 8004c84:	430a      	orrs	r2, r1
 8004c86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_MspInit+0x44>)
 8004c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c8c:	2380      	movs	r3, #128	@ 0x80
 8004c8e:	055b      	lsls	r3, r3, #21
 8004c90:	4013      	ands	r3, r2
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b091      	sub	sp, #68	@ 0x44
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	232c      	movs	r3, #44	@ 0x2c
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	2314      	movs	r3, #20
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	f007 f8d2 	bl	800be60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cbc:	2410      	movs	r4, #16
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	231c      	movs	r3, #28
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f007 f8ca 	bl	800be60 <memset>
  if(hadc->Instance==ADC1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8004dbc <HAL_ADC_MspInit+0x118>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d16d      	bne.n	8004db2 <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	01d2      	lsls	r2, r2, #7
 8004cdc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	2280      	movs	r2, #128	@ 0x80
 8004ce2:	05d2      	lsls	r2, r2, #23
 8004ce4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f003 febf 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004cf2:	f7ff ffad 	bl	8004c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004cf6:	4b32      	ldr	r3, [pc, #200]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfa:	4b31      	ldr	r3, [pc, #196]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004cfc:	2180      	movs	r1, #128	@ 0x80
 8004cfe:	0349      	lsls	r1, r1, #13
 8004d00:	430a      	orrs	r2, r1
 8004d02:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d04:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	035b      	lsls	r3, r3, #13
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d12:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d16:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004d18:	2101      	movs	r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d1e:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <HAL_ADC_MspInit+0x11c>)
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d22:	2201      	movs	r2, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d2a:	212c      	movs	r1, #44	@ 0x2c
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	220c      	movs	r2, #12
 8004d30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	2203      	movs	r2, #3
 8004d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3e:	187a      	adds	r2, r7, r1
 8004d40:	23a0      	movs	r3, #160	@ 0xa0
 8004d42:	05db      	lsls	r3, r3, #23
 8004d44:	0011      	movs	r1, r2
 8004d46:	0018      	movs	r0, r3
 8004d48:	f001 fe4c 	bl	80069e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc8 <HAL_ADC_MspInit+0x124>)
 8004d50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d54:	2205      	movs	r2, #5
 8004d56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d64:	4b17      	ldr	r3, [pc, #92]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d66:	2280      	movs	r2, #128	@ 0x80
 8004d68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d6a:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d6c:	2280      	movs	r2, #128	@ 0x80
 8004d6e:	0052      	lsls	r2, r2, #1
 8004d70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d72:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	00d2      	lsls	r2, r2, #3
 8004d78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d80:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f001 fb0d 	bl	80063a8 <HAL_DMA_Init>
 8004d8e:	1e03      	subs	r3, r0, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8004d92:	f7ff ff5d 	bl	8004c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_ADC_MspInit+0x120>)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	200c      	movs	r0, #12
 8004da8:	f001 facc 	bl	8006344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004dac:	200c      	movs	r0, #12
 8004dae:	f001 fade 	bl	800636e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b011      	add	sp, #68	@ 0x44
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	40012400 	.word	0x40012400
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	20000278 	.word	0x20000278
 8004dc8:	40020008 	.word	0x40020008

08004dcc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b091      	sub	sp, #68	@ 0x44
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	232c      	movs	r3, #44	@ 0x2c
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	0018      	movs	r0, r3
 8004dda:	2314      	movs	r3, #20
 8004ddc:	001a      	movs	r2, r3
 8004dde:	2100      	movs	r1, #0
 8004de0:	f007 f83e 	bl	800be60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de4:	2410      	movs	r4, #16
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	0018      	movs	r0, r3
 8004dea:	231c      	movs	r3, #28
 8004dec:	001a      	movs	r2, r3
 8004dee:	2100      	movs	r1, #0
 8004df0:	f007 f836 	bl	800be60 <memset>
  if(hi2c->Instance==I2C1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <HAL_I2C_MspInit+0xbc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d13f      	bne.n	8004e7e <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004dfe:	193b      	adds	r3, r7, r4
 8004e00:	2220      	movs	r2, #32
 8004e02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e0a:	193b      	adds	r3, r7, r4
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f003 fe2d 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004e16:	f7ff ff1b 	bl	8004c50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e20:	2101      	movs	r1, #1
 8004e22:	430a      	orrs	r2, r1
 8004e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e26:	4b19      	ldr	r3, [pc, #100]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e32:	212c      	movs	r1, #44	@ 0x2c
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	22c0      	movs	r2, #192	@ 0xc0
 8004e38:	00d2      	lsls	r2, r2, #3
 8004e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	2212      	movs	r2, #18
 8004e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	2206      	movs	r2, #6
 8004e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e54:	187a      	adds	r2, r7, r1
 8004e56:	23a0      	movs	r3, #160	@ 0xa0
 8004e58:	05db      	lsls	r3, r3, #23
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f001 fdc1 	bl	80069e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e68:	2180      	movs	r1, #128	@ 0x80
 8004e6a:	0389      	lsls	r1, r1, #14
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_I2C_MspInit+0xc0>)
 8004e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	039b      	lsls	r3, r3, #14
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b011      	add	sp, #68	@ 0x44
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	40005400 	.word	0x40005400
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b08b      	sub	sp, #44	@ 0x2c
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e98:	2414      	movs	r4, #20
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	2314      	movs	r3, #20
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f006 ffdc 	bl	800be60 <memset>
  if(hspi->Instance==SPI2)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a26      	ldr	r2, [pc, #152]	@ (8004f48 <HAL_SPI_MspInit+0xb8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d145      	bne.n	8004f3e <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004eb2:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb6:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004eb8:	2180      	movs	r1, #128	@ 0x80
 8004eba:	01c9      	lsls	r1, r1, #7
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ec0:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ec4:	2380      	movs	r3, #128	@ 0x80
 8004ec6:	01db      	lsls	r3, r3, #7
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ece:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eda:	4b1c      	ldr	r3, [pc, #112]	@ (8004f4c <HAL_SPI_MspInit+0xbc>)
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	2202      	movs	r2, #2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	2204      	movs	r2, #4
 8004eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	2202      	movs	r2, #2
 8004ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	193b      	adds	r3, r7, r4
 8004efa:	2200      	movs	r2, #0
 8004efc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2201      	movs	r2, #1
 8004f02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f04:	193b      	adds	r3, r7, r4
 8004f06:	4a12      	ldr	r2, [pc, #72]	@ (8004f50 <HAL_SPI_MspInit+0xc0>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	0010      	movs	r0, r2
 8004f0c:	f001 fd6a 	bl	80069e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f10:	0021      	movs	r1, r4
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	2280      	movs	r2, #128	@ 0x80
 8004f16:	00d2      	lsls	r2, r2, #3
 8004f18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	2205      	movs	r2, #5
 8004f30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	4a06      	ldr	r2, [pc, #24]	@ (8004f50 <HAL_SPI_MspInit+0xc0>)
 8004f36:	0019      	movs	r1, r3
 8004f38:	0010      	movs	r0, r2
 8004f3a:	f001 fd53 	bl	80069e4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b00b      	add	sp, #44	@ 0x2c
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	40003800 	.word	0x40003800
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	50000400 	.word	0x50000400

08004f54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0e      	ldr	r2, [pc, #56]	@ (8004f9c <HAL_TIM_Base_MspInit+0x48>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d115      	bne.n	8004f92 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <HAL_TIM_Base_MspInit+0x4c>)
 8004f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <HAL_TIM_Base_MspInit+0x4c>)
 8004f6c:	2180      	movs	r1, #128	@ 0x80
 8004f6e:	0289      	lsls	r1, r1, #10
 8004f70:	430a      	orrs	r2, r1
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <HAL_TIM_Base_MspInit+0x4c>)
 8004f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f78:	2380      	movs	r3, #128	@ 0x80
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	2015      	movs	r0, #21
 8004f88:	f001 f9dc 	bl	8006344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004f8c:	2015      	movs	r0, #21
 8004f8e:	f001 f9ee 	bl	800636e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b08b      	sub	sp, #44	@ 0x2c
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fac:	2414      	movs	r4, #20
 8004fae:	193b      	adds	r3, r7, r4
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	2314      	movs	r3, #20
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	f006 ff52 	bl	800be60 <memset>
  if(huart->Instance==USART3)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800512c <HAL_UART_MspInit+0x188>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d000      	beq.n	8004fc8 <HAL_UART_MspInit+0x24>
 8004fc6:	e0ad      	b.n	8005124 <HAL_UART_MspInit+0x180>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fc8:	4b59      	ldr	r3, [pc, #356]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fcc:	4b58      	ldr	r3, [pc, #352]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004fce:	2180      	movs	r1, #128	@ 0x80
 8004fd0:	02c9      	lsls	r1, r1, #11
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fd6:	4b56      	ldr	r3, [pc, #344]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fda:	2380      	movs	r3, #128	@ 0x80
 8004fdc:	02db      	lsls	r3, r3, #11
 8004fde:	4013      	ands	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe4:	4b52      	ldr	r3, [pc, #328]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe8:	4b51      	ldr	r3, [pc, #324]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004fea:	2101      	movs	r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005000:	4b4b      	ldr	r3, [pc, #300]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 8005002:	2102      	movs	r1, #2
 8005004:	430a      	orrs	r2, r1
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34
 8005008:	4b49      	ldr	r3, [pc, #292]	@ (8005130 <HAL_UART_MspInit+0x18c>)
 800500a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500c:	2202      	movs	r2, #2
 800500e:	4013      	ands	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8005014:	193b      	adds	r3, r7, r4
 8005016:	2220      	movs	r2, #32
 8005018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	193b      	adds	r3, r7, r4
 800501c:	2202      	movs	r2, #2
 800501e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005020:	193b      	adds	r3, r7, r4
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005026:	193b      	adds	r3, r7, r4
 8005028:	2200      	movs	r2, #0
 800502a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800502c:	193b      	adds	r3, r7, r4
 800502e:	2204      	movs	r2, #4
 8005030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8005032:	193a      	adds	r2, r7, r4
 8005034:	23a0      	movs	r3, #160	@ 0xa0
 8005036:	05db      	lsls	r3, r3, #23
 8005038:	0011      	movs	r1, r2
 800503a:	0018      	movs	r0, r3
 800503c:	f001 fcd2 	bl	80069e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8005040:	0021      	movs	r1, r4
 8005042:	187b      	adds	r3, r7, r1
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	187b      	adds	r3, r7, r1
 800504a:	2202      	movs	r2, #2
 800504c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	187b      	adds	r3, r7, r1
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2200      	movs	r2, #0
 8005058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800505a:	187b      	adds	r3, r7, r1
 800505c:	2204      	movs	r2, #4
 800505e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8005060:	187b      	adds	r3, r7, r1
 8005062:	4a34      	ldr	r2, [pc, #208]	@ (8005134 <HAL_UART_MspInit+0x190>)
 8005064:	0019      	movs	r1, r3
 8005066:	0010      	movs	r0, r2
 8005068:	f001 fcbc 	bl	80069e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800506c:	4b32      	ldr	r3, [pc, #200]	@ (8005138 <HAL_UART_MspInit+0x194>)
 800506e:	4a33      	ldr	r2, [pc, #204]	@ (800513c <HAL_UART_MspInit+0x198>)
 8005070:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005072:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <HAL_UART_MspInit+0x194>)
 8005074:	2236      	movs	r2, #54	@ 0x36
 8005076:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005078:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <HAL_UART_MspInit+0x194>)
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800507e:	4b2e      	ldr	r3, [pc, #184]	@ (8005138 <HAL_UART_MspInit+0x194>)
 8005080:	2200      	movs	r2, #0
 8005082:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005084:	4b2c      	ldr	r3, [pc, #176]	@ (8005138 <HAL_UART_MspInit+0x194>)
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800508a:	4b2b      	ldr	r3, [pc, #172]	@ (8005138 <HAL_UART_MspInit+0x194>)
 800508c:	2200      	movs	r2, #0
 800508e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005090:	4b29      	ldr	r3, [pc, #164]	@ (8005138 <HAL_UART_MspInit+0x194>)
 8005092:	2200      	movs	r2, #0
 8005094:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005096:	4b28      	ldr	r3, [pc, #160]	@ (8005138 <HAL_UART_MspInit+0x194>)
 8005098:	2200      	movs	r2, #0
 800509a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800509c:	4b26      	ldr	r3, [pc, #152]	@ (8005138 <HAL_UART_MspInit+0x194>)
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	0152      	lsls	r2, r2, #5
 80050a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80050a4:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <HAL_UART_MspInit+0x194>)
 80050a6:	0018      	movs	r0, r3
 80050a8:	f001 f97e 	bl	80063a8 <HAL_DMA_Init>
 80050ac:	1e03      	subs	r3, r0, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80050b0:	f7ff fdce 	bl	8004c50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005138 <HAL_UART_MspInit+0x194>)
 80050ba:	505a      	str	r2, [r3, r1]
 80050bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <HAL_UART_MspInit+0x194>)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 80050c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005144 <HAL_UART_MspInit+0x1a0>)
 80050c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050ca:	2237      	movs	r2, #55	@ 0x37
 80050cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050d0:	2210      	movs	r2, #16
 80050d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050da:	4b19      	ldr	r3, [pc, #100]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050dc:	2280      	movs	r2, #128	@ 0x80
 80050de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e0:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e6:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80050ec:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80050f8:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 80050fa:	0018      	movs	r0, r3
 80050fc:	f001 f954 	bl	80063a8 <HAL_DMA_Init>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005104:	f7ff fda4 	bl	8004c50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0d      	ldr	r2, [pc, #52]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 800510c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800510e:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <HAL_UART_MspInit+0x19c>)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8005114:	2200      	movs	r2, #0
 8005116:	2100      	movs	r1, #0
 8005118:	201d      	movs	r0, #29
 800511a:	f001 f913 	bl	8006344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800511e:	201d      	movs	r0, #29
 8005120:	f001 f925 	bl	800636e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8005124:	46c0      	nop			@ (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b00b      	add	sp, #44	@ 0x2c
 800512a:	bd90      	pop	{r4, r7, pc}
 800512c:	40004800 	.word	0x40004800
 8005130:	40021000 	.word	0x40021000
 8005134:	50000400 	.word	0x50000400
 8005138:	2000046c 	.word	0x2000046c
 800513c:	4002001c 	.word	0x4002001c
 8005140:	200004c8 	.word	0x200004c8
 8005144:	40020030 	.word	0x40020030

08005148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	e7fd      	b.n	800514c <NMI_Handler+0x4>

08005150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005154:	46c0      	nop			@ (mov r8, r8)
 8005156:	e7fd      	b.n	8005154 <HardFault_Handler+0x4>

08005158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800515c:	46c0      	nop			@ (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005170:	f000 fa18 	bl	80055a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005174:	46c0      	nop			@ (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 800517e:	2010      	movs	r0, #16
 8005180:	f001 fdce 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8005184:	2040      	movs	r0, #64	@ 0x40
 8005186:	f001 fdcb 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005194:	4b03      	ldr	r3, [pc, #12]	@ (80051a4 <DMA1_Channel1_IRQHandler+0x14>)
 8005196:	0018      	movs	r0, r3
 8005198:	f001 fae2 	bl	8006760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800519c:	46c0      	nop			@ (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	20000278 	.word	0x20000278

080051a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80051ae:	0018      	movs	r0, r3
 80051b0:	f001 fad6 	bl	8006760 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80051b4:	4b04      	ldr	r3, [pc, #16]	@ (80051c8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80051b6:	0018      	movs	r0, r3
 80051b8:	f001 fad2 	bl	8006760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	2000046c 	.word	0x2000046c
 80051c8:	200004c8 	.word	0x200004c8

080051cc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051d0:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <ADC1_IRQHandler+0x14>)
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 fcea 	bl	8005bac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	20000214 	.word	0x20000214

080051e4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80051e8:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <TIM16_IRQHandler+0x14>)
 80051ea:	0018      	movs	r0, r3
 80051ec:	f004 fbe0 	bl	80099b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	2000038c 	.word	0x2000038c

080051fc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005200:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <USART3_4_IRQHandler+0x14>)
 8005202:	0018      	movs	r0, r3
 8005204:	f004 fed8 	bl	8009fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	200003d8 	.word	0x200003d8

08005214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  return 1;
 8005218:	2301      	movs	r3, #1
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <_kill>:

int _kill(int pid, int sig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800522a:	f006 fe89 	bl	800bf40 <__errno>
 800522e:	0003      	movs	r3, r0
 8005230:	2216      	movs	r2, #22
 8005232:	601a      	str	r2, [r3, #0]
  return -1;
 8005234:	2301      	movs	r3, #1
 8005236:	425b      	negs	r3, r3
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b002      	add	sp, #8
 800523e:	bd80      	pop	{r7, pc}

08005240 <_exit>:

void _exit (int status)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005248:	2301      	movs	r3, #1
 800524a:	425a      	negs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0011      	movs	r1, r2
 8005250:	0018      	movs	r0, r3
 8005252:	f7ff ffe5 	bl	8005220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	e7fd      	b.n	8005256 <_exit+0x16>

0800525a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e00a      	b.n	8005282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800526c:	e000      	b.n	8005270 <_read+0x16>
 800526e:	bf00      	nop
 8005270:	0001      	movs	r1, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	60ba      	str	r2, [r7, #8]
 8005278:	b2ca      	uxtb	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	dbf0      	blt.n	800526c <_read+0x12>
  }

  return len;
 800528a:	687b      	ldr	r3, [r7, #4]
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}

08005294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e009      	b.n	80052ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	60ba      	str	r2, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	0018      	movs	r0, r3
 80052b0:	e000      	b.n	80052b4 <_write+0x20>
 80052b2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3301      	adds	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	dbf1      	blt.n	80052a6 <_write+0x12>
  }
  return len;
 80052c2:	687b      	ldr	r3, [r7, #4]
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_close>:

int _close(int file)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	425b      	negs	r3, r3
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2280      	movs	r2, #128	@ 0x80
 80052ee:	0192      	lsls	r2, r2, #6
 80052f0:	605a      	str	r2, [r3, #4]
  return 0;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <_isatty>:

int _isatty(int file)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005304:	2301      	movs	r3, #1
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}

0800530e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}

08005324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800532c:	4a14      	ldr	r2, [pc, #80]	@ (8005380 <_sbrk+0x5c>)
 800532e:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <_sbrk+0x60>)
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005338:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <_sbrk+0x64>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005340:	4b11      	ldr	r3, [pc, #68]	@ (8005388 <_sbrk+0x64>)
 8005342:	4a12      	ldr	r2, [pc, #72]	@ (800538c <_sbrk+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005346:	4b10      	ldr	r3, [pc, #64]	@ (8005388 <_sbrk+0x64>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d207      	bcs.n	8005364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005354:	f006 fdf4 	bl	800bf40 <__errno>
 8005358:	0003      	movs	r3, r0
 800535a:	220c      	movs	r2, #12
 800535c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800535e:	2301      	movs	r3, #1
 8005360:	425b      	negs	r3, r3
 8005362:	e009      	b.n	8005378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005364:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <_sbrk+0x64>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <_sbrk+0x64>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	18d2      	adds	r2, r2, r3
 8005372:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <_sbrk+0x64>)
 8005374:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20009000 	.word	0x20009000
 8005384:	00000400 	.word	0x00000400
 8005388:	2000060c 	.word	0x2000060c
 800538c:	20000760 	.word	0x20000760

08005390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <sensor_rx_disable+0x3c>)
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <sensor_rx_disable+0x3c>)
 80053aa:	2280      	movs	r2, #128	@ 0x80
 80053ac:	0152      	lsls	r2, r2, #5
 80053ae:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <sensor_rx_disable+0x3c>)
 80053b2:	2280      	movs	r2, #128	@ 0x80
 80053b4:	0192      	lsls	r2, r2, #6
 80053b6:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <sensor_rx_disable+0x3c>)
 80053ba:	2280      	movs	r2, #128	@ 0x80
 80053bc:	01d2      	lsls	r2, r2, #7
 80053be:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <sensor_rx_disable+0x3c>)
 80053c2:	2280      	movs	r2, #128	@ 0x80
 80053c4:	0212      	lsls	r2, r2, #8
 80053c6:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 80053c8:	23a0      	movs	r3, #160	@ 0xa0
 80053ca:	05db      	lsls	r3, r3, #23
 80053cc:	2280      	movs	r2, #128	@ 0x80
 80053ce:	0052      	lsls	r2, r2, #1
 80053d0:	619a      	str	r2, [r3, #24]
}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	50000400 	.word	0x50000400

080053dc <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	0002      	movs	r2, r0
 80053e4:	1dfb      	adds	r3, r7, #7
 80053e6:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 80053e8:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <sensor_rx_select+0x98>)
 80053ea:	2280      	movs	r2, #128	@ 0x80
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 80053f0:	4b20      	ldr	r3, [pc, #128]	@ (8005474 <sensor_rx_select+0x98>)
 80053f2:	2280      	movs	r2, #128	@ 0x80
 80053f4:	0152      	lsls	r2, r2, #5
 80053f6:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <sensor_rx_select+0x98>)
 80053fa:	2280      	movs	r2, #128	@ 0x80
 80053fc:	0192      	lsls	r2, r2, #6
 80053fe:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005400:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <sensor_rx_select+0x98>)
 8005402:	2280      	movs	r2, #128	@ 0x80
 8005404:	01d2      	lsls	r2, r2, #7
 8005406:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005408:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <sensor_rx_select+0x98>)
 800540a:	2280      	movs	r2, #128	@ 0x80
 800540c:	0212      	lsls	r2, r2, #8
 800540e:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005410:	23a0      	movs	r3, #160	@ 0xa0
 8005412:	05db      	lsls	r3, r3, #23
 8005414:	2280      	movs	r2, #128	@ 0x80
 8005416:	0052      	lsls	r2, r2, #1
 8005418:	619a      	str	r2, [r3, #24]
	switch(index) {
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b06      	cmp	r3, #6
 8005420:	d824      	bhi.n	800546c <sensor_rx_select+0x90>
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <sensor_rx_select+0x9c>)
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 800542c:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <sensor_rx_select+0x98>)
 800542e:	2280      	movs	r2, #128	@ 0x80
 8005430:	0112      	lsls	r2, r2, #4
 8005432:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005434:	e01a      	b.n	800546c <sensor_rx_select+0x90>
	case 2:
		TEMP5_CS(0);
 8005436:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <sensor_rx_select+0x98>)
 8005438:	2280      	movs	r2, #128	@ 0x80
 800543a:	0212      	lsls	r2, r2, #8
 800543c:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 800543e:	e015      	b.n	800546c <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 8005440:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <sensor_rx_select+0x98>)
 8005442:	2280      	movs	r2, #128	@ 0x80
 8005444:	0192      	lsls	r2, r2, #6
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005448:	e010      	b.n	800546c <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 800544a:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <sensor_rx_select+0x98>)
 800544c:	2280      	movs	r2, #128	@ 0x80
 800544e:	01d2      	lsls	r2, r2, #7
 8005450:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005452:	e00b      	b.n	800546c <sensor_rx_select+0x90>
	case 5:
		TEMP2_CS(0);
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <sensor_rx_select+0x98>)
 8005456:	2280      	movs	r2, #128	@ 0x80
 8005458:	0152      	lsls	r2, r2, #5
 800545a:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 800545c:	e006      	b.n	800546c <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 800545e:	23a0      	movs	r3, #160	@ 0xa0
 8005460:	05db      	lsls	r3, r3, #23
 8005462:	2280      	movs	r2, #128	@ 0x80
 8005464:	0052      	lsls	r2, r2, #1
 8005466:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005468:	e000      	b.n	800546c <sensor_rx_select+0x90>
		return;
 800546a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800546c:	46bd      	mov	sp, r7
 800546e:	b002      	add	sp, #8
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	50000400 	.word	0x50000400
 8005478:	0800e468 	.word	0x0800e468

0800547c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800547c:	480d      	ldr	r0, [pc, #52]	@ (80054b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800547e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005480:	f7ff ff86 	bl	8005390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005484:	480c      	ldr	r0, [pc, #48]	@ (80054b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005486:	490d      	ldr	r1, [pc, #52]	@ (80054bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005488:	4a0d      	ldr	r2, [pc, #52]	@ (80054c0 <LoopForever+0xe>)
  movs r3, #0
 800548a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800548c:	e002      	b.n	8005494 <LoopCopyDataInit>

0800548e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800548e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005492:	3304      	adds	r3, #4

08005494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005498:	d3f9      	bcc.n	800548e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800549a:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800549c:	4c0a      	ldr	r4, [pc, #40]	@ (80054c8 <LoopForever+0x16>)
  movs r3, #0
 800549e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054a0:	e001      	b.n	80054a6 <LoopFillZerobss>

080054a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054a4:	3204      	adds	r2, #4

080054a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a8:	d3fb      	bcc.n	80054a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80054aa:	f006 fd4f 	bl	800bf4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80054ae:	f7fe fbc7 	bl	8003c40 <main>

080054b2 <LoopForever>:

LoopForever:
  b LoopForever
 80054b2:	e7fe      	b.n	80054b2 <LoopForever>
  ldr   r0, =_estack
 80054b4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80054b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80054c0:	0800e81c 	.word	0x0800e81c
  ldr r2, =_sbss
 80054c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80054c8:	20000760 	.word	0x20000760

080054cc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054cc:	e7fe      	b.n	80054cc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080054d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054d6:	1dfb      	adds	r3, r7, #7
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054dc:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <HAL_Init+0x3c>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <HAL_Init+0x3c>)
 80054e2:	2180      	movs	r1, #128	@ 0x80
 80054e4:	0049      	lsls	r1, r1, #1
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054ea:	2003      	movs	r0, #3
 80054ec:	f000 f810 	bl	8005510 <HAL_InitTick>
 80054f0:	1e03      	subs	r3, r0, #0
 80054f2:	d003      	beq.n	80054fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80054f4:	1dfb      	adds	r3, r7, #7
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e001      	b.n	8005500 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80054fc:	f7ff fbae 	bl	8004c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	781b      	ldrb	r3, [r3, #0]
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40022000 	.word	0x40022000

08005510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005518:	230f      	movs	r3, #15
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005520:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <HAL_InitTick+0x88>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02b      	beq.n	8005580 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005528:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <HAL_InitTick+0x8c>)
 800552a:	681c      	ldr	r4, [r3, #0]
 800552c:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <HAL_InitTick+0x88>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	0019      	movs	r1, r3
 8005532:	23fa      	movs	r3, #250	@ 0xfa
 8005534:	0098      	lsls	r0, r3, #2
 8005536:	f7fa fdff 	bl	8000138 <__udivsi3>
 800553a:	0003      	movs	r3, r0
 800553c:	0019      	movs	r1, r3
 800553e:	0020      	movs	r0, r4
 8005540:	f7fa fdfa 	bl	8000138 <__udivsi3>
 8005544:	0003      	movs	r3, r0
 8005546:	0018      	movs	r0, r3
 8005548:	f000 ff21 	bl	800638e <HAL_SYSTICK_Config>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d112      	bne.n	8005576 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d80a      	bhi.n	800556c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	2301      	movs	r3, #1
 800555a:	425b      	negs	r3, r3
 800555c:	2200      	movs	r2, #0
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fef0 	bl	8006344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005564:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <HAL_InitTick+0x90>)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e00d      	b.n	8005588 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800556c:	230f      	movs	r3, #15
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e008      	b.n	8005588 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005576:	230f      	movs	r3, #15
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e003      	b.n	8005588 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005580:	230f      	movs	r3, #15
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005588:	230f      	movs	r3, #15
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	781b      	ldrb	r3, [r3, #0]
}
 800558e:	0018      	movs	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	b005      	add	sp, #20
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	46c0      	nop			@ (mov r8, r8)
 8005598:	20000018 	.word	0x20000018
 800559c:	20000010 	.word	0x20000010
 80055a0:	20000014 	.word	0x20000014

080055a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <HAL_IncTick+0x1c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	001a      	movs	r2, r3
 80055ae:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_IncTick+0x20>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	18d2      	adds	r2, r2, r3
 80055b4:	4b03      	ldr	r3, [pc, #12]	@ (80055c4 <HAL_IncTick+0x20>)
 80055b6:	601a      	str	r2, [r3, #0]
}
 80055b8:	46c0      	nop			@ (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	20000018 	.word	0x20000018
 80055c4:	20000610 	.word	0x20000610

080055c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  return uwTick;
 80055cc:	4b02      	ldr	r3, [pc, #8]	@ (80055d8 <HAL_GetTick+0x10>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	20000610 	.word	0x20000610

080055dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7ff fff0 	bl	80055c8 <HAL_GetTick>
 80055e8:	0003      	movs	r3, r0
 80055ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	d005      	beq.n	8005602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <HAL_Delay+0x44>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	001a      	movs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	f7ff ffe0 	bl	80055c8 <HAL_GetTick>
 8005608:	0002      	movs	r2, r0
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d8f7      	bhi.n	8005604 <HAL_Delay+0x28>
  {
  }
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	20000018 	.word	0x20000018

08005624 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005634:	401a      	ands	r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	46c0      	nop			@ (mov r8, r8)
 8005640:	46bd      	mov	sp, r7
 8005642:	b002      	add	sp, #8
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	fe3fffff 	.word	0xfe3fffff

0800564c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	23e0      	movs	r3, #224	@ 0xe0
 800565a:	045b      	lsls	r3, r3, #17
 800565c:	4013      	ands	r3, r2
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b002      	add	sp, #8
 8005664:	bd80      	pop	{r7, pc}

08005666 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	2104      	movs	r1, #4
 800567a:	400a      	ands	r2, r1
 800567c:	2107      	movs	r1, #7
 800567e:	4091      	lsls	r1, r2
 8005680:	000a      	movs	r2, r1
 8005682:	43d2      	mvns	r2, r2
 8005684:	401a      	ands	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2104      	movs	r1, #4
 800568a:	400b      	ands	r3, r1
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4099      	lsls	r1, r3
 8005690:	000b      	movs	r3, r1
 8005692:	431a      	orrs	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b004      	add	sp, #16
 800569e:	bd80      	pop	{r7, pc}

080056a0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	2104      	movs	r1, #4
 80056b2:	400a      	ands	r2, r1
 80056b4:	2107      	movs	r1, #7
 80056b6:	4091      	lsls	r1, r2
 80056b8:	000a      	movs	r2, r1
 80056ba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2104      	movs	r1, #4
 80056c0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80056c2:	40da      	lsrs	r2, r3
 80056c4:	0013      	movs	r3, r2
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b002      	add	sp, #8
 80056cc:	bd80      	pop	{r7, pc}

080056ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	23c0      	movs	r3, #192	@ 0xc0
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	d101      	bne.n	80056e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b002      	add	sp, #8
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	211f      	movs	r1, #31
 8005704:	400a      	ands	r2, r1
 8005706:	210f      	movs	r1, #15
 8005708:	4091      	lsls	r1, r2
 800570a:	000a      	movs	r2, r1
 800570c:	43d2      	mvns	r2, r2
 800570e:	401a      	ands	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0e9b      	lsrs	r3, r3, #26
 8005714:	210f      	movs	r1, #15
 8005716:	4019      	ands	r1, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	201f      	movs	r0, #31
 800571c:	4003      	ands	r3, r0
 800571e:	4099      	lsls	r1, r3
 8005720:	000b      	movs	r3, r1
 8005722:	431a      	orrs	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005728:	46c0      	nop			@ (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	b004      	add	sp, #16
 800572e:	bd80      	pop	{r7, pc}

08005730 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	035b      	lsls	r3, r3, #13
 8005742:	0b5b      	lsrs	r3, r3, #13
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	46bd      	mov	sp, r7
 800574e:	b002      	add	sp, #8
 8005750:	bd80      	pop	{r7, pc}

08005752 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	0352      	lsls	r2, r2, #13
 8005764:	0b52      	lsrs	r2, r2, #13
 8005766:	43d2      	mvns	r2, r2
 8005768:	401a      	ands	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}

08005776 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2203      	movs	r2, #3
 8005784:	4013      	ands	r3, r2
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	0212      	lsls	r2, r2, #8
 80057a4:	43d2      	mvns	r2, r2
 80057a6:	401a      	ands	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	400b      	ands	r3, r1
 80057b0:	4904      	ldr	r1, [pc, #16]	@ (80057c4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80057b2:	400b      	ands	r3, r1
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	46bd      	mov	sp, r7
 80057be:	b004      	add	sp, #16
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	07ffff00 	.word	0x07ffff00

080057c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4a05      	ldr	r2, [pc, #20]	@ (80057ec <LL_ADC_EnableInternalRegulator+0x24>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	2280      	movs	r2, #128	@ 0x80
 80057da:	0552      	lsls	r2, r2, #21
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	6fffffe8 	.word	0x6fffffe8

080057f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	055b      	lsls	r3, r3, #21
 8005800:	401a      	ands	r2, r3
 8005802:	2380      	movs	r3, #128	@ 0x80
 8005804:	055b      	lsls	r3, r3, #21
 8005806:	429a      	cmp	r2, r3
 8005808:	d101      	bne.n	800580e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800580e:	2300      	movs	r3, #0
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}

08005818 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2201      	movs	r2, #1
 8005826:	4013      	ands	r3, r2
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <LL_ADC_IsEnabled+0x18>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <LL_ADC_IsEnabled+0x1a>
 8005830:	2300      	movs	r3, #0
}
 8005832:	0018      	movs	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	b002      	add	sp, #8
 8005838:	bd80      	pop	{r7, pc}

0800583a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2204      	movs	r2, #4
 8005848:	4013      	ands	r3, r2
 800584a:	2b04      	cmp	r3, #4
 800584c:	d101      	bne.n	8005852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005852:	2300      	movs	r3, #0
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005864:	231f      	movs	r3, #31
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e17f      	b.n	8005b82 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff fa09 	bl	8004ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2254      	movs	r2, #84	@ 0x54
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff ffa3 	bl	80057f0 <LL_ADC_IsInternalRegulatorEnabled>
 80058aa:	1e03      	subs	r3, r0, #0
 80058ac:	d115      	bne.n	80058da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff ff88 	bl	80057c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058b8:	4bb4      	ldr	r3, [pc, #720]	@ (8005b8c <HAL_ADC_Init+0x330>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	49b4      	ldr	r1, [pc, #720]	@ (8005b90 <HAL_ADC_Init+0x334>)
 80058be:	0018      	movs	r0, r3
 80058c0:	f7fa fc3a 	bl	8000138 <__udivsi3>
 80058c4:	0003      	movs	r3, r0
 80058c6:	3301      	adds	r3, #1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058cc:	e002      	b.n	80058d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f9      	bne.n	80058ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff ff86 	bl	80057f0 <LL_ADC_IsInternalRegulatorEnabled>
 80058e4:	1e03      	subs	r3, r0, #0
 80058e6:	d10f      	bne.n	8005908 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	2210      	movs	r2, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	2201      	movs	r2, #1
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005900:	231f      	movs	r3, #31
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0018      	movs	r0, r3
 800590e:	f7ff ff94 	bl	800583a <LL_ADC_REG_IsConversionOngoing>
 8005912:	0003      	movs	r3, r0
 8005914:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591a:	2210      	movs	r2, #16
 800591c:	4013      	ands	r3, r2
 800591e:	d000      	beq.n	8005922 <HAL_ADC_Init+0xc6>
 8005920:	e122      	b.n	8005b68 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d000      	beq.n	800592a <HAL_ADC_Init+0xce>
 8005928:	e11e      	b.n	8005b68 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592e:	4a99      	ldr	r2, [pc, #612]	@ (8005b94 <HAL_ADC_Init+0x338>)
 8005930:	4013      	ands	r3, r2
 8005932:	2202      	movs	r2, #2
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	0018      	movs	r0, r3
 8005940:	f7ff ff6a 	bl	8005818 <LL_ADC_IsEnabled>
 8005944:	1e03      	subs	r3, r0, #0
 8005946:	d000      	beq.n	800594a <HAL_ADC_Init+0xee>
 8005948:	e0ad      	b.n	8005aa6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7e1b      	ldrb	r3, [r3, #24]
 8005952:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005954:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7e5b      	ldrb	r3, [r3, #25]
 800595a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800595c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	7e9b      	ldrb	r3, [r3, #26]
 8005962:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005964:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_ADC_Init+0x118>
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	015b      	lsls	r3, r3, #5
 8005972:	e000      	b.n	8005976 <HAL_ADC_Init+0x11a>
 8005974:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005976:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800597c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	da04      	bge.n	8005990 <HAL_ADC_Init+0x134>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	e001      	b.n	8005994 <HAL_ADC_Init+0x138>
 8005990:	2380      	movs	r3, #128	@ 0x80
 8005992:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005994:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	212c      	movs	r1, #44	@ 0x2c
 800599a:	5c5b      	ldrb	r3, [r3, r1]
 800599c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800599e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	5c9b      	ldrb	r3, [r3, r2]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d115      	bne.n	80059dc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7e9b      	ldrb	r3, [r3, #26]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	0252      	lsls	r2, r2, #9
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e00b      	b.n	80059dc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c8:	2220      	movs	r2, #32
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d4:	2201      	movs	r2, #1
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059e8:	23e0      	movs	r3, #224	@ 0xe0
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80059f2:	4313      	orrs	r3, r2
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a65      	ldr	r2, [pc, #404]	@ (8005b98 <HAL_ADC_Init+0x33c>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0f9b      	lsrs	r3, r3, #30
 8005a16:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	223c      	movs	r2, #60	@ 0x3c
 8005a28:	5c9b      	ldrb	r3, [r3, r2]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d111      	bne.n	8005a52 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	0f9b      	lsrs	r3, r3, #30
 8005a34:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a3a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005a40:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005a46:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4a50      	ldr	r2, [pc, #320]	@ (8005b9c <HAL_ADC_Init+0x340>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	23c0      	movs	r3, #192	@ 0xc0
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d018      	beq.n	8005aa6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	05db      	lsls	r3, r3, #23
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d012      	beq.n	8005aa6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005a84:	2380      	movs	r3, #128	@ 0x80
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005a8c:	4b44      	ldr	r3, [pc, #272]	@ (8005ba0 <HAL_ADC_Init+0x344>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a44      	ldr	r2, [pc, #272]	@ (8005ba4 <HAL_ADC_Init+0x348>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	23f0      	movs	r3, #240	@ 0xf0
 8005a9c:	039b      	lsls	r3, r3, #14
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba0 <HAL_ADC_Init+0x344>)
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	001a      	movs	r2, r3
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f7ff fdd8 	bl	8005666 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	493a      	ldr	r1, [pc, #232]	@ (8005ba8 <HAL_ADC_Init+0x34c>)
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	f7ff fdd0 	bl	8005666 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2110      	movs	r1, #16
 8005ada:	4249      	negs	r1, r1
 8005adc:	430a      	orrs	r2, r1
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ae0:	e018      	b.n	8005b14 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	039b      	lsls	r3, r3, #14
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d112      	bne.n	8005b14 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	221c      	movs	r2, #28
 8005afe:	4013      	ands	r3, r2
 8005b00:	2210      	movs	r2, #16
 8005b02:	4252      	negs	r2, r2
 8005b04:	409a      	lsls	r2, r3
 8005b06:	0011      	movs	r1, r2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff fdc0 	bl	80056a0 <LL_ADC_GetSamplingTimeCommonChannels>
 8005b20:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10b      	bne.n	8005b42 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	2203      	movs	r2, #3
 8005b36:	4393      	bics	r3, r2
 8005b38:	2201      	movs	r2, #1
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005b40:	e01c      	b.n	8005b7c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	2212      	movs	r2, #18
 8005b48:	4393      	bics	r3, r2
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b56:	2201      	movs	r2, #1
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005b5e:	231f      	movs	r3, #31
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005b66:	e009      	b.n	8005b7c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005b74:	231f      	movs	r3, #31
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005b7c:	231f      	movs	r3, #31
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	781b      	ldrb	r3, [r3, #0]
}
 8005b82:	0018      	movs	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b008      	add	sp, #32
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	00030d40 	.word	0x00030d40
 8005b94:	fffffefd 	.word	0xfffffefd
 8005b98:	ffde0201 	.word	0xffde0201
 8005b9c:	1ffffc02 	.word	0x1ffffc02
 8005ba0:	40012708 	.word	0x40012708
 8005ba4:	ffc3ffff 	.word	0xffc3ffff
 8005ba8:	07ffff04 	.word	0x07ffff04

08005bac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d017      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x54>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	2210      	movs	r2, #16
 8005bde:	4013      	ands	r3, r2
 8005be0:	d106      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be6:	2280      	movs	r2, #128	@ 0x80
 8005be8:	0112      	lsls	r2, r2, #4
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 faea 	bl	80061cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2204      	movs	r2, #4
 8005c04:	4013      	ands	r3, r2
 8005c06:	d003      	beq.n	8005c10 <HAL_ADC_IRQHandler+0x64>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d107      	bne.n	8005c20 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2208      	movs	r2, #8
 8005c14:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c16:	d04d      	beq.n	8005cb4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d049      	beq.n	8005cb4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	d106      	bne.n	8005c38 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f7ff fd46 	bl	80056ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d02e      	beq.n	8005ca4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7e9b      	ldrb	r3, [r3, #26]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12a      	bne.n	8005ca4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2208      	movs	r2, #8
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d123      	bne.n	8005ca4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7ff fdea 	bl	800583a <LL_ADC_REG_IsConversionOngoing>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d110      	bne.n	8005c8c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	210c      	movs	r1, #12
 8005c76:	438a      	bics	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	4a56      	ldr	r2, [pc, #344]	@ (8005dd8 <HAL_ADC_IRQHandler+0x22c>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	2201      	movs	r2, #1
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c8a:	e00b      	b.n	8005ca4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c90:	2220      	movs	r2, #32
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fd fc06 	bl	80034b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	220c      	movs	r2, #12
 8005cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2280      	movs	r2, #128	@ 0x80
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d012      	beq.n	8005ce2 <HAL_ADC_IRQHandler+0x136>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2280      	movs	r2, #128	@ 0x80
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc8:	2280      	movs	r2, #128	@ 0x80
 8005cca:	0252      	lsls	r2, r2, #9
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f881 	bl	8005ddc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2280      	movs	r2, #128	@ 0x80
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d014      	beq.n	8005d16 <HAL_ADC_IRQHandler+0x16a>
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	2380      	movs	r3, #128	@ 0x80
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d00f      	beq.n	8005d16 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	2280      	movs	r2, #128	@ 0x80
 8005cfc:	0292      	lsls	r2, r2, #10
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fa50 	bl	80061ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	0052      	lsls	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d014      	beq.n	8005d4a <HAL_ADC_IRQHandler+0x19e>
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4013      	ands	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	02d2      	lsls	r2, r2, #11
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 fa3e 	bl	80061bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2280      	movs	r2, #128	@ 0x80
 8005d46:	0092      	lsls	r2, r2, #2
 8005d48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d02b      	beq.n	8005daa <HAL_ADC_IRQHandler+0x1fe>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2210      	movs	r2, #16
 8005d56:	4013      	ands	r3, r2
 8005d58:	d027      	beq.n	8005daa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e008      	b.n	8005d7a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f7ff fd02 	bl	8005776 <LL_ADC_REG_GetDMATransfer>
 8005d72:	1e03      	subs	r3, r0, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005d76:	2301      	movs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d110      	bne.n	8005da2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	00d2      	lsls	r2, r2, #3
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d92:	2202      	movs	r2, #2
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f825 	bl	8005dec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2210      	movs	r2, #16
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	019b      	lsls	r3, r3, #6
 8005db0:	4013      	ands	r3, r2
 8005db2:	d00d      	beq.n	8005dd0 <HAL_ADC_IRQHandler+0x224>
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d008      	beq.n	8005dd0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 fa0b 	bl	80061dc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2280      	movs	r2, #128	@ 0x80
 8005dcc:	0192      	lsls	r2, r2, #6
 8005dce:	601a      	str	r2, [r3, #0]
  }
}
 8005dd0:	46c0      	nop			@ (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b006      	add	sp, #24
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	fffffefe 	.word	0xfffffefe

08005ddc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e06:	2317      	movs	r3, #23
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2254      	movs	r2, #84	@ 0x54
 8005e16:	5c9b      	ldrb	r3, [r3, r2]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x24>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e1c0      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x3a6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2254      	movs	r2, #84	@ 0x54
 8005e24:	2101      	movs	r1, #1
 8005e26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff fd04 	bl	800583a <LL_ADC_REG_IsConversionOngoing>
 8005e32:	1e03      	subs	r3, r0, #0
 8005e34:	d000      	beq.n	8005e38 <HAL_ADC_ConfigChannel+0x3c>
 8005e36:	e1a3      	b.n	8006180 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d100      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x46>
 8005e40:	e143      	b.n	80060ca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	2380      	movs	r3, #128	@ 0x80
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d004      	beq.n	8005e58 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e52:	4ac1      	ldr	r2, [pc, #772]	@ (8006158 <HAL_ADC_ConfigChannel+0x35c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d108      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	0019      	movs	r1, r3
 8005e62:	0010      	movs	r0, r2
 8005e64:	f7ff fc64 	bl	8005730 <LL_ADC_REG_SetSequencerChAdd>
 8005e68:	e0c9      	b.n	8005ffe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	211f      	movs	r1, #31
 8005e74:	400b      	ands	r3, r1
 8005e76:	210f      	movs	r1, #15
 8005e78:	4099      	lsls	r1, r3
 8005e7a:	000b      	movs	r3, r1
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	4013      	ands	r3, r2
 8005e80:	0019      	movs	r1, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	035b      	lsls	r3, r3, #13
 8005e88:	0b5b      	lsrs	r3, r3, #13
 8005e8a:	d105      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x9c>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0e9b      	lsrs	r3, r3, #26
 8005e92:	221f      	movs	r2, #31
 8005e94:	4013      	ands	r3, r2
 8005e96:	e098      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d000      	beq.n	8005ea4 <HAL_ADC_ConfigChannel+0xa8>
 8005ea2:	e091      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d000      	beq.n	8005eb0 <HAL_ADC_ConfigChannel+0xb4>
 8005eae:	e089      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x1c8>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d000      	beq.n	8005ebc <HAL_ADC_ConfigChannel+0xc0>
 8005eba:	e081      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x1c4>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d000      	beq.n	8005ec8 <HAL_ADC_ConfigChannel+0xcc>
 8005ec6:	e079      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x1c0>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d000      	beq.n	8005ed4 <HAL_ADC_ConfigChannel+0xd8>
 8005ed2:	e071      	b.n	8005fb8 <HAL_ADC_ConfigChannel+0x1bc>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	4013      	ands	r3, r2
 8005edc:	d000      	beq.n	8005ee0 <HAL_ADC_ConfigChannel+0xe4>
 8005ede:	e069      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x1b8>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2240      	movs	r2, #64	@ 0x40
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d000      	beq.n	8005eec <HAL_ADC_ConfigChannel+0xf0>
 8005eea:	e061      	b.n	8005fb0 <HAL_ADC_ConfigChannel+0x1b4>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2280      	movs	r2, #128	@ 0x80
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d000      	beq.n	8005ef8 <HAL_ADC_ConfigChannel+0xfc>
 8005ef6:	e059      	b.n	8005fac <HAL_ADC_ConfigChannel+0x1b0>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	d151      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x1ac>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d149      	bne.n	8005fa4 <HAL_ADC_ConfigChannel+0x1a8>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	2380      	movs	r3, #128	@ 0x80
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d141      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1a4>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	2380      	movs	r3, #128	@ 0x80
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	4013      	ands	r3, r2
 8005f26:	d139      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x1a0>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	015b      	lsls	r3, r3, #5
 8005f30:	4013      	ands	r3, r2
 8005f32:	d131      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x19c>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	019b      	lsls	r3, r3, #6
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d129      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x198>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d121      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x194>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2380      	movs	r3, #128	@ 0x80
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	4013      	ands	r3, r2
 8005f56:	d119      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x190>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	025b      	lsls	r3, r3, #9
 8005f60:	4013      	ands	r3, r2
 8005f62:	d111      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x18c>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d109      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x188>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	@ 0x80
 8005f76:	02db      	lsls	r3, r3, #11
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d001      	beq.n	8005f80 <HAL_ADC_ConfigChannel+0x184>
 8005f7c:	2312      	movs	r3, #18
 8005f7e:	e024      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e022      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f84:	2311      	movs	r3, #17
 8005f86:	e020      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	e01e      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f8c:	230f      	movs	r3, #15
 8005f8e:	e01c      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f90:	230e      	movs	r3, #14
 8005f92:	e01a      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f94:	230d      	movs	r3, #13
 8005f96:	e018      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	e016      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005f9c:	230b      	movs	r3, #11
 8005f9e:	e014      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fa0:	230a      	movs	r3, #10
 8005fa2:	e012      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fa4:	2309      	movs	r3, #9
 8005fa6:	e010      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	e00e      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fac:	2307      	movs	r3, #7
 8005fae:	e00c      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	e00a      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	e008      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	e006      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e004      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e002      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_ADC_ConfigChannel+0x1ce>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	201f      	movs	r0, #31
 8005fd0:	4002      	ands	r2, r0
 8005fd2:	4093      	lsls	r3, r2
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d808      	bhi.n	8005ffe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	f7ff fb79 	bl	80056f0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	001a      	movs	r2, r3
 800600c:	f7ff fbc0 	bl	8005790 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db00      	blt.n	800601a <HAL_ADC_ConfigChannel+0x21e>
 8006018:	e0bc      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800601a:	4b50      	ldr	r3, [pc, #320]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 800601c:	0018      	movs	r0, r3
 800601e:	f7ff fb15 	bl	800564c <LL_ADC_GetCommonPathInternalCh>
 8006022:	0003      	movs	r3, r0
 8006024:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a4d      	ldr	r2, [pc, #308]	@ (8006160 <HAL_ADC_ConfigChannel+0x364>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d122      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	2380      	movs	r3, #128	@ 0x80
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006038:	d11d      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	0412      	lsls	r2, r2, #16
 8006040:	4313      	orrs	r3, r2
 8006042:	4a46      	ldr	r2, [pc, #280]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 8006044:	0019      	movs	r1, r3
 8006046:	0010      	movs	r0, r2
 8006048:	f7ff faec 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800604c:	4b45      	ldr	r3, [pc, #276]	@ (8006164 <HAL_ADC_ConfigChannel+0x368>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4945      	ldr	r1, [pc, #276]	@ (8006168 <HAL_ADC_ConfigChannel+0x36c>)
 8006052:	0018      	movs	r0, r3
 8006054:	f7fa f870 	bl	8000138 <__udivsi3>
 8006058:	0003      	movs	r3, r0
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	0013      	movs	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	189b      	adds	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006066:	e002      	b.n	800606e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f9      	bne.n	8006068 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006074:	e08e      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a3c      	ldr	r2, [pc, #240]	@ (800616c <HAL_ADC_ConfigChannel+0x370>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10e      	bne.n	800609e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	045b      	lsls	r3, r3, #17
 8006086:	4013      	ands	r3, r2
 8006088:	d109      	bne.n	800609e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2280      	movs	r2, #128	@ 0x80
 800608e:	0452      	lsls	r2, r2, #17
 8006090:	4313      	orrs	r3, r2
 8006092:	4a32      	ldr	r2, [pc, #200]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 8006094:	0019      	movs	r1, r3
 8006096:	0010      	movs	r0, r2
 8006098:	f7ff fac4 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
 800609c:	e07a      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a33      	ldr	r2, [pc, #204]	@ (8006170 <HAL_ADC_ConfigChannel+0x374>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d000      	beq.n	80060aa <HAL_ADC_ConfigChannel+0x2ae>
 80060a8:	e074      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	2380      	movs	r3, #128	@ 0x80
 80060ae:	03db      	lsls	r3, r3, #15
 80060b0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80060b2:	d000      	beq.n	80060b6 <HAL_ADC_ConfigChannel+0x2ba>
 80060b4:	e06e      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2280      	movs	r2, #128	@ 0x80
 80060ba:	03d2      	lsls	r2, r2, #15
 80060bc:	4313      	orrs	r3, r2
 80060be:	4a27      	ldr	r2, [pc, #156]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 80060c0:	0019      	movs	r1, r3
 80060c2:	0010      	movs	r0, r2
 80060c4:	f7ff faae 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
 80060c8:	e064      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	2380      	movs	r3, #128	@ 0x80
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d004      	beq.n	80060e0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060da:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <HAL_ADC_ConfigChannel+0x35c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d107      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	0019      	movs	r1, r3
 80060ea:	0010      	movs	r0, r2
 80060ec:	f7ff fb31 	bl	8005752 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da4d      	bge.n	8006194 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060f8:	4b18      	ldr	r3, [pc, #96]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff faa6 	bl	800564c <LL_ADC_GetCommonPathInternalCh>
 8006100:	0003      	movs	r3, r0
 8006102:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a15      	ldr	r2, [pc, #84]	@ (8006160 <HAL_ADC_ConfigChannel+0x364>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <HAL_ADC_ConfigChannel+0x378>)
 8006112:	4013      	ands	r3, r2
 8006114:	4a11      	ldr	r2, [pc, #68]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 8006116:	0019      	movs	r1, r3
 8006118:	0010      	movs	r0, r2
 800611a:	f7ff fa83 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
 800611e:	e039      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a11      	ldr	r2, [pc, #68]	@ (800616c <HAL_ADC_ConfigChannel+0x370>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <HAL_ADC_ConfigChannel+0x37c>)
 800612e:	4013      	ands	r3, r2
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 8006132:	0019      	movs	r1, r3
 8006134:	0010      	movs	r0, r2
 8006136:	f7ff fa75 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
 800613a:	e02b      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0b      	ldr	r2, [pc, #44]	@ (8006170 <HAL_ADC_ConfigChannel+0x374>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d126      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4a0c      	ldr	r2, [pc, #48]	@ (800617c <HAL_ADC_ConfigChannel+0x380>)
 800614a:	4013      	ands	r3, r2
 800614c:	4a03      	ldr	r2, [pc, #12]	@ (800615c <HAL_ADC_ConfigChannel+0x360>)
 800614e:	0019      	movs	r1, r3
 8006150:	0010      	movs	r0, r2
 8006152:	f7ff fa67 	bl	8005624 <LL_ADC_SetCommonPathInternalCh>
 8006156:	e01d      	b.n	8006194 <HAL_ADC_ConfigChannel+0x398>
 8006158:	80000004 	.word	0x80000004
 800615c:	40012708 	.word	0x40012708
 8006160:	b0001000 	.word	0xb0001000
 8006164:	20000010 	.word	0x20000010
 8006168:	00030d40 	.word	0x00030d40
 800616c:	b8004000 	.word	0xb8004000
 8006170:	b4002000 	.word	0xb4002000
 8006174:	ff7fffff 	.word	0xff7fffff
 8006178:	feffffff 	.word	0xfeffffff
 800617c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006184:	2220      	movs	r2, #32
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800618c:	2317      	movs	r3, #23
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2254      	movs	r2, #84	@ 0x54
 8006198:	2100      	movs	r1, #0
 800619a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800619c:	2317      	movs	r3, #23
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	781b      	ldrb	r3, [r3, #0]
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b006      	add	sp, #24
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)

080061ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b002      	add	sp, #8
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80061e4:	46c0      	nop			@ (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}

080061ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	0002      	movs	r2, r0
 80061f4:	1dfb      	adds	r3, r7, #7
 80061f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80061f8:	1dfb      	adds	r3, r7, #7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061fe:	d809      	bhi.n	8006214 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006200:	1dfb      	adds	r3, r7, #7
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	001a      	movs	r2, r3
 8006206:	231f      	movs	r3, #31
 8006208:	401a      	ands	r2, r3
 800620a:	4b04      	ldr	r3, [pc, #16]	@ (800621c <__NVIC_EnableIRQ+0x30>)
 800620c:	2101      	movs	r1, #1
 800620e:	4091      	lsls	r1, r2
 8006210:	000a      	movs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006214:	46c0      	nop			@ (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	0002      	movs	r2, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	1dfb      	adds	r3, r7, #7
 800622c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800622e:	1dfb      	adds	r3, r7, #7
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b7f      	cmp	r3, #127	@ 0x7f
 8006234:	d828      	bhi.n	8006288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006236:	4a2f      	ldr	r2, [pc, #188]	@ (80062f4 <__NVIC_SetPriority+0xd4>)
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b25b      	sxtb	r3, r3
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	33c0      	adds	r3, #192	@ 0xc0
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	589b      	ldr	r3, [r3, r2]
 8006246:	1dfa      	adds	r2, r7, #7
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	0011      	movs	r1, r2
 800624c:	2203      	movs	r2, #3
 800624e:	400a      	ands	r2, r1
 8006250:	00d2      	lsls	r2, r2, #3
 8006252:	21ff      	movs	r1, #255	@ 0xff
 8006254:	4091      	lsls	r1, r2
 8006256:	000a      	movs	r2, r1
 8006258:	43d2      	mvns	r2, r2
 800625a:	401a      	ands	r2, r3
 800625c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	019b      	lsls	r3, r3, #6
 8006262:	22ff      	movs	r2, #255	@ 0xff
 8006264:	401a      	ands	r2, r3
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	0018      	movs	r0, r3
 800626c:	2303      	movs	r3, #3
 800626e:	4003      	ands	r3, r0
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006274:	481f      	ldr	r0, [pc, #124]	@ (80062f4 <__NVIC_SetPriority+0xd4>)
 8006276:	1dfb      	adds	r3, r7, #7
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	430a      	orrs	r2, r1
 8006280:	33c0      	adds	r3, #192	@ 0xc0
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006286:	e031      	b.n	80062ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006288:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <__NVIC_SetPriority+0xd8>)
 800628a:	1dfb      	adds	r3, r7, #7
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	0019      	movs	r1, r3
 8006290:	230f      	movs	r3, #15
 8006292:	400b      	ands	r3, r1
 8006294:	3b08      	subs	r3, #8
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	3306      	adds	r3, #6
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	18d3      	adds	r3, r2, r3
 800629e:	3304      	adds	r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	1dfa      	adds	r2, r7, #7
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	0011      	movs	r1, r2
 80062a8:	2203      	movs	r2, #3
 80062aa:	400a      	ands	r2, r1
 80062ac:	00d2      	lsls	r2, r2, #3
 80062ae:	21ff      	movs	r1, #255	@ 0xff
 80062b0:	4091      	lsls	r1, r2
 80062b2:	000a      	movs	r2, r1
 80062b4:	43d2      	mvns	r2, r2
 80062b6:	401a      	ands	r2, r3
 80062b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	019b      	lsls	r3, r3, #6
 80062be:	22ff      	movs	r2, #255	@ 0xff
 80062c0:	401a      	ands	r2, r3
 80062c2:	1dfb      	adds	r3, r7, #7
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	0018      	movs	r0, r3
 80062c8:	2303      	movs	r3, #3
 80062ca:	4003      	ands	r3, r0
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062d0:	4809      	ldr	r0, [pc, #36]	@ (80062f8 <__NVIC_SetPriority+0xd8>)
 80062d2:	1dfb      	adds	r3, r7, #7
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	001c      	movs	r4, r3
 80062d8:	230f      	movs	r3, #15
 80062da:	4023      	ands	r3, r4
 80062dc:	3b08      	subs	r3, #8
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	430a      	orrs	r2, r1
 80062e2:	3306      	adds	r3, #6
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	18c3      	adds	r3, r0, r3
 80062e8:	3304      	adds	r3, #4
 80062ea:	601a      	str	r2, [r3, #0]
}
 80062ec:	46c0      	nop			@ (mov r8, r8)
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b003      	add	sp, #12
 80062f2:	bd90      	pop	{r4, r7, pc}
 80062f4:	e000e100 	.word	0xe000e100
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	2380      	movs	r3, #128	@ 0x80
 800630a:	045b      	lsls	r3, r3, #17
 800630c:	429a      	cmp	r2, r3
 800630e:	d301      	bcc.n	8006314 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006310:	2301      	movs	r3, #1
 8006312:	e010      	b.n	8006336 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006314:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <SysTick_Config+0x44>)
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	3a01      	subs	r2, #1
 800631a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800631c:	2301      	movs	r3, #1
 800631e:	425b      	negs	r3, r3
 8006320:	2103      	movs	r1, #3
 8006322:	0018      	movs	r0, r3
 8006324:	f7ff ff7c 	bl	8006220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006328:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <SysTick_Config+0x44>)
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800632e:	4b04      	ldr	r3, [pc, #16]	@ (8006340 <SysTick_Config+0x44>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006334:	2300      	movs	r3, #0
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b002      	add	sp, #8
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	e000e010 	.word	0xe000e010

08006344 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	210f      	movs	r1, #15
 8006350:	187b      	adds	r3, r7, r1
 8006352:	1c02      	adds	r2, r0, #0
 8006354:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	187b      	adds	r3, r7, r1
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f7ff ff5d 	bl	8006220 <__NVIC_SetPriority>
}
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	46bd      	mov	sp, r7
 800636a:	b004      	add	sp, #16
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	0002      	movs	r2, r0
 8006376:	1dfb      	adds	r3, r7, #7
 8006378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800637a:	1dfb      	adds	r3, r7, #7
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	b25b      	sxtb	r3, r3
 8006380:	0018      	movs	r0, r3
 8006382:	f7ff ff33 	bl	80061ec <__NVIC_EnableIRQ>
}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0018      	movs	r0, r3
 800639a:	f7ff ffaf 	bl	80062fc <SysTick_Config>
 800639e:	0003      	movs	r3, r0
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e077      	b.n	80064aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a3d      	ldr	r2, [pc, #244]	@ (80064b4 <HAL_DMA_Init+0x10c>)
 80063c0:	4694      	mov	ip, r2
 80063c2:	4463      	add	r3, ip
 80063c4:	2114      	movs	r1, #20
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7f9 feb6 	bl	8000138 <__udivsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	009a      	lsls	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2225      	movs	r2, #37	@ 0x25
 80063d8:	2102      	movs	r1, #2
 80063da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4934      	ldr	r1, [pc, #208]	@ (80064b8 <HAL_DMA_Init+0x110>)
 80063e8:	400a      	ands	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f000 fa8d 	bl	8006944 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	2380      	movs	r3, #128	@ 0x80
 8006430:	01db      	lsls	r3, r3, #7
 8006432:	429a      	cmp	r2, r3
 8006434:	d102      	bne.n	800643c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006444:	213f      	movs	r1, #63	@ 0x3f
 8006446:	400a      	ands	r2, r1
 8006448:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006452:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <HAL_DMA_Init+0xd8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d80d      	bhi.n	8006480 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0018      	movs	r0, r3
 8006468:	f000 fa98 	bl	800699c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	e008      	b.n	8006492 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2225      	movs	r2, #37	@ 0x25
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	@ 0x24
 80064a4:	2100      	movs	r1, #0
 80064a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b002      	add	sp, #8
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	bffdfff8 	.word	0xbffdfff8
 80064b8:	ffff800f 	.word	0xffff800f

080064bc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2317      	movs	r3, #23
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2224      	movs	r2, #36	@ 0x24
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_DMA_Start_IT+0x24>
 80064dc:	2302      	movs	r3, #2
 80064de:	e06f      	b.n	80065c0 <HAL_DMA_Start_IT+0x104>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2224      	movs	r2, #36	@ 0x24
 80064e4:	2101      	movs	r1, #1
 80064e6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2225      	movs	r2, #37	@ 0x25
 80064ec:	5c9b      	ldrb	r3, [r3, r2]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d157      	bne.n	80065a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2225      	movs	r2, #37	@ 0x25
 80064f8:	2102      	movs	r1, #2
 80064fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2101      	movs	r1, #1
 800650e:	438a      	bics	r2, r1
 8006510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f9d3 	bl	80068c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	210e      	movs	r1, #14
 8006532:	430a      	orrs	r2, r1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e00f      	b.n	8006558 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2104      	movs	r1, #4
 8006544:	438a      	bics	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	210a      	movs	r1, #10
 8006554:	430a      	orrs	r2, r1
 8006556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	025b      	lsls	r3, r3, #9
 8006562:	4013      	ands	r3, r2
 8006564:	d008      	beq.n	8006578 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006570:	2180      	movs	r1, #128	@ 0x80
 8006572:	0049      	lsls	r1, r1, #1
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	0049      	lsls	r1, r1, #1
 800658e:	430a      	orrs	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2101      	movs	r1, #1
 800659e:	430a      	orrs	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e00a      	b.n	80065ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2280      	movs	r2, #128	@ 0x80
 80065a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2224      	movs	r2, #36	@ 0x24
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80065b2:	2317      	movs	r3, #23
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80065ba:	2317      	movs	r3, #23
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	781b      	ldrb	r3, [r3, #0]
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b006      	add	sp, #24
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e050      	b.n	800667c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2225      	movs	r2, #37	@ 0x25
 80065de:	5c9b      	ldrb	r3, [r3, r2]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d008      	beq.n	80065f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2204      	movs	r2, #4
 80065ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	@ 0x24
 80065f0:	2100      	movs	r1, #0
 80065f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e041      	b.n	800667c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	210e      	movs	r1, #14
 8006604:	438a      	bics	r2, r1
 8006606:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	491c      	ldr	r1, [pc, #112]	@ (8006684 <HAL_DMA_Abort+0xbc>)
 8006614:	400a      	ands	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2101      	movs	r1, #1
 8006624:	438a      	bics	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006628:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <HAL_DMA_Abort+0xc0>)
 800662a:	6859      	ldr	r1, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	221c      	movs	r2, #28
 8006632:	4013      	ands	r3, r2
 8006634:	2201      	movs	r2, #1
 8006636:	409a      	lsls	r2, r3
 8006638:	4b13      	ldr	r3, [pc, #76]	@ (8006688 <HAL_DMA_Abort+0xc0>)
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006646:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	490a      	ldr	r1, [pc, #40]	@ (8006684 <HAL_DMA_Abort+0xbc>)
 800665c:	400a      	ands	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006668:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2225      	movs	r2, #37	@ 0x25
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2224      	movs	r2, #36	@ 0x24
 8006676:	2100      	movs	r1, #0
 8006678:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b002      	add	sp, #8
 8006682:	bd80      	pop	{r7, pc}
 8006684:	fffffeff 	.word	0xfffffeff
 8006688:	40020000 	.word	0x40020000

0800668c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	210f      	movs	r1, #15
 8006696:	187b      	adds	r3, r7, r1
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2225      	movs	r2, #37	@ 0x25
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d006      	beq.n	80066b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2204      	movs	r2, #4
 80066ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80066ae:	187b      	adds	r3, r7, r1
 80066b0:	2201      	movs	r2, #1
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	e049      	b.n	800674a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	210e      	movs	r1, #14
 80066c2:	438a      	bics	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	438a      	bics	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e0:	491d      	ldr	r1, [pc, #116]	@ (8006758 <HAL_DMA_Abort_IT+0xcc>)
 80066e2:	400a      	ands	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80066e6:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <HAL_DMA_Abort_IT+0xd0>)
 80066e8:	6859      	ldr	r1, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	221c      	movs	r2, #28
 80066f0:	4013      	ands	r3, r2
 80066f2:	2201      	movs	r2, #1
 80066f4:	409a      	lsls	r2, r3
 80066f6:	4b19      	ldr	r3, [pc, #100]	@ (800675c <HAL_DMA_Abort_IT+0xd0>)
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006704:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006718:	490f      	ldr	r1, [pc, #60]	@ (8006758 <HAL_DMA_Abort_IT+0xcc>)
 800671a:	400a      	ands	r2, r1
 800671c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006726:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2225      	movs	r2, #37	@ 0x25
 800672c:	2101      	movs	r1, #1
 800672e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2224      	movs	r2, #36	@ 0x24
 8006734:	2100      	movs	r1, #0
 8006736:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	0010      	movs	r0, r2
 8006748:	4798      	blx	r3
    }
  }
  return status;
 800674a:	230f      	movs	r3, #15
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	781b      	ldrb	r3, [r3, #0]
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b004      	add	sp, #16
 8006756:	bd80      	pop	{r7, pc}
 8006758:	fffffeff 	.word	0xfffffeff
 800675c:	40020000 	.word	0x40020000

08006760 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006768:	4b55      	ldr	r3, [pc, #340]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	221c      	movs	r2, #28
 800677c:	4013      	ands	r3, r2
 800677e:	2204      	movs	r2, #4
 8006780:	409a      	lsls	r2, r3
 8006782:	0013      	movs	r3, r2
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4013      	ands	r3, r2
 8006788:	d027      	beq.n	80067da <HAL_DMA_IRQHandler+0x7a>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2204      	movs	r2, #4
 800678e:	4013      	ands	r3, r2
 8006790:	d023      	beq.n	80067da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2220      	movs	r2, #32
 800679a:	4013      	ands	r3, r2
 800679c:	d107      	bne.n	80067ae <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2104      	movs	r1, #4
 80067aa:	438a      	bics	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80067ae:	4b44      	ldr	r3, [pc, #272]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	221c      	movs	r2, #28
 80067b8:	4013      	ands	r3, r2
 80067ba:	2204      	movs	r2, #4
 80067bc:	409a      	lsls	r2, r3
 80067be:	4b40      	ldr	r3, [pc, #256]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d100      	bne.n	80067ce <HAL_DMA_IRQHandler+0x6e>
 80067cc:	e073      	b.n	80068b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	0010      	movs	r0, r2
 80067d6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80067d8:	e06d      	b.n	80068b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	221c      	movs	r2, #28
 80067e0:	4013      	ands	r3, r2
 80067e2:	2202      	movs	r2, #2
 80067e4:	409a      	lsls	r2, r3
 80067e6:	0013      	movs	r3, r2
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4013      	ands	r3, r2
 80067ec:	d02e      	beq.n	800684c <HAL_DMA_IRQHandler+0xec>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2202      	movs	r2, #2
 80067f2:	4013      	ands	r3, r2
 80067f4:	d02a      	beq.n	800684c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2220      	movs	r2, #32
 80067fe:	4013      	ands	r3, r2
 8006800:	d10b      	bne.n	800681a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	210a      	movs	r1, #10
 800680e:	438a      	bics	r2, r1
 8006810:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2225      	movs	r2, #37	@ 0x25
 8006816:	2101      	movs	r1, #1
 8006818:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800681a:	4b29      	ldr	r3, [pc, #164]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 800681c:	6859      	ldr	r1, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	221c      	movs	r2, #28
 8006824:	4013      	ands	r3, r2
 8006826:	2202      	movs	r2, #2
 8006828:	409a      	lsls	r2, r3
 800682a:	4b25      	ldr	r3, [pc, #148]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	@ 0x24
 8006834:	2100      	movs	r1, #0
 8006836:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d03a      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	0010      	movs	r0, r2
 8006848:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800684a:	e034      	b.n	80068b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	221c      	movs	r2, #28
 8006852:	4013      	ands	r3, r2
 8006854:	2208      	movs	r2, #8
 8006856:	409a      	lsls	r2, r3
 8006858:	0013      	movs	r3, r2
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4013      	ands	r3, r2
 800685e:	d02b      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x158>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2208      	movs	r2, #8
 8006864:	4013      	ands	r3, r2
 8006866:	d027      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	210e      	movs	r1, #14
 8006874:	438a      	bics	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006878:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	221c      	movs	r2, #28
 8006882:	4013      	ands	r3, r2
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <HAL_DMA_IRQHandler+0x160>)
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2225      	movs	r2, #37	@ 0x25
 8006898:	2101      	movs	r1, #1
 800689a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	@ 0x24
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	0010      	movs	r0, r2
 80068b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80068b6:	46c0      	nop			@ (mov r8, r8)
 80068b8:	46c0      	nop			@ (mov r8, r8)
}
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b004      	add	sp, #16
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40020000 	.word	0x40020000

080068c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80068da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80068ec:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80068ee:	4b14      	ldr	r3, [pc, #80]	@ (8006940 <DMA_SetConfig+0x7c>)
 80068f0:	6859      	ldr	r1, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	221c      	movs	r2, #28
 80068f8:	4013      	ands	r3, r2
 80068fa:	2201      	movs	r2, #1
 80068fc:	409a      	lsls	r2, r3
 80068fe:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <DMA_SetConfig+0x7c>)
 8006900:	430a      	orrs	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b10      	cmp	r3, #16
 8006912:	d108      	bne.n	8006926 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006924:	e007      	b.n	8006936 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	60da      	str	r2, [r3, #12]
}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b004      	add	sp, #16
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	40020000 	.word	0x40020000

08006944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	4a10      	ldr	r2, [pc, #64]	@ (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006954:	4694      	mov	ip, r2
 8006956:	4463      	add	r3, ip
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	001a      	movs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	001a      	movs	r2, r3
 8006966:	23ff      	movs	r3, #255	@ 0xff
 8006968:	4013      	ands	r3, r2
 800696a:	3b08      	subs	r3, #8
 800696c:	2114      	movs	r1, #20
 800696e:	0018      	movs	r0, r3
 8006970:	f7f9 fbe2 	bl	8000138 <__udivsi3>
 8006974:	0003      	movs	r3, r0
 8006976:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a07      	ldr	r2, [pc, #28]	@ (8006998 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800697c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	221f      	movs	r2, #31
 8006982:	4013      	ands	r3, r2
 8006984:	2201      	movs	r2, #1
 8006986:	409a      	lsls	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800698c:	46c0      	nop			@ (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bd80      	pop	{r7, pc}
 8006994:	10008200 	.word	0x10008200
 8006998:	40020880 	.word	0x40020880

0800699c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	223f      	movs	r2, #63	@ 0x3f
 80069aa:	4013      	ands	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80069b2:	4694      	mov	ip, r2
 80069b4:	4463      	add	r3, ip
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	001a      	movs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a07      	ldr	r2, [pc, #28]	@ (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80069c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2203      	movs	r2, #3
 80069ca:	4013      	ands	r3, r2
 80069cc:	2201      	movs	r2, #1
 80069ce:	409a      	lsls	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80069d4:	46c0      	nop			@ (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b004      	add	sp, #16
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	1000823f 	.word	0x1000823f
 80069e0:	40020940 	.word	0x40020940

080069e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069f2:	e147      	b.n	8006c84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4091      	lsls	r1, r2
 80069fe:	000a      	movs	r2, r1
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d100      	bne.n	8006a0c <HAL_GPIO_Init+0x28>
 8006a0a:	e138      	b.n	8006c7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2203      	movs	r2, #3
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d005      	beq.n	8006a24 <HAL_GPIO_Init+0x40>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d130      	bne.n	8006a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	2203      	movs	r2, #3
 8006a30:	409a      	lsls	r2, r3
 8006a32:	0013      	movs	r3, r2
 8006a34:	43da      	mvns	r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	409a      	lsls	r2, r3
 8006a46:	0013      	movs	r3, r2
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	0013      	movs	r3, r2
 8006a62:	43da      	mvns	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4013      	ands	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	2201      	movs	r2, #1
 8006a72:	401a      	ands	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	409a      	lsls	r2, r3
 8006a78:	0013      	movs	r3, r2
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d017      	beq.n	8006ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	43da      	mvns	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	0013      	movs	r3, r2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d123      	bne.n	8006b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	08da      	lsrs	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3208      	adds	r2, #8
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	58d3      	ldr	r3, [r2, r3]
 8006ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2207      	movs	r2, #7
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	220f      	movs	r2, #15
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	0013      	movs	r3, r2
 8006aea:	43da      	mvns	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2107      	movs	r1, #7
 8006afa:	400b      	ands	r3, r1
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	409a      	lsls	r2, r3
 8006b00:	0013      	movs	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	08da      	lsrs	r2, r3, #3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3208      	adds	r2, #8
 8006b10:	0092      	lsls	r2, r2, #2
 8006b12:	6939      	ldr	r1, [r7, #16]
 8006b14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	2203      	movs	r2, #3
 8006b22:	409a      	lsls	r2, r3
 8006b24:	0013      	movs	r3, r2
 8006b26:	43da      	mvns	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2203      	movs	r2, #3
 8006b34:	401a      	ands	r2, r3
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	0013      	movs	r3, r2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	23c0      	movs	r3, #192	@ 0xc0
 8006b50:	029b      	lsls	r3, r3, #10
 8006b52:	4013      	ands	r3, r2
 8006b54:	d100      	bne.n	8006b58 <HAL_GPIO_Init+0x174>
 8006b56:	e092      	b.n	8006c7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006b58:	4a50      	ldr	r2, [pc, #320]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	3318      	adds	r3, #24
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	589b      	ldr	r3, [r3, r2]
 8006b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	220f      	movs	r2, #15
 8006b70:	409a      	lsls	r2, r3
 8006b72:	0013      	movs	r3, r2
 8006b74:	43da      	mvns	r2, r3
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	23a0      	movs	r3, #160	@ 0xa0
 8006b80:	05db      	lsls	r3, r3, #23
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d013      	beq.n	8006bae <HAL_GPIO_Init+0x1ca>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a45      	ldr	r2, [pc, #276]	@ (8006ca0 <HAL_GPIO_Init+0x2bc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00d      	beq.n	8006baa <HAL_GPIO_Init+0x1c6>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a44      	ldr	r2, [pc, #272]	@ (8006ca4 <HAL_GPIO_Init+0x2c0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <HAL_GPIO_Init+0x1c2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a43      	ldr	r2, [pc, #268]	@ (8006ca8 <HAL_GPIO_Init+0x2c4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_GPIO_Init+0x1be>
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e006      	b.n	8006bb0 <HAL_GPIO_Init+0x1cc>
 8006ba2:	2305      	movs	r3, #5
 8006ba4:	e004      	b.n	8006bb0 <HAL_GPIO_Init+0x1cc>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e002      	b.n	8006bb0 <HAL_GPIO_Init+0x1cc>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <HAL_GPIO_Init+0x1cc>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	00d2      	lsls	r2, r2, #3
 8006bb8:	4093      	lsls	r3, r2
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006bc0:	4936      	ldr	r1, [pc, #216]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	089b      	lsrs	r3, r3, #2
 8006bc6:	3318      	adds	r3, #24
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bce:	4b33      	ldr	r3, [pc, #204]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	2380      	movs	r3, #128	@ 0x80
 8006be4:	035b      	lsls	r3, r3, #13
 8006be6:	4013      	ands	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006bf8:	4b28      	ldr	r3, [pc, #160]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	43da      	mvns	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4013      	ands	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	2380      	movs	r3, #128	@ 0x80
 8006c0e:	039b      	lsls	r3, r3, #14
 8006c10:	4013      	ands	r3, r2
 8006c12:	d003      	beq.n	8006c1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006c22:	4a1e      	ldr	r2, [pc, #120]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006c24:	2384      	movs	r3, #132	@ 0x84
 8006c26:	58d3      	ldr	r3, [r2, r3]
 8006c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	43da      	mvns	r2, r3
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	2380      	movs	r3, #128	@ 0x80
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c48:	4914      	ldr	r1, [pc, #80]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006c4a:	2284      	movs	r2, #132	@ 0x84
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006c50:	4a12      	ldr	r2, [pc, #72]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006c52:	2380      	movs	r3, #128	@ 0x80
 8006c54:	58d3      	ldr	r3, [r2, r3]
 8006c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	43da      	mvns	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	2380      	movs	r3, #128	@ 0x80
 8006c68:	025b      	lsls	r3, r3, #9
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c76:	4909      	ldr	r1, [pc, #36]	@ (8006c9c <HAL_GPIO_Init+0x2b8>)
 8006c78:	2280      	movs	r2, #128	@ 0x80
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	3301      	adds	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	40da      	lsrs	r2, r3
 8006c8c:	1e13      	subs	r3, r2, #0
 8006c8e:	d000      	beq.n	8006c92 <HAL_GPIO_Init+0x2ae>
 8006c90:	e6b0      	b.n	80069f4 <HAL_GPIO_Init+0x10>
  }
}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b006      	add	sp, #24
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40021800 	.word	0x40021800
 8006ca0:	50000400 	.word	0x50000400
 8006ca4:	50000800 	.word	0x50000800
 8006ca8:	50000c00 	.word	0x50000c00

08006cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	000a      	movs	r2, r1
 8006cb6:	1cbb      	adds	r3, r7, #2
 8006cb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	1cba      	adds	r2, r7, #2
 8006cc0:	8812      	ldrh	r2, [r2, #0]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006cc6:	230f      	movs	r3, #15
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	e003      	b.n	8006cd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cd0:	230f      	movs	r3, #15
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006cd8:	230f      	movs	r3, #15
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	0008      	movs	r0, r1
 8006cf0:	0011      	movs	r1, r2
 8006cf2:	1cbb      	adds	r3, r7, #2
 8006cf4:	1c02      	adds	r2, r0, #0
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	1c7b      	adds	r3, r7, #1
 8006cfa:	1c0a      	adds	r2, r1, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cfe:	1c7b      	adds	r3, r7, #1
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d06:	1cbb      	adds	r3, r7, #2
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d0e:	e003      	b.n	8006d18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d10:	1cbb      	adds	r3, r7, #2
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b002      	add	sp, #8
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	0002      	movs	r2, r0
 8006d28:	1dbb      	adds	r3, r7, #6
 8006d2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	1dba      	adds	r2, r7, #6
 8006d32:	8812      	ldrh	r2, [r2, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	d008      	beq.n	8006d4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006d38:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006d3a:	1dba      	adds	r2, r7, #6
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006d40:	1dbb      	adds	r3, r7, #6
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 f815 	bl	8006d74 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006d4a:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	1dba      	adds	r2, r7, #6
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	4013      	ands	r3, r2
 8006d54:	d008      	beq.n	8006d68 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006d56:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006d58:	1dba      	adds	r2, r7, #6
 8006d5a:	8812      	ldrh	r2, [r2, #0]
 8006d5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006d5e:	1dbb      	adds	r3, r7, #6
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7fc fc38 	bl	80035d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006d68:	46c0      	nop			@ (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40021800 	.word	0x40021800

08006d74 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	0002      	movs	r2, r0
 8006d7c:	1dbb      	adds	r3, r7, #6
 8006d7e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006d80:	46c0      	nop			@ (mov r8, r8)
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e08f      	b.n	8006eba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2241      	movs	r2, #65	@ 0x41
 8006d9e:	5c9b      	ldrb	r3, [r3, r2]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2240      	movs	r2, #64	@ 0x40
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fe f80b 	bl	8004dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2241      	movs	r2, #65	@ 0x41
 8006dba:	2124      	movs	r1, #36	@ 0x24
 8006dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	438a      	bics	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	493b      	ldr	r1, [pc, #236]	@ (8006ec4 <HAL_I2C_Init+0x13c>)
 8006dd8:	400a      	ands	r2, r1
 8006dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4938      	ldr	r1, [pc, #224]	@ (8006ec8 <HAL_I2C_Init+0x140>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d108      	bne.n	8006e06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2180      	movs	r1, #128	@ 0x80
 8006dfe:	0209      	lsls	r1, r1, #8
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	e007      	b.n	8006e16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2184      	movs	r1, #132	@ 0x84
 8006e10:	0209      	lsls	r1, r1, #8
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d109      	bne.n	8006e32 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2180      	movs	r1, #128	@ 0x80
 8006e2a:	0109      	lsls	r1, r1, #4
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	e007      	b.n	8006e42 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4923      	ldr	r1, [pc, #140]	@ (8006ecc <HAL_I2C_Init+0x144>)
 8006e3e:	400a      	ands	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4920      	ldr	r1, [pc, #128]	@ (8006ed0 <HAL_I2C_Init+0x148>)
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	491a      	ldr	r1, [pc, #104]	@ (8006ec8 <HAL_I2C_Init+0x140>)
 8006e5e:	400a      	ands	r2, r1
 8006e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2101      	movs	r1, #1
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2241      	movs	r2, #65	@ 0x41
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2242      	movs	r2, #66	@ 0x42
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	0018      	movs	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			@ (mov r8, r8)
 8006ec4:	f0ffffff 	.word	0xf0ffffff
 8006ec8:	ffff7fff 	.word	0xffff7fff
 8006ecc:	fffff7ff 	.word	0xfffff7ff
 8006ed0:	02008000 	.word	0x02008000

08006ed4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b089      	sub	sp, #36	@ 0x24
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	0008      	movs	r0, r1
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	1c02      	adds	r2, r0, #0
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	2308      	movs	r3, #8
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	1c0a      	adds	r2, r1, #0
 8006ef0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2241      	movs	r2, #65	@ 0x41
 8006ef6:	5c9b      	ldrb	r3, [r3, r2]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d000      	beq.n	8006f00 <HAL_I2C_Master_Transmit+0x2c>
 8006efe:	e10a      	b.n	8007116 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2240      	movs	r2, #64	@ 0x40
 8006f04:	5c9b      	ldrb	r3, [r3, r2]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_I2C_Master_Transmit+0x3a>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e104      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2240      	movs	r2, #64	@ 0x40
 8006f12:	2101      	movs	r1, #1
 8006f14:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f16:	f7fe fb57 	bl	80055c8 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f1e:	2380      	movs	r3, #128	@ 0x80
 8006f20:	0219      	lsls	r1, r3, #8
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2319      	movs	r3, #25
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f000 fd4e 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8006f30:	1e03      	subs	r3, r0, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0ef      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2241      	movs	r2, #65	@ 0x41
 8006f3c:	2121      	movs	r1, #33	@ 0x21
 8006f3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2242      	movs	r2, #66	@ 0x42
 8006f44:	2110      	movs	r1, #16
 8006f46:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2208      	movs	r2, #8
 8006f58:	18ba      	adds	r2, r7, r2
 8006f5a:	8812      	ldrh	r2, [r2, #0]
 8006f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2bff      	cmp	r3, #255	@ 0xff
 8006f6c:	d906      	bls.n	8006f7c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22ff      	movs	r2, #255	@ 0xff
 8006f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006f74:	2380      	movs	r3, #128	@ 0x80
 8006f76:	045b      	lsls	r3, r3, #17
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e007      	b.n	8006f8c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006f86:	2380      	movs	r3, #128	@ 0x80
 8006f88:	049b      	lsls	r3, r3, #18
 8006f8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d027      	beq.n	8006fe4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	3301      	adds	r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	697c      	ldr	r4, [r7, #20]
 8006fd0:	230a      	movs	r3, #10
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	8819      	ldrh	r1, [r3, #0]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4b51      	ldr	r3, [pc, #324]	@ (8007120 <HAL_I2C_Master_Transmit+0x24c>)
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	0023      	movs	r3, r4
 8006fde:	f000 ff6d 	bl	8007ebc <I2C_TransferConfig>
 8006fe2:	e06f      	b.n	80070c4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	697c      	ldr	r4, [r7, #20]
 8006fec:	230a      	movs	r3, #10
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	8819      	ldrh	r1, [r3, #0]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8007120 <HAL_I2C_Master_Transmit+0x24c>)
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	0023      	movs	r3, r4
 8006ffa:	f000 ff5f 	bl	8007ebc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006ffe:	e061      	b.n	80070c4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	0018      	movs	r0, r3
 8007008:	f000 fd38 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800700c:	1e03      	subs	r3, r0, #0
 800700e:	d001      	beq.n	8007014 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e081      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03a      	beq.n	80070c4 <HAL_I2C_Master_Transmit+0x1f0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d136      	bne.n	80070c4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	0013      	movs	r3, r2
 8007060:	2200      	movs	r2, #0
 8007062:	2180      	movs	r1, #128	@ 0x80
 8007064:	f000 fcb2 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8007068:	1e03      	subs	r3, r0, #0
 800706a:	d001      	beq.n	8007070 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e053      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2bff      	cmp	r3, #255	@ 0xff
 8007078:	d911      	bls.n	800709e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	@ 0xff
 800707e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007084:	b2da      	uxtb	r2, r3
 8007086:	2380      	movs	r3, #128	@ 0x80
 8007088:	045c      	lsls	r4, r3, #17
 800708a:	230a      	movs	r3, #10
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	8819      	ldrh	r1, [r3, #0]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	0023      	movs	r3, r4
 8007098:	f000 ff10 	bl	8007ebc <I2C_TransferConfig>
 800709c:	e012      	b.n	80070c4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	2380      	movs	r3, #128	@ 0x80
 80070b0:	049c      	lsls	r4, r3, #18
 80070b2:	230a      	movs	r3, #10
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	8819      	ldrh	r1, [r3, #0]
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	0023      	movs	r3, r4
 80070c0:	f000 fefc 	bl	8007ebc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d198      	bne.n	8007000 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	0018      	movs	r0, r3
 80070d6:	f000 fd17 	bl	8007b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070da:	1e03      	subs	r3, r0, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e01a      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2220      	movs	r2, #32
 80070e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	490b      	ldr	r1, [pc, #44]	@ (8007124 <HAL_I2C_Master_Transmit+0x250>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2241      	movs	r2, #65	@ 0x41
 80070fe:	2120      	movs	r1, #32
 8007100:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2242      	movs	r2, #66	@ 0x42
 8007106:	2100      	movs	r1, #0
 8007108:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2240      	movs	r2, #64	@ 0x40
 800710e:	2100      	movs	r1, #0
 8007110:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8007116:	2302      	movs	r3, #2
  }
}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	b007      	add	sp, #28
 800711e:	bd90      	pop	{r4, r7, pc}
 8007120:	80002000 	.word	0x80002000
 8007124:	fe00e800 	.word	0xfe00e800

08007128 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	0008      	movs	r0, r1
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	0019      	movs	r1, r3
 8007136:	230a      	movs	r3, #10
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	1c02      	adds	r2, r0, #0
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	2308      	movs	r3, #8
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	1c0a      	adds	r2, r1, #0
 8007144:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2241      	movs	r2, #65	@ 0x41
 800714a:	5c9b      	ldrb	r3, [r3, r2]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b20      	cmp	r3, #32
 8007150:	d000      	beq.n	8007154 <HAL_I2C_Master_Receive+0x2c>
 8007152:	e0e8      	b.n	8007326 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2240      	movs	r2, #64	@ 0x40
 8007158:	5c9b      	ldrb	r3, [r3, r2]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_I2C_Master_Receive+0x3a>
 800715e:	2302      	movs	r3, #2
 8007160:	e0e2      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2240      	movs	r2, #64	@ 0x40
 8007166:	2101      	movs	r1, #1
 8007168:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800716a:	f7fe fa2d 	bl	80055c8 <HAL_GetTick>
 800716e:	0003      	movs	r3, r0
 8007170:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007172:	2380      	movs	r3, #128	@ 0x80
 8007174:	0219      	lsls	r1, r3, #8
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	2319      	movs	r3, #25
 800717e:	2201      	movs	r2, #1
 8007180:	f000 fc24 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8007184:	1e03      	subs	r3, r0, #0
 8007186:	d001      	beq.n	800718c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0cd      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2241      	movs	r2, #65	@ 0x41
 8007190:	2122      	movs	r1, #34	@ 0x22
 8007192:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2242      	movs	r2, #66	@ 0x42
 8007198:	2110      	movs	r1, #16
 800719a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2208      	movs	r2, #8
 80071ac:	18ba      	adds	r2, r7, r2
 80071ae:	8812      	ldrh	r2, [r2, #0]
 80071b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2bff      	cmp	r3, #255	@ 0xff
 80071c0:	d911      	bls.n	80071e6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	22ff      	movs	r2, #255	@ 0xff
 80071c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	2380      	movs	r3, #128	@ 0x80
 80071d0:	045c      	lsls	r4, r3, #17
 80071d2:	230a      	movs	r3, #10
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	8819      	ldrh	r1, [r3, #0]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	4b55      	ldr	r3, [pc, #340]	@ (8007330 <HAL_I2C_Master_Receive+0x208>)
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	0023      	movs	r3, r4
 80071e0:	f000 fe6c 	bl	8007ebc <I2C_TransferConfig>
 80071e4:	e076      	b.n	80072d4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	049c      	lsls	r4, r3, #18
 80071fa:	230a      	movs	r3, #10
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	8819      	ldrh	r1, [r3, #0]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	4b4b      	ldr	r3, [pc, #300]	@ (8007330 <HAL_I2C_Master_Receive+0x208>)
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	0023      	movs	r3, r4
 8007208:	f000 fe58 	bl	8007ebc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800720c:	e062      	b.n	80072d4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	0018      	movs	r0, r3
 8007216:	f000 fcbb 	bl	8007b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800721a:	1e03      	subs	r3, r0, #0
 800721c:	d001      	beq.n	8007222 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e082      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d03a      	beq.n	80072d4 <HAL_I2C_Master_Receive+0x1ac>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d136      	bne.n	80072d4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	0013      	movs	r3, r2
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	@ 0x80
 8007274:	f000 fbaa 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8007278:	1e03      	subs	r3, r0, #0
 800727a:	d001      	beq.n	8007280 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e053      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2bff      	cmp	r3, #255	@ 0xff
 8007288:	d911      	bls.n	80072ae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	22ff      	movs	r2, #255	@ 0xff
 800728e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007294:	b2da      	uxtb	r2, r3
 8007296:	2380      	movs	r3, #128	@ 0x80
 8007298:	045c      	lsls	r4, r3, #17
 800729a:	230a      	movs	r3, #10
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	8819      	ldrh	r1, [r3, #0]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	0023      	movs	r3, r4
 80072a8:	f000 fe08 	bl	8007ebc <I2C_TransferConfig>
 80072ac:	e012      	b.n	80072d4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	049c      	lsls	r4, r3, #18
 80072c2:	230a      	movs	r3, #10
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	8819      	ldrh	r1, [r3, #0]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	2300      	movs	r3, #0
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	0023      	movs	r3, r4
 80072d0:	f000 fdf4 	bl	8007ebc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d197      	bne.n	800720e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 fc0f 	bl	8007b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80072ea:	1e03      	subs	r3, r0, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e01a      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2220      	movs	r2, #32
 80072f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	490b      	ldr	r1, [pc, #44]	@ (8007334 <HAL_I2C_Master_Receive+0x20c>)
 8007306:	400a      	ands	r2, r1
 8007308:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2241      	movs	r2, #65	@ 0x41
 800730e:	2120      	movs	r1, #32
 8007310:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2242      	movs	r2, #66	@ 0x42
 8007316:	2100      	movs	r1, #0
 8007318:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2240      	movs	r2, #64	@ 0x40
 800731e:	2100      	movs	r1, #0
 8007320:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	b007      	add	sp, #28
 800732e:	bd90      	pop	{r4, r7, pc}
 8007330:	80002400 	.word	0x80002400
 8007334:	fe00e800 	.word	0xfe00e800

08007338 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b089      	sub	sp, #36	@ 0x24
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	000c      	movs	r4, r1
 8007342:	0010      	movs	r0, r2
 8007344:	0019      	movs	r1, r3
 8007346:	230a      	movs	r3, #10
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	1c22      	adds	r2, r4, #0
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	2308      	movs	r3, #8
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	1c02      	adds	r2, r0, #0
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	1dbb      	adds	r3, r7, #6
 8007358:	1c0a      	adds	r2, r1, #0
 800735a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2241      	movs	r2, #65	@ 0x41
 8007360:	5c9b      	ldrb	r3, [r3, r2]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b20      	cmp	r3, #32
 8007366:	d000      	beq.n	800736a <HAL_I2C_Mem_Write+0x32>
 8007368:	e10c      	b.n	8007584 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <HAL_I2C_Mem_Write+0x42>
 8007370:	232c      	movs	r3, #44	@ 0x2c
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2280      	movs	r2, #128	@ 0x80
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e0ff      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2240      	movs	r2, #64	@ 0x40
 800738a:	5c9b      	ldrb	r3, [r3, r2]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_I2C_Mem_Write+0x5c>
 8007390:	2302      	movs	r3, #2
 8007392:	e0f8      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2240      	movs	r2, #64	@ 0x40
 8007398:	2101      	movs	r1, #1
 800739a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800739c:	f7fe f914 	bl	80055c8 <HAL_GetTick>
 80073a0:	0003      	movs	r3, r0
 80073a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073a4:	2380      	movs	r3, #128	@ 0x80
 80073a6:	0219      	lsls	r1, r3, #8
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	2319      	movs	r3, #25
 80073b0:	2201      	movs	r2, #1
 80073b2:	f000 fb0b 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 80073b6:	1e03      	subs	r3, r0, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e0e3      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2241      	movs	r2, #65	@ 0x41
 80073c2:	2121      	movs	r1, #33	@ 0x21
 80073c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2242      	movs	r2, #66	@ 0x42
 80073ca:	2140      	movs	r1, #64	@ 0x40
 80073cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	222c      	movs	r2, #44	@ 0x2c
 80073de:	18ba      	adds	r2, r7, r2
 80073e0:	8812      	ldrh	r2, [r2, #0]
 80073e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073ea:	1dbb      	adds	r3, r7, #6
 80073ec:	881c      	ldrh	r4, [r3, #0]
 80073ee:	2308      	movs	r3, #8
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	881a      	ldrh	r2, [r3, #0]
 80073f4:	230a      	movs	r3, #10
 80073f6:	18fb      	adds	r3, r7, r3
 80073f8:	8819      	ldrh	r1, [r3, #0]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	0023      	movs	r3, r4
 8007406:	f000 f9f9 	bl	80077fc <I2C_RequestMemoryWrite>
 800740a:	1e03      	subs	r3, r0, #0
 800740c:	d005      	beq.n	800741a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2240      	movs	r2, #64	@ 0x40
 8007412:	2100      	movs	r1, #0
 8007414:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e0b5      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741e:	b29b      	uxth	r3, r3
 8007420:	2bff      	cmp	r3, #255	@ 0xff
 8007422:	d911      	bls.n	8007448 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	22ff      	movs	r2, #255	@ 0xff
 8007428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742e:	b2da      	uxtb	r2, r3
 8007430:	2380      	movs	r3, #128	@ 0x80
 8007432:	045c      	lsls	r4, r3, #17
 8007434:	230a      	movs	r3, #10
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	8819      	ldrh	r1, [r3, #0]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	2300      	movs	r3, #0
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	0023      	movs	r3, r4
 8007442:	f000 fd3b 	bl	8007ebc <I2C_TransferConfig>
 8007446:	e012      	b.n	800746e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007456:	b2da      	uxtb	r2, r3
 8007458:	2380      	movs	r3, #128	@ 0x80
 800745a:	049c      	lsls	r4, r3, #18
 800745c:	230a      	movs	r3, #10
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	8819      	ldrh	r1, [r3, #0]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	2300      	movs	r3, #0
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	0023      	movs	r3, r4
 800746a:	f000 fd27 	bl	8007ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 fb01 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800747a:	1e03      	subs	r3, r0, #0
 800747c:	d001      	beq.n	8007482 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e081      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d03a      	beq.n	8007532 <HAL_I2C_Mem_Write+0x1fa>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d136      	bne.n	8007532 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	0013      	movs	r3, r2
 80074ce:	2200      	movs	r2, #0
 80074d0:	2180      	movs	r1, #128	@ 0x80
 80074d2:	f000 fa7b 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 80074d6:	1e03      	subs	r3, r0, #0
 80074d8:	d001      	beq.n	80074de <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e053      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2bff      	cmp	r3, #255	@ 0xff
 80074e6:	d911      	bls.n	800750c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	22ff      	movs	r2, #255	@ 0xff
 80074ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	045c      	lsls	r4, r3, #17
 80074f8:	230a      	movs	r3, #10
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	8819      	ldrh	r1, [r3, #0]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	0023      	movs	r3, r4
 8007506:	f000 fcd9 	bl	8007ebc <I2C_TransferConfig>
 800750a:	e012      	b.n	8007532 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800751a:	b2da      	uxtb	r2, r3
 800751c:	2380      	movs	r3, #128	@ 0x80
 800751e:	049c      	lsls	r4, r3, #18
 8007520:	230a      	movs	r3, #10
 8007522:	18fb      	adds	r3, r7, r3
 8007524:	8819      	ldrh	r1, [r3, #0]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	0023      	movs	r3, r4
 800752e:	f000 fcc5 	bl	8007ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d198      	bne.n	800746e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 fae0 	bl	8007b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007548:	1e03      	subs	r3, r0, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e01a      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2220      	movs	r2, #32
 8007556:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	490b      	ldr	r1, [pc, #44]	@ (8007590 <HAL_I2C_Mem_Write+0x258>)
 8007564:	400a      	ands	r2, r1
 8007566:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2241      	movs	r2, #65	@ 0x41
 800756c:	2120      	movs	r1, #32
 800756e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2242      	movs	r2, #66	@ 0x42
 8007574:	2100      	movs	r1, #0
 8007576:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2240      	movs	r2, #64	@ 0x40
 800757c:	2100      	movs	r1, #0
 800757e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e000      	b.n	8007586 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	0018      	movs	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	b007      	add	sp, #28
 800758c:	bd90      	pop	{r4, r7, pc}
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	fe00e800 	.word	0xfe00e800

08007594 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b089      	sub	sp, #36	@ 0x24
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	000c      	movs	r4, r1
 800759e:	0010      	movs	r0, r2
 80075a0:	0019      	movs	r1, r3
 80075a2:	230a      	movs	r3, #10
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	1c22      	adds	r2, r4, #0
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	2308      	movs	r3, #8
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	1c02      	adds	r2, r0, #0
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	1dbb      	adds	r3, r7, #6
 80075b4:	1c0a      	adds	r2, r1, #0
 80075b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2241      	movs	r2, #65	@ 0x41
 80075bc:	5c9b      	ldrb	r3, [r3, r2]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d000      	beq.n	80075c6 <HAL_I2C_Mem_Read+0x32>
 80075c4:	e110      	b.n	80077e8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_I2C_Mem_Read+0x42>
 80075cc:	232c      	movs	r3, #44	@ 0x2c
 80075ce:	18fb      	adds	r3, r7, r3
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2280      	movs	r2, #128	@ 0x80
 80075da:	0092      	lsls	r2, r2, #2
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e103      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2240      	movs	r2, #64	@ 0x40
 80075e6:	5c9b      	ldrb	r3, [r3, r2]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_I2C_Mem_Read+0x5c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e0fc      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	2101      	movs	r1, #1
 80075f6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075f8:	f7fd ffe6 	bl	80055c8 <HAL_GetTick>
 80075fc:	0003      	movs	r3, r0
 80075fe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007600:	2380      	movs	r3, #128	@ 0x80
 8007602:	0219      	lsls	r1, r3, #8
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2319      	movs	r3, #25
 800760c:	2201      	movs	r2, #1
 800760e:	f000 f9dd 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8007612:	1e03      	subs	r3, r0, #0
 8007614:	d001      	beq.n	800761a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e0e7      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2241      	movs	r2, #65	@ 0x41
 800761e:	2122      	movs	r1, #34	@ 0x22
 8007620:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2242      	movs	r2, #66	@ 0x42
 8007626:	2140      	movs	r1, #64	@ 0x40
 8007628:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007634:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	222c      	movs	r2, #44	@ 0x2c
 800763a:	18ba      	adds	r2, r7, r2
 800763c:	8812      	ldrh	r2, [r2, #0]
 800763e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007646:	1dbb      	adds	r3, r7, #6
 8007648:	881c      	ldrh	r4, [r3, #0]
 800764a:	2308      	movs	r3, #8
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	230a      	movs	r3, #10
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	8819      	ldrh	r1, [r3, #0]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	0023      	movs	r3, r4
 8007662:	f000 f92f 	bl	80078c4 <I2C_RequestMemoryRead>
 8007666:	1e03      	subs	r3, r0, #0
 8007668:	d005      	beq.n	8007676 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2240      	movs	r2, #64	@ 0x40
 800766e:	2100      	movs	r1, #0
 8007670:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0b9      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2bff      	cmp	r3, #255	@ 0xff
 800767e:	d911      	bls.n	80076a4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	22ff      	movs	r2, #255	@ 0xff
 8007684:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800768a:	b2da      	uxtb	r2, r3
 800768c:	2380      	movs	r3, #128	@ 0x80
 800768e:	045c      	lsls	r4, r3, #17
 8007690:	230a      	movs	r3, #10
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	8819      	ldrh	r1, [r3, #0]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4b56      	ldr	r3, [pc, #344]	@ (80077f4 <HAL_I2C_Mem_Read+0x260>)
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	0023      	movs	r3, r4
 800769e:	f000 fc0d 	bl	8007ebc <I2C_TransferConfig>
 80076a2:	e012      	b.n	80076ca <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	2380      	movs	r3, #128	@ 0x80
 80076b6:	049c      	lsls	r4, r3, #18
 80076b8:	230a      	movs	r3, #10
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	8819      	ldrh	r1, [r3, #0]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	4b4c      	ldr	r3, [pc, #304]	@ (80077f4 <HAL_I2C_Mem_Read+0x260>)
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	0023      	movs	r3, r4
 80076c6:	f000 fbf9 	bl	8007ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80076ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	0013      	movs	r3, r2
 80076d4:	2200      	movs	r2, #0
 80076d6:	2104      	movs	r1, #4
 80076d8:	f000 f978 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d001      	beq.n	80076e4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e082      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d03a      	beq.n	8007796 <HAL_I2C_Mem_Read+0x202>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d136      	bne.n	8007796 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	0013      	movs	r3, r2
 8007732:	2200      	movs	r2, #0
 8007734:	2180      	movs	r1, #128	@ 0x80
 8007736:	f000 f949 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 800773a:	1e03      	subs	r3, r0, #0
 800773c:	d001      	beq.n	8007742 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e053      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	2bff      	cmp	r3, #255	@ 0xff
 800774a:	d911      	bls.n	8007770 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	22ff      	movs	r2, #255	@ 0xff
 8007750:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007756:	b2da      	uxtb	r2, r3
 8007758:	2380      	movs	r3, #128	@ 0x80
 800775a:	045c      	lsls	r4, r3, #17
 800775c:	230a      	movs	r3, #10
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	8819      	ldrh	r1, [r3, #0]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	2300      	movs	r3, #0
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	0023      	movs	r3, r4
 800776a:	f000 fba7 	bl	8007ebc <I2C_TransferConfig>
 800776e:	e012      	b.n	8007796 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777e:	b2da      	uxtb	r2, r3
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	049c      	lsls	r4, r3, #18
 8007784:	230a      	movs	r3, #10
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	8819      	ldrh	r1, [r3, #0]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	2300      	movs	r3, #0
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	0023      	movs	r3, r4
 8007792:	f000 fb93 	bl	8007ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d194      	bne.n	80076ca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	0018      	movs	r0, r3
 80077a8:	f000 f9ae 	bl	8007b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077ac:	1e03      	subs	r3, r0, #0
 80077ae:	d001      	beq.n	80077b4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e01a      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2220      	movs	r2, #32
 80077ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	490c      	ldr	r1, [pc, #48]	@ (80077f8 <HAL_I2C_Mem_Read+0x264>)
 80077c8:	400a      	ands	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2241      	movs	r2, #65	@ 0x41
 80077d0:	2120      	movs	r1, #32
 80077d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2242      	movs	r2, #66	@ 0x42
 80077d8:	2100      	movs	r1, #0
 80077da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2240      	movs	r2, #64	@ 0x40
 80077e0:	2100      	movs	r1, #0
 80077e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e000      	b.n	80077ea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80077e8:	2302      	movs	r3, #2
  }
}
 80077ea:	0018      	movs	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b007      	add	sp, #28
 80077f0:	bd90      	pop	{r4, r7, pc}
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	80002400 	.word	0x80002400
 80077f8:	fe00e800 	.word	0xfe00e800

080077fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af02      	add	r7, sp, #8
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	000c      	movs	r4, r1
 8007806:	0010      	movs	r0, r2
 8007808:	0019      	movs	r1, r3
 800780a:	250a      	movs	r5, #10
 800780c:	197b      	adds	r3, r7, r5
 800780e:	1c22      	adds	r2, r4, #0
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	2308      	movs	r3, #8
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	1c02      	adds	r2, r0, #0
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	1dbb      	adds	r3, r7, #6
 800781c:	1c0a      	adds	r2, r1, #0
 800781e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007820:	1dbb      	adds	r3, r7, #6
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	045c      	lsls	r4, r3, #17
 800782a:	197b      	adds	r3, r7, r5
 800782c:	8819      	ldrh	r1, [r3, #0]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	4b23      	ldr	r3, [pc, #140]	@ (80078c0 <I2C_RequestMemoryWrite+0xc4>)
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	0023      	movs	r3, r4
 8007836:	f000 fb41 	bl	8007ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 f91b 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8007846:	1e03      	subs	r3, r0, #0
 8007848:	d001      	beq.n	800784e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e033      	b.n	80078b6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800784e:	1dbb      	adds	r3, r7, #6
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007856:	2308      	movs	r3, #8
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	629a      	str	r2, [r3, #40]	@ 0x28
 8007864:	e019      	b.n	800789a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007866:	2308      	movs	r3, #8
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	b2da      	uxtb	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787a:	6a39      	ldr	r1, [r7, #32]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0018      	movs	r0, r3
 8007880:	f000 f8fc 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d001      	beq.n	800788c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e014      	b.n	80078b6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800788c:	2308      	movs	r3, #8
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	0013      	movs	r3, r2
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	f000 f890 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 80078ac:	1e03      	subs	r3, r0, #0
 80078ae:	d001      	beq.n	80078b4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	0018      	movs	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b004      	add	sp, #16
 80078bc:	bdb0      	pop	{r4, r5, r7, pc}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	80002000 	.word	0x80002000

080078c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80078c4:	b5b0      	push	{r4, r5, r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	000c      	movs	r4, r1
 80078ce:	0010      	movs	r0, r2
 80078d0:	0019      	movs	r1, r3
 80078d2:	250a      	movs	r5, #10
 80078d4:	197b      	adds	r3, r7, r5
 80078d6:	1c22      	adds	r2, r4, #0
 80078d8:	801a      	strh	r2, [r3, #0]
 80078da:	2308      	movs	r3, #8
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	1c02      	adds	r2, r0, #0
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	1dbb      	adds	r3, r7, #6
 80078e4:	1c0a      	adds	r2, r1, #0
 80078e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078e8:	1dbb      	adds	r3, r7, #6
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	197b      	adds	r3, r7, r5
 80078f0:	8819      	ldrh	r1, [r3, #0]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	4b23      	ldr	r3, [pc, #140]	@ (8007984 <I2C_RequestMemoryRead+0xc0>)
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2300      	movs	r3, #0
 80078fa:	f000 fadf 	bl	8007ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007900:	6a39      	ldr	r1, [r7, #32]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	0018      	movs	r0, r3
 8007906:	f000 f8b9 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800790a:	1e03      	subs	r3, r0, #0
 800790c:	d001      	beq.n	8007912 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e033      	b.n	800797a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007912:	1dbb      	adds	r3, r7, #6
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d107      	bne.n	800792a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800791a:	2308      	movs	r3, #8
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	629a      	str	r2, [r3, #40]	@ 0x28
 8007928:	e019      	b.n	800795e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800792a:	2308      	movs	r3, #8
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	b29b      	uxth	r3, r3
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800793c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793e:	6a39      	ldr	r1, [r7, #32]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0018      	movs	r0, r3
 8007944:	f000 f89a 	bl	8007a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8007948:	1e03      	subs	r3, r0, #0
 800794a:	d001      	beq.n	8007950 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e014      	b.n	800797a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007950:	2308      	movs	r3, #8
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800795e:	6a3a      	ldr	r2, [r7, #32]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	0013      	movs	r3, r2
 8007968:	2200      	movs	r2, #0
 800796a:	2140      	movs	r1, #64	@ 0x40
 800796c:	f000 f82e 	bl	80079cc <I2C_WaitOnFlagUntilTimeout>
 8007970:	1e03      	subs	r3, r0, #0
 8007972:	d001      	beq.n	8007978 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	0018      	movs	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	b004      	add	sp, #16
 8007980:	bdb0      	pop	{r4, r5, r7, pc}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	80002000 	.word	0x80002000

08007988 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2202      	movs	r2, #2
 8007998:	4013      	ands	r3, r2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d103      	bne.n	80079a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2201      	movs	r2, #1
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d007      	beq.n	80079c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2101      	movs	r1, #1
 80079c0:	430a      	orrs	r2, r1
 80079c2:	619a      	str	r2, [r3, #24]
  }
}
 80079c4:	46c0      	nop			@ (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	1dfb      	adds	r3, r7, #7
 80079da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079dc:	e03a      	b.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 f971 	bl	8007ccc <I2C_IsErrorOccurred>
 80079ea:	1e03      	subs	r3, r0, #0
 80079ec:	d001      	beq.n	80079f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e040      	b.n	8007a74 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	d02d      	beq.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f8:	f7fd fde6 	bl	80055c8 <HAL_GetTick>
 80079fc:	0002      	movs	r2, r0
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d302      	bcc.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x42>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d122      	bne.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	4013      	ands	r3, r2
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	425a      	negs	r2, r3
 8007a1e:	4153      	adcs	r3, r2
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	001a      	movs	r2, r3
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d113      	bne.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a30:	2220      	movs	r2, #32
 8007a32:	431a      	orrs	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2241      	movs	r2, #65	@ 0x41
 8007a3c:	2120      	movs	r1, #32
 8007a3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2242      	movs	r2, #66	@ 0x42
 8007a44:	2100      	movs	r1, #0
 8007a46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2240      	movs	r2, #64	@ 0x40
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e00f      	b.n	8007a74 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	425a      	negs	r2, r3
 8007a64:	4153      	adcs	r3, r2
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	001a      	movs	r2, r3
 8007a6a:	1dfb      	adds	r3, r7, #7
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d0b5      	beq.n	80079de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	0018      	movs	r0, r3
 8007a76:	46bd      	mov	sp, r7
 8007a78:	b004      	add	sp, #16
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a88:	e032      	b.n	8007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	0018      	movs	r0, r3
 8007a92:	f000 f91b 	bl	8007ccc <I2C_IsErrorOccurred>
 8007a96:	1e03      	subs	r3, r0, #0
 8007a98:	d001      	beq.n	8007a9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e030      	b.n	8007b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	d025      	beq.n	8007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa4:	f7fd fd90 	bl	80055c8 <HAL_GetTick>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d302      	bcc.n	8007aba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d11a      	bne.n	8007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d013      	beq.n	8007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007acc:	2220      	movs	r2, #32
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2241      	movs	r2, #65	@ 0x41
 8007ad8:	2120      	movs	r1, #32
 8007ada:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2242      	movs	r2, #66	@ 0x42
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2240      	movs	r2, #64	@ 0x40
 8007ae8:	2100      	movs	r1, #0
 8007aea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e007      	b.n	8007b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2202      	movs	r2, #2
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d1c5      	bne.n	8007a8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	0018      	movs	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b004      	add	sp, #16
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b14:	e02f      	b.n	8007b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f000 f8d5 	bl	8007ccc <I2C_IsErrorOccurred>
 8007b22:	1e03      	subs	r3, r0, #0
 8007b24:	d001      	beq.n	8007b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e02d      	b.n	8007b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2a:	f7fd fd4d 	bl	80055c8 <HAL_GetTick>
 8007b2e:	0002      	movs	r2, r0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11a      	bne.n	8007b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2220      	movs	r2, #32
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d013      	beq.n	8007b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b52:	2220      	movs	r2, #32
 8007b54:	431a      	orrs	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2241      	movs	r2, #65	@ 0x41
 8007b5e:	2120      	movs	r1, #32
 8007b60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2242      	movs	r2, #66	@ 0x42
 8007b66:	2100      	movs	r1, #0
 8007b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2240      	movs	r2, #64	@ 0x40
 8007b6e:	2100      	movs	r1, #0
 8007b70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e007      	b.n	8007b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d1c8      	bne.n	8007b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9c:	2317      	movs	r3, #23
 8007b9e:	18fb      	adds	r3, r7, r3
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007ba4:	e07b      	b.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 f88d 	bl	8007ccc <I2C_IsErrorOccurred>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d003      	beq.n	8007bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8007bb6:	2317      	movs	r3, #23
 8007bb8:	18fb      	adds	r3, r7, r3
 8007bba:	2201      	movs	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d140      	bne.n	8007c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007bcc:	2117      	movs	r1, #23
 8007bce:	187b      	adds	r3, r7, r1
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d13b      	bne.n	8007c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2204      	movs	r2, #4
 8007bde:	4013      	ands	r3, r2
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d106      	bne.n	8007bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d123      	bne.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2210      	movs	r2, #16
 8007c06:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2220      	movs	r2, #32
 8007c14:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4929      	ldr	r1, [pc, #164]	@ (8007cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8007c22:	400a      	ands	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2241      	movs	r2, #65	@ 0x41
 8007c2a:	2120      	movs	r1, #32
 8007c2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2242      	movs	r2, #66	@ 0x42
 8007c32:	2100      	movs	r1, #0
 8007c34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2240      	movs	r2, #64	@ 0x40
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007c3e:	2317      	movs	r3, #23
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2201      	movs	r2, #1
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007c4e:	f7fd fcbb 	bl	80055c8 <HAL_GetTick>
 8007c52:	0002      	movs	r2, r0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11c      	bne.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8007c64:	2017      	movs	r0, #23
 8007c66:	183b      	adds	r3, r7, r0
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d117      	bne.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2204      	movs	r2, #4
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d010      	beq.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c80:	2220      	movs	r2, #32
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2241      	movs	r2, #65	@ 0x41
 8007c8c:	2120      	movs	r1, #32
 8007c8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	2100      	movs	r1, #0
 8007c96:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007c98:	183b      	adds	r3, r7, r0
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d005      	beq.n	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007cac:	2317      	movs	r3, #23
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d100      	bne.n	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007cb6:	e776      	b.n	8007ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007cb8:	2317      	movs	r3, #23
 8007cba:	18fb      	adds	r3, r7, r3
 8007cbc:	781b      	ldrb	r3, [r3, #0]
}
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b006      	add	sp, #24
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	fe00e800 	.word	0xfe00e800

08007ccc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2327      	movs	r3, #39	@ 0x27
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <I2C_IsErrorOccurred+0x2e>
 8007cf8:	e079      	b.n	8007dee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2210      	movs	r2, #16
 8007d00:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d02:	e057      	b.n	8007db4 <I2C_IsErrorOccurred+0xe8>
 8007d04:	2227      	movs	r2, #39	@ 0x27
 8007d06:	18bb      	adds	r3, r7, r2
 8007d08:	18ba      	adds	r2, r7, r2
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3301      	adds	r3, #1
 8007d12:	d04f      	beq.n	8007db4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d14:	f7fd fc58 	bl	80055c8 <HAL_GetTick>
 8007d18:	0002      	movs	r2, r0
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <I2C_IsErrorOccurred+0x5e>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d144      	bne.n	8007db4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	2380      	movs	r3, #128	@ 0x80
 8007d32:	01db      	lsls	r3, r3, #7
 8007d34:	4013      	ands	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d38:	2013      	movs	r0, #19
 8007d3a:	183b      	adds	r3, r7, r0
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	2142      	movs	r1, #66	@ 0x42
 8007d40:	5c52      	ldrb	r2, [r2, r1]
 8007d42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	2380      	movs	r3, #128	@ 0x80
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	401a      	ands	r2, r3
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d126      	bne.n	8007da6 <I2C_IsErrorOccurred+0xda>
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	2380      	movs	r3, #128	@ 0x80
 8007d5c:	01db      	lsls	r3, r3, #7
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d021      	beq.n	8007da6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007d62:	183b      	adds	r3, r7, r0
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d01d      	beq.n	8007da6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2180      	movs	r1, #128	@ 0x80
 8007d76:	01c9      	lsls	r1, r1, #7
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d7c:	f7fd fc24 	bl	80055c8 <HAL_GetTick>
 8007d80:	0003      	movs	r3, r0
 8007d82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d84:	e00f      	b.n	8007da6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d86:	f7fd fc1f 	bl	80055c8 <HAL_GetTick>
 8007d8a:	0002      	movs	r2, r0
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b19      	cmp	r3, #25
 8007d92:	d908      	bls.n	8007da6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	2220      	movs	r2, #32
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d9c:	2327      	movs	r3, #39	@ 0x27
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]

              break;
 8007da4:	e006      	b.n	8007db4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	2220      	movs	r2, #32
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d1e8      	bne.n	8007d86 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d004      	beq.n	8007dcc <I2C_IsErrorOccurred+0x100>
 8007dc2:	2327      	movs	r3, #39	@ 0x27
 8007dc4:	18fb      	adds	r3, r7, r3
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d09b      	beq.n	8007d04 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007dcc:	2327      	movs	r3, #39	@ 0x27
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2204      	movs	r2, #4
 8007de2:	4313      	orrs	r3, r2
 8007de4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007de6:	2327      	movs	r3, #39	@ 0x27
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	2201      	movs	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	2380      	movs	r3, #128	@ 0x80
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d00c      	beq.n	8007e1a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	2201      	movs	r2, #1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2280      	movs	r2, #128	@ 0x80
 8007e0e:	0052      	lsls	r2, r2, #1
 8007e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e12:	2327      	movs	r3, #39	@ 0x27
 8007e14:	18fb      	adds	r3, r7, r3
 8007e16:	2201      	movs	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4013      	ands	r3, r2
 8007e22:	d00c      	beq.n	8007e3e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	2208      	movs	r2, #8
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2280      	movs	r2, #128	@ 0x80
 8007e32:	00d2      	lsls	r2, r2, #3
 8007e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e36:	2327      	movs	r3, #39	@ 0x27
 8007e38:	18fb      	adds	r3, r7, r3
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	2380      	movs	r3, #128	@ 0x80
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4013      	ands	r3, r2
 8007e46:	d00c      	beq.n	8007e62 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2280      	movs	r2, #128	@ 0x80
 8007e56:	0092      	lsls	r2, r2, #2
 8007e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e5a:	2327      	movs	r3, #39	@ 0x27
 8007e5c:	18fb      	adds	r3, r7, r3
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007e62:	2327      	movs	r3, #39	@ 0x27
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01d      	beq.n	8007ea8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f7ff fd8a 	bl	8007988 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	490e      	ldr	r1, [pc, #56]	@ (8007eb8 <I2C_IsErrorOccurred+0x1ec>)
 8007e80:	400a      	ands	r2, r1
 8007e82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2241      	movs	r2, #65	@ 0x41
 8007e94:	2120      	movs	r1, #32
 8007e96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2242      	movs	r2, #66	@ 0x42
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2240      	movs	r2, #64	@ 0x40
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007ea8:	2327      	movs	r3, #39	@ 0x27
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	781b      	ldrb	r3, [r3, #0]
}
 8007eae:	0018      	movs	r0, r3
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	b00a      	add	sp, #40	@ 0x28
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	46c0      	nop			@ (mov r8, r8)
 8007eb8:	fe00e800 	.word	0xfe00e800

08007ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	0008      	movs	r0, r1
 8007ec6:	0011      	movs	r1, r2
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	240a      	movs	r4, #10
 8007ecc:	193b      	adds	r3, r7, r4
 8007ece:	1c02      	adds	r2, r0, #0
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	2009      	movs	r0, #9
 8007ed4:	183b      	adds	r3, r7, r0
 8007ed6:	1c0a      	adds	r2, r1, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eda:	193b      	adds	r3, r7, r4
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	059b      	lsls	r3, r3, #22
 8007ee0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ee2:	183b      	adds	r3, r7, r0
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	0419      	lsls	r1, r3, #16
 8007ee8:	23ff      	movs	r3, #255	@ 0xff
 8007eea:	041b      	lsls	r3, r3, #16
 8007eec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f06:	0d51      	lsrs	r1, r2, #21
 8007f08:	2280      	movs	r2, #128	@ 0x80
 8007f0a:	00d2      	lsls	r2, r2, #3
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	4907      	ldr	r1, [pc, #28]	@ (8007f2c <I2C_TransferConfig+0x70>)
 8007f10:	430a      	orrs	r2, r1
 8007f12:	43d2      	mvns	r2, r2
 8007f14:	401a      	ands	r2, r3
 8007f16:	0011      	movs	r1, r2
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b007      	add	sp, #28
 8007f28:	bd90      	pop	{r4, r7, pc}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	03ff63ff 	.word	0x03ff63ff

08007f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2241      	movs	r2, #65	@ 0x41
 8007f3e:	5c9b      	ldrb	r3, [r3, r2]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d138      	bne.n	8007fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	@ 0x40
 8007f4a:	5c9b      	ldrb	r3, [r3, r2]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e032      	b.n	8007fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2240      	movs	r2, #64	@ 0x40
 8007f58:	2101      	movs	r1, #1
 8007f5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2241      	movs	r2, #65	@ 0x41
 8007f60:	2124      	movs	r1, #36	@ 0x24
 8007f62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2101      	movs	r1, #1
 8007f70:	438a      	bics	r2, r1
 8007f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4911      	ldr	r1, [pc, #68]	@ (8007fc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007f80:	400a      	ands	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2241      	movs	r2, #65	@ 0x41
 8007fa8:	2120      	movs	r1, #32
 8007faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2240      	movs	r2, #64	@ 0x40
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e000      	b.n	8007fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
  }
}
 8007fba:	0018      	movs	r0, r3
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	b002      	add	sp, #8
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	46c0      	nop			@ (mov r8, r8)
 8007fc4:	ffffefff 	.word	0xffffefff

08007fc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2241      	movs	r2, #65	@ 0x41
 8007fd6:	5c9b      	ldrb	r3, [r3, r2]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d139      	bne.n	8008052 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2240      	movs	r2, #64	@ 0x40
 8007fe2:	5c9b      	ldrb	r3, [r3, r2]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e033      	b.n	8008054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	@ 0x40
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2241      	movs	r2, #65	@ 0x41
 8007ff8:	2124      	movs	r1, #36	@ 0x24
 8007ffa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2101      	movs	r1, #1
 8008008:	438a      	bics	r2, r1
 800800a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a11      	ldr	r2, [pc, #68]	@ (800805c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2101      	movs	r1, #1
 800803a:	430a      	orrs	r2, r1
 800803c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2241      	movs	r2, #65	@ 0x41
 8008042:	2120      	movs	r1, #32
 8008044:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2240      	movs	r2, #64	@ 0x40
 800804a:	2100      	movs	r1, #0
 800804c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e000      	b.n	8008054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008052:	2302      	movs	r3, #2
  }
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b004      	add	sp, #16
 800805a:	bd80      	pop	{r7, pc}
 800805c:	fffff0ff 	.word	0xfffff0ff

08008060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008068:	4b19      	ldr	r3, [pc, #100]	@ (80080d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800806e:	4013      	ands	r3, r2
 8008070:	0019      	movs	r1, r3
 8008072:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	430a      	orrs	r2, r1
 8008078:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	429a      	cmp	r2, r3
 8008082:	d11f      	bne.n	80080c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008084:	4b14      	ldr	r3, [pc, #80]	@ (80080d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	0013      	movs	r3, r2
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	189b      	adds	r3, r3, r2
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4912      	ldr	r1, [pc, #72]	@ (80080dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008092:	0018      	movs	r0, r3
 8008094:	f7f8 f850 	bl	8000138 <__udivsi3>
 8008098:	0003      	movs	r3, r0
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800809e:	e008      	b.n	80080b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e001      	b.n	80080b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e009      	b.n	80080c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080b2:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	401a      	ands	r2, r3
 80080bc:	2380      	movs	r3, #128	@ 0x80
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d0ed      	beq.n	80080a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	0018      	movs	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b004      	add	sp, #16
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	46c0      	nop			@ (mov r8, r8)
 80080d0:	40007000 	.word	0x40007000
 80080d4:	fffff9ff 	.word	0xfffff9ff
 80080d8:	20000010 	.word	0x20000010
 80080dc:	000f4240 	.word	0x000f4240

080080e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80080e4:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	23e0      	movs	r3, #224	@ 0xe0
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	4013      	ands	r3, r2
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40021000 	.word	0x40021000

080080f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e2f3      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2201      	movs	r2, #1
 8008110:	4013      	ands	r3, r2
 8008112:	d100      	bne.n	8008116 <HAL_RCC_OscConfig+0x1e>
 8008114:	e07c      	b.n	8008210 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008116:	4bc3      	ldr	r3, [pc, #780]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2238      	movs	r2, #56	@ 0x38
 800811c:	4013      	ands	r3, r2
 800811e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008120:	4bc0      	ldr	r3, [pc, #768]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2203      	movs	r2, #3
 8008126:	4013      	ands	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b10      	cmp	r3, #16
 800812e:	d102      	bne.n	8008136 <HAL_RCC_OscConfig+0x3e>
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b03      	cmp	r3, #3
 8008134:	d002      	beq.n	800813c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d10b      	bne.n	8008154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800813c:	4bb9      	ldr	r3, [pc, #740]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	2380      	movs	r3, #128	@ 0x80
 8008142:	029b      	lsls	r3, r3, #10
 8008144:	4013      	ands	r3, r2
 8008146:	d062      	beq.n	800820e <HAL_RCC_OscConfig+0x116>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d15e      	bne.n	800820e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e2ce      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	2380      	movs	r3, #128	@ 0x80
 800815a:	025b      	lsls	r3, r3, #9
 800815c:	429a      	cmp	r2, r3
 800815e:	d107      	bne.n	8008170 <HAL_RCC_OscConfig+0x78>
 8008160:	4bb0      	ldr	r3, [pc, #704]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	4baf      	ldr	r3, [pc, #700]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008166:	2180      	movs	r1, #128	@ 0x80
 8008168:	0249      	lsls	r1, r1, #9
 800816a:	430a      	orrs	r2, r1
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e020      	b.n	80081b2 <HAL_RCC_OscConfig+0xba>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	23a0      	movs	r3, #160	@ 0xa0
 8008176:	02db      	lsls	r3, r3, #11
 8008178:	429a      	cmp	r2, r3
 800817a:	d10e      	bne.n	800819a <HAL_RCC_OscConfig+0xa2>
 800817c:	4ba9      	ldr	r3, [pc, #676]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	4ba8      	ldr	r3, [pc, #672]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008182:	2180      	movs	r1, #128	@ 0x80
 8008184:	02c9      	lsls	r1, r1, #11
 8008186:	430a      	orrs	r2, r1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	4ba6      	ldr	r3, [pc, #664]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4ba5      	ldr	r3, [pc, #660]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008190:	2180      	movs	r1, #128	@ 0x80
 8008192:	0249      	lsls	r1, r1, #9
 8008194:	430a      	orrs	r2, r1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e00b      	b.n	80081b2 <HAL_RCC_OscConfig+0xba>
 800819a:	4ba2      	ldr	r3, [pc, #648]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	4ba1      	ldr	r3, [pc, #644]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80081a0:	49a1      	ldr	r1, [pc, #644]	@ (8008428 <HAL_RCC_OscConfig+0x330>)
 80081a2:	400a      	ands	r2, r1
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	4b9f      	ldr	r3, [pc, #636]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b9e      	ldr	r3, [pc, #632]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80081ac:	499f      	ldr	r1, [pc, #636]	@ (800842c <HAL_RCC_OscConfig+0x334>)
 80081ae:	400a      	ands	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d014      	beq.n	80081e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fd fa05 	bl	80055c8 <HAL_GetTick>
 80081be:	0003      	movs	r3, r0
 80081c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081c4:	f7fd fa00 	bl	80055c8 <HAL_GetTick>
 80081c8:	0002      	movs	r2, r0
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b64      	cmp	r3, #100	@ 0x64
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e28d      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081d6:	4b93      	ldr	r3, [pc, #588]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	2380      	movs	r3, #128	@ 0x80
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	4013      	ands	r3, r2
 80081e0:	d0f0      	beq.n	80081c4 <HAL_RCC_OscConfig+0xcc>
 80081e2:	e015      	b.n	8008210 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e4:	f7fd f9f0 	bl	80055c8 <HAL_GetTick>
 80081e8:	0003      	movs	r3, r0
 80081ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081ee:	f7fd f9eb 	bl	80055c8 <HAL_GetTick>
 80081f2:	0002      	movs	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b64      	cmp	r3, #100	@ 0x64
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e278      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008200:	4b88      	ldr	r3, [pc, #544]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	2380      	movs	r3, #128	@ 0x80
 8008206:	029b      	lsls	r3, r3, #10
 8008208:	4013      	ands	r3, r2
 800820a:	d1f0      	bne.n	80081ee <HAL_RCC_OscConfig+0xf6>
 800820c:	e000      	b.n	8008210 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800820e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2202      	movs	r2, #2
 8008216:	4013      	ands	r3, r2
 8008218:	d100      	bne.n	800821c <HAL_RCC_OscConfig+0x124>
 800821a:	e099      	b.n	8008350 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800821c:	4b81      	ldr	r3, [pc, #516]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2238      	movs	r2, #56	@ 0x38
 8008222:	4013      	ands	r3, r2
 8008224:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008226:	4b7f      	ldr	r3, [pc, #508]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	2203      	movs	r2, #3
 800822c:	4013      	ands	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b10      	cmp	r3, #16
 8008234:	d102      	bne.n	800823c <HAL_RCC_OscConfig+0x144>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d002      	beq.n	8008242 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d135      	bne.n	80082ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008242:	4b78      	ldr	r3, [pc, #480]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	2380      	movs	r3, #128	@ 0x80
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4013      	ands	r3, r2
 800824c:	d005      	beq.n	800825a <HAL_RCC_OscConfig+0x162>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e24b      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825a:	4b72      	ldr	r3, [pc, #456]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	4a74      	ldr	r2, [pc, #464]	@ (8008430 <HAL_RCC_OscConfig+0x338>)
 8008260:	4013      	ands	r3, r2
 8008262:	0019      	movs	r1, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	021a      	lsls	r2, r3, #8
 800826a:	4b6e      	ldr	r3, [pc, #440]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800826c:	430a      	orrs	r2, r1
 800826e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d112      	bne.n	800829c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008276:	4b6b      	ldr	r3, [pc, #428]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a6e      	ldr	r2, [pc, #440]	@ (8008434 <HAL_RCC_OscConfig+0x33c>)
 800827c:	4013      	ands	r3, r2
 800827e:	0019      	movs	r1, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	4b67      	ldr	r3, [pc, #412]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008286:	430a      	orrs	r2, r1
 8008288:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800828a:	4b66      	ldr	r3, [pc, #408]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	0adb      	lsrs	r3, r3, #11
 8008290:	2207      	movs	r2, #7
 8008292:	4013      	ands	r3, r2
 8008294:	4a68      	ldr	r2, [pc, #416]	@ (8008438 <HAL_RCC_OscConfig+0x340>)
 8008296:	40da      	lsrs	r2, r3
 8008298:	4b68      	ldr	r3, [pc, #416]	@ (800843c <HAL_RCC_OscConfig+0x344>)
 800829a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800829c:	4b68      	ldr	r3, [pc, #416]	@ (8008440 <HAL_RCC_OscConfig+0x348>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	0018      	movs	r0, r3
 80082a2:	f7fd f935 	bl	8005510 <HAL_InitTick>
 80082a6:	1e03      	subs	r3, r0, #0
 80082a8:	d051      	beq.n	800834e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e221      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d030      	beq.n	8008318 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80082b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a5e      	ldr	r2, [pc, #376]	@ (8008434 <HAL_RCC_OscConfig+0x33c>)
 80082bc:	4013      	ands	r3, r2
 80082be:	0019      	movs	r1, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	4b57      	ldr	r3, [pc, #348]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80082c6:	430a      	orrs	r2, r1
 80082c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80082ca:	4b56      	ldr	r3, [pc, #344]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b55      	ldr	r3, [pc, #340]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80082d0:	2180      	movs	r1, #128	@ 0x80
 80082d2:	0049      	lsls	r1, r1, #1
 80082d4:	430a      	orrs	r2, r1
 80082d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d8:	f7fd f976 	bl	80055c8 <HAL_GetTick>
 80082dc:	0003      	movs	r3, r0
 80082de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082e2:	f7fd f971 	bl	80055c8 <HAL_GetTick>
 80082e6:	0002      	movs	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e1fe      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082f4:	4b4b      	ldr	r3, [pc, #300]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4013      	ands	r3, r2
 80082fe:	d0f0      	beq.n	80082e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008300:	4b48      	ldr	r3, [pc, #288]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	4a4a      	ldr	r2, [pc, #296]	@ (8008430 <HAL_RCC_OscConfig+0x338>)
 8008306:	4013      	ands	r3, r2
 8008308:	0019      	movs	r1, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	021a      	lsls	r2, r3, #8
 8008310:	4b44      	ldr	r3, [pc, #272]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	e01b      	b.n	8008350 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008318:	4b42      	ldr	r3, [pc, #264]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b41      	ldr	r3, [pc, #260]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800831e:	4949      	ldr	r1, [pc, #292]	@ (8008444 <HAL_RCC_OscConfig+0x34c>)
 8008320:	400a      	ands	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fd f950 	bl	80055c8 <HAL_GetTick>
 8008328:	0003      	movs	r3, r0
 800832a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800832e:	f7fd f94b 	bl	80055c8 <HAL_GetTick>
 8008332:	0002      	movs	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e1d8      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008340:	4b38      	ldr	r3, [pc, #224]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	2380      	movs	r3, #128	@ 0x80
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4013      	ands	r3, r2
 800834a:	d1f0      	bne.n	800832e <HAL_RCC_OscConfig+0x236>
 800834c:	e000      	b.n	8008350 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800834e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2208      	movs	r2, #8
 8008356:	4013      	ands	r3, r2
 8008358:	d047      	beq.n	80083ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800835a:	4b32      	ldr	r3, [pc, #200]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2238      	movs	r2, #56	@ 0x38
 8008360:	4013      	ands	r3, r2
 8008362:	2b18      	cmp	r3, #24
 8008364:	d10a      	bne.n	800837c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008366:	4b2f      	ldr	r3, [pc, #188]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836a:	2202      	movs	r2, #2
 800836c:	4013      	ands	r3, r2
 800836e:	d03c      	beq.n	80083ea <HAL_RCC_OscConfig+0x2f2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d138      	bne.n	80083ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e1ba      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008384:	4b27      	ldr	r3, [pc, #156]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008386:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008388:	4b26      	ldr	r3, [pc, #152]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800838a:	2101      	movs	r1, #1
 800838c:	430a      	orrs	r2, r1
 800838e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008390:	f7fd f91a 	bl	80055c8 <HAL_GetTick>
 8008394:	0003      	movs	r3, r0
 8008396:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008398:	e008      	b.n	80083ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800839a:	f7fd f915 	bl	80055c8 <HAL_GetTick>
 800839e:	0002      	movs	r2, r0
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e1a2      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80083ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b0:	2202      	movs	r2, #2
 80083b2:	4013      	ands	r3, r2
 80083b4:	d0f1      	beq.n	800839a <HAL_RCC_OscConfig+0x2a2>
 80083b6:	e018      	b.n	80083ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80083b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80083ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80083bc:	4b19      	ldr	r3, [pc, #100]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80083be:	2101      	movs	r1, #1
 80083c0:	438a      	bics	r2, r1
 80083c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7fd f900 	bl	80055c8 <HAL_GetTick>
 80083c8:	0003      	movs	r3, r0
 80083ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ce:	f7fd f8fb 	bl	80055c8 <HAL_GetTick>
 80083d2:	0002      	movs	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e188      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083e0:	4b10      	ldr	r3, [pc, #64]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 80083e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083e4:	2202      	movs	r2, #2
 80083e6:	4013      	ands	r3, r2
 80083e8:	d1f1      	bne.n	80083ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2204      	movs	r2, #4
 80083f0:	4013      	ands	r3, r2
 80083f2:	d100      	bne.n	80083f6 <HAL_RCC_OscConfig+0x2fe>
 80083f4:	e0c6      	b.n	8008584 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083f6:	231f      	movs	r3, #31
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80083fe:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2238      	movs	r2, #56	@ 0x38
 8008404:	4013      	ands	r3, r2
 8008406:	2b20      	cmp	r3, #32
 8008408:	d11e      	bne.n	8008448 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800840a:	4b06      	ldr	r3, [pc, #24]	@ (8008424 <HAL_RCC_OscConfig+0x32c>)
 800840c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800840e:	2202      	movs	r2, #2
 8008410:	4013      	ands	r3, r2
 8008412:	d100      	bne.n	8008416 <HAL_RCC_OscConfig+0x31e>
 8008414:	e0b6      	b.n	8008584 <HAL_RCC_OscConfig+0x48c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d000      	beq.n	8008420 <HAL_RCC_OscConfig+0x328>
 800841e:	e0b1      	b.n	8008584 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e166      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
 8008424:	40021000 	.word	0x40021000
 8008428:	fffeffff 	.word	0xfffeffff
 800842c:	fffbffff 	.word	0xfffbffff
 8008430:	ffff80ff 	.word	0xffff80ff
 8008434:	ffffc7ff 	.word	0xffffc7ff
 8008438:	00f42400 	.word	0x00f42400
 800843c:	20000010 	.word	0x20000010
 8008440:	20000014 	.word	0x20000014
 8008444:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008448:	4bac      	ldr	r3, [pc, #688]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800844a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800844c:	2380      	movs	r3, #128	@ 0x80
 800844e:	055b      	lsls	r3, r3, #21
 8008450:	4013      	ands	r3, r2
 8008452:	d101      	bne.n	8008458 <HAL_RCC_OscConfig+0x360>
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_RCC_OscConfig+0x362>
 8008458:	2300      	movs	r3, #0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d011      	beq.n	8008482 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800845e:	4ba7      	ldr	r3, [pc, #668]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008462:	4ba6      	ldr	r3, [pc, #664]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008464:	2180      	movs	r1, #128	@ 0x80
 8008466:	0549      	lsls	r1, r1, #21
 8008468:	430a      	orrs	r2, r1
 800846a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800846c:	4ba3      	ldr	r3, [pc, #652]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800846e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008470:	2380      	movs	r3, #128	@ 0x80
 8008472:	055b      	lsls	r3, r3, #21
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800847a:	231f      	movs	r3, #31
 800847c:	18fb      	adds	r3, r7, r3
 800847e:	2201      	movs	r2, #1
 8008480:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008482:	4b9f      	ldr	r3, [pc, #636]	@ (8008700 <HAL_RCC_OscConfig+0x608>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	2380      	movs	r3, #128	@ 0x80
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	4013      	ands	r3, r2
 800848c:	d11a      	bne.n	80084c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800848e:	4b9c      	ldr	r3, [pc, #624]	@ (8008700 <HAL_RCC_OscConfig+0x608>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b9b      	ldr	r3, [pc, #620]	@ (8008700 <HAL_RCC_OscConfig+0x608>)
 8008494:	2180      	movs	r1, #128	@ 0x80
 8008496:	0049      	lsls	r1, r1, #1
 8008498:	430a      	orrs	r2, r1
 800849a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800849c:	f7fd f894 	bl	80055c8 <HAL_GetTick>
 80084a0:	0003      	movs	r3, r0
 80084a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084a6:	f7fd f88f 	bl	80055c8 <HAL_GetTick>
 80084aa:	0002      	movs	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e11c      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084b8:	4b91      	ldr	r3, [pc, #580]	@ (8008700 <HAL_RCC_OscConfig+0x608>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	4013      	ands	r3, r2
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d106      	bne.n	80084da <HAL_RCC_OscConfig+0x3e2>
 80084cc:	4b8b      	ldr	r3, [pc, #556]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084d0:	4b8a      	ldr	r3, [pc, #552]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084d2:	2101      	movs	r1, #1
 80084d4:	430a      	orrs	r2, r1
 80084d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084d8:	e01c      	b.n	8008514 <HAL_RCC_OscConfig+0x41c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b05      	cmp	r3, #5
 80084e0:	d10c      	bne.n	80084fc <HAL_RCC_OscConfig+0x404>
 80084e2:	4b86      	ldr	r3, [pc, #536]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084e6:	4b85      	ldr	r3, [pc, #532]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084e8:	2104      	movs	r1, #4
 80084ea:	430a      	orrs	r2, r1
 80084ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084ee:	4b83      	ldr	r3, [pc, #524]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084f2:	4b82      	ldr	r3, [pc, #520]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084f4:	2101      	movs	r1, #1
 80084f6:	430a      	orrs	r2, r1
 80084f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084fa:	e00b      	b.n	8008514 <HAL_RCC_OscConfig+0x41c>
 80084fc:	4b7f      	ldr	r3, [pc, #508]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80084fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008500:	4b7e      	ldr	r3, [pc, #504]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008502:	2101      	movs	r1, #1
 8008504:	438a      	bics	r2, r1
 8008506:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008508:	4b7c      	ldr	r3, [pc, #496]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800850a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800850c:	4b7b      	ldr	r3, [pc, #492]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800850e:	2104      	movs	r1, #4
 8008510:	438a      	bics	r2, r1
 8008512:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d014      	beq.n	8008546 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fd f854 	bl	80055c8 <HAL_GetTick>
 8008520:	0003      	movs	r3, r0
 8008522:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008524:	e009      	b.n	800853a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008526:	f7fd f84f 	bl	80055c8 <HAL_GetTick>
 800852a:	0002      	movs	r2, r0
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	4a74      	ldr	r2, [pc, #464]	@ (8008704 <HAL_RCC_OscConfig+0x60c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e0db      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800853a:	4b70      	ldr	r3, [pc, #448]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	2202      	movs	r2, #2
 8008540:	4013      	ands	r3, r2
 8008542:	d0f0      	beq.n	8008526 <HAL_RCC_OscConfig+0x42e>
 8008544:	e013      	b.n	800856e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008546:	f7fd f83f 	bl	80055c8 <HAL_GetTick>
 800854a:	0003      	movs	r3, r0
 800854c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800854e:	e009      	b.n	8008564 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008550:	f7fd f83a 	bl	80055c8 <HAL_GetTick>
 8008554:	0002      	movs	r2, r0
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	4a6a      	ldr	r2, [pc, #424]	@ (8008704 <HAL_RCC_OscConfig+0x60c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e0c6      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008564:	4b65      	ldr	r3, [pc, #404]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008568:	2202      	movs	r2, #2
 800856a:	4013      	ands	r3, r2
 800856c:	d1f0      	bne.n	8008550 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800856e:	231f      	movs	r3, #31
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d105      	bne.n	8008584 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008578:	4b60      	ldr	r3, [pc, #384]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800857a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800857c:	4b5f      	ldr	r3, [pc, #380]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800857e:	4962      	ldr	r1, [pc, #392]	@ (8008708 <HAL_RCC_OscConfig+0x610>)
 8008580:	400a      	ands	r2, r1
 8008582:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d100      	bne.n	800858e <HAL_RCC_OscConfig+0x496>
 800858c:	e0b0      	b.n	80086f0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800858e:	4b5b      	ldr	r3, [pc, #364]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2238      	movs	r2, #56	@ 0x38
 8008594:	4013      	ands	r3, r2
 8008596:	2b10      	cmp	r3, #16
 8008598:	d100      	bne.n	800859c <HAL_RCC_OscConfig+0x4a4>
 800859a:	e078      	b.n	800868e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d153      	bne.n	800864c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a4:	4b55      	ldr	r3, [pc, #340]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b54      	ldr	r3, [pc, #336]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80085aa:	4958      	ldr	r1, [pc, #352]	@ (800870c <HAL_RCC_OscConfig+0x614>)
 80085ac:	400a      	ands	r2, r1
 80085ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fd f80a 	bl	80055c8 <HAL_GetTick>
 80085b4:	0003      	movs	r3, r0
 80085b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085b8:	e008      	b.n	80085cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ba:	f7fd f805 	bl	80055c8 <HAL_GetTick>
 80085be:	0002      	movs	r2, r0
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e092      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085cc:	4b4b      	ldr	r3, [pc, #300]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	049b      	lsls	r3, r3, #18
 80085d4:	4013      	ands	r3, r2
 80085d6:	d1f0      	bne.n	80085ba <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085d8:	4b48      	ldr	r3, [pc, #288]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a4c      	ldr	r2, [pc, #304]	@ (8008710 <HAL_RCC_OscConfig+0x618>)
 80085de:	4013      	ands	r3, r2
 80085e0:	0019      	movs	r1, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1a      	ldr	r2, [r3, #32]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fe:	431a      	orrs	r2, r3
 8008600:	4b3e      	ldr	r3, [pc, #248]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008602:	430a      	orrs	r2, r1
 8008604:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008606:	4b3d      	ldr	r3, [pc, #244]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b3c      	ldr	r3, [pc, #240]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800860c:	2180      	movs	r1, #128	@ 0x80
 800860e:	0449      	lsls	r1, r1, #17
 8008610:	430a      	orrs	r2, r1
 8008612:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008614:	4b39      	ldr	r3, [pc, #228]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	4b38      	ldr	r3, [pc, #224]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800861a:	2180      	movs	r1, #128	@ 0x80
 800861c:	0549      	lsls	r1, r1, #21
 800861e:	430a      	orrs	r2, r1
 8008620:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008622:	f7fc ffd1 	bl	80055c8 <HAL_GetTick>
 8008626:	0003      	movs	r3, r0
 8008628:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800862c:	f7fc ffcc 	bl	80055c8 <HAL_GetTick>
 8008630:	0002      	movs	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e059      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800863e:	4b2f      	ldr	r3, [pc, #188]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	2380      	movs	r3, #128	@ 0x80
 8008644:	049b      	lsls	r3, r3, #18
 8008646:	4013      	ands	r3, r2
 8008648:	d0f0      	beq.n	800862c <HAL_RCC_OscConfig+0x534>
 800864a:	e051      	b.n	80086f0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800864c:	4b2b      	ldr	r3, [pc, #172]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	4b2a      	ldr	r3, [pc, #168]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008652:	492e      	ldr	r1, [pc, #184]	@ (800870c <HAL_RCC_OscConfig+0x614>)
 8008654:	400a      	ands	r2, r1
 8008656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7fc ffb6 	bl	80055c8 <HAL_GetTick>
 800865c:	0003      	movs	r3, r0
 800865e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008662:	f7fc ffb1 	bl	80055c8 <HAL_GetTick>
 8008666:	0002      	movs	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e03e      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008674:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	2380      	movs	r3, #128	@ 0x80
 800867a:	049b      	lsls	r3, r3, #18
 800867c:	4013      	ands	r3, r2
 800867e:	d1f0      	bne.n	8008662 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008680:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 8008686:	4923      	ldr	r1, [pc, #140]	@ (8008714 <HAL_RCC_OscConfig+0x61c>)
 8008688:	400a      	ands	r2, r1
 800868a:	60da      	str	r2, [r3, #12]
 800868c:	e030      	b.n	80086f0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e02b      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800869a:	4b18      	ldr	r3, [pc, #96]	@ (80086fc <HAL_RCC_OscConfig+0x604>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2203      	movs	r2, #3
 80086a4:	401a      	ands	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11e      	bne.n	80086ec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2270      	movs	r2, #112	@ 0x70
 80086b2:	401a      	ands	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d117      	bne.n	80086ec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	23fe      	movs	r3, #254	@ 0xfe
 80086c0:	01db      	lsls	r3, r3, #7
 80086c2:	401a      	ands	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10e      	bne.n	80086ec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	23f8      	movs	r3, #248	@ 0xf8
 80086d2:	039b      	lsls	r3, r3, #14
 80086d4:	401a      	ands	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d106      	bne.n	80086ec <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	0f5b      	lsrs	r3, r3, #29
 80086e2:	075a      	lsls	r2, r3, #29
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d001      	beq.n	80086f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	0018      	movs	r0, r3
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b008      	add	sp, #32
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	40021000 	.word	0x40021000
 8008700:	40007000 	.word	0x40007000
 8008704:	00001388 	.word	0x00001388
 8008708:	efffffff 	.word	0xefffffff
 800870c:	feffffff 	.word	0xfeffffff
 8008710:	1fc1808c 	.word	0x1fc1808c
 8008714:	effefffc 	.word	0xeffefffc

08008718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0e9      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800872c:	4b76      	ldr	r3, [pc, #472]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2207      	movs	r2, #7
 8008732:	4013      	ands	r3, r2
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d91e      	bls.n	8008778 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873a:	4b73      	ldr	r3, [pc, #460]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2207      	movs	r2, #7
 8008740:	4393      	bics	r3, r2
 8008742:	0019      	movs	r1, r3
 8008744:	4b70      	ldr	r3, [pc, #448]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800874c:	f7fc ff3c 	bl	80055c8 <HAL_GetTick>
 8008750:	0003      	movs	r3, r0
 8008752:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008754:	e009      	b.n	800876a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008756:	f7fc ff37 	bl	80055c8 <HAL_GetTick>
 800875a:	0002      	movs	r2, r0
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	4a6a      	ldr	r2, [pc, #424]	@ (800890c <HAL_RCC_ClockConfig+0x1f4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d901      	bls.n	800876a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e0ca      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800876a:	4b67      	ldr	r3, [pc, #412]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2207      	movs	r2, #7
 8008770:	4013      	ands	r3, r2
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d1ee      	bne.n	8008756 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2202      	movs	r2, #2
 800877e:	4013      	ands	r3, r2
 8008780:	d015      	beq.n	80087ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2204      	movs	r2, #4
 8008788:	4013      	ands	r3, r2
 800878a:	d006      	beq.n	800879a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800878c:	4b60      	ldr	r3, [pc, #384]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	4b5f      	ldr	r3, [pc, #380]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 8008792:	21e0      	movs	r1, #224	@ 0xe0
 8008794:	01c9      	lsls	r1, r1, #7
 8008796:	430a      	orrs	r2, r1
 8008798:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800879a:	4b5d      	ldr	r3, [pc, #372]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	4a5d      	ldr	r2, [pc, #372]	@ (8008914 <HAL_RCC_ClockConfig+0x1fc>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	0019      	movs	r1, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	4b59      	ldr	r3, [pc, #356]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	4013      	ands	r3, r2
 80087b6:	d057      	beq.n	8008868 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d107      	bne.n	80087d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087c0:	4b53      	ldr	r3, [pc, #332]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	4013      	ands	r3, r2
 80087ca:	d12b      	bne.n	8008824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e097      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d107      	bne.n	80087e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	049b      	lsls	r3, r3, #18
 80087e0:	4013      	ands	r3, r2
 80087e2:	d11f      	bne.n	8008824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e08b      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d107      	bne.n	8008800 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087f0:	4b47      	ldr	r3, [pc, #284]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	2380      	movs	r3, #128	@ 0x80
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4013      	ands	r3, r2
 80087fa:	d113      	bne.n	8008824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e07f      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d106      	bne.n	8008816 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008808:	4b41      	ldr	r3, [pc, #260]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 800880a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880c:	2202      	movs	r2, #2
 800880e:	4013      	ands	r3, r2
 8008810:	d108      	bne.n	8008824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e074      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008816:	4b3e      	ldr	r3, [pc, #248]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 8008818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800881a:	2202      	movs	r2, #2
 800881c:	4013      	ands	r3, r2
 800881e:	d101      	bne.n	8008824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e06d      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008824:	4b3a      	ldr	r3, [pc, #232]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2207      	movs	r2, #7
 800882a:	4393      	bics	r3, r2
 800882c:	0019      	movs	r1, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	4b37      	ldr	r3, [pc, #220]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008838:	f7fc fec6 	bl	80055c8 <HAL_GetTick>
 800883c:	0003      	movs	r3, r0
 800883e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008840:	e009      	b.n	8008856 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008842:	f7fc fec1 	bl	80055c8 <HAL_GetTick>
 8008846:	0002      	movs	r2, r0
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	4a2f      	ldr	r2, [pc, #188]	@ (800890c <HAL_RCC_ClockConfig+0x1f4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e054      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008856:	4b2e      	ldr	r3, [pc, #184]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2238      	movs	r2, #56	@ 0x38
 800885c:	401a      	ands	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	429a      	cmp	r2, r3
 8008866:	d1ec      	bne.n	8008842 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008868:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2207      	movs	r2, #7
 800886e:	4013      	ands	r3, r2
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d21e      	bcs.n	80088b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008876:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2207      	movs	r2, #7
 800887c:	4393      	bics	r3, r2
 800887e:	0019      	movs	r1, r3
 8008880:	4b21      	ldr	r3, [pc, #132]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008888:	f7fc fe9e 	bl	80055c8 <HAL_GetTick>
 800888c:	0003      	movs	r3, r0
 800888e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008890:	e009      	b.n	80088a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008892:	f7fc fe99 	bl	80055c8 <HAL_GetTick>
 8008896:	0002      	movs	r2, r0
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	4a1b      	ldr	r2, [pc, #108]	@ (800890c <HAL_RCC_ClockConfig+0x1f4>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e02c      	b.n	8008900 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80088a6:	4b18      	ldr	r3, [pc, #96]	@ (8008908 <HAL_RCC_ClockConfig+0x1f0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2207      	movs	r2, #7
 80088ac:	4013      	ands	r3, r2
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d1ee      	bne.n	8008892 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2204      	movs	r2, #4
 80088ba:	4013      	ands	r3, r2
 80088bc:	d009      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80088be:	4b14      	ldr	r3, [pc, #80]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <HAL_RCC_ClockConfig+0x200>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	0019      	movs	r1, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	4b10      	ldr	r3, [pc, #64]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80088d2:	f000 f829 	bl	8008928 <HAL_RCC_GetSysClockFreq>
 80088d6:	0001      	movs	r1, r0
 80088d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <HAL_RCC_ClockConfig+0x1f8>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	220f      	movs	r2, #15
 80088e0:	401a      	ands	r2, r3
 80088e2:	4b0e      	ldr	r3, [pc, #56]	@ (800891c <HAL_RCC_ClockConfig+0x204>)
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	58d3      	ldr	r3, [r2, r3]
 80088e8:	221f      	movs	r2, #31
 80088ea:	4013      	ands	r3, r2
 80088ec:	000a      	movs	r2, r1
 80088ee:	40da      	lsrs	r2, r3
 80088f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <HAL_RCC_ClockConfig+0x208>)
 80088f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80088f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <HAL_RCC_ClockConfig+0x20c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	0018      	movs	r0, r3
 80088fa:	f7fc fe09 	bl	8005510 <HAL_InitTick>
 80088fe:	0003      	movs	r3, r0
}
 8008900:	0018      	movs	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	b004      	add	sp, #16
 8008906:	bd80      	pop	{r7, pc}
 8008908:	40022000 	.word	0x40022000
 800890c:	00001388 	.word	0x00001388
 8008910:	40021000 	.word	0x40021000
 8008914:	fffff0ff 	.word	0xfffff0ff
 8008918:	ffff8fff 	.word	0xffff8fff
 800891c:	0800e408 	.word	0x0800e408
 8008920:	20000010 	.word	0x20000010
 8008924:	20000014 	.word	0x20000014

08008928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800892e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2238      	movs	r2, #56	@ 0x38
 8008934:	4013      	ands	r3, r2
 8008936:	d10f      	bne.n	8008958 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008938:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	0adb      	lsrs	r3, r3, #11
 800893e:	2207      	movs	r2, #7
 8008940:	4013      	ands	r3, r2
 8008942:	2201      	movs	r2, #1
 8008944:	409a      	lsls	r2, r3
 8008946:	0013      	movs	r3, r2
 8008948:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	4835      	ldr	r0, [pc, #212]	@ (8008a24 <HAL_RCC_GetSysClockFreq+0xfc>)
 800894e:	f7f7 fbf3 	bl	8000138 <__udivsi3>
 8008952:	0003      	movs	r3, r0
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	e05d      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008958:	4b31      	ldr	r3, [pc, #196]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2238      	movs	r2, #56	@ 0x38
 800895e:	4013      	ands	r3, r2
 8008960:	2b08      	cmp	r3, #8
 8008962:	d102      	bne.n	800896a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008964:	4b30      	ldr	r3, [pc, #192]	@ (8008a28 <HAL_RCC_GetSysClockFreq+0x100>)
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	e054      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800896a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	2238      	movs	r2, #56	@ 0x38
 8008970:	4013      	ands	r3, r2
 8008972:	2b10      	cmp	r3, #16
 8008974:	d138      	bne.n	80089e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008976:	4b2a      	ldr	r3, [pc, #168]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	2203      	movs	r2, #3
 800897c:	4013      	ands	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008980:	4b27      	ldr	r3, [pc, #156]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	091b      	lsrs	r3, r3, #4
 8008986:	2207      	movs	r2, #7
 8008988:	4013      	ands	r3, r2
 800898a:	3301      	adds	r3, #1
 800898c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d10d      	bne.n	80089b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	4824      	ldr	r0, [pc, #144]	@ (8008a28 <HAL_RCC_GetSysClockFreq+0x100>)
 8008998:	f7f7 fbce 	bl	8000138 <__udivsi3>
 800899c:	0003      	movs	r3, r0
 800899e:	0019      	movs	r1, r3
 80089a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	227f      	movs	r2, #127	@ 0x7f
 80089a8:	4013      	ands	r3, r2
 80089aa:	434b      	muls	r3, r1
 80089ac:	617b      	str	r3, [r7, #20]
        break;
 80089ae:	e00d      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	481c      	ldr	r0, [pc, #112]	@ (8008a24 <HAL_RCC_GetSysClockFreq+0xfc>)
 80089b4:	f7f7 fbc0 	bl	8000138 <__udivsi3>
 80089b8:	0003      	movs	r3, r0
 80089ba:	0019      	movs	r1, r3
 80089bc:	4b18      	ldr	r3, [pc, #96]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	0a1b      	lsrs	r3, r3, #8
 80089c2:	227f      	movs	r2, #127	@ 0x7f
 80089c4:	4013      	ands	r3, r2
 80089c6:	434b      	muls	r3, r1
 80089c8:	617b      	str	r3, [r7, #20]
        break;
 80089ca:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80089cc:	4b14      	ldr	r3, [pc, #80]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	0f5b      	lsrs	r3, r3, #29
 80089d2:	2207      	movs	r2, #7
 80089d4:	4013      	ands	r3, r2
 80089d6:	3301      	adds	r3, #1
 80089d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	6978      	ldr	r0, [r7, #20]
 80089de:	f7f7 fbab 	bl	8000138 <__udivsi3>
 80089e2:	0003      	movs	r3, r0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	e015      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80089e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2238      	movs	r2, #56	@ 0x38
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d103      	bne.n	80089fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80089f4:	2380      	movs	r3, #128	@ 0x80
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	613b      	str	r3, [r7, #16]
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80089fc:	4b08      	ldr	r3, [pc, #32]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	2238      	movs	r2, #56	@ 0x38
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b18      	cmp	r3, #24
 8008a06:	d103      	bne.n	8008a10 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008a08:	23fa      	movs	r3, #250	@ 0xfa
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	e001      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a14:	693b      	ldr	r3, [r7, #16]
}
 8008a16:	0018      	movs	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b006      	add	sp, #24
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	40021000 	.word	0x40021000
 8008a24:	00f42400 	.word	0x00f42400
 8008a28:	007a1200 	.word	0x007a1200

08008a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8008a32:	681b      	ldr	r3, [r3, #0]
}
 8008a34:	0018      	movs	r0, r3
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	20000010 	.word	0x20000010

08008a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a40:	b5b0      	push	{r4, r5, r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008a44:	f7ff fff2 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 8008a48:	0004      	movs	r4, r0
 8008a4a:	f7ff fb49 	bl	80080e0 <LL_RCC_GetAPB1Prescaler>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	0b1a      	lsrs	r2, r3, #12
 8008a52:	4b05      	ldr	r3, [pc, #20]	@ (8008a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a54:	0092      	lsls	r2, r2, #2
 8008a56:	58d3      	ldr	r3, [r2, r3]
 8008a58:	221f      	movs	r2, #31
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	40dc      	lsrs	r4, r3
 8008a5e:	0023      	movs	r3, r4
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bdb0      	pop	{r4, r5, r7, pc}
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	0800e448 	.word	0x0800e448

08008a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008a74:	2313      	movs	r3, #19
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a7c:	2312      	movs	r3, #18
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	029b      	lsls	r3, r3, #10
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d100      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008a90:	e0a3      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a92:	2011      	movs	r0, #17
 8008a94:	183b      	adds	r3, r7, r0
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a9a:	4b86      	ldr	r3, [pc, #536]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a9e:	2380      	movs	r3, #128	@ 0x80
 8008aa0:	055b      	lsls	r3, r3, #21
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d110      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aa6:	4b83      	ldr	r3, [pc, #524]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aaa:	4b82      	ldr	r3, [pc, #520]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008aac:	2180      	movs	r1, #128	@ 0x80
 8008aae:	0549      	lsls	r1, r1, #21
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	055b      	lsls	r3, r3, #21
 8008abc:	4013      	ands	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ac2:	183b      	adds	r3, r7, r0
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b7a      	ldr	r3, [pc, #488]	@ (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008ace:	2180      	movs	r1, #128	@ 0x80
 8008ad0:	0049      	lsls	r1, r1, #1
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ad6:	f7fc fd77 	bl	80055c8 <HAL_GetTick>
 8008ada:	0003      	movs	r3, r0
 8008adc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ade:	e00b      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ae0:	f7fc fd72 	bl	80055c8 <HAL_GetTick>
 8008ae4:	0002      	movs	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d904      	bls.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008aee:	2313      	movs	r3, #19
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	2203      	movs	r2, #3
 8008af4:	701a      	strb	r2, [r3, #0]
        break;
 8008af6:	e005      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008af8:	4b6f      	ldr	r3, [pc, #444]	@ (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	2380      	movs	r3, #128	@ 0x80
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	4013      	ands	r3, r2
 8008b02:	d0ed      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008b04:	2313      	movs	r3, #19
 8008b06:	18fb      	adds	r3, r7, r3
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d154      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b0e:	4b69      	ldr	r3, [pc, #420]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b12:	23c0      	movs	r3, #192	@ 0xc0
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4013      	ands	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d019      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d014      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b2a:	4b62      	ldr	r3, [pc, #392]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b2e:	4a63      	ldr	r2, [pc, #396]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b34:	4b5f      	ldr	r3, [pc, #380]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b38:	4b5e      	ldr	r3, [pc, #376]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b3a:	2180      	movs	r1, #128	@ 0x80
 8008b3c:	0249      	lsls	r1, r1, #9
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b42:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b46:	4b5b      	ldr	r3, [pc, #364]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b48:	495d      	ldr	r1, [pc, #372]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b4a:	400a      	ands	r2, r1
 8008b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b4e:	4b59      	ldr	r3, [pc, #356]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2201      	movs	r2, #1
 8008b58:	4013      	ands	r3, r2
 8008b5a:	d016      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5c:	f7fc fd34 	bl	80055c8 <HAL_GetTick>
 8008b60:	0003      	movs	r3, r0
 8008b62:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b64:	e00c      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b66:	f7fc fd2f 	bl	80055c8 <HAL_GetTick>
 8008b6a:	0002      	movs	r2, r0
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	4a54      	ldr	r2, [pc, #336]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d904      	bls.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008b76:	2313      	movs	r3, #19
 8008b78:	18fb      	adds	r3, r7, r3
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	701a      	strb	r2, [r3, #0]
            break;
 8008b7e:	e004      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b80:	4b4c      	ldr	r3, [pc, #304]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b84:	2202      	movs	r2, #2
 8008b86:	4013      	ands	r3, r2
 8008b88:	d0ed      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008b8a:	2313      	movs	r3, #19
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b94:	4b47      	ldr	r3, [pc, #284]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b98:	4a48      	ldr	r2, [pc, #288]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	0019      	movs	r1, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	4b44      	ldr	r3, [pc, #272]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ba8:	e00c      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008baa:	2312      	movs	r3, #18
 8008bac:	18fb      	adds	r3, r7, r3
 8008bae:	2213      	movs	r2, #19
 8008bb0:	18ba      	adds	r2, r7, r2
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e005      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb8:	2312      	movs	r3, #18
 8008bba:	18fb      	adds	r3, r7, r3
 8008bbc:	2213      	movs	r2, #19
 8008bbe:	18ba      	adds	r2, r7, r2
 8008bc0:	7812      	ldrb	r2, [r2, #0]
 8008bc2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bc4:	2311      	movs	r3, #17
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d105      	bne.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bce:	4b39      	ldr	r3, [pc, #228]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bd2:	4b38      	ldr	r3, [pc, #224]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008bd4:	493c      	ldr	r1, [pc, #240]	@ (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008bd6:	400a      	ands	r2, r1
 8008bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2201      	movs	r2, #1
 8008be0:	4013      	ands	r3, r2
 8008be2:	d009      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008be4:	4b33      	ldr	r3, [pc, #204]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be8:	2203      	movs	r2, #3
 8008bea:	4393      	bics	r3, r2
 8008bec:	0019      	movs	r1, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	4b30      	ldr	r3, [pc, #192]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	4013      	ands	r3, r2
 8008c00:	d009      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c02:	4b2c      	ldr	r3, [pc, #176]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c06:	220c      	movs	r2, #12
 8008c08:	4393      	bics	r3, r2
 8008c0a:	0019      	movs	r1, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	4b28      	ldr	r3, [pc, #160]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c12:	430a      	orrs	r2, r1
 8008c14:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c20:	4b24      	ldr	r3, [pc, #144]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c24:	4a29      	ldr	r2, [pc, #164]	@ (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	0019      	movs	r1, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	4b21      	ldr	r3, [pc, #132]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c30:	430a      	orrs	r2, r1
 8008c32:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	2380      	movs	r3, #128	@ 0x80
 8008c3a:	01db      	lsls	r3, r3, #7
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	d015      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c40:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	0899      	lsrs	r1, r3, #2
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	4b19      	ldr	r3, [pc, #100]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	2380      	movs	r3, #128	@ 0x80
 8008c58:	05db      	lsls	r3, r3, #23
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	4b14      	ldr	r3, [pc, #80]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c64:	2180      	movs	r1, #128	@ 0x80
 8008c66:	0249      	lsls	r1, r1, #9
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	2380      	movs	r3, #128	@ 0x80
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	4013      	ands	r3, r2
 8008c76:	d016      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008c78:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7c:	4a14      	ldr	r2, [pc, #80]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c7e:	4013      	ands	r3, r2
 8008c80:	0019      	movs	r1, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	2380      	movs	r3, #128	@ 0x80
 8008c92:	01db      	lsls	r3, r3, #7
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d106      	bne.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008c98:	4b06      	ldr	r3, [pc, #24]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	4b05      	ldr	r3, [pc, #20]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c9e:	2180      	movs	r1, #128	@ 0x80
 8008ca0:	0249      	lsls	r1, r1, #9
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008ca6:	2312      	movs	r3, #18
 8008ca8:	18fb      	adds	r3, r7, r3
 8008caa:	781b      	ldrb	r3, [r3, #0]
}
 8008cac:	0018      	movs	r0, r3
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	b006      	add	sp, #24
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	40007000 	.word	0x40007000
 8008cbc:	fffffcff 	.word	0xfffffcff
 8008cc0:	fffeffff 	.word	0xfffeffff
 8008cc4:	00001388 	.word	0x00001388
 8008cc8:	efffffff 	.word	0xefffffff
 8008ccc:	ffffcfff 	.word	0xffffcfff
 8008cd0:	ffff3fff 	.word	0xffff3fff

08008cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e0a8      	b.n	8008e38 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	2382      	movs	r3, #130	@ 0x82
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d009      	beq.n	8008d0e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	61da      	str	r2, [r3, #28]
 8008d00:	e005      	b.n	8008d0e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	225d      	movs	r2, #93	@ 0x5d
 8008d18:	5c9b      	ldrb	r3, [r3, r2]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	225c      	movs	r2, #92	@ 0x5c
 8008d24:	2100      	movs	r1, #0
 8008d26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7fc f8b0 	bl	8004e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	225d      	movs	r2, #93	@ 0x5d
 8008d34:	2102      	movs	r1, #2
 8008d36:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2140      	movs	r1, #64	@ 0x40
 8008d44:	438a      	bics	r2, r1
 8008d46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	23e0      	movs	r3, #224	@ 0xe0
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d902      	bls.n	8008d5a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e002      	b.n	8008d60 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d5a:	2380      	movs	r3, #128	@ 0x80
 8008d5c:	015b      	lsls	r3, r3, #5
 8008d5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	23f0      	movs	r3, #240	@ 0xf0
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d008      	beq.n	8008d7e <HAL_SPI_Init+0xaa>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	23e0      	movs	r3, #224	@ 0xe0
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d002      	beq.n	8008d7e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	2382      	movs	r3, #130	@ 0x82
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	401a      	ands	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6899      	ldr	r1, [r3, #8]
 8008d8c:	2384      	movs	r3, #132	@ 0x84
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	400b      	ands	r3, r1
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2102      	movs	r1, #2
 8008d9a:	400b      	ands	r3, r1
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	2101      	movs	r1, #1
 8008da4:	400b      	ands	r3, r1
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6999      	ldr	r1, [r3, #24]
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	400b      	ands	r3, r1
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	2138      	movs	r1, #56	@ 0x38
 8008dba:	400b      	ands	r3, r1
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	2180      	movs	r1, #128	@ 0x80
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	0011      	movs	r1, r2
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	019b      	lsls	r3, r3, #6
 8008dd2:	401a      	ands	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	2204      	movs	r2, #4
 8008de4:	401a      	ands	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dea:	2110      	movs	r1, #16
 8008dec:	400b      	ands	r3, r1
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df4:	2108      	movs	r1, #8
 8008df6:	400b      	ands	r3, r1
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68d9      	ldr	r1, [r3, #12]
 8008dfe:	23f0      	movs	r3, #240	@ 0xf0
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	400b      	ands	r3, r1
 8008e04:	431a      	orrs	r2, r3
 8008e06:	0011      	movs	r1, r2
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	2380      	movs	r3, #128	@ 0x80
 8008e0c:	015b      	lsls	r3, r3, #5
 8008e0e:	401a      	ands	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69da      	ldr	r2, [r3, #28]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4907      	ldr	r1, [pc, #28]	@ (8008e40 <HAL_SPI_Init+0x16c>)
 8008e24:	400a      	ands	r2, r1
 8008e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	225d      	movs	r2, #93	@ 0x5d
 8008e32:	2101      	movs	r1, #1
 8008e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	0018      	movs	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b004      	add	sp, #16
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	fffff7ff 	.word	0xfffff7ff

08008e44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b089      	sub	sp, #36	@ 0x24
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	1dbb      	adds	r3, r7, #6
 8008e52:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e54:	2117      	movs	r1, #23
 8008e56:	187b      	adds	r3, r7, r1
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	225d      	movs	r2, #93	@ 0x5d
 8008e60:	5c9b      	ldrb	r3, [r3, r2]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d003      	beq.n	8008e70 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8008e68:	187b      	adds	r3, r7, r1
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8008e6e:	e12b      	b.n	80090c8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	2382      	movs	r3, #130	@ 0x82
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d113      	bne.n	8008ea4 <HAL_SPI_Receive+0x60>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10f      	bne.n	8008ea4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	225d      	movs	r2, #93	@ 0x5d
 8008e88:	2104      	movs	r1, #4
 8008e8a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e8c:	1dbb      	adds	r3, r7, #6
 8008e8e:	881c      	ldrh	r4, [r3, #0]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	0023      	movs	r3, r4
 8008e9c:	f000 f924 	bl	80090e8 <HAL_SPI_TransmitReceive>
 8008ea0:	0003      	movs	r3, r0
 8008ea2:	e118      	b.n	80090d6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	225c      	movs	r2, #92	@ 0x5c
 8008ea8:	5c9b      	ldrb	r3, [r3, r2]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <HAL_SPI_Receive+0x6e>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e111      	b.n	80090d6 <HAL_SPI_Receive+0x292>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	225c      	movs	r2, #92	@ 0x5c
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008eba:	f7fc fb85 	bl	80055c8 <HAL_GetTick>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_SPI_Receive+0x8c>
 8008ec8:	1dbb      	adds	r3, r7, #6
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008ed0:	2317      	movs	r3, #23
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ed8:	e0f6      	b.n	80090c8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	225d      	movs	r2, #93	@ 0x5d
 8008ede:	2104      	movs	r1, #4
 8008ee0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1dba      	adds	r2, r7, #6
 8008ef2:	2144      	movs	r1, #68	@ 0x44
 8008ef4:	8812      	ldrh	r2, [r2, #0]
 8008ef6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	1dba      	adds	r2, r7, #6
 8008efc:	2146      	movs	r1, #70	@ 0x46
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	23e0      	movs	r3, #224	@ 0xe0
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d908      	bls.n	8008f3e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	496a      	ldr	r1, [pc, #424]	@ (80090e0 <HAL_SPI_Receive+0x29c>)
 8008f38:	400a      	ands	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	e008      	b.n	8008f50 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2180      	movs	r1, #128	@ 0x80
 8008f4a:	0149      	lsls	r1, r1, #5
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	2380      	movs	r3, #128	@ 0x80
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d10f      	bne.n	8008f7c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2140      	movs	r1, #64	@ 0x40
 8008f68:	438a      	bics	r2, r1
 8008f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	495b      	ldr	r1, [pc, #364]	@ (80090e4 <HAL_SPI_Receive+0x2a0>)
 8008f78:	400a      	ands	r2, r1
 8008f7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2240      	movs	r2, #64	@ 0x40
 8008f84:	4013      	ands	r3, r2
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d007      	beq.n	8008f9a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2140      	movs	r1, #64	@ 0x40
 8008f96:	430a      	orrs	r2, r1
 8008f98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	23e0      	movs	r3, #224	@ 0xe0
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d900      	bls.n	8008fa8 <HAL_SPI_Receive+0x164>
 8008fa6:	e071      	b.n	800908c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008fa8:	e035      	b.n	8009016 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d117      	bne.n	8008fe8 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc4:	7812      	ldrb	r2, [r2, #0]
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2246      	movs	r2, #70	@ 0x46
 8008fd8:	5a9b      	ldrh	r3, [r3, r2]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b299      	uxth	r1, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2246      	movs	r2, #70	@ 0x46
 8008fe4:	5299      	strh	r1, [r3, r2]
 8008fe6:	e016      	b.n	8009016 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe8:	f7fc faee 	bl	80055c8 <HAL_GetTick>
 8008fec:	0002      	movs	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d802      	bhi.n	8008ffe <HAL_SPI_Receive+0x1ba>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_Receive+0x1c0>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8009004:	2317      	movs	r3, #23
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	2203      	movs	r2, #3
 800900a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	225d      	movs	r2, #93	@ 0x5d
 8009010:	2101      	movs	r1, #1
 8009012:	5499      	strb	r1, [r3, r2]
          goto error;
 8009014:	e058      	b.n	80090c8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2246      	movs	r2, #70	@ 0x46
 800901a:	5a9b      	ldrh	r3, [r3, r2]
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1c3      	bne.n	8008faa <HAL_SPI_Receive+0x166>
 8009022:	e039      	b.n	8009098 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2201      	movs	r2, #1
 800902c:	4013      	ands	r3, r2
 800902e:	2b01      	cmp	r3, #1
 8009030:	d115      	bne.n	800905e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903c:	b292      	uxth	r2, r2
 800903e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009044:	1c9a      	adds	r2, r3, #2
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2246      	movs	r2, #70	@ 0x46
 800904e:	5a9b      	ldrh	r3, [r3, r2]
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b299      	uxth	r1, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2246      	movs	r2, #70	@ 0x46
 800905a:	5299      	strh	r1, [r3, r2]
 800905c:	e016      	b.n	800908c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800905e:	f7fc fab3 	bl	80055c8 <HAL_GetTick>
 8009062:	0002      	movs	r2, r0
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d802      	bhi.n	8009074 <HAL_SPI_Receive+0x230>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	d102      	bne.n	800907a <HAL_SPI_Receive+0x236>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d108      	bne.n	800908c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800907a:	2317      	movs	r3, #23
 800907c:	18fb      	adds	r3, r7, r3
 800907e:	2203      	movs	r2, #3
 8009080:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	225d      	movs	r2, #93	@ 0x5d
 8009086:	2101      	movs	r1, #1
 8009088:	5499      	strb	r1, [r3, r2]
          goto error;
 800908a:	e01d      	b.n	80090c8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2246      	movs	r2, #70	@ 0x46
 8009090:	5a9b      	ldrh	r3, [r3, r2]
 8009092:	b29b      	uxth	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1c5      	bne.n	8009024 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	0018      	movs	r0, r3
 80090a0:	f000 fb34 	bl	800970c <SPI_EndRxTransaction>
 80090a4:	1e03      	subs	r3, r0, #0
 80090a6:	d002      	beq.n	80090ae <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80090b6:	2317      	movs	r3, #23
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e003      	b.n	80090c8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	225d      	movs	r2, #93	@ 0x5d
 80090c4:	2101      	movs	r1, #1
 80090c6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	225c      	movs	r2, #92	@ 0x5c
 80090cc:	2100      	movs	r1, #0
 80090ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80090d0:	2317      	movs	r3, #23
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	781b      	ldrb	r3, [r3, #0]
}
 80090d6:	0018      	movs	r0, r3
 80090d8:	46bd      	mov	sp, r7
 80090da:	b007      	add	sp, #28
 80090dc:	bd90      	pop	{r4, r7, pc}
 80090de:	46c0      	nop			@ (mov r8, r8)
 80090e0:	ffffefff 	.word	0xffffefff
 80090e4:	ffffbfff 	.word	0xffffbfff

080090e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	001a      	movs	r2, r3
 80090f6:	1cbb      	adds	r3, r7, #2
 80090f8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090fa:	2301      	movs	r3, #1
 80090fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090fe:	2323      	movs	r3, #35	@ 0x23
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	225c      	movs	r2, #92	@ 0x5c
 800910a:	5c9b      	ldrb	r3, [r3, r2]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_SPI_TransmitReceive+0x2c>
 8009110:	2302      	movs	r3, #2
 8009112:	e1c4      	b.n	800949e <HAL_SPI_TransmitReceive+0x3b6>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	225c      	movs	r2, #92	@ 0x5c
 8009118:	2101      	movs	r1, #1
 800911a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800911c:	f7fc fa54 	bl	80055c8 <HAL_GetTick>
 8009120:	0003      	movs	r3, r0
 8009122:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009124:	201b      	movs	r0, #27
 8009126:	183b      	adds	r3, r7, r0
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	215d      	movs	r1, #93	@ 0x5d
 800912c:	5c52      	ldrb	r2, [r2, r1]
 800912e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009136:	2312      	movs	r3, #18
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	1cba      	adds	r2, r7, #2
 800913c:	8812      	ldrh	r2, [r2, #0]
 800913e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009140:	183b      	adds	r3, r7, r0
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d011      	beq.n	800916c <HAL_SPI_TransmitReceive+0x84>
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	2382      	movs	r3, #130	@ 0x82
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	429a      	cmp	r2, r3
 8009150:	d107      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x7a>
 800915a:	183b      	adds	r3, r7, r0
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b04      	cmp	r3, #4
 8009160:	d004      	beq.n	800916c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009162:	2323      	movs	r3, #35	@ 0x23
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	2202      	movs	r2, #2
 8009168:	701a      	strb	r2, [r3, #0]
    goto error;
 800916a:	e191      	b.n	8009490 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d006      	beq.n	8009180 <HAL_SPI_TransmitReceive+0x98>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_SPI_TransmitReceive+0x98>
 8009178:	1cbb      	adds	r3, r7, #2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009180:	2323      	movs	r3, #35	@ 0x23
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	2201      	movs	r2, #1
 8009186:	701a      	strb	r2, [r3, #0]
    goto error;
 8009188:	e182      	b.n	8009490 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	225d      	movs	r2, #93	@ 0x5d
 800918e:	5c9b      	ldrb	r3, [r3, r2]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b04      	cmp	r3, #4
 8009194:	d003      	beq.n	800919e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	225d      	movs	r2, #93	@ 0x5d
 800919a:	2105      	movs	r1, #5
 800919c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1cba      	adds	r2, r7, #2
 80091ae:	2146      	movs	r1, #70	@ 0x46
 80091b0:	8812      	ldrh	r2, [r2, #0]
 80091b2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	1cba      	adds	r2, r7, #2
 80091b8:	2144      	movs	r1, #68	@ 0x44
 80091ba:	8812      	ldrh	r2, [r2, #0]
 80091bc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	1cba      	adds	r2, r7, #2
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	1cba      	adds	r2, r7, #2
 80091d0:	8812      	ldrh	r2, [r2, #0]
 80091d2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	23e0      	movs	r3, #224	@ 0xe0
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d908      	bls.n	80091fe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	49ac      	ldr	r1, [pc, #688]	@ (80094a8 <HAL_SPI_TransmitReceive+0x3c0>)
 80091f8:	400a      	ands	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
 80091fc:	e008      	b.n	8009210 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2180      	movs	r1, #128	@ 0x80
 800920a:	0149      	lsls	r1, r1, #5
 800920c:	430a      	orrs	r2, r1
 800920e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2240      	movs	r2, #64	@ 0x40
 8009218:	4013      	ands	r3, r2
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d007      	beq.n	800922e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2140      	movs	r1, #64	@ 0x40
 800922a:	430a      	orrs	r2, r1
 800922c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	23e0      	movs	r3, #224	@ 0xe0
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	429a      	cmp	r2, r3
 8009238:	d800      	bhi.n	800923c <HAL_SPI_TransmitReceive+0x154>
 800923a:	e083      	b.n	8009344 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_SPI_TransmitReceive+0x168>
 8009244:	2312      	movs	r3, #18
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d000      	beq.n	8009250 <HAL_SPI_TransmitReceive+0x168>
 800924e:	e06d      	b.n	800932c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009254:	881a      	ldrh	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009260:	1c9a      	adds	r2, r3, #2
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009274:	e05a      	b.n	800932c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2202      	movs	r2, #2
 800927e:	4013      	ands	r3, r2
 8009280:	2b02      	cmp	r3, #2
 8009282:	d11b      	bne.n	80092bc <HAL_SPI_TransmitReceive+0x1d4>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d016      	beq.n	80092bc <HAL_SPI_TransmitReceive+0x1d4>
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	2b01      	cmp	r3, #1
 8009292:	d113      	bne.n	80092bc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009298:	881a      	ldrh	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a4:	1c9a      	adds	r2, r3, #2
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	3b01      	subs	r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2201      	movs	r2, #1
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d11c      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x21c>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2246      	movs	r2, #70	@ 0x46
 80092ce:	5a9b      	ldrh	r3, [r3, r2]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e0:	b292      	uxth	r2, r2
 80092e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	1c9a      	adds	r2, r3, #2
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2246      	movs	r2, #70	@ 0x46
 80092f2:	5a9b      	ldrh	r3, [r3, r2]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	3b01      	subs	r3, #1
 80092f8:	b299      	uxth	r1, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2246      	movs	r2, #70	@ 0x46
 80092fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009300:	2301      	movs	r3, #1
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009304:	f7fc f960 	bl	80055c8 <HAL_GetTick>
 8009308:	0002      	movs	r2, r0
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009310:	429a      	cmp	r2, r3
 8009312:	d80b      	bhi.n	800932c <HAL_SPI_TransmitReceive+0x244>
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	3301      	adds	r3, #1
 8009318:	d008      	beq.n	800932c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800931a:	2323      	movs	r3, #35	@ 0x23
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	2203      	movs	r2, #3
 8009320:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	225d      	movs	r2, #93	@ 0x5d
 8009326:	2101      	movs	r1, #1
 8009328:	5499      	strb	r1, [r3, r2]
        goto error;
 800932a:	e0b1      	b.n	8009490 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d19f      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x18e>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2246      	movs	r2, #70	@ 0x46
 800933a:	5a9b      	ldrh	r3, [r3, r2]
 800933c:	b29b      	uxth	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d199      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x18e>
 8009342:	e089      	b.n	8009458 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <HAL_SPI_TransmitReceive+0x270>
 800934c:	2312      	movs	r3, #18
 800934e:	18fb      	adds	r3, r7, r3
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d000      	beq.n	8009358 <HAL_SPI_TransmitReceive+0x270>
 8009356:	e074      	b.n	8009442 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	330c      	adds	r3, #12
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800937e:	e060      	b.n	8009442 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2202      	movs	r2, #2
 8009388:	4013      	ands	r3, r2
 800938a:	2b02      	cmp	r3, #2
 800938c:	d11c      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x2e0>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x2e0>
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	2b01      	cmp	r3, #1
 800939c:	d114      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2201      	movs	r2, #1
 80093d0:	4013      	ands	r3, r2
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d11e      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x32c>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2246      	movs	r2, #70	@ 0x46
 80093da:	5a9b      	ldrh	r3, [r3, r2]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d018      	beq.n	8009414 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	330c      	adds	r3, #12
 80093e8:	001a      	movs	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2246      	movs	r2, #70	@ 0x46
 8009402:	5a9b      	ldrh	r3, [r3, r2]
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b299      	uxth	r1, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2246      	movs	r2, #70	@ 0x46
 800940e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009410:	2301      	movs	r3, #1
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009414:	f7fc f8d8 	bl	80055c8 <HAL_GetTick>
 8009418:	0002      	movs	r2, r0
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009420:	429a      	cmp	r2, r3
 8009422:	d802      	bhi.n	800942a <HAL_SPI_TransmitReceive+0x342>
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	3301      	adds	r3, #1
 8009428:	d102      	bne.n	8009430 <HAL_SPI_TransmitReceive+0x348>
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	2b00      	cmp	r3, #0
 800942e:	d108      	bne.n	8009442 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009430:	2323      	movs	r3, #35	@ 0x23
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	2203      	movs	r2, #3
 8009436:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	225d      	movs	r2, #93	@ 0x5d
 800943c:	2101      	movs	r1, #1
 800943e:	5499      	strb	r1, [r3, r2]
        goto error;
 8009440:	e026      	b.n	8009490 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009446:	b29b      	uxth	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d199      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x298>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2246      	movs	r2, #70	@ 0x46
 8009450:	5a9b      	ldrh	r3, [r3, r2]
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d193      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0018      	movs	r0, r3
 8009460:	f000 f9b2 	bl	80097c8 <SPI_EndRxTxTransaction>
 8009464:	1e03      	subs	r3, r0, #0
 8009466:	d006      	beq.n	8009476 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009468:	2323      	movs	r3, #35	@ 0x23
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	2201      	movs	r2, #1
 800946e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2220      	movs	r2, #32
 8009474:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800947e:	2323      	movs	r3, #35	@ 0x23
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	2201      	movs	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e003      	b.n	8009490 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	225d      	movs	r2, #93	@ 0x5d
 800948c:	2101      	movs	r1, #1
 800948e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	225c      	movs	r2, #92	@ 0x5c
 8009494:	2100      	movs	r1, #0
 8009496:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009498:	2323      	movs	r3, #35	@ 0x23
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	781b      	ldrb	r3, [r3, #0]
}
 800949e:	0018      	movs	r0, r3
 80094a0:	46bd      	mov	sp, r7
 80094a2:	b00a      	add	sp, #40	@ 0x28
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	46c0      	nop			@ (mov r8, r8)
 80094a8:	ffffefff 	.word	0xffffefff

080094ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	603b      	str	r3, [r7, #0]
 80094b8:	1dfb      	adds	r3, r7, #7
 80094ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094bc:	f7fc f884 	bl	80055c8 <HAL_GetTick>
 80094c0:	0002      	movs	r2, r0
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	18d3      	adds	r3, r2, r3
 80094ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094cc:	f7fc f87c 	bl	80055c8 <HAL_GetTick>
 80094d0:	0003      	movs	r3, r0
 80094d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094d4:	4b3a      	ldr	r3, [pc, #232]	@ (80095c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	015b      	lsls	r3, r3, #5
 80094da:	0d1b      	lsrs	r3, r3, #20
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	4353      	muls	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094e2:	e058      	b.n	8009596 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	d055      	beq.n	8009596 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094ea:	f7fc f86d 	bl	80055c8 <HAL_GetTick>
 80094ee:	0002      	movs	r2, r0
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d902      	bls.n	8009500 <SPI_WaitFlagStateUntilTimeout+0x54>
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d142      	bne.n	8009586 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	21e0      	movs	r1, #224	@ 0xe0
 800950c:	438a      	bics	r2, r1
 800950e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	2382      	movs	r3, #130	@ 0x82
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	429a      	cmp	r2, r3
 800951a:	d113      	bne.n	8009544 <SPI_WaitFlagStateUntilTimeout+0x98>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	2380      	movs	r3, #128	@ 0x80
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	429a      	cmp	r2, r3
 8009526:	d005      	beq.n	8009534 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	2380      	movs	r3, #128	@ 0x80
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	429a      	cmp	r2, r3
 8009532:	d107      	bne.n	8009544 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2140      	movs	r1, #64	@ 0x40
 8009540:	438a      	bics	r2, r1
 8009542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009548:	2380      	movs	r3, #128	@ 0x80
 800954a:	019b      	lsls	r3, r3, #6
 800954c:	429a      	cmp	r2, r3
 800954e:	d110      	bne.n	8009572 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	491a      	ldr	r1, [pc, #104]	@ (80095c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800955c:	400a      	ands	r2, r1
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2180      	movs	r1, #128	@ 0x80
 800956c:	0189      	lsls	r1, r1, #6
 800956e:	430a      	orrs	r2, r1
 8009570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	225d      	movs	r2, #93	@ 0x5d
 8009576:	2101      	movs	r1, #1
 8009578:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	225c      	movs	r2, #92	@ 0x5c
 800957e:	2100      	movs	r1, #0
 8009580:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e017      	b.n	80095b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3b01      	subs	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	4013      	ands	r3, r2
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	425a      	negs	r2, r3
 80095a6:	4153      	adcs	r3, r2
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	001a      	movs	r2, r3
 80095ac:	1dfb      	adds	r3, r7, #7
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d197      	bne.n	80094e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	0018      	movs	r0, r3
 80095b8:	46bd      	mov	sp, r7
 80095ba:	b008      	add	sp, #32
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	46c0      	nop			@ (mov r8, r8)
 80095c0:	20000010 	.word	0x20000010
 80095c4:	ffffdfff 	.word	0xffffdfff

080095c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	@ 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095d6:	2317      	movs	r3, #23
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80095de:	f7fb fff3 	bl	80055c8 <HAL_GetTick>
 80095e2:	0002      	movs	r2, r0
 80095e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	18d3      	adds	r3, r2, r3
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80095ee:	f7fb ffeb 	bl	80055c8 <HAL_GetTick>
 80095f2:	0003      	movs	r3, r0
 80095f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	330c      	adds	r3, #12
 80095fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095fe:	4b41      	ldr	r3, [pc, #260]	@ (8009704 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	0013      	movs	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	189b      	adds	r3, r3, r2
 8009608:	00da      	lsls	r2, r3, #3
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	0d1b      	lsrs	r3, r3, #20
 800960e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009610:	4353      	muls	r3, r2
 8009612:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009614:	e068      	b.n	80096e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	23c0      	movs	r3, #192	@ 0xc0
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	429a      	cmp	r2, r3
 800961e:	d10a      	bne.n	8009636 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d107      	bne.n	8009636 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	2117      	movs	r1, #23
 800962e:	187b      	adds	r3, r7, r1
 8009630:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009632:	187b      	adds	r3, r7, r1
 8009634:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	d055      	beq.n	80096e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800963c:	f7fb ffc4 	bl	80055c8 <HAL_GetTick>
 8009640:	0002      	movs	r2, r0
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009648:	429a      	cmp	r2, r3
 800964a:	d902      	bls.n	8009652 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d142      	bne.n	80096d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	21e0      	movs	r1, #224	@ 0xe0
 800965e:	438a      	bics	r2, r1
 8009660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	2382      	movs	r3, #130	@ 0x82
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	429a      	cmp	r2, r3
 800966c:	d113      	bne.n	8009696 <SPI_WaitFifoStateUntilTimeout+0xce>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	2380      	movs	r3, #128	@ 0x80
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	429a      	cmp	r2, r3
 8009678:	d005      	beq.n	8009686 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	2380      	movs	r3, #128	@ 0x80
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	429a      	cmp	r2, r3
 8009684:	d107      	bne.n	8009696 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2140      	movs	r1, #64	@ 0x40
 8009692:	438a      	bics	r2, r1
 8009694:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800969a:	2380      	movs	r3, #128	@ 0x80
 800969c:	019b      	lsls	r3, r3, #6
 800969e:	429a      	cmp	r2, r3
 80096a0:	d110      	bne.n	80096c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4916      	ldr	r1, [pc, #88]	@ (8009708 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80096ae:	400a      	ands	r2, r1
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2180      	movs	r1, #128	@ 0x80
 80096be:	0189      	lsls	r1, r1, #6
 80096c0:	430a      	orrs	r2, r1
 80096c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	225d      	movs	r2, #93	@ 0x5d
 80096c8:	2101      	movs	r1, #1
 80096ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	225c      	movs	r2, #92	@ 0x5c
 80096d0:	2100      	movs	r1, #0
 80096d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e010      	b.n	80096fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	4013      	ands	r3, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d18e      	bne.n	8009616 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	0018      	movs	r0, r3
 80096fc:	46bd      	mov	sp, r7
 80096fe:	b00a      	add	sp, #40	@ 0x28
 8009700:	bd80      	pop	{r7, pc}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	20000010 	.word	0x20000010
 8009708:	ffffdfff 	.word	0xffffdfff

0800970c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af02      	add	r7, sp, #8
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	2382      	movs	r3, #130	@ 0x82
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	429a      	cmp	r2, r3
 8009722:	d113      	bne.n	800974c <SPI_EndRxTransaction+0x40>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	2380      	movs	r3, #128	@ 0x80
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	429a      	cmp	r2, r3
 800972e:	d005      	beq.n	800973c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	2380      	movs	r3, #128	@ 0x80
 8009736:	00db      	lsls	r3, r3, #3
 8009738:	429a      	cmp	r2, r3
 800973a:	d107      	bne.n	800974c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2140      	movs	r1, #64	@ 0x40
 8009748:	438a      	bics	r2, r1
 800974a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	0013      	movs	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	2180      	movs	r1, #128	@ 0x80
 800975a:	f7ff fea7 	bl	80094ac <SPI_WaitFlagStateUntilTimeout>
 800975e:	1e03      	subs	r3, r0, #0
 8009760:	d007      	beq.n	8009772 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	2220      	movs	r2, #32
 8009768:	431a      	orrs	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e026      	b.n	80097c0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	2382      	movs	r3, #130	@ 0x82
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	429a      	cmp	r2, r3
 800977c:	d11f      	bne.n	80097be <SPI_EndRxTransaction+0xb2>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	2380      	movs	r3, #128	@ 0x80
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	429a      	cmp	r2, r3
 8009788:	d005      	beq.n	8009796 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	2380      	movs	r3, #128	@ 0x80
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	429a      	cmp	r2, r3
 8009794:	d113      	bne.n	80097be <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	23c0      	movs	r3, #192	@ 0xc0
 800979a:	00d9      	lsls	r1, r3, #3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	0013      	movs	r3, r2
 80097a4:	2200      	movs	r2, #0
 80097a6:	f7ff ff0f 	bl	80095c8 <SPI_WaitFifoStateUntilTimeout>
 80097aa:	1e03      	subs	r3, r0, #0
 80097ac:	d007      	beq.n	80097be <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b2:	2220      	movs	r2, #32
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e000      	b.n	80097c0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	0018      	movs	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b004      	add	sp, #16
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	23c0      	movs	r3, #192	@ 0xc0
 80097d8:	0159      	lsls	r1, r3, #5
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	0013      	movs	r3, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	f7ff fef0 	bl	80095c8 <SPI_WaitFifoStateUntilTimeout>
 80097e8:	1e03      	subs	r3, r0, #0
 80097ea:	d007      	beq.n	80097fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097f0:	2220      	movs	r2, #32
 80097f2:	431a      	orrs	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e027      	b.n	800984c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	0013      	movs	r3, r2
 8009806:	2200      	movs	r2, #0
 8009808:	2180      	movs	r1, #128	@ 0x80
 800980a:	f7ff fe4f 	bl	80094ac <SPI_WaitFlagStateUntilTimeout>
 800980e:	1e03      	subs	r3, r0, #0
 8009810:	d007      	beq.n	8009822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009816:	2220      	movs	r2, #32
 8009818:	431a      	orrs	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e014      	b.n	800984c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	23c0      	movs	r3, #192	@ 0xc0
 8009826:	00d9      	lsls	r1, r3, #3
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	0013      	movs	r3, r2
 8009830:	2200      	movs	r2, #0
 8009832:	f7ff fec9 	bl	80095c8 <SPI_WaitFifoStateUntilTimeout>
 8009836:	1e03      	subs	r3, r0, #0
 8009838:	d007      	beq.n	800984a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800983e:	2220      	movs	r2, #32
 8009840:	431a      	orrs	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e000      	b.n	800984c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	0018      	movs	r0, r3
 800984e:	46bd      	mov	sp, r7
 8009850:	b004      	add	sp, #16
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e04a      	b.n	80098fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	223d      	movs	r2, #61	@ 0x3d
 800986a:	5c9b      	ldrb	r3, [r3, r2]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	223c      	movs	r2, #60	@ 0x3c
 8009876:	2100      	movs	r1, #0
 8009878:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	0018      	movs	r0, r3
 800987e:	f7fb fb69 	bl	8004f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	223d      	movs	r2, #61	@ 0x3d
 8009886:	2102      	movs	r1, #2
 8009888:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3304      	adds	r3, #4
 8009892:	0019      	movs	r1, r3
 8009894:	0010      	movs	r0, r2
 8009896:	f000 f9b3 	bl	8009c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2248      	movs	r2, #72	@ 0x48
 800989e:	2101      	movs	r1, #1
 80098a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	223e      	movs	r2, #62	@ 0x3e
 80098a6:	2101      	movs	r1, #1
 80098a8:	5499      	strb	r1, [r3, r2]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	223f      	movs	r2, #63	@ 0x3f
 80098ae:	2101      	movs	r1, #1
 80098b0:	5499      	strb	r1, [r3, r2]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2240      	movs	r2, #64	@ 0x40
 80098b6:	2101      	movs	r1, #1
 80098b8:	5499      	strb	r1, [r3, r2]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2241      	movs	r2, #65	@ 0x41
 80098be:	2101      	movs	r1, #1
 80098c0:	5499      	strb	r1, [r3, r2]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2242      	movs	r2, #66	@ 0x42
 80098c6:	2101      	movs	r1, #1
 80098c8:	5499      	strb	r1, [r3, r2]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2243      	movs	r2, #67	@ 0x43
 80098ce:	2101      	movs	r1, #1
 80098d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2244      	movs	r2, #68	@ 0x44
 80098d6:	2101      	movs	r1, #1
 80098d8:	5499      	strb	r1, [r3, r2]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2245      	movs	r2, #69	@ 0x45
 80098de:	2101      	movs	r1, #1
 80098e0:	5499      	strb	r1, [r3, r2]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2246      	movs	r2, #70	@ 0x46
 80098e6:	2101      	movs	r1, #1
 80098e8:	5499      	strb	r1, [r3, r2]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2247      	movs	r2, #71	@ 0x47
 80098ee:	2101      	movs	r1, #1
 80098f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	223d      	movs	r2, #61	@ 0x3d
 80098f6:	2101      	movs	r1, #1
 80098f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	0018      	movs	r0, r3
 80098fe:	46bd      	mov	sp, r7
 8009900:	b002      	add	sp, #8
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	223d      	movs	r2, #61	@ 0x3d
 8009910:	5c9b      	ldrb	r3, [r3, r2]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b01      	cmp	r3, #1
 8009916:	d001      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e03c      	b.n	8009996 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	223d      	movs	r2, #61	@ 0x3d
 8009920:	2102      	movs	r1, #2
 8009922:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2101      	movs	r1, #1
 8009930:	430a      	orrs	r2, r1
 8009932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a19      	ldr	r2, [pc, #100]	@ (80099a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d009      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x4e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a18      	ldr	r2, [pc, #96]	@ (80099a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d004      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x4e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a16      	ldr	r2, [pc, #88]	@ (80099a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d116      	bne.n	8009980 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	4a14      	ldr	r2, [pc, #80]	@ (80099ac <HAL_TIM_Base_Start_IT+0xa8>)
 800995a:	4013      	ands	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b06      	cmp	r3, #6
 8009962:	d016      	beq.n	8009992 <HAL_TIM_Base_Start_IT+0x8e>
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	025b      	lsls	r3, r3, #9
 800996a:	429a      	cmp	r2, r3
 800996c:	d011      	beq.n	8009992 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2101      	movs	r1, #1
 800997a:	430a      	orrs	r2, r1
 800997c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	e008      	b.n	8009992 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2101      	movs	r1, #1
 800998c:	430a      	orrs	r2, r1
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e000      	b.n	8009994 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009992:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	0018      	movs	r0, r3
 8009998:	46bd      	mov	sp, r7
 800999a:	b004      	add	sp, #16
 800999c:	bd80      	pop	{r7, pc}
 800999e:	46c0      	nop			@ (mov r8, r8)
 80099a0:	40012c00 	.word	0x40012c00
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40014000 	.word	0x40014000
 80099ac:	00010007 	.word	0x00010007

080099b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2202      	movs	r2, #2
 80099cc:	4013      	ands	r3, r2
 80099ce:	d021      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2202      	movs	r2, #2
 80099d4:	4013      	ands	r3, r2
 80099d6:	d01d      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2203      	movs	r2, #3
 80099de:	4252      	negs	r2, r2
 80099e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	2203      	movs	r2, #3
 80099f0:	4013      	ands	r3, r2
 80099f2:	d004      	beq.n	80099fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	0018      	movs	r0, r3
 80099f8:	f000 f8ea 	bl	8009bd0 <HAL_TIM_IC_CaptureCallback>
 80099fc:	e007      	b.n	8009a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	0018      	movs	r0, r3
 8009a02:	f000 f8dd 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f000 f8e9 	bl	8009be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2204      	movs	r2, #4
 8009a18:	4013      	ands	r3, r2
 8009a1a:	d022      	beq.n	8009a62 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	4013      	ands	r3, r2
 8009a22:	d01e      	beq.n	8009a62 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2205      	movs	r2, #5
 8009a2a:	4252      	negs	r2, r2
 8009a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2202      	movs	r2, #2
 8009a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699a      	ldr	r2, [r3, #24]
 8009a3a:	23c0      	movs	r3, #192	@ 0xc0
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d004      	beq.n	8009a4c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 f8c3 	bl	8009bd0 <HAL_TIM_IC_CaptureCallback>
 8009a4a:	e007      	b.n	8009a5c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f000 f8b6 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	0018      	movs	r0, r3
 8009a58:	f000 f8c2 	bl	8009be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2208      	movs	r2, #8
 8009a66:	4013      	ands	r3, r2
 8009a68:	d021      	beq.n	8009aae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	4013      	ands	r3, r2
 8009a70:	d01d      	beq.n	8009aae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2209      	movs	r2, #9
 8009a78:	4252      	negs	r2, r2
 8009a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2204      	movs	r2, #4
 8009a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0018      	movs	r0, r3
 8009a92:	f000 f89d 	bl	8009bd0 <HAL_TIM_IC_CaptureCallback>
 8009a96:	e007      	b.n	8009aa8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f000 f890 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f000 f89c 	bl	8009be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2210      	movs	r2, #16
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	d022      	beq.n	8009afc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	4013      	ands	r3, r2
 8009abc:	d01e      	beq.n	8009afc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2211      	movs	r2, #17
 8009ac4:	4252      	negs	r2, r2
 8009ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2208      	movs	r2, #8
 8009acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	23c0      	movs	r3, #192	@ 0xc0
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4013      	ands	r3, r2
 8009ada:	d004      	beq.n	8009ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f000 f876 	bl	8009bd0 <HAL_TIM_IC_CaptureCallback>
 8009ae4:	e007      	b.n	8009af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f000 f869 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	0018      	movs	r0, r3
 8009af2:	f000 f875 	bl	8009be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2201      	movs	r2, #1
 8009b00:	4013      	ands	r3, r2
 8009b02:	d00c      	beq.n	8009b1e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	4013      	ands	r3, r2
 8009b0a:	d008      	beq.n	8009b1e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2202      	movs	r2, #2
 8009b12:	4252      	negs	r2, r2
 8009b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f7f9 fe23 	bl	8003764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2280      	movs	r2, #128	@ 0x80
 8009b22:	4013      	ands	r3, r2
 8009b24:	d104      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	2380      	movs	r3, #128	@ 0x80
 8009b2a:	019b      	lsls	r3, r3, #6
 8009b2c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b2e:	d00b      	beq.n	8009b48 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2280      	movs	r2, #128	@ 0x80
 8009b34:	4013      	ands	r3, r2
 8009b36:	d007      	beq.n	8009b48 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb8 <HAL_TIM_IRQHandler+0x208>)
 8009b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	0018      	movs	r0, r3
 8009b44:	f000 f8e8 	bl	8009d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	2380      	movs	r3, #128	@ 0x80
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4013      	ands	r3, r2
 8009b50:	d00b      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2280      	movs	r2, #128	@ 0x80
 8009b56:	4013      	ands	r3, r2
 8009b58:	d007      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a17      	ldr	r2, [pc, #92]	@ (8009bbc <HAL_TIM_IRQHandler+0x20c>)
 8009b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	0018      	movs	r0, r3
 8009b66:	f000 f8df 	bl	8009d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2240      	movs	r2, #64	@ 0x40
 8009b6e:	4013      	ands	r3, r2
 8009b70:	d00c      	beq.n	8009b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2240      	movs	r2, #64	@ 0x40
 8009b76:	4013      	ands	r3, r2
 8009b78:	d008      	beq.n	8009b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2241      	movs	r2, #65	@ 0x41
 8009b80:	4252      	negs	r2, r2
 8009b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	0018      	movs	r0, r3
 8009b88:	f000 f832 	bl	8009bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	4013      	ands	r3, r2
 8009b92:	d00c      	beq.n	8009bae <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2220      	movs	r2, #32
 8009b98:	4013      	ands	r3, r2
 8009b9a:	d008      	beq.n	8009bae <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2221      	movs	r2, #33	@ 0x21
 8009ba2:	4252      	negs	r2, r2
 8009ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 f8ad 	bl	8009d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b004      	add	sp, #16
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			@ (mov r8, r8)
 8009bb8:	ffffdf7f 	.word	0xffffdf7f
 8009bbc:	fffffeff 	.word	0xfffffeff

08009bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bc8:	46c0      	nop			@ (mov r8, r8)
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bd8:	46c0      	nop			@ (mov r8, r8)
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009be8:	46c0      	nop			@ (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b002      	add	sp, #8
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bf8:	46c0      	nop			@ (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a36      	ldr	r2, [pc, #216]	@ (8009cec <TIM_Base_SetConfig+0xec>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d003      	beq.n	8009c20 <TIM_Base_SetConfig+0x20>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a35      	ldr	r2, [pc, #212]	@ (8009cf0 <TIM_Base_SetConfig+0xf0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d108      	bne.n	8009c32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2270      	movs	r2, #112	@ 0x70
 8009c24:	4393      	bics	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a2d      	ldr	r2, [pc, #180]	@ (8009cec <TIM_Base_SetConfig+0xec>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d013      	beq.n	8009c62 <TIM_Base_SetConfig+0x62>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8009cf0 <TIM_Base_SetConfig+0xf0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00f      	beq.n	8009c62 <TIM_Base_SetConfig+0x62>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a2b      	ldr	r2, [pc, #172]	@ (8009cf4 <TIM_Base_SetConfig+0xf4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00b      	beq.n	8009c62 <TIM_Base_SetConfig+0x62>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009cf8 <TIM_Base_SetConfig+0xf8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d007      	beq.n	8009c62 <TIM_Base_SetConfig+0x62>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a29      	ldr	r2, [pc, #164]	@ (8009cfc <TIM_Base_SetConfig+0xfc>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d003      	beq.n	8009c62 <TIM_Base_SetConfig+0x62>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a28      	ldr	r2, [pc, #160]	@ (8009d00 <TIM_Base_SetConfig+0x100>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d108      	bne.n	8009c74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a27      	ldr	r2, [pc, #156]	@ (8009d04 <TIM_Base_SetConfig+0x104>)
 8009c66:	4013      	ands	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2280      	movs	r2, #128	@ 0x80
 8009c78:	4393      	bics	r3, r2
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	689a      	ldr	r2, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a13      	ldr	r2, [pc, #76]	@ (8009cec <TIM_Base_SetConfig+0xec>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00b      	beq.n	8009cba <TIM_Base_SetConfig+0xba>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a14      	ldr	r2, [pc, #80]	@ (8009cf8 <TIM_Base_SetConfig+0xf8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d007      	beq.n	8009cba <TIM_Base_SetConfig+0xba>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a13      	ldr	r2, [pc, #76]	@ (8009cfc <TIM_Base_SetConfig+0xfc>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_Base_SetConfig+0xba>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a12      	ldr	r2, [pc, #72]	@ (8009d00 <TIM_Base_SetConfig+0x100>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d103      	bne.n	8009cc2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	691a      	ldr	r2, [r3, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	4013      	ands	r3, r2
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d106      	bne.n	8009ce2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	4393      	bics	r3, r2
 8009cdc:	001a      	movs	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	611a      	str	r2, [r3, #16]
  }
}
 8009ce2:	46c0      	nop			@ (mov r8, r8)
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	40012c00 	.word	0x40012c00
 8009cf0:	40000400 	.word	0x40000400
 8009cf4:	40002000 	.word	0x40002000
 8009cf8:	40014000 	.word	0x40014000
 8009cfc:	40014400 	.word	0x40014400
 8009d00:	40014800 	.word	0x40014800
 8009d04:	fffffcff 	.word	0xfffffcff

08009d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d10:	46c0      	nop			@ (mov r8, r8)
 8009d12:	46bd      	mov	sp, r7
 8009d14:	b002      	add	sp, #8
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d20:	46c0      	nop			@ (mov r8, r8)
 8009d22:	46bd      	mov	sp, r7
 8009d24:	b002      	add	sp, #8
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d30:	46c0      	nop			@ (mov r8, r8)
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b002      	add	sp, #8
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e046      	b.n	8009dd8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2288      	movs	r2, #136	@ 0x88
 8009d4e:	589b      	ldr	r3, [r3, r2]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d107      	bne.n	8009d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2284      	movs	r2, #132	@ 0x84
 8009d58:	2100      	movs	r1, #0
 8009d5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7fb f920 	bl	8004fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2288      	movs	r2, #136	@ 0x88
 8009d68:	2124      	movs	r1, #36	@ 0x24
 8009d6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2101      	movs	r1, #1
 8009d78:	438a      	bics	r2, r1
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	0018      	movs	r0, r3
 8009d88:	f000 fe0c 	bl	800a9a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 fc64 	bl	800a65c <UART_SetConfig>
 8009d94:	0003      	movs	r3, r0
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e01c      	b.n	8009dd8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	490d      	ldr	r1, [pc, #52]	@ (8009de0 <HAL_UART_Init+0xa8>)
 8009daa:	400a      	ands	r2, r1
 8009dac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	212a      	movs	r1, #42	@ 0x2a
 8009dba:	438a      	bics	r2, r1
 8009dbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2101      	movs	r1, #1
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f000 fe9b 	bl	800ab0c <UART_CheckIdleState>
 8009dd6:	0003      	movs	r3, r0
}
 8009dd8:	0018      	movs	r0, r3
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b002      	add	sp, #8
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	ffffb7ff 	.word	0xffffb7ff

08009de4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	1dbb      	adds	r3, r7, #6
 8009df0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2288      	movs	r2, #136	@ 0x88
 8009df6:	589b      	ldr	r3, [r3, r2]
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d000      	beq.n	8009dfe <HAL_UART_Transmit_DMA+0x1a>
 8009dfc:	e079      	b.n	8009ef2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_UART_Transmit_DMA+0x28>
 8009e04:	1dbb      	adds	r3, r7, #6
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e071      	b.n	8009ef4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	2380      	movs	r3, #128	@ 0x80
 8009e16:	015b      	lsls	r3, r3, #5
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d109      	bne.n	8009e30 <HAL_UART_Transmit_DMA+0x4c>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d105      	bne.n	8009e30 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2201      	movs	r2, #1
 8009e28:	4013      	ands	r3, r2
 8009e2a:	d001      	beq.n	8009e30 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e061      	b.n	8009ef4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1dba      	adds	r2, r7, #6
 8009e3a:	2154      	movs	r1, #84	@ 0x54
 8009e3c:	8812      	ldrh	r2, [r2, #0]
 8009e3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	1dba      	adds	r2, r7, #6
 8009e44:	2156      	movs	r1, #86	@ 0x56
 8009e46:	8812      	ldrh	r2, [r2, #0]
 8009e48:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2290      	movs	r2, #144	@ 0x90
 8009e4e:	2100      	movs	r1, #0
 8009e50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2288      	movs	r2, #136	@ 0x88
 8009e56:	2121      	movs	r1, #33	@ 0x21
 8009e58:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d028      	beq.n	8009eb4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e66:	4a25      	ldr	r2, [pc, #148]	@ (8009efc <HAL_UART_Transmit_DMA+0x118>)
 8009e68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e6e:	4a24      	ldr	r2, [pc, #144]	@ (8009f00 <HAL_UART_Transmit_DMA+0x11c>)
 8009e70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e76:	4a23      	ldr	r2, [pc, #140]	@ (8009f04 <HAL_UART_Transmit_DMA+0x120>)
 8009e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e7e:	2200      	movs	r2, #0
 8009e80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8a:	0019      	movs	r1, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3328      	adds	r3, #40	@ 0x28
 8009e92:	001a      	movs	r2, r3
 8009e94:	1dbb      	adds	r3, r7, #6
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	f7fc fb10 	bl	80064bc <HAL_DMA_Start_IT>
 8009e9c:	1e03      	subs	r3, r0, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2290      	movs	r2, #144	@ 0x90
 8009ea4:	2110      	movs	r1, #16
 8009ea6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2288      	movs	r2, #136	@ 0x88
 8009eac:	2120      	movs	r1, #32
 8009eae:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e01f      	b.n	8009ef4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2240      	movs	r2, #64	@ 0x40
 8009eba:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ec2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f383 8810 	msr	PRIMASK, r3
}
 8009ed0:	46c0      	nop			@ (mov r8, r8)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2180      	movs	r1, #128	@ 0x80
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	609a      	str	r2, [r3, #8]
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f383 8810 	msr	PRIMASK, r3
}
 8009eec:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e000      	b.n	8009ef4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009ef2:	2302      	movs	r3, #2
  }
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b008      	add	sp, #32
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	0800afd9 	.word	0x0800afd9
 8009f00:	0800b071 	.word	0x0800b071
 8009f04:	0800b203 	.word	0x0800b203

08009f08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	1dbb      	adds	r3, r7, #6
 8009f14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	228c      	movs	r2, #140	@ 0x8c
 8009f1a:	589b      	ldr	r3, [r3, r2]
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d145      	bne.n	8009fac <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <HAL_UART_Receive_DMA+0x26>
 8009f26:	1dbb      	adds	r3, r7, #6
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e03d      	b.n	8009fae <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	2380      	movs	r3, #128	@ 0x80
 8009f38:	015b      	lsls	r3, r3, #5
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d109      	bne.n	8009f52 <HAL_UART_Receive_DMA+0x4a>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d105      	bne.n	8009f52 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	d001      	beq.n	8009f52 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e02d      	b.n	8009fae <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	2380      	movs	r3, #128	@ 0x80
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	4013      	ands	r3, r2
 8009f64:	d019      	beq.n	8009f9a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f66:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8009f6c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	2301      	movs	r3, #1
 8009f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f383 8810 	msr	PRIMASK, r3
}
 8009f7a:	46c0      	nop			@ (mov r8, r8)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2180      	movs	r1, #128	@ 0x80
 8009f88:	04c9      	lsls	r1, r1, #19
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	f383 8810 	msr	PRIMASK, r3
}
 8009f98:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f9a:	1dbb      	adds	r3, r7, #6
 8009f9c:	881a      	ldrh	r2, [r3, #0]
 8009f9e:	68b9      	ldr	r1, [r7, #8]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f000 fecc 	bl	800ad40 <UART_Start_Receive_DMA>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	e000      	b.n	8009fae <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8009fac:	2302      	movs	r3, #2
  }
}
 8009fae:	0018      	movs	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b008      	add	sp, #32
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fb8:	b5b0      	push	{r4, r5, r7, lr}
 8009fba:	b0aa      	sub	sp, #168	@ 0xa8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	22a4      	movs	r2, #164	@ 0xa4
 8009fc8:	18b9      	adds	r1, r7, r2
 8009fca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	20a0      	movs	r0, #160	@ 0xa0
 8009fd4:	1839      	adds	r1, r7, r0
 8009fd6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	249c      	movs	r4, #156	@ 0x9c
 8009fe0:	1939      	adds	r1, r7, r4
 8009fe2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fe4:	0011      	movs	r1, r2
 8009fe6:	18bb      	adds	r3, r7, r2
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4aa2      	ldr	r2, [pc, #648]	@ (800a274 <HAL_UART_IRQHandler+0x2bc>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	2298      	movs	r2, #152	@ 0x98
 8009ff0:	18bd      	adds	r5, r7, r2
 8009ff2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8009ff4:	18bb      	adds	r3, r7, r2
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d11a      	bne.n	800a032 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ffc:	187b      	adds	r3, r7, r1
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2220      	movs	r2, #32
 800a002:	4013      	ands	r3, r2
 800a004:	d015      	beq.n	800a032 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a006:	183b      	adds	r3, r7, r0
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2220      	movs	r2, #32
 800a00c:	4013      	ands	r3, r2
 800a00e:	d105      	bne.n	800a01c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a010:	193b      	adds	r3, r7, r4
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	2380      	movs	r3, #128	@ 0x80
 800a016:	055b      	lsls	r3, r3, #21
 800a018:	4013      	ands	r3, r2
 800a01a:	d00a      	beq.n	800a032 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a020:	2b00      	cmp	r3, #0
 800a022:	d100      	bne.n	800a026 <HAL_UART_IRQHandler+0x6e>
 800a024:	e2dc      	b.n	800a5e0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	0010      	movs	r0, r2
 800a02e:	4798      	blx	r3
      }
      return;
 800a030:	e2d6      	b.n	800a5e0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a032:	2398      	movs	r3, #152	@ 0x98
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d100      	bne.n	800a03e <HAL_UART_IRQHandler+0x86>
 800a03c:	e122      	b.n	800a284 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a03e:	239c      	movs	r3, #156	@ 0x9c
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a8c      	ldr	r2, [pc, #560]	@ (800a278 <HAL_UART_IRQHandler+0x2c0>)
 800a046:	4013      	ands	r3, r2
 800a048:	d106      	bne.n	800a058 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a04a:	23a0      	movs	r3, #160	@ 0xa0
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a8a      	ldr	r2, [pc, #552]	@ (800a27c <HAL_UART_IRQHandler+0x2c4>)
 800a052:	4013      	ands	r3, r2
 800a054:	d100      	bne.n	800a058 <HAL_UART_IRQHandler+0xa0>
 800a056:	e115      	b.n	800a284 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a058:	23a4      	movs	r3, #164	@ 0xa4
 800a05a:	18fb      	adds	r3, r7, r3
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2201      	movs	r2, #1
 800a060:	4013      	ands	r3, r2
 800a062:	d012      	beq.n	800a08a <HAL_UART_IRQHandler+0xd2>
 800a064:	23a0      	movs	r3, #160	@ 0xa0
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	2380      	movs	r3, #128	@ 0x80
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4013      	ands	r3, r2
 800a070:	d00b      	beq.n	800a08a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2201      	movs	r2, #1
 800a078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2290      	movs	r2, #144	@ 0x90
 800a07e:	589b      	ldr	r3, [r3, r2]
 800a080:	2201      	movs	r2, #1
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2190      	movs	r1, #144	@ 0x90
 800a088:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a08a:	23a4      	movs	r3, #164	@ 0xa4
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2202      	movs	r2, #2
 800a092:	4013      	ands	r3, r2
 800a094:	d011      	beq.n	800a0ba <HAL_UART_IRQHandler+0x102>
 800a096:	239c      	movs	r3, #156	@ 0x9c
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2201      	movs	r2, #1
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d00b      	beq.n	800a0ba <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2290      	movs	r2, #144	@ 0x90
 800a0ae:	589b      	ldr	r3, [r3, r2]
 800a0b0:	2204      	movs	r2, #4
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2190      	movs	r1, #144	@ 0x90
 800a0b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ba:	23a4      	movs	r3, #164	@ 0xa4
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	d011      	beq.n	800a0ea <HAL_UART_IRQHandler+0x132>
 800a0c6:	239c      	movs	r3, #156	@ 0x9c
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	d00b      	beq.n	800a0ea <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2290      	movs	r2, #144	@ 0x90
 800a0de:	589b      	ldr	r3, [r3, r2]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2190      	movs	r1, #144	@ 0x90
 800a0e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0ea:	23a4      	movs	r3, #164	@ 0xa4
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	d017      	beq.n	800a126 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0f6:	23a0      	movs	r3, #160	@ 0xa0
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	4013      	ands	r3, r2
 800a100:	d105      	bne.n	800a10e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a102:	239c      	movs	r3, #156	@ 0x9c
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a5b      	ldr	r2, [pc, #364]	@ (800a278 <HAL_UART_IRQHandler+0x2c0>)
 800a10a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a10c:	d00b      	beq.n	800a126 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2208      	movs	r2, #8
 800a114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2290      	movs	r2, #144	@ 0x90
 800a11a:	589b      	ldr	r3, [r3, r2]
 800a11c:	2208      	movs	r2, #8
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2190      	movs	r1, #144	@ 0x90
 800a124:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a126:	23a4      	movs	r3, #164	@ 0xa4
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	2380      	movs	r3, #128	@ 0x80
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	4013      	ands	r3, r2
 800a132:	d013      	beq.n	800a15c <HAL_UART_IRQHandler+0x1a4>
 800a134:	23a0      	movs	r3, #160	@ 0xa0
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	2380      	movs	r3, #128	@ 0x80
 800a13c:	04db      	lsls	r3, r3, #19
 800a13e:	4013      	ands	r3, r2
 800a140:	d00c      	beq.n	800a15c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2280      	movs	r2, #128	@ 0x80
 800a148:	0112      	lsls	r2, r2, #4
 800a14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2290      	movs	r2, #144	@ 0x90
 800a150:	589b      	ldr	r3, [r3, r2]
 800a152:	2220      	movs	r2, #32
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2190      	movs	r1, #144	@ 0x90
 800a15a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2290      	movs	r2, #144	@ 0x90
 800a160:	589b      	ldr	r3, [r3, r2]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d100      	bne.n	800a168 <HAL_UART_IRQHandler+0x1b0>
 800a166:	e23d      	b.n	800a5e4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a168:	23a4      	movs	r3, #164	@ 0xa4
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2220      	movs	r2, #32
 800a170:	4013      	ands	r3, r2
 800a172:	d015      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a174:	23a0      	movs	r3, #160	@ 0xa0
 800a176:	18fb      	adds	r3, r7, r3
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2220      	movs	r2, #32
 800a17c:	4013      	ands	r3, r2
 800a17e:	d106      	bne.n	800a18e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a180:	239c      	movs	r3, #156	@ 0x9c
 800a182:	18fb      	adds	r3, r7, r3
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	2380      	movs	r3, #128	@ 0x80
 800a188:	055b      	lsls	r3, r3, #21
 800a18a:	4013      	ands	r3, r2
 800a18c:	d008      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	0010      	movs	r0, r2
 800a19e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2290      	movs	r2, #144	@ 0x90
 800a1a4:	589b      	ldr	r3, [r3, r2]
 800a1a6:	2194      	movs	r1, #148	@ 0x94
 800a1a8:	187a      	adds	r2, r7, r1
 800a1aa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2240      	movs	r2, #64	@ 0x40
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	d004      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1ba:	187b      	adds	r3, r7, r1
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2228      	movs	r2, #40	@ 0x28
 800a1c0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1c2:	d04c      	beq.n	800a25e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f000 fea0 	bl	800af0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	2240      	movs	r2, #64	@ 0x40
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	2b40      	cmp	r3, #64	@ 0x40
 800a1d8:	d13c      	bne.n	800a254 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800a1e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	2090      	movs	r0, #144	@ 0x90
 800a1e4:	183a      	adds	r2, r7, r0
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1ee:	f383 8810 	msr	PRIMASK, r3
}
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2140      	movs	r1, #64	@ 0x40
 800a200:	438a      	bics	r2, r1
 800a202:	609a      	str	r2, [r3, #8]
 800a204:	183b      	adds	r3, r7, r0
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a20c:	f383 8810 	msr	PRIMASK, r3
}
 800a210:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2280      	movs	r2, #128	@ 0x80
 800a216:	589b      	ldr	r3, [r3, r2]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d016      	beq.n	800a24a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2280      	movs	r2, #128	@ 0x80
 800a220:	589b      	ldr	r3, [r3, r2]
 800a222:	4a17      	ldr	r2, [pc, #92]	@ (800a280 <HAL_UART_IRQHandler+0x2c8>)
 800a224:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2280      	movs	r2, #128	@ 0x80
 800a22a:	589b      	ldr	r3, [r3, r2]
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7fc fa2d 	bl	800668c <HAL_DMA_Abort_IT>
 800a232:	1e03      	subs	r3, r0, #0
 800a234:	d01c      	beq.n	800a270 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2280      	movs	r2, #128	@ 0x80
 800a23a:	589b      	ldr	r3, [r3, r2]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	2180      	movs	r1, #128	@ 0x80
 800a242:	5852      	ldr	r2, [r2, r1]
 800a244:	0010      	movs	r0, r2
 800a246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a248:	e012      	b.n	800a270 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f000 f9f1 	bl	800a634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a252:	e00d      	b.n	800a270 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f9ec 	bl	800a634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a25c:	e008      	b.n	800a270 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	0018      	movs	r0, r3
 800a262:	f000 f9e7 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2290      	movs	r2, #144	@ 0x90
 800a26a:	2100      	movs	r1, #0
 800a26c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a26e:	e1b9      	b.n	800a5e4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	46c0      	nop			@ (mov r8, r8)
    return;
 800a272:	e1b7      	b.n	800a5e4 <HAL_UART_IRQHandler+0x62c>
 800a274:	0000080f 	.word	0x0000080f
 800a278:	10000001 	.word	0x10000001
 800a27c:	04000120 	.word	0x04000120
 800a280:	0800b289 	.word	0x0800b289

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d000      	beq.n	800a28e <HAL_UART_IRQHandler+0x2d6>
 800a28c:	e13e      	b.n	800a50c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a28e:	23a4      	movs	r3, #164	@ 0xa4
 800a290:	18fb      	adds	r3, r7, r3
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2210      	movs	r2, #16
 800a296:	4013      	ands	r3, r2
 800a298:	d100      	bne.n	800a29c <HAL_UART_IRQHandler+0x2e4>
 800a29a:	e137      	b.n	800a50c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a29c:	23a0      	movs	r3, #160	@ 0xa0
 800a29e:	18fb      	adds	r3, r7, r3
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	d100      	bne.n	800a2aa <HAL_UART_IRQHandler+0x2f2>
 800a2a8:	e130      	b.n	800a50c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2240      	movs	r2, #64	@ 0x40
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b40      	cmp	r3, #64	@ 0x40
 800a2be:	d000      	beq.n	800a2c2 <HAL_UART_IRQHandler+0x30a>
 800a2c0:	e0a4      	b.n	800a40c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2280      	movs	r2, #128	@ 0x80
 800a2c6:	589b      	ldr	r3, [r3, r2]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	217e      	movs	r1, #126	@ 0x7e
 800a2ce:	187b      	adds	r3, r7, r1
 800a2d0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a2d2:	187b      	adds	r3, r7, r1
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d100      	bne.n	800a2dc <HAL_UART_IRQHandler+0x324>
 800a2da:	e185      	b.n	800a5e8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	225c      	movs	r2, #92	@ 0x5c
 800a2e0:	5a9b      	ldrh	r3, [r3, r2]
 800a2e2:	187a      	adds	r2, r7, r1
 800a2e4:	8812      	ldrh	r2, [r2, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d300      	bcc.n	800a2ec <HAL_UART_IRQHandler+0x334>
 800a2ea:	e17d      	b.n	800a5e8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	187a      	adds	r2, r7, r1
 800a2f0:	215e      	movs	r1, #94	@ 0x5e
 800a2f2:	8812      	ldrh	r2, [r2, #0]
 800a2f4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2280      	movs	r2, #128	@ 0x80
 800a2fa:	589b      	ldr	r3, [r3, r2]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2220      	movs	r2, #32
 800a302:	4013      	ands	r3, r2
 800a304:	d170      	bne.n	800a3e8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a306:	f3ef 8310 	mrs	r3, PRIMASK
 800a30a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a30e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a310:	2301      	movs	r3, #1
 800a312:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a316:	f383 8810 	msr	PRIMASK, r3
}
 800a31a:	46c0      	nop			@ (mov r8, r8)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	49b4      	ldr	r1, [pc, #720]	@ (800a5f8 <HAL_UART_IRQHandler+0x640>)
 800a328:	400a      	ands	r2, r1
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a32e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	f383 8810 	msr	PRIMASK, r3
}
 800a336:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a338:	f3ef 8310 	mrs	r3, PRIMASK
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a340:	677b      	str	r3, [r7, #116]	@ 0x74
 800a342:	2301      	movs	r3, #1
 800a344:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a348:	f383 8810 	msr	PRIMASK, r3
}
 800a34c:	46c0      	nop			@ (mov r8, r8)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2101      	movs	r1, #1
 800a35a:	438a      	bics	r2, r1
 800a35c:	609a      	str	r2, [r3, #8]
 800a35e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a360:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a364:	f383 8810 	msr	PRIMASK, r3
}
 800a368:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36a:	f3ef 8310 	mrs	r3, PRIMASK
 800a36e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a372:	673b      	str	r3, [r7, #112]	@ 0x70
 800a374:	2301      	movs	r3, #1
 800a376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37a:	f383 8810 	msr	PRIMASK, r3
}
 800a37e:	46c0      	nop			@ (mov r8, r8)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2140      	movs	r1, #64	@ 0x40
 800a38c:	438a      	bics	r2, r1
 800a38e:	609a      	str	r2, [r3, #8]
 800a390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a392:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a396:	f383 8810 	msr	PRIMASK, r3
}
 800a39a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	228c      	movs	r2, #140	@ 0x8c
 800a3a0:	2120      	movs	r1, #32
 800a3a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800a3b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3ba:	f383 8810 	msr	PRIMASK, r3
}
 800a3be:	46c0      	nop			@ (mov r8, r8)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2110      	movs	r1, #16
 800a3cc:	438a      	bics	r2, r1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d6:	f383 8810 	msr	PRIMASK, r3
}
 800a3da:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2280      	movs	r2, #128	@ 0x80
 800a3e0:	589b      	ldr	r3, [r3, r2]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f7fc f8f0 	bl	80065c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	225c      	movs	r2, #92	@ 0x5c
 800a3f2:	5a9a      	ldrh	r2, [r3, r2]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	215e      	movs	r1, #94	@ 0x5e
 800a3f8:	5a5b      	ldrh	r3, [r3, r1]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	0011      	movs	r1, r2
 800a404:	0018      	movs	r0, r3
 800a406:	f000 f91d 	bl	800a644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a40a:	e0ed      	b.n	800a5e8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	225c      	movs	r2, #92	@ 0x5c
 800a410:	5a99      	ldrh	r1, [r3, r2]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	225e      	movs	r2, #94	@ 0x5e
 800a416:	5a9b      	ldrh	r3, [r3, r2]
 800a418:	b29a      	uxth	r2, r3
 800a41a:	208e      	movs	r0, #142	@ 0x8e
 800a41c:	183b      	adds	r3, r7, r0
 800a41e:	1a8a      	subs	r2, r1, r2
 800a420:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	225e      	movs	r2, #94	@ 0x5e
 800a426:	5a9b      	ldrh	r3, [r3, r2]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d100      	bne.n	800a430 <HAL_UART_IRQHandler+0x478>
 800a42e:	e0dd      	b.n	800a5ec <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800a430:	183b      	adds	r3, r7, r0
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d100      	bne.n	800a43a <HAL_UART_IRQHandler+0x482>
 800a438:	e0d8      	b.n	800a5ec <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43a:	f3ef 8310 	mrs	r3, PRIMASK
 800a43e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a440:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a442:	2488      	movs	r4, #136	@ 0x88
 800a444:	193a      	adds	r2, r7, r4
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	2301      	movs	r3, #1
 800a44a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f383 8810 	msr	PRIMASK, r3
}
 800a452:	46c0      	nop			@ (mov r8, r8)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4967      	ldr	r1, [pc, #412]	@ (800a5fc <HAL_UART_IRQHandler+0x644>)
 800a460:	400a      	ands	r2, r1
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	193b      	adds	r3, r7, r4
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f383 8810 	msr	PRIMASK, r3
}
 800a470:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a472:	f3ef 8310 	mrs	r3, PRIMASK
 800a476:	61bb      	str	r3, [r7, #24]
  return(result);
 800a478:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a47a:	2484      	movs	r4, #132	@ 0x84
 800a47c:	193a      	adds	r2, r7, r4
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	2301      	movs	r3, #1
 800a482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f383 8810 	msr	PRIMASK, r3
}
 800a48a:	46c0      	nop			@ (mov r8, r8)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	495a      	ldr	r1, [pc, #360]	@ (800a600 <HAL_UART_IRQHandler+0x648>)
 800a498:	400a      	ands	r2, r1
 800a49a:	609a      	str	r2, [r3, #8]
 800a49c:	193b      	adds	r3, r7, r4
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	f383 8810 	msr	PRIMASK, r3
}
 800a4a8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	228c      	movs	r2, #140	@ 0x8c
 800a4ae:	2120      	movs	r1, #32
 800a4b0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4be:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c6:	2480      	movs	r4, #128	@ 0x80
 800a4c8:	193a      	adds	r2, r7, r4
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d2:	f383 8810 	msr	PRIMASK, r3
}
 800a4d6:	46c0      	nop			@ (mov r8, r8)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2110      	movs	r1, #16
 800a4e4:	438a      	bics	r2, r1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	193b      	adds	r3, r7, r4
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	f383 8810 	msr	PRIMASK, r3
}
 800a4f4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4fc:	183b      	adds	r3, r7, r0
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	0011      	movs	r1, r2
 800a504:	0018      	movs	r0, r3
 800a506:	f000 f89d 	bl	800a644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a50a:	e06f      	b.n	800a5ec <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a50c:	23a4      	movs	r3, #164	@ 0xa4
 800a50e:	18fb      	adds	r3, r7, r3
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	2380      	movs	r3, #128	@ 0x80
 800a514:	035b      	lsls	r3, r3, #13
 800a516:	4013      	ands	r3, r2
 800a518:	d010      	beq.n	800a53c <HAL_UART_IRQHandler+0x584>
 800a51a:	239c      	movs	r3, #156	@ 0x9c
 800a51c:	18fb      	adds	r3, r7, r3
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	2380      	movs	r3, #128	@ 0x80
 800a522:	03db      	lsls	r3, r3, #15
 800a524:	4013      	ands	r3, r2
 800a526:	d009      	beq.n	800a53c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2280      	movs	r2, #128	@ 0x80
 800a52e:	0352      	lsls	r2, r2, #13
 800a530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	0018      	movs	r0, r3
 800a536:	f000 feea 	bl	800b30e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a53a:	e05a      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a53c:	23a4      	movs	r3, #164	@ 0xa4
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2280      	movs	r2, #128	@ 0x80
 800a544:	4013      	ands	r3, r2
 800a546:	d016      	beq.n	800a576 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a548:	23a0      	movs	r3, #160	@ 0xa0
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2280      	movs	r2, #128	@ 0x80
 800a550:	4013      	ands	r3, r2
 800a552:	d106      	bne.n	800a562 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a554:	239c      	movs	r3, #156	@ 0x9c
 800a556:	18fb      	adds	r3, r7, r3
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	2380      	movs	r3, #128	@ 0x80
 800a55c:	041b      	lsls	r3, r3, #16
 800a55e:	4013      	ands	r3, r2
 800a560:	d009      	beq.n	800a576 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a566:	2b00      	cmp	r3, #0
 800a568:	d042      	beq.n	800a5f0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	0010      	movs	r0, r2
 800a572:	4798      	blx	r3
    }
    return;
 800a574:	e03c      	b.n	800a5f0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a576:	23a4      	movs	r3, #164	@ 0xa4
 800a578:	18fb      	adds	r3, r7, r3
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2240      	movs	r2, #64	@ 0x40
 800a57e:	4013      	ands	r3, r2
 800a580:	d00a      	beq.n	800a598 <HAL_UART_IRQHandler+0x5e0>
 800a582:	23a0      	movs	r3, #160	@ 0xa0
 800a584:	18fb      	adds	r3, r7, r3
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2240      	movs	r2, #64	@ 0x40
 800a58a:	4013      	ands	r3, r2
 800a58c:	d004      	beq.n	800a598 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 fe90 	bl	800b2b6 <UART_EndTransmit_IT>
    return;
 800a596:	e02c      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a598:	23a4      	movs	r3, #164	@ 0xa4
 800a59a:	18fb      	adds	r3, r7, r3
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	2380      	movs	r3, #128	@ 0x80
 800a5a0:	041b      	lsls	r3, r3, #16
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <HAL_UART_IRQHandler+0x606>
 800a5a6:	23a0      	movs	r3, #160	@ 0xa0
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	2380      	movs	r3, #128	@ 0x80
 800a5ae:	05db      	lsls	r3, r3, #23
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	d004      	beq.n	800a5be <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f000 feb9 	bl	800b32e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5bc:	e019      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5be:	23a4      	movs	r3, #164	@ 0xa4
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	2380      	movs	r3, #128	@ 0x80
 800a5c6:	045b      	lsls	r3, r3, #17
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	d012      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
 800a5cc:	23a0      	movs	r3, #160	@ 0xa0
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da0d      	bge.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	0018      	movs	r0, r3
 800a5da:	f000 fea0 	bl	800b31e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5de:	e008      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
      return;
 800a5e0:	46c0      	nop			@ (mov r8, r8)
 800a5e2:	e006      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
    return;
 800a5e4:	46c0      	nop			@ (mov r8, r8)
 800a5e6:	e004      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
      return;
 800a5e8:	46c0      	nop			@ (mov r8, r8)
 800a5ea:	e002      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
      return;
 800a5ec:	46c0      	nop			@ (mov r8, r8)
 800a5ee:	e000      	b.n	800a5f2 <HAL_UART_IRQHandler+0x63a>
    return;
 800a5f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	b02a      	add	sp, #168	@ 0xa8
 800a5f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f8:	fffffeff 	.word	0xfffffeff
 800a5fc:	fffffedf 	.word	0xfffffedf
 800a600:	effffffe 	.word	0xeffffffe

0800a604 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a60c:	46c0      	nop			@ (mov r8, r8)
 800a60e:	46bd      	mov	sp, r7
 800a610:	b002      	add	sp, #8
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a61c:	46c0      	nop			@ (mov r8, r8)
 800a61e:	46bd      	mov	sp, r7
 800a620:	b002      	add	sp, #8
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a62c:	46c0      	nop			@ (mov r8, r8)
 800a62e:	46bd      	mov	sp, r7
 800a630:	b002      	add	sp, #8
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a63c:	46c0      	nop			@ (mov r8, r8)
 800a63e:	46bd      	mov	sp, r7
 800a640:	b002      	add	sp, #8
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	000a      	movs	r2, r1
 800a64e:	1cbb      	adds	r3, r7, #2
 800a650:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	46bd      	mov	sp, r7
 800a656:	b002      	add	sp, #8
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a664:	231a      	movs	r3, #26
 800a666:	18fb      	adds	r3, r7, r3
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	431a      	orrs	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	431a      	orrs	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	4313      	orrs	r3, r2
 800a682:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4abc      	ldr	r2, [pc, #752]	@ (800a97c <UART_SetConfig+0x320>)
 800a68c:	4013      	ands	r3, r2
 800a68e:	0019      	movs	r1, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	430a      	orrs	r2, r1
 800a698:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4ab7      	ldr	r2, [pc, #732]	@ (800a980 <UART_SetConfig+0x324>)
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	0019      	movs	r1, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	4aae      	ldr	r2, [pc, #696]	@ (800a984 <UART_SetConfig+0x328>)
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	0019      	movs	r1, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69fa      	ldr	r2, [r7, #28]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	220f      	movs	r2, #15
 800a6e0:	4393      	bics	r3, r2
 800a6e2:	0019      	movs	r1, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4aa4      	ldr	r2, [pc, #656]	@ (800a988 <UART_SetConfig+0x32c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d127      	bne.n	800a74a <UART_SetConfig+0xee>
 800a6fa:	4ba4      	ldr	r3, [pc, #656]	@ (800a98c <UART_SetConfig+0x330>)
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6fe:	2203      	movs	r2, #3
 800a700:	4013      	ands	r3, r2
 800a702:	2b03      	cmp	r3, #3
 800a704:	d017      	beq.n	800a736 <UART_SetConfig+0xda>
 800a706:	d81b      	bhi.n	800a740 <UART_SetConfig+0xe4>
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d00a      	beq.n	800a722 <UART_SetConfig+0xc6>
 800a70c:	d818      	bhi.n	800a740 <UART_SetConfig+0xe4>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <UART_SetConfig+0xbc>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d00a      	beq.n	800a72c <UART_SetConfig+0xd0>
 800a716:	e013      	b.n	800a740 <UART_SetConfig+0xe4>
 800a718:	231b      	movs	r3, #27
 800a71a:	18fb      	adds	r3, r7, r3
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e058      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a722:	231b      	movs	r3, #27
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	2202      	movs	r2, #2
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	e053      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a72c:	231b      	movs	r3, #27
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	2204      	movs	r2, #4
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e04e      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a736:	231b      	movs	r3, #27
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	2208      	movs	r2, #8
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	e049      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a740:	231b      	movs	r3, #27
 800a742:	18fb      	adds	r3, r7, r3
 800a744:	2210      	movs	r2, #16
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	e044      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a90      	ldr	r2, [pc, #576]	@ (800a990 <UART_SetConfig+0x334>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d127      	bne.n	800a7a4 <UART_SetConfig+0x148>
 800a754:	4b8d      	ldr	r3, [pc, #564]	@ (800a98c <UART_SetConfig+0x330>)
 800a756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a758:	220c      	movs	r2, #12
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b0c      	cmp	r3, #12
 800a75e:	d017      	beq.n	800a790 <UART_SetConfig+0x134>
 800a760:	d81b      	bhi.n	800a79a <UART_SetConfig+0x13e>
 800a762:	2b08      	cmp	r3, #8
 800a764:	d00a      	beq.n	800a77c <UART_SetConfig+0x120>
 800a766:	d818      	bhi.n	800a79a <UART_SetConfig+0x13e>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <UART_SetConfig+0x116>
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d00a      	beq.n	800a786 <UART_SetConfig+0x12a>
 800a770:	e013      	b.n	800a79a <UART_SetConfig+0x13e>
 800a772:	231b      	movs	r3, #27
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	e02b      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a77c:	231b      	movs	r3, #27
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	2202      	movs	r2, #2
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	e026      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a786:	231b      	movs	r3, #27
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	2204      	movs	r2, #4
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e021      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a790:	231b      	movs	r3, #27
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	2208      	movs	r2, #8
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e01c      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a79a:	231b      	movs	r3, #27
 800a79c:	18fb      	adds	r3, r7, r3
 800a79e:	2210      	movs	r2, #16
 800a7a0:	701a      	strb	r2, [r3, #0]
 800a7a2:	e017      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a7a      	ldr	r2, [pc, #488]	@ (800a994 <UART_SetConfig+0x338>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d104      	bne.n	800a7b8 <UART_SetConfig+0x15c>
 800a7ae:	231b      	movs	r3, #27
 800a7b0:	18fb      	adds	r3, r7, r3
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e00d      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a76      	ldr	r2, [pc, #472]	@ (800a998 <UART_SetConfig+0x33c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d104      	bne.n	800a7cc <UART_SetConfig+0x170>
 800a7c2:	231b      	movs	r3, #27
 800a7c4:	18fb      	adds	r3, r7, r3
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e003      	b.n	800a7d4 <UART_SetConfig+0x178>
 800a7cc:	231b      	movs	r3, #27
 800a7ce:	18fb      	adds	r3, r7, r3
 800a7d0:	2210      	movs	r2, #16
 800a7d2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	2380      	movs	r3, #128	@ 0x80
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d000      	beq.n	800a7e2 <UART_SetConfig+0x186>
 800a7e0:	e065      	b.n	800a8ae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800a7e2:	231b      	movs	r3, #27
 800a7e4:	18fb      	adds	r3, r7, r3
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d015      	beq.n	800a818 <UART_SetConfig+0x1bc>
 800a7ec:	dc18      	bgt.n	800a820 <UART_SetConfig+0x1c4>
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d00d      	beq.n	800a80e <UART_SetConfig+0x1b2>
 800a7f2:	dc15      	bgt.n	800a820 <UART_SetConfig+0x1c4>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <UART_SetConfig+0x1a2>
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d005      	beq.n	800a808 <UART_SetConfig+0x1ac>
 800a7fc:	e010      	b.n	800a820 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7fe:	f7fe f91f 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 800a802:	0003      	movs	r3, r0
 800a804:	617b      	str	r3, [r7, #20]
        break;
 800a806:	e012      	b.n	800a82e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a808:	4b64      	ldr	r3, [pc, #400]	@ (800a99c <UART_SetConfig+0x340>)
 800a80a:	617b      	str	r3, [r7, #20]
        break;
 800a80c:	e00f      	b.n	800a82e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a80e:	f7fe f88b 	bl	8008928 <HAL_RCC_GetSysClockFreq>
 800a812:	0003      	movs	r3, r0
 800a814:	617b      	str	r3, [r7, #20]
        break;
 800a816:	e00a      	b.n	800a82e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	617b      	str	r3, [r7, #20]
        break;
 800a81e:	e006      	b.n	800a82e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a824:	231a      	movs	r3, #26
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	2201      	movs	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]
        break;
 800a82c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d100      	bne.n	800a836 <UART_SetConfig+0x1da>
 800a834:	e08d      	b.n	800a952 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a83a:	4b59      	ldr	r3, [pc, #356]	@ (800a9a0 <UART_SetConfig+0x344>)
 800a83c:	0052      	lsls	r2, r2, #1
 800a83e:	5ad3      	ldrh	r3, [r2, r3]
 800a840:	0019      	movs	r1, r3
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f7f5 fc78 	bl	8000138 <__udivsi3>
 800a848:	0003      	movs	r3, r0
 800a84a:	005a      	lsls	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	18d2      	adds	r2, r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	0019      	movs	r1, r3
 800a85a:	0010      	movs	r0, r2
 800a85c:	f7f5 fc6c 	bl	8000138 <__udivsi3>
 800a860:	0003      	movs	r3, r0
 800a862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d91c      	bls.n	800a8a4 <UART_SetConfig+0x248>
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	2380      	movs	r3, #128	@ 0x80
 800a86e:	025b      	lsls	r3, r3, #9
 800a870:	429a      	cmp	r2, r3
 800a872:	d217      	bcs.n	800a8a4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	b29a      	uxth	r2, r3
 800a878:	200e      	movs	r0, #14
 800a87a:	183b      	adds	r3, r7, r0
 800a87c:	210f      	movs	r1, #15
 800a87e:	438a      	bics	r2, r1
 800a880:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	085b      	lsrs	r3, r3, #1
 800a886:	b29b      	uxth	r3, r3
 800a888:	2207      	movs	r2, #7
 800a88a:	4013      	ands	r3, r2
 800a88c:	b299      	uxth	r1, r3
 800a88e:	183b      	adds	r3, r7, r0
 800a890:	183a      	adds	r2, r7, r0
 800a892:	8812      	ldrh	r2, [r2, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	183a      	adds	r2, r7, r0
 800a89e:	8812      	ldrh	r2, [r2, #0]
 800a8a0:	60da      	str	r2, [r3, #12]
 800a8a2:	e056      	b.n	800a952 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a4:	231a      	movs	r3, #26
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e051      	b.n	800a952 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8ae:	231b      	movs	r3, #27
 800a8b0:	18fb      	adds	r3, r7, r3
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d015      	beq.n	800a8e4 <UART_SetConfig+0x288>
 800a8b8:	dc18      	bgt.n	800a8ec <UART_SetConfig+0x290>
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d00d      	beq.n	800a8da <UART_SetConfig+0x27e>
 800a8be:	dc15      	bgt.n	800a8ec <UART_SetConfig+0x290>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <UART_SetConfig+0x26e>
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d005      	beq.n	800a8d4 <UART_SetConfig+0x278>
 800a8c8:	e010      	b.n	800a8ec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ca:	f7fe f8b9 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 800a8ce:	0003      	movs	r3, r0
 800a8d0:	617b      	str	r3, [r7, #20]
        break;
 800a8d2:	e012      	b.n	800a8fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8d4:	4b31      	ldr	r3, [pc, #196]	@ (800a99c <UART_SetConfig+0x340>)
 800a8d6:	617b      	str	r3, [r7, #20]
        break;
 800a8d8:	e00f      	b.n	800a8fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8da:	f7fe f825 	bl	8008928 <HAL_RCC_GetSysClockFreq>
 800a8de:	0003      	movs	r3, r0
 800a8e0:	617b      	str	r3, [r7, #20]
        break;
 800a8e2:	e00a      	b.n	800a8fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e4:	2380      	movs	r3, #128	@ 0x80
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	617b      	str	r3, [r7, #20]
        break;
 800a8ea:	e006      	b.n	800a8fa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a8f0:	231a      	movs	r3, #26
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]
        break;
 800a8f8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d028      	beq.n	800a952 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a904:	4b26      	ldr	r3, [pc, #152]	@ (800a9a0 <UART_SetConfig+0x344>)
 800a906:	0052      	lsls	r2, r2, #1
 800a908:	5ad3      	ldrh	r3, [r2, r3]
 800a90a:	0019      	movs	r1, r3
 800a90c:	6978      	ldr	r0, [r7, #20]
 800a90e:	f7f5 fc13 	bl	8000138 <__udivsi3>
 800a912:	0003      	movs	r3, r0
 800a914:	001a      	movs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	085b      	lsrs	r3, r3, #1
 800a91c:	18d2      	adds	r2, r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	0019      	movs	r1, r3
 800a924:	0010      	movs	r0, r2
 800a926:	f7f5 fc07 	bl	8000138 <__udivsi3>
 800a92a:	0003      	movs	r3, r0
 800a92c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2b0f      	cmp	r3, #15
 800a932:	d90a      	bls.n	800a94a <UART_SetConfig+0x2ee>
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	025b      	lsls	r3, r3, #9
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d205      	bcs.n	800a94a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60da      	str	r2, [r3, #12]
 800a948:	e003      	b.n	800a952 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a94a:	231a      	movs	r3, #26
 800a94c:	18fb      	adds	r3, r7, r3
 800a94e:	2201      	movs	r2, #1
 800a950:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	226a      	movs	r2, #106	@ 0x6a
 800a956:	2101      	movs	r1, #1
 800a958:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2268      	movs	r2, #104	@ 0x68
 800a95e:	2101      	movs	r1, #1
 800a960:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a96e:	231a      	movs	r3, #26
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	781b      	ldrb	r3, [r3, #0]
}
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b008      	add	sp, #32
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	cfff69f3 	.word	0xcfff69f3
 800a980:	ffffcfff 	.word	0xffffcfff
 800a984:	11fff4ff 	.word	0x11fff4ff
 800a988:	40013800 	.word	0x40013800
 800a98c:	40021000 	.word	0x40021000
 800a990:	40004400 	.word	0x40004400
 800a994:	40004800 	.word	0x40004800
 800a998:	40004c00 	.word	0x40004c00
 800a99c:	00f42400 	.word	0x00f42400
 800a9a0:	0800e484 	.word	0x0800e484

0800a9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	d00b      	beq.n	800a9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	4a4a      	ldr	r2, [pc, #296]	@ (800aae8 <UART_AdvFeatureConfig+0x144>)
 800a9be:	4013      	ands	r3, r2
 800a9c0:	0019      	movs	r1, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	d00b      	beq.n	800a9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4a43      	ldr	r2, [pc, #268]	@ (800aaec <UART_AdvFeatureConfig+0x148>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	0019      	movs	r1, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	4a3b      	ldr	r2, [pc, #236]	@ (800aaf0 <UART_AdvFeatureConfig+0x14c>)
 800aa02:	4013      	ands	r3, r2
 800aa04:	0019      	movs	r1, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa16:	2204      	movs	r2, #4
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d00b      	beq.n	800aa34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	4a34      	ldr	r2, [pc, #208]	@ (800aaf4 <UART_AdvFeatureConfig+0x150>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	0019      	movs	r1, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa38:	2210      	movs	r2, #16
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d00b      	beq.n	800aa56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf8 <UART_AdvFeatureConfig+0x154>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	0019      	movs	r1, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d00b      	beq.n	800aa78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4a25      	ldr	r2, [pc, #148]	@ (800aafc <UART_AdvFeatureConfig+0x158>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	0019      	movs	r1, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d01d      	beq.n	800aabe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4a1d      	ldr	r2, [pc, #116]	@ (800ab00 <UART_AdvFeatureConfig+0x15c>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	0019      	movs	r1, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa9e:	2380      	movs	r3, #128	@ 0x80
 800aaa0:	035b      	lsls	r3, r3, #13
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d10b      	bne.n	800aabe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4a15      	ldr	r2, [pc, #84]	@ (800ab04 <UART_AdvFeatureConfig+0x160>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	0019      	movs	r1, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac2:	2280      	movs	r2, #128	@ 0x80
 800aac4:	4013      	ands	r3, r2
 800aac6:	d00b      	beq.n	800aae0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	4a0e      	ldr	r2, [pc, #56]	@ (800ab08 <UART_AdvFeatureConfig+0x164>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	0019      	movs	r1, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	430a      	orrs	r2, r1
 800aade:	605a      	str	r2, [r3, #4]
  }
}
 800aae0:	46c0      	nop			@ (mov r8, r8)
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b002      	add	sp, #8
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	ffff7fff 	.word	0xffff7fff
 800aaec:	fffdffff 	.word	0xfffdffff
 800aaf0:	fffeffff 	.word	0xfffeffff
 800aaf4:	fffbffff 	.word	0xfffbffff
 800aaf8:	ffffefff 	.word	0xffffefff
 800aafc:	ffffdfff 	.word	0xffffdfff
 800ab00:	ffefffff 	.word	0xffefffff
 800ab04:	ff9fffff 	.word	0xff9fffff
 800ab08:	fff7ffff 	.word	0xfff7ffff

0800ab0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b092      	sub	sp, #72	@ 0x48
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2290      	movs	r2, #144	@ 0x90
 800ab18:	2100      	movs	r1, #0
 800ab1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab1c:	f7fa fd54 	bl	80055c8 <HAL_GetTick>
 800ab20:	0003      	movs	r3, r0
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d12d      	bne.n	800ab8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab34:	2280      	movs	r2, #128	@ 0x80
 800ab36:	0391      	lsls	r1, r2, #14
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4a47      	ldr	r2, [pc, #284]	@ (800ac58 <UART_CheckIdleState+0x14c>)
 800ab3c:	9200      	str	r2, [sp, #0]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f000 f88e 	bl	800ac60 <UART_WaitOnFlagUntilTimeout>
 800ab44:	1e03      	subs	r3, r0, #0
 800ab46:	d022      	beq.n	800ab8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab48:	f3ef 8310 	mrs	r3, PRIMASK
 800ab4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab50:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab52:	2301      	movs	r3, #1
 800ab54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	f383 8810 	msr	PRIMASK, r3
}
 800ab5c:	46c0      	nop			@ (mov r8, r8)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2180      	movs	r1, #128	@ 0x80
 800ab6a:	438a      	bics	r2, r1
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	f383 8810 	msr	PRIMASK, r3
}
 800ab78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2288      	movs	r2, #136	@ 0x88
 800ab7e:	2120      	movs	r1, #32
 800ab80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2284      	movs	r2, #132	@ 0x84
 800ab86:	2100      	movs	r1, #0
 800ab88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e060      	b.n	800ac50 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2204      	movs	r2, #4
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d146      	bne.n	800ac2a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9e:	2280      	movs	r2, #128	@ 0x80
 800aba0:	03d1      	lsls	r1, r2, #15
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4a2c      	ldr	r2, [pc, #176]	@ (800ac58 <UART_CheckIdleState+0x14c>)
 800aba6:	9200      	str	r2, [sp, #0]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f000 f859 	bl	800ac60 <UART_WaitOnFlagUntilTimeout>
 800abae:	1e03      	subs	r3, r0, #0
 800abb0:	d03b      	beq.n	800ac2a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb2:	f3ef 8310 	mrs	r3, PRIMASK
 800abb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800abb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abba:	637b      	str	r3, [r7, #52]	@ 0x34
 800abbc:	2301      	movs	r3, #1
 800abbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f383 8810 	msr	PRIMASK, r3
}
 800abc6:	46c0      	nop			@ (mov r8, r8)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4922      	ldr	r1, [pc, #136]	@ (800ac5c <UART_CheckIdleState+0x150>)
 800abd4:	400a      	ands	r2, r1
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f383 8810 	msr	PRIMASK, r3
}
 800abe2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe4:	f3ef 8310 	mrs	r3, PRIMASK
 800abe8:	61bb      	str	r3, [r7, #24]
  return(result);
 800abea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abec:	633b      	str	r3, [r7, #48]	@ 0x30
 800abee:	2301      	movs	r3, #1
 800abf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f383 8810 	msr	PRIMASK, r3
}
 800abf8:	46c0      	nop			@ (mov r8, r8)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2101      	movs	r1, #1
 800ac06:	438a      	bics	r2, r1
 800ac08:	609a      	str	r2, [r3, #8]
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	f383 8810 	msr	PRIMASK, r3
}
 800ac14:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	228c      	movs	r2, #140	@ 0x8c
 800ac1a:	2120      	movs	r1, #32
 800ac1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2284      	movs	r2, #132	@ 0x84
 800ac22:	2100      	movs	r1, #0
 800ac24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e012      	b.n	800ac50 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2288      	movs	r2, #136	@ 0x88
 800ac2e:	2120      	movs	r1, #32
 800ac30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	228c      	movs	r2, #140	@ 0x8c
 800ac36:	2120      	movs	r1, #32
 800ac38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2284      	movs	r2, #132	@ 0x84
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	0018      	movs	r0, r3
 800ac52:	46bd      	mov	sp, r7
 800ac54:	b010      	add	sp, #64	@ 0x40
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	01ffffff 	.word	0x01ffffff
 800ac5c:	fffffedf 	.word	0xfffffedf

0800ac60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	1dfb      	adds	r3, r7, #7
 800ac6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac70:	e051      	b.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	3301      	adds	r3, #1
 800ac76:	d04e      	beq.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac78:	f7fa fca6 	bl	80055c8 <HAL_GetTick>
 800ac7c:	0002      	movs	r2, r0
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d302      	bcc.n	800ac8e <UART_WaitOnFlagUntilTimeout+0x2e>
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e051      	b.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	d03b      	beq.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b80      	cmp	r3, #128	@ 0x80
 800aca2:	d038      	beq.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b40      	cmp	r3, #64	@ 0x40
 800aca8:	d035      	beq.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	2208      	movs	r2, #8
 800acb2:	4013      	ands	r3, r2
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d111      	bne.n	800acdc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2208      	movs	r2, #8
 800acbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	0018      	movs	r0, r3
 800acc4:	f000 f922 	bl	800af0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2290      	movs	r2, #144	@ 0x90
 800accc:	2108      	movs	r1, #8
 800acce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2284      	movs	r2, #132	@ 0x84
 800acd4:	2100      	movs	r1, #0
 800acd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e02c      	b.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	69da      	ldr	r2, [r3, #28]
 800ace2:	2380      	movs	r3, #128	@ 0x80
 800ace4:	011b      	lsls	r3, r3, #4
 800ace6:	401a      	ands	r2, r3
 800ace8:	2380      	movs	r3, #128	@ 0x80
 800acea:	011b      	lsls	r3, r3, #4
 800acec:	429a      	cmp	r2, r3
 800acee:	d112      	bne.n	800ad16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2280      	movs	r2, #128	@ 0x80
 800acf6:	0112      	lsls	r2, r2, #4
 800acf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	0018      	movs	r0, r3
 800acfe:	f000 f905 	bl	800af0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2290      	movs	r2, #144	@ 0x90
 800ad06:	2120      	movs	r1, #32
 800ad08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2284      	movs	r2, #132	@ 0x84
 800ad0e:	2100      	movs	r1, #0
 800ad10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e00f      	b.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	425a      	negs	r2, r3
 800ad26:	4153      	adcs	r3, r2
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	001a      	movs	r2, r3
 800ad2c:	1dfb      	adds	r3, r7, #7
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d09e      	beq.n	800ac72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	0018      	movs	r0, r3
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	b004      	add	sp, #16
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b090      	sub	sp, #64	@ 0x40
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	1dbb      	adds	r3, r7, #6
 800ad4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	1dba      	adds	r2, r7, #6
 800ad58:	215c      	movs	r1, #92	@ 0x5c
 800ad5a:	8812      	ldrh	r2, [r2, #0]
 800ad5c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2290      	movs	r2, #144	@ 0x90
 800ad62:	2100      	movs	r1, #0
 800ad64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	228c      	movs	r2, #140	@ 0x8c
 800ad6a:	2122      	movs	r1, #34	@ 0x22
 800ad6c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2280      	movs	r2, #128	@ 0x80
 800ad72:	589b      	ldr	r3, [r3, r2]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d02d      	beq.n	800add4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2280      	movs	r2, #128	@ 0x80
 800ad7c:	589b      	ldr	r3, [r3, r2]
 800ad7e:	4a40      	ldr	r2, [pc, #256]	@ (800ae80 <UART_Start_Receive_DMA+0x140>)
 800ad80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2280      	movs	r2, #128	@ 0x80
 800ad86:	589b      	ldr	r3, [r3, r2]
 800ad88:	4a3e      	ldr	r2, [pc, #248]	@ (800ae84 <UART_Start_Receive_DMA+0x144>)
 800ad8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2280      	movs	r2, #128	@ 0x80
 800ad90:	589b      	ldr	r3, [r3, r2]
 800ad92:	4a3d      	ldr	r2, [pc, #244]	@ (800ae88 <UART_Start_Receive_DMA+0x148>)
 800ad94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2280      	movs	r2, #128	@ 0x80
 800ad9a:	589b      	ldr	r3, [r3, r2]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2280      	movs	r2, #128	@ 0x80
 800ada4:	5898      	ldr	r0, [r3, r2]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3324      	adds	r3, #36	@ 0x24
 800adac:	0019      	movs	r1, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb2:	001a      	movs	r2, r3
 800adb4:	1dbb      	adds	r3, r7, #6
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	f7fb fb80 	bl	80064bc <HAL_DMA_Start_IT>
 800adbc:	1e03      	subs	r3, r0, #0
 800adbe:	d009      	beq.n	800add4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2290      	movs	r2, #144	@ 0x90
 800adc4:	2110      	movs	r1, #16
 800adc6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	228c      	movs	r2, #140	@ 0x8c
 800adcc:	2120      	movs	r1, #32
 800adce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e050      	b.n	800ae76 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d019      	beq.n	800ae10 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800addc:	f3ef 8310 	mrs	r3, PRIMASK
 800ade0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ade6:	2301      	movs	r3, #1
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	f383 8810 	msr	PRIMASK, r3
}
 800adf0:	46c0      	nop			@ (mov r8, r8)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2180      	movs	r1, #128	@ 0x80
 800adfe:	0049      	lsls	r1, r1, #1
 800ae00:	430a      	orrs	r2, r1
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae06:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	f383 8810 	msr	PRIMASK, r3
}
 800ae0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae10:	f3ef 8310 	mrs	r3, PRIMASK
 800ae14:	613b      	str	r3, [r7, #16]
  return(result);
 800ae16:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f383 8810 	msr	PRIMASK, r3
}
 800ae24:	46c0      	nop			@ (mov r8, r8)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2101      	movs	r1, #1
 800ae32:	430a      	orrs	r2, r1
 800ae34:	609a      	str	r2, [r3, #8]
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	f383 8810 	msr	PRIMASK, r3
}
 800ae40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae42:	f3ef 8310 	mrs	r3, PRIMASK
 800ae46:	61fb      	str	r3, [r7, #28]
  return(result);
 800ae48:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	f383 8810 	msr	PRIMASK, r3
}
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689a      	ldr	r2, [r3, #8]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2140      	movs	r1, #64	@ 0x40
 800ae64:	430a      	orrs	r2, r1
 800ae66:	609a      	str	r2, [r3, #8]
 800ae68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	f383 8810 	msr	PRIMASK, r3
}
 800ae72:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b010      	add	sp, #64	@ 0x40
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	0800b091 	.word	0x0800b091
 800ae84:	0800b1c1 	.word	0x0800b1c1
 800ae88:	0800b203 	.word	0x0800b203

0800ae8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	@ 0x28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae94:	f3ef 8310 	mrs	r3, PRIMASK
 800ae98:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae9e:	2301      	movs	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f383 8810 	msr	PRIMASK, r3
}
 800aea8:	46c0      	nop			@ (mov r8, r8)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	21c0      	movs	r1, #192	@ 0xc0
 800aeb6:	438a      	bics	r2, r1
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f383 8810 	msr	PRIMASK, r3
}
 800aec4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeca:	617b      	str	r3, [r7, #20]
  return(result);
 800aecc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aece:	623b      	str	r3, [r7, #32]
 800aed0:	2301      	movs	r3, #1
 800aed2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f383 8810 	msr	PRIMASK, r3
}
 800aeda:	46c0      	nop			@ (mov r8, r8)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689a      	ldr	r2, [r3, #8]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4908      	ldr	r1, [pc, #32]	@ (800af08 <UART_EndTxTransfer+0x7c>)
 800aee8:	400a      	ands	r2, r1
 800aeea:	609a      	str	r2, [r3, #8]
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	f383 8810 	msr	PRIMASK, r3
}
 800aef6:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2288      	movs	r2, #136	@ 0x88
 800aefc:	2120      	movs	r1, #32
 800aefe:	5099      	str	r1, [r3, r2]
}
 800af00:	46c0      	nop			@ (mov r8, r8)
 800af02:	46bd      	mov	sp, r7
 800af04:	b00a      	add	sp, #40	@ 0x28
 800af06:	bd80      	pop	{r7, pc}
 800af08:	ff7fffff 	.word	0xff7fffff

0800af0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08e      	sub	sp, #56	@ 0x38
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af14:	f3ef 8310 	mrs	r3, PRIMASK
 800af18:	617b      	str	r3, [r7, #20]
  return(result);
 800af1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af1e:	2301      	movs	r3, #1
 800af20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	f383 8810 	msr	PRIMASK, r3
}
 800af28:	46c0      	nop			@ (mov r8, r8)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4926      	ldr	r1, [pc, #152]	@ (800afd0 <UART_EndRxTransfer+0xc4>)
 800af36:	400a      	ands	r2, r1
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	f383 8810 	msr	PRIMASK, r3
}
 800af44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af46:	f3ef 8310 	mrs	r3, PRIMASK
 800af4a:	623b      	str	r3, [r7, #32]
  return(result);
 800af4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800af50:	2301      	movs	r3, #1
 800af52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af56:	f383 8810 	msr	PRIMASK, r3
}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	491b      	ldr	r1, [pc, #108]	@ (800afd4 <UART_EndRxTransfer+0xc8>)
 800af68:	400a      	ands	r2, r1
 800af6a:	609a      	str	r2, [r3, #8]
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af72:	f383 8810 	msr	PRIMASK, r3
}
 800af76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d118      	bne.n	800afb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af80:	f3ef 8310 	mrs	r3, PRIMASK
 800af84:	60bb      	str	r3, [r7, #8]
  return(result);
 800af86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af8a:	2301      	movs	r3, #1
 800af8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f383 8810 	msr	PRIMASK, r3
}
 800af94:	46c0      	nop			@ (mov r8, r8)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2110      	movs	r1, #16
 800afa2:	438a      	bics	r2, r1
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f383 8810 	msr	PRIMASK, r3
}
 800afb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	228c      	movs	r2, #140	@ 0x8c
 800afb6:	2120      	movs	r1, #32
 800afb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	46bd      	mov	sp, r7
 800afca:	b00e      	add	sp, #56	@ 0x38
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	46c0      	nop			@ (mov r8, r8)
 800afd0:	fffffedf 	.word	0xfffffedf
 800afd4:	effffffe 	.word	0xeffffffe

0800afd8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08c      	sub	sp, #48	@ 0x30
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2220      	movs	r2, #32
 800afee:	4013      	ands	r3, r2
 800aff0:	d135      	bne.n	800b05e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800aff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff4:	2256      	movs	r2, #86	@ 0x56
 800aff6:	2100      	movs	r1, #0
 800aff8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800affa:	f3ef 8310 	mrs	r3, PRIMASK
 800affe:	60fb      	str	r3, [r7, #12]
  return(result);
 800b000:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b002:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b004:	2301      	movs	r3, #1
 800b006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f383 8810 	msr	PRIMASK, r3
}
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2180      	movs	r1, #128	@ 0x80
 800b01c:	438a      	bics	r2, r1
 800b01e:	609a      	str	r2, [r3, #8]
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f383 8810 	msr	PRIMASK, r3
}
 800b02a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02c:	f3ef 8310 	mrs	r3, PRIMASK
 800b030:	61bb      	str	r3, [r7, #24]
  return(result);
 800b032:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
 800b036:	2301      	movs	r3, #1
 800b038:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	f383 8810 	msr	PRIMASK, r3
}
 800b040:	46c0      	nop			@ (mov r8, r8)
 800b042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2140      	movs	r1, #64	@ 0x40
 800b04e:	430a      	orrs	r2, r1
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b054:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	f383 8810 	msr	PRIMASK, r3
}
 800b05c:	e004      	b.n	800b068 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b060:	0018      	movs	r0, r3
 800b062:	f7f8 fb53 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b066:	46c0      	nop			@ (mov r8, r8)
 800b068:	46c0      	nop			@ (mov r8, r8)
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b00c      	add	sp, #48	@ 0x30
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	0018      	movs	r0, r3
 800b082:	f7ff fabf 	bl	800a604 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b086:	46c0      	nop			@ (mov r8, r8)
 800b088:	46bd      	mov	sp, r7
 800b08a:	b004      	add	sp, #16
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b094      	sub	sp, #80	@ 0x50
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	d16f      	bne.n	800b18a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ac:	225e      	movs	r2, #94	@ 0x5e
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b0b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b0b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0bc:	2301      	movs	r3, #1
 800b0be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f383 8810 	msr	PRIMASK, r3
}
 800b0c6:	46c0      	nop			@ (mov r8, r8)
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	493a      	ldr	r1, [pc, #232]	@ (800b1bc <UART_DMAReceiveCplt+0x12c>)
 800b0d4:	400a      	ands	r2, r1
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	f383 8810 	msr	PRIMASK, r3
}
 800b0e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	f383 8810 	msr	PRIMASK, r3
}
 800b0f8:	46c0      	nop			@ (mov r8, r8)
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689a      	ldr	r2, [r3, #8]
 800b100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2101      	movs	r1, #1
 800b106:	438a      	bics	r2, r1
 800b108:	609a      	str	r2, [r3, #8]
 800b10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b110:	f383 8810 	msr	PRIMASK, r3
}
 800b114:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b116:	f3ef 8310 	mrs	r3, PRIMASK
 800b11a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b11e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b120:	2301      	movs	r3, #1
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b126:	f383 8810 	msr	PRIMASK, r3
}
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2140      	movs	r1, #64	@ 0x40
 800b138:	438a      	bics	r2, r1
 800b13a:	609a      	str	r2, [r3, #8]
 800b13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b13e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	f383 8810 	msr	PRIMASK, r3
}
 800b146:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b14a:	228c      	movs	r2, #140	@ 0x8c
 800b14c:	2120      	movs	r1, #32
 800b14e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b154:	2b01      	cmp	r3, #1
 800b156:	d118      	bne.n	800b18a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b158:	f3ef 8310 	mrs	r3, PRIMASK
 800b15c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b15e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b162:	2301      	movs	r3, #1
 800b164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	f383 8810 	msr	PRIMASK, r3
}
 800b16c:	46c0      	nop			@ (mov r8, r8)
 800b16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2110      	movs	r1, #16
 800b17a:	438a      	bics	r2, r1
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f383 8810 	msr	PRIMASK, r3
}
 800b188:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b18c:	2200      	movs	r2, #0
 800b18e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b194:	2b01      	cmp	r3, #1
 800b196:	d108      	bne.n	800b1aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b19a:	225c      	movs	r2, #92	@ 0x5c
 800b19c:	5a9a      	ldrh	r2, [r3, r2]
 800b19e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1a0:	0011      	movs	r1, r2
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f7ff fa4e 	bl	800a644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1a8:	e003      	b.n	800b1b2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f7ff fa31 	bl	800a614 <HAL_UART_RxCpltCallback>
}
 800b1b2:	46c0      	nop			@ (mov r8, r8)
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	b014      	add	sp, #80	@ 0x50
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	46c0      	nop			@ (mov r8, r8)
 800b1bc:	fffffeff 	.word	0xfffffeff

0800b1c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d10a      	bne.n	800b1f2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	225c      	movs	r2, #92	@ 0x5c
 800b1e0:	5a9b      	ldrh	r3, [r3, r2]
 800b1e2:	085b      	lsrs	r3, r3, #1
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7ff fa2a 	bl	800a644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1f0:	e003      	b.n	800b1fa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7ff fa15 	bl	800a624 <HAL_UART_RxHalfCpltCallback>
}
 800b1fa:	46c0      	nop			@ (mov r8, r8)
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	b004      	add	sp, #16
 800b200:	bd80      	pop	{r7, pc}

0800b202 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b086      	sub	sp, #24
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2288      	movs	r2, #136	@ 0x88
 800b214:	589b      	ldr	r3, [r3, r2]
 800b216:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	228c      	movs	r2, #140	@ 0x8c
 800b21c:	589b      	ldr	r3, [r3, r2]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2280      	movs	r2, #128	@ 0x80
 800b228:	4013      	ands	r3, r2
 800b22a:	2b80      	cmp	r3, #128	@ 0x80
 800b22c:	d10a      	bne.n	800b244 <UART_DMAError+0x42>
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	2b21      	cmp	r3, #33	@ 0x21
 800b232:	d107      	bne.n	800b244 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2256      	movs	r2, #86	@ 0x56
 800b238:	2100      	movs	r1, #0
 800b23a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	0018      	movs	r0, r3
 800b240:	f7ff fe24 	bl	800ae8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2240      	movs	r2, #64	@ 0x40
 800b24c:	4013      	ands	r3, r2
 800b24e:	2b40      	cmp	r3, #64	@ 0x40
 800b250:	d10a      	bne.n	800b268 <UART_DMAError+0x66>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b22      	cmp	r3, #34	@ 0x22
 800b256:	d107      	bne.n	800b268 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	225e      	movs	r2, #94	@ 0x5e
 800b25c:	2100      	movs	r1, #0
 800b25e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	0018      	movs	r0, r3
 800b264:	f7ff fe52 	bl	800af0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	2290      	movs	r2, #144	@ 0x90
 800b26c:	589b      	ldr	r3, [r3, r2]
 800b26e:	2210      	movs	r2, #16
 800b270:	431a      	orrs	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2190      	movs	r1, #144	@ 0x90
 800b276:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	0018      	movs	r0, r3
 800b27c:	f7ff f9da 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b280:	46c0      	nop			@ (mov r8, r8)
 800b282:	46bd      	mov	sp, r7
 800b284:	b006      	add	sp, #24
 800b286:	bd80      	pop	{r7, pc}

0800b288 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	225e      	movs	r2, #94	@ 0x5e
 800b29a:	2100      	movs	r1, #0
 800b29c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2256      	movs	r2, #86	@ 0x56
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f7ff f9c3 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ae:	46c0      	nop			@ (mov r8, r8)
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b004      	add	sp, #16
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b086      	sub	sp, #24
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2be:	f3ef 8310 	mrs	r3, PRIMASK
 800b2c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f383 8810 	msr	PRIMASK, r3
}
 800b2d2:	46c0      	nop			@ (mov r8, r8)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2140      	movs	r1, #64	@ 0x40
 800b2e0:	438a      	bics	r2, r1
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f383 8810 	msr	PRIMASK, r3
}
 800b2ee:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2288      	movs	r2, #136	@ 0x88
 800b2f4:	2120      	movs	r1, #32
 800b2f6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	0018      	movs	r0, r3
 800b302:	f7f8 fa03 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b306:	46c0      	nop			@ (mov r8, r8)
 800b308:	46bd      	mov	sp, r7
 800b30a:	b006      	add	sp, #24
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b082      	sub	sp, #8
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b316:	46c0      	nop			@ (mov r8, r8)
 800b318:	46bd      	mov	sp, r7
 800b31a:	b002      	add	sp, #8
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b326:	46c0      	nop			@ (mov r8, r8)
 800b328:	46bd      	mov	sp, r7
 800b32a:	b002      	add	sp, #8
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <__cvt>:
 800b33e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b340:	001f      	movs	r7, r3
 800b342:	2300      	movs	r3, #0
 800b344:	0016      	movs	r6, r2
 800b346:	b08b      	sub	sp, #44	@ 0x2c
 800b348:	429f      	cmp	r7, r3
 800b34a:	da04      	bge.n	800b356 <__cvt+0x18>
 800b34c:	2180      	movs	r1, #128	@ 0x80
 800b34e:	0609      	lsls	r1, r1, #24
 800b350:	187b      	adds	r3, r7, r1
 800b352:	001f      	movs	r7, r3
 800b354:	232d      	movs	r3, #45	@ 0x2d
 800b356:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b358:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b35a:	7013      	strb	r3, [r2, #0]
 800b35c:	2320      	movs	r3, #32
 800b35e:	2203      	movs	r2, #3
 800b360:	439d      	bics	r5, r3
 800b362:	2d46      	cmp	r5, #70	@ 0x46
 800b364:	d007      	beq.n	800b376 <__cvt+0x38>
 800b366:	002b      	movs	r3, r5
 800b368:	3b45      	subs	r3, #69	@ 0x45
 800b36a:	4259      	negs	r1, r3
 800b36c:	414b      	adcs	r3, r1
 800b36e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b370:	3a01      	subs	r2, #1
 800b372:	18cb      	adds	r3, r1, r3
 800b374:	9310      	str	r3, [sp, #64]	@ 0x40
 800b376:	ab09      	add	r3, sp, #36	@ 0x24
 800b378:	9304      	str	r3, [sp, #16]
 800b37a:	ab08      	add	r3, sp, #32
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b380:	9200      	str	r2, [sp, #0]
 800b382:	9302      	str	r3, [sp, #8]
 800b384:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b386:	0032      	movs	r2, r6
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	003b      	movs	r3, r7
 800b38c:	f000 fe9e 	bl	800c0cc <_dtoa_r>
 800b390:	0004      	movs	r4, r0
 800b392:	2d47      	cmp	r5, #71	@ 0x47
 800b394:	d11b      	bne.n	800b3ce <__cvt+0x90>
 800b396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b398:	07db      	lsls	r3, r3, #31
 800b39a:	d511      	bpl.n	800b3c0 <__cvt+0x82>
 800b39c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b39e:	18c3      	adds	r3, r0, r3
 800b3a0:	9307      	str	r3, [sp, #28]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	0030      	movs	r0, r6
 800b3a8:	0039      	movs	r1, r7
 800b3aa:	f7f5 f84b 	bl	8000444 <__aeabi_dcmpeq>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d001      	beq.n	800b3b6 <__cvt+0x78>
 800b3b2:	9b07      	ldr	r3, [sp, #28]
 800b3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3b6:	2230      	movs	r2, #48	@ 0x30
 800b3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ba:	9907      	ldr	r1, [sp, #28]
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	d320      	bcc.n	800b402 <__cvt+0xc4>
 800b3c0:	0020      	movs	r0, r4
 800b3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b3c6:	1b1b      	subs	r3, r3, r4
 800b3c8:	6013      	str	r3, [r2, #0]
 800b3ca:	b00b      	add	sp, #44	@ 0x2c
 800b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3d0:	18c3      	adds	r3, r0, r3
 800b3d2:	9307      	str	r3, [sp, #28]
 800b3d4:	2d46      	cmp	r5, #70	@ 0x46
 800b3d6:	d1e4      	bne.n	800b3a2 <__cvt+0x64>
 800b3d8:	7803      	ldrb	r3, [r0, #0]
 800b3da:	2b30      	cmp	r3, #48	@ 0x30
 800b3dc:	d10c      	bne.n	800b3f8 <__cvt+0xba>
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	0030      	movs	r0, r6
 800b3e4:	0039      	movs	r1, r7
 800b3e6:	f7f5 f82d 	bl	8000444 <__aeabi_dcmpeq>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d104      	bne.n	800b3f8 <__cvt+0xba>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b3fa:	9a07      	ldr	r2, [sp, #28]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	18d3      	adds	r3, r2, r3
 800b400:	e7ce      	b.n	800b3a0 <__cvt+0x62>
 800b402:	1c59      	adds	r1, r3, #1
 800b404:	9109      	str	r1, [sp, #36]	@ 0x24
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	e7d6      	b.n	800b3b8 <__cvt+0x7a>

0800b40a <__exponent>:
 800b40a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40c:	232b      	movs	r3, #43	@ 0x2b
 800b40e:	b085      	sub	sp, #20
 800b410:	0005      	movs	r5, r0
 800b412:	1e0c      	subs	r4, r1, #0
 800b414:	7002      	strb	r2, [r0, #0]
 800b416:	da01      	bge.n	800b41c <__exponent+0x12>
 800b418:	424c      	negs	r4, r1
 800b41a:	3302      	adds	r3, #2
 800b41c:	706b      	strb	r3, [r5, #1]
 800b41e:	2c09      	cmp	r4, #9
 800b420:	dd2c      	ble.n	800b47c <__exponent+0x72>
 800b422:	ab02      	add	r3, sp, #8
 800b424:	1dde      	adds	r6, r3, #7
 800b426:	0020      	movs	r0, r4
 800b428:	210a      	movs	r1, #10
 800b42a:	f7f4 fff5 	bl	8000418 <__aeabi_idivmod>
 800b42e:	0037      	movs	r7, r6
 800b430:	3130      	adds	r1, #48	@ 0x30
 800b432:	3e01      	subs	r6, #1
 800b434:	0020      	movs	r0, r4
 800b436:	7031      	strb	r1, [r6, #0]
 800b438:	210a      	movs	r1, #10
 800b43a:	9401      	str	r4, [sp, #4]
 800b43c:	f7f4 ff06 	bl	800024c <__divsi3>
 800b440:	9b01      	ldr	r3, [sp, #4]
 800b442:	0004      	movs	r4, r0
 800b444:	2b63      	cmp	r3, #99	@ 0x63
 800b446:	dcee      	bgt.n	800b426 <__exponent+0x1c>
 800b448:	1eba      	subs	r2, r7, #2
 800b44a:	1ca8      	adds	r0, r5, #2
 800b44c:	0001      	movs	r1, r0
 800b44e:	0013      	movs	r3, r2
 800b450:	3430      	adds	r4, #48	@ 0x30
 800b452:	7014      	strb	r4, [r2, #0]
 800b454:	ac02      	add	r4, sp, #8
 800b456:	3407      	adds	r4, #7
 800b458:	429c      	cmp	r4, r3
 800b45a:	d80a      	bhi.n	800b472 <__exponent+0x68>
 800b45c:	2300      	movs	r3, #0
 800b45e:	4294      	cmp	r4, r2
 800b460:	d303      	bcc.n	800b46a <__exponent+0x60>
 800b462:	3309      	adds	r3, #9
 800b464:	aa02      	add	r2, sp, #8
 800b466:	189b      	adds	r3, r3, r2
 800b468:	1bdb      	subs	r3, r3, r7
 800b46a:	18c0      	adds	r0, r0, r3
 800b46c:	1b40      	subs	r0, r0, r5
 800b46e:	b005      	add	sp, #20
 800b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b472:	781c      	ldrb	r4, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	700c      	strb	r4, [r1, #0]
 800b478:	3101      	adds	r1, #1
 800b47a:	e7eb      	b.n	800b454 <__exponent+0x4a>
 800b47c:	2330      	movs	r3, #48	@ 0x30
 800b47e:	18e4      	adds	r4, r4, r3
 800b480:	70ab      	strb	r3, [r5, #2]
 800b482:	1d28      	adds	r0, r5, #4
 800b484:	70ec      	strb	r4, [r5, #3]
 800b486:	e7f1      	b.n	800b46c <__exponent+0x62>

0800b488 <_printf_float>:
 800b488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48a:	b097      	sub	sp, #92	@ 0x5c
 800b48c:	000d      	movs	r5, r1
 800b48e:	920a      	str	r2, [sp, #40]	@ 0x28
 800b490:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800b492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b494:	9009      	str	r0, [sp, #36]	@ 0x24
 800b496:	f000 fd01 	bl	800be9c <_localeconv_r>
 800b49a:	6803      	ldr	r3, [r0, #0]
 800b49c:	0018      	movs	r0, r3
 800b49e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4a0:	f7f4 fe2e 	bl	8000100 <strlen>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b4a8:	9314      	str	r3, [sp, #80]	@ 0x50
 800b4aa:	7e2b      	ldrb	r3, [r5, #24]
 800b4ac:	2207      	movs	r2, #7
 800b4ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	05c9      	lsls	r1, r1, #23
 800b4ba:	d545      	bpl.n	800b548 <_printf_float+0xc0>
 800b4bc:	189b      	adds	r3, r3, r2
 800b4be:	4393      	bics	r3, r2
 800b4c0:	001a      	movs	r2, r3
 800b4c2:	3208      	adds	r2, #8
 800b4c4:	6022      	str	r2, [r4, #0]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	681e      	ldr	r6, [r3, #0]
 800b4ca:	685f      	ldr	r7, [r3, #4]
 800b4cc:	007b      	lsls	r3, r7, #1
 800b4ce:	085b      	lsrs	r3, r3, #1
 800b4d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4d2:	9610      	str	r6, [sp, #64]	@ 0x40
 800b4d4:	64ae      	str	r6, [r5, #72]	@ 0x48
 800b4d6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800b4d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b4da:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b4dc:	4ba7      	ldr	r3, [pc, #668]	@ (800b77c <_printf_float+0x2f4>)
 800b4de:	4252      	negs	r2, r2
 800b4e0:	f7f7 fcd8 	bl	8002e94 <__aeabi_dcmpun>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d131      	bne.n	800b54c <_printf_float+0xc4>
 800b4e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b4ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4ba3      	ldr	r3, [pc, #652]	@ (800b77c <_printf_float+0x2f4>)
 800b4f0:	4252      	negs	r2, r2
 800b4f2:	f7f4 ffb7 	bl	8000464 <__aeabi_dcmple>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d128      	bne.n	800b54c <_printf_float+0xc4>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	0030      	movs	r0, r6
 800b500:	0039      	movs	r1, r7
 800b502:	f7f4 ffa5 	bl	8000450 <__aeabi_dcmplt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d003      	beq.n	800b512 <_printf_float+0x8a>
 800b50a:	002b      	movs	r3, r5
 800b50c:	222d      	movs	r2, #45	@ 0x2d
 800b50e:	3343      	adds	r3, #67	@ 0x43
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b514:	4f9a      	ldr	r7, [pc, #616]	@ (800b780 <_printf_float+0x2f8>)
 800b516:	2b47      	cmp	r3, #71	@ 0x47
 800b518:	d800      	bhi.n	800b51c <_printf_float+0x94>
 800b51a:	4f9a      	ldr	r7, [pc, #616]	@ (800b784 <_printf_float+0x2fc>)
 800b51c:	2303      	movs	r3, #3
 800b51e:	2400      	movs	r4, #0
 800b520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b522:	612b      	str	r3, [r5, #16]
 800b524:	3301      	adds	r3, #1
 800b526:	439a      	bics	r2, r3
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b52c:	0029      	movs	r1, r5
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b534:	aa15      	add	r2, sp, #84	@ 0x54
 800b536:	f000 f9e5 	bl	800b904 <_printf_common>
 800b53a:	3001      	adds	r0, #1
 800b53c:	d000      	beq.n	800b540 <_printf_float+0xb8>
 800b53e:	e09e      	b.n	800b67e <_printf_float+0x1f6>
 800b540:	2001      	movs	r0, #1
 800b542:	4240      	negs	r0, r0
 800b544:	b017      	add	sp, #92	@ 0x5c
 800b546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b548:	3307      	adds	r3, #7
 800b54a:	e7b8      	b.n	800b4be <_printf_float+0x36>
 800b54c:	0032      	movs	r2, r6
 800b54e:	003b      	movs	r3, r7
 800b550:	0030      	movs	r0, r6
 800b552:	0039      	movs	r1, r7
 800b554:	f7f7 fc9e 	bl	8002e94 <__aeabi_dcmpun>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d00b      	beq.n	800b574 <_printf_float+0xec>
 800b55c:	2f00      	cmp	r7, #0
 800b55e:	da03      	bge.n	800b568 <_printf_float+0xe0>
 800b560:	002b      	movs	r3, r5
 800b562:	222d      	movs	r2, #45	@ 0x2d
 800b564:	3343      	adds	r3, #67	@ 0x43
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b56a:	4f87      	ldr	r7, [pc, #540]	@ (800b788 <_printf_float+0x300>)
 800b56c:	2b47      	cmp	r3, #71	@ 0x47
 800b56e:	d8d5      	bhi.n	800b51c <_printf_float+0x94>
 800b570:	4f86      	ldr	r7, [pc, #536]	@ (800b78c <_printf_float+0x304>)
 800b572:	e7d3      	b.n	800b51c <_printf_float+0x94>
 800b574:	2220      	movs	r2, #32
 800b576:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b578:	686b      	ldr	r3, [r5, #4]
 800b57a:	4394      	bics	r4, r2
 800b57c:	1c5a      	adds	r2, r3, #1
 800b57e:	d146      	bne.n	800b60e <_printf_float+0x186>
 800b580:	3307      	adds	r3, #7
 800b582:	606b      	str	r3, [r5, #4]
 800b584:	2380      	movs	r3, #128	@ 0x80
 800b586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	2200      	movs	r2, #0
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	9206      	str	r2, [sp, #24]
 800b592:	aa14      	add	r2, sp, #80	@ 0x50
 800b594:	9205      	str	r2, [sp, #20]
 800b596:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b598:	a90a      	add	r1, sp, #40	@ 0x28
 800b59a:	9204      	str	r2, [sp, #16]
 800b59c:	aa13      	add	r2, sp, #76	@ 0x4c
 800b59e:	9203      	str	r2, [sp, #12]
 800b5a0:	2223      	movs	r2, #35	@ 0x23
 800b5a2:	1852      	adds	r2, r2, r1
 800b5a4:	9202      	str	r2, [sp, #8]
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	686b      	ldr	r3, [r5, #4]
 800b5aa:	0032      	movs	r2, r6
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5b0:	003b      	movs	r3, r7
 800b5b2:	f7ff fec4 	bl	800b33e <__cvt>
 800b5b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b5b8:	0007      	movs	r7, r0
 800b5ba:	2c47      	cmp	r4, #71	@ 0x47
 800b5bc:	d12d      	bne.n	800b61a <_printf_float+0x192>
 800b5be:	1cd3      	adds	r3, r2, #3
 800b5c0:	db02      	blt.n	800b5c8 <_printf_float+0x140>
 800b5c2:	686b      	ldr	r3, [r5, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	dd47      	ble.n	800b658 <_printf_float+0x1d0>
 800b5c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ca:	3b02      	subs	r3, #2
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5d0:	0028      	movs	r0, r5
 800b5d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b5d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b5d6:	3901      	subs	r1, #1
 800b5d8:	3050      	adds	r0, #80	@ 0x50
 800b5da:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b5dc:	f7ff ff15 	bl	800b40a <__exponent>
 800b5e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b5e2:	0004      	movs	r4, r0
 800b5e4:	1813      	adds	r3, r2, r0
 800b5e6:	612b      	str	r3, [r5, #16]
 800b5e8:	2a01      	cmp	r2, #1
 800b5ea:	dc02      	bgt.n	800b5f2 <_printf_float+0x16a>
 800b5ec:	682a      	ldr	r2, [r5, #0]
 800b5ee:	07d2      	lsls	r2, r2, #31
 800b5f0:	d501      	bpl.n	800b5f6 <_printf_float+0x16e>
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	612b      	str	r3, [r5, #16]
 800b5f6:	2323      	movs	r3, #35	@ 0x23
 800b5f8:	aa0a      	add	r2, sp, #40	@ 0x28
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d100      	bne.n	800b604 <_printf_float+0x17c>
 800b602:	e792      	b.n	800b52a <_printf_float+0xa2>
 800b604:	002b      	movs	r3, r5
 800b606:	222d      	movs	r2, #45	@ 0x2d
 800b608:	3343      	adds	r3, #67	@ 0x43
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	e78d      	b.n	800b52a <_printf_float+0xa2>
 800b60e:	2c47      	cmp	r4, #71	@ 0x47
 800b610:	d1b8      	bne.n	800b584 <_printf_float+0xfc>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1b6      	bne.n	800b584 <_printf_float+0xfc>
 800b616:	3301      	adds	r3, #1
 800b618:	e7b3      	b.n	800b582 <_printf_float+0xfa>
 800b61a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b61c:	2b65      	cmp	r3, #101	@ 0x65
 800b61e:	d9d7      	bls.n	800b5d0 <_printf_float+0x148>
 800b620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b622:	2b66      	cmp	r3, #102	@ 0x66
 800b624:	d11a      	bne.n	800b65c <_printf_float+0x1d4>
 800b626:	686b      	ldr	r3, [r5, #4]
 800b628:	2a00      	cmp	r2, #0
 800b62a:	dd09      	ble.n	800b640 <_printf_float+0x1b8>
 800b62c:	612a      	str	r2, [r5, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <_printf_float+0x1b0>
 800b632:	6829      	ldr	r1, [r5, #0]
 800b634:	07c9      	lsls	r1, r1, #31
 800b636:	d50b      	bpl.n	800b650 <_printf_float+0x1c8>
 800b638:	3301      	adds	r3, #1
 800b63a:	189b      	adds	r3, r3, r2
 800b63c:	612b      	str	r3, [r5, #16]
 800b63e:	e007      	b.n	800b650 <_printf_float+0x1c8>
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <_printf_float+0x1c4>
 800b644:	2201      	movs	r2, #1
 800b646:	6829      	ldr	r1, [r5, #0]
 800b648:	4211      	tst	r1, r2
 800b64a:	d000      	beq.n	800b64e <_printf_float+0x1c6>
 800b64c:	1c9a      	adds	r2, r3, #2
 800b64e:	612a      	str	r2, [r5, #16]
 800b650:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b652:	2400      	movs	r4, #0
 800b654:	65ab      	str	r3, [r5, #88]	@ 0x58
 800b656:	e7ce      	b.n	800b5f6 <_printf_float+0x16e>
 800b658:	2367      	movs	r3, #103	@ 0x67
 800b65a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b65c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b65e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b660:	4299      	cmp	r1, r3
 800b662:	db06      	blt.n	800b672 <_printf_float+0x1ea>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	6129      	str	r1, [r5, #16]
 800b668:	07db      	lsls	r3, r3, #31
 800b66a:	d5f1      	bpl.n	800b650 <_printf_float+0x1c8>
 800b66c:	3101      	adds	r1, #1
 800b66e:	6129      	str	r1, [r5, #16]
 800b670:	e7ee      	b.n	800b650 <_printf_float+0x1c8>
 800b672:	2201      	movs	r2, #1
 800b674:	2900      	cmp	r1, #0
 800b676:	dce0      	bgt.n	800b63a <_printf_float+0x1b2>
 800b678:	1892      	adds	r2, r2, r2
 800b67a:	1a52      	subs	r2, r2, r1
 800b67c:	e7dd      	b.n	800b63a <_printf_float+0x1b2>
 800b67e:	682a      	ldr	r2, [r5, #0]
 800b680:	0553      	lsls	r3, r2, #21
 800b682:	d408      	bmi.n	800b696 <_printf_float+0x20e>
 800b684:	692b      	ldr	r3, [r5, #16]
 800b686:	003a      	movs	r2, r7
 800b688:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b68c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b68e:	47a0      	blx	r4
 800b690:	3001      	adds	r0, #1
 800b692:	d129      	bne.n	800b6e8 <_printf_float+0x260>
 800b694:	e754      	b.n	800b540 <_printf_float+0xb8>
 800b696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b698:	2b65      	cmp	r3, #101	@ 0x65
 800b69a:	d800      	bhi.n	800b69e <_printf_float+0x216>
 800b69c:	e0db      	b.n	800b856 <_printf_float+0x3ce>
 800b69e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b6a0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f7f4 fecd 	bl	8000444 <__aeabi_dcmpeq>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d033      	beq.n	800b716 <_printf_float+0x28e>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4a37      	ldr	r2, [pc, #220]	@ (800b790 <_printf_float+0x308>)
 800b6b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b6b8:	47a0      	blx	r4
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d100      	bne.n	800b6c0 <_printf_float+0x238>
 800b6be:	e73f      	b.n	800b540 <_printf_float+0xb8>
 800b6c0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b6c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6c4:	42b3      	cmp	r3, r6
 800b6c6:	db02      	blt.n	800b6ce <_printf_float+0x246>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	07db      	lsls	r3, r3, #31
 800b6cc:	d50c      	bpl.n	800b6e8 <_printf_float+0x260>
 800b6ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6d8:	47a0      	blx	r4
 800b6da:	2400      	movs	r4, #0
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d100      	bne.n	800b6e2 <_printf_float+0x25a>
 800b6e0:	e72e      	b.n	800b540 <_printf_float+0xb8>
 800b6e2:	1e73      	subs	r3, r6, #1
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	dc0a      	bgt.n	800b6fe <_printf_float+0x276>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	079b      	lsls	r3, r3, #30
 800b6ec:	d500      	bpl.n	800b6f0 <_printf_float+0x268>
 800b6ee:	e106      	b.n	800b8fe <_printf_float+0x476>
 800b6f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b6f2:	68e8      	ldr	r0, [r5, #12]
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	db00      	blt.n	800b6fa <_printf_float+0x272>
 800b6f8:	e724      	b.n	800b544 <_printf_float+0xbc>
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	e722      	b.n	800b544 <_printf_float+0xbc>
 800b6fe:	002a      	movs	r2, r5
 800b700:	2301      	movs	r3, #1
 800b702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b704:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b706:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b708:	321a      	adds	r2, #26
 800b70a:	47b8      	blx	r7
 800b70c:	3001      	adds	r0, #1
 800b70e:	d100      	bne.n	800b712 <_printf_float+0x28a>
 800b710:	e716      	b.n	800b540 <_printf_float+0xb8>
 800b712:	3401      	adds	r4, #1
 800b714:	e7e5      	b.n	800b6e2 <_printf_float+0x25a>
 800b716:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dc3b      	bgt.n	800b794 <_printf_float+0x30c>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4a1c      	ldr	r2, [pc, #112]	@ (800b790 <_printf_float+0x308>)
 800b720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b724:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b726:	47a0      	blx	r4
 800b728:	3001      	adds	r0, #1
 800b72a:	d100      	bne.n	800b72e <_printf_float+0x2a6>
 800b72c:	e708      	b.n	800b540 <_printf_float+0xb8>
 800b72e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b730:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b732:	4333      	orrs	r3, r6
 800b734:	d102      	bne.n	800b73c <_printf_float+0x2b4>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	07db      	lsls	r3, r3, #31
 800b73a:	d5d5      	bpl.n	800b6e8 <_printf_float+0x260>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b744:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b746:	47a0      	blx	r4
 800b748:	2300      	movs	r3, #0
 800b74a:	3001      	adds	r0, #1
 800b74c:	d100      	bne.n	800b750 <_printf_float+0x2c8>
 800b74e:	e6f7      	b.n	800b540 <_printf_float+0xb8>
 800b750:	930c      	str	r3, [sp, #48]	@ 0x30
 800b752:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b754:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b756:	425b      	negs	r3, r3
 800b758:	4293      	cmp	r3, r2
 800b75a:	dc01      	bgt.n	800b760 <_printf_float+0x2d8>
 800b75c:	0033      	movs	r3, r6
 800b75e:	e792      	b.n	800b686 <_printf_float+0x1fe>
 800b760:	002a      	movs	r2, r5
 800b762:	2301      	movs	r3, #1
 800b764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b768:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b76a:	321a      	adds	r2, #26
 800b76c:	47a0      	blx	r4
 800b76e:	3001      	adds	r0, #1
 800b770:	d100      	bne.n	800b774 <_printf_float+0x2ec>
 800b772:	e6e5      	b.n	800b540 <_printf_float+0xb8>
 800b774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b776:	3301      	adds	r3, #1
 800b778:	e7ea      	b.n	800b750 <_printf_float+0x2c8>
 800b77a:	46c0      	nop			@ (mov r8, r8)
 800b77c:	7fefffff 	.word	0x7fefffff
 800b780:	0800e4a0 	.word	0x0800e4a0
 800b784:	0800e49c 	.word	0x0800e49c
 800b788:	0800e4a8 	.word	0x0800e4a8
 800b78c:	0800e4a4 	.word	0x0800e4a4
 800b790:	0800e4ac 	.word	0x0800e4ac
 800b794:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b796:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b798:	930c      	str	r3, [sp, #48]	@ 0x30
 800b79a:	429e      	cmp	r6, r3
 800b79c:	dd00      	ble.n	800b7a0 <_printf_float+0x318>
 800b79e:	001e      	movs	r6, r3
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	dc31      	bgt.n	800b808 <_printf_float+0x380>
 800b7a4:	43f3      	mvns	r3, r6
 800b7a6:	2400      	movs	r4, #0
 800b7a8:	17db      	asrs	r3, r3, #31
 800b7aa:	4033      	ands	r3, r6
 800b7ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7ae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7b2:	1af3      	subs	r3, r6, r3
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	dc30      	bgt.n	800b81a <_printf_float+0x392>
 800b7b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	dc38      	bgt.n	800b832 <_printf_float+0x3aa>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	07db      	lsls	r3, r3, #31
 800b7c4:	d435      	bmi.n	800b832 <_printf_float+0x3aa>
 800b7c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b7c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7cc:	1b9b      	subs	r3, r3, r6
 800b7ce:	1b14      	subs	r4, r2, r4
 800b7d0:	429c      	cmp	r4, r3
 800b7d2:	dd00      	ble.n	800b7d6 <_printf_float+0x34e>
 800b7d4:	001c      	movs	r4, r3
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	dc34      	bgt.n	800b844 <_printf_float+0x3bc>
 800b7da:	43e3      	mvns	r3, r4
 800b7dc:	2600      	movs	r6, #0
 800b7de:	17db      	asrs	r3, r3, #31
 800b7e0:	401c      	ands	r4, r3
 800b7e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	1b1b      	subs	r3, r3, r4
 800b7ea:	42b3      	cmp	r3, r6
 800b7ec:	dc00      	bgt.n	800b7f0 <_printf_float+0x368>
 800b7ee:	e77b      	b.n	800b6e8 <_printf_float+0x260>
 800b7f0:	002a      	movs	r2, r5
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b7fa:	321a      	adds	r2, #26
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	d100      	bne.n	800b804 <_printf_float+0x37c>
 800b802:	e69d      	b.n	800b540 <_printf_float+0xb8>
 800b804:	3601      	adds	r6, #1
 800b806:	e7ec      	b.n	800b7e2 <_printf_float+0x35a>
 800b808:	0033      	movs	r3, r6
 800b80a:	003a      	movs	r2, r7
 800b80c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b810:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b812:	47a0      	blx	r4
 800b814:	3001      	adds	r0, #1
 800b816:	d1c5      	bne.n	800b7a4 <_printf_float+0x31c>
 800b818:	e692      	b.n	800b540 <_printf_float+0xb8>
 800b81a:	002a      	movs	r2, r5
 800b81c:	2301      	movs	r3, #1
 800b81e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b820:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b822:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b824:	321a      	adds	r2, #26
 800b826:	47b0      	blx	r6
 800b828:	3001      	adds	r0, #1
 800b82a:	d100      	bne.n	800b82e <_printf_float+0x3a6>
 800b82c:	e688      	b.n	800b540 <_printf_float+0xb8>
 800b82e:	3401      	adds	r4, #1
 800b830:	e7bd      	b.n	800b7ae <_printf_float+0x326>
 800b832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b838:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b83a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b83c:	47a0      	blx	r4
 800b83e:	3001      	adds	r0, #1
 800b840:	d1c1      	bne.n	800b7c6 <_printf_float+0x33e>
 800b842:	e67d      	b.n	800b540 <_printf_float+0xb8>
 800b844:	19ba      	adds	r2, r7, r6
 800b846:	0023      	movs	r3, r4
 800b848:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b84c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b84e:	47b0      	blx	r6
 800b850:	3001      	adds	r0, #1
 800b852:	d1c2      	bne.n	800b7da <_printf_float+0x352>
 800b854:	e674      	b.n	800b540 <_printf_float+0xb8>
 800b856:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b858:	930c      	str	r3, [sp, #48]	@ 0x30
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	dc02      	bgt.n	800b864 <_printf_float+0x3dc>
 800b85e:	2301      	movs	r3, #1
 800b860:	421a      	tst	r2, r3
 800b862:	d039      	beq.n	800b8d8 <_printf_float+0x450>
 800b864:	2301      	movs	r3, #1
 800b866:	003a      	movs	r2, r7
 800b868:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b86c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b86e:	47b0      	blx	r6
 800b870:	3001      	adds	r0, #1
 800b872:	d100      	bne.n	800b876 <_printf_float+0x3ee>
 800b874:	e664      	b.n	800b540 <_printf_float+0xb8>
 800b876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b87a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b87c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b87e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b880:	47b0      	blx	r6
 800b882:	3001      	adds	r0, #1
 800b884:	d100      	bne.n	800b888 <_printf_float+0x400>
 800b886:	e65b      	b.n	800b540 <_printf_float+0xb8>
 800b888:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b88a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b88c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b88e:	2200      	movs	r2, #0
 800b890:	3b01      	subs	r3, #1
 800b892:	930c      	str	r3, [sp, #48]	@ 0x30
 800b894:	2300      	movs	r3, #0
 800b896:	f7f4 fdd5 	bl	8000444 <__aeabi_dcmpeq>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d11a      	bne.n	800b8d4 <_printf_float+0x44c>
 800b89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8a0:	1c7a      	adds	r2, r7, #1
 800b8a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8a6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b8a8:	47b0      	blx	r6
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d10e      	bne.n	800b8cc <_printf_float+0x444>
 800b8ae:	e647      	b.n	800b540 <_printf_float+0xb8>
 800b8b0:	002a      	movs	r2, r5
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b8ba:	321a      	adds	r2, #26
 800b8bc:	47b8      	blx	r7
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d100      	bne.n	800b8c4 <_printf_float+0x43c>
 800b8c2:	e63d      	b.n	800b540 <_printf_float+0xb8>
 800b8c4:	3601      	adds	r6, #1
 800b8c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8c8:	429e      	cmp	r6, r3
 800b8ca:	dbf1      	blt.n	800b8b0 <_printf_float+0x428>
 800b8cc:	002a      	movs	r2, r5
 800b8ce:	0023      	movs	r3, r4
 800b8d0:	3250      	adds	r2, #80	@ 0x50
 800b8d2:	e6d9      	b.n	800b688 <_printf_float+0x200>
 800b8d4:	2600      	movs	r6, #0
 800b8d6:	e7f6      	b.n	800b8c6 <_printf_float+0x43e>
 800b8d8:	003a      	movs	r2, r7
 800b8da:	e7e2      	b.n	800b8a2 <_printf_float+0x41a>
 800b8dc:	002a      	movs	r2, r5
 800b8de:	2301      	movs	r3, #1
 800b8e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b8e6:	3219      	adds	r2, #25
 800b8e8:	47b0      	blx	r6
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	d100      	bne.n	800b8f0 <_printf_float+0x468>
 800b8ee:	e627      	b.n	800b540 <_printf_float+0xb8>
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	68eb      	ldr	r3, [r5, #12]
 800b8f4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b8f6:	1a9b      	subs	r3, r3, r2
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	dcef      	bgt.n	800b8dc <_printf_float+0x454>
 800b8fc:	e6f8      	b.n	800b6f0 <_printf_float+0x268>
 800b8fe:	2400      	movs	r4, #0
 800b900:	e7f7      	b.n	800b8f2 <_printf_float+0x46a>
 800b902:	46c0      	nop			@ (mov r8, r8)

0800b904 <_printf_common>:
 800b904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b906:	0016      	movs	r6, r2
 800b908:	9301      	str	r3, [sp, #4]
 800b90a:	688a      	ldr	r2, [r1, #8]
 800b90c:	690b      	ldr	r3, [r1, #16]
 800b90e:	000c      	movs	r4, r1
 800b910:	9000      	str	r0, [sp, #0]
 800b912:	4293      	cmp	r3, r2
 800b914:	da00      	bge.n	800b918 <_printf_common+0x14>
 800b916:	0013      	movs	r3, r2
 800b918:	0022      	movs	r2, r4
 800b91a:	6033      	str	r3, [r6, #0]
 800b91c:	3243      	adds	r2, #67	@ 0x43
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	2a00      	cmp	r2, #0
 800b922:	d001      	beq.n	800b928 <_printf_common+0x24>
 800b924:	3301      	adds	r3, #1
 800b926:	6033      	str	r3, [r6, #0]
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	069b      	lsls	r3, r3, #26
 800b92c:	d502      	bpl.n	800b934 <_printf_common+0x30>
 800b92e:	6833      	ldr	r3, [r6, #0]
 800b930:	3302      	adds	r3, #2
 800b932:	6033      	str	r3, [r6, #0]
 800b934:	6822      	ldr	r2, [r4, #0]
 800b936:	2306      	movs	r3, #6
 800b938:	0015      	movs	r5, r2
 800b93a:	401d      	ands	r5, r3
 800b93c:	421a      	tst	r2, r3
 800b93e:	d027      	beq.n	800b990 <_printf_common+0x8c>
 800b940:	0023      	movs	r3, r4
 800b942:	3343      	adds	r3, #67	@ 0x43
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	1e5a      	subs	r2, r3, #1
 800b948:	4193      	sbcs	r3, r2
 800b94a:	6822      	ldr	r2, [r4, #0]
 800b94c:	0692      	lsls	r2, r2, #26
 800b94e:	d430      	bmi.n	800b9b2 <_printf_common+0xae>
 800b950:	0022      	movs	r2, r4
 800b952:	9901      	ldr	r1, [sp, #4]
 800b954:	9800      	ldr	r0, [sp, #0]
 800b956:	9d08      	ldr	r5, [sp, #32]
 800b958:	3243      	adds	r2, #67	@ 0x43
 800b95a:	47a8      	blx	r5
 800b95c:	3001      	adds	r0, #1
 800b95e:	d025      	beq.n	800b9ac <_printf_common+0xa8>
 800b960:	2206      	movs	r2, #6
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	2500      	movs	r5, #0
 800b966:	4013      	ands	r3, r2
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d105      	bne.n	800b978 <_printf_common+0x74>
 800b96c:	6833      	ldr	r3, [r6, #0]
 800b96e:	68e5      	ldr	r5, [r4, #12]
 800b970:	1aed      	subs	r5, r5, r3
 800b972:	43eb      	mvns	r3, r5
 800b974:	17db      	asrs	r3, r3, #31
 800b976:	401d      	ands	r5, r3
 800b978:	68a3      	ldr	r3, [r4, #8]
 800b97a:	6922      	ldr	r2, [r4, #16]
 800b97c:	4293      	cmp	r3, r2
 800b97e:	dd01      	ble.n	800b984 <_printf_common+0x80>
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	18ed      	adds	r5, r5, r3
 800b984:	2600      	movs	r6, #0
 800b986:	42b5      	cmp	r5, r6
 800b988:	d120      	bne.n	800b9cc <_printf_common+0xc8>
 800b98a:	2000      	movs	r0, #0
 800b98c:	e010      	b.n	800b9b0 <_printf_common+0xac>
 800b98e:	3501      	adds	r5, #1
 800b990:	68e3      	ldr	r3, [r4, #12]
 800b992:	6832      	ldr	r2, [r6, #0]
 800b994:	1a9b      	subs	r3, r3, r2
 800b996:	42ab      	cmp	r3, r5
 800b998:	ddd2      	ble.n	800b940 <_printf_common+0x3c>
 800b99a:	0022      	movs	r2, r4
 800b99c:	2301      	movs	r3, #1
 800b99e:	9901      	ldr	r1, [sp, #4]
 800b9a0:	9800      	ldr	r0, [sp, #0]
 800b9a2:	9f08      	ldr	r7, [sp, #32]
 800b9a4:	3219      	adds	r2, #25
 800b9a6:	47b8      	blx	r7
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1f0      	bne.n	800b98e <_printf_common+0x8a>
 800b9ac:	2001      	movs	r0, #1
 800b9ae:	4240      	negs	r0, r0
 800b9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9b2:	2030      	movs	r0, #48	@ 0x30
 800b9b4:	18e1      	adds	r1, r4, r3
 800b9b6:	3143      	adds	r1, #67	@ 0x43
 800b9b8:	7008      	strb	r0, [r1, #0]
 800b9ba:	0021      	movs	r1, r4
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	3145      	adds	r1, #69	@ 0x45
 800b9c0:	7809      	ldrb	r1, [r1, #0]
 800b9c2:	18a2      	adds	r2, r4, r2
 800b9c4:	3243      	adds	r2, #67	@ 0x43
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	7011      	strb	r1, [r2, #0]
 800b9ca:	e7c1      	b.n	800b950 <_printf_common+0x4c>
 800b9cc:	0022      	movs	r2, r4
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	9901      	ldr	r1, [sp, #4]
 800b9d2:	9800      	ldr	r0, [sp, #0]
 800b9d4:	9f08      	ldr	r7, [sp, #32]
 800b9d6:	321a      	adds	r2, #26
 800b9d8:	47b8      	blx	r7
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d0e6      	beq.n	800b9ac <_printf_common+0xa8>
 800b9de:	3601      	adds	r6, #1
 800b9e0:	e7d1      	b.n	800b986 <_printf_common+0x82>
	...

0800b9e4 <_printf_i>:
 800b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e6:	b08b      	sub	sp, #44	@ 0x2c
 800b9e8:	9206      	str	r2, [sp, #24]
 800b9ea:	000a      	movs	r2, r1
 800b9ec:	3243      	adds	r2, #67	@ 0x43
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	9005      	str	r0, [sp, #20]
 800b9f2:	9203      	str	r2, [sp, #12]
 800b9f4:	7e0a      	ldrb	r2, [r1, #24]
 800b9f6:	000c      	movs	r4, r1
 800b9f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9fa:	2a78      	cmp	r2, #120	@ 0x78
 800b9fc:	d809      	bhi.n	800ba12 <_printf_i+0x2e>
 800b9fe:	2a62      	cmp	r2, #98	@ 0x62
 800ba00:	d80b      	bhi.n	800ba1a <_printf_i+0x36>
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	d100      	bne.n	800ba08 <_printf_i+0x24>
 800ba06:	e0ba      	b.n	800bb7e <_printf_i+0x19a>
 800ba08:	497a      	ldr	r1, [pc, #488]	@ (800bbf4 <_printf_i+0x210>)
 800ba0a:	9104      	str	r1, [sp, #16]
 800ba0c:	2a58      	cmp	r2, #88	@ 0x58
 800ba0e:	d100      	bne.n	800ba12 <_printf_i+0x2e>
 800ba10:	e08e      	b.n	800bb30 <_printf_i+0x14c>
 800ba12:	0025      	movs	r5, r4
 800ba14:	3542      	adds	r5, #66	@ 0x42
 800ba16:	702a      	strb	r2, [r5, #0]
 800ba18:	e022      	b.n	800ba60 <_printf_i+0x7c>
 800ba1a:	0010      	movs	r0, r2
 800ba1c:	3863      	subs	r0, #99	@ 0x63
 800ba1e:	2815      	cmp	r0, #21
 800ba20:	d8f7      	bhi.n	800ba12 <_printf_i+0x2e>
 800ba22:	f7f4 fb7f 	bl	8000124 <__gnu_thumb1_case_shi>
 800ba26:	0016      	.short	0x0016
 800ba28:	fff6001f 	.word	0xfff6001f
 800ba2c:	fff6fff6 	.word	0xfff6fff6
 800ba30:	001ffff6 	.word	0x001ffff6
 800ba34:	fff6fff6 	.word	0xfff6fff6
 800ba38:	fff6fff6 	.word	0xfff6fff6
 800ba3c:	0036009f 	.word	0x0036009f
 800ba40:	fff6007e 	.word	0xfff6007e
 800ba44:	00b0fff6 	.word	0x00b0fff6
 800ba48:	0036fff6 	.word	0x0036fff6
 800ba4c:	fff6fff6 	.word	0xfff6fff6
 800ba50:	0082      	.short	0x0082
 800ba52:	0025      	movs	r5, r4
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	3542      	adds	r5, #66	@ 0x42
 800ba58:	1d11      	adds	r1, r2, #4
 800ba5a:	6019      	str	r1, [r3, #0]
 800ba5c:	6813      	ldr	r3, [r2, #0]
 800ba5e:	702b      	strb	r3, [r5, #0]
 800ba60:	2301      	movs	r3, #1
 800ba62:	e09e      	b.n	800bba2 <_printf_i+0x1be>
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	6809      	ldr	r1, [r1, #0]
 800ba68:	1d02      	adds	r2, r0, #4
 800ba6a:	060d      	lsls	r5, r1, #24
 800ba6c:	d50b      	bpl.n	800ba86 <_printf_i+0xa2>
 800ba6e:	6806      	ldr	r6, [r0, #0]
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	2e00      	cmp	r6, #0
 800ba74:	da03      	bge.n	800ba7e <_printf_i+0x9a>
 800ba76:	232d      	movs	r3, #45	@ 0x2d
 800ba78:	9a03      	ldr	r2, [sp, #12]
 800ba7a:	4276      	negs	r6, r6
 800ba7c:	7013      	strb	r3, [r2, #0]
 800ba7e:	4b5d      	ldr	r3, [pc, #372]	@ (800bbf4 <_printf_i+0x210>)
 800ba80:	270a      	movs	r7, #10
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	e018      	b.n	800bab8 <_printf_i+0xd4>
 800ba86:	6806      	ldr	r6, [r0, #0]
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	0649      	lsls	r1, r1, #25
 800ba8c:	d5f1      	bpl.n	800ba72 <_printf_i+0x8e>
 800ba8e:	b236      	sxth	r6, r6
 800ba90:	e7ef      	b.n	800ba72 <_printf_i+0x8e>
 800ba92:	6808      	ldr	r0, [r1, #0]
 800ba94:	6819      	ldr	r1, [r3, #0]
 800ba96:	c940      	ldmia	r1!, {r6}
 800ba98:	0605      	lsls	r5, r0, #24
 800ba9a:	d402      	bmi.n	800baa2 <_printf_i+0xbe>
 800ba9c:	0640      	lsls	r0, r0, #25
 800ba9e:	d500      	bpl.n	800baa2 <_printf_i+0xbe>
 800baa0:	b2b6      	uxth	r6, r6
 800baa2:	6019      	str	r1, [r3, #0]
 800baa4:	4b53      	ldr	r3, [pc, #332]	@ (800bbf4 <_printf_i+0x210>)
 800baa6:	270a      	movs	r7, #10
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	2a6f      	cmp	r2, #111	@ 0x6f
 800baac:	d100      	bne.n	800bab0 <_printf_i+0xcc>
 800baae:	3f02      	subs	r7, #2
 800bab0:	0023      	movs	r3, r4
 800bab2:	2200      	movs	r2, #0
 800bab4:	3343      	adds	r3, #67	@ 0x43
 800bab6:	701a      	strb	r2, [r3, #0]
 800bab8:	6863      	ldr	r3, [r4, #4]
 800baba:	60a3      	str	r3, [r4, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	db06      	blt.n	800bace <_printf_i+0xea>
 800bac0:	2104      	movs	r1, #4
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	9d03      	ldr	r5, [sp, #12]
 800bac6:	438a      	bics	r2, r1
 800bac8:	6022      	str	r2, [r4, #0]
 800baca:	4333      	orrs	r3, r6
 800bacc:	d00c      	beq.n	800bae8 <_printf_i+0x104>
 800bace:	9d03      	ldr	r5, [sp, #12]
 800bad0:	0030      	movs	r0, r6
 800bad2:	0039      	movs	r1, r7
 800bad4:	f7f4 fbb6 	bl	8000244 <__aeabi_uidivmod>
 800bad8:	9b04      	ldr	r3, [sp, #16]
 800bada:	3d01      	subs	r5, #1
 800badc:	5c5b      	ldrb	r3, [r3, r1]
 800bade:	702b      	strb	r3, [r5, #0]
 800bae0:	0033      	movs	r3, r6
 800bae2:	0006      	movs	r6, r0
 800bae4:	429f      	cmp	r7, r3
 800bae6:	d9f3      	bls.n	800bad0 <_printf_i+0xec>
 800bae8:	2f08      	cmp	r7, #8
 800baea:	d109      	bne.n	800bb00 <_printf_i+0x11c>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	07db      	lsls	r3, r3, #31
 800baf0:	d506      	bpl.n	800bb00 <_printf_i+0x11c>
 800baf2:	6862      	ldr	r2, [r4, #4]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	dc02      	bgt.n	800bb00 <_printf_i+0x11c>
 800bafa:	2330      	movs	r3, #48	@ 0x30
 800bafc:	3d01      	subs	r5, #1
 800bafe:	702b      	strb	r3, [r5, #0]
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	1b5b      	subs	r3, r3, r5
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	0021      	movs	r1, r4
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	9805      	ldr	r0, [sp, #20]
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	aa09      	add	r2, sp, #36	@ 0x24
 800bb12:	f7ff fef7 	bl	800b904 <_printf_common>
 800bb16:	3001      	adds	r0, #1
 800bb18:	d148      	bne.n	800bbac <_printf_i+0x1c8>
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	4240      	negs	r0, r0
 800bb1e:	b00b      	add	sp, #44	@ 0x2c
 800bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb22:	2220      	movs	r2, #32
 800bb24:	6809      	ldr	r1, [r1, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	6022      	str	r2, [r4, #0]
 800bb2a:	2278      	movs	r2, #120	@ 0x78
 800bb2c:	4932      	ldr	r1, [pc, #200]	@ (800bbf8 <_printf_i+0x214>)
 800bb2e:	9104      	str	r1, [sp, #16]
 800bb30:	0021      	movs	r1, r4
 800bb32:	3145      	adds	r1, #69	@ 0x45
 800bb34:	700a      	strb	r2, [r1, #0]
 800bb36:	6819      	ldr	r1, [r3, #0]
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	c940      	ldmia	r1!, {r6}
 800bb3c:	0610      	lsls	r0, r2, #24
 800bb3e:	d402      	bmi.n	800bb46 <_printf_i+0x162>
 800bb40:	0650      	lsls	r0, r2, #25
 800bb42:	d500      	bpl.n	800bb46 <_printf_i+0x162>
 800bb44:	b2b6      	uxth	r6, r6
 800bb46:	6019      	str	r1, [r3, #0]
 800bb48:	07d3      	lsls	r3, r2, #31
 800bb4a:	d502      	bpl.n	800bb52 <_printf_i+0x16e>
 800bb4c:	2320      	movs	r3, #32
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d001      	beq.n	800bb5a <_printf_i+0x176>
 800bb56:	2710      	movs	r7, #16
 800bb58:	e7aa      	b.n	800bab0 <_printf_i+0xcc>
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	4393      	bics	r3, r2
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	e7f8      	b.n	800bb56 <_printf_i+0x172>
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	680d      	ldr	r5, [r1, #0]
 800bb68:	1d10      	adds	r0, r2, #4
 800bb6a:	6949      	ldr	r1, [r1, #20]
 800bb6c:	6018      	str	r0, [r3, #0]
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	062e      	lsls	r6, r5, #24
 800bb72:	d501      	bpl.n	800bb78 <_printf_i+0x194>
 800bb74:	6019      	str	r1, [r3, #0]
 800bb76:	e002      	b.n	800bb7e <_printf_i+0x19a>
 800bb78:	066d      	lsls	r5, r5, #25
 800bb7a:	d5fb      	bpl.n	800bb74 <_printf_i+0x190>
 800bb7c:	8019      	strh	r1, [r3, #0]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9d03      	ldr	r5, [sp, #12]
 800bb82:	6123      	str	r3, [r4, #16]
 800bb84:	e7bf      	b.n	800bb06 <_printf_i+0x122>
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	1d11      	adds	r1, r2, #4
 800bb8a:	6019      	str	r1, [r3, #0]
 800bb8c:	6815      	ldr	r5, [r2, #0]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	0028      	movs	r0, r5
 800bb92:	6862      	ldr	r2, [r4, #4]
 800bb94:	f000 fa09 	bl	800bfaa <memchr>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d001      	beq.n	800bba0 <_printf_i+0x1bc>
 800bb9c:	1b40      	subs	r0, r0, r5
 800bb9e:	6060      	str	r0, [r4, #4]
 800bba0:	6863      	ldr	r3, [r4, #4]
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	2300      	movs	r3, #0
 800bba6:	9a03      	ldr	r2, [sp, #12]
 800bba8:	7013      	strb	r3, [r2, #0]
 800bbaa:	e7ac      	b.n	800bb06 <_printf_i+0x122>
 800bbac:	002a      	movs	r2, r5
 800bbae:	6923      	ldr	r3, [r4, #16]
 800bbb0:	9906      	ldr	r1, [sp, #24]
 800bbb2:	9805      	ldr	r0, [sp, #20]
 800bbb4:	9d07      	ldr	r5, [sp, #28]
 800bbb6:	47a8      	blx	r5
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d0ae      	beq.n	800bb1a <_printf_i+0x136>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	079b      	lsls	r3, r3, #30
 800bbc0:	d415      	bmi.n	800bbee <_printf_i+0x20a>
 800bbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc4:	68e0      	ldr	r0, [r4, #12]
 800bbc6:	4298      	cmp	r0, r3
 800bbc8:	daa9      	bge.n	800bb1e <_printf_i+0x13a>
 800bbca:	0018      	movs	r0, r3
 800bbcc:	e7a7      	b.n	800bb1e <_printf_i+0x13a>
 800bbce:	0022      	movs	r2, r4
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	9906      	ldr	r1, [sp, #24]
 800bbd4:	9805      	ldr	r0, [sp, #20]
 800bbd6:	9e07      	ldr	r6, [sp, #28]
 800bbd8:	3219      	adds	r2, #25
 800bbda:	47b0      	blx	r6
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d09c      	beq.n	800bb1a <_printf_i+0x136>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbe6:	1a9b      	subs	r3, r3, r2
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dcf0      	bgt.n	800bbce <_printf_i+0x1ea>
 800bbec:	e7e9      	b.n	800bbc2 <_printf_i+0x1de>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	e7f7      	b.n	800bbe2 <_printf_i+0x1fe>
 800bbf2:	46c0      	nop			@ (mov r8, r8)
 800bbf4:	0800e4ae 	.word	0x0800e4ae
 800bbf8:	0800e4bf 	.word	0x0800e4bf

0800bbfc <std>:
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	b510      	push	{r4, lr}
 800bc00:	0004      	movs	r4, r0
 800bc02:	6003      	str	r3, [r0, #0]
 800bc04:	6043      	str	r3, [r0, #4]
 800bc06:	6083      	str	r3, [r0, #8]
 800bc08:	8181      	strh	r1, [r0, #12]
 800bc0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc0c:	81c2      	strh	r2, [r0, #14]
 800bc0e:	6103      	str	r3, [r0, #16]
 800bc10:	6143      	str	r3, [r0, #20]
 800bc12:	6183      	str	r3, [r0, #24]
 800bc14:	0019      	movs	r1, r3
 800bc16:	2208      	movs	r2, #8
 800bc18:	305c      	adds	r0, #92	@ 0x5c
 800bc1a:	f000 f921 	bl	800be60 <memset>
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc4c <std+0x50>)
 800bc20:	6224      	str	r4, [r4, #32]
 800bc22:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc24:	4b0a      	ldr	r3, [pc, #40]	@ (800bc50 <std+0x54>)
 800bc26:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc28:	4b0a      	ldr	r3, [pc, #40]	@ (800bc54 <std+0x58>)
 800bc2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc58 <std+0x5c>)
 800bc2e:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc30:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <std+0x60>)
 800bc32:	429c      	cmp	r4, r3
 800bc34:	d005      	beq.n	800bc42 <std+0x46>
 800bc36:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <std+0x64>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	d002      	beq.n	800bc42 <std+0x46>
 800bc3c:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <std+0x68>)
 800bc3e:	429c      	cmp	r4, r3
 800bc40:	d103      	bne.n	800bc4a <std+0x4e>
 800bc42:	0020      	movs	r0, r4
 800bc44:	3058      	adds	r0, #88	@ 0x58
 800bc46:	f000 f9a5 	bl	800bf94 <__retarget_lock_init_recursive>
 800bc4a:	bd10      	pop	{r4, pc}
 800bc4c:	0800bdc9 	.word	0x0800bdc9
 800bc50:	0800bdf1 	.word	0x0800bdf1
 800bc54:	0800be29 	.word	0x0800be29
 800bc58:	0800be55 	.word	0x0800be55
 800bc5c:	20000614 	.word	0x20000614
 800bc60:	2000067c 	.word	0x2000067c
 800bc64:	200006e4 	.word	0x200006e4

0800bc68 <stdio_exit_handler>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	4a03      	ldr	r2, [pc, #12]	@ (800bc78 <stdio_exit_handler+0x10>)
 800bc6c:	4903      	ldr	r1, [pc, #12]	@ (800bc7c <stdio_exit_handler+0x14>)
 800bc6e:	4804      	ldr	r0, [pc, #16]	@ (800bc80 <stdio_exit_handler+0x18>)
 800bc70:	f000 f86c 	bl	800bd4c <_fwalk_sglue>
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	46c0      	nop			@ (mov r8, r8)
 800bc78:	2000001c 	.word	0x2000001c
 800bc7c:	0800d9b9 	.word	0x0800d9b9
 800bc80:	2000002c 	.word	0x2000002c

0800bc84 <cleanup_stdio>:
 800bc84:	6841      	ldr	r1, [r0, #4]
 800bc86:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb4 <cleanup_stdio+0x30>)
 800bc88:	b510      	push	{r4, lr}
 800bc8a:	0004      	movs	r4, r0
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d001      	beq.n	800bc94 <cleanup_stdio+0x10>
 800bc90:	f001 fe92 	bl	800d9b8 <_fflush_r>
 800bc94:	68a1      	ldr	r1, [r4, #8]
 800bc96:	4b08      	ldr	r3, [pc, #32]	@ (800bcb8 <cleanup_stdio+0x34>)
 800bc98:	4299      	cmp	r1, r3
 800bc9a:	d002      	beq.n	800bca2 <cleanup_stdio+0x1e>
 800bc9c:	0020      	movs	r0, r4
 800bc9e:	f001 fe8b 	bl	800d9b8 <_fflush_r>
 800bca2:	68e1      	ldr	r1, [r4, #12]
 800bca4:	4b05      	ldr	r3, [pc, #20]	@ (800bcbc <cleanup_stdio+0x38>)
 800bca6:	4299      	cmp	r1, r3
 800bca8:	d002      	beq.n	800bcb0 <cleanup_stdio+0x2c>
 800bcaa:	0020      	movs	r0, r4
 800bcac:	f001 fe84 	bl	800d9b8 <_fflush_r>
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	46c0      	nop			@ (mov r8, r8)
 800bcb4:	20000614 	.word	0x20000614
 800bcb8:	2000067c 	.word	0x2000067c
 800bcbc:	200006e4 	.word	0x200006e4

0800bcc0 <global_stdio_init.part.0>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <global_stdio_init.part.0+0x28>)
 800bcc4:	4a09      	ldr	r2, [pc, #36]	@ (800bcec <global_stdio_init.part.0+0x2c>)
 800bcc6:	2104      	movs	r1, #4
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	4809      	ldr	r0, [pc, #36]	@ (800bcf0 <global_stdio_init.part.0+0x30>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	f7ff ff95 	bl	800bbfc <std>
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	2109      	movs	r1, #9
 800bcd6:	4807      	ldr	r0, [pc, #28]	@ (800bcf4 <global_stdio_init.part.0+0x34>)
 800bcd8:	f7ff ff90 	bl	800bbfc <std>
 800bcdc:	2202      	movs	r2, #2
 800bcde:	2112      	movs	r1, #18
 800bce0:	4805      	ldr	r0, [pc, #20]	@ (800bcf8 <global_stdio_init.part.0+0x38>)
 800bce2:	f7ff ff8b 	bl	800bbfc <std>
 800bce6:	bd10      	pop	{r4, pc}
 800bce8:	2000074c 	.word	0x2000074c
 800bcec:	0800bc69 	.word	0x0800bc69
 800bcf0:	20000614 	.word	0x20000614
 800bcf4:	2000067c 	.word	0x2000067c
 800bcf8:	200006e4 	.word	0x200006e4

0800bcfc <__sfp_lock_acquire>:
 800bcfc:	b510      	push	{r4, lr}
 800bcfe:	4802      	ldr	r0, [pc, #8]	@ (800bd08 <__sfp_lock_acquire+0xc>)
 800bd00:	f000 f949 	bl	800bf96 <__retarget_lock_acquire_recursive>
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	46c0      	nop			@ (mov r8, r8)
 800bd08:	20000755 	.word	0x20000755

0800bd0c <__sfp_lock_release>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	4802      	ldr	r0, [pc, #8]	@ (800bd18 <__sfp_lock_release+0xc>)
 800bd10:	f000 f942 	bl	800bf98 <__retarget_lock_release_recursive>
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	20000755 	.word	0x20000755

0800bd1c <__sinit>:
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	0004      	movs	r4, r0
 800bd20:	f7ff ffec 	bl	800bcfc <__sfp_lock_acquire>
 800bd24:	6a23      	ldr	r3, [r4, #32]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <__sinit+0x14>
 800bd2a:	f7ff ffef 	bl	800bd0c <__sfp_lock_release>
 800bd2e:	bd10      	pop	{r4, pc}
 800bd30:	4b04      	ldr	r3, [pc, #16]	@ (800bd44 <__sinit+0x28>)
 800bd32:	6223      	str	r3, [r4, #32]
 800bd34:	4b04      	ldr	r3, [pc, #16]	@ (800bd48 <__sinit+0x2c>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1f6      	bne.n	800bd2a <__sinit+0xe>
 800bd3c:	f7ff ffc0 	bl	800bcc0 <global_stdio_init.part.0>
 800bd40:	e7f3      	b.n	800bd2a <__sinit+0xe>
 800bd42:	46c0      	nop			@ (mov r8, r8)
 800bd44:	0800bc85 	.word	0x0800bc85
 800bd48:	2000074c 	.word	0x2000074c

0800bd4c <_fwalk_sglue>:
 800bd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4e:	0014      	movs	r4, r2
 800bd50:	2600      	movs	r6, #0
 800bd52:	9000      	str	r0, [sp, #0]
 800bd54:	9101      	str	r1, [sp, #4]
 800bd56:	68a5      	ldr	r5, [r4, #8]
 800bd58:	6867      	ldr	r7, [r4, #4]
 800bd5a:	3f01      	subs	r7, #1
 800bd5c:	d504      	bpl.n	800bd68 <_fwalk_sglue+0x1c>
 800bd5e:	6824      	ldr	r4, [r4, #0]
 800bd60:	2c00      	cmp	r4, #0
 800bd62:	d1f8      	bne.n	800bd56 <_fwalk_sglue+0xa>
 800bd64:	0030      	movs	r0, r6
 800bd66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd68:	89ab      	ldrh	r3, [r5, #12]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d908      	bls.n	800bd80 <_fwalk_sglue+0x34>
 800bd6e:	220e      	movs	r2, #14
 800bd70:	5eab      	ldrsh	r3, [r5, r2]
 800bd72:	3301      	adds	r3, #1
 800bd74:	d004      	beq.n	800bd80 <_fwalk_sglue+0x34>
 800bd76:	0029      	movs	r1, r5
 800bd78:	9800      	ldr	r0, [sp, #0]
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	4798      	blx	r3
 800bd7e:	4306      	orrs	r6, r0
 800bd80:	3568      	adds	r5, #104	@ 0x68
 800bd82:	e7ea      	b.n	800bd5a <_fwalk_sglue+0xe>

0800bd84 <siprintf>:
 800bd84:	b40e      	push	{r1, r2, r3}
 800bd86:	b510      	push	{r4, lr}
 800bd88:	2400      	movs	r4, #0
 800bd8a:	490c      	ldr	r1, [pc, #48]	@ (800bdbc <siprintf+0x38>)
 800bd8c:	b09d      	sub	sp, #116	@ 0x74
 800bd8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bd90:	9002      	str	r0, [sp, #8]
 800bd92:	9006      	str	r0, [sp, #24]
 800bd94:	9107      	str	r1, [sp, #28]
 800bd96:	9104      	str	r1, [sp, #16]
 800bd98:	4809      	ldr	r0, [pc, #36]	@ (800bdc0 <siprintf+0x3c>)
 800bd9a:	490a      	ldr	r1, [pc, #40]	@ (800bdc4 <siprintf+0x40>)
 800bd9c:	cb04      	ldmia	r3!, {r2}
 800bd9e:	9105      	str	r1, [sp, #20]
 800bda0:	6800      	ldr	r0, [r0, #0]
 800bda2:	a902      	add	r1, sp, #8
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bda8:	f001 fc82 	bl	800d6b0 <_svfiprintf_r>
 800bdac:	9b02      	ldr	r3, [sp, #8]
 800bdae:	701c      	strb	r4, [r3, #0]
 800bdb0:	b01d      	add	sp, #116	@ 0x74
 800bdb2:	bc10      	pop	{r4}
 800bdb4:	bc08      	pop	{r3}
 800bdb6:	b003      	add	sp, #12
 800bdb8:	4718      	bx	r3
 800bdba:	46c0      	nop			@ (mov r8, r8)
 800bdbc:	7fffffff 	.word	0x7fffffff
 800bdc0:	20000028 	.word	0x20000028
 800bdc4:	ffff0208 	.word	0xffff0208

0800bdc8 <__sread>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	000c      	movs	r4, r1
 800bdcc:	250e      	movs	r5, #14
 800bdce:	5f49      	ldrsh	r1, [r1, r5]
 800bdd0:	f000 f88e 	bl	800bef0 <_read_r>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	db03      	blt.n	800bde0 <__sread+0x18>
 800bdd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bdda:	181b      	adds	r3, r3, r0
 800bddc:	6563      	str	r3, [r4, #84]	@ 0x54
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	4a02      	ldr	r2, [pc, #8]	@ (800bdec <__sread+0x24>)
 800bde4:	4013      	ands	r3, r2
 800bde6:	81a3      	strh	r3, [r4, #12]
 800bde8:	e7f9      	b.n	800bdde <__sread+0x16>
 800bdea:	46c0      	nop			@ (mov r8, r8)
 800bdec:	ffffefff 	.word	0xffffefff

0800bdf0 <__swrite>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	001f      	movs	r7, r3
 800bdf4:	898b      	ldrh	r3, [r1, #12]
 800bdf6:	0005      	movs	r5, r0
 800bdf8:	000c      	movs	r4, r1
 800bdfa:	0016      	movs	r6, r2
 800bdfc:	05db      	lsls	r3, r3, #23
 800bdfe:	d505      	bpl.n	800be0c <__swrite+0x1c>
 800be00:	230e      	movs	r3, #14
 800be02:	5ec9      	ldrsh	r1, [r1, r3]
 800be04:	2200      	movs	r2, #0
 800be06:	2302      	movs	r3, #2
 800be08:	f000 f85e 	bl	800bec8 <_lseek_r>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	4a05      	ldr	r2, [pc, #20]	@ (800be24 <__swrite+0x34>)
 800be10:	0028      	movs	r0, r5
 800be12:	4013      	ands	r3, r2
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	0032      	movs	r2, r6
 800be18:	230e      	movs	r3, #14
 800be1a:	5ee1      	ldrsh	r1, [r4, r3]
 800be1c:	003b      	movs	r3, r7
 800be1e:	f000 f87b 	bl	800bf18 <_write_r>
 800be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be24:	ffffefff 	.word	0xffffefff

0800be28 <__sseek>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	000c      	movs	r4, r1
 800be2c:	250e      	movs	r5, #14
 800be2e:	5f49      	ldrsh	r1, [r1, r5]
 800be30:	f000 f84a 	bl	800bec8 <_lseek_r>
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	1c42      	adds	r2, r0, #1
 800be38:	d103      	bne.n	800be42 <__sseek+0x1a>
 800be3a:	4a05      	ldr	r2, [pc, #20]	@ (800be50 <__sseek+0x28>)
 800be3c:	4013      	ands	r3, r2
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	bd70      	pop	{r4, r5, r6, pc}
 800be42:	2280      	movs	r2, #128	@ 0x80
 800be44:	0152      	lsls	r2, r2, #5
 800be46:	4313      	orrs	r3, r2
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800be4c:	e7f8      	b.n	800be40 <__sseek+0x18>
 800be4e:	46c0      	nop			@ (mov r8, r8)
 800be50:	ffffefff 	.word	0xffffefff

0800be54 <__sclose>:
 800be54:	b510      	push	{r4, lr}
 800be56:	230e      	movs	r3, #14
 800be58:	5ec9      	ldrsh	r1, [r1, r3]
 800be5a:	f000 f823 	bl	800bea4 <_close_r>
 800be5e:	bd10      	pop	{r4, pc}

0800be60 <memset>:
 800be60:	0003      	movs	r3, r0
 800be62:	1882      	adds	r2, r0, r2
 800be64:	4293      	cmp	r3, r2
 800be66:	d100      	bne.n	800be6a <memset+0xa>
 800be68:	4770      	bx	lr
 800be6a:	7019      	strb	r1, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	e7f9      	b.n	800be64 <memset+0x4>

0800be70 <strstr>:
 800be70:	780a      	ldrb	r2, [r1, #0]
 800be72:	b530      	push	{r4, r5, lr}
 800be74:	2a00      	cmp	r2, #0
 800be76:	d10c      	bne.n	800be92 <strstr+0x22>
 800be78:	bd30      	pop	{r4, r5, pc}
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d108      	bne.n	800be90 <strstr+0x20>
 800be7e:	2301      	movs	r3, #1
 800be80:	5ccc      	ldrb	r4, [r1, r3]
 800be82:	2c00      	cmp	r4, #0
 800be84:	d0f8      	beq.n	800be78 <strstr+0x8>
 800be86:	5cc5      	ldrb	r5, [r0, r3]
 800be88:	42a5      	cmp	r5, r4
 800be8a:	d101      	bne.n	800be90 <strstr+0x20>
 800be8c:	3301      	adds	r3, #1
 800be8e:	e7f7      	b.n	800be80 <strstr+0x10>
 800be90:	3001      	adds	r0, #1
 800be92:	7803      	ldrb	r3, [r0, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1f0      	bne.n	800be7a <strstr+0xa>
 800be98:	0018      	movs	r0, r3
 800be9a:	e7ed      	b.n	800be78 <strstr+0x8>

0800be9c <_localeconv_r>:
 800be9c:	4800      	ldr	r0, [pc, #0]	@ (800bea0 <_localeconv_r+0x4>)
 800be9e:	4770      	bx	lr
 800bea0:	20000168 	.word	0x20000168

0800bea4 <_close_r>:
 800bea4:	2300      	movs	r3, #0
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	4d06      	ldr	r5, [pc, #24]	@ (800bec4 <_close_r+0x20>)
 800beaa:	0004      	movs	r4, r0
 800beac:	0008      	movs	r0, r1
 800beae:	602b      	str	r3, [r5, #0]
 800beb0:	f7f9 fa0c 	bl	80052cc <_close>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	d103      	bne.n	800bec0 <_close_r+0x1c>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d000      	beq.n	800bec0 <_close_r+0x1c>
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	46c0      	nop			@ (mov r8, r8)
 800bec4:	20000750 	.word	0x20000750

0800bec8 <_lseek_r>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	0004      	movs	r4, r0
 800becc:	0008      	movs	r0, r1
 800bece:	0011      	movs	r1, r2
 800bed0:	001a      	movs	r2, r3
 800bed2:	2300      	movs	r3, #0
 800bed4:	4d05      	ldr	r5, [pc, #20]	@ (800beec <_lseek_r+0x24>)
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	f7f9 fa19 	bl	800530e <_lseek>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d103      	bne.n	800bee8 <_lseek_r+0x20>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d000      	beq.n	800bee8 <_lseek_r+0x20>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd70      	pop	{r4, r5, r6, pc}
 800beea:	46c0      	nop			@ (mov r8, r8)
 800beec:	20000750 	.word	0x20000750

0800bef0 <_read_r>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	0004      	movs	r4, r0
 800bef4:	0008      	movs	r0, r1
 800bef6:	0011      	movs	r1, r2
 800bef8:	001a      	movs	r2, r3
 800befa:	2300      	movs	r3, #0
 800befc:	4d05      	ldr	r5, [pc, #20]	@ (800bf14 <_read_r+0x24>)
 800befe:	602b      	str	r3, [r5, #0]
 800bf00:	f7f9 f9ab 	bl	800525a <_read>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d103      	bne.n	800bf10 <_read_r+0x20>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d000      	beq.n	800bf10 <_read_r+0x20>
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	46c0      	nop			@ (mov r8, r8)
 800bf14:	20000750 	.word	0x20000750

0800bf18 <_write_r>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	0004      	movs	r4, r0
 800bf1c:	0008      	movs	r0, r1
 800bf1e:	0011      	movs	r1, r2
 800bf20:	001a      	movs	r2, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	4d05      	ldr	r5, [pc, #20]	@ (800bf3c <_write_r+0x24>)
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	f7f9 f9b4 	bl	8005294 <_write>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d103      	bne.n	800bf38 <_write_r+0x20>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d000      	beq.n	800bf38 <_write_r+0x20>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd70      	pop	{r4, r5, r6, pc}
 800bf3a:	46c0      	nop			@ (mov r8, r8)
 800bf3c:	20000750 	.word	0x20000750

0800bf40 <__errno>:
 800bf40:	4b01      	ldr	r3, [pc, #4]	@ (800bf48 <__errno+0x8>)
 800bf42:	6818      	ldr	r0, [r3, #0]
 800bf44:	4770      	bx	lr
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	20000028 	.word	0x20000028

0800bf4c <__libc_init_array>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	2600      	movs	r6, #0
 800bf50:	4c0c      	ldr	r4, [pc, #48]	@ (800bf84 <__libc_init_array+0x38>)
 800bf52:	4d0d      	ldr	r5, [pc, #52]	@ (800bf88 <__libc_init_array+0x3c>)
 800bf54:	1b64      	subs	r4, r4, r5
 800bf56:	10a4      	asrs	r4, r4, #2
 800bf58:	42a6      	cmp	r6, r4
 800bf5a:	d109      	bne.n	800bf70 <__libc_init_array+0x24>
 800bf5c:	2600      	movs	r6, #0
 800bf5e:	f002 f8fb 	bl	800e158 <_init>
 800bf62:	4c0a      	ldr	r4, [pc, #40]	@ (800bf8c <__libc_init_array+0x40>)
 800bf64:	4d0a      	ldr	r5, [pc, #40]	@ (800bf90 <__libc_init_array+0x44>)
 800bf66:	1b64      	subs	r4, r4, r5
 800bf68:	10a4      	asrs	r4, r4, #2
 800bf6a:	42a6      	cmp	r6, r4
 800bf6c:	d105      	bne.n	800bf7a <__libc_init_array+0x2e>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}
 800bf70:	00b3      	lsls	r3, r6, #2
 800bf72:	58eb      	ldr	r3, [r5, r3]
 800bf74:	4798      	blx	r3
 800bf76:	3601      	adds	r6, #1
 800bf78:	e7ee      	b.n	800bf58 <__libc_init_array+0xc>
 800bf7a:	00b3      	lsls	r3, r6, #2
 800bf7c:	58eb      	ldr	r3, [r5, r3]
 800bf7e:	4798      	blx	r3
 800bf80:	3601      	adds	r6, #1
 800bf82:	e7f2      	b.n	800bf6a <__libc_init_array+0x1e>
 800bf84:	0800e814 	.word	0x0800e814
 800bf88:	0800e814 	.word	0x0800e814
 800bf8c:	0800e818 	.word	0x0800e818
 800bf90:	0800e814 	.word	0x0800e814

0800bf94 <__retarget_lock_init_recursive>:
 800bf94:	4770      	bx	lr

0800bf96 <__retarget_lock_acquire_recursive>:
 800bf96:	4770      	bx	lr

0800bf98 <__retarget_lock_release_recursive>:
 800bf98:	4770      	bx	lr

0800bf9a <strcpy>:
 800bf9a:	0003      	movs	r3, r0
 800bf9c:	780a      	ldrb	r2, [r1, #0]
 800bf9e:	3101      	adds	r1, #1
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	2a00      	cmp	r2, #0
 800bfa6:	d1f9      	bne.n	800bf9c <strcpy+0x2>
 800bfa8:	4770      	bx	lr

0800bfaa <memchr>:
 800bfaa:	b2c9      	uxtb	r1, r1
 800bfac:	1882      	adds	r2, r0, r2
 800bfae:	4290      	cmp	r0, r2
 800bfb0:	d101      	bne.n	800bfb6 <memchr+0xc>
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	4770      	bx	lr
 800bfb6:	7803      	ldrb	r3, [r0, #0]
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	d0fb      	beq.n	800bfb4 <memchr+0xa>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	e7f6      	b.n	800bfae <memchr+0x4>

0800bfc0 <quorem>:
 800bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc2:	6903      	ldr	r3, [r0, #16]
 800bfc4:	690c      	ldr	r4, [r1, #16]
 800bfc6:	b089      	sub	sp, #36	@ 0x24
 800bfc8:	9003      	str	r0, [sp, #12]
 800bfca:	9106      	str	r1, [sp, #24]
 800bfcc:	2000      	movs	r0, #0
 800bfce:	42a3      	cmp	r3, r4
 800bfd0:	db63      	blt.n	800c09a <quorem+0xda>
 800bfd2:	000b      	movs	r3, r1
 800bfd4:	3c01      	subs	r4, #1
 800bfd6:	3314      	adds	r3, #20
 800bfd8:	00a5      	lsls	r5, r4, #2
 800bfda:	9304      	str	r3, [sp, #16]
 800bfdc:	195b      	adds	r3, r3, r5
 800bfde:	9305      	str	r3, [sp, #20]
 800bfe0:	9b03      	ldr	r3, [sp, #12]
 800bfe2:	3314      	adds	r3, #20
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	195d      	adds	r5, r3, r5
 800bfe8:	9b05      	ldr	r3, [sp, #20]
 800bfea:	682f      	ldr	r7, [r5, #0]
 800bfec:	681e      	ldr	r6, [r3, #0]
 800bfee:	0038      	movs	r0, r7
 800bff0:	3601      	adds	r6, #1
 800bff2:	0031      	movs	r1, r6
 800bff4:	f7f4 f8a0 	bl	8000138 <__udivsi3>
 800bff8:	9002      	str	r0, [sp, #8]
 800bffa:	42b7      	cmp	r7, r6
 800bffc:	d327      	bcc.n	800c04e <quorem+0x8e>
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	2700      	movs	r7, #0
 800c002:	469c      	mov	ip, r3
 800c004:	9e01      	ldr	r6, [sp, #4]
 800c006:	9707      	str	r7, [sp, #28]
 800c008:	4662      	mov	r2, ip
 800c00a:	ca08      	ldmia	r2!, {r3}
 800c00c:	6830      	ldr	r0, [r6, #0]
 800c00e:	4694      	mov	ip, r2
 800c010:	9a02      	ldr	r2, [sp, #8]
 800c012:	b299      	uxth	r1, r3
 800c014:	4351      	muls	r1, r2
 800c016:	0c1b      	lsrs	r3, r3, #16
 800c018:	4353      	muls	r3, r2
 800c01a:	19c9      	adds	r1, r1, r7
 800c01c:	0c0a      	lsrs	r2, r1, #16
 800c01e:	189b      	adds	r3, r3, r2
 800c020:	b289      	uxth	r1, r1
 800c022:	b282      	uxth	r2, r0
 800c024:	1a52      	subs	r2, r2, r1
 800c026:	9907      	ldr	r1, [sp, #28]
 800c028:	0c1f      	lsrs	r7, r3, #16
 800c02a:	1852      	adds	r2, r2, r1
 800c02c:	0c00      	lsrs	r0, r0, #16
 800c02e:	b29b      	uxth	r3, r3
 800c030:	1411      	asrs	r1, r2, #16
 800c032:	1ac3      	subs	r3, r0, r3
 800c034:	185b      	adds	r3, r3, r1
 800c036:	1419      	asrs	r1, r3, #16
 800c038:	b292      	uxth	r2, r2
 800c03a:	041b      	lsls	r3, r3, #16
 800c03c:	431a      	orrs	r2, r3
 800c03e:	9b05      	ldr	r3, [sp, #20]
 800c040:	9107      	str	r1, [sp, #28]
 800c042:	c604      	stmia	r6!, {r2}
 800c044:	4563      	cmp	r3, ip
 800c046:	d2df      	bcs.n	800c008 <quorem+0x48>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d02b      	beq.n	800c0a6 <quorem+0xe6>
 800c04e:	9906      	ldr	r1, [sp, #24]
 800c050:	9803      	ldr	r0, [sp, #12]
 800c052:	f001 f9b7 	bl	800d3c4 <__mcmp>
 800c056:	2800      	cmp	r0, #0
 800c058:	db1e      	blt.n	800c098 <quorem+0xd8>
 800c05a:	2600      	movs	r6, #0
 800c05c:	9d01      	ldr	r5, [sp, #4]
 800c05e:	9904      	ldr	r1, [sp, #16]
 800c060:	c901      	ldmia	r1!, {r0}
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b287      	uxth	r7, r0
 800c066:	b29a      	uxth	r2, r3
 800c068:	1bd2      	subs	r2, r2, r7
 800c06a:	1992      	adds	r2, r2, r6
 800c06c:	0c00      	lsrs	r0, r0, #16
 800c06e:	0c1b      	lsrs	r3, r3, #16
 800c070:	1a1b      	subs	r3, r3, r0
 800c072:	1410      	asrs	r0, r2, #16
 800c074:	181b      	adds	r3, r3, r0
 800c076:	141e      	asrs	r6, r3, #16
 800c078:	b292      	uxth	r2, r2
 800c07a:	041b      	lsls	r3, r3, #16
 800c07c:	431a      	orrs	r2, r3
 800c07e:	9b05      	ldr	r3, [sp, #20]
 800c080:	c504      	stmia	r5!, {r2}
 800c082:	428b      	cmp	r3, r1
 800c084:	d2ec      	bcs.n	800c060 <quorem+0xa0>
 800c086:	9a01      	ldr	r2, [sp, #4]
 800c088:	00a3      	lsls	r3, r4, #2
 800c08a:	18d3      	adds	r3, r2, r3
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	2a00      	cmp	r2, #0
 800c090:	d014      	beq.n	800c0bc <quorem+0xfc>
 800c092:	9b02      	ldr	r3, [sp, #8]
 800c094:	3301      	adds	r3, #1
 800c096:	9302      	str	r3, [sp, #8]
 800c098:	9802      	ldr	r0, [sp, #8]
 800c09a:	b009      	add	sp, #36	@ 0x24
 800c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c09e:	682b      	ldr	r3, [r5, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <quorem+0xee>
 800c0a4:	3c01      	subs	r4, #1
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	3d04      	subs	r5, #4
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	d3f7      	bcc.n	800c09e <quorem+0xde>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	611c      	str	r4, [r3, #16]
 800c0b2:	e7cc      	b.n	800c04e <quorem+0x8e>
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	d104      	bne.n	800c0c4 <quorem+0x104>
 800c0ba:	3c01      	subs	r4, #1
 800c0bc:	9a01      	ldr	r2, [sp, #4]
 800c0be:	3b04      	subs	r3, #4
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d3f7      	bcc.n	800c0b4 <quorem+0xf4>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	611c      	str	r4, [r3, #16]
 800c0c8:	e7e3      	b.n	800c092 <quorem+0xd2>
	...

0800c0cc <_dtoa_r>:
 800c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ce:	0014      	movs	r4, r2
 800c0d0:	001d      	movs	r5, r3
 800c0d2:	69c6      	ldr	r6, [r0, #28]
 800c0d4:	b09d      	sub	sp, #116	@ 0x74
 800c0d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800c0d8:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c0da:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800c0dc:	9003      	str	r0, [sp, #12]
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	d10f      	bne.n	800c102 <_dtoa_r+0x36>
 800c0e2:	2010      	movs	r0, #16
 800c0e4:	f000 fe2c 	bl	800cd40 <malloc>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	1e02      	subs	r2, r0, #0
 800c0ec:	61d8      	str	r0, [r3, #28]
 800c0ee:	d104      	bne.n	800c0fa <_dtoa_r+0x2e>
 800c0f0:	21ef      	movs	r1, #239	@ 0xef
 800c0f2:	4bc7      	ldr	r3, [pc, #796]	@ (800c410 <_dtoa_r+0x344>)
 800c0f4:	48c7      	ldr	r0, [pc, #796]	@ (800c414 <_dtoa_r+0x348>)
 800c0f6:	f001 fcb9 	bl	800da6c <__assert_func>
 800c0fa:	6046      	str	r6, [r0, #4]
 800c0fc:	6086      	str	r6, [r0, #8]
 800c0fe:	6006      	str	r6, [r0, #0]
 800c100:	60c6      	str	r6, [r0, #12]
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	2900      	cmp	r1, #0
 800c10a:	d00b      	beq.n	800c124 <_dtoa_r+0x58>
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	2301      	movs	r3, #1
 800c110:	4093      	lsls	r3, r2
 800c112:	604a      	str	r2, [r1, #4]
 800c114:	608b      	str	r3, [r1, #8]
 800c116:	9803      	ldr	r0, [sp, #12]
 800c118:	f000 ff12 	bl	800cf40 <_Bfree>
 800c11c:	2200      	movs	r2, #0
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	2d00      	cmp	r5, #0
 800c126:	da1e      	bge.n	800c166 <_dtoa_r+0x9a>
 800c128:	2301      	movs	r3, #1
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	006b      	lsls	r3, r5, #1
 800c12e:	085b      	lsrs	r3, r3, #1
 800c130:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c132:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c134:	4bb8      	ldr	r3, [pc, #736]	@ (800c418 <_dtoa_r+0x34c>)
 800c136:	4ab8      	ldr	r2, [pc, #736]	@ (800c418 <_dtoa_r+0x34c>)
 800c138:	403b      	ands	r3, r7
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d116      	bne.n	800c16c <_dtoa_r+0xa0>
 800c13e:	4bb7      	ldr	r3, [pc, #732]	@ (800c41c <_dtoa_r+0x350>)
 800c140:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c142:	6013      	str	r3, [r2, #0]
 800c144:	033b      	lsls	r3, r7, #12
 800c146:	0b1b      	lsrs	r3, r3, #12
 800c148:	4323      	orrs	r3, r4
 800c14a:	d101      	bne.n	800c150 <_dtoa_r+0x84>
 800c14c:	f000 fd80 	bl	800cc50 <_dtoa_r+0xb84>
 800c150:	4bb3      	ldr	r3, [pc, #716]	@ (800c420 <_dtoa_r+0x354>)
 800c152:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c154:	9308      	str	r3, [sp, #32]
 800c156:	2a00      	cmp	r2, #0
 800c158:	d002      	beq.n	800c160 <_dtoa_r+0x94>
 800c15a:	4bb2      	ldr	r3, [pc, #712]	@ (800c424 <_dtoa_r+0x358>)
 800c15c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	9808      	ldr	r0, [sp, #32]
 800c162:	b01d      	add	sp, #116	@ 0x74
 800c164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c166:	2300      	movs	r3, #0
 800c168:	603b      	str	r3, [r7, #0]
 800c16a:	e7e2      	b.n	800c132 <_dtoa_r+0x66>
 800c16c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c170:	9212      	str	r2, [sp, #72]	@ 0x48
 800c172:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c174:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c176:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c178:	2200      	movs	r2, #0
 800c17a:	2300      	movs	r3, #0
 800c17c:	f7f4 f962 	bl	8000444 <__aeabi_dcmpeq>
 800c180:	1e06      	subs	r6, r0, #0
 800c182:	d00b      	beq.n	800c19c <_dtoa_r+0xd0>
 800c184:	2301      	movs	r3, #1
 800c186:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <_dtoa_r+0xca>
 800c190:	4ba5      	ldr	r3, [pc, #660]	@ (800c428 <_dtoa_r+0x35c>)
 800c192:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	4ba5      	ldr	r3, [pc, #660]	@ (800c42c <_dtoa_r+0x360>)
 800c198:	9308      	str	r3, [sp, #32]
 800c19a:	e7e1      	b.n	800c160 <_dtoa_r+0x94>
 800c19c:	ab1a      	add	r3, sp, #104	@ 0x68
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	9803      	ldr	r0, [sp, #12]
 800c1a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c1a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1aa:	f001 f9c1 	bl	800d530 <__d2b>
 800c1ae:	007a      	lsls	r2, r7, #1
 800c1b0:	9005      	str	r0, [sp, #20]
 800c1b2:	0d52      	lsrs	r2, r2, #21
 800c1b4:	d100      	bne.n	800c1b8 <_dtoa_r+0xec>
 800c1b6:	e07b      	b.n	800c2b0 <_dtoa_r+0x1e4>
 800c1b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1ba:	9618      	str	r6, [sp, #96]	@ 0x60
 800c1bc:	0319      	lsls	r1, r3, #12
 800c1be:	4b9c      	ldr	r3, [pc, #624]	@ (800c430 <_dtoa_r+0x364>)
 800c1c0:	0b09      	lsrs	r1, r1, #12
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	499b      	ldr	r1, [pc, #620]	@ (800c434 <_dtoa_r+0x368>)
 800c1c6:	1857      	adds	r7, r2, r1
 800c1c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c1ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c1cc:	0019      	movs	r1, r3
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4b99      	ldr	r3, [pc, #612]	@ (800c438 <_dtoa_r+0x36c>)
 800c1d2:	f7f6 fa55 	bl	8002680 <__aeabi_dsub>
 800c1d6:	4a99      	ldr	r2, [pc, #612]	@ (800c43c <_dtoa_r+0x370>)
 800c1d8:	4b99      	ldr	r3, [pc, #612]	@ (800c440 <_dtoa_r+0x374>)
 800c1da:	f7f5 ff6b 	bl	80020b4 <__aeabi_dmul>
 800c1de:	4a99      	ldr	r2, [pc, #612]	@ (800c444 <_dtoa_r+0x378>)
 800c1e0:	4b99      	ldr	r3, [pc, #612]	@ (800c448 <_dtoa_r+0x37c>)
 800c1e2:	f7f4 ff67 	bl	80010b4 <__aeabi_dadd>
 800c1e6:	0004      	movs	r4, r0
 800c1e8:	0038      	movs	r0, r7
 800c1ea:	000d      	movs	r5, r1
 800c1ec:	f7f6 feb0 	bl	8002f50 <__aeabi_i2d>
 800c1f0:	4a96      	ldr	r2, [pc, #600]	@ (800c44c <_dtoa_r+0x380>)
 800c1f2:	4b97      	ldr	r3, [pc, #604]	@ (800c450 <_dtoa_r+0x384>)
 800c1f4:	f7f5 ff5e 	bl	80020b4 <__aeabi_dmul>
 800c1f8:	0002      	movs	r2, r0
 800c1fa:	000b      	movs	r3, r1
 800c1fc:	0020      	movs	r0, r4
 800c1fe:	0029      	movs	r1, r5
 800c200:	f7f4 ff58 	bl	80010b4 <__aeabi_dadd>
 800c204:	0004      	movs	r4, r0
 800c206:	000d      	movs	r5, r1
 800c208:	f7f6 fe66 	bl	8002ed8 <__aeabi_d2iz>
 800c20c:	2200      	movs	r2, #0
 800c20e:	9004      	str	r0, [sp, #16]
 800c210:	2300      	movs	r3, #0
 800c212:	0020      	movs	r0, r4
 800c214:	0029      	movs	r1, r5
 800c216:	f7f4 f91b 	bl	8000450 <__aeabi_dcmplt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d00b      	beq.n	800c236 <_dtoa_r+0x16a>
 800c21e:	9804      	ldr	r0, [sp, #16]
 800c220:	f7f6 fe96 	bl	8002f50 <__aeabi_i2d>
 800c224:	002b      	movs	r3, r5
 800c226:	0022      	movs	r2, r4
 800c228:	f7f4 f90c 	bl	8000444 <__aeabi_dcmpeq>
 800c22c:	4243      	negs	r3, r0
 800c22e:	4158      	adcs	r0, r3
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	1a1b      	subs	r3, r3, r0
 800c234:	9304      	str	r3, [sp, #16]
 800c236:	2301      	movs	r3, #1
 800c238:	9315      	str	r3, [sp, #84]	@ 0x54
 800c23a:	9b04      	ldr	r3, [sp, #16]
 800c23c:	2b16      	cmp	r3, #22
 800c23e:	d810      	bhi.n	800c262 <_dtoa_r+0x196>
 800c240:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c242:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c244:	9a04      	ldr	r2, [sp, #16]
 800c246:	4b83      	ldr	r3, [pc, #524]	@ (800c454 <_dtoa_r+0x388>)
 800c248:	00d2      	lsls	r2, r2, #3
 800c24a:	189b      	adds	r3, r3, r2
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f7f4 f8fe 	bl	8000450 <__aeabi_dcmplt>
 800c254:	2800      	cmp	r0, #0
 800c256:	d047      	beq.n	800c2e8 <_dtoa_r+0x21c>
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	9304      	str	r3, [sp, #16]
 800c25e:	2300      	movs	r3, #0
 800c260:	9315      	str	r3, [sp, #84]	@ 0x54
 800c262:	2200      	movs	r2, #0
 800c264:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c266:	9206      	str	r2, [sp, #24]
 800c268:	1bdb      	subs	r3, r3, r7
 800c26a:	1e5a      	subs	r2, r3, #1
 800c26c:	d53e      	bpl.n	800c2ec <_dtoa_r+0x220>
 800c26e:	2201      	movs	r2, #1
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	9306      	str	r3, [sp, #24]
 800c274:	2300      	movs	r3, #0
 800c276:	930d      	str	r3, [sp, #52]	@ 0x34
 800c278:	9b04      	ldr	r3, [sp, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	db38      	blt.n	800c2f0 <_dtoa_r+0x224>
 800c27e:	9a04      	ldr	r2, [sp, #16]
 800c280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c282:	4694      	mov	ip, r2
 800c284:	4463      	add	r3, ip
 800c286:	930d      	str	r3, [sp, #52]	@ 0x34
 800c288:	2300      	movs	r3, #0
 800c28a:	9214      	str	r2, [sp, #80]	@ 0x50
 800c28c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c28e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c290:	2401      	movs	r4, #1
 800c292:	2b09      	cmp	r3, #9
 800c294:	d862      	bhi.n	800c35c <_dtoa_r+0x290>
 800c296:	2b05      	cmp	r3, #5
 800c298:	dd02      	ble.n	800c2a0 <_dtoa_r+0x1d4>
 800c29a:	2400      	movs	r4, #0
 800c29c:	3b04      	subs	r3, #4
 800c29e:	9322      	str	r3, [sp, #136]	@ 0x88
 800c2a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c2a2:	1e98      	subs	r0, r3, #2
 800c2a4:	2803      	cmp	r0, #3
 800c2a6:	d863      	bhi.n	800c370 <_dtoa_r+0x2a4>
 800c2a8:	f7f3 ff32 	bl	8000110 <__gnu_thumb1_case_uqi>
 800c2ac:	2b385654 	.word	0x2b385654
 800c2b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c2b2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800c2b4:	18f6      	adds	r6, r6, r3
 800c2b6:	4b68      	ldr	r3, [pc, #416]	@ (800c458 <_dtoa_r+0x38c>)
 800c2b8:	18f2      	adds	r2, r6, r3
 800c2ba:	2a20      	cmp	r2, #32
 800c2bc:	dd0f      	ble.n	800c2de <_dtoa_r+0x212>
 800c2be:	2340      	movs	r3, #64	@ 0x40
 800c2c0:	1a9b      	subs	r3, r3, r2
 800c2c2:	409f      	lsls	r7, r3
 800c2c4:	4b65      	ldr	r3, [pc, #404]	@ (800c45c <_dtoa_r+0x390>)
 800c2c6:	0038      	movs	r0, r7
 800c2c8:	18f3      	adds	r3, r6, r3
 800c2ca:	40dc      	lsrs	r4, r3
 800c2cc:	4320      	orrs	r0, r4
 800c2ce:	f7f6 fe6d 	bl	8002fac <__aeabi_ui2d>
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	4b62      	ldr	r3, [pc, #392]	@ (800c460 <_dtoa_r+0x394>)
 800c2d6:	1e77      	subs	r7, r6, #1
 800c2d8:	18cb      	adds	r3, r1, r3
 800c2da:	9218      	str	r2, [sp, #96]	@ 0x60
 800c2dc:	e776      	b.n	800c1cc <_dtoa_r+0x100>
 800c2de:	2320      	movs	r3, #32
 800c2e0:	0020      	movs	r0, r4
 800c2e2:	1a9b      	subs	r3, r3, r2
 800c2e4:	4098      	lsls	r0, r3
 800c2e6:	e7f2      	b.n	800c2ce <_dtoa_r+0x202>
 800c2e8:	9015      	str	r0, [sp, #84]	@ 0x54
 800c2ea:	e7ba      	b.n	800c262 <_dtoa_r+0x196>
 800c2ec:	920d      	str	r2, [sp, #52]	@ 0x34
 800c2ee:	e7c3      	b.n	800c278 <_dtoa_r+0x1ac>
 800c2f0:	9b06      	ldr	r3, [sp, #24]
 800c2f2:	9a04      	ldr	r2, [sp, #16]
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	9306      	str	r3, [sp, #24]
 800c2f8:	4253      	negs	r3, r2
 800c2fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9314      	str	r3, [sp, #80]	@ 0x50
 800c300:	e7c5      	b.n	800c28e <_dtoa_r+0x1c2>
 800c302:	2301      	movs	r3, #1
 800c304:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c306:	9310      	str	r3, [sp, #64]	@ 0x40
 800c308:	4694      	mov	ip, r2
 800c30a:	9b04      	ldr	r3, [sp, #16]
 800c30c:	4463      	add	r3, ip
 800c30e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c310:	3301      	adds	r3, #1
 800c312:	9309      	str	r3, [sp, #36]	@ 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	dc08      	bgt.n	800c32a <_dtoa_r+0x25e>
 800c318:	2301      	movs	r3, #1
 800c31a:	e006      	b.n	800c32a <_dtoa_r+0x25e>
 800c31c:	2301      	movs	r3, #1
 800c31e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c320:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c322:	2b00      	cmp	r3, #0
 800c324:	dd28      	ble.n	800c378 <_dtoa_r+0x2ac>
 800c326:	930e      	str	r3, [sp, #56]	@ 0x38
 800c328:	9309      	str	r3, [sp, #36]	@ 0x24
 800c32a:	9a03      	ldr	r2, [sp, #12]
 800c32c:	2100      	movs	r1, #0
 800c32e:	69d0      	ldr	r0, [r2, #28]
 800c330:	2204      	movs	r2, #4
 800c332:	0015      	movs	r5, r2
 800c334:	3514      	adds	r5, #20
 800c336:	429d      	cmp	r5, r3
 800c338:	d923      	bls.n	800c382 <_dtoa_r+0x2b6>
 800c33a:	6041      	str	r1, [r0, #4]
 800c33c:	9803      	ldr	r0, [sp, #12]
 800c33e:	f000 fdbb 	bl	800ceb8 <_Balloc>
 800c342:	9008      	str	r0, [sp, #32]
 800c344:	2800      	cmp	r0, #0
 800c346:	d11f      	bne.n	800c388 <_dtoa_r+0x2bc>
 800c348:	21b0      	movs	r1, #176	@ 0xb0
 800c34a:	4b46      	ldr	r3, [pc, #280]	@ (800c464 <_dtoa_r+0x398>)
 800c34c:	4831      	ldr	r0, [pc, #196]	@ (800c414 <_dtoa_r+0x348>)
 800c34e:	9a08      	ldr	r2, [sp, #32]
 800c350:	31ff      	adds	r1, #255	@ 0xff
 800c352:	e6d0      	b.n	800c0f6 <_dtoa_r+0x2a>
 800c354:	2300      	movs	r3, #0
 800c356:	e7e2      	b.n	800c31e <_dtoa_r+0x252>
 800c358:	2300      	movs	r3, #0
 800c35a:	e7d3      	b.n	800c304 <_dtoa_r+0x238>
 800c35c:	2300      	movs	r3, #0
 800c35e:	9410      	str	r4, [sp, #64]	@ 0x40
 800c360:	9322      	str	r3, [sp, #136]	@ 0x88
 800c362:	3b01      	subs	r3, #1
 800c364:	2200      	movs	r2, #0
 800c366:	930e      	str	r3, [sp, #56]	@ 0x38
 800c368:	9309      	str	r3, [sp, #36]	@ 0x24
 800c36a:	3313      	adds	r3, #19
 800c36c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c36e:	e7dc      	b.n	800c32a <_dtoa_r+0x25e>
 800c370:	2301      	movs	r3, #1
 800c372:	9310      	str	r3, [sp, #64]	@ 0x40
 800c374:	3b02      	subs	r3, #2
 800c376:	e7f5      	b.n	800c364 <_dtoa_r+0x298>
 800c378:	2301      	movs	r3, #1
 800c37a:	001a      	movs	r2, r3
 800c37c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c37e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c380:	e7f4      	b.n	800c36c <_dtoa_r+0x2a0>
 800c382:	3101      	adds	r1, #1
 800c384:	0052      	lsls	r2, r2, #1
 800c386:	e7d4      	b.n	800c332 <_dtoa_r+0x266>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	9a08      	ldr	r2, [sp, #32]
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c392:	2b0e      	cmp	r3, #14
 800c394:	d900      	bls.n	800c398 <_dtoa_r+0x2cc>
 800c396:	e0d6      	b.n	800c546 <_dtoa_r+0x47a>
 800c398:	2c00      	cmp	r4, #0
 800c39a:	d100      	bne.n	800c39e <_dtoa_r+0x2d2>
 800c39c:	e0d3      	b.n	800c546 <_dtoa_r+0x47a>
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dd63      	ble.n	800c46c <_dtoa_r+0x3a0>
 800c3a4:	210f      	movs	r1, #15
 800c3a6:	9a04      	ldr	r2, [sp, #16]
 800c3a8:	4b2a      	ldr	r3, [pc, #168]	@ (800c454 <_dtoa_r+0x388>)
 800c3aa:	400a      	ands	r2, r1
 800c3ac:	00d2      	lsls	r2, r2, #3
 800c3ae:	189b      	adds	r3, r3, r2
 800c3b0:	681e      	ldr	r6, [r3, #0]
 800c3b2:	685f      	ldr	r7, [r3, #4]
 800c3b4:	9b04      	ldr	r3, [sp, #16]
 800c3b6:	2402      	movs	r4, #2
 800c3b8:	111d      	asrs	r5, r3, #4
 800c3ba:	05db      	lsls	r3, r3, #23
 800c3bc:	d50a      	bpl.n	800c3d4 <_dtoa_r+0x308>
 800c3be:	4b2a      	ldr	r3, [pc, #168]	@ (800c468 <_dtoa_r+0x39c>)
 800c3c0:	400d      	ands	r5, r1
 800c3c2:	6a1a      	ldr	r2, [r3, #32]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c3c8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c3ca:	f7f5 fa39 	bl	8001840 <__aeabi_ddiv>
 800c3ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	4b24      	ldr	r3, [pc, #144]	@ (800c468 <_dtoa_r+0x39c>)
 800c3d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	d108      	bne.n	800c3ee <_dtoa_r+0x322>
 800c3dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c3de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3e0:	0032      	movs	r2, r6
 800c3e2:	003b      	movs	r3, r7
 800c3e4:	f7f5 fa2c 	bl	8001840 <__aeabi_ddiv>
 800c3e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c3ec:	e059      	b.n	800c4a2 <_dtoa_r+0x3d6>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	421d      	tst	r5, r3
 800c3f2:	d009      	beq.n	800c408 <_dtoa_r+0x33c>
 800c3f4:	18e4      	adds	r4, r4, r3
 800c3f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3f8:	0030      	movs	r0, r6
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	0039      	movs	r1, r7
 800c400:	f7f5 fe58 	bl	80020b4 <__aeabi_dmul>
 800c404:	0006      	movs	r6, r0
 800c406:	000f      	movs	r7, r1
 800c408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c40a:	106d      	asrs	r5, r5, #1
 800c40c:	3308      	adds	r3, #8
 800c40e:	e7e2      	b.n	800c3d6 <_dtoa_r+0x30a>
 800c410:	0800e4dd 	.word	0x0800e4dd
 800c414:	0800e4f4 	.word	0x0800e4f4
 800c418:	7ff00000 	.word	0x7ff00000
 800c41c:	0000270f 	.word	0x0000270f
 800c420:	0800e4d9 	.word	0x0800e4d9
 800c424:	0800e4dc 	.word	0x0800e4dc
 800c428:	0800e4ad 	.word	0x0800e4ad
 800c42c:	0800e4ac 	.word	0x0800e4ac
 800c430:	3ff00000 	.word	0x3ff00000
 800c434:	fffffc01 	.word	0xfffffc01
 800c438:	3ff80000 	.word	0x3ff80000
 800c43c:	636f4361 	.word	0x636f4361
 800c440:	3fd287a7 	.word	0x3fd287a7
 800c444:	8b60c8b3 	.word	0x8b60c8b3
 800c448:	3fc68a28 	.word	0x3fc68a28
 800c44c:	509f79fb 	.word	0x509f79fb
 800c450:	3fd34413 	.word	0x3fd34413
 800c454:	0800e648 	.word	0x0800e648
 800c458:	00000432 	.word	0x00000432
 800c45c:	00000412 	.word	0x00000412
 800c460:	fe100000 	.word	0xfe100000
 800c464:	0800e54c 	.word	0x0800e54c
 800c468:	0800e620 	.word	0x0800e620
 800c46c:	9b04      	ldr	r3, [sp, #16]
 800c46e:	2402      	movs	r4, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d016      	beq.n	800c4a2 <_dtoa_r+0x3d6>
 800c474:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c476:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c478:	220f      	movs	r2, #15
 800c47a:	425d      	negs	r5, r3
 800c47c:	402a      	ands	r2, r5
 800c47e:	4bd5      	ldr	r3, [pc, #852]	@ (800c7d4 <_dtoa_r+0x708>)
 800c480:	00d2      	lsls	r2, r2, #3
 800c482:	189b      	adds	r3, r3, r2
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f7f5 fe14 	bl	80020b4 <__aeabi_dmul>
 800c48c:	2701      	movs	r7, #1
 800c48e:	2300      	movs	r3, #0
 800c490:	900a      	str	r0, [sp, #40]	@ 0x28
 800c492:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c494:	4ed0      	ldr	r6, [pc, #832]	@ (800c7d8 <_dtoa_r+0x70c>)
 800c496:	112d      	asrs	r5, r5, #4
 800c498:	2d00      	cmp	r5, #0
 800c49a:	d000      	beq.n	800c49e <_dtoa_r+0x3d2>
 800c49c:	e095      	b.n	800c5ca <_dtoa_r+0x4fe>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1a2      	bne.n	800c3e8 <_dtoa_r+0x31c>
 800c4a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c4a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c4a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d100      	bne.n	800c4ae <_dtoa_r+0x3e2>
 800c4ac:	e098      	b.n	800c5e0 <_dtoa_r+0x514>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	0030      	movs	r0, r6
 800c4b2:	0039      	movs	r1, r7
 800c4b4:	4bc9      	ldr	r3, [pc, #804]	@ (800c7dc <_dtoa_r+0x710>)
 800c4b6:	f7f3 ffcb 	bl	8000450 <__aeabi_dcmplt>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d100      	bne.n	800c4c0 <_dtoa_r+0x3f4>
 800c4be:	e08f      	b.n	800c5e0 <_dtoa_r+0x514>
 800c4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d100      	bne.n	800c4c8 <_dtoa_r+0x3fc>
 800c4c6:	e08b      	b.n	800c5e0 <_dtoa_r+0x514>
 800c4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd37      	ble.n	800c53e <_dtoa_r+0x472>
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4d6:	0030      	movs	r0, r6
 800c4d8:	4bc1      	ldr	r3, [pc, #772]	@ (800c7e0 <_dtoa_r+0x714>)
 800c4da:	0039      	movs	r1, r7
 800c4dc:	f7f5 fdea 	bl	80020b4 <__aeabi_dmul>
 800c4e0:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c4e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	0020      	movs	r0, r4
 800c4ea:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4ec:	f7f6 fd30 	bl	8002f50 <__aeabi_i2d>
 800c4f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f4:	f7f5 fdde 	bl	80020b4 <__aeabi_dmul>
 800c4f8:	4bba      	ldr	r3, [pc, #744]	@ (800c7e4 <_dtoa_r+0x718>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f7f4 fdda 	bl	80010b4 <__aeabi_dadd>
 800c500:	4bb9      	ldr	r3, [pc, #740]	@ (800c7e8 <_dtoa_r+0x71c>)
 800c502:	0006      	movs	r6, r0
 800c504:	18cf      	adds	r7, r1, r3
 800c506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d16d      	bne.n	800c5e8 <_dtoa_r+0x51c>
 800c50c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c50e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c510:	2200      	movs	r2, #0
 800c512:	4bb6      	ldr	r3, [pc, #728]	@ (800c7ec <_dtoa_r+0x720>)
 800c514:	f7f6 f8b4 	bl	8002680 <__aeabi_dsub>
 800c518:	0032      	movs	r2, r6
 800c51a:	003b      	movs	r3, r7
 800c51c:	0004      	movs	r4, r0
 800c51e:	000d      	movs	r5, r1
 800c520:	f7f3 ffaa 	bl	8000478 <__aeabi_dcmpgt>
 800c524:	2800      	cmp	r0, #0
 800c526:	d000      	beq.n	800c52a <_dtoa_r+0x45e>
 800c528:	e2b6      	b.n	800ca98 <_dtoa_r+0x9cc>
 800c52a:	2180      	movs	r1, #128	@ 0x80
 800c52c:	0609      	lsls	r1, r1, #24
 800c52e:	187b      	adds	r3, r7, r1
 800c530:	0032      	movs	r2, r6
 800c532:	0020      	movs	r0, r4
 800c534:	0029      	movs	r1, r5
 800c536:	f7f3 ff8b 	bl	8000450 <__aeabi_dcmplt>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d128      	bne.n	800c590 <_dtoa_r+0x4c4>
 800c53e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c540:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c542:	930a      	str	r3, [sp, #40]	@ 0x28
 800c544:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c546:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	da00      	bge.n	800c54e <_dtoa_r+0x482>
 800c54c:	e174      	b.n	800c838 <_dtoa_r+0x76c>
 800c54e:	9a04      	ldr	r2, [sp, #16]
 800c550:	2a0e      	cmp	r2, #14
 800c552:	dd00      	ble.n	800c556 <_dtoa_r+0x48a>
 800c554:	e170      	b.n	800c838 <_dtoa_r+0x76c>
 800c556:	4b9f      	ldr	r3, [pc, #636]	@ (800c7d4 <_dtoa_r+0x708>)
 800c558:	00d2      	lsls	r2, r2, #3
 800c55a:	189b      	adds	r3, r3, r2
 800c55c:	685c      	ldr	r4, [r3, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	9306      	str	r3, [sp, #24]
 800c562:	9407      	str	r4, [sp, #28]
 800c564:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c566:	2b00      	cmp	r3, #0
 800c568:	db00      	blt.n	800c56c <_dtoa_r+0x4a0>
 800c56a:	e0e7      	b.n	800c73c <_dtoa_r+0x670>
 800c56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dd00      	ble.n	800c574 <_dtoa_r+0x4a8>
 800c572:	e0e3      	b.n	800c73c <_dtoa_r+0x670>
 800c574:	d10c      	bne.n	800c590 <_dtoa_r+0x4c4>
 800c576:	9806      	ldr	r0, [sp, #24]
 800c578:	9907      	ldr	r1, [sp, #28]
 800c57a:	2200      	movs	r2, #0
 800c57c:	4b9b      	ldr	r3, [pc, #620]	@ (800c7ec <_dtoa_r+0x720>)
 800c57e:	f7f5 fd99 	bl	80020b4 <__aeabi_dmul>
 800c582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c586:	f7f3 ff81 	bl	800048c <__aeabi_dcmpge>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d100      	bne.n	800c590 <_dtoa_r+0x4c4>
 800c58e:	e286      	b.n	800ca9e <_dtoa_r+0x9d2>
 800c590:	2600      	movs	r6, #0
 800c592:	0037      	movs	r7, r6
 800c594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c596:	9c08      	ldr	r4, [sp, #32]
 800c598:	43db      	mvns	r3, r3
 800c59a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c59c:	9704      	str	r7, [sp, #16]
 800c59e:	2700      	movs	r7, #0
 800c5a0:	0031      	movs	r1, r6
 800c5a2:	9803      	ldr	r0, [sp, #12]
 800c5a4:	f000 fccc 	bl	800cf40 <_Bfree>
 800c5a8:	9b04      	ldr	r3, [sp, #16]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d100      	bne.n	800c5b0 <_dtoa_r+0x4e4>
 800c5ae:	e0bb      	b.n	800c728 <_dtoa_r+0x65c>
 800c5b0:	2f00      	cmp	r7, #0
 800c5b2:	d005      	beq.n	800c5c0 <_dtoa_r+0x4f4>
 800c5b4:	429f      	cmp	r7, r3
 800c5b6:	d003      	beq.n	800c5c0 <_dtoa_r+0x4f4>
 800c5b8:	0039      	movs	r1, r7
 800c5ba:	9803      	ldr	r0, [sp, #12]
 800c5bc:	f000 fcc0 	bl	800cf40 <_Bfree>
 800c5c0:	9904      	ldr	r1, [sp, #16]
 800c5c2:	9803      	ldr	r0, [sp, #12]
 800c5c4:	f000 fcbc 	bl	800cf40 <_Bfree>
 800c5c8:	e0ae      	b.n	800c728 <_dtoa_r+0x65c>
 800c5ca:	423d      	tst	r5, r7
 800c5cc:	d005      	beq.n	800c5da <_dtoa_r+0x50e>
 800c5ce:	6832      	ldr	r2, [r6, #0]
 800c5d0:	6873      	ldr	r3, [r6, #4]
 800c5d2:	f7f5 fd6f 	bl	80020b4 <__aeabi_dmul>
 800c5d6:	003b      	movs	r3, r7
 800c5d8:	3401      	adds	r4, #1
 800c5da:	106d      	asrs	r5, r5, #1
 800c5dc:	3608      	adds	r6, #8
 800c5de:	e75b      	b.n	800c498 <_dtoa_r+0x3cc>
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e6:	e77f      	b.n	800c4e8 <_dtoa_r+0x41c>
 800c5e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5ea:	4b7a      	ldr	r3, [pc, #488]	@ (800c7d4 <_dtoa_r+0x708>)
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	00d2      	lsls	r2, r2, #3
 800c5f0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c5f2:	189b      	adds	r3, r3, r2
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d04c      	beq.n	800c696 <_dtoa_r+0x5ca>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	497c      	ldr	r1, [pc, #496]	@ (800c7f0 <_dtoa_r+0x724>)
 800c600:	f7f5 f91e 	bl	8001840 <__aeabi_ddiv>
 800c604:	0032      	movs	r2, r6
 800c606:	003b      	movs	r3, r7
 800c608:	f7f6 f83a 	bl	8002680 <__aeabi_dsub>
 800c60c:	9a08      	ldr	r2, [sp, #32]
 800c60e:	0006      	movs	r6, r0
 800c610:	4694      	mov	ip, r2
 800c612:	000f      	movs	r7, r1
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	9316      	str	r3, [sp, #88]	@ 0x58
 800c618:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c61a:	4463      	add	r3, ip
 800c61c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c61e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c622:	f7f6 fc59 	bl	8002ed8 <__aeabi_d2iz>
 800c626:	0005      	movs	r5, r0
 800c628:	f7f6 fc92 	bl	8002f50 <__aeabi_i2d>
 800c62c:	0002      	movs	r2, r0
 800c62e:	000b      	movs	r3, r1
 800c630:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c632:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c634:	f7f6 f824 	bl	8002680 <__aeabi_dsub>
 800c638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c63a:	3530      	adds	r5, #48	@ 0x30
 800c63c:	1c5c      	adds	r4, r3, #1
 800c63e:	701d      	strb	r5, [r3, #0]
 800c640:	0032      	movs	r2, r6
 800c642:	003b      	movs	r3, r7
 800c644:	900a      	str	r0, [sp, #40]	@ 0x28
 800c646:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c648:	f7f3 ff02 	bl	8000450 <__aeabi_dcmplt>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d16b      	bne.n	800c728 <_dtoa_r+0x65c>
 800c650:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c654:	2000      	movs	r0, #0
 800c656:	4961      	ldr	r1, [pc, #388]	@ (800c7dc <_dtoa_r+0x710>)
 800c658:	f7f6 f812 	bl	8002680 <__aeabi_dsub>
 800c65c:	0032      	movs	r2, r6
 800c65e:	003b      	movs	r3, r7
 800c660:	f7f3 fef6 	bl	8000450 <__aeabi_dcmplt>
 800c664:	2800      	cmp	r0, #0
 800c666:	d000      	beq.n	800c66a <_dtoa_r+0x59e>
 800c668:	e0c6      	b.n	800c7f8 <_dtoa_r+0x72c>
 800c66a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d100      	bne.n	800c672 <_dtoa_r+0x5a6>
 800c670:	e765      	b.n	800c53e <_dtoa_r+0x472>
 800c672:	2200      	movs	r2, #0
 800c674:	0030      	movs	r0, r6
 800c676:	0039      	movs	r1, r7
 800c678:	4b59      	ldr	r3, [pc, #356]	@ (800c7e0 <_dtoa_r+0x714>)
 800c67a:	f7f5 fd1b 	bl	80020b4 <__aeabi_dmul>
 800c67e:	2200      	movs	r2, #0
 800c680:	0006      	movs	r6, r0
 800c682:	000f      	movs	r7, r1
 800c684:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c686:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c688:	4b55      	ldr	r3, [pc, #340]	@ (800c7e0 <_dtoa_r+0x714>)
 800c68a:	f7f5 fd13 	bl	80020b4 <__aeabi_dmul>
 800c68e:	9416      	str	r4, [sp, #88]	@ 0x58
 800c690:	900a      	str	r0, [sp, #40]	@ 0x28
 800c692:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c694:	e7c3      	b.n	800c61e <_dtoa_r+0x552>
 800c696:	0030      	movs	r0, r6
 800c698:	0039      	movs	r1, r7
 800c69a:	f7f5 fd0b 	bl	80020b4 <__aeabi_dmul>
 800c69e:	9d08      	ldr	r5, [sp, #32]
 800c6a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c6a2:	002b      	movs	r3, r5
 800c6a4:	4694      	mov	ip, r2
 800c6a6:	9016      	str	r0, [sp, #88]	@ 0x58
 800c6a8:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c6aa:	4463      	add	r3, ip
 800c6ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800c6ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6b2:	f7f6 fc11 	bl	8002ed8 <__aeabi_d2iz>
 800c6b6:	0004      	movs	r4, r0
 800c6b8:	f7f6 fc4a 	bl	8002f50 <__aeabi_i2d>
 800c6bc:	000b      	movs	r3, r1
 800c6be:	0002      	movs	r2, r0
 800c6c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6c4:	f7f5 ffdc 	bl	8002680 <__aeabi_dsub>
 800c6c8:	3430      	adds	r4, #48	@ 0x30
 800c6ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6cc:	702c      	strb	r4, [r5, #0]
 800c6ce:	3501      	adds	r5, #1
 800c6d0:	0006      	movs	r6, r0
 800c6d2:	000f      	movs	r7, r1
 800c6d4:	42ab      	cmp	r3, r5
 800c6d6:	d12a      	bne.n	800c72e <_dtoa_r+0x662>
 800c6d8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c6da:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c6dc:	9b08      	ldr	r3, [sp, #32]
 800c6de:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800c6e0:	469c      	mov	ip, r3
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	4b42      	ldr	r3, [pc, #264]	@ (800c7f0 <_dtoa_r+0x724>)
 800c6e6:	4464      	add	r4, ip
 800c6e8:	f7f4 fce4 	bl	80010b4 <__aeabi_dadd>
 800c6ec:	0002      	movs	r2, r0
 800c6ee:	000b      	movs	r3, r1
 800c6f0:	0030      	movs	r0, r6
 800c6f2:	0039      	movs	r1, r7
 800c6f4:	f7f3 fec0 	bl	8000478 <__aeabi_dcmpgt>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d000      	beq.n	800c6fe <_dtoa_r+0x632>
 800c6fc:	e07c      	b.n	800c7f8 <_dtoa_r+0x72c>
 800c6fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c700:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c702:	2000      	movs	r0, #0
 800c704:	493a      	ldr	r1, [pc, #232]	@ (800c7f0 <_dtoa_r+0x724>)
 800c706:	f7f5 ffbb 	bl	8002680 <__aeabi_dsub>
 800c70a:	0002      	movs	r2, r0
 800c70c:	000b      	movs	r3, r1
 800c70e:	0030      	movs	r0, r6
 800c710:	0039      	movs	r1, r7
 800c712:	f7f3 fe9d 	bl	8000450 <__aeabi_dcmplt>
 800c716:	2800      	cmp	r0, #0
 800c718:	d100      	bne.n	800c71c <_dtoa_r+0x650>
 800c71a:	e710      	b.n	800c53e <_dtoa_r+0x472>
 800c71c:	0023      	movs	r3, r4
 800c71e:	3c01      	subs	r4, #1
 800c720:	7822      	ldrb	r2, [r4, #0]
 800c722:	2a30      	cmp	r2, #48	@ 0x30
 800c724:	d0fa      	beq.n	800c71c <_dtoa_r+0x650>
 800c726:	001c      	movs	r4, r3
 800c728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	e042      	b.n	800c7b4 <_dtoa_r+0x6e8>
 800c72e:	2200      	movs	r2, #0
 800c730:	4b2b      	ldr	r3, [pc, #172]	@ (800c7e0 <_dtoa_r+0x714>)
 800c732:	f7f5 fcbf 	bl	80020b4 <__aeabi_dmul>
 800c736:	900a      	str	r0, [sp, #40]	@ 0x28
 800c738:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c73a:	e7b8      	b.n	800c6ae <_dtoa_r+0x5e2>
 800c73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73e:	9d08      	ldr	r5, [sp, #32]
 800c740:	3b01      	subs	r3, #1
 800c742:	195b      	adds	r3, r3, r5
 800c744:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c746:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c748:	930a      	str	r3, [sp, #40]	@ 0x28
 800c74a:	9a06      	ldr	r2, [sp, #24]
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	0030      	movs	r0, r6
 800c750:	0039      	movs	r1, r7
 800c752:	f7f5 f875 	bl	8001840 <__aeabi_ddiv>
 800c756:	f7f6 fbbf 	bl	8002ed8 <__aeabi_d2iz>
 800c75a:	9009      	str	r0, [sp, #36]	@ 0x24
 800c75c:	f7f6 fbf8 	bl	8002f50 <__aeabi_i2d>
 800c760:	9a06      	ldr	r2, [sp, #24]
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	f7f5 fca6 	bl	80020b4 <__aeabi_dmul>
 800c768:	0002      	movs	r2, r0
 800c76a:	000b      	movs	r3, r1
 800c76c:	0030      	movs	r0, r6
 800c76e:	0039      	movs	r1, r7
 800c770:	f7f5 ff86 	bl	8002680 <__aeabi_dsub>
 800c774:	002b      	movs	r3, r5
 800c776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c778:	3501      	adds	r5, #1
 800c77a:	3230      	adds	r2, #48	@ 0x30
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c780:	002c      	movs	r4, r5
 800c782:	429a      	cmp	r2, r3
 800c784:	d14b      	bne.n	800c81e <_dtoa_r+0x752>
 800c786:	0002      	movs	r2, r0
 800c788:	000b      	movs	r3, r1
 800c78a:	f7f4 fc93 	bl	80010b4 <__aeabi_dadd>
 800c78e:	9a06      	ldr	r2, [sp, #24]
 800c790:	9b07      	ldr	r3, [sp, #28]
 800c792:	0006      	movs	r6, r0
 800c794:	000f      	movs	r7, r1
 800c796:	f7f3 fe6f 	bl	8000478 <__aeabi_dcmpgt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d12a      	bne.n	800c7f4 <_dtoa_r+0x728>
 800c79e:	9a06      	ldr	r2, [sp, #24]
 800c7a0:	9b07      	ldr	r3, [sp, #28]
 800c7a2:	0030      	movs	r0, r6
 800c7a4:	0039      	movs	r1, r7
 800c7a6:	f7f3 fe4d 	bl	8000444 <__aeabi_dcmpeq>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d002      	beq.n	800c7b4 <_dtoa_r+0x6e8>
 800c7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b0:	07dd      	lsls	r5, r3, #31
 800c7b2:	d41f      	bmi.n	800c7f4 <_dtoa_r+0x728>
 800c7b4:	9905      	ldr	r1, [sp, #20]
 800c7b6:	9803      	ldr	r0, [sp, #12]
 800c7b8:	f000 fbc2 	bl	800cf40 <_Bfree>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	7023      	strb	r3, [r4, #0]
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d100      	bne.n	800c7d0 <_dtoa_r+0x704>
 800c7ce:	e4c7      	b.n	800c160 <_dtoa_r+0x94>
 800c7d0:	601c      	str	r4, [r3, #0]
 800c7d2:	e4c5      	b.n	800c160 <_dtoa_r+0x94>
 800c7d4:	0800e648 	.word	0x0800e648
 800c7d8:	0800e620 	.word	0x0800e620
 800c7dc:	3ff00000 	.word	0x3ff00000
 800c7e0:	40240000 	.word	0x40240000
 800c7e4:	401c0000 	.word	0x401c0000
 800c7e8:	fcc00000 	.word	0xfcc00000
 800c7ec:	40140000 	.word	0x40140000
 800c7f0:	3fe00000 	.word	0x3fe00000
 800c7f4:	9b04      	ldr	r3, [sp, #16]
 800c7f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c7f8:	0023      	movs	r3, r4
 800c7fa:	001c      	movs	r4, r3
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	781a      	ldrb	r2, [r3, #0]
 800c800:	2a39      	cmp	r2, #57	@ 0x39
 800c802:	d108      	bne.n	800c816 <_dtoa_r+0x74a>
 800c804:	9a08      	ldr	r2, [sp, #32]
 800c806:	429a      	cmp	r2, r3
 800c808:	d1f7      	bne.n	800c7fa <_dtoa_r+0x72e>
 800c80a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c80c:	9908      	ldr	r1, [sp, #32]
 800c80e:	3201      	adds	r2, #1
 800c810:	920c      	str	r2, [sp, #48]	@ 0x30
 800c812:	2230      	movs	r2, #48	@ 0x30
 800c814:	700a      	strb	r2, [r1, #0]
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	3201      	adds	r2, #1
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	e784      	b.n	800c728 <_dtoa_r+0x65c>
 800c81e:	2200      	movs	r2, #0
 800c820:	4bc6      	ldr	r3, [pc, #792]	@ (800cb3c <_dtoa_r+0xa70>)
 800c822:	f7f5 fc47 	bl	80020b4 <__aeabi_dmul>
 800c826:	2200      	movs	r2, #0
 800c828:	2300      	movs	r3, #0
 800c82a:	0006      	movs	r6, r0
 800c82c:	000f      	movs	r7, r1
 800c82e:	f7f3 fe09 	bl	8000444 <__aeabi_dcmpeq>
 800c832:	2800      	cmp	r0, #0
 800c834:	d089      	beq.n	800c74a <_dtoa_r+0x67e>
 800c836:	e7bd      	b.n	800c7b4 <_dtoa_r+0x6e8>
 800c838:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c83a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c83c:	9c06      	ldr	r4, [sp, #24]
 800c83e:	2f00      	cmp	r7, #0
 800c840:	d014      	beq.n	800c86c <_dtoa_r+0x7a0>
 800c842:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c844:	2a01      	cmp	r2, #1
 800c846:	dd00      	ble.n	800c84a <_dtoa_r+0x77e>
 800c848:	e0e4      	b.n	800ca14 <_dtoa_r+0x948>
 800c84a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d100      	bne.n	800c852 <_dtoa_r+0x786>
 800c850:	e0da      	b.n	800ca08 <_dtoa_r+0x93c>
 800c852:	4abb      	ldr	r2, [pc, #748]	@ (800cb40 <_dtoa_r+0xa74>)
 800c854:	189b      	adds	r3, r3, r2
 800c856:	9a06      	ldr	r2, [sp, #24]
 800c858:	2101      	movs	r1, #1
 800c85a:	18d2      	adds	r2, r2, r3
 800c85c:	9206      	str	r2, [sp, #24]
 800c85e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c860:	9803      	ldr	r0, [sp, #12]
 800c862:	18d3      	adds	r3, r2, r3
 800c864:	930d      	str	r3, [sp, #52]	@ 0x34
 800c866:	f000 fc23 	bl	800d0b0 <__i2b>
 800c86a:	0007      	movs	r7, r0
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	d00e      	beq.n	800c88e <_dtoa_r+0x7c2>
 800c870:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c872:	2b00      	cmp	r3, #0
 800c874:	dd0b      	ble.n	800c88e <_dtoa_r+0x7c2>
 800c876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c878:	0023      	movs	r3, r4
 800c87a:	4294      	cmp	r4, r2
 800c87c:	dd00      	ble.n	800c880 <_dtoa_r+0x7b4>
 800c87e:	0013      	movs	r3, r2
 800c880:	9a06      	ldr	r2, [sp, #24]
 800c882:	1ae4      	subs	r4, r4, r3
 800c884:	1ad2      	subs	r2, r2, r3
 800c886:	9206      	str	r2, [sp, #24]
 800c888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c88e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d021      	beq.n	800c8d8 <_dtoa_r+0x80c>
 800c894:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c896:	2b00      	cmp	r3, #0
 800c898:	d100      	bne.n	800c89c <_dtoa_r+0x7d0>
 800c89a:	e0d3      	b.n	800ca44 <_dtoa_r+0x978>
 800c89c:	9e05      	ldr	r6, [sp, #20]
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	d014      	beq.n	800c8cc <_dtoa_r+0x800>
 800c8a2:	0039      	movs	r1, r7
 800c8a4:	002a      	movs	r2, r5
 800c8a6:	9803      	ldr	r0, [sp, #12]
 800c8a8:	f000 fcc4 	bl	800d234 <__pow5mult>
 800c8ac:	9a05      	ldr	r2, [sp, #20]
 800c8ae:	0001      	movs	r1, r0
 800c8b0:	0007      	movs	r7, r0
 800c8b2:	9803      	ldr	r0, [sp, #12]
 800c8b4:	f000 fc14 	bl	800d0e0 <__multiply>
 800c8b8:	0006      	movs	r6, r0
 800c8ba:	9905      	ldr	r1, [sp, #20]
 800c8bc:	9803      	ldr	r0, [sp, #12]
 800c8be:	f000 fb3f 	bl	800cf40 <_Bfree>
 800c8c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c4:	9605      	str	r6, [sp, #20]
 800c8c6:	1b5b      	subs	r3, r3, r5
 800c8c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8ca:	d005      	beq.n	800c8d8 <_dtoa_r+0x80c>
 800c8cc:	0031      	movs	r1, r6
 800c8ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8d0:	9803      	ldr	r0, [sp, #12]
 800c8d2:	f000 fcaf 	bl	800d234 <__pow5mult>
 800c8d6:	9005      	str	r0, [sp, #20]
 800c8d8:	2101      	movs	r1, #1
 800c8da:	9803      	ldr	r0, [sp, #12]
 800c8dc:	f000 fbe8 	bl	800d0b0 <__i2b>
 800c8e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c8e2:	0006      	movs	r6, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d100      	bne.n	800c8ea <_dtoa_r+0x81e>
 800c8e8:	e1bc      	b.n	800cc64 <_dtoa_r+0xb98>
 800c8ea:	001a      	movs	r2, r3
 800c8ec:	0001      	movs	r1, r0
 800c8ee:	9803      	ldr	r0, [sp, #12]
 800c8f0:	f000 fca0 	bl	800d234 <__pow5mult>
 800c8f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c8f6:	0006      	movs	r6, r0
 800c8f8:	2500      	movs	r5, #0
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	dc16      	bgt.n	800c92c <_dtoa_r+0x860>
 800c8fe:	2500      	movs	r5, #0
 800c900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c902:	42ab      	cmp	r3, r5
 800c904:	d10e      	bne.n	800c924 <_dtoa_r+0x858>
 800c906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c908:	031b      	lsls	r3, r3, #12
 800c90a:	42ab      	cmp	r3, r5
 800c90c:	d10a      	bne.n	800c924 <_dtoa_r+0x858>
 800c90e:	4b8d      	ldr	r3, [pc, #564]	@ (800cb44 <_dtoa_r+0xa78>)
 800c910:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c912:	4213      	tst	r3, r2
 800c914:	d006      	beq.n	800c924 <_dtoa_r+0x858>
 800c916:	9b06      	ldr	r3, [sp, #24]
 800c918:	3501      	adds	r5, #1
 800c91a:	3301      	adds	r3, #1
 800c91c:	9306      	str	r3, [sp, #24]
 800c91e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c920:	3301      	adds	r3, #1
 800c922:	930d      	str	r3, [sp, #52]	@ 0x34
 800c924:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c926:	2001      	movs	r0, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d008      	beq.n	800c93e <_dtoa_r+0x872>
 800c92c:	6933      	ldr	r3, [r6, #16]
 800c92e:	3303      	adds	r3, #3
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	18f3      	adds	r3, r6, r3
 800c934:	6858      	ldr	r0, [r3, #4]
 800c936:	f000 fb6b 	bl	800d010 <__hi0bits>
 800c93a:	2320      	movs	r3, #32
 800c93c:	1a18      	subs	r0, r3, r0
 800c93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c940:	1818      	adds	r0, r3, r0
 800c942:	0002      	movs	r2, r0
 800c944:	231f      	movs	r3, #31
 800c946:	401a      	ands	r2, r3
 800c948:	4218      	tst	r0, r3
 800c94a:	d100      	bne.n	800c94e <_dtoa_r+0x882>
 800c94c:	e081      	b.n	800ca52 <_dtoa_r+0x986>
 800c94e:	3301      	adds	r3, #1
 800c950:	1a9b      	subs	r3, r3, r2
 800c952:	2b04      	cmp	r3, #4
 800c954:	dd79      	ble.n	800ca4a <_dtoa_r+0x97e>
 800c956:	231c      	movs	r3, #28
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	9a06      	ldr	r2, [sp, #24]
 800c95c:	18e4      	adds	r4, r4, r3
 800c95e:	18d2      	adds	r2, r2, r3
 800c960:	9206      	str	r2, [sp, #24]
 800c962:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c964:	18d3      	adds	r3, r2, r3
 800c966:	930d      	str	r3, [sp, #52]	@ 0x34
 800c968:	9b06      	ldr	r3, [sp, #24]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd05      	ble.n	800c97a <_dtoa_r+0x8ae>
 800c96e:	001a      	movs	r2, r3
 800c970:	9905      	ldr	r1, [sp, #20]
 800c972:	9803      	ldr	r0, [sp, #12]
 800c974:	f000 fcba 	bl	800d2ec <__lshift>
 800c978:	9005      	str	r0, [sp, #20]
 800c97a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dd05      	ble.n	800c98c <_dtoa_r+0x8c0>
 800c980:	0031      	movs	r1, r6
 800c982:	001a      	movs	r2, r3
 800c984:	9803      	ldr	r0, [sp, #12]
 800c986:	f000 fcb1 	bl	800d2ec <__lshift>
 800c98a:	0006      	movs	r6, r0
 800c98c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d061      	beq.n	800ca56 <_dtoa_r+0x98a>
 800c992:	0031      	movs	r1, r6
 800c994:	9805      	ldr	r0, [sp, #20]
 800c996:	f000 fd15 	bl	800d3c4 <__mcmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	da5b      	bge.n	800ca56 <_dtoa_r+0x98a>
 800c99e:	9b04      	ldr	r3, [sp, #16]
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9a6:	9905      	ldr	r1, [sp, #20]
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	9803      	ldr	r0, [sp, #12]
 800c9ac:	f000 faec 	bl	800cf88 <__multadd>
 800c9b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9b2:	9005      	str	r0, [sp, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d100      	bne.n	800c9ba <_dtoa_r+0x8ee>
 800c9b8:	e15b      	b.n	800cc72 <_dtoa_r+0xba6>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	0039      	movs	r1, r7
 800c9be:	220a      	movs	r2, #10
 800c9c0:	9803      	ldr	r0, [sp, #12]
 800c9c2:	f000 fae1 	bl	800cf88 <__multadd>
 800c9c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9c8:	0007      	movs	r7, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	dc4d      	bgt.n	800ca6a <_dtoa_r+0x99e>
 800c9ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	dd46      	ble.n	800ca62 <_dtoa_r+0x996>
 800c9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d000      	beq.n	800c9dc <_dtoa_r+0x910>
 800c9da:	e5db      	b.n	800c594 <_dtoa_r+0x4c8>
 800c9dc:	0031      	movs	r1, r6
 800c9de:	2205      	movs	r2, #5
 800c9e0:	9803      	ldr	r0, [sp, #12]
 800c9e2:	f000 fad1 	bl	800cf88 <__multadd>
 800c9e6:	0006      	movs	r6, r0
 800c9e8:	0001      	movs	r1, r0
 800c9ea:	9805      	ldr	r0, [sp, #20]
 800c9ec:	f000 fcea 	bl	800d3c4 <__mcmp>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	dc00      	bgt.n	800c9f6 <_dtoa_r+0x92a>
 800c9f4:	e5ce      	b.n	800c594 <_dtoa_r+0x4c8>
 800c9f6:	9b08      	ldr	r3, [sp, #32]
 800c9f8:	9a08      	ldr	r2, [sp, #32]
 800c9fa:	1c5c      	adds	r4, r3, #1
 800c9fc:	2331      	movs	r3, #49	@ 0x31
 800c9fe:	7013      	strb	r3, [r2, #0]
 800ca00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca02:	3301      	adds	r3, #1
 800ca04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca06:	e5c9      	b.n	800c59c <_dtoa_r+0x4d0>
 800ca08:	2336      	movs	r3, #54	@ 0x36
 800ca0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca0c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ca0e:	1a9b      	subs	r3, r3, r2
 800ca10:	9c06      	ldr	r4, [sp, #24]
 800ca12:	e720      	b.n	800c856 <_dtoa_r+0x78a>
 800ca14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca16:	1e5d      	subs	r5, r3, #1
 800ca18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca1a:	42ab      	cmp	r3, r5
 800ca1c:	db08      	blt.n	800ca30 <_dtoa_r+0x964>
 800ca1e:	1b5d      	subs	r5, r3, r5
 800ca20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	daf4      	bge.n	800ca10 <_dtoa_r+0x944>
 800ca26:	9b06      	ldr	r3, [sp, #24]
 800ca28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca2a:	1a9c      	subs	r4, r3, r2
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e712      	b.n	800c856 <_dtoa_r+0x78a>
 800ca30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca32:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ca34:	1aeb      	subs	r3, r5, r3
 800ca36:	18d3      	adds	r3, r2, r3
 800ca38:	9314      	str	r3, [sp, #80]	@ 0x50
 800ca3a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ca3c:	9c06      	ldr	r4, [sp, #24]
 800ca3e:	2500      	movs	r5, #0
 800ca40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca42:	e708      	b.n	800c856 <_dtoa_r+0x78a>
 800ca44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca46:	9905      	ldr	r1, [sp, #20]
 800ca48:	e742      	b.n	800c8d0 <_dtoa_r+0x804>
 800ca4a:	2b04      	cmp	r3, #4
 800ca4c:	d08c      	beq.n	800c968 <_dtoa_r+0x89c>
 800ca4e:	331c      	adds	r3, #28
 800ca50:	e783      	b.n	800c95a <_dtoa_r+0x88e>
 800ca52:	0013      	movs	r3, r2
 800ca54:	e7fb      	b.n	800ca4e <_dtoa_r+0x982>
 800ca56:	9b04      	ldr	r3, [sp, #16]
 800ca58:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	ddb5      	ble.n	800c9ce <_dtoa_r+0x902>
 800ca62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d100      	bne.n	800ca6a <_dtoa_r+0x99e>
 800ca68:	e107      	b.n	800cc7a <_dtoa_r+0xbae>
 800ca6a:	2c00      	cmp	r4, #0
 800ca6c:	dd05      	ble.n	800ca7a <_dtoa_r+0x9ae>
 800ca6e:	0039      	movs	r1, r7
 800ca70:	0022      	movs	r2, r4
 800ca72:	9803      	ldr	r0, [sp, #12]
 800ca74:	f000 fc3a 	bl	800d2ec <__lshift>
 800ca78:	0007      	movs	r7, r0
 800ca7a:	9704      	str	r7, [sp, #16]
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	d020      	beq.n	800cac2 <_dtoa_r+0x9f6>
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	9803      	ldr	r0, [sp, #12]
 800ca84:	f000 fa18 	bl	800ceb8 <_Balloc>
 800ca88:	1e04      	subs	r4, r0, #0
 800ca8a:	d10c      	bne.n	800caa6 <_dtoa_r+0x9da>
 800ca8c:	0022      	movs	r2, r4
 800ca8e:	4b2e      	ldr	r3, [pc, #184]	@ (800cb48 <_dtoa_r+0xa7c>)
 800ca90:	482e      	ldr	r0, [pc, #184]	@ (800cb4c <_dtoa_r+0xa80>)
 800ca92:	492f      	ldr	r1, [pc, #188]	@ (800cb50 <_dtoa_r+0xa84>)
 800ca94:	f7ff fb2f 	bl	800c0f6 <_dtoa_r+0x2a>
 800ca98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ca9a:	0037      	movs	r7, r6
 800ca9c:	e7ab      	b.n	800c9f6 <_dtoa_r+0x92a>
 800ca9e:	9b04      	ldr	r3, [sp, #16]
 800caa0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800caa2:	930c      	str	r3, [sp, #48]	@ 0x30
 800caa4:	e7f9      	b.n	800ca9a <_dtoa_r+0x9ce>
 800caa6:	0039      	movs	r1, r7
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	310c      	adds	r1, #12
 800caac:	3202      	adds	r2, #2
 800caae:	0092      	lsls	r2, r2, #2
 800cab0:	300c      	adds	r0, #12
 800cab2:	f000 ffd1 	bl	800da58 <memcpy>
 800cab6:	2201      	movs	r2, #1
 800cab8:	0021      	movs	r1, r4
 800caba:	9803      	ldr	r0, [sp, #12]
 800cabc:	f000 fc16 	bl	800d2ec <__lshift>
 800cac0:	9004      	str	r0, [sp, #16]
 800cac2:	9b08      	ldr	r3, [sp, #32]
 800cac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cac6:	9306      	str	r3, [sp, #24]
 800cac8:	3b01      	subs	r3, #1
 800caca:	189b      	adds	r3, r3, r2
 800cacc:	2201      	movs	r2, #1
 800cace:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cad2:	4013      	ands	r3, r2
 800cad4:	930e      	str	r3, [sp, #56]	@ 0x38
 800cad6:	0031      	movs	r1, r6
 800cad8:	9805      	ldr	r0, [sp, #20]
 800cada:	f7ff fa71 	bl	800bfc0 <quorem>
 800cade:	0039      	movs	r1, r7
 800cae0:	0005      	movs	r5, r0
 800cae2:	900a      	str	r0, [sp, #40]	@ 0x28
 800cae4:	9805      	ldr	r0, [sp, #20]
 800cae6:	f000 fc6d 	bl	800d3c4 <__mcmp>
 800caea:	9a04      	ldr	r2, [sp, #16]
 800caec:	900d      	str	r0, [sp, #52]	@ 0x34
 800caee:	0031      	movs	r1, r6
 800caf0:	9803      	ldr	r0, [sp, #12]
 800caf2:	f000 fc83 	bl	800d3fc <__mdiff>
 800caf6:	2201      	movs	r2, #1
 800caf8:	68c3      	ldr	r3, [r0, #12]
 800cafa:	0004      	movs	r4, r0
 800cafc:	3530      	adds	r5, #48	@ 0x30
 800cafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d104      	bne.n	800cb0e <_dtoa_r+0xa42>
 800cb04:	0001      	movs	r1, r0
 800cb06:	9805      	ldr	r0, [sp, #20]
 800cb08:	f000 fc5c 	bl	800d3c4 <__mcmp>
 800cb0c:	9009      	str	r0, [sp, #36]	@ 0x24
 800cb0e:	0021      	movs	r1, r4
 800cb10:	9803      	ldr	r0, [sp, #12]
 800cb12:	f000 fa15 	bl	800cf40 <_Bfree>
 800cb16:	9b06      	ldr	r3, [sp, #24]
 800cb18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cb1a:	1c5c      	adds	r4, r3, #1
 800cb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb22:	4313      	orrs	r3, r2
 800cb24:	d116      	bne.n	800cb54 <_dtoa_r+0xa88>
 800cb26:	2d39      	cmp	r5, #57	@ 0x39
 800cb28:	d02f      	beq.n	800cb8a <_dtoa_r+0xabe>
 800cb2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dd01      	ble.n	800cb34 <_dtoa_r+0xa68>
 800cb30:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800cb32:	3531      	adds	r5, #49	@ 0x31
 800cb34:	9b06      	ldr	r3, [sp, #24]
 800cb36:	701d      	strb	r5, [r3, #0]
 800cb38:	e532      	b.n	800c5a0 <_dtoa_r+0x4d4>
 800cb3a:	46c0      	nop			@ (mov r8, r8)
 800cb3c:	40240000 	.word	0x40240000
 800cb40:	00000433 	.word	0x00000433
 800cb44:	7ff00000 	.word	0x7ff00000
 800cb48:	0800e54c 	.word	0x0800e54c
 800cb4c:	0800e4f4 	.word	0x0800e4f4
 800cb50:	000002ef 	.word	0x000002ef
 800cb54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	db04      	blt.n	800cb64 <_dtoa_r+0xa98>
 800cb5a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb60:	4313      	orrs	r3, r2
 800cb62:	d11e      	bne.n	800cba2 <_dtoa_r+0xad6>
 800cb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	dde4      	ble.n	800cb34 <_dtoa_r+0xa68>
 800cb6a:	9905      	ldr	r1, [sp, #20]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	9803      	ldr	r0, [sp, #12]
 800cb70:	f000 fbbc 	bl	800d2ec <__lshift>
 800cb74:	0031      	movs	r1, r6
 800cb76:	9005      	str	r0, [sp, #20]
 800cb78:	f000 fc24 	bl	800d3c4 <__mcmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	dc02      	bgt.n	800cb86 <_dtoa_r+0xaba>
 800cb80:	d1d8      	bne.n	800cb34 <_dtoa_r+0xa68>
 800cb82:	07eb      	lsls	r3, r5, #31
 800cb84:	d5d6      	bpl.n	800cb34 <_dtoa_r+0xa68>
 800cb86:	2d39      	cmp	r5, #57	@ 0x39
 800cb88:	d1d2      	bne.n	800cb30 <_dtoa_r+0xa64>
 800cb8a:	2339      	movs	r3, #57	@ 0x39
 800cb8c:	9a06      	ldr	r2, [sp, #24]
 800cb8e:	7013      	strb	r3, [r2, #0]
 800cb90:	0023      	movs	r3, r4
 800cb92:	001c      	movs	r4, r3
 800cb94:	3b01      	subs	r3, #1
 800cb96:	781a      	ldrb	r2, [r3, #0]
 800cb98:	2a39      	cmp	r2, #57	@ 0x39
 800cb9a:	d050      	beq.n	800cc3e <_dtoa_r+0xb72>
 800cb9c:	3201      	adds	r2, #1
 800cb9e:	701a      	strb	r2, [r3, #0]
 800cba0:	e4fe      	b.n	800c5a0 <_dtoa_r+0x4d4>
 800cba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd03      	ble.n	800cbb0 <_dtoa_r+0xae4>
 800cba8:	2d39      	cmp	r5, #57	@ 0x39
 800cbaa:	d0ee      	beq.n	800cb8a <_dtoa_r+0xabe>
 800cbac:	3501      	adds	r5, #1
 800cbae:	e7c1      	b.n	800cb34 <_dtoa_r+0xa68>
 800cbb0:	9b06      	ldr	r3, [sp, #24]
 800cbb2:	9a06      	ldr	r2, [sp, #24]
 800cbb4:	701d      	strb	r5, [r3, #0]
 800cbb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d02b      	beq.n	800cc14 <_dtoa_r+0xb48>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	220a      	movs	r2, #10
 800cbc0:	9905      	ldr	r1, [sp, #20]
 800cbc2:	9803      	ldr	r0, [sp, #12]
 800cbc4:	f000 f9e0 	bl	800cf88 <__multadd>
 800cbc8:	9b04      	ldr	r3, [sp, #16]
 800cbca:	9005      	str	r0, [sp, #20]
 800cbcc:	429f      	cmp	r7, r3
 800cbce:	d109      	bne.n	800cbe4 <_dtoa_r+0xb18>
 800cbd0:	0039      	movs	r1, r7
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	220a      	movs	r2, #10
 800cbd6:	9803      	ldr	r0, [sp, #12]
 800cbd8:	f000 f9d6 	bl	800cf88 <__multadd>
 800cbdc:	0007      	movs	r7, r0
 800cbde:	9004      	str	r0, [sp, #16]
 800cbe0:	9406      	str	r4, [sp, #24]
 800cbe2:	e778      	b.n	800cad6 <_dtoa_r+0xa0a>
 800cbe4:	0039      	movs	r1, r7
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	220a      	movs	r2, #10
 800cbea:	9803      	ldr	r0, [sp, #12]
 800cbec:	f000 f9cc 	bl	800cf88 <__multadd>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	0007      	movs	r7, r0
 800cbf4:	220a      	movs	r2, #10
 800cbf6:	9904      	ldr	r1, [sp, #16]
 800cbf8:	9803      	ldr	r0, [sp, #12]
 800cbfa:	f000 f9c5 	bl	800cf88 <__multadd>
 800cbfe:	9004      	str	r0, [sp, #16]
 800cc00:	e7ee      	b.n	800cbe0 <_dtoa_r+0xb14>
 800cc02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc04:	2401      	movs	r4, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	dd00      	ble.n	800cc0c <_dtoa_r+0xb40>
 800cc0a:	001c      	movs	r4, r3
 800cc0c:	9704      	str	r7, [sp, #16]
 800cc0e:	2700      	movs	r7, #0
 800cc10:	9b08      	ldr	r3, [sp, #32]
 800cc12:	191c      	adds	r4, r3, r4
 800cc14:	9905      	ldr	r1, [sp, #20]
 800cc16:	2201      	movs	r2, #1
 800cc18:	9803      	ldr	r0, [sp, #12]
 800cc1a:	f000 fb67 	bl	800d2ec <__lshift>
 800cc1e:	0031      	movs	r1, r6
 800cc20:	9005      	str	r0, [sp, #20]
 800cc22:	f000 fbcf 	bl	800d3c4 <__mcmp>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	dcb2      	bgt.n	800cb90 <_dtoa_r+0xac4>
 800cc2a:	d101      	bne.n	800cc30 <_dtoa_r+0xb64>
 800cc2c:	07ed      	lsls	r5, r5, #31
 800cc2e:	d4af      	bmi.n	800cb90 <_dtoa_r+0xac4>
 800cc30:	0023      	movs	r3, r4
 800cc32:	001c      	movs	r4, r3
 800cc34:	3b01      	subs	r3, #1
 800cc36:	781a      	ldrb	r2, [r3, #0]
 800cc38:	2a30      	cmp	r2, #48	@ 0x30
 800cc3a:	d0fa      	beq.n	800cc32 <_dtoa_r+0xb66>
 800cc3c:	e4b0      	b.n	800c5a0 <_dtoa_r+0x4d4>
 800cc3e:	9a08      	ldr	r2, [sp, #32]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d1a6      	bne.n	800cb92 <_dtoa_r+0xac6>
 800cc44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc46:	3301      	adds	r3, #1
 800cc48:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc4a:	2331      	movs	r3, #49	@ 0x31
 800cc4c:	7013      	strb	r3, [r2, #0]
 800cc4e:	e4a7      	b.n	800c5a0 <_dtoa_r+0x4d4>
 800cc50:	4b14      	ldr	r3, [pc, #80]	@ (800cca4 <_dtoa_r+0xbd8>)
 800cc52:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cc54:	9308      	str	r3, [sp, #32]
 800cc56:	4b14      	ldr	r3, [pc, #80]	@ (800cca8 <_dtoa_r+0xbdc>)
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	d001      	beq.n	800cc60 <_dtoa_r+0xb94>
 800cc5c:	f7ff fa7e 	bl	800c15c <_dtoa_r+0x90>
 800cc60:	f7ff fa7e 	bl	800c160 <_dtoa_r+0x94>
 800cc64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	dc00      	bgt.n	800cc6c <_dtoa_r+0xba0>
 800cc6a:	e648      	b.n	800c8fe <_dtoa_r+0x832>
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cc70:	e665      	b.n	800c93e <_dtoa_r+0x872>
 800cc72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dc00      	bgt.n	800cc7a <_dtoa_r+0xbae>
 800cc78:	e6a9      	b.n	800c9ce <_dtoa_r+0x902>
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	0031      	movs	r1, r6
 800cc7e:	9805      	ldr	r0, [sp, #20]
 800cc80:	f7ff f99e 	bl	800bfc0 <quorem>
 800cc84:	9b08      	ldr	r3, [sp, #32]
 800cc86:	3030      	adds	r0, #48	@ 0x30
 800cc88:	5518      	strb	r0, [r3, r4]
 800cc8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	0005      	movs	r5, r0
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	ddb6      	ble.n	800cc02 <_dtoa_r+0xb36>
 800cc94:	2300      	movs	r3, #0
 800cc96:	220a      	movs	r2, #10
 800cc98:	9905      	ldr	r1, [sp, #20]
 800cc9a:	9803      	ldr	r0, [sp, #12]
 800cc9c:	f000 f974 	bl	800cf88 <__multadd>
 800cca0:	9005      	str	r0, [sp, #20]
 800cca2:	e7eb      	b.n	800cc7c <_dtoa_r+0xbb0>
 800cca4:	0800e4d0 	.word	0x0800e4d0
 800cca8:	0800e4d8 	.word	0x0800e4d8

0800ccac <_free_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	0005      	movs	r5, r0
 800ccb0:	1e0c      	subs	r4, r1, #0
 800ccb2:	d010      	beq.n	800ccd6 <_free_r+0x2a>
 800ccb4:	3c04      	subs	r4, #4
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	da00      	bge.n	800ccbe <_free_r+0x12>
 800ccbc:	18e4      	adds	r4, r4, r3
 800ccbe:	0028      	movs	r0, r5
 800ccc0:	f000 f8ea 	bl	800ce98 <__malloc_lock>
 800ccc4:	4a1d      	ldr	r2, [pc, #116]	@ (800cd3c <_free_r+0x90>)
 800ccc6:	6813      	ldr	r3, [r2, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d105      	bne.n	800ccd8 <_free_r+0x2c>
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	6014      	str	r4, [r2, #0]
 800ccd0:	0028      	movs	r0, r5
 800ccd2:	f000 f8e9 	bl	800cea8 <__malloc_unlock>
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	d908      	bls.n	800ccee <_free_r+0x42>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	1821      	adds	r1, r4, r0
 800cce0:	428b      	cmp	r3, r1
 800cce2:	d1f3      	bne.n	800cccc <_free_r+0x20>
 800cce4:	6819      	ldr	r1, [r3, #0]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	1809      	adds	r1, r1, r0
 800ccea:	6021      	str	r1, [r4, #0]
 800ccec:	e7ee      	b.n	800cccc <_free_r+0x20>
 800ccee:	001a      	movs	r2, r3
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <_free_r+0x4e>
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	d9f9      	bls.n	800ccee <_free_r+0x42>
 800ccfa:	6811      	ldr	r1, [r2, #0]
 800ccfc:	1850      	adds	r0, r2, r1
 800ccfe:	42a0      	cmp	r0, r4
 800cd00:	d10b      	bne.n	800cd1a <_free_r+0x6e>
 800cd02:	6820      	ldr	r0, [r4, #0]
 800cd04:	1809      	adds	r1, r1, r0
 800cd06:	1850      	adds	r0, r2, r1
 800cd08:	6011      	str	r1, [r2, #0]
 800cd0a:	4283      	cmp	r3, r0
 800cd0c:	d1e0      	bne.n	800ccd0 <_free_r+0x24>
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	1841      	adds	r1, r0, r1
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	6053      	str	r3, [r2, #4]
 800cd18:	e7da      	b.n	800ccd0 <_free_r+0x24>
 800cd1a:	42a0      	cmp	r0, r4
 800cd1c:	d902      	bls.n	800cd24 <_free_r+0x78>
 800cd1e:	230c      	movs	r3, #12
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	e7d5      	b.n	800ccd0 <_free_r+0x24>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	1821      	adds	r1, r4, r0
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	d103      	bne.n	800cd34 <_free_r+0x88>
 800cd2c:	6819      	ldr	r1, [r3, #0]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	1809      	adds	r1, r1, r0
 800cd32:	6021      	str	r1, [r4, #0]
 800cd34:	6063      	str	r3, [r4, #4]
 800cd36:	6054      	str	r4, [r2, #4]
 800cd38:	e7ca      	b.n	800ccd0 <_free_r+0x24>
 800cd3a:	46c0      	nop			@ (mov r8, r8)
 800cd3c:	2000075c 	.word	0x2000075c

0800cd40 <malloc>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	4b03      	ldr	r3, [pc, #12]	@ (800cd50 <malloc+0x10>)
 800cd44:	0001      	movs	r1, r0
 800cd46:	6818      	ldr	r0, [r3, #0]
 800cd48:	f000 f826 	bl	800cd98 <_malloc_r>
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	46c0      	nop			@ (mov r8, r8)
 800cd50:	20000028 	.word	0x20000028

0800cd54 <sbrk_aligned>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4e0f      	ldr	r6, [pc, #60]	@ (800cd94 <sbrk_aligned+0x40>)
 800cd58:	000d      	movs	r5, r1
 800cd5a:	6831      	ldr	r1, [r6, #0]
 800cd5c:	0004      	movs	r4, r0
 800cd5e:	2900      	cmp	r1, #0
 800cd60:	d102      	bne.n	800cd68 <sbrk_aligned+0x14>
 800cd62:	f000 fe67 	bl	800da34 <_sbrk_r>
 800cd66:	6030      	str	r0, [r6, #0]
 800cd68:	0029      	movs	r1, r5
 800cd6a:	0020      	movs	r0, r4
 800cd6c:	f000 fe62 	bl	800da34 <_sbrk_r>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d103      	bne.n	800cd7c <sbrk_aligned+0x28>
 800cd74:	2501      	movs	r5, #1
 800cd76:	426d      	negs	r5, r5
 800cd78:	0028      	movs	r0, r5
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	1cc5      	adds	r5, r0, #3
 800cd80:	439d      	bics	r5, r3
 800cd82:	42a8      	cmp	r0, r5
 800cd84:	d0f8      	beq.n	800cd78 <sbrk_aligned+0x24>
 800cd86:	1a29      	subs	r1, r5, r0
 800cd88:	0020      	movs	r0, r4
 800cd8a:	f000 fe53 	bl	800da34 <_sbrk_r>
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d1f2      	bne.n	800cd78 <sbrk_aligned+0x24>
 800cd92:	e7ef      	b.n	800cd74 <sbrk_aligned+0x20>
 800cd94:	20000758 	.word	0x20000758

0800cd98 <_malloc_r>:
 800cd98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd9a:	2203      	movs	r2, #3
 800cd9c:	1ccb      	adds	r3, r1, #3
 800cd9e:	4393      	bics	r3, r2
 800cda0:	3308      	adds	r3, #8
 800cda2:	0005      	movs	r5, r0
 800cda4:	001f      	movs	r7, r3
 800cda6:	2b0c      	cmp	r3, #12
 800cda8:	d234      	bcs.n	800ce14 <_malloc_r+0x7c>
 800cdaa:	270c      	movs	r7, #12
 800cdac:	42b9      	cmp	r1, r7
 800cdae:	d833      	bhi.n	800ce18 <_malloc_r+0x80>
 800cdb0:	0028      	movs	r0, r5
 800cdb2:	f000 f871 	bl	800ce98 <__malloc_lock>
 800cdb6:	4e37      	ldr	r6, [pc, #220]	@ (800ce94 <_malloc_r+0xfc>)
 800cdb8:	6833      	ldr	r3, [r6, #0]
 800cdba:	001c      	movs	r4, r3
 800cdbc:	2c00      	cmp	r4, #0
 800cdbe:	d12f      	bne.n	800ce20 <_malloc_r+0x88>
 800cdc0:	0039      	movs	r1, r7
 800cdc2:	0028      	movs	r0, r5
 800cdc4:	f7ff ffc6 	bl	800cd54 <sbrk_aligned>
 800cdc8:	0004      	movs	r4, r0
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	d15f      	bne.n	800ce8e <_malloc_r+0xf6>
 800cdce:	6834      	ldr	r4, [r6, #0]
 800cdd0:	9400      	str	r4, [sp, #0]
 800cdd2:	9b00      	ldr	r3, [sp, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d14a      	bne.n	800ce6e <_malloc_r+0xd6>
 800cdd8:	2c00      	cmp	r4, #0
 800cdda:	d052      	beq.n	800ce82 <_malloc_r+0xea>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	0028      	movs	r0, r5
 800cde0:	18e3      	adds	r3, r4, r3
 800cde2:	9900      	ldr	r1, [sp, #0]
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	f000 fe25 	bl	800da34 <_sbrk_r>
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	4283      	cmp	r3, r0
 800cdee:	d148      	bne.n	800ce82 <_malloc_r+0xea>
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	0028      	movs	r0, r5
 800cdf4:	1aff      	subs	r7, r7, r3
 800cdf6:	0039      	movs	r1, r7
 800cdf8:	f7ff ffac 	bl	800cd54 <sbrk_aligned>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d040      	beq.n	800ce82 <_malloc_r+0xea>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	19db      	adds	r3, r3, r7
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	6833      	ldr	r3, [r6, #0]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	d133      	bne.n	800ce76 <_malloc_r+0xde>
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	6033      	str	r3, [r6, #0]
 800ce12:	e019      	b.n	800ce48 <_malloc_r+0xb0>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dac9      	bge.n	800cdac <_malloc_r+0x14>
 800ce18:	230c      	movs	r3, #12
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce20:	6821      	ldr	r1, [r4, #0]
 800ce22:	1bc9      	subs	r1, r1, r7
 800ce24:	d420      	bmi.n	800ce68 <_malloc_r+0xd0>
 800ce26:	290b      	cmp	r1, #11
 800ce28:	d90a      	bls.n	800ce40 <_malloc_r+0xa8>
 800ce2a:	19e2      	adds	r2, r4, r7
 800ce2c:	6027      	str	r7, [r4, #0]
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	d104      	bne.n	800ce3c <_malloc_r+0xa4>
 800ce32:	6032      	str	r2, [r6, #0]
 800ce34:	6863      	ldr	r3, [r4, #4]
 800ce36:	6011      	str	r1, [r2, #0]
 800ce38:	6053      	str	r3, [r2, #4]
 800ce3a:	e005      	b.n	800ce48 <_malloc_r+0xb0>
 800ce3c:	605a      	str	r2, [r3, #4]
 800ce3e:	e7f9      	b.n	800ce34 <_malloc_r+0x9c>
 800ce40:	6862      	ldr	r2, [r4, #4]
 800ce42:	42a3      	cmp	r3, r4
 800ce44:	d10e      	bne.n	800ce64 <_malloc_r+0xcc>
 800ce46:	6032      	str	r2, [r6, #0]
 800ce48:	0028      	movs	r0, r5
 800ce4a:	f000 f82d 	bl	800cea8 <__malloc_unlock>
 800ce4e:	0020      	movs	r0, r4
 800ce50:	2207      	movs	r2, #7
 800ce52:	300b      	adds	r0, #11
 800ce54:	1d23      	adds	r3, r4, #4
 800ce56:	4390      	bics	r0, r2
 800ce58:	1ac2      	subs	r2, r0, r3
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	d0df      	beq.n	800ce1e <_malloc_r+0x86>
 800ce5e:	1a1b      	subs	r3, r3, r0
 800ce60:	50a3      	str	r3, [r4, r2]
 800ce62:	e7dc      	b.n	800ce1e <_malloc_r+0x86>
 800ce64:	605a      	str	r2, [r3, #4]
 800ce66:	e7ef      	b.n	800ce48 <_malloc_r+0xb0>
 800ce68:	0023      	movs	r3, r4
 800ce6a:	6864      	ldr	r4, [r4, #4]
 800ce6c:	e7a6      	b.n	800cdbc <_malloc_r+0x24>
 800ce6e:	9c00      	ldr	r4, [sp, #0]
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	e7ad      	b.n	800cdd2 <_malloc_r+0x3a>
 800ce76:	001a      	movs	r2, r3
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	d1fb      	bne.n	800ce76 <_malloc_r+0xde>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e7da      	b.n	800ce38 <_malloc_r+0xa0>
 800ce82:	230c      	movs	r3, #12
 800ce84:	0028      	movs	r0, r5
 800ce86:	602b      	str	r3, [r5, #0]
 800ce88:	f000 f80e 	bl	800cea8 <__malloc_unlock>
 800ce8c:	e7c6      	b.n	800ce1c <_malloc_r+0x84>
 800ce8e:	6007      	str	r7, [r0, #0]
 800ce90:	e7da      	b.n	800ce48 <_malloc_r+0xb0>
 800ce92:	46c0      	nop			@ (mov r8, r8)
 800ce94:	2000075c 	.word	0x2000075c

0800ce98 <__malloc_lock>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	4802      	ldr	r0, [pc, #8]	@ (800cea4 <__malloc_lock+0xc>)
 800ce9c:	f7ff f87b 	bl	800bf96 <__retarget_lock_acquire_recursive>
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	20000754 	.word	0x20000754

0800cea8 <__malloc_unlock>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4802      	ldr	r0, [pc, #8]	@ (800ceb4 <__malloc_unlock+0xc>)
 800ceac:	f7ff f874 	bl	800bf98 <__retarget_lock_release_recursive>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	20000754 	.word	0x20000754

0800ceb8 <_Balloc>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	69c5      	ldr	r5, [r0, #28]
 800cebc:	0006      	movs	r6, r0
 800cebe:	000c      	movs	r4, r1
 800cec0:	2d00      	cmp	r5, #0
 800cec2:	d10e      	bne.n	800cee2 <_Balloc+0x2a>
 800cec4:	2010      	movs	r0, #16
 800cec6:	f7ff ff3b 	bl	800cd40 <malloc>
 800ceca:	1e02      	subs	r2, r0, #0
 800cecc:	61f0      	str	r0, [r6, #28]
 800cece:	d104      	bne.n	800ceda <_Balloc+0x22>
 800ced0:	216b      	movs	r1, #107	@ 0x6b
 800ced2:	4b19      	ldr	r3, [pc, #100]	@ (800cf38 <_Balloc+0x80>)
 800ced4:	4819      	ldr	r0, [pc, #100]	@ (800cf3c <_Balloc+0x84>)
 800ced6:	f000 fdc9 	bl	800da6c <__assert_func>
 800ceda:	6045      	str	r5, [r0, #4]
 800cedc:	6085      	str	r5, [r0, #8]
 800cede:	6005      	str	r5, [r0, #0]
 800cee0:	60c5      	str	r5, [r0, #12]
 800cee2:	69f5      	ldr	r5, [r6, #28]
 800cee4:	68eb      	ldr	r3, [r5, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d013      	beq.n	800cf12 <_Balloc+0x5a>
 800ceea:	69f3      	ldr	r3, [r6, #28]
 800ceec:	00a2      	lsls	r2, r4, #2
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	189b      	adds	r3, r3, r2
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d118      	bne.n	800cf2a <_Balloc+0x72>
 800cef8:	2101      	movs	r1, #1
 800cefa:	000d      	movs	r5, r1
 800cefc:	40a5      	lsls	r5, r4
 800cefe:	1d6a      	adds	r2, r5, #5
 800cf00:	0030      	movs	r0, r6
 800cf02:	0092      	lsls	r2, r2, #2
 800cf04:	f000 fdd0 	bl	800daa8 <_calloc_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d00c      	beq.n	800cf26 <_Balloc+0x6e>
 800cf0c:	6044      	str	r4, [r0, #4]
 800cf0e:	6085      	str	r5, [r0, #8]
 800cf10:	e00d      	b.n	800cf2e <_Balloc+0x76>
 800cf12:	2221      	movs	r2, #33	@ 0x21
 800cf14:	2104      	movs	r1, #4
 800cf16:	0030      	movs	r0, r6
 800cf18:	f000 fdc6 	bl	800daa8 <_calloc_r>
 800cf1c:	69f3      	ldr	r3, [r6, #28]
 800cf1e:	60e8      	str	r0, [r5, #12]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e1      	bne.n	800ceea <_Balloc+0x32>
 800cf26:	2000      	movs	r0, #0
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	6802      	ldr	r2, [r0, #0]
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6103      	str	r3, [r0, #16]
 800cf32:	60c3      	str	r3, [r0, #12]
 800cf34:	e7f8      	b.n	800cf28 <_Balloc+0x70>
 800cf36:	46c0      	nop			@ (mov r8, r8)
 800cf38:	0800e4dd 	.word	0x0800e4dd
 800cf3c:	0800e55d 	.word	0x0800e55d

0800cf40 <_Bfree>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	69c6      	ldr	r6, [r0, #28]
 800cf44:	0005      	movs	r5, r0
 800cf46:	000c      	movs	r4, r1
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d10e      	bne.n	800cf6a <_Bfree+0x2a>
 800cf4c:	2010      	movs	r0, #16
 800cf4e:	f7ff fef7 	bl	800cd40 <malloc>
 800cf52:	1e02      	subs	r2, r0, #0
 800cf54:	61e8      	str	r0, [r5, #28]
 800cf56:	d104      	bne.n	800cf62 <_Bfree+0x22>
 800cf58:	218f      	movs	r1, #143	@ 0x8f
 800cf5a:	4b09      	ldr	r3, [pc, #36]	@ (800cf80 <_Bfree+0x40>)
 800cf5c:	4809      	ldr	r0, [pc, #36]	@ (800cf84 <_Bfree+0x44>)
 800cf5e:	f000 fd85 	bl	800da6c <__assert_func>
 800cf62:	6046      	str	r6, [r0, #4]
 800cf64:	6086      	str	r6, [r0, #8]
 800cf66:	6006      	str	r6, [r0, #0]
 800cf68:	60c6      	str	r6, [r0, #12]
 800cf6a:	2c00      	cmp	r4, #0
 800cf6c:	d007      	beq.n	800cf7e <_Bfree+0x3e>
 800cf6e:	69eb      	ldr	r3, [r5, #28]
 800cf70:	6862      	ldr	r2, [r4, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	0092      	lsls	r2, r2, #2
 800cf76:	189b      	adds	r3, r3, r2
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	6022      	str	r2, [r4, #0]
 800cf7c:	601c      	str	r4, [r3, #0]
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}
 800cf80:	0800e4dd 	.word	0x0800e4dd
 800cf84:	0800e55d 	.word	0x0800e55d

0800cf88 <__multadd>:
 800cf88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf8a:	000f      	movs	r7, r1
 800cf8c:	9001      	str	r0, [sp, #4]
 800cf8e:	000c      	movs	r4, r1
 800cf90:	001e      	movs	r6, r3
 800cf92:	2000      	movs	r0, #0
 800cf94:	690d      	ldr	r5, [r1, #16]
 800cf96:	3714      	adds	r7, #20
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	b299      	uxth	r1, r3
 800cf9e:	4351      	muls	r1, r2
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	4353      	muls	r3, r2
 800cfa4:	1989      	adds	r1, r1, r6
 800cfa6:	0c0e      	lsrs	r6, r1, #16
 800cfa8:	199b      	adds	r3, r3, r6
 800cfaa:	0c1e      	lsrs	r6, r3, #16
 800cfac:	b289      	uxth	r1, r1
 800cfae:	041b      	lsls	r3, r3, #16
 800cfb0:	185b      	adds	r3, r3, r1
 800cfb2:	c708      	stmia	r7!, {r3}
 800cfb4:	4285      	cmp	r5, r0
 800cfb6:	dcef      	bgt.n	800cf98 <__multadd+0x10>
 800cfb8:	2e00      	cmp	r6, #0
 800cfba:	d022      	beq.n	800d002 <__multadd+0x7a>
 800cfbc:	68a3      	ldr	r3, [r4, #8]
 800cfbe:	42ab      	cmp	r3, r5
 800cfc0:	dc19      	bgt.n	800cff6 <__multadd+0x6e>
 800cfc2:	6861      	ldr	r1, [r4, #4]
 800cfc4:	9801      	ldr	r0, [sp, #4]
 800cfc6:	3101      	adds	r1, #1
 800cfc8:	f7ff ff76 	bl	800ceb8 <_Balloc>
 800cfcc:	1e07      	subs	r7, r0, #0
 800cfce:	d105      	bne.n	800cfdc <__multadd+0x54>
 800cfd0:	003a      	movs	r2, r7
 800cfd2:	21ba      	movs	r1, #186	@ 0xba
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <__multadd+0x80>)
 800cfd6:	480d      	ldr	r0, [pc, #52]	@ (800d00c <__multadd+0x84>)
 800cfd8:	f000 fd48 	bl	800da6c <__assert_func>
 800cfdc:	0021      	movs	r1, r4
 800cfde:	6922      	ldr	r2, [r4, #16]
 800cfe0:	310c      	adds	r1, #12
 800cfe2:	3202      	adds	r2, #2
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	300c      	adds	r0, #12
 800cfe8:	f000 fd36 	bl	800da58 <memcpy>
 800cfec:	0021      	movs	r1, r4
 800cfee:	9801      	ldr	r0, [sp, #4]
 800cff0:	f7ff ffa6 	bl	800cf40 <_Bfree>
 800cff4:	003c      	movs	r4, r7
 800cff6:	1d2b      	adds	r3, r5, #4
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	18e3      	adds	r3, r4, r3
 800cffc:	3501      	adds	r5, #1
 800cffe:	605e      	str	r6, [r3, #4]
 800d000:	6125      	str	r5, [r4, #16]
 800d002:	0020      	movs	r0, r4
 800d004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	0800e54c 	.word	0x0800e54c
 800d00c:	0800e55d 	.word	0x0800e55d

0800d010 <__hi0bits>:
 800d010:	2280      	movs	r2, #128	@ 0x80
 800d012:	0003      	movs	r3, r0
 800d014:	0252      	lsls	r2, r2, #9
 800d016:	2000      	movs	r0, #0
 800d018:	4293      	cmp	r3, r2
 800d01a:	d201      	bcs.n	800d020 <__hi0bits+0x10>
 800d01c:	041b      	lsls	r3, r3, #16
 800d01e:	3010      	adds	r0, #16
 800d020:	2280      	movs	r2, #128	@ 0x80
 800d022:	0452      	lsls	r2, r2, #17
 800d024:	4293      	cmp	r3, r2
 800d026:	d201      	bcs.n	800d02c <__hi0bits+0x1c>
 800d028:	3008      	adds	r0, #8
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	2280      	movs	r2, #128	@ 0x80
 800d02e:	0552      	lsls	r2, r2, #21
 800d030:	4293      	cmp	r3, r2
 800d032:	d201      	bcs.n	800d038 <__hi0bits+0x28>
 800d034:	3004      	adds	r0, #4
 800d036:	011b      	lsls	r3, r3, #4
 800d038:	2280      	movs	r2, #128	@ 0x80
 800d03a:	05d2      	lsls	r2, r2, #23
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d201      	bcs.n	800d044 <__hi0bits+0x34>
 800d040:	3002      	adds	r0, #2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	db03      	blt.n	800d050 <__hi0bits+0x40>
 800d048:	3001      	adds	r0, #1
 800d04a:	4213      	tst	r3, r2
 800d04c:	d100      	bne.n	800d050 <__hi0bits+0x40>
 800d04e:	2020      	movs	r0, #32
 800d050:	4770      	bx	lr

0800d052 <__lo0bits>:
 800d052:	6803      	ldr	r3, [r0, #0]
 800d054:	0001      	movs	r1, r0
 800d056:	2207      	movs	r2, #7
 800d058:	0018      	movs	r0, r3
 800d05a:	4010      	ands	r0, r2
 800d05c:	4213      	tst	r3, r2
 800d05e:	d00d      	beq.n	800d07c <__lo0bits+0x2a>
 800d060:	3a06      	subs	r2, #6
 800d062:	2000      	movs	r0, #0
 800d064:	4213      	tst	r3, r2
 800d066:	d105      	bne.n	800d074 <__lo0bits+0x22>
 800d068:	3002      	adds	r0, #2
 800d06a:	4203      	tst	r3, r0
 800d06c:	d003      	beq.n	800d076 <__lo0bits+0x24>
 800d06e:	40d3      	lsrs	r3, r2
 800d070:	0010      	movs	r0, r2
 800d072:	600b      	str	r3, [r1, #0]
 800d074:	4770      	bx	lr
 800d076:	089b      	lsrs	r3, r3, #2
 800d078:	600b      	str	r3, [r1, #0]
 800d07a:	e7fb      	b.n	800d074 <__lo0bits+0x22>
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	2a00      	cmp	r2, #0
 800d080:	d101      	bne.n	800d086 <__lo0bits+0x34>
 800d082:	2010      	movs	r0, #16
 800d084:	0c1b      	lsrs	r3, r3, #16
 800d086:	b2da      	uxtb	r2, r3
 800d088:	2a00      	cmp	r2, #0
 800d08a:	d101      	bne.n	800d090 <__lo0bits+0x3e>
 800d08c:	3008      	adds	r0, #8
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	071a      	lsls	r2, r3, #28
 800d092:	d101      	bne.n	800d098 <__lo0bits+0x46>
 800d094:	3004      	adds	r0, #4
 800d096:	091b      	lsrs	r3, r3, #4
 800d098:	079a      	lsls	r2, r3, #30
 800d09a:	d101      	bne.n	800d0a0 <__lo0bits+0x4e>
 800d09c:	3002      	adds	r0, #2
 800d09e:	089b      	lsrs	r3, r3, #2
 800d0a0:	07da      	lsls	r2, r3, #31
 800d0a2:	d4e9      	bmi.n	800d078 <__lo0bits+0x26>
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	d1e6      	bne.n	800d078 <__lo0bits+0x26>
 800d0aa:	2020      	movs	r0, #32
 800d0ac:	e7e2      	b.n	800d074 <__lo0bits+0x22>
	...

0800d0b0 <__i2b>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	000c      	movs	r4, r1
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	f7ff feff 	bl	800ceb8 <_Balloc>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d107      	bne.n	800d0ce <__i2b+0x1e>
 800d0be:	2146      	movs	r1, #70	@ 0x46
 800d0c0:	4c05      	ldr	r4, [pc, #20]	@ (800d0d8 <__i2b+0x28>)
 800d0c2:	0002      	movs	r2, r0
 800d0c4:	4b05      	ldr	r3, [pc, #20]	@ (800d0dc <__i2b+0x2c>)
 800d0c6:	0020      	movs	r0, r4
 800d0c8:	31ff      	adds	r1, #255	@ 0xff
 800d0ca:	f000 fccf 	bl	800da6c <__assert_func>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	6144      	str	r4, [r0, #20]
 800d0d2:	6103      	str	r3, [r0, #16]
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	46c0      	nop			@ (mov r8, r8)
 800d0d8:	0800e55d 	.word	0x0800e55d
 800d0dc:	0800e54c 	.word	0x0800e54c

0800d0e0 <__multiply>:
 800d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e2:	0014      	movs	r4, r2
 800d0e4:	690a      	ldr	r2, [r1, #16]
 800d0e6:	6923      	ldr	r3, [r4, #16]
 800d0e8:	000d      	movs	r5, r1
 800d0ea:	b089      	sub	sp, #36	@ 0x24
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	db02      	blt.n	800d0f6 <__multiply+0x16>
 800d0f0:	0023      	movs	r3, r4
 800d0f2:	000c      	movs	r4, r1
 800d0f4:	001d      	movs	r5, r3
 800d0f6:	6927      	ldr	r7, [r4, #16]
 800d0f8:	692e      	ldr	r6, [r5, #16]
 800d0fa:	6861      	ldr	r1, [r4, #4]
 800d0fc:	19bb      	adds	r3, r7, r6
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	19ba      	adds	r2, r7, r6
 800d104:	4293      	cmp	r3, r2
 800d106:	da00      	bge.n	800d10a <__multiply+0x2a>
 800d108:	3101      	adds	r1, #1
 800d10a:	f7ff fed5 	bl	800ceb8 <_Balloc>
 800d10e:	4684      	mov	ip, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d106      	bne.n	800d122 <__multiply+0x42>
 800d114:	21b1      	movs	r1, #177	@ 0xb1
 800d116:	4662      	mov	r2, ip
 800d118:	4b44      	ldr	r3, [pc, #272]	@ (800d22c <__multiply+0x14c>)
 800d11a:	4845      	ldr	r0, [pc, #276]	@ (800d230 <__multiply+0x150>)
 800d11c:	0049      	lsls	r1, r1, #1
 800d11e:	f000 fca5 	bl	800da6c <__assert_func>
 800d122:	0002      	movs	r2, r0
 800d124:	19bb      	adds	r3, r7, r6
 800d126:	3214      	adds	r2, #20
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	18d3      	adds	r3, r2, r3
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	2100      	movs	r1, #0
 800d130:	0013      	movs	r3, r2
 800d132:	9801      	ldr	r0, [sp, #4]
 800d134:	4283      	cmp	r3, r0
 800d136:	d328      	bcc.n	800d18a <__multiply+0xaa>
 800d138:	0023      	movs	r3, r4
 800d13a:	00bf      	lsls	r7, r7, #2
 800d13c:	3314      	adds	r3, #20
 800d13e:	9304      	str	r3, [sp, #16]
 800d140:	3514      	adds	r5, #20
 800d142:	19db      	adds	r3, r3, r7
 800d144:	00b6      	lsls	r6, r6, #2
 800d146:	9302      	str	r3, [sp, #8]
 800d148:	19ab      	adds	r3, r5, r6
 800d14a:	9307      	str	r3, [sp, #28]
 800d14c:	2304      	movs	r3, #4
 800d14e:	9305      	str	r3, [sp, #20]
 800d150:	0023      	movs	r3, r4
 800d152:	9902      	ldr	r1, [sp, #8]
 800d154:	3315      	adds	r3, #21
 800d156:	4299      	cmp	r1, r3
 800d158:	d305      	bcc.n	800d166 <__multiply+0x86>
 800d15a:	1b0c      	subs	r4, r1, r4
 800d15c:	3c15      	subs	r4, #21
 800d15e:	08a4      	lsrs	r4, r4, #2
 800d160:	3401      	adds	r4, #1
 800d162:	00a3      	lsls	r3, r4, #2
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	9b07      	ldr	r3, [sp, #28]
 800d168:	429d      	cmp	r5, r3
 800d16a:	d310      	bcc.n	800d18e <__multiply+0xae>
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	dd05      	ble.n	800d17e <__multiply+0x9e>
 800d172:	9b01      	ldr	r3, [sp, #4]
 800d174:	3b04      	subs	r3, #4
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d052      	beq.n	800d224 <__multiply+0x144>
 800d17e:	4663      	mov	r3, ip
 800d180:	4660      	mov	r0, ip
 800d182:	9a00      	ldr	r2, [sp, #0]
 800d184:	611a      	str	r2, [r3, #16]
 800d186:	b009      	add	sp, #36	@ 0x24
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18a:	c302      	stmia	r3!, {r1}
 800d18c:	e7d1      	b.n	800d132 <__multiply+0x52>
 800d18e:	682c      	ldr	r4, [r5, #0]
 800d190:	b2a4      	uxth	r4, r4
 800d192:	2c00      	cmp	r4, #0
 800d194:	d01f      	beq.n	800d1d6 <__multiply+0xf6>
 800d196:	2300      	movs	r3, #0
 800d198:	0017      	movs	r7, r2
 800d19a:	9e04      	ldr	r6, [sp, #16]
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	ce08      	ldmia	r6!, {r3}
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	9306      	str	r3, [sp, #24]
 800d1a4:	466b      	mov	r3, sp
 800d1a6:	8b1b      	ldrh	r3, [r3, #24]
 800d1a8:	b288      	uxth	r0, r1
 800d1aa:	4363      	muls	r3, r4
 800d1ac:	181b      	adds	r3, r3, r0
 800d1ae:	9803      	ldr	r0, [sp, #12]
 800d1b0:	0c09      	lsrs	r1, r1, #16
 800d1b2:	181b      	adds	r3, r3, r0
 800d1b4:	9806      	ldr	r0, [sp, #24]
 800d1b6:	0c00      	lsrs	r0, r0, #16
 800d1b8:	4360      	muls	r0, r4
 800d1ba:	1840      	adds	r0, r0, r1
 800d1bc:	0c19      	lsrs	r1, r3, #16
 800d1be:	1841      	adds	r1, r0, r1
 800d1c0:	0c08      	lsrs	r0, r1, #16
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	0409      	lsls	r1, r1, #16
 800d1c6:	4319      	orrs	r1, r3
 800d1c8:	9b02      	ldr	r3, [sp, #8]
 800d1ca:	9003      	str	r0, [sp, #12]
 800d1cc:	c702      	stmia	r7!, {r1}
 800d1ce:	42b3      	cmp	r3, r6
 800d1d0:	d8e5      	bhi.n	800d19e <__multiply+0xbe>
 800d1d2:	9b05      	ldr	r3, [sp, #20]
 800d1d4:	50d0      	str	r0, [r2, r3]
 800d1d6:	682c      	ldr	r4, [r5, #0]
 800d1d8:	0c24      	lsrs	r4, r4, #16
 800d1da:	d020      	beq.n	800d21e <__multiply+0x13e>
 800d1dc:	2100      	movs	r1, #0
 800d1de:	0010      	movs	r0, r2
 800d1e0:	6813      	ldr	r3, [r2, #0]
 800d1e2:	9e04      	ldr	r6, [sp, #16]
 800d1e4:	9103      	str	r1, [sp, #12]
 800d1e6:	6831      	ldr	r1, [r6, #0]
 800d1e8:	6807      	ldr	r7, [r0, #0]
 800d1ea:	b289      	uxth	r1, r1
 800d1ec:	4361      	muls	r1, r4
 800d1ee:	0c3f      	lsrs	r7, r7, #16
 800d1f0:	19c9      	adds	r1, r1, r7
 800d1f2:	9f03      	ldr	r7, [sp, #12]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	19c9      	adds	r1, r1, r7
 800d1f8:	040f      	lsls	r7, r1, #16
 800d1fa:	431f      	orrs	r7, r3
 800d1fc:	6007      	str	r7, [r0, #0]
 800d1fe:	ce80      	ldmia	r6!, {r7}
 800d200:	6843      	ldr	r3, [r0, #4]
 800d202:	0c3f      	lsrs	r7, r7, #16
 800d204:	4367      	muls	r7, r4
 800d206:	b29b      	uxth	r3, r3
 800d208:	0c09      	lsrs	r1, r1, #16
 800d20a:	18fb      	adds	r3, r7, r3
 800d20c:	185b      	adds	r3, r3, r1
 800d20e:	0c19      	lsrs	r1, r3, #16
 800d210:	9103      	str	r1, [sp, #12]
 800d212:	9902      	ldr	r1, [sp, #8]
 800d214:	3004      	adds	r0, #4
 800d216:	42b1      	cmp	r1, r6
 800d218:	d8e5      	bhi.n	800d1e6 <__multiply+0x106>
 800d21a:	9905      	ldr	r1, [sp, #20]
 800d21c:	5053      	str	r3, [r2, r1]
 800d21e:	3504      	adds	r5, #4
 800d220:	3204      	adds	r2, #4
 800d222:	e7a0      	b.n	800d166 <__multiply+0x86>
 800d224:	9b00      	ldr	r3, [sp, #0]
 800d226:	3b01      	subs	r3, #1
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	e79f      	b.n	800d16c <__multiply+0x8c>
 800d22c:	0800e54c 	.word	0x0800e54c
 800d230:	0800e55d 	.word	0x0800e55d

0800d234 <__pow5mult>:
 800d234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d236:	2303      	movs	r3, #3
 800d238:	0015      	movs	r5, r2
 800d23a:	0007      	movs	r7, r0
 800d23c:	000e      	movs	r6, r1
 800d23e:	401a      	ands	r2, r3
 800d240:	421d      	tst	r5, r3
 800d242:	d008      	beq.n	800d256 <__pow5mult+0x22>
 800d244:	4925      	ldr	r1, [pc, #148]	@ (800d2dc <__pow5mult+0xa8>)
 800d246:	3a01      	subs	r2, #1
 800d248:	0092      	lsls	r2, r2, #2
 800d24a:	5852      	ldr	r2, [r2, r1]
 800d24c:	2300      	movs	r3, #0
 800d24e:	0031      	movs	r1, r6
 800d250:	f7ff fe9a 	bl	800cf88 <__multadd>
 800d254:	0006      	movs	r6, r0
 800d256:	10ad      	asrs	r5, r5, #2
 800d258:	d03d      	beq.n	800d2d6 <__pow5mult+0xa2>
 800d25a:	69fc      	ldr	r4, [r7, #28]
 800d25c:	2c00      	cmp	r4, #0
 800d25e:	d10f      	bne.n	800d280 <__pow5mult+0x4c>
 800d260:	2010      	movs	r0, #16
 800d262:	f7ff fd6d 	bl	800cd40 <malloc>
 800d266:	1e02      	subs	r2, r0, #0
 800d268:	61f8      	str	r0, [r7, #28]
 800d26a:	d105      	bne.n	800d278 <__pow5mult+0x44>
 800d26c:	21b4      	movs	r1, #180	@ 0xb4
 800d26e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2e0 <__pow5mult+0xac>)
 800d270:	481c      	ldr	r0, [pc, #112]	@ (800d2e4 <__pow5mult+0xb0>)
 800d272:	31ff      	adds	r1, #255	@ 0xff
 800d274:	f000 fbfa 	bl	800da6c <__assert_func>
 800d278:	6044      	str	r4, [r0, #4]
 800d27a:	6084      	str	r4, [r0, #8]
 800d27c:	6004      	str	r4, [r0, #0]
 800d27e:	60c4      	str	r4, [r0, #12]
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	689c      	ldr	r4, [r3, #8]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	2c00      	cmp	r4, #0
 800d288:	d108      	bne.n	800d29c <__pow5mult+0x68>
 800d28a:	0038      	movs	r0, r7
 800d28c:	4916      	ldr	r1, [pc, #88]	@ (800d2e8 <__pow5mult+0xb4>)
 800d28e:	f7ff ff0f 	bl	800d0b0 <__i2b>
 800d292:	9b01      	ldr	r3, [sp, #4]
 800d294:	0004      	movs	r4, r0
 800d296:	6098      	str	r0, [r3, #8]
 800d298:	2300      	movs	r3, #0
 800d29a:	6003      	str	r3, [r0, #0]
 800d29c:	2301      	movs	r3, #1
 800d29e:	421d      	tst	r5, r3
 800d2a0:	d00a      	beq.n	800d2b8 <__pow5mult+0x84>
 800d2a2:	0031      	movs	r1, r6
 800d2a4:	0022      	movs	r2, r4
 800d2a6:	0038      	movs	r0, r7
 800d2a8:	f7ff ff1a 	bl	800d0e0 <__multiply>
 800d2ac:	0031      	movs	r1, r6
 800d2ae:	9001      	str	r0, [sp, #4]
 800d2b0:	0038      	movs	r0, r7
 800d2b2:	f7ff fe45 	bl	800cf40 <_Bfree>
 800d2b6:	9e01      	ldr	r6, [sp, #4]
 800d2b8:	106d      	asrs	r5, r5, #1
 800d2ba:	d00c      	beq.n	800d2d6 <__pow5mult+0xa2>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d107      	bne.n	800d2d2 <__pow5mult+0x9e>
 800d2c2:	0022      	movs	r2, r4
 800d2c4:	0021      	movs	r1, r4
 800d2c6:	0038      	movs	r0, r7
 800d2c8:	f7ff ff0a 	bl	800d0e0 <__multiply>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6020      	str	r0, [r4, #0]
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	0004      	movs	r4, r0
 800d2d4:	e7e2      	b.n	800d29c <__pow5mult+0x68>
 800d2d6:	0030      	movs	r0, r6
 800d2d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2da:	46c0      	nop			@ (mov r8, r8)
 800d2dc:	0800e610 	.word	0x0800e610
 800d2e0:	0800e4dd 	.word	0x0800e4dd
 800d2e4:	0800e55d 	.word	0x0800e55d
 800d2e8:	00000271 	.word	0x00000271

0800d2ec <__lshift>:
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	000c      	movs	r4, r1
 800d2f0:	0016      	movs	r6, r2
 800d2f2:	6923      	ldr	r3, [r4, #16]
 800d2f4:	1157      	asrs	r7, r2, #5
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	18fb      	adds	r3, r7, r3
 800d2fa:	9301      	str	r3, [sp, #4]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	6849      	ldr	r1, [r1, #4]
 800d302:	68a3      	ldr	r3, [r4, #8]
 800d304:	9002      	str	r0, [sp, #8]
 800d306:	9a00      	ldr	r2, [sp, #0]
 800d308:	4293      	cmp	r3, r2
 800d30a:	db10      	blt.n	800d32e <__lshift+0x42>
 800d30c:	9802      	ldr	r0, [sp, #8]
 800d30e:	f7ff fdd3 	bl	800ceb8 <_Balloc>
 800d312:	2300      	movs	r3, #0
 800d314:	0001      	movs	r1, r0
 800d316:	0005      	movs	r5, r0
 800d318:	001a      	movs	r2, r3
 800d31a:	3114      	adds	r1, #20
 800d31c:	4298      	cmp	r0, r3
 800d31e:	d10c      	bne.n	800d33a <__lshift+0x4e>
 800d320:	21ef      	movs	r1, #239	@ 0xef
 800d322:	002a      	movs	r2, r5
 800d324:	4b25      	ldr	r3, [pc, #148]	@ (800d3bc <__lshift+0xd0>)
 800d326:	4826      	ldr	r0, [pc, #152]	@ (800d3c0 <__lshift+0xd4>)
 800d328:	0049      	lsls	r1, r1, #1
 800d32a:	f000 fb9f 	bl	800da6c <__assert_func>
 800d32e:	3101      	adds	r1, #1
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	e7e8      	b.n	800d306 <__lshift+0x1a>
 800d334:	0098      	lsls	r0, r3, #2
 800d336:	500a      	str	r2, [r1, r0]
 800d338:	3301      	adds	r3, #1
 800d33a:	42bb      	cmp	r3, r7
 800d33c:	dbfa      	blt.n	800d334 <__lshift+0x48>
 800d33e:	43fb      	mvns	r3, r7
 800d340:	17db      	asrs	r3, r3, #31
 800d342:	401f      	ands	r7, r3
 800d344:	00bf      	lsls	r7, r7, #2
 800d346:	0023      	movs	r3, r4
 800d348:	201f      	movs	r0, #31
 800d34a:	19c9      	adds	r1, r1, r7
 800d34c:	0037      	movs	r7, r6
 800d34e:	6922      	ldr	r2, [r4, #16]
 800d350:	3314      	adds	r3, #20
 800d352:	0092      	lsls	r2, r2, #2
 800d354:	189a      	adds	r2, r3, r2
 800d356:	4007      	ands	r7, r0
 800d358:	4206      	tst	r6, r0
 800d35a:	d029      	beq.n	800d3b0 <__lshift+0xc4>
 800d35c:	3001      	adds	r0, #1
 800d35e:	1bc0      	subs	r0, r0, r7
 800d360:	9003      	str	r0, [sp, #12]
 800d362:	468c      	mov	ip, r1
 800d364:	2000      	movs	r0, #0
 800d366:	681e      	ldr	r6, [r3, #0]
 800d368:	40be      	lsls	r6, r7
 800d36a:	4306      	orrs	r6, r0
 800d36c:	4660      	mov	r0, ip
 800d36e:	c040      	stmia	r0!, {r6}
 800d370:	4684      	mov	ip, r0
 800d372:	9e03      	ldr	r6, [sp, #12]
 800d374:	cb01      	ldmia	r3!, {r0}
 800d376:	40f0      	lsrs	r0, r6
 800d378:	429a      	cmp	r2, r3
 800d37a:	d8f4      	bhi.n	800d366 <__lshift+0x7a>
 800d37c:	0026      	movs	r6, r4
 800d37e:	3615      	adds	r6, #21
 800d380:	2304      	movs	r3, #4
 800d382:	42b2      	cmp	r2, r6
 800d384:	d304      	bcc.n	800d390 <__lshift+0xa4>
 800d386:	1b13      	subs	r3, r2, r4
 800d388:	3b15      	subs	r3, #21
 800d38a:	089b      	lsrs	r3, r3, #2
 800d38c:	3301      	adds	r3, #1
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	50c8      	str	r0, [r1, r3]
 800d392:	2800      	cmp	r0, #0
 800d394:	d002      	beq.n	800d39c <__lshift+0xb0>
 800d396:	9b01      	ldr	r3, [sp, #4]
 800d398:	3302      	adds	r3, #2
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	9b00      	ldr	r3, [sp, #0]
 800d39e:	9802      	ldr	r0, [sp, #8]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	0021      	movs	r1, r4
 800d3a4:	612b      	str	r3, [r5, #16]
 800d3a6:	f7ff fdcb 	bl	800cf40 <_Bfree>
 800d3aa:	0028      	movs	r0, r5
 800d3ac:	b005      	add	sp, #20
 800d3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b0:	cb01      	ldmia	r3!, {r0}
 800d3b2:	c101      	stmia	r1!, {r0}
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d8fb      	bhi.n	800d3b0 <__lshift+0xc4>
 800d3b8:	e7f0      	b.n	800d39c <__lshift+0xb0>
 800d3ba:	46c0      	nop			@ (mov r8, r8)
 800d3bc:	0800e54c 	.word	0x0800e54c
 800d3c0:	0800e55d 	.word	0x0800e55d

0800d3c4 <__mcmp>:
 800d3c4:	b530      	push	{r4, r5, lr}
 800d3c6:	690b      	ldr	r3, [r1, #16]
 800d3c8:	6904      	ldr	r4, [r0, #16]
 800d3ca:	0002      	movs	r2, r0
 800d3cc:	1ae0      	subs	r0, r4, r3
 800d3ce:	429c      	cmp	r4, r3
 800d3d0:	d10f      	bne.n	800d3f2 <__mcmp+0x2e>
 800d3d2:	3214      	adds	r2, #20
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	3114      	adds	r1, #20
 800d3d8:	0014      	movs	r4, r2
 800d3da:	18c9      	adds	r1, r1, r3
 800d3dc:	18d2      	adds	r2, r2, r3
 800d3de:	3a04      	subs	r2, #4
 800d3e0:	3904      	subs	r1, #4
 800d3e2:	6815      	ldr	r5, [r2, #0]
 800d3e4:	680b      	ldr	r3, [r1, #0]
 800d3e6:	429d      	cmp	r5, r3
 800d3e8:	d004      	beq.n	800d3f4 <__mcmp+0x30>
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	429d      	cmp	r5, r3
 800d3ee:	d200      	bcs.n	800d3f2 <__mcmp+0x2e>
 800d3f0:	3802      	subs	r0, #2
 800d3f2:	bd30      	pop	{r4, r5, pc}
 800d3f4:	4294      	cmp	r4, r2
 800d3f6:	d3f2      	bcc.n	800d3de <__mcmp+0x1a>
 800d3f8:	e7fb      	b.n	800d3f2 <__mcmp+0x2e>
	...

0800d3fc <__mdiff>:
 800d3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3fe:	000c      	movs	r4, r1
 800d400:	b087      	sub	sp, #28
 800d402:	9000      	str	r0, [sp, #0]
 800d404:	0011      	movs	r1, r2
 800d406:	0020      	movs	r0, r4
 800d408:	0017      	movs	r7, r2
 800d40a:	f7ff ffdb 	bl	800d3c4 <__mcmp>
 800d40e:	1e05      	subs	r5, r0, #0
 800d410:	d110      	bne.n	800d434 <__mdiff+0x38>
 800d412:	0001      	movs	r1, r0
 800d414:	9800      	ldr	r0, [sp, #0]
 800d416:	f7ff fd4f 	bl	800ceb8 <_Balloc>
 800d41a:	1e02      	subs	r2, r0, #0
 800d41c:	d104      	bne.n	800d428 <__mdiff+0x2c>
 800d41e:	4b40      	ldr	r3, [pc, #256]	@ (800d520 <__mdiff+0x124>)
 800d420:	4840      	ldr	r0, [pc, #256]	@ (800d524 <__mdiff+0x128>)
 800d422:	4941      	ldr	r1, [pc, #260]	@ (800d528 <__mdiff+0x12c>)
 800d424:	f000 fb22 	bl	800da6c <__assert_func>
 800d428:	2301      	movs	r3, #1
 800d42a:	6145      	str	r5, [r0, #20]
 800d42c:	6103      	str	r3, [r0, #16]
 800d42e:	0010      	movs	r0, r2
 800d430:	b007      	add	sp, #28
 800d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d434:	2600      	movs	r6, #0
 800d436:	42b0      	cmp	r0, r6
 800d438:	da03      	bge.n	800d442 <__mdiff+0x46>
 800d43a:	0023      	movs	r3, r4
 800d43c:	003c      	movs	r4, r7
 800d43e:	001f      	movs	r7, r3
 800d440:	3601      	adds	r6, #1
 800d442:	6861      	ldr	r1, [r4, #4]
 800d444:	9800      	ldr	r0, [sp, #0]
 800d446:	f7ff fd37 	bl	800ceb8 <_Balloc>
 800d44a:	1e02      	subs	r2, r0, #0
 800d44c:	d103      	bne.n	800d456 <__mdiff+0x5a>
 800d44e:	4b34      	ldr	r3, [pc, #208]	@ (800d520 <__mdiff+0x124>)
 800d450:	4834      	ldr	r0, [pc, #208]	@ (800d524 <__mdiff+0x128>)
 800d452:	4936      	ldr	r1, [pc, #216]	@ (800d52c <__mdiff+0x130>)
 800d454:	e7e6      	b.n	800d424 <__mdiff+0x28>
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	3414      	adds	r4, #20
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	18e3      	adds	r3, r4, r3
 800d460:	0021      	movs	r1, r4
 800d462:	9401      	str	r4, [sp, #4]
 800d464:	003c      	movs	r4, r7
 800d466:	9302      	str	r3, [sp, #8]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	3414      	adds	r4, #20
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	18e3      	adds	r3, r4, r3
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	0003      	movs	r3, r0
 800d474:	60c6      	str	r6, [r0, #12]
 800d476:	468c      	mov	ip, r1
 800d478:	2000      	movs	r0, #0
 800d47a:	3314      	adds	r3, #20
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	9305      	str	r3, [sp, #20]
 800d480:	4663      	mov	r3, ip
 800d482:	cb20      	ldmia	r3!, {r5}
 800d484:	b2a9      	uxth	r1, r5
 800d486:	000e      	movs	r6, r1
 800d488:	469c      	mov	ip, r3
 800d48a:	cc08      	ldmia	r4!, {r3}
 800d48c:	0c2d      	lsrs	r5, r5, #16
 800d48e:	b299      	uxth	r1, r3
 800d490:	1a71      	subs	r1, r6, r1
 800d492:	1809      	adds	r1, r1, r0
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	1408      	asrs	r0, r1, #16
 800d498:	1aeb      	subs	r3, r5, r3
 800d49a:	181b      	adds	r3, r3, r0
 800d49c:	1418      	asrs	r0, r3, #16
 800d49e:	b289      	uxth	r1, r1
 800d4a0:	041b      	lsls	r3, r3, #16
 800d4a2:	4319      	orrs	r1, r3
 800d4a4:	9b05      	ldr	r3, [sp, #20]
 800d4a6:	c302      	stmia	r3!, {r1}
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	d8e7      	bhi.n	800d480 <__mdiff+0x84>
 800d4b0:	0039      	movs	r1, r7
 800d4b2:	9c03      	ldr	r4, [sp, #12]
 800d4b4:	3115      	adds	r1, #21
 800d4b6:	2304      	movs	r3, #4
 800d4b8:	428c      	cmp	r4, r1
 800d4ba:	d304      	bcc.n	800d4c6 <__mdiff+0xca>
 800d4bc:	1be3      	subs	r3, r4, r7
 800d4be:	3b15      	subs	r3, #21
 800d4c0:	089b      	lsrs	r3, r3, #2
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	9901      	ldr	r1, [sp, #4]
 800d4c8:	18cd      	adds	r5, r1, r3
 800d4ca:	9904      	ldr	r1, [sp, #16]
 800d4cc:	002e      	movs	r6, r5
 800d4ce:	18cb      	adds	r3, r1, r3
 800d4d0:	001f      	movs	r7, r3
 800d4d2:	9902      	ldr	r1, [sp, #8]
 800d4d4:	428e      	cmp	r6, r1
 800d4d6:	d311      	bcc.n	800d4fc <__mdiff+0x100>
 800d4d8:	9c02      	ldr	r4, [sp, #8]
 800d4da:	1ee9      	subs	r1, r5, #3
 800d4dc:	2000      	movs	r0, #0
 800d4de:	428c      	cmp	r4, r1
 800d4e0:	d304      	bcc.n	800d4ec <__mdiff+0xf0>
 800d4e2:	0021      	movs	r1, r4
 800d4e4:	3103      	adds	r1, #3
 800d4e6:	1b49      	subs	r1, r1, r5
 800d4e8:	0889      	lsrs	r1, r1, #2
 800d4ea:	0088      	lsls	r0, r1, #2
 800d4ec:	181b      	adds	r3, r3, r0
 800d4ee:	3b04      	subs	r3, #4
 800d4f0:	6819      	ldr	r1, [r3, #0]
 800d4f2:	2900      	cmp	r1, #0
 800d4f4:	d010      	beq.n	800d518 <__mdiff+0x11c>
 800d4f6:	9b00      	ldr	r3, [sp, #0]
 800d4f8:	6113      	str	r3, [r2, #16]
 800d4fa:	e798      	b.n	800d42e <__mdiff+0x32>
 800d4fc:	4684      	mov	ip, r0
 800d4fe:	ce02      	ldmia	r6!, {r1}
 800d500:	b288      	uxth	r0, r1
 800d502:	4460      	add	r0, ip
 800d504:	1400      	asrs	r0, r0, #16
 800d506:	0c0c      	lsrs	r4, r1, #16
 800d508:	1904      	adds	r4, r0, r4
 800d50a:	4461      	add	r1, ip
 800d50c:	1420      	asrs	r0, r4, #16
 800d50e:	b289      	uxth	r1, r1
 800d510:	0424      	lsls	r4, r4, #16
 800d512:	4321      	orrs	r1, r4
 800d514:	c702      	stmia	r7!, {r1}
 800d516:	e7dc      	b.n	800d4d2 <__mdiff+0xd6>
 800d518:	9900      	ldr	r1, [sp, #0]
 800d51a:	3901      	subs	r1, #1
 800d51c:	9100      	str	r1, [sp, #0]
 800d51e:	e7e6      	b.n	800d4ee <__mdiff+0xf2>
 800d520:	0800e54c 	.word	0x0800e54c
 800d524:	0800e55d 	.word	0x0800e55d
 800d528:	00000237 	.word	0x00000237
 800d52c:	00000245 	.word	0x00000245

0800d530 <__d2b>:
 800d530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d532:	2101      	movs	r1, #1
 800d534:	0016      	movs	r6, r2
 800d536:	001f      	movs	r7, r3
 800d538:	f7ff fcbe 	bl	800ceb8 <_Balloc>
 800d53c:	1e04      	subs	r4, r0, #0
 800d53e:	d105      	bne.n	800d54c <__d2b+0x1c>
 800d540:	0022      	movs	r2, r4
 800d542:	4b25      	ldr	r3, [pc, #148]	@ (800d5d8 <__d2b+0xa8>)
 800d544:	4825      	ldr	r0, [pc, #148]	@ (800d5dc <__d2b+0xac>)
 800d546:	4926      	ldr	r1, [pc, #152]	@ (800d5e0 <__d2b+0xb0>)
 800d548:	f000 fa90 	bl	800da6c <__assert_func>
 800d54c:	033b      	lsls	r3, r7, #12
 800d54e:	007d      	lsls	r5, r7, #1
 800d550:	0b1b      	lsrs	r3, r3, #12
 800d552:	0d6d      	lsrs	r5, r5, #21
 800d554:	d002      	beq.n	800d55c <__d2b+0x2c>
 800d556:	2280      	movs	r2, #128	@ 0x80
 800d558:	0352      	lsls	r2, r2, #13
 800d55a:	4313      	orrs	r3, r2
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	2e00      	cmp	r6, #0
 800d560:	d025      	beq.n	800d5ae <__d2b+0x7e>
 800d562:	4668      	mov	r0, sp
 800d564:	9600      	str	r6, [sp, #0]
 800d566:	f7ff fd74 	bl	800d052 <__lo0bits>
 800d56a:	9b01      	ldr	r3, [sp, #4]
 800d56c:	9900      	ldr	r1, [sp, #0]
 800d56e:	2800      	cmp	r0, #0
 800d570:	d01b      	beq.n	800d5aa <__d2b+0x7a>
 800d572:	2220      	movs	r2, #32
 800d574:	001e      	movs	r6, r3
 800d576:	1a12      	subs	r2, r2, r0
 800d578:	4096      	lsls	r6, r2
 800d57a:	0032      	movs	r2, r6
 800d57c:	40c3      	lsrs	r3, r0
 800d57e:	430a      	orrs	r2, r1
 800d580:	6162      	str	r2, [r4, #20]
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	9e01      	ldr	r6, [sp, #4]
 800d586:	61a6      	str	r6, [r4, #24]
 800d588:	1e73      	subs	r3, r6, #1
 800d58a:	419e      	sbcs	r6, r3
 800d58c:	3601      	adds	r6, #1
 800d58e:	6126      	str	r6, [r4, #16]
 800d590:	2d00      	cmp	r5, #0
 800d592:	d014      	beq.n	800d5be <__d2b+0x8e>
 800d594:	2635      	movs	r6, #53	@ 0x35
 800d596:	4b13      	ldr	r3, [pc, #76]	@ (800d5e4 <__d2b+0xb4>)
 800d598:	18ed      	adds	r5, r5, r3
 800d59a:	9b08      	ldr	r3, [sp, #32]
 800d59c:	182d      	adds	r5, r5, r0
 800d59e:	601d      	str	r5, [r3, #0]
 800d5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a2:	1a36      	subs	r6, r6, r0
 800d5a4:	601e      	str	r6, [r3, #0]
 800d5a6:	0020      	movs	r0, r4
 800d5a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5aa:	6161      	str	r1, [r4, #20]
 800d5ac:	e7ea      	b.n	800d584 <__d2b+0x54>
 800d5ae:	a801      	add	r0, sp, #4
 800d5b0:	f7ff fd4f 	bl	800d052 <__lo0bits>
 800d5b4:	9b01      	ldr	r3, [sp, #4]
 800d5b6:	2601      	movs	r6, #1
 800d5b8:	6163      	str	r3, [r4, #20]
 800d5ba:	3020      	adds	r0, #32
 800d5bc:	e7e7      	b.n	800d58e <__d2b+0x5e>
 800d5be:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e8 <__d2b+0xb8>)
 800d5c0:	18c0      	adds	r0, r0, r3
 800d5c2:	9b08      	ldr	r3, [sp, #32]
 800d5c4:	6018      	str	r0, [r3, #0]
 800d5c6:	4b09      	ldr	r3, [pc, #36]	@ (800d5ec <__d2b+0xbc>)
 800d5c8:	18f3      	adds	r3, r6, r3
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	18e3      	adds	r3, r4, r3
 800d5ce:	6958      	ldr	r0, [r3, #20]
 800d5d0:	f7ff fd1e 	bl	800d010 <__hi0bits>
 800d5d4:	0176      	lsls	r6, r6, #5
 800d5d6:	e7e3      	b.n	800d5a0 <__d2b+0x70>
 800d5d8:	0800e54c 	.word	0x0800e54c
 800d5dc:	0800e55d 	.word	0x0800e55d
 800d5e0:	0000030f 	.word	0x0000030f
 800d5e4:	fffffbcd 	.word	0xfffffbcd
 800d5e8:	fffffbce 	.word	0xfffffbce
 800d5ec:	3fffffff 	.word	0x3fffffff

0800d5f0 <__ssputs_r>:
 800d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f2:	688e      	ldr	r6, [r1, #8]
 800d5f4:	b085      	sub	sp, #20
 800d5f6:	001f      	movs	r7, r3
 800d5f8:	000c      	movs	r4, r1
 800d5fa:	680b      	ldr	r3, [r1, #0]
 800d5fc:	9002      	str	r0, [sp, #8]
 800d5fe:	9203      	str	r2, [sp, #12]
 800d600:	42be      	cmp	r6, r7
 800d602:	d830      	bhi.n	800d666 <__ssputs_r+0x76>
 800d604:	210c      	movs	r1, #12
 800d606:	5e62      	ldrsh	r2, [r4, r1]
 800d608:	2190      	movs	r1, #144	@ 0x90
 800d60a:	00c9      	lsls	r1, r1, #3
 800d60c:	420a      	tst	r2, r1
 800d60e:	d028      	beq.n	800d662 <__ssputs_r+0x72>
 800d610:	2003      	movs	r0, #3
 800d612:	6921      	ldr	r1, [r4, #16]
 800d614:	1a5b      	subs	r3, r3, r1
 800d616:	9301      	str	r3, [sp, #4]
 800d618:	6963      	ldr	r3, [r4, #20]
 800d61a:	4343      	muls	r3, r0
 800d61c:	9801      	ldr	r0, [sp, #4]
 800d61e:	0fdd      	lsrs	r5, r3, #31
 800d620:	18ed      	adds	r5, r5, r3
 800d622:	1c7b      	adds	r3, r7, #1
 800d624:	181b      	adds	r3, r3, r0
 800d626:	106d      	asrs	r5, r5, #1
 800d628:	42ab      	cmp	r3, r5
 800d62a:	d900      	bls.n	800d62e <__ssputs_r+0x3e>
 800d62c:	001d      	movs	r5, r3
 800d62e:	0552      	lsls	r2, r2, #21
 800d630:	d528      	bpl.n	800d684 <__ssputs_r+0x94>
 800d632:	0029      	movs	r1, r5
 800d634:	9802      	ldr	r0, [sp, #8]
 800d636:	f7ff fbaf 	bl	800cd98 <_malloc_r>
 800d63a:	1e06      	subs	r6, r0, #0
 800d63c:	d02c      	beq.n	800d698 <__ssputs_r+0xa8>
 800d63e:	9a01      	ldr	r2, [sp, #4]
 800d640:	6921      	ldr	r1, [r4, #16]
 800d642:	f000 fa09 	bl	800da58 <memcpy>
 800d646:	89a2      	ldrh	r2, [r4, #12]
 800d648:	4b18      	ldr	r3, [pc, #96]	@ (800d6ac <__ssputs_r+0xbc>)
 800d64a:	401a      	ands	r2, r3
 800d64c:	2380      	movs	r3, #128	@ 0x80
 800d64e:	4313      	orrs	r3, r2
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	9b01      	ldr	r3, [sp, #4]
 800d654:	6126      	str	r6, [r4, #16]
 800d656:	18f6      	adds	r6, r6, r3
 800d658:	6026      	str	r6, [r4, #0]
 800d65a:	003e      	movs	r6, r7
 800d65c:	6165      	str	r5, [r4, #20]
 800d65e:	1aed      	subs	r5, r5, r3
 800d660:	60a5      	str	r5, [r4, #8]
 800d662:	42be      	cmp	r6, r7
 800d664:	d900      	bls.n	800d668 <__ssputs_r+0x78>
 800d666:	003e      	movs	r6, r7
 800d668:	0032      	movs	r2, r6
 800d66a:	9903      	ldr	r1, [sp, #12]
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	f000 f9ce 	bl	800da0e <memmove>
 800d672:	2000      	movs	r0, #0
 800d674:	68a3      	ldr	r3, [r4, #8]
 800d676:	1b9b      	subs	r3, r3, r6
 800d678:	60a3      	str	r3, [r4, #8]
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	199b      	adds	r3, r3, r6
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	b005      	add	sp, #20
 800d682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d684:	002a      	movs	r2, r5
 800d686:	9802      	ldr	r0, [sp, #8]
 800d688:	f000 fa4d 	bl	800db26 <_realloc_r>
 800d68c:	1e06      	subs	r6, r0, #0
 800d68e:	d1e0      	bne.n	800d652 <__ssputs_r+0x62>
 800d690:	6921      	ldr	r1, [r4, #16]
 800d692:	9802      	ldr	r0, [sp, #8]
 800d694:	f7ff fb0a 	bl	800ccac <_free_r>
 800d698:	230c      	movs	r3, #12
 800d69a:	2001      	movs	r0, #1
 800d69c:	9a02      	ldr	r2, [sp, #8]
 800d69e:	4240      	negs	r0, r0
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	89a2      	ldrh	r2, [r4, #12]
 800d6a4:	3334      	adds	r3, #52	@ 0x34
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	e7e9      	b.n	800d680 <__ssputs_r+0x90>
 800d6ac:	fffffb7f 	.word	0xfffffb7f

0800d6b0 <_svfiprintf_r>:
 800d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b2:	b0a1      	sub	sp, #132	@ 0x84
 800d6b4:	9003      	str	r0, [sp, #12]
 800d6b6:	001d      	movs	r5, r3
 800d6b8:	898b      	ldrh	r3, [r1, #12]
 800d6ba:	000f      	movs	r7, r1
 800d6bc:	0016      	movs	r6, r2
 800d6be:	061b      	lsls	r3, r3, #24
 800d6c0:	d511      	bpl.n	800d6e6 <_svfiprintf_r+0x36>
 800d6c2:	690b      	ldr	r3, [r1, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10e      	bne.n	800d6e6 <_svfiprintf_r+0x36>
 800d6c8:	2140      	movs	r1, #64	@ 0x40
 800d6ca:	f7ff fb65 	bl	800cd98 <_malloc_r>
 800d6ce:	6038      	str	r0, [r7, #0]
 800d6d0:	6138      	str	r0, [r7, #16]
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d105      	bne.n	800d6e2 <_svfiprintf_r+0x32>
 800d6d6:	230c      	movs	r3, #12
 800d6d8:	9a03      	ldr	r2, [sp, #12]
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	2001      	movs	r0, #1
 800d6de:	4240      	negs	r0, r0
 800d6e0:	e0cf      	b.n	800d882 <_svfiprintf_r+0x1d2>
 800d6e2:	2340      	movs	r3, #64	@ 0x40
 800d6e4:	617b      	str	r3, [r7, #20]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	ac08      	add	r4, sp, #32
 800d6ea:	6163      	str	r3, [r4, #20]
 800d6ec:	3320      	adds	r3, #32
 800d6ee:	7663      	strb	r3, [r4, #25]
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	76a3      	strb	r3, [r4, #26]
 800d6f4:	9507      	str	r5, [sp, #28]
 800d6f6:	0035      	movs	r5, r6
 800d6f8:	782b      	ldrb	r3, [r5, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <_svfiprintf_r+0x52>
 800d6fe:	2b25      	cmp	r3, #37	@ 0x25
 800d700:	d148      	bne.n	800d794 <_svfiprintf_r+0xe4>
 800d702:	1bab      	subs	r3, r5, r6
 800d704:	9305      	str	r3, [sp, #20]
 800d706:	42b5      	cmp	r5, r6
 800d708:	d00b      	beq.n	800d722 <_svfiprintf_r+0x72>
 800d70a:	0032      	movs	r2, r6
 800d70c:	0039      	movs	r1, r7
 800d70e:	9803      	ldr	r0, [sp, #12]
 800d710:	f7ff ff6e 	bl	800d5f0 <__ssputs_r>
 800d714:	3001      	adds	r0, #1
 800d716:	d100      	bne.n	800d71a <_svfiprintf_r+0x6a>
 800d718:	e0ae      	b.n	800d878 <_svfiprintf_r+0x1c8>
 800d71a:	6963      	ldr	r3, [r4, #20]
 800d71c:	9a05      	ldr	r2, [sp, #20]
 800d71e:	189b      	adds	r3, r3, r2
 800d720:	6163      	str	r3, [r4, #20]
 800d722:	782b      	ldrb	r3, [r5, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d100      	bne.n	800d72a <_svfiprintf_r+0x7a>
 800d728:	e0a6      	b.n	800d878 <_svfiprintf_r+0x1c8>
 800d72a:	2201      	movs	r2, #1
 800d72c:	2300      	movs	r3, #0
 800d72e:	4252      	negs	r2, r2
 800d730:	6062      	str	r2, [r4, #4]
 800d732:	a904      	add	r1, sp, #16
 800d734:	3254      	adds	r2, #84	@ 0x54
 800d736:	1852      	adds	r2, r2, r1
 800d738:	1c6e      	adds	r6, r5, #1
 800d73a:	6023      	str	r3, [r4, #0]
 800d73c:	60e3      	str	r3, [r4, #12]
 800d73e:	60a3      	str	r3, [r4, #8]
 800d740:	7013      	strb	r3, [r2, #0]
 800d742:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d744:	4b54      	ldr	r3, [pc, #336]	@ (800d898 <_svfiprintf_r+0x1e8>)
 800d746:	2205      	movs	r2, #5
 800d748:	0018      	movs	r0, r3
 800d74a:	7831      	ldrb	r1, [r6, #0]
 800d74c:	9305      	str	r3, [sp, #20]
 800d74e:	f7fe fc2c 	bl	800bfaa <memchr>
 800d752:	1c75      	adds	r5, r6, #1
 800d754:	2800      	cmp	r0, #0
 800d756:	d11f      	bne.n	800d798 <_svfiprintf_r+0xe8>
 800d758:	6822      	ldr	r2, [r4, #0]
 800d75a:	06d3      	lsls	r3, r2, #27
 800d75c:	d504      	bpl.n	800d768 <_svfiprintf_r+0xb8>
 800d75e:	2353      	movs	r3, #83	@ 0x53
 800d760:	a904      	add	r1, sp, #16
 800d762:	185b      	adds	r3, r3, r1
 800d764:	2120      	movs	r1, #32
 800d766:	7019      	strb	r1, [r3, #0]
 800d768:	0713      	lsls	r3, r2, #28
 800d76a:	d504      	bpl.n	800d776 <_svfiprintf_r+0xc6>
 800d76c:	2353      	movs	r3, #83	@ 0x53
 800d76e:	a904      	add	r1, sp, #16
 800d770:	185b      	adds	r3, r3, r1
 800d772:	212b      	movs	r1, #43	@ 0x2b
 800d774:	7019      	strb	r1, [r3, #0]
 800d776:	7833      	ldrb	r3, [r6, #0]
 800d778:	2b2a      	cmp	r3, #42	@ 0x2a
 800d77a:	d016      	beq.n	800d7aa <_svfiprintf_r+0xfa>
 800d77c:	0035      	movs	r5, r6
 800d77e:	2100      	movs	r1, #0
 800d780:	200a      	movs	r0, #10
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	782a      	ldrb	r2, [r5, #0]
 800d786:	1c6e      	adds	r6, r5, #1
 800d788:	3a30      	subs	r2, #48	@ 0x30
 800d78a:	2a09      	cmp	r2, #9
 800d78c:	d950      	bls.n	800d830 <_svfiprintf_r+0x180>
 800d78e:	2900      	cmp	r1, #0
 800d790:	d111      	bne.n	800d7b6 <_svfiprintf_r+0x106>
 800d792:	e017      	b.n	800d7c4 <_svfiprintf_r+0x114>
 800d794:	3501      	adds	r5, #1
 800d796:	e7af      	b.n	800d6f8 <_svfiprintf_r+0x48>
 800d798:	9b05      	ldr	r3, [sp, #20]
 800d79a:	6822      	ldr	r2, [r4, #0]
 800d79c:	1ac0      	subs	r0, r0, r3
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4083      	lsls	r3, r0
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	002e      	movs	r6, r5
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	e7cc      	b.n	800d744 <_svfiprintf_r+0x94>
 800d7aa:	9b07      	ldr	r3, [sp, #28]
 800d7ac:	1d19      	adds	r1, r3, #4
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	9107      	str	r1, [sp, #28]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db01      	blt.n	800d7ba <_svfiprintf_r+0x10a>
 800d7b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7b8:	e004      	b.n	800d7c4 <_svfiprintf_r+0x114>
 800d7ba:	425b      	negs	r3, r3
 800d7bc:	60e3      	str	r3, [r4, #12]
 800d7be:	2302      	movs	r3, #2
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	6023      	str	r3, [r4, #0]
 800d7c4:	782b      	ldrb	r3, [r5, #0]
 800d7c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7c8:	d10c      	bne.n	800d7e4 <_svfiprintf_r+0x134>
 800d7ca:	786b      	ldrb	r3, [r5, #1]
 800d7cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ce:	d134      	bne.n	800d83a <_svfiprintf_r+0x18a>
 800d7d0:	9b07      	ldr	r3, [sp, #28]
 800d7d2:	3502      	adds	r5, #2
 800d7d4:	1d1a      	adds	r2, r3, #4
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	9207      	str	r2, [sp, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	da01      	bge.n	800d7e2 <_svfiprintf_r+0x132>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	425b      	negs	r3, r3
 800d7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7e4:	4e2d      	ldr	r6, [pc, #180]	@ (800d89c <_svfiprintf_r+0x1ec>)
 800d7e6:	2203      	movs	r2, #3
 800d7e8:	0030      	movs	r0, r6
 800d7ea:	7829      	ldrb	r1, [r5, #0]
 800d7ec:	f7fe fbdd 	bl	800bfaa <memchr>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d006      	beq.n	800d802 <_svfiprintf_r+0x152>
 800d7f4:	2340      	movs	r3, #64	@ 0x40
 800d7f6:	1b80      	subs	r0, r0, r6
 800d7f8:	4083      	lsls	r3, r0
 800d7fa:	6822      	ldr	r2, [r4, #0]
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	4313      	orrs	r3, r2
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	7829      	ldrb	r1, [r5, #0]
 800d804:	2206      	movs	r2, #6
 800d806:	4826      	ldr	r0, [pc, #152]	@ (800d8a0 <_svfiprintf_r+0x1f0>)
 800d808:	1c6e      	adds	r6, r5, #1
 800d80a:	7621      	strb	r1, [r4, #24]
 800d80c:	f7fe fbcd 	bl	800bfaa <memchr>
 800d810:	2800      	cmp	r0, #0
 800d812:	d038      	beq.n	800d886 <_svfiprintf_r+0x1d6>
 800d814:	4b23      	ldr	r3, [pc, #140]	@ (800d8a4 <_svfiprintf_r+0x1f4>)
 800d816:	2b00      	cmp	r3, #0
 800d818:	d122      	bne.n	800d860 <_svfiprintf_r+0x1b0>
 800d81a:	2207      	movs	r2, #7
 800d81c:	9b07      	ldr	r3, [sp, #28]
 800d81e:	3307      	adds	r3, #7
 800d820:	4393      	bics	r3, r2
 800d822:	3308      	adds	r3, #8
 800d824:	9307      	str	r3, [sp, #28]
 800d826:	6963      	ldr	r3, [r4, #20]
 800d828:	9a04      	ldr	r2, [sp, #16]
 800d82a:	189b      	adds	r3, r3, r2
 800d82c:	6163      	str	r3, [r4, #20]
 800d82e:	e762      	b.n	800d6f6 <_svfiprintf_r+0x46>
 800d830:	4343      	muls	r3, r0
 800d832:	0035      	movs	r5, r6
 800d834:	2101      	movs	r1, #1
 800d836:	189b      	adds	r3, r3, r2
 800d838:	e7a4      	b.n	800d784 <_svfiprintf_r+0xd4>
 800d83a:	2300      	movs	r3, #0
 800d83c:	200a      	movs	r0, #10
 800d83e:	0019      	movs	r1, r3
 800d840:	3501      	adds	r5, #1
 800d842:	6063      	str	r3, [r4, #4]
 800d844:	782a      	ldrb	r2, [r5, #0]
 800d846:	1c6e      	adds	r6, r5, #1
 800d848:	3a30      	subs	r2, #48	@ 0x30
 800d84a:	2a09      	cmp	r2, #9
 800d84c:	d903      	bls.n	800d856 <_svfiprintf_r+0x1a6>
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0c8      	beq.n	800d7e4 <_svfiprintf_r+0x134>
 800d852:	9109      	str	r1, [sp, #36]	@ 0x24
 800d854:	e7c6      	b.n	800d7e4 <_svfiprintf_r+0x134>
 800d856:	4341      	muls	r1, r0
 800d858:	0035      	movs	r5, r6
 800d85a:	2301      	movs	r3, #1
 800d85c:	1889      	adds	r1, r1, r2
 800d85e:	e7f1      	b.n	800d844 <_svfiprintf_r+0x194>
 800d860:	aa07      	add	r2, sp, #28
 800d862:	9200      	str	r2, [sp, #0]
 800d864:	0021      	movs	r1, r4
 800d866:	003a      	movs	r2, r7
 800d868:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a8 <_svfiprintf_r+0x1f8>)
 800d86a:	9803      	ldr	r0, [sp, #12]
 800d86c:	f7fd fe0c 	bl	800b488 <_printf_float>
 800d870:	9004      	str	r0, [sp, #16]
 800d872:	9b04      	ldr	r3, [sp, #16]
 800d874:	3301      	adds	r3, #1
 800d876:	d1d6      	bne.n	800d826 <_svfiprintf_r+0x176>
 800d878:	89bb      	ldrh	r3, [r7, #12]
 800d87a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d87c:	065b      	lsls	r3, r3, #25
 800d87e:	d500      	bpl.n	800d882 <_svfiprintf_r+0x1d2>
 800d880:	e72c      	b.n	800d6dc <_svfiprintf_r+0x2c>
 800d882:	b021      	add	sp, #132	@ 0x84
 800d884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d886:	aa07      	add	r2, sp, #28
 800d888:	9200      	str	r2, [sp, #0]
 800d88a:	0021      	movs	r1, r4
 800d88c:	003a      	movs	r2, r7
 800d88e:	4b06      	ldr	r3, [pc, #24]	@ (800d8a8 <_svfiprintf_r+0x1f8>)
 800d890:	9803      	ldr	r0, [sp, #12]
 800d892:	f7fe f8a7 	bl	800b9e4 <_printf_i>
 800d896:	e7eb      	b.n	800d870 <_svfiprintf_r+0x1c0>
 800d898:	0800e5b6 	.word	0x0800e5b6
 800d89c:	0800e5bc 	.word	0x0800e5bc
 800d8a0:	0800e5c0 	.word	0x0800e5c0
 800d8a4:	0800b489 	.word	0x0800b489
 800d8a8:	0800d5f1 	.word	0x0800d5f1

0800d8ac <__sflush_r>:
 800d8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ae:	220c      	movs	r2, #12
 800d8b0:	5e8b      	ldrsh	r3, [r1, r2]
 800d8b2:	0005      	movs	r5, r0
 800d8b4:	000c      	movs	r4, r1
 800d8b6:	071a      	lsls	r2, r3, #28
 800d8b8:	d456      	bmi.n	800d968 <__sflush_r+0xbc>
 800d8ba:	684a      	ldr	r2, [r1, #4]
 800d8bc:	2a00      	cmp	r2, #0
 800d8be:	dc02      	bgt.n	800d8c6 <__sflush_r+0x1a>
 800d8c0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d8c2:	2a00      	cmp	r2, #0
 800d8c4:	dd4e      	ble.n	800d964 <__sflush_r+0xb8>
 800d8c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d8c8:	2f00      	cmp	r7, #0
 800d8ca:	d04b      	beq.n	800d964 <__sflush_r+0xb8>
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2080      	movs	r0, #128	@ 0x80
 800d8d0:	682e      	ldr	r6, [r5, #0]
 800d8d2:	602a      	str	r2, [r5, #0]
 800d8d4:	001a      	movs	r2, r3
 800d8d6:	0140      	lsls	r0, r0, #5
 800d8d8:	6a21      	ldr	r1, [r4, #32]
 800d8da:	4002      	ands	r2, r0
 800d8dc:	4203      	tst	r3, r0
 800d8de:	d033      	beq.n	800d948 <__sflush_r+0x9c>
 800d8e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	075b      	lsls	r3, r3, #29
 800d8e6:	d506      	bpl.n	800d8f6 <__sflush_r+0x4a>
 800d8e8:	6863      	ldr	r3, [r4, #4]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <__sflush_r+0x4a>
 800d8f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8f4:	1ad2      	subs	r2, r2, r3
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	0028      	movs	r0, r5
 800d8fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d8fc:	6a21      	ldr	r1, [r4, #32]
 800d8fe:	47b8      	blx	r7
 800d900:	89a2      	ldrh	r2, [r4, #12]
 800d902:	1c43      	adds	r3, r0, #1
 800d904:	d106      	bne.n	800d914 <__sflush_r+0x68>
 800d906:	6829      	ldr	r1, [r5, #0]
 800d908:	291d      	cmp	r1, #29
 800d90a:	d846      	bhi.n	800d99a <__sflush_r+0xee>
 800d90c:	4b29      	ldr	r3, [pc, #164]	@ (800d9b4 <__sflush_r+0x108>)
 800d90e:	40cb      	lsrs	r3, r1
 800d910:	07db      	lsls	r3, r3, #31
 800d912:	d542      	bpl.n	800d99a <__sflush_r+0xee>
 800d914:	2300      	movs	r3, #0
 800d916:	6063      	str	r3, [r4, #4]
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	04d2      	lsls	r2, r2, #19
 800d91e:	d505      	bpl.n	800d92c <__sflush_r+0x80>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <__sflush_r+0x7e>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d100      	bne.n	800d92c <__sflush_r+0x80>
 800d92a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d92e:	602e      	str	r6, [r5, #0]
 800d930:	2900      	cmp	r1, #0
 800d932:	d017      	beq.n	800d964 <__sflush_r+0xb8>
 800d934:	0023      	movs	r3, r4
 800d936:	3344      	adds	r3, #68	@ 0x44
 800d938:	4299      	cmp	r1, r3
 800d93a:	d002      	beq.n	800d942 <__sflush_r+0x96>
 800d93c:	0028      	movs	r0, r5
 800d93e:	f7ff f9b5 	bl	800ccac <_free_r>
 800d942:	2300      	movs	r3, #0
 800d944:	6363      	str	r3, [r4, #52]	@ 0x34
 800d946:	e00d      	b.n	800d964 <__sflush_r+0xb8>
 800d948:	2301      	movs	r3, #1
 800d94a:	0028      	movs	r0, r5
 800d94c:	47b8      	blx	r7
 800d94e:	0002      	movs	r2, r0
 800d950:	1c43      	adds	r3, r0, #1
 800d952:	d1c6      	bne.n	800d8e2 <__sflush_r+0x36>
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d0c3      	beq.n	800d8e2 <__sflush_r+0x36>
 800d95a:	2b1d      	cmp	r3, #29
 800d95c:	d001      	beq.n	800d962 <__sflush_r+0xb6>
 800d95e:	2b16      	cmp	r3, #22
 800d960:	d11a      	bne.n	800d998 <__sflush_r+0xec>
 800d962:	602e      	str	r6, [r5, #0]
 800d964:	2000      	movs	r0, #0
 800d966:	e01e      	b.n	800d9a6 <__sflush_r+0xfa>
 800d968:	690e      	ldr	r6, [r1, #16]
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	d0fa      	beq.n	800d964 <__sflush_r+0xb8>
 800d96e:	680f      	ldr	r7, [r1, #0]
 800d970:	600e      	str	r6, [r1, #0]
 800d972:	1bba      	subs	r2, r7, r6
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	079b      	lsls	r3, r3, #30
 800d97a:	d100      	bne.n	800d97e <__sflush_r+0xd2>
 800d97c:	694a      	ldr	r2, [r1, #20]
 800d97e:	60a2      	str	r2, [r4, #8]
 800d980:	9b01      	ldr	r3, [sp, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	ddee      	ble.n	800d964 <__sflush_r+0xb8>
 800d986:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d988:	0032      	movs	r2, r6
 800d98a:	001f      	movs	r7, r3
 800d98c:	0028      	movs	r0, r5
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	6a21      	ldr	r1, [r4, #32]
 800d992:	47b8      	blx	r7
 800d994:	2800      	cmp	r0, #0
 800d996:	dc07      	bgt.n	800d9a8 <__sflush_r+0xfc>
 800d998:	89a2      	ldrh	r2, [r4, #12]
 800d99a:	2340      	movs	r3, #64	@ 0x40
 800d99c:	2001      	movs	r0, #1
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	b21b      	sxth	r3, r3
 800d9a2:	81a3      	strh	r3, [r4, #12]
 800d9a4:	4240      	negs	r0, r0
 800d9a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	1836      	adds	r6, r6, r0
 800d9ac:	1a1b      	subs	r3, r3, r0
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	e7e6      	b.n	800d980 <__sflush_r+0xd4>
 800d9b2:	46c0      	nop			@ (mov r8, r8)
 800d9b4:	20400001 	.word	0x20400001

0800d9b8 <_fflush_r>:
 800d9b8:	690b      	ldr	r3, [r1, #16]
 800d9ba:	b570      	push	{r4, r5, r6, lr}
 800d9bc:	0005      	movs	r5, r0
 800d9be:	000c      	movs	r4, r1
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <_fflush_r+0x12>
 800d9c4:	2500      	movs	r5, #0
 800d9c6:	0028      	movs	r0, r5
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d004      	beq.n	800d9d8 <_fflush_r+0x20>
 800d9ce:	6a03      	ldr	r3, [r0, #32]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <_fflush_r+0x20>
 800d9d4:	f7fe f9a2 	bl	800bd1c <__sinit>
 800d9d8:	220c      	movs	r2, #12
 800d9da:	5ea3      	ldrsh	r3, [r4, r2]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d0f1      	beq.n	800d9c4 <_fflush_r+0xc>
 800d9e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9e2:	07d2      	lsls	r2, r2, #31
 800d9e4:	d404      	bmi.n	800d9f0 <_fflush_r+0x38>
 800d9e6:	059b      	lsls	r3, r3, #22
 800d9e8:	d402      	bmi.n	800d9f0 <_fflush_r+0x38>
 800d9ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ec:	f7fe fad3 	bl	800bf96 <__retarget_lock_acquire_recursive>
 800d9f0:	0028      	movs	r0, r5
 800d9f2:	0021      	movs	r1, r4
 800d9f4:	f7ff ff5a 	bl	800d8ac <__sflush_r>
 800d9f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9fa:	0005      	movs	r5, r0
 800d9fc:	07db      	lsls	r3, r3, #31
 800d9fe:	d4e2      	bmi.n	800d9c6 <_fflush_r+0xe>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	059b      	lsls	r3, r3, #22
 800da04:	d4df      	bmi.n	800d9c6 <_fflush_r+0xe>
 800da06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da08:	f7fe fac6 	bl	800bf98 <__retarget_lock_release_recursive>
 800da0c:	e7db      	b.n	800d9c6 <_fflush_r+0xe>

0800da0e <memmove>:
 800da0e:	b510      	push	{r4, lr}
 800da10:	4288      	cmp	r0, r1
 800da12:	d902      	bls.n	800da1a <memmove+0xc>
 800da14:	188b      	adds	r3, r1, r2
 800da16:	4298      	cmp	r0, r3
 800da18:	d308      	bcc.n	800da2c <memmove+0x1e>
 800da1a:	2300      	movs	r3, #0
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d007      	beq.n	800da30 <memmove+0x22>
 800da20:	5ccc      	ldrb	r4, [r1, r3]
 800da22:	54c4      	strb	r4, [r0, r3]
 800da24:	3301      	adds	r3, #1
 800da26:	e7f9      	b.n	800da1c <memmove+0xe>
 800da28:	5c8b      	ldrb	r3, [r1, r2]
 800da2a:	5483      	strb	r3, [r0, r2]
 800da2c:	3a01      	subs	r2, #1
 800da2e:	d2fb      	bcs.n	800da28 <memmove+0x1a>
 800da30:	bd10      	pop	{r4, pc}
	...

0800da34 <_sbrk_r>:
 800da34:	2300      	movs	r3, #0
 800da36:	b570      	push	{r4, r5, r6, lr}
 800da38:	4d06      	ldr	r5, [pc, #24]	@ (800da54 <_sbrk_r+0x20>)
 800da3a:	0004      	movs	r4, r0
 800da3c:	0008      	movs	r0, r1
 800da3e:	602b      	str	r3, [r5, #0]
 800da40:	f7f7 fc70 	bl	8005324 <_sbrk>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d103      	bne.n	800da50 <_sbrk_r+0x1c>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d000      	beq.n	800da50 <_sbrk_r+0x1c>
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	bd70      	pop	{r4, r5, r6, pc}
 800da52:	46c0      	nop			@ (mov r8, r8)
 800da54:	20000750 	.word	0x20000750

0800da58 <memcpy>:
 800da58:	2300      	movs	r3, #0
 800da5a:	b510      	push	{r4, lr}
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d100      	bne.n	800da62 <memcpy+0xa>
 800da60:	bd10      	pop	{r4, pc}
 800da62:	5ccc      	ldrb	r4, [r1, r3]
 800da64:	54c4      	strb	r4, [r0, r3]
 800da66:	3301      	adds	r3, #1
 800da68:	e7f8      	b.n	800da5c <memcpy+0x4>
	...

0800da6c <__assert_func>:
 800da6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800da6e:	0014      	movs	r4, r2
 800da70:	001a      	movs	r2, r3
 800da72:	4b09      	ldr	r3, [pc, #36]	@ (800da98 <__assert_func+0x2c>)
 800da74:	0005      	movs	r5, r0
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	000e      	movs	r6, r1
 800da7a:	68d8      	ldr	r0, [r3, #12]
 800da7c:	4b07      	ldr	r3, [pc, #28]	@ (800da9c <__assert_func+0x30>)
 800da7e:	2c00      	cmp	r4, #0
 800da80:	d101      	bne.n	800da86 <__assert_func+0x1a>
 800da82:	4b07      	ldr	r3, [pc, #28]	@ (800daa0 <__assert_func+0x34>)
 800da84:	001c      	movs	r4, r3
 800da86:	4907      	ldr	r1, [pc, #28]	@ (800daa4 <__assert_func+0x38>)
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	9402      	str	r4, [sp, #8]
 800da8c:	002b      	movs	r3, r5
 800da8e:	9600      	str	r6, [sp, #0]
 800da90:	f000 f886 	bl	800dba0 <fiprintf>
 800da94:	f000 f894 	bl	800dbc0 <abort>
 800da98:	20000028 	.word	0x20000028
 800da9c:	0800e5d1 	.word	0x0800e5d1
 800daa0:	0800e60c 	.word	0x0800e60c
 800daa4:	0800e5de 	.word	0x0800e5de

0800daa8 <_calloc_r>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	0c0b      	lsrs	r3, r1, #16
 800daac:	0c15      	lsrs	r5, r2, #16
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d11e      	bne.n	800daf0 <_calloc_r+0x48>
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	d10c      	bne.n	800dad0 <_calloc_r+0x28>
 800dab6:	b289      	uxth	r1, r1
 800dab8:	b294      	uxth	r4, r2
 800daba:	434c      	muls	r4, r1
 800dabc:	0021      	movs	r1, r4
 800dabe:	f7ff f96b 	bl	800cd98 <_malloc_r>
 800dac2:	1e05      	subs	r5, r0, #0
 800dac4:	d01b      	beq.n	800dafe <_calloc_r+0x56>
 800dac6:	0022      	movs	r2, r4
 800dac8:	2100      	movs	r1, #0
 800daca:	f7fe f9c9 	bl	800be60 <memset>
 800dace:	e016      	b.n	800dafe <_calloc_r+0x56>
 800dad0:	1c2b      	adds	r3, r5, #0
 800dad2:	1c0c      	adds	r4, r1, #0
 800dad4:	b289      	uxth	r1, r1
 800dad6:	b292      	uxth	r2, r2
 800dad8:	434a      	muls	r2, r1
 800dada:	b29b      	uxth	r3, r3
 800dadc:	b2a1      	uxth	r1, r4
 800dade:	4359      	muls	r1, r3
 800dae0:	0c14      	lsrs	r4, r2, #16
 800dae2:	190c      	adds	r4, r1, r4
 800dae4:	0c23      	lsrs	r3, r4, #16
 800dae6:	d107      	bne.n	800daf8 <_calloc_r+0x50>
 800dae8:	0424      	lsls	r4, r4, #16
 800daea:	b292      	uxth	r2, r2
 800daec:	4314      	orrs	r4, r2
 800daee:	e7e5      	b.n	800dabc <_calloc_r+0x14>
 800daf0:	2d00      	cmp	r5, #0
 800daf2:	d101      	bne.n	800daf8 <_calloc_r+0x50>
 800daf4:	1c14      	adds	r4, r2, #0
 800daf6:	e7ed      	b.n	800dad4 <_calloc_r+0x2c>
 800daf8:	230c      	movs	r3, #12
 800dafa:	2500      	movs	r5, #0
 800dafc:	6003      	str	r3, [r0, #0]
 800dafe:	0028      	movs	r0, r5
 800db00:	bd70      	pop	{r4, r5, r6, pc}

0800db02 <__ascii_mbtowc>:
 800db02:	b082      	sub	sp, #8
 800db04:	2900      	cmp	r1, #0
 800db06:	d100      	bne.n	800db0a <__ascii_mbtowc+0x8>
 800db08:	a901      	add	r1, sp, #4
 800db0a:	1e10      	subs	r0, r2, #0
 800db0c:	d006      	beq.n	800db1c <__ascii_mbtowc+0x1a>
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d006      	beq.n	800db20 <__ascii_mbtowc+0x1e>
 800db12:	7813      	ldrb	r3, [r2, #0]
 800db14:	600b      	str	r3, [r1, #0]
 800db16:	7810      	ldrb	r0, [r2, #0]
 800db18:	1e43      	subs	r3, r0, #1
 800db1a:	4198      	sbcs	r0, r3
 800db1c:	b002      	add	sp, #8
 800db1e:	4770      	bx	lr
 800db20:	2002      	movs	r0, #2
 800db22:	4240      	negs	r0, r0
 800db24:	e7fa      	b.n	800db1c <__ascii_mbtowc+0x1a>

0800db26 <_realloc_r>:
 800db26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db28:	0006      	movs	r6, r0
 800db2a:	000c      	movs	r4, r1
 800db2c:	0015      	movs	r5, r2
 800db2e:	2900      	cmp	r1, #0
 800db30:	d105      	bne.n	800db3e <_realloc_r+0x18>
 800db32:	0011      	movs	r1, r2
 800db34:	f7ff f930 	bl	800cd98 <_malloc_r>
 800db38:	0004      	movs	r4, r0
 800db3a:	0020      	movs	r0, r4
 800db3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db3e:	2a00      	cmp	r2, #0
 800db40:	d103      	bne.n	800db4a <_realloc_r+0x24>
 800db42:	f7ff f8b3 	bl	800ccac <_free_r>
 800db46:	002c      	movs	r4, r5
 800db48:	e7f7      	b.n	800db3a <_realloc_r+0x14>
 800db4a:	f000 f840 	bl	800dbce <_malloc_usable_size_r>
 800db4e:	0007      	movs	r7, r0
 800db50:	4285      	cmp	r5, r0
 800db52:	d802      	bhi.n	800db5a <_realloc_r+0x34>
 800db54:	0843      	lsrs	r3, r0, #1
 800db56:	42ab      	cmp	r3, r5
 800db58:	d3ef      	bcc.n	800db3a <_realloc_r+0x14>
 800db5a:	0029      	movs	r1, r5
 800db5c:	0030      	movs	r0, r6
 800db5e:	f7ff f91b 	bl	800cd98 <_malloc_r>
 800db62:	9001      	str	r0, [sp, #4]
 800db64:	2800      	cmp	r0, #0
 800db66:	d101      	bne.n	800db6c <_realloc_r+0x46>
 800db68:	9c01      	ldr	r4, [sp, #4]
 800db6a:	e7e6      	b.n	800db3a <_realloc_r+0x14>
 800db6c:	002a      	movs	r2, r5
 800db6e:	42bd      	cmp	r5, r7
 800db70:	d900      	bls.n	800db74 <_realloc_r+0x4e>
 800db72:	003a      	movs	r2, r7
 800db74:	0021      	movs	r1, r4
 800db76:	9801      	ldr	r0, [sp, #4]
 800db78:	f7ff ff6e 	bl	800da58 <memcpy>
 800db7c:	0021      	movs	r1, r4
 800db7e:	0030      	movs	r0, r6
 800db80:	f7ff f894 	bl	800ccac <_free_r>
 800db84:	e7f0      	b.n	800db68 <_realloc_r+0x42>

0800db86 <__ascii_wctomb>:
 800db86:	0003      	movs	r3, r0
 800db88:	1e08      	subs	r0, r1, #0
 800db8a:	d005      	beq.n	800db98 <__ascii_wctomb+0x12>
 800db8c:	2aff      	cmp	r2, #255	@ 0xff
 800db8e:	d904      	bls.n	800db9a <__ascii_wctomb+0x14>
 800db90:	228a      	movs	r2, #138	@ 0x8a
 800db92:	2001      	movs	r0, #1
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	4240      	negs	r0, r0
 800db98:	4770      	bx	lr
 800db9a:	2001      	movs	r0, #1
 800db9c:	700a      	strb	r2, [r1, #0]
 800db9e:	e7fb      	b.n	800db98 <__ascii_wctomb+0x12>

0800dba0 <fiprintf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	b517      	push	{r0, r1, r2, r4, lr}
 800dba4:	4c05      	ldr	r4, [pc, #20]	@ (800dbbc <fiprintf+0x1c>)
 800dba6:	ab05      	add	r3, sp, #20
 800dba8:	cb04      	ldmia	r3!, {r2}
 800dbaa:	0001      	movs	r1, r0
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	f000 f83c 	bl	800dc2c <_vfiprintf_r>
 800dbb4:	bc1e      	pop	{r1, r2, r3, r4}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	b003      	add	sp, #12
 800dbba:	4718      	bx	r3
 800dbbc:	20000028 	.word	0x20000028

0800dbc0 <abort>:
 800dbc0:	2006      	movs	r0, #6
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	f000 fa18 	bl	800dff8 <raise>
 800dbc8:	2001      	movs	r0, #1
 800dbca:	f7f7 fb39 	bl	8005240 <_exit>

0800dbce <_malloc_usable_size_r>:
 800dbce:	1f0b      	subs	r3, r1, #4
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	1f18      	subs	r0, r3, #4
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da01      	bge.n	800dbdc <_malloc_usable_size_r+0xe>
 800dbd8:	580b      	ldr	r3, [r1, r0]
 800dbda:	18c0      	adds	r0, r0, r3
 800dbdc:	4770      	bx	lr

0800dbde <__sfputc_r>:
 800dbde:	6893      	ldr	r3, [r2, #8]
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	6093      	str	r3, [r2, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da04      	bge.n	800dbf4 <__sfputc_r+0x16>
 800dbea:	6994      	ldr	r4, [r2, #24]
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	db07      	blt.n	800dc00 <__sfputc_r+0x22>
 800dbf0:	290a      	cmp	r1, #10
 800dbf2:	d005      	beq.n	800dc00 <__sfputc_r+0x22>
 800dbf4:	6813      	ldr	r3, [r2, #0]
 800dbf6:	1c58      	adds	r0, r3, #1
 800dbf8:	6010      	str	r0, [r2, #0]
 800dbfa:	7019      	strb	r1, [r3, #0]
 800dbfc:	0008      	movs	r0, r1
 800dbfe:	bd10      	pop	{r4, pc}
 800dc00:	f000 f930 	bl	800de64 <__swbuf_r>
 800dc04:	0001      	movs	r1, r0
 800dc06:	e7f9      	b.n	800dbfc <__sfputc_r+0x1e>

0800dc08 <__sfputs_r>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	0006      	movs	r6, r0
 800dc0c:	000f      	movs	r7, r1
 800dc0e:	0014      	movs	r4, r2
 800dc10:	18d5      	adds	r5, r2, r3
 800dc12:	42ac      	cmp	r4, r5
 800dc14:	d101      	bne.n	800dc1a <__sfputs_r+0x12>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e007      	b.n	800dc2a <__sfputs_r+0x22>
 800dc1a:	7821      	ldrb	r1, [r4, #0]
 800dc1c:	003a      	movs	r2, r7
 800dc1e:	0030      	movs	r0, r6
 800dc20:	f7ff ffdd 	bl	800dbde <__sfputc_r>
 800dc24:	3401      	adds	r4, #1
 800dc26:	1c43      	adds	r3, r0, #1
 800dc28:	d1f3      	bne.n	800dc12 <__sfputs_r+0xa>
 800dc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc2c <_vfiprintf_r>:
 800dc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc2e:	b0a1      	sub	sp, #132	@ 0x84
 800dc30:	000f      	movs	r7, r1
 800dc32:	0015      	movs	r5, r2
 800dc34:	001e      	movs	r6, r3
 800dc36:	9003      	str	r0, [sp, #12]
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d004      	beq.n	800dc46 <_vfiprintf_r+0x1a>
 800dc3c:	6a03      	ldr	r3, [r0, #32]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <_vfiprintf_r+0x1a>
 800dc42:	f7fe f86b 	bl	800bd1c <__sinit>
 800dc46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc48:	07db      	lsls	r3, r3, #31
 800dc4a:	d405      	bmi.n	800dc58 <_vfiprintf_r+0x2c>
 800dc4c:	89bb      	ldrh	r3, [r7, #12]
 800dc4e:	059b      	lsls	r3, r3, #22
 800dc50:	d402      	bmi.n	800dc58 <_vfiprintf_r+0x2c>
 800dc52:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dc54:	f7fe f99f 	bl	800bf96 <__retarget_lock_acquire_recursive>
 800dc58:	89bb      	ldrh	r3, [r7, #12]
 800dc5a:	071b      	lsls	r3, r3, #28
 800dc5c:	d502      	bpl.n	800dc64 <_vfiprintf_r+0x38>
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d113      	bne.n	800dc8c <_vfiprintf_r+0x60>
 800dc64:	0039      	movs	r1, r7
 800dc66:	9803      	ldr	r0, [sp, #12]
 800dc68:	f000 f93e 	bl	800dee8 <__swsetup_r>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d00d      	beq.n	800dc8c <_vfiprintf_r+0x60>
 800dc70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc72:	07db      	lsls	r3, r3, #31
 800dc74:	d503      	bpl.n	800dc7e <_vfiprintf_r+0x52>
 800dc76:	2001      	movs	r0, #1
 800dc78:	4240      	negs	r0, r0
 800dc7a:	b021      	add	sp, #132	@ 0x84
 800dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7e:	89bb      	ldrh	r3, [r7, #12]
 800dc80:	059b      	lsls	r3, r3, #22
 800dc82:	d4f8      	bmi.n	800dc76 <_vfiprintf_r+0x4a>
 800dc84:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dc86:	f7fe f987 	bl	800bf98 <__retarget_lock_release_recursive>
 800dc8a:	e7f4      	b.n	800dc76 <_vfiprintf_r+0x4a>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	ac08      	add	r4, sp, #32
 800dc90:	6163      	str	r3, [r4, #20]
 800dc92:	3320      	adds	r3, #32
 800dc94:	7663      	strb	r3, [r4, #25]
 800dc96:	3310      	adds	r3, #16
 800dc98:	76a3      	strb	r3, [r4, #26]
 800dc9a:	9607      	str	r6, [sp, #28]
 800dc9c:	002e      	movs	r6, r5
 800dc9e:	7833      	ldrb	r3, [r6, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <_vfiprintf_r+0x7c>
 800dca4:	2b25      	cmp	r3, #37	@ 0x25
 800dca6:	d148      	bne.n	800dd3a <_vfiprintf_r+0x10e>
 800dca8:	1b73      	subs	r3, r6, r5
 800dcaa:	9305      	str	r3, [sp, #20]
 800dcac:	42ae      	cmp	r6, r5
 800dcae:	d00b      	beq.n	800dcc8 <_vfiprintf_r+0x9c>
 800dcb0:	002a      	movs	r2, r5
 800dcb2:	0039      	movs	r1, r7
 800dcb4:	9803      	ldr	r0, [sp, #12]
 800dcb6:	f7ff ffa7 	bl	800dc08 <__sfputs_r>
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d100      	bne.n	800dcc0 <_vfiprintf_r+0x94>
 800dcbe:	e0ae      	b.n	800de1e <_vfiprintf_r+0x1f2>
 800dcc0:	6963      	ldr	r3, [r4, #20]
 800dcc2:	9a05      	ldr	r2, [sp, #20]
 800dcc4:	189b      	adds	r3, r3, r2
 800dcc6:	6163      	str	r3, [r4, #20]
 800dcc8:	7833      	ldrb	r3, [r6, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d100      	bne.n	800dcd0 <_vfiprintf_r+0xa4>
 800dcce:	e0a6      	b.n	800de1e <_vfiprintf_r+0x1f2>
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	4252      	negs	r2, r2
 800dcd6:	6062      	str	r2, [r4, #4]
 800dcd8:	a904      	add	r1, sp, #16
 800dcda:	3254      	adds	r2, #84	@ 0x54
 800dcdc:	1852      	adds	r2, r2, r1
 800dcde:	1c75      	adds	r5, r6, #1
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	60e3      	str	r3, [r4, #12]
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	7013      	strb	r3, [r2, #0]
 800dce8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dcea:	4b59      	ldr	r3, [pc, #356]	@ (800de50 <_vfiprintf_r+0x224>)
 800dcec:	2205      	movs	r2, #5
 800dcee:	0018      	movs	r0, r3
 800dcf0:	7829      	ldrb	r1, [r5, #0]
 800dcf2:	9305      	str	r3, [sp, #20]
 800dcf4:	f7fe f959 	bl	800bfaa <memchr>
 800dcf8:	1c6e      	adds	r6, r5, #1
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d11f      	bne.n	800dd3e <_vfiprintf_r+0x112>
 800dcfe:	6822      	ldr	r2, [r4, #0]
 800dd00:	06d3      	lsls	r3, r2, #27
 800dd02:	d504      	bpl.n	800dd0e <_vfiprintf_r+0xe2>
 800dd04:	2353      	movs	r3, #83	@ 0x53
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	185b      	adds	r3, r3, r1
 800dd0a:	2120      	movs	r1, #32
 800dd0c:	7019      	strb	r1, [r3, #0]
 800dd0e:	0713      	lsls	r3, r2, #28
 800dd10:	d504      	bpl.n	800dd1c <_vfiprintf_r+0xf0>
 800dd12:	2353      	movs	r3, #83	@ 0x53
 800dd14:	a904      	add	r1, sp, #16
 800dd16:	185b      	adds	r3, r3, r1
 800dd18:	212b      	movs	r1, #43	@ 0x2b
 800dd1a:	7019      	strb	r1, [r3, #0]
 800dd1c:	782b      	ldrb	r3, [r5, #0]
 800dd1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd20:	d016      	beq.n	800dd50 <_vfiprintf_r+0x124>
 800dd22:	002e      	movs	r6, r5
 800dd24:	2100      	movs	r1, #0
 800dd26:	200a      	movs	r0, #10
 800dd28:	68e3      	ldr	r3, [r4, #12]
 800dd2a:	7832      	ldrb	r2, [r6, #0]
 800dd2c:	1c75      	adds	r5, r6, #1
 800dd2e:	3a30      	subs	r2, #48	@ 0x30
 800dd30:	2a09      	cmp	r2, #9
 800dd32:	d950      	bls.n	800ddd6 <_vfiprintf_r+0x1aa>
 800dd34:	2900      	cmp	r1, #0
 800dd36:	d111      	bne.n	800dd5c <_vfiprintf_r+0x130>
 800dd38:	e017      	b.n	800dd6a <_vfiprintf_r+0x13e>
 800dd3a:	3601      	adds	r6, #1
 800dd3c:	e7af      	b.n	800dc9e <_vfiprintf_r+0x72>
 800dd3e:	9b05      	ldr	r3, [sp, #20]
 800dd40:	6822      	ldr	r2, [r4, #0]
 800dd42:	1ac0      	subs	r0, r0, r3
 800dd44:	2301      	movs	r3, #1
 800dd46:	4083      	lsls	r3, r0
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	0035      	movs	r5, r6
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	e7cc      	b.n	800dcea <_vfiprintf_r+0xbe>
 800dd50:	9b07      	ldr	r3, [sp, #28]
 800dd52:	1d19      	adds	r1, r3, #4
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	9107      	str	r1, [sp, #28]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	db01      	blt.n	800dd60 <_vfiprintf_r+0x134>
 800dd5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd5e:	e004      	b.n	800dd6a <_vfiprintf_r+0x13e>
 800dd60:	425b      	negs	r3, r3
 800dd62:	60e3      	str	r3, [r4, #12]
 800dd64:	2302      	movs	r3, #2
 800dd66:	4313      	orrs	r3, r2
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	7833      	ldrb	r3, [r6, #0]
 800dd6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd6e:	d10c      	bne.n	800dd8a <_vfiprintf_r+0x15e>
 800dd70:	7873      	ldrb	r3, [r6, #1]
 800dd72:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd74:	d134      	bne.n	800dde0 <_vfiprintf_r+0x1b4>
 800dd76:	9b07      	ldr	r3, [sp, #28]
 800dd78:	3602      	adds	r6, #2
 800dd7a:	1d1a      	adds	r2, r3, #4
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	9207      	str	r2, [sp, #28]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	da01      	bge.n	800dd88 <_vfiprintf_r+0x15c>
 800dd84:	2301      	movs	r3, #1
 800dd86:	425b      	negs	r3, r3
 800dd88:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd8a:	4d32      	ldr	r5, [pc, #200]	@ (800de54 <_vfiprintf_r+0x228>)
 800dd8c:	2203      	movs	r2, #3
 800dd8e:	0028      	movs	r0, r5
 800dd90:	7831      	ldrb	r1, [r6, #0]
 800dd92:	f7fe f90a 	bl	800bfaa <memchr>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d006      	beq.n	800dda8 <_vfiprintf_r+0x17c>
 800dd9a:	2340      	movs	r3, #64	@ 0x40
 800dd9c:	1b40      	subs	r0, r0, r5
 800dd9e:	4083      	lsls	r3, r0
 800dda0:	6822      	ldr	r2, [r4, #0]
 800dda2:	3601      	adds	r6, #1
 800dda4:	4313      	orrs	r3, r2
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	7831      	ldrb	r1, [r6, #0]
 800ddaa:	2206      	movs	r2, #6
 800ddac:	482a      	ldr	r0, [pc, #168]	@ (800de58 <_vfiprintf_r+0x22c>)
 800ddae:	1c75      	adds	r5, r6, #1
 800ddb0:	7621      	strb	r1, [r4, #24]
 800ddb2:	f7fe f8fa 	bl	800bfaa <memchr>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d040      	beq.n	800de3c <_vfiprintf_r+0x210>
 800ddba:	4b28      	ldr	r3, [pc, #160]	@ (800de5c <_vfiprintf_r+0x230>)
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d122      	bne.n	800de06 <_vfiprintf_r+0x1da>
 800ddc0:	2207      	movs	r2, #7
 800ddc2:	9b07      	ldr	r3, [sp, #28]
 800ddc4:	3307      	adds	r3, #7
 800ddc6:	4393      	bics	r3, r2
 800ddc8:	3308      	adds	r3, #8
 800ddca:	9307      	str	r3, [sp, #28]
 800ddcc:	6963      	ldr	r3, [r4, #20]
 800ddce:	9a04      	ldr	r2, [sp, #16]
 800ddd0:	189b      	adds	r3, r3, r2
 800ddd2:	6163      	str	r3, [r4, #20]
 800ddd4:	e762      	b.n	800dc9c <_vfiprintf_r+0x70>
 800ddd6:	4343      	muls	r3, r0
 800ddd8:	002e      	movs	r6, r5
 800ddda:	2101      	movs	r1, #1
 800dddc:	189b      	adds	r3, r3, r2
 800ddde:	e7a4      	b.n	800dd2a <_vfiprintf_r+0xfe>
 800dde0:	2300      	movs	r3, #0
 800dde2:	200a      	movs	r0, #10
 800dde4:	0019      	movs	r1, r3
 800dde6:	3601      	adds	r6, #1
 800dde8:	6063      	str	r3, [r4, #4]
 800ddea:	7832      	ldrb	r2, [r6, #0]
 800ddec:	1c75      	adds	r5, r6, #1
 800ddee:	3a30      	subs	r2, #48	@ 0x30
 800ddf0:	2a09      	cmp	r2, #9
 800ddf2:	d903      	bls.n	800ddfc <_vfiprintf_r+0x1d0>
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0c8      	beq.n	800dd8a <_vfiprintf_r+0x15e>
 800ddf8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ddfa:	e7c6      	b.n	800dd8a <_vfiprintf_r+0x15e>
 800ddfc:	4341      	muls	r1, r0
 800ddfe:	002e      	movs	r6, r5
 800de00:	2301      	movs	r3, #1
 800de02:	1889      	adds	r1, r1, r2
 800de04:	e7f1      	b.n	800ddea <_vfiprintf_r+0x1be>
 800de06:	aa07      	add	r2, sp, #28
 800de08:	9200      	str	r2, [sp, #0]
 800de0a:	0021      	movs	r1, r4
 800de0c:	003a      	movs	r2, r7
 800de0e:	4b14      	ldr	r3, [pc, #80]	@ (800de60 <_vfiprintf_r+0x234>)
 800de10:	9803      	ldr	r0, [sp, #12]
 800de12:	f7fd fb39 	bl	800b488 <_printf_float>
 800de16:	9004      	str	r0, [sp, #16]
 800de18:	9b04      	ldr	r3, [sp, #16]
 800de1a:	3301      	adds	r3, #1
 800de1c:	d1d6      	bne.n	800ddcc <_vfiprintf_r+0x1a0>
 800de1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de20:	07db      	lsls	r3, r3, #31
 800de22:	d405      	bmi.n	800de30 <_vfiprintf_r+0x204>
 800de24:	89bb      	ldrh	r3, [r7, #12]
 800de26:	059b      	lsls	r3, r3, #22
 800de28:	d402      	bmi.n	800de30 <_vfiprintf_r+0x204>
 800de2a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800de2c:	f7fe f8b4 	bl	800bf98 <__retarget_lock_release_recursive>
 800de30:	89bb      	ldrh	r3, [r7, #12]
 800de32:	065b      	lsls	r3, r3, #25
 800de34:	d500      	bpl.n	800de38 <_vfiprintf_r+0x20c>
 800de36:	e71e      	b.n	800dc76 <_vfiprintf_r+0x4a>
 800de38:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800de3a:	e71e      	b.n	800dc7a <_vfiprintf_r+0x4e>
 800de3c:	aa07      	add	r2, sp, #28
 800de3e:	9200      	str	r2, [sp, #0]
 800de40:	0021      	movs	r1, r4
 800de42:	003a      	movs	r2, r7
 800de44:	4b06      	ldr	r3, [pc, #24]	@ (800de60 <_vfiprintf_r+0x234>)
 800de46:	9803      	ldr	r0, [sp, #12]
 800de48:	f7fd fdcc 	bl	800b9e4 <_printf_i>
 800de4c:	e7e3      	b.n	800de16 <_vfiprintf_r+0x1ea>
 800de4e:	46c0      	nop			@ (mov r8, r8)
 800de50:	0800e5b6 	.word	0x0800e5b6
 800de54:	0800e5bc 	.word	0x0800e5bc
 800de58:	0800e5c0 	.word	0x0800e5c0
 800de5c:	0800b489 	.word	0x0800b489
 800de60:	0800dc09 	.word	0x0800dc09

0800de64 <__swbuf_r>:
 800de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de66:	0006      	movs	r6, r0
 800de68:	000d      	movs	r5, r1
 800de6a:	0014      	movs	r4, r2
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d004      	beq.n	800de7a <__swbuf_r+0x16>
 800de70:	6a03      	ldr	r3, [r0, #32]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <__swbuf_r+0x16>
 800de76:	f7fd ff51 	bl	800bd1c <__sinit>
 800de7a:	69a3      	ldr	r3, [r4, #24]
 800de7c:	60a3      	str	r3, [r4, #8]
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	071b      	lsls	r3, r3, #28
 800de82:	d502      	bpl.n	800de8a <__swbuf_r+0x26>
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d109      	bne.n	800de9e <__swbuf_r+0x3a>
 800de8a:	0021      	movs	r1, r4
 800de8c:	0030      	movs	r0, r6
 800de8e:	f000 f82b 	bl	800dee8 <__swsetup_r>
 800de92:	2800      	cmp	r0, #0
 800de94:	d003      	beq.n	800de9e <__swbuf_r+0x3a>
 800de96:	2501      	movs	r5, #1
 800de98:	426d      	negs	r5, r5
 800de9a:	0028      	movs	r0, r5
 800de9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de9e:	6923      	ldr	r3, [r4, #16]
 800dea0:	6820      	ldr	r0, [r4, #0]
 800dea2:	b2ef      	uxtb	r7, r5
 800dea4:	1ac0      	subs	r0, r0, r3
 800dea6:	6963      	ldr	r3, [r4, #20]
 800dea8:	b2ed      	uxtb	r5, r5
 800deaa:	4283      	cmp	r3, r0
 800deac:	dc05      	bgt.n	800deba <__swbuf_r+0x56>
 800deae:	0021      	movs	r1, r4
 800deb0:	0030      	movs	r0, r6
 800deb2:	f7ff fd81 	bl	800d9b8 <_fflush_r>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d1ed      	bne.n	800de96 <__swbuf_r+0x32>
 800deba:	68a3      	ldr	r3, [r4, #8]
 800debc:	3001      	adds	r0, #1
 800debe:	3b01      	subs	r3, #1
 800dec0:	60a3      	str	r3, [r4, #8]
 800dec2:	6823      	ldr	r3, [r4, #0]
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	6022      	str	r2, [r4, #0]
 800dec8:	701f      	strb	r7, [r3, #0]
 800deca:	6963      	ldr	r3, [r4, #20]
 800decc:	4283      	cmp	r3, r0
 800dece:	d004      	beq.n	800deda <__swbuf_r+0x76>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	07db      	lsls	r3, r3, #31
 800ded4:	d5e1      	bpl.n	800de9a <__swbuf_r+0x36>
 800ded6:	2d0a      	cmp	r5, #10
 800ded8:	d1df      	bne.n	800de9a <__swbuf_r+0x36>
 800deda:	0021      	movs	r1, r4
 800dedc:	0030      	movs	r0, r6
 800dede:	f7ff fd6b 	bl	800d9b8 <_fflush_r>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d0d9      	beq.n	800de9a <__swbuf_r+0x36>
 800dee6:	e7d6      	b.n	800de96 <__swbuf_r+0x32>

0800dee8 <__swsetup_r>:
 800dee8:	4b2d      	ldr	r3, [pc, #180]	@ (800dfa0 <__swsetup_r+0xb8>)
 800deea:	b570      	push	{r4, r5, r6, lr}
 800deec:	0005      	movs	r5, r0
 800deee:	6818      	ldr	r0, [r3, #0]
 800def0:	000c      	movs	r4, r1
 800def2:	2800      	cmp	r0, #0
 800def4:	d004      	beq.n	800df00 <__swsetup_r+0x18>
 800def6:	6a03      	ldr	r3, [r0, #32]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d101      	bne.n	800df00 <__swsetup_r+0x18>
 800defc:	f7fd ff0e 	bl	800bd1c <__sinit>
 800df00:	220c      	movs	r2, #12
 800df02:	5ea3      	ldrsh	r3, [r4, r2]
 800df04:	071a      	lsls	r2, r3, #28
 800df06:	d423      	bmi.n	800df50 <__swsetup_r+0x68>
 800df08:	06da      	lsls	r2, r3, #27
 800df0a:	d407      	bmi.n	800df1c <__swsetup_r+0x34>
 800df0c:	2209      	movs	r2, #9
 800df0e:	602a      	str	r2, [r5, #0]
 800df10:	2240      	movs	r2, #64	@ 0x40
 800df12:	2001      	movs	r0, #1
 800df14:	4313      	orrs	r3, r2
 800df16:	81a3      	strh	r3, [r4, #12]
 800df18:	4240      	negs	r0, r0
 800df1a:	e03a      	b.n	800df92 <__swsetup_r+0xaa>
 800df1c:	075b      	lsls	r3, r3, #29
 800df1e:	d513      	bpl.n	800df48 <__swsetup_r+0x60>
 800df20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df22:	2900      	cmp	r1, #0
 800df24:	d008      	beq.n	800df38 <__swsetup_r+0x50>
 800df26:	0023      	movs	r3, r4
 800df28:	3344      	adds	r3, #68	@ 0x44
 800df2a:	4299      	cmp	r1, r3
 800df2c:	d002      	beq.n	800df34 <__swsetup_r+0x4c>
 800df2e:	0028      	movs	r0, r5
 800df30:	f7fe febc 	bl	800ccac <_free_r>
 800df34:	2300      	movs	r3, #0
 800df36:	6363      	str	r3, [r4, #52]	@ 0x34
 800df38:	2224      	movs	r2, #36	@ 0x24
 800df3a:	89a3      	ldrh	r3, [r4, #12]
 800df3c:	4393      	bics	r3, r2
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	2300      	movs	r3, #0
 800df42:	6063      	str	r3, [r4, #4]
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	2308      	movs	r3, #8
 800df4a:	89a2      	ldrh	r2, [r4, #12]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	81a3      	strh	r3, [r4, #12]
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <__swsetup_r+0x86>
 800df56:	21a0      	movs	r1, #160	@ 0xa0
 800df58:	2280      	movs	r2, #128	@ 0x80
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	0089      	lsls	r1, r1, #2
 800df5e:	0092      	lsls	r2, r2, #2
 800df60:	400b      	ands	r3, r1
 800df62:	4293      	cmp	r3, r2
 800df64:	d003      	beq.n	800df6e <__swsetup_r+0x86>
 800df66:	0021      	movs	r1, r4
 800df68:	0028      	movs	r0, r5
 800df6a:	f000 f88f 	bl	800e08c <__smakebuf_r>
 800df6e:	220c      	movs	r2, #12
 800df70:	5ea3      	ldrsh	r3, [r4, r2]
 800df72:	2101      	movs	r1, #1
 800df74:	001a      	movs	r2, r3
 800df76:	400a      	ands	r2, r1
 800df78:	420b      	tst	r3, r1
 800df7a:	d00b      	beq.n	800df94 <__swsetup_r+0xac>
 800df7c:	2200      	movs	r2, #0
 800df7e:	60a2      	str	r2, [r4, #8]
 800df80:	6962      	ldr	r2, [r4, #20]
 800df82:	4252      	negs	r2, r2
 800df84:	61a2      	str	r2, [r4, #24]
 800df86:	2000      	movs	r0, #0
 800df88:	6922      	ldr	r2, [r4, #16]
 800df8a:	4282      	cmp	r2, r0
 800df8c:	d101      	bne.n	800df92 <__swsetup_r+0xaa>
 800df8e:	061a      	lsls	r2, r3, #24
 800df90:	d4be      	bmi.n	800df10 <__swsetup_r+0x28>
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	0799      	lsls	r1, r3, #30
 800df96:	d400      	bmi.n	800df9a <__swsetup_r+0xb2>
 800df98:	6962      	ldr	r2, [r4, #20]
 800df9a:	60a2      	str	r2, [r4, #8]
 800df9c:	e7f3      	b.n	800df86 <__swsetup_r+0x9e>
 800df9e:	46c0      	nop			@ (mov r8, r8)
 800dfa0:	20000028 	.word	0x20000028

0800dfa4 <_raise_r>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	0004      	movs	r4, r0
 800dfa8:	000d      	movs	r5, r1
 800dfaa:	291f      	cmp	r1, #31
 800dfac:	d904      	bls.n	800dfb8 <_raise_r+0x14>
 800dfae:	2316      	movs	r3, #22
 800dfb0:	6003      	str	r3, [r0, #0]
 800dfb2:	2001      	movs	r0, #1
 800dfb4:	4240      	negs	r0, r0
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d004      	beq.n	800dfc8 <_raise_r+0x24>
 800dfbe:	008a      	lsls	r2, r1, #2
 800dfc0:	189b      	adds	r3, r3, r2
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	d108      	bne.n	800dfda <_raise_r+0x36>
 800dfc8:	0020      	movs	r0, r4
 800dfca:	f000 f831 	bl	800e030 <_getpid_r>
 800dfce:	002a      	movs	r2, r5
 800dfd0:	0001      	movs	r1, r0
 800dfd2:	0020      	movs	r0, r4
 800dfd4:	f000 f81a 	bl	800e00c <_kill_r>
 800dfd8:	e7ed      	b.n	800dfb6 <_raise_r+0x12>
 800dfda:	2a01      	cmp	r2, #1
 800dfdc:	d009      	beq.n	800dff2 <_raise_r+0x4e>
 800dfde:	1c51      	adds	r1, r2, #1
 800dfe0:	d103      	bne.n	800dfea <_raise_r+0x46>
 800dfe2:	2316      	movs	r3, #22
 800dfe4:	6003      	str	r3, [r0, #0]
 800dfe6:	2001      	movs	r0, #1
 800dfe8:	e7e5      	b.n	800dfb6 <_raise_r+0x12>
 800dfea:	2100      	movs	r1, #0
 800dfec:	0028      	movs	r0, r5
 800dfee:	6019      	str	r1, [r3, #0]
 800dff0:	4790      	blx	r2
 800dff2:	2000      	movs	r0, #0
 800dff4:	e7df      	b.n	800dfb6 <_raise_r+0x12>
	...

0800dff8 <raise>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	4b03      	ldr	r3, [pc, #12]	@ (800e008 <raise+0x10>)
 800dffc:	0001      	movs	r1, r0
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	f7ff ffd0 	bl	800dfa4 <_raise_r>
 800e004:	bd10      	pop	{r4, pc}
 800e006:	46c0      	nop			@ (mov r8, r8)
 800e008:	20000028 	.word	0x20000028

0800e00c <_kill_r>:
 800e00c:	2300      	movs	r3, #0
 800e00e:	b570      	push	{r4, r5, r6, lr}
 800e010:	4d06      	ldr	r5, [pc, #24]	@ (800e02c <_kill_r+0x20>)
 800e012:	0004      	movs	r4, r0
 800e014:	0008      	movs	r0, r1
 800e016:	0011      	movs	r1, r2
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	f7f7 f901 	bl	8005220 <_kill>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d103      	bne.n	800e02a <_kill_r+0x1e>
 800e022:	682b      	ldr	r3, [r5, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d000      	beq.n	800e02a <_kill_r+0x1e>
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
 800e02c:	20000750 	.word	0x20000750

0800e030 <_getpid_r>:
 800e030:	b510      	push	{r4, lr}
 800e032:	f7f7 f8ef 	bl	8005214 <_getpid>
 800e036:	bd10      	pop	{r4, pc}

0800e038 <__swhatbuf_r>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	000e      	movs	r6, r1
 800e03c:	001d      	movs	r5, r3
 800e03e:	230e      	movs	r3, #14
 800e040:	5ec9      	ldrsh	r1, [r1, r3]
 800e042:	0014      	movs	r4, r2
 800e044:	b096      	sub	sp, #88	@ 0x58
 800e046:	2900      	cmp	r1, #0
 800e048:	da0c      	bge.n	800e064 <__swhatbuf_r+0x2c>
 800e04a:	89b2      	ldrh	r2, [r6, #12]
 800e04c:	2380      	movs	r3, #128	@ 0x80
 800e04e:	0011      	movs	r1, r2
 800e050:	4019      	ands	r1, r3
 800e052:	421a      	tst	r2, r3
 800e054:	d114      	bne.n	800e080 <__swhatbuf_r+0x48>
 800e056:	2380      	movs	r3, #128	@ 0x80
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	2000      	movs	r0, #0
 800e05c:	6029      	str	r1, [r5, #0]
 800e05e:	6023      	str	r3, [r4, #0]
 800e060:	b016      	add	sp, #88	@ 0x58
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	466a      	mov	r2, sp
 800e066:	f000 f853 	bl	800e110 <_fstat_r>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	dbed      	blt.n	800e04a <__swhatbuf_r+0x12>
 800e06e:	23f0      	movs	r3, #240	@ 0xf0
 800e070:	9901      	ldr	r1, [sp, #4]
 800e072:	021b      	lsls	r3, r3, #8
 800e074:	4019      	ands	r1, r3
 800e076:	4b04      	ldr	r3, [pc, #16]	@ (800e088 <__swhatbuf_r+0x50>)
 800e078:	18c9      	adds	r1, r1, r3
 800e07a:	424b      	negs	r3, r1
 800e07c:	4159      	adcs	r1, r3
 800e07e:	e7ea      	b.n	800e056 <__swhatbuf_r+0x1e>
 800e080:	2100      	movs	r1, #0
 800e082:	2340      	movs	r3, #64	@ 0x40
 800e084:	e7e9      	b.n	800e05a <__swhatbuf_r+0x22>
 800e086:	46c0      	nop			@ (mov r8, r8)
 800e088:	ffffe000 	.word	0xffffe000

0800e08c <__smakebuf_r>:
 800e08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08e:	2602      	movs	r6, #2
 800e090:	898b      	ldrh	r3, [r1, #12]
 800e092:	0005      	movs	r5, r0
 800e094:	000c      	movs	r4, r1
 800e096:	b085      	sub	sp, #20
 800e098:	4233      	tst	r3, r6
 800e09a:	d007      	beq.n	800e0ac <__smakebuf_r+0x20>
 800e09c:	0023      	movs	r3, r4
 800e09e:	3347      	adds	r3, #71	@ 0x47
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	6123      	str	r3, [r4, #16]
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	6163      	str	r3, [r4, #20]
 800e0a8:	b005      	add	sp, #20
 800e0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ac:	ab03      	add	r3, sp, #12
 800e0ae:	aa02      	add	r2, sp, #8
 800e0b0:	f7ff ffc2 	bl	800e038 <__swhatbuf_r>
 800e0b4:	9f02      	ldr	r7, [sp, #8]
 800e0b6:	9001      	str	r0, [sp, #4]
 800e0b8:	0039      	movs	r1, r7
 800e0ba:	0028      	movs	r0, r5
 800e0bc:	f7fe fe6c 	bl	800cd98 <_malloc_r>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d108      	bne.n	800e0d6 <__smakebuf_r+0x4a>
 800e0c4:	220c      	movs	r2, #12
 800e0c6:	5ea3      	ldrsh	r3, [r4, r2]
 800e0c8:	059a      	lsls	r2, r3, #22
 800e0ca:	d4ed      	bmi.n	800e0a8 <__smakebuf_r+0x1c>
 800e0cc:	2203      	movs	r2, #3
 800e0ce:	4393      	bics	r3, r2
 800e0d0:	431e      	orrs	r6, r3
 800e0d2:	81a6      	strh	r6, [r4, #12]
 800e0d4:	e7e2      	b.n	800e09c <__smakebuf_r+0x10>
 800e0d6:	2380      	movs	r3, #128	@ 0x80
 800e0d8:	89a2      	ldrh	r2, [r4, #12]
 800e0da:	6020      	str	r0, [r4, #0]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	6120      	str	r0, [r4, #16]
 800e0e4:	6167      	str	r7, [r4, #20]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <__smakebuf_r+0x78>
 800e0ea:	0028      	movs	r0, r5
 800e0ec:	230e      	movs	r3, #14
 800e0ee:	5ee1      	ldrsh	r1, [r4, r3]
 800e0f0:	f000 f820 	bl	800e134 <_isatty_r>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d005      	beq.n	800e104 <__smakebuf_r+0x78>
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	89a2      	ldrh	r2, [r4, #12]
 800e0fc:	439a      	bics	r2, r3
 800e0fe:	3b02      	subs	r3, #2
 800e100:	4313      	orrs	r3, r2
 800e102:	81a3      	strh	r3, [r4, #12]
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	9a01      	ldr	r2, [sp, #4]
 800e108:	4313      	orrs	r3, r2
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	e7cc      	b.n	800e0a8 <__smakebuf_r+0x1c>
	...

0800e110 <_fstat_r>:
 800e110:	2300      	movs	r3, #0
 800e112:	b570      	push	{r4, r5, r6, lr}
 800e114:	4d06      	ldr	r5, [pc, #24]	@ (800e130 <_fstat_r+0x20>)
 800e116:	0004      	movs	r4, r0
 800e118:	0008      	movs	r0, r1
 800e11a:	0011      	movs	r1, r2
 800e11c:	602b      	str	r3, [r5, #0]
 800e11e:	f7f7 f8df 	bl	80052e0 <_fstat>
 800e122:	1c43      	adds	r3, r0, #1
 800e124:	d103      	bne.n	800e12e <_fstat_r+0x1e>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d000      	beq.n	800e12e <_fstat_r+0x1e>
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	20000750 	.word	0x20000750

0800e134 <_isatty_r>:
 800e134:	2300      	movs	r3, #0
 800e136:	b570      	push	{r4, r5, r6, lr}
 800e138:	4d06      	ldr	r5, [pc, #24]	@ (800e154 <_isatty_r+0x20>)
 800e13a:	0004      	movs	r4, r0
 800e13c:	0008      	movs	r0, r1
 800e13e:	602b      	str	r3, [r5, #0]
 800e140:	f7f7 f8dc 	bl	80052fc <_isatty>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d103      	bne.n	800e150 <_isatty_r+0x1c>
 800e148:	682b      	ldr	r3, [r5, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d000      	beq.n	800e150 <_isatty_r+0x1c>
 800e14e:	6023      	str	r3, [r4, #0]
 800e150:	bd70      	pop	{r4, r5, r6, pc}
 800e152:	46c0      	nop			@ (mov r8, r8)
 800e154:	20000750 	.word	0x20000750

0800e158 <_init>:
 800e158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15a:	46c0      	nop			@ (mov r8, r8)
 800e15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e15e:	bc08      	pop	{r3}
 800e160:	469e      	mov	lr, r3
 800e162:	4770      	bx	lr

0800e164 <_fini>:
 800e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e166:	46c0      	nop			@ (mov r8, r8)
 800e168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16a:	bc08      	pop	{r3}
 800e16c:	469e      	mov	lr, r3
 800e16e:	4770      	bx	lr
