
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e530  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800e5e8  0800e5e8  0000f5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec8c  0800ec8c  000101e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800ec8c  0800ec8c  000101e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800ec8c  0800ec8c  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec8c  0800ec8c  0000fc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec90  0800ec90  0000fc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800ec94  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200001e4  0800ee78  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800ee78  0001075c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a390  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ac  00000000  00000000  0002a59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001280  00000000  00000000  0002f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a152  00000000  00000000  00030550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2ba  00000000  00000000  0004a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a150b  00000000  00000000  0006795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108e67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a2c  00000000  00000000  00108eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  0010f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800e5d0 	.word	0x0800e5d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800e5d0 	.word	0x0800e5d0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f002 f84b 	bl	80024d0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff8f 	bl	8002368 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f002 f83d 	bl	80024d0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f002 f833 	bl	80024d0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 ffb9 	bl	80023f0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 ffaf 	bl	80023f0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbc3 	bl	8000c34 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb4b 	bl	8000b54 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fbb5 	bl	8000c34 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbab 	bl	8000c34 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb59 	bl	8000ba4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb4f 	bl	8000ba4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	@ 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 ff8b 	bl	8001440 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	@ 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fd21 	bl	8000f78 <__aeabi_fsub>
 8000536:	f000 ff83 	bl	8001440 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	024b      	lsls	r3, r1, #9
 8000548:	0a5a      	lsrs	r2, r3, #9
 800054a:	4694      	mov	ip, r2
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	0fc9      	lsrs	r1, r1, #31
 8000550:	46ce      	mov	lr, r9
 8000552:	4647      	mov	r7, r8
 8000554:	4689      	mov	r9, r1
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	0246      	lsls	r6, r0, #9
 800055a:	0e2d      	lsrs	r5, r5, #24
 800055c:	0e12      	lsrs	r2, r2, #24
 800055e:	b580      	push	{r7, lr}
 8000560:	0999      	lsrs	r1, r3, #6
 8000562:	0a77      	lsrs	r7, r6, #9
 8000564:	0fc4      	lsrs	r4, r0, #31
 8000566:	09b6      	lsrs	r6, r6, #6
 8000568:	1aab      	subs	r3, r5, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	d020      	beq.n	80005b0 <__aeabi_fadd+0x6c>
 800056e:	2b00      	cmp	r3, #0
 8000570:	dd0c      	ble.n	800058c <__aeabi_fadd+0x48>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d134      	bne.n	80005e0 <__aeabi_fadd+0x9c>
 8000576:	2900      	cmp	r1, #0
 8000578:	d02a      	beq.n	80005d0 <__aeabi_fadd+0x8c>
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	2b01      	cmp	r3, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x3e>
 8000580:	e08f      	b.n	80006a2 <__aeabi_fadd+0x15e>
 8000582:	2bff      	cmp	r3, #255	@ 0xff
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x44>
 8000586:	e0cd      	b.n	8000724 <__aeabi_fadd+0x1e0>
 8000588:	0013      	movs	r3, r2
 800058a:	e02f      	b.n	80005ec <__aeabi_fadd+0xa8>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d060      	beq.n	8000652 <__aeabi_fadd+0x10e>
 8000590:	1b53      	subs	r3, r2, r5
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x54>
 8000596:	e0ee      	b.n	8000776 <__aeabi_fadd+0x232>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x5a>
 800059c:	e13e      	b.n	800081c <__aeabi_fadd+0x2d8>
 800059e:	1e5c      	subs	r4, r3, #1
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x62>
 80005a4:	e16b      	b.n	800087e <__aeabi_fadd+0x33a>
 80005a6:	2bff      	cmp	r3, #255	@ 0xff
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x68>
 80005aa:	e0b9      	b.n	8000720 <__aeabi_fadd+0x1dc>
 80005ac:	0023      	movs	r3, r4
 80005ae:	e0e7      	b.n	8000780 <__aeabi_fadd+0x23c>
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dc00      	bgt.n	80005b6 <__aeabi_fadd+0x72>
 80005b4:	e0a4      	b.n	8000700 <__aeabi_fadd+0x1bc>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d069      	beq.n	800068e <__aeabi_fadd+0x14a>
 80005ba:	2dff      	cmp	r5, #255	@ 0xff
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x7c>
 80005be:	e0b1      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	04d2      	lsls	r2, r2, #19
 80005c4:	4311      	orrs	r1, r2
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_fadd+0x88>
 80005ca:	e0e9      	b.n	80007a0 <__aeabi_fadd+0x25c>
 80005cc:	002b      	movs	r3, r5
 80005ce:	3605      	adds	r6, #5
 80005d0:	08f7      	lsrs	r7, r6, #3
 80005d2:	2bff      	cmp	r3, #255	@ 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x94>
 80005d6:	e0a5      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005d8:	027a      	lsls	r2, r7, #9
 80005da:	0a52      	lsrs	r2, r2, #9
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	e030      	b.n	8000642 <__aeabi_fadd+0xfe>
 80005e0:	2dff      	cmp	r5, #255	@ 0xff
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0xa2>
 80005e4:	e09e      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	04d2      	lsls	r2, r2, #19
 80005ea:	4311      	orrs	r1, r2
 80005ec:	2001      	movs	r0, #1
 80005ee:	2b1b      	cmp	r3, #27
 80005f0:	dc08      	bgt.n	8000604 <__aeabi_fadd+0xc0>
 80005f2:	0008      	movs	r0, r1
 80005f4:	2220      	movs	r2, #32
 80005f6:	40d8      	lsrs	r0, r3
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4099      	lsls	r1, r3
 80005fc:	000b      	movs	r3, r1
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4193      	sbcs	r3, r2
 8000602:	4318      	orrs	r0, r3
 8000604:	1a36      	subs	r6, r6, r0
 8000606:	0173      	lsls	r3, r6, #5
 8000608:	d400      	bmi.n	800060c <__aeabi_fadd+0xc8>
 800060a:	e071      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 800060c:	01b6      	lsls	r6, r6, #6
 800060e:	09b7      	lsrs	r7, r6, #6
 8000610:	0038      	movs	r0, r7
 8000612:	f003 f835 	bl	8003680 <__clzsi2>
 8000616:	003b      	movs	r3, r7
 8000618:	3805      	subs	r0, #5
 800061a:	4083      	lsls	r3, r0
 800061c:	4285      	cmp	r5, r0
 800061e:	dd4d      	ble.n	80006bc <__aeabi_fadd+0x178>
 8000620:	4eb4      	ldr	r6, [pc, #720]	@ (80008f4 <__aeabi_fadd+0x3b0>)
 8000622:	1a2d      	subs	r5, r5, r0
 8000624:	401e      	ands	r6, r3
 8000626:	075a      	lsls	r2, r3, #29
 8000628:	d068      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 800062a:	220f      	movs	r2, #15
 800062c:	4013      	ands	r3, r2
 800062e:	2b04      	cmp	r3, #4
 8000630:	d064      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 8000632:	3604      	adds	r6, #4
 8000634:	0173      	lsls	r3, r6, #5
 8000636:	d561      	bpl.n	80006fc <__aeabi_fadd+0x1b8>
 8000638:	1c68      	adds	r0, r5, #1
 800063a:	2dfe      	cmp	r5, #254	@ 0xfe
 800063c:	d154      	bne.n	80006e8 <__aeabi_fadd+0x1a4>
 800063e:	20ff      	movs	r0, #255	@ 0xff
 8000640:	2200      	movs	r2, #0
 8000642:	05c0      	lsls	r0, r0, #23
 8000644:	4310      	orrs	r0, r2
 8000646:	07e4      	lsls	r4, r4, #31
 8000648:	4320      	orrs	r0, r4
 800064a:	bcc0      	pop	{r6, r7}
 800064c:	46b9      	mov	r9, r7
 800064e:	46b0      	mov	r8, r6
 8000650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000652:	22fe      	movs	r2, #254	@ 0xfe
 8000654:	4690      	mov	r8, r2
 8000656:	1c68      	adds	r0, r5, #1
 8000658:	0002      	movs	r2, r0
 800065a:	4640      	mov	r0, r8
 800065c:	4210      	tst	r0, r2
 800065e:	d16b      	bne.n	8000738 <__aeabi_fadd+0x1f4>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x122>
 8000664:	e0dd      	b.n	8000822 <__aeabi_fadd+0x2de>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x128>
 800066a:	e102      	b.n	8000872 <__aeabi_fadd+0x32e>
 800066c:	2900      	cmp	r1, #0
 800066e:	d0b3      	beq.n	80005d8 <__aeabi_fadd+0x94>
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	1a77      	subs	r7, r6, r1
 8000674:	04d2      	lsls	r2, r2, #19
 8000676:	4217      	tst	r7, r2
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x138>
 800067a:	e136      	b.n	80008ea <__aeabi_fadd+0x3a6>
 800067c:	464c      	mov	r4, r9
 800067e:	1b8e      	subs	r6, r1, r6
 8000680:	d061      	beq.n	8000746 <__aeabi_fadd+0x202>
 8000682:	2001      	movs	r0, #1
 8000684:	4216      	tst	r6, r2
 8000686:	d130      	bne.n	80006ea <__aeabi_fadd+0x1a6>
 8000688:	2300      	movs	r3, #0
 800068a:	08f7      	lsrs	r7, r6, #3
 800068c:	e7a4      	b.n	80005d8 <__aeabi_fadd+0x94>
 800068e:	2900      	cmp	r1, #0
 8000690:	d09e      	beq.n	80005d0 <__aeabi_fadd+0x8c>
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	2b01      	cmp	r3, #1
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x156>
 8000698:	e0ca      	b.n	8000830 <__aeabi_fadd+0x2ec>
 800069a:	2bff      	cmp	r3, #255	@ 0xff
 800069c:	d042      	beq.n	8000724 <__aeabi_fadd+0x1e0>
 800069e:	0013      	movs	r3, r2
 80006a0:	e791      	b.n	80005c6 <__aeabi_fadd+0x82>
 80006a2:	1a71      	subs	r1, r6, r1
 80006a4:	014b      	lsls	r3, r1, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x166>
 80006a8:	e0d1      	b.n	800084e <__aeabi_fadd+0x30a>
 80006aa:	018f      	lsls	r7, r1, #6
 80006ac:	09bf      	lsrs	r7, r7, #6
 80006ae:	0038      	movs	r0, r7
 80006b0:	f002 ffe6 	bl	8003680 <__clzsi2>
 80006b4:	003b      	movs	r3, r7
 80006b6:	3805      	subs	r0, #5
 80006b8:	4083      	lsls	r3, r0
 80006ba:	2501      	movs	r5, #1
 80006bc:	2220      	movs	r2, #32
 80006be:	1b40      	subs	r0, r0, r5
 80006c0:	3001      	adds	r0, #1
 80006c2:	1a12      	subs	r2, r2, r0
 80006c4:	001e      	movs	r6, r3
 80006c6:	4093      	lsls	r3, r2
 80006c8:	40c6      	lsrs	r6, r0
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	4193      	sbcs	r3, r2
 80006ce:	431e      	orrs	r6, r3
 80006d0:	d039      	beq.n	8000746 <__aeabi_fadd+0x202>
 80006d2:	0773      	lsls	r3, r6, #29
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fadd+0x194>
 80006d6:	e11b      	b.n	8000910 <__aeabi_fadd+0x3cc>
 80006d8:	230f      	movs	r3, #15
 80006da:	2500      	movs	r5, #0
 80006dc:	4033      	ands	r3, r6
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d1a7      	bne.n	8000632 <__aeabi_fadd+0xee>
 80006e2:	2001      	movs	r0, #1
 80006e4:	0172      	lsls	r2, r6, #5
 80006e6:	d57c      	bpl.n	80007e2 <__aeabi_fadd+0x29e>
 80006e8:	b2c0      	uxtb	r0, r0
 80006ea:	01b2      	lsls	r2, r6, #6
 80006ec:	0a52      	lsrs	r2, r2, #9
 80006ee:	e7a8      	b.n	8000642 <__aeabi_fadd+0xfe>
 80006f0:	0773      	lsls	r3, r6, #29
 80006f2:	d003      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4033      	ands	r3, r6
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d19a      	bne.n	8000632 <__aeabi_fadd+0xee>
 80006fc:	002b      	movs	r3, r5
 80006fe:	e767      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d023      	beq.n	800074c <__aeabi_fadd+0x208>
 8000704:	1b53      	subs	r3, r2, r5
 8000706:	2d00      	cmp	r5, #0
 8000708:	d17b      	bne.n	8000802 <__aeabi_fadd+0x2be>
 800070a:	2e00      	cmp	r6, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e086      	b.n	800081e <__aeabi_fadd+0x2da>
 8000710:	1e5d      	subs	r5, r3, #1
 8000712:	2b01      	cmp	r3, #1
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x1d4>
 8000716:	e08b      	b.n	8000830 <__aeabi_fadd+0x2ec>
 8000718:	2bff      	cmp	r3, #255	@ 0xff
 800071a:	d002      	beq.n	8000722 <__aeabi_fadd+0x1de>
 800071c:	002b      	movs	r3, r5
 800071e:	e075      	b.n	800080c <__aeabi_fadd+0x2c8>
 8000720:	464c      	mov	r4, r9
 8000722:	4667      	mov	r7, ip
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x1e6>
 8000728:	e789      	b.n	800063e <__aeabi_fadd+0xfa>
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	03d2      	lsls	r2, r2, #15
 800072e:	433a      	orrs	r2, r7
 8000730:	0252      	lsls	r2, r2, #9
 8000732:	20ff      	movs	r0, #255	@ 0xff
 8000734:	0a52      	lsrs	r2, r2, #9
 8000736:	e784      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000738:	1a77      	subs	r7, r6, r1
 800073a:	017b      	lsls	r3, r7, #5
 800073c:	d46b      	bmi.n	8000816 <__aeabi_fadd+0x2d2>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x200>
 8000742:	e765      	b.n	8000610 <__aeabi_fadd+0xcc>
 8000744:	2400      	movs	r4, #0
 8000746:	2000      	movs	r0, #0
 8000748:	2200      	movs	r2, #0
 800074a:	e77a      	b.n	8000642 <__aeabi_fadd+0xfe>
 800074c:	22fe      	movs	r2, #254	@ 0xfe
 800074e:	1c6b      	adds	r3, r5, #1
 8000750:	421a      	tst	r2, r3
 8000752:	d149      	bne.n	80007e8 <__aeabi_fadd+0x2a4>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0x216>
 8000758:	e09f      	b.n	800089a <__aeabi_fadd+0x356>
 800075a:	2e00      	cmp	r6, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x21c>
 800075e:	e0ba      	b.n	80008d6 <__aeabi_fadd+0x392>
 8000760:	2900      	cmp	r1, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x222>
 8000764:	e0cf      	b.n	8000906 <__aeabi_fadd+0x3c2>
 8000766:	1872      	adds	r2, r6, r1
 8000768:	0153      	lsls	r3, r2, #5
 800076a:	d400      	bmi.n	800076e <__aeabi_fadd+0x22a>
 800076c:	e0cd      	b.n	800090a <__aeabi_fadd+0x3c6>
 800076e:	0192      	lsls	r2, r2, #6
 8000770:	2001      	movs	r0, #1
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e765      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000776:	2aff      	cmp	r2, #255	@ 0xff
 8000778:	d0d2      	beq.n	8000720 <__aeabi_fadd+0x1dc>
 800077a:	2080      	movs	r0, #128	@ 0x80
 800077c:	04c0      	lsls	r0, r0, #19
 800077e:	4306      	orrs	r6, r0
 8000780:	2001      	movs	r0, #1
 8000782:	2b1b      	cmp	r3, #27
 8000784:	dc08      	bgt.n	8000798 <__aeabi_fadd+0x254>
 8000786:	0030      	movs	r0, r6
 8000788:	2420      	movs	r4, #32
 800078a:	40d8      	lsrs	r0, r3
 800078c:	1ae3      	subs	r3, r4, r3
 800078e:	409e      	lsls	r6, r3
 8000790:	0033      	movs	r3, r6
 8000792:	1e5c      	subs	r4, r3, #1
 8000794:	41a3      	sbcs	r3, r4
 8000796:	4318      	orrs	r0, r3
 8000798:	464c      	mov	r4, r9
 800079a:	0015      	movs	r5, r2
 800079c:	1a0e      	subs	r6, r1, r0
 800079e:	e732      	b.n	8000606 <__aeabi_fadd+0xc2>
 80007a0:	0008      	movs	r0, r1
 80007a2:	2220      	movs	r2, #32
 80007a4:	40d8      	lsrs	r0, r3
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4099      	lsls	r1, r3
 80007aa:	000b      	movs	r3, r1
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	4193      	sbcs	r3, r2
 80007b0:	4303      	orrs	r3, r0
 80007b2:	18f6      	adds	r6, r6, r3
 80007b4:	0173      	lsls	r3, r6, #5
 80007b6:	d59b      	bpl.n	80006f0 <__aeabi_fadd+0x1ac>
 80007b8:	3501      	adds	r5, #1
 80007ba:	2dff      	cmp	r5, #255	@ 0xff
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x27c>
 80007be:	e73e      	b.n	800063e <__aeabi_fadd+0xfa>
 80007c0:	2301      	movs	r3, #1
 80007c2:	494d      	ldr	r1, [pc, #308]	@ (80008f8 <__aeabi_fadd+0x3b4>)
 80007c4:	0872      	lsrs	r2, r6, #1
 80007c6:	4033      	ands	r3, r6
 80007c8:	400a      	ands	r2, r1
 80007ca:	431a      	orrs	r2, r3
 80007cc:	0016      	movs	r6, r2
 80007ce:	0753      	lsls	r3, r2, #29
 80007d0:	d004      	beq.n	80007dc <__aeabi_fadd+0x298>
 80007d2:	230f      	movs	r3, #15
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x298>
 80007da:	e72a      	b.n	8000632 <__aeabi_fadd+0xee>
 80007dc:	0173      	lsls	r3, r6, #5
 80007de:	d500      	bpl.n	80007e2 <__aeabi_fadd+0x29e>
 80007e0:	e72a      	b.n	8000638 <__aeabi_fadd+0xf4>
 80007e2:	002b      	movs	r3, r5
 80007e4:	08f7      	lsrs	r7, r6, #3
 80007e6:	e6f7      	b.n	80005d8 <__aeabi_fadd+0x94>
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2aa>
 80007ec:	e727      	b.n	800063e <__aeabi_fadd+0xfa>
 80007ee:	1871      	adds	r1, r6, r1
 80007f0:	0849      	lsrs	r1, r1, #1
 80007f2:	074a      	lsls	r2, r1, #29
 80007f4:	d02f      	beq.n	8000856 <__aeabi_fadd+0x312>
 80007f6:	220f      	movs	r2, #15
 80007f8:	400a      	ands	r2, r1
 80007fa:	2a04      	cmp	r2, #4
 80007fc:	d02b      	beq.n	8000856 <__aeabi_fadd+0x312>
 80007fe:	1d0e      	adds	r6, r1, #4
 8000800:	e6e6      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000802:	2aff      	cmp	r2, #255	@ 0xff
 8000804:	d08d      	beq.n	8000722 <__aeabi_fadd+0x1de>
 8000806:	2080      	movs	r0, #128	@ 0x80
 8000808:	04c0      	lsls	r0, r0, #19
 800080a:	4306      	orrs	r6, r0
 800080c:	2b1b      	cmp	r3, #27
 800080e:	dd24      	ble.n	800085a <__aeabi_fadd+0x316>
 8000810:	0013      	movs	r3, r2
 8000812:	1d4e      	adds	r6, r1, #5
 8000814:	e6dc      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000816:	464c      	mov	r4, r9
 8000818:	1b8f      	subs	r7, r1, r6
 800081a:	e6f9      	b.n	8000610 <__aeabi_fadd+0xcc>
 800081c:	464c      	mov	r4, r9
 800081e:	000e      	movs	r6, r1
 8000820:	e6d6      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d149      	bne.n	80008ba <__aeabi_fadd+0x376>
 8000826:	2900      	cmp	r1, #0
 8000828:	d068      	beq.n	80008fc <__aeabi_fadd+0x3b8>
 800082a:	4667      	mov	r7, ip
 800082c:	464c      	mov	r4, r9
 800082e:	e77c      	b.n	800072a <__aeabi_fadd+0x1e6>
 8000830:	1870      	adds	r0, r6, r1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d574      	bpl.n	8000920 <__aeabi_fadd+0x3dc>
 8000836:	4930      	ldr	r1, [pc, #192]	@ (80008f8 <__aeabi_fadd+0x3b4>)
 8000838:	0840      	lsrs	r0, r0, #1
 800083a:	4001      	ands	r1, r0
 800083c:	0743      	lsls	r3, r0, #29
 800083e:	d009      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000840:	230f      	movs	r3, #15
 8000842:	4003      	ands	r3, r0
 8000844:	2b04      	cmp	r3, #4
 8000846:	d005      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000848:	2302      	movs	r3, #2
 800084a:	1d0e      	adds	r6, r1, #4
 800084c:	e6c0      	b.n	80005d0 <__aeabi_fadd+0x8c>
 800084e:	2301      	movs	r3, #1
 8000850:	08cf      	lsrs	r7, r1, #3
 8000852:	e6c1      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000854:	2302      	movs	r3, #2
 8000856:	08cf      	lsrs	r7, r1, #3
 8000858:	e6be      	b.n	80005d8 <__aeabi_fadd+0x94>
 800085a:	2520      	movs	r5, #32
 800085c:	0030      	movs	r0, r6
 800085e:	40d8      	lsrs	r0, r3
 8000860:	1aeb      	subs	r3, r5, r3
 8000862:	409e      	lsls	r6, r3
 8000864:	0033      	movs	r3, r6
 8000866:	1e5d      	subs	r5, r3, #1
 8000868:	41ab      	sbcs	r3, r5
 800086a:	4303      	orrs	r3, r0
 800086c:	0015      	movs	r5, r2
 800086e:	185e      	adds	r6, r3, r1
 8000870:	e7a0      	b.n	80007b4 <__aeabi_fadd+0x270>
 8000872:	2900      	cmp	r1, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x334>
 8000876:	e765      	b.n	8000744 <__aeabi_fadd+0x200>
 8000878:	464c      	mov	r4, r9
 800087a:	4667      	mov	r7, ip
 800087c:	e6ac      	b.n	80005d8 <__aeabi_fadd+0x94>
 800087e:	1b8f      	subs	r7, r1, r6
 8000880:	017b      	lsls	r3, r7, #5
 8000882:	d52e      	bpl.n	80008e2 <__aeabi_fadd+0x39e>
 8000884:	01bf      	lsls	r7, r7, #6
 8000886:	09bf      	lsrs	r7, r7, #6
 8000888:	0038      	movs	r0, r7
 800088a:	f002 fef9 	bl	8003680 <__clzsi2>
 800088e:	003b      	movs	r3, r7
 8000890:	3805      	subs	r0, #5
 8000892:	4083      	lsls	r3, r0
 8000894:	464c      	mov	r4, r9
 8000896:	3501      	adds	r5, #1
 8000898:	e710      	b.n	80006bc <__aeabi_fadd+0x178>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x35c>
 800089e:	e740      	b.n	8000722 <__aeabi_fadd+0x1de>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fadd+0x362>
 80008a4:	e741      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	03db      	lsls	r3, r3, #15
 80008aa:	429f      	cmp	r7, r3
 80008ac:	d200      	bcs.n	80008b0 <__aeabi_fadd+0x36c>
 80008ae:	e73c      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	d300      	bcc.n	80008b6 <__aeabi_fadd+0x372>
 80008b4:	e739      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008b6:	4667      	mov	r7, ip
 80008b8:	e737      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x37c>
 80008be:	e734      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	03db      	lsls	r3, r3, #15
 80008c4:	429f      	cmp	r7, r3
 80008c6:	d200      	bcs.n	80008ca <__aeabi_fadd+0x386>
 80008c8:	e72f      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008ca:	459c      	cmp	ip, r3
 80008cc:	d300      	bcc.n	80008d0 <__aeabi_fadd+0x38c>
 80008ce:	e72c      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008d0:	464c      	mov	r4, r9
 80008d2:	4667      	mov	r7, ip
 80008d4:	e729      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x398>
 80008da:	e734      	b.n	8000746 <__aeabi_fadd+0x202>
 80008dc:	2300      	movs	r3, #0
 80008de:	08cf      	lsrs	r7, r1, #3
 80008e0:	e67a      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008e2:	464c      	mov	r4, r9
 80008e4:	2301      	movs	r3, #1
 80008e6:	08ff      	lsrs	r7, r7, #3
 80008e8:	e676      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x3ac>
 80008ee:	e729      	b.n	8000744 <__aeabi_fadd+0x200>
 80008f0:	08ff      	lsrs	r7, r7, #3
 80008f2:	e671      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008f4:	fbffffff 	.word	0xfbffffff
 80008f8:	7dffffff 	.word	0x7dffffff
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	2400      	movs	r4, #0
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	e69d      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000906:	2300      	movs	r3, #0
 8000908:	e666      	b.n	80005d8 <__aeabi_fadd+0x94>
 800090a:	2300      	movs	r3, #0
 800090c:	08d7      	lsrs	r7, r2, #3
 800090e:	e663      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000910:	2001      	movs	r0, #1
 8000912:	0172      	lsls	r2, r6, #5
 8000914:	d500      	bpl.n	8000918 <__aeabi_fadd+0x3d4>
 8000916:	e6e7      	b.n	80006e8 <__aeabi_fadd+0x1a4>
 8000918:	0031      	movs	r1, r6
 800091a:	2300      	movs	r3, #0
 800091c:	08cf      	lsrs	r7, r1, #3
 800091e:	e65b      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000920:	2301      	movs	r3, #1
 8000922:	08c7      	lsrs	r7, r0, #3
 8000924:	e658      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000926:	46c0      	nop			@ (mov r8, r8)

08000928 <__aeabi_fdiv>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	4646      	mov	r6, r8
 800092c:	464f      	mov	r7, r9
 800092e:	46d6      	mov	lr, sl
 8000930:	0245      	lsls	r5, r0, #9
 8000932:	b5c0      	push	{r6, r7, lr}
 8000934:	0fc3      	lsrs	r3, r0, #31
 8000936:	0047      	lsls	r7, r0, #1
 8000938:	4698      	mov	r8, r3
 800093a:	1c0e      	adds	r6, r1, #0
 800093c:	0a6d      	lsrs	r5, r5, #9
 800093e:	0e3f      	lsrs	r7, r7, #24
 8000940:	d05b      	beq.n	80009fa <__aeabi_fdiv+0xd2>
 8000942:	2fff      	cmp	r7, #255	@ 0xff
 8000944:	d021      	beq.n	800098a <__aeabi_fdiv+0x62>
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	00ed      	lsls	r5, r5, #3
 800094a:	04db      	lsls	r3, r3, #19
 800094c:	431d      	orrs	r5, r3
 800094e:	2300      	movs	r3, #0
 8000950:	4699      	mov	r9, r3
 8000952:	469a      	mov	sl, r3
 8000954:	3f7f      	subs	r7, #127	@ 0x7f
 8000956:	0274      	lsls	r4, r6, #9
 8000958:	0073      	lsls	r3, r6, #1
 800095a:	0a64      	lsrs	r4, r4, #9
 800095c:	0e1b      	lsrs	r3, r3, #24
 800095e:	0ff6      	lsrs	r6, r6, #31
 8000960:	2b00      	cmp	r3, #0
 8000962:	d020      	beq.n	80009a6 <__aeabi_fdiv+0x7e>
 8000964:	2bff      	cmp	r3, #255	@ 0xff
 8000966:	d043      	beq.n	80009f0 <__aeabi_fdiv+0xc8>
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	2000      	movs	r0, #0
 800096c:	00e4      	lsls	r4, r4, #3
 800096e:	04d2      	lsls	r2, r2, #19
 8000970:	4314      	orrs	r4, r2
 8000972:	3b7f      	subs	r3, #127	@ 0x7f
 8000974:	4642      	mov	r2, r8
 8000976:	1aff      	subs	r7, r7, r3
 8000978:	464b      	mov	r3, r9
 800097a:	4072      	eors	r2, r6
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d900      	bls.n	8000982 <__aeabi_fdiv+0x5a>
 8000980:	e09d      	b.n	8000abe <__aeabi_fdiv+0x196>
 8000982:	4971      	ldr	r1, [pc, #452]	@ (8000b48 <__aeabi_fdiv+0x220>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	58cb      	ldr	r3, [r1, r3]
 8000988:	469f      	mov	pc, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d15a      	bne.n	8000a44 <__aeabi_fdiv+0x11c>
 800098e:	2308      	movs	r3, #8
 8000990:	4699      	mov	r9, r3
 8000992:	3b06      	subs	r3, #6
 8000994:	0274      	lsls	r4, r6, #9
 8000996:	469a      	mov	sl, r3
 8000998:	0073      	lsls	r3, r6, #1
 800099a:	27ff      	movs	r7, #255	@ 0xff
 800099c:	0a64      	lsrs	r4, r4, #9
 800099e:	0e1b      	lsrs	r3, r3, #24
 80009a0:	0ff6      	lsrs	r6, r6, #31
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1de      	bne.n	8000964 <__aeabi_fdiv+0x3c>
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d13b      	bne.n	8000a22 <__aeabi_fdiv+0xfa>
 80009aa:	2301      	movs	r3, #1
 80009ac:	4642      	mov	r2, r8
 80009ae:	4649      	mov	r1, r9
 80009b0:	4072      	eors	r2, r6
 80009b2:	4319      	orrs	r1, r3
 80009b4:	290e      	cmp	r1, #14
 80009b6:	d818      	bhi.n	80009ea <__aeabi_fdiv+0xc2>
 80009b8:	4864      	ldr	r0, [pc, #400]	@ (8000b4c <__aeabi_fdiv+0x224>)
 80009ba:	0089      	lsls	r1, r1, #2
 80009bc:	5841      	ldr	r1, [r0, r1]
 80009be:	468f      	mov	pc, r1
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fdiv+0xa0>
 80009c6:	e0b8      	b.n	8000b3a <__aeabi_fdiv+0x212>
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d06e      	beq.n	8000aaa <__aeabi_fdiv+0x182>
 80009cc:	4642      	mov	r2, r8
 80009ce:	002c      	movs	r4, r5
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d140      	bne.n	8000a56 <__aeabi_fdiv+0x12e>
 80009d4:	2000      	movs	r0, #0
 80009d6:	2400      	movs	r4, #0
 80009d8:	05c0      	lsls	r0, r0, #23
 80009da:	4320      	orrs	r0, r4
 80009dc:	07d2      	lsls	r2, r2, #31
 80009de:	4310      	orrs	r0, r2
 80009e0:	bce0      	pop	{r5, r6, r7}
 80009e2:	46ba      	mov	sl, r7
 80009e4:	46b1      	mov	r9, r6
 80009e6:	46a8      	mov	r8, r5
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	20ff      	movs	r0, #255	@ 0xff
 80009ec:	2400      	movs	r4, #0
 80009ee:	e7f3      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d120      	bne.n	8000a36 <__aeabi_fdiv+0x10e>
 80009f4:	2302      	movs	r3, #2
 80009f6:	3fff      	subs	r7, #255	@ 0xff
 80009f8:	e7d8      	b.n	80009ac <__aeabi_fdiv+0x84>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d105      	bne.n	8000a0a <__aeabi_fdiv+0xe2>
 80009fe:	2304      	movs	r3, #4
 8000a00:	4699      	mov	r9, r3
 8000a02:	3b03      	subs	r3, #3
 8000a04:	2700      	movs	r7, #0
 8000a06:	469a      	mov	sl, r3
 8000a08:	e7a5      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a0a:	0028      	movs	r0, r5
 8000a0c:	f002 fe38 	bl	8003680 <__clzsi2>
 8000a10:	2776      	movs	r7, #118	@ 0x76
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	409d      	lsls	r5, r3
 8000a16:	2300      	movs	r3, #0
 8000a18:	427f      	negs	r7, r7
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	1a3f      	subs	r7, r7, r0
 8000a20:	e799      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a22:	0020      	movs	r0, r4
 8000a24:	f002 fe2c 	bl	8003680 <__clzsi2>
 8000a28:	1f43      	subs	r3, r0, #5
 8000a2a:	409c      	lsls	r4, r3
 8000a2c:	2376      	movs	r3, #118	@ 0x76
 8000a2e:	425b      	negs	r3, r3
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	2000      	movs	r0, #0
 8000a34:	e79e      	b.n	8000974 <__aeabi_fdiv+0x4c>
 8000a36:	2303      	movs	r3, #3
 8000a38:	464a      	mov	r2, r9
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	4691      	mov	r9, r2
 8000a3e:	2003      	movs	r0, #3
 8000a40:	33fc      	adds	r3, #252	@ 0xfc
 8000a42:	e797      	b.n	8000974 <__aeabi_fdiv+0x4c>
 8000a44:	230c      	movs	r3, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	27ff      	movs	r7, #255	@ 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e782      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a50:	2803      	cmp	r0, #3
 8000a52:	d02c      	beq.n	8000aae <__aeabi_fdiv+0x186>
 8000a54:	0032      	movs	r2, r6
 8000a56:	0038      	movs	r0, r7
 8000a58:	307f      	adds	r0, #127	@ 0x7f
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	dd47      	ble.n	8000aee <__aeabi_fdiv+0x1c6>
 8000a5e:	0763      	lsls	r3, r4, #29
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fdiv+0x144>
 8000a62:	230f      	movs	r3, #15
 8000a64:	4023      	ands	r3, r4
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fdiv+0x144>
 8000a6a:	3404      	adds	r4, #4
 8000a6c:	0123      	lsls	r3, r4, #4
 8000a6e:	d503      	bpl.n	8000a78 <__aeabi_fdiv+0x150>
 8000a70:	0038      	movs	r0, r7
 8000a72:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <__aeabi_fdiv+0x228>)
 8000a74:	3080      	adds	r0, #128	@ 0x80
 8000a76:	401c      	ands	r4, r3
 8000a78:	28fe      	cmp	r0, #254	@ 0xfe
 8000a7a:	dcb6      	bgt.n	80009ea <__aeabi_fdiv+0xc2>
 8000a7c:	01a4      	lsls	r4, r4, #6
 8000a7e:	0a64      	lsrs	r4, r4, #9
 8000a80:	b2c0      	uxtb	r0, r0
 8000a82:	e7a9      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000a84:	2480      	movs	r4, #128	@ 0x80
 8000a86:	2200      	movs	r2, #0
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	03e4      	lsls	r4, r4, #15
 8000a8c:	e7a4      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	03db      	lsls	r3, r3, #15
 8000a92:	421d      	tst	r5, r3
 8000a94:	d001      	beq.n	8000a9a <__aeabi_fdiv+0x172>
 8000a96:	421c      	tst	r4, r3
 8000a98:	d00b      	beq.n	8000ab2 <__aeabi_fdiv+0x18a>
 8000a9a:	2480      	movs	r4, #128	@ 0x80
 8000a9c:	03e4      	lsls	r4, r4, #15
 8000a9e:	432c      	orrs	r4, r5
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	e796      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000aaa:	4646      	mov	r6, r8
 8000aac:	002c      	movs	r4, r5
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	0264      	lsls	r4, r4, #9
 8000ab6:	0032      	movs	r2, r6
 8000ab8:	20ff      	movs	r0, #255	@ 0xff
 8000aba:	0a64      	lsrs	r4, r4, #9
 8000abc:	e78c      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000abe:	016d      	lsls	r5, r5, #5
 8000ac0:	0160      	lsls	r0, r4, #5
 8000ac2:	4285      	cmp	r5, r0
 8000ac4:	d22d      	bcs.n	8000b22 <__aeabi_fdiv+0x1fa>
 8000ac6:	231b      	movs	r3, #27
 8000ac8:	2400      	movs	r4, #0
 8000aca:	3f01      	subs	r7, #1
 8000acc:	2601      	movs	r6, #1
 8000ace:	0029      	movs	r1, r5
 8000ad0:	0064      	lsls	r4, r4, #1
 8000ad2:	006d      	lsls	r5, r5, #1
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	db01      	blt.n	8000adc <__aeabi_fdiv+0x1b4>
 8000ad8:	4285      	cmp	r5, r0
 8000ada:	d301      	bcc.n	8000ae0 <__aeabi_fdiv+0x1b8>
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	4334      	orrs	r4, r6
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f3      	bne.n	8000ace <__aeabi_fdiv+0x1a6>
 8000ae6:	1e6b      	subs	r3, r5, #1
 8000ae8:	419d      	sbcs	r5, r3
 8000aea:	432c      	orrs	r4, r5
 8000aec:	e7b3      	b.n	8000a56 <__aeabi_fdiv+0x12e>
 8000aee:	2301      	movs	r3, #1
 8000af0:	1a1b      	subs	r3, r3, r0
 8000af2:	2b1b      	cmp	r3, #27
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_fdiv+0x1d0>
 8000af6:	e76d      	b.n	80009d4 <__aeabi_fdiv+0xac>
 8000af8:	0021      	movs	r1, r4
 8000afa:	379e      	adds	r7, #158	@ 0x9e
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	40bc      	lsls	r4, r7
 8000b00:	000b      	movs	r3, r1
 8000b02:	1e61      	subs	r1, r4, #1
 8000b04:	418c      	sbcs	r4, r1
 8000b06:	4323      	orrs	r3, r4
 8000b08:	0759      	lsls	r1, r3, #29
 8000b0a:	d004      	beq.n	8000b16 <__aeabi_fdiv+0x1ee>
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	4019      	ands	r1, r3
 8000b10:	2904      	cmp	r1, #4
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fdiv+0x1ee>
 8000b14:	3304      	adds	r3, #4
 8000b16:	0159      	lsls	r1, r3, #5
 8000b18:	d413      	bmi.n	8000b42 <__aeabi_fdiv+0x21a>
 8000b1a:	019b      	lsls	r3, r3, #6
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	0a5c      	lsrs	r4, r3, #9
 8000b20:	e75a      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b22:	231a      	movs	r3, #26
 8000b24:	2401      	movs	r4, #1
 8000b26:	1a2d      	subs	r5, r5, r0
 8000b28:	e7d0      	b.n	8000acc <__aeabi_fdiv+0x1a4>
 8000b2a:	1e98      	subs	r0, r3, #2
 8000b2c:	4243      	negs	r3, r0
 8000b2e:	4158      	adcs	r0, r3
 8000b30:	4240      	negs	r0, r0
 8000b32:	0032      	movs	r2, r6
 8000b34:	2400      	movs	r4, #0
 8000b36:	b2c0      	uxtb	r0, r0
 8000b38:	e74e      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	20ff      	movs	r0, #255	@ 0xff
 8000b3e:	2400      	movs	r4, #0
 8000b40:	e74a      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b42:	2001      	movs	r0, #1
 8000b44:	2400      	movs	r4, #0
 8000b46:	e747      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b48:	0800e774 	.word	0x0800e774
 8000b4c:	0800e7b4 	.word	0x0800e7b4
 8000b50:	f7ffffff 	.word	0xf7ffffff

08000b54 <__eqsf2>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	0042      	lsls	r2, r0, #1
 8000b58:	024e      	lsls	r6, r1, #9
 8000b5a:	004c      	lsls	r4, r1, #1
 8000b5c:	0245      	lsls	r5, r0, #9
 8000b5e:	0a6d      	lsrs	r5, r5, #9
 8000b60:	0e12      	lsrs	r2, r2, #24
 8000b62:	0fc3      	lsrs	r3, r0, #31
 8000b64:	0a76      	lsrs	r6, r6, #9
 8000b66:	0e24      	lsrs	r4, r4, #24
 8000b68:	0fc9      	lsrs	r1, r1, #31
 8000b6a:	2aff      	cmp	r2, #255	@ 0xff
 8000b6c:	d010      	beq.n	8000b90 <__eqsf2+0x3c>
 8000b6e:	2cff      	cmp	r4, #255	@ 0xff
 8000b70:	d00c      	beq.n	8000b8c <__eqsf2+0x38>
 8000b72:	2001      	movs	r0, #1
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	d10a      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b78:	42b5      	cmp	r5, r6
 8000b7a:	d108      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d00f      	beq.n	8000ba0 <__eqsf2+0x4c>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d104      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b84:	0028      	movs	r0, r5
 8000b86:	1e43      	subs	r3, r0, #1
 8000b88:	4198      	sbcs	r0, r3
 8000b8a:	e000      	b.n	8000b8e <__eqsf2+0x3a>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	2001      	movs	r0, #1
 8000b92:	2cff      	cmp	r4, #255	@ 0xff
 8000b94:	d1fb      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b96:	4335      	orrs	r5, r6
 8000b98:	d1f9      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b9a:	404b      	eors	r3, r1
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	e7f6      	b.n	8000b8e <__eqsf2+0x3a>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7f4      	b.n	8000b8e <__eqsf2+0x3a>

08000ba4 <__gesf2>:
 8000ba4:	b530      	push	{r4, r5, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0244      	lsls	r4, r0, #9
 8000baa:	024d      	lsls	r5, r1, #9
 8000bac:	0fc3      	lsrs	r3, r0, #31
 8000bae:	0048      	lsls	r0, r1, #1
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	0e12      	lsrs	r2, r2, #24
 8000bb4:	0a6d      	lsrs	r5, r5, #9
 8000bb6:	0e00      	lsrs	r0, r0, #24
 8000bb8:	0fc9      	lsrs	r1, r1, #31
 8000bba:	2aff      	cmp	r2, #255	@ 0xff
 8000bbc:	d018      	beq.n	8000bf0 <__gesf2+0x4c>
 8000bbe:	28ff      	cmp	r0, #255	@ 0xff
 8000bc0:	d00a      	beq.n	8000bd8 <__gesf2+0x34>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d11e      	bne.n	8000c04 <__gesf2+0x60>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d10a      	bne.n	8000be0 <__gesf2+0x3c>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d029      	beq.n	8000c22 <__gesf2+0x7e>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d12d      	bne.n	8000c2e <__gesf2+0x8a>
 8000bd2:	0048      	lsls	r0, r1, #1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	bd30      	pop	{r4, r5, pc}
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d125      	bne.n	8000c28 <__gesf2+0x84>
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d101      	bne.n	8000be4 <__gesf2+0x40>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d0f6      	beq.n	8000bd2 <__gesf2+0x2e>
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d019      	beq.n	8000c1c <__gesf2+0x78>
 8000be8:	2001      	movs	r0, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	4318      	orrs	r0, r3
 8000bee:	e7f2      	b.n	8000bd6 <__gesf2+0x32>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d119      	bne.n	8000c28 <__gesf2+0x84>
 8000bf4:	28ff      	cmp	r0, #255	@ 0xff
 8000bf6:	d1f7      	bne.n	8000be8 <__gesf2+0x44>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d115      	bne.n	8000c28 <__gesf2+0x84>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d1f2      	bne.n	8000be8 <__gesf2+0x44>
 8000c02:	e7e8      	b.n	8000bd6 <__gesf2+0x32>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d0ef      	beq.n	8000be8 <__gesf2+0x44>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d1ed      	bne.n	8000be8 <__gesf2+0x44>
 8000c0c:	4282      	cmp	r2, r0
 8000c0e:	dceb      	bgt.n	8000be8 <__gesf2+0x44>
 8000c10:	db04      	blt.n	8000c1c <__gesf2+0x78>
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	d8e8      	bhi.n	8000be8 <__gesf2+0x44>
 8000c16:	2000      	movs	r0, #0
 8000c18:	42ac      	cmp	r4, r5
 8000c1a:	d2dc      	bcs.n	8000bd6 <__gesf2+0x32>
 8000c1c:	0058      	lsls	r0, r3, #1
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7d9      	b.n	8000bd6 <__gesf2+0x32>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d0d7      	beq.n	8000bd6 <__gesf2+0x32>
 8000c26:	e7df      	b.n	8000be8 <__gesf2+0x44>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	e7d3      	b.n	8000bd6 <__gesf2+0x32>
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d1da      	bne.n	8000be8 <__gesf2+0x44>
 8000c32:	e7ee      	b.n	8000c12 <__gesf2+0x6e>

08000c34 <__lesf2>:
 8000c34:	b530      	push	{r4, r5, lr}
 8000c36:	0042      	lsls	r2, r0, #1
 8000c38:	0244      	lsls	r4, r0, #9
 8000c3a:	024d      	lsls	r5, r1, #9
 8000c3c:	0fc3      	lsrs	r3, r0, #31
 8000c3e:	0048      	lsls	r0, r1, #1
 8000c40:	0a64      	lsrs	r4, r4, #9
 8000c42:	0e12      	lsrs	r2, r2, #24
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	0e00      	lsrs	r0, r0, #24
 8000c48:	0fc9      	lsrs	r1, r1, #31
 8000c4a:	2aff      	cmp	r2, #255	@ 0xff
 8000c4c:	d017      	beq.n	8000c7e <__lesf2+0x4a>
 8000c4e:	28ff      	cmp	r0, #255	@ 0xff
 8000c50:	d00a      	beq.n	8000c68 <__lesf2+0x34>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d11b      	bne.n	8000c8e <__lesf2+0x5a>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d10a      	bne.n	8000c70 <__lesf2+0x3c>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d01d      	beq.n	8000c9a <__lesf2+0x66>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d12d      	bne.n	8000cbe <__lesf2+0x8a>
 8000c62:	0048      	lsls	r0, r1, #1
 8000c64:	3801      	subs	r0, #1
 8000c66:	e011      	b.n	8000c8c <__lesf2+0x58>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d10e      	bne.n	8000c8a <__lesf2+0x56>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d101      	bne.n	8000c74 <__lesf2+0x40>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d0f6      	beq.n	8000c62 <__lesf2+0x2e>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d10c      	bne.n	8000c92 <__lesf2+0x5e>
 8000c78:	0058      	lsls	r0, r3, #1
 8000c7a:	3801      	subs	r0, #1
 8000c7c:	e006      	b.n	8000c8c <__lesf2+0x58>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d103      	bne.n	8000c8a <__lesf2+0x56>
 8000c82:	28ff      	cmp	r0, #255	@ 0xff
 8000c84:	d105      	bne.n	8000c92 <__lesf2+0x5e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d015      	beq.n	8000cb6 <__lesf2+0x82>
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	bd30      	pop	{r4, r5, pc}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d106      	bne.n	8000ca0 <__lesf2+0x6c>
 8000c92:	2001      	movs	r0, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	4318      	orrs	r0, r3
 8000c98:	e7f8      	b.n	8000c8c <__lesf2+0x58>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d0f6      	beq.n	8000c8c <__lesf2+0x58>
 8000c9e:	e7f8      	b.n	8000c92 <__lesf2+0x5e>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d1f6      	bne.n	8000c92 <__lesf2+0x5e>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	dcf4      	bgt.n	8000c92 <__lesf2+0x5e>
 8000ca8:	dbe6      	blt.n	8000c78 <__lesf2+0x44>
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	d8f1      	bhi.n	8000c92 <__lesf2+0x5e>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	42ac      	cmp	r4, r5
 8000cb2:	d2eb      	bcs.n	8000c8c <__lesf2+0x58>
 8000cb4:	e7e0      	b.n	8000c78 <__lesf2+0x44>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d1ea      	bne.n	8000c92 <__lesf2+0x5e>
 8000cbc:	e7e6      	b.n	8000c8c <__lesf2+0x58>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d1e7      	bne.n	8000c92 <__lesf2+0x5e>
 8000cc2:	e7f2      	b.n	8000caa <__lesf2+0x76>

08000cc4 <__aeabi_fmul>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	4646      	mov	r6, r8
 8000cca:	46d6      	mov	lr, sl
 8000ccc:	0044      	lsls	r4, r0, #1
 8000cce:	b5c0      	push	{r6, r7, lr}
 8000cd0:	0246      	lsls	r6, r0, #9
 8000cd2:	1c0f      	adds	r7, r1, #0
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc5      	lsrs	r5, r0, #31
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fmul+0x1c>
 8000cde:	e0da      	b.n	8000e96 <__aeabi_fmul+0x1d2>
 8000ce0:	2cff      	cmp	r4, #255	@ 0xff
 8000ce2:	d074      	beq.n	8000dce <__aeabi_fmul+0x10a>
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	00f6      	lsls	r6, r6, #3
 8000ce8:	04db      	lsls	r3, r3, #19
 8000cea:	431e      	orrs	r6, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	4699      	mov	r9, r3
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	3c7f      	subs	r4, #127	@ 0x7f
 8000cf4:	027b      	lsls	r3, r7, #9
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	007b      	lsls	r3, r7, #1
 8000cfc:	0e1b      	lsrs	r3, r3, #24
 8000cfe:	0fff      	lsrs	r7, r7, #31
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d074      	beq.n	8000dee <__aeabi_fmul+0x12a>
 8000d04:	2bff      	cmp	r3, #255	@ 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x46>
 8000d08:	e08e      	b.n	8000e28 <__aeabi_fmul+0x164>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	00d2      	lsls	r2, r2, #3
 8000d10:	04c9      	lsls	r1, r1, #19
 8000d12:	4311      	orrs	r1, r2
 8000d14:	3b7f      	subs	r3, #127	@ 0x7f
 8000d16:	002a      	movs	r2, r5
 8000d18:	18e4      	adds	r4, r4, r3
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	407a      	eors	r2, r7
 8000d1e:	4688      	mov	r8, r1
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	2b0a      	cmp	r3, #10
 8000d24:	dc75      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000d26:	464b      	mov	r3, r9
 8000d28:	2000      	movs	r0, #0
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dd0f      	ble.n	8000d4e <__aeabi_fmul+0x8a>
 8000d2e:	4649      	mov	r1, r9
 8000d30:	2301      	movs	r3, #1
 8000d32:	408b      	lsls	r3, r1
 8000d34:	21a6      	movs	r1, #166	@ 0xa6
 8000d36:	00c9      	lsls	r1, r1, #3
 8000d38:	420b      	tst	r3, r1
 8000d3a:	d169      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000d3c:	2190      	movs	r1, #144	@ 0x90
 8000d3e:	0089      	lsls	r1, r1, #2
 8000d40:	420b      	tst	r3, r1
 8000d42:	d000      	beq.n	8000d46 <__aeabi_fmul+0x82>
 8000d44:	e100      	b.n	8000f48 <__aeabi_fmul+0x284>
 8000d46:	2188      	movs	r1, #136	@ 0x88
 8000d48:	4219      	tst	r1, r3
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fmul+0x8a>
 8000d4c:	e0f5      	b.n	8000f3a <__aeabi_fmul+0x276>
 8000d4e:	4641      	mov	r1, r8
 8000d50:	0409      	lsls	r1, r1, #16
 8000d52:	0c09      	lsrs	r1, r1, #16
 8000d54:	4643      	mov	r3, r8
 8000d56:	0008      	movs	r0, r1
 8000d58:	0c35      	lsrs	r5, r6, #16
 8000d5a:	0436      	lsls	r6, r6, #16
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	0c36      	lsrs	r6, r6, #16
 8000d60:	4370      	muls	r0, r6
 8000d62:	4369      	muls	r1, r5
 8000d64:	435e      	muls	r6, r3
 8000d66:	435d      	muls	r5, r3
 8000d68:	1876      	adds	r6, r6, r1
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	199b      	adds	r3, r3, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d903      	bls.n	8000d7a <__aeabi_fmul+0xb6>
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	468c      	mov	ip, r1
 8000d78:	4465      	add	r5, ip
 8000d7a:	0400      	lsls	r0, r0, #16
 8000d7c:	0419      	lsls	r1, r3, #16
 8000d7e:	0c00      	lsrs	r0, r0, #16
 8000d80:	1809      	adds	r1, r1, r0
 8000d82:	018e      	lsls	r6, r1, #6
 8000d84:	1e70      	subs	r0, r6, #1
 8000d86:	4186      	sbcs	r6, r0
 8000d88:	0c1b      	lsrs	r3, r3, #16
 8000d8a:	0e89      	lsrs	r1, r1, #26
 8000d8c:	195b      	adds	r3, r3, r5
 8000d8e:	430e      	orrs	r6, r1
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	431e      	orrs	r6, r3
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	d46c      	bmi.n	8000e72 <__aeabi_fmul+0x1ae>
 8000d98:	0023      	movs	r3, r4
 8000d9a:	337f      	adds	r3, #127	@ 0x7f
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_fmul+0xde>
 8000da0:	e0b1      	b.n	8000f06 <__aeabi_fmul+0x242>
 8000da2:	0015      	movs	r5, r2
 8000da4:	0771      	lsls	r1, r6, #29
 8000da6:	d00b      	beq.n	8000dc0 <__aeabi_fmul+0xfc>
 8000da8:	200f      	movs	r0, #15
 8000daa:	0021      	movs	r1, r4
 8000dac:	4030      	ands	r0, r6
 8000dae:	2804      	cmp	r0, #4
 8000db0:	d006      	beq.n	8000dc0 <__aeabi_fmul+0xfc>
 8000db2:	3604      	adds	r6, #4
 8000db4:	0132      	lsls	r2, r6, #4
 8000db6:	d503      	bpl.n	8000dc0 <__aeabi_fmul+0xfc>
 8000db8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f74 <__aeabi_fmul+0x2b0>)
 8000dba:	401e      	ands	r6, r3
 8000dbc:	000b      	movs	r3, r1
 8000dbe:	3380      	adds	r3, #128	@ 0x80
 8000dc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_fmul+0x102>
 8000dc4:	e0bd      	b.n	8000f42 <__aeabi_fmul+0x27e>
 8000dc6:	01b2      	lsls	r2, r6, #6
 8000dc8:	0a52      	lsrs	r2, r2, #9
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	e048      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fmul+0x110>
 8000dd2:	e092      	b.n	8000efa <__aeabi_fmul+0x236>
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	3b06      	subs	r3, #6
 8000dda:	469a      	mov	sl, r3
 8000ddc:	027b      	lsls	r3, r7, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	4698      	mov	r8, r3
 8000de2:	007b      	lsls	r3, r7, #1
 8000de4:	24ff      	movs	r4, #255	@ 0xff
 8000de6:	0e1b      	lsrs	r3, r3, #24
 8000de8:	0fff      	lsrs	r7, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d18a      	bne.n	8000d04 <__aeabi_fmul+0x40>
 8000dee:	4642      	mov	r2, r8
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	d164      	bne.n	8000ebe <__aeabi_fmul+0x1fa>
 8000df4:	4649      	mov	r1, r9
 8000df6:	3201      	adds	r2, #1
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	4689      	mov	r9, r1
 8000dfc:	290a      	cmp	r1, #10
 8000dfe:	dc08      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000e00:	407d      	eors	r5, r7
 8000e02:	2001      	movs	r0, #1
 8000e04:	b2ea      	uxtb	r2, r5
 8000e06:	2902      	cmp	r1, #2
 8000e08:	dc91      	bgt.n	8000d2e <__aeabi_fmul+0x6a>
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	e027      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000e10:	0015      	movs	r5, r2
 8000e12:	4653      	mov	r3, sl
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fmul+0x156>
 8000e18:	e093      	b.n	8000f42 <__aeabi_fmul+0x27e>
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d01a      	beq.n	8000e54 <__aeabi_fmul+0x190>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d12c      	bne.n	8000e7c <__aeabi_fmul+0x1b8>
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	e01b      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000e28:	4643      	mov	r3, r8
 8000e2a:	34ff      	adds	r4, #255	@ 0xff
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d055      	beq.n	8000edc <__aeabi_fmul+0x218>
 8000e30:	2103      	movs	r1, #3
 8000e32:	464b      	mov	r3, r9
 8000e34:	430b      	orrs	r3, r1
 8000e36:	0019      	movs	r1, r3
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_fmul+0x17a>
 8000e3c:	e092      	b.n	8000f64 <__aeabi_fmul+0x2a0>
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fmul+0x180>
 8000e42:	e08c      	b.n	8000f5e <__aeabi_fmul+0x29a>
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	03d2      	lsls	r2, r2, #15
 8000e48:	4216      	tst	r6, r2
 8000e4a:	d003      	beq.n	8000e54 <__aeabi_fmul+0x190>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fmul+0x190>
 8000e52:	e07d      	b.n	8000f50 <__aeabi_fmul+0x28c>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	03d2      	lsls	r2, r2, #15
 8000e58:	4332      	orrs	r2, r6
 8000e5a:	0252      	lsls	r2, r2, #9
 8000e5c:	0a52      	lsrs	r2, r2, #9
 8000e5e:	23ff      	movs	r3, #255	@ 0xff
 8000e60:	05d8      	lsls	r0, r3, #23
 8000e62:	07ed      	lsls	r5, r5, #31
 8000e64:	4310      	orrs	r0, r2
 8000e66:	4328      	orrs	r0, r5
 8000e68:	bce0      	pop	{r5, r6, r7}
 8000e6a:	46ba      	mov	sl, r7
 8000e6c:	46b1      	mov	r9, r6
 8000e6e:	46a8      	mov	r8, r5
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	2301      	movs	r3, #1
 8000e74:	0015      	movs	r5, r2
 8000e76:	0871      	lsrs	r1, r6, #1
 8000e78:	401e      	ands	r6, r3
 8000e7a:	430e      	orrs	r6, r1
 8000e7c:	0023      	movs	r3, r4
 8000e7e:	3380      	adds	r3, #128	@ 0x80
 8000e80:	1c61      	adds	r1, r4, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dd41      	ble.n	8000f0a <__aeabi_fmul+0x246>
 8000e86:	0772      	lsls	r2, r6, #29
 8000e88:	d094      	beq.n	8000db4 <__aeabi_fmul+0xf0>
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	4032      	ands	r2, r6
 8000e8e:	2a04      	cmp	r2, #4
 8000e90:	d000      	beq.n	8000e94 <__aeabi_fmul+0x1d0>
 8000e92:	e78e      	b.n	8000db2 <__aeabi_fmul+0xee>
 8000e94:	e78e      	b.n	8000db4 <__aeabi_fmul+0xf0>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d105      	bne.n	8000ea6 <__aeabi_fmul+0x1e2>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	3b03      	subs	r3, #3
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	e726      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	f002 fbea 	bl	8003680 <__clzsi2>
 8000eac:	2476      	movs	r4, #118	@ 0x76
 8000eae:	1f43      	subs	r3, r0, #5
 8000eb0:	409e      	lsls	r6, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4264      	negs	r4, r4
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	469a      	mov	sl, r3
 8000eba:	1a24      	subs	r4, r4, r0
 8000ebc:	e71a      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	f002 fbde 	bl	8003680 <__clzsi2>
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	1a24      	subs	r4, r4, r0
 8000ec8:	3c76      	subs	r4, #118	@ 0x76
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	dca1      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	3805      	subs	r0, #5
 8000ed2:	4083      	lsls	r3, r0
 8000ed4:	407d      	eors	r5, r7
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	b2ea      	uxtb	r2, r5
 8000eda:	e724      	b.n	8000d26 <__aeabi_fmul+0x62>
 8000edc:	464a      	mov	r2, r9
 8000ede:	3302      	adds	r3, #2
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	002a      	movs	r2, r5
 8000ee4:	407a      	eors	r2, r7
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	dc92      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	0015      	movs	r5, r2
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d026      	beq.n	8000f42 <__aeabi_fmul+0x27e>
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	e719      	b.n	8000d2e <__aeabi_fmul+0x6a>
 8000efa:	230c      	movs	r3, #12
 8000efc:	4699      	mov	r9, r3
 8000efe:	3b09      	subs	r3, #9
 8000f00:	24ff      	movs	r4, #255	@ 0xff
 8000f02:	469a      	mov	sl, r3
 8000f04:	e6f6      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000f06:	0015      	movs	r5, r2
 8000f08:	0021      	movs	r1, r4
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b1b      	cmp	r3, #27
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_fmul+0x250>
 8000f12:	e786      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f14:	319e      	adds	r1, #158	@ 0x9e
 8000f16:	0032      	movs	r2, r6
 8000f18:	408e      	lsls	r6, r1
 8000f1a:	40da      	lsrs	r2, r3
 8000f1c:	1e73      	subs	r3, r6, #1
 8000f1e:	419e      	sbcs	r6, r3
 8000f20:	4332      	orrs	r2, r6
 8000f22:	0753      	lsls	r3, r2, #29
 8000f24:	d004      	beq.n	8000f30 <__aeabi_fmul+0x26c>
 8000f26:	230f      	movs	r3, #15
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fmul+0x26c>
 8000f2e:	3204      	adds	r2, #4
 8000f30:	0153      	lsls	r3, r2, #5
 8000f32:	d510      	bpl.n	8000f56 <__aeabi_fmul+0x292>
 8000f34:	2301      	movs	r3, #1
 8000f36:	2200      	movs	r2, #0
 8000f38:	e792      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f3a:	003d      	movs	r5, r7
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	4682      	mov	sl, r0
 8000f40:	e767      	b.n	8000e12 <__aeabi_fmul+0x14e>
 8000f42:	23ff      	movs	r3, #255	@ 0xff
 8000f44:	2200      	movs	r2, #0
 8000f46:	e78b      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	03d2      	lsls	r2, r2, #15
 8000f4e:	e786      	b.n	8000e5e <__aeabi_fmul+0x19a>
 8000f50:	003d      	movs	r5, r7
 8000f52:	431a      	orrs	r2, r3
 8000f54:	e783      	b.n	8000e5e <__aeabi_fmul+0x19a>
 8000f56:	0192      	lsls	r2, r2, #6
 8000f58:	2300      	movs	r3, #0
 8000f5a:	0a52      	lsrs	r2, r2, #9
 8000f5c:	e780      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f5e:	003d      	movs	r5, r7
 8000f60:	4646      	mov	r6, r8
 8000f62:	e777      	b.n	8000e54 <__aeabi_fmul+0x190>
 8000f64:	002a      	movs	r2, r5
 8000f66:	2301      	movs	r3, #1
 8000f68:	407a      	eors	r2, r7
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	e6e9      	b.n	8000d46 <__aeabi_fmul+0x82>
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	f7ffffff 	.word	0xf7ffffff

08000f78 <__aeabi_fsub>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	4647      	mov	r7, r8
 8000f7c:	46ce      	mov	lr, r9
 8000f7e:	0243      	lsls	r3, r0, #9
 8000f80:	b580      	push	{r7, lr}
 8000f82:	0a5f      	lsrs	r7, r3, #9
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	0045      	lsls	r5, r0, #1
 8000f88:	004a      	lsls	r2, r1, #1
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	024b      	lsls	r3, r1, #9
 8000f8e:	0fc4      	lsrs	r4, r0, #31
 8000f90:	0fce      	lsrs	r6, r1, #31
 8000f92:	0e2d      	lsrs	r5, r5, #24
 8000f94:	0a58      	lsrs	r0, r3, #9
 8000f96:	0e12      	lsrs	r2, r2, #24
 8000f98:	0999      	lsrs	r1, r3, #6
 8000f9a:	2aff      	cmp	r2, #255	@ 0xff
 8000f9c:	d06b      	beq.n	8001076 <__aeabi_fsub+0xfe>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	405e      	eors	r6, r3
 8000fa2:	1aab      	subs	r3, r5, r2
 8000fa4:	42b4      	cmp	r4, r6
 8000fa6:	d04b      	beq.n	8001040 <__aeabi_fsub+0xc8>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_fsub+0x36>
 8000fac:	e0ff      	b.n	80011ae <__aeabi_fsub+0x236>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x3c>
 8000fb2:	e088      	b.n	80010c6 <__aeabi_fsub+0x14e>
 8000fb4:	2dff      	cmp	r5, #255	@ 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x42>
 8000fb8:	e0ef      	b.n	800119a <__aeabi_fsub+0x222>
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	04d2      	lsls	r2, r2, #19
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	2b1b      	cmp	r3, #27
 8000fc4:	dc08      	bgt.n	8000fd8 <__aeabi_fsub+0x60>
 8000fc6:	0008      	movs	r0, r1
 8000fc8:	2220      	movs	r2, #32
 8000fca:	40d8      	lsrs	r0, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	4099      	lsls	r1, r3
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	4193      	sbcs	r3, r2
 8000fd6:	4318      	orrs	r0, r3
 8000fd8:	4663      	mov	r3, ip
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	469c      	mov	ip, r3
 8000fde:	4663      	mov	r3, ip
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	d400      	bmi.n	8000fe6 <__aeabi_fsub+0x6e>
 8000fe4:	e0cd      	b.n	8001182 <__aeabi_fsub+0x20a>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	019f      	lsls	r7, r3, #6
 8000fea:	09bf      	lsrs	r7, r7, #6
 8000fec:	0038      	movs	r0, r7
 8000fee:	f002 fb47 	bl	8003680 <__clzsi2>
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	3805      	subs	r0, #5
 8000ff6:	4083      	lsls	r3, r0
 8000ff8:	4285      	cmp	r5, r0
 8000ffa:	dc00      	bgt.n	8000ffe <__aeabi_fsub+0x86>
 8000ffc:	e0a2      	b.n	8001144 <__aeabi_fsub+0x1cc>
 8000ffe:	4ab7      	ldr	r2, [pc, #732]	@ (80012dc <__aeabi_fsub+0x364>)
 8001000:	1a2d      	subs	r5, r5, r0
 8001002:	401a      	ands	r2, r3
 8001004:	4694      	mov	ip, r2
 8001006:	075a      	lsls	r2, r3, #29
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x94>
 800100a:	e0c3      	b.n	8001194 <__aeabi_fsub+0x21c>
 800100c:	220f      	movs	r2, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x9e>
 8001014:	e0be      	b.n	8001194 <__aeabi_fsub+0x21c>
 8001016:	2304      	movs	r3, #4
 8001018:	4698      	mov	r8, r3
 800101a:	44c4      	add	ip, r8
 800101c:	4663      	mov	r3, ip
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	d400      	bmi.n	8001024 <__aeabi_fsub+0xac>
 8001022:	e0b7      	b.n	8001194 <__aeabi_fsub+0x21c>
 8001024:	1c68      	adds	r0, r5, #1
 8001026:	2dfe      	cmp	r5, #254	@ 0xfe
 8001028:	d000      	beq.n	800102c <__aeabi_fsub+0xb4>
 800102a:	e0a5      	b.n	8001178 <__aeabi_fsub+0x200>
 800102c:	20ff      	movs	r0, #255	@ 0xff
 800102e:	2200      	movs	r2, #0
 8001030:	05c0      	lsls	r0, r0, #23
 8001032:	4310      	orrs	r0, r2
 8001034:	07e4      	lsls	r4, r4, #31
 8001036:	4320      	orrs	r0, r4
 8001038:	bcc0      	pop	{r6, r7}
 800103a:	46b9      	mov	r9, r7
 800103c:	46b0      	mov	r8, r6
 800103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fsub+0xce>
 8001044:	e1eb      	b.n	800141e <__aeabi_fsub+0x4a6>
 8001046:	2a00      	cmp	r2, #0
 8001048:	d046      	beq.n	80010d8 <__aeabi_fsub+0x160>
 800104a:	2dff      	cmp	r5, #255	@ 0xff
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0xd8>
 800104e:	e0a4      	b.n	800119a <__aeabi_fsub+0x222>
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	04d2      	lsls	r2, r2, #19
 8001054:	4311      	orrs	r1, r2
 8001056:	2b1b      	cmp	r3, #27
 8001058:	dc00      	bgt.n	800105c <__aeabi_fsub+0xe4>
 800105a:	e0fb      	b.n	8001254 <__aeabi_fsub+0x2dc>
 800105c:	2305      	movs	r3, #5
 800105e:	4698      	mov	r8, r3
 8001060:	002b      	movs	r3, r5
 8001062:	44c4      	add	ip, r8
 8001064:	4662      	mov	r2, ip
 8001066:	08d7      	lsrs	r7, r2, #3
 8001068:	2bff      	cmp	r3, #255	@ 0xff
 800106a:	d100      	bne.n	800106e <__aeabi_fsub+0xf6>
 800106c:	e095      	b.n	800119a <__aeabi_fsub+0x222>
 800106e:	027a      	lsls	r2, r7, #9
 8001070:	0a52      	lsrs	r2, r2, #9
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	e7dc      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001076:	002b      	movs	r3, r5
 8001078:	3bff      	subs	r3, #255	@ 0xff
 800107a:	4699      	mov	r9, r3
 800107c:	2900      	cmp	r1, #0
 800107e:	d118      	bne.n	80010b2 <__aeabi_fsub+0x13a>
 8001080:	2301      	movs	r3, #1
 8001082:	405e      	eors	r6, r3
 8001084:	42b4      	cmp	r4, r6
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x112>
 8001088:	e0ca      	b.n	8001220 <__aeabi_fsub+0x2a8>
 800108a:	464b      	mov	r3, r9
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02d      	beq.n	80010ec <__aeabi_fsub+0x174>
 8001090:	2d00      	cmp	r5, #0
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x11e>
 8001094:	e13c      	b.n	8001310 <__aeabi_fsub+0x398>
 8001096:	23ff      	movs	r3, #255	@ 0xff
 8001098:	4664      	mov	r4, ip
 800109a:	2c00      	cmp	r4, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0x128>
 800109e:	e15f      	b.n	8001360 <__aeabi_fsub+0x3e8>
 80010a0:	1e5d      	subs	r5, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x130>
 80010a6:	e174      	b.n	8001392 <__aeabi_fsub+0x41a>
 80010a8:	0034      	movs	r4, r6
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d074      	beq.n	8001198 <__aeabi_fsub+0x220>
 80010ae:	002b      	movs	r3, r5
 80010b0:	e103      	b.n	80012ba <__aeabi_fsub+0x342>
 80010b2:	42b4      	cmp	r4, r6
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x140>
 80010b6:	e09c      	b.n	80011f2 <__aeabi_fsub+0x27a>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d017      	beq.n	80010ec <__aeabi_fsub+0x174>
 80010bc:	2d00      	cmp	r5, #0
 80010be:	d0ea      	beq.n	8001096 <__aeabi_fsub+0x11e>
 80010c0:	0007      	movs	r7, r0
 80010c2:	0034      	movs	r4, r6
 80010c4:	e06c      	b.n	80011a0 <__aeabi_fsub+0x228>
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d0cc      	beq.n	8001064 <__aeabi_fsub+0xec>
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d02b      	beq.n	8001128 <__aeabi_fsub+0x1b0>
 80010d0:	2bff      	cmp	r3, #255	@ 0xff
 80010d2:	d062      	beq.n	800119a <__aeabi_fsub+0x222>
 80010d4:	0013      	movs	r3, r2
 80010d6:	e773      	b.n	8000fc0 <__aeabi_fsub+0x48>
 80010d8:	2900      	cmp	r1, #0
 80010da:	d0c3      	beq.n	8001064 <__aeabi_fsub+0xec>
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x16c>
 80010e2:	e11e      	b.n	8001322 <__aeabi_fsub+0x3aa>
 80010e4:	2bff      	cmp	r3, #255	@ 0xff
 80010e6:	d058      	beq.n	800119a <__aeabi_fsub+0x222>
 80010e8:	0013      	movs	r3, r2
 80010ea:	e7b4      	b.n	8001056 <__aeabi_fsub+0xde>
 80010ec:	22fe      	movs	r2, #254	@ 0xfe
 80010ee:	1c6b      	adds	r3, r5, #1
 80010f0:	421a      	tst	r2, r3
 80010f2:	d10d      	bne.n	8001110 <__aeabi_fsub+0x198>
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d060      	beq.n	80011ba <__aeabi_fsub+0x242>
 80010f8:	4663      	mov	r3, ip
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d000      	beq.n	8001100 <__aeabi_fsub+0x188>
 80010fe:	e120      	b.n	8001342 <__aeabi_fsub+0x3ca>
 8001100:	2900      	cmp	r1, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0x18e>
 8001104:	e128      	b.n	8001358 <__aeabi_fsub+0x3e0>
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	2400      	movs	r4, #0
 800110a:	20ff      	movs	r0, #255	@ 0xff
 800110c:	03d2      	lsls	r2, r2, #15
 800110e:	e78f      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001110:	4663      	mov	r3, ip
 8001112:	1a5f      	subs	r7, r3, r1
 8001114:	017b      	lsls	r3, r7, #5
 8001116:	d500      	bpl.n	800111a <__aeabi_fsub+0x1a2>
 8001118:	e0fe      	b.n	8001318 <__aeabi_fsub+0x3a0>
 800111a:	2f00      	cmp	r7, #0
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x1a8>
 800111e:	e765      	b.n	8000fec <__aeabi_fsub+0x74>
 8001120:	2400      	movs	r4, #0
 8001122:	2000      	movs	r0, #0
 8001124:	2200      	movs	r2, #0
 8001126:	e783      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001128:	4663      	mov	r3, ip
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	014b      	lsls	r3, r1, #5
 800112e:	d400      	bmi.n	8001132 <__aeabi_fsub+0x1ba>
 8001130:	e119      	b.n	8001366 <__aeabi_fsub+0x3ee>
 8001132:	018f      	lsls	r7, r1, #6
 8001134:	09bf      	lsrs	r7, r7, #6
 8001136:	0038      	movs	r0, r7
 8001138:	f002 faa2 	bl	8003680 <__clzsi2>
 800113c:	003b      	movs	r3, r7
 800113e:	3805      	subs	r0, #5
 8001140:	4083      	lsls	r3, r0
 8001142:	2501      	movs	r5, #1
 8001144:	2220      	movs	r2, #32
 8001146:	1b40      	subs	r0, r0, r5
 8001148:	3001      	adds	r0, #1
 800114a:	1a12      	subs	r2, r2, r0
 800114c:	0019      	movs	r1, r3
 800114e:	4093      	lsls	r3, r2
 8001150:	40c1      	lsrs	r1, r0
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	4193      	sbcs	r3, r2
 8001156:	4319      	orrs	r1, r3
 8001158:	468c      	mov	ip, r1
 800115a:	1e0b      	subs	r3, r1, #0
 800115c:	d0e1      	beq.n	8001122 <__aeabi_fsub+0x1aa>
 800115e:	075b      	lsls	r3, r3, #29
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x1ec>
 8001162:	e152      	b.n	800140a <__aeabi_fsub+0x492>
 8001164:	230f      	movs	r3, #15
 8001166:	2500      	movs	r5, #0
 8001168:	400b      	ands	r3, r1
 800116a:	2b04      	cmp	r3, #4
 800116c:	d000      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 800116e:	e752      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001170:	2001      	movs	r0, #1
 8001172:	014a      	lsls	r2, r1, #5
 8001174:	d400      	bmi.n	8001178 <__aeabi_fsub+0x200>
 8001176:	e092      	b.n	800129e <__aeabi_fsub+0x326>
 8001178:	b2c0      	uxtb	r0, r0
 800117a:	4663      	mov	r3, ip
 800117c:	019a      	lsls	r2, r3, #6
 800117e:	0a52      	lsrs	r2, r2, #9
 8001180:	e756      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001182:	4663      	mov	r3, ip
 8001184:	075b      	lsls	r3, r3, #29
 8001186:	d005      	beq.n	8001194 <__aeabi_fsub+0x21c>
 8001188:	230f      	movs	r3, #15
 800118a:	4662      	mov	r2, ip
 800118c:	4013      	ands	r3, r2
 800118e:	2b04      	cmp	r3, #4
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x21c>
 8001192:	e740      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001194:	002b      	movs	r3, r5
 8001196:	e765      	b.n	8001064 <__aeabi_fsub+0xec>
 8001198:	0007      	movs	r7, r0
 800119a:	2f00      	cmp	r7, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x228>
 800119e:	e745      	b.n	800102c <__aeabi_fsub+0xb4>
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	03d2      	lsls	r2, r2, #15
 80011a4:	433a      	orrs	r2, r7
 80011a6:	0252      	lsls	r2, r2, #9
 80011a8:	20ff      	movs	r0, #255	@ 0xff
 80011aa:	0a52      	lsrs	r2, r2, #9
 80011ac:	e740      	b.n	8001030 <__aeabi_fsub+0xb8>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d179      	bne.n	80012a6 <__aeabi_fsub+0x32e>
 80011b2:	22fe      	movs	r2, #254	@ 0xfe
 80011b4:	1c6b      	adds	r3, r5, #1
 80011b6:	421a      	tst	r2, r3
 80011b8:	d1aa      	bne.n	8001110 <__aeabi_fsub+0x198>
 80011ba:	4663      	mov	r3, ip
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x24a>
 80011c0:	e0f5      	b.n	80013ae <__aeabi_fsub+0x436>
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x250>
 80011c6:	e0d1      	b.n	800136c <__aeabi_fsub+0x3f4>
 80011c8:	1a5f      	subs	r7, r3, r1
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	04db      	lsls	r3, r3, #19
 80011ce:	421f      	tst	r7, r3
 80011d0:	d100      	bne.n	80011d4 <__aeabi_fsub+0x25c>
 80011d2:	e10e      	b.n	80013f2 <__aeabi_fsub+0x47a>
 80011d4:	4662      	mov	r2, ip
 80011d6:	2401      	movs	r4, #1
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	4694      	mov	ip, r2
 80011dc:	2000      	movs	r0, #0
 80011de:	4034      	ands	r4, r6
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x26e>
 80011e4:	e724      	b.n	8001030 <__aeabi_fsub+0xb8>
 80011e6:	2001      	movs	r0, #1
 80011e8:	421a      	tst	r2, r3
 80011ea:	d1c6      	bne.n	800117a <__aeabi_fsub+0x202>
 80011ec:	2300      	movs	r3, #0
 80011ee:	08d7      	lsrs	r7, r2, #3
 80011f0:	e73d      	b.n	800106e <__aeabi_fsub+0xf6>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d017      	beq.n	8001226 <__aeabi_fsub+0x2ae>
 80011f6:	2d00      	cmp	r5, #0
 80011f8:	d000      	beq.n	80011fc <__aeabi_fsub+0x284>
 80011fa:	e0af      	b.n	800135c <__aeabi_fsub+0x3e4>
 80011fc:	23ff      	movs	r3, #255	@ 0xff
 80011fe:	4665      	mov	r5, ip
 8001200:	2d00      	cmp	r5, #0
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x28e>
 8001204:	e0ad      	b.n	8001362 <__aeabi_fsub+0x3ea>
 8001206:	1e5e      	subs	r6, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x296>
 800120c:	e089      	b.n	8001322 <__aeabi_fsub+0x3aa>
 800120e:	2bff      	cmp	r3, #255	@ 0xff
 8001210:	d0c2      	beq.n	8001198 <__aeabi_fsub+0x220>
 8001212:	2e1b      	cmp	r6, #27
 8001214:	dc00      	bgt.n	8001218 <__aeabi_fsub+0x2a0>
 8001216:	e0ab      	b.n	8001370 <__aeabi_fsub+0x3f8>
 8001218:	1d4b      	adds	r3, r1, #5
 800121a:	469c      	mov	ip, r3
 800121c:	0013      	movs	r3, r2
 800121e:	e721      	b.n	8001064 <__aeabi_fsub+0xec>
 8001220:	464b      	mov	r3, r9
 8001222:	2b00      	cmp	r3, #0
 8001224:	d170      	bne.n	8001308 <__aeabi_fsub+0x390>
 8001226:	22fe      	movs	r2, #254	@ 0xfe
 8001228:	1c6b      	adds	r3, r5, #1
 800122a:	421a      	tst	r2, r3
 800122c:	d15e      	bne.n	80012ec <__aeabi_fsub+0x374>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0x2bc>
 8001232:	e0c3      	b.n	80013bc <__aeabi_fsub+0x444>
 8001234:	4663      	mov	r3, ip
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x2c4>
 800123a:	e0d0      	b.n	80013de <__aeabi_fsub+0x466>
 800123c:	2900      	cmp	r1, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_fsub+0x2ca>
 8001240:	e094      	b.n	800136c <__aeabi_fsub+0x3f4>
 8001242:	000a      	movs	r2, r1
 8001244:	4462      	add	r2, ip
 8001246:	0153      	lsls	r3, r2, #5
 8001248:	d400      	bmi.n	800124c <__aeabi_fsub+0x2d4>
 800124a:	e0d8      	b.n	80013fe <__aeabi_fsub+0x486>
 800124c:	0192      	lsls	r2, r2, #6
 800124e:	2001      	movs	r0, #1
 8001250:	0a52      	lsrs	r2, r2, #9
 8001252:	e6ed      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001254:	0008      	movs	r0, r1
 8001256:	2220      	movs	r2, #32
 8001258:	40d8      	lsrs	r0, r3
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4099      	lsls	r1, r3
 800125e:	000b      	movs	r3, r1
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	4193      	sbcs	r3, r2
 8001264:	4303      	orrs	r3, r0
 8001266:	449c      	add	ip, r3
 8001268:	4663      	mov	r3, ip
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	d589      	bpl.n	8001182 <__aeabi_fsub+0x20a>
 800126e:	3501      	adds	r5, #1
 8001270:	2dff      	cmp	r5, #255	@ 0xff
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0x2fe>
 8001274:	e6da      	b.n	800102c <__aeabi_fsub+0xb4>
 8001276:	4662      	mov	r2, ip
 8001278:	2301      	movs	r3, #1
 800127a:	4919      	ldr	r1, [pc, #100]	@ (80012e0 <__aeabi_fsub+0x368>)
 800127c:	4013      	ands	r3, r2
 800127e:	0852      	lsrs	r2, r2, #1
 8001280:	400a      	ands	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	4694      	mov	ip, r2
 8001288:	075b      	lsls	r3, r3, #29
 800128a:	d004      	beq.n	8001296 <__aeabi_fsub+0x31e>
 800128c:	230f      	movs	r3, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x31e>
 8001294:	e6bf      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001296:	4663      	mov	r3, ip
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	d500      	bpl.n	800129e <__aeabi_fsub+0x326>
 800129c:	e6c2      	b.n	8001024 <__aeabi_fsub+0xac>
 800129e:	4663      	mov	r3, ip
 80012a0:	08df      	lsrs	r7, r3, #3
 80012a2:	002b      	movs	r3, r5
 80012a4:	e6e3      	b.n	800106e <__aeabi_fsub+0xf6>
 80012a6:	1b53      	subs	r3, r2, r5
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_fsub+0x336>
 80012ac:	e6f4      	b.n	8001098 <__aeabi_fsub+0x120>
 80012ae:	2080      	movs	r0, #128	@ 0x80
 80012b0:	4664      	mov	r4, ip
 80012b2:	04c0      	lsls	r0, r0, #19
 80012b4:	4304      	orrs	r4, r0
 80012b6:	46a4      	mov	ip, r4
 80012b8:	0034      	movs	r4, r6
 80012ba:	2001      	movs	r0, #1
 80012bc:	2b1b      	cmp	r3, #27
 80012be:	dc09      	bgt.n	80012d4 <__aeabi_fsub+0x35c>
 80012c0:	2520      	movs	r5, #32
 80012c2:	4660      	mov	r0, ip
 80012c4:	40d8      	lsrs	r0, r3
 80012c6:	1aeb      	subs	r3, r5, r3
 80012c8:	4665      	mov	r5, ip
 80012ca:	409d      	lsls	r5, r3
 80012cc:	002b      	movs	r3, r5
 80012ce:	1e5d      	subs	r5, r3, #1
 80012d0:	41ab      	sbcs	r3, r5
 80012d2:	4318      	orrs	r0, r3
 80012d4:	1a0b      	subs	r3, r1, r0
 80012d6:	469c      	mov	ip, r3
 80012d8:	0015      	movs	r5, r2
 80012da:	e680      	b.n	8000fde <__aeabi_fsub+0x66>
 80012dc:	fbffffff 	.word	0xfbffffff
 80012e0:	7dffffff 	.word	0x7dffffff
 80012e4:	22fe      	movs	r2, #254	@ 0xfe
 80012e6:	1c6b      	adds	r3, r5, #1
 80012e8:	4213      	tst	r3, r2
 80012ea:	d0a3      	beq.n	8001234 <__aeabi_fsub+0x2bc>
 80012ec:	2bff      	cmp	r3, #255	@ 0xff
 80012ee:	d100      	bne.n	80012f2 <__aeabi_fsub+0x37a>
 80012f0:	e69c      	b.n	800102c <__aeabi_fsub+0xb4>
 80012f2:	4461      	add	r1, ip
 80012f4:	0849      	lsrs	r1, r1, #1
 80012f6:	074a      	lsls	r2, r1, #29
 80012f8:	d049      	beq.n	800138e <__aeabi_fsub+0x416>
 80012fa:	220f      	movs	r2, #15
 80012fc:	400a      	ands	r2, r1
 80012fe:	2a04      	cmp	r2, #4
 8001300:	d045      	beq.n	800138e <__aeabi_fsub+0x416>
 8001302:	1d0a      	adds	r2, r1, #4
 8001304:	4694      	mov	ip, r2
 8001306:	e6ad      	b.n	8001064 <__aeabi_fsub+0xec>
 8001308:	2d00      	cmp	r5, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x396>
 800130c:	e776      	b.n	80011fc <__aeabi_fsub+0x284>
 800130e:	e68d      	b.n	800102c <__aeabi_fsub+0xb4>
 8001310:	0034      	movs	r4, r6
 8001312:	20ff      	movs	r0, #255	@ 0xff
 8001314:	2200      	movs	r2, #0
 8001316:	e68b      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	2401      	movs	r4, #1
 800131c:	1acf      	subs	r7, r1, r3
 800131e:	4034      	ands	r4, r6
 8001320:	e664      	b.n	8000fec <__aeabi_fsub+0x74>
 8001322:	4461      	add	r1, ip
 8001324:	014b      	lsls	r3, r1, #5
 8001326:	d56d      	bpl.n	8001404 <__aeabi_fsub+0x48c>
 8001328:	0848      	lsrs	r0, r1, #1
 800132a:	4944      	ldr	r1, [pc, #272]	@ (800143c <__aeabi_fsub+0x4c4>)
 800132c:	4001      	ands	r1, r0
 800132e:	0743      	lsls	r3, r0, #29
 8001330:	d02c      	beq.n	800138c <__aeabi_fsub+0x414>
 8001332:	230f      	movs	r3, #15
 8001334:	4003      	ands	r3, r0
 8001336:	2b04      	cmp	r3, #4
 8001338:	d028      	beq.n	800138c <__aeabi_fsub+0x414>
 800133a:	1d0b      	adds	r3, r1, #4
 800133c:	469c      	mov	ip, r3
 800133e:	2302      	movs	r3, #2
 8001340:	e690      	b.n	8001064 <__aeabi_fsub+0xec>
 8001342:	2900      	cmp	r1, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x3d0>
 8001346:	e72b      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	03db      	lsls	r3, r3, #15
 800134c:	429f      	cmp	r7, r3
 800134e:	d200      	bcs.n	8001352 <__aeabi_fsub+0x3da>
 8001350:	e726      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001352:	4298      	cmp	r0, r3
 8001354:	d300      	bcc.n	8001358 <__aeabi_fsub+0x3e0>
 8001356:	e723      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001358:	2401      	movs	r4, #1
 800135a:	4034      	ands	r4, r6
 800135c:	0007      	movs	r7, r0
 800135e:	e71f      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001360:	0034      	movs	r4, r6
 8001362:	468c      	mov	ip, r1
 8001364:	e67e      	b.n	8001064 <__aeabi_fsub+0xec>
 8001366:	2301      	movs	r3, #1
 8001368:	08cf      	lsrs	r7, r1, #3
 800136a:	e680      	b.n	800106e <__aeabi_fsub+0xf6>
 800136c:	2300      	movs	r3, #0
 800136e:	e67e      	b.n	800106e <__aeabi_fsub+0xf6>
 8001370:	2020      	movs	r0, #32
 8001372:	4665      	mov	r5, ip
 8001374:	1b80      	subs	r0, r0, r6
 8001376:	4085      	lsls	r5, r0
 8001378:	4663      	mov	r3, ip
 800137a:	0028      	movs	r0, r5
 800137c:	40f3      	lsrs	r3, r6
 800137e:	1e45      	subs	r5, r0, #1
 8001380:	41a8      	sbcs	r0, r5
 8001382:	4303      	orrs	r3, r0
 8001384:	469c      	mov	ip, r3
 8001386:	0015      	movs	r5, r2
 8001388:	448c      	add	ip, r1
 800138a:	e76d      	b.n	8001268 <__aeabi_fsub+0x2f0>
 800138c:	2302      	movs	r3, #2
 800138e:	08cf      	lsrs	r7, r1, #3
 8001390:	e66d      	b.n	800106e <__aeabi_fsub+0xf6>
 8001392:	1b0f      	subs	r7, r1, r4
 8001394:	017b      	lsls	r3, r7, #5
 8001396:	d528      	bpl.n	80013ea <__aeabi_fsub+0x472>
 8001398:	01bf      	lsls	r7, r7, #6
 800139a:	09bf      	lsrs	r7, r7, #6
 800139c:	0038      	movs	r0, r7
 800139e:	f002 f96f 	bl	8003680 <__clzsi2>
 80013a2:	003b      	movs	r3, r7
 80013a4:	3805      	subs	r0, #5
 80013a6:	4083      	lsls	r3, r0
 80013a8:	0034      	movs	r4, r6
 80013aa:	2501      	movs	r5, #1
 80013ac:	e6ca      	b.n	8001144 <__aeabi_fsub+0x1cc>
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_fsub+0x43c>
 80013b2:	e6b5      	b.n	8001120 <__aeabi_fsub+0x1a8>
 80013b4:	2401      	movs	r4, #1
 80013b6:	0007      	movs	r7, r0
 80013b8:	4034      	ands	r4, r6
 80013ba:	e658      	b.n	800106e <__aeabi_fsub+0xf6>
 80013bc:	4663      	mov	r3, ip
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_fsub+0x44c>
 80013c2:	e6e9      	b.n	8001198 <__aeabi_fsub+0x220>
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_fsub+0x452>
 80013c8:	e6ea      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	03db      	lsls	r3, r3, #15
 80013ce:	429f      	cmp	r7, r3
 80013d0:	d200      	bcs.n	80013d4 <__aeabi_fsub+0x45c>
 80013d2:	e6e5      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013d4:	4298      	cmp	r0, r3
 80013d6:	d300      	bcc.n	80013da <__aeabi_fsub+0x462>
 80013d8:	e6e2      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013da:	0007      	movs	r7, r0
 80013dc:	e6e0      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013de:	2900      	cmp	r1, #0
 80013e0:	d100      	bne.n	80013e4 <__aeabi_fsub+0x46c>
 80013e2:	e69e      	b.n	8001122 <__aeabi_fsub+0x1aa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	08cf      	lsrs	r7, r1, #3
 80013e8:	e641      	b.n	800106e <__aeabi_fsub+0xf6>
 80013ea:	0034      	movs	r4, r6
 80013ec:	2301      	movs	r3, #1
 80013ee:	08ff      	lsrs	r7, r7, #3
 80013f0:	e63d      	b.n	800106e <__aeabi_fsub+0xf6>
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_fsub+0x480>
 80013f6:	e693      	b.n	8001120 <__aeabi_fsub+0x1a8>
 80013f8:	2300      	movs	r3, #0
 80013fa:	08ff      	lsrs	r7, r7, #3
 80013fc:	e637      	b.n	800106e <__aeabi_fsub+0xf6>
 80013fe:	2300      	movs	r3, #0
 8001400:	08d7      	lsrs	r7, r2, #3
 8001402:	e634      	b.n	800106e <__aeabi_fsub+0xf6>
 8001404:	2301      	movs	r3, #1
 8001406:	08cf      	lsrs	r7, r1, #3
 8001408:	e631      	b.n	800106e <__aeabi_fsub+0xf6>
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	000b      	movs	r3, r1
 800140e:	04d2      	lsls	r2, r2, #19
 8001410:	2001      	movs	r0, #1
 8001412:	4013      	ands	r3, r2
 8001414:	4211      	tst	r1, r2
 8001416:	d000      	beq.n	800141a <__aeabi_fsub+0x4a2>
 8001418:	e6ae      	b.n	8001178 <__aeabi_fsub+0x200>
 800141a:	08cf      	lsrs	r7, r1, #3
 800141c:	e627      	b.n	800106e <__aeabi_fsub+0xf6>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x4ac>
 8001422:	e75f      	b.n	80012e4 <__aeabi_fsub+0x36c>
 8001424:	1b56      	subs	r6, r2, r5
 8001426:	2d00      	cmp	r5, #0
 8001428:	d101      	bne.n	800142e <__aeabi_fsub+0x4b6>
 800142a:	0033      	movs	r3, r6
 800142c:	e6e7      	b.n	80011fe <__aeabi_fsub+0x286>
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	4660      	mov	r0, ip
 8001432:	04db      	lsls	r3, r3, #19
 8001434:	4318      	orrs	r0, r3
 8001436:	4684      	mov	ip, r0
 8001438:	e6eb      	b.n	8001212 <__aeabi_fsub+0x29a>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	7dffffff 	.word	0x7dffffff

08001440 <__aeabi_f2iz>:
 8001440:	0241      	lsls	r1, r0, #9
 8001442:	0042      	lsls	r2, r0, #1
 8001444:	0fc3      	lsrs	r3, r0, #31
 8001446:	0a49      	lsrs	r1, r1, #9
 8001448:	2000      	movs	r0, #0
 800144a:	0e12      	lsrs	r2, r2, #24
 800144c:	2a7e      	cmp	r2, #126	@ 0x7e
 800144e:	dd03      	ble.n	8001458 <__aeabi_f2iz+0x18>
 8001450:	2a9d      	cmp	r2, #157	@ 0x9d
 8001452:	dd02      	ble.n	800145a <__aeabi_f2iz+0x1a>
 8001454:	4a09      	ldr	r2, [pc, #36]	@ (800147c <__aeabi_f2iz+0x3c>)
 8001456:	1898      	adds	r0, r3, r2
 8001458:	4770      	bx	lr
 800145a:	2080      	movs	r0, #128	@ 0x80
 800145c:	0400      	lsls	r0, r0, #16
 800145e:	4301      	orrs	r1, r0
 8001460:	2a95      	cmp	r2, #149	@ 0x95
 8001462:	dc07      	bgt.n	8001474 <__aeabi_f2iz+0x34>
 8001464:	2096      	movs	r0, #150	@ 0x96
 8001466:	1a82      	subs	r2, r0, r2
 8001468:	40d1      	lsrs	r1, r2
 800146a:	4248      	negs	r0, r1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f3      	bne.n	8001458 <__aeabi_f2iz+0x18>
 8001470:	0008      	movs	r0, r1
 8001472:	e7f1      	b.n	8001458 <__aeabi_f2iz+0x18>
 8001474:	3a96      	subs	r2, #150	@ 0x96
 8001476:	4091      	lsls	r1, r2
 8001478:	e7f7      	b.n	800146a <__aeabi_f2iz+0x2a>
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	7fffffff 	.word	0x7fffffff

08001480 <__aeabi_i2f>:
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	2800      	cmp	r0, #0
 8001484:	d012      	beq.n	80014ac <__aeabi_i2f+0x2c>
 8001486:	17c3      	asrs	r3, r0, #31
 8001488:	18c5      	adds	r5, r0, r3
 800148a:	405d      	eors	r5, r3
 800148c:	0fc4      	lsrs	r4, r0, #31
 800148e:	0028      	movs	r0, r5
 8001490:	f002 f8f6 	bl	8003680 <__clzsi2>
 8001494:	239e      	movs	r3, #158	@ 0x9e
 8001496:	1a1b      	subs	r3, r3, r0
 8001498:	2b96      	cmp	r3, #150	@ 0x96
 800149a:	dc0f      	bgt.n	80014bc <__aeabi_i2f+0x3c>
 800149c:	2808      	cmp	r0, #8
 800149e:	d038      	beq.n	8001512 <__aeabi_i2f+0x92>
 80014a0:	3808      	subs	r0, #8
 80014a2:	4085      	lsls	r5, r0
 80014a4:	026d      	lsls	r5, r5, #9
 80014a6:	0a6d      	lsrs	r5, r5, #9
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	e002      	b.n	80014b2 <__aeabi_i2f+0x32>
 80014ac:	2400      	movs	r4, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	2500      	movs	r5, #0
 80014b2:	05c0      	lsls	r0, r0, #23
 80014b4:	4328      	orrs	r0, r5
 80014b6:	07e4      	lsls	r4, r4, #31
 80014b8:	4320      	orrs	r0, r4
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	2b99      	cmp	r3, #153	@ 0x99
 80014be:	dc14      	bgt.n	80014ea <__aeabi_i2f+0x6a>
 80014c0:	1f42      	subs	r2, r0, #5
 80014c2:	4095      	lsls	r5, r2
 80014c4:	002a      	movs	r2, r5
 80014c6:	4915      	ldr	r1, [pc, #84]	@ (800151c <__aeabi_i2f+0x9c>)
 80014c8:	4011      	ands	r1, r2
 80014ca:	0755      	lsls	r5, r2, #29
 80014cc:	d01c      	beq.n	8001508 <__aeabi_i2f+0x88>
 80014ce:	250f      	movs	r5, #15
 80014d0:	402a      	ands	r2, r5
 80014d2:	2a04      	cmp	r2, #4
 80014d4:	d018      	beq.n	8001508 <__aeabi_i2f+0x88>
 80014d6:	3104      	adds	r1, #4
 80014d8:	08ca      	lsrs	r2, r1, #3
 80014da:	0149      	lsls	r1, r1, #5
 80014dc:	d515      	bpl.n	800150a <__aeabi_i2f+0x8a>
 80014de:	239f      	movs	r3, #159	@ 0x9f
 80014e0:	0252      	lsls	r2, r2, #9
 80014e2:	1a18      	subs	r0, r3, r0
 80014e4:	0a55      	lsrs	r5, r2, #9
 80014e6:	b2c0      	uxtb	r0, r0
 80014e8:	e7e3      	b.n	80014b2 <__aeabi_i2f+0x32>
 80014ea:	2205      	movs	r2, #5
 80014ec:	0029      	movs	r1, r5
 80014ee:	1a12      	subs	r2, r2, r0
 80014f0:	40d1      	lsrs	r1, r2
 80014f2:	0002      	movs	r2, r0
 80014f4:	321b      	adds	r2, #27
 80014f6:	4095      	lsls	r5, r2
 80014f8:	002a      	movs	r2, r5
 80014fa:	1e55      	subs	r5, r2, #1
 80014fc:	41aa      	sbcs	r2, r5
 80014fe:	430a      	orrs	r2, r1
 8001500:	4906      	ldr	r1, [pc, #24]	@ (800151c <__aeabi_i2f+0x9c>)
 8001502:	4011      	ands	r1, r2
 8001504:	0755      	lsls	r5, r2, #29
 8001506:	d1e2      	bne.n	80014ce <__aeabi_i2f+0x4e>
 8001508:	08ca      	lsrs	r2, r1, #3
 800150a:	0252      	lsls	r2, r2, #9
 800150c:	0a55      	lsrs	r5, r2, #9
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	e7cf      	b.n	80014b2 <__aeabi_i2f+0x32>
 8001512:	026d      	lsls	r5, r5, #9
 8001514:	0a6d      	lsrs	r5, r5, #9
 8001516:	308e      	adds	r0, #142	@ 0x8e
 8001518:	e7cb      	b.n	80014b2 <__aeabi_i2f+0x32>
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_ui2f>:
 8001520:	b510      	push	{r4, lr}
 8001522:	1e04      	subs	r4, r0, #0
 8001524:	d00d      	beq.n	8001542 <__aeabi_ui2f+0x22>
 8001526:	f002 f8ab 	bl	8003680 <__clzsi2>
 800152a:	239e      	movs	r3, #158	@ 0x9e
 800152c:	1a1b      	subs	r3, r3, r0
 800152e:	2b96      	cmp	r3, #150	@ 0x96
 8001530:	dc0c      	bgt.n	800154c <__aeabi_ui2f+0x2c>
 8001532:	2808      	cmp	r0, #8
 8001534:	d034      	beq.n	80015a0 <__aeabi_ui2f+0x80>
 8001536:	3808      	subs	r0, #8
 8001538:	4084      	lsls	r4, r0
 800153a:	0264      	lsls	r4, r4, #9
 800153c:	0a64      	lsrs	r4, r4, #9
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	e001      	b.n	8001546 <__aeabi_ui2f+0x26>
 8001542:	2000      	movs	r0, #0
 8001544:	2400      	movs	r4, #0
 8001546:	05c0      	lsls	r0, r0, #23
 8001548:	4320      	orrs	r0, r4
 800154a:	bd10      	pop	{r4, pc}
 800154c:	2b99      	cmp	r3, #153	@ 0x99
 800154e:	dc13      	bgt.n	8001578 <__aeabi_ui2f+0x58>
 8001550:	1f42      	subs	r2, r0, #5
 8001552:	4094      	lsls	r4, r2
 8001554:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <__aeabi_ui2f+0x88>)
 8001556:	4022      	ands	r2, r4
 8001558:	0761      	lsls	r1, r4, #29
 800155a:	d01c      	beq.n	8001596 <__aeabi_ui2f+0x76>
 800155c:	210f      	movs	r1, #15
 800155e:	4021      	ands	r1, r4
 8001560:	2904      	cmp	r1, #4
 8001562:	d018      	beq.n	8001596 <__aeabi_ui2f+0x76>
 8001564:	3204      	adds	r2, #4
 8001566:	08d4      	lsrs	r4, r2, #3
 8001568:	0152      	lsls	r2, r2, #5
 800156a:	d515      	bpl.n	8001598 <__aeabi_ui2f+0x78>
 800156c:	239f      	movs	r3, #159	@ 0x9f
 800156e:	0264      	lsls	r4, r4, #9
 8001570:	1a18      	subs	r0, r3, r0
 8001572:	0a64      	lsrs	r4, r4, #9
 8001574:	b2c0      	uxtb	r0, r0
 8001576:	e7e6      	b.n	8001546 <__aeabi_ui2f+0x26>
 8001578:	0002      	movs	r2, r0
 800157a:	0021      	movs	r1, r4
 800157c:	321b      	adds	r2, #27
 800157e:	4091      	lsls	r1, r2
 8001580:	000a      	movs	r2, r1
 8001582:	1e51      	subs	r1, r2, #1
 8001584:	418a      	sbcs	r2, r1
 8001586:	2105      	movs	r1, #5
 8001588:	1a09      	subs	r1, r1, r0
 800158a:	40cc      	lsrs	r4, r1
 800158c:	4314      	orrs	r4, r2
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <__aeabi_ui2f+0x88>)
 8001590:	4022      	ands	r2, r4
 8001592:	0761      	lsls	r1, r4, #29
 8001594:	d1e2      	bne.n	800155c <__aeabi_ui2f+0x3c>
 8001596:	08d4      	lsrs	r4, r2, #3
 8001598:	0264      	lsls	r4, r4, #9
 800159a:	0a64      	lsrs	r4, r4, #9
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	e7d2      	b.n	8001546 <__aeabi_ui2f+0x26>
 80015a0:	0264      	lsls	r4, r4, #9
 80015a2:	0a64      	lsrs	r4, r4, #9
 80015a4:	308e      	adds	r0, #142	@ 0x8e
 80015a6:	e7ce      	b.n	8001546 <__aeabi_ui2f+0x26>
 80015a8:	fbffffff 	.word	0xfbffffff

080015ac <__aeabi_dadd>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464f      	mov	r7, r9
 80015b0:	4646      	mov	r6, r8
 80015b2:	46d6      	mov	lr, sl
 80015b4:	b5c0      	push	{r6, r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	9000      	str	r0, [sp, #0]
 80015ba:	9101      	str	r1, [sp, #4]
 80015bc:	030e      	lsls	r6, r1, #12
 80015be:	004c      	lsls	r4, r1, #1
 80015c0:	0fcd      	lsrs	r5, r1, #31
 80015c2:	0a71      	lsrs	r1, r6, #9
 80015c4:	9e00      	ldr	r6, [sp, #0]
 80015c6:	005f      	lsls	r7, r3, #1
 80015c8:	0f76      	lsrs	r6, r6, #29
 80015ca:	430e      	orrs	r6, r1
 80015cc:	9900      	ldr	r1, [sp, #0]
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	00c9      	lsls	r1, r1, #3
 80015d4:	4689      	mov	r9, r1
 80015d6:	0319      	lsls	r1, r3, #12
 80015d8:	0d7b      	lsrs	r3, r7, #21
 80015da:	4698      	mov	r8, r3
 80015dc:	9b01      	ldr	r3, [sp, #4]
 80015de:	0a49      	lsrs	r1, r1, #9
 80015e0:	0fdb      	lsrs	r3, r3, #31
 80015e2:	469c      	mov	ip, r3
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	9a00      	ldr	r2, [sp, #0]
 80015e8:	0f5b      	lsrs	r3, r3, #29
 80015ea:	430b      	orrs	r3, r1
 80015ec:	4641      	mov	r1, r8
 80015ee:	0d64      	lsrs	r4, r4, #21
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	1a61      	subs	r1, r4, r1
 80015f4:	4565      	cmp	r5, ip
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x4e>
 80015f8:	e0a6      	b.n	8001748 <__aeabi_dadd+0x19c>
 80015fa:	2900      	cmp	r1, #0
 80015fc:	dd72      	ble.n	80016e4 <__aeabi_dadd+0x138>
 80015fe:	4647      	mov	r7, r8
 8001600:	2f00      	cmp	r7, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x5a>
 8001604:	e0dd      	b.n	80017c2 <__aeabi_dadd+0x216>
 8001606:	4fcc      	ldr	r7, [pc, #816]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001608:	42bc      	cmp	r4, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x62>
 800160c:	e19a      	b.n	8001944 <__aeabi_dadd+0x398>
 800160e:	2701      	movs	r7, #1
 8001610:	2938      	cmp	r1, #56	@ 0x38
 8001612:	dc17      	bgt.n	8001644 <__aeabi_dadd+0x98>
 8001614:	2780      	movs	r7, #128	@ 0x80
 8001616:	043f      	lsls	r7, r7, #16
 8001618:	433b      	orrs	r3, r7
 800161a:	291f      	cmp	r1, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0x74>
 800161e:	e1dd      	b.n	80019dc <__aeabi_dadd+0x430>
 8001620:	2720      	movs	r7, #32
 8001622:	1a78      	subs	r0, r7, r1
 8001624:	001f      	movs	r7, r3
 8001626:	4087      	lsls	r7, r0
 8001628:	46ba      	mov	sl, r7
 800162a:	0017      	movs	r7, r2
 800162c:	40cf      	lsrs	r7, r1
 800162e:	4684      	mov	ip, r0
 8001630:	0038      	movs	r0, r7
 8001632:	4657      	mov	r7, sl
 8001634:	4307      	orrs	r7, r0
 8001636:	4660      	mov	r0, ip
 8001638:	4082      	lsls	r2, r0
 800163a:	40cb      	lsrs	r3, r1
 800163c:	1e50      	subs	r0, r2, #1
 800163e:	4182      	sbcs	r2, r0
 8001640:	1af6      	subs	r6, r6, r3
 8001642:	4317      	orrs	r7, r2
 8001644:	464b      	mov	r3, r9
 8001646:	1bdf      	subs	r7, r3, r7
 8001648:	45b9      	cmp	r9, r7
 800164a:	4180      	sbcs	r0, r0
 800164c:	4240      	negs	r0, r0
 800164e:	1a36      	subs	r6, r6, r0
 8001650:	0233      	lsls	r3, r6, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0xaa>
 8001654:	e0ff      	b.n	8001856 <__aeabi_dadd+0x2aa>
 8001656:	0276      	lsls	r6, r6, #9
 8001658:	0a76      	lsrs	r6, r6, #9
 800165a:	2e00      	cmp	r6, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0xb4>
 800165e:	e13c      	b.n	80018da <__aeabi_dadd+0x32e>
 8001660:	0030      	movs	r0, r6
 8001662:	f002 f80d 	bl	8003680 <__clzsi2>
 8001666:	0003      	movs	r3, r0
 8001668:	3b08      	subs	r3, #8
 800166a:	2120      	movs	r1, #32
 800166c:	0038      	movs	r0, r7
 800166e:	1aca      	subs	r2, r1, r3
 8001670:	40d0      	lsrs	r0, r2
 8001672:	409e      	lsls	r6, r3
 8001674:	0002      	movs	r2, r0
 8001676:	409f      	lsls	r7, r3
 8001678:	4332      	orrs	r2, r6
 800167a:	429c      	cmp	r4, r3
 800167c:	dd00      	ble.n	8001680 <__aeabi_dadd+0xd4>
 800167e:	e1a6      	b.n	80019ce <__aeabi_dadd+0x422>
 8001680:	1b18      	subs	r0, r3, r4
 8001682:	3001      	adds	r0, #1
 8001684:	1a09      	subs	r1, r1, r0
 8001686:	003e      	movs	r6, r7
 8001688:	408f      	lsls	r7, r1
 800168a:	40c6      	lsrs	r6, r0
 800168c:	1e7b      	subs	r3, r7, #1
 800168e:	419f      	sbcs	r7, r3
 8001690:	0013      	movs	r3, r2
 8001692:	408b      	lsls	r3, r1
 8001694:	4337      	orrs	r7, r6
 8001696:	431f      	orrs	r7, r3
 8001698:	40c2      	lsrs	r2, r0
 800169a:	003b      	movs	r3, r7
 800169c:	0016      	movs	r6, r2
 800169e:	2400      	movs	r4, #0
 80016a0:	4313      	orrs	r3, r2
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0xfa>
 80016a4:	e1df      	b.n	8001a66 <__aeabi_dadd+0x4ba>
 80016a6:	077b      	lsls	r3, r7, #29
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x100>
 80016aa:	e332      	b.n	8001d12 <__aeabi_dadd+0x766>
 80016ac:	230f      	movs	r3, #15
 80016ae:	003a      	movs	r2, r7
 80016b0:	403b      	ands	r3, r7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d004      	beq.n	80016c0 <__aeabi_dadd+0x114>
 80016b6:	1d3a      	adds	r2, r7, #4
 80016b8:	42ba      	cmp	r2, r7
 80016ba:	41bf      	sbcs	r7, r7
 80016bc:	427f      	negs	r7, r7
 80016be:	19f6      	adds	r6, r6, r7
 80016c0:	0233      	lsls	r3, r6, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0x11a>
 80016c4:	e323      	b.n	8001d0e <__aeabi_dadd+0x762>
 80016c6:	4b9c      	ldr	r3, [pc, #624]	@ (8001938 <__aeabi_dadd+0x38c>)
 80016c8:	3401      	adds	r4, #1
 80016ca:	429c      	cmp	r4, r3
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x124>
 80016ce:	e0b4      	b.n	800183a <__aeabi_dadd+0x28e>
 80016d0:	4b9a      	ldr	r3, [pc, #616]	@ (800193c <__aeabi_dadd+0x390>)
 80016d2:	0564      	lsls	r4, r4, #21
 80016d4:	401e      	ands	r6, r3
 80016d6:	0d64      	lsrs	r4, r4, #21
 80016d8:	0777      	lsls	r7, r6, #29
 80016da:	08d2      	lsrs	r2, r2, #3
 80016dc:	0276      	lsls	r6, r6, #9
 80016de:	4317      	orrs	r7, r2
 80016e0:	0b36      	lsrs	r6, r6, #12
 80016e2:	e0ac      	b.n	800183e <__aeabi_dadd+0x292>
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_dadd+0x13e>
 80016e8:	e07e      	b.n	80017e8 <__aeabi_dadd+0x23c>
 80016ea:	4641      	mov	r1, r8
 80016ec:	1b09      	subs	r1, r1, r4
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dadd+0x148>
 80016f2:	e160      	b.n	80019b6 <__aeabi_dadd+0x40a>
 80016f4:	0034      	movs	r4, r6
 80016f6:	4648      	mov	r0, r9
 80016f8:	4304      	orrs	r4, r0
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x152>
 80016fc:	e1c9      	b.n	8001a92 <__aeabi_dadd+0x4e6>
 80016fe:	1e4c      	subs	r4, r1, #1
 8001700:	2901      	cmp	r1, #1
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x15a>
 8001704:	e22e      	b.n	8001b64 <__aeabi_dadd+0x5b8>
 8001706:	4d8c      	ldr	r5, [pc, #560]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001708:	42a9      	cmp	r1, r5
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x162>
 800170c:	e224      	b.n	8001b58 <__aeabi_dadd+0x5ac>
 800170e:	2701      	movs	r7, #1
 8001710:	2c38      	cmp	r4, #56	@ 0x38
 8001712:	dc11      	bgt.n	8001738 <__aeabi_dadd+0x18c>
 8001714:	0021      	movs	r1, r4
 8001716:	291f      	cmp	r1, #31
 8001718:	dd00      	ble.n	800171c <__aeabi_dadd+0x170>
 800171a:	e20b      	b.n	8001b34 <__aeabi_dadd+0x588>
 800171c:	2420      	movs	r4, #32
 800171e:	0037      	movs	r7, r6
 8001720:	4648      	mov	r0, r9
 8001722:	1a64      	subs	r4, r4, r1
 8001724:	40a7      	lsls	r7, r4
 8001726:	40c8      	lsrs	r0, r1
 8001728:	4307      	orrs	r7, r0
 800172a:	4648      	mov	r0, r9
 800172c:	40a0      	lsls	r0, r4
 800172e:	40ce      	lsrs	r6, r1
 8001730:	1e44      	subs	r4, r0, #1
 8001732:	41a0      	sbcs	r0, r4
 8001734:	1b9b      	subs	r3, r3, r6
 8001736:	4307      	orrs	r7, r0
 8001738:	1bd7      	subs	r7, r2, r7
 800173a:	42ba      	cmp	r2, r7
 800173c:	4192      	sbcs	r2, r2
 800173e:	4252      	negs	r2, r2
 8001740:	4665      	mov	r5, ip
 8001742:	4644      	mov	r4, r8
 8001744:	1a9e      	subs	r6, r3, r2
 8001746:	e783      	b.n	8001650 <__aeabi_dadd+0xa4>
 8001748:	2900      	cmp	r1, #0
 800174a:	dc00      	bgt.n	800174e <__aeabi_dadd+0x1a2>
 800174c:	e09c      	b.n	8001888 <__aeabi_dadd+0x2dc>
 800174e:	4647      	mov	r7, r8
 8001750:	2f00      	cmp	r7, #0
 8001752:	d167      	bne.n	8001824 <__aeabi_dadd+0x278>
 8001754:	001f      	movs	r7, r3
 8001756:	4317      	orrs	r7, r2
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x1b0>
 800175a:	e0e4      	b.n	8001926 <__aeabi_dadd+0x37a>
 800175c:	1e48      	subs	r0, r1, #1
 800175e:	2901      	cmp	r1, #1
 8001760:	d100      	bne.n	8001764 <__aeabi_dadd+0x1b8>
 8001762:	e19b      	b.n	8001a9c <__aeabi_dadd+0x4f0>
 8001764:	4f74      	ldr	r7, [pc, #464]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001766:	42b9      	cmp	r1, r7
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x1c0>
 800176a:	e0eb      	b.n	8001944 <__aeabi_dadd+0x398>
 800176c:	2701      	movs	r7, #1
 800176e:	0001      	movs	r1, r0
 8001770:	2838      	cmp	r0, #56	@ 0x38
 8001772:	dc11      	bgt.n	8001798 <__aeabi_dadd+0x1ec>
 8001774:	291f      	cmp	r1, #31
 8001776:	dd00      	ble.n	800177a <__aeabi_dadd+0x1ce>
 8001778:	e1c7      	b.n	8001b0a <__aeabi_dadd+0x55e>
 800177a:	2720      	movs	r7, #32
 800177c:	1a78      	subs	r0, r7, r1
 800177e:	001f      	movs	r7, r3
 8001780:	4684      	mov	ip, r0
 8001782:	4087      	lsls	r7, r0
 8001784:	0010      	movs	r0, r2
 8001786:	40c8      	lsrs	r0, r1
 8001788:	4307      	orrs	r7, r0
 800178a:	4660      	mov	r0, ip
 800178c:	4082      	lsls	r2, r0
 800178e:	40cb      	lsrs	r3, r1
 8001790:	1e50      	subs	r0, r2, #1
 8001792:	4182      	sbcs	r2, r0
 8001794:	18f6      	adds	r6, r6, r3
 8001796:	4317      	orrs	r7, r2
 8001798:	444f      	add	r7, r9
 800179a:	454f      	cmp	r7, r9
 800179c:	4180      	sbcs	r0, r0
 800179e:	4240      	negs	r0, r0
 80017a0:	1836      	adds	r6, r6, r0
 80017a2:	0233      	lsls	r3, r6, #8
 80017a4:	d557      	bpl.n	8001856 <__aeabi_dadd+0x2aa>
 80017a6:	4b64      	ldr	r3, [pc, #400]	@ (8001938 <__aeabi_dadd+0x38c>)
 80017a8:	3401      	adds	r4, #1
 80017aa:	429c      	cmp	r4, r3
 80017ac:	d045      	beq.n	800183a <__aeabi_dadd+0x28e>
 80017ae:	2101      	movs	r1, #1
 80017b0:	4b62      	ldr	r3, [pc, #392]	@ (800193c <__aeabi_dadd+0x390>)
 80017b2:	087a      	lsrs	r2, r7, #1
 80017b4:	401e      	ands	r6, r3
 80017b6:	4039      	ands	r1, r7
 80017b8:	430a      	orrs	r2, r1
 80017ba:	07f7      	lsls	r7, r6, #31
 80017bc:	4317      	orrs	r7, r2
 80017be:	0876      	lsrs	r6, r6, #1
 80017c0:	e771      	b.n	80016a6 <__aeabi_dadd+0xfa>
 80017c2:	001f      	movs	r7, r3
 80017c4:	4317      	orrs	r7, r2
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x21e>
 80017c8:	e0ad      	b.n	8001926 <__aeabi_dadd+0x37a>
 80017ca:	1e4f      	subs	r7, r1, #1
 80017cc:	46bc      	mov	ip, r7
 80017ce:	2901      	cmp	r1, #1
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dadd+0x228>
 80017d2:	e182      	b.n	8001ada <__aeabi_dadd+0x52e>
 80017d4:	4f58      	ldr	r7, [pc, #352]	@ (8001938 <__aeabi_dadd+0x38c>)
 80017d6:	42b9      	cmp	r1, r7
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x230>
 80017da:	e190      	b.n	8001afe <__aeabi_dadd+0x552>
 80017dc:	4661      	mov	r1, ip
 80017de:	2701      	movs	r7, #1
 80017e0:	2938      	cmp	r1, #56	@ 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dadd+0x23a>
 80017e4:	e72e      	b.n	8001644 <__aeabi_dadd+0x98>
 80017e6:	e718      	b.n	800161a <__aeabi_dadd+0x6e>
 80017e8:	4f55      	ldr	r7, [pc, #340]	@ (8001940 <__aeabi_dadd+0x394>)
 80017ea:	1c61      	adds	r1, r4, #1
 80017ec:	4239      	tst	r1, r7
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x246>
 80017f0:	e0d0      	b.n	8001994 <__aeabi_dadd+0x3e8>
 80017f2:	0031      	movs	r1, r6
 80017f4:	4648      	mov	r0, r9
 80017f6:	001f      	movs	r7, r3
 80017f8:	4301      	orrs	r1, r0
 80017fa:	4317      	orrs	r7, r2
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d000      	beq.n	8001802 <__aeabi_dadd+0x256>
 8001800:	e13d      	b.n	8001a7e <__aeabi_dadd+0x4d2>
 8001802:	2900      	cmp	r1, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x25c>
 8001806:	e1bc      	b.n	8001b82 <__aeabi_dadd+0x5d6>
 8001808:	2f00      	cmp	r7, #0
 800180a:	d000      	beq.n	800180e <__aeabi_dadd+0x262>
 800180c:	e1bf      	b.n	8001b8e <__aeabi_dadd+0x5e2>
 800180e:	464b      	mov	r3, r9
 8001810:	2100      	movs	r1, #0
 8001812:	08d8      	lsrs	r0, r3, #3
 8001814:	0777      	lsls	r7, r6, #29
 8001816:	4307      	orrs	r7, r0
 8001818:	08f0      	lsrs	r0, r6, #3
 800181a:	0306      	lsls	r6, r0, #12
 800181c:	054c      	lsls	r4, r1, #21
 800181e:	0b36      	lsrs	r6, r6, #12
 8001820:	0d64      	lsrs	r4, r4, #21
 8001822:	e00c      	b.n	800183e <__aeabi_dadd+0x292>
 8001824:	4f44      	ldr	r7, [pc, #272]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001826:	42bc      	cmp	r4, r7
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x280>
 800182a:	e08b      	b.n	8001944 <__aeabi_dadd+0x398>
 800182c:	2701      	movs	r7, #1
 800182e:	2938      	cmp	r1, #56	@ 0x38
 8001830:	dcb2      	bgt.n	8001798 <__aeabi_dadd+0x1ec>
 8001832:	2780      	movs	r7, #128	@ 0x80
 8001834:	043f      	lsls	r7, r7, #16
 8001836:	433b      	orrs	r3, r7
 8001838:	e79c      	b.n	8001774 <__aeabi_dadd+0x1c8>
 800183a:	2600      	movs	r6, #0
 800183c:	2700      	movs	r7, #0
 800183e:	0524      	lsls	r4, r4, #20
 8001840:	4334      	orrs	r4, r6
 8001842:	07ed      	lsls	r5, r5, #31
 8001844:	432c      	orrs	r4, r5
 8001846:	0038      	movs	r0, r7
 8001848:	0021      	movs	r1, r4
 800184a:	b002      	add	sp, #8
 800184c:	bce0      	pop	{r5, r6, r7}
 800184e:	46ba      	mov	sl, r7
 8001850:	46b1      	mov	r9, r6
 8001852:	46a8      	mov	r8, r5
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	077b      	lsls	r3, r7, #29
 8001858:	d004      	beq.n	8001864 <__aeabi_dadd+0x2b8>
 800185a:	230f      	movs	r3, #15
 800185c:	403b      	ands	r3, r7
 800185e:	2b04      	cmp	r3, #4
 8001860:	d000      	beq.n	8001864 <__aeabi_dadd+0x2b8>
 8001862:	e728      	b.n	80016b6 <__aeabi_dadd+0x10a>
 8001864:	08f8      	lsrs	r0, r7, #3
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001868:	0777      	lsls	r7, r6, #29
 800186a:	4307      	orrs	r7, r0
 800186c:	08f0      	lsrs	r0, r6, #3
 800186e:	429c      	cmp	r4, r3
 8001870:	d000      	beq.n	8001874 <__aeabi_dadd+0x2c8>
 8001872:	e24a      	b.n	8001d0a <__aeabi_dadd+0x75e>
 8001874:	003b      	movs	r3, r7
 8001876:	4303      	orrs	r3, r0
 8001878:	d059      	beq.n	800192e <__aeabi_dadd+0x382>
 800187a:	2680      	movs	r6, #128	@ 0x80
 800187c:	0336      	lsls	r6, r6, #12
 800187e:	4306      	orrs	r6, r0
 8001880:	0336      	lsls	r6, r6, #12
 8001882:	4c2d      	ldr	r4, [pc, #180]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001884:	0b36      	lsrs	r6, r6, #12
 8001886:	e7da      	b.n	800183e <__aeabi_dadd+0x292>
 8001888:	2900      	cmp	r1, #0
 800188a:	d061      	beq.n	8001950 <__aeabi_dadd+0x3a4>
 800188c:	4641      	mov	r1, r8
 800188e:	1b09      	subs	r1, r1, r4
 8001890:	2c00      	cmp	r4, #0
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0x2ea>
 8001894:	e0b9      	b.n	8001a0a <__aeabi_dadd+0x45e>
 8001896:	4c28      	ldr	r4, [pc, #160]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001898:	45a0      	cmp	r8, r4
 800189a:	d100      	bne.n	800189e <__aeabi_dadd+0x2f2>
 800189c:	e1a5      	b.n	8001bea <__aeabi_dadd+0x63e>
 800189e:	2701      	movs	r7, #1
 80018a0:	2938      	cmp	r1, #56	@ 0x38
 80018a2:	dc13      	bgt.n	80018cc <__aeabi_dadd+0x320>
 80018a4:	2480      	movs	r4, #128	@ 0x80
 80018a6:	0424      	lsls	r4, r4, #16
 80018a8:	4326      	orrs	r6, r4
 80018aa:	291f      	cmp	r1, #31
 80018ac:	dd00      	ble.n	80018b0 <__aeabi_dadd+0x304>
 80018ae:	e1c8      	b.n	8001c42 <__aeabi_dadd+0x696>
 80018b0:	2420      	movs	r4, #32
 80018b2:	0037      	movs	r7, r6
 80018b4:	4648      	mov	r0, r9
 80018b6:	1a64      	subs	r4, r4, r1
 80018b8:	40a7      	lsls	r7, r4
 80018ba:	40c8      	lsrs	r0, r1
 80018bc:	4307      	orrs	r7, r0
 80018be:	4648      	mov	r0, r9
 80018c0:	40a0      	lsls	r0, r4
 80018c2:	40ce      	lsrs	r6, r1
 80018c4:	1e44      	subs	r4, r0, #1
 80018c6:	41a0      	sbcs	r0, r4
 80018c8:	199b      	adds	r3, r3, r6
 80018ca:	4307      	orrs	r7, r0
 80018cc:	18bf      	adds	r7, r7, r2
 80018ce:	4297      	cmp	r7, r2
 80018d0:	4192      	sbcs	r2, r2
 80018d2:	4252      	negs	r2, r2
 80018d4:	4644      	mov	r4, r8
 80018d6:	18d6      	adds	r6, r2, r3
 80018d8:	e763      	b.n	80017a2 <__aeabi_dadd+0x1f6>
 80018da:	0038      	movs	r0, r7
 80018dc:	f001 fed0 	bl	8003680 <__clzsi2>
 80018e0:	0003      	movs	r3, r0
 80018e2:	3318      	adds	r3, #24
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	dc00      	bgt.n	80018ea <__aeabi_dadd+0x33e>
 80018e8:	e6bf      	b.n	800166a <__aeabi_dadd+0xbe>
 80018ea:	003a      	movs	r2, r7
 80018ec:	3808      	subs	r0, #8
 80018ee:	4082      	lsls	r2, r0
 80018f0:	429c      	cmp	r4, r3
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dadd+0x34a>
 80018f4:	e083      	b.n	80019fe <__aeabi_dadd+0x452>
 80018f6:	1b1b      	subs	r3, r3, r4
 80018f8:	1c58      	adds	r0, r3, #1
 80018fa:	281f      	cmp	r0, #31
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dadd+0x354>
 80018fe:	e1b4      	b.n	8001c6a <__aeabi_dadd+0x6be>
 8001900:	0017      	movs	r7, r2
 8001902:	3b1f      	subs	r3, #31
 8001904:	40df      	lsrs	r7, r3
 8001906:	2820      	cmp	r0, #32
 8001908:	d005      	beq.n	8001916 <__aeabi_dadd+0x36a>
 800190a:	2340      	movs	r3, #64	@ 0x40
 800190c:	1a1b      	subs	r3, r3, r0
 800190e:	409a      	lsls	r2, r3
 8001910:	1e53      	subs	r3, r2, #1
 8001912:	419a      	sbcs	r2, r3
 8001914:	4317      	orrs	r7, r2
 8001916:	2400      	movs	r4, #0
 8001918:	2f00      	cmp	r7, #0
 800191a:	d00a      	beq.n	8001932 <__aeabi_dadd+0x386>
 800191c:	077b      	lsls	r3, r7, #29
 800191e:	d000      	beq.n	8001922 <__aeabi_dadd+0x376>
 8001920:	e6c4      	b.n	80016ac <__aeabi_dadd+0x100>
 8001922:	0026      	movs	r6, r4
 8001924:	e79e      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001926:	464b      	mov	r3, r9
 8001928:	000c      	movs	r4, r1
 800192a:	08d8      	lsrs	r0, r3, #3
 800192c:	e79b      	b.n	8001866 <__aeabi_dadd+0x2ba>
 800192e:	2700      	movs	r7, #0
 8001930:	4c01      	ldr	r4, [pc, #4]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001932:	2600      	movs	r6, #0
 8001934:	e783      	b.n	800183e <__aeabi_dadd+0x292>
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	000007ff 	.word	0x000007ff
 800193c:	ff7fffff 	.word	0xff7fffff
 8001940:	000007fe 	.word	0x000007fe
 8001944:	464b      	mov	r3, r9
 8001946:	0777      	lsls	r7, r6, #29
 8001948:	08d8      	lsrs	r0, r3, #3
 800194a:	4307      	orrs	r7, r0
 800194c:	08f0      	lsrs	r0, r6, #3
 800194e:	e791      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001950:	4fcd      	ldr	r7, [pc, #820]	@ (8001c88 <__aeabi_dadd+0x6dc>)
 8001952:	1c61      	adds	r1, r4, #1
 8001954:	4239      	tst	r1, r7
 8001956:	d16b      	bne.n	8001a30 <__aeabi_dadd+0x484>
 8001958:	0031      	movs	r1, r6
 800195a:	4648      	mov	r0, r9
 800195c:	4301      	orrs	r1, r0
 800195e:	2c00      	cmp	r4, #0
 8001960:	d000      	beq.n	8001964 <__aeabi_dadd+0x3b8>
 8001962:	e14b      	b.n	8001bfc <__aeabi_dadd+0x650>
 8001964:	001f      	movs	r7, r3
 8001966:	4317      	orrs	r7, r2
 8001968:	2900      	cmp	r1, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dadd+0x3c2>
 800196c:	e181      	b.n	8001c72 <__aeabi_dadd+0x6c6>
 800196e:	2f00      	cmp	r7, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x3c8>
 8001972:	e74c      	b.n	800180e <__aeabi_dadd+0x262>
 8001974:	444a      	add	r2, r9
 8001976:	454a      	cmp	r2, r9
 8001978:	4180      	sbcs	r0, r0
 800197a:	18f6      	adds	r6, r6, r3
 800197c:	4240      	negs	r0, r0
 800197e:	1836      	adds	r6, r6, r0
 8001980:	0233      	lsls	r3, r6, #8
 8001982:	d500      	bpl.n	8001986 <__aeabi_dadd+0x3da>
 8001984:	e1b0      	b.n	8001ce8 <__aeabi_dadd+0x73c>
 8001986:	0017      	movs	r7, r2
 8001988:	4691      	mov	r9, r2
 800198a:	4337      	orrs	r7, r6
 800198c:	d000      	beq.n	8001990 <__aeabi_dadd+0x3e4>
 800198e:	e73e      	b.n	800180e <__aeabi_dadd+0x262>
 8001990:	2600      	movs	r6, #0
 8001992:	e754      	b.n	800183e <__aeabi_dadd+0x292>
 8001994:	4649      	mov	r1, r9
 8001996:	1a89      	subs	r1, r1, r2
 8001998:	4688      	mov	r8, r1
 800199a:	45c1      	cmp	r9, r8
 800199c:	41bf      	sbcs	r7, r7
 800199e:	1af1      	subs	r1, r6, r3
 80019a0:	427f      	negs	r7, r7
 80019a2:	1bc9      	subs	r1, r1, r7
 80019a4:	020f      	lsls	r7, r1, #8
 80019a6:	d461      	bmi.n	8001a6c <__aeabi_dadd+0x4c0>
 80019a8:	4647      	mov	r7, r8
 80019aa:	430f      	orrs	r7, r1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dadd+0x404>
 80019ae:	e0bd      	b.n	8001b2c <__aeabi_dadd+0x580>
 80019b0:	000e      	movs	r6, r1
 80019b2:	4647      	mov	r7, r8
 80019b4:	e651      	b.n	800165a <__aeabi_dadd+0xae>
 80019b6:	4cb5      	ldr	r4, [pc, #724]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 80019b8:	45a0      	cmp	r8, r4
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x412>
 80019bc:	e100      	b.n	8001bc0 <__aeabi_dadd+0x614>
 80019be:	2701      	movs	r7, #1
 80019c0:	2938      	cmp	r1, #56	@ 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dadd+0x41a>
 80019c4:	e6b8      	b.n	8001738 <__aeabi_dadd+0x18c>
 80019c6:	2480      	movs	r4, #128	@ 0x80
 80019c8:	0424      	lsls	r4, r4, #16
 80019ca:	4326      	orrs	r6, r4
 80019cc:	e6a3      	b.n	8001716 <__aeabi_dadd+0x16a>
 80019ce:	4eb0      	ldr	r6, [pc, #704]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 80019d0:	1ae4      	subs	r4, r4, r3
 80019d2:	4016      	ands	r6, r2
 80019d4:	077b      	lsls	r3, r7, #29
 80019d6:	d000      	beq.n	80019da <__aeabi_dadd+0x42e>
 80019d8:	e73f      	b.n	800185a <__aeabi_dadd+0x2ae>
 80019da:	e743      	b.n	8001864 <__aeabi_dadd+0x2b8>
 80019dc:	000f      	movs	r7, r1
 80019de:	0018      	movs	r0, r3
 80019e0:	3f20      	subs	r7, #32
 80019e2:	40f8      	lsrs	r0, r7
 80019e4:	4684      	mov	ip, r0
 80019e6:	2920      	cmp	r1, #32
 80019e8:	d003      	beq.n	80019f2 <__aeabi_dadd+0x446>
 80019ea:	2740      	movs	r7, #64	@ 0x40
 80019ec:	1a79      	subs	r1, r7, r1
 80019ee:	408b      	lsls	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	1e53      	subs	r3, r2, #1
 80019f4:	419a      	sbcs	r2, r3
 80019f6:	4663      	mov	r3, ip
 80019f8:	0017      	movs	r7, r2
 80019fa:	431f      	orrs	r7, r3
 80019fc:	e622      	b.n	8001644 <__aeabi_dadd+0x98>
 80019fe:	48a4      	ldr	r0, [pc, #656]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 8001a00:	1ae1      	subs	r1, r4, r3
 8001a02:	4010      	ands	r0, r2
 8001a04:	0747      	lsls	r7, r0, #29
 8001a06:	08c0      	lsrs	r0, r0, #3
 8001a08:	e707      	b.n	800181a <__aeabi_dadd+0x26e>
 8001a0a:	0034      	movs	r4, r6
 8001a0c:	4648      	mov	r0, r9
 8001a0e:	4304      	orrs	r4, r0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x468>
 8001a12:	e0fa      	b.n	8001c0a <__aeabi_dadd+0x65e>
 8001a14:	1e4c      	subs	r4, r1, #1
 8001a16:	2901      	cmp	r1, #1
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dadd+0x470>
 8001a1a:	e0d7      	b.n	8001bcc <__aeabi_dadd+0x620>
 8001a1c:	4f9b      	ldr	r7, [pc, #620]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a1e:	42b9      	cmp	r1, r7
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dadd+0x478>
 8001a22:	e0e2      	b.n	8001bea <__aeabi_dadd+0x63e>
 8001a24:	2701      	movs	r7, #1
 8001a26:	2c38      	cmp	r4, #56	@ 0x38
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dadd+0x480>
 8001a2a:	e74f      	b.n	80018cc <__aeabi_dadd+0x320>
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	e73c      	b.n	80018aa <__aeabi_dadd+0x2fe>
 8001a30:	4c96      	ldr	r4, [pc, #600]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a32:	42a1      	cmp	r1, r4
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x48c>
 8001a36:	e0dd      	b.n	8001bf4 <__aeabi_dadd+0x648>
 8001a38:	444a      	add	r2, r9
 8001a3a:	454a      	cmp	r2, r9
 8001a3c:	4180      	sbcs	r0, r0
 8001a3e:	18f3      	adds	r3, r6, r3
 8001a40:	4240      	negs	r0, r0
 8001a42:	1818      	adds	r0, r3, r0
 8001a44:	07c7      	lsls	r7, r0, #31
 8001a46:	0852      	lsrs	r2, r2, #1
 8001a48:	4317      	orrs	r7, r2
 8001a4a:	0846      	lsrs	r6, r0, #1
 8001a4c:	0752      	lsls	r2, r2, #29
 8001a4e:	d005      	beq.n	8001a5c <__aeabi_dadd+0x4b0>
 8001a50:	220f      	movs	r2, #15
 8001a52:	000c      	movs	r4, r1
 8001a54:	403a      	ands	r2, r7
 8001a56:	2a04      	cmp	r2, #4
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dadd+0x4b0>
 8001a5a:	e62c      	b.n	80016b6 <__aeabi_dadd+0x10a>
 8001a5c:	0776      	lsls	r6, r6, #29
 8001a5e:	08ff      	lsrs	r7, r7, #3
 8001a60:	4337      	orrs	r7, r6
 8001a62:	0900      	lsrs	r0, r0, #4
 8001a64:	e6d9      	b.n	800181a <__aeabi_dadd+0x26e>
 8001a66:	2700      	movs	r7, #0
 8001a68:	2600      	movs	r6, #0
 8001a6a:	e6e8      	b.n	800183e <__aeabi_dadd+0x292>
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	1a57      	subs	r7, r2, r1
 8001a70:	42ba      	cmp	r2, r7
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	1b9e      	subs	r6, r3, r6
 8001a76:	4252      	negs	r2, r2
 8001a78:	4665      	mov	r5, ip
 8001a7a:	1ab6      	subs	r6, r6, r2
 8001a7c:	e5ed      	b.n	800165a <__aeabi_dadd+0xae>
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dadd+0x4d8>
 8001a82:	e0c6      	b.n	8001c12 <__aeabi_dadd+0x666>
 8001a84:	2f00      	cmp	r7, #0
 8001a86:	d167      	bne.n	8001b58 <__aeabi_dadd+0x5ac>
 8001a88:	2680      	movs	r6, #128	@ 0x80
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4c7f      	ldr	r4, [pc, #508]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a8e:	0336      	lsls	r6, r6, #12
 8001a90:	e6d5      	b.n	800183e <__aeabi_dadd+0x292>
 8001a92:	4665      	mov	r5, ip
 8001a94:	000c      	movs	r4, r1
 8001a96:	001e      	movs	r6, r3
 8001a98:	08d0      	lsrs	r0, r2, #3
 8001a9a:	e6e4      	b.n	8001866 <__aeabi_dadd+0x2ba>
 8001a9c:	444a      	add	r2, r9
 8001a9e:	454a      	cmp	r2, r9
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	18f3      	adds	r3, r6, r3
 8001aa4:	4240      	negs	r0, r0
 8001aa6:	1818      	adds	r0, r3, r0
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0203      	lsls	r3, r0, #8
 8001aac:	d400      	bmi.n	8001ab0 <__aeabi_dadd+0x504>
 8001aae:	e096      	b.n	8001bde <__aeabi_dadd+0x632>
 8001ab0:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 8001ab2:	0849      	lsrs	r1, r1, #1
 8001ab4:	4018      	ands	r0, r3
 8001ab6:	07c3      	lsls	r3, r0, #31
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	0844      	lsrs	r4, r0, #1
 8001abc:	0749      	lsls	r1, r1, #29
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dadd+0x516>
 8001ac0:	e129      	b.n	8001d16 <__aeabi_dadd+0x76a>
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	2a04      	cmp	r2, #4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dadd+0x520>
 8001aca:	e0ea      	b.n	8001ca2 <__aeabi_dadd+0x6f6>
 8001acc:	1d1f      	adds	r7, r3, #4
 8001ace:	429f      	cmp	r7, r3
 8001ad0:	41b6      	sbcs	r6, r6
 8001ad2:	4276      	negs	r6, r6
 8001ad4:	1936      	adds	r6, r6, r4
 8001ad6:	2402      	movs	r4, #2
 8001ad8:	e6c4      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001ada:	4649      	mov	r1, r9
 8001adc:	1a8f      	subs	r7, r1, r2
 8001ade:	45b9      	cmp	r9, r7
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	1af6      	subs	r6, r6, r3
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	1a36      	subs	r6, r6, r0
 8001ae8:	0233      	lsls	r3, r6, #8
 8001aea:	d406      	bmi.n	8001afa <__aeabi_dadd+0x54e>
 8001aec:	0773      	lsls	r3, r6, #29
 8001aee:	08ff      	lsrs	r7, r7, #3
 8001af0:	2101      	movs	r1, #1
 8001af2:	431f      	orrs	r7, r3
 8001af4:	08f0      	lsrs	r0, r6, #3
 8001af6:	e690      	b.n	800181a <__aeabi_dadd+0x26e>
 8001af8:	4665      	mov	r5, ip
 8001afa:	2401      	movs	r4, #1
 8001afc:	e5ab      	b.n	8001656 <__aeabi_dadd+0xaa>
 8001afe:	464b      	mov	r3, r9
 8001b00:	0777      	lsls	r7, r6, #29
 8001b02:	08d8      	lsrs	r0, r3, #3
 8001b04:	4307      	orrs	r7, r0
 8001b06:	08f0      	lsrs	r0, r6, #3
 8001b08:	e6b4      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001b0a:	000f      	movs	r7, r1
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	3f20      	subs	r7, #32
 8001b10:	40f8      	lsrs	r0, r7
 8001b12:	4684      	mov	ip, r0
 8001b14:	2920      	cmp	r1, #32
 8001b16:	d003      	beq.n	8001b20 <__aeabi_dadd+0x574>
 8001b18:	2740      	movs	r7, #64	@ 0x40
 8001b1a:	1a79      	subs	r1, r7, r1
 8001b1c:	408b      	lsls	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	1e53      	subs	r3, r2, #1
 8001b22:	419a      	sbcs	r2, r3
 8001b24:	4663      	mov	r3, ip
 8001b26:	0017      	movs	r7, r2
 8001b28:	431f      	orrs	r7, r3
 8001b2a:	e635      	b.n	8001798 <__aeabi_dadd+0x1ec>
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	2400      	movs	r4, #0
 8001b30:	2600      	movs	r6, #0
 8001b32:	e684      	b.n	800183e <__aeabi_dadd+0x292>
 8001b34:	000c      	movs	r4, r1
 8001b36:	0035      	movs	r5, r6
 8001b38:	3c20      	subs	r4, #32
 8001b3a:	40e5      	lsrs	r5, r4
 8001b3c:	2920      	cmp	r1, #32
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dadd+0x5a0>
 8001b40:	2440      	movs	r4, #64	@ 0x40
 8001b42:	1a61      	subs	r1, r4, r1
 8001b44:	408e      	lsls	r6, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	4331      	orrs	r1, r6
 8001b4a:	4689      	mov	r9, r1
 8001b4c:	4648      	mov	r0, r9
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	0007      	movs	r7, r0
 8001b54:	432f      	orrs	r7, r5
 8001b56:	e5ef      	b.n	8001738 <__aeabi_dadd+0x18c>
 8001b58:	08d2      	lsrs	r2, r2, #3
 8001b5a:	075f      	lsls	r7, r3, #29
 8001b5c:	4665      	mov	r5, ip
 8001b5e:	4317      	orrs	r7, r2
 8001b60:	08d8      	lsrs	r0, r3, #3
 8001b62:	e687      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001b64:	1a17      	subs	r7, r2, r0
 8001b66:	42ba      	cmp	r2, r7
 8001b68:	4192      	sbcs	r2, r2
 8001b6a:	1b9e      	subs	r6, r3, r6
 8001b6c:	4252      	negs	r2, r2
 8001b6e:	1ab6      	subs	r6, r6, r2
 8001b70:	0233      	lsls	r3, r6, #8
 8001b72:	d4c1      	bmi.n	8001af8 <__aeabi_dadd+0x54c>
 8001b74:	0773      	lsls	r3, r6, #29
 8001b76:	08ff      	lsrs	r7, r7, #3
 8001b78:	4665      	mov	r5, ip
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	431f      	orrs	r7, r3
 8001b7e:	08f0      	lsrs	r0, r6, #3
 8001b80:	e64b      	b.n	800181a <__aeabi_dadd+0x26e>
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	d07b      	beq.n	8001c7e <__aeabi_dadd+0x6d2>
 8001b86:	4665      	mov	r5, ip
 8001b88:	001e      	movs	r6, r3
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	e63f      	b.n	800180e <__aeabi_dadd+0x262>
 8001b8e:	1a81      	subs	r1, r0, r2
 8001b90:	4688      	mov	r8, r1
 8001b92:	45c1      	cmp	r9, r8
 8001b94:	41a4      	sbcs	r4, r4
 8001b96:	1af1      	subs	r1, r6, r3
 8001b98:	4264      	negs	r4, r4
 8001b9a:	1b09      	subs	r1, r1, r4
 8001b9c:	2480      	movs	r4, #128	@ 0x80
 8001b9e:	0424      	lsls	r4, r4, #16
 8001ba0:	4221      	tst	r1, r4
 8001ba2:	d077      	beq.n	8001c94 <__aeabi_dadd+0x6e8>
 8001ba4:	1a10      	subs	r0, r2, r0
 8001ba6:	4282      	cmp	r2, r0
 8001ba8:	4192      	sbcs	r2, r2
 8001baa:	0007      	movs	r7, r0
 8001bac:	1b9e      	subs	r6, r3, r6
 8001bae:	4252      	negs	r2, r2
 8001bb0:	1ab6      	subs	r6, r6, r2
 8001bb2:	4337      	orrs	r7, r6
 8001bb4:	d000      	beq.n	8001bb8 <__aeabi_dadd+0x60c>
 8001bb6:	e0a0      	b.n	8001cfa <__aeabi_dadd+0x74e>
 8001bb8:	4665      	mov	r5, ip
 8001bba:	2400      	movs	r4, #0
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	e63e      	b.n	800183e <__aeabi_dadd+0x292>
 8001bc0:	075f      	lsls	r7, r3, #29
 8001bc2:	08d2      	lsrs	r2, r2, #3
 8001bc4:	4665      	mov	r5, ip
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	08d8      	lsrs	r0, r3, #3
 8001bca:	e653      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001bcc:	1881      	adds	r1, r0, r2
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	18f0      	adds	r0, r6, r3
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1880      	adds	r0, r0, r2
 8001bd8:	0203      	lsls	r3, r0, #8
 8001bda:	d500      	bpl.n	8001bde <__aeabi_dadd+0x632>
 8001bdc:	e768      	b.n	8001ab0 <__aeabi_dadd+0x504>
 8001bde:	0747      	lsls	r7, r0, #29
 8001be0:	08c9      	lsrs	r1, r1, #3
 8001be2:	430f      	orrs	r7, r1
 8001be4:	08c0      	lsrs	r0, r0, #3
 8001be6:	2101      	movs	r1, #1
 8001be8:	e617      	b.n	800181a <__aeabi_dadd+0x26e>
 8001bea:	08d2      	lsrs	r2, r2, #3
 8001bec:	075f      	lsls	r7, r3, #29
 8001bee:	4317      	orrs	r7, r2
 8001bf0:	08d8      	lsrs	r0, r3, #3
 8001bf2:	e63f      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001bf4:	000c      	movs	r4, r1
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	2700      	movs	r7, #0
 8001bfa:	e620      	b.n	800183e <__aeabi_dadd+0x292>
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	d156      	bne.n	8001cae <__aeabi_dadd+0x702>
 8001c00:	075f      	lsls	r7, r3, #29
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	4317      	orrs	r7, r2
 8001c06:	08d8      	lsrs	r0, r3, #3
 8001c08:	e634      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001c0a:	000c      	movs	r4, r1
 8001c0c:	001e      	movs	r6, r3
 8001c0e:	08d0      	lsrs	r0, r2, #3
 8001c10:	e629      	b.n	8001866 <__aeabi_dadd+0x2ba>
 8001c12:	08c1      	lsrs	r1, r0, #3
 8001c14:	0770      	lsls	r0, r6, #29
 8001c16:	4301      	orrs	r1, r0
 8001c18:	08f0      	lsrs	r0, r6, #3
 8001c1a:	2f00      	cmp	r7, #0
 8001c1c:	d062      	beq.n	8001ce4 <__aeabi_dadd+0x738>
 8001c1e:	2480      	movs	r4, #128	@ 0x80
 8001c20:	0324      	lsls	r4, r4, #12
 8001c22:	4220      	tst	r0, r4
 8001c24:	d007      	beq.n	8001c36 <__aeabi_dadd+0x68a>
 8001c26:	08de      	lsrs	r6, r3, #3
 8001c28:	4226      	tst	r6, r4
 8001c2a:	d104      	bne.n	8001c36 <__aeabi_dadd+0x68a>
 8001c2c:	4665      	mov	r5, ip
 8001c2e:	0030      	movs	r0, r6
 8001c30:	08d1      	lsrs	r1, r2, #3
 8001c32:	075b      	lsls	r3, r3, #29
 8001c34:	4319      	orrs	r1, r3
 8001c36:	0f4f      	lsrs	r7, r1, #29
 8001c38:	00c9      	lsls	r1, r1, #3
 8001c3a:	08c9      	lsrs	r1, r1, #3
 8001c3c:	077f      	lsls	r7, r7, #29
 8001c3e:	430f      	orrs	r7, r1
 8001c40:	e618      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001c42:	000c      	movs	r4, r1
 8001c44:	0030      	movs	r0, r6
 8001c46:	3c20      	subs	r4, #32
 8001c48:	40e0      	lsrs	r0, r4
 8001c4a:	4684      	mov	ip, r0
 8001c4c:	2920      	cmp	r1, #32
 8001c4e:	d005      	beq.n	8001c5c <__aeabi_dadd+0x6b0>
 8001c50:	2440      	movs	r4, #64	@ 0x40
 8001c52:	1a61      	subs	r1, r4, r1
 8001c54:	408e      	lsls	r6, r1
 8001c56:	4649      	mov	r1, r9
 8001c58:	4331      	orrs	r1, r6
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1e41      	subs	r1, r0, #1
 8001c60:	4188      	sbcs	r0, r1
 8001c62:	4661      	mov	r1, ip
 8001c64:	0007      	movs	r7, r0
 8001c66:	430f      	orrs	r7, r1
 8001c68:	e630      	b.n	80018cc <__aeabi_dadd+0x320>
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	1a09      	subs	r1, r1, r0
 8001c70:	e50e      	b.n	8001690 <__aeabi_dadd+0xe4>
 8001c72:	001e      	movs	r6, r3
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dadd+0x6ce>
 8001c78:	e522      	b.n	80016c0 <__aeabi_dadd+0x114>
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	e758      	b.n	8001b30 <__aeabi_dadd+0x584>
 8001c7e:	2500      	movs	r5, #0
 8001c80:	2400      	movs	r4, #0
 8001c82:	2600      	movs	r6, #0
 8001c84:	e5db      	b.n	800183e <__aeabi_dadd+0x292>
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	000007fe 	.word	0x000007fe
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	ff7fffff 	.word	0xff7fffff
 8001c94:	4647      	mov	r7, r8
 8001c96:	430f      	orrs	r7, r1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dadd+0x6f0>
 8001c9a:	e747      	b.n	8001b2c <__aeabi_dadd+0x580>
 8001c9c:	000e      	movs	r6, r1
 8001c9e:	46c1      	mov	r9, r8
 8001ca0:	e5b5      	b.n	800180e <__aeabi_dadd+0x262>
 8001ca2:	08df      	lsrs	r7, r3, #3
 8001ca4:	0764      	lsls	r4, r4, #29
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4327      	orrs	r7, r4
 8001caa:	0900      	lsrs	r0, r0, #4
 8001cac:	e5b5      	b.n	800181a <__aeabi_dadd+0x26e>
 8001cae:	0019      	movs	r1, r3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0777      	lsls	r7, r6, #29
 8001cb4:	4307      	orrs	r7, r0
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	08f0      	lsrs	r0, r6, #3
 8001cba:	2900      	cmp	r1, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dadd+0x714>
 8001cbe:	e5d9      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	0309      	lsls	r1, r1, #12
 8001cc4:	4208      	tst	r0, r1
 8001cc6:	d007      	beq.n	8001cd8 <__aeabi_dadd+0x72c>
 8001cc8:	08dc      	lsrs	r4, r3, #3
 8001cca:	420c      	tst	r4, r1
 8001ccc:	d104      	bne.n	8001cd8 <__aeabi_dadd+0x72c>
 8001cce:	08d2      	lsrs	r2, r2, #3
 8001cd0:	075b      	lsls	r3, r3, #29
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	0017      	movs	r7, r2
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	0f7b      	lsrs	r3, r7, #29
 8001cda:	00ff      	lsls	r7, r7, #3
 8001cdc:	08ff      	lsrs	r7, r7, #3
 8001cde:	075b      	lsls	r3, r3, #29
 8001ce0:	431f      	orrs	r7, r3
 8001ce2:	e5c7      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001ce4:	000f      	movs	r7, r1
 8001ce6:	e5c5      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <__aeabi_dadd+0x788>)
 8001cea:	08d2      	lsrs	r2, r2, #3
 8001cec:	4033      	ands	r3, r6
 8001cee:	075f      	lsls	r7, r3, #29
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	2401      	movs	r4, #1
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	0b1e      	lsrs	r6, r3, #12
 8001cf8:	e5a1      	b.n	800183e <__aeabi_dadd+0x292>
 8001cfa:	4226      	tst	r6, r4
 8001cfc:	d012      	beq.n	8001d24 <__aeabi_dadd+0x778>
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <__aeabi_dadd+0x788>)
 8001d00:	4665      	mov	r5, ip
 8001d02:	0002      	movs	r2, r0
 8001d04:	2401      	movs	r4, #1
 8001d06:	401e      	ands	r6, r3
 8001d08:	e4e6      	b.n	80016d8 <__aeabi_dadd+0x12c>
 8001d0a:	0021      	movs	r1, r4
 8001d0c:	e585      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d0e:	0017      	movs	r7, r2
 8001d10:	e5a8      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001d12:	003a      	movs	r2, r7
 8001d14:	e4d4      	b.n	80016c0 <__aeabi_dadd+0x114>
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	0764      	lsls	r4, r4, #29
 8001d1a:	431c      	orrs	r4, r3
 8001d1c:	0027      	movs	r7, r4
 8001d1e:	2102      	movs	r1, #2
 8001d20:	0900      	lsrs	r0, r0, #4
 8001d22:	e57a      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d24:	08c0      	lsrs	r0, r0, #3
 8001d26:	0777      	lsls	r7, r6, #29
 8001d28:	4307      	orrs	r7, r0
 8001d2a:	4665      	mov	r5, ip
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	08f0      	lsrs	r0, r6, #3
 8001d30:	e573      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	ff7fffff 	.word	0xff7fffff

08001d38 <__aeabi_ddiv>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	46de      	mov	lr, fp
 8001d3c:	4645      	mov	r5, r8
 8001d3e:	4657      	mov	r7, sl
 8001d40:	464e      	mov	r6, r9
 8001d42:	b5e0      	push	{r5, r6, r7, lr}
 8001d44:	b087      	sub	sp, #28
 8001d46:	9200      	str	r2, [sp, #0]
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	030b      	lsls	r3, r1, #12
 8001d4c:	0b1b      	lsrs	r3, r3, #12
 8001d4e:	469b      	mov	fp, r3
 8001d50:	0fca      	lsrs	r2, r1, #31
 8001d52:	004b      	lsls	r3, r1, #1
 8001d54:	0004      	movs	r4, r0
 8001d56:	4680      	mov	r8, r0
 8001d58:	0d5b      	lsrs	r3, r3, #21
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_ddiv+0x28>
 8001d5e:	e098      	b.n	8001e92 <__aeabi_ddiv+0x15a>
 8001d60:	4a7c      	ldr	r2, [pc, #496]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d037      	beq.n	8001dd6 <__aeabi_ddiv+0x9e>
 8001d66:	4659      	mov	r1, fp
 8001d68:	0f42      	lsrs	r2, r0, #29
 8001d6a:	00c9      	lsls	r1, r1, #3
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0409      	lsls	r1, r1, #16
 8001d72:	4311      	orrs	r1, r2
 8001d74:	00c2      	lsls	r2, r0, #3
 8001d76:	4690      	mov	r8, r2
 8001d78:	4a77      	ldr	r2, [pc, #476]	@ (8001f58 <__aeabi_ddiv+0x220>)
 8001d7a:	4689      	mov	r9, r1
 8001d7c:	4692      	mov	sl, r2
 8001d7e:	449a      	add	sl, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	2400      	movs	r4, #0
 8001d84:	9303      	str	r3, [sp, #12]
 8001d86:	9e00      	ldr	r6, [sp, #0]
 8001d88:	9f01      	ldr	r7, [sp, #4]
 8001d8a:	033b      	lsls	r3, r7, #12
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	469b      	mov	fp, r3
 8001d90:	007b      	lsls	r3, r7, #1
 8001d92:	0030      	movs	r0, r6
 8001d94:	0d5b      	lsrs	r3, r3, #21
 8001d96:	0ffd      	lsrs	r5, r7, #31
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d059      	beq.n	8001e50 <__aeabi_ddiv+0x118>
 8001d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d048      	beq.n	8001e34 <__aeabi_ddiv+0xfc>
 8001da2:	4659      	mov	r1, fp
 8001da4:	0f72      	lsrs	r2, r6, #29
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	0409      	lsls	r1, r1, #16
 8001dae:	4311      	orrs	r1, r2
 8001db0:	468b      	mov	fp, r1
 8001db2:	4969      	ldr	r1, [pc, #420]	@ (8001f58 <__aeabi_ddiv+0x220>)
 8001db4:	00f2      	lsls	r2, r6, #3
 8001db6:	468c      	mov	ip, r1
 8001db8:	4651      	mov	r1, sl
 8001dba:	4463      	add	r3, ip
 8001dbc:	1acb      	subs	r3, r1, r3
 8001dbe:	469a      	mov	sl, r3
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	9e02      	ldr	r6, [sp, #8]
 8001dc4:	406e      	eors	r6, r5
 8001dc6:	b2f6      	uxtb	r6, r6
 8001dc8:	2c0f      	cmp	r4, #15
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x96>
 8001dcc:	e0ce      	b.n	8001f6c <__aeabi_ddiv+0x234>
 8001dce:	4b63      	ldr	r3, [pc, #396]	@ (8001f5c <__aeabi_ddiv+0x224>)
 8001dd0:	00a4      	lsls	r4, r4, #2
 8001dd2:	591b      	ldr	r3, [r3, r4]
 8001dd4:	469f      	mov	pc, r3
 8001dd6:	465a      	mov	r2, fp
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	4691      	mov	r9, r2
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_ddiv+0xa8>
 8001dde:	e090      	b.n	8001f02 <__aeabi_ddiv+0x1ca>
 8001de0:	469a      	mov	sl, r3
 8001de2:	2302      	movs	r3, #2
 8001de4:	4690      	mov	r8, r2
 8001de6:	2408      	movs	r4, #8
 8001de8:	9303      	str	r3, [sp, #12]
 8001dea:	e7cc      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001dec:	46cb      	mov	fp, r9
 8001dee:	4642      	mov	r2, r8
 8001df0:	9d02      	ldr	r5, [sp, #8]
 8001df2:	9903      	ldr	r1, [sp, #12]
 8001df4:	2902      	cmp	r1, #2
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0xc2>
 8001df8:	e1de      	b.n	80021b8 <__aeabi_ddiv+0x480>
 8001dfa:	2903      	cmp	r1, #3
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_ddiv+0xc8>
 8001dfe:	e08d      	b.n	8001f1c <__aeabi_ddiv+0x1e4>
 8001e00:	2901      	cmp	r1, #1
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0xce>
 8001e04:	e179      	b.n	80020fa <__aeabi_ddiv+0x3c2>
 8001e06:	002e      	movs	r6, r5
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	4690      	mov	r8, r2
 8001e10:	051b      	lsls	r3, r3, #20
 8001e12:	4323      	orrs	r3, r4
 8001e14:	07f6      	lsls	r6, r6, #31
 8001e16:	4333      	orrs	r3, r6
 8001e18:	4640      	mov	r0, r8
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	b007      	add	sp, #28
 8001e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e20:	46bb      	mov	fp, r7
 8001e22:	46b2      	mov	sl, r6
 8001e24:	46a9      	mov	r9, r5
 8001e26:	46a0      	mov	r8, r4
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4b48      	ldr	r3, [pc, #288]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001e32:	e7ed      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001e34:	465a      	mov	r2, fp
 8001e36:	9b00      	ldr	r3, [sp, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <__aeabi_ddiv+0x228>)
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	44e2      	add	sl, ip
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d159      	bne.n	8001ef8 <__aeabi_ddiv+0x1c0>
 8001e44:	2302      	movs	r3, #2
 8001e46:	431c      	orrs	r4, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	469b      	mov	fp, r3
 8001e4e:	e7b8      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001e50:	465a      	mov	r2, fp
 8001e52:	9b00      	ldr	r3, [sp, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	d049      	beq.n	8001eec <__aeabi_ddiv+0x1b4>
 8001e58:	465b      	mov	r3, fp
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_ddiv+0x128>
 8001e5e:	e19c      	b.n	800219a <__aeabi_ddiv+0x462>
 8001e60:	4658      	mov	r0, fp
 8001e62:	f001 fc0d 	bl	8003680 <__clzsi2>
 8001e66:	0002      	movs	r2, r0
 8001e68:	0003      	movs	r3, r0
 8001e6a:	3a0b      	subs	r2, #11
 8001e6c:	271d      	movs	r7, #29
 8001e6e:	9e00      	ldr	r6, [sp, #0]
 8001e70:	1aba      	subs	r2, r7, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	4658      	mov	r0, fp
 8001e76:	40d6      	lsrs	r6, r2
 8001e78:	3908      	subs	r1, #8
 8001e7a:	4088      	lsls	r0, r1
 8001e7c:	0032      	movs	r2, r6
 8001e7e:	4302      	orrs	r2, r0
 8001e80:	4693      	mov	fp, r2
 8001e82:	9a00      	ldr	r2, [sp, #0]
 8001e84:	408a      	lsls	r2, r1
 8001e86:	4937      	ldr	r1, [pc, #220]	@ (8001f64 <__aeabi_ddiv+0x22c>)
 8001e88:	4453      	add	r3, sl
 8001e8a:	468a      	mov	sl, r1
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	449a      	add	sl, r3
 8001e90:	e797      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001e92:	465b      	mov	r3, fp
 8001e94:	4303      	orrs	r3, r0
 8001e96:	4699      	mov	r9, r3
 8001e98:	d021      	beq.n	8001ede <__aeabi_ddiv+0x1a6>
 8001e9a:	465b      	mov	r3, fp
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_ddiv+0x16a>
 8001ea0:	e169      	b.n	8002176 <__aeabi_ddiv+0x43e>
 8001ea2:	4658      	mov	r0, fp
 8001ea4:	f001 fbec 	bl	8003680 <__clzsi2>
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	425b      	negs	r3, r3
 8001eac:	469c      	mov	ip, r3
 8001eae:	0002      	movs	r2, r0
 8001eb0:	4484      	add	ip, r0
 8001eb2:	4666      	mov	r6, ip
 8001eb4:	231d      	movs	r3, #29
 8001eb6:	1b9b      	subs	r3, r3, r6
 8001eb8:	0026      	movs	r6, r4
 8001eba:	0011      	movs	r1, r2
 8001ebc:	4658      	mov	r0, fp
 8001ebe:	40de      	lsrs	r6, r3
 8001ec0:	3908      	subs	r1, #8
 8001ec2:	4088      	lsls	r0, r1
 8001ec4:	0033      	movs	r3, r6
 8001ec6:	4303      	orrs	r3, r0
 8001ec8:	4699      	mov	r9, r3
 8001eca:	0023      	movs	r3, r4
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <__aeabi_ddiv+0x230>)
 8001ed2:	2400      	movs	r4, #0
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	469a      	mov	sl, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	e753      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2404      	movs	r4, #4
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	e74c      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001eec:	2301      	movs	r3, #1
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	e764      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	0032      	movs	r2, r6
 8001efc:	2103      	movs	r1, #3
 8001efe:	431c      	orrs	r4, r3
 8001f00:	e75f      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001f02:	469a      	mov	sl, r3
 8001f04:	2303      	movs	r3, #3
 8001f06:	46d9      	mov	r9, fp
 8001f08:	240c      	movs	r4, #12
 8001f0a:	9303      	str	r3, [sp, #12]
 8001f0c:	e73b      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2480      	movs	r4, #128	@ 0x80
 8001f12:	4698      	mov	r8, r3
 8001f14:	2600      	movs	r6, #0
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f18:	0324      	lsls	r4, r4, #12
 8001f1a:	e779      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f1c:	2480      	movs	r4, #128	@ 0x80
 8001f1e:	465b      	mov	r3, fp
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	002e      	movs	r6, r5
 8001f28:	4690      	mov	r8, r2
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	e76f      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f30:	2480      	movs	r4, #128	@ 0x80
 8001f32:	464b      	mov	r3, r9
 8001f34:	0324      	lsls	r4, r4, #12
 8001f36:	4223      	tst	r3, r4
 8001f38:	d002      	beq.n	8001f40 <__aeabi_ddiv+0x208>
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	4223      	tst	r3, r4
 8001f3e:	d0f0      	beq.n	8001f22 <__aeabi_ddiv+0x1ea>
 8001f40:	2480      	movs	r4, #128	@ 0x80
 8001f42:	464b      	mov	r3, r9
 8001f44:	0324      	lsls	r4, r4, #12
 8001f46:	431c      	orrs	r4, r3
 8001f48:	0324      	lsls	r4, r4, #12
 8001f4a:	9e02      	ldr	r6, [sp, #8]
 8001f4c:	4b01      	ldr	r3, [pc, #4]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f4e:	0b24      	lsrs	r4, r4, #12
 8001f50:	e75e      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	000007ff 	.word	0x000007ff
 8001f58:	fffffc01 	.word	0xfffffc01
 8001f5c:	0800e7f0 	.word	0x0800e7f0
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000003f3 	.word	0x000003f3
 8001f68:	fffffc0d 	.word	0xfffffc0d
 8001f6c:	45cb      	cmp	fp, r9
 8001f6e:	d200      	bcs.n	8001f72 <__aeabi_ddiv+0x23a>
 8001f70:	e0f8      	b.n	8002164 <__aeabi_ddiv+0x42c>
 8001f72:	d100      	bne.n	8001f76 <__aeabi_ddiv+0x23e>
 8001f74:	e0f3      	b.n	800215e <__aeabi_ddiv+0x426>
 8001f76:	2301      	movs	r3, #1
 8001f78:	425b      	negs	r3, r3
 8001f7a:	469c      	mov	ip, r3
 8001f7c:	4644      	mov	r4, r8
 8001f7e:	4648      	mov	r0, r9
 8001f80:	2500      	movs	r5, #0
 8001f82:	44e2      	add	sl, ip
 8001f84:	465b      	mov	r3, fp
 8001f86:	0e17      	lsrs	r7, r2, #24
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	431f      	orrs	r7, r3
 8001f8c:	0c19      	lsrs	r1, r3, #16
 8001f8e:	043b      	lsls	r3, r7, #16
 8001f90:	0212      	lsls	r2, r2, #8
 8001f92:	9700      	str	r7, [sp, #0]
 8001f94:	0c1f      	lsrs	r7, r3, #16
 8001f96:	4691      	mov	r9, r2
 8001f98:	9102      	str	r1, [sp, #8]
 8001f9a:	9703      	str	r7, [sp, #12]
 8001f9c:	f7fe f952 	bl	8000244 <__aeabi_uidivmod>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	437a      	muls	r2, r7
 8001fa4:	040b      	lsls	r3, r1, #16
 8001fa6:	0c21      	lsrs	r1, r4, #16
 8001fa8:	4680      	mov	r8, r0
 8001faa:	4319      	orrs	r1, r3
 8001fac:	428a      	cmp	r2, r1
 8001fae:	d909      	bls.n	8001fc4 <__aeabi_ddiv+0x28c>
 8001fb0:	9f00      	ldr	r7, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	46bc      	mov	ip, r7
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	4461      	add	r1, ip
 8001fba:	469c      	mov	ip, r3
 8001fbc:	44e0      	add	r8, ip
 8001fbe:	428f      	cmp	r7, r1
 8001fc0:	d800      	bhi.n	8001fc4 <__aeabi_ddiv+0x28c>
 8001fc2:	e15c      	b.n	800227e <__aeabi_ddiv+0x546>
 8001fc4:	1a88      	subs	r0, r1, r2
 8001fc6:	9902      	ldr	r1, [sp, #8]
 8001fc8:	f7fe f93c 	bl	8000244 <__aeabi_uidivmod>
 8001fcc:	9a03      	ldr	r2, [sp, #12]
 8001fce:	0424      	lsls	r4, r4, #16
 8001fd0:	4342      	muls	r2, r0
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	0c24      	lsrs	r4, r4, #16
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	430c      	orrs	r4, r1
 8001fda:	42a2      	cmp	r2, r4
 8001fdc:	d906      	bls.n	8001fec <__aeabi_ddiv+0x2b4>
 8001fde:	9900      	ldr	r1, [sp, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	468c      	mov	ip, r1
 8001fe4:	4464      	add	r4, ip
 8001fe6:	42a1      	cmp	r1, r4
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x2b4>
 8001fea:	e142      	b.n	8002272 <__aeabi_ddiv+0x53a>
 8001fec:	1aa0      	subs	r0, r4, r2
 8001fee:	4642      	mov	r2, r8
 8001ff0:	0412      	lsls	r2, r2, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	4693      	mov	fp, r2
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	001f      	movs	r7, r3
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	040b      	lsls	r3, r1, #16
 8002002:	4649      	mov	r1, r9
 8002004:	0409      	lsls	r1, r1, #16
 8002006:	0c09      	lsrs	r1, r1, #16
 8002008:	000c      	movs	r4, r1
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	435c      	muls	r4, r3
 800200e:	0c12      	lsrs	r2, r2, #16
 8002010:	437b      	muls	r3, r7
 8002012:	4688      	mov	r8, r1
 8002014:	4351      	muls	r1, r2
 8002016:	437a      	muls	r2, r7
 8002018:	0c27      	lsrs	r7, r4, #16
 800201a:	46bc      	mov	ip, r7
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4463      	add	r3, ip
 8002020:	4299      	cmp	r1, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x2f4>
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0249      	lsls	r1, r1, #9
 8002028:	468c      	mov	ip, r1
 800202a:	4462      	add	r2, ip
 800202c:	0c19      	lsrs	r1, r3, #16
 800202e:	0424      	lsls	r4, r4, #16
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	0c24      	lsrs	r4, r4, #16
 8002034:	188a      	adds	r2, r1, r2
 8002036:	191c      	adds	r4, r3, r4
 8002038:	4290      	cmp	r0, r2
 800203a:	d302      	bcc.n	8002042 <__aeabi_ddiv+0x30a>
 800203c:	d116      	bne.n	800206c <__aeabi_ddiv+0x334>
 800203e:	42a5      	cmp	r5, r4
 8002040:	d214      	bcs.n	800206c <__aeabi_ddiv+0x334>
 8002042:	465b      	mov	r3, fp
 8002044:	9f00      	ldr	r7, [sp, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	444d      	add	r5, r9
 800204a:	9305      	str	r3, [sp, #20]
 800204c:	454d      	cmp	r5, r9
 800204e:	419b      	sbcs	r3, r3
 8002050:	46bc      	mov	ip, r7
 8002052:	425b      	negs	r3, r3
 8002054:	4463      	add	r3, ip
 8002056:	18c0      	adds	r0, r0, r3
 8002058:	4287      	cmp	r7, r0
 800205a:	d300      	bcc.n	800205e <__aeabi_ddiv+0x326>
 800205c:	e102      	b.n	8002264 <__aeabi_ddiv+0x52c>
 800205e:	4282      	cmp	r2, r0
 8002060:	d900      	bls.n	8002064 <__aeabi_ddiv+0x32c>
 8002062:	e129      	b.n	80022b8 <__aeabi_ddiv+0x580>
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x330>
 8002066:	e124      	b.n	80022b2 <__aeabi_ddiv+0x57a>
 8002068:	9b05      	ldr	r3, [sp, #20]
 800206a:	469b      	mov	fp, r3
 800206c:	1b2c      	subs	r4, r5, r4
 800206e:	42a5      	cmp	r5, r4
 8002070:	41ad      	sbcs	r5, r5
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	1a80      	subs	r0, r0, r2
 8002076:	426d      	negs	r5, r5
 8002078:	1b40      	subs	r0, r0, r5
 800207a:	4283      	cmp	r3, r0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x348>
 800207e:	e10f      	b.n	80022a0 <__aeabi_ddiv+0x568>
 8002080:	9902      	ldr	r1, [sp, #8]
 8002082:	f7fe f8df 	bl	8000244 <__aeabi_uidivmod>
 8002086:	9a03      	ldr	r2, [sp, #12]
 8002088:	040b      	lsls	r3, r1, #16
 800208a:	4342      	muls	r2, r0
 800208c:	0c21      	lsrs	r1, r4, #16
 800208e:	0005      	movs	r5, r0
 8002090:	4319      	orrs	r1, r3
 8002092:	428a      	cmp	r2, r1
 8002094:	d900      	bls.n	8002098 <__aeabi_ddiv+0x360>
 8002096:	e0cb      	b.n	8002230 <__aeabi_ddiv+0x4f8>
 8002098:	1a88      	subs	r0, r1, r2
 800209a:	9902      	ldr	r1, [sp, #8]
 800209c:	f7fe f8d2 	bl	8000244 <__aeabi_uidivmod>
 80020a0:	9a03      	ldr	r2, [sp, #12]
 80020a2:	0424      	lsls	r4, r4, #16
 80020a4:	4342      	muls	r2, r0
 80020a6:	0409      	lsls	r1, r1, #16
 80020a8:	0c24      	lsrs	r4, r4, #16
 80020aa:	0003      	movs	r3, r0
 80020ac:	430c      	orrs	r4, r1
 80020ae:	42a2      	cmp	r2, r4
 80020b0:	d900      	bls.n	80020b4 <__aeabi_ddiv+0x37c>
 80020b2:	e0ca      	b.n	800224a <__aeabi_ddiv+0x512>
 80020b4:	4641      	mov	r1, r8
 80020b6:	1aa4      	subs	r4, r4, r2
 80020b8:	042a      	lsls	r2, r5, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	9f04      	ldr	r7, [sp, #16]
 80020be:	0413      	lsls	r3, r2, #16
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	4359      	muls	r1, r3
 80020c4:	4640      	mov	r0, r8
 80020c6:	437b      	muls	r3, r7
 80020c8:	469c      	mov	ip, r3
 80020ca:	0c15      	lsrs	r5, r2, #16
 80020cc:	4368      	muls	r0, r5
 80020ce:	0c0b      	lsrs	r3, r1, #16
 80020d0:	4484      	add	ip, r0
 80020d2:	4463      	add	r3, ip
 80020d4:	437d      	muls	r5, r7
 80020d6:	4298      	cmp	r0, r3
 80020d8:	d903      	bls.n	80020e2 <__aeabi_ddiv+0x3aa>
 80020da:	2080      	movs	r0, #128	@ 0x80
 80020dc:	0240      	lsls	r0, r0, #9
 80020de:	4684      	mov	ip, r0
 80020e0:	4465      	add	r5, ip
 80020e2:	0c18      	lsrs	r0, r3, #16
 80020e4:	0409      	lsls	r1, r1, #16
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	0c09      	lsrs	r1, r1, #16
 80020ea:	1940      	adds	r0, r0, r5
 80020ec:	185b      	adds	r3, r3, r1
 80020ee:	4284      	cmp	r4, r0
 80020f0:	d327      	bcc.n	8002142 <__aeabi_ddiv+0x40a>
 80020f2:	d023      	beq.n	800213c <__aeabi_ddiv+0x404>
 80020f4:	2301      	movs	r3, #1
 80020f6:	0035      	movs	r5, r6
 80020f8:	431a      	orrs	r2, r3
 80020fa:	4b94      	ldr	r3, [pc, #592]	@ (800234c <__aeabi_ddiv+0x614>)
 80020fc:	4453      	add	r3, sl
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dd60      	ble.n	80021c4 <__aeabi_ddiv+0x48c>
 8002102:	0751      	lsls	r1, r2, #29
 8002104:	d000      	beq.n	8002108 <__aeabi_ddiv+0x3d0>
 8002106:	e086      	b.n	8002216 <__aeabi_ddiv+0x4de>
 8002108:	002e      	movs	r6, r5
 800210a:	08d1      	lsrs	r1, r2, #3
 800210c:	465a      	mov	r2, fp
 800210e:	01d2      	lsls	r2, r2, #7
 8002110:	d506      	bpl.n	8002120 <__aeabi_ddiv+0x3e8>
 8002112:	465a      	mov	r2, fp
 8002114:	4b8e      	ldr	r3, [pc, #568]	@ (8002350 <__aeabi_ddiv+0x618>)
 8002116:	401a      	ands	r2, r3
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	4693      	mov	fp, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4453      	add	r3, sl
 8002120:	4a8c      	ldr	r2, [pc, #560]	@ (8002354 <__aeabi_ddiv+0x61c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	dd00      	ble.n	8002128 <__aeabi_ddiv+0x3f0>
 8002126:	e680      	b.n	8001e2a <__aeabi_ddiv+0xf2>
 8002128:	465a      	mov	r2, fp
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	465a      	mov	r2, fp
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	0254      	lsls	r4, r2, #9
 8002136:	0b24      	lsrs	r4, r4, #12
 8002138:	0d5b      	lsrs	r3, r3, #21
 800213a:	e669      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 800213c:	0035      	movs	r5, r6
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0db      	beq.n	80020fa <__aeabi_ddiv+0x3c2>
 8002142:	9d00      	ldr	r5, [sp, #0]
 8002144:	1e51      	subs	r1, r2, #1
 8002146:	46ac      	mov	ip, r5
 8002148:	4464      	add	r4, ip
 800214a:	42ac      	cmp	r4, r5
 800214c:	d200      	bcs.n	8002150 <__aeabi_ddiv+0x418>
 800214e:	e09e      	b.n	800228e <__aeabi_ddiv+0x556>
 8002150:	4284      	cmp	r4, r0
 8002152:	d200      	bcs.n	8002156 <__aeabi_ddiv+0x41e>
 8002154:	e0e1      	b.n	800231a <__aeabi_ddiv+0x5e2>
 8002156:	d100      	bne.n	800215a <__aeabi_ddiv+0x422>
 8002158:	e0ee      	b.n	8002338 <__aeabi_ddiv+0x600>
 800215a:	000a      	movs	r2, r1
 800215c:	e7ca      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 800215e:	4542      	cmp	r2, r8
 8002160:	d900      	bls.n	8002164 <__aeabi_ddiv+0x42c>
 8002162:	e708      	b.n	8001f76 <__aeabi_ddiv+0x23e>
 8002164:	464b      	mov	r3, r9
 8002166:	07dc      	lsls	r4, r3, #31
 8002168:	0858      	lsrs	r0, r3, #1
 800216a:	4643      	mov	r3, r8
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	431c      	orrs	r4, r3
 8002170:	4643      	mov	r3, r8
 8002172:	07dd      	lsls	r5, r3, #31
 8002174:	e706      	b.n	8001f84 <__aeabi_ddiv+0x24c>
 8002176:	f001 fa83 	bl	8003680 <__clzsi2>
 800217a:	2315      	movs	r3, #21
 800217c:	469c      	mov	ip, r3
 800217e:	4484      	add	ip, r0
 8002180:	0002      	movs	r2, r0
 8002182:	4663      	mov	r3, ip
 8002184:	3220      	adds	r2, #32
 8002186:	2b1c      	cmp	r3, #28
 8002188:	dc00      	bgt.n	800218c <__aeabi_ddiv+0x454>
 800218a:	e692      	b.n	8001eb2 <__aeabi_ddiv+0x17a>
 800218c:	0023      	movs	r3, r4
 800218e:	3808      	subs	r0, #8
 8002190:	4083      	lsls	r3, r0
 8002192:	4699      	mov	r9, r3
 8002194:	2300      	movs	r3, #0
 8002196:	4698      	mov	r8, r3
 8002198:	e69a      	b.n	8001ed0 <__aeabi_ddiv+0x198>
 800219a:	f001 fa71 	bl	8003680 <__clzsi2>
 800219e:	0002      	movs	r2, r0
 80021a0:	0003      	movs	r3, r0
 80021a2:	3215      	adds	r2, #21
 80021a4:	3320      	adds	r3, #32
 80021a6:	2a1c      	cmp	r2, #28
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_ddiv+0x474>
 80021aa:	e65f      	b.n	8001e6c <__aeabi_ddiv+0x134>
 80021ac:	9900      	ldr	r1, [sp, #0]
 80021ae:	3808      	subs	r0, #8
 80021b0:	4081      	lsls	r1, r0
 80021b2:	2200      	movs	r2, #0
 80021b4:	468b      	mov	fp, r1
 80021b6:	e666      	b.n	8001e86 <__aeabi_ddiv+0x14e>
 80021b8:	2200      	movs	r2, #0
 80021ba:	002e      	movs	r6, r5
 80021bc:	2400      	movs	r4, #0
 80021be:	4690      	mov	r8, r2
 80021c0:	4b65      	ldr	r3, [pc, #404]	@ (8002358 <__aeabi_ddiv+0x620>)
 80021c2:	e625      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 80021c4:	002e      	movs	r6, r5
 80021c6:	2101      	movs	r1, #1
 80021c8:	1ac9      	subs	r1, r1, r3
 80021ca:	2938      	cmp	r1, #56	@ 0x38
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_ddiv+0x498>
 80021ce:	e61b      	b.n	8001e08 <__aeabi_ddiv+0xd0>
 80021d0:	291f      	cmp	r1, #31
 80021d2:	dc7e      	bgt.n	80022d2 <__aeabi_ddiv+0x59a>
 80021d4:	4861      	ldr	r0, [pc, #388]	@ (800235c <__aeabi_ddiv+0x624>)
 80021d6:	0014      	movs	r4, r2
 80021d8:	4450      	add	r0, sl
 80021da:	465b      	mov	r3, fp
 80021dc:	4082      	lsls	r2, r0
 80021de:	4083      	lsls	r3, r0
 80021e0:	40cc      	lsrs	r4, r1
 80021e2:	1e50      	subs	r0, r2, #1
 80021e4:	4182      	sbcs	r2, r0
 80021e6:	4323      	orrs	r3, r4
 80021e8:	431a      	orrs	r2, r3
 80021ea:	465b      	mov	r3, fp
 80021ec:	40cb      	lsrs	r3, r1
 80021ee:	0751      	lsls	r1, r2, #29
 80021f0:	d009      	beq.n	8002206 <__aeabi_ddiv+0x4ce>
 80021f2:	210f      	movs	r1, #15
 80021f4:	4011      	ands	r1, r2
 80021f6:	2904      	cmp	r1, #4
 80021f8:	d005      	beq.n	8002206 <__aeabi_ddiv+0x4ce>
 80021fa:	1d11      	adds	r1, r2, #4
 80021fc:	4291      	cmp	r1, r2
 80021fe:	4192      	sbcs	r2, r2
 8002200:	4252      	negs	r2, r2
 8002202:	189b      	adds	r3, r3, r2
 8002204:	000a      	movs	r2, r1
 8002206:	0219      	lsls	r1, r3, #8
 8002208:	d400      	bmi.n	800220c <__aeabi_ddiv+0x4d4>
 800220a:	e09b      	b.n	8002344 <__aeabi_ddiv+0x60c>
 800220c:	2200      	movs	r2, #0
 800220e:	2301      	movs	r3, #1
 8002210:	2400      	movs	r4, #0
 8002212:	4690      	mov	r8, r2
 8002214:	e5fc      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8002216:	210f      	movs	r1, #15
 8002218:	4011      	ands	r1, r2
 800221a:	2904      	cmp	r1, #4
 800221c:	d100      	bne.n	8002220 <__aeabi_ddiv+0x4e8>
 800221e:	e773      	b.n	8002108 <__aeabi_ddiv+0x3d0>
 8002220:	1d11      	adds	r1, r2, #4
 8002222:	4291      	cmp	r1, r2
 8002224:	4192      	sbcs	r2, r2
 8002226:	4252      	negs	r2, r2
 8002228:	002e      	movs	r6, r5
 800222a:	08c9      	lsrs	r1, r1, #3
 800222c:	4493      	add	fp, r2
 800222e:	e76d      	b.n	800210c <__aeabi_ddiv+0x3d4>
 8002230:	9b00      	ldr	r3, [sp, #0]
 8002232:	3d01      	subs	r5, #1
 8002234:	469c      	mov	ip, r3
 8002236:	4461      	add	r1, ip
 8002238:	428b      	cmp	r3, r1
 800223a:	d900      	bls.n	800223e <__aeabi_ddiv+0x506>
 800223c:	e72c      	b.n	8002098 <__aeabi_ddiv+0x360>
 800223e:	428a      	cmp	r2, r1
 8002240:	d800      	bhi.n	8002244 <__aeabi_ddiv+0x50c>
 8002242:	e729      	b.n	8002098 <__aeabi_ddiv+0x360>
 8002244:	1e85      	subs	r5, r0, #2
 8002246:	4461      	add	r1, ip
 8002248:	e726      	b.n	8002098 <__aeabi_ddiv+0x360>
 800224a:	9900      	ldr	r1, [sp, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	468c      	mov	ip, r1
 8002250:	4464      	add	r4, ip
 8002252:	42a1      	cmp	r1, r4
 8002254:	d900      	bls.n	8002258 <__aeabi_ddiv+0x520>
 8002256:	e72d      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 8002258:	42a2      	cmp	r2, r4
 800225a:	d800      	bhi.n	800225e <__aeabi_ddiv+0x526>
 800225c:	e72a      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 800225e:	1e83      	subs	r3, r0, #2
 8002260:	4464      	add	r4, ip
 8002262:	e727      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 8002264:	4287      	cmp	r7, r0
 8002266:	d000      	beq.n	800226a <__aeabi_ddiv+0x532>
 8002268:	e6fe      	b.n	8002068 <__aeabi_ddiv+0x330>
 800226a:	45a9      	cmp	r9, r5
 800226c:	d900      	bls.n	8002270 <__aeabi_ddiv+0x538>
 800226e:	e6fb      	b.n	8002068 <__aeabi_ddiv+0x330>
 8002270:	e6f5      	b.n	800205e <__aeabi_ddiv+0x326>
 8002272:	42a2      	cmp	r2, r4
 8002274:	d800      	bhi.n	8002278 <__aeabi_ddiv+0x540>
 8002276:	e6b9      	b.n	8001fec <__aeabi_ddiv+0x2b4>
 8002278:	1e83      	subs	r3, r0, #2
 800227a:	4464      	add	r4, ip
 800227c:	e6b6      	b.n	8001fec <__aeabi_ddiv+0x2b4>
 800227e:	428a      	cmp	r2, r1
 8002280:	d800      	bhi.n	8002284 <__aeabi_ddiv+0x54c>
 8002282:	e69f      	b.n	8001fc4 <__aeabi_ddiv+0x28c>
 8002284:	46bc      	mov	ip, r7
 8002286:	1e83      	subs	r3, r0, #2
 8002288:	4698      	mov	r8, r3
 800228a:	4461      	add	r1, ip
 800228c:	e69a      	b.n	8001fc4 <__aeabi_ddiv+0x28c>
 800228e:	000a      	movs	r2, r1
 8002290:	4284      	cmp	r4, r0
 8002292:	d000      	beq.n	8002296 <__aeabi_ddiv+0x55e>
 8002294:	e72e      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 8002296:	454b      	cmp	r3, r9
 8002298:	d000      	beq.n	800229c <__aeabi_ddiv+0x564>
 800229a:	e72b      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 800229c:	0035      	movs	r5, r6
 800229e:	e72c      	b.n	80020fa <__aeabi_ddiv+0x3c2>
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <__aeabi_ddiv+0x614>)
 80022a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <__aeabi_ddiv+0x628>)
 80022a4:	4453      	add	r3, sl
 80022a6:	4592      	cmp	sl, r2
 80022a8:	db43      	blt.n	8002332 <__aeabi_ddiv+0x5fa>
 80022aa:	2201      	movs	r2, #1
 80022ac:	2100      	movs	r1, #0
 80022ae:	4493      	add	fp, r2
 80022b0:	e72c      	b.n	800210c <__aeabi_ddiv+0x3d4>
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x580>
 80022b6:	e6d7      	b.n	8002068 <__aeabi_ddiv+0x330>
 80022b8:	2302      	movs	r3, #2
 80022ba:	425b      	negs	r3, r3
 80022bc:	469c      	mov	ip, r3
 80022be:	9900      	ldr	r1, [sp, #0]
 80022c0:	444d      	add	r5, r9
 80022c2:	454d      	cmp	r5, r9
 80022c4:	419b      	sbcs	r3, r3
 80022c6:	44e3      	add	fp, ip
 80022c8:	468c      	mov	ip, r1
 80022ca:	425b      	negs	r3, r3
 80022cc:	4463      	add	r3, ip
 80022ce:	18c0      	adds	r0, r0, r3
 80022d0:	e6cc      	b.n	800206c <__aeabi_ddiv+0x334>
 80022d2:	201f      	movs	r0, #31
 80022d4:	4240      	negs	r0, r0
 80022d6:	1ac3      	subs	r3, r0, r3
 80022d8:	4658      	mov	r0, fp
 80022da:	40d8      	lsrs	r0, r3
 80022dc:	2920      	cmp	r1, #32
 80022de:	d004      	beq.n	80022ea <__aeabi_ddiv+0x5b2>
 80022e0:	4659      	mov	r1, fp
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <__aeabi_ddiv+0x62c>)
 80022e4:	4453      	add	r3, sl
 80022e6:	4099      	lsls	r1, r3
 80022e8:	430a      	orrs	r2, r1
 80022ea:	1e53      	subs	r3, r2, #1
 80022ec:	419a      	sbcs	r2, r3
 80022ee:	2307      	movs	r3, #7
 80022f0:	0019      	movs	r1, r3
 80022f2:	4302      	orrs	r2, r0
 80022f4:	2400      	movs	r4, #0
 80022f6:	4011      	ands	r1, r2
 80022f8:	4213      	tst	r3, r2
 80022fa:	d009      	beq.n	8002310 <__aeabi_ddiv+0x5d8>
 80022fc:	3308      	adds	r3, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	2b04      	cmp	r3, #4
 8002302:	d01d      	beq.n	8002340 <__aeabi_ddiv+0x608>
 8002304:	1d13      	adds	r3, r2, #4
 8002306:	4293      	cmp	r3, r2
 8002308:	4189      	sbcs	r1, r1
 800230a:	001a      	movs	r2, r3
 800230c:	4249      	negs	r1, r1
 800230e:	0749      	lsls	r1, r1, #29
 8002310:	08d2      	lsrs	r2, r2, #3
 8002312:	430a      	orrs	r2, r1
 8002314:	4690      	mov	r8, r2
 8002316:	2300      	movs	r3, #0
 8002318:	e57a      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 800231a:	4649      	mov	r1, r9
 800231c:	9f00      	ldr	r7, [sp, #0]
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	454d      	cmp	r5, r9
 8002322:	4189      	sbcs	r1, r1
 8002324:	46bc      	mov	ip, r7
 8002326:	4249      	negs	r1, r1
 8002328:	4461      	add	r1, ip
 800232a:	46a9      	mov	r9, r5
 800232c:	3a02      	subs	r2, #2
 800232e:	1864      	adds	r4, r4, r1
 8002330:	e7ae      	b.n	8002290 <__aeabi_ddiv+0x558>
 8002332:	2201      	movs	r2, #1
 8002334:	4252      	negs	r2, r2
 8002336:	e746      	b.n	80021c6 <__aeabi_ddiv+0x48e>
 8002338:	4599      	cmp	r9, r3
 800233a:	d3ee      	bcc.n	800231a <__aeabi_ddiv+0x5e2>
 800233c:	000a      	movs	r2, r1
 800233e:	e7aa      	b.n	8002296 <__aeabi_ddiv+0x55e>
 8002340:	2100      	movs	r1, #0
 8002342:	e7e5      	b.n	8002310 <__aeabi_ddiv+0x5d8>
 8002344:	0759      	lsls	r1, r3, #29
 8002346:	025b      	lsls	r3, r3, #9
 8002348:	0b1c      	lsrs	r4, r3, #12
 800234a:	e7e1      	b.n	8002310 <__aeabi_ddiv+0x5d8>
 800234c:	000003ff 	.word	0x000003ff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	000007fe 	.word	0x000007fe
 8002358:	000007ff 	.word	0x000007ff
 800235c:	0000041e 	.word	0x0000041e
 8002360:	fffffc02 	.word	0xfffffc02
 8002364:	0000043e 	.word	0x0000043e

08002368 <__eqdf2>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	46de      	mov	lr, fp
 800236e:	464e      	mov	r6, r9
 8002370:	4645      	mov	r5, r8
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	000d      	movs	r5, r1
 8002376:	0004      	movs	r4, r0
 8002378:	0fe8      	lsrs	r0, r5, #31
 800237a:	4683      	mov	fp, r0
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0fd8      	lsrs	r0, r3, #31
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	4682      	mov	sl, r0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <__eqdf2+0x84>)
 8002386:	468c      	mov	ip, r1
 8002388:	031f      	lsls	r7, r3, #12
 800238a:	0069      	lsls	r1, r5, #1
 800238c:	005e      	lsls	r6, r3, #1
 800238e:	0d49      	lsrs	r1, r1, #21
 8002390:	0b3f      	lsrs	r7, r7, #12
 8002392:	0d76      	lsrs	r6, r6, #21
 8002394:	4281      	cmp	r1, r0
 8002396:	d018      	beq.n	80023ca <__eqdf2+0x62>
 8002398:	4286      	cmp	r6, r0
 800239a:	d00f      	beq.n	80023bc <__eqdf2+0x54>
 800239c:	2001      	movs	r0, #1
 800239e:	42b1      	cmp	r1, r6
 80023a0:	d10d      	bne.n	80023be <__eqdf2+0x56>
 80023a2:	45bc      	cmp	ip, r7
 80023a4:	d10b      	bne.n	80023be <__eqdf2+0x56>
 80023a6:	4294      	cmp	r4, r2
 80023a8:	d109      	bne.n	80023be <__eqdf2+0x56>
 80023aa:	45d3      	cmp	fp, sl
 80023ac:	d01c      	beq.n	80023e8 <__eqdf2+0x80>
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d105      	bne.n	80023be <__eqdf2+0x56>
 80023b2:	4660      	mov	r0, ip
 80023b4:	4320      	orrs	r0, r4
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	e000      	b.n	80023be <__eqdf2+0x56>
 80023bc:	2001      	movs	r0, #1
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2001      	movs	r0, #1
 80023cc:	428e      	cmp	r6, r1
 80023ce:	d1f6      	bne.n	80023be <__eqdf2+0x56>
 80023d0:	4661      	mov	r1, ip
 80023d2:	4339      	orrs	r1, r7
 80023d4:	000f      	movs	r7, r1
 80023d6:	4317      	orrs	r7, r2
 80023d8:	4327      	orrs	r7, r4
 80023da:	d1f0      	bne.n	80023be <__eqdf2+0x56>
 80023dc:	465b      	mov	r3, fp
 80023de:	4652      	mov	r2, sl
 80023e0:	1a98      	subs	r0, r3, r2
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	4198      	sbcs	r0, r3
 80023e6:	e7ea      	b.n	80023be <__eqdf2+0x56>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e8      	b.n	80023be <__eqdf2+0x56>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__gedf2>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4657      	mov	r7, sl
 80023f4:	464e      	mov	r6, r9
 80023f6:	4645      	mov	r5, r8
 80023f8:	46de      	mov	lr, fp
 80023fa:	b5e0      	push	{r5, r6, r7, lr}
 80023fc:	000d      	movs	r5, r1
 80023fe:	030e      	lsls	r6, r1, #12
 8002400:	0049      	lsls	r1, r1, #1
 8002402:	0d49      	lsrs	r1, r1, #21
 8002404:	468a      	mov	sl, r1
 8002406:	0fdf      	lsrs	r7, r3, #31
 8002408:	0fe9      	lsrs	r1, r5, #31
 800240a:	46bc      	mov	ip, r7
 800240c:	b083      	sub	sp, #12
 800240e:	4f2f      	ldr	r7, [pc, #188]	@ (80024cc <__gedf2+0xdc>)
 8002410:	0004      	movs	r4, r0
 8002412:	4680      	mov	r8, r0
 8002414:	9101      	str	r1, [sp, #4]
 8002416:	0058      	lsls	r0, r3, #1
 8002418:	0319      	lsls	r1, r3, #12
 800241a:	4691      	mov	r9, r2
 800241c:	0b36      	lsrs	r6, r6, #12
 800241e:	0b09      	lsrs	r1, r1, #12
 8002420:	0d40      	lsrs	r0, r0, #21
 8002422:	45ba      	cmp	sl, r7
 8002424:	d01d      	beq.n	8002462 <__gedf2+0x72>
 8002426:	42b8      	cmp	r0, r7
 8002428:	d00d      	beq.n	8002446 <__gedf2+0x56>
 800242a:	4657      	mov	r7, sl
 800242c:	2f00      	cmp	r7, #0
 800242e:	d12a      	bne.n	8002486 <__gedf2+0x96>
 8002430:	4334      	orrs	r4, r6
 8002432:	2800      	cmp	r0, #0
 8002434:	d124      	bne.n	8002480 <__gedf2+0x90>
 8002436:	430a      	orrs	r2, r1
 8002438:	d036      	beq.n	80024a8 <__gedf2+0xb8>
 800243a:	2c00      	cmp	r4, #0
 800243c:	d141      	bne.n	80024c2 <__gedf2+0xd2>
 800243e:	4663      	mov	r3, ip
 8002440:	0058      	lsls	r0, r3, #1
 8002442:	3801      	subs	r0, #1
 8002444:	e015      	b.n	8002472 <__gedf2+0x82>
 8002446:	4311      	orrs	r1, r2
 8002448:	d138      	bne.n	80024bc <__gedf2+0xcc>
 800244a:	4653      	mov	r3, sl
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <__gedf2+0x64>
 8002450:	4326      	orrs	r6, r4
 8002452:	d0f4      	beq.n	800243e <__gedf2+0x4e>
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	4563      	cmp	r3, ip
 8002458:	d107      	bne.n	800246a <__gedf2+0x7a>
 800245a:	9b01      	ldr	r3, [sp, #4]
 800245c:	0058      	lsls	r0, r3, #1
 800245e:	3801      	subs	r0, #1
 8002460:	e007      	b.n	8002472 <__gedf2+0x82>
 8002462:	4326      	orrs	r6, r4
 8002464:	d12a      	bne.n	80024bc <__gedf2+0xcc>
 8002466:	4550      	cmp	r0, sl
 8002468:	d021      	beq.n	80024ae <__gedf2+0xbe>
 800246a:	2001      	movs	r0, #1
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	425f      	negs	r7, r3
 8002470:	4338      	orrs	r0, r7
 8002472:	b003      	add	sp, #12
 8002474:	bcf0      	pop	{r4, r5, r6, r7}
 8002476:	46bb      	mov	fp, r7
 8002478:	46b2      	mov	sl, r6
 800247a:	46a9      	mov	r9, r5
 800247c:	46a0      	mov	r8, r4
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0dc      	beq.n	800243e <__gedf2+0x4e>
 8002484:	e7e6      	b.n	8002454 <__gedf2+0x64>
 8002486:	2800      	cmp	r0, #0
 8002488:	d0ef      	beq.n	800246a <__gedf2+0x7a>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	4563      	cmp	r3, ip
 800248e:	d1ec      	bne.n	800246a <__gedf2+0x7a>
 8002490:	4582      	cmp	sl, r0
 8002492:	dcea      	bgt.n	800246a <__gedf2+0x7a>
 8002494:	dbe1      	blt.n	800245a <__gedf2+0x6a>
 8002496:	428e      	cmp	r6, r1
 8002498:	d8e7      	bhi.n	800246a <__gedf2+0x7a>
 800249a:	d1de      	bne.n	800245a <__gedf2+0x6a>
 800249c:	45c8      	cmp	r8, r9
 800249e:	d8e4      	bhi.n	800246a <__gedf2+0x7a>
 80024a0:	2000      	movs	r0, #0
 80024a2:	45c8      	cmp	r8, r9
 80024a4:	d2e5      	bcs.n	8002472 <__gedf2+0x82>
 80024a6:	e7d8      	b.n	800245a <__gedf2+0x6a>
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d0e2      	beq.n	8002472 <__gedf2+0x82>
 80024ac:	e7dd      	b.n	800246a <__gedf2+0x7a>
 80024ae:	4311      	orrs	r1, r2
 80024b0:	d104      	bne.n	80024bc <__gedf2+0xcc>
 80024b2:	9b01      	ldr	r3, [sp, #4]
 80024b4:	4563      	cmp	r3, ip
 80024b6:	d1d8      	bne.n	800246a <__gedf2+0x7a>
 80024b8:	2000      	movs	r0, #0
 80024ba:	e7da      	b.n	8002472 <__gedf2+0x82>
 80024bc:	2002      	movs	r0, #2
 80024be:	4240      	negs	r0, r0
 80024c0:	e7d7      	b.n	8002472 <__gedf2+0x82>
 80024c2:	9b01      	ldr	r3, [sp, #4]
 80024c4:	4563      	cmp	r3, ip
 80024c6:	d0e6      	beq.n	8002496 <__gedf2+0xa6>
 80024c8:	e7cf      	b.n	800246a <__gedf2+0x7a>
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	000007ff 	.word	0x000007ff

080024d0 <__ledf2>:
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	4657      	mov	r7, sl
 80024d4:	464e      	mov	r6, r9
 80024d6:	4645      	mov	r5, r8
 80024d8:	46de      	mov	lr, fp
 80024da:	b5e0      	push	{r5, r6, r7, lr}
 80024dc:	000d      	movs	r5, r1
 80024de:	030e      	lsls	r6, r1, #12
 80024e0:	0049      	lsls	r1, r1, #1
 80024e2:	0d49      	lsrs	r1, r1, #21
 80024e4:	468a      	mov	sl, r1
 80024e6:	0fdf      	lsrs	r7, r3, #31
 80024e8:	0fe9      	lsrs	r1, r5, #31
 80024ea:	46bc      	mov	ip, r7
 80024ec:	b083      	sub	sp, #12
 80024ee:	4f2e      	ldr	r7, [pc, #184]	@ (80025a8 <__ledf2+0xd8>)
 80024f0:	0004      	movs	r4, r0
 80024f2:	4680      	mov	r8, r0
 80024f4:	9101      	str	r1, [sp, #4]
 80024f6:	0058      	lsls	r0, r3, #1
 80024f8:	0319      	lsls	r1, r3, #12
 80024fa:	4691      	mov	r9, r2
 80024fc:	0b36      	lsrs	r6, r6, #12
 80024fe:	0b09      	lsrs	r1, r1, #12
 8002500:	0d40      	lsrs	r0, r0, #21
 8002502:	45ba      	cmp	sl, r7
 8002504:	d01e      	beq.n	8002544 <__ledf2+0x74>
 8002506:	42b8      	cmp	r0, r7
 8002508:	d00d      	beq.n	8002526 <__ledf2+0x56>
 800250a:	4657      	mov	r7, sl
 800250c:	2f00      	cmp	r7, #0
 800250e:	d127      	bne.n	8002560 <__ledf2+0x90>
 8002510:	4334      	orrs	r4, r6
 8002512:	2800      	cmp	r0, #0
 8002514:	d133      	bne.n	800257e <__ledf2+0xae>
 8002516:	430a      	orrs	r2, r1
 8002518:	d034      	beq.n	8002584 <__ledf2+0xb4>
 800251a:	2c00      	cmp	r4, #0
 800251c:	d140      	bne.n	80025a0 <__ledf2+0xd0>
 800251e:	4663      	mov	r3, ip
 8002520:	0058      	lsls	r0, r3, #1
 8002522:	3801      	subs	r0, #1
 8002524:	e015      	b.n	8002552 <__ledf2+0x82>
 8002526:	4311      	orrs	r1, r2
 8002528:	d112      	bne.n	8002550 <__ledf2+0x80>
 800252a:	4653      	mov	r3, sl
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <__ledf2+0x64>
 8002530:	4326      	orrs	r6, r4
 8002532:	d0f4      	beq.n	800251e <__ledf2+0x4e>
 8002534:	9b01      	ldr	r3, [sp, #4]
 8002536:	4563      	cmp	r3, ip
 8002538:	d01d      	beq.n	8002576 <__ledf2+0xa6>
 800253a:	2001      	movs	r0, #1
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	425f      	negs	r7, r3
 8002540:	4338      	orrs	r0, r7
 8002542:	e006      	b.n	8002552 <__ledf2+0x82>
 8002544:	4326      	orrs	r6, r4
 8002546:	d103      	bne.n	8002550 <__ledf2+0x80>
 8002548:	4550      	cmp	r0, sl
 800254a:	d1f6      	bne.n	800253a <__ledf2+0x6a>
 800254c:	4311      	orrs	r1, r2
 800254e:	d01c      	beq.n	800258a <__ledf2+0xba>
 8002550:	2002      	movs	r0, #2
 8002552:	b003      	add	sp, #12
 8002554:	bcf0      	pop	{r4, r5, r6, r7}
 8002556:	46bb      	mov	fp, r7
 8002558:	46b2      	mov	sl, r6
 800255a:	46a9      	mov	r9, r5
 800255c:	46a0      	mov	r8, r4
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	2800      	cmp	r0, #0
 8002562:	d0ea      	beq.n	800253a <__ledf2+0x6a>
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	4563      	cmp	r3, ip
 8002568:	d1e7      	bne.n	800253a <__ledf2+0x6a>
 800256a:	4582      	cmp	sl, r0
 800256c:	dce5      	bgt.n	800253a <__ledf2+0x6a>
 800256e:	db02      	blt.n	8002576 <__ledf2+0xa6>
 8002570:	428e      	cmp	r6, r1
 8002572:	d8e2      	bhi.n	800253a <__ledf2+0x6a>
 8002574:	d00e      	beq.n	8002594 <__ledf2+0xc4>
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	0058      	lsls	r0, r3, #1
 800257a:	3801      	subs	r0, #1
 800257c:	e7e9      	b.n	8002552 <__ledf2+0x82>
 800257e:	2c00      	cmp	r4, #0
 8002580:	d0cd      	beq.n	800251e <__ledf2+0x4e>
 8002582:	e7d7      	b.n	8002534 <__ledf2+0x64>
 8002584:	2c00      	cmp	r4, #0
 8002586:	d0e4      	beq.n	8002552 <__ledf2+0x82>
 8002588:	e7d7      	b.n	800253a <__ledf2+0x6a>
 800258a:	9b01      	ldr	r3, [sp, #4]
 800258c:	2000      	movs	r0, #0
 800258e:	4563      	cmp	r3, ip
 8002590:	d0df      	beq.n	8002552 <__ledf2+0x82>
 8002592:	e7d2      	b.n	800253a <__ledf2+0x6a>
 8002594:	45c8      	cmp	r8, r9
 8002596:	d8d0      	bhi.n	800253a <__ledf2+0x6a>
 8002598:	2000      	movs	r0, #0
 800259a:	45c8      	cmp	r8, r9
 800259c:	d2d9      	bcs.n	8002552 <__ledf2+0x82>
 800259e:	e7ea      	b.n	8002576 <__ledf2+0xa6>
 80025a0:	9b01      	ldr	r3, [sp, #4]
 80025a2:	4563      	cmp	r3, ip
 80025a4:	d0e4      	beq.n	8002570 <__ledf2+0xa0>
 80025a6:	e7c8      	b.n	800253a <__ledf2+0x6a>
 80025a8:	000007ff 	.word	0x000007ff

080025ac <__aeabi_dmul>:
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	4657      	mov	r7, sl
 80025b0:	464e      	mov	r6, r9
 80025b2:	46de      	mov	lr, fp
 80025b4:	4645      	mov	r5, r8
 80025b6:	b5e0      	push	{r5, r6, r7, lr}
 80025b8:	001f      	movs	r7, r3
 80025ba:	030b      	lsls	r3, r1, #12
 80025bc:	0b1b      	lsrs	r3, r3, #12
 80025be:	0016      	movs	r6, r2
 80025c0:	469a      	mov	sl, r3
 80025c2:	0fca      	lsrs	r2, r1, #31
 80025c4:	004b      	lsls	r3, r1, #1
 80025c6:	0004      	movs	r4, r0
 80025c8:	4691      	mov	r9, r2
 80025ca:	b085      	sub	sp, #20
 80025cc:	0d5b      	lsrs	r3, r3, #21
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dmul+0x26>
 80025d0:	e1cf      	b.n	8002972 <__aeabi_dmul+0x3c6>
 80025d2:	4acd      	ldr	r2, [pc, #820]	@ (8002908 <__aeabi_dmul+0x35c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d055      	beq.n	8002684 <__aeabi_dmul+0xd8>
 80025d8:	4651      	mov	r1, sl
 80025da:	0f42      	lsrs	r2, r0, #29
 80025dc:	00c9      	lsls	r1, r1, #3
 80025de:	430a      	orrs	r2, r1
 80025e0:	2180      	movs	r1, #128	@ 0x80
 80025e2:	0409      	lsls	r1, r1, #16
 80025e4:	4311      	orrs	r1, r2
 80025e6:	00c2      	lsls	r2, r0, #3
 80025e8:	4690      	mov	r8, r2
 80025ea:	4ac8      	ldr	r2, [pc, #800]	@ (800290c <__aeabi_dmul+0x360>)
 80025ec:	468a      	mov	sl, r1
 80025ee:	4693      	mov	fp, r2
 80025f0:	449b      	add	fp, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	2500      	movs	r5, #0
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	033c      	lsls	r4, r7, #12
 80025fa:	007b      	lsls	r3, r7, #1
 80025fc:	0ffa      	lsrs	r2, r7, #31
 80025fe:	9601      	str	r6, [sp, #4]
 8002600:	0b24      	lsrs	r4, r4, #12
 8002602:	0d5b      	lsrs	r3, r3, #21
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	d100      	bne.n	800260a <__aeabi_dmul+0x5e>
 8002608:	e188      	b.n	800291c <__aeabi_dmul+0x370>
 800260a:	4abf      	ldr	r2, [pc, #764]	@ (8002908 <__aeabi_dmul+0x35c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d100      	bne.n	8002612 <__aeabi_dmul+0x66>
 8002610:	e092      	b.n	8002738 <__aeabi_dmul+0x18c>
 8002612:	4abe      	ldr	r2, [pc, #760]	@ (800290c <__aeabi_dmul+0x360>)
 8002614:	4694      	mov	ip, r2
 8002616:	4463      	add	r3, ip
 8002618:	449b      	add	fp, r3
 800261a:	2d0a      	cmp	r5, #10
 800261c:	dc42      	bgt.n	80026a4 <__aeabi_dmul+0xf8>
 800261e:	00e4      	lsls	r4, r4, #3
 8002620:	0f73      	lsrs	r3, r6, #29
 8002622:	4323      	orrs	r3, r4
 8002624:	2480      	movs	r4, #128	@ 0x80
 8002626:	4649      	mov	r1, r9
 8002628:	0424      	lsls	r4, r4, #16
 800262a:	431c      	orrs	r4, r3
 800262c:	00f3      	lsls	r3, r6, #3
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b00      	ldr	r3, [sp, #0]
 8002632:	2000      	movs	r0, #0
 8002634:	4059      	eors	r1, r3
 8002636:	b2cb      	uxtb	r3, r1
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	2d02      	cmp	r5, #2
 800263c:	dc00      	bgt.n	8002640 <__aeabi_dmul+0x94>
 800263e:	e094      	b.n	800276a <__aeabi_dmul+0x1be>
 8002640:	2301      	movs	r3, #1
 8002642:	40ab      	lsls	r3, r5
 8002644:	001d      	movs	r5, r3
 8002646:	23a6      	movs	r3, #166	@ 0xa6
 8002648:	002a      	movs	r2, r5
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	401a      	ands	r2, r3
 800264e:	421d      	tst	r5, r3
 8002650:	d000      	beq.n	8002654 <__aeabi_dmul+0xa8>
 8002652:	e229      	b.n	8002aa8 <__aeabi_dmul+0x4fc>
 8002654:	2390      	movs	r3, #144	@ 0x90
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	421d      	tst	r5, r3
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0xb2>
 800265c:	e24d      	b.n	8002afa <__aeabi_dmul+0x54e>
 800265e:	2300      	movs	r3, #0
 8002660:	2480      	movs	r4, #128	@ 0x80
 8002662:	4699      	mov	r9, r3
 8002664:	0324      	lsls	r4, r4, #12
 8002666:	4ba8      	ldr	r3, [pc, #672]	@ (8002908 <__aeabi_dmul+0x35c>)
 8002668:	0010      	movs	r0, r2
 800266a:	464a      	mov	r2, r9
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4323      	orrs	r3, r4
 8002670:	07d2      	lsls	r2, r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	b005      	add	sp, #20
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	4652      	mov	r2, sl
 8002686:	4302      	orrs	r2, r0
 8002688:	4690      	mov	r8, r2
 800268a:	d000      	beq.n	800268e <__aeabi_dmul+0xe2>
 800268c:	e1ac      	b.n	80029e8 <__aeabi_dmul+0x43c>
 800268e:	469b      	mov	fp, r3
 8002690:	2302      	movs	r3, #2
 8002692:	4692      	mov	sl, r2
 8002694:	2508      	movs	r5, #8
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	e7ae      	b.n	80025f8 <__aeabi_dmul+0x4c>
 800269a:	9b00      	ldr	r3, [sp, #0]
 800269c:	46a2      	mov	sl, r4
 800269e:	4699      	mov	r9, r3
 80026a0:	9b01      	ldr	r3, [sp, #4]
 80026a2:	4698      	mov	r8, r3
 80026a4:	9b02      	ldr	r3, [sp, #8]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d100      	bne.n	80026ac <__aeabi_dmul+0x100>
 80026aa:	e1ca      	b.n	8002a42 <__aeabi_dmul+0x496>
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dmul+0x106>
 80026b0:	e192      	b.n	80029d8 <__aeabi_dmul+0x42c>
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d110      	bne.n	80026d8 <__aeabi_dmul+0x12c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2400      	movs	r4, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	e7d4      	b.n	8002668 <__aeabi_dmul+0xbc>
 80026be:	2201      	movs	r2, #1
 80026c0:	087b      	lsrs	r3, r7, #1
 80026c2:	403a      	ands	r2, r7
 80026c4:	4313      	orrs	r3, r2
 80026c6:	4652      	mov	r2, sl
 80026c8:	07d2      	lsls	r2, r2, #31
 80026ca:	4313      	orrs	r3, r2
 80026cc:	4698      	mov	r8, r3
 80026ce:	4653      	mov	r3, sl
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	469a      	mov	sl, r3
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	4699      	mov	r9, r3
 80026d8:	465b      	mov	r3, fp
 80026da:	1c58      	adds	r0, r3, #1
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	445b      	add	r3, fp
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dc00      	bgt.n	80026e8 <__aeabi_dmul+0x13c>
 80026e6:	e1b1      	b.n	8002a4c <__aeabi_dmul+0x4a0>
 80026e8:	4642      	mov	r2, r8
 80026ea:	0752      	lsls	r2, r2, #29
 80026ec:	d00b      	beq.n	8002706 <__aeabi_dmul+0x15a>
 80026ee:	220f      	movs	r2, #15
 80026f0:	4641      	mov	r1, r8
 80026f2:	400a      	ands	r2, r1
 80026f4:	2a04      	cmp	r2, #4
 80026f6:	d006      	beq.n	8002706 <__aeabi_dmul+0x15a>
 80026f8:	4642      	mov	r2, r8
 80026fa:	1d11      	adds	r1, r2, #4
 80026fc:	4541      	cmp	r1, r8
 80026fe:	4192      	sbcs	r2, r2
 8002700:	4688      	mov	r8, r1
 8002702:	4252      	negs	r2, r2
 8002704:	4492      	add	sl, r2
 8002706:	4652      	mov	r2, sl
 8002708:	01d2      	lsls	r2, r2, #7
 800270a:	d506      	bpl.n	800271a <__aeabi_dmul+0x16e>
 800270c:	4652      	mov	r2, sl
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <__aeabi_dmul+0x364>)
 8002710:	401a      	ands	r2, r3
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	4692      	mov	sl, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	18c3      	adds	r3, r0, r3
 800271a:	4a7e      	ldr	r2, [pc, #504]	@ (8002914 <__aeabi_dmul+0x368>)
 800271c:	4293      	cmp	r3, r2
 800271e:	dd00      	ble.n	8002722 <__aeabi_dmul+0x176>
 8002720:	e18f      	b.n	8002a42 <__aeabi_dmul+0x496>
 8002722:	4642      	mov	r2, r8
 8002724:	08d1      	lsrs	r1, r2, #3
 8002726:	4652      	mov	r2, sl
 8002728:	0752      	lsls	r2, r2, #29
 800272a:	430a      	orrs	r2, r1
 800272c:	4651      	mov	r1, sl
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	024c      	lsls	r4, r1, #9
 8002732:	0b24      	lsrs	r4, r4, #12
 8002734:	0d5b      	lsrs	r3, r3, #21
 8002736:	e797      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002738:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <__aeabi_dmul+0x35c>)
 800273a:	4326      	orrs	r6, r4
 800273c:	469c      	mov	ip, r3
 800273e:	44e3      	add	fp, ip
 8002740:	2e00      	cmp	r6, #0
 8002742:	d100      	bne.n	8002746 <__aeabi_dmul+0x19a>
 8002744:	e16f      	b.n	8002a26 <__aeabi_dmul+0x47a>
 8002746:	2303      	movs	r3, #3
 8002748:	4649      	mov	r1, r9
 800274a:	431d      	orrs	r5, r3
 800274c:	9b00      	ldr	r3, [sp, #0]
 800274e:	4059      	eors	r1, r3
 8002750:	b2cb      	uxtb	r3, r1
 8002752:	9303      	str	r3, [sp, #12]
 8002754:	2d0a      	cmp	r5, #10
 8002756:	dd00      	ble.n	800275a <__aeabi_dmul+0x1ae>
 8002758:	e133      	b.n	80029c2 <__aeabi_dmul+0x416>
 800275a:	2301      	movs	r3, #1
 800275c:	40ab      	lsls	r3, r5
 800275e:	001d      	movs	r5, r3
 8002760:	2303      	movs	r3, #3
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2288      	movs	r2, #136	@ 0x88
 8002766:	422a      	tst	r2, r5
 8002768:	d197      	bne.n	800269a <__aeabi_dmul+0xee>
 800276a:	4642      	mov	r2, r8
 800276c:	4643      	mov	r3, r8
 800276e:	0412      	lsls	r2, r2, #16
 8002770:	0c12      	lsrs	r2, r2, #16
 8002772:	0016      	movs	r6, r2
 8002774:	9801      	ldr	r0, [sp, #4]
 8002776:	0c1d      	lsrs	r5, r3, #16
 8002778:	0c03      	lsrs	r3, r0, #16
 800277a:	0400      	lsls	r0, r0, #16
 800277c:	0c00      	lsrs	r0, r0, #16
 800277e:	4346      	muls	r6, r0
 8002780:	46b4      	mov	ip, r6
 8002782:	001e      	movs	r6, r3
 8002784:	436e      	muls	r6, r5
 8002786:	9600      	str	r6, [sp, #0]
 8002788:	0016      	movs	r6, r2
 800278a:	0007      	movs	r7, r0
 800278c:	435e      	muls	r6, r3
 800278e:	4661      	mov	r1, ip
 8002790:	46b0      	mov	r8, r6
 8002792:	436f      	muls	r7, r5
 8002794:	0c0e      	lsrs	r6, r1, #16
 8002796:	44b8      	add	r8, r7
 8002798:	4446      	add	r6, r8
 800279a:	42b7      	cmp	r7, r6
 800279c:	d905      	bls.n	80027aa <__aeabi_dmul+0x1fe>
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0249      	lsls	r1, r1, #9
 80027a2:	4688      	mov	r8, r1
 80027a4:	9f00      	ldr	r7, [sp, #0]
 80027a6:	4447      	add	r7, r8
 80027a8:	9700      	str	r7, [sp, #0]
 80027aa:	4661      	mov	r1, ip
 80027ac:	0409      	lsls	r1, r1, #16
 80027ae:	0c09      	lsrs	r1, r1, #16
 80027b0:	0c37      	lsrs	r7, r6, #16
 80027b2:	0436      	lsls	r6, r6, #16
 80027b4:	468c      	mov	ip, r1
 80027b6:	0031      	movs	r1, r6
 80027b8:	4461      	add	r1, ip
 80027ba:	9101      	str	r1, [sp, #4]
 80027bc:	0011      	movs	r1, r2
 80027be:	0c26      	lsrs	r6, r4, #16
 80027c0:	0424      	lsls	r4, r4, #16
 80027c2:	0c24      	lsrs	r4, r4, #16
 80027c4:	4361      	muls	r1, r4
 80027c6:	468c      	mov	ip, r1
 80027c8:	0021      	movs	r1, r4
 80027ca:	4369      	muls	r1, r5
 80027cc:	4689      	mov	r9, r1
 80027ce:	4661      	mov	r1, ip
 80027d0:	0c09      	lsrs	r1, r1, #16
 80027d2:	4688      	mov	r8, r1
 80027d4:	4372      	muls	r2, r6
 80027d6:	444a      	add	r2, r9
 80027d8:	4442      	add	r2, r8
 80027da:	4375      	muls	r5, r6
 80027dc:	4591      	cmp	r9, r2
 80027de:	d903      	bls.n	80027e8 <__aeabi_dmul+0x23c>
 80027e0:	2180      	movs	r1, #128	@ 0x80
 80027e2:	0249      	lsls	r1, r1, #9
 80027e4:	4688      	mov	r8, r1
 80027e6:	4445      	add	r5, r8
 80027e8:	0c11      	lsrs	r1, r2, #16
 80027ea:	4688      	mov	r8, r1
 80027ec:	4661      	mov	r1, ip
 80027ee:	0409      	lsls	r1, r1, #16
 80027f0:	0c09      	lsrs	r1, r1, #16
 80027f2:	468c      	mov	ip, r1
 80027f4:	0412      	lsls	r2, r2, #16
 80027f6:	4462      	add	r2, ip
 80027f8:	18b9      	adds	r1, r7, r2
 80027fa:	9102      	str	r1, [sp, #8]
 80027fc:	4651      	mov	r1, sl
 80027fe:	0c09      	lsrs	r1, r1, #16
 8002800:	468c      	mov	ip, r1
 8002802:	4651      	mov	r1, sl
 8002804:	040f      	lsls	r7, r1, #16
 8002806:	0c3f      	lsrs	r7, r7, #16
 8002808:	0039      	movs	r1, r7
 800280a:	4341      	muls	r1, r0
 800280c:	4445      	add	r5, r8
 800280e:	4688      	mov	r8, r1
 8002810:	4661      	mov	r1, ip
 8002812:	4341      	muls	r1, r0
 8002814:	468a      	mov	sl, r1
 8002816:	4641      	mov	r1, r8
 8002818:	4660      	mov	r0, ip
 800281a:	0c09      	lsrs	r1, r1, #16
 800281c:	4689      	mov	r9, r1
 800281e:	4358      	muls	r0, r3
 8002820:	437b      	muls	r3, r7
 8002822:	4453      	add	r3, sl
 8002824:	444b      	add	r3, r9
 8002826:	459a      	cmp	sl, r3
 8002828:	d903      	bls.n	8002832 <__aeabi_dmul+0x286>
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	0249      	lsls	r1, r1, #9
 800282e:	4689      	mov	r9, r1
 8002830:	4448      	add	r0, r9
 8002832:	0c19      	lsrs	r1, r3, #16
 8002834:	4689      	mov	r9, r1
 8002836:	4641      	mov	r1, r8
 8002838:	0409      	lsls	r1, r1, #16
 800283a:	0c09      	lsrs	r1, r1, #16
 800283c:	4688      	mov	r8, r1
 800283e:	0039      	movs	r1, r7
 8002840:	4361      	muls	r1, r4
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	4443      	add	r3, r8
 8002846:	4688      	mov	r8, r1
 8002848:	4661      	mov	r1, ip
 800284a:	434c      	muls	r4, r1
 800284c:	4371      	muls	r1, r6
 800284e:	468c      	mov	ip, r1
 8002850:	4641      	mov	r1, r8
 8002852:	4377      	muls	r7, r6
 8002854:	0c0e      	lsrs	r6, r1, #16
 8002856:	193f      	adds	r7, r7, r4
 8002858:	19f6      	adds	r6, r6, r7
 800285a:	4448      	add	r0, r9
 800285c:	42b4      	cmp	r4, r6
 800285e:	d903      	bls.n	8002868 <__aeabi_dmul+0x2bc>
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0249      	lsls	r1, r1, #9
 8002864:	4689      	mov	r9, r1
 8002866:	44cc      	add	ip, r9
 8002868:	9902      	ldr	r1, [sp, #8]
 800286a:	9f00      	ldr	r7, [sp, #0]
 800286c:	4689      	mov	r9, r1
 800286e:	0431      	lsls	r1, r6, #16
 8002870:	444f      	add	r7, r9
 8002872:	4689      	mov	r9, r1
 8002874:	4641      	mov	r1, r8
 8002876:	4297      	cmp	r7, r2
 8002878:	4192      	sbcs	r2, r2
 800287a:	040c      	lsls	r4, r1, #16
 800287c:	0c24      	lsrs	r4, r4, #16
 800287e:	444c      	add	r4, r9
 8002880:	18ff      	adds	r7, r7, r3
 8002882:	4252      	negs	r2, r2
 8002884:	1964      	adds	r4, r4, r5
 8002886:	18a1      	adds	r1, r4, r2
 8002888:	429f      	cmp	r7, r3
 800288a:	419b      	sbcs	r3, r3
 800288c:	4688      	mov	r8, r1
 800288e:	4682      	mov	sl, r0
 8002890:	425b      	negs	r3, r3
 8002892:	4699      	mov	r9, r3
 8002894:	4590      	cmp	r8, r2
 8002896:	4192      	sbcs	r2, r2
 8002898:	42ac      	cmp	r4, r5
 800289a:	41a4      	sbcs	r4, r4
 800289c:	44c2      	add	sl, r8
 800289e:	44d1      	add	r9, sl
 80028a0:	4252      	negs	r2, r2
 80028a2:	4264      	negs	r4, r4
 80028a4:	4314      	orrs	r4, r2
 80028a6:	4599      	cmp	r9, r3
 80028a8:	419b      	sbcs	r3, r3
 80028aa:	4582      	cmp	sl, r0
 80028ac:	4192      	sbcs	r2, r2
 80028ae:	425b      	negs	r3, r3
 80028b0:	4252      	negs	r2, r2
 80028b2:	4313      	orrs	r3, r2
 80028b4:	464a      	mov	r2, r9
 80028b6:	0c36      	lsrs	r6, r6, #16
 80028b8:	19a4      	adds	r4, r4, r6
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	4463      	add	r3, ip
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	0dd2      	lsrs	r2, r2, #23
 80028c2:	431a      	orrs	r2, r3
 80028c4:	9901      	ldr	r1, [sp, #4]
 80028c6:	4692      	mov	sl, r2
 80028c8:	027a      	lsls	r2, r7, #9
 80028ca:	430a      	orrs	r2, r1
 80028cc:	1e50      	subs	r0, r2, #1
 80028ce:	4182      	sbcs	r2, r0
 80028d0:	0dff      	lsrs	r7, r7, #23
 80028d2:	4317      	orrs	r7, r2
 80028d4:	464a      	mov	r2, r9
 80028d6:	0252      	lsls	r2, r2, #9
 80028d8:	4317      	orrs	r7, r2
 80028da:	46b8      	mov	r8, r7
 80028dc:	01db      	lsls	r3, r3, #7
 80028de:	d500      	bpl.n	80028e2 <__aeabi_dmul+0x336>
 80028e0:	e6ed      	b.n	80026be <__aeabi_dmul+0x112>
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <__aeabi_dmul+0x36c>)
 80028e4:	9a03      	ldr	r2, [sp, #12]
 80028e6:	445b      	add	r3, fp
 80028e8:	4691      	mov	r9, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dmul+0x344>
 80028ee:	e0ac      	b.n	8002a4a <__aeabi_dmul+0x49e>
 80028f0:	003a      	movs	r2, r7
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dmul+0x34c>
 80028f6:	e710      	b.n	800271a <__aeabi_dmul+0x16e>
 80028f8:	220f      	movs	r2, #15
 80028fa:	4658      	mov	r0, fp
 80028fc:	403a      	ands	r2, r7
 80028fe:	2a04      	cmp	r2, #4
 8002900:	d000      	beq.n	8002904 <__aeabi_dmul+0x358>
 8002902:	e6f9      	b.n	80026f8 <__aeabi_dmul+0x14c>
 8002904:	e709      	b.n	800271a <__aeabi_dmul+0x16e>
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	000007ff 	.word	0x000007ff
 800290c:	fffffc01 	.word	0xfffffc01
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	000007fe 	.word	0x000007fe
 8002918:	000003ff 	.word	0x000003ff
 800291c:	0022      	movs	r2, r4
 800291e:	4332      	orrs	r2, r6
 8002920:	d06f      	beq.n	8002a02 <__aeabi_dmul+0x456>
 8002922:	2c00      	cmp	r4, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dmul+0x37c>
 8002926:	e0c2      	b.n	8002aae <__aeabi_dmul+0x502>
 8002928:	0020      	movs	r0, r4
 800292a:	f000 fea9 	bl	8003680 <__clzsi2>
 800292e:	0002      	movs	r2, r0
 8002930:	0003      	movs	r3, r0
 8002932:	3a0b      	subs	r2, #11
 8002934:	201d      	movs	r0, #29
 8002936:	1a82      	subs	r2, r0, r2
 8002938:	0030      	movs	r0, r6
 800293a:	0019      	movs	r1, r3
 800293c:	40d0      	lsrs	r0, r2
 800293e:	3908      	subs	r1, #8
 8002940:	408c      	lsls	r4, r1
 8002942:	0002      	movs	r2, r0
 8002944:	4322      	orrs	r2, r4
 8002946:	0034      	movs	r4, r6
 8002948:	408c      	lsls	r4, r1
 800294a:	4659      	mov	r1, fp
 800294c:	1acb      	subs	r3, r1, r3
 800294e:	4986      	ldr	r1, [pc, #536]	@ (8002b68 <__aeabi_dmul+0x5bc>)
 8002950:	468b      	mov	fp, r1
 8002952:	449b      	add	fp, r3
 8002954:	2d0a      	cmp	r5, #10
 8002956:	dd00      	ble.n	800295a <__aeabi_dmul+0x3ae>
 8002958:	e6a4      	b.n	80026a4 <__aeabi_dmul+0xf8>
 800295a:	4649      	mov	r1, r9
 800295c:	9b00      	ldr	r3, [sp, #0]
 800295e:	9401      	str	r4, [sp, #4]
 8002960:	4059      	eors	r1, r3
 8002962:	b2cb      	uxtb	r3, r1
 8002964:	0014      	movs	r4, r2
 8002966:	2000      	movs	r0, #0
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	2d02      	cmp	r5, #2
 800296c:	dd00      	ble.n	8002970 <__aeabi_dmul+0x3c4>
 800296e:	e667      	b.n	8002640 <__aeabi_dmul+0x94>
 8002970:	e6fb      	b.n	800276a <__aeabi_dmul+0x1be>
 8002972:	4653      	mov	r3, sl
 8002974:	4303      	orrs	r3, r0
 8002976:	4698      	mov	r8, r3
 8002978:	d03c      	beq.n	80029f4 <__aeabi_dmul+0x448>
 800297a:	4653      	mov	r3, sl
 800297c:	2b00      	cmp	r3, #0
 800297e:	d100      	bne.n	8002982 <__aeabi_dmul+0x3d6>
 8002980:	e0a3      	b.n	8002aca <__aeabi_dmul+0x51e>
 8002982:	4650      	mov	r0, sl
 8002984:	f000 fe7c 	bl	8003680 <__clzsi2>
 8002988:	230b      	movs	r3, #11
 800298a:	425b      	negs	r3, r3
 800298c:	469c      	mov	ip, r3
 800298e:	0002      	movs	r2, r0
 8002990:	4484      	add	ip, r0
 8002992:	0011      	movs	r1, r2
 8002994:	4650      	mov	r0, sl
 8002996:	3908      	subs	r1, #8
 8002998:	4088      	lsls	r0, r1
 800299a:	231d      	movs	r3, #29
 800299c:	4680      	mov	r8, r0
 800299e:	4660      	mov	r0, ip
 80029a0:	1a1b      	subs	r3, r3, r0
 80029a2:	0020      	movs	r0, r4
 80029a4:	40d8      	lsrs	r0, r3
 80029a6:	0003      	movs	r3, r0
 80029a8:	4640      	mov	r0, r8
 80029aa:	4303      	orrs	r3, r0
 80029ac:	469a      	mov	sl, r3
 80029ae:	0023      	movs	r3, r4
 80029b0:	408b      	lsls	r3, r1
 80029b2:	4698      	mov	r8, r3
 80029b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <__aeabi_dmul+0x5bc>)
 80029b6:	2500      	movs	r5, #0
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	469b      	mov	fp, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	e61a      	b.n	80025f8 <__aeabi_dmul+0x4c>
 80029c2:	2d0f      	cmp	r5, #15
 80029c4:	d000      	beq.n	80029c8 <__aeabi_dmul+0x41c>
 80029c6:	e0c9      	b.n	8002b5c <__aeabi_dmul+0x5b0>
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	4652      	mov	r2, sl
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	421a      	tst	r2, r3
 80029d0:	d002      	beq.n	80029d8 <__aeabi_dmul+0x42c>
 80029d2:	421c      	tst	r4, r3
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dmul+0x42c>
 80029d6:	e092      	b.n	8002afe <__aeabi_dmul+0x552>
 80029d8:	2480      	movs	r4, #128	@ 0x80
 80029da:	4653      	mov	r3, sl
 80029dc:	0324      	lsls	r4, r4, #12
 80029de:	431c      	orrs	r4, r3
 80029e0:	0324      	lsls	r4, r4, #12
 80029e2:	4642      	mov	r2, r8
 80029e4:	0b24      	lsrs	r4, r4, #12
 80029e6:	e63e      	b.n	8002666 <__aeabi_dmul+0xba>
 80029e8:	469b      	mov	fp, r3
 80029ea:	2303      	movs	r3, #3
 80029ec:	4680      	mov	r8, r0
 80029ee:	250c      	movs	r5, #12
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	e601      	b.n	80025f8 <__aeabi_dmul+0x4c>
 80029f4:	2300      	movs	r3, #0
 80029f6:	469a      	mov	sl, r3
 80029f8:	469b      	mov	fp, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	2504      	movs	r5, #4
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	e5fa      	b.n	80025f8 <__aeabi_dmul+0x4c>
 8002a02:	2101      	movs	r1, #1
 8002a04:	430d      	orrs	r5, r1
 8002a06:	2d0a      	cmp	r5, #10
 8002a08:	dd00      	ble.n	8002a0c <__aeabi_dmul+0x460>
 8002a0a:	e64b      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	9800      	ldr	r0, [sp, #0]
 8002a10:	4041      	eors	r1, r0
 8002a12:	b2c9      	uxtb	r1, r1
 8002a14:	9103      	str	r1, [sp, #12]
 8002a16:	2d02      	cmp	r5, #2
 8002a18:	dc00      	bgt.n	8002a1c <__aeabi_dmul+0x470>
 8002a1a:	e096      	b.n	8002b4a <__aeabi_dmul+0x59e>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2400      	movs	r4, #0
 8002a20:	2001      	movs	r0, #1
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	e60c      	b.n	8002640 <__aeabi_dmul+0x94>
 8002a26:	4649      	mov	r1, r9
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9a00      	ldr	r2, [sp, #0]
 8002a2c:	432b      	orrs	r3, r5
 8002a2e:	4051      	eors	r1, r2
 8002a30:	b2ca      	uxtb	r2, r1
 8002a32:	9203      	str	r2, [sp, #12]
 8002a34:	2b0a      	cmp	r3, #10
 8002a36:	dd00      	ble.n	8002a3a <__aeabi_dmul+0x48e>
 8002a38:	e634      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	d157      	bne.n	8002aee <__aeabi_dmul+0x542>
 8002a3e:	9b03      	ldr	r3, [sp, #12]
 8002a40:	4699      	mov	r9, r3
 8002a42:	2400      	movs	r4, #0
 8002a44:	2200      	movs	r2, #0
 8002a46:	4b49      	ldr	r3, [pc, #292]	@ (8002b6c <__aeabi_dmul+0x5c0>)
 8002a48:	e60e      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002a4a:	4658      	mov	r0, fp
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	1ac9      	subs	r1, r1, r3
 8002a50:	2938      	cmp	r1, #56	@ 0x38
 8002a52:	dd00      	ble.n	8002a56 <__aeabi_dmul+0x4aa>
 8002a54:	e62f      	b.n	80026b6 <__aeabi_dmul+0x10a>
 8002a56:	291f      	cmp	r1, #31
 8002a58:	dd56      	ble.n	8002b08 <__aeabi_dmul+0x55c>
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	4654      	mov	r4, sl
 8002a5e:	4252      	negs	r2, r2
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	40dc      	lsrs	r4, r3
 8002a64:	2920      	cmp	r1, #32
 8002a66:	d007      	beq.n	8002a78 <__aeabi_dmul+0x4cc>
 8002a68:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <__aeabi_dmul+0x5c4>)
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	469c      	mov	ip, r3
 8002a6e:	4653      	mov	r3, sl
 8002a70:	4460      	add	r0, ip
 8002a72:	4083      	lsls	r3, r0
 8002a74:	431a      	orrs	r2, r3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4642      	mov	r2, r8
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	1e53      	subs	r3, r2, #1
 8002a7e:	419a      	sbcs	r2, r3
 8002a80:	000b      	movs	r3, r1
 8002a82:	4322      	orrs	r2, r4
 8002a84:	4013      	ands	r3, r2
 8002a86:	2400      	movs	r4, #0
 8002a88:	4211      	tst	r1, r2
 8002a8a:	d009      	beq.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d05d      	beq.n	8002b50 <__aeabi_dmul+0x5a4>
 8002a94:	1d11      	adds	r1, r2, #4
 8002a96:	4291      	cmp	r1, r2
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	000a      	movs	r2, r1
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	075b      	lsls	r3, r3, #29
 8002aa0:	08d2      	lsrs	r2, r2, #3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e5df      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	4699      	mov	r9, r3
 8002aac:	e5fa      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002aae:	9801      	ldr	r0, [sp, #4]
 8002ab0:	f000 fde6 	bl	8003680 <__clzsi2>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	3215      	adds	r2, #21
 8002aba:	3320      	adds	r3, #32
 8002abc:	2a1c      	cmp	r2, #28
 8002abe:	dc00      	bgt.n	8002ac2 <__aeabi_dmul+0x516>
 8002ac0:	e738      	b.n	8002934 <__aeabi_dmul+0x388>
 8002ac2:	9a01      	ldr	r2, [sp, #4]
 8002ac4:	3808      	subs	r0, #8
 8002ac6:	4082      	lsls	r2, r0
 8002ac8:	e73f      	b.n	800294a <__aeabi_dmul+0x39e>
 8002aca:	f000 fdd9 	bl	8003680 <__clzsi2>
 8002ace:	2315      	movs	r3, #21
 8002ad0:	469c      	mov	ip, r3
 8002ad2:	4484      	add	ip, r0
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	4663      	mov	r3, ip
 8002ad8:	3220      	adds	r2, #32
 8002ada:	2b1c      	cmp	r3, #28
 8002adc:	dc00      	bgt.n	8002ae0 <__aeabi_dmul+0x534>
 8002ade:	e758      	b.n	8002992 <__aeabi_dmul+0x3e6>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	0023      	movs	r3, r4
 8002ae6:	3808      	subs	r0, #8
 8002ae8:	4083      	lsls	r3, r0
 8002aea:	469a      	mov	sl, r3
 8002aec:	e762      	b.n	80029b4 <__aeabi_dmul+0x408>
 8002aee:	001d      	movs	r5, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	2400      	movs	r4, #0
 8002af4:	2002      	movs	r0, #2
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	e5a2      	b.n	8002640 <__aeabi_dmul+0x94>
 8002afa:	9002      	str	r0, [sp, #8]
 8002afc:	e632      	b.n	8002764 <__aeabi_dmul+0x1b8>
 8002afe:	431c      	orrs	r4, r3
 8002b00:	9b00      	ldr	r3, [sp, #0]
 8002b02:	9a01      	ldr	r2, [sp, #4]
 8002b04:	4699      	mov	r9, r3
 8002b06:	e5ae      	b.n	8002666 <__aeabi_dmul+0xba>
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <__aeabi_dmul+0x5c8>)
 8002b0a:	4652      	mov	r2, sl
 8002b0c:	18c3      	adds	r3, r0, r3
 8002b0e:	4640      	mov	r0, r8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	40c8      	lsrs	r0, r1
 8002b14:	4302      	orrs	r2, r0
 8002b16:	4640      	mov	r0, r8
 8002b18:	4098      	lsls	r0, r3
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	4183      	sbcs	r3, r0
 8002b20:	4654      	mov	r4, sl
 8002b22:	431a      	orrs	r2, r3
 8002b24:	40cc      	lsrs	r4, r1
 8002b26:	0753      	lsls	r3, r2, #29
 8002b28:	d009      	beq.n	8002b3e <__aeabi_dmul+0x592>
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d005      	beq.n	8002b3e <__aeabi_dmul+0x592>
 8002b32:	1d13      	adds	r3, r2, #4
 8002b34:	4293      	cmp	r3, r2
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	4252      	negs	r2, r2
 8002b3a:	18a4      	adds	r4, r4, r2
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	0223      	lsls	r3, r4, #8
 8002b40:	d508      	bpl.n	8002b54 <__aeabi_dmul+0x5a8>
 8002b42:	2301      	movs	r3, #1
 8002b44:	2400      	movs	r4, #0
 8002b46:	2200      	movs	r2, #0
 8002b48:	e58e      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002b4a:	4689      	mov	r9, r1
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	e58b      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002b50:	2300      	movs	r3, #0
 8002b52:	e7a5      	b.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002b54:	0763      	lsls	r3, r4, #29
 8002b56:	0264      	lsls	r4, r4, #9
 8002b58:	0b24      	lsrs	r4, r4, #12
 8002b5a:	e7a1      	b.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002b5c:	9b00      	ldr	r3, [sp, #0]
 8002b5e:	46a2      	mov	sl, r4
 8002b60:	4699      	mov	r9, r3
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	4698      	mov	r8, r3
 8002b66:	e737      	b.n	80029d8 <__aeabi_dmul+0x42c>
 8002b68:	fffffc0d 	.word	0xfffffc0d
 8002b6c:	000007ff 	.word	0x000007ff
 8002b70:	0000043e 	.word	0x0000043e
 8002b74:	0000041e 	.word	0x0000041e

08002b78 <__aeabi_dsub>:
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7a:	4657      	mov	r7, sl
 8002b7c:	464e      	mov	r6, r9
 8002b7e:	4645      	mov	r5, r8
 8002b80:	46de      	mov	lr, fp
 8002b82:	b5e0      	push	{r5, r6, r7, lr}
 8002b84:	b083      	sub	sp, #12
 8002b86:	9000      	str	r0, [sp, #0]
 8002b88:	9101      	str	r1, [sp, #4]
 8002b8a:	030c      	lsls	r4, r1, #12
 8002b8c:	004d      	lsls	r5, r1, #1
 8002b8e:	0fce      	lsrs	r6, r1, #31
 8002b90:	0a61      	lsrs	r1, r4, #9
 8002b92:	9c00      	ldr	r4, [sp, #0]
 8002b94:	005f      	lsls	r7, r3, #1
 8002b96:	0f64      	lsrs	r4, r4, #29
 8002b98:	430c      	orrs	r4, r1
 8002b9a:	9900      	ldr	r1, [sp, #0]
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	00c8      	lsls	r0, r1, #3
 8002ba2:	0319      	lsls	r1, r3, #12
 8002ba4:	0d7b      	lsrs	r3, r7, #21
 8002ba6:	4699      	mov	r9, r3
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	4fcc      	ldr	r7, [pc, #816]	@ (8002edc <__aeabi_dsub+0x364>)
 8002bac:	0fdb      	lsrs	r3, r3, #31
 8002bae:	469c      	mov	ip, r3
 8002bb0:	0a4b      	lsrs	r3, r1, #9
 8002bb2:	9900      	ldr	r1, [sp, #0]
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	0f49      	lsrs	r1, r1, #29
 8002bb8:	4319      	orrs	r1, r3
 8002bba:	9b00      	ldr	r3, [sp, #0]
 8002bbc:	468b      	mov	fp, r1
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	0d6d      	lsrs	r5, r5, #21
 8002bc4:	45b9      	cmp	r9, r7
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x52>
 8002bc8:	e0bf      	b.n	8002d4a <__aeabi_dsub+0x1d2>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4661      	mov	r1, ip
 8002bce:	4059      	eors	r1, r3
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	468c      	mov	ip, r1
 8002bd4:	1aeb      	subs	r3, r5, r3
 8002bd6:	428e      	cmp	r6, r1
 8002bd8:	d075      	beq.n	8002cc6 <__aeabi_dsub+0x14e>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	dc00      	bgt.n	8002be0 <__aeabi_dsub+0x68>
 8002bde:	e2a3      	b.n	8003128 <__aeabi_dsub+0x5b0>
 8002be0:	4649      	mov	r1, r9
 8002be2:	2900      	cmp	r1, #0
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x70>
 8002be6:	e0ce      	b.n	8002d86 <__aeabi_dsub+0x20e>
 8002be8:	42bd      	cmp	r5, r7
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x76>
 8002bec:	e200      	b.n	8002ff0 <__aeabi_dsub+0x478>
 8002bee:	2701      	movs	r7, #1
 8002bf0:	2b38      	cmp	r3, #56	@ 0x38
 8002bf2:	dc19      	bgt.n	8002c28 <__aeabi_dsub+0xb0>
 8002bf4:	2780      	movs	r7, #128	@ 0x80
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	043f      	lsls	r7, r7, #16
 8002bfa:	4339      	orrs	r1, r7
 8002bfc:	468b      	mov	fp, r1
 8002bfe:	2b1f      	cmp	r3, #31
 8002c00:	dd00      	ble.n	8002c04 <__aeabi_dsub+0x8c>
 8002c02:	e1fa      	b.n	8002ffa <__aeabi_dsub+0x482>
 8002c04:	2720      	movs	r7, #32
 8002c06:	1af9      	subs	r1, r7, r3
 8002c08:	468c      	mov	ip, r1
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	4667      	mov	r7, ip
 8002c0e:	40b9      	lsls	r1, r7
 8002c10:	000f      	movs	r7, r1
 8002c12:	0011      	movs	r1, r2
 8002c14:	40d9      	lsrs	r1, r3
 8002c16:	430f      	orrs	r7, r1
 8002c18:	4661      	mov	r1, ip
 8002c1a:	408a      	lsls	r2, r1
 8002c1c:	1e51      	subs	r1, r2, #1
 8002c1e:	418a      	sbcs	r2, r1
 8002c20:	4659      	mov	r1, fp
 8002c22:	40d9      	lsrs	r1, r3
 8002c24:	4317      	orrs	r7, r2
 8002c26:	1a64      	subs	r4, r4, r1
 8002c28:	1bc7      	subs	r7, r0, r7
 8002c2a:	42b8      	cmp	r0, r7
 8002c2c:	4180      	sbcs	r0, r0
 8002c2e:	4240      	negs	r0, r0
 8002c30:	1a24      	subs	r4, r4, r0
 8002c32:	0223      	lsls	r3, r4, #8
 8002c34:	d400      	bmi.n	8002c38 <__aeabi_dsub+0xc0>
 8002c36:	e140      	b.n	8002eba <__aeabi_dsub+0x342>
 8002c38:	0264      	lsls	r4, r4, #9
 8002c3a:	0a64      	lsrs	r4, r4, #9
 8002c3c:	2c00      	cmp	r4, #0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0xca>
 8002c40:	e154      	b.n	8002eec <__aeabi_dsub+0x374>
 8002c42:	0020      	movs	r0, r4
 8002c44:	f000 fd1c 	bl	8003680 <__clzsi2>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	3b08      	subs	r3, #8
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	0038      	movs	r0, r7
 8002c50:	1aca      	subs	r2, r1, r3
 8002c52:	40d0      	lsrs	r0, r2
 8002c54:	409c      	lsls	r4, r3
 8002c56:	0002      	movs	r2, r0
 8002c58:	409f      	lsls	r7, r3
 8002c5a:	4322      	orrs	r2, r4
 8002c5c:	429d      	cmp	r5, r3
 8002c5e:	dd00      	ble.n	8002c62 <__aeabi_dsub+0xea>
 8002c60:	e1a6      	b.n	8002fb0 <__aeabi_dsub+0x438>
 8002c62:	1b58      	subs	r0, r3, r5
 8002c64:	3001      	adds	r0, #1
 8002c66:	1a09      	subs	r1, r1, r0
 8002c68:	003c      	movs	r4, r7
 8002c6a:	408f      	lsls	r7, r1
 8002c6c:	40c4      	lsrs	r4, r0
 8002c6e:	1e7b      	subs	r3, r7, #1
 8002c70:	419f      	sbcs	r7, r3
 8002c72:	0013      	movs	r3, r2
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4327      	orrs	r7, r4
 8002c78:	431f      	orrs	r7, r3
 8002c7a:	40c2      	lsrs	r2, r0
 8002c7c:	003b      	movs	r3, r7
 8002c7e:	0014      	movs	r4, r2
 8002c80:	2500      	movs	r5, #0
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d100      	bne.n	8002c88 <__aeabi_dsub+0x110>
 8002c86:	e1f7      	b.n	8003078 <__aeabi_dsub+0x500>
 8002c88:	077b      	lsls	r3, r7, #29
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x116>
 8002c8c:	e377      	b.n	800337e <__aeabi_dsub+0x806>
 8002c8e:	230f      	movs	r3, #15
 8002c90:	0038      	movs	r0, r7
 8002c92:	403b      	ands	r3, r7
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d004      	beq.n	8002ca2 <__aeabi_dsub+0x12a>
 8002c98:	1d38      	adds	r0, r7, #4
 8002c9a:	42b8      	cmp	r0, r7
 8002c9c:	41bf      	sbcs	r7, r7
 8002c9e:	427f      	negs	r7, r7
 8002ca0:	19e4      	adds	r4, r4, r7
 8002ca2:	0223      	lsls	r3, r4, #8
 8002ca4:	d400      	bmi.n	8002ca8 <__aeabi_dsub+0x130>
 8002ca6:	e368      	b.n	800337a <__aeabi_dsub+0x802>
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <__aeabi_dsub+0x364>)
 8002caa:	3501      	adds	r5, #1
 8002cac:	429d      	cmp	r5, r3
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x13a>
 8002cb0:	e0f4      	b.n	8002e9c <__aeabi_dsub+0x324>
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002cb4:	056d      	lsls	r5, r5, #21
 8002cb6:	401c      	ands	r4, r3
 8002cb8:	0d6d      	lsrs	r5, r5, #21
 8002cba:	0767      	lsls	r7, r4, #29
 8002cbc:	08c0      	lsrs	r0, r0, #3
 8002cbe:	0264      	lsls	r4, r4, #9
 8002cc0:	4307      	orrs	r7, r0
 8002cc2:	0b24      	lsrs	r4, r4, #12
 8002cc4:	e0ec      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dc00      	bgt.n	8002ccc <__aeabi_dsub+0x154>
 8002cca:	e329      	b.n	8003320 <__aeabi_dsub+0x7a8>
 8002ccc:	4649      	mov	r1, r9
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d000      	beq.n	8002cd4 <__aeabi_dsub+0x15c>
 8002cd2:	e0d6      	b.n	8002e82 <__aeabi_dsub+0x30a>
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x164>
 8002cda:	e12e      	b.n	8002f3a <__aeabi_dsub+0x3c2>
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x16c>
 8002ce2:	e1e6      	b.n	80030b2 <__aeabi_dsub+0x53a>
 8002ce4:	42bb      	cmp	r3, r7
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x172>
 8002ce8:	e182      	b.n	8002ff0 <__aeabi_dsub+0x478>
 8002cea:	2701      	movs	r7, #1
 8002cec:	000b      	movs	r3, r1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc14      	bgt.n	8002d1c <__aeabi_dsub+0x1a4>
 8002cf2:	2b1f      	cmp	r3, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x180>
 8002cf6:	e23c      	b.n	8003172 <__aeabi_dsub+0x5fa>
 8002cf8:	2720      	movs	r7, #32
 8002cfa:	1af9      	subs	r1, r7, r3
 8002cfc:	468c      	mov	ip, r1
 8002cfe:	4659      	mov	r1, fp
 8002d00:	4667      	mov	r7, ip
 8002d02:	40b9      	lsls	r1, r7
 8002d04:	000f      	movs	r7, r1
 8002d06:	0011      	movs	r1, r2
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	430f      	orrs	r7, r1
 8002d0c:	4661      	mov	r1, ip
 8002d0e:	408a      	lsls	r2, r1
 8002d10:	1e51      	subs	r1, r2, #1
 8002d12:	418a      	sbcs	r2, r1
 8002d14:	4659      	mov	r1, fp
 8002d16:	40d9      	lsrs	r1, r3
 8002d18:	4317      	orrs	r7, r2
 8002d1a:	1864      	adds	r4, r4, r1
 8002d1c:	183f      	adds	r7, r7, r0
 8002d1e:	4287      	cmp	r7, r0
 8002d20:	4180      	sbcs	r0, r0
 8002d22:	4240      	negs	r0, r0
 8002d24:	1824      	adds	r4, r4, r0
 8002d26:	0223      	lsls	r3, r4, #8
 8002d28:	d400      	bmi.n	8002d2c <__aeabi_dsub+0x1b4>
 8002d2a:	e0c6      	b.n	8002eba <__aeabi_dsub+0x342>
 8002d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002edc <__aeabi_dsub+0x364>)
 8002d2e:	3501      	adds	r5, #1
 8002d30:	429d      	cmp	r5, r3
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x1be>
 8002d34:	e0b2      	b.n	8002e9c <__aeabi_dsub+0x324>
 8002d36:	2101      	movs	r1, #1
 8002d38:	4b69      	ldr	r3, [pc, #420]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002d3a:	087a      	lsrs	r2, r7, #1
 8002d3c:	401c      	ands	r4, r3
 8002d3e:	4039      	ands	r1, r7
 8002d40:	430a      	orrs	r2, r1
 8002d42:	07e7      	lsls	r7, r4, #31
 8002d44:	4317      	orrs	r7, r2
 8002d46:	0864      	lsrs	r4, r4, #1
 8002d48:	e79e      	b.n	8002c88 <__aeabi_dsub+0x110>
 8002d4a:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <__aeabi_dsub+0x36c>)
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	468a      	mov	sl, r1
 8002d50:	18eb      	adds	r3, r5, r3
 8002d52:	2900      	cmp	r1, #0
 8002d54:	d028      	beq.n	8002da8 <__aeabi_dsub+0x230>
 8002d56:	4566      	cmp	r6, ip
 8002d58:	d02c      	beq.n	8002db4 <__aeabi_dsub+0x23c>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d05b      	beq.n	8002e16 <__aeabi_dsub+0x29e>
 8002d5e:	2d00      	cmp	r5, #0
 8002d60:	d100      	bne.n	8002d64 <__aeabi_dsub+0x1ec>
 8002d62:	e12c      	b.n	8002fbe <__aeabi_dsub+0x446>
 8002d64:	465b      	mov	r3, fp
 8002d66:	4666      	mov	r6, ip
 8002d68:	075f      	lsls	r7, r3, #29
 8002d6a:	08d2      	lsrs	r2, r2, #3
 8002d6c:	4317      	orrs	r7, r2
 8002d6e:	08dd      	lsrs	r5, r3, #3
 8002d70:	003b      	movs	r3, r7
 8002d72:	432b      	orrs	r3, r5
 8002d74:	d100      	bne.n	8002d78 <__aeabi_dsub+0x200>
 8002d76:	e0e2      	b.n	8002f3e <__aeabi_dsub+0x3c6>
 8002d78:	2480      	movs	r4, #128	@ 0x80
 8002d7a:	0324      	lsls	r4, r4, #12
 8002d7c:	432c      	orrs	r4, r5
 8002d7e:	0324      	lsls	r4, r4, #12
 8002d80:	4d56      	ldr	r5, [pc, #344]	@ (8002edc <__aeabi_dsub+0x364>)
 8002d82:	0b24      	lsrs	r4, r4, #12
 8002d84:	e08c      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002d86:	4659      	mov	r1, fp
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	d100      	bne.n	8002d8e <__aeabi_dsub+0x216>
 8002d8c:	e0d5      	b.n	8002f3a <__aeabi_dsub+0x3c2>
 8002d8e:	1e59      	subs	r1, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d100      	bne.n	8002d96 <__aeabi_dsub+0x21e>
 8002d94:	e1b9      	b.n	800310a <__aeabi_dsub+0x592>
 8002d96:	42bb      	cmp	r3, r7
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x224>
 8002d9a:	e1b1      	b.n	8003100 <__aeabi_dsub+0x588>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	000b      	movs	r3, r1
 8002da0:	2938      	cmp	r1, #56	@ 0x38
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dsub+0x22e>
 8002da4:	e740      	b.n	8002c28 <__aeabi_dsub+0xb0>
 8002da6:	e72a      	b.n	8002bfe <__aeabi_dsub+0x86>
 8002da8:	4661      	mov	r1, ip
 8002daa:	2701      	movs	r7, #1
 8002dac:	4079      	eors	r1, r7
 8002dae:	468c      	mov	ip, r1
 8002db0:	4566      	cmp	r6, ip
 8002db2:	d1d2      	bne.n	8002d5a <__aeabi_dsub+0x1e2>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x242>
 8002db8:	e0c5      	b.n	8002f46 <__aeabi_dsub+0x3ce>
 8002dba:	2d00      	cmp	r5, #0
 8002dbc:	d000      	beq.n	8002dc0 <__aeabi_dsub+0x248>
 8002dbe:	e155      	b.n	800306c <__aeabi_dsub+0x4f4>
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	0025      	movs	r5, r4
 8002dc4:	4305      	orrs	r5, r0
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x252>
 8002dc8:	e212      	b.n	80031f0 <__aeabi_dsub+0x678>
 8002dca:	1e59      	subs	r1, r3, #1
 8002dcc:	468c      	mov	ip, r1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x25c>
 8002dd2:	e249      	b.n	8003268 <__aeabi_dsub+0x6f0>
 8002dd4:	4d41      	ldr	r5, [pc, #260]	@ (8002edc <__aeabi_dsub+0x364>)
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x264>
 8002dda:	e28f      	b.n	80032fc <__aeabi_dsub+0x784>
 8002ddc:	2701      	movs	r7, #1
 8002dde:	2938      	cmp	r1, #56	@ 0x38
 8002de0:	dc11      	bgt.n	8002e06 <__aeabi_dsub+0x28e>
 8002de2:	4663      	mov	r3, ip
 8002de4:	2b1f      	cmp	r3, #31
 8002de6:	dd00      	ble.n	8002dea <__aeabi_dsub+0x272>
 8002de8:	e25b      	b.n	80032a2 <__aeabi_dsub+0x72a>
 8002dea:	4661      	mov	r1, ip
 8002dec:	2320      	movs	r3, #32
 8002dee:	0027      	movs	r7, r4
 8002df0:	1a5b      	subs	r3, r3, r1
 8002df2:	0005      	movs	r5, r0
 8002df4:	4098      	lsls	r0, r3
 8002df6:	409f      	lsls	r7, r3
 8002df8:	40cd      	lsrs	r5, r1
 8002dfa:	1e43      	subs	r3, r0, #1
 8002dfc:	4198      	sbcs	r0, r3
 8002dfe:	40cc      	lsrs	r4, r1
 8002e00:	432f      	orrs	r7, r5
 8002e02:	4307      	orrs	r7, r0
 8002e04:	44a3      	add	fp, r4
 8002e06:	18bf      	adds	r7, r7, r2
 8002e08:	4297      	cmp	r7, r2
 8002e0a:	4192      	sbcs	r2, r2
 8002e0c:	4252      	negs	r2, r2
 8002e0e:	445a      	add	r2, fp
 8002e10:	0014      	movs	r4, r2
 8002e12:	464d      	mov	r5, r9
 8002e14:	e787      	b.n	8002d26 <__aeabi_dsub+0x1ae>
 8002e16:	4f34      	ldr	r7, [pc, #208]	@ (8002ee8 <__aeabi_dsub+0x370>)
 8002e18:	1c6b      	adds	r3, r5, #1
 8002e1a:	423b      	tst	r3, r7
 8002e1c:	d000      	beq.n	8002e20 <__aeabi_dsub+0x2a8>
 8002e1e:	e0b6      	b.n	8002f8e <__aeabi_dsub+0x416>
 8002e20:	4659      	mov	r1, fp
 8002e22:	0023      	movs	r3, r4
 8002e24:	4311      	orrs	r1, r2
 8002e26:	000f      	movs	r7, r1
 8002e28:	4303      	orrs	r3, r0
 8002e2a:	2d00      	cmp	r5, #0
 8002e2c:	d000      	beq.n	8002e30 <__aeabi_dsub+0x2b8>
 8002e2e:	e126      	b.n	800307e <__aeabi_dsub+0x506>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x2be>
 8002e34:	e1c0      	b.n	80031b8 <__aeabi_dsub+0x640>
 8002e36:	2900      	cmp	r1, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x2c4>
 8002e3a:	e0a1      	b.n	8002f80 <__aeabi_dsub+0x408>
 8002e3c:	1a83      	subs	r3, r0, r2
 8002e3e:	4698      	mov	r8, r3
 8002e40:	465b      	mov	r3, fp
 8002e42:	4540      	cmp	r0, r8
 8002e44:	41ad      	sbcs	r5, r5
 8002e46:	1ae3      	subs	r3, r4, r3
 8002e48:	426d      	negs	r5, r5
 8002e4a:	1b5b      	subs	r3, r3, r5
 8002e4c:	2580      	movs	r5, #128	@ 0x80
 8002e4e:	042d      	lsls	r5, r5, #16
 8002e50:	422b      	tst	r3, r5
 8002e52:	d100      	bne.n	8002e56 <__aeabi_dsub+0x2de>
 8002e54:	e14b      	b.n	80030ee <__aeabi_dsub+0x576>
 8002e56:	465b      	mov	r3, fp
 8002e58:	1a10      	subs	r0, r2, r0
 8002e5a:	4282      	cmp	r2, r0
 8002e5c:	4192      	sbcs	r2, r2
 8002e5e:	1b1c      	subs	r4, r3, r4
 8002e60:	0007      	movs	r7, r0
 8002e62:	2601      	movs	r6, #1
 8002e64:	4663      	mov	r3, ip
 8002e66:	4252      	negs	r2, r2
 8002e68:	1aa4      	subs	r4, r4, r2
 8002e6a:	4327      	orrs	r7, r4
 8002e6c:	401e      	ands	r6, r3
 8002e6e:	2f00      	cmp	r7, #0
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x2fc>
 8002e72:	e142      	b.n	80030fa <__aeabi_dsub+0x582>
 8002e74:	422c      	tst	r4, r5
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x302>
 8002e78:	e26d      	b.n	8003356 <__aeabi_dsub+0x7de>
 8002e7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002e7c:	2501      	movs	r5, #1
 8002e7e:	401c      	ands	r4, r3
 8002e80:	e71b      	b.n	8002cba <__aeabi_dsub+0x142>
 8002e82:	42bd      	cmp	r5, r7
 8002e84:	d100      	bne.n	8002e88 <__aeabi_dsub+0x310>
 8002e86:	e13b      	b.n	8003100 <__aeabi_dsub+0x588>
 8002e88:	2701      	movs	r7, #1
 8002e8a:	2b38      	cmp	r3, #56	@ 0x38
 8002e8c:	dd00      	ble.n	8002e90 <__aeabi_dsub+0x318>
 8002e8e:	e745      	b.n	8002d1c <__aeabi_dsub+0x1a4>
 8002e90:	2780      	movs	r7, #128	@ 0x80
 8002e92:	4659      	mov	r1, fp
 8002e94:	043f      	lsls	r7, r7, #16
 8002e96:	4339      	orrs	r1, r7
 8002e98:	468b      	mov	fp, r1
 8002e9a:	e72a      	b.n	8002cf2 <__aeabi_dsub+0x17a>
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	2700      	movs	r7, #0
 8002ea0:	052d      	lsls	r5, r5, #20
 8002ea2:	4325      	orrs	r5, r4
 8002ea4:	07f6      	lsls	r6, r6, #31
 8002ea6:	4335      	orrs	r5, r6
 8002ea8:	0038      	movs	r0, r7
 8002eaa:	0029      	movs	r1, r5
 8002eac:	b003      	add	sp, #12
 8002eae:	bcf0      	pop	{r4, r5, r6, r7}
 8002eb0:	46bb      	mov	fp, r7
 8002eb2:	46b2      	mov	sl, r6
 8002eb4:	46a9      	mov	r9, r5
 8002eb6:	46a0      	mov	r8, r4
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	d004      	beq.n	8002ec8 <__aeabi_dsub+0x350>
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	403b      	ands	r3, r7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x350>
 8002ec6:	e6e7      	b.n	8002c98 <__aeabi_dsub+0x120>
 8002ec8:	002b      	movs	r3, r5
 8002eca:	08f8      	lsrs	r0, r7, #3
 8002ecc:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <__aeabi_dsub+0x364>)
 8002ece:	0767      	lsls	r7, r4, #29
 8002ed0:	4307      	orrs	r7, r0
 8002ed2:	08e5      	lsrs	r5, r4, #3
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d100      	bne.n	8002eda <__aeabi_dsub+0x362>
 8002ed8:	e74a      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8002eda:	e0a5      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8002edc:	000007ff 	.word	0x000007ff
 8002ee0:	ff7fffff 	.word	0xff7fffff
 8002ee4:	fffff801 	.word	0xfffff801
 8002ee8:	000007fe 	.word	0x000007fe
 8002eec:	0038      	movs	r0, r7
 8002eee:	f000 fbc7 	bl	8003680 <__clzsi2>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	2b1f      	cmp	r3, #31
 8002ef8:	dc00      	bgt.n	8002efc <__aeabi_dsub+0x384>
 8002efa:	e6a7      	b.n	8002c4c <__aeabi_dsub+0xd4>
 8002efc:	003a      	movs	r2, r7
 8002efe:	3808      	subs	r0, #8
 8002f00:	4082      	lsls	r2, r0
 8002f02:	429d      	cmp	r5, r3
 8002f04:	dd00      	ble.n	8002f08 <__aeabi_dsub+0x390>
 8002f06:	e08a      	b.n	800301e <__aeabi_dsub+0x4a6>
 8002f08:	1b5b      	subs	r3, r3, r5
 8002f0a:	1c58      	adds	r0, r3, #1
 8002f0c:	281f      	cmp	r0, #31
 8002f0e:	dc00      	bgt.n	8002f12 <__aeabi_dsub+0x39a>
 8002f10:	e1d8      	b.n	80032c4 <__aeabi_dsub+0x74c>
 8002f12:	0017      	movs	r7, r2
 8002f14:	3b1f      	subs	r3, #31
 8002f16:	40df      	lsrs	r7, r3
 8002f18:	2820      	cmp	r0, #32
 8002f1a:	d005      	beq.n	8002f28 <__aeabi_dsub+0x3b0>
 8002f1c:	2340      	movs	r3, #64	@ 0x40
 8002f1e:	1a1b      	subs	r3, r3, r0
 8002f20:	409a      	lsls	r2, r3
 8002f22:	1e53      	subs	r3, r2, #1
 8002f24:	419a      	sbcs	r2, r3
 8002f26:	4317      	orrs	r7, r2
 8002f28:	2500      	movs	r5, #0
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d100      	bne.n	8002f30 <__aeabi_dsub+0x3b8>
 8002f2e:	e0e5      	b.n	80030fc <__aeabi_dsub+0x584>
 8002f30:	077b      	lsls	r3, r7, #29
 8002f32:	d000      	beq.n	8002f36 <__aeabi_dsub+0x3be>
 8002f34:	e6ab      	b.n	8002c8e <__aeabi_dsub+0x116>
 8002f36:	002c      	movs	r4, r5
 8002f38:	e7c6      	b.n	8002ec8 <__aeabi_dsub+0x350>
 8002f3a:	08c0      	lsrs	r0, r0, #3
 8002f3c:	e7c6      	b.n	8002ecc <__aeabi_dsub+0x354>
 8002f3e:	2700      	movs	r7, #0
 8002f40:	2400      	movs	r4, #0
 8002f42:	4dd1      	ldr	r5, [pc, #836]	@ (8003288 <__aeabi_dsub+0x710>)
 8002f44:	e7ac      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002f46:	4fd1      	ldr	r7, [pc, #836]	@ (800328c <__aeabi_dsub+0x714>)
 8002f48:	1c6b      	adds	r3, r5, #1
 8002f4a:	423b      	tst	r3, r7
 8002f4c:	d171      	bne.n	8003032 <__aeabi_dsub+0x4ba>
 8002f4e:	0023      	movs	r3, r4
 8002f50:	4303      	orrs	r3, r0
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	d000      	beq.n	8002f58 <__aeabi_dsub+0x3e0>
 8002f56:	e14e      	b.n	80031f6 <__aeabi_dsub+0x67e>
 8002f58:	4657      	mov	r7, sl
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x3e8>
 8002f5e:	e1b5      	b.n	80032cc <__aeabi_dsub+0x754>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	d00d      	beq.n	8002f80 <__aeabi_dsub+0x408>
 8002f64:	1883      	adds	r3, r0, r2
 8002f66:	4283      	cmp	r3, r0
 8002f68:	4180      	sbcs	r0, r0
 8002f6a:	445c      	add	r4, fp
 8002f6c:	4240      	negs	r0, r0
 8002f6e:	1824      	adds	r4, r4, r0
 8002f70:	0222      	lsls	r2, r4, #8
 8002f72:	d500      	bpl.n	8002f76 <__aeabi_dsub+0x3fe>
 8002f74:	e1c8      	b.n	8003308 <__aeabi_dsub+0x790>
 8002f76:	001f      	movs	r7, r3
 8002f78:	4698      	mov	r8, r3
 8002f7a:	4327      	orrs	r7, r4
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x408>
 8002f7e:	e0bc      	b.n	80030fa <__aeabi_dsub+0x582>
 8002f80:	4643      	mov	r3, r8
 8002f82:	0767      	lsls	r7, r4, #29
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	431f      	orrs	r7, r3
 8002f88:	08e5      	lsrs	r5, r4, #3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e04c      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8002f8e:	1a83      	subs	r3, r0, r2
 8002f90:	4698      	mov	r8, r3
 8002f92:	465b      	mov	r3, fp
 8002f94:	4540      	cmp	r0, r8
 8002f96:	41bf      	sbcs	r7, r7
 8002f98:	1ae3      	subs	r3, r4, r3
 8002f9a:	427f      	negs	r7, r7
 8002f9c:	1bdb      	subs	r3, r3, r7
 8002f9e:	021f      	lsls	r7, r3, #8
 8002fa0:	d47c      	bmi.n	800309c <__aeabi_dsub+0x524>
 8002fa2:	4647      	mov	r7, r8
 8002fa4:	431f      	orrs	r7, r3
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x432>
 8002fa8:	e0a6      	b.n	80030f8 <__aeabi_dsub+0x580>
 8002faa:	001c      	movs	r4, r3
 8002fac:	4647      	mov	r7, r8
 8002fae:	e645      	b.n	8002c3c <__aeabi_dsub+0xc4>
 8002fb0:	4cb7      	ldr	r4, [pc, #732]	@ (8003290 <__aeabi_dsub+0x718>)
 8002fb2:	1aed      	subs	r5, r5, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	077b      	lsls	r3, r7, #29
 8002fb8:	d000      	beq.n	8002fbc <__aeabi_dsub+0x444>
 8002fba:	e780      	b.n	8002ebe <__aeabi_dsub+0x346>
 8002fbc:	e784      	b.n	8002ec8 <__aeabi_dsub+0x350>
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	0025      	movs	r5, r4
 8002fc2:	4305      	orrs	r5, r0
 8002fc4:	d066      	beq.n	8003094 <__aeabi_dsub+0x51c>
 8002fc6:	1e5f      	subs	r7, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d100      	bne.n	8002fce <__aeabi_dsub+0x456>
 8002fcc:	e0fc      	b.n	80031c8 <__aeabi_dsub+0x650>
 8002fce:	4dae      	ldr	r5, [pc, #696]	@ (8003288 <__aeabi_dsub+0x710>)
 8002fd0:	42ab      	cmp	r3, r5
 8002fd2:	d100      	bne.n	8002fd6 <__aeabi_dsub+0x45e>
 8002fd4:	e15e      	b.n	8003294 <__aeabi_dsub+0x71c>
 8002fd6:	4666      	mov	r6, ip
 8002fd8:	2f38      	cmp	r7, #56	@ 0x38
 8002fda:	dc00      	bgt.n	8002fde <__aeabi_dsub+0x466>
 8002fdc:	e0b4      	b.n	8003148 <__aeabi_dsub+0x5d0>
 8002fde:	2001      	movs	r0, #1
 8002fe0:	1a17      	subs	r7, r2, r0
 8002fe2:	42ba      	cmp	r2, r7
 8002fe4:	4192      	sbcs	r2, r2
 8002fe6:	465b      	mov	r3, fp
 8002fe8:	4252      	negs	r2, r2
 8002fea:	464d      	mov	r5, r9
 8002fec:	1a9c      	subs	r4, r3, r2
 8002fee:	e620      	b.n	8002c32 <__aeabi_dsub+0xba>
 8002ff0:	0767      	lsls	r7, r4, #29
 8002ff2:	08c0      	lsrs	r0, r0, #3
 8002ff4:	4307      	orrs	r7, r0
 8002ff6:	08e5      	lsrs	r5, r4, #3
 8002ff8:	e6ba      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8002ffa:	001f      	movs	r7, r3
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	3f20      	subs	r7, #32
 8003000:	40f9      	lsrs	r1, r7
 8003002:	000f      	movs	r7, r1
 8003004:	2b20      	cmp	r3, #32
 8003006:	d005      	beq.n	8003014 <__aeabi_dsub+0x49c>
 8003008:	2140      	movs	r1, #64	@ 0x40
 800300a:	1acb      	subs	r3, r1, r3
 800300c:	4659      	mov	r1, fp
 800300e:	4099      	lsls	r1, r3
 8003010:	430a      	orrs	r2, r1
 8003012:	4692      	mov	sl, r2
 8003014:	4653      	mov	r3, sl
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	4193      	sbcs	r3, r2
 800301a:	431f      	orrs	r7, r3
 800301c:	e604      	b.n	8002c28 <__aeabi_dsub+0xb0>
 800301e:	1aeb      	subs	r3, r5, r3
 8003020:	4d9b      	ldr	r5, [pc, #620]	@ (8003290 <__aeabi_dsub+0x718>)
 8003022:	4015      	ands	r5, r2
 8003024:	076f      	lsls	r7, r5, #29
 8003026:	08ed      	lsrs	r5, r5, #3
 8003028:	032c      	lsls	r4, r5, #12
 800302a:	055d      	lsls	r5, r3, #21
 800302c:	0b24      	lsrs	r4, r4, #12
 800302e:	0d6d      	lsrs	r5, r5, #21
 8003030:	e736      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003032:	4d95      	ldr	r5, [pc, #596]	@ (8003288 <__aeabi_dsub+0x710>)
 8003034:	42ab      	cmp	r3, r5
 8003036:	d100      	bne.n	800303a <__aeabi_dsub+0x4c2>
 8003038:	e0d6      	b.n	80031e8 <__aeabi_dsub+0x670>
 800303a:	1882      	adds	r2, r0, r2
 800303c:	0021      	movs	r1, r4
 800303e:	4282      	cmp	r2, r0
 8003040:	4180      	sbcs	r0, r0
 8003042:	4459      	add	r1, fp
 8003044:	4240      	negs	r0, r0
 8003046:	1808      	adds	r0, r1, r0
 8003048:	07c7      	lsls	r7, r0, #31
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	4317      	orrs	r7, r2
 800304e:	0844      	lsrs	r4, r0, #1
 8003050:	0752      	lsls	r2, r2, #29
 8003052:	d400      	bmi.n	8003056 <__aeabi_dsub+0x4de>
 8003054:	e185      	b.n	8003362 <__aeabi_dsub+0x7ea>
 8003056:	220f      	movs	r2, #15
 8003058:	001d      	movs	r5, r3
 800305a:	403a      	ands	r2, r7
 800305c:	2a04      	cmp	r2, #4
 800305e:	d000      	beq.n	8003062 <__aeabi_dsub+0x4ea>
 8003060:	e61a      	b.n	8002c98 <__aeabi_dsub+0x120>
 8003062:	08ff      	lsrs	r7, r7, #3
 8003064:	0764      	lsls	r4, r4, #29
 8003066:	4327      	orrs	r7, r4
 8003068:	0905      	lsrs	r5, r0, #4
 800306a:	e7dd      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800306c:	465b      	mov	r3, fp
 800306e:	08d2      	lsrs	r2, r2, #3
 8003070:	075f      	lsls	r7, r3, #29
 8003072:	4317      	orrs	r7, r2
 8003074:	08dd      	lsrs	r5, r3, #3
 8003076:	e67b      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003078:	2700      	movs	r7, #0
 800307a:	2400      	movs	r4, #0
 800307c:	e710      	b.n	8002ea0 <__aeabi_dsub+0x328>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d000      	beq.n	8003084 <__aeabi_dsub+0x50c>
 8003082:	e0d6      	b.n	8003232 <__aeabi_dsub+0x6ba>
 8003084:	2900      	cmp	r1, #0
 8003086:	d000      	beq.n	800308a <__aeabi_dsub+0x512>
 8003088:	e12f      	b.n	80032ea <__aeabi_dsub+0x772>
 800308a:	2480      	movs	r4, #128	@ 0x80
 800308c:	2600      	movs	r6, #0
 800308e:	4d7e      	ldr	r5, [pc, #504]	@ (8003288 <__aeabi_dsub+0x710>)
 8003090:	0324      	lsls	r4, r4, #12
 8003092:	e705      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003094:	4666      	mov	r6, ip
 8003096:	465c      	mov	r4, fp
 8003098:	08d0      	lsrs	r0, r2, #3
 800309a:	e717      	b.n	8002ecc <__aeabi_dsub+0x354>
 800309c:	465b      	mov	r3, fp
 800309e:	1a17      	subs	r7, r2, r0
 80030a0:	42ba      	cmp	r2, r7
 80030a2:	4192      	sbcs	r2, r2
 80030a4:	1b1c      	subs	r4, r3, r4
 80030a6:	2601      	movs	r6, #1
 80030a8:	4663      	mov	r3, ip
 80030aa:	4252      	negs	r2, r2
 80030ac:	1aa4      	subs	r4, r4, r2
 80030ae:	401e      	ands	r6, r3
 80030b0:	e5c4      	b.n	8002c3c <__aeabi_dsub+0xc4>
 80030b2:	1883      	adds	r3, r0, r2
 80030b4:	4283      	cmp	r3, r0
 80030b6:	4180      	sbcs	r0, r0
 80030b8:	445c      	add	r4, fp
 80030ba:	4240      	negs	r0, r0
 80030bc:	1825      	adds	r5, r4, r0
 80030be:	022a      	lsls	r2, r5, #8
 80030c0:	d400      	bmi.n	80030c4 <__aeabi_dsub+0x54c>
 80030c2:	e0da      	b.n	800327a <__aeabi_dsub+0x702>
 80030c4:	4a72      	ldr	r2, [pc, #456]	@ (8003290 <__aeabi_dsub+0x718>)
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	4015      	ands	r5, r2
 80030ca:	07ea      	lsls	r2, r5, #31
 80030cc:	431a      	orrs	r2, r3
 80030ce:	0869      	lsrs	r1, r5, #1
 80030d0:	075b      	lsls	r3, r3, #29
 80030d2:	d400      	bmi.n	80030d6 <__aeabi_dsub+0x55e>
 80030d4:	e14a      	b.n	800336c <__aeabi_dsub+0x7f4>
 80030d6:	230f      	movs	r3, #15
 80030d8:	4013      	ands	r3, r2
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d100      	bne.n	80030e0 <__aeabi_dsub+0x568>
 80030de:	e0fc      	b.n	80032da <__aeabi_dsub+0x762>
 80030e0:	1d17      	adds	r7, r2, #4
 80030e2:	4297      	cmp	r7, r2
 80030e4:	41a4      	sbcs	r4, r4
 80030e6:	4264      	negs	r4, r4
 80030e8:	2502      	movs	r5, #2
 80030ea:	1864      	adds	r4, r4, r1
 80030ec:	e6ec      	b.n	8002ec8 <__aeabi_dsub+0x350>
 80030ee:	4647      	mov	r7, r8
 80030f0:	001c      	movs	r4, r3
 80030f2:	431f      	orrs	r7, r3
 80030f4:	d000      	beq.n	80030f8 <__aeabi_dsub+0x580>
 80030f6:	e743      	b.n	8002f80 <__aeabi_dsub+0x408>
 80030f8:	2600      	movs	r6, #0
 80030fa:	2500      	movs	r5, #0
 80030fc:	2400      	movs	r4, #0
 80030fe:	e6cf      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003100:	08c0      	lsrs	r0, r0, #3
 8003102:	0767      	lsls	r7, r4, #29
 8003104:	4307      	orrs	r7, r0
 8003106:	08e5      	lsrs	r5, r4, #3
 8003108:	e632      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 800310a:	1a87      	subs	r7, r0, r2
 800310c:	465b      	mov	r3, fp
 800310e:	42b8      	cmp	r0, r7
 8003110:	4180      	sbcs	r0, r0
 8003112:	1ae4      	subs	r4, r4, r3
 8003114:	4240      	negs	r0, r0
 8003116:	1a24      	subs	r4, r4, r0
 8003118:	0223      	lsls	r3, r4, #8
 800311a:	d428      	bmi.n	800316e <__aeabi_dsub+0x5f6>
 800311c:	0763      	lsls	r3, r4, #29
 800311e:	08ff      	lsrs	r7, r7, #3
 8003120:	431f      	orrs	r7, r3
 8003122:	08e5      	lsrs	r5, r4, #3
 8003124:	2301      	movs	r3, #1
 8003126:	e77f      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x5b6>
 800312c:	e673      	b.n	8002e16 <__aeabi_dsub+0x29e>
 800312e:	464b      	mov	r3, r9
 8003130:	1b5f      	subs	r7, r3, r5
 8003132:	003b      	movs	r3, r7
 8003134:	2d00      	cmp	r5, #0
 8003136:	d100      	bne.n	800313a <__aeabi_dsub+0x5c2>
 8003138:	e742      	b.n	8002fc0 <__aeabi_dsub+0x448>
 800313a:	2f38      	cmp	r7, #56	@ 0x38
 800313c:	dd00      	ble.n	8003140 <__aeabi_dsub+0x5c8>
 800313e:	e0ec      	b.n	800331a <__aeabi_dsub+0x7a2>
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	000e      	movs	r6, r1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431c      	orrs	r4, r3
 8003148:	2f1f      	cmp	r7, #31
 800314a:	dc25      	bgt.n	8003198 <__aeabi_dsub+0x620>
 800314c:	2520      	movs	r5, #32
 800314e:	0023      	movs	r3, r4
 8003150:	1bed      	subs	r5, r5, r7
 8003152:	0001      	movs	r1, r0
 8003154:	40a8      	lsls	r0, r5
 8003156:	40ab      	lsls	r3, r5
 8003158:	40f9      	lsrs	r1, r7
 800315a:	1e45      	subs	r5, r0, #1
 800315c:	41a8      	sbcs	r0, r5
 800315e:	430b      	orrs	r3, r1
 8003160:	40fc      	lsrs	r4, r7
 8003162:	4318      	orrs	r0, r3
 8003164:	465b      	mov	r3, fp
 8003166:	1b1b      	subs	r3, r3, r4
 8003168:	469b      	mov	fp, r3
 800316a:	e739      	b.n	8002fe0 <__aeabi_dsub+0x468>
 800316c:	4666      	mov	r6, ip
 800316e:	2501      	movs	r5, #1
 8003170:	e562      	b.n	8002c38 <__aeabi_dsub+0xc0>
 8003172:	001f      	movs	r7, r3
 8003174:	4659      	mov	r1, fp
 8003176:	3f20      	subs	r7, #32
 8003178:	40f9      	lsrs	r1, r7
 800317a:	468c      	mov	ip, r1
 800317c:	2b20      	cmp	r3, #32
 800317e:	d005      	beq.n	800318c <__aeabi_dsub+0x614>
 8003180:	2740      	movs	r7, #64	@ 0x40
 8003182:	4659      	mov	r1, fp
 8003184:	1afb      	subs	r3, r7, r3
 8003186:	4099      	lsls	r1, r3
 8003188:	430a      	orrs	r2, r1
 800318a:	4692      	mov	sl, r2
 800318c:	4657      	mov	r7, sl
 800318e:	1e7b      	subs	r3, r7, #1
 8003190:	419f      	sbcs	r7, r3
 8003192:	4663      	mov	r3, ip
 8003194:	431f      	orrs	r7, r3
 8003196:	e5c1      	b.n	8002d1c <__aeabi_dsub+0x1a4>
 8003198:	003b      	movs	r3, r7
 800319a:	0025      	movs	r5, r4
 800319c:	3b20      	subs	r3, #32
 800319e:	40dd      	lsrs	r5, r3
 80031a0:	2f20      	cmp	r7, #32
 80031a2:	d004      	beq.n	80031ae <__aeabi_dsub+0x636>
 80031a4:	2340      	movs	r3, #64	@ 0x40
 80031a6:	1bdb      	subs	r3, r3, r7
 80031a8:	409c      	lsls	r4, r3
 80031aa:	4320      	orrs	r0, r4
 80031ac:	4680      	mov	r8, r0
 80031ae:	4640      	mov	r0, r8
 80031b0:	1e43      	subs	r3, r0, #1
 80031b2:	4198      	sbcs	r0, r3
 80031b4:	4328      	orrs	r0, r5
 80031b6:	e713      	b.n	8002fe0 <__aeabi_dsub+0x468>
 80031b8:	2900      	cmp	r1, #0
 80031ba:	d09d      	beq.n	80030f8 <__aeabi_dsub+0x580>
 80031bc:	2601      	movs	r6, #1
 80031be:	4663      	mov	r3, ip
 80031c0:	465c      	mov	r4, fp
 80031c2:	4690      	mov	r8, r2
 80031c4:	401e      	ands	r6, r3
 80031c6:	e6db      	b.n	8002f80 <__aeabi_dsub+0x408>
 80031c8:	1a17      	subs	r7, r2, r0
 80031ca:	465b      	mov	r3, fp
 80031cc:	42ba      	cmp	r2, r7
 80031ce:	4192      	sbcs	r2, r2
 80031d0:	1b1c      	subs	r4, r3, r4
 80031d2:	4252      	negs	r2, r2
 80031d4:	1aa4      	subs	r4, r4, r2
 80031d6:	0223      	lsls	r3, r4, #8
 80031d8:	d4c8      	bmi.n	800316c <__aeabi_dsub+0x5f4>
 80031da:	0763      	lsls	r3, r4, #29
 80031dc:	08ff      	lsrs	r7, r7, #3
 80031de:	431f      	orrs	r7, r3
 80031e0:	4666      	mov	r6, ip
 80031e2:	2301      	movs	r3, #1
 80031e4:	08e5      	lsrs	r5, r4, #3
 80031e6:	e71f      	b.n	8003028 <__aeabi_dsub+0x4b0>
 80031e8:	001d      	movs	r5, r3
 80031ea:	2400      	movs	r4, #0
 80031ec:	2700      	movs	r7, #0
 80031ee:	e657      	b.n	8002ea0 <__aeabi_dsub+0x328>
 80031f0:	465c      	mov	r4, fp
 80031f2:	08d0      	lsrs	r0, r2, #3
 80031f4:	e66a      	b.n	8002ecc <__aeabi_dsub+0x354>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d100      	bne.n	80031fc <__aeabi_dsub+0x684>
 80031fa:	e737      	b.n	800306c <__aeabi_dsub+0x4f4>
 80031fc:	4653      	mov	r3, sl
 80031fe:	08c0      	lsrs	r0, r0, #3
 8003200:	0767      	lsls	r7, r4, #29
 8003202:	4307      	orrs	r7, r0
 8003204:	08e5      	lsrs	r5, r4, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x694>
 800320a:	e5b1      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	031b      	lsls	r3, r3, #12
 8003210:	421d      	tst	r5, r3
 8003212:	d008      	beq.n	8003226 <__aeabi_dsub+0x6ae>
 8003214:	4659      	mov	r1, fp
 8003216:	08c8      	lsrs	r0, r1, #3
 8003218:	4218      	tst	r0, r3
 800321a:	d104      	bne.n	8003226 <__aeabi_dsub+0x6ae>
 800321c:	08d2      	lsrs	r2, r2, #3
 800321e:	0749      	lsls	r1, r1, #29
 8003220:	430a      	orrs	r2, r1
 8003222:	0017      	movs	r7, r2
 8003224:	0005      	movs	r5, r0
 8003226:	0f7b      	lsrs	r3, r7, #29
 8003228:	00ff      	lsls	r7, r7, #3
 800322a:	08ff      	lsrs	r7, r7, #3
 800322c:	075b      	lsls	r3, r3, #29
 800322e:	431f      	orrs	r7, r3
 8003230:	e59e      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003232:	08c0      	lsrs	r0, r0, #3
 8003234:	0763      	lsls	r3, r4, #29
 8003236:	4318      	orrs	r0, r3
 8003238:	08e5      	lsrs	r5, r4, #3
 800323a:	2900      	cmp	r1, #0
 800323c:	d053      	beq.n	80032e6 <__aeabi_dsub+0x76e>
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	421d      	tst	r5, r3
 8003244:	d00a      	beq.n	800325c <__aeabi_dsub+0x6e4>
 8003246:	4659      	mov	r1, fp
 8003248:	08cc      	lsrs	r4, r1, #3
 800324a:	421c      	tst	r4, r3
 800324c:	d106      	bne.n	800325c <__aeabi_dsub+0x6e4>
 800324e:	2601      	movs	r6, #1
 8003250:	4663      	mov	r3, ip
 8003252:	0025      	movs	r5, r4
 8003254:	08d0      	lsrs	r0, r2, #3
 8003256:	0749      	lsls	r1, r1, #29
 8003258:	4308      	orrs	r0, r1
 800325a:	401e      	ands	r6, r3
 800325c:	0f47      	lsrs	r7, r0, #29
 800325e:	00c0      	lsls	r0, r0, #3
 8003260:	08c0      	lsrs	r0, r0, #3
 8003262:	077f      	lsls	r7, r7, #29
 8003264:	4307      	orrs	r7, r0
 8003266:	e583      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003268:	1883      	adds	r3, r0, r2
 800326a:	4293      	cmp	r3, r2
 800326c:	4192      	sbcs	r2, r2
 800326e:	445c      	add	r4, fp
 8003270:	4252      	negs	r2, r2
 8003272:	18a5      	adds	r5, r4, r2
 8003274:	022a      	lsls	r2, r5, #8
 8003276:	d500      	bpl.n	800327a <__aeabi_dsub+0x702>
 8003278:	e724      	b.n	80030c4 <__aeabi_dsub+0x54c>
 800327a:	076f      	lsls	r7, r5, #29
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	431f      	orrs	r7, r3
 8003280:	08ed      	lsrs	r5, r5, #3
 8003282:	2301      	movs	r3, #1
 8003284:	e6d0      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	000007ff 	.word	0x000007ff
 800328c:	000007fe 	.word	0x000007fe
 8003290:	ff7fffff 	.word	0xff7fffff
 8003294:	465b      	mov	r3, fp
 8003296:	08d2      	lsrs	r2, r2, #3
 8003298:	075f      	lsls	r7, r3, #29
 800329a:	4666      	mov	r6, ip
 800329c:	4317      	orrs	r7, r2
 800329e:	08dd      	lsrs	r5, r3, #3
 80032a0:	e566      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032a2:	0025      	movs	r5, r4
 80032a4:	3b20      	subs	r3, #32
 80032a6:	40dd      	lsrs	r5, r3
 80032a8:	4663      	mov	r3, ip
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d005      	beq.n	80032ba <__aeabi_dsub+0x742>
 80032ae:	2340      	movs	r3, #64	@ 0x40
 80032b0:	4661      	mov	r1, ip
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	409c      	lsls	r4, r3
 80032b6:	4320      	orrs	r0, r4
 80032b8:	4680      	mov	r8, r0
 80032ba:	4647      	mov	r7, r8
 80032bc:	1e7b      	subs	r3, r7, #1
 80032be:	419f      	sbcs	r7, r3
 80032c0:	432f      	orrs	r7, r5
 80032c2:	e5a0      	b.n	8002e06 <__aeabi_dsub+0x28e>
 80032c4:	2120      	movs	r1, #32
 80032c6:	2700      	movs	r7, #0
 80032c8:	1a09      	subs	r1, r1, r0
 80032ca:	e4d2      	b.n	8002c72 <__aeabi_dsub+0xfa>
 80032cc:	2f00      	cmp	r7, #0
 80032ce:	d100      	bne.n	80032d2 <__aeabi_dsub+0x75a>
 80032d0:	e713      	b.n	80030fa <__aeabi_dsub+0x582>
 80032d2:	465c      	mov	r4, fp
 80032d4:	0017      	movs	r7, r2
 80032d6:	2500      	movs	r5, #0
 80032d8:	e5f6      	b.n	8002ec8 <__aeabi_dsub+0x350>
 80032da:	08d7      	lsrs	r7, r2, #3
 80032dc:	0749      	lsls	r1, r1, #29
 80032de:	2302      	movs	r3, #2
 80032e0:	430f      	orrs	r7, r1
 80032e2:	092d      	lsrs	r5, r5, #4
 80032e4:	e6a0      	b.n	8003028 <__aeabi_dsub+0x4b0>
 80032e6:	0007      	movs	r7, r0
 80032e8:	e542      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032ea:	465b      	mov	r3, fp
 80032ec:	2601      	movs	r6, #1
 80032ee:	075f      	lsls	r7, r3, #29
 80032f0:	08dd      	lsrs	r5, r3, #3
 80032f2:	4663      	mov	r3, ip
 80032f4:	08d2      	lsrs	r2, r2, #3
 80032f6:	4317      	orrs	r7, r2
 80032f8:	401e      	ands	r6, r3
 80032fa:	e539      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032fc:	465b      	mov	r3, fp
 80032fe:	08d2      	lsrs	r2, r2, #3
 8003300:	075f      	lsls	r7, r3, #29
 8003302:	4317      	orrs	r7, r2
 8003304:	08dd      	lsrs	r5, r3, #3
 8003306:	e533      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003308:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <__aeabi_dsub+0x80c>)
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	4022      	ands	r2, r4
 800330e:	0757      	lsls	r7, r2, #29
 8003310:	0252      	lsls	r2, r2, #9
 8003312:	2501      	movs	r5, #1
 8003314:	431f      	orrs	r7, r3
 8003316:	0b14      	lsrs	r4, r2, #12
 8003318:	e5c2      	b.n	8002ea0 <__aeabi_dsub+0x328>
 800331a:	000e      	movs	r6, r1
 800331c:	2001      	movs	r0, #1
 800331e:	e65f      	b.n	8002fe0 <__aeabi_dsub+0x468>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <__aeabi_dsub+0x7c8>
 8003324:	464b      	mov	r3, r9
 8003326:	1b5b      	subs	r3, r3, r5
 8003328:	469c      	mov	ip, r3
 800332a:	2d00      	cmp	r5, #0
 800332c:	d100      	bne.n	8003330 <__aeabi_dsub+0x7b8>
 800332e:	e548      	b.n	8002dc2 <__aeabi_dsub+0x24a>
 8003330:	2701      	movs	r7, #1
 8003332:	2b38      	cmp	r3, #56	@ 0x38
 8003334:	dd00      	ble.n	8003338 <__aeabi_dsub+0x7c0>
 8003336:	e566      	b.n	8002e06 <__aeabi_dsub+0x28e>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431c      	orrs	r4, r3
 800333e:	e550      	b.n	8002de2 <__aeabi_dsub+0x26a>
 8003340:	1c6b      	adds	r3, r5, #1
 8003342:	4d11      	ldr	r5, [pc, #68]	@ (8003388 <__aeabi_dsub+0x810>)
 8003344:	422b      	tst	r3, r5
 8003346:	d000      	beq.n	800334a <__aeabi_dsub+0x7d2>
 8003348:	e673      	b.n	8003032 <__aeabi_dsub+0x4ba>
 800334a:	4659      	mov	r1, fp
 800334c:	0023      	movs	r3, r4
 800334e:	4311      	orrs	r1, r2
 8003350:	468a      	mov	sl, r1
 8003352:	4303      	orrs	r3, r0
 8003354:	e600      	b.n	8002f58 <__aeabi_dsub+0x3e0>
 8003356:	0767      	lsls	r7, r4, #29
 8003358:	08c0      	lsrs	r0, r0, #3
 800335a:	2300      	movs	r3, #0
 800335c:	4307      	orrs	r7, r0
 800335e:	08e5      	lsrs	r5, r4, #3
 8003360:	e662      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003362:	0764      	lsls	r4, r4, #29
 8003364:	08ff      	lsrs	r7, r7, #3
 8003366:	4327      	orrs	r7, r4
 8003368:	0905      	lsrs	r5, r0, #4
 800336a:	e65d      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800336c:	08d2      	lsrs	r2, r2, #3
 800336e:	0749      	lsls	r1, r1, #29
 8003370:	4311      	orrs	r1, r2
 8003372:	000f      	movs	r7, r1
 8003374:	2302      	movs	r3, #2
 8003376:	092d      	lsrs	r5, r5, #4
 8003378:	e656      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800337a:	0007      	movs	r7, r0
 800337c:	e5a4      	b.n	8002ec8 <__aeabi_dsub+0x350>
 800337e:	0038      	movs	r0, r7
 8003380:	e48f      	b.n	8002ca2 <__aeabi_dsub+0x12a>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	ff7fffff 	.word	0xff7fffff
 8003388:	000007fe 	.word	0x000007fe

0800338c <__aeabi_dcmpun>:
 800338c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338e:	46c6      	mov	lr, r8
 8003390:	031e      	lsls	r6, r3, #12
 8003392:	0b36      	lsrs	r6, r6, #12
 8003394:	46b0      	mov	r8, r6
 8003396:	4e0d      	ldr	r6, [pc, #52]	@ (80033cc <__aeabi_dcmpun+0x40>)
 8003398:	030c      	lsls	r4, r1, #12
 800339a:	004d      	lsls	r5, r1, #1
 800339c:	005f      	lsls	r7, r3, #1
 800339e:	b500      	push	{lr}
 80033a0:	0b24      	lsrs	r4, r4, #12
 80033a2:	0d6d      	lsrs	r5, r5, #21
 80033a4:	0d7f      	lsrs	r7, r7, #21
 80033a6:	42b5      	cmp	r5, r6
 80033a8:	d00b      	beq.n	80033c2 <__aeabi_dcmpun+0x36>
 80033aa:	4908      	ldr	r1, [pc, #32]	@ (80033cc <__aeabi_dcmpun+0x40>)
 80033ac:	2000      	movs	r0, #0
 80033ae:	428f      	cmp	r7, r1
 80033b0:	d104      	bne.n	80033bc <__aeabi_dcmpun+0x30>
 80033b2:	4646      	mov	r6, r8
 80033b4:	4316      	orrs	r6, r2
 80033b6:	0030      	movs	r0, r6
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	4198      	sbcs	r0, r3
 80033bc:	bc80      	pop	{r7}
 80033be:	46b8      	mov	r8, r7
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	4304      	orrs	r4, r0
 80033c4:	2001      	movs	r0, #1
 80033c6:	2c00      	cmp	r4, #0
 80033c8:	d1f8      	bne.n	80033bc <__aeabi_dcmpun+0x30>
 80033ca:	e7ee      	b.n	80033aa <__aeabi_dcmpun+0x1e>
 80033cc:	000007ff 	.word	0x000007ff

080033d0 <__aeabi_d2iz>:
 80033d0:	000b      	movs	r3, r1
 80033d2:	0002      	movs	r2, r0
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	4d16      	ldr	r5, [pc, #88]	@ (8003430 <__aeabi_d2iz+0x60>)
 80033d8:	030c      	lsls	r4, r1, #12
 80033da:	b082      	sub	sp, #8
 80033dc:	0049      	lsls	r1, r1, #1
 80033de:	2000      	movs	r0, #0
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	0b24      	lsrs	r4, r4, #12
 80033e6:	0d49      	lsrs	r1, r1, #21
 80033e8:	0fde      	lsrs	r6, r3, #31
 80033ea:	42a9      	cmp	r1, r5
 80033ec:	dd04      	ble.n	80033f8 <__aeabi_d2iz+0x28>
 80033ee:	4811      	ldr	r0, [pc, #68]	@ (8003434 <__aeabi_d2iz+0x64>)
 80033f0:	4281      	cmp	r1, r0
 80033f2:	dd03      	ble.n	80033fc <__aeabi_d2iz+0x2c>
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <__aeabi_d2iz+0x68>)
 80033f6:	18f0      	adds	r0, r6, r3
 80033f8:	b002      	add	sp, #8
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	2080      	movs	r0, #128	@ 0x80
 80033fe:	0340      	lsls	r0, r0, #13
 8003400:	4320      	orrs	r0, r4
 8003402:	4c0e      	ldr	r4, [pc, #56]	@ (800343c <__aeabi_d2iz+0x6c>)
 8003404:	1a64      	subs	r4, r4, r1
 8003406:	2c1f      	cmp	r4, #31
 8003408:	dd08      	ble.n	800341c <__aeabi_d2iz+0x4c>
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <__aeabi_d2iz+0x70>)
 800340c:	1a5b      	subs	r3, r3, r1
 800340e:	40d8      	lsrs	r0, r3
 8003410:	0003      	movs	r3, r0
 8003412:	4258      	negs	r0, r3
 8003414:	2e00      	cmp	r6, #0
 8003416:	d1ef      	bne.n	80033f8 <__aeabi_d2iz+0x28>
 8003418:	0018      	movs	r0, r3
 800341a:	e7ed      	b.n	80033f8 <__aeabi_d2iz+0x28>
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <__aeabi_d2iz+0x74>)
 800341e:	9a00      	ldr	r2, [sp, #0]
 8003420:	469c      	mov	ip, r3
 8003422:	0003      	movs	r3, r0
 8003424:	4461      	add	r1, ip
 8003426:	408b      	lsls	r3, r1
 8003428:	40e2      	lsrs	r2, r4
 800342a:	4313      	orrs	r3, r2
 800342c:	e7f1      	b.n	8003412 <__aeabi_d2iz+0x42>
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	000003fe 	.word	0x000003fe
 8003434:	0000041d 	.word	0x0000041d
 8003438:	7fffffff 	.word	0x7fffffff
 800343c:	00000433 	.word	0x00000433
 8003440:	00000413 	.word	0x00000413
 8003444:	fffffbed 	.word	0xfffffbed

08003448 <__aeabi_i2d>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	2800      	cmp	r0, #0
 800344c:	d016      	beq.n	800347c <__aeabi_i2d+0x34>
 800344e:	17c3      	asrs	r3, r0, #31
 8003450:	18c5      	adds	r5, r0, r3
 8003452:	405d      	eors	r5, r3
 8003454:	0fc4      	lsrs	r4, r0, #31
 8003456:	0028      	movs	r0, r5
 8003458:	f000 f912 	bl	8003680 <__clzsi2>
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <__aeabi_i2d+0x58>)
 800345e:	1a1b      	subs	r3, r3, r0
 8003460:	055b      	lsls	r3, r3, #21
 8003462:	0d5b      	lsrs	r3, r3, #21
 8003464:	280a      	cmp	r0, #10
 8003466:	dc14      	bgt.n	8003492 <__aeabi_i2d+0x4a>
 8003468:	0002      	movs	r2, r0
 800346a:	002e      	movs	r6, r5
 800346c:	3215      	adds	r2, #21
 800346e:	4096      	lsls	r6, r2
 8003470:	220b      	movs	r2, #11
 8003472:	1a12      	subs	r2, r2, r0
 8003474:	40d5      	lsrs	r5, r2
 8003476:	032d      	lsls	r5, r5, #12
 8003478:	0b2d      	lsrs	r5, r5, #12
 800347a:	e003      	b.n	8003484 <__aeabi_i2d+0x3c>
 800347c:	2400      	movs	r4, #0
 800347e:	2300      	movs	r3, #0
 8003480:	2500      	movs	r5, #0
 8003482:	2600      	movs	r6, #0
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	432b      	orrs	r3, r5
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0030      	movs	r0, r6
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	380b      	subs	r0, #11
 8003494:	4085      	lsls	r5, r0
 8003496:	032d      	lsls	r5, r5, #12
 8003498:	2600      	movs	r6, #0
 800349a:	0b2d      	lsrs	r5, r5, #12
 800349c:	e7f2      	b.n	8003484 <__aeabi_i2d+0x3c>
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	0000041e 	.word	0x0000041e

080034a4 <__aeabi_ui2d>:
 80034a4:	b510      	push	{r4, lr}
 80034a6:	1e04      	subs	r4, r0, #0
 80034a8:	d010      	beq.n	80034cc <__aeabi_ui2d+0x28>
 80034aa:	f000 f8e9 	bl	8003680 <__clzsi2>
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <__aeabi_ui2d+0x44>)
 80034b0:	1a1b      	subs	r3, r3, r0
 80034b2:	055b      	lsls	r3, r3, #21
 80034b4:	0d5b      	lsrs	r3, r3, #21
 80034b6:	280a      	cmp	r0, #10
 80034b8:	dc0f      	bgt.n	80034da <__aeabi_ui2d+0x36>
 80034ba:	220b      	movs	r2, #11
 80034bc:	0021      	movs	r1, r4
 80034be:	1a12      	subs	r2, r2, r0
 80034c0:	40d1      	lsrs	r1, r2
 80034c2:	3015      	adds	r0, #21
 80034c4:	030a      	lsls	r2, r1, #12
 80034c6:	4084      	lsls	r4, r0
 80034c8:	0b12      	lsrs	r2, r2, #12
 80034ca:	e001      	b.n	80034d0 <__aeabi_ui2d+0x2c>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2200      	movs	r2, #0
 80034d0:	051b      	lsls	r3, r3, #20
 80034d2:	4313      	orrs	r3, r2
 80034d4:	0020      	movs	r0, r4
 80034d6:	0019      	movs	r1, r3
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	0022      	movs	r2, r4
 80034dc:	380b      	subs	r0, #11
 80034de:	4082      	lsls	r2, r0
 80034e0:	0312      	lsls	r2, r2, #12
 80034e2:	2400      	movs	r4, #0
 80034e4:	0b12      	lsrs	r2, r2, #12
 80034e6:	e7f3      	b.n	80034d0 <__aeabi_ui2d+0x2c>
 80034e8:	0000041e 	.word	0x0000041e

080034ec <__aeabi_f2d>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	0242      	lsls	r2, r0, #9
 80034f0:	0043      	lsls	r3, r0, #1
 80034f2:	0fc4      	lsrs	r4, r0, #31
 80034f4:	20fe      	movs	r0, #254	@ 0xfe
 80034f6:	0e1b      	lsrs	r3, r3, #24
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	0a55      	lsrs	r5, r2, #9
 80034fc:	4208      	tst	r0, r1
 80034fe:	d00c      	beq.n	800351a <__aeabi_f2d+0x2e>
 8003500:	21e0      	movs	r1, #224	@ 0xe0
 8003502:	0089      	lsls	r1, r1, #2
 8003504:	468c      	mov	ip, r1
 8003506:	076d      	lsls	r5, r5, #29
 8003508:	0b12      	lsrs	r2, r2, #12
 800350a:	4463      	add	r3, ip
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	4313      	orrs	r3, r2
 8003510:	07e4      	lsls	r4, r4, #31
 8003512:	4323      	orrs	r3, r4
 8003514:	0028      	movs	r0, r5
 8003516:	0019      	movs	r1, r3
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	2b00      	cmp	r3, #0
 800351c:	d114      	bne.n	8003548 <__aeabi_f2d+0x5c>
 800351e:	2d00      	cmp	r5, #0
 8003520:	d01b      	beq.n	800355a <__aeabi_f2d+0x6e>
 8003522:	0028      	movs	r0, r5
 8003524:	f000 f8ac 	bl	8003680 <__clzsi2>
 8003528:	280a      	cmp	r0, #10
 800352a:	dc1c      	bgt.n	8003566 <__aeabi_f2d+0x7a>
 800352c:	230b      	movs	r3, #11
 800352e:	002a      	movs	r2, r5
 8003530:	1a1b      	subs	r3, r3, r0
 8003532:	40da      	lsrs	r2, r3
 8003534:	0003      	movs	r3, r0
 8003536:	3315      	adds	r3, #21
 8003538:	409d      	lsls	r5, r3
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <__aeabi_f2d+0x88>)
 800353c:	0312      	lsls	r2, r2, #12
 800353e:	1a1b      	subs	r3, r3, r0
 8003540:	055b      	lsls	r3, r3, #21
 8003542:	0b12      	lsrs	r2, r2, #12
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	e7e1      	b.n	800350c <__aeabi_f2d+0x20>
 8003548:	2d00      	cmp	r5, #0
 800354a:	d009      	beq.n	8003560 <__aeabi_f2d+0x74>
 800354c:	0b13      	lsrs	r3, r2, #12
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	0312      	lsls	r2, r2, #12
 8003552:	431a      	orrs	r2, r3
 8003554:	076d      	lsls	r5, r5, #29
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <__aeabi_f2d+0x8c>)
 8003558:	e7d8      	b.n	800350c <__aeabi_f2d+0x20>
 800355a:	2300      	movs	r3, #0
 800355c:	2200      	movs	r2, #0
 800355e:	e7d5      	b.n	800350c <__aeabi_f2d+0x20>
 8003560:	2200      	movs	r2, #0
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <__aeabi_f2d+0x8c>)
 8003564:	e7d2      	b.n	800350c <__aeabi_f2d+0x20>
 8003566:	0003      	movs	r3, r0
 8003568:	002a      	movs	r2, r5
 800356a:	3b0b      	subs	r3, #11
 800356c:	409a      	lsls	r2, r3
 800356e:	2500      	movs	r5, #0
 8003570:	e7e3      	b.n	800353a <__aeabi_f2d+0x4e>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	00000389 	.word	0x00000389
 8003578:	000007ff 	.word	0x000007ff

0800357c <__aeabi_d2f>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	004b      	lsls	r3, r1, #1
 8003580:	030f      	lsls	r7, r1, #12
 8003582:	0d5b      	lsrs	r3, r3, #21
 8003584:	4c3a      	ldr	r4, [pc, #232]	@ (8003670 <__aeabi_d2f+0xf4>)
 8003586:	0f45      	lsrs	r5, r0, #29
 8003588:	b083      	sub	sp, #12
 800358a:	0a7f      	lsrs	r7, r7, #9
 800358c:	1c5e      	adds	r6, r3, #1
 800358e:	432f      	orrs	r7, r5
 8003590:	9000      	str	r0, [sp, #0]
 8003592:	9101      	str	r1, [sp, #4]
 8003594:	0fca      	lsrs	r2, r1, #31
 8003596:	00c5      	lsls	r5, r0, #3
 8003598:	4226      	tst	r6, r4
 800359a:	d00b      	beq.n	80035b4 <__aeabi_d2f+0x38>
 800359c:	4935      	ldr	r1, [pc, #212]	@ (8003674 <__aeabi_d2f+0xf8>)
 800359e:	185c      	adds	r4, r3, r1
 80035a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80035a2:	dd13      	ble.n	80035cc <__aeabi_d2f+0x50>
 80035a4:	20ff      	movs	r0, #255	@ 0xff
 80035a6:	2300      	movs	r3, #0
 80035a8:	05c0      	lsls	r0, r0, #23
 80035aa:	4318      	orrs	r0, r3
 80035ac:	07d2      	lsls	r2, r2, #31
 80035ae:	4310      	orrs	r0, r2
 80035b0:	b003      	add	sp, #12
 80035b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b4:	433d      	orrs	r5, r7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <__aeabi_d2f+0x42>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e7f4      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	d0f0      	beq.n	80035a4 <__aeabi_d2f+0x28>
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	03db      	lsls	r3, r3, #15
 80035c6:	20ff      	movs	r0, #255	@ 0xff
 80035c8:	433b      	orrs	r3, r7
 80035ca:	e7ed      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035cc:	2c00      	cmp	r4, #0
 80035ce:	dd0c      	ble.n	80035ea <__aeabi_d2f+0x6e>
 80035d0:	9b00      	ldr	r3, [sp, #0]
 80035d2:	00ff      	lsls	r7, r7, #3
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	4183      	sbcs	r3, r0
 80035da:	0f69      	lsrs	r1, r5, #29
 80035dc:	433b      	orrs	r3, r7
 80035de:	430b      	orrs	r3, r1
 80035e0:	0759      	lsls	r1, r3, #29
 80035e2:	d127      	bne.n	8003634 <__aeabi_d2f+0xb8>
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	b2e0      	uxtb	r0, r4
 80035e8:	e7de      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035ea:	0021      	movs	r1, r4
 80035ec:	3117      	adds	r1, #23
 80035ee:	db31      	blt.n	8003654 <__aeabi_d2f+0xd8>
 80035f0:	2180      	movs	r1, #128	@ 0x80
 80035f2:	201e      	movs	r0, #30
 80035f4:	0409      	lsls	r1, r1, #16
 80035f6:	4339      	orrs	r1, r7
 80035f8:	1b00      	subs	r0, r0, r4
 80035fa:	281f      	cmp	r0, #31
 80035fc:	dd2d      	ble.n	800365a <__aeabi_d2f+0xde>
 80035fe:	2602      	movs	r6, #2
 8003600:	4276      	negs	r6, r6
 8003602:	1b34      	subs	r4, r6, r4
 8003604:	000e      	movs	r6, r1
 8003606:	40e6      	lsrs	r6, r4
 8003608:	0034      	movs	r4, r6
 800360a:	2820      	cmp	r0, #32
 800360c:	d004      	beq.n	8003618 <__aeabi_d2f+0x9c>
 800360e:	481a      	ldr	r0, [pc, #104]	@ (8003678 <__aeabi_d2f+0xfc>)
 8003610:	4684      	mov	ip, r0
 8003612:	4463      	add	r3, ip
 8003614:	4099      	lsls	r1, r3
 8003616:	430d      	orrs	r5, r1
 8003618:	002b      	movs	r3, r5
 800361a:	1e59      	subs	r1, r3, #1
 800361c:	418b      	sbcs	r3, r1
 800361e:	4323      	orrs	r3, r4
 8003620:	0759      	lsls	r1, r3, #29
 8003622:	d003      	beq.n	800362c <__aeabi_d2f+0xb0>
 8003624:	210f      	movs	r1, #15
 8003626:	4019      	ands	r1, r3
 8003628:	2904      	cmp	r1, #4
 800362a:	d10b      	bne.n	8003644 <__aeabi_d2f+0xc8>
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	2000      	movs	r0, #0
 8003630:	0a5b      	lsrs	r3, r3, #9
 8003632:	e7b9      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003634:	210f      	movs	r1, #15
 8003636:	4019      	ands	r1, r3
 8003638:	2904      	cmp	r1, #4
 800363a:	d104      	bne.n	8003646 <__aeabi_d2f+0xca>
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	b2e0      	uxtb	r0, r4
 8003642:	e7b1      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003644:	2400      	movs	r4, #0
 8003646:	3304      	adds	r3, #4
 8003648:	0159      	lsls	r1, r3, #5
 800364a:	d5f7      	bpl.n	800363c <__aeabi_d2f+0xc0>
 800364c:	3401      	adds	r4, #1
 800364e:	2300      	movs	r3, #0
 8003650:	b2e0      	uxtb	r0, r4
 8003652:	e7a9      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003654:	2000      	movs	r0, #0
 8003656:	2300      	movs	r3, #0
 8003658:	e7a6      	b.n	80035a8 <__aeabi_d2f+0x2c>
 800365a:	4c08      	ldr	r4, [pc, #32]	@ (800367c <__aeabi_d2f+0x100>)
 800365c:	191c      	adds	r4, r3, r4
 800365e:	002b      	movs	r3, r5
 8003660:	40a5      	lsls	r5, r4
 8003662:	40c3      	lsrs	r3, r0
 8003664:	40a1      	lsls	r1, r4
 8003666:	1e68      	subs	r0, r5, #1
 8003668:	4185      	sbcs	r5, r0
 800366a:	4329      	orrs	r1, r5
 800366c:	430b      	orrs	r3, r1
 800366e:	e7d7      	b.n	8003620 <__aeabi_d2f+0xa4>
 8003670:	000007fe 	.word	0x000007fe
 8003674:	fffffc80 	.word	0xfffffc80
 8003678:	fffffca2 	.word	0xfffffca2
 800367c:	fffffc82 	.word	0xfffffc82

08003680 <__clzsi2>:
 8003680:	211c      	movs	r1, #28
 8003682:	2301      	movs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	4298      	cmp	r0, r3
 8003688:	d301      	bcc.n	800368e <__clzsi2+0xe>
 800368a:	0c00      	lsrs	r0, r0, #16
 800368c:	3910      	subs	r1, #16
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	4298      	cmp	r0, r3
 8003692:	d301      	bcc.n	8003698 <__clzsi2+0x18>
 8003694:	0a00      	lsrs	r0, r0, #8
 8003696:	3908      	subs	r1, #8
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	4298      	cmp	r0, r3
 800369c:	d301      	bcc.n	80036a2 <__clzsi2+0x22>
 800369e:	0900      	lsrs	r0, r0, #4
 80036a0:	3904      	subs	r1, #4
 80036a2:	a202      	add	r2, pc, #8	@ (adr r2, 80036ac <__clzsi2+0x2c>)
 80036a4:	5c10      	ldrb	r0, [r2, r0]
 80036a6:	1840      	adds	r0, r0, r1
 80036a8:	4770      	bx	lr
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	02020304 	.word	0x02020304
 80036b0:	01010101 	.word	0x01010101
	...

080036bc <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	1dbb      	adds	r3, r7, #6
 80036ca:	1c0a      	adds	r2, r1, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 80036ce:	210c      	movs	r1, #12
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	1dfa      	adds	r2, r7, #7
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	1dba      	adds	r2, r7, #6
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <_ds3231_setreg+0x40>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	187a      	adds	r2, r7, r1
 80036e6:	23fa      	movs	r3, #250	@ 0xfa
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2302      	movs	r3, #2
 80036ee:	21d0      	movs	r1, #208	@ 0xd0
 80036f0:	f003 fe2c 	bl	800734c <HAL_I2C_Master_Transmit>
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000000 	.word	0x20000000

08003700 <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af02      	add	r7, sp, #8
 8003706:	0002      	movs	r2, r0
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <_ds3231_getreg+0x44>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	1dfa      	adds	r2, r7, #7
 8003712:	23fa      	movs	r3, #250	@ 0xfa
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	21d0      	movs	r1, #208	@ 0xd0
 800371c:	f003 fe16 	bl	800734c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <_ds3231_getreg+0x44>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	240f      	movs	r4, #15
 8003726:	193a      	adds	r2, r7, r4
 8003728:	23fa      	movs	r3, #250	@ 0xfa
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2301      	movs	r3, #1
 8003730:	21d0      	movs	r1, #208	@ 0xd0
 8003732:	f003 ff35 	bl	80075a0 <HAL_I2C_Master_Receive>
	return val;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	781b      	ldrb	r3, [r3, #0]
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b005      	add	sp, #20
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	20000000 	.word	0x20000000

08003748 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	0005      	movs	r5, r0
 8003750:	000c      	movs	r4, r1
 8003752:	0010      	movs	r0, r2
 8003754:	0019      	movs	r1, r3
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	1c2a      	adds	r2, r5, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	1dbb      	adds	r3, r7, #6
 800375e:	1c22      	adds	r2, r4, #0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	1d7b      	adds	r3, r7, #5
 8003764:	1c02      	adds	r2, r0, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	1c0a      	adds	r2, r1, #0
 800376c:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 800376e:	2328      	movs	r3, #40	@ 0x28
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2217      	movs	r2, #23
 8003776:	18bc      	adds	r4, r7, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f8ed 	bl	8003958 <_dec_to_bcd>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2216      	movs	r2, #22
 8003788:	18bc      	adds	r4, r7, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f8e4 	bl	8003958 <_dec_to_bcd>
 8003790:	0003      	movs	r3, r0
 8003792:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 8003794:	1d7b      	adds	r3, r7, #5
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2215      	movs	r2, #21
 800379a:	18bc      	adds	r4, r7, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f8db 	bl	8003958 <_dec_to_bcd>
 80037a2:	0003      	movs	r3, r0
 80037a4:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 80037a6:	1dbb      	adds	r3, r7, #6
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2214      	movs	r2, #20
 80037ac:	18bc      	adds	r4, r7, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f8d2 	bl	8003958 <_dec_to_bcd>
 80037b4:	0003      	movs	r3, r0
 80037b6:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d858      	bhi.n	8003872 <ds3231_setalarm1+0x12a>
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	4b54      	ldr	r3, [pc, #336]	@ (8003914 <ds3231_setalarm1+0x1cc>)
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037ca:	2214      	movs	r2, #20
 80037cc:	18bb      	adds	r3, r7, r2
 80037ce:	18ba      	adds	r2, r7, r2
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	2180      	movs	r1, #128	@ 0x80
 80037d4:	4249      	negs	r1, r1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	701a      	strb	r2, [r3, #0]
	  break;
 80037da:	e04d      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037dc:	2214      	movs	r2, #20
 80037de:	18bb      	adds	r3, r7, r2
 80037e0:	18ba      	adds	r2, r7, r2
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	2180      	movs	r1, #128	@ 0x80
 80037e6:	4249      	negs	r1, r1
 80037e8:	430a      	orrs	r2, r1
 80037ea:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80037ec:	2215      	movs	r2, #21
 80037ee:	18bb      	adds	r3, r7, r2
 80037f0:	18ba      	adds	r2, r7, r2
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	4249      	negs	r1, r1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]
	  break;
 80037fc:	e03c      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037fe:	2214      	movs	r2, #20
 8003800:	18bb      	adds	r3, r7, r2
 8003802:	18ba      	adds	r2, r7, r2
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	2180      	movs	r1, #128	@ 0x80
 8003808:	4249      	negs	r1, r1
 800380a:	430a      	orrs	r2, r1
 800380c:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 800380e:	2215      	movs	r2, #21
 8003810:	18bb      	adds	r3, r7, r2
 8003812:	18ba      	adds	r2, r7, r2
 8003814:	7812      	ldrb	r2, [r2, #0]
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	4249      	negs	r1, r1
 800381a:	430a      	orrs	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 800381e:	2216      	movs	r2, #22
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	18ba      	adds	r2, r7, r2
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	2180      	movs	r1, #128	@ 0x80
 8003828:	4249      	negs	r1, r1
 800382a:	430a      	orrs	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
	  break;
 800382e:	e023      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 8003830:	2214      	movs	r2, #20
 8003832:	18bb      	adds	r3, r7, r2
 8003834:	18ba      	adds	r2, r7, r2
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	4249      	negs	r1, r1
 800383c:	430a      	orrs	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003840:	2215      	movs	r2, #21
 8003842:	18bb      	adds	r3, r7, r2
 8003844:	18ba      	adds	r2, r7, r2
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	2180      	movs	r1, #128	@ 0x80
 800384a:	4249      	negs	r1, r1
 800384c:	430a      	orrs	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003850:	2216      	movs	r2, #22
 8003852:	18bb      	adds	r3, r7, r2
 8003854:	18ba      	adds	r2, r7, r2
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	4249      	negs	r1, r1
 800385c:	430a      	orrs	r2, r1
 800385e:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 8003860:	2217      	movs	r2, #23
 8003862:	18bb      	adds	r3, r7, r2
 8003864:	18ba      	adds	r2, r7, r2
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	4249      	negs	r1, r1
 800386c:	430a      	orrs	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
	  break;
 8003870:	e002      	b.n	8003878 <ds3231_setalarm1+0x130>
  default:
	  break;
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	e000      	b.n	8003878 <ds3231_setalarm1+0x130>
	  break;
 8003876:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8003878:	2013      	movs	r0, #19
 800387a:	183b      	adds	r3, r7, r0
 800387c:	2207      	movs	r2, #7
 800387e:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8003880:	210c      	movs	r1, #12
 8003882:	187b      	adds	r3, r7, r1
 8003884:	183a      	adds	r2, r7, r0
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2217      	movs	r2, #23
 800388e:	18ba      	adds	r2, r7, r2
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	705a      	strb	r2, [r3, #1]
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2216      	movs	r2, #22
 8003898:	18ba      	adds	r2, r7, r2
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	709a      	strb	r2, [r3, #2]
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2215      	movs	r2, #21
 80038a2:	18ba      	adds	r2, r7, r2
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	70da      	strb	r2, [r3, #3]
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	2214      	movs	r2, #20
 80038ac:	18ba      	adds	r2, r7, r2
 80038ae:	7812      	ldrb	r2, [r2, #0]
 80038b0:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 80038b2:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <ds3231_setalarm1+0x1d0>)
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	187a      	adds	r2, r7, r1
 80038b8:	23fa      	movs	r3, #250	@ 0xfa
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2305      	movs	r3, #5
 80038c0:	21d0      	movs	r1, #208	@ 0xd0
 80038c2:	f003 fd43 	bl	800734c <HAL_I2C_Master_Transmit>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <ds3231_setalarm1+0x186>
 80038ca:	2300      	movs	r3, #0
 80038cc:	e01d      	b.n	800390a <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 80038ce:	2512      	movs	r5, #18
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 80038d6:	197c      	adds	r4, r7, r5
 80038d8:	200e      	movs	r0, #14
 80038da:	f7ff ff11 	bl	8003700 <_ds3231_getreg>
 80038de:	0003      	movs	r3, r0
 80038e0:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 80038e2:	0028      	movs	r0, r5
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	183a      	adds	r2, r7, r0
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 80038f0:	183b      	adds	r3, r7, r0
 80038f2:	183a      	adds	r2, r7, r0
 80038f4:	7812      	ldrb	r2, [r2, #0]
 80038f6:	2104      	movs	r1, #4
 80038f8:	430a      	orrs	r2, r1
 80038fa:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	0019      	movs	r1, r3
 8003902:	200e      	movs	r0, #14
 8003904:	f7ff feda 	bl	80036bc <_ds3231_setreg>

  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bdb0      	pop	{r4, r5, r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0800e830 	.word	0x0800e830
 8003918:	20000000 	.word	0x20000000

0800391c <ds3231_clearflagalarm1>:
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);

  return 1;
}

void ds3231_clearflagalarm1() {
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 8003922:	1dfc      	adds	r4, r7, #7
 8003924:	200f      	movs	r0, #15
 8003926:	f7ff feeb 	bl	8003700 <_ds3231_getreg>
 800392a:	0003      	movs	r3, r0
 800392c:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d00b      	beq.n	8003950 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	1dfa      	adds	r2, r7, #7
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	0019      	movs	r1, r3
 800394a:	200f      	movs	r0, #15
 800394c:	f7ff feb6 	bl	80036bc <_ds3231_setreg>
  }
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b003      	add	sp, #12
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	210a      	movs	r1, #10
 8003964:	0018      	movs	r0, r3
 8003966:	f7fc fc71 	bl	800024c <__divsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	b2dc      	uxtb	r4, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	210a      	movs	r1, #10
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fd4e 	bl	8000418 <__aeabi_idivmod>
 800397c:	000b      	movs	r3, r1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	18e3      	adds	r3, r4, r3
 8003982:	b2db      	uxtb	r3, r3
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b003      	add	sp, #12
 800398a:	bd90      	pop	{r4, r7, pc}

0800398c <led_blink>:
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;
uint8_t led_blink_flag;

void led_blink() {
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	LED_ON();
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <led_blink+0x1c>)
 8003992:	2201      	movs	r2, #1
 8003994:	2102      	movs	r1, #2
 8003996:	0018      	movs	r0, r3
 8003998:	f003 fbe1 	bl	800715e <HAL_GPIO_WritePin>
	led_blink_flag = 1;
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <led_blink+0x20>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	50001400 	.word	0x50001400
 80039ac:	2000052c 	.word	0x2000052c

080039b0 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 80039b8:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 80039ba:	881a      	ldrh	r2, [r3, #0]
 80039bc:	23fa      	movs	r3, #250	@ 0xfa
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d34f      	bcc.n	8003a64 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e041      	b.n	8003a52 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80039ce:	250f      	movs	r5, #15
 80039d0:	197b      	adds	r3, r7, r5
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	58d2      	ldr	r2, [r2, r3]
 80039da:	197b      	adds	r3, r7, r5
 80039dc:	781c      	ldrb	r4, [r3, #0]
 80039de:	23fa      	movs	r3, #250	@ 0xfa
 80039e0:	0059      	lsls	r1, r3, #1
 80039e2:	0010      	movs	r0, r2
 80039e4:	f7fc fba8 	bl	8000138 <__udivsi3>
 80039e8:	0003      	movs	r3, r0
 80039ea:	0019      	movs	r1, r3
 80039ec:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039ee:	00a2      	lsls	r2, r4, #2
 80039f0:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 80039f2:	197b      	adds	r3, r7, r5
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b32      	ldr	r3, [pc, #200]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	58d3      	ldr	r3, [r2, r3]
 80039fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80039fe:	d805      	bhi.n	8003a0c <HAL_ADC_ConvCpltCallback+0x5c>
 8003a00:	197b      	adds	r3, r7, r5
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	2100      	movs	r1, #0
 8003a0a:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8003a0c:	250f      	movs	r5, #15
 8003a0e:	197b      	adds	r3, r7, r5
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	58d3      	ldr	r3, [r2, r3]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fd81 	bl	8001520 <__aeabi_ui2f>
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	4b28      	ldr	r3, [pc, #160]	@ (8003ac4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	58d2      	ldr	r2, [r2, r3]
 8003a28:	197b      	adds	r3, r7, r5
 8003a2a:	781c      	ldrb	r4, [r3, #0]
 8003a2c:	1c11      	adds	r1, r2, #0
 8003a2e:	f7fd f949 	bl	8000cc4 <__aeabi_fmul>
 8003a32:	1c03      	adds	r3, r0, #0
 8003a34:	1c19      	adds	r1, r3, #0
 8003a36:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_ADC_ConvCpltCallback+0x118>)
 8003a38:	00a2      	lsls	r2, r4, #2
 8003a3a:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003a3c:	197b      	adds	r3, r7, r5
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	2100      	movs	r1, #0
 8003a46:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a48:	197b      	adds	r3, r7, r5
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	197b      	adds	r3, r7, r5
 8003a4e:	3201      	adds	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	230f      	movs	r3, #15
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d9b8      	bls.n	80039ce <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8003a62:	e026      	b.n	8003ab2 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a64:	230e      	movs	r3, #14
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e016      	b.n	8003a9c <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003a6e:	200e      	movs	r0, #14
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	58d3      	ldr	r3, [r2, r3]
 8003a7a:	183a      	adds	r2, r7, r0
 8003a7c:	7811      	ldrb	r1, [r2, #0]
 8003a7e:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003a80:	0049      	lsls	r1, r1, #1
 8003a82:	5a8a      	ldrh	r2, [r1, r2]
 8003a84:	0011      	movs	r1, r2
 8003a86:	183a      	adds	r2, r7, r0
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	1859      	adds	r1, r3, r1
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	3201      	adds	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	230e      	movs	r3, #14
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d9e3      	bls.n	8003a6e <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 8003aa6:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003ab0:	801a      	strh	r2, [r3, #0]
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b004      	add	sp, #16
 8003ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	200005fa 	.word	0x200005fa
 8003ac0:	200005fc 	.word	0x200005fc
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	20000540 	.word	0x20000540
 8003acc:	2000054c 	.word	0x2000054c

08003ad0 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR	(0x0)


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d112      	bne.n	8003b0a <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 8003af0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	0018      	movs	r0, r3
 8003af8:	f003 fb31 	bl	800715e <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	480a      	ldr	r0, [pc, #40]	@ (8003b2c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	0019      	movs	r1, r3
 8003b06:	f003 fb2a 	bl	800715e <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d102      	bne.n	8003b18 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 8003b12:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000055c 	.word	0x2000055c
 8003b24:	20000559 	.word	0x20000559
 8003b28:	50001400 	.word	0x50001400
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	20000566 	.word	0x20000566

08003b34 <gsm_cmd>:
/* Util funcs */
// Check if target string exists in buffer
uint8_t find_string_in_buffer(const char* buffer, const char* target) {
}

uint8_t gsm_cmd(char *cmd, char *op_check, uint16_t wtime) {
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	4c20      	ldr	r4, [pc, #128]	@ (8003bb8 <gsm_cmd+0x84>)
 8003b38:	44a5      	add	sp, r4
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <gsm_cmd+0x88>)
 8003b42:	2582      	movs	r5, #130	@ 0x82
 8003b44:	00ad      	lsls	r5, r5, #2
 8003b46:	195b      	adds	r3, r3, r5
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	801a      	strh	r2, [r3, #0]
	char cmd_string[500];
	memset(cmd_string, 0, 20);
 8003b4c:	2414      	movs	r4, #20
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	2214      	movs	r2, #20
 8003b52:	2100      	movs	r1, #0
 8003b54:	0018      	movs	r0, r3
 8003b56:	f008 fbbf 	bl	800c2d8 <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <gsm_cmd+0x8c>)
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4919      	ldr	r1, [pc, #100]	@ (8003bc4 <gsm_cmd+0x90>)
 8003b60:	1938      	adds	r0, r7, r4
 8003b62:	f008 fb4b 	bl	800c1fc <siprintf>
	gsm_tx_busy = 1;
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <gsm_cmd+0x94>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
	gsm_rx_timeout = wtime * 10;
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <gsm_cmd+0x88>)
 8003b6e:	195b      	adds	r3, r3, r5
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	1c1a      	adds	r2, r3, #0
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	18d3      	adds	r3, r2, r3
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <gsm_cmd+0x98>)
 8003b80:	801a      	strh	r2, [r3, #0]
	strcpy(gsm_match_resp, op_check);
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <gsm_cmd+0x9c>)
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f008 fc42 	bl	800c412 <strcpy>
	gsm_status = GSM_WAIT;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <gsm_cmd+0xa0>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fc fab2 	bl	8000100 <strlen>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	1939      	adds	r1, r7, r4
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <gsm_cmd+0xa4>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f006 fb59 	bl	800a25c <HAL_UART_Transmit_DMA>
 8003baa:	0003      	movs	r3, r0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	2382      	movs	r3, #130	@ 0x82
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	449d      	add	sp, r3
 8003bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb8:	fffffdf8 	.word	0xfffffdf8
 8003bbc:	fffffdfe 	.word	0xfffffdfe
 8003bc0:	0800e5e8 	.word	0x0800e5e8
 8003bc4:	0800e5ec 	.word	0x0800e5ec
 8003bc8:	20000574 	.word	0x20000574
 8003bcc:	2000057a 	.word	0x2000057a
 8003bd0:	200005e4 	.word	0x200005e4
 8003bd4:	20000576 	.word	0x20000576
 8003bd8:	200003d4 	.word	0x200003d4

08003bdc <gsm_is_valid_resp>:

uint8_t gsm_is_valid_resp() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 8003be0:	4a06      	ldr	r2, [pc, #24]	@ (8003bfc <gsm_is_valid_resp+0x20>)
 8003be2:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <gsm_is_valid_resp+0x24>)
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f008 fb7e 	bl	800c2e8 <strstr>
 8003bec:	0003      	movs	r3, r0
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	4193      	sbcs	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	200005e4 	.word	0x200005e4
 8003c00:	20000580 	.word	0x20000580

08003c04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <HAL_UART_TxCpltCallback+0x44>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d114      	bne.n	8003c40 <HAL_UART_TxCpltCallback+0x3c>
		gsm_tx_busy = 0;
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <HAL_UART_TxCpltCallback+0x48>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		gsm_rx_busy = 1;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_UART_TxCpltCallback+0x4c>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
		memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <HAL_UART_TxCpltCallback+0x50>)
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f008 fb55 	bl	800c2d8 <memset>
		HAL_UART_Receive_DMA(huart, gsm_rx_buffer, GSM_RX_BUFFER_SIZE);
 8003c2e:	4909      	ldr	r1, [pc, #36]	@ (8003c54 <HAL_UART_TxCpltCallback+0x50>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2264      	movs	r2, #100	@ 0x64
 8003c34:	0018      	movs	r0, r3
 8003c36:	f006 fba3 	bl	800a380 <HAL_UART_Receive_DMA>
		gsm_rx_flag = 1;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <HAL_UART_TxCpltCallback+0x54>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
	}
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40004800 	.word	0x40004800
 8003c4c:	20000574 	.word	0x20000574
 8003c50:	20000575 	.word	0x20000575
 8003c54:	20000580 	.word	0x20000580
 8003c58:	2000057d 	.word	0x2000057d

08003c5c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a8a      	ldr	r2, [pc, #552]	@ (8003e94 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003c6e:	e10c      	b.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8003c70:	4b89      	ldr	r3, [pc, #548]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a89      	ldr	r2, [pc, #548]	@ (8003e9c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d927      	bls.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(sec > 60) {
 8003c7a:	4b89      	ldr	r3, [pc, #548]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c80:	d916      	bls.n	8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8003c82:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c88:	d909      	bls.n	8003c9e <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8003c8a:	4b86      	ldr	r3, [pc, #536]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
					hr++;
 8003c90:	4b85      	ldr	r3, [pc, #532]	@ (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b83      	ldr	r3, [pc, #524]	@ (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e004      	b.n	8003ca8 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 8003c9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ca6:	601a      	str	r2, [r3, #0]
				sec = 0;
 8003ca8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e005      	b.n	8003cbc <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8003cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b79      	ldr	r3, [pc, #484]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003cba:	701a      	strb	r2, [r3, #0]
			ms = 0;
 8003cbc:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
			vi_update_flag = 1;
 8003cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e004      	b.n	8003cd4 <HAL_TIM_PeriodElapsedCallback+0x78>
			/*###*/
		} else ms++;
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	4b71      	ldr	r3, [pc, #452]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cd2:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 8003cd4:	4b70      	ldr	r3, [pc, #448]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4975      	ldr	r1, [pc, #468]	@ (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fc fab2 	bl	8000244 <__aeabi_uidivmod>
 8003ce0:	1e0b      	subs	r3, r1, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_refresh_flag = 1;
 8003ce4:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8003cea:	4b73      	ldr	r3, [pc, #460]	@ (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_PeriodElapsedCallback+0xa0>
 8003cf2:	4b72      	ldr	r3, [pc, #456]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003d00:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 8003d02:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_PeriodElapsedCallback+0xba>
 8003d14:	2200      	movs	r2, #0
 8003d16:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003d18:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d30:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 8003d32:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8003d3a:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_PeriodElapsedCallback+0xea>
 8003d44:	2200      	movs	r2, #0
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d48:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8003d4a:	4b62      	ldr	r3, [pc, #392]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	23fa      	movs	r3, #250	@ 0xfa
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d908      	bls.n	8003d68 <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 8003d56:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2102      	movs	r1, #2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f003 f9fb 	bl	800715e <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8003d68:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d14f      	bne.n	8003e10 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8003d70:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8003d78:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c18      	adds	r0, r3, #0
 8003d7e:	f7ff fbb5 	bl	80034ec <__aeabi_f2d>
 8003d82:	4a59      	ldr	r2, [pc, #356]	@ (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003d86:	f7fd fc11 	bl	80015ac <__aeabi_dadd>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	0010      	movs	r0, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	f7ff fbf3 	bl	800357c <__aeabi_d2f>
 8003d96:	1c02      	adds	r2, r0, #0
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_PeriodElapsedCallback+0x140>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4b51      	ldr	r3, [pc, #324]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003d9e:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 8003da0:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b52      	ldr	r3, [pc, #328]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c19      	adds	r1, r3, #0
 8003daa:	1c10      	adds	r0, r2, #0
 8003dac:	f7fc fba8 	bl	8000500 <__aeabi_fcmpge>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d03d      	beq.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 8003db4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f003 f9cc 	bl	800715e <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	484a      	ldr	r0, [pc, #296]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f003 f9c5 	bl	800715e <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 100; i++);
 8003dd4:	230f      	movs	r3, #15
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_PeriodElapsedCallback+0x18e>
 8003dde:	210f      	movs	r1, #15
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	3201      	adds	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	230f      	movs	r3, #15
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b63      	cmp	r3, #99	@ 0x63
 8003df2:	d9f4      	bls.n	8003dde <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 8003df4:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	2101      	movs	r1, #1
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f003 f9af 	bl	800715e <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	019b      	lsls	r3, r3, #6
 8003e04:	483b      	ldr	r0, [pc, #236]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	0019      	movs	r1, r3
 8003e0a:	f003 f9a8 	bl	800715e <HAL_GPIO_WritePin>
 8003e0e:	e00f      	b.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8003e10:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	2101      	movs	r1, #1
 8003e16:	0018      	movs	r0, r3
 8003e18:	f003 f9a1 	bl	800715e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	019b      	lsls	r3, r3, #6
 8003e20:	4834      	ldr	r0, [pc, #208]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	0019      	movs	r1, r3
 8003e26:	f003 f99a 	bl	800715e <HAL_GPIO_WritePin>
			triac_time = 0;
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8003e30:	4b31      	ldr	r3, [pc, #196]	@ (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8003e46:	2200      	movs	r2, #0
 8003e48:	4b2c      	ldr	r3, [pc, #176]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e4a:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d916      	bls.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8003e5c:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 8003e62:	f7ff febb 	bl	8003bdc <gsm_is_valid_resp>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8003e6a:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e002      	b.n	8003e78 <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003e74:	2263      	movs	r2, #99	@ 0x63
 8003e76:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8003e78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8003e7e:	4b22      	ldr	r3, [pc, #136]	@ (8003f08 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 8003e84:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	40014400 	.word	0x40014400
 8003e98:	20000530 	.word	0x20000530
 8003e9c:	00002710 	.word	0x00002710
 8003ea0:	20000534 	.word	0x20000534
 8003ea4:	20000538 	.word	0x20000538
 8003ea8:	2000053c 	.word	0x2000053c
 8003eac:	20000567 	.word	0x20000567
 8003eb0:	00001388 	.word	0x00001388
 8003eb4:	2000052e 	.word	0x2000052e
 8003eb8:	20000520 	.word	0x20000520
 8003ebc:	20000524 	.word	0x20000524
 8003ec0:	20000521 	.word	0x20000521
 8003ec4:	20000526 	.word	0x20000526
 8003ec8:	20000522 	.word	0x20000522
 8003ecc:	20000528 	.word	0x20000528
 8003ed0:	2000052c 	.word	0x2000052c
 8003ed4:	2000052a 	.word	0x2000052a
 8003ed8:	50001400 	.word	0x50001400
 8003edc:	20000564 	.word	0x20000564
 8003ee0:	20000559 	.word	0x20000559
 8003ee4:	2000055c 	.word	0x2000055c
 8003ee8:	9999999a 	.word	0x9999999a
 8003eec:	3fb99999 	.word	0x3fb99999
 8003ef0:	20000560 	.word	0x20000560
 8003ef4:	50000800 	.word	0x50000800
 8003ef8:	2000057d 	.word	0x2000057d
 8003efc:	20000578 	.word	0x20000578
 8003f00:	2000057a 	.word	0x2000057a
 8003f04:	20000576 	.word	0x20000576
 8003f08:	20000574 	.word	0x20000574
 8003f0c:	20000575 	.word	0x20000575

08003f10 <EEPROM_Write>:
// Define the Page Size and number of pages
#define PAGE_SIZE 16     // in Bytes
#define PAGE_NUM  32    // number of pages

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b08f      	sub	sp, #60	@ 0x3c
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	0004      	movs	r4, r0
 8003f18:	0008      	movs	r0, r1
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	250e      	movs	r5, #14
 8003f20:	197b      	adds	r3, r7, r5
 8003f22:	1c22      	adds	r2, r4, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	240c      	movs	r4, #12
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	1c02      	adds	r2, r0, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	1dbb      	adds	r3, r7, #6
 8003f30:	1c0a      	adds	r2, r1, #0
 8003f32:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8003f34:	2304      	movs	r3, #4
 8003f36:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8003f38:	2326      	movs	r3, #38	@ 0x26
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	197a      	adds	r2, r7, r5
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8003f42:	1dbb      	adds	r3, r7, #6
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	18d3      	adds	r3, r2, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da00      	bge.n	8003f52 <EEPROM_Write+0x42>
 8003f50:	330f      	adds	r3, #15
 8003f52:	111b      	asrs	r3, r3, #4
 8003f54:	b299      	uxth	r1, r3
 8003f56:	201a      	movs	r0, #26
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	220e      	movs	r2, #14
 8003f5c:	18ba      	adds	r2, r7, r2
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	188a      	adds	r2, r1, r2
 8003f62:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8003f64:	183a      	adds	r2, r7, r0
 8003f66:	2326      	movs	r3, #38	@ 0x26
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	2318      	movs	r3, #24
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	3201      	adds	r2, #1
 8003f78:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8003f7a:	2324      	movs	r3, #36	@ 0x24
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2200      	movs	r2, #0
 8003f80:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	e044      	b.n	8004012 <EEPROM_Write+0x102>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8003f88:	2526      	movs	r5, #38	@ 0x26
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	409a      	lsls	r2, r3
 8003f92:	0013      	movs	r3, r2
 8003f94:	b21a      	sxth	r2, r3
 8003f96:	230c      	movs	r3, #12
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5e5b      	ldrsh	r3, [r3, r1]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	b21a      	sxth	r2, r3
 8003fa2:	2116      	movs	r1, #22
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 8003fa8:	2414      	movs	r4, #20
 8003faa:	193b      	adds	r3, r7, r4
 8003fac:	2202      	movs	r2, #2
 8003fae:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8003fb0:	2624      	movs	r6, #36	@ 0x24
 8003fb2:	19bb      	adds	r3, r7, r6
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	187a      	adds	r2, r7, r1
 8003fbc:	8811      	ldrh	r1, [r2, #0]
 8003fbe:	481a      	ldr	r0, [pc, #104]	@ (8004028 <EEPROM_Write+0x118>)
 8003fc0:	22fa      	movs	r2, #250	@ 0xfa
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	9202      	str	r2, [sp, #8]
 8003fc6:	193a      	adds	r2, r7, r4
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	9201      	str	r2, [sp, #4]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2302      	movs	r3, #2
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	21ae      	movs	r1, #174	@ 0xae
 8003fd4:	f003 fbec 	bl	80077b0 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8003fd8:	197b      	adds	r3, r7, r5
 8003fda:	197a      	adds	r2, r7, r5
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	3201      	adds	r2, #1
 8003fe0:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 8003fea:	1dbb      	adds	r3, r7, #6
 8003fec:	1db9      	adds	r1, r7, #6
 8003fee:	193a      	adds	r2, r7, r4
 8003ff0:	8809      	ldrh	r1, [r1, #0]
 8003ff2:	8812      	ldrh	r2, [r2, #0]
 8003ff4:	1a8a      	subs	r2, r1, r2
 8003ff6:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 8003ff8:	19bb      	adds	r3, r7, r6
 8003ffa:	19b9      	adds	r1, r7, r6
 8003ffc:	193a      	adds	r2, r7, r4
 8003ffe:	8809      	ldrh	r1, [r1, #0]
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)/*TODO implement using timer: eeprom_busy_flag */
 8004006:	2005      	movs	r0, #5
 8004008:	f001 fd24 	bl	8005a54 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	3301      	adds	r3, #1
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	2318      	movs	r3, #24
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	429a      	cmp	r2, r3
 800401c:	dbb4      	blt.n	8003f88 <EEPROM_Write+0x78>
	}
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b00b      	add	sp, #44	@ 0x2c
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004028:	200002d0 	.word	0x200002d0

0800402c <EEPROM_Read>:
//
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b08f      	sub	sp, #60	@ 0x3c
 8004030:	af04      	add	r7, sp, #16
 8004032:	0004      	movs	r4, r0
 8004034:	0008      	movs	r0, r1
 8004036:	60ba      	str	r2, [r7, #8]
 8004038:	0019      	movs	r1, r3
 800403a:	250e      	movs	r5, #14
 800403c:	197b      	adds	r3, r7, r5
 800403e:	1c22      	adds	r2, r4, #0
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	240c      	movs	r4, #12
 8004044:	193b      	adds	r3, r7, r4
 8004046:	1c02      	adds	r2, r0, #0
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	1dbb      	adds	r3, r7, #6
 800404c:	1c0a      	adds	r2, r1, #0
 800404e:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8004050:	2304      	movs	r3, #4
 8004052:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8004054:	2326      	movs	r3, #38	@ 0x26
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	197a      	adds	r2, r7, r5
 800405a:	8812      	ldrh	r2, [r2, #0]
 800405c:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	193b      	adds	r3, r7, r4
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	da00      	bge.n	800406e <EEPROM_Read+0x42>
 800406c:	330f      	adds	r3, #15
 800406e:	111b      	asrs	r3, r3, #4
 8004070:	b299      	uxth	r1, r3
 8004072:	201a      	movs	r0, #26
 8004074:	183b      	adds	r3, r7, r0
 8004076:	220e      	movs	r2, #14
 8004078:	18ba      	adds	r2, r7, r2
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	188a      	adds	r2, r1, r2
 800407e:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 8004080:	183a      	adds	r2, r7, r0
 8004082:	2326      	movs	r3, #38	@ 0x26
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b29a      	uxth	r2, r3
 800408e:	2318      	movs	r3, #24
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	3201      	adds	r2, #1
 8004094:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8004096:	2324      	movs	r3, #36	@ 0x24
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	e03b      	b.n	800411c <EEPROM_Read+0xf0>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80040a4:	2426      	movs	r4, #38	@ 0x26
 80040a6:	193b      	adds	r3, r7, r4
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	409a      	lsls	r2, r3
 80040ae:	0013      	movs	r3, r2
 80040b0:	b21a      	sxth	r2, r3
 80040b2:	260c      	movs	r6, #12
 80040b4:	19bb      	adds	r3, r7, r6
 80040b6:	2100      	movs	r1, #0
 80040b8:	5e5b      	ldrsh	r3, [r3, r1]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b21a      	sxth	r2, r3
 80040be:	2116      	movs	r1, #22
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 80040c4:	2514      	movs	r5, #20
 80040c6:	197b      	adds	r3, r7, r5
 80040c8:	2202      	movs	r2, #2
 80040ca:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, 2, 1000);
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	4818      	ldr	r0, [pc, #96]	@ (8004134 <EEPROM_Read+0x108>)
 80040d2:	23fa      	movs	r3, #250	@ 0xfa
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2302      	movs	r3, #2
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2302      	movs	r3, #2
 80040e2:	21ae      	movs	r1, #174	@ 0xae
 80040e4:	f003 fc92 	bl	8007a0c <HAL_I2C_Mem_Read>
		startPage += 1;
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	193a      	adds	r2, r7, r4
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	3201      	adds	r2, #1
 80040f0:	801a      	strh	r2, [r3, #0]
		offset=0;
 80040f2:	19bb      	adds	r3, r7, r6
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	1db9      	adds	r1, r7, #6
 80040fc:	197a      	adds	r2, r7, r5
 80040fe:	8809      	ldrh	r1, [r1, #0]
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	1a8a      	subs	r2, r1, r2
 8004104:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	18bb      	adds	r3, r7, r2
 800410a:	18b9      	adds	r1, r7, r2
 800410c:	197a      	adds	r2, r7, r5
 800410e:	8809      	ldrh	r1, [r1, #0]
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	188a      	adds	r2, r1, r2
 8004114:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	3301      	adds	r3, #1
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	2318      	movs	r3, #24
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbbd      	blt.n	80040a4 <EEPROM_Read+0x78>
	}
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b00b      	add	sp, #44	@ 0x2c
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	200002d0 	.word	0x200002d0

08004138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	46de      	mov	lr, fp
 800413c:	4657      	mov	r7, sl
 800413e:	464e      	mov	r6, r9
 8004140:	4645      	mov	r5, r8
 8004142:	b5e0      	push	{r5, r6, r7, lr}
 8004144:	b0cd      	sub	sp, #308	@ 0x134
 8004146:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004148:	f001 fbfe 	bl	8005948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800414c:	f000 fca6 	bl	8004a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004150:	f000 fe90 	bl	8004e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8004154:	f000 fe68 	bl	8004e28 <MX_DMA_Init>
  MX_TIM16_Init();
 8004158:	f000 fe0c 	bl	8004d74 <MX_TIM16_Init>
  MX_I2C1_Init();
 800415c:	f000 fd8a 	bl	8004c74 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004160:	f000 fe2e 	bl	8004dc0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8004164:	f000 fcf4 	bl	8004b50 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004168:	f000 fdc4 	bl	8004cf4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 800416c:	4bf9      	ldr	r3, [pc, #996]	@ (8004554 <main+0x41c>)
 800416e:	2200      	movs	r2, #0
 8004170:	2101      	movs	r1, #1
 8004172:	0018      	movs	r0, r3
 8004174:	f002 fff3 	bl	800715e <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	48f6      	ldr	r0, [pc, #984]	@ (8004558 <main+0x420>)
 800417e:	2200      	movs	r2, #0
 8004180:	0019      	movs	r1, r3
 8004182:	f002 ffec 	bl	800715e <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8004186:	23f8      	movs	r3, #248	@ 0xf8
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 800418e:	2308      	movs	r3, #8
 8004190:	33ff      	adds	r3, #255	@ 0xff
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8004198:	1d7b      	adds	r3, r7, #5
 800419a:	33ff      	adds	r3, #255	@ 0xff
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 80041a0:	4bee      	ldr	r3, [pc, #952]	@ (800455c <main+0x424>)
 80041a2:	2280      	movs	r2, #128	@ 0x80
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041a8:	4bec      	ldr	r3, [pc, #944]	@ (800455c <main+0x424>)
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041b0:	4bea      	ldr	r3, [pc, #936]	@ (800455c <main+0x424>)
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	0212      	lsls	r2, r2, #8
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041b8:	4be8      	ldr	r3, [pc, #928]	@ (800455c <main+0x424>)
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	0212      	lsls	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 80041c0:	4be6      	ldr	r3, [pc, #920]	@ (800455c <main+0x424>)
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041c8:	4be4      	ldr	r3, [pc, #912]	@ (800455c <main+0x424>)
 80041ca:	2280      	movs	r2, #128	@ 0x80
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041d0:	4be2      	ldr	r3, [pc, #904]	@ (800455c <main+0x424>)
 80041d2:	2280      	movs	r2, #128	@ 0x80
 80041d4:	0212      	lsls	r2, r2, #8
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041d8:	4be0      	ldr	r3, [pc, #896]	@ (800455c <main+0x424>)
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	0212      	lsls	r2, r2, #8
 80041de:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 80041e0:	4bde      	ldr	r3, [pc, #888]	@ (800455c <main+0x424>)
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041e8:	4bdc      	ldr	r3, [pc, #880]	@ (800455c <main+0x424>)
 80041ea:	2280      	movs	r2, #128	@ 0x80
 80041ec:	0112      	lsls	r2, r2, #4
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041f0:	4bda      	ldr	r3, [pc, #872]	@ (800455c <main+0x424>)
 80041f2:	2280      	movs	r2, #128	@ 0x80
 80041f4:	0212      	lsls	r2, r2, #8
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041f8:	4bd8      	ldr	r3, [pc, #864]	@ (800455c <main+0x424>)
 80041fa:	2280      	movs	r2, #128	@ 0x80
 80041fc:	0212      	lsls	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8004200:	4bd6      	ldr	r3, [pc, #856]	@ (800455c <main+0x424>)
 8004202:	2280      	movs	r2, #128	@ 0x80
 8004204:	0152      	lsls	r2, r2, #5
 8004206:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8004208:	4bd4      	ldr	r3, [pc, #848]	@ (800455c <main+0x424>)
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8004210:	4bd2      	ldr	r3, [pc, #840]	@ (800455c <main+0x424>)
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	0212      	lsls	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8004218:	23a0      	movs	r3, #160	@ 0xa0
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	0052      	lsls	r2, r2, #1
 8004220:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8004222:	4bce      	ldr	r3, [pc, #824]	@ (800455c <main+0x424>)
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 800422a:	4bcd      	ldr	r3, [pc, #820]	@ (8004560 <main+0x428>)
 800422c:	2200      	movs	r2, #0
 800422e:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8004230:	4bcb      	ldr	r3, [pc, #812]	@ (8004560 <main+0x428>)
 8004232:	2200      	movs	r2, #0
 8004234:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8004236:	4bca      	ldr	r3, [pc, #808]	@ (8004560 <main+0x428>)
 8004238:	2200      	movs	r2, #0
 800423a:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 800423c:	2330      	movs	r3, #48	@ 0x30
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	0018      	movs	r0, r3
 8004242:	23c8      	movs	r3, #200	@ 0xc8
 8004244:	001a      	movs	r2, r3
 8004246:	2100      	movs	r1, #0
 8004248:	f008 f846 	bl	800c2d8 <memset>
	char api_key[20] = "F1LOAYMJF47UO4LD"; /* key for testing */
 800424c:	231c      	movs	r3, #28
 800424e:	18f9      	adds	r1, r7, r3
 8004250:	4ac4      	ldr	r2, [pc, #784]	@ (8004564 <main+0x42c>)
 8004252:	000b      	movs	r3, r1
 8004254:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004256:	c331      	stmia	r3!, {r0, r4, r5}
 8004258:	6810      	ldr	r0, [r2, #0]
 800425a:	6018      	str	r0, [r3, #0]
 800425c:	7912      	ldrb	r2, [r2, #4]
 800425e:	711a      	strb	r2, [r3, #4]
 8004260:	2311      	movs	r3, #17
 8004262:	18cb      	adds	r3, r1, r3
 8004264:	2203      	movs	r2, #3
 8004266:	2100      	movs	r1, #0
 8004268:	0018      	movs	r0, r3
 800426a:	f008 f835 	bl	800c2d8 <memset>
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
//	HAL_Delay(700);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
//	HAL_Delay(15000);
	uint8_t prev_idx = 1;
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	33ff      	adds	r3, #255	@ 0xff
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 8004276:	1cfb      	adds	r3, r7, #3
 8004278:	33ff      	adds	r3, #255	@ 0xff
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 800427e:	1c7b      	adds	r3, r7, #1
 8004280:	33ff      	adds	r3, #255	@ 0xff
 8004282:	22c8      	movs	r2, #200	@ 0xc8
 8004284:	0052      	lsls	r2, r2, #1
 8004286:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 8004288:	4bb7      	ldr	r3, [pc, #732]	@ (8004568 <main+0x430>)
 800428a:	0018      	movs	r0, r3
 800428c:	f005 fd76 	bl	8009d7c <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 8004290:	4bb6      	ldr	r3, [pc, #728]	@ (800456c <main+0x434>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8004296:	4bb6      	ldr	r3, [pc, #728]	@ (8004570 <main+0x438>)
 8004298:	22ff      	movs	r2, #255	@ 0xff
 800429a:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 800429c:	4bb5      	ldr	r3, [pc, #724]	@ (8004574 <main+0x43c>)
 800429e:	2488      	movs	r4, #136	@ 0x88
 80042a0:	0064      	lsls	r4, r4, #1
 80042a2:	191b      	adds	r3, r3, r4
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	0018      	movs	r0, r3
 80042a8:	2307      	movs	r3, #7
 80042aa:	001a      	movs	r2, r3
 80042ac:	2100      	movs	r1, #0
 80042ae:	f008 f813 	bl	800c2d8 <memset>
	ti.day = 14;
 80042b2:	2114      	movs	r1, #20
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	220e      	movs	r2, #14
 80042b8:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	220b      	movs	r2, #11
 80042be:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	2218      	movs	r2, #24
 80042c4:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 80042c6:	187b      	adds	r3, r7, r1
 80042c8:	2202      	movs	r2, #2
 80042ca:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	2215      	movs	r2, #21
 80042d0:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	220e      	movs	r2, #14
 80042d6:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	2200      	movs	r2, #0
 80042dc:	719a      	strb	r2, [r3, #6]
	uint8_t data[] = { 2, 3 };
 80042de:	4ba6      	ldr	r3, [pc, #664]	@ (8004578 <main+0x440>)
 80042e0:	191b      	adds	r3, r3, r4
 80042e2:	19db      	adds	r3, r3, r7
 80042e4:	4aa5      	ldr	r2, [pc, #660]	@ (800457c <main+0x444>)
 80042e6:	801a      	strh	r2, [r3, #0]
	uint8_t rdata[2] = {};
 80042e8:	4ba5      	ldr	r3, [pc, #660]	@ (8004580 <main+0x448>)
 80042ea:	191b      	adds	r3, r3, r4
 80042ec:	19db      	adds	r3, r3, r7
 80042ee:	2200      	movs	r2, #0
 80042f0:	801a      	strh	r2, [r3, #0]
//	ds3231_settime(&ti);
//	ds3231_gettime(&time);
//
//	ds3231_clearalarm1();
//	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_clearflagalarm1(); /* clear alarm flag */
 80042f2:	f7ff fb13 	bl	800391c <ds3231_clearflagalarm1>
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 80042f6:	230a      	movs	r3, #10
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	2200      	movs	r2, #0
 80042fe:	2100      	movs	r1, #0
 8004300:	2003      	movs	r0, #3
 8004302:	f7ff fa21 	bl	8003748 <ds3231_setalarm1>
//	alarmcheck();
	/*A*/
	float prms = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	2286      	movs	r2, #134	@ 0x86
 800430a:	0052      	lsls	r2, r2, #1
 800430c:	18ba      	adds	r2, r7, r2
 800430e:	6013      	str	r3, [r2, #0]
	uint32_t sample = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	2284      	movs	r2, #132	@ 0x84
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	6013      	str	r3, [r2, #0]
//				TRIAC2_SET(0);
//				triac_time = 0;
//			}
//		}

		if(kwh_update_flag == 1) {
 800431a:	4b9a      	ldr	r3, [pc, #616]	@ (8004584 <main+0x44c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d155      	bne.n	80043ce <main+0x296>
////			pavg_final /= LSBpermW; // Convert from codes to mW
//			//Correct for the voltage divider: (RISO1 + RISO2 + RSENSE) / RSENSE
//			//Or:  (RISO1 + RISO2 + RISO3 + RISO4 + RSENSE) / RSENSE
//			pavg_final /= ACS37800_R_RATIO;
//			pavg_final /= 1000; // Convert from mW to W
			pavg_final = prms/(float)sample;
 8004322:	2484      	movs	r4, #132	@ 0x84
 8004324:	0064      	lsls	r4, r4, #1
 8004326:	193b      	adds	r3, r7, r4
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f7fd f8f9 	bl	8001520 <__aeabi_ui2f>
 800432e:	1c03      	adds	r3, r0, #0
 8004330:	1c19      	adds	r1, r3, #0
 8004332:	2586      	movs	r5, #134	@ 0x86
 8004334:	006d      	lsls	r5, r5, #1
 8004336:	197b      	adds	r3, r7, r5
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f7fc faf5 	bl	8000928 <__aeabi_fdiv>
 800433e:	1c03      	adds	r3, r0, #0
 8004340:	1c1a      	adds	r2, r3, #0
 8004342:	4b91      	ldr	r3, [pc, #580]	@ (8004588 <main+0x450>)
 8004344:	601a      	str	r2, [r3, #0]
			sample = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	193a      	adds	r2, r7, r4
 800434a:	6013      	str	r3, [r2, #0]
			prms = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	197a      	adds	r2, r7, r5
 8004350:	6013      	str	r3, [r2, #0]

			uint32_t kwh_save = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	603b      	str	r3, [r7, #0]
			EEPROM_Read(0, 0, &kwh_save, 4);
 8004356:	003a      	movs	r2, r7
 8004358:	2304      	movs	r3, #4
 800435a:	2100      	movs	r1, #0
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff fe65 	bl	800402c <EEPROM_Read>
			kwh = kwh_save / (float)1000;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	0018      	movs	r0, r3
 8004366:	f7fd f8db 	bl	8001520 <__aeabi_ui2f>
 800436a:	1c03      	adds	r3, r0, #0
 800436c:	4987      	ldr	r1, [pc, #540]	@ (800458c <main+0x454>)
 800436e:	1c18      	adds	r0, r3, #0
 8004370:	f7fc fada 	bl	8000928 <__aeabi_fdiv>
 8004374:	1c03      	adds	r3, r0, #0
 8004376:	1c1a      	adds	r2, r3, #0
 8004378:	4b85      	ldr	r3, [pc, #532]	@ (8004590 <main+0x458>)
 800437a:	601a      	str	r2, [r3, #0]
			kwh = kwh + (pavg_final * (1/(float)60));
 800437c:	4b82      	ldr	r3, [pc, #520]	@ (8004588 <main+0x450>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4984      	ldr	r1, [pc, #528]	@ (8004594 <main+0x45c>)
 8004382:	1c18      	adds	r0, r3, #0
 8004384:	f7fc fc9e 	bl	8000cc4 <__aeabi_fmul>
 8004388:	1c03      	adds	r3, r0, #0
 800438a:	1c1a      	adds	r2, r3, #0
 800438c:	4b80      	ldr	r3, [pc, #512]	@ (8004590 <main+0x458>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1c19      	adds	r1, r3, #0
 8004392:	1c10      	adds	r0, r2, #0
 8004394:	f7fc f8d6 	bl	8000544 <__aeabi_fadd>
 8004398:	1c03      	adds	r3, r0, #0
 800439a:	1c1a      	adds	r2, r3, #0
 800439c:	4b7c      	ldr	r3, [pc, #496]	@ (8004590 <main+0x458>)
 800439e:	601a      	str	r2, [r3, #0]
			kwh_save = kwh * 1000;
 80043a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004590 <main+0x458>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4979      	ldr	r1, [pc, #484]	@ (800458c <main+0x454>)
 80043a6:	1c18      	adds	r0, r3, #0
 80043a8:	f7fc fc8c 	bl	8000cc4 <__aeabi_fmul>
 80043ac:	1c03      	adds	r3, r0, #0
 80043ae:	1c18      	adds	r0, r3, #0
 80043b0:	f7fc f8b0 	bl	8000514 <__aeabi_f2uiz>
 80043b4:	0003      	movs	r3, r0
 80043b6:	603b      	str	r3, [r7, #0]
			EEPROM_Write(0, 0, &kwh_save, 4);
 80043b8:	003a      	movs	r2, r7
 80043ba:	2304      	movs	r3, #4
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7ff fda6 	bl	8003f10 <EEPROM_Write>
			/* TODO update kwh in EEPROM */
			kwh_update_flag = 0; /* wait till next min */
 80043c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004584 <main+0x44c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
			ds3231_clearflagalarm1(); /* clear alarm flag */
 80043ca:	f7ff faa7 	bl	800391c <ds3231_clearflagalarm1>
		}
		if(vi_update_flag == 1) {
 80043ce:	4b72      	ldr	r3, [pc, #456]	@ (8004598 <main+0x460>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d000      	beq.n	80043d8 <main+0x2a0>
 80043d6:	e09c      	b.n	8004512 <main+0x3da>
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_VIRMS, I2C_MEMADD_SIZE_8BIT, acs37800_vi_buffer, 4, 100);
 80043d8:	4870      	ldr	r0, [pc, #448]	@ (800459c <main+0x464>)
 80043da:	2364      	movs	r3, #100	@ 0x64
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	2304      	movs	r3, #4
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	4b6f      	ldr	r3, [pc, #444]	@ (80045a0 <main+0x468>)
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2301      	movs	r3, #1
 80043e8:	2220      	movs	r2, #32
 80043ea:	21fe      	movs	r1, #254	@ 0xfe
 80043ec:	f003 fb0e 	bl	8007a0c <HAL_I2C_Mem_Read>
			uint16_t vrms_raw = (acs37800_vi_buffer[1] << 8) | acs37800_vi_buffer[0];
 80043f0:	4b6b      	ldr	r3, [pc, #428]	@ (80045a0 <main+0x468>)
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	b21a      	sxth	r2, r3
 80043fa:	4b69      	ldr	r3, [pc, #420]	@ (80045a0 <main+0x468>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b21b      	sxth	r3, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	b21a      	sxth	r2, r3
 8004404:	21fe      	movs	r1, #254	@ 0xfe
 8004406:	187b      	adds	r3, r7, r1
 8004408:	801a      	strh	r2, [r3, #0]
			vrms_final = vrms_raw / (float)55000;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	0018      	movs	r0, r3
 8004410:	f7fd f836 	bl	8001480 <__aeabi_i2f>
 8004414:	1c03      	adds	r3, r0, #0
 8004416:	4963      	ldr	r1, [pc, #396]	@ (80045a4 <main+0x46c>)
 8004418:	1c18      	adds	r0, r3, #0
 800441a:	f7fc fa85 	bl	8000928 <__aeabi_fdiv>
 800441e:	1c03      	adds	r3, r0, #0
 8004420:	1c1a      	adds	r2, r3, #0
 8004422:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <main+0x470>)
 8004424:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final * 250;
 8004426:	4b60      	ldr	r3, [pc, #384]	@ (80045a8 <main+0x470>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4960      	ldr	r1, [pc, #384]	@ (80045ac <main+0x474>)
 800442c:	1c18      	adds	r0, r3, #0
 800442e:	f7fc fc49 	bl	8000cc4 <__aeabi_fmul>
 8004432:	1c03      	adds	r3, r0, #0
 8004434:	1c1a      	adds	r2, r3, #0
 8004436:	4b5c      	ldr	r3, [pc, #368]	@ (80045a8 <main+0x470>)
 8004438:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 1000;
 800443a:	4b5b      	ldr	r3, [pc, #364]	@ (80045a8 <main+0x470>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4953      	ldr	r1, [pc, #332]	@ (800458c <main+0x454>)
 8004440:	1c18      	adds	r0, r3, #0
 8004442:	f7fc fa71 	bl	8000928 <__aeabi_fdiv>
 8004446:	1c03      	adds	r3, r0, #0
 8004448:	1c1a      	adds	r2, r3, #0
 800444a:	4b57      	ldr	r3, [pc, #348]	@ (80045a8 <main+0x470>)
 800444c:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / ACS37800_R_RATIO;
 800444e:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <main+0x470>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1c18      	adds	r0, r3, #0
 8004454:	f7ff f84a 	bl	80034ec <__aeabi_f2d>
 8004458:	4a55      	ldr	r2, [pc, #340]	@ (80045b0 <main+0x478>)
 800445a:	4b56      	ldr	r3, [pc, #344]	@ (80045b4 <main+0x47c>)
 800445c:	f7fd fc6c 	bl	8001d38 <__aeabi_ddiv>
 8004460:	0002      	movs	r2, r0
 8004462:	000b      	movs	r3, r1
 8004464:	0010      	movs	r0, r2
 8004466:	0019      	movs	r1, r3
 8004468:	f7ff f888 	bl	800357c <__aeabi_d2f>
 800446c:	1c02      	adds	r2, r0, #0
 800446e:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <main+0x470>)
 8004470:	601a      	str	r2, [r3, #0]
			uint16_t irms_raw = (acs37800_vi_buffer[3] << 8) | acs37800_vi_buffer[2];
 8004472:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <main+0x468>)
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	b21b      	sxth	r3, r3
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	b21a      	sxth	r2, r3
 800447c:	4b48      	ldr	r3, [pc, #288]	@ (80045a0 <main+0x468>)
 800447e:	789b      	ldrb	r3, [r3, #2]
 8004480:	b21b      	sxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b21a      	sxth	r2, r3
 8004486:	21fc      	movs	r1, #252	@ 0xfc
 8004488:	187b      	adds	r3, r7, r1
 800448a:	801a      	strh	r2, [r3, #0]
			irms_final = irms_raw / (float)55000;
 800448c:	187b      	adds	r3, r7, r1
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	0018      	movs	r0, r3
 8004492:	f7fc fff5 	bl	8001480 <__aeabi_i2f>
 8004496:	1c03      	adds	r3, r0, #0
 8004498:	4942      	ldr	r1, [pc, #264]	@ (80045a4 <main+0x46c>)
 800449a:	1c18      	adds	r0, r3, #0
 800449c:	f7fc fa44 	bl	8000928 <__aeabi_fdiv>
 80044a0:	1c03      	adds	r3, r0, #0
 80044a2:	1c1a      	adds	r2, r3, #0
 80044a4:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <main+0x480>)
 80044a6:	601a      	str	r2, [r3, #0]
			irms_final = irms_final * ACS37800_CURR_SENS_RANGE;
 80044a8:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <main+0x480>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4943      	ldr	r1, [pc, #268]	@ (80045bc <main+0x484>)
 80044ae:	1c18      	adds	r0, r3, #0
 80044b0:	f7fc fc08 	bl	8000cc4 <__aeabi_fmul>
 80044b4:	1c03      	adds	r3, r0, #0
 80044b6:	1c1a      	adds	r2, r3, #0
 80044b8:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <main+0x480>)
 80044ba:	601a      	str	r2, [r3, #0]
			prms += (vrms_final * irms_final);
 80044bc:	4b3a      	ldr	r3, [pc, #232]	@ (80045a8 <main+0x470>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <main+0x480>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c19      	adds	r1, r3, #0
 80044c6:	1c10      	adds	r0, r2, #0
 80044c8:	f7fc fbfc 	bl	8000cc4 <__aeabi_fmul>
 80044cc:	1c03      	adds	r3, r0, #0
 80044ce:	1c19      	adds	r1, r3, #0
 80044d0:	2486      	movs	r4, #134	@ 0x86
 80044d2:	0064      	lsls	r4, r4, #1
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f7fc f834 	bl	8000544 <__aeabi_fadd>
 80044dc:	1c03      	adds	r3, r0, #0
 80044de:	193a      	adds	r2, r7, r4
 80044e0:	6013      	str	r3, [r2, #0]
			sample++;
 80044e2:	2284      	movs	r2, #132	@ 0x84
 80044e4:	0052      	lsls	r2, r2, #1
 80044e6:	18bb      	adds	r3, r7, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	18ba      	adds	r2, r7, r2
 80044ee:	6013      	str	r3, [r2, #0]
			if(irms_final < 0.050)
 80044f0:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <main+0x480>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	1c18      	adds	r0, r3, #0
 80044f6:	f7fe fff9 	bl	80034ec <__aeabi_f2d>
 80044fa:	4a31      	ldr	r2, [pc, #196]	@ (80045c0 <main+0x488>)
 80044fc:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <main+0x48c>)
 80044fe:	f7fb ffa7 	bl	8000450 <__aeabi_dcmplt>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d002      	beq.n	800450c <main+0x3d4>
				irms_final = 0;
 8004506:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <main+0x480>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
			vi_update_flag = 0; /* wait till next sec */
 800450c:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <main+0x460>)
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
		/*###*/
		/* routines */

		/*### Sensor read ###*/
		/*A*/
		if(sensor_refresh_flag == 1) {
 8004512:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <main+0x490>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d000      	beq.n	800451c <main+0x3e4>
 800451a:	e0a6      	b.n	800466a <main+0x532>
			sensor_rx_select(sensor_idx);
 800451c:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <main+0x494>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	0018      	movs	r0, r3
 8004522:	f001 f997 	bl	8005854 <sensor_rx_select>
			HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 10);
 8004526:	24f8      	movs	r4, #248	@ 0xf8
 8004528:	1939      	adds	r1, r7, r4
 800452a:	4829      	ldr	r0, [pc, #164]	@ (80045d0 <main+0x498>)
 800452c:	230a      	movs	r3, #10
 800452e:	2202      	movs	r2, #2
 8004530:	f004 fec4 	bl	80092bc <HAL_SPI_Receive>
			sensor_rx_disable(); // Disables all IC comms
 8004534:	f001 f96e 	bl	8005814 <sensor_rx_disable>
			temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 8004538:	0020      	movs	r0, r4
 800453a:	183b      	adds	r3, r7, r0
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001a      	movs	r2, r3
 8004540:	183b      	adds	r3, r7, r0
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	4313      	orrs	r3, r2
 8004548:	109b      	asrs	r3, r3, #2
 800454a:	b2da      	uxtb	r2, r3
 800454c:	2408      	movs	r4, #8
 800454e:	34ff      	adds	r4, #255	@ 0xff
 8004550:	193b      	adds	r3, r7, r4
 8004552:	e03f      	b.n	80045d4 <main+0x49c>
 8004554:	50001400 	.word	0x50001400
 8004558:	50000800 	.word	0x50000800
 800455c:	50000400 	.word	0x50000400
 8004560:	2000054c 	.word	0x2000054c
 8004564:	0800e760 	.word	0x0800e760
 8004568:	20000388 	.word	0x20000388
 800456c:	20000559 	.word	0x20000559
 8004570:	2000057c 	.word	0x2000057c
 8004574:	fffffefc 	.word	0xfffffefc
 8004578:	fffffef8 	.word	0xfffffef8
 800457c:	00000302 	.word	0x00000302
 8004580:	fffffef4 	.word	0xfffffef4
 8004584:	20000566 	.word	0x20000566
 8004588:	2000020c 	.word	0x2000020c
 800458c:	447a0000 	.word	0x447a0000
 8004590:	20000554 	.word	0x20000554
 8004594:	3c888889 	.word	0x3c888889
 8004598:	20000567 	.word	0x20000567
 800459c:	200002d0 	.word	0x200002d0
 80045a0:	20000200 	.word	0x20000200
 80045a4:	4756d800 	.word	0x4756d800
 80045a8:	20000204 	.word	0x20000204
 80045ac:	437a0000 	.word	0x437a0000
 80045b0:	074a771d 	.word	0x074a771d
 80045b4:	3f4cffeb 	.word	0x3f4cffeb
 80045b8:	20000208 	.word	0x20000208
 80045bc:	41f00000 	.word	0x41f00000
 80045c0:	9999999a 	.word	0x9999999a
 80045c4:	3fa99999 	.word	0x3fa99999
 80045c8:	2000052e 	.word	0x2000052e
 80045cc:	2000052d 	.word	0x2000052d
 80045d0:	20000324 	.word	0x20000324
 80045d4:	2101      	movs	r1, #1
 80045d6:	400a      	ands	r2, r1
 80045d8:	701a      	strb	r2, [r3, #0]
			temp_word = (sdo[0] | sdo[1] << 8);
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b21a      	sxth	r2, r3
 80045e0:	183b      	adds	r3, r7, r0
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b21a      	sxth	r2, r3
 80045ee:	21fa      	movs	r1, #250	@ 0xfa
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	801a      	strh	r2, [r3, #0]
			temp12b = (temp_word & 0b111111111111000) >> 3;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	10db      	asrs	r3, r3, #3
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	1d7b      	adds	r3, r7, #5
 80045fe:	33ff      	adds	r3, #255	@ 0xff
 8004600:	0512      	lsls	r2, r2, #20
 8004602:	0d12      	lsrs	r2, r2, #20
 8004604:	801a      	strh	r2, [r3, #0]
			/* store the temp */
			if(temp_state == 1) {
 8004606:	193b      	adds	r3, r7, r4
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <main+0x4e6>
				temperatures[sensor_idx - 1] = -99;
 800460e:	4bdd      	ldr	r3, [pc, #884]	@ (8004984 <main+0x84c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	1e5a      	subs	r2, r3, #1
 8004614:	4bdc      	ldr	r3, [pc, #880]	@ (8004988 <main+0x850>)
 8004616:	0092      	lsls	r2, r2, #2
 8004618:	49dc      	ldr	r1, [pc, #880]	@ (800498c <main+0x854>)
 800461a:	50d1      	str	r1, [r2, r3]
 800461c:	e016      	b.n	800464c <main+0x514>
			}
			else {
				temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 800461e:	1d7b      	adds	r3, r7, #5
 8004620:	33ff      	adds	r3, #255	@ 0xff
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	0018      	movs	r0, r3
 8004626:	f7fe ff0f 	bl	8003448 <__aeabi_i2d>
 800462a:	2200      	movs	r2, #0
 800462c:	4bd8      	ldr	r3, [pc, #864]	@ (8004990 <main+0x858>)
 800462e:	f7fd ffbd 	bl	80025ac <__aeabi_dmul>
 8004632:	0002      	movs	r2, r0
 8004634:	000b      	movs	r3, r1
 8004636:	49d3      	ldr	r1, [pc, #844]	@ (8004984 <main+0x84c>)
 8004638:	7809      	ldrb	r1, [r1, #0]
 800463a:	1e4c      	subs	r4, r1, #1
 800463c:	0010      	movs	r0, r2
 800463e:	0019      	movs	r1, r3
 8004640:	f7fe ff9c 	bl	800357c <__aeabi_d2f>
 8004644:	1c01      	adds	r1, r0, #0
 8004646:	4bd0      	ldr	r3, [pc, #832]	@ (8004988 <main+0x850>)
 8004648:	00a2      	lsls	r2, r4, #2
 800464a:	50d1      	str	r1, [r2, r3]
			}
			sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 800464c:	4bcd      	ldr	r3, [pc, #820]	@ (8004984 <main+0x84c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d804      	bhi.n	800465e <main+0x526>
 8004654:	4bcb      	ldr	r3, [pc, #812]	@ (8004984 <main+0x84c>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	e000      	b.n	8004660 <main+0x528>
 800465e:	2201      	movs	r2, #1
 8004660:	4bc8      	ldr	r3, [pc, #800]	@ (8004984 <main+0x84c>)
 8004662:	701a      	strb	r2, [r3, #0]
			sensor_refresh_flag = 0;
 8004664:	4bcb      	ldr	r3, [pc, #812]	@ (8004994 <main+0x85c>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 800466a:	21f8      	movs	r1, #248	@ 0xf8
 800466c:	187b      	adds	r3, r7, r1
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8004672:	187b      	adds	r3, r7, r1
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8004678:	23fa      	movs	r3, #250	@ 0xfa
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	2200      	movs	r2, #0
 800467e:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8004680:	1d7b      	adds	r3, r7, #5
 8004682:	33ff      	adds	r3, #255	@ 0xff
 8004684:	2200      	movs	r2, #0
 8004686:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8004688:	4bbf      	ldr	r3, [pc, #764]	@ (8004988 <main+0x850>)
 800468a:	681c      	ldr	r4, [r3, #0]
 800468c:	1c7b      	adds	r3, r7, #1
 800468e:	33ff      	adds	r3, #255	@ 0xff
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	0018      	movs	r0, r3
 8004694:	f7fc fef4 	bl	8001480 <__aeabi_i2f>
 8004698:	1c03      	adds	r3, r0, #0
 800469a:	1c19      	adds	r1, r3, #0
 800469c:	1c20      	adds	r0, r4, #0
 800469e:	f7fb ff2f 	bl	8000500 <__aeabi_fcmpge>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d10e      	bne.n	80046c4 <main+0x58c>
 80046a6:	4bb8      	ldr	r3, [pc, #736]	@ (8004988 <main+0x850>)
 80046a8:	685c      	ldr	r4, [r3, #4]
 80046aa:	1c7b      	adds	r3, r7, #1
 80046ac:	33ff      	adds	r3, #255	@ 0xff
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fc fee5 	bl	8001480 <__aeabi_i2f>
 80046b6:	1c03      	adds	r3, r0, #0
 80046b8:	1c19      	adds	r1, r3, #0
 80046ba:	1c20      	adds	r0, r4, #0
 80046bc:	f7fb ff20 	bl	8000500 <__aeabi_fcmpge>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d010      	beq.n	80046e6 <main+0x5ae>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 80046c4:	4bb4      	ldr	r3, [pc, #720]	@ (8004998 <main+0x860>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	2101      	movs	r1, #1
 80046ca:	0018      	movs	r0, r3
 80046cc:	f002 fd47 	bl	800715e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 80046d0:	2380      	movs	r3, #128	@ 0x80
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	48b1      	ldr	r0, [pc, #708]	@ (800499c <main+0x864>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	0019      	movs	r1, r3
 80046da:	f002 fd40 	bl	800715e <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 80046de:	4bb0      	ldr	r3, [pc, #704]	@ (80049a0 <main+0x868>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e002      	b.n	80046ec <main+0x5b4>
		}
		else {
			triac_temp_ctrl = 1;
 80046e6:	4bae      	ldr	r3, [pc, #696]	@ (80049a0 <main+0x868>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 80046ec:	4bac      	ldr	r3, [pc, #688]	@ (80049a0 <main+0x868>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d163      	bne.n	80047bc <main+0x684>
			if(BTN1_READ() == 0) {
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4aaa      	ldr	r2, [pc, #680]	@ (80049a4 <main+0x86c>)
 80046fa:	0019      	movs	r1, r3
 80046fc:	0010      	movs	r0, r2
 80046fe:	f002 fd11 	bl	8007124 <HAL_GPIO_ReadPin>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d112      	bne.n	800472c <main+0x5f4>
				if(BTN1_READ() == 0) {
 8004706:	2380      	movs	r3, #128	@ 0x80
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4aa6      	ldr	r2, [pc, #664]	@ (80049a4 <main+0x86c>)
 800470c:	0019      	movs	r1, r3
 800470e:	0010      	movs	r0, r2
 8004710:	f002 fd08 	bl	8007124 <HAL_GPIO_ReadPin>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d164      	bne.n	80047e2 <main+0x6aa>
					mode = 1;
 8004718:	4ba3      	ldr	r3, [pc, #652]	@ (80049a8 <main+0x870>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
					triac_time = 4.5; /* 130V */
 800471e:	4ba3      	ldr	r3, [pc, #652]	@ (80049ac <main+0x874>)
 8004720:	4aa3      	ldr	r2, [pc, #652]	@ (80049b0 <main+0x878>)
 8004722:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8004724:	4ba3      	ldr	r3, [pc, #652]	@ (80049b4 <main+0x87c>)
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e05a      	b.n	80047e2 <main+0x6aa>
				}
			}
			else if(BTN2_READ() == 0) {
 800472c:	2380      	movs	r3, #128	@ 0x80
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4a9c      	ldr	r2, [pc, #624]	@ (80049a4 <main+0x86c>)
 8004732:	0019      	movs	r1, r3
 8004734:	0010      	movs	r0, r2
 8004736:	f002 fcf5 	bl	8007124 <HAL_GPIO_ReadPin>
 800473a:	1e03      	subs	r3, r0, #0
 800473c:	d112      	bne.n	8004764 <main+0x62c>
				if(BTN2_READ() == 0) {
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4a98      	ldr	r2, [pc, #608]	@ (80049a4 <main+0x86c>)
 8004744:	0019      	movs	r1, r3
 8004746:	0010      	movs	r0, r2
 8004748:	f002 fcec 	bl	8007124 <HAL_GPIO_ReadPin>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d148      	bne.n	80047e2 <main+0x6aa>
					mode = 2;
 8004750:	4b95      	ldr	r3, [pc, #596]	@ (80049a8 <main+0x870>)
 8004752:	2202      	movs	r2, #2
 8004754:	701a      	strb	r2, [r3, #0]
					triac_time = 3.37; /* 170V */
 8004756:	4b95      	ldr	r3, [pc, #596]	@ (80049ac <main+0x874>)
 8004758:	4a97      	ldr	r2, [pc, #604]	@ (80049b8 <main+0x880>)
 800475a:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800475c:	4b95      	ldr	r3, [pc, #596]	@ (80049b4 <main+0x87c>)
 800475e:	2202      	movs	r2, #2
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e03e      	b.n	80047e2 <main+0x6aa>
				}
			}
			else if(BTN3_READ() == 0) {
 8004764:	4b8f      	ldr	r3, [pc, #572]	@ (80049a4 <main+0x86c>)
 8004766:	2180      	movs	r1, #128	@ 0x80
 8004768:	0018      	movs	r0, r3
 800476a:	f002 fcdb 	bl	8007124 <HAL_GPIO_ReadPin>
 800476e:	1e03      	subs	r3, r0, #0
 8004770:	d110      	bne.n	8004794 <main+0x65c>
				if(BTN3_READ() == 0) {
 8004772:	4b8c      	ldr	r3, [pc, #560]	@ (80049a4 <main+0x86c>)
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	0018      	movs	r0, r3
 8004778:	f002 fcd4 	bl	8007124 <HAL_GPIO_ReadPin>
 800477c:	1e03      	subs	r3, r0, #0
 800477e:	d130      	bne.n	80047e2 <main+0x6aa>
					mode = 3;
 8004780:	4b89      	ldr	r3, [pc, #548]	@ (80049a8 <main+0x870>)
 8004782:	2203      	movs	r2, #3
 8004784:	701a      	strb	r2, [r3, #0]
					triac_time = 2.4; /* 205V */
 8004786:	4b89      	ldr	r3, [pc, #548]	@ (80049ac <main+0x874>)
 8004788:	4a8c      	ldr	r2, [pc, #560]	@ (80049bc <main+0x884>)
 800478a:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800478c:	4b89      	ldr	r3, [pc, #548]	@ (80049b4 <main+0x87c>)
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e026      	b.n	80047e2 <main+0x6aa>
				}
			}
			else {
				mode = 0;
 8004794:	4b84      	ldr	r3, [pc, #528]	@ (80049a8 <main+0x870>)
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 800479a:	4b86      	ldr	r3, [pc, #536]	@ (80049b4 <main+0x87c>)
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 80047a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004998 <main+0x860>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	2101      	movs	r1, #1
 80047a6:	0018      	movs	r0, r3
 80047a8:	f002 fcd9 	bl	800715e <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	019b      	lsls	r3, r3, #6
 80047b0:	487a      	ldr	r0, [pc, #488]	@ (800499c <main+0x864>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	0019      	movs	r1, r3
 80047b6:	f002 fcd2 	bl	800715e <HAL_GPIO_WritePin>
 80047ba:	e012      	b.n	80047e2 <main+0x6aa>
			}
		}
		else {
			mode = 0;
 80047bc:	4b7a      	ldr	r3, [pc, #488]	@ (80049a8 <main+0x870>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 80047c2:	4b7c      	ldr	r3, [pc, #496]	@ (80049b4 <main+0x87c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 80047c8:	4b73      	ldr	r3, [pc, #460]	@ (8004998 <main+0x860>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	2101      	movs	r1, #1
 80047ce:	0018      	movs	r0, r3
 80047d0:	f002 fcc5 	bl	800715e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	019b      	lsls	r3, r3, #6
 80047d8:	4870      	ldr	r0, [pc, #448]	@ (800499c <main+0x864>)
 80047da:	2200      	movs	r2, #0
 80047dc:	0019      	movs	r1, r3
 80047de:	f002 fcbe 	bl	800715e <HAL_GPIO_WritePin>
		}

		/*A*/
		/* GSM stuff */
		/*########################################################################*/
		if(gsm_status != GSM_WAIT) {
 80047e2:	4b77      	ldr	r3, [pc, #476]	@ (80049c0 <main+0x888>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d100      	bne.n	80047ee <main+0x6b6>
 80047ec:	e127      	b.n	8004a3e <main+0x906>
			if(upload_running) {
 80047ee:	4b75      	ldr	r3, [pc, #468]	@ (80049c4 <main+0x88c>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d100      	bne.n	80047f8 <main+0x6c0>
 80047f6:	e11d      	b.n	8004a34 <main+0x8fc>
				if(gsm_status == GSM_OK || gsm_status == GSM_NOK) {
 80047f8:	4b71      	ldr	r3, [pc, #452]	@ (80049c0 <main+0x888>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <main+0x6d4>
 8004802:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <main+0x888>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b63      	cmp	r3, #99	@ 0x63
 800480a:	d115      	bne.n	8004838 <main+0x700>
					if(gsm_cmd_step >= GSM_CMD_LAST_IDX) {
 800480c:	4b6e      	ldr	r3, [pc, #440]	@ (80049c8 <main+0x890>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d90b      	bls.n	800482c <main+0x6f4>
						upload_flag = 1; /* successful upload */
 8004814:	4b6d      	ldr	r3, [pc, #436]	@ (80049cc <main+0x894>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
						led_blink();
 800481a:	f7ff f8b7 	bl	800398c <led_blink>
						gsm_cmd_step = 0; /* prep for next upload */
 800481e:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <main+0x890>)
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
						upload_running = 0; /* wait for next time slot */
 8004824:	4b67      	ldr	r3, [pc, #412]	@ (80049c4 <main+0x88c>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e005      	b.n	8004838 <main+0x700>
					}
					else
						gsm_cmd_step += 1;
 800482c:	4b66      	ldr	r3, [pc, #408]	@ (80049c8 <main+0x890>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b64      	ldr	r3, [pc, #400]	@ (80049c8 <main+0x890>)
 8004836:	701a      	strb	r2, [r3, #0]
				}
//				else if(gsm_status == GSM_NOK) {
//					gsm_cmd_step = 0;
//					upload_running = 0; /* cancel upload seq */
//				}
				switch(gsm_cmd_step) {
 8004838:	4b63      	ldr	r3, [pc, #396]	@ (80049c8 <main+0x890>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b0e      	cmp	r3, #14
 800483e:	d900      	bls.n	8004842 <main+0x70a>
 8004840:	e0fd      	b.n	8004a3e <main+0x906>
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	4b62      	ldr	r3, [pc, #392]	@ (80049d0 <main+0x898>)
 8004846:	18d3      	adds	r3, r2, r3
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	469f      	mov	pc, r3
				case 0:
					break;
				case 1:
					gsm_cmd("AT+NETCLOSE","OK", GSM_WAIT_TIME_LOW);
 800484c:	23fa      	movs	r3, #250	@ 0xfa
 800484e:	005a      	lsls	r2, r3, #1
 8004850:	4960      	ldr	r1, [pc, #384]	@ (80049d4 <main+0x89c>)
 8004852:	4b61      	ldr	r3, [pc, #388]	@ (80049d8 <main+0x8a0>)
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff f96d 	bl	8003b34 <gsm_cmd>
					break;
 800485a:	e0f0      	b.n	8004a3e <main+0x906>
				case 2:
					gsm_cmd("AT+CCHMODE=1","OK", GSM_WAIT_TIME_LOW);
 800485c:	23fa      	movs	r3, #250	@ 0xfa
 800485e:	005a      	lsls	r2, r3, #1
 8004860:	495c      	ldr	r1, [pc, #368]	@ (80049d4 <main+0x89c>)
 8004862:	4b5e      	ldr	r3, [pc, #376]	@ (80049dc <main+0x8a4>)
 8004864:	0018      	movs	r0, r3
 8004866:	f7ff f965 	bl	8003b34 <gsm_cmd>
					break;
 800486a:	e0e8      	b.n	8004a3e <main+0x906>
				case 3:
					gsm_cmd("AT+CCHSET=1","OK", GSM_WAIT_TIME_LOW);
 800486c:	23fa      	movs	r3, #250	@ 0xfa
 800486e:	005a      	lsls	r2, r3, #1
 8004870:	4958      	ldr	r1, [pc, #352]	@ (80049d4 <main+0x89c>)
 8004872:	4b5b      	ldr	r3, [pc, #364]	@ (80049e0 <main+0x8a8>)
 8004874:	0018      	movs	r0, r3
 8004876:	f7ff f95d 	bl	8003b34 <gsm_cmd>
					break;
 800487a:	e0e0      	b.n	8004a3e <main+0x906>
				case 4:
					gsm_cmd("AT+CCHSTART","OK", GSM_WAIT_TIME_LOW);
 800487c:	23fa      	movs	r3, #250	@ 0xfa
 800487e:	005a      	lsls	r2, r3, #1
 8004880:	4954      	ldr	r1, [pc, #336]	@ (80049d4 <main+0x89c>)
 8004882:	4b58      	ldr	r3, [pc, #352]	@ (80049e4 <main+0x8ac>)
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff f955 	bl	8003b34 <gsm_cmd>
					break;
 800488a:	e0d8      	b.n	8004a3e <main+0x906>
				case 5:
					gsm_cmd("AT+CCHSSLCFG=0,0","OK",GSM_WAIT_TIME_LOW);
 800488c:	23fa      	movs	r3, #250	@ 0xfa
 800488e:	005a      	lsls	r2, r3, #1
 8004890:	4950      	ldr	r1, [pc, #320]	@ (80049d4 <main+0x89c>)
 8004892:	4b55      	ldr	r3, [pc, #340]	@ (80049e8 <main+0x8b0>)
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff f94d 	bl	8003b34 <gsm_cmd>
					break;
 800489a:	e0d0      	b.n	8004a3e <main+0x906>
				case 6:
					gsm_cmd("AT+CSOCKSETPN=1","OK", GSM_WAIT_TIME_LOW);
 800489c:	23fa      	movs	r3, #250	@ 0xfa
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	494c      	ldr	r1, [pc, #304]	@ (80049d4 <main+0x89c>)
 80048a2:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <main+0x8b4>)
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff f945 	bl	8003b34 <gsm_cmd>
					break;
 80048aa:	e0c8      	b.n	8004a3e <main+0x906>
				case 7:
					gsm_cmd("AT+CIPMODE=0","OK", GSM_WAIT_TIME_LOW);
 80048ac:	23fa      	movs	r3, #250	@ 0xfa
 80048ae:	005a      	lsls	r2, r3, #1
 80048b0:	4948      	ldr	r1, [pc, #288]	@ (80049d4 <main+0x89c>)
 80048b2:	4b4f      	ldr	r3, [pc, #316]	@ (80049f0 <main+0x8b8>)
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7ff f93d 	bl	8003b34 <gsm_cmd>
					break;
 80048ba:	e0c0      	b.n	8004a3e <main+0x906>
				case 8:
					gsm_cmd("AT+NETOPEN","OK", GSM_WAIT_TIME_LOW);
 80048bc:	23fa      	movs	r3, #250	@ 0xfa
 80048be:	005a      	lsls	r2, r3, #1
 80048c0:	4944      	ldr	r1, [pc, #272]	@ (80049d4 <main+0x89c>)
 80048c2:	4b4c      	ldr	r3, [pc, #304]	@ (80049f4 <main+0x8bc>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff f935 	bl	8003b34 <gsm_cmd>
					break;
 80048ca:	e0b8      	b.n	8004a3e <main+0x906>
				case 9:
					gsm_cmd("AT+CGATT=1","OK", GSM_WAIT_TIME_LOW);
 80048cc:	23fa      	movs	r3, #250	@ 0xfa
 80048ce:	005a      	lsls	r2, r3, #1
 80048d0:	4940      	ldr	r1, [pc, #256]	@ (80049d4 <main+0x89c>)
 80048d2:	4b49      	ldr	r3, [pc, #292]	@ (80049f8 <main+0x8c0>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff f92d 	bl	8003b34 <gsm_cmd>
					break;
 80048da:	e0b0      	b.n	8004a3e <main+0x906>
				case 10:
					gsm_cmd("AT+CGACT=1,1","OK", GSM_WAIT_TIME_LOW);
 80048dc:	23fa      	movs	r3, #250	@ 0xfa
 80048de:	005a      	lsls	r2, r3, #1
 80048e0:	493c      	ldr	r1, [pc, #240]	@ (80049d4 <main+0x89c>)
 80048e2:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <main+0x8c4>)
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff f925 	bl	8003b34 <gsm_cmd>
					break;
 80048ea:	e0a8      	b.n	8004a3e <main+0x906>
				case 11:
					gsm_cmd("AT+IPADDR","OK", GSM_WAIT_TIME_MED);
 80048ec:	4a44      	ldr	r2, [pc, #272]	@ (8004a00 <main+0x8c8>)
 80048ee:	4939      	ldr	r1, [pc, #228]	@ (80049d4 <main+0x89c>)
 80048f0:	4b44      	ldr	r3, [pc, #272]	@ (8004a04 <main+0x8cc>)
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff f91e 	bl	8003b34 <gsm_cmd>
					break;
 80048f8:	e0a1      	b.n	8004a3e <main+0x906>
				case 12:
					gsm_cmd("AT+CCHOPEN=0,\"api.thingspeak.com\",443,2","CONNECT 115200", GSM_WAIT_TIME_MED);
 80048fa:	4a41      	ldr	r2, [pc, #260]	@ (8004a00 <main+0x8c8>)
 80048fc:	4942      	ldr	r1, [pc, #264]	@ (8004a08 <main+0x8d0>)
 80048fe:	4b43      	ldr	r3, [pc, #268]	@ (8004a0c <main+0x8d4>)
 8004900:	0018      	movs	r0, r3
 8004902:	f7ff f917 	bl	8003b34 <gsm_cmd>
					break;
 8004906:	e09a      	b.n	8004a3e <main+0x906>
				case 13:
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
							"HTTP/1.1\r\nHost: api.thingspeak.com\r\n", \
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004908:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <main+0x850>)
 800490a:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 800490c:	1c18      	adds	r0, r3, #0
 800490e:	f7fc fd97 	bl	8001440 <__aeabi_f2iz>
 8004912:	4682      	mov	sl, r0
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004914:	4b1c      	ldr	r3, [pc, #112]	@ (8004988 <main+0x850>)
 8004916:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 8004918:	1c18      	adds	r0, r3, #0
 800491a:	f7fc fd91 	bl	8001440 <__aeabi_f2iz>
 800491e:	4680      	mov	r8, r0
 8004920:	4b21      	ldr	r3, [pc, #132]	@ (80049a8 <main+0x870>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	469b      	mov	fp, r3
 8004926:	4b3a      	ldr	r3, [pc, #232]	@ (8004a10 <main+0x8d8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1c18      	adds	r0, r3, #0
 800492c:	f7fe fdde 	bl	80034ec <__aeabi_f2d>
 8004930:	0004      	movs	r4, r0
 8004932:	000d      	movs	r5, r1
 8004934:	4b37      	ldr	r3, [pc, #220]	@ (8004a14 <main+0x8dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	1c18      	adds	r0, r3, #0
 800493a:	f7fc fd81 	bl	8001440 <__aeabi_f2iz>
 800493e:	4681      	mov	r9, r0
 8004940:	4b35      	ldr	r3, [pc, #212]	@ (8004a18 <main+0x8e0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1c18      	adds	r0, r3, #0
 8004946:	f7fe fdd1 	bl	80034ec <__aeabi_f2d>
 800494a:	0002      	movs	r2, r0
 800494c:	000b      	movs	r3, r1
 800494e:	211c      	movs	r1, #28
 8004950:	187e      	adds	r6, r7, r1
 8004952:	4932      	ldr	r1, [pc, #200]	@ (8004a1c <main+0x8e4>)
 8004954:	2030      	movs	r0, #48	@ 0x30
 8004956:	1838      	adds	r0, r7, r0
 8004958:	9206      	str	r2, [sp, #24]
 800495a:	9307      	str	r3, [sp, #28]
 800495c:	464b      	mov	r3, r9
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	9402      	str	r4, [sp, #8]
 8004962:	9503      	str	r5, [sp, #12]
 8004964:	465b      	mov	r3, fp
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	4643      	mov	r3, r8
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	4653      	mov	r3, sl
 800496e:	0032      	movs	r2, r6
 8004970:	f007 fc44 	bl	800c1fc <siprintf>
					 * kwh
					 * temp 1
					 * temp 2
					 *
					 */
					gsm_cmd(content_string, "200 OK", GSM_WAIT_TIME_MED);
 8004974:	4a22      	ldr	r2, [pc, #136]	@ (8004a00 <main+0x8c8>)
 8004976:	492a      	ldr	r1, [pc, #168]	@ (8004a20 <main+0x8e8>)
 8004978:	2030      	movs	r0, #48	@ 0x30
 800497a:	183b      	adds	r3, r7, r0
 800497c:	0018      	movs	r0, r3
 800497e:	f7ff f8d9 	bl	8003b34 <gsm_cmd>
					break;
 8004982:	e05c      	b.n	8004a3e <main+0x906>
 8004984:	2000052d 	.word	0x2000052d
 8004988:	20000568 	.word	0x20000568
 800498c:	c2c60000 	.word	0xc2c60000
 8004990:	3fd00000 	.word	0x3fd00000
 8004994:	2000052e 	.word	0x2000052e
 8004998:	50001400 	.word	0x50001400
 800499c:	50000800 	.word	0x50000800
 80049a0:	20000558 	.word	0x20000558
 80049a4:	50000400 	.word	0x50000400
 80049a8:	20000565 	.word	0x20000565
 80049ac:	20000560 	.word	0x20000560
 80049b0:	40900000 	.word	0x40900000
 80049b4:	20000564 	.word	0x20000564
 80049b8:	4057ae14 	.word	0x4057ae14
 80049bc:	4019999a 	.word	0x4019999a
 80049c0:	20000576 	.word	0x20000576
 80049c4:	200005f8 	.word	0x200005f8
 80049c8:	2000057c 	.word	0x2000057c
 80049cc:	200005f9 	.word	0x200005f9
 80049d0:	0800e844 	.word	0x0800e844
 80049d4:	0800e5f4 	.word	0x0800e5f4
 80049d8:	0800e5f8 	.word	0x0800e5f8
 80049dc:	0800e604 	.word	0x0800e604
 80049e0:	0800e614 	.word	0x0800e614
 80049e4:	0800e620 	.word	0x0800e620
 80049e8:	0800e62c 	.word	0x0800e62c
 80049ec:	0800e640 	.word	0x0800e640
 80049f0:	0800e650 	.word	0x0800e650
 80049f4:	0800e660 	.word	0x0800e660
 80049f8:	0800e66c 	.word	0x0800e66c
 80049fc:	0800e678 	.word	0x0800e678
 8004a00:	00002710 	.word	0x00002710
 8004a04:	0800e688 	.word	0x0800e688
 8004a08:	0800e694 	.word	0x0800e694
 8004a0c:	0800e6a4 	.word	0x0800e6a4
 8004a10:	20000208 	.word	0x20000208
 8004a14:	20000204 	.word	0x20000204
 8004a18:	20000554 	.word	0x20000554
 8004a1c:	0800e6cc 	.word	0x0800e6cc
 8004a20:	0800e748 	.word	0x0800e748
				case 14:
					gsm_cmd("AT+CIPCLOSE=0", "OK", GSM_WAIT_TIME_LOW);
 8004a24:	23fa      	movs	r3, #250	@ 0xfa
 8004a26:	005a      	lsls	r2, r3, #1
 8004a28:	4916      	ldr	r1, [pc, #88]	@ (8004a84 <main+0x94c>)
 8004a2a:	4b17      	ldr	r3, [pc, #92]	@ (8004a88 <main+0x950>)
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff f881 	bl	8003b34 <gsm_cmd>
					break;
 8004a32:	e004      	b.n	8004a3e <main+0x906>
				default:
				}
			}
			else gsm_cmd_step = 0;
 8004a34:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <main+0x954>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e000      	b.n	8004a3e <main+0x906>
					break;
 8004a3c:	46c0      	nop			@ (mov r8, r8)
		}
		if(sec % 30 == 0 && sec != 0) {
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <main+0x958>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	211e      	movs	r1, #30
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7fb fbfd 	bl	8000244 <__aeabi_uidivmod>
 8004a4a:	000b      	movs	r3, r1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d112      	bne.n	8004a78 <main+0x940>
 8004a52:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <main+0x958>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00e      	beq.n	8004a78 <main+0x940>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <main+0x95c>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10e      	bne.n	8004a80 <main+0x948>
 8004a62:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <main+0x960>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <main+0x948>
				upload_running = 1; /* start uploading */
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <main+0x95c>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
				gsm_cmd_step = 0; /* with the first command */
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <main+0x954>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004a76:	e003      	b.n	8004a80 <main+0x948>
			}
		} else upload_flag = 0;
 8004a78:	4b07      	ldr	r3, [pc, #28]	@ (8004a98 <main+0x960>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e44c      	b.n	800431a <main+0x1e2>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004a80:	46c0      	nop			@ (mov r8, r8)
		if(kwh_update_flag == 1) {
 8004a82:	e44a      	b.n	800431a <main+0x1e2>
 8004a84:	0800e5f4 	.word	0x0800e5f4
 8004a88:	0800e750 	.word	0x0800e750
 8004a8c:	2000057c 	.word	0x2000057c
 8004a90:	20000534 	.word	0x20000534
 8004a94:	200005f8 	.word	0x200005f8
 8004a98:	200005f9 	.word	0x200005f9

08004a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b093      	sub	sp, #76	@ 0x4c
 8004aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aa2:	2414      	movs	r4, #20
 8004aa4:	193b      	adds	r3, r7, r4
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	2334      	movs	r3, #52	@ 0x34
 8004aaa:	001a      	movs	r2, r3
 8004aac:	2100      	movs	r1, #0
 8004aae:	f007 fc13 	bl	800c2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2100      	movs	r1, #0
 8004abc:	f007 fc0c 	bl	800c2d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f003 fd07 	bl	80084d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004aca:	193b      	adds	r3, r7, r4
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ad0:	193b      	adds	r3, r7, r4
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	0052      	lsls	r2, r2, #1
 8004ad6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004ad8:	0021      	movs	r1, r4
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2240      	movs	r2, #64	@ 0x40
 8004ae4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	2202      	movs	r2, #2
 8004aea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	2202      	movs	r2, #2
 8004af0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004af2:	187b      	adds	r3, r7, r1
 8004af4:	2200      	movs	r2, #0
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8004af8:	187b      	adds	r3, r7, r1
 8004afa:	220c      	movs	r2, #12
 8004afc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	22b0      	movs	r2, #176	@ 0xb0
 8004b02:	0352      	lsls	r2, r2, #13
 8004b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8004b06:	187b      	adds	r3, r7, r1
 8004b08:	22a0      	movs	r2, #160	@ 0xa0
 8004b0a:	0612      	lsls	r2, r2, #24
 8004b0c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	0018      	movs	r0, r3
 8004b12:	f003 fd2d 	bl	8008570 <HAL_RCC_OscConfig>
 8004b16:	1e03      	subs	r3, r0, #0
 8004b18:	d001      	beq.n	8004b1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004b1a:	f000 fad5 	bl	80050c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	2207      	movs	r2, #7
 8004b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	2202      	movs	r2, #2
 8004b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	2200      	movs	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	2101      	movs	r1, #1
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f004 f828 	bl	8008b90 <HAL_RCC_ClockConfig>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d001      	beq.n	8004b48 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004b44:	f000 fac0 	bl	80050c8 <Error_Handler>
  }
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b013      	add	sp, #76	@ 0x4c
 8004b4e:	bd90      	pop	{r4, r7, pc}

08004b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	0018      	movs	r0, r3
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f007 fbba 	bl	800c2d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004b64:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b66:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <MX_ADC1_Init+0x114>)
 8004b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b6c:	2280      	movs	r2, #128	@ 0x80
 8004b6e:	0352      	lsls	r2, r2, #13
 8004b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b78:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b7e:	4b38      	ldr	r3, [pc, #224]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b80:	2280      	movs	r2, #128	@ 0x80
 8004b82:	0392      	lsls	r2, r2, #14
 8004b84:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004b86:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b88:	2208      	movs	r2, #8
 8004b8a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004b8c:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004b92:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004b98:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8004b9e:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bac:	4b2c      	ldr	r3, [pc, #176]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004bb8:	4b29      	ldr	r3, [pc, #164]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bba:	222c      	movs	r2, #44	@ 0x2c
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004bc0:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004bc6:	4b26      	ldr	r3, [pc, #152]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004bcc:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004bd2:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bd4:	223c      	movs	r2, #60	@ 0x3c
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004bda:	4b21      	ldr	r3, [pc, #132]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004be0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004be2:	0018      	movs	r0, r3
 8004be4:	f001 f876 	bl	8005cd4 <HAL_ADC_Init>
 8004be8:	1e03      	subs	r3, r0, #0
 8004bea:	d001      	beq.n	8004bf0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004bec:	f000 fa6c 	bl	80050c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <MX_ADC1_Init+0x118>)
 8004bf4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004bf6:	1d3b      	adds	r3, r7, #4
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004bfc:	1d3b      	adds	r3, r7, #4
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c02:	1d3a      	adds	r2, r7, #4
 8004c04:	4b16      	ldr	r3, [pc, #88]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004c06:	0011      	movs	r1, r2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f001 fb33 	bl	8006274 <HAL_ADC_ConfigChannel>
 8004c0e:	1e03      	subs	r3, r0, #0
 8004c10:	d001      	beq.n	8004c16 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8004c12:	f000 fa59 	bl	80050c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	4a14      	ldr	r2, [pc, #80]	@ (8004c6c <MX_ADC1_Init+0x11c>)
 8004c1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	2204      	movs	r2, #4
 8004c20:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c22:	1d3a      	adds	r2, r7, #4
 8004c24:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f001 fb23 	bl	8006274 <HAL_ADC_ConfigChannel>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8004c32:	f000 fa49 	bl	80050c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004c36:	1d3b      	adds	r3, r7, #4
 8004c38:	4a0d      	ldr	r2, [pc, #52]	@ (8004c70 <MX_ADC1_Init+0x120>)
 8004c3a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	2208      	movs	r2, #8
 8004c40:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c42:	1d3a      	adds	r2, r7, #4
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <MX_ADC1_Init+0x110>)
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f001 fb13 	bl	8006274 <HAL_ADC_ConfigChannel>
 8004c4e:	1e03      	subs	r3, r0, #0
 8004c50:	d001      	beq.n	8004c56 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8004c52:	f000 fa39 	bl	80050c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	20000210 	.word	0x20000210
 8004c64:	40012400 	.word	0x40012400
 8004c68:	08000004 	.word	0x08000004
 8004c6c:	0c000008 	.word	0x0c000008
 8004c70:	b4002000 	.word	0xb4002000

08004c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <MX_I2C1_Init+0x78>)
 8004c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c80:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <MX_I2C1_Init+0x7c>)
 8004c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c84:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c90:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004c96:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ca2:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f002 faa5 	bl	8007200 <HAL_I2C_Init>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004cba:	f000 fa05 	bl	80050c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f003 fb70 	bl	80083a8 <HAL_I2CEx_ConfigAnalogFilter>
 8004cc8:	1e03      	subs	r3, r0, #0
 8004cca:	d001      	beq.n	8004cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004ccc:	f000 f9fc 	bl	80050c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <MX_I2C1_Init+0x74>)
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f003 fbb3 	bl	8008440 <HAL_I2CEx_ConfigDigitalFilter>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004cde:	f000 f9f3 	bl	80050c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200002d0 	.word	0x200002d0
 8004cec:	40005400 	.word	0x40005400
 8004cf0:	0060112f 	.word	0x0060112f

08004cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <MX_SPI2_Init+0x7c>)
 8004cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d00:	2282      	movs	r2, #130	@ 0x82
 8004d02:	0052      	lsls	r2, r2, #1
 8004d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004d06:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	00d2      	lsls	r2, r2, #3
 8004d0c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004d0e:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d10:	22f0      	movs	r2, #240	@ 0xf0
 8004d12:	0112      	lsls	r2, r2, #4
 8004d14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d24:	2280      	movs	r2, #128	@ 0x80
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d30:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d44:	2207      	movs	r2, #7
 8004d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d48:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d4e:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d50:	2208      	movs	r2, #8
 8004d52:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <MX_SPI2_Init+0x78>)
 8004d56:	0018      	movs	r0, r3
 8004d58:	f004 f9f8 	bl	800914c <HAL_SPI_Init>
 8004d5c:	1e03      	subs	r3, r0, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004d60:	f000 f9b2 	bl	80050c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	20000324 	.word	0x20000324
 8004d70:	40003800 	.word	0x40003800

08004d74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004d78:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d7a:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <MX_TIM16_Init+0x48>)
 8004d7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d80:	2220      	movs	r2, #32
 8004d82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d8c:	2264      	movs	r2, #100	@ 0x64
 8004d8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d90:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004d96:	4b08      	ldr	r3, [pc, #32]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004da2:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <MX_TIM16_Init+0x44>)
 8004da4:	0018      	movs	r0, r3
 8004da6:	f004 ff91 	bl	8009ccc <HAL_TIM_Base_Init>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004dae:	f000 f98b 	bl	80050c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000388 	.word	0x20000388
 8004dbc:	40014400 	.word	0x40014400

08004dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004dc4:	4b16      	ldr	r3, [pc, #88]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dc6:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <MX_USART3_UART_Init+0x64>)
 8004dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004dca:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dcc:	22e1      	movs	r2, #225	@ 0xe1
 8004dce:	0252      	lsls	r2, r2, #9
 8004dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004de6:	220c      	movs	r2, #12
 8004de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e02:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <MX_USART3_UART_Init+0x60>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f005 f9d0 	bl	800a1b0 <HAL_UART_Init>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d001      	beq.n	8004e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004e14:	f000 f958 	bl	80050c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	200003d4 	.word	0x200003d4
 8004e24:	40004800 	.word	0x40004800

08004e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <MX_DMA_Init+0x48>)
 8004e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e32:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <MX_DMA_Init+0x48>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <MX_DMA_Init+0x48>)
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2100      	movs	r1, #0
 8004e4a:	2009      	movs	r0, #9
 8004e4c:	f001 fcb6 	bl	80067bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e50:	2009      	movs	r0, #9
 8004e52:	f001 fcc8 	bl	80067e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004e56:	2200      	movs	r2, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	200a      	movs	r0, #10
 8004e5c:	f001 fcae 	bl	80067bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004e60:	200a      	movs	r0, #10
 8004e62:	f001 fcc0 	bl	80067e6 <HAL_NVIC_EnableIRQ>

}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	40021000 	.word	0x40021000

08004e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b08b      	sub	sp, #44	@ 0x2c
 8004e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7a:	2414      	movs	r4, #20
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	0018      	movs	r0, r3
 8004e80:	2314      	movs	r3, #20
 8004e82:	001a      	movs	r2, r3
 8004e84:	2100      	movs	r1, #0
 8004e86:	f007 fa27 	bl	800c2d8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8e:	4b89      	ldr	r3, [pc, #548]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004e90:	2104      	movs	r1, #4
 8004e92:	430a      	orrs	r2, r1
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e96:	4b87      	ldr	r3, [pc, #540]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ea2:	4b84      	ldr	r3, [pc, #528]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	4b83      	ldr	r3, [pc, #524]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eae:	4b81      	ldr	r3, [pc, #516]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	4b7e      	ldr	r3, [pc, #504]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4b78      	ldr	r3, [pc, #480]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ed6:	4b77      	ldr	r3, [pc, #476]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ed8:	2102      	movs	r1, #2
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ede:	4b75      	ldr	r3, [pc, #468]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eea:	4b72      	ldr	r3, [pc, #456]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eee:	4b71      	ldr	r3, [pc, #452]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ef0:	2108      	movs	r1, #8
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80050b4 <MX_GPIO_Init+0x240>)
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	2208      	movs	r2, #8
 8004efc:	4013      	ands	r3, r2
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004f02:	23e0      	movs	r3, #224	@ 0xe0
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	486c      	ldr	r0, [pc, #432]	@ (80050b8 <MX_GPIO_Init+0x244>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	f002 f927 	bl	800715e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8004f10:	4b6a      	ldr	r3, [pc, #424]	@ (80050bc <MX_GPIO_Init+0x248>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	2103      	movs	r1, #3
 8004f16:	0018      	movs	r0, r3
 8004f18:	f002 f921 	bl	800715e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 8004f1c:	23e0      	movs	r3, #224	@ 0xe0
 8004f1e:	0059      	lsls	r1, r3, #1
 8004f20:	23a0      	movs	r3, #160	@ 0xa0
 8004f22:	05db      	lsls	r3, r3, #23
 8004f24:	2200      	movs	r2, #0
 8004f26:	0018      	movs	r0, r3
 8004f28:	f002 f919 	bl	800715e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 8004f2c:	2398      	movs	r3, #152	@ 0x98
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	4863      	ldr	r0, [pc, #396]	@ (80050c0 <MX_GPIO_Init+0x24c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	0019      	movs	r1, r3
 8004f36:	f002 f912 	bl	800715e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004f3a:	4b62      	ldr	r3, [pc, #392]	@ (80050c4 <MX_GPIO_Init+0x250>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2108      	movs	r1, #8
 8004f40:	0018      	movs	r0, r3
 8004f42:	f002 f90c 	bl	800715e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8004f46:	193b      	adds	r3, r7, r4
 8004f48:	22e0      	movs	r2, #224	@ 0xe0
 8004f4a:	0212      	lsls	r2, r2, #8
 8004f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	2201      	movs	r2, #1
 8004f52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	193b      	adds	r3, r7, r4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f60:	193b      	adds	r3, r7, r4
 8004f62:	4a55      	ldr	r2, [pc, #340]	@ (80050b8 <MX_GPIO_Init+0x244>)
 8004f64:	0019      	movs	r1, r3
 8004f66:	0010      	movs	r0, r2
 8004f68:	f001 ff78 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 8004f6c:	193b      	adds	r3, r7, r4
 8004f6e:	2203      	movs	r2, #3
 8004f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	2201      	movs	r2, #1
 8004f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	193b      	adds	r3, r7, r4
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7e:	193b      	adds	r3, r7, r4
 8004f80:	2200      	movs	r2, #0
 8004f82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004f84:	193b      	adds	r3, r7, r4
 8004f86:	4a4d      	ldr	r2, [pc, #308]	@ (80050bc <MX_GPIO_Init+0x248>)
 8004f88:	0019      	movs	r1, r3
 8004f8a:	0010      	movs	r0, r2
 8004f8c:	f001 ff66 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	2210      	movs	r2, #16
 8004f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f96:	193b      	adds	r3, r7, r4
 8004f98:	2284      	movs	r2, #132	@ 0x84
 8004f9a:	0392      	lsls	r2, r2, #14
 8004f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8004fa4:	193a      	adds	r2, r7, r4
 8004fa6:	23a0      	movs	r3, #160	@ 0xa0
 8004fa8:	05db      	lsls	r3, r3, #23
 8004faa:	0011      	movs	r1, r2
 8004fac:	0018      	movs	r0, r3
 8004fae:	f001 ff55 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	22e0      	movs	r2, #224	@ 0xe0
 8004fb8:	0052      	lsls	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbc:	000c      	movs	r4, r1
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	193b      	adds	r3, r7, r4
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	193b      	adds	r3, r7, r4
 8004fcc:	2200      	movs	r2, #0
 8004fce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd0:	193a      	adds	r2, r7, r4
 8004fd2:	23a0      	movs	r3, #160	@ 0xa0
 8004fd4:	05db      	lsls	r3, r3, #23
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f001 ff3f 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC1_Pin CS_TC2_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin;
 8004fde:	0021      	movs	r1, r4
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	2298      	movs	r2, #152	@ 0x98
 8004fe4:	0212      	lsls	r2, r2, #8
 8004fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fe8:	000c      	movs	r4, r1
 8004fea:	193b      	adds	r3, r7, r4
 8004fec:	2201      	movs	r2, #1
 8004fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff0:	193b      	adds	r3, r7, r4
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	193b      	adds	r3, r7, r4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffc:	193b      	adds	r3, r7, r4
 8004ffe:	4a30      	ldr	r2, [pc, #192]	@ (80050c0 <MX_GPIO_Init+0x24c>)
 8005000:	0019      	movs	r1, r3
 8005002:	0010      	movs	r0, r2
 8005004:	f001 ff2a 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 8005008:	0021      	movs	r1, r4
 800500a:	187b      	adds	r3, r7, r1
 800500c:	2240      	movs	r2, #64	@ 0x40
 800500e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005010:	187b      	adds	r3, r7, r1
 8005012:	2284      	movs	r2, #132	@ 0x84
 8005014:	0392      	lsls	r2, r2, #14
 8005016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	000c      	movs	r4, r1
 800501a:	193b      	adds	r3, r7, r4
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8005020:	193b      	adds	r3, r7, r4
 8005022:	4a25      	ldr	r2, [pc, #148]	@ (80050b8 <MX_GPIO_Init+0x244>)
 8005024:	0019      	movs	r1, r3
 8005026:	0010      	movs	r0, r2
 8005028:	f001 ff18 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800502c:	193b      	adds	r3, r7, r4
 800502e:	2208      	movs	r2, #8
 8005030:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005032:	193b      	adds	r3, r7, r4
 8005034:	2201      	movs	r2, #1
 8005036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	193b      	adds	r3, r7, r4
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503e:	193b      	adds	r3, r7, r4
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005044:	193b      	adds	r3, r7, r4
 8005046:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <MX_GPIO_Init+0x250>)
 8005048:	0019      	movs	r1, r3
 800504a:	0010      	movs	r0, r2
 800504c:	f001 ff06 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005050:	193b      	adds	r3, r7, r4
 8005052:	2208      	movs	r2, #8
 8005054:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2202      	movs	r2, #2
 800505a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	193b      	adds	r3, r7, r4
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2200      	movs	r2, #0
 8005066:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800506e:	193b      	adds	r3, r7, r4
 8005070:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <MX_GPIO_Init+0x24c>)
 8005072:	0019      	movs	r1, r3
 8005074:	0010      	movs	r0, r2
 8005076:	f001 fef1 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 800507a:	0021      	movs	r1, r4
 800507c:	187b      	adds	r3, r7, r1
 800507e:	22e0      	movs	r2, #224	@ 0xe0
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005084:	187b      	adds	r3, r7, r1
 8005086:	2200      	movs	r2, #0
 8005088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	187b      	adds	r3, r7, r1
 800508c:	2200      	movs	r2, #0
 800508e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005090:	187b      	adds	r3, r7, r1
 8005092:	4a0b      	ldr	r2, [pc, #44]	@ (80050c0 <MX_GPIO_Init+0x24c>)
 8005094:	0019      	movs	r1, r3
 8005096:	0010      	movs	r0, r2
 8005098:	f001 fee0 	bl	8006e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800509c:	2200      	movs	r2, #0
 800509e:	2100      	movs	r1, #0
 80050a0:	2007      	movs	r0, #7
 80050a2:	f001 fb8b 	bl	80067bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80050a6:	2007      	movs	r0, #7
 80050a8:	f001 fb9d 	bl	80067e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80050ac:	46c0      	nop			@ (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b00b      	add	sp, #44	@ 0x2c
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	50000800 	.word	0x50000800
 80050bc:	50001400 	.word	0x50001400
 80050c0:	50000400 	.word	0x50000400
 80050c4:	50000c00 	.word	0x50000c00

080050c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050cc:	b672      	cpsid	i
}
 80050ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	e7fd      	b.n	80050d0 <Error_Handler+0x8>

080050d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <HAL_MspInit+0x44>)
 80050dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050de:	4b0e      	ldr	r3, [pc, #56]	@ (8005118 <HAL_MspInit+0x44>)
 80050e0:	2101      	movs	r1, #1
 80050e2:	430a      	orrs	r2, r1
 80050e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80050e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <HAL_MspInit+0x44>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2201      	movs	r2, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <HAL_MspInit+0x44>)
 80050f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f6:	4b08      	ldr	r3, [pc, #32]	@ (8005118 <HAL_MspInit+0x44>)
 80050f8:	2180      	movs	r1, #128	@ 0x80
 80050fa:	0549      	lsls	r1, r1, #21
 80050fc:	430a      	orrs	r2, r1
 80050fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_MspInit+0x44>)
 8005102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	055b      	lsls	r3, r3, #21
 8005108:	4013      	ands	r3, r2
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	40021000 	.word	0x40021000

0800511c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b091      	sub	sp, #68	@ 0x44
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	232c      	movs	r3, #44	@ 0x2c
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	0018      	movs	r0, r3
 800512a:	2314      	movs	r3, #20
 800512c:	001a      	movs	r2, r3
 800512e:	2100      	movs	r1, #0
 8005130:	f007 f8d2 	bl	800c2d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005134:	2410      	movs	r4, #16
 8005136:	193b      	adds	r3, r7, r4
 8005138:	0018      	movs	r0, r3
 800513a:	231c      	movs	r3, #28
 800513c:	001a      	movs	r2, r3
 800513e:	2100      	movs	r1, #0
 8005140:	f007 f8ca 	bl	800c2d8 <memset>
  if(hadc->Instance==ADC1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3a      	ldr	r2, [pc, #232]	@ (8005234 <HAL_ADC_MspInit+0x118>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d16d      	bne.n	800522a <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800514e:	193b      	adds	r3, r7, r4
 8005150:	2280      	movs	r2, #128	@ 0x80
 8005152:	01d2      	lsls	r2, r2, #7
 8005154:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8005156:	193b      	adds	r3, r7, r4
 8005158:	2280      	movs	r2, #128	@ 0x80
 800515a:	05d2      	lsls	r2, r2, #23
 800515c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800515e:	193b      	adds	r3, r7, r4
 8005160:	0018      	movs	r0, r3
 8005162:	f003 febf 	bl	8008ee4 <HAL_RCCEx_PeriphCLKConfig>
 8005166:	1e03      	subs	r3, r0, #0
 8005168:	d001      	beq.n	800516e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800516a:	f7ff ffad 	bl	80050c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800516e:	4b32      	ldr	r3, [pc, #200]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 8005170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005172:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 8005174:	2180      	movs	r1, #128	@ 0x80
 8005176:	0349      	lsls	r1, r1, #13
 8005178:	430a      	orrs	r2, r1
 800517a:	641a      	str	r2, [r3, #64]	@ 0x40
 800517c:	4b2e      	ldr	r3, [pc, #184]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 800517e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	035b      	lsls	r3, r3, #13
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800518a:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 800518c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518e:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 8005190:	2101      	movs	r1, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34
 8005196:	4b28      	ldr	r3, [pc, #160]	@ (8005238 <HAL_ADC_MspInit+0x11c>)
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	2201      	movs	r2, #1
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051a2:	212c      	movs	r1, #44	@ 0x2c
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	220c      	movs	r2, #12
 80051a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	2203      	movs	r2, #3
 80051ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	2200      	movs	r2, #0
 80051b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b6:	187a      	adds	r2, r7, r1
 80051b8:	23a0      	movs	r3, #160	@ 0xa0
 80051ba:	05db      	lsls	r3, r3, #23
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f001 fe4c 	bl	8006e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80051c4:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_ADC_MspInit+0x124>)
 80051c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80051ca:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051cc:	2205      	movs	r2, #5
 80051ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051d0:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051d6:	4b19      	ldr	r3, [pc, #100]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051d8:	2200      	movs	r2, #0
 80051da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80051dc:	4b17      	ldr	r3, [pc, #92]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051e2:	4b16      	ldr	r3, [pc, #88]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051e4:	2280      	movs	r2, #128	@ 0x80
 80051e6:	0052      	lsls	r2, r2, #1
 80051e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80051ea:	4b14      	ldr	r3, [pc, #80]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051ec:	2280      	movs	r2, #128	@ 0x80
 80051ee:	00d2      	lsls	r2, r2, #3
 80051f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051f4:	2220      	movs	r2, #32
 80051f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80051f8:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_ADC_MspInit+0x120>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80051fe:	4b0f      	ldr	r3, [pc, #60]	@ (800523c <HAL_ADC_MspInit+0x120>)
 8005200:	0018      	movs	r0, r3
 8005202:	f001 fb0d 	bl	8006820 <HAL_DMA_Init>
 8005206:	1e03      	subs	r3, r0, #0
 8005208:	d001      	beq.n	800520e <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800520a:	f7ff ff5d 	bl	80050c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_ADC_MspInit+0x120>)
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_ADC_MspInit+0x120>)
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	200c      	movs	r0, #12
 8005220:	f001 facc 	bl	80067bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8005224:	200c      	movs	r0, #12
 8005226:	f001 fade 	bl	80067e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b011      	add	sp, #68	@ 0x44
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	40012400 	.word	0x40012400
 8005238:	40021000 	.word	0x40021000
 800523c:	20000274 	.word	0x20000274
 8005240:	40020008 	.word	0x40020008

08005244 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b091      	sub	sp, #68	@ 0x44
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	232c      	movs	r3, #44	@ 0x2c
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	0018      	movs	r0, r3
 8005252:	2314      	movs	r3, #20
 8005254:	001a      	movs	r2, r3
 8005256:	2100      	movs	r1, #0
 8005258:	f007 f83e 	bl	800c2d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800525c:	2410      	movs	r4, #16
 800525e:	193b      	adds	r3, r7, r4
 8005260:	0018      	movs	r0, r3
 8005262:	231c      	movs	r3, #28
 8005264:	001a      	movs	r2, r3
 8005266:	2100      	movs	r1, #0
 8005268:	f007 f836 	bl	800c2d8 <memset>
  if(hi2c->Instance==I2C1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_I2C_MspInit+0xbc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d13f      	bne.n	80052f6 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2220      	movs	r2, #32
 800527a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800527c:	193b      	adds	r3, r7, r4
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005282:	193b      	adds	r3, r7, r4
 8005284:	0018      	movs	r0, r3
 8005286:	f003 fe2d 	bl	8008ee4 <HAL_RCCEx_PeriphCLKConfig>
 800528a:	1e03      	subs	r3, r0, #0
 800528c:	d001      	beq.n	8005292 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800528e:	f7ff ff1b 	bl	80050c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005292:	4b1c      	ldr	r3, [pc, #112]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 8005294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005296:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 8005298:	2101      	movs	r1, #1
 800529a:	430a      	orrs	r2, r1
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34
 800529e:	4b19      	ldr	r3, [pc, #100]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 80052a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052aa:	212c      	movs	r1, #44	@ 0x2c
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	22c0      	movs	r2, #192	@ 0xc0
 80052b0:	00d2      	lsls	r2, r2, #3
 80052b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	2212      	movs	r2, #18
 80052b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	2200      	movs	r2, #0
 80052c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	2206      	movs	r2, #6
 80052ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	187a      	adds	r2, r7, r1
 80052ce:	23a0      	movs	r3, #160	@ 0xa0
 80052d0:	05db      	lsls	r3, r3, #23
 80052d2:	0011      	movs	r1, r2
 80052d4:	0018      	movs	r0, r3
 80052d6:	f001 fdc1 	bl	8006e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052da:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 80052dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	0389      	lsls	r1, r1, #14
 80052e4:	430a      	orrs	r2, r1
 80052e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_I2C_MspInit+0xc0>)
 80052ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	039b      	lsls	r3, r3, #14
 80052f0:	4013      	ands	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b011      	add	sp, #68	@ 0x44
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	40005400 	.word	0x40005400
 8005304:	40021000 	.word	0x40021000

08005308 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b08b      	sub	sp, #44	@ 0x2c
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005310:	2414      	movs	r4, #20
 8005312:	193b      	adds	r3, r7, r4
 8005314:	0018      	movs	r0, r3
 8005316:	2314      	movs	r3, #20
 8005318:	001a      	movs	r2, r3
 800531a:	2100      	movs	r1, #0
 800531c:	f006 ffdc 	bl	800c2d8 <memset>
  if(hspi->Instance==SPI2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	@ (80053c0 <HAL_SPI_MspInit+0xb8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d145      	bne.n	80053b6 <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800532a:	4b26      	ldr	r3, [pc, #152]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 800532c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800532e:	4b25      	ldr	r3, [pc, #148]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 8005330:	2180      	movs	r1, #128	@ 0x80
 8005332:	01c9      	lsls	r1, r1, #7
 8005334:	430a      	orrs	r2, r1
 8005336:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005338:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 800533a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005346:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 8005348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 800534c:	2102      	movs	r1, #2
 800534e:	430a      	orrs	r2, r1
 8005350:	635a      	str	r2, [r3, #52]	@ 0x34
 8005352:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <HAL_SPI_MspInit+0xbc>)
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800535e:	193b      	adds	r3, r7, r4
 8005360:	2204      	movs	r2, #4
 8005362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005364:	193b      	adds	r3, r7, r4
 8005366:	2202      	movs	r2, #2
 8005368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	193b      	adds	r3, r7, r4
 800536c:	2200      	movs	r2, #0
 800536e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005370:	193b      	adds	r3, r7, r4
 8005372:	2200      	movs	r2, #0
 8005374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8005376:	193b      	adds	r3, r7, r4
 8005378:	2201      	movs	r2, #1
 800537a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537c:	193b      	adds	r3, r7, r4
 800537e:	4a12      	ldr	r2, [pc, #72]	@ (80053c8 <HAL_SPI_MspInit+0xc0>)
 8005380:	0019      	movs	r1, r3
 8005382:	0010      	movs	r0, r2
 8005384:	f001 fd6a 	bl	8006e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005388:	0021      	movs	r1, r4
 800538a:	187b      	adds	r3, r7, r1
 800538c:	2280      	movs	r2, #128	@ 0x80
 800538e:	00d2      	lsls	r2, r2, #3
 8005390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005392:	187b      	adds	r3, r7, r1
 8005394:	2202      	movs	r2, #2
 8005396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	187b      	adds	r3, r7, r1
 800539a:	2200      	movs	r2, #0
 800539c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	2200      	movs	r2, #0
 80053a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053a4:	187b      	adds	r3, r7, r1
 80053a6:	2205      	movs	r2, #5
 80053a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	4a06      	ldr	r2, [pc, #24]	@ (80053c8 <HAL_SPI_MspInit+0xc0>)
 80053ae:	0019      	movs	r1, r3
 80053b0:	0010      	movs	r0, r2
 80053b2:	f001 fd53 	bl	8006e5c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b00b      	add	sp, #44	@ 0x2c
 80053bc:	bd90      	pop	{r4, r7, pc}
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	40003800 	.word	0x40003800
 80053c4:	40021000 	.word	0x40021000
 80053c8:	50000400 	.word	0x50000400

080053cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005414 <HAL_TIM_Base_MspInit+0x48>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d115      	bne.n	800540a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <HAL_TIM_Base_MspInit+0x4c>)
 80053e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <HAL_TIM_Base_MspInit+0x4c>)
 80053e4:	2180      	movs	r1, #128	@ 0x80
 80053e6:	0289      	lsls	r1, r1, #10
 80053e8:	430a      	orrs	r2, r1
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <HAL_TIM_Base_MspInit+0x4c>)
 80053ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	2015      	movs	r0, #21
 8005400:	f001 f9dc 	bl	80067bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005404:	2015      	movs	r0, #21
 8005406:	f001 f9ee 	bl	80067e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	40014400 	.word	0x40014400
 8005418:	40021000 	.word	0x40021000

0800541c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b08b      	sub	sp, #44	@ 0x2c
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005424:	2414      	movs	r4, #20
 8005426:	193b      	adds	r3, r7, r4
 8005428:	0018      	movs	r0, r3
 800542a:	2314      	movs	r3, #20
 800542c:	001a      	movs	r2, r3
 800542e:	2100      	movs	r1, #0
 8005430:	f006 ff52 	bl	800c2d8 <memset>
  if(huart->Instance==USART3)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5a      	ldr	r2, [pc, #360]	@ (80055a4 <HAL_UART_MspInit+0x188>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d000      	beq.n	8005440 <HAL_UART_MspInit+0x24>
 800543e:	e0ad      	b.n	800559c <HAL_UART_MspInit+0x180>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005440:	4b59      	ldr	r3, [pc, #356]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005444:	4b58      	ldr	r3, [pc, #352]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005446:	2180      	movs	r1, #128	@ 0x80
 8005448:	02c9      	lsls	r1, r1, #11
 800544a:	430a      	orrs	r2, r1
 800544c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800544e:	4b56      	ldr	r3, [pc, #344]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	02db      	lsls	r3, r3, #11
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545c:	4b52      	ldr	r3, [pc, #328]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 800545e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005460:	4b51      	ldr	r3, [pc, #324]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005462:	2101      	movs	r1, #1
 8005464:	430a      	orrs	r2, r1
 8005466:	635a      	str	r2, [r3, #52]	@ 0x34
 8005468:	4b4f      	ldr	r3, [pc, #316]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 800546a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546c:	2201      	movs	r2, #1
 800546e:	4013      	ands	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005474:	4b4c      	ldr	r3, [pc, #304]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005478:	4b4b      	ldr	r3, [pc, #300]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 800547a:	2102      	movs	r1, #2
 800547c:	430a      	orrs	r2, r1
 800547e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005480:	4b49      	ldr	r3, [pc, #292]	@ (80055a8 <HAL_UART_MspInit+0x18c>)
 8005482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005484:	2202      	movs	r2, #2
 8005486:	4013      	ands	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 800548c:	193b      	adds	r3, r7, r4
 800548e:	2220      	movs	r2, #32
 8005490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005492:	193b      	adds	r3, r7, r4
 8005494:	2202      	movs	r2, #2
 8005496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	193b      	adds	r3, r7, r4
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549e:	193b      	adds	r3, r7, r4
 80054a0:	2200      	movs	r2, #0
 80054a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80054a4:	193b      	adds	r3, r7, r4
 80054a6:	2204      	movs	r2, #4
 80054a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 80054aa:	193a      	adds	r2, r7, r4
 80054ac:	23a0      	movs	r3, #160	@ 0xa0
 80054ae:	05db      	lsls	r3, r3, #23
 80054b0:	0011      	movs	r1, r2
 80054b2:	0018      	movs	r0, r3
 80054b4:	f001 fcd2 	bl	8006e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 80054b8:	0021      	movs	r1, r4
 80054ba:	187b      	adds	r3, r7, r1
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2202      	movs	r2, #2
 80054c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054cc:	187b      	adds	r3, r7, r1
 80054ce:	2200      	movs	r2, #0
 80054d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	2204      	movs	r2, #4
 80054d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	4a34      	ldr	r2, [pc, #208]	@ (80055ac <HAL_UART_MspInit+0x190>)
 80054dc:	0019      	movs	r1, r3
 80054de:	0010      	movs	r0, r2
 80054e0:	f001 fcbc 	bl	8006e5c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80054e4:	4b32      	ldr	r3, [pc, #200]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 80054e6:	4a33      	ldr	r2, [pc, #204]	@ (80055b4 <HAL_UART_MspInit+0x198>)
 80054e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 80054ec:	2236      	movs	r2, #54	@ 0x36
 80054ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054f0:	4b2f      	ldr	r3, [pc, #188]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054f6:	4b2e      	ldr	r3, [pc, #184]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054fc:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 80054fe:	2280      	movs	r2, #128	@ 0x80
 8005500:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005502:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 8005504:	2200      	movs	r2, #0
 8005506:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005508:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 800550a:	2200      	movs	r2, #0
 800550c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800550e:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 8005510:	2200      	movs	r2, #0
 8005512:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005514:	4b26      	ldr	r3, [pc, #152]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 8005516:	2280      	movs	r2, #128	@ 0x80
 8005518:	0152      	lsls	r2, r2, #5
 800551a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800551c:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 800551e:	0018      	movs	r0, r3
 8005520:	f001 f97e 	bl	8006820 <HAL_DMA_Init>
 8005524:	1e03      	subs	r3, r0, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8005528:	f7ff fdce 	bl	80050c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 8005532:	505a      	str	r2, [r3, r1]
 8005534:	4b1e      	ldr	r3, [pc, #120]	@ (80055b0 <HAL_UART_MspInit+0x194>)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 800553a:	4b1f      	ldr	r3, [pc, #124]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_UART_MspInit+0x1a0>)
 800553e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005540:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005542:	2237      	movs	r2, #55	@ 0x37
 8005544:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005546:	4b1c      	ldr	r3, [pc, #112]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005548:	2210      	movs	r2, #16
 800554a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800554c:	4b1a      	ldr	r3, [pc, #104]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 800554e:	2200      	movs	r2, #0
 8005550:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005552:	4b19      	ldr	r3, [pc, #100]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005554:	2280      	movs	r2, #128	@ 0x80
 8005556:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005558:	4b17      	ldr	r3, [pc, #92]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 800555a:	2200      	movs	r2, #0
 800555c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800555e:	4b16      	ldr	r3, [pc, #88]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005564:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800556a:	4b13      	ldr	r3, [pc, #76]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 800556c:	2200      	movs	r2, #0
 800556e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005570:	4b11      	ldr	r3, [pc, #68]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005572:	0018      	movs	r0, r3
 8005574:	f001 f954 	bl	8006820 <HAL_DMA_Init>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d001      	beq.n	8005580 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800557c:	f7ff fda4 	bl	80050c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005584:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005586:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <HAL_UART_MspInit+0x19c>)
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	201d      	movs	r0, #29
 8005592:	f001 f913 	bl	80067bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8005596:	201d      	movs	r0, #29
 8005598:	f001 f925 	bl	80067e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b00b      	add	sp, #44	@ 0x2c
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	40004800 	.word	0x40004800
 80055a8:	40021000 	.word	0x40021000
 80055ac:	50000400 	.word	0x50000400
 80055b0:	20000468 	.word	0x20000468
 80055b4:	4002001c 	.word	0x4002001c
 80055b8:	200004c4 	.word	0x200004c4
 80055bc:	40020030 	.word	0x40020030

080055c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	e7fd      	b.n	80055c4 <NMI_Handler+0x4>

080055c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	e7fd      	b.n	80055cc <HardFault_Handler+0x4>

080055d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055e8:	f000 fa18 	bl	8005a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 80055f6:	2010      	movs	r0, #16
 80055f8:	f001 fdce 	bl	8007198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 80055fc:	2040      	movs	r0, #64	@ 0x40
 80055fe:	f001 fdcb 	bl	8007198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800560c:	4b03      	ldr	r3, [pc, #12]	@ (800561c <DMA1_Channel1_IRQHandler+0x14>)
 800560e:	0018      	movs	r0, r3
 8005610:	f001 fae2 	bl	8006bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	20000274 	.word	0x20000274

08005620 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005626:	0018      	movs	r0, r3
 8005628:	f001 fad6 	bl	8006bd8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800562c:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <DMA1_Channel2_3_IRQHandler+0x20>)
 800562e:	0018      	movs	r0, r3
 8005630:	f001 fad2 	bl	8006bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005634:	46c0      	nop			@ (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	20000468 	.word	0x20000468
 8005640:	200004c4 	.word	0x200004c4

08005644 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005648:	4b03      	ldr	r3, [pc, #12]	@ (8005658 <ADC1_IRQHandler+0x14>)
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fcea 	bl	8006024 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	20000210 	.word	0x20000210

0800565c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <TIM16_IRQHandler+0x14>)
 8005662:	0018      	movs	r0, r3
 8005664:	f004 fbe0 	bl	8009e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	20000388 	.word	0x20000388

08005674 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <USART3_4_IRQHandler+0x14>)
 800567a:	0018      	movs	r0, r3
 800567c:	f004 fed8 	bl	800a430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	200003d4 	.word	0x200003d4

0800568c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  return 1;
 8005690:	2301      	movs	r3, #1
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_kill>:

int _kill(int pid, int sig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80056a2:	f006 fe89 	bl	800c3b8 <__errno>
 80056a6:	0003      	movs	r3, r0
 80056a8:	2216      	movs	r2, #22
 80056aa:	601a      	str	r2, [r3, #0]
  return -1;
 80056ac:	2301      	movs	r3, #1
 80056ae:	425b      	negs	r3, r3
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b002      	add	sp, #8
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_exit>:

void _exit (int status)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80056c0:	2301      	movs	r3, #1
 80056c2:	425a      	negs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0011      	movs	r1, r2
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff ffe5 	bl	8005698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	e7fd      	b.n	80056ce <_exit+0x16>

080056d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	e00a      	b.n	80056fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80056e4:	e000      	b.n	80056e8 <_read+0x16>
 80056e6:	bf00      	nop
 80056e8:	0001      	movs	r1, r0
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	60ba      	str	r2, [r7, #8]
 80056f0:	b2ca      	uxtb	r2, r1
 80056f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3301      	adds	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	dbf0      	blt.n	80056e4 <_read+0x12>
  }

  return len;
 8005702:	687b      	ldr	r3, [r7, #4]
}
 8005704:	0018      	movs	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	b006      	add	sp, #24
 800570a:	bd80      	pop	{r7, pc}

0800570c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e009      	b.n	8005732 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	60ba      	str	r2, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	0018      	movs	r0, r3
 8005728:	e000      	b.n	800572c <_write+0x20>
 800572a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3301      	adds	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	dbf1      	blt.n	800571e <_write+0x12>
  }
  return len;
 800573a:	687b      	ldr	r3, [r7, #4]
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b006      	add	sp, #24
 8005742:	bd80      	pop	{r7, pc}

08005744 <_close>:

int _close(int file)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800574c:	2301      	movs	r3, #1
 800574e:	425b      	negs	r3, r3
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2280      	movs	r2, #128	@ 0x80
 8005766:	0192      	lsls	r2, r2, #6
 8005768:	605a      	str	r2, [r3, #4]
  return 0;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <_isatty>:

int _isatty(int file)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800577c:	2301      	movs	r3, #1
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b002      	add	sp, #8
 8005784:	bd80      	pop	{r7, pc}

08005786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005792:	2300      	movs	r3, #0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b004      	add	sp, #16
 800579a:	bd80      	pop	{r7, pc}

0800579c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057a4:	4a14      	ldr	r2, [pc, #80]	@ (80057f8 <_sbrk+0x5c>)
 80057a6:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <_sbrk+0x60>)
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057b0:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <_sbrk+0x64>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057b8:	4b11      	ldr	r3, [pc, #68]	@ (8005800 <_sbrk+0x64>)
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <_sbrk+0x68>)
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057be:	4b10      	ldr	r3, [pc, #64]	@ (8005800 <_sbrk+0x64>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	18d3      	adds	r3, r2, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d207      	bcs.n	80057dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057cc:	f006 fdf4 	bl	800c3b8 <__errno>
 80057d0:	0003      	movs	r3, r0
 80057d2:	220c      	movs	r2, #12
 80057d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	425b      	negs	r3, r3
 80057da:	e009      	b.n	80057f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057dc:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <_sbrk+0x64>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057e2:	4b07      	ldr	r3, [pc, #28]	@ (8005800 <_sbrk+0x64>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	18d2      	adds	r2, r2, r3
 80057ea:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <_sbrk+0x64>)
 80057ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b006      	add	sp, #24
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20009000 	.word	0x20009000
 80057fc:	00000400 	.word	0x00000400
 8005800:	20000608 	.word	0x20000608
 8005804:	20000760 	.word	0x20000760

08005808 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800580c:	46c0      	nop			@ (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 8005818:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <sensor_rx_disable+0x3c>)
 800581a:	2280      	movs	r2, #128	@ 0x80
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <sensor_rx_disable+0x3c>)
 8005822:	2280      	movs	r2, #128	@ 0x80
 8005824:	0152      	lsls	r2, r2, #5
 8005826:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <sensor_rx_disable+0x3c>)
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	0192      	lsls	r2, r2, #6
 800582e:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005830:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <sensor_rx_disable+0x3c>)
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	01d2      	lsls	r2, r2, #7
 8005836:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <sensor_rx_disable+0x3c>)
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	0212      	lsls	r2, r2, #8
 800583e:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005840:	23a0      	movs	r3, #160	@ 0xa0
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	2280      	movs	r2, #128	@ 0x80
 8005846:	0052      	lsls	r2, r2, #1
 8005848:	619a      	str	r2, [r3, #24]
}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	50000400 	.word	0x50000400

08005854 <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	0002      	movs	r2, r0
 800585c:	1dfb      	adds	r3, r7, #7
 800585e:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 8005860:	4b22      	ldr	r3, [pc, #136]	@ (80058ec <sensor_rx_select+0x98>)
 8005862:	2280      	movs	r2, #128	@ 0x80
 8005864:	0112      	lsls	r2, r2, #4
 8005866:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005868:	4b20      	ldr	r3, [pc, #128]	@ (80058ec <sensor_rx_select+0x98>)
 800586a:	2280      	movs	r2, #128	@ 0x80
 800586c:	0152      	lsls	r2, r2, #5
 800586e:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005870:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <sensor_rx_select+0x98>)
 8005872:	2280      	movs	r2, #128	@ 0x80
 8005874:	0192      	lsls	r2, r2, #6
 8005876:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005878:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <sensor_rx_select+0x98>)
 800587a:	2280      	movs	r2, #128	@ 0x80
 800587c:	01d2      	lsls	r2, r2, #7
 800587e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005880:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <sensor_rx_select+0x98>)
 8005882:	2280      	movs	r2, #128	@ 0x80
 8005884:	0212      	lsls	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005888:	23a0      	movs	r3, #160	@ 0xa0
 800588a:	05db      	lsls	r3, r3, #23
 800588c:	2280      	movs	r2, #128	@ 0x80
 800588e:	0052      	lsls	r2, r2, #1
 8005890:	619a      	str	r2, [r3, #24]
	switch(index) {
 8005892:	1dfb      	adds	r3, r7, #7
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b06      	cmp	r3, #6
 8005898:	d824      	bhi.n	80058e4 <sensor_rx_select+0x90>
 800589a:	009a      	lsls	r2, r3, #2
 800589c:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <sensor_rx_select+0x9c>)
 800589e:	18d3      	adds	r3, r2, r3
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <sensor_rx_select+0x98>)
 80058a6:	2280      	movs	r2, #128	@ 0x80
 80058a8:	0112      	lsls	r2, r2, #4
 80058aa:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058ac:	e01a      	b.n	80058e4 <sensor_rx_select+0x90>
	case 2:
		TEMP5_CS(0);
 80058ae:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <sensor_rx_select+0x98>)
 80058b0:	2280      	movs	r2, #128	@ 0x80
 80058b2:	0212      	lsls	r2, r2, #8
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058b6:	e015      	b.n	80058e4 <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <sensor_rx_select+0x98>)
 80058ba:	2280      	movs	r2, #128	@ 0x80
 80058bc:	0192      	lsls	r2, r2, #6
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058c0:	e010      	b.n	80058e4 <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 80058c2:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <sensor_rx_select+0x98>)
 80058c4:	2280      	movs	r2, #128	@ 0x80
 80058c6:	01d2      	lsls	r2, r2, #7
 80058c8:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058ca:	e00b      	b.n	80058e4 <sensor_rx_select+0x90>
	case 5:
		TEMP2_CS(0);
 80058cc:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <sensor_rx_select+0x98>)
 80058ce:	2280      	movs	r2, #128	@ 0x80
 80058d0:	0152      	lsls	r2, r2, #5
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058d4:	e006      	b.n	80058e4 <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 80058d6:	23a0      	movs	r3, #160	@ 0xa0
 80058d8:	05db      	lsls	r3, r3, #23
 80058da:	2280      	movs	r2, #128	@ 0x80
 80058dc:	0052      	lsls	r2, r2, #1
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80058e0:	e000      	b.n	80058e4 <sensor_rx_select+0x90>
		return;
 80058e2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	50000400 	.word	0x50000400
 80058f0:	0800e8e0 	.word	0x0800e8e0

080058f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058f4:	480d      	ldr	r0, [pc, #52]	@ (800592c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80058f8:	f7ff ff86 	bl	8005808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058fc:	480c      	ldr	r0, [pc, #48]	@ (8005930 <LoopForever+0x6>)
  ldr r1, =_edata
 80058fe:	490d      	ldr	r1, [pc, #52]	@ (8005934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005900:	4a0d      	ldr	r2, [pc, #52]	@ (8005938 <LoopForever+0xe>)
  movs r3, #0
 8005902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005904:	e002      	b.n	800590c <LoopCopyDataInit>

08005906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800590a:	3304      	adds	r3, #4

0800590c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800590c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800590e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005910:	d3f9      	bcc.n	8005906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005912:	4a0a      	ldr	r2, [pc, #40]	@ (800593c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005914:	4c0a      	ldr	r4, [pc, #40]	@ (8005940 <LoopForever+0x16>)
  movs r3, #0
 8005916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005918:	e001      	b.n	800591e <LoopFillZerobss>

0800591a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800591a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800591c:	3204      	adds	r2, #4

0800591e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800591e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005920:	d3fb      	bcc.n	800591a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005922:	f006 fd4f 	bl	800c3c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005926:	f7fe fc07 	bl	8004138 <main>

0800592a <LoopForever>:

LoopForever:
  b LoopForever
 800592a:	e7fe      	b.n	800592a <LoopForever>
  ldr   r0, =_estack
 800592c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005934:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005938:	0800ec94 	.word	0x0800ec94
  ldr r2, =_sbss
 800593c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005940:	2000075c 	.word	0x2000075c

08005944 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005944:	e7fe      	b.n	8005944 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08005948 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800594e:	1dfb      	adds	r3, r7, #7
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_Init+0x3c>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <HAL_Init+0x3c>)
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	0049      	lsls	r1, r1, #1
 800595e:	430a      	orrs	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005962:	2003      	movs	r0, #3
 8005964:	f000 f810 	bl	8005988 <HAL_InitTick>
 8005968:	1e03      	subs	r3, r0, #0
 800596a:	d003      	beq.n	8005974 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800596c:	1dfb      	adds	r3, r7, #7
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e001      	b.n	8005978 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005974:	f7ff fbae 	bl	80050d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40022000 	.word	0x40022000

08005988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005990:	230f      	movs	r3, #15
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005998:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_InitTick+0x88>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02b      	beq.n	80059f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <HAL_InitTick+0x8c>)
 80059a2:	681c      	ldr	r4, [r3, #0]
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_InitTick+0x88>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	0019      	movs	r1, r3
 80059aa:	23fa      	movs	r3, #250	@ 0xfa
 80059ac:	0098      	lsls	r0, r3, #2
 80059ae:	f7fa fbc3 	bl	8000138 <__udivsi3>
 80059b2:	0003      	movs	r3, r0
 80059b4:	0019      	movs	r1, r3
 80059b6:	0020      	movs	r0, r4
 80059b8:	f7fa fbbe 	bl	8000138 <__udivsi3>
 80059bc:	0003      	movs	r3, r0
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 ff21 	bl	8006806 <HAL_SYSTICK_Config>
 80059c4:	1e03      	subs	r3, r0, #0
 80059c6:	d112      	bne.n	80059ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d80a      	bhi.n	80059e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	2301      	movs	r3, #1
 80059d2:	425b      	negs	r3, r3
 80059d4:	2200      	movs	r2, #0
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 fef0 	bl	80067bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <HAL_InitTick+0x90>)
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e00d      	b.n	8005a00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80059e4:	230f      	movs	r3, #15
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e008      	b.n	8005a00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e003      	b.n	8005a00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059f8:	230f      	movs	r3, #15
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005a00:	230f      	movs	r3, #15
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	781b      	ldrb	r3, [r3, #0]
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b005      	add	sp, #20
 8005a0c:	bd90      	pop	{r4, r7, pc}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	20000018 	.word	0x20000018
 8005a14:	20000010 	.word	0x20000010
 8005a18:	20000014 	.word	0x20000014

08005a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_IncTick+0x1c>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	001a      	movs	r2, r3
 8005a26:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <HAL_IncTick+0x20>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	18d2      	adds	r2, r2, r3
 8005a2c:	4b03      	ldr	r3, [pc, #12]	@ (8005a3c <HAL_IncTick+0x20>)
 8005a2e:	601a      	str	r2, [r3, #0]
}
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	20000018 	.word	0x20000018
 8005a3c:	2000060c 	.word	0x2000060c

08005a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  return uwTick;
 8005a44:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <HAL_GetTick+0x10>)
 8005a46:	681b      	ldr	r3, [r3, #0]
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	2000060c 	.word	0x2000060c

08005a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a5c:	f7ff fff0 	bl	8005a40 <HAL_GetTick>
 8005a60:	0003      	movs	r3, r0
 8005a62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	d005      	beq.n	8005a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_Delay+0x44>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	001a      	movs	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	f7ff ffe0 	bl	8005a40 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d8f7      	bhi.n	8005a7c <HAL_Delay+0x28>
  {
  }
}
 8005a8c:	46c0      	nop			@ (mov r8, r8)
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b004      	add	sp, #16
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			@ (mov r8, r8)
 8005a98:	20000018 	.word	0x20000018

08005a9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005aac:	401a      	ands	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b002      	add	sp, #8
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	fe3fffff 	.word	0xfe3fffff

08005ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	23e0      	movs	r3, #224	@ 0xe0
 8005ad2:	045b      	lsls	r3, r3, #17
 8005ad4:	4013      	ands	r3, r2
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b002      	add	sp, #8
 8005adc:	bd80      	pop	{r7, pc}

08005ade <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	2104      	movs	r1, #4
 8005af2:	400a      	ands	r2, r1
 8005af4:	2107      	movs	r1, #7
 8005af6:	4091      	lsls	r1, r2
 8005af8:	000a      	movs	r2, r1
 8005afa:	43d2      	mvns	r2, r2
 8005afc:	401a      	ands	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2104      	movs	r1, #4
 8005b02:	400b      	ands	r3, r1
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4099      	lsls	r1, r3
 8005b08:	000b      	movs	r3, r1
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005b10:	46c0      	nop			@ (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b004      	add	sp, #16
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	2104      	movs	r1, #4
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	2107      	movs	r1, #7
 8005b2e:	4091      	lsls	r1, r2
 8005b30:	000a      	movs	r2, r1
 8005b32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2104      	movs	r1, #4
 8005b38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005b3a:	40da      	lsrs	r2, r3
 8005b3c:	0013      	movs	r3, r2
}
 8005b3e:	0018      	movs	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b002      	add	sp, #8
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	23c0      	movs	r3, #192	@ 0xc0
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4013      	ands	r3, r2
 8005b58:	d101      	bne.n	8005b5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b002      	add	sp, #8
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	211f      	movs	r1, #31
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	210f      	movs	r1, #15
 8005b80:	4091      	lsls	r1, r2
 8005b82:	000a      	movs	r2, r1
 8005b84:	43d2      	mvns	r2, r2
 8005b86:	401a      	ands	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0e9b      	lsrs	r3, r3, #26
 8005b8c:	210f      	movs	r1, #15
 8005b8e:	4019      	ands	r1, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	201f      	movs	r0, #31
 8005b94:	4003      	ands	r3, r0
 8005b96:	4099      	lsls	r1, r3
 8005b98:	000b      	movs	r3, r1
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ba0:	46c0      	nop			@ (mov r8, r8)
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	035b      	lsls	r3, r3, #13
 8005bba:	0b5b      	lsrs	r3, r3, #13
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	0352      	lsls	r2, r2, #13
 8005bdc:	0b52      	lsrs	r2, r2, #13
 8005bde:	43d2      	mvns	r2, r2
 8005be0:	401a      	ands	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b002      	add	sp, #8
 8005bec:	bd80      	pop	{r7, pc}

08005bee <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4013      	ands	r3, r2
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	0212      	lsls	r2, r2, #8
 8005c1c:	43d2      	mvns	r2, r2
 8005c1e:	401a      	ands	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	400b      	ands	r3, r1
 8005c28:	4904      	ldr	r1, [pc, #16]	@ (8005c3c <LL_ADC_SetChannelSamplingTime+0x34>)
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	07ffff00 	.word	0x07ffff00

08005c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a05      	ldr	r2, [pc, #20]	@ (8005c64 <LL_ADC_EnableInternalRegulator+0x24>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2280      	movs	r2, #128	@ 0x80
 8005c52:	0552      	lsls	r2, r2, #21
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b002      	add	sp, #8
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	6fffffe8 	.word	0x6fffffe8

08005c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	055b      	lsls	r3, r3, #21
 8005c78:	401a      	ands	r2, r3
 8005c7a:	2380      	movs	r3, #128	@ 0x80
 8005c7c:	055b      	lsls	r3, r3, #21
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d101      	bne.n	8005c86 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <LL_ADC_IsEnabled+0x18>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <LL_ADC_IsEnabled+0x1a>
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	0018      	movs	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d101      	bne.n	8005cca <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cdc:	231f      	movs	r3, #31
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e17f      	b.n	8005ffa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7ff fa09 	bl	800511c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2254      	movs	r2, #84	@ 0x54
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7ff ffa3 	bl	8005c68 <LL_ADC_IsInternalRegulatorEnabled>
 8005d22:	1e03      	subs	r3, r0, #0
 8005d24:	d115      	bne.n	8005d52 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7ff ff88 	bl	8005c40 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d30:	4bb4      	ldr	r3, [pc, #720]	@ (8006004 <HAL_ADC_Init+0x330>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	49b4      	ldr	r1, [pc, #720]	@ (8006008 <HAL_ADC_Init+0x334>)
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fa f9fe 	bl	8000138 <__udivsi3>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	3301      	adds	r3, #1
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d44:	e002      	b.n	8005d4c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f9      	bne.n	8005d46 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff ff86 	bl	8005c68 <LL_ADC_IsInternalRegulatorEnabled>
 8005d5c:	1e03      	subs	r3, r0, #0
 8005d5e:	d10f      	bne.n	8005d80 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	2210      	movs	r2, #16
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	2201      	movs	r2, #1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d78:	231f      	movs	r3, #31
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff ff94 	bl	8005cb2 <LL_ADC_REG_IsConversionOngoing>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	2210      	movs	r2, #16
 8005d94:	4013      	ands	r3, r2
 8005d96:	d000      	beq.n	8005d9a <HAL_ADC_Init+0xc6>
 8005d98:	e122      	b.n	8005fe0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d000      	beq.n	8005da2 <HAL_ADC_Init+0xce>
 8005da0:	e11e      	b.n	8005fe0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da6:	4a99      	ldr	r2, [pc, #612]	@ (800600c <HAL_ADC_Init+0x338>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	2202      	movs	r2, #2
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7ff ff6a 	bl	8005c90 <LL_ADC_IsEnabled>
 8005dbc:	1e03      	subs	r3, r0, #0
 8005dbe:	d000      	beq.n	8005dc2 <HAL_ADC_Init+0xee>
 8005dc0:	e0ad      	b.n	8005f1e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7e1b      	ldrb	r3, [r3, #24]
 8005dca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005dcc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7e5b      	ldrb	r3, [r3, #25]
 8005dd2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005dd4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7e9b      	ldrb	r3, [r3, #26]
 8005dda:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005ddc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_ADC_Init+0x118>
 8005de6:	2380      	movs	r3, #128	@ 0x80
 8005de8:	015b      	lsls	r3, r3, #5
 8005dea:	e000      	b.n	8005dee <HAL_ADC_Init+0x11a>
 8005dec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005dee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005df4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da04      	bge.n	8005e08 <HAL_ADC_Init+0x134>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	e001      	b.n	8005e0c <HAL_ADC_Init+0x138>
 8005e08:	2380      	movs	r3, #128	@ 0x80
 8005e0a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005e0c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	212c      	movs	r1, #44	@ 0x2c
 8005e12:	5c5b      	ldrb	r3, [r3, r1]
 8005e14:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e16:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	5c9b      	ldrb	r3, [r3, r2]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d115      	bne.n	8005e54 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7e9b      	ldrb	r3, [r3, #26]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	0252      	lsls	r2, r2, #9
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e00b      	b.n	8005e54 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e40:	2220      	movs	r2, #32
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e60:	23e0      	movs	r3, #224	@ 0xe0
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a65      	ldr	r2, [pc, #404]	@ (8006010 <HAL_ADC_Init+0x33c>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	0f9b      	lsrs	r3, r3, #30
 8005e8e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e94:	4313      	orrs	r3, r2
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	223c      	movs	r2, #60	@ 0x3c
 8005ea0:	5c9b      	ldrb	r3, [r3, r2]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d111      	bne.n	8005eca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	0f9b      	lsrs	r3, r3, #30
 8005eac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005eb2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005eb8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005ebe:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4a50      	ldr	r2, [pc, #320]	@ (8006014 <HAL_ADC_Init+0x340>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	23c0      	movs	r3, #192	@ 0xc0
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d018      	beq.n	8005f1e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	05db      	lsls	r3, r3, #23
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d012      	beq.n	8005f1e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	061b      	lsls	r3, r3, #24
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d00c      	beq.n	8005f1e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005f04:	4b44      	ldr	r3, [pc, #272]	@ (8006018 <HAL_ADC_Init+0x344>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a44      	ldr	r2, [pc, #272]	@ (800601c <HAL_ADC_Init+0x348>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	23f0      	movs	r3, #240	@ 0xf0
 8005f14:	039b      	lsls	r3, r3, #14
 8005f16:	401a      	ands	r2, r3
 8005f18:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_ADC_Init+0x344>)
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	001a      	movs	r2, r3
 8005f28:	2100      	movs	r1, #0
 8005f2a:	f7ff fdd8 	bl	8005ade <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	493a      	ldr	r1, [pc, #232]	@ (8006020 <HAL_ADC_Init+0x34c>)
 8005f38:	001a      	movs	r2, r3
 8005f3a:	f7ff fdd0 	bl	8005ade <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2110      	movs	r1, #16
 8005f52:	4249      	negs	r1, r1
 8005f54:	430a      	orrs	r2, r1
 8005f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f58:	e018      	b.n	8005f8c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	2380      	movs	r3, #128	@ 0x80
 8005f60:	039b      	lsls	r3, r3, #14
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d112      	bne.n	8005f8c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	221c      	movs	r2, #28
 8005f76:	4013      	ands	r3, r2
 8005f78:	2210      	movs	r2, #16
 8005f7a:	4252      	negs	r2, r2
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	0011      	movs	r1, r2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2100      	movs	r1, #0
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7ff fdc0 	bl	8005b18 <LL_ADC_GetSamplingTimeCommonChannels>
 8005f98:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10b      	bne.n	8005fba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fac:	2203      	movs	r2, #3
 8005fae:	4393      	bics	r3, r2
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fb8:	e01c      	b.n	8005ff4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbe:	2212      	movs	r2, #18
 8005fc0:	4393      	bics	r3, r2
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	2201      	movs	r2, #1
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005fd6:	231f      	movs	r3, #31
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fde:	e009      	b.n	8005ff4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005fec:	231f      	movs	r3, #31
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005ff4:	231f      	movs	r3, #31
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	781b      	ldrb	r3, [r3, #0]
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b008      	add	sp, #32
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000010 	.word	0x20000010
 8006008:	00030d40 	.word	0x00030d40
 800600c:	fffffefd 	.word	0xfffffefd
 8006010:	ffde0201 	.word	0xffde0201
 8006014:	1ffffc02 	.word	0x1ffffc02
 8006018:	40012708 	.word	0x40012708
 800601c:	ffc3ffff 	.word	0xffc3ffff
 8006020:	07ffff04 	.word	0x07ffff04

08006024 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2202      	movs	r2, #2
 8006044:	4013      	ands	r3, r2
 8006046:	d017      	beq.n	8006078 <HAL_ADC_IRQHandler+0x54>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2202      	movs	r2, #2
 800604c:	4013      	ands	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006054:	2210      	movs	r2, #16
 8006056:	4013      	ands	r3, r2
 8006058:	d106      	bne.n	8006068 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605e:	2280      	movs	r2, #128	@ 0x80
 8006060:	0112      	lsls	r2, r2, #4
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0018      	movs	r0, r3
 800606c:	f000 faea 	bl	8006644 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2202      	movs	r2, #2
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2204      	movs	r2, #4
 800607c:	4013      	ands	r3, r2
 800607e:	d003      	beq.n	8006088 <HAL_ADC_IRQHandler+0x64>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2204      	movs	r2, #4
 8006084:	4013      	ands	r3, r2
 8006086:	d107      	bne.n	8006098 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2208      	movs	r2, #8
 800608c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800608e:	d04d      	beq.n	800612c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2208      	movs	r2, #8
 8006094:	4013      	ands	r3, r2
 8006096:	d049      	beq.n	800612c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609c:	2210      	movs	r2, #16
 800609e:	4013      	ands	r3, r2
 80060a0:	d106      	bne.n	80060b0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a6:	2280      	movs	r2, #128	@ 0x80
 80060a8:	0092      	lsls	r2, r2, #2
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7ff fd46 	bl	8005b46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d02e      	beq.n	800611c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7e9b      	ldrb	r3, [r3, #26]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d12a      	bne.n	800611c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2208      	movs	r2, #8
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d123      	bne.n	800611c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0018      	movs	r0, r3
 80060da:	f7ff fdea 	bl	8005cb2 <LL_ADC_REG_IsConversionOngoing>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d110      	bne.n	8006104 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	210c      	movs	r1, #12
 80060ee:	438a      	bics	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	4a56      	ldr	r2, [pc, #344]	@ (8006250 <HAL_ADC_IRQHandler+0x22c>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	2201      	movs	r2, #1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	659a      	str	r2, [r3, #88]	@ 0x58
 8006102:	e00b      	b.n	800611c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006108:	2220      	movs	r2, #32
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006114:	2201      	movs	r2, #1
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f7fd fc46 	bl	80039b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	220c      	movs	r2, #12
 800612a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2280      	movs	r2, #128	@ 0x80
 8006130:	4013      	ands	r3, r2
 8006132:	d012      	beq.n	800615a <HAL_ADC_IRQHandler+0x136>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2280      	movs	r2, #128	@ 0x80
 8006138:	4013      	ands	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006140:	2280      	movs	r2, #128	@ 0x80
 8006142:	0252      	lsls	r2, r2, #9
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f881 	bl	8006254 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2280      	movs	r2, #128	@ 0x80
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	2380      	movs	r3, #128	@ 0x80
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4013      	ands	r3, r2
 8006162:	d014      	beq.n	800618e <HAL_ADC_IRQHandler+0x16a>
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	2380      	movs	r3, #128	@ 0x80
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4013      	ands	r3, r2
 800616c:	d00f      	beq.n	800618e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	2280      	movs	r2, #128	@ 0x80
 8006174:	0292      	lsls	r2, r2, #10
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0018      	movs	r0, r3
 8006180:	f000 fa50 	bl	8006624 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2280      	movs	r2, #128	@ 0x80
 800618a:	0052      	lsls	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	2380      	movs	r3, #128	@ 0x80
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4013      	ands	r3, r2
 8006196:	d014      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x19e>
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4013      	ands	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a6:	2280      	movs	r2, #128	@ 0x80
 80061a8:	02d2      	lsls	r2, r2, #11
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fa3e 	bl	8006634 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2280      	movs	r2, #128	@ 0x80
 80061be:	0092      	lsls	r2, r2, #2
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2210      	movs	r2, #16
 80061c6:	4013      	ands	r3, r2
 80061c8:	d02b      	beq.n	8006222 <HAL_ADC_IRQHandler+0x1fe>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2210      	movs	r2, #16
 80061ce:	4013      	ands	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e008      	b.n	80061f2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	0018      	movs	r0, r3
 80061e6:	f7ff fd02 	bl	8005bee <LL_ADC_REG_GetDMATransfer>
 80061ea:	1e03      	subs	r3, r0, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d110      	bne.n	800621a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fc:	2280      	movs	r2, #128	@ 0x80
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620a:	2202      	movs	r2, #2
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	0018      	movs	r0, r3
 8006216:	f000 f825 	bl	8006264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2210      	movs	r2, #16
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	2380      	movs	r3, #128	@ 0x80
 8006226:	019b      	lsls	r3, r3, #6
 8006228:	4013      	ands	r3, r2
 800622a:	d00d      	beq.n	8006248 <HAL_ADC_IRQHandler+0x224>
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	019b      	lsls	r3, r3, #6
 8006232:	4013      	ands	r3, r2
 8006234:	d008      	beq.n	8006248 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	0018      	movs	r0, r3
 800623a:	f000 fa0b 	bl	8006654 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2280      	movs	r2, #128	@ 0x80
 8006244:	0192      	lsls	r2, r2, #6
 8006246:	601a      	str	r2, [r3, #0]
  }
}
 8006248:	46c0      	nop			@ (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b006      	add	sp, #24
 800624e:	bd80      	pop	{r7, pc}
 8006250:	fffffefe 	.word	0xfffffefe

08006254 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800625c:	46c0      	nop			@ (mov r8, r8)
 800625e:	46bd      	mov	sp, r7
 8006260:	b002      	add	sp, #8
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800626c:	46c0      	nop			@ (mov r8, r8)
 800626e:	46bd      	mov	sp, r7
 8006270:	b002      	add	sp, #8
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800627e:	2317      	movs	r3, #23
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2254      	movs	r2, #84	@ 0x54
 800628e:	5c9b      	ldrb	r3, [r3, r2]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x24>
 8006294:	2302      	movs	r3, #2
 8006296:	e1c0      	b.n	800661a <HAL_ADC_ConfigChannel+0x3a6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2254      	movs	r2, #84	@ 0x54
 800629c:	2101      	movs	r1, #1
 800629e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7ff fd04 	bl	8005cb2 <LL_ADC_REG_IsConversionOngoing>
 80062aa:	1e03      	subs	r3, r0, #0
 80062ac:	d000      	beq.n	80062b0 <HAL_ADC_ConfigChannel+0x3c>
 80062ae:	e1a3      	b.n	80065f8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d100      	bne.n	80062ba <HAL_ADC_ConfigChannel+0x46>
 80062b8:	e143      	b.n	8006542 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	2380      	movs	r3, #128	@ 0x80
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d004      	beq.n	80062d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062ca:	4ac1      	ldr	r2, [pc, #772]	@ (80065d0 <HAL_ADC_ConfigChannel+0x35c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	0019      	movs	r1, r3
 80062da:	0010      	movs	r0, r2
 80062dc:	f7ff fc64 	bl	8005ba8 <LL_ADC_REG_SetSequencerChAdd>
 80062e0:	e0c9      	b.n	8006476 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	211f      	movs	r1, #31
 80062ec:	400b      	ands	r3, r1
 80062ee:	210f      	movs	r1, #15
 80062f0:	4099      	lsls	r1, r3
 80062f2:	000b      	movs	r3, r1
 80062f4:	43db      	mvns	r3, r3
 80062f6:	4013      	ands	r3, r2
 80062f8:	0019      	movs	r1, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	035b      	lsls	r3, r3, #13
 8006300:	0b5b      	lsrs	r3, r3, #13
 8006302:	d105      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x9c>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	0e9b      	lsrs	r3, r3, #26
 800630a:	221f      	movs	r2, #31
 800630c:	4013      	ands	r3, r2
 800630e:	e098      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2201      	movs	r2, #1
 8006316:	4013      	ands	r3, r2
 8006318:	d000      	beq.n	800631c <HAL_ADC_ConfigChannel+0xa8>
 800631a:	e091      	b.n	8006440 <HAL_ADC_ConfigChannel+0x1cc>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2202      	movs	r2, #2
 8006322:	4013      	ands	r3, r2
 8006324:	d000      	beq.n	8006328 <HAL_ADC_ConfigChannel+0xb4>
 8006326:	e089      	b.n	800643c <HAL_ADC_ConfigChannel+0x1c8>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2204      	movs	r2, #4
 800632e:	4013      	ands	r3, r2
 8006330:	d000      	beq.n	8006334 <HAL_ADC_ConfigChannel+0xc0>
 8006332:	e081      	b.n	8006438 <HAL_ADC_ConfigChannel+0x1c4>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2208      	movs	r2, #8
 800633a:	4013      	ands	r3, r2
 800633c:	d000      	beq.n	8006340 <HAL_ADC_ConfigChannel+0xcc>
 800633e:	e079      	b.n	8006434 <HAL_ADC_ConfigChannel+0x1c0>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2210      	movs	r2, #16
 8006346:	4013      	ands	r3, r2
 8006348:	d000      	beq.n	800634c <HAL_ADC_ConfigChannel+0xd8>
 800634a:	e071      	b.n	8006430 <HAL_ADC_ConfigChannel+0x1bc>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2220      	movs	r2, #32
 8006352:	4013      	ands	r3, r2
 8006354:	d000      	beq.n	8006358 <HAL_ADC_ConfigChannel+0xe4>
 8006356:	e069      	b.n	800642c <HAL_ADC_ConfigChannel+0x1b8>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2240      	movs	r2, #64	@ 0x40
 800635e:	4013      	ands	r3, r2
 8006360:	d000      	beq.n	8006364 <HAL_ADC_ConfigChannel+0xf0>
 8006362:	e061      	b.n	8006428 <HAL_ADC_ConfigChannel+0x1b4>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2280      	movs	r2, #128	@ 0x80
 800636a:	4013      	ands	r3, r2
 800636c:	d000      	beq.n	8006370 <HAL_ADC_ConfigChannel+0xfc>
 800636e:	e059      	b.n	8006424 <HAL_ADC_ConfigChannel+0x1b0>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	2380      	movs	r3, #128	@ 0x80
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4013      	ands	r3, r2
 800637a:	d151      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1ac>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	2380      	movs	r3, #128	@ 0x80
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4013      	ands	r3, r2
 8006386:	d149      	bne.n	800641c <HAL_ADC_ConfigChannel+0x1a8>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4013      	ands	r3, r2
 8006392:	d141      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x1a4>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	2380      	movs	r3, #128	@ 0x80
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	4013      	ands	r3, r2
 800639e:	d139      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x1a0>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	2380      	movs	r3, #128	@ 0x80
 80063a6:	015b      	lsls	r3, r3, #5
 80063a8:	4013      	ands	r3, r2
 80063aa:	d131      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x19c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2380      	movs	r3, #128	@ 0x80
 80063b2:	019b      	lsls	r3, r3, #6
 80063b4:	4013      	ands	r3, r2
 80063b6:	d129      	bne.n	800640c <HAL_ADC_ConfigChannel+0x198>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	4013      	ands	r3, r2
 80063c2:	d121      	bne.n	8006408 <HAL_ADC_ConfigChannel+0x194>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	4013      	ands	r3, r2
 80063ce:	d119      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x190>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	2380      	movs	r3, #128	@ 0x80
 80063d6:	025b      	lsls	r3, r3, #9
 80063d8:	4013      	ands	r3, r2
 80063da:	d111      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x18c>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	@ 0x80
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	4013      	ands	r3, r2
 80063e6:	d109      	bne.n	80063fc <HAL_ADC_ConfigChannel+0x188>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	2380      	movs	r3, #128	@ 0x80
 80063ee:	02db      	lsls	r3, r3, #11
 80063f0:	4013      	ands	r3, r2
 80063f2:	d001      	beq.n	80063f8 <HAL_ADC_ConfigChannel+0x184>
 80063f4:	2312      	movs	r3, #18
 80063f6:	e024      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 80063f8:	2300      	movs	r3, #0
 80063fa:	e022      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 80063fc:	2311      	movs	r3, #17
 80063fe:	e020      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006400:	2310      	movs	r3, #16
 8006402:	e01e      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006404:	230f      	movs	r3, #15
 8006406:	e01c      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006408:	230e      	movs	r3, #14
 800640a:	e01a      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 800640c:	230d      	movs	r3, #13
 800640e:	e018      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006410:	230c      	movs	r3, #12
 8006412:	e016      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006414:	230b      	movs	r3, #11
 8006416:	e014      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006418:	230a      	movs	r3, #10
 800641a:	e012      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 800641c:	2309      	movs	r3, #9
 800641e:	e010      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006420:	2308      	movs	r3, #8
 8006422:	e00e      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006424:	2307      	movs	r3, #7
 8006426:	e00c      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006428:	2306      	movs	r3, #6
 800642a:	e00a      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 800642c:	2305      	movs	r3, #5
 800642e:	e008      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006430:	2304      	movs	r3, #4
 8006432:	e006      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006434:	2303      	movs	r3, #3
 8006436:	e004      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006438:	2302      	movs	r3, #2
 800643a:	e002      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1ce>
 8006440:	2300      	movs	r3, #0
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	6852      	ldr	r2, [r2, #4]
 8006446:	201f      	movs	r0, #31
 8006448:	4002      	ands	r2, r0
 800644a:	4093      	lsls	r3, r2
 800644c:	000a      	movs	r2, r1
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	429a      	cmp	r2, r3
 8006462:	d808      	bhi.n	8006476 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	001a      	movs	r2, r3
 8006472:	f7ff fb79 	bl	8005b68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	001a      	movs	r2, r3
 8006484:	f7ff fbc0 	bl	8005c08 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	db00      	blt.n	8006492 <HAL_ADC_ConfigChannel+0x21e>
 8006490:	e0bc      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006492:	4b50      	ldr	r3, [pc, #320]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 8006494:	0018      	movs	r0, r3
 8006496:	f7ff fb15 	bl	8005ac4 <LL_ADC_GetCommonPathInternalCh>
 800649a:	0003      	movs	r3, r0
 800649c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a4d      	ldr	r2, [pc, #308]	@ (80065d8 <HAL_ADC_ConfigChannel+0x364>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d122      	bne.n	80064ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	041b      	lsls	r3, r3, #16
 80064ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064b0:	d11d      	bne.n	80064ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2280      	movs	r2, #128	@ 0x80
 80064b6:	0412      	lsls	r2, r2, #16
 80064b8:	4313      	orrs	r3, r2
 80064ba:	4a46      	ldr	r2, [pc, #280]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 80064bc:	0019      	movs	r1, r3
 80064be:	0010      	movs	r0, r2
 80064c0:	f7ff faec 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064c4:	4b45      	ldr	r3, [pc, #276]	@ (80065dc <HAL_ADC_ConfigChannel+0x368>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4945      	ldr	r1, [pc, #276]	@ (80065e0 <HAL_ADC_ConfigChannel+0x36c>)
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7f9 fe34 	bl	8000138 <__udivsi3>
 80064d0:	0003      	movs	r3, r0
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	0013      	movs	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	189b      	adds	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064de:	e002      	b.n	80064e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f9      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064ec:	e08e      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3c      	ldr	r2, [pc, #240]	@ (80065e4 <HAL_ADC_ConfigChannel+0x370>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10e      	bne.n	8006516 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	2380      	movs	r3, #128	@ 0x80
 80064fc:	045b      	lsls	r3, r3, #17
 80064fe:	4013      	ands	r3, r2
 8006500:	d109      	bne.n	8006516 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2280      	movs	r2, #128	@ 0x80
 8006506:	0452      	lsls	r2, r2, #17
 8006508:	4313      	orrs	r3, r2
 800650a:	4a32      	ldr	r2, [pc, #200]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 800650c:	0019      	movs	r1, r3
 800650e:	0010      	movs	r0, r2
 8006510:	f7ff fac4 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
 8006514:	e07a      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <HAL_ADC_ConfigChannel+0x374>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d000      	beq.n	8006522 <HAL_ADC_ConfigChannel+0x2ae>
 8006520:	e074      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	03db      	lsls	r3, r3, #15
 8006528:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800652a:	d000      	beq.n	800652e <HAL_ADC_ConfigChannel+0x2ba>
 800652c:	e06e      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2280      	movs	r2, #128	@ 0x80
 8006532:	03d2      	lsls	r2, r2, #15
 8006534:	4313      	orrs	r3, r2
 8006536:	4a27      	ldr	r2, [pc, #156]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 8006538:	0019      	movs	r1, r3
 800653a:	0010      	movs	r0, r2
 800653c:	f7ff faae 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
 8006540:	e064      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	2380      	movs	r3, #128	@ 0x80
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	429a      	cmp	r2, r3
 800654c:	d004      	beq.n	8006558 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006552:	4a1f      	ldr	r2, [pc, #124]	@ (80065d0 <HAL_ADC_ConfigChannel+0x35c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d107      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	0019      	movs	r1, r3
 8006562:	0010      	movs	r0, r2
 8006564:	f7ff fb31 	bl	8005bca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da4d      	bge.n	800660c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006570:	4b18      	ldr	r3, [pc, #96]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 8006572:	0018      	movs	r0, r3
 8006574:	f7ff faa6 	bl	8005ac4 <LL_ADC_GetCommonPathInternalCh>
 8006578:	0003      	movs	r3, r0
 800657a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <HAL_ADC_ConfigChannel+0x364>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <HAL_ADC_ConfigChannel+0x378>)
 800658a:	4013      	ands	r3, r2
 800658c:	4a11      	ldr	r2, [pc, #68]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f7ff fa83 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
 8006596:	e039      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a11      	ldr	r2, [pc, #68]	@ (80065e4 <HAL_ADC_ConfigChannel+0x370>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4a12      	ldr	r2, [pc, #72]	@ (80065f0 <HAL_ADC_ConfigChannel+0x37c>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	4a0a      	ldr	r2, [pc, #40]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 80065aa:	0019      	movs	r1, r3
 80065ac:	0010      	movs	r0, r2
 80065ae:	f7ff fa75 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
 80065b2:	e02b      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0b      	ldr	r2, [pc, #44]	@ (80065e8 <HAL_ADC_ConfigChannel+0x374>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d126      	bne.n	800660c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4a0c      	ldr	r2, [pc, #48]	@ (80065f4 <HAL_ADC_ConfigChannel+0x380>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	4a03      	ldr	r2, [pc, #12]	@ (80065d4 <HAL_ADC_ConfigChannel+0x360>)
 80065c6:	0019      	movs	r1, r3
 80065c8:	0010      	movs	r0, r2
 80065ca:	f7ff fa67 	bl	8005a9c <LL_ADC_SetCommonPathInternalCh>
 80065ce:	e01d      	b.n	800660c <HAL_ADC_ConfigChannel+0x398>
 80065d0:	80000004 	.word	0x80000004
 80065d4:	40012708 	.word	0x40012708
 80065d8:	b0001000 	.word	0xb0001000
 80065dc:	20000010 	.word	0x20000010
 80065e0:	00030d40 	.word	0x00030d40
 80065e4:	b8004000 	.word	0xb8004000
 80065e8:	b4002000 	.word	0xb4002000
 80065ec:	ff7fffff 	.word	0xff7fffff
 80065f0:	feffffff 	.word	0xfeffffff
 80065f4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fc:	2220      	movs	r2, #32
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006604:	2317      	movs	r3, #23
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2254      	movs	r2, #84	@ 0x54
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006614:	2317      	movs	r3, #23
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	781b      	ldrb	r3, [r3, #0]
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)

08006624 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800662c:	46c0      	nop			@ (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b002      	add	sp, #8
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800663c:	46c0      	nop			@ (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800664c:	46c0      	nop			@ (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b002      	add	sp, #8
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b002      	add	sp, #8
 8006662:	bd80      	pop	{r7, pc}

08006664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	0002      	movs	r2, r0
 800666c:	1dfb      	adds	r3, r7, #7
 800666e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006670:	1dfb      	adds	r3, r7, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b7f      	cmp	r3, #127	@ 0x7f
 8006676:	d809      	bhi.n	800668c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006678:	1dfb      	adds	r3, r7, #7
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	001a      	movs	r2, r3
 800667e:	231f      	movs	r3, #31
 8006680:	401a      	ands	r2, r3
 8006682:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <__NVIC_EnableIRQ+0x30>)
 8006684:	2101      	movs	r1, #1
 8006686:	4091      	lsls	r1, r2
 8006688:	000a      	movs	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800668c:	46c0      	nop			@ (mov r8, r8)
 800668e:	46bd      	mov	sp, r7
 8006690:	b002      	add	sp, #8
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000e100 	.word	0xe000e100

08006698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	0002      	movs	r2, r0
 80066a0:	6039      	str	r1, [r7, #0]
 80066a2:	1dfb      	adds	r3, r7, #7
 80066a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ac:	d828      	bhi.n	8006700 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066ae:	4a2f      	ldr	r2, [pc, #188]	@ (800676c <__NVIC_SetPriority+0xd4>)
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	b25b      	sxtb	r3, r3
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	33c0      	adds	r3, #192	@ 0xc0
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	589b      	ldr	r3, [r3, r2]
 80066be:	1dfa      	adds	r2, r7, #7
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	0011      	movs	r1, r2
 80066c4:	2203      	movs	r2, #3
 80066c6:	400a      	ands	r2, r1
 80066c8:	00d2      	lsls	r2, r2, #3
 80066ca:	21ff      	movs	r1, #255	@ 0xff
 80066cc:	4091      	lsls	r1, r2
 80066ce:	000a      	movs	r2, r1
 80066d0:	43d2      	mvns	r2, r2
 80066d2:	401a      	ands	r2, r3
 80066d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	019b      	lsls	r3, r3, #6
 80066da:	22ff      	movs	r2, #255	@ 0xff
 80066dc:	401a      	ands	r2, r3
 80066de:	1dfb      	adds	r3, r7, #7
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	0018      	movs	r0, r3
 80066e4:	2303      	movs	r3, #3
 80066e6:	4003      	ands	r3, r0
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066ec:	481f      	ldr	r0, [pc, #124]	@ (800676c <__NVIC_SetPriority+0xd4>)
 80066ee:	1dfb      	adds	r3, r7, #7
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	430a      	orrs	r2, r1
 80066f8:	33c0      	adds	r3, #192	@ 0xc0
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80066fe:	e031      	b.n	8006764 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006700:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <__NVIC_SetPriority+0xd8>)
 8006702:	1dfb      	adds	r3, r7, #7
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	0019      	movs	r1, r3
 8006708:	230f      	movs	r3, #15
 800670a:	400b      	ands	r3, r1
 800670c:	3b08      	subs	r3, #8
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	3306      	adds	r3, #6
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	18d3      	adds	r3, r2, r3
 8006716:	3304      	adds	r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1dfa      	adds	r2, r7, #7
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	0011      	movs	r1, r2
 8006720:	2203      	movs	r2, #3
 8006722:	400a      	ands	r2, r1
 8006724:	00d2      	lsls	r2, r2, #3
 8006726:	21ff      	movs	r1, #255	@ 0xff
 8006728:	4091      	lsls	r1, r2
 800672a:	000a      	movs	r2, r1
 800672c:	43d2      	mvns	r2, r2
 800672e:	401a      	ands	r2, r3
 8006730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	019b      	lsls	r3, r3, #6
 8006736:	22ff      	movs	r2, #255	@ 0xff
 8006738:	401a      	ands	r2, r3
 800673a:	1dfb      	adds	r3, r7, #7
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	0018      	movs	r0, r3
 8006740:	2303      	movs	r3, #3
 8006742:	4003      	ands	r3, r0
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006748:	4809      	ldr	r0, [pc, #36]	@ (8006770 <__NVIC_SetPriority+0xd8>)
 800674a:	1dfb      	adds	r3, r7, #7
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	001c      	movs	r4, r3
 8006750:	230f      	movs	r3, #15
 8006752:	4023      	ands	r3, r4
 8006754:	3b08      	subs	r3, #8
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	430a      	orrs	r2, r1
 800675a:	3306      	adds	r3, #6
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	18c3      	adds	r3, r0, r3
 8006760:	3304      	adds	r3, #4
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	46c0      	nop			@ (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b003      	add	sp, #12
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	e000e100 	.word	0xe000e100
 8006770:	e000ed00 	.word	0xe000ed00

08006774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	1e5a      	subs	r2, r3, #1
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	045b      	lsls	r3, r3, #17
 8006784:	429a      	cmp	r2, r3
 8006786:	d301      	bcc.n	800678c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006788:	2301      	movs	r3, #1
 800678a:	e010      	b.n	80067ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <SysTick_Config+0x44>)
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	3a01      	subs	r2, #1
 8006792:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006794:	2301      	movs	r3, #1
 8006796:	425b      	negs	r3, r3
 8006798:	2103      	movs	r1, #3
 800679a:	0018      	movs	r0, r3
 800679c:	f7ff ff7c 	bl	8006698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <SysTick_Config+0x44>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067a6:	4b04      	ldr	r3, [pc, #16]	@ (80067b8 <SysTick_Config+0x44>)
 80067a8:	2207      	movs	r2, #7
 80067aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	0018      	movs	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b002      	add	sp, #8
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	e000e010 	.word	0xe000e010

080067bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	210f      	movs	r1, #15
 80067c8:	187b      	adds	r3, r7, r1
 80067ca:	1c02      	adds	r2, r0, #0
 80067cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	0011      	movs	r1, r2
 80067d8:	0018      	movs	r0, r3
 80067da:	f7ff ff5d 	bl	8006698 <__NVIC_SetPriority>
}
 80067de:	46c0      	nop			@ (mov r8, r8)
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	0002      	movs	r2, r0
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067f2:	1dfb      	adds	r3, r7, #7
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	0018      	movs	r0, r3
 80067fa:	f7ff ff33 	bl	8006664 <__NVIC_EnableIRQ>
}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	46bd      	mov	sp, r7
 8006802:	b002      	add	sp, #8
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff ffaf 	bl	8006774 <SysTick_Config>
 8006816:	0003      	movs	r3, r0
}
 8006818:	0018      	movs	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	b002      	add	sp, #8
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e077      	b.n	8006922 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3d      	ldr	r2, [pc, #244]	@ (800692c <HAL_DMA_Init+0x10c>)
 8006838:	4694      	mov	ip, r2
 800683a:	4463      	add	r3, ip
 800683c:	2114      	movs	r1, #20
 800683e:	0018      	movs	r0, r3
 8006840:	f7f9 fc7a 	bl	8000138 <__udivsi3>
 8006844:	0003      	movs	r3, r0
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2225      	movs	r2, #37	@ 0x25
 8006850:	2102      	movs	r1, #2
 8006852:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4934      	ldr	r1, [pc, #208]	@ (8006930 <HAL_DMA_Init+0x110>)
 8006860:	400a      	ands	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0018      	movs	r0, r3
 800689e:	f000 fa8d 	bl	8006dbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	2380      	movs	r3, #128	@ 0x80
 80068a8:	01db      	lsls	r3, r3, #7
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d102      	bne.n	80068b4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068bc:	213f      	movs	r1, #63	@ 0x3f
 80068be:	400a      	ands	r2, r1
 80068c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80068ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d011      	beq.n	80068f8 <HAL_DMA_Init+0xd8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d80d      	bhi.n	80068f8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 fa98 	bl	8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	e008      	b.n	800690a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2225      	movs	r2, #37	@ 0x25
 8006914:	2101      	movs	r1, #1
 8006916:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	@ 0x24
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	bffdfff8 	.word	0xbffdfff8
 8006930:	ffff800f 	.word	0xffff800f

08006934 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006942:	2317      	movs	r3, #23
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2224      	movs	r2, #36	@ 0x24
 800694e:	5c9b      	ldrb	r3, [r3, r2]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_DMA_Start_IT+0x24>
 8006954:	2302      	movs	r3, #2
 8006956:	e06f      	b.n	8006a38 <HAL_DMA_Start_IT+0x104>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2224      	movs	r2, #36	@ 0x24
 800695c:	2101      	movs	r1, #1
 800695e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2225      	movs	r2, #37	@ 0x25
 8006964:	5c9b      	ldrb	r3, [r3, r2]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d157      	bne.n	8006a1c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2225      	movs	r2, #37	@ 0x25
 8006970:	2102      	movs	r1, #2
 8006972:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2101      	movs	r1, #1
 8006986:	438a      	bics	r2, r1
 8006988:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f9d3 	bl	8006d3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	210e      	movs	r1, #14
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e00f      	b.n	80069d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2104      	movs	r1, #4
 80069bc:	438a      	bics	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	210a      	movs	r1, #10
 80069cc:	430a      	orrs	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	@ 0x80
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	4013      	ands	r3, r2
 80069dc:	d008      	beq.n	80069f0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e8:	2180      	movs	r1, #128	@ 0x80
 80069ea:	0049      	lsls	r1, r1, #1
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a02:	2180      	movs	r1, #128	@ 0x80
 8006a04:	0049      	lsls	r1, r1, #1
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2101      	movs	r1, #1
 8006a16:	430a      	orrs	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e00a      	b.n	8006a32 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2280      	movs	r2, #128	@ 0x80
 8006a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2224      	movs	r2, #36	@ 0x24
 8006a26:	2100      	movs	r1, #0
 8006a28:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006a2a:	2317      	movs	r3, #23
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006a32:	2317      	movs	r3, #23
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	781b      	ldrb	r3, [r3, #0]
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b006      	add	sp, #24
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e050      	b.n	8006af4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2225      	movs	r2, #37	@ 0x25
 8006a56:	5c9b      	ldrb	r3, [r3, r2]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d008      	beq.n	8006a70 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2204      	movs	r2, #4
 8006a62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	@ 0x24
 8006a68:	2100      	movs	r1, #0
 8006a6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e041      	b.n	8006af4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	210e      	movs	r1, #14
 8006a7c:	438a      	bics	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	491c      	ldr	r1, [pc, #112]	@ (8006afc <HAL_DMA_Abort+0xbc>)
 8006a8c:	400a      	ands	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <HAL_DMA_Abort+0xc0>)
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	221c      	movs	r2, #28
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2201      	movs	r2, #1
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	4b13      	ldr	r3, [pc, #76]	@ (8006b00 <HAL_DMA_Abort+0xc0>)
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006abe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad2:	490a      	ldr	r1, [pc, #40]	@ (8006afc <HAL_DMA_Abort+0xbc>)
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006ae0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2225      	movs	r2, #37	@ 0x25
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2224      	movs	r2, #36	@ 0x24
 8006aee:	2100      	movs	r1, #0
 8006af0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	0018      	movs	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	fffffeff 	.word	0xfffffeff
 8006b00:	40020000 	.word	0x40020000

08006b04 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0c:	210f      	movs	r1, #15
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2225      	movs	r2, #37	@ 0x25
 8006b18:	5c9b      	ldrb	r3, [r3, r2]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d006      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2204      	movs	r2, #4
 8006b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006b26:	187b      	adds	r3, r7, r1
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	e049      	b.n	8006bc2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	210e      	movs	r1, #14
 8006b3a:	438a      	bics	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	438a      	bics	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b58:	491d      	ldr	r1, [pc, #116]	@ (8006bd0 <HAL_DMA_Abort_IT+0xcc>)
 8006b5a:	400a      	ands	r2, r1
 8006b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd4 <HAL_DMA_Abort_IT+0xd0>)
 8006b60:	6859      	ldr	r1, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	221c      	movs	r2, #28
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	409a      	lsls	r2, r3
 8006b6e:	4b19      	ldr	r3, [pc, #100]	@ (8006bd4 <HAL_DMA_Abort_IT+0xd0>)
 8006b70:	430a      	orrs	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b90:	490f      	ldr	r1, [pc, #60]	@ (8006bd0 <HAL_DMA_Abort_IT+0xcc>)
 8006b92:	400a      	ands	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006b9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2225      	movs	r2, #37	@ 0x25
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	@ 0x24
 8006bac:	2100      	movs	r1, #0
 8006bae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	0010      	movs	r0, r2
 8006bc0:	4798      	blx	r3
    }
  }
  return status;
 8006bc2:	230f      	movs	r3, #15
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	781b      	ldrb	r3, [r3, #0]
}
 8006bc8:	0018      	movs	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b004      	add	sp, #16
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	fffffeff 	.word	0xfffffeff
 8006bd4:	40020000 	.word	0x40020000

08006bd8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006be0:	4b55      	ldr	r3, [pc, #340]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	221c      	movs	r2, #28
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	0013      	movs	r3, r2
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d027      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x7a>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2204      	movs	r2, #4
 8006c06:	4013      	ands	r3, r2
 8006c08:	d023      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2220      	movs	r2, #32
 8006c12:	4013      	ands	r3, r2
 8006c14:	d107      	bne.n	8006c26 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2104      	movs	r1, #4
 8006c22:	438a      	bics	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006c26:	4b44      	ldr	r3, [pc, #272]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	221c      	movs	r2, #28
 8006c30:	4013      	ands	r3, r2
 8006c32:	2204      	movs	r2, #4
 8006c34:	409a      	lsls	r2, r3
 8006c36:	4b40      	ldr	r3, [pc, #256]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d100      	bne.n	8006c46 <HAL_DMA_IRQHandler+0x6e>
 8006c44:	e073      	b.n	8006d2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	0010      	movs	r0, r2
 8006c4e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006c50:	e06d      	b.n	8006d2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	221c      	movs	r2, #28
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	0013      	movs	r3, r2
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4013      	ands	r3, r2
 8006c64:	d02e      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0xec>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d02a      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2220      	movs	r2, #32
 8006c76:	4013      	ands	r3, r2
 8006c78:	d10b      	bne.n	8006c92 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	210a      	movs	r1, #10
 8006c86:	438a      	bics	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2225      	movs	r2, #37	@ 0x25
 8006c8e:	2101      	movs	r1, #1
 8006c90:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006c92:	4b29      	ldr	r3, [pc, #164]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	221c      	movs	r2, #28
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	409a      	lsls	r2, r3
 8006ca2:	4b25      	ldr	r3, [pc, #148]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2224      	movs	r2, #36	@ 0x24
 8006cac:	2100      	movs	r1, #0
 8006cae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d03a      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	0010      	movs	r0, r2
 8006cc0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006cc2:	e034      	b.n	8006d2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	221c      	movs	r2, #28
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2208      	movs	r2, #8
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	0013      	movs	r3, r2
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d02b      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x158>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2208      	movs	r2, #8
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d027      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	210e      	movs	r1, #14
 8006cec:	438a      	bics	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006cf0:	4b11      	ldr	r3, [pc, #68]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006cf2:	6859      	ldr	r1, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf8:	221c      	movs	r2, #28
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <HAL_DMA_IRQHandler+0x160>)
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2225      	movs	r2, #37	@ 0x25
 8006d10:	2101      	movs	r1, #1
 8006d12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	@ 0x24
 8006d18:	2100      	movs	r1, #0
 8006d1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	46c0      	nop			@ (mov r8, r8)
}
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b004      	add	sp, #16
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40020000 	.word	0x40020000

08006d3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006d52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006d64:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006d66:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <DMA_SetConfig+0x7c>)
 8006d68:	6859      	ldr	r1, [r3, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	221c      	movs	r2, #28
 8006d70:	4013      	ands	r3, r2
 8006d72:	2201      	movs	r2, #1
 8006d74:	409a      	lsls	r2, r3
 8006d76:	4b10      	ldr	r3, [pc, #64]	@ (8006db8 <DMA_SetConfig+0x7c>)
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d108      	bne.n	8006d9e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d9c:	e007      	b.n	8006dae <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]
}
 8006dae:	46c0      	nop			@ (mov r8, r8)
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			@ (mov r8, r8)
 8006db8:	40020000 	.word	0x40020000

08006dbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	089b      	lsrs	r3, r3, #2
 8006dca:	4a10      	ldr	r2, [pc, #64]	@ (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006dcc:	4694      	mov	ip, r2
 8006dce:	4463      	add	r3, ip
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	001a      	movs	r2, r3
 8006dde:	23ff      	movs	r3, #255	@ 0xff
 8006de0:	4013      	ands	r3, r2
 8006de2:	3b08      	subs	r3, #8
 8006de4:	2114      	movs	r1, #20
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7f9 f9a6 	bl	8000138 <__udivsi3>
 8006dec:	0003      	movs	r3, r0
 8006dee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a07      	ldr	r2, [pc, #28]	@ (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006df4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	221f      	movs	r2, #31
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006e04:	46c0      	nop			@ (mov r8, r8)
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b004      	add	sp, #16
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	10008200 	.word	0x10008200
 8006e10:	40020880 	.word	0x40020880

08006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	223f      	movs	r2, #63	@ 0x3f
 8006e22:	4013      	ands	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a0a      	ldr	r2, [pc, #40]	@ (8006e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006e2a:	4694      	mov	ip, r2
 8006e2c:	4463      	add	r3, ip
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	001a      	movs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a07      	ldr	r2, [pc, #28]	@ (8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	2203      	movs	r2, #3
 8006e42:	4013      	ands	r3, r2
 8006e44:	2201      	movs	r2, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8006e4c:	46c0      	nop			@ (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b004      	add	sp, #16
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	1000823f 	.word	0x1000823f
 8006e58:	40020940 	.word	0x40020940

08006e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e6a:	e147      	b.n	80070fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2101      	movs	r1, #1
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4091      	lsls	r1, r2
 8006e76:	000a      	movs	r2, r1
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d100      	bne.n	8006e84 <HAL_GPIO_Init+0x28>
 8006e82:	e138      	b.n	80070f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2203      	movs	r2, #3
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d005      	beq.n	8006e9c <HAL_GPIO_Init+0x40>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2203      	movs	r2, #3
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d130      	bne.n	8006efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	0013      	movs	r3, r2
 8006eac:	43da      	mvns	r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	409a      	lsls	r2, r3
 8006ebe:	0013      	movs	r3, r2
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	0013      	movs	r3, r2
 8006eda:	43da      	mvns	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	2201      	movs	r2, #1
 8006eea:	401a      	ands	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	0013      	movs	r3, r2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2203      	movs	r2, #3
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d017      	beq.n	8006f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	2203      	movs	r2, #3
 8006f16:	409a      	lsls	r2, r3
 8006f18:	0013      	movs	r3, r2
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	0013      	movs	r3, r2
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2203      	movs	r2, #3
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d123      	bne.n	8006f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	08da      	lsrs	r2, r3, #3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3208      	adds	r2, #8
 8006f4e:	0092      	lsls	r2, r2, #2
 8006f50:	58d3      	ldr	r3, [r2, r3]
 8006f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2207      	movs	r2, #7
 8006f58:	4013      	ands	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	0013      	movs	r3, r2
 8006f62:	43da      	mvns	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4013      	ands	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	691a      	ldr	r2, [r3, #16]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2107      	movs	r1, #7
 8006f72:	400b      	ands	r3, r1
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	409a      	lsls	r2, r3
 8006f78:	0013      	movs	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	08da      	lsrs	r2, r3, #3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3208      	adds	r2, #8
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	6939      	ldr	r1, [r7, #16]
 8006f8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	2203      	movs	r2, #3
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	0013      	movs	r3, r2
 8006f9e:	43da      	mvns	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	401a      	ands	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	0013      	movs	r3, r2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	23c0      	movs	r3, #192	@ 0xc0
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d100      	bne.n	8006fd0 <HAL_GPIO_Init+0x174>
 8006fce:	e092      	b.n	80070f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006fd0:	4a50      	ldr	r2, [pc, #320]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	089b      	lsrs	r3, r3, #2
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	589b      	ldr	r3, [r3, r2]
 8006fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	220f      	movs	r2, #15
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	0013      	movs	r3, r2
 8006fec:	43da      	mvns	r2, r3
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	23a0      	movs	r3, #160	@ 0xa0
 8006ff8:	05db      	lsls	r3, r3, #23
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d013      	beq.n	8007026 <HAL_GPIO_Init+0x1ca>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a45      	ldr	r2, [pc, #276]	@ (8007118 <HAL_GPIO_Init+0x2bc>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00d      	beq.n	8007022 <HAL_GPIO_Init+0x1c6>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a44      	ldr	r2, [pc, #272]	@ (800711c <HAL_GPIO_Init+0x2c0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <HAL_GPIO_Init+0x1c2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a43      	ldr	r2, [pc, #268]	@ (8007120 <HAL_GPIO_Init+0x2c4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d101      	bne.n	800701a <HAL_GPIO_Init+0x1be>
 8007016:	2303      	movs	r3, #3
 8007018:	e006      	b.n	8007028 <HAL_GPIO_Init+0x1cc>
 800701a:	2305      	movs	r3, #5
 800701c:	e004      	b.n	8007028 <HAL_GPIO_Init+0x1cc>
 800701e:	2302      	movs	r3, #2
 8007020:	e002      	b.n	8007028 <HAL_GPIO_Init+0x1cc>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <HAL_GPIO_Init+0x1cc>
 8007026:	2300      	movs	r3, #0
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	2103      	movs	r1, #3
 800702c:	400a      	ands	r2, r1
 800702e:	00d2      	lsls	r2, r2, #3
 8007030:	4093      	lsls	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007038:	4936      	ldr	r1, [pc, #216]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	3318      	adds	r3, #24
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007046:	4b33      	ldr	r3, [pc, #204]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	43da      	mvns	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	4013      	ands	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	2380      	movs	r3, #128	@ 0x80
 800705c:	035b      	lsls	r3, r3, #13
 800705e:	4013      	ands	r3, r2
 8007060:	d003      	beq.n	800706a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800706a:	4b2a      	ldr	r3, [pc, #168]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007070:	4b28      	ldr	r3, [pc, #160]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	43da      	mvns	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4013      	ands	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	039b      	lsls	r3, r3, #14
 8007088:	4013      	ands	r3, r2
 800708a:	d003      	beq.n	8007094 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007094:	4b1f      	ldr	r3, [pc, #124]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800709a:	4a1e      	ldr	r2, [pc, #120]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 800709c:	2384      	movs	r3, #132	@ 0x84
 800709e:	58d3      	ldr	r3, [r2, r3]
 80070a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	43da      	mvns	r2, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	029b      	lsls	r3, r3, #10
 80070b4:	4013      	ands	r3, r2
 80070b6:	d003      	beq.n	80070c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070c0:	4914      	ldr	r1, [pc, #80]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 80070c2:	2284      	movs	r2, #132	@ 0x84
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80070c8:	4a12      	ldr	r2, [pc, #72]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 80070ca:	2380      	movs	r3, #128	@ 0x80
 80070cc:	58d3      	ldr	r3, [r2, r3]
 80070ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	43da      	mvns	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4013      	ands	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	2380      	movs	r3, #128	@ 0x80
 80070e0:	025b      	lsls	r3, r3, #9
 80070e2:	4013      	ands	r3, r2
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070ee:	4909      	ldr	r1, [pc, #36]	@ (8007114 <HAL_GPIO_Init+0x2b8>)
 80070f0:	2280      	movs	r2, #128	@ 0x80
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	3301      	adds	r3, #1
 80070fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	40da      	lsrs	r2, r3
 8007104:	1e13      	subs	r3, r2, #0
 8007106:	d000      	beq.n	800710a <HAL_GPIO_Init+0x2ae>
 8007108:	e6b0      	b.n	8006e6c <HAL_GPIO_Init+0x10>
  }
}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	46c0      	nop			@ (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	b006      	add	sp, #24
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40021800 	.word	0x40021800
 8007118:	50000400 	.word	0x50000400
 800711c:	50000800 	.word	0x50000800
 8007120:	50000c00 	.word	0x50000c00

08007124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	000a      	movs	r2, r1
 800712e:	1cbb      	adds	r3, r7, #2
 8007130:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	1cba      	adds	r2, r7, #2
 8007138:	8812      	ldrh	r2, [r2, #0]
 800713a:	4013      	ands	r3, r2
 800713c:	d004      	beq.n	8007148 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800713e:	230f      	movs	r3, #15
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e003      	b.n	8007150 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007148:	230f      	movs	r3, #15
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007150:	230f      	movs	r3, #15
 8007152:	18fb      	adds	r3, r7, r3
 8007154:	781b      	ldrb	r3, [r3, #0]
}
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b004      	add	sp, #16
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	0008      	movs	r0, r1
 8007168:	0011      	movs	r1, r2
 800716a:	1cbb      	adds	r3, r7, #2
 800716c:	1c02      	adds	r2, r0, #0
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	1c7b      	adds	r3, r7, #1
 8007172:	1c0a      	adds	r2, r1, #0
 8007174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007176:	1c7b      	adds	r3, r7, #1
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800717e:	1cbb      	adds	r3, r7, #2
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007186:	e003      	b.n	8007190 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007188:	1cbb      	adds	r3, r7, #2
 800718a:	881a      	ldrh	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007190:	46c0      	nop			@ (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	b002      	add	sp, #8
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	0002      	movs	r2, r0
 80071a0:	1dbb      	adds	r3, r7, #6
 80071a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80071a4:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	1dba      	adds	r2, r7, #6
 80071aa:	8812      	ldrh	r2, [r2, #0]
 80071ac:	4013      	ands	r3, r2
 80071ae:	d008      	beq.n	80071c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80071b0:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80071b2:	1dba      	adds	r2, r7, #6
 80071b4:	8812      	ldrh	r2, [r2, #0]
 80071b6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80071b8:	1dbb      	adds	r3, r7, #6
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	0018      	movs	r0, r3
 80071be:	f000 f815 	bl	80071ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	1dba      	adds	r2, r7, #6
 80071c8:	8812      	ldrh	r2, [r2, #0]
 80071ca:	4013      	ands	r3, r2
 80071cc:	d008      	beq.n	80071e0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80071ce:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80071d0:	1dba      	adds	r2, r7, #6
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80071d6:	1dbb      	adds	r3, r7, #6
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fc fc78 	bl	8003ad0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80071e0:	46c0      	nop			@ (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b002      	add	sp, #8
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40021800 	.word	0x40021800

080071ec <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	0002      	movs	r2, r0
 80071f4:	1dbb      	adds	r3, r7, #6
 80071f6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80071f8:	46c0      	nop			@ (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e08f      	b.n	8007332 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2241      	movs	r2, #65	@ 0x41
 8007216:	5c9b      	ldrb	r3, [r3, r2]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d107      	bne.n	800722e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2240      	movs	r2, #64	@ 0x40
 8007222:	2100      	movs	r1, #0
 8007224:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f7fe f80b 	bl	8005244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2241      	movs	r2, #65	@ 0x41
 8007232:	2124      	movs	r1, #36	@ 0x24
 8007234:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2101      	movs	r1, #1
 8007242:	438a      	bics	r2, r1
 8007244:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	493b      	ldr	r1, [pc, #236]	@ (800733c <HAL_I2C_Init+0x13c>)
 8007250:	400a      	ands	r2, r1
 8007252:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4938      	ldr	r1, [pc, #224]	@ (8007340 <HAL_I2C_Init+0x140>)
 8007260:	400a      	ands	r2, r1
 8007262:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d108      	bne.n	800727e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2180      	movs	r1, #128	@ 0x80
 8007276:	0209      	lsls	r1, r1, #8
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	e007      	b.n	800728e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2184      	movs	r1, #132	@ 0x84
 8007288:	0209      	lsls	r1, r1, #8
 800728a:	430a      	orrs	r2, r1
 800728c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d109      	bne.n	80072aa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2180      	movs	r1, #128	@ 0x80
 80072a2:	0109      	lsls	r1, r1, #4
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	e007      	b.n	80072ba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4923      	ldr	r1, [pc, #140]	@ (8007344 <HAL_I2C_Init+0x144>)
 80072b6:	400a      	ands	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4920      	ldr	r1, [pc, #128]	@ (8007348 <HAL_I2C_Init+0x148>)
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	491a      	ldr	r1, [pc, #104]	@ (8007340 <HAL_I2C_Init+0x140>)
 80072d6:	400a      	ands	r2, r1
 80072d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691a      	ldr	r2, [r3, #16]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2101      	movs	r1, #1
 8007310:	430a      	orrs	r2, r1
 8007312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2241      	movs	r2, #65	@ 0x41
 800731e:	2120      	movs	r1, #32
 8007320:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2242      	movs	r2, #66	@ 0x42
 800732c:	2100      	movs	r1, #0
 800732e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b002      	add	sp, #8
 8007338:	bd80      	pop	{r7, pc}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	f0ffffff 	.word	0xf0ffffff
 8007340:	ffff7fff 	.word	0xffff7fff
 8007344:	fffff7ff 	.word	0xfffff7ff
 8007348:	02008000 	.word	0x02008000

0800734c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b089      	sub	sp, #36	@ 0x24
 8007350:	af02      	add	r7, sp, #8
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	0008      	movs	r0, r1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	0019      	movs	r1, r3
 800735a:	230a      	movs	r3, #10
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	1c02      	adds	r2, r0, #0
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	2308      	movs	r3, #8
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	1c0a      	adds	r2, r1, #0
 8007368:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2241      	movs	r2, #65	@ 0x41
 800736e:	5c9b      	ldrb	r3, [r3, r2]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d000      	beq.n	8007378 <HAL_I2C_Master_Transmit+0x2c>
 8007376:	e10a      	b.n	800758e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2240      	movs	r2, #64	@ 0x40
 800737c:	5c9b      	ldrb	r3, [r3, r2]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_I2C_Master_Transmit+0x3a>
 8007382:	2302      	movs	r3, #2
 8007384:	e104      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2240      	movs	r2, #64	@ 0x40
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800738e:	f7fe fb57 	bl	8005a40 <HAL_GetTick>
 8007392:	0003      	movs	r3, r0
 8007394:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007396:	2380      	movs	r3, #128	@ 0x80
 8007398:	0219      	lsls	r1, r3, #8
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2319      	movs	r3, #25
 80073a2:	2201      	movs	r2, #1
 80073a4:	f000 fd4e 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80073a8:	1e03      	subs	r3, r0, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e0ef      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2241      	movs	r2, #65	@ 0x41
 80073b4:	2121      	movs	r1, #33	@ 0x21
 80073b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2242      	movs	r2, #66	@ 0x42
 80073bc:	2110      	movs	r1, #16
 80073be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2208      	movs	r2, #8
 80073d0:	18ba      	adds	r2, r7, r2
 80073d2:	8812      	ldrh	r2, [r2, #0]
 80073d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2bff      	cmp	r3, #255	@ 0xff
 80073e4:	d906      	bls.n	80073f4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	22ff      	movs	r2, #255	@ 0xff
 80073ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80073ec:	2380      	movs	r3, #128	@ 0x80
 80073ee:	045b      	lsls	r3, r3, #17
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e007      	b.n	8007404 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80073fe:	2380      	movs	r3, #128	@ 0x80
 8007400:	049b      	lsls	r3, r3, #18
 8007402:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d027      	beq.n	800745c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007440:	b2db      	uxtb	r3, r3
 8007442:	3301      	adds	r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	697c      	ldr	r4, [r7, #20]
 8007448:	230a      	movs	r3, #10
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	8819      	ldrh	r1, [r3, #0]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	4b51      	ldr	r3, [pc, #324]	@ (8007598 <HAL_I2C_Master_Transmit+0x24c>)
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	0023      	movs	r3, r4
 8007456:	f000 ff6d 	bl	8008334 <I2C_TransferConfig>
 800745a:	e06f      	b.n	800753c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007460:	b2da      	uxtb	r2, r3
 8007462:	697c      	ldr	r4, [r7, #20]
 8007464:	230a      	movs	r3, #10
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	8819      	ldrh	r1, [r3, #0]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	4b4a      	ldr	r3, [pc, #296]	@ (8007598 <HAL_I2C_Master_Transmit+0x24c>)
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	0023      	movs	r3, r4
 8007472:	f000 ff5f 	bl	8008334 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007476:	e061      	b.n	800753c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	0018      	movs	r0, r3
 8007480:	f000 fd38 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007484:	1e03      	subs	r3, r0, #0
 8007486:	d001      	beq.n	800748c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e081      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d03a      	beq.n	800753c <HAL_I2C_Master_Transmit+0x1f0>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d136      	bne.n	800753c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	0013      	movs	r3, r2
 80074d8:	2200      	movs	r2, #0
 80074da:	2180      	movs	r1, #128	@ 0x80
 80074dc:	f000 fcb2 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e053      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2bff      	cmp	r3, #255	@ 0xff
 80074f0:	d911      	bls.n	8007516 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	22ff      	movs	r2, #255	@ 0xff
 80074f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	045c      	lsls	r4, r3, #17
 8007502:	230a      	movs	r3, #10
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	8819      	ldrh	r1, [r3, #0]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	0023      	movs	r3, r4
 8007510:	f000 ff10 	bl	8008334 <I2C_TransferConfig>
 8007514:	e012      	b.n	800753c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007524:	b2da      	uxtb	r2, r3
 8007526:	2380      	movs	r3, #128	@ 0x80
 8007528:	049c      	lsls	r4, r3, #18
 800752a:	230a      	movs	r3, #10
 800752c:	18fb      	adds	r3, r7, r3
 800752e:	8819      	ldrh	r1, [r3, #0]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	0023      	movs	r3, r4
 8007538:	f000 fefc 	bl	8008334 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d198      	bne.n	8007478 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 fd17 	bl	8007f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d001      	beq.n	800755a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e01a      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2220      	movs	r2, #32
 8007560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	490b      	ldr	r1, [pc, #44]	@ (800759c <HAL_I2C_Master_Transmit+0x250>)
 800756e:	400a      	ands	r2, r1
 8007570:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2241      	movs	r2, #65	@ 0x41
 8007576:	2120      	movs	r1, #32
 8007578:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2242      	movs	r2, #66	@ 0x42
 800757e:	2100      	movs	r1, #0
 8007580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2240      	movs	r2, #64	@ 0x40
 8007586:	2100      	movs	r1, #0
 8007588:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800758e:	2302      	movs	r3, #2
  }
}
 8007590:	0018      	movs	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	b007      	add	sp, #28
 8007596:	bd90      	pop	{r4, r7, pc}
 8007598:	80002000 	.word	0x80002000
 800759c:	fe00e800 	.word	0xfe00e800

080075a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80075a0:	b590      	push	{r4, r7, lr}
 80075a2:	b089      	sub	sp, #36	@ 0x24
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	0008      	movs	r0, r1
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	0019      	movs	r1, r3
 80075ae:	230a      	movs	r3, #10
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	1c02      	adds	r2, r0, #0
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	2308      	movs	r3, #8
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	1c0a      	adds	r2, r1, #0
 80075bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2241      	movs	r2, #65	@ 0x41
 80075c2:	5c9b      	ldrb	r3, [r3, r2]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d000      	beq.n	80075cc <HAL_I2C_Master_Receive+0x2c>
 80075ca:	e0e8      	b.n	800779e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2240      	movs	r2, #64	@ 0x40
 80075d0:	5c9b      	ldrb	r3, [r3, r2]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_I2C_Master_Receive+0x3a>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e0e2      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2240      	movs	r2, #64	@ 0x40
 80075de:	2101      	movs	r1, #1
 80075e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075e2:	f7fe fa2d 	bl	8005a40 <HAL_GetTick>
 80075e6:	0003      	movs	r3, r0
 80075e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ea:	2380      	movs	r3, #128	@ 0x80
 80075ec:	0219      	lsls	r1, r3, #8
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2319      	movs	r3, #25
 80075f6:	2201      	movs	r2, #1
 80075f8:	f000 fc24 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d001      	beq.n	8007604 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e0cd      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2241      	movs	r2, #65	@ 0x41
 8007608:	2122      	movs	r1, #34	@ 0x22
 800760a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2242      	movs	r2, #66	@ 0x42
 8007610:	2110      	movs	r1, #16
 8007612:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2208      	movs	r2, #8
 8007624:	18ba      	adds	r2, r7, r2
 8007626:	8812      	ldrh	r2, [r2, #0]
 8007628:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	2bff      	cmp	r3, #255	@ 0xff
 8007638:	d911      	bls.n	800765e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	22ff      	movs	r2, #255	@ 0xff
 800763e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007644:	b2da      	uxtb	r2, r3
 8007646:	2380      	movs	r3, #128	@ 0x80
 8007648:	045c      	lsls	r4, r3, #17
 800764a:	230a      	movs	r3, #10
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	8819      	ldrh	r1, [r3, #0]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	4b55      	ldr	r3, [pc, #340]	@ (80077a8 <HAL_I2C_Master_Receive+0x208>)
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	0023      	movs	r3, r4
 8007658:	f000 fe6c 	bl	8008334 <I2C_TransferConfig>
 800765c:	e076      	b.n	800774c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800766c:	b2da      	uxtb	r2, r3
 800766e:	2380      	movs	r3, #128	@ 0x80
 8007670:	049c      	lsls	r4, r3, #18
 8007672:	230a      	movs	r3, #10
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	8819      	ldrh	r1, [r3, #0]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	4b4b      	ldr	r3, [pc, #300]	@ (80077a8 <HAL_I2C_Master_Receive+0x208>)
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	0023      	movs	r3, r4
 8007680:	f000 fe58 	bl	8008334 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007684:	e062      	b.n	800774c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	0018      	movs	r0, r3
 800768e:	f000 fcbb 	bl	8008008 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007692:	1e03      	subs	r3, r0, #0
 8007694:	d001      	beq.n	800769a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e082      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d03a      	beq.n	800774c <HAL_I2C_Master_Receive+0x1ac>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d136      	bne.n	800774c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	0013      	movs	r3, r2
 80076e8:	2200      	movs	r2, #0
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	f000 fbaa 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80076f0:	1e03      	subs	r3, r0, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e053      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2bff      	cmp	r3, #255	@ 0xff
 8007700:	d911      	bls.n	8007726 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	22ff      	movs	r2, #255	@ 0xff
 8007706:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	2380      	movs	r3, #128	@ 0x80
 8007710:	045c      	lsls	r4, r3, #17
 8007712:	230a      	movs	r3, #10
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	8819      	ldrh	r1, [r3, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	2300      	movs	r3, #0
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	0023      	movs	r3, r4
 8007720:	f000 fe08 	bl	8008334 <I2C_TransferConfig>
 8007724:	e012      	b.n	800774c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007734:	b2da      	uxtb	r2, r3
 8007736:	2380      	movs	r3, #128	@ 0x80
 8007738:	049c      	lsls	r4, r3, #18
 800773a:	230a      	movs	r3, #10
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	8819      	ldrh	r1, [r3, #0]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	0023      	movs	r3, r4
 8007748:	f000 fdf4 	bl	8008334 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d197      	bne.n	8007686 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fc0f 	bl	8007f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007762:	1e03      	subs	r3, r0, #0
 8007764:	d001      	beq.n	800776a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e01a      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2220      	movs	r2, #32
 8007770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	490b      	ldr	r1, [pc, #44]	@ (80077ac <HAL_I2C_Master_Receive+0x20c>)
 800777e:	400a      	ands	r2, r1
 8007780:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2241      	movs	r2, #65	@ 0x41
 8007786:	2120      	movs	r1, #32
 8007788:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2242      	movs	r2, #66	@ 0x42
 800778e:	2100      	movs	r1, #0
 8007790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2240      	movs	r2, #64	@ 0x40
 8007796:	2100      	movs	r1, #0
 8007798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e000      	b.n	80077a0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800779e:	2302      	movs	r3, #2
  }
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b007      	add	sp, #28
 80077a6:	bd90      	pop	{r4, r7, pc}
 80077a8:	80002400 	.word	0x80002400
 80077ac:	fe00e800 	.word	0xfe00e800

080077b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b089      	sub	sp, #36	@ 0x24
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	000c      	movs	r4, r1
 80077ba:	0010      	movs	r0, r2
 80077bc:	0019      	movs	r1, r3
 80077be:	230a      	movs	r3, #10
 80077c0:	18fb      	adds	r3, r7, r3
 80077c2:	1c22      	adds	r2, r4, #0
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	2308      	movs	r3, #8
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	1c02      	adds	r2, r0, #0
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	1dbb      	adds	r3, r7, #6
 80077d0:	1c0a      	adds	r2, r1, #0
 80077d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2241      	movs	r2, #65	@ 0x41
 80077d8:	5c9b      	ldrb	r3, [r3, r2]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d000      	beq.n	80077e2 <HAL_I2C_Mem_Write+0x32>
 80077e0:	e10c      	b.n	80079fc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <HAL_I2C_Mem_Write+0x42>
 80077e8:	232c      	movs	r3, #44	@ 0x2c
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2280      	movs	r2, #128	@ 0x80
 80077f6:	0092      	lsls	r2, r2, #2
 80077f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e0ff      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2240      	movs	r2, #64	@ 0x40
 8007802:	5c9b      	ldrb	r3, [r3, r2]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_I2C_Mem_Write+0x5c>
 8007808:	2302      	movs	r3, #2
 800780a:	e0f8      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2240      	movs	r2, #64	@ 0x40
 8007810:	2101      	movs	r1, #1
 8007812:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007814:	f7fe f914 	bl	8005a40 <HAL_GetTick>
 8007818:	0003      	movs	r3, r0
 800781a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	0219      	lsls	r1, r3, #8
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2319      	movs	r3, #25
 8007828:	2201      	movs	r2, #1
 800782a:	f000 fb0b 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0e3      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2241      	movs	r2, #65	@ 0x41
 800783a:	2121      	movs	r1, #33	@ 0x21
 800783c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2242      	movs	r2, #66	@ 0x42
 8007842:	2140      	movs	r1, #64	@ 0x40
 8007844:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	222c      	movs	r2, #44	@ 0x2c
 8007856:	18ba      	adds	r2, r7, r2
 8007858:	8812      	ldrh	r2, [r2, #0]
 800785a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007862:	1dbb      	adds	r3, r7, #6
 8007864:	881c      	ldrh	r4, [r3, #0]
 8007866:	2308      	movs	r3, #8
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	230a      	movs	r3, #10
 800786e:	18fb      	adds	r3, r7, r3
 8007870:	8819      	ldrh	r1, [r3, #0]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	0023      	movs	r3, r4
 800787e:	f000 f9f9 	bl	8007c74 <I2C_RequestMemoryWrite>
 8007882:	1e03      	subs	r3, r0, #0
 8007884:	d005      	beq.n	8007892 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2240      	movs	r2, #64	@ 0x40
 800788a:	2100      	movs	r1, #0
 800788c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e0b5      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	2bff      	cmp	r3, #255	@ 0xff
 800789a:	d911      	bls.n	80078c0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	22ff      	movs	r2, #255	@ 0xff
 80078a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	045c      	lsls	r4, r3, #17
 80078ac:	230a      	movs	r3, #10
 80078ae:	18fb      	adds	r3, r7, r3
 80078b0:	8819      	ldrh	r1, [r3, #0]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	2300      	movs	r3, #0
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	0023      	movs	r3, r4
 80078ba:	f000 fd3b 	bl	8008334 <I2C_TransferConfig>
 80078be:	e012      	b.n	80078e6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	049c      	lsls	r4, r3, #18
 80078d4:	230a      	movs	r3, #10
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	8819      	ldrh	r1, [r3, #0]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	2300      	movs	r3, #0
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	0023      	movs	r3, r4
 80078e2:	f000 fd27 	bl	8008334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	0018      	movs	r0, r3
 80078ee:	f000 fb01 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 80078f2:	1e03      	subs	r3, r0, #0
 80078f4:	d001      	beq.n	80078fa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e081      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d03a      	beq.n	80079aa <HAL_I2C_Mem_Write+0x1fa>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d136      	bne.n	80079aa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800793c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	0013      	movs	r3, r2
 8007946:	2200      	movs	r2, #0
 8007948:	2180      	movs	r1, #128	@ 0x80
 800794a:	f000 fa7b 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 800794e:	1e03      	subs	r3, r0, #0
 8007950:	d001      	beq.n	8007956 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e053      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800795a:	b29b      	uxth	r3, r3
 800795c:	2bff      	cmp	r3, #255	@ 0xff
 800795e:	d911      	bls.n	8007984 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	22ff      	movs	r2, #255	@ 0xff
 8007964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796a:	b2da      	uxtb	r2, r3
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	045c      	lsls	r4, r3, #17
 8007970:	230a      	movs	r3, #10
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	8819      	ldrh	r1, [r3, #0]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	2300      	movs	r3, #0
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	0023      	movs	r3, r4
 800797e:	f000 fcd9 	bl	8008334 <I2C_TransferConfig>
 8007982:	e012      	b.n	80079aa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007992:	b2da      	uxtb	r2, r3
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	049c      	lsls	r4, r3, #18
 8007998:	230a      	movs	r3, #10
 800799a:	18fb      	adds	r3, r7, r3
 800799c:	8819      	ldrh	r1, [r3, #0]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	0023      	movs	r3, r4
 80079a6:	f000 fcc5 	bl	8008334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d198      	bne.n	80078e6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f000 fae0 	bl	8007f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079c0:	1e03      	subs	r3, r0, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e01a      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2220      	movs	r2, #32
 80079ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	490b      	ldr	r1, [pc, #44]	@ (8007a08 <HAL_I2C_Mem_Write+0x258>)
 80079dc:	400a      	ands	r2, r1
 80079de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2241      	movs	r2, #65	@ 0x41
 80079e4:	2120      	movs	r1, #32
 80079e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2242      	movs	r2, #66	@ 0x42
 80079ec:	2100      	movs	r1, #0
 80079ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2240      	movs	r2, #64	@ 0x40
 80079f4:	2100      	movs	r1, #0
 80079f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	e000      	b.n	80079fe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80079fc:	2302      	movs	r3, #2
  }
}
 80079fe:	0018      	movs	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b007      	add	sp, #28
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	fe00e800 	.word	0xfe00e800

08007a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b089      	sub	sp, #36	@ 0x24
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	000c      	movs	r4, r1
 8007a16:	0010      	movs	r0, r2
 8007a18:	0019      	movs	r1, r3
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	18fb      	adds	r3, r7, r3
 8007a1e:	1c22      	adds	r2, r4, #0
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	2308      	movs	r3, #8
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	1c02      	adds	r2, r0, #0
 8007a28:	801a      	strh	r2, [r3, #0]
 8007a2a:	1dbb      	adds	r3, r7, #6
 8007a2c:	1c0a      	adds	r2, r1, #0
 8007a2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2241      	movs	r2, #65	@ 0x41
 8007a34:	5c9b      	ldrb	r3, [r3, r2]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d000      	beq.n	8007a3e <HAL_I2C_Mem_Read+0x32>
 8007a3c:	e110      	b.n	8007c60 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <HAL_I2C_Mem_Read+0x42>
 8007a44:	232c      	movs	r3, #44	@ 0x2c
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2280      	movs	r2, #128	@ 0x80
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e103      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2240      	movs	r2, #64	@ 0x40
 8007a5e:	5c9b      	ldrb	r3, [r3, r2]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_I2C_Mem_Read+0x5c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e0fc      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2240      	movs	r2, #64	@ 0x40
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a70:	f7fd ffe6 	bl	8005a40 <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	0219      	lsls	r1, r3, #8
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2319      	movs	r3, #25
 8007a84:	2201      	movs	r2, #1
 8007a86:	f000 f9dd 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007a8a:	1e03      	subs	r3, r0, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e0e7      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2241      	movs	r2, #65	@ 0x41
 8007a96:	2122      	movs	r1, #34	@ 0x22
 8007a98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2242      	movs	r2, #66	@ 0x42
 8007a9e:	2140      	movs	r1, #64	@ 0x40
 8007aa0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	222c      	movs	r2, #44	@ 0x2c
 8007ab2:	18ba      	adds	r2, r7, r2
 8007ab4:	8812      	ldrh	r2, [r2, #0]
 8007ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007abe:	1dbb      	adds	r3, r7, #6
 8007ac0:	881c      	ldrh	r4, [r3, #0]
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	881a      	ldrh	r2, [r3, #0]
 8007ac8:	230a      	movs	r3, #10
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	8819      	ldrh	r1, [r3, #0]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	9301      	str	r3, [sp, #4]
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	0023      	movs	r3, r4
 8007ada:	f000 f92f 	bl	8007d3c <I2C_RequestMemoryRead>
 8007ade:	1e03      	subs	r3, r0, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2240      	movs	r2, #64	@ 0x40
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e0b9      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2bff      	cmp	r3, #255	@ 0xff
 8007af6:	d911      	bls.n	8007b1c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	22ff      	movs	r2, #255	@ 0xff
 8007afc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	2380      	movs	r3, #128	@ 0x80
 8007b06:	045c      	lsls	r4, r3, #17
 8007b08:	230a      	movs	r3, #10
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	8819      	ldrh	r1, [r3, #0]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	4b56      	ldr	r3, [pc, #344]	@ (8007c6c <HAL_I2C_Mem_Read+0x260>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	0023      	movs	r3, r4
 8007b16:	f000 fc0d 	bl	8008334 <I2C_TransferConfig>
 8007b1a:	e012      	b.n	8007b42 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	2380      	movs	r3, #128	@ 0x80
 8007b2e:	049c      	lsls	r4, r3, #18
 8007b30:	230a      	movs	r3, #10
 8007b32:	18fb      	adds	r3, r7, r3
 8007b34:	8819      	ldrh	r1, [r3, #0]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	4b4c      	ldr	r3, [pc, #304]	@ (8007c6c <HAL_I2C_Mem_Read+0x260>)
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	0023      	movs	r3, r4
 8007b3e:	f000 fbf9 	bl	8008334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	0013      	movs	r3, r2
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2104      	movs	r1, #4
 8007b50:	f000 f978 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007b54:	1e03      	subs	r3, r0, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e082      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03a      	beq.n	8007c0e <HAL_I2C_Mem_Read+0x202>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d136      	bne.n	8007c0e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	0013      	movs	r3, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	2180      	movs	r1, #128	@ 0x80
 8007bae:	f000 f949 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e053      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2bff      	cmp	r3, #255	@ 0xff
 8007bc2:	d911      	bls.n	8007be8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	2380      	movs	r3, #128	@ 0x80
 8007bd2:	045c      	lsls	r4, r3, #17
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	8819      	ldrh	r1, [r3, #0]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	0023      	movs	r3, r4
 8007be2:	f000 fba7 	bl	8008334 <I2C_TransferConfig>
 8007be6:	e012      	b.n	8007c0e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	2380      	movs	r3, #128	@ 0x80
 8007bfa:	049c      	lsls	r4, r3, #18
 8007bfc:	230a      	movs	r3, #10
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	8819      	ldrh	r1, [r3, #0]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	0023      	movs	r3, r4
 8007c0a:	f000 fb93 	bl	8008334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d194      	bne.n	8007b42 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f000 f9ae 	bl	8007f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c24:	1e03      	subs	r3, r0, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e01a      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2220      	movs	r2, #32
 8007c32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	490c      	ldr	r1, [pc, #48]	@ (8007c70 <HAL_I2C_Mem_Read+0x264>)
 8007c40:	400a      	ands	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2241      	movs	r2, #65	@ 0x41
 8007c48:	2120      	movs	r1, #32
 8007c4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2242      	movs	r2, #66	@ 0x42
 8007c50:	2100      	movs	r1, #0
 8007c52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2240      	movs	r2, #64	@ 0x40
 8007c58:	2100      	movs	r1, #0
 8007c5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
  }
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b007      	add	sp, #28
 8007c68:	bd90      	pop	{r4, r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	80002400 	.word	0x80002400
 8007c70:	fe00e800 	.word	0xfe00e800

08007c74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	000c      	movs	r4, r1
 8007c7e:	0010      	movs	r0, r2
 8007c80:	0019      	movs	r1, r3
 8007c82:	250a      	movs	r5, #10
 8007c84:	197b      	adds	r3, r7, r5
 8007c86:	1c22      	adds	r2, r4, #0
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	1c02      	adds	r2, r0, #0
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	1dbb      	adds	r3, r7, #6
 8007c94:	1c0a      	adds	r2, r1, #0
 8007c96:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c98:	1dbb      	adds	r3, r7, #6
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	2380      	movs	r3, #128	@ 0x80
 8007ca0:	045c      	lsls	r4, r3, #17
 8007ca2:	197b      	adds	r3, r7, r5
 8007ca4:	8819      	ldrh	r1, [r3, #0]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	4b23      	ldr	r3, [pc, #140]	@ (8007d38 <I2C_RequestMemoryWrite+0xc4>)
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	0023      	movs	r3, r4
 8007cae:	f000 fb41 	bl	8008334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb4:	6a39      	ldr	r1, [r7, #32]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 f91b 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cbe:	1e03      	subs	r3, r0, #0
 8007cc0:	d001      	beq.n	8007cc6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e033      	b.n	8007d2e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cc6:	1dbb      	adds	r3, r7, #6
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d107      	bne.n	8007cde <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cce:	2308      	movs	r3, #8
 8007cd0:	18fb      	adds	r3, r7, r3
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cdc:	e019      	b.n	8007d12 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cde:	2308      	movs	r3, #8
 8007ce0:	18fb      	adds	r3, r7, r3
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf2:	6a39      	ldr	r1, [r7, #32]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f000 f8fc 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cfc:	1e03      	subs	r3, r0, #0
 8007cfe:	d001      	beq.n	8007d04 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e014      	b.n	8007d2e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d04:	2308      	movs	r3, #8
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	0013      	movs	r3, r2
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2180      	movs	r1, #128	@ 0x80
 8007d20:	f000 f890 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007d24:	1e03      	subs	r3, r0, #0
 8007d26:	d001      	beq.n	8007d2c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	0018      	movs	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b004      	add	sp, #16
 8007d34:	bdb0      	pop	{r4, r5, r7, pc}
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	80002000 	.word	0x80002000

08007d3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007d3c:	b5b0      	push	{r4, r5, r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	000c      	movs	r4, r1
 8007d46:	0010      	movs	r0, r2
 8007d48:	0019      	movs	r1, r3
 8007d4a:	250a      	movs	r5, #10
 8007d4c:	197b      	adds	r3, r7, r5
 8007d4e:	1c22      	adds	r2, r4, #0
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	2308      	movs	r3, #8
 8007d54:	18fb      	adds	r3, r7, r3
 8007d56:	1c02      	adds	r2, r0, #0
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	1dbb      	adds	r3, r7, #6
 8007d5c:	1c0a      	adds	r2, r1, #0
 8007d5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d60:	1dbb      	adds	r3, r7, #6
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	197b      	adds	r3, r7, r5
 8007d68:	8819      	ldrh	r1, [r3, #0]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	4b23      	ldr	r3, [pc, #140]	@ (8007dfc <I2C_RequestMemoryRead+0xc0>)
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	2300      	movs	r3, #0
 8007d72:	f000 fadf 	bl	8008334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d78:	6a39      	ldr	r1, [r7, #32]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f000 f8b9 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d82:	1e03      	subs	r3, r0, #0
 8007d84:	d001      	beq.n	8007d8a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e033      	b.n	8007df2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d8a:	1dbb      	adds	r3, r7, #6
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d107      	bne.n	8007da2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d92:	2308      	movs	r3, #8
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007da0:	e019      	b.n	8007dd6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007da2:	2308      	movs	r3, #8
 8007da4:	18fb      	adds	r3, r7, r3
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	0a1b      	lsrs	r3, r3, #8
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db6:	6a39      	ldr	r1, [r7, #32]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f89a 	bl	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007dc0:	1e03      	subs	r3, r0, #0
 8007dc2:	d001      	beq.n	8007dc8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e014      	b.n	8007df2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc8:	2308      	movs	r3, #8
 8007dca:	18fb      	adds	r3, r7, r3
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd6:	6a3a      	ldr	r2, [r7, #32]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	0013      	movs	r3, r2
 8007de0:	2200      	movs	r2, #0
 8007de2:	2140      	movs	r1, #64	@ 0x40
 8007de4:	f000 f82e 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d001      	beq.n	8007df0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	0018      	movs	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b004      	add	sp, #16
 8007df8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dfa:	46c0      	nop			@ (mov r8, r8)
 8007dfc:	80002000 	.word	0x80002000

08007e00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d103      	bne.n	8007e1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2201      	movs	r2, #1
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d007      	beq.n	8007e3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2101      	movs	r1, #1
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	619a      	str	r2, [r3, #24]
  }
}
 8007e3c:	46c0      	nop			@ (mov r8, r8)
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b002      	add	sp, #8
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	1dfb      	adds	r3, r7, #7
 8007e52:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e54:	e03a      	b.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 f971 	bl	8008144 <I2C_IsErrorOccurred>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e040      	b.n	8007eec <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	d02d      	beq.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7fd fde6 	bl	8005a40 <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <I2C_WaitOnFlagUntilTimeout+0x42>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d122      	bne.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	425a      	negs	r2, r3
 8007e96:	4153      	adcs	r3, r2
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	1dfb      	adds	r3, r7, #7
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d113      	bne.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2241      	movs	r2, #65	@ 0x41
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2242      	movs	r2, #66	@ 0x42
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2240      	movs	r2, #64	@ 0x40
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e00f      	b.n	8007eec <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	425a      	negs	r2, r3
 8007edc:	4153      	adcs	r3, r2
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	001a      	movs	r2, r3
 8007ee2:	1dfb      	adds	r3, r7, #7
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d0b5      	beq.n	8007e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	0018      	movs	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b004      	add	sp, #16
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f00:	e032      	b.n	8007f68 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 f91b 	bl	8008144 <I2C_IsErrorOccurred>
 8007f0e:	1e03      	subs	r3, r0, #0
 8007f10:	d001      	beq.n	8007f16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e030      	b.n	8007f78 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	d025      	beq.n	8007f68 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1c:	f7fd fd90 	bl	8005a40 <HAL_GetTick>
 8007f20:	0002      	movs	r2, r0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11a      	bne.n	8007f68 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d013      	beq.n	8007f68 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f44:	2220      	movs	r2, #32
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2241      	movs	r2, #65	@ 0x41
 8007f50:	2120      	movs	r1, #32
 8007f52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2242      	movs	r2, #66	@ 0x42
 8007f58:	2100      	movs	r1, #0
 8007f5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2240      	movs	r2, #64	@ 0x40
 8007f60:	2100      	movs	r1, #0
 8007f62:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e007      	b.n	8007f78 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	4013      	ands	r3, r2
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d1c5      	bne.n	8007f02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	0018      	movs	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b004      	add	sp, #16
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f8c:	e02f      	b.n	8007fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f8d5 	bl	8008144 <I2C_IsErrorOccurred>
 8007f9a:	1e03      	subs	r3, r0, #0
 8007f9c:	d001      	beq.n	8007fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e02d      	b.n	8007ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa2:	f7fd fd4d 	bl	8005a40 <HAL_GetTick>
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d302      	bcc.n	8007fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11a      	bne.n	8007fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d013      	beq.n	8007fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fca:	2220      	movs	r2, #32
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2241      	movs	r2, #65	@ 0x41
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2242      	movs	r2, #66	@ 0x42
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2240      	movs	r2, #64	@ 0x40
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e007      	b.n	8007ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d1c8      	bne.n	8007f8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	0018      	movs	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	b004      	add	sp, #16
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008014:	2317      	movs	r3, #23
 8008016:	18fb      	adds	r3, r7, r3
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800801c:	e07b      	b.n	8008116 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	0018      	movs	r0, r3
 8008026:	f000 f88d 	bl	8008144 <I2C_IsErrorOccurred>
 800802a:	1e03      	subs	r3, r0, #0
 800802c:	d003      	beq.n	8008036 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800802e:	2317      	movs	r3, #23
 8008030:	18fb      	adds	r3, r7, r3
 8008032:	2201      	movs	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	2220      	movs	r2, #32
 800803e:	4013      	ands	r3, r2
 8008040:	2b20      	cmp	r3, #32
 8008042:	d140      	bne.n	80080c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8008044:	2117      	movs	r1, #23
 8008046:	187b      	adds	r3, r7, r1
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d13b      	bne.n	80080c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	2204      	movs	r2, #4
 8008056:	4013      	ands	r3, r2
 8008058:	2b04      	cmp	r3, #4
 800805a:	d106      	bne.n	800806a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008064:	187b      	adds	r3, r7, r1
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	2210      	movs	r2, #16
 8008072:	4013      	ands	r3, r2
 8008074:	2b10      	cmp	r3, #16
 8008076:	d123      	bne.n	80080c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2210      	movs	r2, #16
 800807e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2204      	movs	r2, #4
 8008084:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2220      	movs	r2, #32
 800808c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4929      	ldr	r1, [pc, #164]	@ (8008140 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800809a:	400a      	ands	r2, r1
 800809c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2241      	movs	r2, #65	@ 0x41
 80080a2:	2120      	movs	r1, #32
 80080a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2242      	movs	r2, #66	@ 0x42
 80080aa:	2100      	movs	r1, #0
 80080ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2240      	movs	r2, #64	@ 0x40
 80080b2:	2100      	movs	r1, #0
 80080b4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80080b6:	2317      	movs	r3, #23
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	2201      	movs	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e002      	b.n	80080c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80080c6:	f7fd fcbb 	bl	8005a40 <HAL_GetTick>
 80080ca:	0002      	movs	r2, r0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d11c      	bne.n	8008116 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80080dc:	2017      	movs	r0, #23
 80080de:	183b      	adds	r3, r7, r0
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d117      	bne.n	8008116 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2204      	movs	r2, #4
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d010      	beq.n	8008116 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	2220      	movs	r2, #32
 80080fa:	431a      	orrs	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2241      	movs	r2, #65	@ 0x41
 8008104:	2120      	movs	r1, #32
 8008106:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2240      	movs	r2, #64	@ 0x40
 800810c:	2100      	movs	r1, #0
 800810e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008110:	183b      	adds	r3, r7, r0
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2204      	movs	r2, #4
 800811e:	4013      	ands	r3, r2
 8008120:	2b04      	cmp	r3, #4
 8008122:	d005      	beq.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8008124:	2317      	movs	r3, #23
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d100      	bne.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800812e:	e776      	b.n	800801e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8008130:	2317      	movs	r3, #23
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	781b      	ldrb	r3, [r3, #0]
}
 8008136:	0018      	movs	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	b006      	add	sp, #24
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	fe00e800 	.word	0xfe00e800

08008144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	@ 0x28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2327      	movs	r3, #39	@ 0x27
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2210      	movs	r2, #16
 800816c:	4013      	ands	r3, r2
 800816e:	d100      	bne.n	8008172 <I2C_IsErrorOccurred+0x2e>
 8008170:	e079      	b.n	8008266 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2210      	movs	r2, #16
 8008178:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800817a:	e057      	b.n	800822c <I2C_IsErrorOccurred+0xe8>
 800817c:	2227      	movs	r2, #39	@ 0x27
 800817e:	18bb      	adds	r3, r7, r2
 8008180:	18ba      	adds	r2, r7, r2
 8008182:	7812      	ldrb	r2, [r2, #0]
 8008184:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3301      	adds	r3, #1
 800818a:	d04f      	beq.n	800822c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800818c:	f7fd fc58 	bl	8005a40 <HAL_GetTick>
 8008190:	0002      	movs	r2, r0
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	d302      	bcc.n	80081a2 <I2C_IsErrorOccurred+0x5e>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d144      	bne.n	800822c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	2380      	movs	r3, #128	@ 0x80
 80081aa:	01db      	lsls	r3, r3, #7
 80081ac:	4013      	ands	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80081b0:	2013      	movs	r0, #19
 80081b2:	183b      	adds	r3, r7, r0
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	2142      	movs	r1, #66	@ 0x42
 80081b8:	5c52      	ldrb	r2, [r2, r1]
 80081ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	2380      	movs	r3, #128	@ 0x80
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	401a      	ands	r2, r3
 80081c8:	2380      	movs	r3, #128	@ 0x80
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d126      	bne.n	800821e <I2C_IsErrorOccurred+0xda>
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	2380      	movs	r3, #128	@ 0x80
 80081d4:	01db      	lsls	r3, r3, #7
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d021      	beq.n	800821e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80081da:	183b      	adds	r3, r7, r0
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d01d      	beq.n	800821e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2180      	movs	r1, #128	@ 0x80
 80081ee:	01c9      	lsls	r1, r1, #7
 80081f0:	430a      	orrs	r2, r1
 80081f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081f4:	f7fd fc24 	bl	8005a40 <HAL_GetTick>
 80081f8:	0003      	movs	r3, r0
 80081fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081fc:	e00f      	b.n	800821e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081fe:	f7fd fc1f 	bl	8005a40 <HAL_GetTick>
 8008202:	0002      	movs	r2, r0
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b19      	cmp	r3, #25
 800820a:	d908      	bls.n	800821e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2220      	movs	r2, #32
 8008210:	4313      	orrs	r3, r2
 8008212:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008214:	2327      	movs	r3, #39	@ 0x27
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	2201      	movs	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]

              break;
 800821c:	e006      	b.n	800822c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	2220      	movs	r2, #32
 8008226:	4013      	ands	r3, r2
 8008228:	2b20      	cmp	r3, #32
 800822a:	d1e8      	bne.n	80081fe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2220      	movs	r2, #32
 8008234:	4013      	ands	r3, r2
 8008236:	2b20      	cmp	r3, #32
 8008238:	d004      	beq.n	8008244 <I2C_IsErrorOccurred+0x100>
 800823a:	2327      	movs	r3, #39	@ 0x27
 800823c:	18fb      	adds	r3, r7, r3
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d09b      	beq.n	800817c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008244:	2327      	movs	r3, #39	@ 0x27
 8008246:	18fb      	adds	r3, r7, r3
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2220      	movs	r2, #32
 8008254:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	2204      	movs	r2, #4
 800825a:	4313      	orrs	r3, r2
 800825c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800825e:	2327      	movs	r3, #39	@ 0x27
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	2380      	movs	r3, #128	@ 0x80
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4013      	ands	r3, r2
 8008276:	d00c      	beq.n	8008292 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2201      	movs	r2, #1
 800827c:	4313      	orrs	r3, r2
 800827e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2280      	movs	r2, #128	@ 0x80
 8008286:	0052      	lsls	r2, r2, #1
 8008288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800828a:	2327      	movs	r3, #39	@ 0x27
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	2380      	movs	r3, #128	@ 0x80
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	4013      	ands	r3, r2
 800829a:	d00c      	beq.n	80082b6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2208      	movs	r2, #8
 80082a0:	4313      	orrs	r3, r2
 80082a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2280      	movs	r2, #128	@ 0x80
 80082aa:	00d2      	lsls	r2, r2, #3
 80082ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ae:	2327      	movs	r3, #39	@ 0x27
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	2201      	movs	r2, #1
 80082b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	2380      	movs	r3, #128	@ 0x80
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4013      	ands	r3, r2
 80082be:	d00c      	beq.n	80082da <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2202      	movs	r2, #2
 80082c4:	4313      	orrs	r3, r2
 80082c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2280      	movs	r2, #128	@ 0x80
 80082ce:	0092      	lsls	r2, r2, #2
 80082d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082d2:	2327      	movs	r3, #39	@ 0x27
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	2201      	movs	r2, #1
 80082d8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80082da:	2327      	movs	r3, #39	@ 0x27
 80082dc:	18fb      	adds	r3, r7, r3
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01d      	beq.n	8008320 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	0018      	movs	r0, r3
 80082e8:	f7ff fd8a 	bl	8007e00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	490e      	ldr	r1, [pc, #56]	@ (8008330 <I2C_IsErrorOccurred+0x1ec>)
 80082f8:	400a      	ands	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	431a      	orrs	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2241      	movs	r2, #65	@ 0x41
 800830c:	2120      	movs	r1, #32
 800830e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2242      	movs	r2, #66	@ 0x42
 8008314:	2100      	movs	r1, #0
 8008316:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2240      	movs	r2, #64	@ 0x40
 800831c:	2100      	movs	r1, #0
 800831e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008320:	2327      	movs	r3, #39	@ 0x27
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	781b      	ldrb	r3, [r3, #0]
}
 8008326:	0018      	movs	r0, r3
 8008328:	46bd      	mov	sp, r7
 800832a:	b00a      	add	sp, #40	@ 0x28
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			@ (mov r8, r8)
 8008330:	fe00e800 	.word	0xfe00e800

08008334 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	0008      	movs	r0, r1
 800833e:	0011      	movs	r1, r2
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	240a      	movs	r4, #10
 8008344:	193b      	adds	r3, r7, r4
 8008346:	1c02      	adds	r2, r0, #0
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	2009      	movs	r0, #9
 800834c:	183b      	adds	r3, r7, r0
 800834e:	1c0a      	adds	r2, r1, #0
 8008350:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008352:	193b      	adds	r3, r7, r4
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	059b      	lsls	r3, r3, #22
 8008358:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800835a:	183b      	adds	r3, r7, r0
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	0419      	lsls	r1, r3, #16
 8008360:	23ff      	movs	r3, #255	@ 0xff
 8008362:	041b      	lsls	r3, r3, #16
 8008364:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008366:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	4313      	orrs	r3, r2
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800837e:	0d51      	lsrs	r1, r2, #21
 8008380:	2280      	movs	r2, #128	@ 0x80
 8008382:	00d2      	lsls	r2, r2, #3
 8008384:	400a      	ands	r2, r1
 8008386:	4907      	ldr	r1, [pc, #28]	@ (80083a4 <I2C_TransferConfig+0x70>)
 8008388:	430a      	orrs	r2, r1
 800838a:	43d2      	mvns	r2, r2
 800838c:	401a      	ands	r2, r3
 800838e:	0011      	movs	r1, r2
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800839a:	46c0      	nop			@ (mov r8, r8)
 800839c:	46bd      	mov	sp, r7
 800839e:	b007      	add	sp, #28
 80083a0:	bd90      	pop	{r4, r7, pc}
 80083a2:	46c0      	nop			@ (mov r8, r8)
 80083a4:	03ff63ff 	.word	0x03ff63ff

080083a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2241      	movs	r2, #65	@ 0x41
 80083b6:	5c9b      	ldrb	r3, [r3, r2]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d138      	bne.n	8008430 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2240      	movs	r2, #64	@ 0x40
 80083c2:	5c9b      	ldrb	r3, [r3, r2]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e032      	b.n	8008432 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2240      	movs	r2, #64	@ 0x40
 80083d0:	2101      	movs	r1, #1
 80083d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2241      	movs	r2, #65	@ 0x41
 80083d8:	2124      	movs	r1, #36	@ 0x24
 80083da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2101      	movs	r1, #1
 80083e8:	438a      	bics	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4911      	ldr	r1, [pc, #68]	@ (800843c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80083f8:	400a      	ands	r2, r1
 80083fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2101      	movs	r1, #1
 8008418:	430a      	orrs	r2, r1
 800841a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2241      	movs	r2, #65	@ 0x41
 8008420:	2120      	movs	r1, #32
 8008422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2240      	movs	r2, #64	@ 0x40
 8008428:	2100      	movs	r1, #0
 800842a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	e000      	b.n	8008432 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008430:	2302      	movs	r3, #2
  }
}
 8008432:	0018      	movs	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	b002      	add	sp, #8
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	ffffefff 	.word	0xffffefff

08008440 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2241      	movs	r2, #65	@ 0x41
 800844e:	5c9b      	ldrb	r3, [r3, r2]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b20      	cmp	r3, #32
 8008454:	d139      	bne.n	80084ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2240      	movs	r2, #64	@ 0x40
 800845a:	5c9b      	ldrb	r3, [r3, r2]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008460:	2302      	movs	r3, #2
 8008462:	e033      	b.n	80084cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2240      	movs	r2, #64	@ 0x40
 8008468:	2101      	movs	r1, #1
 800846a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2241      	movs	r2, #65	@ 0x41
 8008470:	2124      	movs	r1, #36	@ 0x24
 8008472:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2101      	movs	r1, #1
 8008480:	438a      	bics	r2, r1
 8008482:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a11      	ldr	r2, [pc, #68]	@ (80084d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008490:	4013      	ands	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	021b      	lsls	r3, r3, #8
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2101      	movs	r1, #1
 80084b2:	430a      	orrs	r2, r1
 80084b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2241      	movs	r2, #65	@ 0x41
 80084ba:	2120      	movs	r1, #32
 80084bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2240      	movs	r2, #64	@ 0x40
 80084c2:	2100      	movs	r1, #0
 80084c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e000      	b.n	80084cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084ca:	2302      	movs	r3, #2
  }
}
 80084cc:	0018      	movs	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b004      	add	sp, #16
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	fffff0ff 	.word	0xfffff0ff

080084d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80084e0:	4b19      	ldr	r3, [pc, #100]	@ (8008548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a19      	ldr	r2, [pc, #100]	@ (800854c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	0019      	movs	r1, r3
 80084ea:	4b17      	ldr	r3, [pc, #92]	@ (8008548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	2380      	movs	r3, #128	@ 0x80
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d11f      	bne.n	800853c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80084fc:	4b14      	ldr	r3, [pc, #80]	@ (8008550 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	0013      	movs	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	189b      	adds	r3, r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4912      	ldr	r1, [pc, #72]	@ (8008554 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800850a:	0018      	movs	r0, r3
 800850c:	f7f7 fe14 	bl	8000138 <__udivsi3>
 8008510:	0003      	movs	r3, r0
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008516:	e008      	b.n	800852a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3b01      	subs	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e001      	b.n	800852a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e009      	b.n	800853e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800852a:	4b07      	ldr	r3, [pc, #28]	@ (8008548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800852c:	695a      	ldr	r2, [r3, #20]
 800852e:	2380      	movs	r3, #128	@ 0x80
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	401a      	ands	r2, r3
 8008534:	2380      	movs	r3, #128	@ 0x80
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	429a      	cmp	r2, r3
 800853a:	d0ed      	beq.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	0018      	movs	r0, r3
 8008540:	46bd      	mov	sp, r7
 8008542:	b004      	add	sp, #16
 8008544:	bd80      	pop	{r7, pc}
 8008546:	46c0      	nop			@ (mov r8, r8)
 8008548:	40007000 	.word	0x40007000
 800854c:	fffff9ff 	.word	0xfffff9ff
 8008550:	20000010 	.word	0x20000010
 8008554:	000f4240 	.word	0x000f4240

08008558 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800855c:	4b03      	ldr	r3, [pc, #12]	@ (800856c <LL_RCC_GetAPB1Prescaler+0x14>)
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	23e0      	movs	r3, #224	@ 0xe0
 8008562:	01db      	lsls	r3, r3, #7
 8008564:	4013      	ands	r3, r2
}
 8008566:	0018      	movs	r0, r3
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40021000 	.word	0x40021000

08008570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e2f3      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2201      	movs	r2, #1
 8008588:	4013      	ands	r3, r2
 800858a:	d100      	bne.n	800858e <HAL_RCC_OscConfig+0x1e>
 800858c:	e07c      	b.n	8008688 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800858e:	4bc3      	ldr	r3, [pc, #780]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2238      	movs	r2, #56	@ 0x38
 8008594:	4013      	ands	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008598:	4bc0      	ldr	r3, [pc, #768]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2203      	movs	r2, #3
 800859e:	4013      	ands	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d102      	bne.n	80085ae <HAL_RCC_OscConfig+0x3e>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d002      	beq.n	80085b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d10b      	bne.n	80085cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b4:	4bb9      	ldr	r3, [pc, #740]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	029b      	lsls	r3, r3, #10
 80085bc:	4013      	ands	r3, r2
 80085be:	d062      	beq.n	8008686 <HAL_RCC_OscConfig+0x116>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d15e      	bne.n	8008686 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e2ce      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	025b      	lsls	r3, r3, #9
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d107      	bne.n	80085e8 <HAL_RCC_OscConfig+0x78>
 80085d8:	4bb0      	ldr	r3, [pc, #704]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4baf      	ldr	r3, [pc, #700]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80085de:	2180      	movs	r1, #128	@ 0x80
 80085e0:	0249      	lsls	r1, r1, #9
 80085e2:	430a      	orrs	r2, r1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e020      	b.n	800862a <HAL_RCC_OscConfig+0xba>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	23a0      	movs	r3, #160	@ 0xa0
 80085ee:	02db      	lsls	r3, r3, #11
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d10e      	bne.n	8008612 <HAL_RCC_OscConfig+0xa2>
 80085f4:	4ba9      	ldr	r3, [pc, #676]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	4ba8      	ldr	r3, [pc, #672]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80085fa:	2180      	movs	r1, #128	@ 0x80
 80085fc:	02c9      	lsls	r1, r1, #11
 80085fe:	430a      	orrs	r2, r1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	4ba6      	ldr	r3, [pc, #664]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4ba5      	ldr	r3, [pc, #660]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008608:	2180      	movs	r1, #128	@ 0x80
 800860a:	0249      	lsls	r1, r1, #9
 800860c:	430a      	orrs	r2, r1
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e00b      	b.n	800862a <HAL_RCC_OscConfig+0xba>
 8008612:	4ba2      	ldr	r3, [pc, #648]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4ba1      	ldr	r3, [pc, #644]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008618:	49a1      	ldr	r1, [pc, #644]	@ (80088a0 <HAL_RCC_OscConfig+0x330>)
 800861a:	400a      	ands	r2, r1
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	4b9f      	ldr	r3, [pc, #636]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b9e      	ldr	r3, [pc, #632]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008624:	499f      	ldr	r1, [pc, #636]	@ (80088a4 <HAL_RCC_OscConfig+0x334>)
 8008626:	400a      	ands	r2, r1
 8008628:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d014      	beq.n	800865c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008632:	f7fd fa05 	bl	8005a40 <HAL_GetTick>
 8008636:	0003      	movs	r3, r0
 8008638:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800863c:	f7fd fa00 	bl	8005a40 <HAL_GetTick>
 8008640:	0002      	movs	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b64      	cmp	r3, #100	@ 0x64
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e28d      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800864e:	4b93      	ldr	r3, [pc, #588]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	2380      	movs	r3, #128	@ 0x80
 8008654:	029b      	lsls	r3, r3, #10
 8008656:	4013      	ands	r3, r2
 8008658:	d0f0      	beq.n	800863c <HAL_RCC_OscConfig+0xcc>
 800865a:	e015      	b.n	8008688 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865c:	f7fd f9f0 	bl	8005a40 <HAL_GetTick>
 8008660:	0003      	movs	r3, r0
 8008662:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008666:	f7fd f9eb 	bl	8005a40 <HAL_GetTick>
 800866a:	0002      	movs	r2, r0
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b64      	cmp	r3, #100	@ 0x64
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e278      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008678:	4b88      	ldr	r3, [pc, #544]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	2380      	movs	r3, #128	@ 0x80
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	4013      	ands	r3, r2
 8008682:	d1f0      	bne.n	8008666 <HAL_RCC_OscConfig+0xf6>
 8008684:	e000      	b.n	8008688 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008686:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2202      	movs	r2, #2
 800868e:	4013      	ands	r3, r2
 8008690:	d100      	bne.n	8008694 <HAL_RCC_OscConfig+0x124>
 8008692:	e099      	b.n	80087c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008694:	4b81      	ldr	r3, [pc, #516]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2238      	movs	r2, #56	@ 0x38
 800869a:	4013      	ands	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800869e:	4b7f      	ldr	r3, [pc, #508]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2203      	movs	r2, #3
 80086a4:	4013      	ands	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d102      	bne.n	80086b4 <HAL_RCC_OscConfig+0x144>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d002      	beq.n	80086ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d135      	bne.n	8008726 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086ba:	4b78      	ldr	r3, [pc, #480]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	2380      	movs	r3, #128	@ 0x80
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4013      	ands	r3, r2
 80086c4:	d005      	beq.n	80086d2 <HAL_RCC_OscConfig+0x162>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e24b      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086d2:	4b72      	ldr	r3, [pc, #456]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4a74      	ldr	r2, [pc, #464]	@ (80088a8 <HAL_RCC_OscConfig+0x338>)
 80086d8:	4013      	ands	r3, r2
 80086da:	0019      	movs	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	021a      	lsls	r2, r3, #8
 80086e2:	4b6e      	ldr	r3, [pc, #440]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d112      	bne.n	8008714 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80086ee:	4b6b      	ldr	r3, [pc, #428]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a6e      	ldr	r2, [pc, #440]	@ (80088ac <HAL_RCC_OscConfig+0x33c>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	0019      	movs	r1, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	4b67      	ldr	r3, [pc, #412]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80086fe:	430a      	orrs	r2, r1
 8008700:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008702:	4b66      	ldr	r3, [pc, #408]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	0adb      	lsrs	r3, r3, #11
 8008708:	2207      	movs	r2, #7
 800870a:	4013      	ands	r3, r2
 800870c:	4a68      	ldr	r2, [pc, #416]	@ (80088b0 <HAL_RCC_OscConfig+0x340>)
 800870e:	40da      	lsrs	r2, r3
 8008710:	4b68      	ldr	r3, [pc, #416]	@ (80088b4 <HAL_RCC_OscConfig+0x344>)
 8008712:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008714:	4b68      	ldr	r3, [pc, #416]	@ (80088b8 <HAL_RCC_OscConfig+0x348>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	0018      	movs	r0, r3
 800871a:	f7fd f935 	bl	8005988 <HAL_InitTick>
 800871e:	1e03      	subs	r3, r0, #0
 8008720:	d051      	beq.n	80087c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e221      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d030      	beq.n	8008790 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800872e:	4b5b      	ldr	r3, [pc, #364]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a5e      	ldr	r2, [pc, #376]	@ (80088ac <HAL_RCC_OscConfig+0x33c>)
 8008734:	4013      	ands	r3, r2
 8008736:	0019      	movs	r1, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	4b57      	ldr	r3, [pc, #348]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800873e:	430a      	orrs	r2, r1
 8008740:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008742:	4b56      	ldr	r3, [pc, #344]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b55      	ldr	r3, [pc, #340]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008748:	2180      	movs	r1, #128	@ 0x80
 800874a:	0049      	lsls	r1, r1, #1
 800874c:	430a      	orrs	r2, r1
 800874e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fd f976 	bl	8005a40 <HAL_GetTick>
 8008754:	0003      	movs	r3, r0
 8008756:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800875a:	f7fd f971 	bl	8005a40 <HAL_GetTick>
 800875e:	0002      	movs	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e1fe      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800876c:	4b4b      	ldr	r3, [pc, #300]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	2380      	movs	r3, #128	@ 0x80
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4013      	ands	r3, r2
 8008776:	d0f0      	beq.n	800875a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008778:	4b48      	ldr	r3, [pc, #288]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4a4a      	ldr	r2, [pc, #296]	@ (80088a8 <HAL_RCC_OscConfig+0x338>)
 800877e:	4013      	ands	r3, r2
 8008780:	0019      	movs	r1, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	021a      	lsls	r2, r3, #8
 8008788:	4b44      	ldr	r3, [pc, #272]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	e01b      	b.n	80087c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008790:	4b42      	ldr	r3, [pc, #264]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4b41      	ldr	r3, [pc, #260]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008796:	4949      	ldr	r1, [pc, #292]	@ (80088bc <HAL_RCC_OscConfig+0x34c>)
 8008798:	400a      	ands	r2, r1
 800879a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fd f950 	bl	8005a40 <HAL_GetTick>
 80087a0:	0003      	movs	r3, r0
 80087a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a6:	f7fd f94b 	bl	8005a40 <HAL_GetTick>
 80087aa:	0002      	movs	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e1d8      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087b8:	4b38      	ldr	r3, [pc, #224]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	2380      	movs	r3, #128	@ 0x80
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	4013      	ands	r3, r2
 80087c2:	d1f0      	bne.n	80087a6 <HAL_RCC_OscConfig+0x236>
 80087c4:	e000      	b.n	80087c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2208      	movs	r2, #8
 80087ce:	4013      	ands	r3, r2
 80087d0:	d047      	beq.n	8008862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80087d2:	4b32      	ldr	r3, [pc, #200]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	2238      	movs	r2, #56	@ 0x38
 80087d8:	4013      	ands	r3, r2
 80087da:	2b18      	cmp	r3, #24
 80087dc:	d10a      	bne.n	80087f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80087de:	4b2f      	ldr	r3, [pc, #188]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80087e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e2:	2202      	movs	r2, #2
 80087e4:	4013      	ands	r3, r2
 80087e6:	d03c      	beq.n	8008862 <HAL_RCC_OscConfig+0x2f2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d138      	bne.n	8008862 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e1ba      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80087fc:	4b27      	ldr	r3, [pc, #156]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 80087fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008800:	4b26      	ldr	r3, [pc, #152]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008802:	2101      	movs	r1, #1
 8008804:	430a      	orrs	r2, r1
 8008806:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008808:	f7fd f91a 	bl	8005a40 <HAL_GetTick>
 800880c:	0003      	movs	r3, r0
 800880e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008812:	f7fd f915 	bl	8005a40 <HAL_GetTick>
 8008816:	0002      	movs	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e1a2      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008824:	4b1d      	ldr	r3, [pc, #116]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008828:	2202      	movs	r2, #2
 800882a:	4013      	ands	r3, r2
 800882c:	d0f1      	beq.n	8008812 <HAL_RCC_OscConfig+0x2a2>
 800882e:	e018      	b.n	8008862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008830:	4b1a      	ldr	r3, [pc, #104]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008832:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008834:	4b19      	ldr	r3, [pc, #100]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008836:	2101      	movs	r1, #1
 8008838:	438a      	bics	r2, r1
 800883a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fd f900 	bl	8005a40 <HAL_GetTick>
 8008840:	0003      	movs	r3, r0
 8008842:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008846:	f7fd f8fb 	bl	8005a40 <HAL_GetTick>
 800884a:	0002      	movs	r2, r0
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e188      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008858:	4b10      	ldr	r3, [pc, #64]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 800885a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800885c:	2202      	movs	r2, #2
 800885e:	4013      	ands	r3, r2
 8008860:	d1f1      	bne.n	8008846 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2204      	movs	r2, #4
 8008868:	4013      	ands	r3, r2
 800886a:	d100      	bne.n	800886e <HAL_RCC_OscConfig+0x2fe>
 800886c:	e0c6      	b.n	80089fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800886e:	231f      	movs	r3, #31
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008876:	4b09      	ldr	r3, [pc, #36]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2238      	movs	r2, #56	@ 0x38
 800887c:	4013      	ands	r3, r2
 800887e:	2b20      	cmp	r3, #32
 8008880:	d11e      	bne.n	80088c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008882:	4b06      	ldr	r3, [pc, #24]	@ (800889c <HAL_RCC_OscConfig+0x32c>)
 8008884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008886:	2202      	movs	r2, #2
 8008888:	4013      	ands	r3, r2
 800888a:	d100      	bne.n	800888e <HAL_RCC_OscConfig+0x31e>
 800888c:	e0b6      	b.n	80089fc <HAL_RCC_OscConfig+0x48c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d000      	beq.n	8008898 <HAL_RCC_OscConfig+0x328>
 8008896:	e0b1      	b.n	80089fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e166      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
 800889c:	40021000 	.word	0x40021000
 80088a0:	fffeffff 	.word	0xfffeffff
 80088a4:	fffbffff 	.word	0xfffbffff
 80088a8:	ffff80ff 	.word	0xffff80ff
 80088ac:	ffffc7ff 	.word	0xffffc7ff
 80088b0:	00f42400 	.word	0x00f42400
 80088b4:	20000010 	.word	0x20000010
 80088b8:	20000014 	.word	0x20000014
 80088bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088c0:	4bac      	ldr	r3, [pc, #688]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80088c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c4:	2380      	movs	r3, #128	@ 0x80
 80088c6:	055b      	lsls	r3, r3, #21
 80088c8:	4013      	ands	r3, r2
 80088ca:	d101      	bne.n	80088d0 <HAL_RCC_OscConfig+0x360>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <HAL_RCC_OscConfig+0x362>
 80088d0:	2300      	movs	r3, #0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80088d6:	4ba7      	ldr	r3, [pc, #668]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80088d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088da:	4ba6      	ldr	r3, [pc, #664]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80088dc:	2180      	movs	r1, #128	@ 0x80
 80088de:	0549      	lsls	r1, r1, #21
 80088e0:	430a      	orrs	r2, r1
 80088e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80088e4:	4ba3      	ldr	r3, [pc, #652]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80088e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088e8:	2380      	movs	r3, #128	@ 0x80
 80088ea:	055b      	lsls	r3, r3, #21
 80088ec:	4013      	ands	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80088f2:	231f      	movs	r3, #31
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008b78 <HAL_RCC_OscConfig+0x608>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	2380      	movs	r3, #128	@ 0x80
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4013      	ands	r3, r2
 8008904:	d11a      	bne.n	800893c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008906:	4b9c      	ldr	r3, [pc, #624]	@ (8008b78 <HAL_RCC_OscConfig+0x608>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	4b9b      	ldr	r3, [pc, #620]	@ (8008b78 <HAL_RCC_OscConfig+0x608>)
 800890c:	2180      	movs	r1, #128	@ 0x80
 800890e:	0049      	lsls	r1, r1, #1
 8008910:	430a      	orrs	r2, r1
 8008912:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008914:	f7fd f894 	bl	8005a40 <HAL_GetTick>
 8008918:	0003      	movs	r3, r0
 800891a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800891e:	f7fd f88f 	bl	8005a40 <HAL_GetTick>
 8008922:	0002      	movs	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e11c      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008930:	4b91      	ldr	r3, [pc, #580]	@ (8008b78 <HAL_RCC_OscConfig+0x608>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4013      	ands	r3, r2
 800893a:	d0f0      	beq.n	800891e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d106      	bne.n	8008952 <HAL_RCC_OscConfig+0x3e2>
 8008944:	4b8b      	ldr	r3, [pc, #556]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008946:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008948:	4b8a      	ldr	r3, [pc, #552]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 800894a:	2101      	movs	r1, #1
 800894c:	430a      	orrs	r2, r1
 800894e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008950:	e01c      	b.n	800898c <HAL_RCC_OscConfig+0x41c>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b05      	cmp	r3, #5
 8008958:	d10c      	bne.n	8008974 <HAL_RCC_OscConfig+0x404>
 800895a:	4b86      	ldr	r3, [pc, #536]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 800895c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800895e:	4b85      	ldr	r3, [pc, #532]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008960:	2104      	movs	r1, #4
 8008962:	430a      	orrs	r2, r1
 8008964:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008966:	4b83      	ldr	r3, [pc, #524]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008968:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800896a:	4b82      	ldr	r3, [pc, #520]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 800896c:	2101      	movs	r1, #1
 800896e:	430a      	orrs	r2, r1
 8008970:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008972:	e00b      	b.n	800898c <HAL_RCC_OscConfig+0x41c>
 8008974:	4b7f      	ldr	r3, [pc, #508]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008976:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008978:	4b7e      	ldr	r3, [pc, #504]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 800897a:	2101      	movs	r1, #1
 800897c:	438a      	bics	r2, r1
 800897e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008980:	4b7c      	ldr	r3, [pc, #496]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008984:	4b7b      	ldr	r3, [pc, #492]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008986:	2104      	movs	r1, #4
 8008988:	438a      	bics	r2, r1
 800898a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d014      	beq.n	80089be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008994:	f7fd f854 	bl	8005a40 <HAL_GetTick>
 8008998:	0003      	movs	r3, r0
 800899a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800899c:	e009      	b.n	80089b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800899e:	f7fd f84f 	bl	8005a40 <HAL_GetTick>
 80089a2:	0002      	movs	r2, r0
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	4a74      	ldr	r2, [pc, #464]	@ (8008b7c <HAL_RCC_OscConfig+0x60c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e0db      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089b2:	4b70      	ldr	r3, [pc, #448]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80089b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b6:	2202      	movs	r2, #2
 80089b8:	4013      	ands	r3, r2
 80089ba:	d0f0      	beq.n	800899e <HAL_RCC_OscConfig+0x42e>
 80089bc:	e013      	b.n	80089e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089be:	f7fd f83f 	bl	8005a40 <HAL_GetTick>
 80089c2:	0003      	movs	r3, r0
 80089c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089c6:	e009      	b.n	80089dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c8:	f7fd f83a 	bl	8005a40 <HAL_GetTick>
 80089cc:	0002      	movs	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	4a6a      	ldr	r2, [pc, #424]	@ (8008b7c <HAL_RCC_OscConfig+0x60c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e0c6      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089dc:	4b65      	ldr	r3, [pc, #404]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80089de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e0:	2202      	movs	r2, #2
 80089e2:	4013      	ands	r3, r2
 80089e4:	d1f0      	bne.n	80089c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80089e6:	231f      	movs	r3, #31
 80089e8:	18fb      	adds	r3, r7, r3
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d105      	bne.n	80089fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80089f0:	4b60      	ldr	r3, [pc, #384]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80089f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 80089f6:	4962      	ldr	r1, [pc, #392]	@ (8008b80 <HAL_RCC_OscConfig+0x610>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d100      	bne.n	8008a06 <HAL_RCC_OscConfig+0x496>
 8008a04:	e0b0      	b.n	8008b68 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a06:	4b5b      	ldr	r3, [pc, #364]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2238      	movs	r2, #56	@ 0x38
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b10      	cmp	r3, #16
 8008a10:	d100      	bne.n	8008a14 <HAL_RCC_OscConfig+0x4a4>
 8008a12:	e078      	b.n	8008b06 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d153      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1c:	4b55      	ldr	r3, [pc, #340]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4b54      	ldr	r3, [pc, #336]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a22:	4958      	ldr	r1, [pc, #352]	@ (8008b84 <HAL_RCC_OscConfig+0x614>)
 8008a24:	400a      	ands	r2, r1
 8008a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a28:	f7fd f80a 	bl	8005a40 <HAL_GetTick>
 8008a2c:	0003      	movs	r3, r0
 8008a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a30:	e008      	b.n	8008a44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a32:	f7fd f805 	bl	8005a40 <HAL_GetTick>
 8008a36:	0002      	movs	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e092      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a44:	4b4b      	ldr	r3, [pc, #300]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	2380      	movs	r3, #128	@ 0x80
 8008a4a:	049b      	lsls	r3, r3, #18
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d1f0      	bne.n	8008a32 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a50:	4b48      	ldr	r3, [pc, #288]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	4a4c      	ldr	r2, [pc, #304]	@ (8008b88 <HAL_RCC_OscConfig+0x618>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	0019      	movs	r1, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	431a      	orrs	r2, r3
 8008a78:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b3c      	ldr	r3, [pc, #240]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a84:	2180      	movs	r1, #128	@ 0x80
 8008a86:	0449      	lsls	r1, r1, #17
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008a8c:	4b39      	ldr	r3, [pc, #228]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	4b38      	ldr	r3, [pc, #224]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008a92:	2180      	movs	r1, #128	@ 0x80
 8008a94:	0549      	lsls	r1, r1, #21
 8008a96:	430a      	orrs	r2, r1
 8008a98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9a:	f7fc ffd1 	bl	8005a40 <HAL_GetTick>
 8008a9e:	0003      	movs	r3, r0
 8008aa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa4:	f7fc ffcc 	bl	8005a40 <HAL_GetTick>
 8008aa8:	0002      	movs	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e059      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	2380      	movs	r3, #128	@ 0x80
 8008abc:	049b      	lsls	r3, r3, #18
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x534>
 8008ac2:	e051      	b.n	8008b68 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008aca:	492e      	ldr	r1, [pc, #184]	@ (8008b84 <HAL_RCC_OscConfig+0x614>)
 8008acc:	400a      	ands	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fc ffb6 	bl	8005a40 <HAL_GetTick>
 8008ad4:	0003      	movs	r3, r0
 8008ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ada:	f7fc ffb1 	bl	8005a40 <HAL_GetTick>
 8008ade:	0002      	movs	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e03e      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aec:	4b21      	ldr	r3, [pc, #132]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	2380      	movs	r3, #128	@ 0x80
 8008af2:	049b      	lsls	r3, r3, #18
 8008af4:	4013      	ands	r3, r2
 8008af6:	d1f0      	bne.n	8008ada <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008af8:	4b1e      	ldr	r3, [pc, #120]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008afe:	4923      	ldr	r1, [pc, #140]	@ (8008b8c <HAL_RCC_OscConfig+0x61c>)
 8008b00:	400a      	ands	r2, r1
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	e030      	b.n	8008b68 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d101      	bne.n	8008b12 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e02b      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008b12:	4b18      	ldr	r3, [pc, #96]	@ (8008b74 <HAL_RCC_OscConfig+0x604>)
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	401a      	ands	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d11e      	bne.n	8008b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2270      	movs	r2, #112	@ 0x70
 8008b2a:	401a      	ands	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d117      	bne.n	8008b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	23fe      	movs	r3, #254	@ 0xfe
 8008b38:	01db      	lsls	r3, r3, #7
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b40:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d10e      	bne.n	8008b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	23f8      	movs	r3, #248	@ 0xf8
 8008b4a:	039b      	lsls	r3, r3, #14
 8008b4c:	401a      	ands	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d106      	bne.n	8008b64 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	0f5b      	lsrs	r3, r3, #29
 8008b5a:	075a      	lsls	r2, r3, #29
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d001      	beq.n	8008b68 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	b008      	add	sp, #32
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	40021000 	.word	0x40021000
 8008b78:	40007000 	.word	0x40007000
 8008b7c:	00001388 	.word	0x00001388
 8008b80:	efffffff 	.word	0xefffffff
 8008b84:	feffffff 	.word	0xfeffffff
 8008b88:	1fc1808c 	.word	0x1fc1808c
 8008b8c:	effefffc 	.word	0xeffefffc

08008b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0e9      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ba4:	4b76      	ldr	r3, [pc, #472]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2207      	movs	r2, #7
 8008baa:	4013      	ands	r3, r2
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d91e      	bls.n	8008bf0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bb2:	4b73      	ldr	r3, [pc, #460]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2207      	movs	r2, #7
 8008bb8:	4393      	bics	r3, r2
 8008bba:	0019      	movs	r1, r3
 8008bbc:	4b70      	ldr	r3, [pc, #448]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008bc4:	f7fc ff3c 	bl	8005a40 <HAL_GetTick>
 8008bc8:	0003      	movs	r3, r0
 8008bca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bcc:	e009      	b.n	8008be2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bce:	f7fc ff37 	bl	8005a40 <HAL_GetTick>
 8008bd2:	0002      	movs	r2, r0
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8008d84 <HAL_RCC_ClockConfig+0x1f4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e0ca      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008be2:	4b67      	ldr	r3, [pc, #412]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2207      	movs	r2, #7
 8008be8:	4013      	ands	r3, r2
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d1ee      	bne.n	8008bce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d015      	beq.n	8008c26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	4013      	ands	r3, r2
 8008c02:	d006      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008c04:	4b60      	ldr	r3, [pc, #384]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	4b5f      	ldr	r3, [pc, #380]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c0a:	21e0      	movs	r1, #224	@ 0xe0
 8008c0c:	01c9      	lsls	r1, r1, #7
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c12:	4b5d      	ldr	r3, [pc, #372]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	4a5d      	ldr	r2, [pc, #372]	@ (8008d8c <HAL_RCC_ClockConfig+0x1fc>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	4b59      	ldr	r3, [pc, #356]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	d057      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c38:	4b53      	ldr	r3, [pc, #332]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	2380      	movs	r3, #128	@ 0x80
 8008c3e:	029b      	lsls	r3, r3, #10
 8008c40:	4013      	ands	r3, r2
 8008c42:	d12b      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e097      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d107      	bne.n	8008c60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c50:	4b4d      	ldr	r3, [pc, #308]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	049b      	lsls	r3, r3, #18
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d11f      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e08b      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d107      	bne.n	8008c78 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c68:	4b47      	ldr	r3, [pc, #284]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4013      	ands	r3, r2
 8008c72:	d113      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e07f      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d106      	bne.n	8008c8e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c80:	4b41      	ldr	r3, [pc, #260]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c84:	2202      	movs	r2, #2
 8008c86:	4013      	ands	r3, r2
 8008c88:	d108      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e074      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c92:	2202      	movs	r2, #2
 8008c94:	4013      	ands	r3, r2
 8008c96:	d101      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e06d      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	4393      	bics	r3, r2
 8008ca4:	0019      	movs	r1, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	4b37      	ldr	r3, [pc, #220]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008cac:	430a      	orrs	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb0:	f7fc fec6 	bl	8005a40 <HAL_GetTick>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cb8:	e009      	b.n	8008cce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cba:	f7fc fec1 	bl	8005a40 <HAL_GetTick>
 8008cbe:	0002      	movs	r2, r0
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8008d84 <HAL_RCC_ClockConfig+0x1f4>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e054      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cce:	4b2e      	ldr	r3, [pc, #184]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2238      	movs	r2, #56	@ 0x38
 8008cd4:	401a      	ands	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d1ec      	bne.n	8008cba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ce0:	4b27      	ldr	r3, [pc, #156]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d21e      	bcs.n	8008d2c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cee:	4b24      	ldr	r3, [pc, #144]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2207      	movs	r2, #7
 8008cf4:	4393      	bics	r3, r2
 8008cf6:	0019      	movs	r1, r3
 8008cf8:	4b21      	ldr	r3, [pc, #132]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d00:	f7fc fe9e 	bl	8005a40 <HAL_GetTick>
 8008d04:	0003      	movs	r3, r0
 8008d06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d08:	e009      	b.n	8008d1e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d0a:	f7fc fe99 	bl	8005a40 <HAL_GetTick>
 8008d0e:	0002      	movs	r2, r0
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	4a1b      	ldr	r2, [pc, #108]	@ (8008d84 <HAL_RCC_ClockConfig+0x1f4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e02c      	b.n	8008d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d1e:	4b18      	ldr	r3, [pc, #96]	@ (8008d80 <HAL_RCC_ClockConfig+0x1f0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2207      	movs	r2, #7
 8008d24:	4013      	ands	r3, r2
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d1ee      	bne.n	8008d0a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2204      	movs	r2, #4
 8008d32:	4013      	ands	r3, r2
 8008d34:	d009      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008d36:	4b14      	ldr	r3, [pc, #80]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	4a15      	ldr	r2, [pc, #84]	@ (8008d90 <HAL_RCC_ClockConfig+0x200>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	0019      	movs	r1, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	4b10      	ldr	r3, [pc, #64]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008d46:	430a      	orrs	r2, r1
 8008d48:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008d4a:	f000 f829 	bl	8008da0 <HAL_RCC_GetSysClockFreq>
 8008d4e:	0001      	movs	r1, r0
 8008d50:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <HAL_RCC_ClockConfig+0x1f8>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	220f      	movs	r2, #15
 8008d58:	401a      	ands	r2, r3
 8008d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d94 <HAL_RCC_ClockConfig+0x204>)
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	58d3      	ldr	r3, [r2, r3]
 8008d60:	221f      	movs	r2, #31
 8008d62:	4013      	ands	r3, r2
 8008d64:	000a      	movs	r2, r1
 8008d66:	40da      	lsrs	r2, r3
 8008d68:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <HAL_RCC_ClockConfig+0x208>)
 8008d6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d9c <HAL_RCC_ClockConfig+0x20c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	0018      	movs	r0, r3
 8008d72:	f7fc fe09 	bl	8005988 <HAL_InitTick>
 8008d76:	0003      	movs	r3, r0
}
 8008d78:	0018      	movs	r0, r3
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	b004      	add	sp, #16
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40022000 	.word	0x40022000
 8008d84:	00001388 	.word	0x00001388
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	fffff0ff 	.word	0xfffff0ff
 8008d90:	ffff8fff 	.word	0xffff8fff
 8008d94:	0800e880 	.word	0x0800e880
 8008d98:	20000010 	.word	0x20000010
 8008d9c:	20000014 	.word	0x20000014

08008da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008da6:	4b3c      	ldr	r3, [pc, #240]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2238      	movs	r2, #56	@ 0x38
 8008dac:	4013      	ands	r3, r2
 8008dae:	d10f      	bne.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008db0:	4b39      	ldr	r3, [pc, #228]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	0adb      	lsrs	r3, r3, #11
 8008db6:	2207      	movs	r2, #7
 8008db8:	4013      	ands	r3, r2
 8008dba:	2201      	movs	r2, #1
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	0013      	movs	r3, r2
 8008dc0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	4835      	ldr	r0, [pc, #212]	@ (8008e9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008dc6:	f7f7 f9b7 	bl	8000138 <__udivsi3>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	e05d      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dd0:	4b31      	ldr	r3, [pc, #196]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2238      	movs	r2, #56	@ 0x38
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d102      	bne.n	8008de2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ddc:	4b30      	ldr	r3, [pc, #192]	@ (8008ea0 <HAL_RCC_GetSysClockFreq+0x100>)
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e054      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008de2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2238      	movs	r2, #56	@ 0x38
 8008de8:	4013      	ands	r3, r2
 8008dea:	2b10      	cmp	r3, #16
 8008dec:	d138      	bne.n	8008e60 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008dee:	4b2a      	ldr	r3, [pc, #168]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	2203      	movs	r2, #3
 8008df4:	4013      	ands	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008df8:	4b27      	ldr	r3, [pc, #156]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	091b      	lsrs	r3, r3, #4
 8008dfe:	2207      	movs	r2, #7
 8008e00:	4013      	ands	r3, r2
 8008e02:	3301      	adds	r3, #1
 8008e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d10d      	bne.n	8008e28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	4824      	ldr	r0, [pc, #144]	@ (8008ea0 <HAL_RCC_GetSysClockFreq+0x100>)
 8008e10:	f7f7 f992 	bl	8000138 <__udivsi3>
 8008e14:	0003      	movs	r3, r0
 8008e16:	0019      	movs	r1, r3
 8008e18:	4b1f      	ldr	r3, [pc, #124]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	0a1b      	lsrs	r3, r3, #8
 8008e1e:	227f      	movs	r2, #127	@ 0x7f
 8008e20:	4013      	ands	r3, r2
 8008e22:	434b      	muls	r3, r1
 8008e24:	617b      	str	r3, [r7, #20]
        break;
 8008e26:	e00d      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	481c      	ldr	r0, [pc, #112]	@ (8008e9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008e2c:	f7f7 f984 	bl	8000138 <__udivsi3>
 8008e30:	0003      	movs	r3, r0
 8008e32:	0019      	movs	r1, r3
 8008e34:	4b18      	ldr	r3, [pc, #96]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	227f      	movs	r2, #127	@ 0x7f
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	434b      	muls	r3, r1
 8008e40:	617b      	str	r3, [r7, #20]
        break;
 8008e42:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008e44:	4b14      	ldr	r3, [pc, #80]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	0f5b      	lsrs	r3, r3, #29
 8008e4a:	2207      	movs	r2, #7
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	3301      	adds	r3, #1
 8008e50:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	6978      	ldr	r0, [r7, #20]
 8008e56:	f7f7 f96f 	bl	8000138 <__udivsi3>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	e015      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008e60:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2238      	movs	r2, #56	@ 0x38
 8008e66:	4013      	ands	r3, r2
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d103      	bne.n	8008e74 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	021b      	lsls	r3, r3, #8
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	e00b      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e74:	4b08      	ldr	r3, [pc, #32]	@ (8008e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	2238      	movs	r2, #56	@ 0x38
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b18      	cmp	r3, #24
 8008e7e:	d103      	bne.n	8008e88 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008e80:	23fa      	movs	r3, #250	@ 0xfa
 8008e82:	01db      	lsls	r3, r3, #7
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	e001      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e8c:	693b      	ldr	r3, [r7, #16]
}
 8008e8e:	0018      	movs	r0, r3
 8008e90:	46bd      	mov	sp, r7
 8008e92:	b006      	add	sp, #24
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	40021000 	.word	0x40021000
 8008e9c:	00f42400 	.word	0x00f42400
 8008ea0:	007a1200 	.word	0x007a1200

08008ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ea8:	4b02      	ldr	r3, [pc, #8]	@ (8008eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
}
 8008eac:	0018      	movs	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	46c0      	nop			@ (mov r8, r8)
 8008eb4:	20000010 	.word	0x20000010

08008eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eb8:	b5b0      	push	{r4, r5, r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008ebc:	f7ff fff2 	bl	8008ea4 <HAL_RCC_GetHCLKFreq>
 8008ec0:	0004      	movs	r4, r0
 8008ec2:	f7ff fb49 	bl	8008558 <LL_RCC_GetAPB1Prescaler>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	0b1a      	lsrs	r2, r3, #12
 8008eca:	4b05      	ldr	r3, [pc, #20]	@ (8008ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ecc:	0092      	lsls	r2, r2, #2
 8008ece:	58d3      	ldr	r3, [r2, r3]
 8008ed0:	221f      	movs	r2, #31
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	40dc      	lsrs	r4, r3
 8008ed6:	0023      	movs	r3, r4
}
 8008ed8:	0018      	movs	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	0800e8c0 	.word	0x0800e8c0

08008ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008eec:	2313      	movs	r3, #19
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ef4:	2312      	movs	r3, #18
 8008ef6:	18fb      	adds	r3, r7, r3
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	029b      	lsls	r3, r3, #10
 8008f04:	4013      	ands	r3, r2
 8008f06:	d100      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008f08:	e0a3      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f0a:	2011      	movs	r0, #17
 8008f0c:	183b      	adds	r3, r7, r0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f12:	4b86      	ldr	r3, [pc, #536]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f16:	2380      	movs	r3, #128	@ 0x80
 8008f18:	055b      	lsls	r3, r3, #21
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d110      	bne.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f1e:	4b83      	ldr	r3, [pc, #524]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f22:	4b82      	ldr	r3, [pc, #520]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008f24:	2180      	movs	r1, #128	@ 0x80
 8008f26:	0549      	lsls	r1, r1, #21
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f30:	2380      	movs	r3, #128	@ 0x80
 8008f32:	055b      	lsls	r3, r3, #21
 8008f34:	4013      	ands	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f3a:	183b      	adds	r3, r7, r0
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f40:	4b7b      	ldr	r3, [pc, #492]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b7a      	ldr	r3, [pc, #488]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008f46:	2180      	movs	r1, #128	@ 0x80
 8008f48:	0049      	lsls	r1, r1, #1
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f4e:	f7fc fd77 	bl	8005a40 <HAL_GetTick>
 8008f52:	0003      	movs	r3, r0
 8008f54:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f56:	e00b      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f58:	f7fc fd72 	bl	8005a40 <HAL_GetTick>
 8008f5c:	0002      	movs	r2, r0
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d904      	bls.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008f66:	2313      	movs	r3, #19
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	701a      	strb	r2, [r3, #0]
        break;
 8008f6e:	e005      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f70:	4b6f      	ldr	r3, [pc, #444]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	4013      	ands	r3, r2
 8008f7a:	d0ed      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008f7c:	2313      	movs	r3, #19
 8008f7e:	18fb      	adds	r3, r7, r3
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d154      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f86:	4b69      	ldr	r3, [pc, #420]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008f88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f8a:	23c0      	movs	r3, #192	@ 0xc0
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4013      	ands	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d019      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d014      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008fa2:	4b62      	ldr	r3, [pc, #392]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa6:	4a63      	ldr	r2, [pc, #396]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fac:	4b5f      	ldr	r3, [pc, #380]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fb2:	2180      	movs	r1, #128	@ 0x80
 8008fb4:	0249      	lsls	r1, r1, #9
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fba:	4b5c      	ldr	r3, [pc, #368]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fc0:	495d      	ldr	r1, [pc, #372]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fc6:	4b59      	ldr	r3, [pc, #356]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	d016      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7fc fd34 	bl	8005a40 <HAL_GetTick>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fdc:	e00c      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fde:	f7fc fd2f 	bl	8005a40 <HAL_GetTick>
 8008fe2:	0002      	movs	r2, r0
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	4a54      	ldr	r2, [pc, #336]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d904      	bls.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008fee:	2313      	movs	r3, #19
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	701a      	strb	r2, [r3, #0]
            break;
 8008ff6:	e004      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	4013      	ands	r3, r2
 8009000:	d0ed      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009002:	2313      	movs	r3, #19
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800900c:	4b47      	ldr	r3, [pc, #284]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800900e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009010:	4a48      	ldr	r2, [pc, #288]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009012:	4013      	ands	r3, r2
 8009014:	0019      	movs	r1, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	4b44      	ldr	r3, [pc, #272]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800901c:	430a      	orrs	r2, r1
 800901e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009020:	e00c      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009022:	2312      	movs	r3, #18
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	2213      	movs	r2, #19
 8009028:	18ba      	adds	r2, r7, r2
 800902a:	7812      	ldrb	r2, [r2, #0]
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	e005      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	2312      	movs	r3, #18
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	2213      	movs	r2, #19
 8009036:	18ba      	adds	r2, r7, r2
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800903c:	2311      	movs	r3, #17
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d105      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009046:	4b39      	ldr	r3, [pc, #228]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800904a:	4b38      	ldr	r3, [pc, #224]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800904c:	493c      	ldr	r1, [pc, #240]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800904e:	400a      	ands	r2, r1
 8009050:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	4013      	ands	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800905c:	4b33      	ldr	r3, [pc, #204]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800905e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009060:	2203      	movs	r2, #3
 8009062:	4393      	bics	r3, r2
 8009064:	0019      	movs	r1, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	4b30      	ldr	r3, [pc, #192]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800906c:	430a      	orrs	r2, r1
 800906e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2202      	movs	r2, #2
 8009076:	4013      	ands	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800907a:	4b2c      	ldr	r3, [pc, #176]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800907c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907e:	220c      	movs	r2, #12
 8009080:	4393      	bics	r3, r2
 8009082:	0019      	movs	r1, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	4b28      	ldr	r3, [pc, #160]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800908a:	430a      	orrs	r2, r1
 800908c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2220      	movs	r2, #32
 8009094:	4013      	ands	r3, r2
 8009096:	d009      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009098:	4b24      	ldr	r3, [pc, #144]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800909a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909c:	4a29      	ldr	r2, [pc, #164]	@ (8009144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800909e:	4013      	ands	r3, r2
 80090a0:	0019      	movs	r1, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	4b21      	ldr	r3, [pc, #132]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090a8:	430a      	orrs	r2, r1
 80090aa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	01db      	lsls	r3, r3, #7
 80090b4:	4013      	ands	r3, r2
 80090b6:	d015      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090b8:	4b1c      	ldr	r3, [pc, #112]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	0899      	lsrs	r1, r3, #2
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	695a      	ldr	r2, [r3, #20]
 80090c4:	4b19      	ldr	r3, [pc, #100]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090c6:	430a      	orrs	r2, r1
 80090c8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695a      	ldr	r2, [r3, #20]
 80090ce:	2380      	movs	r3, #128	@ 0x80
 80090d0:	05db      	lsls	r3, r3, #23
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80090d6:	4b15      	ldr	r3, [pc, #84]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	4b14      	ldr	r3, [pc, #80]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090dc:	2180      	movs	r1, #128	@ 0x80
 80090de:	0249      	lsls	r1, r1, #9
 80090e0:	430a      	orrs	r2, r1
 80090e2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	4013      	ands	r3, r2
 80090ee:	d016      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80090f0:	4b0e      	ldr	r3, [pc, #56]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80090f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f4:	4a14      	ldr	r2, [pc, #80]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	0019      	movs	r1, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009100:	430a      	orrs	r2, r1
 8009102:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	01db      	lsls	r3, r3, #7
 800910c:	429a      	cmp	r2, r3
 800910e:	d106      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009110:	4b06      	ldr	r3, [pc, #24]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	4b05      	ldr	r3, [pc, #20]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009116:	2180      	movs	r1, #128	@ 0x80
 8009118:	0249      	lsls	r1, r1, #9
 800911a:	430a      	orrs	r2, r1
 800911c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800911e:	2312      	movs	r3, #18
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	781b      	ldrb	r3, [r3, #0]
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b006      	add	sp, #24
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40021000 	.word	0x40021000
 8009130:	40007000 	.word	0x40007000
 8009134:	fffffcff 	.word	0xfffffcff
 8009138:	fffeffff 	.word	0xfffeffff
 800913c:	00001388 	.word	0x00001388
 8009140:	efffffff 	.word	0xefffffff
 8009144:	ffffcfff 	.word	0xffffcfff
 8009148:	ffff3fff 	.word	0xffff3fff

0800914c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0a8      	b.n	80092b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	2382      	movs	r3, #130	@ 0x82
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	429a      	cmp	r2, r3
 8009170:	d009      	beq.n	8009186 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	61da      	str	r2, [r3, #28]
 8009178:	e005      	b.n	8009186 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	225d      	movs	r2, #93	@ 0x5d
 8009190:	5c9b      	ldrb	r3, [r3, r2]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d107      	bne.n	80091a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	225c      	movs	r2, #92	@ 0x5c
 800919c:	2100      	movs	r1, #0
 800919e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7fc f8b0 	bl	8005308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	225d      	movs	r2, #93	@ 0x5d
 80091ac:	2102      	movs	r1, #2
 80091ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2140      	movs	r1, #64	@ 0x40
 80091bc:	438a      	bics	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	23e0      	movs	r3, #224	@ 0xe0
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d902      	bls.n	80091d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091cc:	2300      	movs	r3, #0
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e002      	b.n	80091d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091d2:	2380      	movs	r3, #128	@ 0x80
 80091d4:	015b      	lsls	r3, r3, #5
 80091d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	23f0      	movs	r3, #240	@ 0xf0
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d008      	beq.n	80091f6 <HAL_SPI_Init+0xaa>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	23e0      	movs	r3, #224	@ 0xe0
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d002      	beq.n	80091f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	2382      	movs	r3, #130	@ 0x82
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	401a      	ands	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6899      	ldr	r1, [r3, #8]
 8009204:	2384      	movs	r3, #132	@ 0x84
 8009206:	021b      	lsls	r3, r3, #8
 8009208:	400b      	ands	r3, r1
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2102      	movs	r1, #2
 8009212:	400b      	ands	r3, r1
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	2101      	movs	r1, #1
 800921c:	400b      	ands	r3, r1
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6999      	ldr	r1, [r3, #24]
 8009224:	2380      	movs	r3, #128	@ 0x80
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	400b      	ands	r3, r1
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	2138      	movs	r1, #56	@ 0x38
 8009232:	400b      	ands	r3, r1
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	2180      	movs	r1, #128	@ 0x80
 800923c:	400b      	ands	r3, r1
 800923e:	431a      	orrs	r2, r3
 8009240:	0011      	movs	r1, r2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009246:	2380      	movs	r3, #128	@ 0x80
 8009248:	019b      	lsls	r3, r3, #6
 800924a:	401a      	ands	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	0c1b      	lsrs	r3, r3, #16
 800925a:	2204      	movs	r2, #4
 800925c:	401a      	ands	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009262:	2110      	movs	r1, #16
 8009264:	400b      	ands	r3, r1
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800926c:	2108      	movs	r1, #8
 800926e:	400b      	ands	r3, r1
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68d9      	ldr	r1, [r3, #12]
 8009276:	23f0      	movs	r3, #240	@ 0xf0
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	400b      	ands	r3, r1
 800927c:	431a      	orrs	r2, r3
 800927e:	0011      	movs	r1, r2
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	2380      	movs	r3, #128	@ 0x80
 8009284:	015b      	lsls	r3, r3, #5
 8009286:	401a      	ands	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69da      	ldr	r2, [r3, #28]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4907      	ldr	r1, [pc, #28]	@ (80092b8 <HAL_SPI_Init+0x16c>)
 800929c:	400a      	ands	r2, r1
 800929e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	225d      	movs	r2, #93	@ 0x5d
 80092aa:	2101      	movs	r1, #1
 80092ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	0018      	movs	r0, r3
 80092b2:	46bd      	mov	sp, r7
 80092b4:	b004      	add	sp, #16
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	fffff7ff 	.word	0xfffff7ff

080092bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b089      	sub	sp, #36	@ 0x24
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	1dbb      	adds	r3, r7, #6
 80092ca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092cc:	2117      	movs	r1, #23
 80092ce:	187b      	adds	r3, r7, r1
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	225d      	movs	r2, #93	@ 0x5d
 80092d8:	5c9b      	ldrb	r3, [r3, r2]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d003      	beq.n	80092e8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80092e0:	187b      	adds	r3, r7, r1
 80092e2:	2202      	movs	r2, #2
 80092e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80092e6:	e12b      	b.n	8009540 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	2382      	movs	r3, #130	@ 0x82
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d113      	bne.n	800931c <HAL_SPI_Receive+0x60>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10f      	bne.n	800931c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	225d      	movs	r2, #93	@ 0x5d
 8009300:	2104      	movs	r1, #4
 8009302:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009304:	1dbb      	adds	r3, r7, #6
 8009306:	881c      	ldrh	r4, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	0023      	movs	r3, r4
 8009314:	f000 f924 	bl	8009560 <HAL_SPI_TransmitReceive>
 8009318:	0003      	movs	r3, r0
 800931a:	e118      	b.n	800954e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	225c      	movs	r2, #92	@ 0x5c
 8009320:	5c9b      	ldrb	r3, [r3, r2]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_SPI_Receive+0x6e>
 8009326:	2302      	movs	r3, #2
 8009328:	e111      	b.n	800954e <HAL_SPI_Receive+0x292>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	225c      	movs	r2, #92	@ 0x5c
 800932e:	2101      	movs	r1, #1
 8009330:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009332:	f7fc fb85 	bl	8005a40 <HAL_GetTick>
 8009336:	0003      	movs	r3, r0
 8009338:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_SPI_Receive+0x8c>
 8009340:	1dbb      	adds	r3, r7, #6
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d104      	bne.n	8009352 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8009348:	2317      	movs	r3, #23
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	2201      	movs	r2, #1
 800934e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009350:	e0f6      	b.n	8009540 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	225d      	movs	r2, #93	@ 0x5d
 8009356:	2104      	movs	r1, #4
 8009358:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1dba      	adds	r2, r7, #6
 800936a:	2144      	movs	r1, #68	@ 0x44
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	1dba      	adds	r2, r7, #6
 8009374:	2146      	movs	r1, #70	@ 0x46
 8009376:	8812      	ldrh	r2, [r2, #0]
 8009378:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	23e0      	movs	r3, #224	@ 0xe0
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d908      	bls.n	80093b6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	496a      	ldr	r1, [pc, #424]	@ (8009558 <HAL_SPI_Receive+0x29c>)
 80093b0:	400a      	ands	r2, r1
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	e008      	b.n	80093c8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2180      	movs	r1, #128	@ 0x80
 80093c2:	0149      	lsls	r1, r1, #5
 80093c4:	430a      	orrs	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	2380      	movs	r3, #128	@ 0x80
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d10f      	bne.n	80093f4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2140      	movs	r1, #64	@ 0x40
 80093e0:	438a      	bics	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	495b      	ldr	r1, [pc, #364]	@ (800955c <HAL_SPI_Receive+0x2a0>)
 80093f0:	400a      	ands	r2, r1
 80093f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2240      	movs	r2, #64	@ 0x40
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b40      	cmp	r3, #64	@ 0x40
 8009400:	d007      	beq.n	8009412 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2140      	movs	r1, #64	@ 0x40
 800940e:	430a      	orrs	r2, r1
 8009410:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	23e0      	movs	r3, #224	@ 0xe0
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	429a      	cmp	r2, r3
 800941c:	d900      	bls.n	8009420 <HAL_SPI_Receive+0x164>
 800941e:	e071      	b.n	8009504 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009420:	e035      	b.n	800948e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2201      	movs	r2, #1
 800942a:	4013      	ands	r3, r2
 800942c:	2b01      	cmp	r3, #1
 800942e:	d117      	bne.n	8009460 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	001a      	movs	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2246      	movs	r2, #70	@ 0x46
 8009450:	5a9b      	ldrh	r3, [r3, r2]
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b299      	uxth	r1, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2246      	movs	r2, #70	@ 0x46
 800945c:	5299      	strh	r1, [r3, r2]
 800945e:	e016      	b.n	800948e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009460:	f7fc faee 	bl	8005a40 <HAL_GetTick>
 8009464:	0002      	movs	r2, r0
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d802      	bhi.n	8009476 <HAL_SPI_Receive+0x1ba>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	d102      	bne.n	800947c <HAL_SPI_Receive+0x1c0>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d108      	bne.n	800948e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800947c:	2317      	movs	r3, #23
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	2203      	movs	r2, #3
 8009482:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	225d      	movs	r2, #93	@ 0x5d
 8009488:	2101      	movs	r1, #1
 800948a:	5499      	strb	r1, [r3, r2]
          goto error;
 800948c:	e058      	b.n	8009540 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2246      	movs	r2, #70	@ 0x46
 8009492:	5a9b      	ldrh	r3, [r3, r2]
 8009494:	b29b      	uxth	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1c3      	bne.n	8009422 <HAL_SPI_Receive+0x166>
 800949a:	e039      	b.n	8009510 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	2201      	movs	r2, #1
 80094a4:	4013      	ands	r3, r2
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d115      	bne.n	80094d6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	b292      	uxth	r2, r2
 80094b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	1c9a      	adds	r2, r3, #2
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2246      	movs	r2, #70	@ 0x46
 80094c6:	5a9b      	ldrh	r3, [r3, r2]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b299      	uxth	r1, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2246      	movs	r2, #70	@ 0x46
 80094d2:	5299      	strh	r1, [r3, r2]
 80094d4:	e016      	b.n	8009504 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d6:	f7fc fab3 	bl	8005a40 <HAL_GetTick>
 80094da:	0002      	movs	r2, r0
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d802      	bhi.n	80094ec <HAL_SPI_Receive+0x230>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Receive+0x236>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d108      	bne.n	8009504 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80094f2:	2317      	movs	r3, #23
 80094f4:	18fb      	adds	r3, r7, r3
 80094f6:	2203      	movs	r2, #3
 80094f8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	225d      	movs	r2, #93	@ 0x5d
 80094fe:	2101      	movs	r1, #1
 8009500:	5499      	strb	r1, [r3, r2]
          goto error;
 8009502:	e01d      	b.n	8009540 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2246      	movs	r2, #70	@ 0x46
 8009508:	5a9b      	ldrh	r3, [r3, r2]
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1c5      	bne.n	800949c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0018      	movs	r0, r3
 8009518:	f000 fb34 	bl	8009b84 <SPI_EndRxTransaction>
 800951c:	1e03      	subs	r3, r0, #0
 800951e:	d002      	beq.n	8009526 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800952e:	2317      	movs	r3, #23
 8009530:	18fb      	adds	r3, r7, r3
 8009532:	2201      	movs	r2, #1
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	e003      	b.n	8009540 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	225d      	movs	r2, #93	@ 0x5d
 800953c:	2101      	movs	r1, #1
 800953e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	225c      	movs	r2, #92	@ 0x5c
 8009544:	2100      	movs	r1, #0
 8009546:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009548:	2317      	movs	r3, #23
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	781b      	ldrb	r3, [r3, #0]
}
 800954e:	0018      	movs	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	b007      	add	sp, #28
 8009554:	bd90      	pop	{r4, r7, pc}
 8009556:	46c0      	nop			@ (mov r8, r8)
 8009558:	ffffefff 	.word	0xffffefff
 800955c:	ffffbfff 	.word	0xffffbfff

08009560 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	@ 0x28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	001a      	movs	r2, r3
 800956e:	1cbb      	adds	r3, r7, #2
 8009570:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009572:	2301      	movs	r3, #1
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009576:	2323      	movs	r3, #35	@ 0x23
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	225c      	movs	r2, #92	@ 0x5c
 8009582:	5c9b      	ldrb	r3, [r3, r2]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_SPI_TransmitReceive+0x2c>
 8009588:	2302      	movs	r3, #2
 800958a:	e1c4      	b.n	8009916 <HAL_SPI_TransmitReceive+0x3b6>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	225c      	movs	r2, #92	@ 0x5c
 8009590:	2101      	movs	r1, #1
 8009592:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009594:	f7fc fa54 	bl	8005a40 <HAL_GetTick>
 8009598:	0003      	movs	r3, r0
 800959a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800959c:	201b      	movs	r0, #27
 800959e:	183b      	adds	r3, r7, r0
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	215d      	movs	r1, #93	@ 0x5d
 80095a4:	5c52      	ldrb	r2, [r2, r1]
 80095a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80095ae:	2312      	movs	r3, #18
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	1cba      	adds	r2, r7, #2
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095b8:	183b      	adds	r3, r7, r0
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d011      	beq.n	80095e4 <HAL_SPI_TransmitReceive+0x84>
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	2382      	movs	r3, #130	@ 0x82
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d107      	bne.n	80095da <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <HAL_SPI_TransmitReceive+0x7a>
 80095d2:	183b      	adds	r3, r7, r0
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d004      	beq.n	80095e4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80095da:	2323      	movs	r3, #35	@ 0x23
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	2202      	movs	r2, #2
 80095e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80095e2:	e191      	b.n	8009908 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x98>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x98>
 80095f0:	1cbb      	adds	r3, r7, #2
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80095f8:	2323      	movs	r3, #35	@ 0x23
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	2201      	movs	r2, #1
 80095fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8009600:	e182      	b.n	8009908 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	225d      	movs	r2, #93	@ 0x5d
 8009606:	5c9b      	ldrb	r3, [r3, r2]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b04      	cmp	r3, #4
 800960c:	d003      	beq.n	8009616 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	225d      	movs	r2, #93	@ 0x5d
 8009612:	2105      	movs	r1, #5
 8009614:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1cba      	adds	r2, r7, #2
 8009626:	2146      	movs	r1, #70	@ 0x46
 8009628:	8812      	ldrh	r2, [r2, #0]
 800962a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	1cba      	adds	r2, r7, #2
 8009630:	2144      	movs	r1, #68	@ 0x44
 8009632:	8812      	ldrh	r2, [r2, #0]
 8009634:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	1cba      	adds	r2, r7, #2
 8009640:	8812      	ldrh	r2, [r2, #0]
 8009642:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	1cba      	adds	r2, r7, #2
 8009648:	8812      	ldrh	r2, [r2, #0]
 800964a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	23e0      	movs	r3, #224	@ 0xe0
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	429a      	cmp	r2, r3
 8009662:	d908      	bls.n	8009676 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	49ac      	ldr	r1, [pc, #688]	@ (8009920 <HAL_SPI_TransmitReceive+0x3c0>)
 8009670:	400a      	ands	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
 8009674:	e008      	b.n	8009688 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2180      	movs	r1, #128	@ 0x80
 8009682:	0149      	lsls	r1, r1, #5
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2240      	movs	r2, #64	@ 0x40
 8009690:	4013      	ands	r3, r2
 8009692:	2b40      	cmp	r3, #64	@ 0x40
 8009694:	d007      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2140      	movs	r1, #64	@ 0x40
 80096a2:	430a      	orrs	r2, r1
 80096a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	23e0      	movs	r3, #224	@ 0xe0
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d800      	bhi.n	80096b4 <HAL_SPI_TransmitReceive+0x154>
 80096b2:	e083      	b.n	80097bc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_SPI_TransmitReceive+0x168>
 80096bc:	2312      	movs	r3, #18
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d000      	beq.n	80096c8 <HAL_SPI_TransmitReceive+0x168>
 80096c6:	e06d      	b.n	80097a4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096cc:	881a      	ldrh	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d8:	1c9a      	adds	r2, r3, #2
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096ec:	e05a      	b.n	80097a4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2202      	movs	r2, #2
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d11b      	bne.n	8009734 <HAL_SPI_TransmitReceive+0x1d4>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <HAL_SPI_TransmitReceive+0x1d4>
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	2b01      	cmp	r3, #1
 800970a:	d113      	bne.n	8009734 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	1c9a      	adds	r2, r3, #2
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2201      	movs	r2, #1
 800973c:	4013      	ands	r3, r2
 800973e:	2b01      	cmp	r3, #1
 8009740:	d11c      	bne.n	800977c <HAL_SPI_TransmitReceive+0x21c>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2246      	movs	r2, #70	@ 0x46
 8009746:	5a9b      	ldrh	r3, [r3, r2]
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d016      	beq.n	800977c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009758:	b292      	uxth	r2, r2
 800975a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009760:	1c9a      	adds	r2, r3, #2
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2246      	movs	r2, #70	@ 0x46
 800976a:	5a9b      	ldrh	r3, [r3, r2]
 800976c:	b29b      	uxth	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	b299      	uxth	r1, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2246      	movs	r2, #70	@ 0x46
 8009776:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009778:	2301      	movs	r3, #1
 800977a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800977c:	f7fc f960 	bl	8005a40 <HAL_GetTick>
 8009780:	0002      	movs	r2, r0
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009788:	429a      	cmp	r2, r3
 800978a:	d80b      	bhi.n	80097a4 <HAL_SPI_TransmitReceive+0x244>
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	3301      	adds	r3, #1
 8009790:	d008      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009792:	2323      	movs	r3, #35	@ 0x23
 8009794:	18fb      	adds	r3, r7, r3
 8009796:	2203      	movs	r2, #3
 8009798:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	225d      	movs	r2, #93	@ 0x5d
 800979e:	2101      	movs	r1, #1
 80097a0:	5499      	strb	r1, [r3, r2]
        goto error;
 80097a2:	e0b1      	b.n	8009908 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d19f      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x18e>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2246      	movs	r2, #70	@ 0x46
 80097b2:	5a9b      	ldrh	r3, [r3, r2]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d199      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x18e>
 80097ba:	e089      	b.n	80098d0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_SPI_TransmitReceive+0x270>
 80097c4:	2312      	movs	r3, #18
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d000      	beq.n	80097d0 <HAL_SPI_TransmitReceive+0x270>
 80097ce:	e074      	b.n	80098ba <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	330c      	adds	r3, #12
 80097da:	7812      	ldrb	r2, [r2, #0]
 80097dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097f6:	e060      	b.n	80098ba <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2202      	movs	r2, #2
 8009800:	4013      	ands	r3, r2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d11c      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x2e0>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d017      	beq.n	8009840 <HAL_SPI_TransmitReceive+0x2e0>
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	2b01      	cmp	r3, #1
 8009814:	d114      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	330c      	adds	r3, #12
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009832:	b29b      	uxth	r3, r3
 8009834:	3b01      	subs	r3, #1
 8009836:	b29a      	uxth	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	2201      	movs	r2, #1
 8009848:	4013      	ands	r3, r2
 800984a:	2b01      	cmp	r3, #1
 800984c:	d11e      	bne.n	800988c <HAL_SPI_TransmitReceive+0x32c>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2246      	movs	r2, #70	@ 0x46
 8009852:	5a9b      	ldrh	r3, [r3, r2]
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d018      	beq.n	800988c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	330c      	adds	r3, #12
 8009860:	001a      	movs	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009866:	7812      	ldrb	r2, [r2, #0]
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2246      	movs	r2, #70	@ 0x46
 800987a:	5a9b      	ldrh	r3, [r3, r2]
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b299      	uxth	r1, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2246      	movs	r2, #70	@ 0x46
 8009886:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009888:	2301      	movs	r3, #1
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800988c:	f7fc f8d8 	bl	8005a40 <HAL_GetTick>
 8009890:	0002      	movs	r2, r0
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009898:	429a      	cmp	r2, r3
 800989a:	d802      	bhi.n	80098a2 <HAL_SPI_TransmitReceive+0x342>
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	3301      	adds	r3, #1
 80098a0:	d102      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x348>
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d108      	bne.n	80098ba <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80098a8:	2323      	movs	r3, #35	@ 0x23
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	2203      	movs	r2, #3
 80098ae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	225d      	movs	r2, #93	@ 0x5d
 80098b4:	2101      	movs	r1, #1
 80098b6:	5499      	strb	r1, [r3, r2]
        goto error;
 80098b8:	e026      	b.n	8009908 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d199      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x298>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2246      	movs	r2, #70	@ 0x46
 80098c8:	5a9b      	ldrh	r3, [r3, r2]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d193      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	0018      	movs	r0, r3
 80098d8:	f000 f9b2 	bl	8009c40 <SPI_EndRxTxTransaction>
 80098dc:	1e03      	subs	r3, r0, #0
 80098de:	d006      	beq.n	80098ee <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80098e0:	2323      	movs	r3, #35	@ 0x23
 80098e2:	18fb      	adds	r3, r7, r3
 80098e4:	2201      	movs	r2, #1
 80098e6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2220      	movs	r2, #32
 80098ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d004      	beq.n	8009900 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80098f6:	2323      	movs	r3, #35	@ 0x23
 80098f8:	18fb      	adds	r3, r7, r3
 80098fa:	2201      	movs	r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e003      	b.n	8009908 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	225d      	movs	r2, #93	@ 0x5d
 8009904:	2101      	movs	r1, #1
 8009906:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	225c      	movs	r2, #92	@ 0x5c
 800990c:	2100      	movs	r1, #0
 800990e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009910:	2323      	movs	r3, #35	@ 0x23
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	781b      	ldrb	r3, [r3, #0]
}
 8009916:	0018      	movs	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	b00a      	add	sp, #40	@ 0x28
 800991c:	bd80      	pop	{r7, pc}
 800991e:	46c0      	nop			@ (mov r8, r8)
 8009920:	ffffefff 	.word	0xffffefff

08009924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	1dfb      	adds	r3, r7, #7
 8009932:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009934:	f7fc f884 	bl	8005a40 <HAL_GetTick>
 8009938:	0002      	movs	r2, r0
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	18d3      	adds	r3, r2, r3
 8009942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009944:	f7fc f87c 	bl	8005a40 <HAL_GetTick>
 8009948:	0003      	movs	r3, r0
 800994a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800994c:	4b3a      	ldr	r3, [pc, #232]	@ (8009a38 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	015b      	lsls	r3, r3, #5
 8009952:	0d1b      	lsrs	r3, r3, #20
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	4353      	muls	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995a:	e058      	b.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	d055      	beq.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009962:	f7fc f86d 	bl	8005a40 <HAL_GetTick>
 8009966:	0002      	movs	r2, r0
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	429a      	cmp	r2, r3
 8009970:	d902      	bls.n	8009978 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d142      	bne.n	80099fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	21e0      	movs	r1, #224	@ 0xe0
 8009984:	438a      	bics	r2, r1
 8009986:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	2382      	movs	r3, #130	@ 0x82
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	429a      	cmp	r2, r3
 8009992:	d113      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	2380      	movs	r3, #128	@ 0x80
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	429a      	cmp	r2, r3
 800999e:	d005      	beq.n	80099ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	2380      	movs	r3, #128	@ 0x80
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d107      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2140      	movs	r1, #64	@ 0x40
 80099b8:	438a      	bics	r2, r1
 80099ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099c0:	2380      	movs	r3, #128	@ 0x80
 80099c2:	019b      	lsls	r3, r3, #6
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d110      	bne.n	80099ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	491a      	ldr	r1, [pc, #104]	@ (8009a3c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80099d4:	400a      	ands	r2, r1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2180      	movs	r1, #128	@ 0x80
 80099e4:	0189      	lsls	r1, r1, #6
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	225d      	movs	r2, #93	@ 0x5d
 80099ee:	2101      	movs	r1, #1
 80099f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	225c      	movs	r2, #92	@ 0x5c
 80099f6:	2100      	movs	r1, #0
 80099f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e017      	b.n	8009a2e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	4013      	ands	r3, r2
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	425a      	negs	r2, r3
 8009a1e:	4153      	adcs	r3, r2
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	001a      	movs	r2, r3
 8009a24:	1dfb      	adds	r3, r7, #7
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d197      	bne.n	800995c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b008      	add	sp, #32
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	20000010 	.word	0x20000010
 8009a3c:	ffffdfff 	.word	0xffffdfff

08009a40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	@ 0x28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a4e:	2317      	movs	r3, #23
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a56:	f7fb fff3 	bl	8005a40 <HAL_GetTick>
 8009a5a:	0002      	movs	r2, r0
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5e:	1a9b      	subs	r3, r3, r2
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	18d3      	adds	r3, r2, r3
 8009a64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009a66:	f7fb ffeb 	bl	8005a40 <HAL_GetTick>
 8009a6a:	0003      	movs	r3, r0
 8009a6c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a76:	4b41      	ldr	r3, [pc, #260]	@ (8009b7c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	0013      	movs	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	189b      	adds	r3, r3, r2
 8009a80:	00da      	lsls	r2, r3, #3
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	0d1b      	lsrs	r3, r3, #20
 8009a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a88:	4353      	muls	r3, r2
 8009a8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a8c:	e068      	b.n	8009b60 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	23c0      	movs	r3, #192	@ 0xc0
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d10a      	bne.n	8009aae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d107      	bne.n	8009aae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	2117      	movs	r1, #23
 8009aa6:	187b      	adds	r3, r7, r1
 8009aa8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009aaa:	187b      	adds	r3, r7, r1
 8009aac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	d055      	beq.n	8009b60 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ab4:	f7fb ffc4 	bl	8005a40 <HAL_GetTick>
 8009ab8:	0002      	movs	r2, r0
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d902      	bls.n	8009aca <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d142      	bne.n	8009b50 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	21e0      	movs	r1, #224	@ 0xe0
 8009ad6:	438a      	bics	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	2382      	movs	r3, #130	@ 0x82
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d113      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xce>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	2380      	movs	r3, #128	@ 0x80
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d005      	beq.n	8009afe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	2380      	movs	r3, #128	@ 0x80
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d107      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2140      	movs	r1, #64	@ 0x40
 8009b0a:	438a      	bics	r2, r1
 8009b0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b12:	2380      	movs	r3, #128	@ 0x80
 8009b14:	019b      	lsls	r3, r3, #6
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d110      	bne.n	8009b3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4916      	ldr	r1, [pc, #88]	@ (8009b80 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009b26:	400a      	ands	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2180      	movs	r1, #128	@ 0x80
 8009b36:	0189      	lsls	r1, r1, #6
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	225d      	movs	r2, #93	@ 0x5d
 8009b40:	2101      	movs	r1, #1
 8009b42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	225c      	movs	r2, #92	@ 0x5c
 8009b48:	2100      	movs	r1, #0
 8009b4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e010      	b.n	8009b72 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d18e      	bne.n	8009a8e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	0018      	movs	r0, r3
 8009b74:	46bd      	mov	sp, r7
 8009b76:	b00a      	add	sp, #40	@ 0x28
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	46c0      	nop			@ (mov r8, r8)
 8009b7c:	20000010 	.word	0x20000010
 8009b80:	ffffdfff 	.word	0xffffdfff

08009b84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	2382      	movs	r3, #130	@ 0x82
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d113      	bne.n	8009bc4 <SPI_EndRxTransaction+0x40>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	2380      	movs	r3, #128	@ 0x80
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d005      	beq.n	8009bb4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	2380      	movs	r3, #128	@ 0x80
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d107      	bne.n	8009bc4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2140      	movs	r1, #64	@ 0x40
 8009bc0:	438a      	bics	r2, r1
 8009bc2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	0013      	movs	r3, r2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2180      	movs	r1, #128	@ 0x80
 8009bd2:	f7ff fea7 	bl	8009924 <SPI_WaitFlagStateUntilTimeout>
 8009bd6:	1e03      	subs	r3, r0, #0
 8009bd8:	d007      	beq.n	8009bea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bde:	2220      	movs	r2, #32
 8009be0:	431a      	orrs	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e026      	b.n	8009c38 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	2382      	movs	r3, #130	@ 0x82
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d11f      	bne.n	8009c36 <SPI_EndRxTransaction+0xb2>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	2380      	movs	r3, #128	@ 0x80
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d005      	beq.n	8009c0e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	2380      	movs	r3, #128	@ 0x80
 8009c08:	00db      	lsls	r3, r3, #3
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d113      	bne.n	8009c36 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	23c0      	movs	r3, #192	@ 0xc0
 8009c12:	00d9      	lsls	r1, r3, #3
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	0013      	movs	r3, r2
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f7ff ff0f 	bl	8009a40 <SPI_WaitFifoStateUntilTimeout>
 8009c22:	1e03      	subs	r3, r0, #0
 8009c24:	d007      	beq.n	8009c36 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e000      	b.n	8009c38 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	0018      	movs	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	b004      	add	sp, #16
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	23c0      	movs	r3, #192	@ 0xc0
 8009c50:	0159      	lsls	r1, r3, #5
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	0013      	movs	r3, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f7ff fef0 	bl	8009a40 <SPI_WaitFifoStateUntilTimeout>
 8009c60:	1e03      	subs	r3, r0, #0
 8009c62:	d007      	beq.n	8009c74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c68:	2220      	movs	r2, #32
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e027      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	0013      	movs	r3, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2180      	movs	r1, #128	@ 0x80
 8009c82:	f7ff fe4f 	bl	8009924 <SPI_WaitFlagStateUntilTimeout>
 8009c86:	1e03      	subs	r3, r0, #0
 8009c88:	d007      	beq.n	8009c9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c8e:	2220      	movs	r2, #32
 8009c90:	431a      	orrs	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e014      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	23c0      	movs	r3, #192	@ 0xc0
 8009c9e:	00d9      	lsls	r1, r3, #3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	0013      	movs	r3, r2
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f7ff fec9 	bl	8009a40 <SPI_WaitFifoStateUntilTimeout>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d007      	beq.n	8009cc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e000      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b004      	add	sp, #16
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e04a      	b.n	8009d74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	223d      	movs	r2, #61	@ 0x3d
 8009ce2:	5c9b      	ldrb	r3, [r3, r2]
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d107      	bne.n	8009cfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	223c      	movs	r2, #60	@ 0x3c
 8009cee:	2100      	movs	r1, #0
 8009cf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f7fb fb69 	bl	80053cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	223d      	movs	r2, #61	@ 0x3d
 8009cfe:	2102      	movs	r1, #2
 8009d00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	0019      	movs	r1, r3
 8009d0c:	0010      	movs	r0, r2
 8009d0e:	f000 f9b3 	bl	800a078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2248      	movs	r2, #72	@ 0x48
 8009d16:	2101      	movs	r1, #1
 8009d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	223e      	movs	r2, #62	@ 0x3e
 8009d1e:	2101      	movs	r1, #1
 8009d20:	5499      	strb	r1, [r3, r2]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	223f      	movs	r2, #63	@ 0x3f
 8009d26:	2101      	movs	r1, #1
 8009d28:	5499      	strb	r1, [r3, r2]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2240      	movs	r2, #64	@ 0x40
 8009d2e:	2101      	movs	r1, #1
 8009d30:	5499      	strb	r1, [r3, r2]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2241      	movs	r2, #65	@ 0x41
 8009d36:	2101      	movs	r1, #1
 8009d38:	5499      	strb	r1, [r3, r2]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2242      	movs	r2, #66	@ 0x42
 8009d3e:	2101      	movs	r1, #1
 8009d40:	5499      	strb	r1, [r3, r2]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2243      	movs	r2, #67	@ 0x43
 8009d46:	2101      	movs	r1, #1
 8009d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2244      	movs	r2, #68	@ 0x44
 8009d4e:	2101      	movs	r1, #1
 8009d50:	5499      	strb	r1, [r3, r2]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2245      	movs	r2, #69	@ 0x45
 8009d56:	2101      	movs	r1, #1
 8009d58:	5499      	strb	r1, [r3, r2]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2246      	movs	r2, #70	@ 0x46
 8009d5e:	2101      	movs	r1, #1
 8009d60:	5499      	strb	r1, [r3, r2]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2247      	movs	r2, #71	@ 0x47
 8009d66:	2101      	movs	r1, #1
 8009d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	223d      	movs	r2, #61	@ 0x3d
 8009d6e:	2101      	movs	r1, #1
 8009d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	0018      	movs	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b002      	add	sp, #8
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	223d      	movs	r2, #61	@ 0x3d
 8009d88:	5c9b      	ldrb	r3, [r3, r2]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d001      	beq.n	8009d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e03c      	b.n	8009e0e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	223d      	movs	r2, #61	@ 0x3d
 8009d98:	2102      	movs	r1, #2
 8009d9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2101      	movs	r1, #1
 8009da8:	430a      	orrs	r2, r1
 8009daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a19      	ldr	r2, [pc, #100]	@ (8009e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d009      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x4e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a18      	ldr	r2, [pc, #96]	@ (8009e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d004      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x4e>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a16      	ldr	r2, [pc, #88]	@ (8009e20 <HAL_TIM_Base_Start_IT+0xa4>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d116      	bne.n	8009df8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4a14      	ldr	r2, [pc, #80]	@ (8009e24 <HAL_TIM_Base_Start_IT+0xa8>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b06      	cmp	r3, #6
 8009dda:	d016      	beq.n	8009e0a <HAL_TIM_Base_Start_IT+0x8e>
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	2380      	movs	r3, #128	@ 0x80
 8009de0:	025b      	lsls	r3, r3, #9
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d011      	beq.n	8009e0a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2101      	movs	r1, #1
 8009df2:	430a      	orrs	r2, r1
 8009df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df6:	e008      	b.n	8009e0a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2101      	movs	r1, #1
 8009e04:	430a      	orrs	r2, r1
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	e000      	b.n	8009e0c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	0018      	movs	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b004      	add	sp, #16
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	46c0      	nop			@ (mov r8, r8)
 8009e18:	40012c00 	.word	0x40012c00
 8009e1c:	40000400 	.word	0x40000400
 8009e20:	40014000 	.word	0x40014000
 8009e24:	00010007 	.word	0x00010007

08009e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2202      	movs	r2, #2
 8009e44:	4013      	ands	r3, r2
 8009e46:	d021      	beq.n	8009e8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d01d      	beq.n	8009e8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2203      	movs	r2, #3
 8009e56:	4252      	negs	r2, r2
 8009e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	2203      	movs	r2, #3
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d004      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	0018      	movs	r0, r3
 8009e70:	f000 f8ea 	bl	800a048 <HAL_TIM_IC_CaptureCallback>
 8009e74:	e007      	b.n	8009e86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 f8dd 	bl	800a038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0018      	movs	r0, r3
 8009e82:	f000 f8e9 	bl	800a058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	4013      	ands	r3, r2
 8009e92:	d022      	beq.n	8009eda <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2204      	movs	r2, #4
 8009e98:	4013      	ands	r3, r2
 8009e9a:	d01e      	beq.n	8009eda <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	4252      	negs	r2, r2
 8009ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	23c0      	movs	r3, #192	@ 0xc0
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f000 f8c3 	bl	800a048 <HAL_TIM_IC_CaptureCallback>
 8009ec2:	e007      	b.n	8009ed4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f000 f8b6 	bl	800a038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f000 f8c2 	bl	800a058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2208      	movs	r2, #8
 8009ede:	4013      	ands	r3, r2
 8009ee0:	d021      	beq.n	8009f26 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	d01d      	beq.n	8009f26 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2209      	movs	r2, #9
 8009ef0:	4252      	negs	r2, r2
 8009ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	2203      	movs	r2, #3
 8009f02:	4013      	ands	r3, r2
 8009f04:	d004      	beq.n	8009f10 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f000 f89d 	bl	800a048 <HAL_TIM_IC_CaptureCallback>
 8009f0e:	e007      	b.n	8009f20 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	0018      	movs	r0, r3
 8009f14:	f000 f890 	bl	800a038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f000 f89c 	bl	800a058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2210      	movs	r2, #16
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	d022      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2210      	movs	r2, #16
 8009f32:	4013      	ands	r3, r2
 8009f34:	d01e      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2211      	movs	r2, #17
 8009f3c:	4252      	negs	r2, r2
 8009f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2208      	movs	r2, #8
 8009f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69da      	ldr	r2, [r3, #28]
 8009f4c:	23c0      	movs	r3, #192	@ 0xc0
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4013      	ands	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	0018      	movs	r0, r3
 8009f58:	f000 f876 	bl	800a048 <HAL_TIM_IC_CaptureCallback>
 8009f5c:	e007      	b.n	8009f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	0018      	movs	r0, r3
 8009f62:	f000 f869 	bl	800a038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f000 f875 	bl	800a058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2201      	movs	r2, #1
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d00c      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4013      	ands	r3, r2
 8009f82:	d008      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	4252      	negs	r2, r2
 8009f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	0018      	movs	r0, r3
 8009f92:	f7f9 fe63 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2280      	movs	r2, #128	@ 0x80
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	d104      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	2380      	movs	r3, #128	@ 0x80
 8009fa2:	019b      	lsls	r3, r3, #6
 8009fa4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fa6:	d00b      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2280      	movs	r2, #128	@ 0x80
 8009fac:	4013      	ands	r3, r2
 8009fae:	d007      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1e      	ldr	r2, [pc, #120]	@ (800a030 <HAL_TIM_IRQHandler+0x208>)
 8009fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	0018      	movs	r0, r3
 8009fbc:	f000 f8e8 	bl	800a190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	2380      	movs	r3, #128	@ 0x80
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	d00b      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2280      	movs	r2, #128	@ 0x80
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d007      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <HAL_TIM_IRQHandler+0x20c>)
 8009fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f000 f8df 	bl	800a1a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2240      	movs	r2, #64	@ 0x40
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	d00c      	beq.n	800a004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d008      	beq.n	800a004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2241      	movs	r2, #65	@ 0x41
 8009ff8:	4252      	negs	r2, r2
 8009ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	0018      	movs	r0, r3
 800a000:	f000 f832 	bl	800a068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2220      	movs	r2, #32
 800a008:	4013      	ands	r3, r2
 800a00a:	d00c      	beq.n	800a026 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	4013      	ands	r3, r2
 800a012:	d008      	beq.n	800a026 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2221      	movs	r2, #33	@ 0x21
 800a01a:	4252      	negs	r2, r2
 800a01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	0018      	movs	r0, r3
 800a022:	f000 f8ad 	bl	800a180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a026:	46c0      	nop			@ (mov r8, r8)
 800a028:	46bd      	mov	sp, r7
 800a02a:	b004      	add	sp, #16
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	46c0      	nop			@ (mov r8, r8)
 800a030:	ffffdf7f 	.word	0xffffdf7f
 800a034:	fffffeff 	.word	0xfffffeff

0800a038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a040:	46c0      	nop			@ (mov r8, r8)
 800a042:	46bd      	mov	sp, r7
 800a044:	b002      	add	sp, #8
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a050:	46c0      	nop			@ (mov r8, r8)
 800a052:	46bd      	mov	sp, r7
 800a054:	b002      	add	sp, #8
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a060:	46c0      	nop			@ (mov r8, r8)
 800a062:	46bd      	mov	sp, r7
 800a064:	b002      	add	sp, #8
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a070:	46c0      	nop			@ (mov r8, r8)
 800a072:	46bd      	mov	sp, r7
 800a074:	b002      	add	sp, #8
 800a076:	bd80      	pop	{r7, pc}

0800a078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a36      	ldr	r2, [pc, #216]	@ (800a164 <TIM_Base_SetConfig+0xec>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_Base_SetConfig+0x20>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a35      	ldr	r2, [pc, #212]	@ (800a168 <TIM_Base_SetConfig+0xf0>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d108      	bne.n	800a0aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2270      	movs	r2, #112	@ 0x70
 800a09c:	4393      	bics	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	@ (800a164 <TIM_Base_SetConfig+0xec>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d013      	beq.n	800a0da <TIM_Base_SetConfig+0x62>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a2c      	ldr	r2, [pc, #176]	@ (800a168 <TIM_Base_SetConfig+0xf0>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00f      	beq.n	800a0da <TIM_Base_SetConfig+0x62>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a16c <TIM_Base_SetConfig+0xf4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00b      	beq.n	800a0da <TIM_Base_SetConfig+0x62>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a2a      	ldr	r2, [pc, #168]	@ (800a170 <TIM_Base_SetConfig+0xf8>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d007      	beq.n	800a0da <TIM_Base_SetConfig+0x62>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a29      	ldr	r2, [pc, #164]	@ (800a174 <TIM_Base_SetConfig+0xfc>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d003      	beq.n	800a0da <TIM_Base_SetConfig+0x62>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a28      	ldr	r2, [pc, #160]	@ (800a178 <TIM_Base_SetConfig+0x100>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d108      	bne.n	800a0ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4a27      	ldr	r2, [pc, #156]	@ (800a17c <TIM_Base_SetConfig+0x104>)
 800a0de:	4013      	ands	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2280      	movs	r2, #128	@ 0x80
 800a0f0:	4393      	bics	r3, r2
 800a0f2:	001a      	movs	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a13      	ldr	r2, [pc, #76]	@ (800a164 <TIM_Base_SetConfig+0xec>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00b      	beq.n	800a132 <TIM_Base_SetConfig+0xba>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a14      	ldr	r2, [pc, #80]	@ (800a170 <TIM_Base_SetConfig+0xf8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d007      	beq.n	800a132 <TIM_Base_SetConfig+0xba>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a13      	ldr	r2, [pc, #76]	@ (800a174 <TIM_Base_SetConfig+0xfc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_Base_SetConfig+0xba>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a12      	ldr	r2, [pc, #72]	@ (800a178 <TIM_Base_SetConfig+0x100>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d103      	bne.n	800a13a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2201      	movs	r2, #1
 800a146:	4013      	ands	r3, r2
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d106      	bne.n	800a15a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2201      	movs	r2, #1
 800a152:	4393      	bics	r3, r2
 800a154:	001a      	movs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	611a      	str	r2, [r3, #16]
  }
}
 800a15a:	46c0      	nop			@ (mov r8, r8)
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b004      	add	sp, #16
 800a160:	bd80      	pop	{r7, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	40012c00 	.word	0x40012c00
 800a168:	40000400 	.word	0x40000400
 800a16c:	40002000 	.word	0x40002000
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800
 800a17c:	fffffcff 	.word	0xfffffcff

0800a180 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a188:	46c0      	nop			@ (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b002      	add	sp, #8
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a198:	46c0      	nop			@ (mov r8, r8)
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b002      	add	sp, #8
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1a8:	46c0      	nop			@ (mov r8, r8)
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e046      	b.n	800a250 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2288      	movs	r2, #136	@ 0x88
 800a1c6:	589b      	ldr	r3, [r3, r2]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d107      	bne.n	800a1dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2284      	movs	r2, #132	@ 0x84
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7fb f920 	bl	800541c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2288      	movs	r2, #136	@ 0x88
 800a1e0:	2124      	movs	r1, #36	@ 0x24
 800a1e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	438a      	bics	r2, r1
 800a1f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f000 fe0c 	bl	800ae1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	0018      	movs	r0, r3
 800a208:	f000 fc64 	bl	800aad4 <UART_SetConfig>
 800a20c:	0003      	movs	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e01c      	b.n	800a250 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	490d      	ldr	r1, [pc, #52]	@ (800a258 <HAL_UART_Init+0xa8>)
 800a222:	400a      	ands	r2, r1
 800a224:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	212a      	movs	r1, #42	@ 0x2a
 800a232:	438a      	bics	r2, r1
 800a234:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2101      	movs	r1, #1
 800a242:	430a      	orrs	r2, r1
 800a244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0018      	movs	r0, r3
 800a24a:	f000 fe9b 	bl	800af84 <UART_CheckIdleState>
 800a24e:	0003      	movs	r3, r0
}
 800a250:	0018      	movs	r0, r3
 800a252:	46bd      	mov	sp, r7
 800a254:	b002      	add	sp, #8
 800a256:	bd80      	pop	{r7, pc}
 800a258:	ffffb7ff 	.word	0xffffb7ff

0800a25c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	1dbb      	adds	r3, r7, #6
 800a268:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2288      	movs	r2, #136	@ 0x88
 800a26e:	589b      	ldr	r3, [r3, r2]
 800a270:	2b20      	cmp	r3, #32
 800a272:	d000      	beq.n	800a276 <HAL_UART_Transmit_DMA+0x1a>
 800a274:	e079      	b.n	800a36a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <HAL_UART_Transmit_DMA+0x28>
 800a27c:	1dbb      	adds	r3, r7, #6
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e071      	b.n	800a36c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	2380      	movs	r3, #128	@ 0x80
 800a28e:	015b      	lsls	r3, r3, #5
 800a290:	429a      	cmp	r2, r3
 800a292:	d109      	bne.n	800a2a8 <HAL_UART_Transmit_DMA+0x4c>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	d001      	beq.n	800a2a8 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e061      	b.n	800a36c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	1dba      	adds	r2, r7, #6
 800a2b2:	2154      	movs	r1, #84	@ 0x54
 800a2b4:	8812      	ldrh	r2, [r2, #0]
 800a2b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	1dba      	adds	r2, r7, #6
 800a2bc:	2156      	movs	r1, #86	@ 0x56
 800a2be:	8812      	ldrh	r2, [r2, #0]
 800a2c0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2290      	movs	r2, #144	@ 0x90
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2288      	movs	r2, #136	@ 0x88
 800a2ce:	2121      	movs	r1, #33	@ 0x21
 800a2d0:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d028      	beq.n	800a32c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2de:	4a25      	ldr	r2, [pc, #148]	@ (800a374 <HAL_UART_Transmit_DMA+0x118>)
 800a2e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2e6:	4a24      	ldr	r2, [pc, #144]	@ (800a378 <HAL_UART_Transmit_DMA+0x11c>)
 800a2e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ee:	4a23      	ldr	r2, [pc, #140]	@ (800a37c <HAL_UART_Transmit_DMA+0x120>)
 800a2f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a302:	0019      	movs	r1, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3328      	adds	r3, #40	@ 0x28
 800a30a:	001a      	movs	r2, r3
 800a30c:	1dbb      	adds	r3, r7, #6
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	f7fc fb10 	bl	8006934 <HAL_DMA_Start_IT>
 800a314:	1e03      	subs	r3, r0, #0
 800a316:	d009      	beq.n	800a32c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2290      	movs	r2, #144	@ 0x90
 800a31c:	2110      	movs	r1, #16
 800a31e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2288      	movs	r2, #136	@ 0x88
 800a324:	2120      	movs	r1, #32
 800a326:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e01f      	b.n	800a36c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2240      	movs	r2, #64	@ 0x40
 800a332:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a334:	f3ef 8310 	mrs	r3, PRIMASK
 800a338:	613b      	str	r3, [r7, #16]
  return(result);
 800a33a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	2301      	movs	r3, #1
 800a340:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f383 8810 	msr	PRIMASK, r3
}
 800a348:	46c0      	nop			@ (mov r8, r8)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2180      	movs	r1, #128	@ 0x80
 800a356:	430a      	orrs	r2, r1
 800a358:	609a      	str	r2, [r3, #8]
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	f383 8810 	msr	PRIMASK, r3
}
 800a364:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	e000      	b.n	800a36c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a36a:	2302      	movs	r3, #2
  }
}
 800a36c:	0018      	movs	r0, r3
 800a36e:	46bd      	mov	sp, r7
 800a370:	b008      	add	sp, #32
 800a372:	bd80      	pop	{r7, pc}
 800a374:	0800b451 	.word	0x0800b451
 800a378:	0800b4e9 	.word	0x0800b4e9
 800a37c:	0800b67b 	.word	0x0800b67b

0800a380 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	1dbb      	adds	r3, r7, #6
 800a38c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	228c      	movs	r2, #140	@ 0x8c
 800a392:	589b      	ldr	r3, [r3, r2]
 800a394:	2b20      	cmp	r3, #32
 800a396:	d145      	bne.n	800a424 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_UART_Receive_DMA+0x26>
 800a39e:	1dbb      	adds	r3, r7, #6
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e03d      	b.n	800a426 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	2380      	movs	r3, #128	@ 0x80
 800a3b0:	015b      	lsls	r3, r3, #5
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d109      	bne.n	800a3ca <HAL_UART_Receive_DMA+0x4a>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d105      	bne.n	800a3ca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	d001      	beq.n	800a3ca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e02d      	b.n	800a426 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	2380      	movs	r3, #128	@ 0x80
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d019      	beq.n	800a412 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3de:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e2:	613b      	str	r3, [r7, #16]
  return(result);
 800a3e4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f383 8810 	msr	PRIMASK, r3
}
 800a3f2:	46c0      	nop			@ (mov r8, r8)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2180      	movs	r1, #128	@ 0x80
 800a400:	04c9      	lsls	r1, r1, #19
 800a402:	430a      	orrs	r2, r1
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	f383 8810 	msr	PRIMASK, r3
}
 800a410:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a412:	1dbb      	adds	r3, r7, #6
 800a414:	881a      	ldrh	r2, [r3, #0]
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	0018      	movs	r0, r3
 800a41c:	f000 fecc 	bl	800b1b8 <UART_Start_Receive_DMA>
 800a420:	0003      	movs	r3, r0
 800a422:	e000      	b.n	800a426 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a424:	2302      	movs	r3, #2
  }
}
 800a426:	0018      	movs	r0, r3
 800a428:	46bd      	mov	sp, r7
 800a42a:	b008      	add	sp, #32
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a430:	b5b0      	push	{r4, r5, r7, lr}
 800a432:	b0aa      	sub	sp, #168	@ 0xa8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	22a4      	movs	r2, #164	@ 0xa4
 800a440:	18b9      	adds	r1, r7, r2
 800a442:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	20a0      	movs	r0, #160	@ 0xa0
 800a44c:	1839      	adds	r1, r7, r0
 800a44e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	249c      	movs	r4, #156	@ 0x9c
 800a458:	1939      	adds	r1, r7, r4
 800a45a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a45c:	0011      	movs	r1, r2
 800a45e:	18bb      	adds	r3, r7, r2
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4aa2      	ldr	r2, [pc, #648]	@ (800a6ec <HAL_UART_IRQHandler+0x2bc>)
 800a464:	4013      	ands	r3, r2
 800a466:	2298      	movs	r2, #152	@ 0x98
 800a468:	18bd      	adds	r5, r7, r2
 800a46a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a46c:	18bb      	adds	r3, r7, r2
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11a      	bne.n	800a4aa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a474:	187b      	adds	r3, r7, r1
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2220      	movs	r2, #32
 800a47a:	4013      	ands	r3, r2
 800a47c:	d015      	beq.n	800a4aa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a47e:	183b      	adds	r3, r7, r0
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2220      	movs	r2, #32
 800a484:	4013      	ands	r3, r2
 800a486:	d105      	bne.n	800a494 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a488:	193b      	adds	r3, r7, r4
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	2380      	movs	r3, #128	@ 0x80
 800a48e:	055b      	lsls	r3, r3, #21
 800a490:	4013      	ands	r3, r2
 800a492:	d00a      	beq.n	800a4aa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d100      	bne.n	800a49e <HAL_UART_IRQHandler+0x6e>
 800a49c:	e2dc      	b.n	800aa58 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	0010      	movs	r0, r2
 800a4a6:	4798      	blx	r3
      }
      return;
 800a4a8:	e2d6      	b.n	800aa58 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a4aa:	2398      	movs	r3, #152	@ 0x98
 800a4ac:	18fb      	adds	r3, r7, r3
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d100      	bne.n	800a4b6 <HAL_UART_IRQHandler+0x86>
 800a4b4:	e122      	b.n	800a6fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a4b6:	239c      	movs	r3, #156	@ 0x9c
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a8c      	ldr	r2, [pc, #560]	@ (800a6f0 <HAL_UART_IRQHandler+0x2c0>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	d106      	bne.n	800a4d0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4c2:	23a0      	movs	r3, #160	@ 0xa0
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a8a      	ldr	r2, [pc, #552]	@ (800a6f4 <HAL_UART_IRQHandler+0x2c4>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	d100      	bne.n	800a4d0 <HAL_UART_IRQHandler+0xa0>
 800a4ce:	e115      	b.n	800a6fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4d0:	23a4      	movs	r3, #164	@ 0xa4
 800a4d2:	18fb      	adds	r3, r7, r3
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4013      	ands	r3, r2
 800a4da:	d012      	beq.n	800a502 <HAL_UART_IRQHandler+0xd2>
 800a4dc:	23a0      	movs	r3, #160	@ 0xa0
 800a4de:	18fb      	adds	r3, r7, r3
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	2380      	movs	r3, #128	@ 0x80
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	d00b      	beq.n	800a502 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2290      	movs	r2, #144	@ 0x90
 800a4f6:	589b      	ldr	r3, [r3, r2]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2190      	movs	r1, #144	@ 0x90
 800a500:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a502:	23a4      	movs	r3, #164	@ 0xa4
 800a504:	18fb      	adds	r3, r7, r3
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2202      	movs	r2, #2
 800a50a:	4013      	ands	r3, r2
 800a50c:	d011      	beq.n	800a532 <HAL_UART_IRQHandler+0x102>
 800a50e:	239c      	movs	r3, #156	@ 0x9c
 800a510:	18fb      	adds	r3, r7, r3
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2201      	movs	r2, #1
 800a516:	4013      	ands	r3, r2
 800a518:	d00b      	beq.n	800a532 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2202      	movs	r2, #2
 800a520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2290      	movs	r2, #144	@ 0x90
 800a526:	589b      	ldr	r3, [r3, r2]
 800a528:	2204      	movs	r2, #4
 800a52a:	431a      	orrs	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2190      	movs	r1, #144	@ 0x90
 800a530:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a532:	23a4      	movs	r3, #164	@ 0xa4
 800a534:	18fb      	adds	r3, r7, r3
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2204      	movs	r2, #4
 800a53a:	4013      	ands	r3, r2
 800a53c:	d011      	beq.n	800a562 <HAL_UART_IRQHandler+0x132>
 800a53e:	239c      	movs	r3, #156	@ 0x9c
 800a540:	18fb      	adds	r3, r7, r3
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2201      	movs	r2, #1
 800a546:	4013      	ands	r3, r2
 800a548:	d00b      	beq.n	800a562 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2204      	movs	r2, #4
 800a550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2290      	movs	r2, #144	@ 0x90
 800a556:	589b      	ldr	r3, [r3, r2]
 800a558:	2202      	movs	r2, #2
 800a55a:	431a      	orrs	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2190      	movs	r1, #144	@ 0x90
 800a560:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a562:	23a4      	movs	r3, #164	@ 0xa4
 800a564:	18fb      	adds	r3, r7, r3
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2208      	movs	r2, #8
 800a56a:	4013      	ands	r3, r2
 800a56c:	d017      	beq.n	800a59e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a56e:	23a0      	movs	r3, #160	@ 0xa0
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2220      	movs	r2, #32
 800a576:	4013      	ands	r3, r2
 800a578:	d105      	bne.n	800a586 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a57a:	239c      	movs	r3, #156	@ 0x9c
 800a57c:	18fb      	adds	r3, r7, r3
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a5b      	ldr	r2, [pc, #364]	@ (800a6f0 <HAL_UART_IRQHandler+0x2c0>)
 800a582:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a584:	d00b      	beq.n	800a59e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2208      	movs	r2, #8
 800a58c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2290      	movs	r2, #144	@ 0x90
 800a592:	589b      	ldr	r3, [r3, r2]
 800a594:	2208      	movs	r2, #8
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2190      	movs	r1, #144	@ 0x90
 800a59c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a59e:	23a4      	movs	r3, #164	@ 0xa4
 800a5a0:	18fb      	adds	r3, r7, r3
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	2380      	movs	r3, #128	@ 0x80
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	d013      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x1a4>
 800a5ac:	23a0      	movs	r3, #160	@ 0xa0
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	2380      	movs	r3, #128	@ 0x80
 800a5b4:	04db      	lsls	r3, r3, #19
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d00c      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2280      	movs	r2, #128	@ 0x80
 800a5c0:	0112      	lsls	r2, r2, #4
 800a5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2290      	movs	r2, #144	@ 0x90
 800a5c8:	589b      	ldr	r3, [r3, r2]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	431a      	orrs	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2190      	movs	r1, #144	@ 0x90
 800a5d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2290      	movs	r2, #144	@ 0x90
 800a5d8:	589b      	ldr	r3, [r3, r2]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d100      	bne.n	800a5e0 <HAL_UART_IRQHandler+0x1b0>
 800a5de:	e23d      	b.n	800aa5c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5e0:	23a4      	movs	r3, #164	@ 0xa4
 800a5e2:	18fb      	adds	r3, r7, r3
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	d015      	beq.n	800a618 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5ec:	23a0      	movs	r3, #160	@ 0xa0
 800a5ee:	18fb      	adds	r3, r7, r3
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	d106      	bne.n	800a606 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5f8:	239c      	movs	r3, #156	@ 0x9c
 800a5fa:	18fb      	adds	r3, r7, r3
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	2380      	movs	r3, #128	@ 0x80
 800a600:	055b      	lsls	r3, r3, #21
 800a602:	4013      	ands	r3, r2
 800a604:	d008      	beq.n	800a618 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	0010      	movs	r0, r2
 800a616:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2290      	movs	r2, #144	@ 0x90
 800a61c:	589b      	ldr	r3, [r3, r2]
 800a61e:	2194      	movs	r1, #148	@ 0x94
 800a620:	187a      	adds	r2, r7, r1
 800a622:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	2240      	movs	r2, #64	@ 0x40
 800a62c:	4013      	ands	r3, r2
 800a62e:	2b40      	cmp	r3, #64	@ 0x40
 800a630:	d004      	beq.n	800a63c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a632:	187b      	adds	r3, r7, r1
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2228      	movs	r2, #40	@ 0x28
 800a638:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a63a:	d04c      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	0018      	movs	r0, r3
 800a640:	f000 fea0 	bl	800b384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2240      	movs	r2, #64	@ 0x40
 800a64c:	4013      	ands	r3, r2
 800a64e:	2b40      	cmp	r3, #64	@ 0x40
 800a650:	d13c      	bne.n	800a6cc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a652:	f3ef 8310 	mrs	r3, PRIMASK
 800a656:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800a658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65a:	2090      	movs	r0, #144	@ 0x90
 800a65c:	183a      	adds	r2, r7, r0
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	2301      	movs	r3, #1
 800a662:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a666:	f383 8810 	msr	PRIMASK, r3
}
 800a66a:	46c0      	nop			@ (mov r8, r8)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2140      	movs	r1, #64	@ 0x40
 800a678:	438a      	bics	r2, r1
 800a67a:	609a      	str	r2, [r3, #8]
 800a67c:	183b      	adds	r3, r7, r0
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a684:	f383 8810 	msr	PRIMASK, r3
}
 800a688:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2280      	movs	r2, #128	@ 0x80
 800a68e:	589b      	ldr	r3, [r3, r2]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d016      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2280      	movs	r2, #128	@ 0x80
 800a698:	589b      	ldr	r3, [r3, r2]
 800a69a:	4a17      	ldr	r2, [pc, #92]	@ (800a6f8 <HAL_UART_IRQHandler+0x2c8>)
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2280      	movs	r2, #128	@ 0x80
 800a6a2:	589b      	ldr	r3, [r3, r2]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7fc fa2d 	bl	8006b04 <HAL_DMA_Abort_IT>
 800a6aa:	1e03      	subs	r3, r0, #0
 800a6ac:	d01c      	beq.n	800a6e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2280      	movs	r2, #128	@ 0x80
 800a6b2:	589b      	ldr	r3, [r3, r2]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	2180      	movs	r1, #128	@ 0x80
 800a6ba:	5852      	ldr	r2, [r2, r1]
 800a6bc:	0010      	movs	r0, r2
 800a6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	e012      	b.n	800a6e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f000 f9f1 	bl	800aaac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ca:	e00d      	b.n	800a6e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f000 f9ec 	bl	800aaac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d4:	e008      	b.n	800a6e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f000 f9e7 	bl	800aaac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2290      	movs	r2, #144	@ 0x90
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a6e6:	e1b9      	b.n	800aa5c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e8:	46c0      	nop			@ (mov r8, r8)
    return;
 800a6ea:	e1b7      	b.n	800aa5c <HAL_UART_IRQHandler+0x62c>
 800a6ec:	0000080f 	.word	0x0000080f
 800a6f0:	10000001 	.word	0x10000001
 800a6f4:	04000120 	.word	0x04000120
 800a6f8:	0800b701 	.word	0x0800b701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a700:	2b01      	cmp	r3, #1
 800a702:	d000      	beq.n	800a706 <HAL_UART_IRQHandler+0x2d6>
 800a704:	e13e      	b.n	800a984 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a706:	23a4      	movs	r3, #164	@ 0xa4
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2210      	movs	r2, #16
 800a70e:	4013      	ands	r3, r2
 800a710:	d100      	bne.n	800a714 <HAL_UART_IRQHandler+0x2e4>
 800a712:	e137      	b.n	800a984 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a714:	23a0      	movs	r3, #160	@ 0xa0
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2210      	movs	r2, #16
 800a71c:	4013      	ands	r3, r2
 800a71e:	d100      	bne.n	800a722 <HAL_UART_IRQHandler+0x2f2>
 800a720:	e130      	b.n	800a984 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2210      	movs	r2, #16
 800a728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2240      	movs	r2, #64	@ 0x40
 800a732:	4013      	ands	r3, r2
 800a734:	2b40      	cmp	r3, #64	@ 0x40
 800a736:	d000      	beq.n	800a73a <HAL_UART_IRQHandler+0x30a>
 800a738:	e0a4      	b.n	800a884 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2280      	movs	r2, #128	@ 0x80
 800a73e:	589b      	ldr	r3, [r3, r2]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	217e      	movs	r1, #126	@ 0x7e
 800a746:	187b      	adds	r3, r7, r1
 800a748:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a74a:	187b      	adds	r3, r7, r1
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d100      	bne.n	800a754 <HAL_UART_IRQHandler+0x324>
 800a752:	e185      	b.n	800aa60 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	225c      	movs	r2, #92	@ 0x5c
 800a758:	5a9b      	ldrh	r3, [r3, r2]
 800a75a:	187a      	adds	r2, r7, r1
 800a75c:	8812      	ldrh	r2, [r2, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d300      	bcc.n	800a764 <HAL_UART_IRQHandler+0x334>
 800a762:	e17d      	b.n	800aa60 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	187a      	adds	r2, r7, r1
 800a768:	215e      	movs	r1, #94	@ 0x5e
 800a76a:	8812      	ldrh	r2, [r2, #0]
 800a76c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2280      	movs	r2, #128	@ 0x80
 800a772:	589b      	ldr	r3, [r3, r2]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2220      	movs	r2, #32
 800a77a:	4013      	ands	r3, r2
 800a77c:	d170      	bne.n	800a860 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a77e:	f3ef 8310 	mrs	r3, PRIMASK
 800a782:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a786:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a788:	2301      	movs	r3, #1
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78e:	f383 8810 	msr	PRIMASK, r3
}
 800a792:	46c0      	nop			@ (mov r8, r8)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	49b4      	ldr	r1, [pc, #720]	@ (800aa70 <HAL_UART_IRQHandler+0x640>)
 800a7a0:	400a      	ands	r2, r1
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f383 8810 	msr	PRIMASK, r3
}
 800a7ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c0:	f383 8810 	msr	PRIMASK, r3
}
 800a7c4:	46c0      	nop			@ (mov r8, r8)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	438a      	bics	r2, r1
 800a7d4:	609a      	str	r2, [r3, #8]
 800a7d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7dc:	f383 8810 	msr	PRIMASK, r3
}
 800a7e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a7e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f2:	f383 8810 	msr	PRIMASK, r3
}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2140      	movs	r1, #64	@ 0x40
 800a804:	438a      	bics	r2, r1
 800a806:	609a      	str	r2, [r3, #8]
 800a808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a80a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80e:	f383 8810 	msr	PRIMASK, r3
}
 800a812:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	228c      	movs	r2, #140	@ 0x8c
 800a818:	2120      	movs	r1, #32
 800a81a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a822:	f3ef 8310 	mrs	r3, PRIMASK
 800a826:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800a828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a82c:	2301      	movs	r3, #1
 800a82e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a832:	f383 8810 	msr	PRIMASK, r3
}
 800a836:	46c0      	nop			@ (mov r8, r8)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2110      	movs	r1, #16
 800a844:	438a      	bics	r2, r1
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a84a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a84e:	f383 8810 	msr	PRIMASK, r3
}
 800a852:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2280      	movs	r2, #128	@ 0x80
 800a858:	589b      	ldr	r3, [r3, r2]
 800a85a:	0018      	movs	r0, r3
 800a85c:	f7fc f8f0 	bl	8006a40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	225c      	movs	r2, #92	@ 0x5c
 800a86a:	5a9a      	ldrh	r2, [r3, r2]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	215e      	movs	r1, #94	@ 0x5e
 800a870:	5a5b      	ldrh	r3, [r3, r1]
 800a872:	b29b      	uxth	r3, r3
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	0011      	movs	r1, r2
 800a87c:	0018      	movs	r0, r3
 800a87e:	f000 f91d 	bl	800aabc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a882:	e0ed      	b.n	800aa60 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	225c      	movs	r2, #92	@ 0x5c
 800a888:	5a99      	ldrh	r1, [r3, r2]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	225e      	movs	r2, #94	@ 0x5e
 800a88e:	5a9b      	ldrh	r3, [r3, r2]
 800a890:	b29a      	uxth	r2, r3
 800a892:	208e      	movs	r0, #142	@ 0x8e
 800a894:	183b      	adds	r3, r7, r0
 800a896:	1a8a      	subs	r2, r1, r2
 800a898:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	225e      	movs	r2, #94	@ 0x5e
 800a89e:	5a9b      	ldrh	r3, [r3, r2]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d100      	bne.n	800a8a8 <HAL_UART_IRQHandler+0x478>
 800a8a6:	e0dd      	b.n	800aa64 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800a8a8:	183b      	adds	r3, r7, r0
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d100      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x482>
 800a8b0:	e0d8      	b.n	800aa64 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8ba:	2488      	movs	r4, #136	@ 0x88
 800a8bc:	193a      	adds	r2, r7, r4
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ca:	46c0      	nop			@ (mov r8, r8)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4967      	ldr	r1, [pc, #412]	@ (800aa74 <HAL_UART_IRQHandler+0x644>)
 800a8d8:	400a      	ands	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	193b      	adds	r3, r7, r4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f383 8810 	msr	PRIMASK, r3
}
 800a8e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8f2:	2484      	movs	r4, #132	@ 0x84
 800a8f4:	193a      	adds	r2, r7, r4
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f383 8810 	msr	PRIMASK, r3
}
 800a902:	46c0      	nop			@ (mov r8, r8)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	495a      	ldr	r1, [pc, #360]	@ (800aa78 <HAL_UART_IRQHandler+0x648>)
 800a910:	400a      	ands	r2, r1
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	193b      	adds	r3, r7, r4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	f383 8810 	msr	PRIMASK, r3
}
 800a920:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	228c      	movs	r2, #140	@ 0x8c
 800a926:	2120      	movs	r1, #32
 800a928:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a936:	f3ef 8310 	mrs	r3, PRIMASK
 800a93a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93e:	2480      	movs	r4, #128	@ 0x80
 800a940:	193a      	adds	r2, r7, r4
 800a942:	6013      	str	r3, [r2, #0]
 800a944:	2301      	movs	r3, #1
 800a946:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94a:	f383 8810 	msr	PRIMASK, r3
}
 800a94e:	46c0      	nop			@ (mov r8, r8)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2110      	movs	r1, #16
 800a95c:	438a      	bics	r2, r1
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	193b      	adds	r3, r7, r4
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a968:	f383 8810 	msr	PRIMASK, r3
}
 800a96c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2202      	movs	r2, #2
 800a972:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a974:	183b      	adds	r3, r7, r0
 800a976:	881a      	ldrh	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	0011      	movs	r1, r2
 800a97c:	0018      	movs	r0, r3
 800a97e:	f000 f89d 	bl	800aabc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a982:	e06f      	b.n	800aa64 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a984:	23a4      	movs	r3, #164	@ 0xa4
 800a986:	18fb      	adds	r3, r7, r3
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	2380      	movs	r3, #128	@ 0x80
 800a98c:	035b      	lsls	r3, r3, #13
 800a98e:	4013      	ands	r3, r2
 800a990:	d010      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x584>
 800a992:	239c      	movs	r3, #156	@ 0x9c
 800a994:	18fb      	adds	r3, r7, r3
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	2380      	movs	r3, #128	@ 0x80
 800a99a:	03db      	lsls	r3, r3, #15
 800a99c:	4013      	ands	r3, r2
 800a99e:	d009      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2280      	movs	r2, #128	@ 0x80
 800a9a6:	0352      	lsls	r2, r2, #13
 800a9a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 feea 	bl	800b786 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9b2:	e05a      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9b4:	23a4      	movs	r3, #164	@ 0xa4
 800a9b6:	18fb      	adds	r3, r7, r3
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2280      	movs	r2, #128	@ 0x80
 800a9bc:	4013      	ands	r3, r2
 800a9be:	d016      	beq.n	800a9ee <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9c0:	23a0      	movs	r3, #160	@ 0xa0
 800a9c2:	18fb      	adds	r3, r7, r3
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2280      	movs	r2, #128	@ 0x80
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d106      	bne.n	800a9da <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9cc:	239c      	movs	r3, #156	@ 0x9c
 800a9ce:	18fb      	adds	r3, r7, r3
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	2380      	movs	r3, #128	@ 0x80
 800a9d4:	041b      	lsls	r3, r3, #16
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	d009      	beq.n	800a9ee <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d042      	beq.n	800aa68 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	0010      	movs	r0, r2
 800a9ea:	4798      	blx	r3
    }
    return;
 800a9ec:	e03c      	b.n	800aa68 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9ee:	23a4      	movs	r3, #164	@ 0xa4
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2240      	movs	r2, #64	@ 0x40
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	d00a      	beq.n	800aa10 <HAL_UART_IRQHandler+0x5e0>
 800a9fa:	23a0      	movs	r3, #160	@ 0xa0
 800a9fc:	18fb      	adds	r3, r7, r3
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2240      	movs	r2, #64	@ 0x40
 800aa02:	4013      	ands	r3, r2
 800aa04:	d004      	beq.n	800aa10 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f000 fe90 	bl	800b72e <UART_EndTransmit_IT>
    return;
 800aa0e:	e02c      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa10:	23a4      	movs	r3, #164	@ 0xa4
 800aa12:	18fb      	adds	r3, r7, r3
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	2380      	movs	r3, #128	@ 0x80
 800aa18:	041b      	lsls	r3, r3, #16
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	d00b      	beq.n	800aa36 <HAL_UART_IRQHandler+0x606>
 800aa1e:	23a0      	movs	r3, #160	@ 0xa0
 800aa20:	18fb      	adds	r3, r7, r3
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	2380      	movs	r3, #128	@ 0x80
 800aa26:	05db      	lsls	r3, r3, #23
 800aa28:	4013      	ands	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f000 feb9 	bl	800b7a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa34:	e019      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa36:	23a4      	movs	r3, #164	@ 0xa4
 800aa38:	18fb      	adds	r3, r7, r3
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	2380      	movs	r3, #128	@ 0x80
 800aa3e:	045b      	lsls	r3, r3, #17
 800aa40:	4013      	ands	r3, r2
 800aa42:	d012      	beq.n	800aa6a <HAL_UART_IRQHandler+0x63a>
 800aa44:	23a0      	movs	r3, #160	@ 0xa0
 800aa46:	18fb      	adds	r3, r7, r3
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da0d      	bge.n	800aa6a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 fea0 	bl	800b796 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa56:	e008      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
      return;
 800aa58:	46c0      	nop			@ (mov r8, r8)
 800aa5a:	e006      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
    return;
 800aa5c:	46c0      	nop			@ (mov r8, r8)
 800aa5e:	e004      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
      return;
 800aa60:	46c0      	nop			@ (mov r8, r8)
 800aa62:	e002      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
      return;
 800aa64:	46c0      	nop			@ (mov r8, r8)
 800aa66:	e000      	b.n	800aa6a <HAL_UART_IRQHandler+0x63a>
    return;
 800aa68:	46c0      	nop			@ (mov r8, r8)
  }
}
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	b02a      	add	sp, #168	@ 0xa8
 800aa6e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa70:	fffffeff 	.word	0xfffffeff
 800aa74:	fffffedf 	.word	0xfffffedf
 800aa78:	effffffe 	.word	0xeffffffe

0800aa7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa84:	46c0      	nop			@ (mov r8, r8)
 800aa86:	46bd      	mov	sp, r7
 800aa88:	b002      	add	sp, #8
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aa94:	46c0      	nop			@ (mov r8, r8)
 800aa96:	46bd      	mov	sp, r7
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aaa4:	46c0      	nop			@ (mov r8, r8)
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b002      	add	sp, #8
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aab4:	46c0      	nop			@ (mov r8, r8)
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b002      	add	sp, #8
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	000a      	movs	r2, r1
 800aac6:	1cbb      	adds	r3, r7, #2
 800aac8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aaca:	46c0      	nop			@ (mov r8, r8)
 800aacc:	46bd      	mov	sp, r7
 800aace:	b002      	add	sp, #8
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aadc:	231a      	movs	r3, #26
 800aade:	18fb      	adds	r3, r7, r3
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689a      	ldr	r2, [r3, #8]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	431a      	orrs	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	69db      	ldr	r3, [r3, #28]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4abc      	ldr	r2, [pc, #752]	@ (800adf4 <UART_SetConfig+0x320>)
 800ab04:	4013      	ands	r3, r2
 800ab06:	0019      	movs	r1, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69fa      	ldr	r2, [r7, #28]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4ab7      	ldr	r2, [pc, #732]	@ (800adf8 <UART_SetConfig+0x324>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	0019      	movs	r1, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	430a      	orrs	r2, r1
 800ab28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	4aae      	ldr	r2, [pc, #696]	@ (800adfc <UART_SetConfig+0x328>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	0019      	movs	r1, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab56:	220f      	movs	r2, #15
 800ab58:	4393      	bics	r3, r2
 800ab5a:	0019      	movs	r1, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4aa4      	ldr	r2, [pc, #656]	@ (800ae00 <UART_SetConfig+0x32c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d127      	bne.n	800abc2 <UART_SetConfig+0xee>
 800ab72:	4ba4      	ldr	r3, [pc, #656]	@ (800ae04 <UART_SetConfig+0x330>)
 800ab74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab76:	2203      	movs	r2, #3
 800ab78:	4013      	ands	r3, r2
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d017      	beq.n	800abae <UART_SetConfig+0xda>
 800ab7e:	d81b      	bhi.n	800abb8 <UART_SetConfig+0xe4>
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d00a      	beq.n	800ab9a <UART_SetConfig+0xc6>
 800ab84:	d818      	bhi.n	800abb8 <UART_SetConfig+0xe4>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <UART_SetConfig+0xbc>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d00a      	beq.n	800aba4 <UART_SetConfig+0xd0>
 800ab8e:	e013      	b.n	800abb8 <UART_SetConfig+0xe4>
 800ab90:	231b      	movs	r3, #27
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	2200      	movs	r2, #0
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	e058      	b.n	800ac4c <UART_SetConfig+0x178>
 800ab9a:	231b      	movs	r3, #27
 800ab9c:	18fb      	adds	r3, r7, r3
 800ab9e:	2202      	movs	r2, #2
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e053      	b.n	800ac4c <UART_SetConfig+0x178>
 800aba4:	231b      	movs	r3, #27
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	2204      	movs	r2, #4
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	e04e      	b.n	800ac4c <UART_SetConfig+0x178>
 800abae:	231b      	movs	r3, #27
 800abb0:	18fb      	adds	r3, r7, r3
 800abb2:	2208      	movs	r2, #8
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e049      	b.n	800ac4c <UART_SetConfig+0x178>
 800abb8:	231b      	movs	r3, #27
 800abba:	18fb      	adds	r3, r7, r3
 800abbc:	2210      	movs	r2, #16
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e044      	b.n	800ac4c <UART_SetConfig+0x178>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a90      	ldr	r2, [pc, #576]	@ (800ae08 <UART_SetConfig+0x334>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d127      	bne.n	800ac1c <UART_SetConfig+0x148>
 800abcc:	4b8d      	ldr	r3, [pc, #564]	@ (800ae04 <UART_SetConfig+0x330>)
 800abce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd0:	220c      	movs	r2, #12
 800abd2:	4013      	ands	r3, r2
 800abd4:	2b0c      	cmp	r3, #12
 800abd6:	d017      	beq.n	800ac08 <UART_SetConfig+0x134>
 800abd8:	d81b      	bhi.n	800ac12 <UART_SetConfig+0x13e>
 800abda:	2b08      	cmp	r3, #8
 800abdc:	d00a      	beq.n	800abf4 <UART_SetConfig+0x120>
 800abde:	d818      	bhi.n	800ac12 <UART_SetConfig+0x13e>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <UART_SetConfig+0x116>
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d00a      	beq.n	800abfe <UART_SetConfig+0x12a>
 800abe8:	e013      	b.n	800ac12 <UART_SetConfig+0x13e>
 800abea:	231b      	movs	r3, #27
 800abec:	18fb      	adds	r3, r7, r3
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e02b      	b.n	800ac4c <UART_SetConfig+0x178>
 800abf4:	231b      	movs	r3, #27
 800abf6:	18fb      	adds	r3, r7, r3
 800abf8:	2202      	movs	r2, #2
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	e026      	b.n	800ac4c <UART_SetConfig+0x178>
 800abfe:	231b      	movs	r3, #27
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	2204      	movs	r2, #4
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	e021      	b.n	800ac4c <UART_SetConfig+0x178>
 800ac08:	231b      	movs	r3, #27
 800ac0a:	18fb      	adds	r3, r7, r3
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	701a      	strb	r2, [r3, #0]
 800ac10:	e01c      	b.n	800ac4c <UART_SetConfig+0x178>
 800ac12:	231b      	movs	r3, #27
 800ac14:	18fb      	adds	r3, r7, r3
 800ac16:	2210      	movs	r2, #16
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e017      	b.n	800ac4c <UART_SetConfig+0x178>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a7a      	ldr	r2, [pc, #488]	@ (800ae0c <UART_SetConfig+0x338>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d104      	bne.n	800ac30 <UART_SetConfig+0x15c>
 800ac26:	231b      	movs	r3, #27
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	e00d      	b.n	800ac4c <UART_SetConfig+0x178>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a76      	ldr	r2, [pc, #472]	@ (800ae10 <UART_SetConfig+0x33c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d104      	bne.n	800ac44 <UART_SetConfig+0x170>
 800ac3a:	231b      	movs	r3, #27
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	2200      	movs	r2, #0
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e003      	b.n	800ac4c <UART_SetConfig+0x178>
 800ac44:	231b      	movs	r3, #27
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	2210      	movs	r2, #16
 800ac4a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	69da      	ldr	r2, [r3, #28]
 800ac50:	2380      	movs	r3, #128	@ 0x80
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d000      	beq.n	800ac5a <UART_SetConfig+0x186>
 800ac58:	e065      	b.n	800ad26 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800ac5a:	231b      	movs	r3, #27
 800ac5c:	18fb      	adds	r3, r7, r3
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d015      	beq.n	800ac90 <UART_SetConfig+0x1bc>
 800ac64:	dc18      	bgt.n	800ac98 <UART_SetConfig+0x1c4>
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d00d      	beq.n	800ac86 <UART_SetConfig+0x1b2>
 800ac6a:	dc15      	bgt.n	800ac98 <UART_SetConfig+0x1c4>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <UART_SetConfig+0x1a2>
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d005      	beq.n	800ac80 <UART_SetConfig+0x1ac>
 800ac74:	e010      	b.n	800ac98 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac76:	f7fe f91f 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 800ac7a:	0003      	movs	r3, r0
 800ac7c:	617b      	str	r3, [r7, #20]
        break;
 800ac7e:	e012      	b.n	800aca6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac80:	4b64      	ldr	r3, [pc, #400]	@ (800ae14 <UART_SetConfig+0x340>)
 800ac82:	617b      	str	r3, [r7, #20]
        break;
 800ac84:	e00f      	b.n	800aca6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac86:	f7fe f88b 	bl	8008da0 <HAL_RCC_GetSysClockFreq>
 800ac8a:	0003      	movs	r3, r0
 800ac8c:	617b      	str	r3, [r7, #20]
        break;
 800ac8e:	e00a      	b.n	800aca6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	021b      	lsls	r3, r3, #8
 800ac94:	617b      	str	r3, [r7, #20]
        break;
 800ac96:	e006      	b.n	800aca6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ac9c:	231a      	movs	r3, #26
 800ac9e:	18fb      	adds	r3, r7, r3
 800aca0:	2201      	movs	r2, #1
 800aca2:	701a      	strb	r2, [r3, #0]
        break;
 800aca4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d100      	bne.n	800acae <UART_SetConfig+0x1da>
 800acac:	e08d      	b.n	800adca <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acb2:	4b59      	ldr	r3, [pc, #356]	@ (800ae18 <UART_SetConfig+0x344>)
 800acb4:	0052      	lsls	r2, r2, #1
 800acb6:	5ad3      	ldrh	r3, [r2, r3]
 800acb8:	0019      	movs	r1, r3
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f7f5 fa3c 	bl	8000138 <__udivsi3>
 800acc0:	0003      	movs	r3, r0
 800acc2:	005a      	lsls	r2, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	085b      	lsrs	r3, r3, #1
 800acca:	18d2      	adds	r2, r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	0019      	movs	r1, r3
 800acd2:	0010      	movs	r0, r2
 800acd4:	f7f5 fa30 	bl	8000138 <__udivsi3>
 800acd8:	0003      	movs	r3, r0
 800acda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b0f      	cmp	r3, #15
 800ace0:	d91c      	bls.n	800ad1c <UART_SetConfig+0x248>
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	2380      	movs	r3, #128	@ 0x80
 800ace6:	025b      	lsls	r3, r3, #9
 800ace8:	429a      	cmp	r2, r3
 800acea:	d217      	bcs.n	800ad1c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	b29a      	uxth	r2, r3
 800acf0:	200e      	movs	r0, #14
 800acf2:	183b      	adds	r3, r7, r0
 800acf4:	210f      	movs	r1, #15
 800acf6:	438a      	bics	r2, r1
 800acf8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2207      	movs	r2, #7
 800ad02:	4013      	ands	r3, r2
 800ad04:	b299      	uxth	r1, r3
 800ad06:	183b      	adds	r3, r7, r0
 800ad08:	183a      	adds	r2, r7, r0
 800ad0a:	8812      	ldrh	r2, [r2, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	183a      	adds	r2, r7, r0
 800ad16:	8812      	ldrh	r2, [r2, #0]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e056      	b.n	800adca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ad1c:	231a      	movs	r3, #26
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	e051      	b.n	800adca <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad26:	231b      	movs	r3, #27
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d015      	beq.n	800ad5c <UART_SetConfig+0x288>
 800ad30:	dc18      	bgt.n	800ad64 <UART_SetConfig+0x290>
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d00d      	beq.n	800ad52 <UART_SetConfig+0x27e>
 800ad36:	dc15      	bgt.n	800ad64 <UART_SetConfig+0x290>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <UART_SetConfig+0x26e>
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d005      	beq.n	800ad4c <UART_SetConfig+0x278>
 800ad40:	e010      	b.n	800ad64 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad42:	f7fe f8b9 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 800ad46:	0003      	movs	r3, r0
 800ad48:	617b      	str	r3, [r7, #20]
        break;
 800ad4a:	e012      	b.n	800ad72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad4c:	4b31      	ldr	r3, [pc, #196]	@ (800ae14 <UART_SetConfig+0x340>)
 800ad4e:	617b      	str	r3, [r7, #20]
        break;
 800ad50:	e00f      	b.n	800ad72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad52:	f7fe f825 	bl	8008da0 <HAL_RCC_GetSysClockFreq>
 800ad56:	0003      	movs	r3, r0
 800ad58:	617b      	str	r3, [r7, #20]
        break;
 800ad5a:	e00a      	b.n	800ad72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	617b      	str	r3, [r7, #20]
        break;
 800ad62:	e006      	b.n	800ad72 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ad68:	231a      	movs	r3, #26
 800ad6a:	18fb      	adds	r3, r7, r3
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	701a      	strb	r2, [r3, #0]
        break;
 800ad70:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d028      	beq.n	800adca <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad7c:	4b26      	ldr	r3, [pc, #152]	@ (800ae18 <UART_SetConfig+0x344>)
 800ad7e:	0052      	lsls	r2, r2, #1
 800ad80:	5ad3      	ldrh	r3, [r2, r3]
 800ad82:	0019      	movs	r1, r3
 800ad84:	6978      	ldr	r0, [r7, #20]
 800ad86:	f7f5 f9d7 	bl	8000138 <__udivsi3>
 800ad8a:	0003      	movs	r3, r0
 800ad8c:	001a      	movs	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	18d2      	adds	r2, r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	0019      	movs	r1, r3
 800ad9c:	0010      	movs	r0, r2
 800ad9e:	f7f5 f9cb 	bl	8000138 <__udivsi3>
 800ada2:	0003      	movs	r3, r0
 800ada4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b0f      	cmp	r3, #15
 800adaa:	d90a      	bls.n	800adc2 <UART_SetConfig+0x2ee>
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	2380      	movs	r3, #128	@ 0x80
 800adb0:	025b      	lsls	r3, r3, #9
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d205      	bcs.n	800adc2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	b29a      	uxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60da      	str	r2, [r3, #12]
 800adc0:	e003      	b.n	800adca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800adc2:	231a      	movs	r3, #26
 800adc4:	18fb      	adds	r3, r7, r3
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	226a      	movs	r2, #106	@ 0x6a
 800adce:	2101      	movs	r1, #1
 800add0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2268      	movs	r2, #104	@ 0x68
 800add6:	2101      	movs	r1, #1
 800add8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ade6:	231a      	movs	r3, #26
 800ade8:	18fb      	adds	r3, r7, r3
 800adea:	781b      	ldrb	r3, [r3, #0]
}
 800adec:	0018      	movs	r0, r3
 800adee:	46bd      	mov	sp, r7
 800adf0:	b008      	add	sp, #32
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	cfff69f3 	.word	0xcfff69f3
 800adf8:	ffffcfff 	.word	0xffffcfff
 800adfc:	11fff4ff 	.word	0x11fff4ff
 800ae00:	40013800 	.word	0x40013800
 800ae04:	40021000 	.word	0x40021000
 800ae08:	40004400 	.word	0x40004400
 800ae0c:	40004800 	.word	0x40004800
 800ae10:	40004c00 	.word	0x40004c00
 800ae14:	00f42400 	.word	0x00f42400
 800ae18:	0800e8fc 	.word	0x0800e8fc

0800ae1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae28:	2208      	movs	r2, #8
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	d00b      	beq.n	800ae46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4a4a      	ldr	r2, [pc, #296]	@ (800af60 <UART_AdvFeatureConfig+0x144>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	0019      	movs	r1, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	d00b      	beq.n	800ae68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	4a43      	ldr	r2, [pc, #268]	@ (800af64 <UART_AdvFeatureConfig+0x148>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	0019      	movs	r1, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	4013      	ands	r3, r2
 800ae70:	d00b      	beq.n	800ae8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	4a3b      	ldr	r2, [pc, #236]	@ (800af68 <UART_AdvFeatureConfig+0x14c>)
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	0019      	movs	r1, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae8e:	2204      	movs	r2, #4
 800ae90:	4013      	ands	r3, r2
 800ae92:	d00b      	beq.n	800aeac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	4a34      	ldr	r2, [pc, #208]	@ (800af6c <UART_AdvFeatureConfig+0x150>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	0019      	movs	r1, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb0:	2210      	movs	r2, #16
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	d00b      	beq.n	800aece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	4a2c      	ldr	r2, [pc, #176]	@ (800af70 <UART_AdvFeatureConfig+0x154>)
 800aebe:	4013      	ands	r3, r2
 800aec0:	0019      	movs	r1, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed2:	2220      	movs	r2, #32
 800aed4:	4013      	ands	r3, r2
 800aed6:	d00b      	beq.n	800aef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	4a25      	ldr	r2, [pc, #148]	@ (800af74 <UART_AdvFeatureConfig+0x158>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	0019      	movs	r1, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef4:	2240      	movs	r2, #64	@ 0x40
 800aef6:	4013      	ands	r3, r2
 800aef8:	d01d      	beq.n	800af36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	4a1d      	ldr	r2, [pc, #116]	@ (800af78 <UART_AdvFeatureConfig+0x15c>)
 800af02:	4013      	ands	r3, r2
 800af04:	0019      	movs	r1, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af16:	2380      	movs	r3, #128	@ 0x80
 800af18:	035b      	lsls	r3, r3, #13
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d10b      	bne.n	800af36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	4a15      	ldr	r2, [pc, #84]	@ (800af7c <UART_AdvFeatureConfig+0x160>)
 800af26:	4013      	ands	r3, r2
 800af28:	0019      	movs	r1, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af3a:	2280      	movs	r2, #128	@ 0x80
 800af3c:	4013      	ands	r3, r2
 800af3e:	d00b      	beq.n	800af58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	4a0e      	ldr	r2, [pc, #56]	@ (800af80 <UART_AdvFeatureConfig+0x164>)
 800af48:	4013      	ands	r3, r2
 800af4a:	0019      	movs	r1, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	605a      	str	r2, [r3, #4]
  }
}
 800af58:	46c0      	nop			@ (mov r8, r8)
 800af5a:	46bd      	mov	sp, r7
 800af5c:	b002      	add	sp, #8
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	ffff7fff 	.word	0xffff7fff
 800af64:	fffdffff 	.word	0xfffdffff
 800af68:	fffeffff 	.word	0xfffeffff
 800af6c:	fffbffff 	.word	0xfffbffff
 800af70:	ffffefff 	.word	0xffffefff
 800af74:	ffffdfff 	.word	0xffffdfff
 800af78:	ffefffff 	.word	0xffefffff
 800af7c:	ff9fffff 	.word	0xff9fffff
 800af80:	fff7ffff 	.word	0xfff7ffff

0800af84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b092      	sub	sp, #72	@ 0x48
 800af88:	af02      	add	r7, sp, #8
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2290      	movs	r2, #144	@ 0x90
 800af90:	2100      	movs	r1, #0
 800af92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af94:	f7fa fd54 	bl	8005a40 <HAL_GetTick>
 800af98:	0003      	movs	r3, r0
 800af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2208      	movs	r2, #8
 800afa4:	4013      	ands	r3, r2
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d12d      	bne.n	800b006 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afac:	2280      	movs	r2, #128	@ 0x80
 800afae:	0391      	lsls	r1, r2, #14
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4a47      	ldr	r2, [pc, #284]	@ (800b0d0 <UART_CheckIdleState+0x14c>)
 800afb4:	9200      	str	r2, [sp, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f000 f88e 	bl	800b0d8 <UART_WaitOnFlagUntilTimeout>
 800afbc:	1e03      	subs	r3, r0, #0
 800afbe:	d022      	beq.n	800b006 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc0:	f3ef 8310 	mrs	r3, PRIMASK
 800afc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afca:	2301      	movs	r3, #1
 800afcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd0:	f383 8810 	msr	PRIMASK, r3
}
 800afd4:	46c0      	nop			@ (mov r8, r8)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2180      	movs	r1, #128	@ 0x80
 800afe2:	438a      	bics	r2, r1
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afec:	f383 8810 	msr	PRIMASK, r3
}
 800aff0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2288      	movs	r2, #136	@ 0x88
 800aff6:	2120      	movs	r1, #32
 800aff8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2284      	movs	r2, #132	@ 0x84
 800affe:	2100      	movs	r1, #0
 800b000:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e060      	b.n	800b0c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2204      	movs	r2, #4
 800b00e:	4013      	ands	r3, r2
 800b010:	2b04      	cmp	r3, #4
 800b012:	d146      	bne.n	800b0a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b016:	2280      	movs	r2, #128	@ 0x80
 800b018:	03d1      	lsls	r1, r2, #15
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4a2c      	ldr	r2, [pc, #176]	@ (800b0d0 <UART_CheckIdleState+0x14c>)
 800b01e:	9200      	str	r2, [sp, #0]
 800b020:	2200      	movs	r2, #0
 800b022:	f000 f859 	bl	800b0d8 <UART_WaitOnFlagUntilTimeout>
 800b026:	1e03      	subs	r3, r0, #0
 800b028:	d03b      	beq.n	800b0a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02a:	f3ef 8310 	mrs	r3, PRIMASK
 800b02e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b030:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
 800b034:	2301      	movs	r3, #1
 800b036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f383 8810 	msr	PRIMASK, r3
}
 800b03e:	46c0      	nop			@ (mov r8, r8)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4922      	ldr	r1, [pc, #136]	@ (800b0d4 <UART_CheckIdleState+0x150>)
 800b04c:	400a      	ands	r2, r1
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f383 8810 	msr	PRIMASK, r3
}
 800b05a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b05c:	f3ef 8310 	mrs	r3, PRIMASK
 800b060:	61bb      	str	r3, [r7, #24]
  return(result);
 800b062:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b064:	633b      	str	r3, [r7, #48]	@ 0x30
 800b066:	2301      	movs	r3, #1
 800b068:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	f383 8810 	msr	PRIMASK, r3
}
 800b070:	46c0      	nop			@ (mov r8, r8)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2101      	movs	r1, #1
 800b07e:	438a      	bics	r2, r1
 800b080:	609a      	str	r2, [r3, #8]
 800b082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b084:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	f383 8810 	msr	PRIMASK, r3
}
 800b08c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	228c      	movs	r2, #140	@ 0x8c
 800b092:	2120      	movs	r1, #32
 800b094:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2284      	movs	r2, #132	@ 0x84
 800b09a:	2100      	movs	r1, #0
 800b09c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e012      	b.n	800b0c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2288      	movs	r2, #136	@ 0x88
 800b0a6:	2120      	movs	r1, #32
 800b0a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	228c      	movs	r2, #140	@ 0x8c
 800b0ae:	2120      	movs	r1, #32
 800b0b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2284      	movs	r2, #132	@ 0x84
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b010      	add	sp, #64	@ 0x40
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	01ffffff 	.word	0x01ffffff
 800b0d4:	fffffedf 	.word	0xfffffedf

0800b0d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	1dfb      	adds	r3, r7, #7
 800b0e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e8:	e051      	b.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	d04e      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0f0:	f7fa fca6 	bl	8005a40 <HAL_GetTick>
 800b0f4:	0002      	movs	r2, r0
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d302      	bcc.n	800b106 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e051      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2204      	movs	r2, #4
 800b112:	4013      	ands	r3, r2
 800b114:	d03b      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b80      	cmp	r3, #128	@ 0x80
 800b11a:	d038      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b40      	cmp	r3, #64	@ 0x40
 800b120:	d035      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	2208      	movs	r2, #8
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b08      	cmp	r3, #8
 800b12e:	d111      	bne.n	800b154 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2208      	movs	r2, #8
 800b136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	0018      	movs	r0, r3
 800b13c:	f000 f922 	bl	800b384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2290      	movs	r2, #144	@ 0x90
 800b144:	2108      	movs	r1, #8
 800b146:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2284      	movs	r2, #132	@ 0x84
 800b14c:	2100      	movs	r1, #0
 800b14e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e02c      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	69da      	ldr	r2, [r3, #28]
 800b15a:	2380      	movs	r3, #128	@ 0x80
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	401a      	ands	r2, r3
 800b160:	2380      	movs	r3, #128	@ 0x80
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	429a      	cmp	r2, r3
 800b166:	d112      	bne.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2280      	movs	r2, #128	@ 0x80
 800b16e:	0112      	lsls	r2, r2, #4
 800b170:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	0018      	movs	r0, r3
 800b176:	f000 f905 	bl	800b384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2290      	movs	r2, #144	@ 0x90
 800b17e:	2120      	movs	r1, #32
 800b180:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2284      	movs	r2, #132	@ 0x84
 800b186:	2100      	movs	r1, #0
 800b188:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e00f      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	4013      	ands	r3, r2
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	425a      	negs	r2, r3
 800b19e:	4153      	adcs	r3, r2
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	001a      	movs	r2, r3
 800b1a4:	1dfb      	adds	r3, r7, #7
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d09e      	beq.n	800b0ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b004      	add	sp, #16
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b090      	sub	sp, #64	@ 0x40
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	1dbb      	adds	r3, r7, #6
 800b1c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	1dba      	adds	r2, r7, #6
 800b1d0:	215c      	movs	r1, #92	@ 0x5c
 800b1d2:	8812      	ldrh	r2, [r2, #0]
 800b1d4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2290      	movs	r2, #144	@ 0x90
 800b1da:	2100      	movs	r1, #0
 800b1dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	228c      	movs	r2, #140	@ 0x8c
 800b1e2:	2122      	movs	r1, #34	@ 0x22
 800b1e4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2280      	movs	r2, #128	@ 0x80
 800b1ea:	589b      	ldr	r3, [r3, r2]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d02d      	beq.n	800b24c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2280      	movs	r2, #128	@ 0x80
 800b1f4:	589b      	ldr	r3, [r3, r2]
 800b1f6:	4a40      	ldr	r2, [pc, #256]	@ (800b2f8 <UART_Start_Receive_DMA+0x140>)
 800b1f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2280      	movs	r2, #128	@ 0x80
 800b1fe:	589b      	ldr	r3, [r3, r2]
 800b200:	4a3e      	ldr	r2, [pc, #248]	@ (800b2fc <UART_Start_Receive_DMA+0x144>)
 800b202:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2280      	movs	r2, #128	@ 0x80
 800b208:	589b      	ldr	r3, [r3, r2]
 800b20a:	4a3d      	ldr	r2, [pc, #244]	@ (800b300 <UART_Start_Receive_DMA+0x148>)
 800b20c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2280      	movs	r2, #128	@ 0x80
 800b212:	589b      	ldr	r3, [r3, r2]
 800b214:	2200      	movs	r2, #0
 800b216:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2280      	movs	r2, #128	@ 0x80
 800b21c:	5898      	ldr	r0, [r3, r2]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3324      	adds	r3, #36	@ 0x24
 800b224:	0019      	movs	r1, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b22a:	001a      	movs	r2, r3
 800b22c:	1dbb      	adds	r3, r7, #6
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	f7fb fb80 	bl	8006934 <HAL_DMA_Start_IT>
 800b234:	1e03      	subs	r3, r0, #0
 800b236:	d009      	beq.n	800b24c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2290      	movs	r2, #144	@ 0x90
 800b23c:	2110      	movs	r1, #16
 800b23e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	228c      	movs	r2, #140	@ 0x8c
 800b244:	2120      	movs	r1, #32
 800b246:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e050      	b.n	800b2ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d019      	beq.n	800b288 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b25e:	2301      	movs	r3, #1
 800b260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b264:	f383 8810 	msr	PRIMASK, r3
}
 800b268:	46c0      	nop			@ (mov r8, r8)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2180      	movs	r1, #128	@ 0x80
 800b276:	0049      	lsls	r1, r1, #1
 800b278:	430a      	orrs	r2, r1
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	f383 8810 	msr	PRIMASK, r3
}
 800b286:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b288:	f3ef 8310 	mrs	r3, PRIMASK
 800b28c:	613b      	str	r3, [r7, #16]
  return(result);
 800b28e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b290:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b292:	2301      	movs	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f383 8810 	msr	PRIMASK, r3
}
 800b29c:	46c0      	nop			@ (mov r8, r8)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	689a      	ldr	r2, [r3, #8]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	609a      	str	r2, [r3, #8]
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b2be:	61fb      	str	r3, [r7, #28]
  return(result);
 800b2c0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	f383 8810 	msr	PRIMASK, r3
}
 800b2ce:	46c0      	nop			@ (mov r8, r8)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2140      	movs	r1, #64	@ 0x40
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	609a      	str	r2, [r3, #8]
 800b2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	b010      	add	sp, #64	@ 0x40
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	46c0      	nop			@ (mov r8, r8)
 800b2f8:	0800b509 	.word	0x0800b509
 800b2fc:	0800b639 	.word	0x0800b639
 800b300:	0800b67b 	.word	0x0800b67b

0800b304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08a      	sub	sp, #40	@ 0x28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30c:	f3ef 8310 	mrs	r3, PRIMASK
 800b310:	60bb      	str	r3, [r7, #8]
  return(result);
 800b312:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b314:	627b      	str	r3, [r7, #36]	@ 0x24
 800b316:	2301      	movs	r3, #1
 800b318:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f383 8810 	msr	PRIMASK, r3
}
 800b320:	46c0      	nop			@ (mov r8, r8)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	21c0      	movs	r1, #192	@ 0xc0
 800b32e:	438a      	bics	r2, r1
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f383 8810 	msr	PRIMASK, r3
}
 800b33c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b33e:	f3ef 8310 	mrs	r3, PRIMASK
 800b342:	617b      	str	r3, [r7, #20]
  return(result);
 800b344:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b346:	623b      	str	r3, [r7, #32]
 800b348:	2301      	movs	r3, #1
 800b34a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f383 8810 	msr	PRIMASK, r3
}
 800b352:	46c0      	nop			@ (mov r8, r8)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4908      	ldr	r1, [pc, #32]	@ (800b380 <UART_EndTxTransfer+0x7c>)
 800b360:	400a      	ands	r2, r1
 800b362:	609a      	str	r2, [r3, #8]
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	f383 8810 	msr	PRIMASK, r3
}
 800b36e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2288      	movs	r2, #136	@ 0x88
 800b374:	2120      	movs	r1, #32
 800b376:	5099      	str	r1, [r3, r2]
}
 800b378:	46c0      	nop			@ (mov r8, r8)
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b00a      	add	sp, #40	@ 0x28
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	ff7fffff 	.word	0xff7fffff

0800b384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08e      	sub	sp, #56	@ 0x38
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38c:	f3ef 8310 	mrs	r3, PRIMASK
 800b390:	617b      	str	r3, [r7, #20]
  return(result);
 800b392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b394:	637b      	str	r3, [r7, #52]	@ 0x34
 800b396:	2301      	movs	r3, #1
 800b398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	f383 8810 	msr	PRIMASK, r3
}
 800b3a0:	46c0      	nop			@ (mov r8, r8)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4926      	ldr	r1, [pc, #152]	@ (800b448 <UART_EndRxTransfer+0xc4>)
 800b3ae:	400a      	ands	r2, r1
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	f383 8810 	msr	PRIMASK, r3
}
 800b3bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3be:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c2:	623b      	str	r3, [r7, #32]
  return(result);
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ce:	f383 8810 	msr	PRIMASK, r3
}
 800b3d2:	46c0      	nop			@ (mov r8, r8)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689a      	ldr	r2, [r3, #8]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	491b      	ldr	r1, [pc, #108]	@ (800b44c <UART_EndRxTransfer+0xc8>)
 800b3e0:	400a      	ands	r2, r1
 800b3e2:	609a      	str	r2, [r3, #8]
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ea:	f383 8810 	msr	PRIMASK, r3
}
 800b3ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d118      	bne.n	800b42a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b402:	2301      	movs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f383 8810 	msr	PRIMASK, r3
}
 800b40c:	46c0      	nop			@ (mov r8, r8)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2110      	movs	r1, #16
 800b41a:	438a      	bics	r2, r1
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f383 8810 	msr	PRIMASK, r3
}
 800b428:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	228c      	movs	r2, #140	@ 0x8c
 800b42e:	2120      	movs	r1, #32
 800b430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b43e:	46c0      	nop			@ (mov r8, r8)
 800b440:	46bd      	mov	sp, r7
 800b442:	b00e      	add	sp, #56	@ 0x38
 800b444:	bd80      	pop	{r7, pc}
 800b446:	46c0      	nop			@ (mov r8, r8)
 800b448:	fffffedf 	.word	0xfffffedf
 800b44c:	effffffe 	.word	0xeffffffe

0800b450 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08c      	sub	sp, #48	@ 0x30
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2220      	movs	r2, #32
 800b466:	4013      	ands	r3, r2
 800b468:	d135      	bne.n	800b4d6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46c:	2256      	movs	r2, #86	@ 0x56
 800b46e:	2100      	movs	r1, #0
 800b470:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b472:	f3ef 8310 	mrs	r3, PRIMASK
 800b476:	60fb      	str	r3, [r7, #12]
  return(result);
 800b478:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b47a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b47c:	2301      	movs	r3, #1
 800b47e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f383 8810 	msr	PRIMASK, r3
}
 800b486:	46c0      	nop			@ (mov r8, r8)
 800b488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689a      	ldr	r2, [r3, #8]
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2180      	movs	r1, #128	@ 0x80
 800b494:	438a      	bics	r2, r1
 800b496:	609a      	str	r2, [r3, #8]
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f383 8810 	msr	PRIMASK, r3
}
 800b4a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4aa:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	f383 8810 	msr	PRIMASK, r3
}
 800b4b8:	46c0      	nop			@ (mov r8, r8)
 800b4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2140      	movs	r1, #64	@ 0x40
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	f383 8810 	msr	PRIMASK, r3
}
 800b4d4:	e004      	b.n	800b4e0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d8:	0018      	movs	r0, r3
 800b4da:	f7f8 fb93 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4de:	46c0      	nop			@ (mov r8, r8)
 800b4e0:	46c0      	nop			@ (mov r8, r8)
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	b00c      	add	sp, #48	@ 0x30
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f7ff fabf 	bl	800aa7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4fe:	46c0      	nop			@ (mov r8, r8)
 800b500:	46bd      	mov	sp, r7
 800b502:	b004      	add	sp, #16
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b094      	sub	sp, #80	@ 0x50
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b514:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2220      	movs	r2, #32
 800b51e:	4013      	ands	r3, r2
 800b520:	d16f      	bne.n	800b602 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b524:	225e      	movs	r2, #94	@ 0x5e
 800b526:	2100      	movs	r1, #0
 800b528:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b52a:	f3ef 8310 	mrs	r3, PRIMASK
 800b52e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b530:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b532:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b534:	2301      	movs	r3, #1
 800b536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	f383 8810 	msr	PRIMASK, r3
}
 800b53e:	46c0      	nop			@ (mov r8, r8)
 800b540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	493a      	ldr	r1, [pc, #232]	@ (800b634 <UART_DMAReceiveCplt+0x12c>)
 800b54c:	400a      	ands	r2, r1
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b552:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	f383 8810 	msr	PRIMASK, r3
}
 800b55a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55c:	f3ef 8310 	mrs	r3, PRIMASK
 800b560:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b564:	647b      	str	r3, [r7, #68]	@ 0x44
 800b566:	2301      	movs	r3, #1
 800b568:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	f383 8810 	msr	PRIMASK, r3
}
 800b570:	46c0      	nop			@ (mov r8, r8)
 800b572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689a      	ldr	r2, [r3, #8]
 800b578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2101      	movs	r1, #1
 800b57e:	438a      	bics	r2, r1
 800b580:	609a      	str	r2, [r3, #8]
 800b582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	f383 8810 	msr	PRIMASK, r3
}
 800b58c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b58e:	f3ef 8310 	mrs	r3, PRIMASK
 800b592:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b596:	643b      	str	r3, [r7, #64]	@ 0x40
 800b598:	2301      	movs	r3, #1
 800b59a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	46c0      	nop			@ (mov r8, r8)
 800b5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2140      	movs	r1, #64	@ 0x40
 800b5b0:	438a      	bics	r2, r1
 800b5b2:	609a      	str	r2, [r3, #8]
 800b5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ba:	f383 8810 	msr	PRIMASK, r3
}
 800b5be:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c2:	228c      	movs	r2, #140	@ 0x8c
 800b5c4:	2120      	movs	r1, #32
 800b5c6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d118      	bne.n	800b602 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5da:	2301      	movs	r3, #1
 800b5dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f383 8810 	msr	PRIMASK, r3
}
 800b5e4:	46c0      	nop			@ (mov r8, r8)
 800b5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2110      	movs	r1, #16
 800b5f2:	438a      	bics	r2, r1
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f383 8810 	msr	PRIMASK, r3
}
 800b600:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b604:	2200      	movs	r2, #0
 800b606:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d108      	bne.n	800b622 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b612:	225c      	movs	r2, #92	@ 0x5c
 800b614:	5a9a      	ldrh	r2, [r3, r2]
 800b616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b618:	0011      	movs	r1, r2
 800b61a:	0018      	movs	r0, r3
 800b61c:	f7ff fa4e 	bl	800aabc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b620:	e003      	b.n	800b62a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b624:	0018      	movs	r0, r3
 800b626:	f7ff fa31 	bl	800aa8c <HAL_UART_RxCpltCallback>
}
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	46bd      	mov	sp, r7
 800b62e:	b014      	add	sp, #80	@ 0x50
 800b630:	bd80      	pop	{r7, pc}
 800b632:	46c0      	nop			@ (mov r8, r8)
 800b634:	fffffeff 	.word	0xfffffeff

0800b638 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b644:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d10a      	bne.n	800b66a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	225c      	movs	r2, #92	@ 0x5c
 800b658:	5a9b      	ldrh	r3, [r3, r2]
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	0011      	movs	r1, r2
 800b662:	0018      	movs	r0, r3
 800b664:	f7ff fa2a 	bl	800aabc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b668:	e003      	b.n	800b672 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	0018      	movs	r0, r3
 800b66e:	f7ff fa15 	bl	800aa9c <HAL_UART_RxHalfCpltCallback>
}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	46bd      	mov	sp, r7
 800b676:	b004      	add	sp, #16
 800b678:	bd80      	pop	{r7, pc}

0800b67a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b086      	sub	sp, #24
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b686:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2288      	movs	r2, #136	@ 0x88
 800b68c:	589b      	ldr	r3, [r3, r2]
 800b68e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	228c      	movs	r2, #140	@ 0x8c
 800b694:	589b      	ldr	r3, [r3, r2]
 800b696:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	2280      	movs	r2, #128	@ 0x80
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	2b80      	cmp	r3, #128	@ 0x80
 800b6a4:	d10a      	bne.n	800b6bc <UART_DMAError+0x42>
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	2b21      	cmp	r3, #33	@ 0x21
 800b6aa:	d107      	bne.n	800b6bc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2256      	movs	r2, #86	@ 0x56
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f7ff fe24 	bl	800b304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2240      	movs	r2, #64	@ 0x40
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	2b40      	cmp	r3, #64	@ 0x40
 800b6c8:	d10a      	bne.n	800b6e0 <UART_DMAError+0x66>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b22      	cmp	r3, #34	@ 0x22
 800b6ce:	d107      	bne.n	800b6e0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	225e      	movs	r2, #94	@ 0x5e
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f7ff fe52 	bl	800b384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2290      	movs	r2, #144	@ 0x90
 800b6e4:	589b      	ldr	r3, [r3, r2]
 800b6e6:	2210      	movs	r2, #16
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2190      	movs	r1, #144	@ 0x90
 800b6ee:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7ff f9da 	bl	800aaac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6f8:	46c0      	nop			@ (mov r8, r8)
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	b006      	add	sp, #24
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	225e      	movs	r2, #94	@ 0x5e
 800b712:	2100      	movs	r1, #0
 800b714:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2256      	movs	r2, #86	@ 0x56
 800b71a:	2100      	movs	r1, #0
 800b71c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	0018      	movs	r0, r3
 800b722:	f7ff f9c3 	bl	800aaac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b726:	46c0      	nop			@ (mov r8, r8)
 800b728:	46bd      	mov	sp, r7
 800b72a:	b004      	add	sp, #16
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b736:	f3ef 8310 	mrs	r3, PRIMASK
 800b73a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b73c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	2301      	movs	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f383 8810 	msr	PRIMASK, r3
}
 800b74a:	46c0      	nop			@ (mov r8, r8)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2140      	movs	r1, #64	@ 0x40
 800b758:	438a      	bics	r2, r1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f383 8810 	msr	PRIMASK, r3
}
 800b766:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2288      	movs	r2, #136	@ 0x88
 800b76c:	2120      	movs	r1, #32
 800b76e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	0018      	movs	r0, r3
 800b77a:	f7f8 fa43 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b77e:	46c0      	nop			@ (mov r8, r8)
 800b780:	46bd      	mov	sp, r7
 800b782:	b006      	add	sp, #24
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b78e:	46c0      	nop			@ (mov r8, r8)
 800b790:	46bd      	mov	sp, r7
 800b792:	b002      	add	sp, #8
 800b794:	bd80      	pop	{r7, pc}

0800b796 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b79e:	46c0      	nop			@ (mov r8, r8)
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	b002      	add	sp, #8
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b002      	add	sp, #8
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <__cvt>:
 800b7b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b8:	001f      	movs	r7, r3
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	0016      	movs	r6, r2
 800b7be:	b08b      	sub	sp, #44	@ 0x2c
 800b7c0:	429f      	cmp	r7, r3
 800b7c2:	da04      	bge.n	800b7ce <__cvt+0x18>
 800b7c4:	2180      	movs	r1, #128	@ 0x80
 800b7c6:	0609      	lsls	r1, r1, #24
 800b7c8:	187b      	adds	r3, r7, r1
 800b7ca:	001f      	movs	r7, r3
 800b7cc:	232d      	movs	r3, #45	@ 0x2d
 800b7ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7d0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b7d2:	7013      	strb	r3, [r2, #0]
 800b7d4:	2320      	movs	r3, #32
 800b7d6:	2203      	movs	r2, #3
 800b7d8:	439d      	bics	r5, r3
 800b7da:	2d46      	cmp	r5, #70	@ 0x46
 800b7dc:	d007      	beq.n	800b7ee <__cvt+0x38>
 800b7de:	002b      	movs	r3, r5
 800b7e0:	3b45      	subs	r3, #69	@ 0x45
 800b7e2:	4259      	negs	r1, r3
 800b7e4:	414b      	adcs	r3, r1
 800b7e6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b7e8:	3a01      	subs	r2, #1
 800b7ea:	18cb      	adds	r3, r1, r3
 800b7ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7ee:	ab09      	add	r3, sp, #36	@ 0x24
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	ab08      	add	r3, sp, #32
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7f8:	9200      	str	r2, [sp, #0]
 800b7fa:	9302      	str	r3, [sp, #8]
 800b7fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7fe:	0032      	movs	r2, r6
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	003b      	movs	r3, r7
 800b804:	f000 fe9e 	bl	800c544 <_dtoa_r>
 800b808:	0004      	movs	r4, r0
 800b80a:	2d47      	cmp	r5, #71	@ 0x47
 800b80c:	d11b      	bne.n	800b846 <__cvt+0x90>
 800b80e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b810:	07db      	lsls	r3, r3, #31
 800b812:	d511      	bpl.n	800b838 <__cvt+0x82>
 800b814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b816:	18c3      	adds	r3, r0, r3
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	0030      	movs	r0, r6
 800b820:	0039      	movs	r1, r7
 800b822:	f7f4 fe0f 	bl	8000444 <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	d001      	beq.n	800b82e <__cvt+0x78>
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b82e:	2230      	movs	r2, #48	@ 0x30
 800b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b832:	9907      	ldr	r1, [sp, #28]
 800b834:	428b      	cmp	r3, r1
 800b836:	d320      	bcc.n	800b87a <__cvt+0xc4>
 800b838:	0020      	movs	r0, r4
 800b83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b83e:	1b1b      	subs	r3, r3, r4
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	b00b      	add	sp, #44	@ 0x2c
 800b844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b846:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b848:	18c3      	adds	r3, r0, r3
 800b84a:	9307      	str	r3, [sp, #28]
 800b84c:	2d46      	cmp	r5, #70	@ 0x46
 800b84e:	d1e4      	bne.n	800b81a <__cvt+0x64>
 800b850:	7803      	ldrb	r3, [r0, #0]
 800b852:	2b30      	cmp	r3, #48	@ 0x30
 800b854:	d10c      	bne.n	800b870 <__cvt+0xba>
 800b856:	2200      	movs	r2, #0
 800b858:	2300      	movs	r3, #0
 800b85a:	0030      	movs	r0, r6
 800b85c:	0039      	movs	r1, r7
 800b85e:	f7f4 fdf1 	bl	8000444 <__aeabi_dcmpeq>
 800b862:	2800      	cmp	r0, #0
 800b864:	d104      	bne.n	800b870 <__cvt+0xba>
 800b866:	2301      	movs	r3, #1
 800b868:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b872:	9a07      	ldr	r2, [sp, #28]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	18d3      	adds	r3, r2, r3
 800b878:	e7ce      	b.n	800b818 <__cvt+0x62>
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e7d6      	b.n	800b830 <__cvt+0x7a>

0800b882 <__exponent>:
 800b882:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b884:	232b      	movs	r3, #43	@ 0x2b
 800b886:	b085      	sub	sp, #20
 800b888:	0005      	movs	r5, r0
 800b88a:	1e0c      	subs	r4, r1, #0
 800b88c:	7002      	strb	r2, [r0, #0]
 800b88e:	da01      	bge.n	800b894 <__exponent+0x12>
 800b890:	424c      	negs	r4, r1
 800b892:	3302      	adds	r3, #2
 800b894:	706b      	strb	r3, [r5, #1]
 800b896:	2c09      	cmp	r4, #9
 800b898:	dd2c      	ble.n	800b8f4 <__exponent+0x72>
 800b89a:	ab02      	add	r3, sp, #8
 800b89c:	1dde      	adds	r6, r3, #7
 800b89e:	0020      	movs	r0, r4
 800b8a0:	210a      	movs	r1, #10
 800b8a2:	f7f4 fdb9 	bl	8000418 <__aeabi_idivmod>
 800b8a6:	0037      	movs	r7, r6
 800b8a8:	3130      	adds	r1, #48	@ 0x30
 800b8aa:	3e01      	subs	r6, #1
 800b8ac:	0020      	movs	r0, r4
 800b8ae:	7031      	strb	r1, [r6, #0]
 800b8b0:	210a      	movs	r1, #10
 800b8b2:	9401      	str	r4, [sp, #4]
 800b8b4:	f7f4 fcca 	bl	800024c <__divsi3>
 800b8b8:	9b01      	ldr	r3, [sp, #4]
 800b8ba:	0004      	movs	r4, r0
 800b8bc:	2b63      	cmp	r3, #99	@ 0x63
 800b8be:	dcee      	bgt.n	800b89e <__exponent+0x1c>
 800b8c0:	1eba      	subs	r2, r7, #2
 800b8c2:	1ca8      	adds	r0, r5, #2
 800b8c4:	0001      	movs	r1, r0
 800b8c6:	0013      	movs	r3, r2
 800b8c8:	3430      	adds	r4, #48	@ 0x30
 800b8ca:	7014      	strb	r4, [r2, #0]
 800b8cc:	ac02      	add	r4, sp, #8
 800b8ce:	3407      	adds	r4, #7
 800b8d0:	429c      	cmp	r4, r3
 800b8d2:	d80a      	bhi.n	800b8ea <__exponent+0x68>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4294      	cmp	r4, r2
 800b8d8:	d303      	bcc.n	800b8e2 <__exponent+0x60>
 800b8da:	3309      	adds	r3, #9
 800b8dc:	aa02      	add	r2, sp, #8
 800b8de:	189b      	adds	r3, r3, r2
 800b8e0:	1bdb      	subs	r3, r3, r7
 800b8e2:	18c0      	adds	r0, r0, r3
 800b8e4:	1b40      	subs	r0, r0, r5
 800b8e6:	b005      	add	sp, #20
 800b8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ea:	781c      	ldrb	r4, [r3, #0]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	700c      	strb	r4, [r1, #0]
 800b8f0:	3101      	adds	r1, #1
 800b8f2:	e7eb      	b.n	800b8cc <__exponent+0x4a>
 800b8f4:	2330      	movs	r3, #48	@ 0x30
 800b8f6:	18e4      	adds	r4, r4, r3
 800b8f8:	70ab      	strb	r3, [r5, #2]
 800b8fa:	1d28      	adds	r0, r5, #4
 800b8fc:	70ec      	strb	r4, [r5, #3]
 800b8fe:	e7f1      	b.n	800b8e4 <__exponent+0x62>

0800b900 <_printf_float>:
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	b097      	sub	sp, #92	@ 0x5c
 800b904:	000d      	movs	r5, r1
 800b906:	920a      	str	r2, [sp, #40]	@ 0x28
 800b908:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800b90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b90c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b90e:	f000 fd01 	bl	800c314 <_localeconv_r>
 800b912:	6803      	ldr	r3, [r0, #0]
 800b914:	0018      	movs	r0, r3
 800b916:	930d      	str	r3, [sp, #52]	@ 0x34
 800b918:	f7f4 fbf2 	bl	8000100 <strlen>
 800b91c:	2300      	movs	r3, #0
 800b91e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b920:	9314      	str	r3, [sp, #80]	@ 0x50
 800b922:	7e2b      	ldrb	r3, [r5, #24]
 800b924:	2207      	movs	r2, #7
 800b926:	930c      	str	r3, [sp, #48]	@ 0x30
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b92c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	05c9      	lsls	r1, r1, #23
 800b932:	d545      	bpl.n	800b9c0 <_printf_float+0xc0>
 800b934:	189b      	adds	r3, r3, r2
 800b936:	4393      	bics	r3, r2
 800b938:	001a      	movs	r2, r3
 800b93a:	3208      	adds	r2, #8
 800b93c:	6022      	str	r2, [r4, #0]
 800b93e:	2201      	movs	r2, #1
 800b940:	681e      	ldr	r6, [r3, #0]
 800b942:	685f      	ldr	r7, [r3, #4]
 800b944:	007b      	lsls	r3, r7, #1
 800b946:	085b      	lsrs	r3, r3, #1
 800b948:	9311      	str	r3, [sp, #68]	@ 0x44
 800b94a:	9610      	str	r6, [sp, #64]	@ 0x40
 800b94c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800b94e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800b950:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b952:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b954:	4ba7      	ldr	r3, [pc, #668]	@ (800bbf4 <_printf_float+0x2f4>)
 800b956:	4252      	negs	r2, r2
 800b958:	f7f7 fd18 	bl	800338c <__aeabi_dcmpun>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d131      	bne.n	800b9c4 <_printf_float+0xc4>
 800b960:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b962:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b964:	2201      	movs	r2, #1
 800b966:	4ba3      	ldr	r3, [pc, #652]	@ (800bbf4 <_printf_float+0x2f4>)
 800b968:	4252      	negs	r2, r2
 800b96a:	f7f4 fd7b 	bl	8000464 <__aeabi_dcmple>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d128      	bne.n	800b9c4 <_printf_float+0xc4>
 800b972:	2200      	movs	r2, #0
 800b974:	2300      	movs	r3, #0
 800b976:	0030      	movs	r0, r6
 800b978:	0039      	movs	r1, r7
 800b97a:	f7f4 fd69 	bl	8000450 <__aeabi_dcmplt>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d003      	beq.n	800b98a <_printf_float+0x8a>
 800b982:	002b      	movs	r3, r5
 800b984:	222d      	movs	r2, #45	@ 0x2d
 800b986:	3343      	adds	r3, #67	@ 0x43
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b98c:	4f9a      	ldr	r7, [pc, #616]	@ (800bbf8 <_printf_float+0x2f8>)
 800b98e:	2b47      	cmp	r3, #71	@ 0x47
 800b990:	d800      	bhi.n	800b994 <_printf_float+0x94>
 800b992:	4f9a      	ldr	r7, [pc, #616]	@ (800bbfc <_printf_float+0x2fc>)
 800b994:	2303      	movs	r3, #3
 800b996:	2400      	movs	r4, #0
 800b998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b99a:	612b      	str	r3, [r5, #16]
 800b99c:	3301      	adds	r3, #1
 800b99e:	439a      	bics	r2, r3
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a4:	0029      	movs	r1, r5
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ac:	aa15      	add	r2, sp, #84	@ 0x54
 800b9ae:	f000 f9e5 	bl	800bd7c <_printf_common>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d000      	beq.n	800b9b8 <_printf_float+0xb8>
 800b9b6:	e09e      	b.n	800baf6 <_printf_float+0x1f6>
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	4240      	negs	r0, r0
 800b9bc:	b017      	add	sp, #92	@ 0x5c
 800b9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c0:	3307      	adds	r3, #7
 800b9c2:	e7b8      	b.n	800b936 <_printf_float+0x36>
 800b9c4:	0032      	movs	r2, r6
 800b9c6:	003b      	movs	r3, r7
 800b9c8:	0030      	movs	r0, r6
 800b9ca:	0039      	movs	r1, r7
 800b9cc:	f7f7 fcde 	bl	800338c <__aeabi_dcmpun>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d00b      	beq.n	800b9ec <_printf_float+0xec>
 800b9d4:	2f00      	cmp	r7, #0
 800b9d6:	da03      	bge.n	800b9e0 <_printf_float+0xe0>
 800b9d8:	002b      	movs	r3, r5
 800b9da:	222d      	movs	r2, #45	@ 0x2d
 800b9dc:	3343      	adds	r3, #67	@ 0x43
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9e2:	4f87      	ldr	r7, [pc, #540]	@ (800bc00 <_printf_float+0x300>)
 800b9e4:	2b47      	cmp	r3, #71	@ 0x47
 800b9e6:	d8d5      	bhi.n	800b994 <_printf_float+0x94>
 800b9e8:	4f86      	ldr	r7, [pc, #536]	@ (800bc04 <_printf_float+0x304>)
 800b9ea:	e7d3      	b.n	800b994 <_printf_float+0x94>
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b9f0:	686b      	ldr	r3, [r5, #4]
 800b9f2:	4394      	bics	r4, r2
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	d146      	bne.n	800ba86 <_printf_float+0x186>
 800b9f8:	3307      	adds	r3, #7
 800b9fa:	606b      	str	r3, [r5, #4]
 800b9fc:	2380      	movs	r3, #128	@ 0x80
 800b9fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	2200      	movs	r2, #0
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	9206      	str	r2, [sp, #24]
 800ba0a:	aa14      	add	r2, sp, #80	@ 0x50
 800ba0c:	9205      	str	r2, [sp, #20]
 800ba0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba10:	a90a      	add	r1, sp, #40	@ 0x28
 800ba12:	9204      	str	r2, [sp, #16]
 800ba14:	aa13      	add	r2, sp, #76	@ 0x4c
 800ba16:	9203      	str	r2, [sp, #12]
 800ba18:	2223      	movs	r2, #35	@ 0x23
 800ba1a:	1852      	adds	r2, r2, r1
 800ba1c:	9202      	str	r2, [sp, #8]
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	686b      	ldr	r3, [r5, #4]
 800ba22:	0032      	movs	r2, r6
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba28:	003b      	movs	r3, r7
 800ba2a:	f7ff fec4 	bl	800b7b6 <__cvt>
 800ba2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba30:	0007      	movs	r7, r0
 800ba32:	2c47      	cmp	r4, #71	@ 0x47
 800ba34:	d12d      	bne.n	800ba92 <_printf_float+0x192>
 800ba36:	1cd3      	adds	r3, r2, #3
 800ba38:	db02      	blt.n	800ba40 <_printf_float+0x140>
 800ba3a:	686b      	ldr	r3, [r5, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	dd47      	ble.n	800bad0 <_printf_float+0x1d0>
 800ba40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba42:	3b02      	subs	r3, #2
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba48:	0028      	movs	r0, r5
 800ba4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ba4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba4e:	3901      	subs	r1, #1
 800ba50:	3050      	adds	r0, #80	@ 0x50
 800ba52:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba54:	f7ff ff15 	bl	800b882 <__exponent>
 800ba58:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba5a:	0004      	movs	r4, r0
 800ba5c:	1813      	adds	r3, r2, r0
 800ba5e:	612b      	str	r3, [r5, #16]
 800ba60:	2a01      	cmp	r2, #1
 800ba62:	dc02      	bgt.n	800ba6a <_printf_float+0x16a>
 800ba64:	682a      	ldr	r2, [r5, #0]
 800ba66:	07d2      	lsls	r2, r2, #31
 800ba68:	d501      	bpl.n	800ba6e <_printf_float+0x16e>
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	612b      	str	r3, [r5, #16]
 800ba6e:	2323      	movs	r3, #35	@ 0x23
 800ba70:	aa0a      	add	r2, sp, #40	@ 0x28
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d100      	bne.n	800ba7c <_printf_float+0x17c>
 800ba7a:	e792      	b.n	800b9a2 <_printf_float+0xa2>
 800ba7c:	002b      	movs	r3, r5
 800ba7e:	222d      	movs	r2, #45	@ 0x2d
 800ba80:	3343      	adds	r3, #67	@ 0x43
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	e78d      	b.n	800b9a2 <_printf_float+0xa2>
 800ba86:	2c47      	cmp	r4, #71	@ 0x47
 800ba88:	d1b8      	bne.n	800b9fc <_printf_float+0xfc>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1b6      	bne.n	800b9fc <_printf_float+0xfc>
 800ba8e:	3301      	adds	r3, #1
 800ba90:	e7b3      	b.n	800b9fa <_printf_float+0xfa>
 800ba92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba94:	2b65      	cmp	r3, #101	@ 0x65
 800ba96:	d9d7      	bls.n	800ba48 <_printf_float+0x148>
 800ba98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba9a:	2b66      	cmp	r3, #102	@ 0x66
 800ba9c:	d11a      	bne.n	800bad4 <_printf_float+0x1d4>
 800ba9e:	686b      	ldr	r3, [r5, #4]
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	dd09      	ble.n	800bab8 <_printf_float+0x1b8>
 800baa4:	612a      	str	r2, [r5, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <_printf_float+0x1b0>
 800baaa:	6829      	ldr	r1, [r5, #0]
 800baac:	07c9      	lsls	r1, r1, #31
 800baae:	d50b      	bpl.n	800bac8 <_printf_float+0x1c8>
 800bab0:	3301      	adds	r3, #1
 800bab2:	189b      	adds	r3, r3, r2
 800bab4:	612b      	str	r3, [r5, #16]
 800bab6:	e007      	b.n	800bac8 <_printf_float+0x1c8>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <_printf_float+0x1c4>
 800babc:	2201      	movs	r2, #1
 800babe:	6829      	ldr	r1, [r5, #0]
 800bac0:	4211      	tst	r1, r2
 800bac2:	d000      	beq.n	800bac6 <_printf_float+0x1c6>
 800bac4:	1c9a      	adds	r2, r3, #2
 800bac6:	612a      	str	r2, [r5, #16]
 800bac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800baca:	2400      	movs	r4, #0
 800bacc:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bace:	e7ce      	b.n	800ba6e <_printf_float+0x16e>
 800bad0:	2367      	movs	r3, #103	@ 0x67
 800bad2:	930c      	str	r3, [sp, #48]	@ 0x30
 800bad4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bad6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bad8:	4299      	cmp	r1, r3
 800bada:	db06      	blt.n	800baea <_printf_float+0x1ea>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	6129      	str	r1, [r5, #16]
 800bae0:	07db      	lsls	r3, r3, #31
 800bae2:	d5f1      	bpl.n	800bac8 <_printf_float+0x1c8>
 800bae4:	3101      	adds	r1, #1
 800bae6:	6129      	str	r1, [r5, #16]
 800bae8:	e7ee      	b.n	800bac8 <_printf_float+0x1c8>
 800baea:	2201      	movs	r2, #1
 800baec:	2900      	cmp	r1, #0
 800baee:	dce0      	bgt.n	800bab2 <_printf_float+0x1b2>
 800baf0:	1892      	adds	r2, r2, r2
 800baf2:	1a52      	subs	r2, r2, r1
 800baf4:	e7dd      	b.n	800bab2 <_printf_float+0x1b2>
 800baf6:	682a      	ldr	r2, [r5, #0]
 800baf8:	0553      	lsls	r3, r2, #21
 800bafa:	d408      	bmi.n	800bb0e <_printf_float+0x20e>
 800bafc:	692b      	ldr	r3, [r5, #16]
 800bafe:	003a      	movs	r2, r7
 800bb00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bb06:	47a0      	blx	r4
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d129      	bne.n	800bb60 <_printf_float+0x260>
 800bb0c:	e754      	b.n	800b9b8 <_printf_float+0xb8>
 800bb0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb10:	2b65      	cmp	r3, #101	@ 0x65
 800bb12:	d800      	bhi.n	800bb16 <_printf_float+0x216>
 800bb14:	e0db      	b.n	800bcce <_printf_float+0x3ce>
 800bb16:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bb18:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f7f4 fc91 	bl	8000444 <__aeabi_dcmpeq>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d033      	beq.n	800bb8e <_printf_float+0x28e>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4a37      	ldr	r2, [pc, #220]	@ (800bc08 <_printf_float+0x308>)
 800bb2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bb30:	47a0      	blx	r4
 800bb32:	3001      	adds	r0, #1
 800bb34:	d100      	bne.n	800bb38 <_printf_float+0x238>
 800bb36:	e73f      	b.n	800b9b8 <_printf_float+0xb8>
 800bb38:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bb3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb3c:	42b3      	cmp	r3, r6
 800bb3e:	db02      	blt.n	800bb46 <_printf_float+0x246>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	07db      	lsls	r3, r3, #31
 800bb44:	d50c      	bpl.n	800bb60 <_printf_float+0x260>
 800bb46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bb48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb50:	47a0      	blx	r4
 800bb52:	2400      	movs	r4, #0
 800bb54:	3001      	adds	r0, #1
 800bb56:	d100      	bne.n	800bb5a <_printf_float+0x25a>
 800bb58:	e72e      	b.n	800b9b8 <_printf_float+0xb8>
 800bb5a:	1e73      	subs	r3, r6, #1
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	dc0a      	bgt.n	800bb76 <_printf_float+0x276>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	079b      	lsls	r3, r3, #30
 800bb64:	d500      	bpl.n	800bb68 <_printf_float+0x268>
 800bb66:	e106      	b.n	800bd76 <_printf_float+0x476>
 800bb68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb6a:	68e8      	ldr	r0, [r5, #12]
 800bb6c:	4298      	cmp	r0, r3
 800bb6e:	db00      	blt.n	800bb72 <_printf_float+0x272>
 800bb70:	e724      	b.n	800b9bc <_printf_float+0xbc>
 800bb72:	0018      	movs	r0, r3
 800bb74:	e722      	b.n	800b9bc <_printf_float+0xbc>
 800bb76:	002a      	movs	r2, r5
 800bb78:	2301      	movs	r3, #1
 800bb7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bb80:	321a      	adds	r2, #26
 800bb82:	47b8      	blx	r7
 800bb84:	3001      	adds	r0, #1
 800bb86:	d100      	bne.n	800bb8a <_printf_float+0x28a>
 800bb88:	e716      	b.n	800b9b8 <_printf_float+0xb8>
 800bb8a:	3401      	adds	r4, #1
 800bb8c:	e7e5      	b.n	800bb5a <_printf_float+0x25a>
 800bb8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dc3b      	bgt.n	800bc0c <_printf_float+0x30c>
 800bb94:	2301      	movs	r3, #1
 800bb96:	4a1c      	ldr	r2, [pc, #112]	@ (800bc08 <_printf_float+0x308>)
 800bb98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bb9e:	47a0      	blx	r4
 800bba0:	3001      	adds	r0, #1
 800bba2:	d100      	bne.n	800bba6 <_printf_float+0x2a6>
 800bba4:	e708      	b.n	800b9b8 <_printf_float+0xb8>
 800bba6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bba8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbaa:	4333      	orrs	r3, r6
 800bbac:	d102      	bne.n	800bbb4 <_printf_float+0x2b4>
 800bbae:	682b      	ldr	r3, [r5, #0]
 800bbb0:	07db      	lsls	r3, r3, #31
 800bbb2:	d5d5      	bpl.n	800bb60 <_printf_float+0x260>
 800bbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bbbe:	47a0      	blx	r4
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	d100      	bne.n	800bbc8 <_printf_float+0x2c8>
 800bbc6:	e6f7      	b.n	800b9b8 <_printf_float+0xb8>
 800bbc8:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbcc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bbce:	425b      	negs	r3, r3
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	dc01      	bgt.n	800bbd8 <_printf_float+0x2d8>
 800bbd4:	0033      	movs	r3, r6
 800bbd6:	e792      	b.n	800bafe <_printf_float+0x1fe>
 800bbd8:	002a      	movs	r2, r5
 800bbda:	2301      	movs	r3, #1
 800bbdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbe0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bbe2:	321a      	adds	r2, #26
 800bbe4:	47a0      	blx	r4
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d100      	bne.n	800bbec <_printf_float+0x2ec>
 800bbea:	e6e5      	b.n	800b9b8 <_printf_float+0xb8>
 800bbec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbee:	3301      	adds	r3, #1
 800bbf0:	e7ea      	b.n	800bbc8 <_printf_float+0x2c8>
 800bbf2:	46c0      	nop			@ (mov r8, r8)
 800bbf4:	7fefffff 	.word	0x7fefffff
 800bbf8:	0800e918 	.word	0x0800e918
 800bbfc:	0800e914 	.word	0x0800e914
 800bc00:	0800e920 	.word	0x0800e920
 800bc04:	0800e91c 	.word	0x0800e91c
 800bc08:	0800e924 	.word	0x0800e924
 800bc0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc0e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bc10:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc12:	429e      	cmp	r6, r3
 800bc14:	dd00      	ble.n	800bc18 <_printf_float+0x318>
 800bc16:	001e      	movs	r6, r3
 800bc18:	2e00      	cmp	r6, #0
 800bc1a:	dc31      	bgt.n	800bc80 <_printf_float+0x380>
 800bc1c:	43f3      	mvns	r3, r6
 800bc1e:	2400      	movs	r4, #0
 800bc20:	17db      	asrs	r3, r3, #31
 800bc22:	4033      	ands	r3, r6
 800bc24:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc26:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bc28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc2a:	1af3      	subs	r3, r6, r3
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	dc30      	bgt.n	800bc92 <_printf_float+0x392>
 800bc30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc34:	429a      	cmp	r2, r3
 800bc36:	dc38      	bgt.n	800bcaa <_printf_float+0x3aa>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	07db      	lsls	r3, r3, #31
 800bc3c:	d435      	bmi.n	800bcaa <_printf_float+0x3aa>
 800bc3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bc40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc44:	1b9b      	subs	r3, r3, r6
 800bc46:	1b14      	subs	r4, r2, r4
 800bc48:	429c      	cmp	r4, r3
 800bc4a:	dd00      	ble.n	800bc4e <_printf_float+0x34e>
 800bc4c:	001c      	movs	r4, r3
 800bc4e:	2c00      	cmp	r4, #0
 800bc50:	dc34      	bgt.n	800bcbc <_printf_float+0x3bc>
 800bc52:	43e3      	mvns	r3, r4
 800bc54:	2600      	movs	r6, #0
 800bc56:	17db      	asrs	r3, r3, #31
 800bc58:	401c      	ands	r4, r3
 800bc5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	1b1b      	subs	r3, r3, r4
 800bc62:	42b3      	cmp	r3, r6
 800bc64:	dc00      	bgt.n	800bc68 <_printf_float+0x368>
 800bc66:	e77b      	b.n	800bb60 <_printf_float+0x260>
 800bc68:	002a      	movs	r2, r5
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bc72:	321a      	adds	r2, #26
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	d100      	bne.n	800bc7c <_printf_float+0x37c>
 800bc7a:	e69d      	b.n	800b9b8 <_printf_float+0xb8>
 800bc7c:	3601      	adds	r6, #1
 800bc7e:	e7ec      	b.n	800bc5a <_printf_float+0x35a>
 800bc80:	0033      	movs	r3, r6
 800bc82:	003a      	movs	r2, r7
 800bc84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bc8a:	47a0      	blx	r4
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d1c5      	bne.n	800bc1c <_printf_float+0x31c>
 800bc90:	e692      	b.n	800b9b8 <_printf_float+0xb8>
 800bc92:	002a      	movs	r2, r5
 800bc94:	2301      	movs	r3, #1
 800bc96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bc9c:	321a      	adds	r2, #26
 800bc9e:	47b0      	blx	r6
 800bca0:	3001      	adds	r0, #1
 800bca2:	d100      	bne.n	800bca6 <_printf_float+0x3a6>
 800bca4:	e688      	b.n	800b9b8 <_printf_float+0xb8>
 800bca6:	3401      	adds	r4, #1
 800bca8:	e7bd      	b.n	800bc26 <_printf_float+0x326>
 800bcaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bcb4:	47a0      	blx	r4
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	d1c1      	bne.n	800bc3e <_printf_float+0x33e>
 800bcba:	e67d      	b.n	800b9b8 <_printf_float+0xb8>
 800bcbc:	19ba      	adds	r2, r7, r6
 800bcbe:	0023      	movs	r3, r4
 800bcc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bcc6:	47b0      	blx	r6
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d1c2      	bne.n	800bc52 <_printf_float+0x352>
 800bccc:	e674      	b.n	800b9b8 <_printf_float+0xb8>
 800bcce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bcd0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	dc02      	bgt.n	800bcdc <_printf_float+0x3dc>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	421a      	tst	r2, r3
 800bcda:	d039      	beq.n	800bd50 <_printf_float+0x450>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	003a      	movs	r2, r7
 800bce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bce4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bce6:	47b0      	blx	r6
 800bce8:	3001      	adds	r0, #1
 800bcea:	d100      	bne.n	800bcee <_printf_float+0x3ee>
 800bcec:	e664      	b.n	800b9b8 <_printf_float+0xb8>
 800bcee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bcf8:	47b0      	blx	r6
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d100      	bne.n	800bd00 <_printf_float+0x400>
 800bcfe:	e65b      	b.n	800b9b8 <_printf_float+0xb8>
 800bd00:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bd02:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bd04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd06:	2200      	movs	r2, #0
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f7f4 fb99 	bl	8000444 <__aeabi_dcmpeq>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d11a      	bne.n	800bd4c <_printf_float+0x44c>
 800bd16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd18:	1c7a      	adds	r2, r7, #1
 800bd1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bd20:	47b0      	blx	r6
 800bd22:	3001      	adds	r0, #1
 800bd24:	d10e      	bne.n	800bd44 <_printf_float+0x444>
 800bd26:	e647      	b.n	800b9b8 <_printf_float+0xb8>
 800bd28:	002a      	movs	r2, r5
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bd32:	321a      	adds	r2, #26
 800bd34:	47b8      	blx	r7
 800bd36:	3001      	adds	r0, #1
 800bd38:	d100      	bne.n	800bd3c <_printf_float+0x43c>
 800bd3a:	e63d      	b.n	800b9b8 <_printf_float+0xb8>
 800bd3c:	3601      	adds	r6, #1
 800bd3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd40:	429e      	cmp	r6, r3
 800bd42:	dbf1      	blt.n	800bd28 <_printf_float+0x428>
 800bd44:	002a      	movs	r2, r5
 800bd46:	0023      	movs	r3, r4
 800bd48:	3250      	adds	r2, #80	@ 0x50
 800bd4a:	e6d9      	b.n	800bb00 <_printf_float+0x200>
 800bd4c:	2600      	movs	r6, #0
 800bd4e:	e7f6      	b.n	800bd3e <_printf_float+0x43e>
 800bd50:	003a      	movs	r2, r7
 800bd52:	e7e2      	b.n	800bd1a <_printf_float+0x41a>
 800bd54:	002a      	movs	r2, r5
 800bd56:	2301      	movs	r3, #1
 800bd58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bd5e:	3219      	adds	r2, #25
 800bd60:	47b0      	blx	r6
 800bd62:	3001      	adds	r0, #1
 800bd64:	d100      	bne.n	800bd68 <_printf_float+0x468>
 800bd66:	e627      	b.n	800b9b8 <_printf_float+0xb8>
 800bd68:	3401      	adds	r4, #1
 800bd6a:	68eb      	ldr	r3, [r5, #12]
 800bd6c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bd6e:	1a9b      	subs	r3, r3, r2
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	dcef      	bgt.n	800bd54 <_printf_float+0x454>
 800bd74:	e6f8      	b.n	800bb68 <_printf_float+0x268>
 800bd76:	2400      	movs	r4, #0
 800bd78:	e7f7      	b.n	800bd6a <_printf_float+0x46a>
 800bd7a:	46c0      	nop			@ (mov r8, r8)

0800bd7c <_printf_common>:
 800bd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd7e:	0016      	movs	r6, r2
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	688a      	ldr	r2, [r1, #8]
 800bd84:	690b      	ldr	r3, [r1, #16]
 800bd86:	000c      	movs	r4, r1
 800bd88:	9000      	str	r0, [sp, #0]
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	da00      	bge.n	800bd90 <_printf_common+0x14>
 800bd8e:	0013      	movs	r3, r2
 800bd90:	0022      	movs	r2, r4
 800bd92:	6033      	str	r3, [r6, #0]
 800bd94:	3243      	adds	r2, #67	@ 0x43
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	d001      	beq.n	800bda0 <_printf_common+0x24>
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	6033      	str	r3, [r6, #0]
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	069b      	lsls	r3, r3, #26
 800bda4:	d502      	bpl.n	800bdac <_printf_common+0x30>
 800bda6:	6833      	ldr	r3, [r6, #0]
 800bda8:	3302      	adds	r3, #2
 800bdaa:	6033      	str	r3, [r6, #0]
 800bdac:	6822      	ldr	r2, [r4, #0]
 800bdae:	2306      	movs	r3, #6
 800bdb0:	0015      	movs	r5, r2
 800bdb2:	401d      	ands	r5, r3
 800bdb4:	421a      	tst	r2, r3
 800bdb6:	d027      	beq.n	800be08 <_printf_common+0x8c>
 800bdb8:	0023      	movs	r3, r4
 800bdba:	3343      	adds	r3, #67	@ 0x43
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	1e5a      	subs	r2, r3, #1
 800bdc0:	4193      	sbcs	r3, r2
 800bdc2:	6822      	ldr	r2, [r4, #0]
 800bdc4:	0692      	lsls	r2, r2, #26
 800bdc6:	d430      	bmi.n	800be2a <_printf_common+0xae>
 800bdc8:	0022      	movs	r2, r4
 800bdca:	9901      	ldr	r1, [sp, #4]
 800bdcc:	9800      	ldr	r0, [sp, #0]
 800bdce:	9d08      	ldr	r5, [sp, #32]
 800bdd0:	3243      	adds	r2, #67	@ 0x43
 800bdd2:	47a8      	blx	r5
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d025      	beq.n	800be24 <_printf_common+0xa8>
 800bdd8:	2206      	movs	r2, #6
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	2500      	movs	r5, #0
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b04      	cmp	r3, #4
 800bde2:	d105      	bne.n	800bdf0 <_printf_common+0x74>
 800bde4:	6833      	ldr	r3, [r6, #0]
 800bde6:	68e5      	ldr	r5, [r4, #12]
 800bde8:	1aed      	subs	r5, r5, r3
 800bdea:	43eb      	mvns	r3, r5
 800bdec:	17db      	asrs	r3, r3, #31
 800bdee:	401d      	ands	r5, r3
 800bdf0:	68a3      	ldr	r3, [r4, #8]
 800bdf2:	6922      	ldr	r2, [r4, #16]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	dd01      	ble.n	800bdfc <_printf_common+0x80>
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	18ed      	adds	r5, r5, r3
 800bdfc:	2600      	movs	r6, #0
 800bdfe:	42b5      	cmp	r5, r6
 800be00:	d120      	bne.n	800be44 <_printf_common+0xc8>
 800be02:	2000      	movs	r0, #0
 800be04:	e010      	b.n	800be28 <_printf_common+0xac>
 800be06:	3501      	adds	r5, #1
 800be08:	68e3      	ldr	r3, [r4, #12]
 800be0a:	6832      	ldr	r2, [r6, #0]
 800be0c:	1a9b      	subs	r3, r3, r2
 800be0e:	42ab      	cmp	r3, r5
 800be10:	ddd2      	ble.n	800bdb8 <_printf_common+0x3c>
 800be12:	0022      	movs	r2, r4
 800be14:	2301      	movs	r3, #1
 800be16:	9901      	ldr	r1, [sp, #4]
 800be18:	9800      	ldr	r0, [sp, #0]
 800be1a:	9f08      	ldr	r7, [sp, #32]
 800be1c:	3219      	adds	r2, #25
 800be1e:	47b8      	blx	r7
 800be20:	3001      	adds	r0, #1
 800be22:	d1f0      	bne.n	800be06 <_printf_common+0x8a>
 800be24:	2001      	movs	r0, #1
 800be26:	4240      	negs	r0, r0
 800be28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be2a:	2030      	movs	r0, #48	@ 0x30
 800be2c:	18e1      	adds	r1, r4, r3
 800be2e:	3143      	adds	r1, #67	@ 0x43
 800be30:	7008      	strb	r0, [r1, #0]
 800be32:	0021      	movs	r1, r4
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	3145      	adds	r1, #69	@ 0x45
 800be38:	7809      	ldrb	r1, [r1, #0]
 800be3a:	18a2      	adds	r2, r4, r2
 800be3c:	3243      	adds	r2, #67	@ 0x43
 800be3e:	3302      	adds	r3, #2
 800be40:	7011      	strb	r1, [r2, #0]
 800be42:	e7c1      	b.n	800bdc8 <_printf_common+0x4c>
 800be44:	0022      	movs	r2, r4
 800be46:	2301      	movs	r3, #1
 800be48:	9901      	ldr	r1, [sp, #4]
 800be4a:	9800      	ldr	r0, [sp, #0]
 800be4c:	9f08      	ldr	r7, [sp, #32]
 800be4e:	321a      	adds	r2, #26
 800be50:	47b8      	blx	r7
 800be52:	3001      	adds	r0, #1
 800be54:	d0e6      	beq.n	800be24 <_printf_common+0xa8>
 800be56:	3601      	adds	r6, #1
 800be58:	e7d1      	b.n	800bdfe <_printf_common+0x82>
	...

0800be5c <_printf_i>:
 800be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be5e:	b08b      	sub	sp, #44	@ 0x2c
 800be60:	9206      	str	r2, [sp, #24]
 800be62:	000a      	movs	r2, r1
 800be64:	3243      	adds	r2, #67	@ 0x43
 800be66:	9307      	str	r3, [sp, #28]
 800be68:	9005      	str	r0, [sp, #20]
 800be6a:	9203      	str	r2, [sp, #12]
 800be6c:	7e0a      	ldrb	r2, [r1, #24]
 800be6e:	000c      	movs	r4, r1
 800be70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be72:	2a78      	cmp	r2, #120	@ 0x78
 800be74:	d809      	bhi.n	800be8a <_printf_i+0x2e>
 800be76:	2a62      	cmp	r2, #98	@ 0x62
 800be78:	d80b      	bhi.n	800be92 <_printf_i+0x36>
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d100      	bne.n	800be80 <_printf_i+0x24>
 800be7e:	e0ba      	b.n	800bff6 <_printf_i+0x19a>
 800be80:	497a      	ldr	r1, [pc, #488]	@ (800c06c <_printf_i+0x210>)
 800be82:	9104      	str	r1, [sp, #16]
 800be84:	2a58      	cmp	r2, #88	@ 0x58
 800be86:	d100      	bne.n	800be8a <_printf_i+0x2e>
 800be88:	e08e      	b.n	800bfa8 <_printf_i+0x14c>
 800be8a:	0025      	movs	r5, r4
 800be8c:	3542      	adds	r5, #66	@ 0x42
 800be8e:	702a      	strb	r2, [r5, #0]
 800be90:	e022      	b.n	800bed8 <_printf_i+0x7c>
 800be92:	0010      	movs	r0, r2
 800be94:	3863      	subs	r0, #99	@ 0x63
 800be96:	2815      	cmp	r0, #21
 800be98:	d8f7      	bhi.n	800be8a <_printf_i+0x2e>
 800be9a:	f7f4 f943 	bl	8000124 <__gnu_thumb1_case_shi>
 800be9e:	0016      	.short	0x0016
 800bea0:	fff6001f 	.word	0xfff6001f
 800bea4:	fff6fff6 	.word	0xfff6fff6
 800bea8:	001ffff6 	.word	0x001ffff6
 800beac:	fff6fff6 	.word	0xfff6fff6
 800beb0:	fff6fff6 	.word	0xfff6fff6
 800beb4:	0036009f 	.word	0x0036009f
 800beb8:	fff6007e 	.word	0xfff6007e
 800bebc:	00b0fff6 	.word	0x00b0fff6
 800bec0:	0036fff6 	.word	0x0036fff6
 800bec4:	fff6fff6 	.word	0xfff6fff6
 800bec8:	0082      	.short	0x0082
 800beca:	0025      	movs	r5, r4
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	3542      	adds	r5, #66	@ 0x42
 800bed0:	1d11      	adds	r1, r2, #4
 800bed2:	6019      	str	r1, [r3, #0]
 800bed4:	6813      	ldr	r3, [r2, #0]
 800bed6:	702b      	strb	r3, [r5, #0]
 800bed8:	2301      	movs	r3, #1
 800beda:	e09e      	b.n	800c01a <_printf_i+0x1be>
 800bedc:	6818      	ldr	r0, [r3, #0]
 800bede:	6809      	ldr	r1, [r1, #0]
 800bee0:	1d02      	adds	r2, r0, #4
 800bee2:	060d      	lsls	r5, r1, #24
 800bee4:	d50b      	bpl.n	800befe <_printf_i+0xa2>
 800bee6:	6806      	ldr	r6, [r0, #0]
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	2e00      	cmp	r6, #0
 800beec:	da03      	bge.n	800bef6 <_printf_i+0x9a>
 800beee:	232d      	movs	r3, #45	@ 0x2d
 800bef0:	9a03      	ldr	r2, [sp, #12]
 800bef2:	4276      	negs	r6, r6
 800bef4:	7013      	strb	r3, [r2, #0]
 800bef6:	4b5d      	ldr	r3, [pc, #372]	@ (800c06c <_printf_i+0x210>)
 800bef8:	270a      	movs	r7, #10
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	e018      	b.n	800bf30 <_printf_i+0xd4>
 800befe:	6806      	ldr	r6, [r0, #0]
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	0649      	lsls	r1, r1, #25
 800bf04:	d5f1      	bpl.n	800beea <_printf_i+0x8e>
 800bf06:	b236      	sxth	r6, r6
 800bf08:	e7ef      	b.n	800beea <_printf_i+0x8e>
 800bf0a:	6808      	ldr	r0, [r1, #0]
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	c940      	ldmia	r1!, {r6}
 800bf10:	0605      	lsls	r5, r0, #24
 800bf12:	d402      	bmi.n	800bf1a <_printf_i+0xbe>
 800bf14:	0640      	lsls	r0, r0, #25
 800bf16:	d500      	bpl.n	800bf1a <_printf_i+0xbe>
 800bf18:	b2b6      	uxth	r6, r6
 800bf1a:	6019      	str	r1, [r3, #0]
 800bf1c:	4b53      	ldr	r3, [pc, #332]	@ (800c06c <_printf_i+0x210>)
 800bf1e:	270a      	movs	r7, #10
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	2a6f      	cmp	r2, #111	@ 0x6f
 800bf24:	d100      	bne.n	800bf28 <_printf_i+0xcc>
 800bf26:	3f02      	subs	r7, #2
 800bf28:	0023      	movs	r3, r4
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	3343      	adds	r3, #67	@ 0x43
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	60a3      	str	r3, [r4, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	db06      	blt.n	800bf46 <_printf_i+0xea>
 800bf38:	2104      	movs	r1, #4
 800bf3a:	6822      	ldr	r2, [r4, #0]
 800bf3c:	9d03      	ldr	r5, [sp, #12]
 800bf3e:	438a      	bics	r2, r1
 800bf40:	6022      	str	r2, [r4, #0]
 800bf42:	4333      	orrs	r3, r6
 800bf44:	d00c      	beq.n	800bf60 <_printf_i+0x104>
 800bf46:	9d03      	ldr	r5, [sp, #12]
 800bf48:	0030      	movs	r0, r6
 800bf4a:	0039      	movs	r1, r7
 800bf4c:	f7f4 f97a 	bl	8000244 <__aeabi_uidivmod>
 800bf50:	9b04      	ldr	r3, [sp, #16]
 800bf52:	3d01      	subs	r5, #1
 800bf54:	5c5b      	ldrb	r3, [r3, r1]
 800bf56:	702b      	strb	r3, [r5, #0]
 800bf58:	0033      	movs	r3, r6
 800bf5a:	0006      	movs	r6, r0
 800bf5c:	429f      	cmp	r7, r3
 800bf5e:	d9f3      	bls.n	800bf48 <_printf_i+0xec>
 800bf60:	2f08      	cmp	r7, #8
 800bf62:	d109      	bne.n	800bf78 <_printf_i+0x11c>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	07db      	lsls	r3, r3, #31
 800bf68:	d506      	bpl.n	800bf78 <_printf_i+0x11c>
 800bf6a:	6862      	ldr	r2, [r4, #4]
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	dc02      	bgt.n	800bf78 <_printf_i+0x11c>
 800bf72:	2330      	movs	r3, #48	@ 0x30
 800bf74:	3d01      	subs	r5, #1
 800bf76:	702b      	strb	r3, [r5, #0]
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	1b5b      	subs	r3, r3, r5
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	9b07      	ldr	r3, [sp, #28]
 800bf80:	0021      	movs	r1, r4
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	9805      	ldr	r0, [sp, #20]
 800bf86:	9b06      	ldr	r3, [sp, #24]
 800bf88:	aa09      	add	r2, sp, #36	@ 0x24
 800bf8a:	f7ff fef7 	bl	800bd7c <_printf_common>
 800bf8e:	3001      	adds	r0, #1
 800bf90:	d148      	bne.n	800c024 <_printf_i+0x1c8>
 800bf92:	2001      	movs	r0, #1
 800bf94:	4240      	negs	r0, r0
 800bf96:	b00b      	add	sp, #44	@ 0x2c
 800bf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	6809      	ldr	r1, [r1, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	6022      	str	r2, [r4, #0]
 800bfa2:	2278      	movs	r2, #120	@ 0x78
 800bfa4:	4932      	ldr	r1, [pc, #200]	@ (800c070 <_printf_i+0x214>)
 800bfa6:	9104      	str	r1, [sp, #16]
 800bfa8:	0021      	movs	r1, r4
 800bfaa:	3145      	adds	r1, #69	@ 0x45
 800bfac:	700a      	strb	r2, [r1, #0]
 800bfae:	6819      	ldr	r1, [r3, #0]
 800bfb0:	6822      	ldr	r2, [r4, #0]
 800bfb2:	c940      	ldmia	r1!, {r6}
 800bfb4:	0610      	lsls	r0, r2, #24
 800bfb6:	d402      	bmi.n	800bfbe <_printf_i+0x162>
 800bfb8:	0650      	lsls	r0, r2, #25
 800bfba:	d500      	bpl.n	800bfbe <_printf_i+0x162>
 800bfbc:	b2b6      	uxth	r6, r6
 800bfbe:	6019      	str	r1, [r3, #0]
 800bfc0:	07d3      	lsls	r3, r2, #31
 800bfc2:	d502      	bpl.n	800bfca <_printf_i+0x16e>
 800bfc4:	2320      	movs	r3, #32
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	d001      	beq.n	800bfd2 <_printf_i+0x176>
 800bfce:	2710      	movs	r7, #16
 800bfd0:	e7aa      	b.n	800bf28 <_printf_i+0xcc>
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	4393      	bics	r3, r2
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	e7f8      	b.n	800bfce <_printf_i+0x172>
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	680d      	ldr	r5, [r1, #0]
 800bfe0:	1d10      	adds	r0, r2, #4
 800bfe2:	6949      	ldr	r1, [r1, #20]
 800bfe4:	6018      	str	r0, [r3, #0]
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	062e      	lsls	r6, r5, #24
 800bfea:	d501      	bpl.n	800bff0 <_printf_i+0x194>
 800bfec:	6019      	str	r1, [r3, #0]
 800bfee:	e002      	b.n	800bff6 <_printf_i+0x19a>
 800bff0:	066d      	lsls	r5, r5, #25
 800bff2:	d5fb      	bpl.n	800bfec <_printf_i+0x190>
 800bff4:	8019      	strh	r1, [r3, #0]
 800bff6:	2300      	movs	r3, #0
 800bff8:	9d03      	ldr	r5, [sp, #12]
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	e7bf      	b.n	800bf7e <_printf_i+0x122>
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	1d11      	adds	r1, r2, #4
 800c002:	6019      	str	r1, [r3, #0]
 800c004:	6815      	ldr	r5, [r2, #0]
 800c006:	2100      	movs	r1, #0
 800c008:	0028      	movs	r0, r5
 800c00a:	6862      	ldr	r2, [r4, #4]
 800c00c:	f000 fa09 	bl	800c422 <memchr>
 800c010:	2800      	cmp	r0, #0
 800c012:	d001      	beq.n	800c018 <_printf_i+0x1bc>
 800c014:	1b40      	subs	r0, r0, r5
 800c016:	6060      	str	r0, [r4, #4]
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	6123      	str	r3, [r4, #16]
 800c01c:	2300      	movs	r3, #0
 800c01e:	9a03      	ldr	r2, [sp, #12]
 800c020:	7013      	strb	r3, [r2, #0]
 800c022:	e7ac      	b.n	800bf7e <_printf_i+0x122>
 800c024:	002a      	movs	r2, r5
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	9906      	ldr	r1, [sp, #24]
 800c02a:	9805      	ldr	r0, [sp, #20]
 800c02c:	9d07      	ldr	r5, [sp, #28]
 800c02e:	47a8      	blx	r5
 800c030:	3001      	adds	r0, #1
 800c032:	d0ae      	beq.n	800bf92 <_printf_i+0x136>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	079b      	lsls	r3, r3, #30
 800c038:	d415      	bmi.n	800c066 <_printf_i+0x20a>
 800c03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03c:	68e0      	ldr	r0, [r4, #12]
 800c03e:	4298      	cmp	r0, r3
 800c040:	daa9      	bge.n	800bf96 <_printf_i+0x13a>
 800c042:	0018      	movs	r0, r3
 800c044:	e7a7      	b.n	800bf96 <_printf_i+0x13a>
 800c046:	0022      	movs	r2, r4
 800c048:	2301      	movs	r3, #1
 800c04a:	9906      	ldr	r1, [sp, #24]
 800c04c:	9805      	ldr	r0, [sp, #20]
 800c04e:	9e07      	ldr	r6, [sp, #28]
 800c050:	3219      	adds	r2, #25
 800c052:	47b0      	blx	r6
 800c054:	3001      	adds	r0, #1
 800c056:	d09c      	beq.n	800bf92 <_printf_i+0x136>
 800c058:	3501      	adds	r5, #1
 800c05a:	68e3      	ldr	r3, [r4, #12]
 800c05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c05e:	1a9b      	subs	r3, r3, r2
 800c060:	42ab      	cmp	r3, r5
 800c062:	dcf0      	bgt.n	800c046 <_printf_i+0x1ea>
 800c064:	e7e9      	b.n	800c03a <_printf_i+0x1de>
 800c066:	2500      	movs	r5, #0
 800c068:	e7f7      	b.n	800c05a <_printf_i+0x1fe>
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	0800e926 	.word	0x0800e926
 800c070:	0800e937 	.word	0x0800e937

0800c074 <std>:
 800c074:	2300      	movs	r3, #0
 800c076:	b510      	push	{r4, lr}
 800c078:	0004      	movs	r4, r0
 800c07a:	6003      	str	r3, [r0, #0]
 800c07c:	6043      	str	r3, [r0, #4]
 800c07e:	6083      	str	r3, [r0, #8]
 800c080:	8181      	strh	r1, [r0, #12]
 800c082:	6643      	str	r3, [r0, #100]	@ 0x64
 800c084:	81c2      	strh	r2, [r0, #14]
 800c086:	6103      	str	r3, [r0, #16]
 800c088:	6143      	str	r3, [r0, #20]
 800c08a:	6183      	str	r3, [r0, #24]
 800c08c:	0019      	movs	r1, r3
 800c08e:	2208      	movs	r2, #8
 800c090:	305c      	adds	r0, #92	@ 0x5c
 800c092:	f000 f921 	bl	800c2d8 <memset>
 800c096:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c4 <std+0x50>)
 800c098:	6224      	str	r4, [r4, #32]
 800c09a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c09c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c8 <std+0x54>)
 800c09e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c0cc <std+0x58>)
 800c0a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <std+0x5c>)
 800c0a6:	6323      	str	r3, [r4, #48]	@ 0x30
 800c0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d4 <std+0x60>)
 800c0aa:	429c      	cmp	r4, r3
 800c0ac:	d005      	beq.n	800c0ba <std+0x46>
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d8 <std+0x64>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d002      	beq.n	800c0ba <std+0x46>
 800c0b4:	4b09      	ldr	r3, [pc, #36]	@ (800c0dc <std+0x68>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d103      	bne.n	800c0c2 <std+0x4e>
 800c0ba:	0020      	movs	r0, r4
 800c0bc:	3058      	adds	r0, #88	@ 0x58
 800c0be:	f000 f9a5 	bl	800c40c <__retarget_lock_init_recursive>
 800c0c2:	bd10      	pop	{r4, pc}
 800c0c4:	0800c241 	.word	0x0800c241
 800c0c8:	0800c269 	.word	0x0800c269
 800c0cc:	0800c2a1 	.word	0x0800c2a1
 800c0d0:	0800c2cd 	.word	0x0800c2cd
 800c0d4:	20000610 	.word	0x20000610
 800c0d8:	20000678 	.word	0x20000678
 800c0dc:	200006e0 	.word	0x200006e0

0800c0e0 <stdio_exit_handler>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	4a03      	ldr	r2, [pc, #12]	@ (800c0f0 <stdio_exit_handler+0x10>)
 800c0e4:	4903      	ldr	r1, [pc, #12]	@ (800c0f4 <stdio_exit_handler+0x14>)
 800c0e6:	4804      	ldr	r0, [pc, #16]	@ (800c0f8 <stdio_exit_handler+0x18>)
 800c0e8:	f000 f86c 	bl	800c1c4 <_fwalk_sglue>
 800c0ec:	bd10      	pop	{r4, pc}
 800c0ee:	46c0      	nop			@ (mov r8, r8)
 800c0f0:	2000001c 	.word	0x2000001c
 800c0f4:	0800de31 	.word	0x0800de31
 800c0f8:	2000002c 	.word	0x2000002c

0800c0fc <cleanup_stdio>:
 800c0fc:	6841      	ldr	r1, [r0, #4]
 800c0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c12c <cleanup_stdio+0x30>)
 800c100:	b510      	push	{r4, lr}
 800c102:	0004      	movs	r4, r0
 800c104:	4299      	cmp	r1, r3
 800c106:	d001      	beq.n	800c10c <cleanup_stdio+0x10>
 800c108:	f001 fe92 	bl	800de30 <_fflush_r>
 800c10c:	68a1      	ldr	r1, [r4, #8]
 800c10e:	4b08      	ldr	r3, [pc, #32]	@ (800c130 <cleanup_stdio+0x34>)
 800c110:	4299      	cmp	r1, r3
 800c112:	d002      	beq.n	800c11a <cleanup_stdio+0x1e>
 800c114:	0020      	movs	r0, r4
 800c116:	f001 fe8b 	bl	800de30 <_fflush_r>
 800c11a:	68e1      	ldr	r1, [r4, #12]
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <cleanup_stdio+0x38>)
 800c11e:	4299      	cmp	r1, r3
 800c120:	d002      	beq.n	800c128 <cleanup_stdio+0x2c>
 800c122:	0020      	movs	r0, r4
 800c124:	f001 fe84 	bl	800de30 <_fflush_r>
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	46c0      	nop			@ (mov r8, r8)
 800c12c:	20000610 	.word	0x20000610
 800c130:	20000678 	.word	0x20000678
 800c134:	200006e0 	.word	0x200006e0

0800c138 <global_stdio_init.part.0>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	4b09      	ldr	r3, [pc, #36]	@ (800c160 <global_stdio_init.part.0+0x28>)
 800c13c:	4a09      	ldr	r2, [pc, #36]	@ (800c164 <global_stdio_init.part.0+0x2c>)
 800c13e:	2104      	movs	r1, #4
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	4809      	ldr	r0, [pc, #36]	@ (800c168 <global_stdio_init.part.0+0x30>)
 800c144:	2200      	movs	r2, #0
 800c146:	f7ff ff95 	bl	800c074 <std>
 800c14a:	2201      	movs	r2, #1
 800c14c:	2109      	movs	r1, #9
 800c14e:	4807      	ldr	r0, [pc, #28]	@ (800c16c <global_stdio_init.part.0+0x34>)
 800c150:	f7ff ff90 	bl	800c074 <std>
 800c154:	2202      	movs	r2, #2
 800c156:	2112      	movs	r1, #18
 800c158:	4805      	ldr	r0, [pc, #20]	@ (800c170 <global_stdio_init.part.0+0x38>)
 800c15a:	f7ff ff8b 	bl	800c074 <std>
 800c15e:	bd10      	pop	{r4, pc}
 800c160:	20000748 	.word	0x20000748
 800c164:	0800c0e1 	.word	0x0800c0e1
 800c168:	20000610 	.word	0x20000610
 800c16c:	20000678 	.word	0x20000678
 800c170:	200006e0 	.word	0x200006e0

0800c174 <__sfp_lock_acquire>:
 800c174:	b510      	push	{r4, lr}
 800c176:	4802      	ldr	r0, [pc, #8]	@ (800c180 <__sfp_lock_acquire+0xc>)
 800c178:	f000 f949 	bl	800c40e <__retarget_lock_acquire_recursive>
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	20000751 	.word	0x20000751

0800c184 <__sfp_lock_release>:
 800c184:	b510      	push	{r4, lr}
 800c186:	4802      	ldr	r0, [pc, #8]	@ (800c190 <__sfp_lock_release+0xc>)
 800c188:	f000 f942 	bl	800c410 <__retarget_lock_release_recursive>
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	46c0      	nop			@ (mov r8, r8)
 800c190:	20000751 	.word	0x20000751

0800c194 <__sinit>:
 800c194:	b510      	push	{r4, lr}
 800c196:	0004      	movs	r4, r0
 800c198:	f7ff ffec 	bl	800c174 <__sfp_lock_acquire>
 800c19c:	6a23      	ldr	r3, [r4, #32]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <__sinit+0x14>
 800c1a2:	f7ff ffef 	bl	800c184 <__sfp_lock_release>
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	4b04      	ldr	r3, [pc, #16]	@ (800c1bc <__sinit+0x28>)
 800c1aa:	6223      	str	r3, [r4, #32]
 800c1ac:	4b04      	ldr	r3, [pc, #16]	@ (800c1c0 <__sinit+0x2c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1f6      	bne.n	800c1a2 <__sinit+0xe>
 800c1b4:	f7ff ffc0 	bl	800c138 <global_stdio_init.part.0>
 800c1b8:	e7f3      	b.n	800c1a2 <__sinit+0xe>
 800c1ba:	46c0      	nop			@ (mov r8, r8)
 800c1bc:	0800c0fd 	.word	0x0800c0fd
 800c1c0:	20000748 	.word	0x20000748

0800c1c4 <_fwalk_sglue>:
 800c1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c6:	0014      	movs	r4, r2
 800c1c8:	2600      	movs	r6, #0
 800c1ca:	9000      	str	r0, [sp, #0]
 800c1cc:	9101      	str	r1, [sp, #4]
 800c1ce:	68a5      	ldr	r5, [r4, #8]
 800c1d0:	6867      	ldr	r7, [r4, #4]
 800c1d2:	3f01      	subs	r7, #1
 800c1d4:	d504      	bpl.n	800c1e0 <_fwalk_sglue+0x1c>
 800c1d6:	6824      	ldr	r4, [r4, #0]
 800c1d8:	2c00      	cmp	r4, #0
 800c1da:	d1f8      	bne.n	800c1ce <_fwalk_sglue+0xa>
 800c1dc:	0030      	movs	r0, r6
 800c1de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1e0:	89ab      	ldrh	r3, [r5, #12]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d908      	bls.n	800c1f8 <_fwalk_sglue+0x34>
 800c1e6:	220e      	movs	r2, #14
 800c1e8:	5eab      	ldrsh	r3, [r5, r2]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	d004      	beq.n	800c1f8 <_fwalk_sglue+0x34>
 800c1ee:	0029      	movs	r1, r5
 800c1f0:	9800      	ldr	r0, [sp, #0]
 800c1f2:	9b01      	ldr	r3, [sp, #4]
 800c1f4:	4798      	blx	r3
 800c1f6:	4306      	orrs	r6, r0
 800c1f8:	3568      	adds	r5, #104	@ 0x68
 800c1fa:	e7ea      	b.n	800c1d2 <_fwalk_sglue+0xe>

0800c1fc <siprintf>:
 800c1fc:	b40e      	push	{r1, r2, r3}
 800c1fe:	b510      	push	{r4, lr}
 800c200:	2400      	movs	r4, #0
 800c202:	490c      	ldr	r1, [pc, #48]	@ (800c234 <siprintf+0x38>)
 800c204:	b09d      	sub	sp, #116	@ 0x74
 800c206:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c208:	9002      	str	r0, [sp, #8]
 800c20a:	9006      	str	r0, [sp, #24]
 800c20c:	9107      	str	r1, [sp, #28]
 800c20e:	9104      	str	r1, [sp, #16]
 800c210:	4809      	ldr	r0, [pc, #36]	@ (800c238 <siprintf+0x3c>)
 800c212:	490a      	ldr	r1, [pc, #40]	@ (800c23c <siprintf+0x40>)
 800c214:	cb04      	ldmia	r3!, {r2}
 800c216:	9105      	str	r1, [sp, #20]
 800c218:	6800      	ldr	r0, [r0, #0]
 800c21a:	a902      	add	r1, sp, #8
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c220:	f001 fc82 	bl	800db28 <_svfiprintf_r>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	701c      	strb	r4, [r3, #0]
 800c228:	b01d      	add	sp, #116	@ 0x74
 800c22a:	bc10      	pop	{r4}
 800c22c:	bc08      	pop	{r3}
 800c22e:	b003      	add	sp, #12
 800c230:	4718      	bx	r3
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	7fffffff 	.word	0x7fffffff
 800c238:	20000028 	.word	0x20000028
 800c23c:	ffff0208 	.word	0xffff0208

0800c240 <__sread>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	000c      	movs	r4, r1
 800c244:	250e      	movs	r5, #14
 800c246:	5f49      	ldrsh	r1, [r1, r5]
 800c248:	f000 f88e 	bl	800c368 <_read_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	db03      	blt.n	800c258 <__sread+0x18>
 800c250:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c252:	181b      	adds	r3, r3, r0
 800c254:	6563      	str	r3, [r4, #84]	@ 0x54
 800c256:	bd70      	pop	{r4, r5, r6, pc}
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	4a02      	ldr	r2, [pc, #8]	@ (800c264 <__sread+0x24>)
 800c25c:	4013      	ands	r3, r2
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	e7f9      	b.n	800c256 <__sread+0x16>
 800c262:	46c0      	nop			@ (mov r8, r8)
 800c264:	ffffefff 	.word	0xffffefff

0800c268 <__swrite>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	001f      	movs	r7, r3
 800c26c:	898b      	ldrh	r3, [r1, #12]
 800c26e:	0005      	movs	r5, r0
 800c270:	000c      	movs	r4, r1
 800c272:	0016      	movs	r6, r2
 800c274:	05db      	lsls	r3, r3, #23
 800c276:	d505      	bpl.n	800c284 <__swrite+0x1c>
 800c278:	230e      	movs	r3, #14
 800c27a:	5ec9      	ldrsh	r1, [r1, r3]
 800c27c:	2200      	movs	r2, #0
 800c27e:	2302      	movs	r3, #2
 800c280:	f000 f85e 	bl	800c340 <_lseek_r>
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	4a05      	ldr	r2, [pc, #20]	@ (800c29c <__swrite+0x34>)
 800c288:	0028      	movs	r0, r5
 800c28a:	4013      	ands	r3, r2
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	0032      	movs	r2, r6
 800c290:	230e      	movs	r3, #14
 800c292:	5ee1      	ldrsh	r1, [r4, r3]
 800c294:	003b      	movs	r3, r7
 800c296:	f000 f87b 	bl	800c390 <_write_r>
 800c29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29c:	ffffefff 	.word	0xffffefff

0800c2a0 <__sseek>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	000c      	movs	r4, r1
 800c2a4:	250e      	movs	r5, #14
 800c2a6:	5f49      	ldrsh	r1, [r1, r5]
 800c2a8:	f000 f84a 	bl	800c340 <_lseek_r>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	1c42      	adds	r2, r0, #1
 800c2b0:	d103      	bne.n	800c2ba <__sseek+0x1a>
 800c2b2:	4a05      	ldr	r2, [pc, #20]	@ (800c2c8 <__sseek+0x28>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ba:	2280      	movs	r2, #128	@ 0x80
 800c2bc:	0152      	lsls	r2, r2, #5
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2c4:	e7f8      	b.n	800c2b8 <__sseek+0x18>
 800c2c6:	46c0      	nop			@ (mov r8, r8)
 800c2c8:	ffffefff 	.word	0xffffefff

0800c2cc <__sclose>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	230e      	movs	r3, #14
 800c2d0:	5ec9      	ldrsh	r1, [r1, r3]
 800c2d2:	f000 f823 	bl	800c31c <_close_r>
 800c2d6:	bd10      	pop	{r4, pc}

0800c2d8 <memset>:
 800c2d8:	0003      	movs	r3, r0
 800c2da:	1882      	adds	r2, r0, r2
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d100      	bne.n	800c2e2 <memset+0xa>
 800c2e0:	4770      	bx	lr
 800c2e2:	7019      	strb	r1, [r3, #0]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	e7f9      	b.n	800c2dc <memset+0x4>

0800c2e8 <strstr>:
 800c2e8:	780a      	ldrb	r2, [r1, #0]
 800c2ea:	b530      	push	{r4, r5, lr}
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	d10c      	bne.n	800c30a <strstr+0x22>
 800c2f0:	bd30      	pop	{r4, r5, pc}
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d108      	bne.n	800c308 <strstr+0x20>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	5ccc      	ldrb	r4, [r1, r3]
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	d0f8      	beq.n	800c2f0 <strstr+0x8>
 800c2fe:	5cc5      	ldrb	r5, [r0, r3]
 800c300:	42a5      	cmp	r5, r4
 800c302:	d101      	bne.n	800c308 <strstr+0x20>
 800c304:	3301      	adds	r3, #1
 800c306:	e7f7      	b.n	800c2f8 <strstr+0x10>
 800c308:	3001      	adds	r0, #1
 800c30a:	7803      	ldrb	r3, [r0, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1f0      	bne.n	800c2f2 <strstr+0xa>
 800c310:	0018      	movs	r0, r3
 800c312:	e7ed      	b.n	800c2f0 <strstr+0x8>

0800c314 <_localeconv_r>:
 800c314:	4800      	ldr	r0, [pc, #0]	@ (800c318 <_localeconv_r+0x4>)
 800c316:	4770      	bx	lr
 800c318:	20000168 	.word	0x20000168

0800c31c <_close_r>:
 800c31c:	2300      	movs	r3, #0
 800c31e:	b570      	push	{r4, r5, r6, lr}
 800c320:	4d06      	ldr	r5, [pc, #24]	@ (800c33c <_close_r+0x20>)
 800c322:	0004      	movs	r4, r0
 800c324:	0008      	movs	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f9 fa0c 	bl	8005744 <_close>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d103      	bne.n	800c338 <_close_r+0x1c>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d000      	beq.n	800c338 <_close_r+0x1c>
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	bd70      	pop	{r4, r5, r6, pc}
 800c33a:	46c0      	nop			@ (mov r8, r8)
 800c33c:	2000074c 	.word	0x2000074c

0800c340 <_lseek_r>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	0004      	movs	r4, r0
 800c344:	0008      	movs	r0, r1
 800c346:	0011      	movs	r1, r2
 800c348:	001a      	movs	r2, r3
 800c34a:	2300      	movs	r3, #0
 800c34c:	4d05      	ldr	r5, [pc, #20]	@ (800c364 <_lseek_r+0x24>)
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7f9 fa19 	bl	8005786 <_lseek>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d103      	bne.n	800c360 <_lseek_r+0x20>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d000      	beq.n	800c360 <_lseek_r+0x20>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	46c0      	nop			@ (mov r8, r8)
 800c364:	2000074c 	.word	0x2000074c

0800c368 <_read_r>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	0004      	movs	r4, r0
 800c36c:	0008      	movs	r0, r1
 800c36e:	0011      	movs	r1, r2
 800c370:	001a      	movs	r2, r3
 800c372:	2300      	movs	r3, #0
 800c374:	4d05      	ldr	r5, [pc, #20]	@ (800c38c <_read_r+0x24>)
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	f7f9 f9ab 	bl	80056d2 <_read>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d103      	bne.n	800c388 <_read_r+0x20>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d000      	beq.n	800c388 <_read_r+0x20>
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	bd70      	pop	{r4, r5, r6, pc}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	2000074c 	.word	0x2000074c

0800c390 <_write_r>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	0004      	movs	r4, r0
 800c394:	0008      	movs	r0, r1
 800c396:	0011      	movs	r1, r2
 800c398:	001a      	movs	r2, r3
 800c39a:	2300      	movs	r3, #0
 800c39c:	4d05      	ldr	r5, [pc, #20]	@ (800c3b4 <_write_r+0x24>)
 800c39e:	602b      	str	r3, [r5, #0]
 800c3a0:	f7f9 f9b4 	bl	800570c <_write>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	d103      	bne.n	800c3b0 <_write_r+0x20>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d000      	beq.n	800c3b0 <_write_r+0x20>
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	46c0      	nop			@ (mov r8, r8)
 800c3b4:	2000074c 	.word	0x2000074c

0800c3b8 <__errno>:
 800c3b8:	4b01      	ldr	r3, [pc, #4]	@ (800c3c0 <__errno+0x8>)
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	4770      	bx	lr
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	20000028 	.word	0x20000028

0800c3c4 <__libc_init_array>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	4c0c      	ldr	r4, [pc, #48]	@ (800c3fc <__libc_init_array+0x38>)
 800c3ca:	4d0d      	ldr	r5, [pc, #52]	@ (800c400 <__libc_init_array+0x3c>)
 800c3cc:	1b64      	subs	r4, r4, r5
 800c3ce:	10a4      	asrs	r4, r4, #2
 800c3d0:	42a6      	cmp	r6, r4
 800c3d2:	d109      	bne.n	800c3e8 <__libc_init_array+0x24>
 800c3d4:	2600      	movs	r6, #0
 800c3d6:	f002 f8fb 	bl	800e5d0 <_init>
 800c3da:	4c0a      	ldr	r4, [pc, #40]	@ (800c404 <__libc_init_array+0x40>)
 800c3dc:	4d0a      	ldr	r5, [pc, #40]	@ (800c408 <__libc_init_array+0x44>)
 800c3de:	1b64      	subs	r4, r4, r5
 800c3e0:	10a4      	asrs	r4, r4, #2
 800c3e2:	42a6      	cmp	r6, r4
 800c3e4:	d105      	bne.n	800c3f2 <__libc_init_array+0x2e>
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	00b3      	lsls	r3, r6, #2
 800c3ea:	58eb      	ldr	r3, [r5, r3]
 800c3ec:	4798      	blx	r3
 800c3ee:	3601      	adds	r6, #1
 800c3f0:	e7ee      	b.n	800c3d0 <__libc_init_array+0xc>
 800c3f2:	00b3      	lsls	r3, r6, #2
 800c3f4:	58eb      	ldr	r3, [r5, r3]
 800c3f6:	4798      	blx	r3
 800c3f8:	3601      	adds	r6, #1
 800c3fa:	e7f2      	b.n	800c3e2 <__libc_init_array+0x1e>
 800c3fc:	0800ec8c 	.word	0x0800ec8c
 800c400:	0800ec8c 	.word	0x0800ec8c
 800c404:	0800ec90 	.word	0x0800ec90
 800c408:	0800ec8c 	.word	0x0800ec8c

0800c40c <__retarget_lock_init_recursive>:
 800c40c:	4770      	bx	lr

0800c40e <__retarget_lock_acquire_recursive>:
 800c40e:	4770      	bx	lr

0800c410 <__retarget_lock_release_recursive>:
 800c410:	4770      	bx	lr

0800c412 <strcpy>:
 800c412:	0003      	movs	r3, r0
 800c414:	780a      	ldrb	r2, [r1, #0]
 800c416:	3101      	adds	r1, #1
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	3301      	adds	r3, #1
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	d1f9      	bne.n	800c414 <strcpy+0x2>
 800c420:	4770      	bx	lr

0800c422 <memchr>:
 800c422:	b2c9      	uxtb	r1, r1
 800c424:	1882      	adds	r2, r0, r2
 800c426:	4290      	cmp	r0, r2
 800c428:	d101      	bne.n	800c42e <memchr+0xc>
 800c42a:	2000      	movs	r0, #0
 800c42c:	4770      	bx	lr
 800c42e:	7803      	ldrb	r3, [r0, #0]
 800c430:	428b      	cmp	r3, r1
 800c432:	d0fb      	beq.n	800c42c <memchr+0xa>
 800c434:	3001      	adds	r0, #1
 800c436:	e7f6      	b.n	800c426 <memchr+0x4>

0800c438 <quorem>:
 800c438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43a:	6903      	ldr	r3, [r0, #16]
 800c43c:	690c      	ldr	r4, [r1, #16]
 800c43e:	b089      	sub	sp, #36	@ 0x24
 800c440:	9003      	str	r0, [sp, #12]
 800c442:	9106      	str	r1, [sp, #24]
 800c444:	2000      	movs	r0, #0
 800c446:	42a3      	cmp	r3, r4
 800c448:	db63      	blt.n	800c512 <quorem+0xda>
 800c44a:	000b      	movs	r3, r1
 800c44c:	3c01      	subs	r4, #1
 800c44e:	3314      	adds	r3, #20
 800c450:	00a5      	lsls	r5, r4, #2
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	195b      	adds	r3, r3, r5
 800c456:	9305      	str	r3, [sp, #20]
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	3314      	adds	r3, #20
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	195d      	adds	r5, r3, r5
 800c460:	9b05      	ldr	r3, [sp, #20]
 800c462:	682f      	ldr	r7, [r5, #0]
 800c464:	681e      	ldr	r6, [r3, #0]
 800c466:	0038      	movs	r0, r7
 800c468:	3601      	adds	r6, #1
 800c46a:	0031      	movs	r1, r6
 800c46c:	f7f3 fe64 	bl	8000138 <__udivsi3>
 800c470:	9002      	str	r0, [sp, #8]
 800c472:	42b7      	cmp	r7, r6
 800c474:	d327      	bcc.n	800c4c6 <quorem+0x8e>
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	2700      	movs	r7, #0
 800c47a:	469c      	mov	ip, r3
 800c47c:	9e01      	ldr	r6, [sp, #4]
 800c47e:	9707      	str	r7, [sp, #28]
 800c480:	4662      	mov	r2, ip
 800c482:	ca08      	ldmia	r2!, {r3}
 800c484:	6830      	ldr	r0, [r6, #0]
 800c486:	4694      	mov	ip, r2
 800c488:	9a02      	ldr	r2, [sp, #8]
 800c48a:	b299      	uxth	r1, r3
 800c48c:	4351      	muls	r1, r2
 800c48e:	0c1b      	lsrs	r3, r3, #16
 800c490:	4353      	muls	r3, r2
 800c492:	19c9      	adds	r1, r1, r7
 800c494:	0c0a      	lsrs	r2, r1, #16
 800c496:	189b      	adds	r3, r3, r2
 800c498:	b289      	uxth	r1, r1
 800c49a:	b282      	uxth	r2, r0
 800c49c:	1a52      	subs	r2, r2, r1
 800c49e:	9907      	ldr	r1, [sp, #28]
 800c4a0:	0c1f      	lsrs	r7, r3, #16
 800c4a2:	1852      	adds	r2, r2, r1
 800c4a4:	0c00      	lsrs	r0, r0, #16
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	1411      	asrs	r1, r2, #16
 800c4aa:	1ac3      	subs	r3, r0, r3
 800c4ac:	185b      	adds	r3, r3, r1
 800c4ae:	1419      	asrs	r1, r3, #16
 800c4b0:	b292      	uxth	r2, r2
 800c4b2:	041b      	lsls	r3, r3, #16
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	9107      	str	r1, [sp, #28]
 800c4ba:	c604      	stmia	r6!, {r2}
 800c4bc:	4563      	cmp	r3, ip
 800c4be:	d2df      	bcs.n	800c480 <quorem+0x48>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d02b      	beq.n	800c51e <quorem+0xe6>
 800c4c6:	9906      	ldr	r1, [sp, #24]
 800c4c8:	9803      	ldr	r0, [sp, #12]
 800c4ca:	f001 f9b7 	bl	800d83c <__mcmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	db1e      	blt.n	800c510 <quorem+0xd8>
 800c4d2:	2600      	movs	r6, #0
 800c4d4:	9d01      	ldr	r5, [sp, #4]
 800c4d6:	9904      	ldr	r1, [sp, #16]
 800c4d8:	c901      	ldmia	r1!, {r0}
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	b287      	uxth	r7, r0
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	1bd2      	subs	r2, r2, r7
 800c4e2:	1992      	adds	r2, r2, r6
 800c4e4:	0c00      	lsrs	r0, r0, #16
 800c4e6:	0c1b      	lsrs	r3, r3, #16
 800c4e8:	1a1b      	subs	r3, r3, r0
 800c4ea:	1410      	asrs	r0, r2, #16
 800c4ec:	181b      	adds	r3, r3, r0
 800c4ee:	141e      	asrs	r6, r3, #16
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	041b      	lsls	r3, r3, #16
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	9b05      	ldr	r3, [sp, #20]
 800c4f8:	c504      	stmia	r5!, {r2}
 800c4fa:	428b      	cmp	r3, r1
 800c4fc:	d2ec      	bcs.n	800c4d8 <quorem+0xa0>
 800c4fe:	9a01      	ldr	r2, [sp, #4]
 800c500:	00a3      	lsls	r3, r4, #2
 800c502:	18d3      	adds	r3, r2, r3
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	2a00      	cmp	r2, #0
 800c508:	d014      	beq.n	800c534 <quorem+0xfc>
 800c50a:	9b02      	ldr	r3, [sp, #8]
 800c50c:	3301      	adds	r3, #1
 800c50e:	9302      	str	r3, [sp, #8]
 800c510:	9802      	ldr	r0, [sp, #8]
 800c512:	b009      	add	sp, #36	@ 0x24
 800c514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d104      	bne.n	800c526 <quorem+0xee>
 800c51c:	3c01      	subs	r4, #1
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	3d04      	subs	r5, #4
 800c522:	42ab      	cmp	r3, r5
 800c524:	d3f7      	bcc.n	800c516 <quorem+0xde>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	611c      	str	r4, [r3, #16]
 800c52a:	e7cc      	b.n	800c4c6 <quorem+0x8e>
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d104      	bne.n	800c53c <quorem+0x104>
 800c532:	3c01      	subs	r4, #1
 800c534:	9a01      	ldr	r2, [sp, #4]
 800c536:	3b04      	subs	r3, #4
 800c538:	429a      	cmp	r2, r3
 800c53a:	d3f7      	bcc.n	800c52c <quorem+0xf4>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	611c      	str	r4, [r3, #16]
 800c540:	e7e3      	b.n	800c50a <quorem+0xd2>
	...

0800c544 <_dtoa_r>:
 800c544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c546:	0014      	movs	r4, r2
 800c548:	001d      	movs	r5, r3
 800c54a:	69c6      	ldr	r6, [r0, #28]
 800c54c:	b09d      	sub	sp, #116	@ 0x74
 800c54e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c550:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c552:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800c554:	9003      	str	r0, [sp, #12]
 800c556:	2e00      	cmp	r6, #0
 800c558:	d10f      	bne.n	800c57a <_dtoa_r+0x36>
 800c55a:	2010      	movs	r0, #16
 800c55c:	f000 fe2c 	bl	800d1b8 <malloc>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	1e02      	subs	r2, r0, #0
 800c564:	61d8      	str	r0, [r3, #28]
 800c566:	d104      	bne.n	800c572 <_dtoa_r+0x2e>
 800c568:	21ef      	movs	r1, #239	@ 0xef
 800c56a:	4bc7      	ldr	r3, [pc, #796]	@ (800c888 <_dtoa_r+0x344>)
 800c56c:	48c7      	ldr	r0, [pc, #796]	@ (800c88c <_dtoa_r+0x348>)
 800c56e:	f001 fcb9 	bl	800dee4 <__assert_func>
 800c572:	6046      	str	r6, [r0, #4]
 800c574:	6086      	str	r6, [r0, #8]
 800c576:	6006      	str	r6, [r0, #0]
 800c578:	60c6      	str	r6, [r0, #12]
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	6819      	ldr	r1, [r3, #0]
 800c580:	2900      	cmp	r1, #0
 800c582:	d00b      	beq.n	800c59c <_dtoa_r+0x58>
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	2301      	movs	r3, #1
 800c588:	4093      	lsls	r3, r2
 800c58a:	604a      	str	r2, [r1, #4]
 800c58c:	608b      	str	r3, [r1, #8]
 800c58e:	9803      	ldr	r0, [sp, #12]
 800c590:	f000 ff12 	bl	800d3b8 <_Bfree>
 800c594:	2200      	movs	r2, #0
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	da1e      	bge.n	800c5de <_dtoa_r+0x9a>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	006b      	lsls	r3, r5, #1
 800c5a6:	085b      	lsrs	r3, r3, #1
 800c5a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c5ac:	4bb8      	ldr	r3, [pc, #736]	@ (800c890 <_dtoa_r+0x34c>)
 800c5ae:	4ab8      	ldr	r2, [pc, #736]	@ (800c890 <_dtoa_r+0x34c>)
 800c5b0:	403b      	ands	r3, r7
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d116      	bne.n	800c5e4 <_dtoa_r+0xa0>
 800c5b6:	4bb7      	ldr	r3, [pc, #732]	@ (800c894 <_dtoa_r+0x350>)
 800c5b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	033b      	lsls	r3, r7, #12
 800c5be:	0b1b      	lsrs	r3, r3, #12
 800c5c0:	4323      	orrs	r3, r4
 800c5c2:	d101      	bne.n	800c5c8 <_dtoa_r+0x84>
 800c5c4:	f000 fd80 	bl	800d0c8 <_dtoa_r+0xb84>
 800c5c8:	4bb3      	ldr	r3, [pc, #716]	@ (800c898 <_dtoa_r+0x354>)
 800c5ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c5cc:	9308      	str	r3, [sp, #32]
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	d002      	beq.n	800c5d8 <_dtoa_r+0x94>
 800c5d2:	4bb2      	ldr	r3, [pc, #712]	@ (800c89c <_dtoa_r+0x358>)
 800c5d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	9808      	ldr	r0, [sp, #32]
 800c5da:	b01d      	add	sp, #116	@ 0x74
 800c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5de:	2300      	movs	r3, #0
 800c5e0:	603b      	str	r3, [r7, #0]
 800c5e2:	e7e2      	b.n	800c5aa <_dtoa_r+0x66>
 800c5e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e8:	9212      	str	r2, [sp, #72]	@ 0x48
 800c5ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c5ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f7f3 ff26 	bl	8000444 <__aeabi_dcmpeq>
 800c5f8:	1e06      	subs	r6, r0, #0
 800c5fa:	d00b      	beq.n	800c614 <_dtoa_r+0xd0>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <_dtoa_r+0xca>
 800c608:	4ba5      	ldr	r3, [pc, #660]	@ (800c8a0 <_dtoa_r+0x35c>)
 800c60a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	4ba5      	ldr	r3, [pc, #660]	@ (800c8a4 <_dtoa_r+0x360>)
 800c610:	9308      	str	r3, [sp, #32]
 800c612:	e7e1      	b.n	800c5d8 <_dtoa_r+0x94>
 800c614:	ab1a      	add	r3, sp, #104	@ 0x68
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	9803      	ldr	r0, [sp, #12]
 800c61e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c620:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c622:	f001 f9c1 	bl	800d9a8 <__d2b>
 800c626:	007a      	lsls	r2, r7, #1
 800c628:	9005      	str	r0, [sp, #20]
 800c62a:	0d52      	lsrs	r2, r2, #21
 800c62c:	d100      	bne.n	800c630 <_dtoa_r+0xec>
 800c62e:	e07b      	b.n	800c728 <_dtoa_r+0x1e4>
 800c630:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c632:	9618      	str	r6, [sp, #96]	@ 0x60
 800c634:	0319      	lsls	r1, r3, #12
 800c636:	4b9c      	ldr	r3, [pc, #624]	@ (800c8a8 <_dtoa_r+0x364>)
 800c638:	0b09      	lsrs	r1, r1, #12
 800c63a:	430b      	orrs	r3, r1
 800c63c:	499b      	ldr	r1, [pc, #620]	@ (800c8ac <_dtoa_r+0x368>)
 800c63e:	1857      	adds	r7, r2, r1
 800c640:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c642:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c644:	0019      	movs	r1, r3
 800c646:	2200      	movs	r2, #0
 800c648:	4b99      	ldr	r3, [pc, #612]	@ (800c8b0 <_dtoa_r+0x36c>)
 800c64a:	f7f6 fa95 	bl	8002b78 <__aeabi_dsub>
 800c64e:	4a99      	ldr	r2, [pc, #612]	@ (800c8b4 <_dtoa_r+0x370>)
 800c650:	4b99      	ldr	r3, [pc, #612]	@ (800c8b8 <_dtoa_r+0x374>)
 800c652:	f7f5 ffab 	bl	80025ac <__aeabi_dmul>
 800c656:	4a99      	ldr	r2, [pc, #612]	@ (800c8bc <_dtoa_r+0x378>)
 800c658:	4b99      	ldr	r3, [pc, #612]	@ (800c8c0 <_dtoa_r+0x37c>)
 800c65a:	f7f4 ffa7 	bl	80015ac <__aeabi_dadd>
 800c65e:	0004      	movs	r4, r0
 800c660:	0038      	movs	r0, r7
 800c662:	000d      	movs	r5, r1
 800c664:	f7f6 fef0 	bl	8003448 <__aeabi_i2d>
 800c668:	4a96      	ldr	r2, [pc, #600]	@ (800c8c4 <_dtoa_r+0x380>)
 800c66a:	4b97      	ldr	r3, [pc, #604]	@ (800c8c8 <_dtoa_r+0x384>)
 800c66c:	f7f5 ff9e 	bl	80025ac <__aeabi_dmul>
 800c670:	0002      	movs	r2, r0
 800c672:	000b      	movs	r3, r1
 800c674:	0020      	movs	r0, r4
 800c676:	0029      	movs	r1, r5
 800c678:	f7f4 ff98 	bl	80015ac <__aeabi_dadd>
 800c67c:	0004      	movs	r4, r0
 800c67e:	000d      	movs	r5, r1
 800c680:	f7f6 fea6 	bl	80033d0 <__aeabi_d2iz>
 800c684:	2200      	movs	r2, #0
 800c686:	9004      	str	r0, [sp, #16]
 800c688:	2300      	movs	r3, #0
 800c68a:	0020      	movs	r0, r4
 800c68c:	0029      	movs	r1, r5
 800c68e:	f7f3 fedf 	bl	8000450 <__aeabi_dcmplt>
 800c692:	2800      	cmp	r0, #0
 800c694:	d00b      	beq.n	800c6ae <_dtoa_r+0x16a>
 800c696:	9804      	ldr	r0, [sp, #16]
 800c698:	f7f6 fed6 	bl	8003448 <__aeabi_i2d>
 800c69c:	002b      	movs	r3, r5
 800c69e:	0022      	movs	r2, r4
 800c6a0:	f7f3 fed0 	bl	8000444 <__aeabi_dcmpeq>
 800c6a4:	4243      	negs	r3, r0
 800c6a6:	4158      	adcs	r0, r3
 800c6a8:	9b04      	ldr	r3, [sp, #16]
 800c6aa:	1a1b      	subs	r3, r3, r0
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6b2:	9b04      	ldr	r3, [sp, #16]
 800c6b4:	2b16      	cmp	r3, #22
 800c6b6:	d810      	bhi.n	800c6da <_dtoa_r+0x196>
 800c6b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c6ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	4b83      	ldr	r3, [pc, #524]	@ (800c8cc <_dtoa_r+0x388>)
 800c6c0:	00d2      	lsls	r2, r2, #3
 800c6c2:	189b      	adds	r3, r3, r2
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f7f3 fec2 	bl	8000450 <__aeabi_dcmplt>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d047      	beq.n	800c760 <_dtoa_r+0x21c>
 800c6d0:	9b04      	ldr	r3, [sp, #16]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6da:	2200      	movs	r2, #0
 800c6dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c6de:	9206      	str	r2, [sp, #24]
 800c6e0:	1bdb      	subs	r3, r3, r7
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	d53e      	bpl.n	800c764 <_dtoa_r+0x220>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	9306      	str	r3, [sp, #24]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	db38      	blt.n	800c768 <_dtoa_r+0x224>
 800c6f6:	9a04      	ldr	r2, [sp, #16]
 800c6f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6fa:	4694      	mov	ip, r2
 800c6fc:	4463      	add	r3, ip
 800c6fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800c700:	2300      	movs	r3, #0
 800c702:	9214      	str	r2, [sp, #80]	@ 0x50
 800c704:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c706:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c708:	2401      	movs	r4, #1
 800c70a:	2b09      	cmp	r3, #9
 800c70c:	d862      	bhi.n	800c7d4 <_dtoa_r+0x290>
 800c70e:	2b05      	cmp	r3, #5
 800c710:	dd02      	ble.n	800c718 <_dtoa_r+0x1d4>
 800c712:	2400      	movs	r4, #0
 800c714:	3b04      	subs	r3, #4
 800c716:	9322      	str	r3, [sp, #136]	@ 0x88
 800c718:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c71a:	1e98      	subs	r0, r3, #2
 800c71c:	2803      	cmp	r0, #3
 800c71e:	d863      	bhi.n	800c7e8 <_dtoa_r+0x2a4>
 800c720:	f7f3 fcf6 	bl	8000110 <__gnu_thumb1_case_uqi>
 800c724:	2b385654 	.word	0x2b385654
 800c728:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c72a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800c72c:	18f6      	adds	r6, r6, r3
 800c72e:	4b68      	ldr	r3, [pc, #416]	@ (800c8d0 <_dtoa_r+0x38c>)
 800c730:	18f2      	adds	r2, r6, r3
 800c732:	2a20      	cmp	r2, #32
 800c734:	dd0f      	ble.n	800c756 <_dtoa_r+0x212>
 800c736:	2340      	movs	r3, #64	@ 0x40
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	409f      	lsls	r7, r3
 800c73c:	4b65      	ldr	r3, [pc, #404]	@ (800c8d4 <_dtoa_r+0x390>)
 800c73e:	0038      	movs	r0, r7
 800c740:	18f3      	adds	r3, r6, r3
 800c742:	40dc      	lsrs	r4, r3
 800c744:	4320      	orrs	r0, r4
 800c746:	f7f6 fead 	bl	80034a4 <__aeabi_ui2d>
 800c74a:	2201      	movs	r2, #1
 800c74c:	4b62      	ldr	r3, [pc, #392]	@ (800c8d8 <_dtoa_r+0x394>)
 800c74e:	1e77      	subs	r7, r6, #1
 800c750:	18cb      	adds	r3, r1, r3
 800c752:	9218      	str	r2, [sp, #96]	@ 0x60
 800c754:	e776      	b.n	800c644 <_dtoa_r+0x100>
 800c756:	2320      	movs	r3, #32
 800c758:	0020      	movs	r0, r4
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	4098      	lsls	r0, r3
 800c75e:	e7f2      	b.n	800c746 <_dtoa_r+0x202>
 800c760:	9015      	str	r0, [sp, #84]	@ 0x54
 800c762:	e7ba      	b.n	800c6da <_dtoa_r+0x196>
 800c764:	920d      	str	r2, [sp, #52]	@ 0x34
 800c766:	e7c3      	b.n	800c6f0 <_dtoa_r+0x1ac>
 800c768:	9b06      	ldr	r3, [sp, #24]
 800c76a:	9a04      	ldr	r2, [sp, #16]
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	9306      	str	r3, [sp, #24]
 800c770:	4253      	negs	r3, r2
 800c772:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c774:	2300      	movs	r3, #0
 800c776:	9314      	str	r3, [sp, #80]	@ 0x50
 800c778:	e7c5      	b.n	800c706 <_dtoa_r+0x1c2>
 800c77a:	2301      	movs	r3, #1
 800c77c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c77e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c780:	4694      	mov	ip, r2
 800c782:	9b04      	ldr	r3, [sp, #16]
 800c784:	4463      	add	r3, ip
 800c786:	930e      	str	r3, [sp, #56]	@ 0x38
 800c788:	3301      	adds	r3, #1
 800c78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dc08      	bgt.n	800c7a2 <_dtoa_r+0x25e>
 800c790:	2301      	movs	r3, #1
 800c792:	e006      	b.n	800c7a2 <_dtoa_r+0x25e>
 800c794:	2301      	movs	r3, #1
 800c796:	9310      	str	r3, [sp, #64]	@ 0x40
 800c798:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd28      	ble.n	800c7f0 <_dtoa_r+0x2ac>
 800c79e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a2:	9a03      	ldr	r2, [sp, #12]
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	69d0      	ldr	r0, [r2, #28]
 800c7a8:	2204      	movs	r2, #4
 800c7aa:	0015      	movs	r5, r2
 800c7ac:	3514      	adds	r5, #20
 800c7ae:	429d      	cmp	r5, r3
 800c7b0:	d923      	bls.n	800c7fa <_dtoa_r+0x2b6>
 800c7b2:	6041      	str	r1, [r0, #4]
 800c7b4:	9803      	ldr	r0, [sp, #12]
 800c7b6:	f000 fdbb 	bl	800d330 <_Balloc>
 800c7ba:	9008      	str	r0, [sp, #32]
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d11f      	bne.n	800c800 <_dtoa_r+0x2bc>
 800c7c0:	21b0      	movs	r1, #176	@ 0xb0
 800c7c2:	4b46      	ldr	r3, [pc, #280]	@ (800c8dc <_dtoa_r+0x398>)
 800c7c4:	4831      	ldr	r0, [pc, #196]	@ (800c88c <_dtoa_r+0x348>)
 800c7c6:	9a08      	ldr	r2, [sp, #32]
 800c7c8:	31ff      	adds	r1, #255	@ 0xff
 800c7ca:	e6d0      	b.n	800c56e <_dtoa_r+0x2a>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e7e2      	b.n	800c796 <_dtoa_r+0x252>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e7d3      	b.n	800c77c <_dtoa_r+0x238>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9410      	str	r4, [sp, #64]	@ 0x40
 800c7d8:	9322      	str	r3, [sp, #136]	@ 0x88
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	2200      	movs	r2, #0
 800c7de:	930e      	str	r3, [sp, #56]	@ 0x38
 800c7e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7e2:	3313      	adds	r3, #19
 800c7e4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c7e6:	e7dc      	b.n	800c7a2 <_dtoa_r+0x25e>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ec:	3b02      	subs	r3, #2
 800c7ee:	e7f5      	b.n	800c7dc <_dtoa_r+0x298>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	001a      	movs	r2, r3
 800c7f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c7f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7f8:	e7f4      	b.n	800c7e4 <_dtoa_r+0x2a0>
 800c7fa:	3101      	adds	r1, #1
 800c7fc:	0052      	lsls	r2, r2, #1
 800c7fe:	e7d4      	b.n	800c7aa <_dtoa_r+0x266>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	9a08      	ldr	r2, [sp, #32]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c80a:	2b0e      	cmp	r3, #14
 800c80c:	d900      	bls.n	800c810 <_dtoa_r+0x2cc>
 800c80e:	e0d6      	b.n	800c9be <_dtoa_r+0x47a>
 800c810:	2c00      	cmp	r4, #0
 800c812:	d100      	bne.n	800c816 <_dtoa_r+0x2d2>
 800c814:	e0d3      	b.n	800c9be <_dtoa_r+0x47a>
 800c816:	9b04      	ldr	r3, [sp, #16]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dd63      	ble.n	800c8e4 <_dtoa_r+0x3a0>
 800c81c:	210f      	movs	r1, #15
 800c81e:	9a04      	ldr	r2, [sp, #16]
 800c820:	4b2a      	ldr	r3, [pc, #168]	@ (800c8cc <_dtoa_r+0x388>)
 800c822:	400a      	ands	r2, r1
 800c824:	00d2      	lsls	r2, r2, #3
 800c826:	189b      	adds	r3, r3, r2
 800c828:	681e      	ldr	r6, [r3, #0]
 800c82a:	685f      	ldr	r7, [r3, #4]
 800c82c:	9b04      	ldr	r3, [sp, #16]
 800c82e:	2402      	movs	r4, #2
 800c830:	111d      	asrs	r5, r3, #4
 800c832:	05db      	lsls	r3, r3, #23
 800c834:	d50a      	bpl.n	800c84c <_dtoa_r+0x308>
 800c836:	4b2a      	ldr	r3, [pc, #168]	@ (800c8e0 <_dtoa_r+0x39c>)
 800c838:	400d      	ands	r5, r1
 800c83a:	6a1a      	ldr	r2, [r3, #32]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c840:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c842:	f7f5 fa79 	bl	8001d38 <__aeabi_ddiv>
 800c846:	900a      	str	r0, [sp, #40]	@ 0x28
 800c848:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c84a:	3401      	adds	r4, #1
 800c84c:	4b24      	ldr	r3, [pc, #144]	@ (800c8e0 <_dtoa_r+0x39c>)
 800c84e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c850:	2d00      	cmp	r5, #0
 800c852:	d108      	bne.n	800c866 <_dtoa_r+0x322>
 800c854:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c856:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c858:	0032      	movs	r2, r6
 800c85a:	003b      	movs	r3, r7
 800c85c:	f7f5 fa6c 	bl	8001d38 <__aeabi_ddiv>
 800c860:	900a      	str	r0, [sp, #40]	@ 0x28
 800c862:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c864:	e059      	b.n	800c91a <_dtoa_r+0x3d6>
 800c866:	2301      	movs	r3, #1
 800c868:	421d      	tst	r5, r3
 800c86a:	d009      	beq.n	800c880 <_dtoa_r+0x33c>
 800c86c:	18e4      	adds	r4, r4, r3
 800c86e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c870:	0030      	movs	r0, r6
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	0039      	movs	r1, r7
 800c878:	f7f5 fe98 	bl	80025ac <__aeabi_dmul>
 800c87c:	0006      	movs	r6, r0
 800c87e:	000f      	movs	r7, r1
 800c880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c882:	106d      	asrs	r5, r5, #1
 800c884:	3308      	adds	r3, #8
 800c886:	e7e2      	b.n	800c84e <_dtoa_r+0x30a>
 800c888:	0800e955 	.word	0x0800e955
 800c88c:	0800e96c 	.word	0x0800e96c
 800c890:	7ff00000 	.word	0x7ff00000
 800c894:	0000270f 	.word	0x0000270f
 800c898:	0800e951 	.word	0x0800e951
 800c89c:	0800e954 	.word	0x0800e954
 800c8a0:	0800e925 	.word	0x0800e925
 800c8a4:	0800e924 	.word	0x0800e924
 800c8a8:	3ff00000 	.word	0x3ff00000
 800c8ac:	fffffc01 	.word	0xfffffc01
 800c8b0:	3ff80000 	.word	0x3ff80000
 800c8b4:	636f4361 	.word	0x636f4361
 800c8b8:	3fd287a7 	.word	0x3fd287a7
 800c8bc:	8b60c8b3 	.word	0x8b60c8b3
 800c8c0:	3fc68a28 	.word	0x3fc68a28
 800c8c4:	509f79fb 	.word	0x509f79fb
 800c8c8:	3fd34413 	.word	0x3fd34413
 800c8cc:	0800eac0 	.word	0x0800eac0
 800c8d0:	00000432 	.word	0x00000432
 800c8d4:	00000412 	.word	0x00000412
 800c8d8:	fe100000 	.word	0xfe100000
 800c8dc:	0800e9c4 	.word	0x0800e9c4
 800c8e0:	0800ea98 	.word	0x0800ea98
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	2402      	movs	r4, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d016      	beq.n	800c91a <_dtoa_r+0x3d6>
 800c8ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c8ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c8f0:	220f      	movs	r2, #15
 800c8f2:	425d      	negs	r5, r3
 800c8f4:	402a      	ands	r2, r5
 800c8f6:	4bd5      	ldr	r3, [pc, #852]	@ (800cc4c <_dtoa_r+0x708>)
 800c8f8:	00d2      	lsls	r2, r2, #3
 800c8fa:	189b      	adds	r3, r3, r2
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	f7f5 fe54 	bl	80025ac <__aeabi_dmul>
 800c904:	2701      	movs	r7, #1
 800c906:	2300      	movs	r3, #0
 800c908:	900a      	str	r0, [sp, #40]	@ 0x28
 800c90a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c90c:	4ed0      	ldr	r6, [pc, #832]	@ (800cc50 <_dtoa_r+0x70c>)
 800c90e:	112d      	asrs	r5, r5, #4
 800c910:	2d00      	cmp	r5, #0
 800c912:	d000      	beq.n	800c916 <_dtoa_r+0x3d2>
 800c914:	e095      	b.n	800ca42 <_dtoa_r+0x4fe>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1a2      	bne.n	800c860 <_dtoa_r+0x31c>
 800c91a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c91c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c91e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c920:	2b00      	cmp	r3, #0
 800c922:	d100      	bne.n	800c926 <_dtoa_r+0x3e2>
 800c924:	e098      	b.n	800ca58 <_dtoa_r+0x514>
 800c926:	2200      	movs	r2, #0
 800c928:	0030      	movs	r0, r6
 800c92a:	0039      	movs	r1, r7
 800c92c:	4bc9      	ldr	r3, [pc, #804]	@ (800cc54 <_dtoa_r+0x710>)
 800c92e:	f7f3 fd8f 	bl	8000450 <__aeabi_dcmplt>
 800c932:	2800      	cmp	r0, #0
 800c934:	d100      	bne.n	800c938 <_dtoa_r+0x3f4>
 800c936:	e08f      	b.n	800ca58 <_dtoa_r+0x514>
 800c938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d100      	bne.n	800c940 <_dtoa_r+0x3fc>
 800c93e:	e08b      	b.n	800ca58 <_dtoa_r+0x514>
 800c940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd37      	ble.n	800c9b6 <_dtoa_r+0x472>
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	2200      	movs	r2, #0
 800c94a:	3b01      	subs	r3, #1
 800c94c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c94e:	0030      	movs	r0, r6
 800c950:	4bc1      	ldr	r3, [pc, #772]	@ (800cc58 <_dtoa_r+0x714>)
 800c952:	0039      	movs	r1, r7
 800c954:	f7f5 fe2a 	bl	80025ac <__aeabi_dmul>
 800c958:	900a      	str	r0, [sp, #40]	@ 0x28
 800c95a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c95e:	3401      	adds	r4, #1
 800c960:	0020      	movs	r0, r4
 800c962:	9311      	str	r3, [sp, #68]	@ 0x44
 800c964:	f7f6 fd70 	bl	8003448 <__aeabi_i2d>
 800c968:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96c:	f7f5 fe1e 	bl	80025ac <__aeabi_dmul>
 800c970:	4bba      	ldr	r3, [pc, #744]	@ (800cc5c <_dtoa_r+0x718>)
 800c972:	2200      	movs	r2, #0
 800c974:	f7f4 fe1a 	bl	80015ac <__aeabi_dadd>
 800c978:	4bb9      	ldr	r3, [pc, #740]	@ (800cc60 <_dtoa_r+0x71c>)
 800c97a:	0006      	movs	r6, r0
 800c97c:	18cf      	adds	r7, r1, r3
 800c97e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c980:	2b00      	cmp	r3, #0
 800c982:	d16d      	bne.n	800ca60 <_dtoa_r+0x51c>
 800c984:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c986:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c988:	2200      	movs	r2, #0
 800c98a:	4bb6      	ldr	r3, [pc, #728]	@ (800cc64 <_dtoa_r+0x720>)
 800c98c:	f7f6 f8f4 	bl	8002b78 <__aeabi_dsub>
 800c990:	0032      	movs	r2, r6
 800c992:	003b      	movs	r3, r7
 800c994:	0004      	movs	r4, r0
 800c996:	000d      	movs	r5, r1
 800c998:	f7f3 fd6e 	bl	8000478 <__aeabi_dcmpgt>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d000      	beq.n	800c9a2 <_dtoa_r+0x45e>
 800c9a0:	e2b6      	b.n	800cf10 <_dtoa_r+0x9cc>
 800c9a2:	2180      	movs	r1, #128	@ 0x80
 800c9a4:	0609      	lsls	r1, r1, #24
 800c9a6:	187b      	adds	r3, r7, r1
 800c9a8:	0032      	movs	r2, r6
 800c9aa:	0020      	movs	r0, r4
 800c9ac:	0029      	movs	r1, r5
 800c9ae:	f7f3 fd4f 	bl	8000450 <__aeabi_dcmplt>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d128      	bne.n	800ca08 <_dtoa_r+0x4c4>
 800c9b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9b8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c9ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	da00      	bge.n	800c9c6 <_dtoa_r+0x482>
 800c9c4:	e174      	b.n	800ccb0 <_dtoa_r+0x76c>
 800c9c6:	9a04      	ldr	r2, [sp, #16]
 800c9c8:	2a0e      	cmp	r2, #14
 800c9ca:	dd00      	ble.n	800c9ce <_dtoa_r+0x48a>
 800c9cc:	e170      	b.n	800ccb0 <_dtoa_r+0x76c>
 800c9ce:	4b9f      	ldr	r3, [pc, #636]	@ (800cc4c <_dtoa_r+0x708>)
 800c9d0:	00d2      	lsls	r2, r2, #3
 800c9d2:	189b      	adds	r3, r3, r2
 800c9d4:	685c      	ldr	r4, [r3, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	9306      	str	r3, [sp, #24]
 800c9da:	9407      	str	r4, [sp, #28]
 800c9dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	db00      	blt.n	800c9e4 <_dtoa_r+0x4a0>
 800c9e2:	e0e7      	b.n	800cbb4 <_dtoa_r+0x670>
 800c9e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dd00      	ble.n	800c9ec <_dtoa_r+0x4a8>
 800c9ea:	e0e3      	b.n	800cbb4 <_dtoa_r+0x670>
 800c9ec:	d10c      	bne.n	800ca08 <_dtoa_r+0x4c4>
 800c9ee:	9806      	ldr	r0, [sp, #24]
 800c9f0:	9907      	ldr	r1, [sp, #28]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4b9b      	ldr	r3, [pc, #620]	@ (800cc64 <_dtoa_r+0x720>)
 800c9f6:	f7f5 fdd9 	bl	80025ac <__aeabi_dmul>
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9fe:	f7f3 fd45 	bl	800048c <__aeabi_dcmpge>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d100      	bne.n	800ca08 <_dtoa_r+0x4c4>
 800ca06:	e286      	b.n	800cf16 <_dtoa_r+0x9d2>
 800ca08:	2600      	movs	r6, #0
 800ca0a:	0037      	movs	r7, r6
 800ca0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca0e:	9c08      	ldr	r4, [sp, #32]
 800ca10:	43db      	mvns	r3, r3
 800ca12:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca14:	9704      	str	r7, [sp, #16]
 800ca16:	2700      	movs	r7, #0
 800ca18:	0031      	movs	r1, r6
 800ca1a:	9803      	ldr	r0, [sp, #12]
 800ca1c:	f000 fccc 	bl	800d3b8 <_Bfree>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d100      	bne.n	800ca28 <_dtoa_r+0x4e4>
 800ca26:	e0bb      	b.n	800cba0 <_dtoa_r+0x65c>
 800ca28:	2f00      	cmp	r7, #0
 800ca2a:	d005      	beq.n	800ca38 <_dtoa_r+0x4f4>
 800ca2c:	429f      	cmp	r7, r3
 800ca2e:	d003      	beq.n	800ca38 <_dtoa_r+0x4f4>
 800ca30:	0039      	movs	r1, r7
 800ca32:	9803      	ldr	r0, [sp, #12]
 800ca34:	f000 fcc0 	bl	800d3b8 <_Bfree>
 800ca38:	9904      	ldr	r1, [sp, #16]
 800ca3a:	9803      	ldr	r0, [sp, #12]
 800ca3c:	f000 fcbc 	bl	800d3b8 <_Bfree>
 800ca40:	e0ae      	b.n	800cba0 <_dtoa_r+0x65c>
 800ca42:	423d      	tst	r5, r7
 800ca44:	d005      	beq.n	800ca52 <_dtoa_r+0x50e>
 800ca46:	6832      	ldr	r2, [r6, #0]
 800ca48:	6873      	ldr	r3, [r6, #4]
 800ca4a:	f7f5 fdaf 	bl	80025ac <__aeabi_dmul>
 800ca4e:	003b      	movs	r3, r7
 800ca50:	3401      	adds	r4, #1
 800ca52:	106d      	asrs	r5, r5, #1
 800ca54:	3608      	adds	r6, #8
 800ca56:	e75b      	b.n	800c910 <_dtoa_r+0x3cc>
 800ca58:	9b04      	ldr	r3, [sp, #16]
 800ca5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5e:	e77f      	b.n	800c960 <_dtoa_r+0x41c>
 800ca60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ca62:	4b7a      	ldr	r3, [pc, #488]	@ (800cc4c <_dtoa_r+0x708>)
 800ca64:	3a01      	subs	r2, #1
 800ca66:	00d2      	lsls	r2, r2, #3
 800ca68:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2900      	cmp	r1, #0
 800ca72:	d04c      	beq.n	800cb0e <_dtoa_r+0x5ca>
 800ca74:	2000      	movs	r0, #0
 800ca76:	497c      	ldr	r1, [pc, #496]	@ (800cc68 <_dtoa_r+0x724>)
 800ca78:	f7f5 f95e 	bl	8001d38 <__aeabi_ddiv>
 800ca7c:	0032      	movs	r2, r6
 800ca7e:	003b      	movs	r3, r7
 800ca80:	f7f6 f87a 	bl	8002b78 <__aeabi_dsub>
 800ca84:	9a08      	ldr	r2, [sp, #32]
 800ca86:	0006      	movs	r6, r0
 800ca88:	4694      	mov	ip, r2
 800ca8a:	000f      	movs	r7, r1
 800ca8c:	9b08      	ldr	r3, [sp, #32]
 800ca8e:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca92:	4463      	add	r3, ip
 800ca94:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca9a:	f7f6 fc99 	bl	80033d0 <__aeabi_d2iz>
 800ca9e:	0005      	movs	r5, r0
 800caa0:	f7f6 fcd2 	bl	8003448 <__aeabi_i2d>
 800caa4:	0002      	movs	r2, r0
 800caa6:	000b      	movs	r3, r1
 800caa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800caaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800caac:	f7f6 f864 	bl	8002b78 <__aeabi_dsub>
 800cab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cab2:	3530      	adds	r5, #48	@ 0x30
 800cab4:	1c5c      	adds	r4, r3, #1
 800cab6:	701d      	strb	r5, [r3, #0]
 800cab8:	0032      	movs	r2, r6
 800caba:	003b      	movs	r3, r7
 800cabc:	900a      	str	r0, [sp, #40]	@ 0x28
 800cabe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cac0:	f7f3 fcc6 	bl	8000450 <__aeabi_dcmplt>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d16b      	bne.n	800cba0 <_dtoa_r+0x65c>
 800cac8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cacc:	2000      	movs	r0, #0
 800cace:	4961      	ldr	r1, [pc, #388]	@ (800cc54 <_dtoa_r+0x710>)
 800cad0:	f7f6 f852 	bl	8002b78 <__aeabi_dsub>
 800cad4:	0032      	movs	r2, r6
 800cad6:	003b      	movs	r3, r7
 800cad8:	f7f3 fcba 	bl	8000450 <__aeabi_dcmplt>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d000      	beq.n	800cae2 <_dtoa_r+0x59e>
 800cae0:	e0c6      	b.n	800cc70 <_dtoa_r+0x72c>
 800cae2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cae4:	42a3      	cmp	r3, r4
 800cae6:	d100      	bne.n	800caea <_dtoa_r+0x5a6>
 800cae8:	e765      	b.n	800c9b6 <_dtoa_r+0x472>
 800caea:	2200      	movs	r2, #0
 800caec:	0030      	movs	r0, r6
 800caee:	0039      	movs	r1, r7
 800caf0:	4b59      	ldr	r3, [pc, #356]	@ (800cc58 <_dtoa_r+0x714>)
 800caf2:	f7f5 fd5b 	bl	80025ac <__aeabi_dmul>
 800caf6:	2200      	movs	r2, #0
 800caf8:	0006      	movs	r6, r0
 800cafa:	000f      	movs	r7, r1
 800cafc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cafe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb00:	4b55      	ldr	r3, [pc, #340]	@ (800cc58 <_dtoa_r+0x714>)
 800cb02:	f7f5 fd53 	bl	80025ac <__aeabi_dmul>
 800cb06:	9416      	str	r4, [sp, #88]	@ 0x58
 800cb08:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb0c:	e7c3      	b.n	800ca96 <_dtoa_r+0x552>
 800cb0e:	0030      	movs	r0, r6
 800cb10:	0039      	movs	r1, r7
 800cb12:	f7f5 fd4b 	bl	80025ac <__aeabi_dmul>
 800cb16:	9d08      	ldr	r5, [sp, #32]
 800cb18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cb1a:	002b      	movs	r3, r5
 800cb1c:	4694      	mov	ip, r2
 800cb1e:	9016      	str	r0, [sp, #88]	@ 0x58
 800cb20:	9117      	str	r1, [sp, #92]	@ 0x5c
 800cb22:	4463      	add	r3, ip
 800cb24:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb2a:	f7f6 fc51 	bl	80033d0 <__aeabi_d2iz>
 800cb2e:	0004      	movs	r4, r0
 800cb30:	f7f6 fc8a 	bl	8003448 <__aeabi_i2d>
 800cb34:	000b      	movs	r3, r1
 800cb36:	0002      	movs	r2, r0
 800cb38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb3c:	f7f6 f81c 	bl	8002b78 <__aeabi_dsub>
 800cb40:	3430      	adds	r4, #48	@ 0x30
 800cb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb44:	702c      	strb	r4, [r5, #0]
 800cb46:	3501      	adds	r5, #1
 800cb48:	0006      	movs	r6, r0
 800cb4a:	000f      	movs	r7, r1
 800cb4c:	42ab      	cmp	r3, r5
 800cb4e:	d12a      	bne.n	800cba6 <_dtoa_r+0x662>
 800cb50:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800cb52:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800cb54:	9b08      	ldr	r3, [sp, #32]
 800cb56:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800cb58:	469c      	mov	ip, r3
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	4b42      	ldr	r3, [pc, #264]	@ (800cc68 <_dtoa_r+0x724>)
 800cb5e:	4464      	add	r4, ip
 800cb60:	f7f4 fd24 	bl	80015ac <__aeabi_dadd>
 800cb64:	0002      	movs	r2, r0
 800cb66:	000b      	movs	r3, r1
 800cb68:	0030      	movs	r0, r6
 800cb6a:	0039      	movs	r1, r7
 800cb6c:	f7f3 fc84 	bl	8000478 <__aeabi_dcmpgt>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d000      	beq.n	800cb76 <_dtoa_r+0x632>
 800cb74:	e07c      	b.n	800cc70 <_dtoa_r+0x72c>
 800cb76:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	493a      	ldr	r1, [pc, #232]	@ (800cc68 <_dtoa_r+0x724>)
 800cb7e:	f7f5 fffb 	bl	8002b78 <__aeabi_dsub>
 800cb82:	0002      	movs	r2, r0
 800cb84:	000b      	movs	r3, r1
 800cb86:	0030      	movs	r0, r6
 800cb88:	0039      	movs	r1, r7
 800cb8a:	f7f3 fc61 	bl	8000450 <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d100      	bne.n	800cb94 <_dtoa_r+0x650>
 800cb92:	e710      	b.n	800c9b6 <_dtoa_r+0x472>
 800cb94:	0023      	movs	r3, r4
 800cb96:	3c01      	subs	r4, #1
 800cb98:	7822      	ldrb	r2, [r4, #0]
 800cb9a:	2a30      	cmp	r2, #48	@ 0x30
 800cb9c:	d0fa      	beq.n	800cb94 <_dtoa_r+0x650>
 800cb9e:	001c      	movs	r4, r3
 800cba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	e042      	b.n	800cc2c <_dtoa_r+0x6e8>
 800cba6:	2200      	movs	r2, #0
 800cba8:	4b2b      	ldr	r3, [pc, #172]	@ (800cc58 <_dtoa_r+0x714>)
 800cbaa:	f7f5 fcff 	bl	80025ac <__aeabi_dmul>
 800cbae:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cbb2:	e7b8      	b.n	800cb26 <_dtoa_r+0x5e2>
 800cbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb6:	9d08      	ldr	r5, [sp, #32]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	195b      	adds	r3, r3, r5
 800cbbc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cbbe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cbc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbc2:	9a06      	ldr	r2, [sp, #24]
 800cbc4:	9b07      	ldr	r3, [sp, #28]
 800cbc6:	0030      	movs	r0, r6
 800cbc8:	0039      	movs	r1, r7
 800cbca:	f7f5 f8b5 	bl	8001d38 <__aeabi_ddiv>
 800cbce:	f7f6 fbff 	bl	80033d0 <__aeabi_d2iz>
 800cbd2:	9009      	str	r0, [sp, #36]	@ 0x24
 800cbd4:	f7f6 fc38 	bl	8003448 <__aeabi_i2d>
 800cbd8:	9a06      	ldr	r2, [sp, #24]
 800cbda:	9b07      	ldr	r3, [sp, #28]
 800cbdc:	f7f5 fce6 	bl	80025ac <__aeabi_dmul>
 800cbe0:	0002      	movs	r2, r0
 800cbe2:	000b      	movs	r3, r1
 800cbe4:	0030      	movs	r0, r6
 800cbe6:	0039      	movs	r1, r7
 800cbe8:	f7f5 ffc6 	bl	8002b78 <__aeabi_dsub>
 800cbec:	002b      	movs	r3, r5
 800cbee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf0:	3501      	adds	r5, #1
 800cbf2:	3230      	adds	r2, #48	@ 0x30
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbf8:	002c      	movs	r4, r5
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d14b      	bne.n	800cc96 <_dtoa_r+0x752>
 800cbfe:	0002      	movs	r2, r0
 800cc00:	000b      	movs	r3, r1
 800cc02:	f7f4 fcd3 	bl	80015ac <__aeabi_dadd>
 800cc06:	9a06      	ldr	r2, [sp, #24]
 800cc08:	9b07      	ldr	r3, [sp, #28]
 800cc0a:	0006      	movs	r6, r0
 800cc0c:	000f      	movs	r7, r1
 800cc0e:	f7f3 fc33 	bl	8000478 <__aeabi_dcmpgt>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d12a      	bne.n	800cc6c <_dtoa_r+0x728>
 800cc16:	9a06      	ldr	r2, [sp, #24]
 800cc18:	9b07      	ldr	r3, [sp, #28]
 800cc1a:	0030      	movs	r0, r6
 800cc1c:	0039      	movs	r1, r7
 800cc1e:	f7f3 fc11 	bl	8000444 <__aeabi_dcmpeq>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d002      	beq.n	800cc2c <_dtoa_r+0x6e8>
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	07dd      	lsls	r5, r3, #31
 800cc2a:	d41f      	bmi.n	800cc6c <_dtoa_r+0x728>
 800cc2c:	9905      	ldr	r1, [sp, #20]
 800cc2e:	9803      	ldr	r0, [sp, #12]
 800cc30:	f000 fbc2 	bl	800d3b8 <_Bfree>
 800cc34:	2300      	movs	r3, #0
 800cc36:	7023      	strb	r3, [r4, #0]
 800cc38:	9b04      	ldr	r3, [sp, #16]
 800cc3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d100      	bne.n	800cc48 <_dtoa_r+0x704>
 800cc46:	e4c7      	b.n	800c5d8 <_dtoa_r+0x94>
 800cc48:	601c      	str	r4, [r3, #0]
 800cc4a:	e4c5      	b.n	800c5d8 <_dtoa_r+0x94>
 800cc4c:	0800eac0 	.word	0x0800eac0
 800cc50:	0800ea98 	.word	0x0800ea98
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	40240000 	.word	0x40240000
 800cc5c:	401c0000 	.word	0x401c0000
 800cc60:	fcc00000 	.word	0xfcc00000
 800cc64:	40140000 	.word	0x40140000
 800cc68:	3fe00000 	.word	0x3fe00000
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc70:	0023      	movs	r3, r4
 800cc72:	001c      	movs	r4, r3
 800cc74:	3b01      	subs	r3, #1
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	2a39      	cmp	r2, #57	@ 0x39
 800cc7a:	d108      	bne.n	800cc8e <_dtoa_r+0x74a>
 800cc7c:	9a08      	ldr	r2, [sp, #32]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d1f7      	bne.n	800cc72 <_dtoa_r+0x72e>
 800cc82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cc84:	9908      	ldr	r1, [sp, #32]
 800cc86:	3201      	adds	r2, #1
 800cc88:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc8a:	2230      	movs	r2, #48	@ 0x30
 800cc8c:	700a      	strb	r2, [r1, #0]
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	3201      	adds	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e784      	b.n	800cba0 <_dtoa_r+0x65c>
 800cc96:	2200      	movs	r2, #0
 800cc98:	4bc6      	ldr	r3, [pc, #792]	@ (800cfb4 <_dtoa_r+0xa70>)
 800cc9a:	f7f5 fc87 	bl	80025ac <__aeabi_dmul>
 800cc9e:	2200      	movs	r2, #0
 800cca0:	2300      	movs	r3, #0
 800cca2:	0006      	movs	r6, r0
 800cca4:	000f      	movs	r7, r1
 800cca6:	f7f3 fbcd 	bl	8000444 <__aeabi_dcmpeq>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d089      	beq.n	800cbc2 <_dtoa_r+0x67e>
 800ccae:	e7bd      	b.n	800cc2c <_dtoa_r+0x6e8>
 800ccb0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ccb2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ccb4:	9c06      	ldr	r4, [sp, #24]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d014      	beq.n	800cce4 <_dtoa_r+0x7a0>
 800ccba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ccbc:	2a01      	cmp	r2, #1
 800ccbe:	dd00      	ble.n	800ccc2 <_dtoa_r+0x77e>
 800ccc0:	e0e4      	b.n	800ce8c <_dtoa_r+0x948>
 800ccc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ccc4:	2a00      	cmp	r2, #0
 800ccc6:	d100      	bne.n	800ccca <_dtoa_r+0x786>
 800ccc8:	e0da      	b.n	800ce80 <_dtoa_r+0x93c>
 800ccca:	4abb      	ldr	r2, [pc, #748]	@ (800cfb8 <_dtoa_r+0xa74>)
 800cccc:	189b      	adds	r3, r3, r2
 800ccce:	9a06      	ldr	r2, [sp, #24]
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	18d2      	adds	r2, r2, r3
 800ccd4:	9206      	str	r2, [sp, #24]
 800ccd6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ccd8:	9803      	ldr	r0, [sp, #12]
 800ccda:	18d3      	adds	r3, r2, r3
 800ccdc:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccde:	f000 fc23 	bl	800d528 <__i2b>
 800cce2:	0007      	movs	r7, r0
 800cce4:	2c00      	cmp	r4, #0
 800cce6:	d00e      	beq.n	800cd06 <_dtoa_r+0x7c2>
 800cce8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dd0b      	ble.n	800cd06 <_dtoa_r+0x7c2>
 800ccee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ccf0:	0023      	movs	r3, r4
 800ccf2:	4294      	cmp	r4, r2
 800ccf4:	dd00      	ble.n	800ccf8 <_dtoa_r+0x7b4>
 800ccf6:	0013      	movs	r3, r2
 800ccf8:	9a06      	ldr	r2, [sp, #24]
 800ccfa:	1ae4      	subs	r4, r4, r3
 800ccfc:	1ad2      	subs	r2, r2, r3
 800ccfe:	9206      	str	r2, [sp, #24]
 800cd00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d021      	beq.n	800cd50 <_dtoa_r+0x80c>
 800cd0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d100      	bne.n	800cd14 <_dtoa_r+0x7d0>
 800cd12:	e0d3      	b.n	800cebc <_dtoa_r+0x978>
 800cd14:	9e05      	ldr	r6, [sp, #20]
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	d014      	beq.n	800cd44 <_dtoa_r+0x800>
 800cd1a:	0039      	movs	r1, r7
 800cd1c:	002a      	movs	r2, r5
 800cd1e:	9803      	ldr	r0, [sp, #12]
 800cd20:	f000 fcc4 	bl	800d6ac <__pow5mult>
 800cd24:	9a05      	ldr	r2, [sp, #20]
 800cd26:	0001      	movs	r1, r0
 800cd28:	0007      	movs	r7, r0
 800cd2a:	9803      	ldr	r0, [sp, #12]
 800cd2c:	f000 fc14 	bl	800d558 <__multiply>
 800cd30:	0006      	movs	r6, r0
 800cd32:	9905      	ldr	r1, [sp, #20]
 800cd34:	9803      	ldr	r0, [sp, #12]
 800cd36:	f000 fb3f 	bl	800d3b8 <_Bfree>
 800cd3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd3c:	9605      	str	r6, [sp, #20]
 800cd3e:	1b5b      	subs	r3, r3, r5
 800cd40:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd42:	d005      	beq.n	800cd50 <_dtoa_r+0x80c>
 800cd44:	0031      	movs	r1, r6
 800cd46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd48:	9803      	ldr	r0, [sp, #12]
 800cd4a:	f000 fcaf 	bl	800d6ac <__pow5mult>
 800cd4e:	9005      	str	r0, [sp, #20]
 800cd50:	2101      	movs	r1, #1
 800cd52:	9803      	ldr	r0, [sp, #12]
 800cd54:	f000 fbe8 	bl	800d528 <__i2b>
 800cd58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd5a:	0006      	movs	r6, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d100      	bne.n	800cd62 <_dtoa_r+0x81e>
 800cd60:	e1bc      	b.n	800d0dc <_dtoa_r+0xb98>
 800cd62:	001a      	movs	r2, r3
 800cd64:	0001      	movs	r1, r0
 800cd66:	9803      	ldr	r0, [sp, #12]
 800cd68:	f000 fca0 	bl	800d6ac <__pow5mult>
 800cd6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd6e:	0006      	movs	r6, r0
 800cd70:	2500      	movs	r5, #0
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	dc16      	bgt.n	800cda4 <_dtoa_r+0x860>
 800cd76:	2500      	movs	r5, #0
 800cd78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd7a:	42ab      	cmp	r3, r5
 800cd7c:	d10e      	bne.n	800cd9c <_dtoa_r+0x858>
 800cd7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd80:	031b      	lsls	r3, r3, #12
 800cd82:	42ab      	cmp	r3, r5
 800cd84:	d10a      	bne.n	800cd9c <_dtoa_r+0x858>
 800cd86:	4b8d      	ldr	r3, [pc, #564]	@ (800cfbc <_dtoa_r+0xa78>)
 800cd88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd8a:	4213      	tst	r3, r2
 800cd8c:	d006      	beq.n	800cd9c <_dtoa_r+0x858>
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	3501      	adds	r5, #1
 800cd92:	3301      	adds	r3, #1
 800cd94:	9306      	str	r3, [sp, #24]
 800cd96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd98:	3301      	adds	r3, #1
 800cd9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800cd9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd9e:	2001      	movs	r0, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d008      	beq.n	800cdb6 <_dtoa_r+0x872>
 800cda4:	6933      	ldr	r3, [r6, #16]
 800cda6:	3303      	adds	r3, #3
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	18f3      	adds	r3, r6, r3
 800cdac:	6858      	ldr	r0, [r3, #4]
 800cdae:	f000 fb6b 	bl	800d488 <__hi0bits>
 800cdb2:	2320      	movs	r3, #32
 800cdb4:	1a18      	subs	r0, r3, r0
 800cdb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdb8:	1818      	adds	r0, r3, r0
 800cdba:	0002      	movs	r2, r0
 800cdbc:	231f      	movs	r3, #31
 800cdbe:	401a      	ands	r2, r3
 800cdc0:	4218      	tst	r0, r3
 800cdc2:	d100      	bne.n	800cdc6 <_dtoa_r+0x882>
 800cdc4:	e081      	b.n	800ceca <_dtoa_r+0x986>
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	2b04      	cmp	r3, #4
 800cdcc:	dd79      	ble.n	800cec2 <_dtoa_r+0x97e>
 800cdce:	231c      	movs	r3, #28
 800cdd0:	1a9b      	subs	r3, r3, r2
 800cdd2:	9a06      	ldr	r2, [sp, #24]
 800cdd4:	18e4      	adds	r4, r4, r3
 800cdd6:	18d2      	adds	r2, r2, r3
 800cdd8:	9206      	str	r2, [sp, #24]
 800cdda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cddc:	18d3      	adds	r3, r2, r3
 800cdde:	930d      	str	r3, [sp, #52]	@ 0x34
 800cde0:	9b06      	ldr	r3, [sp, #24]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	dd05      	ble.n	800cdf2 <_dtoa_r+0x8ae>
 800cde6:	001a      	movs	r2, r3
 800cde8:	9905      	ldr	r1, [sp, #20]
 800cdea:	9803      	ldr	r0, [sp, #12]
 800cdec:	f000 fcba 	bl	800d764 <__lshift>
 800cdf0:	9005      	str	r0, [sp, #20]
 800cdf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd05      	ble.n	800ce04 <_dtoa_r+0x8c0>
 800cdf8:	0031      	movs	r1, r6
 800cdfa:	001a      	movs	r2, r3
 800cdfc:	9803      	ldr	r0, [sp, #12]
 800cdfe:	f000 fcb1 	bl	800d764 <__lshift>
 800ce02:	0006      	movs	r6, r0
 800ce04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d061      	beq.n	800cece <_dtoa_r+0x98a>
 800ce0a:	0031      	movs	r1, r6
 800ce0c:	9805      	ldr	r0, [sp, #20]
 800ce0e:	f000 fd15 	bl	800d83c <__mcmp>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	da5b      	bge.n	800cece <_dtoa_r+0x98a>
 800ce16:	9b04      	ldr	r3, [sp, #16]
 800ce18:	220a      	movs	r2, #10
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce1e:	9905      	ldr	r1, [sp, #20]
 800ce20:	2300      	movs	r3, #0
 800ce22:	9803      	ldr	r0, [sp, #12]
 800ce24:	f000 faec 	bl	800d400 <__multadd>
 800ce28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce2a:	9005      	str	r0, [sp, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d100      	bne.n	800ce32 <_dtoa_r+0x8ee>
 800ce30:	e15b      	b.n	800d0ea <_dtoa_r+0xba6>
 800ce32:	2300      	movs	r3, #0
 800ce34:	0039      	movs	r1, r7
 800ce36:	220a      	movs	r2, #10
 800ce38:	9803      	ldr	r0, [sp, #12]
 800ce3a:	f000 fae1 	bl	800d400 <__multadd>
 800ce3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce40:	0007      	movs	r7, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dc4d      	bgt.n	800cee2 <_dtoa_r+0x99e>
 800ce46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	dd46      	ble.n	800ceda <_dtoa_r+0x996>
 800ce4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d000      	beq.n	800ce54 <_dtoa_r+0x910>
 800ce52:	e5db      	b.n	800ca0c <_dtoa_r+0x4c8>
 800ce54:	0031      	movs	r1, r6
 800ce56:	2205      	movs	r2, #5
 800ce58:	9803      	ldr	r0, [sp, #12]
 800ce5a:	f000 fad1 	bl	800d400 <__multadd>
 800ce5e:	0006      	movs	r6, r0
 800ce60:	0001      	movs	r1, r0
 800ce62:	9805      	ldr	r0, [sp, #20]
 800ce64:	f000 fcea 	bl	800d83c <__mcmp>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	dc00      	bgt.n	800ce6e <_dtoa_r+0x92a>
 800ce6c:	e5ce      	b.n	800ca0c <_dtoa_r+0x4c8>
 800ce6e:	9b08      	ldr	r3, [sp, #32]
 800ce70:	9a08      	ldr	r2, [sp, #32]
 800ce72:	1c5c      	adds	r4, r3, #1
 800ce74:	2331      	movs	r3, #49	@ 0x31
 800ce76:	7013      	strb	r3, [r2, #0]
 800ce78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce7e:	e5c9      	b.n	800ca14 <_dtoa_r+0x4d0>
 800ce80:	2336      	movs	r3, #54	@ 0x36
 800ce82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce84:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ce86:	1a9b      	subs	r3, r3, r2
 800ce88:	9c06      	ldr	r4, [sp, #24]
 800ce8a:	e720      	b.n	800ccce <_dtoa_r+0x78a>
 800ce8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8e:	1e5d      	subs	r5, r3, #1
 800ce90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce92:	42ab      	cmp	r3, r5
 800ce94:	db08      	blt.n	800cea8 <_dtoa_r+0x964>
 800ce96:	1b5d      	subs	r5, r3, r5
 800ce98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	daf4      	bge.n	800ce88 <_dtoa_r+0x944>
 800ce9e:	9b06      	ldr	r3, [sp, #24]
 800cea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cea2:	1a9c      	subs	r4, r3, r2
 800cea4:	2300      	movs	r3, #0
 800cea6:	e712      	b.n	800ccce <_dtoa_r+0x78a>
 800cea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceaa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ceac:	1aeb      	subs	r3, r5, r3
 800ceae:	18d3      	adds	r3, r2, r3
 800ceb0:	9314      	str	r3, [sp, #80]	@ 0x50
 800ceb2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ceb4:	9c06      	ldr	r4, [sp, #24]
 800ceb6:	2500      	movs	r5, #0
 800ceb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceba:	e708      	b.n	800ccce <_dtoa_r+0x78a>
 800cebc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cebe:	9905      	ldr	r1, [sp, #20]
 800cec0:	e742      	b.n	800cd48 <_dtoa_r+0x804>
 800cec2:	2b04      	cmp	r3, #4
 800cec4:	d08c      	beq.n	800cde0 <_dtoa_r+0x89c>
 800cec6:	331c      	adds	r3, #28
 800cec8:	e783      	b.n	800cdd2 <_dtoa_r+0x88e>
 800ceca:	0013      	movs	r3, r2
 800cecc:	e7fb      	b.n	800cec6 <_dtoa_r+0x982>
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	930c      	str	r3, [sp, #48]	@ 0x30
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	930e      	str	r3, [sp, #56]	@ 0x38
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	ddb5      	ble.n	800ce46 <_dtoa_r+0x902>
 800ceda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d100      	bne.n	800cee2 <_dtoa_r+0x99e>
 800cee0:	e107      	b.n	800d0f2 <_dtoa_r+0xbae>
 800cee2:	2c00      	cmp	r4, #0
 800cee4:	dd05      	ble.n	800cef2 <_dtoa_r+0x9ae>
 800cee6:	0039      	movs	r1, r7
 800cee8:	0022      	movs	r2, r4
 800ceea:	9803      	ldr	r0, [sp, #12]
 800ceec:	f000 fc3a 	bl	800d764 <__lshift>
 800cef0:	0007      	movs	r7, r0
 800cef2:	9704      	str	r7, [sp, #16]
 800cef4:	2d00      	cmp	r5, #0
 800cef6:	d020      	beq.n	800cf3a <_dtoa_r+0x9f6>
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	9803      	ldr	r0, [sp, #12]
 800cefc:	f000 fa18 	bl	800d330 <_Balloc>
 800cf00:	1e04      	subs	r4, r0, #0
 800cf02:	d10c      	bne.n	800cf1e <_dtoa_r+0x9da>
 800cf04:	0022      	movs	r2, r4
 800cf06:	4b2e      	ldr	r3, [pc, #184]	@ (800cfc0 <_dtoa_r+0xa7c>)
 800cf08:	482e      	ldr	r0, [pc, #184]	@ (800cfc4 <_dtoa_r+0xa80>)
 800cf0a:	492f      	ldr	r1, [pc, #188]	@ (800cfc8 <_dtoa_r+0xa84>)
 800cf0c:	f7ff fb2f 	bl	800c56e <_dtoa_r+0x2a>
 800cf10:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800cf12:	0037      	movs	r7, r6
 800cf14:	e7ab      	b.n	800ce6e <_dtoa_r+0x92a>
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800cf1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf1c:	e7f9      	b.n	800cf12 <_dtoa_r+0x9ce>
 800cf1e:	0039      	movs	r1, r7
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	310c      	adds	r1, #12
 800cf24:	3202      	adds	r2, #2
 800cf26:	0092      	lsls	r2, r2, #2
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f000 ffd1 	bl	800ded0 <memcpy>
 800cf2e:	2201      	movs	r2, #1
 800cf30:	0021      	movs	r1, r4
 800cf32:	9803      	ldr	r0, [sp, #12]
 800cf34:	f000 fc16 	bl	800d764 <__lshift>
 800cf38:	9004      	str	r0, [sp, #16]
 800cf3a:	9b08      	ldr	r3, [sp, #32]
 800cf3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf3e:	9306      	str	r3, [sp, #24]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	189b      	adds	r3, r3, r2
 800cf44:	2201      	movs	r2, #1
 800cf46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800cf4e:	0031      	movs	r1, r6
 800cf50:	9805      	ldr	r0, [sp, #20]
 800cf52:	f7ff fa71 	bl	800c438 <quorem>
 800cf56:	0039      	movs	r1, r7
 800cf58:	0005      	movs	r5, r0
 800cf5a:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf5c:	9805      	ldr	r0, [sp, #20]
 800cf5e:	f000 fc6d 	bl	800d83c <__mcmp>
 800cf62:	9a04      	ldr	r2, [sp, #16]
 800cf64:	900d      	str	r0, [sp, #52]	@ 0x34
 800cf66:	0031      	movs	r1, r6
 800cf68:	9803      	ldr	r0, [sp, #12]
 800cf6a:	f000 fc83 	bl	800d874 <__mdiff>
 800cf6e:	2201      	movs	r2, #1
 800cf70:	68c3      	ldr	r3, [r0, #12]
 800cf72:	0004      	movs	r4, r0
 800cf74:	3530      	adds	r5, #48	@ 0x30
 800cf76:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d104      	bne.n	800cf86 <_dtoa_r+0xa42>
 800cf7c:	0001      	movs	r1, r0
 800cf7e:	9805      	ldr	r0, [sp, #20]
 800cf80:	f000 fc5c 	bl	800d83c <__mcmp>
 800cf84:	9009      	str	r0, [sp, #36]	@ 0x24
 800cf86:	0021      	movs	r1, r4
 800cf88:	9803      	ldr	r0, [sp, #12]
 800cf8a:	f000 fa15 	bl	800d3b8 <_Bfree>
 800cf8e:	9b06      	ldr	r3, [sp, #24]
 800cf90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cf92:	1c5c      	adds	r4, r3, #1
 800cf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf96:	4313      	orrs	r3, r2
 800cf98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	d116      	bne.n	800cfcc <_dtoa_r+0xa88>
 800cf9e:	2d39      	cmp	r5, #57	@ 0x39
 800cfa0:	d02f      	beq.n	800d002 <_dtoa_r+0xabe>
 800cfa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd01      	ble.n	800cfac <_dtoa_r+0xa68>
 800cfa8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800cfaa:	3531      	adds	r5, #49	@ 0x31
 800cfac:	9b06      	ldr	r3, [sp, #24]
 800cfae:	701d      	strb	r5, [r3, #0]
 800cfb0:	e532      	b.n	800ca18 <_dtoa_r+0x4d4>
 800cfb2:	46c0      	nop			@ (mov r8, r8)
 800cfb4:	40240000 	.word	0x40240000
 800cfb8:	00000433 	.word	0x00000433
 800cfbc:	7ff00000 	.word	0x7ff00000
 800cfc0:	0800e9c4 	.word	0x0800e9c4
 800cfc4:	0800e96c 	.word	0x0800e96c
 800cfc8:	000002ef 	.word	0x000002ef
 800cfcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	db04      	blt.n	800cfdc <_dtoa_r+0xa98>
 800cfd2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	d11e      	bne.n	800d01a <_dtoa_r+0xad6>
 800cfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dde4      	ble.n	800cfac <_dtoa_r+0xa68>
 800cfe2:	9905      	ldr	r1, [sp, #20]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	9803      	ldr	r0, [sp, #12]
 800cfe8:	f000 fbbc 	bl	800d764 <__lshift>
 800cfec:	0031      	movs	r1, r6
 800cfee:	9005      	str	r0, [sp, #20]
 800cff0:	f000 fc24 	bl	800d83c <__mcmp>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	dc02      	bgt.n	800cffe <_dtoa_r+0xaba>
 800cff8:	d1d8      	bne.n	800cfac <_dtoa_r+0xa68>
 800cffa:	07eb      	lsls	r3, r5, #31
 800cffc:	d5d6      	bpl.n	800cfac <_dtoa_r+0xa68>
 800cffe:	2d39      	cmp	r5, #57	@ 0x39
 800d000:	d1d2      	bne.n	800cfa8 <_dtoa_r+0xa64>
 800d002:	2339      	movs	r3, #57	@ 0x39
 800d004:	9a06      	ldr	r2, [sp, #24]
 800d006:	7013      	strb	r3, [r2, #0]
 800d008:	0023      	movs	r3, r4
 800d00a:	001c      	movs	r4, r3
 800d00c:	3b01      	subs	r3, #1
 800d00e:	781a      	ldrb	r2, [r3, #0]
 800d010:	2a39      	cmp	r2, #57	@ 0x39
 800d012:	d050      	beq.n	800d0b6 <_dtoa_r+0xb72>
 800d014:	3201      	adds	r2, #1
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	e4fe      	b.n	800ca18 <_dtoa_r+0x4d4>
 800d01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dd03      	ble.n	800d028 <_dtoa_r+0xae4>
 800d020:	2d39      	cmp	r5, #57	@ 0x39
 800d022:	d0ee      	beq.n	800d002 <_dtoa_r+0xabe>
 800d024:	3501      	adds	r5, #1
 800d026:	e7c1      	b.n	800cfac <_dtoa_r+0xa68>
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	9a06      	ldr	r2, [sp, #24]
 800d02c:	701d      	strb	r5, [r3, #0]
 800d02e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d030:	4293      	cmp	r3, r2
 800d032:	d02b      	beq.n	800d08c <_dtoa_r+0xb48>
 800d034:	2300      	movs	r3, #0
 800d036:	220a      	movs	r2, #10
 800d038:	9905      	ldr	r1, [sp, #20]
 800d03a:	9803      	ldr	r0, [sp, #12]
 800d03c:	f000 f9e0 	bl	800d400 <__multadd>
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	9005      	str	r0, [sp, #20]
 800d044:	429f      	cmp	r7, r3
 800d046:	d109      	bne.n	800d05c <_dtoa_r+0xb18>
 800d048:	0039      	movs	r1, r7
 800d04a:	2300      	movs	r3, #0
 800d04c:	220a      	movs	r2, #10
 800d04e:	9803      	ldr	r0, [sp, #12]
 800d050:	f000 f9d6 	bl	800d400 <__multadd>
 800d054:	0007      	movs	r7, r0
 800d056:	9004      	str	r0, [sp, #16]
 800d058:	9406      	str	r4, [sp, #24]
 800d05a:	e778      	b.n	800cf4e <_dtoa_r+0xa0a>
 800d05c:	0039      	movs	r1, r7
 800d05e:	2300      	movs	r3, #0
 800d060:	220a      	movs	r2, #10
 800d062:	9803      	ldr	r0, [sp, #12]
 800d064:	f000 f9cc 	bl	800d400 <__multadd>
 800d068:	2300      	movs	r3, #0
 800d06a:	0007      	movs	r7, r0
 800d06c:	220a      	movs	r2, #10
 800d06e:	9904      	ldr	r1, [sp, #16]
 800d070:	9803      	ldr	r0, [sp, #12]
 800d072:	f000 f9c5 	bl	800d400 <__multadd>
 800d076:	9004      	str	r0, [sp, #16]
 800d078:	e7ee      	b.n	800d058 <_dtoa_r+0xb14>
 800d07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07c:	2401      	movs	r4, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	dd00      	ble.n	800d084 <_dtoa_r+0xb40>
 800d082:	001c      	movs	r4, r3
 800d084:	9704      	str	r7, [sp, #16]
 800d086:	2700      	movs	r7, #0
 800d088:	9b08      	ldr	r3, [sp, #32]
 800d08a:	191c      	adds	r4, r3, r4
 800d08c:	9905      	ldr	r1, [sp, #20]
 800d08e:	2201      	movs	r2, #1
 800d090:	9803      	ldr	r0, [sp, #12]
 800d092:	f000 fb67 	bl	800d764 <__lshift>
 800d096:	0031      	movs	r1, r6
 800d098:	9005      	str	r0, [sp, #20]
 800d09a:	f000 fbcf 	bl	800d83c <__mcmp>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	dcb2      	bgt.n	800d008 <_dtoa_r+0xac4>
 800d0a2:	d101      	bne.n	800d0a8 <_dtoa_r+0xb64>
 800d0a4:	07ed      	lsls	r5, r5, #31
 800d0a6:	d4af      	bmi.n	800d008 <_dtoa_r+0xac4>
 800d0a8:	0023      	movs	r3, r4
 800d0aa:	001c      	movs	r4, r3
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	2a30      	cmp	r2, #48	@ 0x30
 800d0b2:	d0fa      	beq.n	800d0aa <_dtoa_r+0xb66>
 800d0b4:	e4b0      	b.n	800ca18 <_dtoa_r+0x4d4>
 800d0b6:	9a08      	ldr	r2, [sp, #32]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d1a6      	bne.n	800d00a <_dtoa_r+0xac6>
 800d0bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0be:	3301      	adds	r3, #1
 800d0c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0c2:	2331      	movs	r3, #49	@ 0x31
 800d0c4:	7013      	strb	r3, [r2, #0]
 800d0c6:	e4a7      	b.n	800ca18 <_dtoa_r+0x4d4>
 800d0c8:	4b14      	ldr	r3, [pc, #80]	@ (800d11c <_dtoa_r+0xbd8>)
 800d0ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d0cc:	9308      	str	r3, [sp, #32]
 800d0ce:	4b14      	ldr	r3, [pc, #80]	@ (800d120 <_dtoa_r+0xbdc>)
 800d0d0:	2a00      	cmp	r2, #0
 800d0d2:	d001      	beq.n	800d0d8 <_dtoa_r+0xb94>
 800d0d4:	f7ff fa7e 	bl	800c5d4 <_dtoa_r+0x90>
 800d0d8:	f7ff fa7e 	bl	800c5d8 <_dtoa_r+0x94>
 800d0dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	dc00      	bgt.n	800d0e4 <_dtoa_r+0xba0>
 800d0e2:	e648      	b.n	800cd76 <_dtoa_r+0x832>
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d0e8:	e665      	b.n	800cdb6 <_dtoa_r+0x872>
 800d0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dc00      	bgt.n	800d0f2 <_dtoa_r+0xbae>
 800d0f0:	e6a9      	b.n	800ce46 <_dtoa_r+0x902>
 800d0f2:	2400      	movs	r4, #0
 800d0f4:	0031      	movs	r1, r6
 800d0f6:	9805      	ldr	r0, [sp, #20]
 800d0f8:	f7ff f99e 	bl	800c438 <quorem>
 800d0fc:	9b08      	ldr	r3, [sp, #32]
 800d0fe:	3030      	adds	r0, #48	@ 0x30
 800d100:	5518      	strb	r0, [r3, r4]
 800d102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d104:	3401      	adds	r4, #1
 800d106:	0005      	movs	r5, r0
 800d108:	42a3      	cmp	r3, r4
 800d10a:	ddb6      	ble.n	800d07a <_dtoa_r+0xb36>
 800d10c:	2300      	movs	r3, #0
 800d10e:	220a      	movs	r2, #10
 800d110:	9905      	ldr	r1, [sp, #20]
 800d112:	9803      	ldr	r0, [sp, #12]
 800d114:	f000 f974 	bl	800d400 <__multadd>
 800d118:	9005      	str	r0, [sp, #20]
 800d11a:	e7eb      	b.n	800d0f4 <_dtoa_r+0xbb0>
 800d11c:	0800e948 	.word	0x0800e948
 800d120:	0800e950 	.word	0x0800e950

0800d124 <_free_r>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	0005      	movs	r5, r0
 800d128:	1e0c      	subs	r4, r1, #0
 800d12a:	d010      	beq.n	800d14e <_free_r+0x2a>
 800d12c:	3c04      	subs	r4, #4
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	da00      	bge.n	800d136 <_free_r+0x12>
 800d134:	18e4      	adds	r4, r4, r3
 800d136:	0028      	movs	r0, r5
 800d138:	f000 f8ea 	bl	800d310 <__malloc_lock>
 800d13c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1b4 <_free_r+0x90>)
 800d13e:	6813      	ldr	r3, [r2, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d105      	bne.n	800d150 <_free_r+0x2c>
 800d144:	6063      	str	r3, [r4, #4]
 800d146:	6014      	str	r4, [r2, #0]
 800d148:	0028      	movs	r0, r5
 800d14a:	f000 f8e9 	bl	800d320 <__malloc_unlock>
 800d14e:	bd70      	pop	{r4, r5, r6, pc}
 800d150:	42a3      	cmp	r3, r4
 800d152:	d908      	bls.n	800d166 <_free_r+0x42>
 800d154:	6820      	ldr	r0, [r4, #0]
 800d156:	1821      	adds	r1, r4, r0
 800d158:	428b      	cmp	r3, r1
 800d15a:	d1f3      	bne.n	800d144 <_free_r+0x20>
 800d15c:	6819      	ldr	r1, [r3, #0]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	1809      	adds	r1, r1, r0
 800d162:	6021      	str	r1, [r4, #0]
 800d164:	e7ee      	b.n	800d144 <_free_r+0x20>
 800d166:	001a      	movs	r2, r3
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <_free_r+0x4e>
 800d16e:	42a3      	cmp	r3, r4
 800d170:	d9f9      	bls.n	800d166 <_free_r+0x42>
 800d172:	6811      	ldr	r1, [r2, #0]
 800d174:	1850      	adds	r0, r2, r1
 800d176:	42a0      	cmp	r0, r4
 800d178:	d10b      	bne.n	800d192 <_free_r+0x6e>
 800d17a:	6820      	ldr	r0, [r4, #0]
 800d17c:	1809      	adds	r1, r1, r0
 800d17e:	1850      	adds	r0, r2, r1
 800d180:	6011      	str	r1, [r2, #0]
 800d182:	4283      	cmp	r3, r0
 800d184:	d1e0      	bne.n	800d148 <_free_r+0x24>
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	1841      	adds	r1, r0, r1
 800d18c:	6011      	str	r1, [r2, #0]
 800d18e:	6053      	str	r3, [r2, #4]
 800d190:	e7da      	b.n	800d148 <_free_r+0x24>
 800d192:	42a0      	cmp	r0, r4
 800d194:	d902      	bls.n	800d19c <_free_r+0x78>
 800d196:	230c      	movs	r3, #12
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	e7d5      	b.n	800d148 <_free_r+0x24>
 800d19c:	6820      	ldr	r0, [r4, #0]
 800d19e:	1821      	adds	r1, r4, r0
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	d103      	bne.n	800d1ac <_free_r+0x88>
 800d1a4:	6819      	ldr	r1, [r3, #0]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	1809      	adds	r1, r1, r0
 800d1aa:	6021      	str	r1, [r4, #0]
 800d1ac:	6063      	str	r3, [r4, #4]
 800d1ae:	6054      	str	r4, [r2, #4]
 800d1b0:	e7ca      	b.n	800d148 <_free_r+0x24>
 800d1b2:	46c0      	nop			@ (mov r8, r8)
 800d1b4:	20000758 	.word	0x20000758

0800d1b8 <malloc>:
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	4b03      	ldr	r3, [pc, #12]	@ (800d1c8 <malloc+0x10>)
 800d1bc:	0001      	movs	r1, r0
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	f000 f826 	bl	800d210 <_malloc_r>
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	46c0      	nop			@ (mov r8, r8)
 800d1c8:	20000028 	.word	0x20000028

0800d1cc <sbrk_aligned>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	4e0f      	ldr	r6, [pc, #60]	@ (800d20c <sbrk_aligned+0x40>)
 800d1d0:	000d      	movs	r5, r1
 800d1d2:	6831      	ldr	r1, [r6, #0]
 800d1d4:	0004      	movs	r4, r0
 800d1d6:	2900      	cmp	r1, #0
 800d1d8:	d102      	bne.n	800d1e0 <sbrk_aligned+0x14>
 800d1da:	f000 fe67 	bl	800deac <_sbrk_r>
 800d1de:	6030      	str	r0, [r6, #0]
 800d1e0:	0029      	movs	r1, r5
 800d1e2:	0020      	movs	r0, r4
 800d1e4:	f000 fe62 	bl	800deac <_sbrk_r>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d103      	bne.n	800d1f4 <sbrk_aligned+0x28>
 800d1ec:	2501      	movs	r5, #1
 800d1ee:	426d      	negs	r5, r5
 800d1f0:	0028      	movs	r0, r5
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	1cc5      	adds	r5, r0, #3
 800d1f8:	439d      	bics	r5, r3
 800d1fa:	42a8      	cmp	r0, r5
 800d1fc:	d0f8      	beq.n	800d1f0 <sbrk_aligned+0x24>
 800d1fe:	1a29      	subs	r1, r5, r0
 800d200:	0020      	movs	r0, r4
 800d202:	f000 fe53 	bl	800deac <_sbrk_r>
 800d206:	3001      	adds	r0, #1
 800d208:	d1f2      	bne.n	800d1f0 <sbrk_aligned+0x24>
 800d20a:	e7ef      	b.n	800d1ec <sbrk_aligned+0x20>
 800d20c:	20000754 	.word	0x20000754

0800d210 <_malloc_r>:
 800d210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d212:	2203      	movs	r2, #3
 800d214:	1ccb      	adds	r3, r1, #3
 800d216:	4393      	bics	r3, r2
 800d218:	3308      	adds	r3, #8
 800d21a:	0005      	movs	r5, r0
 800d21c:	001f      	movs	r7, r3
 800d21e:	2b0c      	cmp	r3, #12
 800d220:	d234      	bcs.n	800d28c <_malloc_r+0x7c>
 800d222:	270c      	movs	r7, #12
 800d224:	42b9      	cmp	r1, r7
 800d226:	d833      	bhi.n	800d290 <_malloc_r+0x80>
 800d228:	0028      	movs	r0, r5
 800d22a:	f000 f871 	bl	800d310 <__malloc_lock>
 800d22e:	4e37      	ldr	r6, [pc, #220]	@ (800d30c <_malloc_r+0xfc>)
 800d230:	6833      	ldr	r3, [r6, #0]
 800d232:	001c      	movs	r4, r3
 800d234:	2c00      	cmp	r4, #0
 800d236:	d12f      	bne.n	800d298 <_malloc_r+0x88>
 800d238:	0039      	movs	r1, r7
 800d23a:	0028      	movs	r0, r5
 800d23c:	f7ff ffc6 	bl	800d1cc <sbrk_aligned>
 800d240:	0004      	movs	r4, r0
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	d15f      	bne.n	800d306 <_malloc_r+0xf6>
 800d246:	6834      	ldr	r4, [r6, #0]
 800d248:	9400      	str	r4, [sp, #0]
 800d24a:	9b00      	ldr	r3, [sp, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d14a      	bne.n	800d2e6 <_malloc_r+0xd6>
 800d250:	2c00      	cmp	r4, #0
 800d252:	d052      	beq.n	800d2fa <_malloc_r+0xea>
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	0028      	movs	r0, r5
 800d258:	18e3      	adds	r3, r4, r3
 800d25a:	9900      	ldr	r1, [sp, #0]
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	f000 fe25 	bl	800deac <_sbrk_r>
 800d262:	9b01      	ldr	r3, [sp, #4]
 800d264:	4283      	cmp	r3, r0
 800d266:	d148      	bne.n	800d2fa <_malloc_r+0xea>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	0028      	movs	r0, r5
 800d26c:	1aff      	subs	r7, r7, r3
 800d26e:	0039      	movs	r1, r7
 800d270:	f7ff ffac 	bl	800d1cc <sbrk_aligned>
 800d274:	3001      	adds	r0, #1
 800d276:	d040      	beq.n	800d2fa <_malloc_r+0xea>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	19db      	adds	r3, r3, r7
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	6833      	ldr	r3, [r6, #0]
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	2a00      	cmp	r2, #0
 800d284:	d133      	bne.n	800d2ee <_malloc_r+0xde>
 800d286:	9b00      	ldr	r3, [sp, #0]
 800d288:	6033      	str	r3, [r6, #0]
 800d28a:	e019      	b.n	800d2c0 <_malloc_r+0xb0>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dac9      	bge.n	800d224 <_malloc_r+0x14>
 800d290:	230c      	movs	r3, #12
 800d292:	602b      	str	r3, [r5, #0]
 800d294:	2000      	movs	r0, #0
 800d296:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d298:	6821      	ldr	r1, [r4, #0]
 800d29a:	1bc9      	subs	r1, r1, r7
 800d29c:	d420      	bmi.n	800d2e0 <_malloc_r+0xd0>
 800d29e:	290b      	cmp	r1, #11
 800d2a0:	d90a      	bls.n	800d2b8 <_malloc_r+0xa8>
 800d2a2:	19e2      	adds	r2, r4, r7
 800d2a4:	6027      	str	r7, [r4, #0]
 800d2a6:	42a3      	cmp	r3, r4
 800d2a8:	d104      	bne.n	800d2b4 <_malloc_r+0xa4>
 800d2aa:	6032      	str	r2, [r6, #0]
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	6011      	str	r1, [r2, #0]
 800d2b0:	6053      	str	r3, [r2, #4]
 800d2b2:	e005      	b.n	800d2c0 <_malloc_r+0xb0>
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	e7f9      	b.n	800d2ac <_malloc_r+0x9c>
 800d2b8:	6862      	ldr	r2, [r4, #4]
 800d2ba:	42a3      	cmp	r3, r4
 800d2bc:	d10e      	bne.n	800d2dc <_malloc_r+0xcc>
 800d2be:	6032      	str	r2, [r6, #0]
 800d2c0:	0028      	movs	r0, r5
 800d2c2:	f000 f82d 	bl	800d320 <__malloc_unlock>
 800d2c6:	0020      	movs	r0, r4
 800d2c8:	2207      	movs	r2, #7
 800d2ca:	300b      	adds	r0, #11
 800d2cc:	1d23      	adds	r3, r4, #4
 800d2ce:	4390      	bics	r0, r2
 800d2d0:	1ac2      	subs	r2, r0, r3
 800d2d2:	4298      	cmp	r0, r3
 800d2d4:	d0df      	beq.n	800d296 <_malloc_r+0x86>
 800d2d6:	1a1b      	subs	r3, r3, r0
 800d2d8:	50a3      	str	r3, [r4, r2]
 800d2da:	e7dc      	b.n	800d296 <_malloc_r+0x86>
 800d2dc:	605a      	str	r2, [r3, #4]
 800d2de:	e7ef      	b.n	800d2c0 <_malloc_r+0xb0>
 800d2e0:	0023      	movs	r3, r4
 800d2e2:	6864      	ldr	r4, [r4, #4]
 800d2e4:	e7a6      	b.n	800d234 <_malloc_r+0x24>
 800d2e6:	9c00      	ldr	r4, [sp, #0]
 800d2e8:	6863      	ldr	r3, [r4, #4]
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	e7ad      	b.n	800d24a <_malloc_r+0x3a>
 800d2ee:	001a      	movs	r2, r3
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	42a3      	cmp	r3, r4
 800d2f4:	d1fb      	bne.n	800d2ee <_malloc_r+0xde>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e7da      	b.n	800d2b0 <_malloc_r+0xa0>
 800d2fa:	230c      	movs	r3, #12
 800d2fc:	0028      	movs	r0, r5
 800d2fe:	602b      	str	r3, [r5, #0]
 800d300:	f000 f80e 	bl	800d320 <__malloc_unlock>
 800d304:	e7c6      	b.n	800d294 <_malloc_r+0x84>
 800d306:	6007      	str	r7, [r0, #0]
 800d308:	e7da      	b.n	800d2c0 <_malloc_r+0xb0>
 800d30a:	46c0      	nop			@ (mov r8, r8)
 800d30c:	20000758 	.word	0x20000758

0800d310 <__malloc_lock>:
 800d310:	b510      	push	{r4, lr}
 800d312:	4802      	ldr	r0, [pc, #8]	@ (800d31c <__malloc_lock+0xc>)
 800d314:	f7ff f87b 	bl	800c40e <__retarget_lock_acquire_recursive>
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	46c0      	nop			@ (mov r8, r8)
 800d31c:	20000750 	.word	0x20000750

0800d320 <__malloc_unlock>:
 800d320:	b510      	push	{r4, lr}
 800d322:	4802      	ldr	r0, [pc, #8]	@ (800d32c <__malloc_unlock+0xc>)
 800d324:	f7ff f874 	bl	800c410 <__retarget_lock_release_recursive>
 800d328:	bd10      	pop	{r4, pc}
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	20000750 	.word	0x20000750

0800d330 <_Balloc>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	69c5      	ldr	r5, [r0, #28]
 800d334:	0006      	movs	r6, r0
 800d336:	000c      	movs	r4, r1
 800d338:	2d00      	cmp	r5, #0
 800d33a:	d10e      	bne.n	800d35a <_Balloc+0x2a>
 800d33c:	2010      	movs	r0, #16
 800d33e:	f7ff ff3b 	bl	800d1b8 <malloc>
 800d342:	1e02      	subs	r2, r0, #0
 800d344:	61f0      	str	r0, [r6, #28]
 800d346:	d104      	bne.n	800d352 <_Balloc+0x22>
 800d348:	216b      	movs	r1, #107	@ 0x6b
 800d34a:	4b19      	ldr	r3, [pc, #100]	@ (800d3b0 <_Balloc+0x80>)
 800d34c:	4819      	ldr	r0, [pc, #100]	@ (800d3b4 <_Balloc+0x84>)
 800d34e:	f000 fdc9 	bl	800dee4 <__assert_func>
 800d352:	6045      	str	r5, [r0, #4]
 800d354:	6085      	str	r5, [r0, #8]
 800d356:	6005      	str	r5, [r0, #0]
 800d358:	60c5      	str	r5, [r0, #12]
 800d35a:	69f5      	ldr	r5, [r6, #28]
 800d35c:	68eb      	ldr	r3, [r5, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d013      	beq.n	800d38a <_Balloc+0x5a>
 800d362:	69f3      	ldr	r3, [r6, #28]
 800d364:	00a2      	lsls	r2, r4, #2
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	189b      	adds	r3, r3, r2
 800d36a:	6818      	ldr	r0, [r3, #0]
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d118      	bne.n	800d3a2 <_Balloc+0x72>
 800d370:	2101      	movs	r1, #1
 800d372:	000d      	movs	r5, r1
 800d374:	40a5      	lsls	r5, r4
 800d376:	1d6a      	adds	r2, r5, #5
 800d378:	0030      	movs	r0, r6
 800d37a:	0092      	lsls	r2, r2, #2
 800d37c:	f000 fdd0 	bl	800df20 <_calloc_r>
 800d380:	2800      	cmp	r0, #0
 800d382:	d00c      	beq.n	800d39e <_Balloc+0x6e>
 800d384:	6044      	str	r4, [r0, #4]
 800d386:	6085      	str	r5, [r0, #8]
 800d388:	e00d      	b.n	800d3a6 <_Balloc+0x76>
 800d38a:	2221      	movs	r2, #33	@ 0x21
 800d38c:	2104      	movs	r1, #4
 800d38e:	0030      	movs	r0, r6
 800d390:	f000 fdc6 	bl	800df20 <_calloc_r>
 800d394:	69f3      	ldr	r3, [r6, #28]
 800d396:	60e8      	str	r0, [r5, #12]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e1      	bne.n	800d362 <_Balloc+0x32>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
 800d3a2:	6802      	ldr	r2, [r0, #0]
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	6103      	str	r3, [r0, #16]
 800d3aa:	60c3      	str	r3, [r0, #12]
 800d3ac:	e7f8      	b.n	800d3a0 <_Balloc+0x70>
 800d3ae:	46c0      	nop			@ (mov r8, r8)
 800d3b0:	0800e955 	.word	0x0800e955
 800d3b4:	0800e9d5 	.word	0x0800e9d5

0800d3b8 <_Bfree>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	69c6      	ldr	r6, [r0, #28]
 800d3bc:	0005      	movs	r5, r0
 800d3be:	000c      	movs	r4, r1
 800d3c0:	2e00      	cmp	r6, #0
 800d3c2:	d10e      	bne.n	800d3e2 <_Bfree+0x2a>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f7ff fef7 	bl	800d1b8 <malloc>
 800d3ca:	1e02      	subs	r2, r0, #0
 800d3cc:	61e8      	str	r0, [r5, #28]
 800d3ce:	d104      	bne.n	800d3da <_Bfree+0x22>
 800d3d0:	218f      	movs	r1, #143	@ 0x8f
 800d3d2:	4b09      	ldr	r3, [pc, #36]	@ (800d3f8 <_Bfree+0x40>)
 800d3d4:	4809      	ldr	r0, [pc, #36]	@ (800d3fc <_Bfree+0x44>)
 800d3d6:	f000 fd85 	bl	800dee4 <__assert_func>
 800d3da:	6046      	str	r6, [r0, #4]
 800d3dc:	6086      	str	r6, [r0, #8]
 800d3de:	6006      	str	r6, [r0, #0]
 800d3e0:	60c6      	str	r6, [r0, #12]
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	d007      	beq.n	800d3f6 <_Bfree+0x3e>
 800d3e6:	69eb      	ldr	r3, [r5, #28]
 800d3e8:	6862      	ldr	r2, [r4, #4]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	0092      	lsls	r2, r2, #2
 800d3ee:	189b      	adds	r3, r3, r2
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	6022      	str	r2, [r4, #0]
 800d3f4:	601c      	str	r4, [r3, #0]
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	0800e955 	.word	0x0800e955
 800d3fc:	0800e9d5 	.word	0x0800e9d5

0800d400 <__multadd>:
 800d400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d402:	000f      	movs	r7, r1
 800d404:	9001      	str	r0, [sp, #4]
 800d406:	000c      	movs	r4, r1
 800d408:	001e      	movs	r6, r3
 800d40a:	2000      	movs	r0, #0
 800d40c:	690d      	ldr	r5, [r1, #16]
 800d40e:	3714      	adds	r7, #20
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	3001      	adds	r0, #1
 800d414:	b299      	uxth	r1, r3
 800d416:	4351      	muls	r1, r2
 800d418:	0c1b      	lsrs	r3, r3, #16
 800d41a:	4353      	muls	r3, r2
 800d41c:	1989      	adds	r1, r1, r6
 800d41e:	0c0e      	lsrs	r6, r1, #16
 800d420:	199b      	adds	r3, r3, r6
 800d422:	0c1e      	lsrs	r6, r3, #16
 800d424:	b289      	uxth	r1, r1
 800d426:	041b      	lsls	r3, r3, #16
 800d428:	185b      	adds	r3, r3, r1
 800d42a:	c708      	stmia	r7!, {r3}
 800d42c:	4285      	cmp	r5, r0
 800d42e:	dcef      	bgt.n	800d410 <__multadd+0x10>
 800d430:	2e00      	cmp	r6, #0
 800d432:	d022      	beq.n	800d47a <__multadd+0x7a>
 800d434:	68a3      	ldr	r3, [r4, #8]
 800d436:	42ab      	cmp	r3, r5
 800d438:	dc19      	bgt.n	800d46e <__multadd+0x6e>
 800d43a:	6861      	ldr	r1, [r4, #4]
 800d43c:	9801      	ldr	r0, [sp, #4]
 800d43e:	3101      	adds	r1, #1
 800d440:	f7ff ff76 	bl	800d330 <_Balloc>
 800d444:	1e07      	subs	r7, r0, #0
 800d446:	d105      	bne.n	800d454 <__multadd+0x54>
 800d448:	003a      	movs	r2, r7
 800d44a:	21ba      	movs	r1, #186	@ 0xba
 800d44c:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <__multadd+0x80>)
 800d44e:	480d      	ldr	r0, [pc, #52]	@ (800d484 <__multadd+0x84>)
 800d450:	f000 fd48 	bl	800dee4 <__assert_func>
 800d454:	0021      	movs	r1, r4
 800d456:	6922      	ldr	r2, [r4, #16]
 800d458:	310c      	adds	r1, #12
 800d45a:	3202      	adds	r2, #2
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	300c      	adds	r0, #12
 800d460:	f000 fd36 	bl	800ded0 <memcpy>
 800d464:	0021      	movs	r1, r4
 800d466:	9801      	ldr	r0, [sp, #4]
 800d468:	f7ff ffa6 	bl	800d3b8 <_Bfree>
 800d46c:	003c      	movs	r4, r7
 800d46e:	1d2b      	adds	r3, r5, #4
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	18e3      	adds	r3, r4, r3
 800d474:	3501      	adds	r5, #1
 800d476:	605e      	str	r6, [r3, #4]
 800d478:	6125      	str	r5, [r4, #16]
 800d47a:	0020      	movs	r0, r4
 800d47c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d47e:	46c0      	nop			@ (mov r8, r8)
 800d480:	0800e9c4 	.word	0x0800e9c4
 800d484:	0800e9d5 	.word	0x0800e9d5

0800d488 <__hi0bits>:
 800d488:	2280      	movs	r2, #128	@ 0x80
 800d48a:	0003      	movs	r3, r0
 800d48c:	0252      	lsls	r2, r2, #9
 800d48e:	2000      	movs	r0, #0
 800d490:	4293      	cmp	r3, r2
 800d492:	d201      	bcs.n	800d498 <__hi0bits+0x10>
 800d494:	041b      	lsls	r3, r3, #16
 800d496:	3010      	adds	r0, #16
 800d498:	2280      	movs	r2, #128	@ 0x80
 800d49a:	0452      	lsls	r2, r2, #17
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d201      	bcs.n	800d4a4 <__hi0bits+0x1c>
 800d4a0:	3008      	adds	r0, #8
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	2280      	movs	r2, #128	@ 0x80
 800d4a6:	0552      	lsls	r2, r2, #21
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d201      	bcs.n	800d4b0 <__hi0bits+0x28>
 800d4ac:	3004      	adds	r0, #4
 800d4ae:	011b      	lsls	r3, r3, #4
 800d4b0:	2280      	movs	r2, #128	@ 0x80
 800d4b2:	05d2      	lsls	r2, r2, #23
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d201      	bcs.n	800d4bc <__hi0bits+0x34>
 800d4b8:	3002      	adds	r0, #2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	db03      	blt.n	800d4c8 <__hi0bits+0x40>
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	4213      	tst	r3, r2
 800d4c4:	d100      	bne.n	800d4c8 <__hi0bits+0x40>
 800d4c6:	2020      	movs	r0, #32
 800d4c8:	4770      	bx	lr

0800d4ca <__lo0bits>:
 800d4ca:	6803      	ldr	r3, [r0, #0]
 800d4cc:	0001      	movs	r1, r0
 800d4ce:	2207      	movs	r2, #7
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	4010      	ands	r0, r2
 800d4d4:	4213      	tst	r3, r2
 800d4d6:	d00d      	beq.n	800d4f4 <__lo0bits+0x2a>
 800d4d8:	3a06      	subs	r2, #6
 800d4da:	2000      	movs	r0, #0
 800d4dc:	4213      	tst	r3, r2
 800d4de:	d105      	bne.n	800d4ec <__lo0bits+0x22>
 800d4e0:	3002      	adds	r0, #2
 800d4e2:	4203      	tst	r3, r0
 800d4e4:	d003      	beq.n	800d4ee <__lo0bits+0x24>
 800d4e6:	40d3      	lsrs	r3, r2
 800d4e8:	0010      	movs	r0, r2
 800d4ea:	600b      	str	r3, [r1, #0]
 800d4ec:	4770      	bx	lr
 800d4ee:	089b      	lsrs	r3, r3, #2
 800d4f0:	600b      	str	r3, [r1, #0]
 800d4f2:	e7fb      	b.n	800d4ec <__lo0bits+0x22>
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	d101      	bne.n	800d4fe <__lo0bits+0x34>
 800d4fa:	2010      	movs	r0, #16
 800d4fc:	0c1b      	lsrs	r3, r3, #16
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	2a00      	cmp	r2, #0
 800d502:	d101      	bne.n	800d508 <__lo0bits+0x3e>
 800d504:	3008      	adds	r0, #8
 800d506:	0a1b      	lsrs	r3, r3, #8
 800d508:	071a      	lsls	r2, r3, #28
 800d50a:	d101      	bne.n	800d510 <__lo0bits+0x46>
 800d50c:	3004      	adds	r0, #4
 800d50e:	091b      	lsrs	r3, r3, #4
 800d510:	079a      	lsls	r2, r3, #30
 800d512:	d101      	bne.n	800d518 <__lo0bits+0x4e>
 800d514:	3002      	adds	r0, #2
 800d516:	089b      	lsrs	r3, r3, #2
 800d518:	07da      	lsls	r2, r3, #31
 800d51a:	d4e9      	bmi.n	800d4f0 <__lo0bits+0x26>
 800d51c:	3001      	adds	r0, #1
 800d51e:	085b      	lsrs	r3, r3, #1
 800d520:	d1e6      	bne.n	800d4f0 <__lo0bits+0x26>
 800d522:	2020      	movs	r0, #32
 800d524:	e7e2      	b.n	800d4ec <__lo0bits+0x22>
	...

0800d528 <__i2b>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	000c      	movs	r4, r1
 800d52c:	2101      	movs	r1, #1
 800d52e:	f7ff feff 	bl	800d330 <_Balloc>
 800d532:	2800      	cmp	r0, #0
 800d534:	d107      	bne.n	800d546 <__i2b+0x1e>
 800d536:	2146      	movs	r1, #70	@ 0x46
 800d538:	4c05      	ldr	r4, [pc, #20]	@ (800d550 <__i2b+0x28>)
 800d53a:	0002      	movs	r2, r0
 800d53c:	4b05      	ldr	r3, [pc, #20]	@ (800d554 <__i2b+0x2c>)
 800d53e:	0020      	movs	r0, r4
 800d540:	31ff      	adds	r1, #255	@ 0xff
 800d542:	f000 fccf 	bl	800dee4 <__assert_func>
 800d546:	2301      	movs	r3, #1
 800d548:	6144      	str	r4, [r0, #20]
 800d54a:	6103      	str	r3, [r0, #16]
 800d54c:	bd10      	pop	{r4, pc}
 800d54e:	46c0      	nop			@ (mov r8, r8)
 800d550:	0800e9d5 	.word	0x0800e9d5
 800d554:	0800e9c4 	.word	0x0800e9c4

0800d558 <__multiply>:
 800d558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d55a:	0014      	movs	r4, r2
 800d55c:	690a      	ldr	r2, [r1, #16]
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	000d      	movs	r5, r1
 800d562:	b089      	sub	sp, #36	@ 0x24
 800d564:	429a      	cmp	r2, r3
 800d566:	db02      	blt.n	800d56e <__multiply+0x16>
 800d568:	0023      	movs	r3, r4
 800d56a:	000c      	movs	r4, r1
 800d56c:	001d      	movs	r5, r3
 800d56e:	6927      	ldr	r7, [r4, #16]
 800d570:	692e      	ldr	r6, [r5, #16]
 800d572:	6861      	ldr	r1, [r4, #4]
 800d574:	19bb      	adds	r3, r7, r6
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	19ba      	adds	r2, r7, r6
 800d57c:	4293      	cmp	r3, r2
 800d57e:	da00      	bge.n	800d582 <__multiply+0x2a>
 800d580:	3101      	adds	r1, #1
 800d582:	f7ff fed5 	bl	800d330 <_Balloc>
 800d586:	4684      	mov	ip, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	d106      	bne.n	800d59a <__multiply+0x42>
 800d58c:	21b1      	movs	r1, #177	@ 0xb1
 800d58e:	4662      	mov	r2, ip
 800d590:	4b44      	ldr	r3, [pc, #272]	@ (800d6a4 <__multiply+0x14c>)
 800d592:	4845      	ldr	r0, [pc, #276]	@ (800d6a8 <__multiply+0x150>)
 800d594:	0049      	lsls	r1, r1, #1
 800d596:	f000 fca5 	bl	800dee4 <__assert_func>
 800d59a:	0002      	movs	r2, r0
 800d59c:	19bb      	adds	r3, r7, r6
 800d59e:	3214      	adds	r2, #20
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	18d3      	adds	r3, r2, r3
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	9801      	ldr	r0, [sp, #4]
 800d5ac:	4283      	cmp	r3, r0
 800d5ae:	d328      	bcc.n	800d602 <__multiply+0xaa>
 800d5b0:	0023      	movs	r3, r4
 800d5b2:	00bf      	lsls	r7, r7, #2
 800d5b4:	3314      	adds	r3, #20
 800d5b6:	9304      	str	r3, [sp, #16]
 800d5b8:	3514      	adds	r5, #20
 800d5ba:	19db      	adds	r3, r3, r7
 800d5bc:	00b6      	lsls	r6, r6, #2
 800d5be:	9302      	str	r3, [sp, #8]
 800d5c0:	19ab      	adds	r3, r5, r6
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	2304      	movs	r3, #4
 800d5c6:	9305      	str	r3, [sp, #20]
 800d5c8:	0023      	movs	r3, r4
 800d5ca:	9902      	ldr	r1, [sp, #8]
 800d5cc:	3315      	adds	r3, #21
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	d305      	bcc.n	800d5de <__multiply+0x86>
 800d5d2:	1b0c      	subs	r4, r1, r4
 800d5d4:	3c15      	subs	r4, #21
 800d5d6:	08a4      	lsrs	r4, r4, #2
 800d5d8:	3401      	adds	r4, #1
 800d5da:	00a3      	lsls	r3, r4, #2
 800d5dc:	9305      	str	r3, [sp, #20]
 800d5de:	9b07      	ldr	r3, [sp, #28]
 800d5e0:	429d      	cmp	r5, r3
 800d5e2:	d310      	bcc.n	800d606 <__multiply+0xae>
 800d5e4:	9b00      	ldr	r3, [sp, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	dd05      	ble.n	800d5f6 <__multiply+0x9e>
 800d5ea:	9b01      	ldr	r3, [sp, #4]
 800d5ec:	3b04      	subs	r3, #4
 800d5ee:	9301      	str	r3, [sp, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d052      	beq.n	800d69c <__multiply+0x144>
 800d5f6:	4663      	mov	r3, ip
 800d5f8:	4660      	mov	r0, ip
 800d5fa:	9a00      	ldr	r2, [sp, #0]
 800d5fc:	611a      	str	r2, [r3, #16]
 800d5fe:	b009      	add	sp, #36	@ 0x24
 800d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d602:	c302      	stmia	r3!, {r1}
 800d604:	e7d1      	b.n	800d5aa <__multiply+0x52>
 800d606:	682c      	ldr	r4, [r5, #0]
 800d608:	b2a4      	uxth	r4, r4
 800d60a:	2c00      	cmp	r4, #0
 800d60c:	d01f      	beq.n	800d64e <__multiply+0xf6>
 800d60e:	2300      	movs	r3, #0
 800d610:	0017      	movs	r7, r2
 800d612:	9e04      	ldr	r6, [sp, #16]
 800d614:	9303      	str	r3, [sp, #12]
 800d616:	ce08      	ldmia	r6!, {r3}
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	9306      	str	r3, [sp, #24]
 800d61c:	466b      	mov	r3, sp
 800d61e:	8b1b      	ldrh	r3, [r3, #24]
 800d620:	b288      	uxth	r0, r1
 800d622:	4363      	muls	r3, r4
 800d624:	181b      	adds	r3, r3, r0
 800d626:	9803      	ldr	r0, [sp, #12]
 800d628:	0c09      	lsrs	r1, r1, #16
 800d62a:	181b      	adds	r3, r3, r0
 800d62c:	9806      	ldr	r0, [sp, #24]
 800d62e:	0c00      	lsrs	r0, r0, #16
 800d630:	4360      	muls	r0, r4
 800d632:	1840      	adds	r0, r0, r1
 800d634:	0c19      	lsrs	r1, r3, #16
 800d636:	1841      	adds	r1, r0, r1
 800d638:	0c08      	lsrs	r0, r1, #16
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	0409      	lsls	r1, r1, #16
 800d63e:	4319      	orrs	r1, r3
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	9003      	str	r0, [sp, #12]
 800d644:	c702      	stmia	r7!, {r1}
 800d646:	42b3      	cmp	r3, r6
 800d648:	d8e5      	bhi.n	800d616 <__multiply+0xbe>
 800d64a:	9b05      	ldr	r3, [sp, #20]
 800d64c:	50d0      	str	r0, [r2, r3]
 800d64e:	682c      	ldr	r4, [r5, #0]
 800d650:	0c24      	lsrs	r4, r4, #16
 800d652:	d020      	beq.n	800d696 <__multiply+0x13e>
 800d654:	2100      	movs	r1, #0
 800d656:	0010      	movs	r0, r2
 800d658:	6813      	ldr	r3, [r2, #0]
 800d65a:	9e04      	ldr	r6, [sp, #16]
 800d65c:	9103      	str	r1, [sp, #12]
 800d65e:	6831      	ldr	r1, [r6, #0]
 800d660:	6807      	ldr	r7, [r0, #0]
 800d662:	b289      	uxth	r1, r1
 800d664:	4361      	muls	r1, r4
 800d666:	0c3f      	lsrs	r7, r7, #16
 800d668:	19c9      	adds	r1, r1, r7
 800d66a:	9f03      	ldr	r7, [sp, #12]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	19c9      	adds	r1, r1, r7
 800d670:	040f      	lsls	r7, r1, #16
 800d672:	431f      	orrs	r7, r3
 800d674:	6007      	str	r7, [r0, #0]
 800d676:	ce80      	ldmia	r6!, {r7}
 800d678:	6843      	ldr	r3, [r0, #4]
 800d67a:	0c3f      	lsrs	r7, r7, #16
 800d67c:	4367      	muls	r7, r4
 800d67e:	b29b      	uxth	r3, r3
 800d680:	0c09      	lsrs	r1, r1, #16
 800d682:	18fb      	adds	r3, r7, r3
 800d684:	185b      	adds	r3, r3, r1
 800d686:	0c19      	lsrs	r1, r3, #16
 800d688:	9103      	str	r1, [sp, #12]
 800d68a:	9902      	ldr	r1, [sp, #8]
 800d68c:	3004      	adds	r0, #4
 800d68e:	42b1      	cmp	r1, r6
 800d690:	d8e5      	bhi.n	800d65e <__multiply+0x106>
 800d692:	9905      	ldr	r1, [sp, #20]
 800d694:	5053      	str	r3, [r2, r1]
 800d696:	3504      	adds	r5, #4
 800d698:	3204      	adds	r2, #4
 800d69a:	e7a0      	b.n	800d5de <__multiply+0x86>
 800d69c:	9b00      	ldr	r3, [sp, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	e79f      	b.n	800d5e4 <__multiply+0x8c>
 800d6a4:	0800e9c4 	.word	0x0800e9c4
 800d6a8:	0800e9d5 	.word	0x0800e9d5

0800d6ac <__pow5mult>:
 800d6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	0015      	movs	r5, r2
 800d6b2:	0007      	movs	r7, r0
 800d6b4:	000e      	movs	r6, r1
 800d6b6:	401a      	ands	r2, r3
 800d6b8:	421d      	tst	r5, r3
 800d6ba:	d008      	beq.n	800d6ce <__pow5mult+0x22>
 800d6bc:	4925      	ldr	r1, [pc, #148]	@ (800d754 <__pow5mult+0xa8>)
 800d6be:	3a01      	subs	r2, #1
 800d6c0:	0092      	lsls	r2, r2, #2
 800d6c2:	5852      	ldr	r2, [r2, r1]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	0031      	movs	r1, r6
 800d6c8:	f7ff fe9a 	bl	800d400 <__multadd>
 800d6cc:	0006      	movs	r6, r0
 800d6ce:	10ad      	asrs	r5, r5, #2
 800d6d0:	d03d      	beq.n	800d74e <__pow5mult+0xa2>
 800d6d2:	69fc      	ldr	r4, [r7, #28]
 800d6d4:	2c00      	cmp	r4, #0
 800d6d6:	d10f      	bne.n	800d6f8 <__pow5mult+0x4c>
 800d6d8:	2010      	movs	r0, #16
 800d6da:	f7ff fd6d 	bl	800d1b8 <malloc>
 800d6de:	1e02      	subs	r2, r0, #0
 800d6e0:	61f8      	str	r0, [r7, #28]
 800d6e2:	d105      	bne.n	800d6f0 <__pow5mult+0x44>
 800d6e4:	21b4      	movs	r1, #180	@ 0xb4
 800d6e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d758 <__pow5mult+0xac>)
 800d6e8:	481c      	ldr	r0, [pc, #112]	@ (800d75c <__pow5mult+0xb0>)
 800d6ea:	31ff      	adds	r1, #255	@ 0xff
 800d6ec:	f000 fbfa 	bl	800dee4 <__assert_func>
 800d6f0:	6044      	str	r4, [r0, #4]
 800d6f2:	6084      	str	r4, [r0, #8]
 800d6f4:	6004      	str	r4, [r0, #0]
 800d6f6:	60c4      	str	r4, [r0, #12]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	689c      	ldr	r4, [r3, #8]
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	d108      	bne.n	800d714 <__pow5mult+0x68>
 800d702:	0038      	movs	r0, r7
 800d704:	4916      	ldr	r1, [pc, #88]	@ (800d760 <__pow5mult+0xb4>)
 800d706:	f7ff ff0f 	bl	800d528 <__i2b>
 800d70a:	9b01      	ldr	r3, [sp, #4]
 800d70c:	0004      	movs	r4, r0
 800d70e:	6098      	str	r0, [r3, #8]
 800d710:	2300      	movs	r3, #0
 800d712:	6003      	str	r3, [r0, #0]
 800d714:	2301      	movs	r3, #1
 800d716:	421d      	tst	r5, r3
 800d718:	d00a      	beq.n	800d730 <__pow5mult+0x84>
 800d71a:	0031      	movs	r1, r6
 800d71c:	0022      	movs	r2, r4
 800d71e:	0038      	movs	r0, r7
 800d720:	f7ff ff1a 	bl	800d558 <__multiply>
 800d724:	0031      	movs	r1, r6
 800d726:	9001      	str	r0, [sp, #4]
 800d728:	0038      	movs	r0, r7
 800d72a:	f7ff fe45 	bl	800d3b8 <_Bfree>
 800d72e:	9e01      	ldr	r6, [sp, #4]
 800d730:	106d      	asrs	r5, r5, #1
 800d732:	d00c      	beq.n	800d74e <__pow5mult+0xa2>
 800d734:	6820      	ldr	r0, [r4, #0]
 800d736:	2800      	cmp	r0, #0
 800d738:	d107      	bne.n	800d74a <__pow5mult+0x9e>
 800d73a:	0022      	movs	r2, r4
 800d73c:	0021      	movs	r1, r4
 800d73e:	0038      	movs	r0, r7
 800d740:	f7ff ff0a 	bl	800d558 <__multiply>
 800d744:	2300      	movs	r3, #0
 800d746:	6020      	str	r0, [r4, #0]
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	0004      	movs	r4, r0
 800d74c:	e7e2      	b.n	800d714 <__pow5mult+0x68>
 800d74e:	0030      	movs	r0, r6
 800d750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d752:	46c0      	nop			@ (mov r8, r8)
 800d754:	0800ea88 	.word	0x0800ea88
 800d758:	0800e955 	.word	0x0800e955
 800d75c:	0800e9d5 	.word	0x0800e9d5
 800d760:	00000271 	.word	0x00000271

0800d764 <__lshift>:
 800d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d766:	000c      	movs	r4, r1
 800d768:	0016      	movs	r6, r2
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	1157      	asrs	r7, r2, #5
 800d76e:	b085      	sub	sp, #20
 800d770:	18fb      	adds	r3, r7, r3
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	3301      	adds	r3, #1
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	6849      	ldr	r1, [r1, #4]
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	9002      	str	r0, [sp, #8]
 800d77e:	9a00      	ldr	r2, [sp, #0]
 800d780:	4293      	cmp	r3, r2
 800d782:	db10      	blt.n	800d7a6 <__lshift+0x42>
 800d784:	9802      	ldr	r0, [sp, #8]
 800d786:	f7ff fdd3 	bl	800d330 <_Balloc>
 800d78a:	2300      	movs	r3, #0
 800d78c:	0001      	movs	r1, r0
 800d78e:	0005      	movs	r5, r0
 800d790:	001a      	movs	r2, r3
 800d792:	3114      	adds	r1, #20
 800d794:	4298      	cmp	r0, r3
 800d796:	d10c      	bne.n	800d7b2 <__lshift+0x4e>
 800d798:	21ef      	movs	r1, #239	@ 0xef
 800d79a:	002a      	movs	r2, r5
 800d79c:	4b25      	ldr	r3, [pc, #148]	@ (800d834 <__lshift+0xd0>)
 800d79e:	4826      	ldr	r0, [pc, #152]	@ (800d838 <__lshift+0xd4>)
 800d7a0:	0049      	lsls	r1, r1, #1
 800d7a2:	f000 fb9f 	bl	800dee4 <__assert_func>
 800d7a6:	3101      	adds	r1, #1
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	e7e8      	b.n	800d77e <__lshift+0x1a>
 800d7ac:	0098      	lsls	r0, r3, #2
 800d7ae:	500a      	str	r2, [r1, r0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	42bb      	cmp	r3, r7
 800d7b4:	dbfa      	blt.n	800d7ac <__lshift+0x48>
 800d7b6:	43fb      	mvns	r3, r7
 800d7b8:	17db      	asrs	r3, r3, #31
 800d7ba:	401f      	ands	r7, r3
 800d7bc:	00bf      	lsls	r7, r7, #2
 800d7be:	0023      	movs	r3, r4
 800d7c0:	201f      	movs	r0, #31
 800d7c2:	19c9      	adds	r1, r1, r7
 800d7c4:	0037      	movs	r7, r6
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	3314      	adds	r3, #20
 800d7ca:	0092      	lsls	r2, r2, #2
 800d7cc:	189a      	adds	r2, r3, r2
 800d7ce:	4007      	ands	r7, r0
 800d7d0:	4206      	tst	r6, r0
 800d7d2:	d029      	beq.n	800d828 <__lshift+0xc4>
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	1bc0      	subs	r0, r0, r7
 800d7d8:	9003      	str	r0, [sp, #12]
 800d7da:	468c      	mov	ip, r1
 800d7dc:	2000      	movs	r0, #0
 800d7de:	681e      	ldr	r6, [r3, #0]
 800d7e0:	40be      	lsls	r6, r7
 800d7e2:	4306      	orrs	r6, r0
 800d7e4:	4660      	mov	r0, ip
 800d7e6:	c040      	stmia	r0!, {r6}
 800d7e8:	4684      	mov	ip, r0
 800d7ea:	9e03      	ldr	r6, [sp, #12]
 800d7ec:	cb01      	ldmia	r3!, {r0}
 800d7ee:	40f0      	lsrs	r0, r6
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d8f4      	bhi.n	800d7de <__lshift+0x7a>
 800d7f4:	0026      	movs	r6, r4
 800d7f6:	3615      	adds	r6, #21
 800d7f8:	2304      	movs	r3, #4
 800d7fa:	42b2      	cmp	r2, r6
 800d7fc:	d304      	bcc.n	800d808 <__lshift+0xa4>
 800d7fe:	1b13      	subs	r3, r2, r4
 800d800:	3b15      	subs	r3, #21
 800d802:	089b      	lsrs	r3, r3, #2
 800d804:	3301      	adds	r3, #1
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	50c8      	str	r0, [r1, r3]
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d002      	beq.n	800d814 <__lshift+0xb0>
 800d80e:	9b01      	ldr	r3, [sp, #4]
 800d810:	3302      	adds	r3, #2
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	9b00      	ldr	r3, [sp, #0]
 800d816:	9802      	ldr	r0, [sp, #8]
 800d818:	3b01      	subs	r3, #1
 800d81a:	0021      	movs	r1, r4
 800d81c:	612b      	str	r3, [r5, #16]
 800d81e:	f7ff fdcb 	bl	800d3b8 <_Bfree>
 800d822:	0028      	movs	r0, r5
 800d824:	b005      	add	sp, #20
 800d826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d828:	cb01      	ldmia	r3!, {r0}
 800d82a:	c101      	stmia	r1!, {r0}
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d8fb      	bhi.n	800d828 <__lshift+0xc4>
 800d830:	e7f0      	b.n	800d814 <__lshift+0xb0>
 800d832:	46c0      	nop			@ (mov r8, r8)
 800d834:	0800e9c4 	.word	0x0800e9c4
 800d838:	0800e9d5 	.word	0x0800e9d5

0800d83c <__mcmp>:
 800d83c:	b530      	push	{r4, r5, lr}
 800d83e:	690b      	ldr	r3, [r1, #16]
 800d840:	6904      	ldr	r4, [r0, #16]
 800d842:	0002      	movs	r2, r0
 800d844:	1ae0      	subs	r0, r4, r3
 800d846:	429c      	cmp	r4, r3
 800d848:	d10f      	bne.n	800d86a <__mcmp+0x2e>
 800d84a:	3214      	adds	r2, #20
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	3114      	adds	r1, #20
 800d850:	0014      	movs	r4, r2
 800d852:	18c9      	adds	r1, r1, r3
 800d854:	18d2      	adds	r2, r2, r3
 800d856:	3a04      	subs	r2, #4
 800d858:	3904      	subs	r1, #4
 800d85a:	6815      	ldr	r5, [r2, #0]
 800d85c:	680b      	ldr	r3, [r1, #0]
 800d85e:	429d      	cmp	r5, r3
 800d860:	d004      	beq.n	800d86c <__mcmp+0x30>
 800d862:	2001      	movs	r0, #1
 800d864:	429d      	cmp	r5, r3
 800d866:	d200      	bcs.n	800d86a <__mcmp+0x2e>
 800d868:	3802      	subs	r0, #2
 800d86a:	bd30      	pop	{r4, r5, pc}
 800d86c:	4294      	cmp	r4, r2
 800d86e:	d3f2      	bcc.n	800d856 <__mcmp+0x1a>
 800d870:	e7fb      	b.n	800d86a <__mcmp+0x2e>
	...

0800d874 <__mdiff>:
 800d874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d876:	000c      	movs	r4, r1
 800d878:	b087      	sub	sp, #28
 800d87a:	9000      	str	r0, [sp, #0]
 800d87c:	0011      	movs	r1, r2
 800d87e:	0020      	movs	r0, r4
 800d880:	0017      	movs	r7, r2
 800d882:	f7ff ffdb 	bl	800d83c <__mcmp>
 800d886:	1e05      	subs	r5, r0, #0
 800d888:	d110      	bne.n	800d8ac <__mdiff+0x38>
 800d88a:	0001      	movs	r1, r0
 800d88c:	9800      	ldr	r0, [sp, #0]
 800d88e:	f7ff fd4f 	bl	800d330 <_Balloc>
 800d892:	1e02      	subs	r2, r0, #0
 800d894:	d104      	bne.n	800d8a0 <__mdiff+0x2c>
 800d896:	4b40      	ldr	r3, [pc, #256]	@ (800d998 <__mdiff+0x124>)
 800d898:	4840      	ldr	r0, [pc, #256]	@ (800d99c <__mdiff+0x128>)
 800d89a:	4941      	ldr	r1, [pc, #260]	@ (800d9a0 <__mdiff+0x12c>)
 800d89c:	f000 fb22 	bl	800dee4 <__assert_func>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	6145      	str	r5, [r0, #20]
 800d8a4:	6103      	str	r3, [r0, #16]
 800d8a6:	0010      	movs	r0, r2
 800d8a8:	b007      	add	sp, #28
 800d8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8ac:	2600      	movs	r6, #0
 800d8ae:	42b0      	cmp	r0, r6
 800d8b0:	da03      	bge.n	800d8ba <__mdiff+0x46>
 800d8b2:	0023      	movs	r3, r4
 800d8b4:	003c      	movs	r4, r7
 800d8b6:	001f      	movs	r7, r3
 800d8b8:	3601      	adds	r6, #1
 800d8ba:	6861      	ldr	r1, [r4, #4]
 800d8bc:	9800      	ldr	r0, [sp, #0]
 800d8be:	f7ff fd37 	bl	800d330 <_Balloc>
 800d8c2:	1e02      	subs	r2, r0, #0
 800d8c4:	d103      	bne.n	800d8ce <__mdiff+0x5a>
 800d8c6:	4b34      	ldr	r3, [pc, #208]	@ (800d998 <__mdiff+0x124>)
 800d8c8:	4834      	ldr	r0, [pc, #208]	@ (800d99c <__mdiff+0x128>)
 800d8ca:	4936      	ldr	r1, [pc, #216]	@ (800d9a4 <__mdiff+0x130>)
 800d8cc:	e7e6      	b.n	800d89c <__mdiff+0x28>
 800d8ce:	6923      	ldr	r3, [r4, #16]
 800d8d0:	3414      	adds	r4, #20
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	18e3      	adds	r3, r4, r3
 800d8d8:	0021      	movs	r1, r4
 800d8da:	9401      	str	r4, [sp, #4]
 800d8dc:	003c      	movs	r4, r7
 800d8de:	9302      	str	r3, [sp, #8]
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	3414      	adds	r4, #20
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	18e3      	adds	r3, r4, r3
 800d8e8:	9303      	str	r3, [sp, #12]
 800d8ea:	0003      	movs	r3, r0
 800d8ec:	60c6      	str	r6, [r0, #12]
 800d8ee:	468c      	mov	ip, r1
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	3314      	adds	r3, #20
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	9305      	str	r3, [sp, #20]
 800d8f8:	4663      	mov	r3, ip
 800d8fa:	cb20      	ldmia	r3!, {r5}
 800d8fc:	b2a9      	uxth	r1, r5
 800d8fe:	000e      	movs	r6, r1
 800d900:	469c      	mov	ip, r3
 800d902:	cc08      	ldmia	r4!, {r3}
 800d904:	0c2d      	lsrs	r5, r5, #16
 800d906:	b299      	uxth	r1, r3
 800d908:	1a71      	subs	r1, r6, r1
 800d90a:	1809      	adds	r1, r1, r0
 800d90c:	0c1b      	lsrs	r3, r3, #16
 800d90e:	1408      	asrs	r0, r1, #16
 800d910:	1aeb      	subs	r3, r5, r3
 800d912:	181b      	adds	r3, r3, r0
 800d914:	1418      	asrs	r0, r3, #16
 800d916:	b289      	uxth	r1, r1
 800d918:	041b      	lsls	r3, r3, #16
 800d91a:	4319      	orrs	r1, r3
 800d91c:	9b05      	ldr	r3, [sp, #20]
 800d91e:	c302      	stmia	r3!, {r1}
 800d920:	9305      	str	r3, [sp, #20]
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	42a3      	cmp	r3, r4
 800d926:	d8e7      	bhi.n	800d8f8 <__mdiff+0x84>
 800d928:	0039      	movs	r1, r7
 800d92a:	9c03      	ldr	r4, [sp, #12]
 800d92c:	3115      	adds	r1, #21
 800d92e:	2304      	movs	r3, #4
 800d930:	428c      	cmp	r4, r1
 800d932:	d304      	bcc.n	800d93e <__mdiff+0xca>
 800d934:	1be3      	subs	r3, r4, r7
 800d936:	3b15      	subs	r3, #21
 800d938:	089b      	lsrs	r3, r3, #2
 800d93a:	3301      	adds	r3, #1
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	9901      	ldr	r1, [sp, #4]
 800d940:	18cd      	adds	r5, r1, r3
 800d942:	9904      	ldr	r1, [sp, #16]
 800d944:	002e      	movs	r6, r5
 800d946:	18cb      	adds	r3, r1, r3
 800d948:	001f      	movs	r7, r3
 800d94a:	9902      	ldr	r1, [sp, #8]
 800d94c:	428e      	cmp	r6, r1
 800d94e:	d311      	bcc.n	800d974 <__mdiff+0x100>
 800d950:	9c02      	ldr	r4, [sp, #8]
 800d952:	1ee9      	subs	r1, r5, #3
 800d954:	2000      	movs	r0, #0
 800d956:	428c      	cmp	r4, r1
 800d958:	d304      	bcc.n	800d964 <__mdiff+0xf0>
 800d95a:	0021      	movs	r1, r4
 800d95c:	3103      	adds	r1, #3
 800d95e:	1b49      	subs	r1, r1, r5
 800d960:	0889      	lsrs	r1, r1, #2
 800d962:	0088      	lsls	r0, r1, #2
 800d964:	181b      	adds	r3, r3, r0
 800d966:	3b04      	subs	r3, #4
 800d968:	6819      	ldr	r1, [r3, #0]
 800d96a:	2900      	cmp	r1, #0
 800d96c:	d010      	beq.n	800d990 <__mdiff+0x11c>
 800d96e:	9b00      	ldr	r3, [sp, #0]
 800d970:	6113      	str	r3, [r2, #16]
 800d972:	e798      	b.n	800d8a6 <__mdiff+0x32>
 800d974:	4684      	mov	ip, r0
 800d976:	ce02      	ldmia	r6!, {r1}
 800d978:	b288      	uxth	r0, r1
 800d97a:	4460      	add	r0, ip
 800d97c:	1400      	asrs	r0, r0, #16
 800d97e:	0c0c      	lsrs	r4, r1, #16
 800d980:	1904      	adds	r4, r0, r4
 800d982:	4461      	add	r1, ip
 800d984:	1420      	asrs	r0, r4, #16
 800d986:	b289      	uxth	r1, r1
 800d988:	0424      	lsls	r4, r4, #16
 800d98a:	4321      	orrs	r1, r4
 800d98c:	c702      	stmia	r7!, {r1}
 800d98e:	e7dc      	b.n	800d94a <__mdiff+0xd6>
 800d990:	9900      	ldr	r1, [sp, #0]
 800d992:	3901      	subs	r1, #1
 800d994:	9100      	str	r1, [sp, #0]
 800d996:	e7e6      	b.n	800d966 <__mdiff+0xf2>
 800d998:	0800e9c4 	.word	0x0800e9c4
 800d99c:	0800e9d5 	.word	0x0800e9d5
 800d9a0:	00000237 	.word	0x00000237
 800d9a4:	00000245 	.word	0x00000245

0800d9a8 <__d2b>:
 800d9a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	0016      	movs	r6, r2
 800d9ae:	001f      	movs	r7, r3
 800d9b0:	f7ff fcbe 	bl	800d330 <_Balloc>
 800d9b4:	1e04      	subs	r4, r0, #0
 800d9b6:	d105      	bne.n	800d9c4 <__d2b+0x1c>
 800d9b8:	0022      	movs	r2, r4
 800d9ba:	4b25      	ldr	r3, [pc, #148]	@ (800da50 <__d2b+0xa8>)
 800d9bc:	4825      	ldr	r0, [pc, #148]	@ (800da54 <__d2b+0xac>)
 800d9be:	4926      	ldr	r1, [pc, #152]	@ (800da58 <__d2b+0xb0>)
 800d9c0:	f000 fa90 	bl	800dee4 <__assert_func>
 800d9c4:	033b      	lsls	r3, r7, #12
 800d9c6:	007d      	lsls	r5, r7, #1
 800d9c8:	0b1b      	lsrs	r3, r3, #12
 800d9ca:	0d6d      	lsrs	r5, r5, #21
 800d9cc:	d002      	beq.n	800d9d4 <__d2b+0x2c>
 800d9ce:	2280      	movs	r2, #128	@ 0x80
 800d9d0:	0352      	lsls	r2, r2, #13
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	2e00      	cmp	r6, #0
 800d9d8:	d025      	beq.n	800da26 <__d2b+0x7e>
 800d9da:	4668      	mov	r0, sp
 800d9dc:	9600      	str	r6, [sp, #0]
 800d9de:	f7ff fd74 	bl	800d4ca <__lo0bits>
 800d9e2:	9b01      	ldr	r3, [sp, #4]
 800d9e4:	9900      	ldr	r1, [sp, #0]
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d01b      	beq.n	800da22 <__d2b+0x7a>
 800d9ea:	2220      	movs	r2, #32
 800d9ec:	001e      	movs	r6, r3
 800d9ee:	1a12      	subs	r2, r2, r0
 800d9f0:	4096      	lsls	r6, r2
 800d9f2:	0032      	movs	r2, r6
 800d9f4:	40c3      	lsrs	r3, r0
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	6162      	str	r2, [r4, #20]
 800d9fa:	9301      	str	r3, [sp, #4]
 800d9fc:	9e01      	ldr	r6, [sp, #4]
 800d9fe:	61a6      	str	r6, [r4, #24]
 800da00:	1e73      	subs	r3, r6, #1
 800da02:	419e      	sbcs	r6, r3
 800da04:	3601      	adds	r6, #1
 800da06:	6126      	str	r6, [r4, #16]
 800da08:	2d00      	cmp	r5, #0
 800da0a:	d014      	beq.n	800da36 <__d2b+0x8e>
 800da0c:	2635      	movs	r6, #53	@ 0x35
 800da0e:	4b13      	ldr	r3, [pc, #76]	@ (800da5c <__d2b+0xb4>)
 800da10:	18ed      	adds	r5, r5, r3
 800da12:	9b08      	ldr	r3, [sp, #32]
 800da14:	182d      	adds	r5, r5, r0
 800da16:	601d      	str	r5, [r3, #0]
 800da18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da1a:	1a36      	subs	r6, r6, r0
 800da1c:	601e      	str	r6, [r3, #0]
 800da1e:	0020      	movs	r0, r4
 800da20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da22:	6161      	str	r1, [r4, #20]
 800da24:	e7ea      	b.n	800d9fc <__d2b+0x54>
 800da26:	a801      	add	r0, sp, #4
 800da28:	f7ff fd4f 	bl	800d4ca <__lo0bits>
 800da2c:	9b01      	ldr	r3, [sp, #4]
 800da2e:	2601      	movs	r6, #1
 800da30:	6163      	str	r3, [r4, #20]
 800da32:	3020      	adds	r0, #32
 800da34:	e7e7      	b.n	800da06 <__d2b+0x5e>
 800da36:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <__d2b+0xb8>)
 800da38:	18c0      	adds	r0, r0, r3
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	6018      	str	r0, [r3, #0]
 800da3e:	4b09      	ldr	r3, [pc, #36]	@ (800da64 <__d2b+0xbc>)
 800da40:	18f3      	adds	r3, r6, r3
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	18e3      	adds	r3, r4, r3
 800da46:	6958      	ldr	r0, [r3, #20]
 800da48:	f7ff fd1e 	bl	800d488 <__hi0bits>
 800da4c:	0176      	lsls	r6, r6, #5
 800da4e:	e7e3      	b.n	800da18 <__d2b+0x70>
 800da50:	0800e9c4 	.word	0x0800e9c4
 800da54:	0800e9d5 	.word	0x0800e9d5
 800da58:	0000030f 	.word	0x0000030f
 800da5c:	fffffbcd 	.word	0xfffffbcd
 800da60:	fffffbce 	.word	0xfffffbce
 800da64:	3fffffff 	.word	0x3fffffff

0800da68 <__ssputs_r>:
 800da68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6a:	688e      	ldr	r6, [r1, #8]
 800da6c:	b085      	sub	sp, #20
 800da6e:	001f      	movs	r7, r3
 800da70:	000c      	movs	r4, r1
 800da72:	680b      	ldr	r3, [r1, #0]
 800da74:	9002      	str	r0, [sp, #8]
 800da76:	9203      	str	r2, [sp, #12]
 800da78:	42be      	cmp	r6, r7
 800da7a:	d830      	bhi.n	800dade <__ssputs_r+0x76>
 800da7c:	210c      	movs	r1, #12
 800da7e:	5e62      	ldrsh	r2, [r4, r1]
 800da80:	2190      	movs	r1, #144	@ 0x90
 800da82:	00c9      	lsls	r1, r1, #3
 800da84:	420a      	tst	r2, r1
 800da86:	d028      	beq.n	800dada <__ssputs_r+0x72>
 800da88:	2003      	movs	r0, #3
 800da8a:	6921      	ldr	r1, [r4, #16]
 800da8c:	1a5b      	subs	r3, r3, r1
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	6963      	ldr	r3, [r4, #20]
 800da92:	4343      	muls	r3, r0
 800da94:	9801      	ldr	r0, [sp, #4]
 800da96:	0fdd      	lsrs	r5, r3, #31
 800da98:	18ed      	adds	r5, r5, r3
 800da9a:	1c7b      	adds	r3, r7, #1
 800da9c:	181b      	adds	r3, r3, r0
 800da9e:	106d      	asrs	r5, r5, #1
 800daa0:	42ab      	cmp	r3, r5
 800daa2:	d900      	bls.n	800daa6 <__ssputs_r+0x3e>
 800daa4:	001d      	movs	r5, r3
 800daa6:	0552      	lsls	r2, r2, #21
 800daa8:	d528      	bpl.n	800dafc <__ssputs_r+0x94>
 800daaa:	0029      	movs	r1, r5
 800daac:	9802      	ldr	r0, [sp, #8]
 800daae:	f7ff fbaf 	bl	800d210 <_malloc_r>
 800dab2:	1e06      	subs	r6, r0, #0
 800dab4:	d02c      	beq.n	800db10 <__ssputs_r+0xa8>
 800dab6:	9a01      	ldr	r2, [sp, #4]
 800dab8:	6921      	ldr	r1, [r4, #16]
 800daba:	f000 fa09 	bl	800ded0 <memcpy>
 800dabe:	89a2      	ldrh	r2, [r4, #12]
 800dac0:	4b18      	ldr	r3, [pc, #96]	@ (800db24 <__ssputs_r+0xbc>)
 800dac2:	401a      	ands	r2, r3
 800dac4:	2380      	movs	r3, #128	@ 0x80
 800dac6:	4313      	orrs	r3, r2
 800dac8:	81a3      	strh	r3, [r4, #12]
 800daca:	9b01      	ldr	r3, [sp, #4]
 800dacc:	6126      	str	r6, [r4, #16]
 800dace:	18f6      	adds	r6, r6, r3
 800dad0:	6026      	str	r6, [r4, #0]
 800dad2:	003e      	movs	r6, r7
 800dad4:	6165      	str	r5, [r4, #20]
 800dad6:	1aed      	subs	r5, r5, r3
 800dad8:	60a5      	str	r5, [r4, #8]
 800dada:	42be      	cmp	r6, r7
 800dadc:	d900      	bls.n	800dae0 <__ssputs_r+0x78>
 800dade:	003e      	movs	r6, r7
 800dae0:	0032      	movs	r2, r6
 800dae2:	9903      	ldr	r1, [sp, #12]
 800dae4:	6820      	ldr	r0, [r4, #0]
 800dae6:	f000 f9ce 	bl	800de86 <memmove>
 800daea:	2000      	movs	r0, #0
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	1b9b      	subs	r3, r3, r6
 800daf0:	60a3      	str	r3, [r4, #8]
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	199b      	adds	r3, r3, r6
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	b005      	add	sp, #20
 800dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafc:	002a      	movs	r2, r5
 800dafe:	9802      	ldr	r0, [sp, #8]
 800db00:	f000 fa4d 	bl	800df9e <_realloc_r>
 800db04:	1e06      	subs	r6, r0, #0
 800db06:	d1e0      	bne.n	800daca <__ssputs_r+0x62>
 800db08:	6921      	ldr	r1, [r4, #16]
 800db0a:	9802      	ldr	r0, [sp, #8]
 800db0c:	f7ff fb0a 	bl	800d124 <_free_r>
 800db10:	230c      	movs	r3, #12
 800db12:	2001      	movs	r0, #1
 800db14:	9a02      	ldr	r2, [sp, #8]
 800db16:	4240      	negs	r0, r0
 800db18:	6013      	str	r3, [r2, #0]
 800db1a:	89a2      	ldrh	r2, [r4, #12]
 800db1c:	3334      	adds	r3, #52	@ 0x34
 800db1e:	4313      	orrs	r3, r2
 800db20:	81a3      	strh	r3, [r4, #12]
 800db22:	e7e9      	b.n	800daf8 <__ssputs_r+0x90>
 800db24:	fffffb7f 	.word	0xfffffb7f

0800db28 <_svfiprintf_r>:
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2a:	b0a1      	sub	sp, #132	@ 0x84
 800db2c:	9003      	str	r0, [sp, #12]
 800db2e:	001d      	movs	r5, r3
 800db30:	898b      	ldrh	r3, [r1, #12]
 800db32:	000f      	movs	r7, r1
 800db34:	0016      	movs	r6, r2
 800db36:	061b      	lsls	r3, r3, #24
 800db38:	d511      	bpl.n	800db5e <_svfiprintf_r+0x36>
 800db3a:	690b      	ldr	r3, [r1, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10e      	bne.n	800db5e <_svfiprintf_r+0x36>
 800db40:	2140      	movs	r1, #64	@ 0x40
 800db42:	f7ff fb65 	bl	800d210 <_malloc_r>
 800db46:	6038      	str	r0, [r7, #0]
 800db48:	6138      	str	r0, [r7, #16]
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d105      	bne.n	800db5a <_svfiprintf_r+0x32>
 800db4e:	230c      	movs	r3, #12
 800db50:	9a03      	ldr	r2, [sp, #12]
 800db52:	6013      	str	r3, [r2, #0]
 800db54:	2001      	movs	r0, #1
 800db56:	4240      	negs	r0, r0
 800db58:	e0cf      	b.n	800dcfa <_svfiprintf_r+0x1d2>
 800db5a:	2340      	movs	r3, #64	@ 0x40
 800db5c:	617b      	str	r3, [r7, #20]
 800db5e:	2300      	movs	r3, #0
 800db60:	ac08      	add	r4, sp, #32
 800db62:	6163      	str	r3, [r4, #20]
 800db64:	3320      	adds	r3, #32
 800db66:	7663      	strb	r3, [r4, #25]
 800db68:	3310      	adds	r3, #16
 800db6a:	76a3      	strb	r3, [r4, #26]
 800db6c:	9507      	str	r5, [sp, #28]
 800db6e:	0035      	movs	r5, r6
 800db70:	782b      	ldrb	r3, [r5, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <_svfiprintf_r+0x52>
 800db76:	2b25      	cmp	r3, #37	@ 0x25
 800db78:	d148      	bne.n	800dc0c <_svfiprintf_r+0xe4>
 800db7a:	1bab      	subs	r3, r5, r6
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	42b5      	cmp	r5, r6
 800db80:	d00b      	beq.n	800db9a <_svfiprintf_r+0x72>
 800db82:	0032      	movs	r2, r6
 800db84:	0039      	movs	r1, r7
 800db86:	9803      	ldr	r0, [sp, #12]
 800db88:	f7ff ff6e 	bl	800da68 <__ssputs_r>
 800db8c:	3001      	adds	r0, #1
 800db8e:	d100      	bne.n	800db92 <_svfiprintf_r+0x6a>
 800db90:	e0ae      	b.n	800dcf0 <_svfiprintf_r+0x1c8>
 800db92:	6963      	ldr	r3, [r4, #20]
 800db94:	9a05      	ldr	r2, [sp, #20]
 800db96:	189b      	adds	r3, r3, r2
 800db98:	6163      	str	r3, [r4, #20]
 800db9a:	782b      	ldrb	r3, [r5, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d100      	bne.n	800dba2 <_svfiprintf_r+0x7a>
 800dba0:	e0a6      	b.n	800dcf0 <_svfiprintf_r+0x1c8>
 800dba2:	2201      	movs	r2, #1
 800dba4:	2300      	movs	r3, #0
 800dba6:	4252      	negs	r2, r2
 800dba8:	6062      	str	r2, [r4, #4]
 800dbaa:	a904      	add	r1, sp, #16
 800dbac:	3254      	adds	r2, #84	@ 0x54
 800dbae:	1852      	adds	r2, r2, r1
 800dbb0:	1c6e      	adds	r6, r5, #1
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	60e3      	str	r3, [r4, #12]
 800dbb6:	60a3      	str	r3, [r4, #8]
 800dbb8:	7013      	strb	r3, [r2, #0]
 800dbba:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dbbc:	4b54      	ldr	r3, [pc, #336]	@ (800dd10 <_svfiprintf_r+0x1e8>)
 800dbbe:	2205      	movs	r2, #5
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	7831      	ldrb	r1, [r6, #0]
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	f7fe fc2c 	bl	800c422 <memchr>
 800dbca:	1c75      	adds	r5, r6, #1
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d11f      	bne.n	800dc10 <_svfiprintf_r+0xe8>
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	06d3      	lsls	r3, r2, #27
 800dbd4:	d504      	bpl.n	800dbe0 <_svfiprintf_r+0xb8>
 800dbd6:	2353      	movs	r3, #83	@ 0x53
 800dbd8:	a904      	add	r1, sp, #16
 800dbda:	185b      	adds	r3, r3, r1
 800dbdc:	2120      	movs	r1, #32
 800dbde:	7019      	strb	r1, [r3, #0]
 800dbe0:	0713      	lsls	r3, r2, #28
 800dbe2:	d504      	bpl.n	800dbee <_svfiprintf_r+0xc6>
 800dbe4:	2353      	movs	r3, #83	@ 0x53
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	185b      	adds	r3, r3, r1
 800dbea:	212b      	movs	r1, #43	@ 0x2b
 800dbec:	7019      	strb	r1, [r3, #0]
 800dbee:	7833      	ldrb	r3, [r6, #0]
 800dbf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbf2:	d016      	beq.n	800dc22 <_svfiprintf_r+0xfa>
 800dbf4:	0035      	movs	r5, r6
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	200a      	movs	r0, #10
 800dbfa:	68e3      	ldr	r3, [r4, #12]
 800dbfc:	782a      	ldrb	r2, [r5, #0]
 800dbfe:	1c6e      	adds	r6, r5, #1
 800dc00:	3a30      	subs	r2, #48	@ 0x30
 800dc02:	2a09      	cmp	r2, #9
 800dc04:	d950      	bls.n	800dca8 <_svfiprintf_r+0x180>
 800dc06:	2900      	cmp	r1, #0
 800dc08:	d111      	bne.n	800dc2e <_svfiprintf_r+0x106>
 800dc0a:	e017      	b.n	800dc3c <_svfiprintf_r+0x114>
 800dc0c:	3501      	adds	r5, #1
 800dc0e:	e7af      	b.n	800db70 <_svfiprintf_r+0x48>
 800dc10:	9b05      	ldr	r3, [sp, #20]
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	1ac0      	subs	r0, r0, r3
 800dc16:	2301      	movs	r3, #1
 800dc18:	4083      	lsls	r3, r0
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	002e      	movs	r6, r5
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	e7cc      	b.n	800dbbc <_svfiprintf_r+0x94>
 800dc22:	9b07      	ldr	r3, [sp, #28]
 800dc24:	1d19      	adds	r1, r3, #4
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	9107      	str	r1, [sp, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	db01      	blt.n	800dc32 <_svfiprintf_r+0x10a>
 800dc2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc30:	e004      	b.n	800dc3c <_svfiprintf_r+0x114>
 800dc32:	425b      	negs	r3, r3
 800dc34:	60e3      	str	r3, [r4, #12]
 800dc36:	2302      	movs	r3, #2
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	6023      	str	r3, [r4, #0]
 800dc3c:	782b      	ldrb	r3, [r5, #0]
 800dc3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc40:	d10c      	bne.n	800dc5c <_svfiprintf_r+0x134>
 800dc42:	786b      	ldrb	r3, [r5, #1]
 800dc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc46:	d134      	bne.n	800dcb2 <_svfiprintf_r+0x18a>
 800dc48:	9b07      	ldr	r3, [sp, #28]
 800dc4a:	3502      	adds	r5, #2
 800dc4c:	1d1a      	adds	r2, r3, #4
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	9207      	str	r2, [sp, #28]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	da01      	bge.n	800dc5a <_svfiprintf_r+0x132>
 800dc56:	2301      	movs	r3, #1
 800dc58:	425b      	negs	r3, r3
 800dc5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc5c:	4e2d      	ldr	r6, [pc, #180]	@ (800dd14 <_svfiprintf_r+0x1ec>)
 800dc5e:	2203      	movs	r2, #3
 800dc60:	0030      	movs	r0, r6
 800dc62:	7829      	ldrb	r1, [r5, #0]
 800dc64:	f7fe fbdd 	bl	800c422 <memchr>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d006      	beq.n	800dc7a <_svfiprintf_r+0x152>
 800dc6c:	2340      	movs	r3, #64	@ 0x40
 800dc6e:	1b80      	subs	r0, r0, r6
 800dc70:	4083      	lsls	r3, r0
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	3501      	adds	r5, #1
 800dc76:	4313      	orrs	r3, r2
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	7829      	ldrb	r1, [r5, #0]
 800dc7c:	2206      	movs	r2, #6
 800dc7e:	4826      	ldr	r0, [pc, #152]	@ (800dd18 <_svfiprintf_r+0x1f0>)
 800dc80:	1c6e      	adds	r6, r5, #1
 800dc82:	7621      	strb	r1, [r4, #24]
 800dc84:	f7fe fbcd 	bl	800c422 <memchr>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d038      	beq.n	800dcfe <_svfiprintf_r+0x1d6>
 800dc8c:	4b23      	ldr	r3, [pc, #140]	@ (800dd1c <_svfiprintf_r+0x1f4>)
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d122      	bne.n	800dcd8 <_svfiprintf_r+0x1b0>
 800dc92:	2207      	movs	r2, #7
 800dc94:	9b07      	ldr	r3, [sp, #28]
 800dc96:	3307      	adds	r3, #7
 800dc98:	4393      	bics	r3, r2
 800dc9a:	3308      	adds	r3, #8
 800dc9c:	9307      	str	r3, [sp, #28]
 800dc9e:	6963      	ldr	r3, [r4, #20]
 800dca0:	9a04      	ldr	r2, [sp, #16]
 800dca2:	189b      	adds	r3, r3, r2
 800dca4:	6163      	str	r3, [r4, #20]
 800dca6:	e762      	b.n	800db6e <_svfiprintf_r+0x46>
 800dca8:	4343      	muls	r3, r0
 800dcaa:	0035      	movs	r5, r6
 800dcac:	2101      	movs	r1, #1
 800dcae:	189b      	adds	r3, r3, r2
 800dcb0:	e7a4      	b.n	800dbfc <_svfiprintf_r+0xd4>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	200a      	movs	r0, #10
 800dcb6:	0019      	movs	r1, r3
 800dcb8:	3501      	adds	r5, #1
 800dcba:	6063      	str	r3, [r4, #4]
 800dcbc:	782a      	ldrb	r2, [r5, #0]
 800dcbe:	1c6e      	adds	r6, r5, #1
 800dcc0:	3a30      	subs	r2, #48	@ 0x30
 800dcc2:	2a09      	cmp	r2, #9
 800dcc4:	d903      	bls.n	800dcce <_svfiprintf_r+0x1a6>
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0c8      	beq.n	800dc5c <_svfiprintf_r+0x134>
 800dcca:	9109      	str	r1, [sp, #36]	@ 0x24
 800dccc:	e7c6      	b.n	800dc5c <_svfiprintf_r+0x134>
 800dcce:	4341      	muls	r1, r0
 800dcd0:	0035      	movs	r5, r6
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	1889      	adds	r1, r1, r2
 800dcd6:	e7f1      	b.n	800dcbc <_svfiprintf_r+0x194>
 800dcd8:	aa07      	add	r2, sp, #28
 800dcda:	9200      	str	r2, [sp, #0]
 800dcdc:	0021      	movs	r1, r4
 800dcde:	003a      	movs	r2, r7
 800dce0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd20 <_svfiprintf_r+0x1f8>)
 800dce2:	9803      	ldr	r0, [sp, #12]
 800dce4:	f7fd fe0c 	bl	800b900 <_printf_float>
 800dce8:	9004      	str	r0, [sp, #16]
 800dcea:	9b04      	ldr	r3, [sp, #16]
 800dcec:	3301      	adds	r3, #1
 800dcee:	d1d6      	bne.n	800dc9e <_svfiprintf_r+0x176>
 800dcf0:	89bb      	ldrh	r3, [r7, #12]
 800dcf2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dcf4:	065b      	lsls	r3, r3, #25
 800dcf6:	d500      	bpl.n	800dcfa <_svfiprintf_r+0x1d2>
 800dcf8:	e72c      	b.n	800db54 <_svfiprintf_r+0x2c>
 800dcfa:	b021      	add	sp, #132	@ 0x84
 800dcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcfe:	aa07      	add	r2, sp, #28
 800dd00:	9200      	str	r2, [sp, #0]
 800dd02:	0021      	movs	r1, r4
 800dd04:	003a      	movs	r2, r7
 800dd06:	4b06      	ldr	r3, [pc, #24]	@ (800dd20 <_svfiprintf_r+0x1f8>)
 800dd08:	9803      	ldr	r0, [sp, #12]
 800dd0a:	f7fe f8a7 	bl	800be5c <_printf_i>
 800dd0e:	e7eb      	b.n	800dce8 <_svfiprintf_r+0x1c0>
 800dd10:	0800ea2e 	.word	0x0800ea2e
 800dd14:	0800ea34 	.word	0x0800ea34
 800dd18:	0800ea38 	.word	0x0800ea38
 800dd1c:	0800b901 	.word	0x0800b901
 800dd20:	0800da69 	.word	0x0800da69

0800dd24 <__sflush_r>:
 800dd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd26:	220c      	movs	r2, #12
 800dd28:	5e8b      	ldrsh	r3, [r1, r2]
 800dd2a:	0005      	movs	r5, r0
 800dd2c:	000c      	movs	r4, r1
 800dd2e:	071a      	lsls	r2, r3, #28
 800dd30:	d456      	bmi.n	800dde0 <__sflush_r+0xbc>
 800dd32:	684a      	ldr	r2, [r1, #4]
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	dc02      	bgt.n	800dd3e <__sflush_r+0x1a>
 800dd38:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	dd4e      	ble.n	800dddc <__sflush_r+0xb8>
 800dd3e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800dd40:	2f00      	cmp	r7, #0
 800dd42:	d04b      	beq.n	800dddc <__sflush_r+0xb8>
 800dd44:	2200      	movs	r2, #0
 800dd46:	2080      	movs	r0, #128	@ 0x80
 800dd48:	682e      	ldr	r6, [r5, #0]
 800dd4a:	602a      	str	r2, [r5, #0]
 800dd4c:	001a      	movs	r2, r3
 800dd4e:	0140      	lsls	r0, r0, #5
 800dd50:	6a21      	ldr	r1, [r4, #32]
 800dd52:	4002      	ands	r2, r0
 800dd54:	4203      	tst	r3, r0
 800dd56:	d033      	beq.n	800ddc0 <__sflush_r+0x9c>
 800dd58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	075b      	lsls	r3, r3, #29
 800dd5e:	d506      	bpl.n	800dd6e <__sflush_r+0x4a>
 800dd60:	6863      	ldr	r3, [r4, #4]
 800dd62:	1ad2      	subs	r2, r2, r3
 800dd64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <__sflush_r+0x4a>
 800dd6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd6c:	1ad2      	subs	r2, r2, r3
 800dd6e:	2300      	movs	r3, #0
 800dd70:	0028      	movs	r0, r5
 800dd72:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800dd74:	6a21      	ldr	r1, [r4, #32]
 800dd76:	47b8      	blx	r7
 800dd78:	89a2      	ldrh	r2, [r4, #12]
 800dd7a:	1c43      	adds	r3, r0, #1
 800dd7c:	d106      	bne.n	800dd8c <__sflush_r+0x68>
 800dd7e:	6829      	ldr	r1, [r5, #0]
 800dd80:	291d      	cmp	r1, #29
 800dd82:	d846      	bhi.n	800de12 <__sflush_r+0xee>
 800dd84:	4b29      	ldr	r3, [pc, #164]	@ (800de2c <__sflush_r+0x108>)
 800dd86:	40cb      	lsrs	r3, r1
 800dd88:	07db      	lsls	r3, r3, #31
 800dd8a:	d542      	bpl.n	800de12 <__sflush_r+0xee>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	6063      	str	r3, [r4, #4]
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	6023      	str	r3, [r4, #0]
 800dd94:	04d2      	lsls	r2, r2, #19
 800dd96:	d505      	bpl.n	800dda4 <__sflush_r+0x80>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	d102      	bne.n	800dda2 <__sflush_r+0x7e>
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d100      	bne.n	800dda4 <__sflush_r+0x80>
 800dda2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dda4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dda6:	602e      	str	r6, [r5, #0]
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	d017      	beq.n	800dddc <__sflush_r+0xb8>
 800ddac:	0023      	movs	r3, r4
 800ddae:	3344      	adds	r3, #68	@ 0x44
 800ddb0:	4299      	cmp	r1, r3
 800ddb2:	d002      	beq.n	800ddba <__sflush_r+0x96>
 800ddb4:	0028      	movs	r0, r5
 800ddb6:	f7ff f9b5 	bl	800d124 <_free_r>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddbe:	e00d      	b.n	800dddc <__sflush_r+0xb8>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	0028      	movs	r0, r5
 800ddc4:	47b8      	blx	r7
 800ddc6:	0002      	movs	r2, r0
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d1c6      	bne.n	800dd5a <__sflush_r+0x36>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d0c3      	beq.n	800dd5a <__sflush_r+0x36>
 800ddd2:	2b1d      	cmp	r3, #29
 800ddd4:	d001      	beq.n	800ddda <__sflush_r+0xb6>
 800ddd6:	2b16      	cmp	r3, #22
 800ddd8:	d11a      	bne.n	800de10 <__sflush_r+0xec>
 800ddda:	602e      	str	r6, [r5, #0]
 800dddc:	2000      	movs	r0, #0
 800ddde:	e01e      	b.n	800de1e <__sflush_r+0xfa>
 800dde0:	690e      	ldr	r6, [r1, #16]
 800dde2:	2e00      	cmp	r6, #0
 800dde4:	d0fa      	beq.n	800dddc <__sflush_r+0xb8>
 800dde6:	680f      	ldr	r7, [r1, #0]
 800dde8:	600e      	str	r6, [r1, #0]
 800ddea:	1bba      	subs	r2, r7, r6
 800ddec:	9201      	str	r2, [sp, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	079b      	lsls	r3, r3, #30
 800ddf2:	d100      	bne.n	800ddf6 <__sflush_r+0xd2>
 800ddf4:	694a      	ldr	r2, [r1, #20]
 800ddf6:	60a2      	str	r2, [r4, #8]
 800ddf8:	9b01      	ldr	r3, [sp, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	ddee      	ble.n	800dddc <__sflush_r+0xb8>
 800ddfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800de00:	0032      	movs	r2, r6
 800de02:	001f      	movs	r7, r3
 800de04:	0028      	movs	r0, r5
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	6a21      	ldr	r1, [r4, #32]
 800de0a:	47b8      	blx	r7
 800de0c:	2800      	cmp	r0, #0
 800de0e:	dc07      	bgt.n	800de20 <__sflush_r+0xfc>
 800de10:	89a2      	ldrh	r2, [r4, #12]
 800de12:	2340      	movs	r3, #64	@ 0x40
 800de14:	2001      	movs	r0, #1
 800de16:	4313      	orrs	r3, r2
 800de18:	b21b      	sxth	r3, r3
 800de1a:	81a3      	strh	r3, [r4, #12]
 800de1c:	4240      	negs	r0, r0
 800de1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	1836      	adds	r6, r6, r0
 800de24:	1a1b      	subs	r3, r3, r0
 800de26:	9301      	str	r3, [sp, #4]
 800de28:	e7e6      	b.n	800ddf8 <__sflush_r+0xd4>
 800de2a:	46c0      	nop			@ (mov r8, r8)
 800de2c:	20400001 	.word	0x20400001

0800de30 <_fflush_r>:
 800de30:	690b      	ldr	r3, [r1, #16]
 800de32:	b570      	push	{r4, r5, r6, lr}
 800de34:	0005      	movs	r5, r0
 800de36:	000c      	movs	r4, r1
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d102      	bne.n	800de42 <_fflush_r+0x12>
 800de3c:	2500      	movs	r5, #0
 800de3e:	0028      	movs	r0, r5
 800de40:	bd70      	pop	{r4, r5, r6, pc}
 800de42:	2800      	cmp	r0, #0
 800de44:	d004      	beq.n	800de50 <_fflush_r+0x20>
 800de46:	6a03      	ldr	r3, [r0, #32]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d101      	bne.n	800de50 <_fflush_r+0x20>
 800de4c:	f7fe f9a2 	bl	800c194 <__sinit>
 800de50:	220c      	movs	r2, #12
 800de52:	5ea3      	ldrsh	r3, [r4, r2]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d0f1      	beq.n	800de3c <_fflush_r+0xc>
 800de58:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de5a:	07d2      	lsls	r2, r2, #31
 800de5c:	d404      	bmi.n	800de68 <_fflush_r+0x38>
 800de5e:	059b      	lsls	r3, r3, #22
 800de60:	d402      	bmi.n	800de68 <_fflush_r+0x38>
 800de62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de64:	f7fe fad3 	bl	800c40e <__retarget_lock_acquire_recursive>
 800de68:	0028      	movs	r0, r5
 800de6a:	0021      	movs	r1, r4
 800de6c:	f7ff ff5a 	bl	800dd24 <__sflush_r>
 800de70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de72:	0005      	movs	r5, r0
 800de74:	07db      	lsls	r3, r3, #31
 800de76:	d4e2      	bmi.n	800de3e <_fflush_r+0xe>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	059b      	lsls	r3, r3, #22
 800de7c:	d4df      	bmi.n	800de3e <_fflush_r+0xe>
 800de7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de80:	f7fe fac6 	bl	800c410 <__retarget_lock_release_recursive>
 800de84:	e7db      	b.n	800de3e <_fflush_r+0xe>

0800de86 <memmove>:
 800de86:	b510      	push	{r4, lr}
 800de88:	4288      	cmp	r0, r1
 800de8a:	d902      	bls.n	800de92 <memmove+0xc>
 800de8c:	188b      	adds	r3, r1, r2
 800de8e:	4298      	cmp	r0, r3
 800de90:	d308      	bcc.n	800dea4 <memmove+0x1e>
 800de92:	2300      	movs	r3, #0
 800de94:	429a      	cmp	r2, r3
 800de96:	d007      	beq.n	800dea8 <memmove+0x22>
 800de98:	5ccc      	ldrb	r4, [r1, r3]
 800de9a:	54c4      	strb	r4, [r0, r3]
 800de9c:	3301      	adds	r3, #1
 800de9e:	e7f9      	b.n	800de94 <memmove+0xe>
 800dea0:	5c8b      	ldrb	r3, [r1, r2]
 800dea2:	5483      	strb	r3, [r0, r2]
 800dea4:	3a01      	subs	r2, #1
 800dea6:	d2fb      	bcs.n	800dea0 <memmove+0x1a>
 800dea8:	bd10      	pop	{r4, pc}
	...

0800deac <_sbrk_r>:
 800deac:	2300      	movs	r3, #0
 800deae:	b570      	push	{r4, r5, r6, lr}
 800deb0:	4d06      	ldr	r5, [pc, #24]	@ (800decc <_sbrk_r+0x20>)
 800deb2:	0004      	movs	r4, r0
 800deb4:	0008      	movs	r0, r1
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	f7f7 fc70 	bl	800579c <_sbrk>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d103      	bne.n	800dec8 <_sbrk_r+0x1c>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d000      	beq.n	800dec8 <_sbrk_r+0x1c>
 800dec6:	6023      	str	r3, [r4, #0]
 800dec8:	bd70      	pop	{r4, r5, r6, pc}
 800deca:	46c0      	nop			@ (mov r8, r8)
 800decc:	2000074c 	.word	0x2000074c

0800ded0 <memcpy>:
 800ded0:	2300      	movs	r3, #0
 800ded2:	b510      	push	{r4, lr}
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d100      	bne.n	800deda <memcpy+0xa>
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	5ccc      	ldrb	r4, [r1, r3]
 800dedc:	54c4      	strb	r4, [r0, r3]
 800dede:	3301      	adds	r3, #1
 800dee0:	e7f8      	b.n	800ded4 <memcpy+0x4>
	...

0800dee4 <__assert_func>:
 800dee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dee6:	0014      	movs	r4, r2
 800dee8:	001a      	movs	r2, r3
 800deea:	4b09      	ldr	r3, [pc, #36]	@ (800df10 <__assert_func+0x2c>)
 800deec:	0005      	movs	r5, r0
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	000e      	movs	r6, r1
 800def2:	68d8      	ldr	r0, [r3, #12]
 800def4:	4b07      	ldr	r3, [pc, #28]	@ (800df14 <__assert_func+0x30>)
 800def6:	2c00      	cmp	r4, #0
 800def8:	d101      	bne.n	800defe <__assert_func+0x1a>
 800defa:	4b07      	ldr	r3, [pc, #28]	@ (800df18 <__assert_func+0x34>)
 800defc:	001c      	movs	r4, r3
 800defe:	4907      	ldr	r1, [pc, #28]	@ (800df1c <__assert_func+0x38>)
 800df00:	9301      	str	r3, [sp, #4]
 800df02:	9402      	str	r4, [sp, #8]
 800df04:	002b      	movs	r3, r5
 800df06:	9600      	str	r6, [sp, #0]
 800df08:	f000 f886 	bl	800e018 <fiprintf>
 800df0c:	f000 f894 	bl	800e038 <abort>
 800df10:	20000028 	.word	0x20000028
 800df14:	0800ea49 	.word	0x0800ea49
 800df18:	0800ea84 	.word	0x0800ea84
 800df1c:	0800ea56 	.word	0x0800ea56

0800df20 <_calloc_r>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	0c0b      	lsrs	r3, r1, #16
 800df24:	0c15      	lsrs	r5, r2, #16
 800df26:	2b00      	cmp	r3, #0
 800df28:	d11e      	bne.n	800df68 <_calloc_r+0x48>
 800df2a:	2d00      	cmp	r5, #0
 800df2c:	d10c      	bne.n	800df48 <_calloc_r+0x28>
 800df2e:	b289      	uxth	r1, r1
 800df30:	b294      	uxth	r4, r2
 800df32:	434c      	muls	r4, r1
 800df34:	0021      	movs	r1, r4
 800df36:	f7ff f96b 	bl	800d210 <_malloc_r>
 800df3a:	1e05      	subs	r5, r0, #0
 800df3c:	d01b      	beq.n	800df76 <_calloc_r+0x56>
 800df3e:	0022      	movs	r2, r4
 800df40:	2100      	movs	r1, #0
 800df42:	f7fe f9c9 	bl	800c2d8 <memset>
 800df46:	e016      	b.n	800df76 <_calloc_r+0x56>
 800df48:	1c2b      	adds	r3, r5, #0
 800df4a:	1c0c      	adds	r4, r1, #0
 800df4c:	b289      	uxth	r1, r1
 800df4e:	b292      	uxth	r2, r2
 800df50:	434a      	muls	r2, r1
 800df52:	b29b      	uxth	r3, r3
 800df54:	b2a1      	uxth	r1, r4
 800df56:	4359      	muls	r1, r3
 800df58:	0c14      	lsrs	r4, r2, #16
 800df5a:	190c      	adds	r4, r1, r4
 800df5c:	0c23      	lsrs	r3, r4, #16
 800df5e:	d107      	bne.n	800df70 <_calloc_r+0x50>
 800df60:	0424      	lsls	r4, r4, #16
 800df62:	b292      	uxth	r2, r2
 800df64:	4314      	orrs	r4, r2
 800df66:	e7e5      	b.n	800df34 <_calloc_r+0x14>
 800df68:	2d00      	cmp	r5, #0
 800df6a:	d101      	bne.n	800df70 <_calloc_r+0x50>
 800df6c:	1c14      	adds	r4, r2, #0
 800df6e:	e7ed      	b.n	800df4c <_calloc_r+0x2c>
 800df70:	230c      	movs	r3, #12
 800df72:	2500      	movs	r5, #0
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	0028      	movs	r0, r5
 800df78:	bd70      	pop	{r4, r5, r6, pc}

0800df7a <__ascii_mbtowc>:
 800df7a:	b082      	sub	sp, #8
 800df7c:	2900      	cmp	r1, #0
 800df7e:	d100      	bne.n	800df82 <__ascii_mbtowc+0x8>
 800df80:	a901      	add	r1, sp, #4
 800df82:	1e10      	subs	r0, r2, #0
 800df84:	d006      	beq.n	800df94 <__ascii_mbtowc+0x1a>
 800df86:	2b00      	cmp	r3, #0
 800df88:	d006      	beq.n	800df98 <__ascii_mbtowc+0x1e>
 800df8a:	7813      	ldrb	r3, [r2, #0]
 800df8c:	600b      	str	r3, [r1, #0]
 800df8e:	7810      	ldrb	r0, [r2, #0]
 800df90:	1e43      	subs	r3, r0, #1
 800df92:	4198      	sbcs	r0, r3
 800df94:	b002      	add	sp, #8
 800df96:	4770      	bx	lr
 800df98:	2002      	movs	r0, #2
 800df9a:	4240      	negs	r0, r0
 800df9c:	e7fa      	b.n	800df94 <__ascii_mbtowc+0x1a>

0800df9e <_realloc_r>:
 800df9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfa0:	0006      	movs	r6, r0
 800dfa2:	000c      	movs	r4, r1
 800dfa4:	0015      	movs	r5, r2
 800dfa6:	2900      	cmp	r1, #0
 800dfa8:	d105      	bne.n	800dfb6 <_realloc_r+0x18>
 800dfaa:	0011      	movs	r1, r2
 800dfac:	f7ff f930 	bl	800d210 <_malloc_r>
 800dfb0:	0004      	movs	r4, r0
 800dfb2:	0020      	movs	r0, r4
 800dfb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	d103      	bne.n	800dfc2 <_realloc_r+0x24>
 800dfba:	f7ff f8b3 	bl	800d124 <_free_r>
 800dfbe:	002c      	movs	r4, r5
 800dfc0:	e7f7      	b.n	800dfb2 <_realloc_r+0x14>
 800dfc2:	f000 f840 	bl	800e046 <_malloc_usable_size_r>
 800dfc6:	0007      	movs	r7, r0
 800dfc8:	4285      	cmp	r5, r0
 800dfca:	d802      	bhi.n	800dfd2 <_realloc_r+0x34>
 800dfcc:	0843      	lsrs	r3, r0, #1
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	d3ef      	bcc.n	800dfb2 <_realloc_r+0x14>
 800dfd2:	0029      	movs	r1, r5
 800dfd4:	0030      	movs	r0, r6
 800dfd6:	f7ff f91b 	bl	800d210 <_malloc_r>
 800dfda:	9001      	str	r0, [sp, #4]
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d101      	bne.n	800dfe4 <_realloc_r+0x46>
 800dfe0:	9c01      	ldr	r4, [sp, #4]
 800dfe2:	e7e6      	b.n	800dfb2 <_realloc_r+0x14>
 800dfe4:	002a      	movs	r2, r5
 800dfe6:	42bd      	cmp	r5, r7
 800dfe8:	d900      	bls.n	800dfec <_realloc_r+0x4e>
 800dfea:	003a      	movs	r2, r7
 800dfec:	0021      	movs	r1, r4
 800dfee:	9801      	ldr	r0, [sp, #4]
 800dff0:	f7ff ff6e 	bl	800ded0 <memcpy>
 800dff4:	0021      	movs	r1, r4
 800dff6:	0030      	movs	r0, r6
 800dff8:	f7ff f894 	bl	800d124 <_free_r>
 800dffc:	e7f0      	b.n	800dfe0 <_realloc_r+0x42>

0800dffe <__ascii_wctomb>:
 800dffe:	0003      	movs	r3, r0
 800e000:	1e08      	subs	r0, r1, #0
 800e002:	d005      	beq.n	800e010 <__ascii_wctomb+0x12>
 800e004:	2aff      	cmp	r2, #255	@ 0xff
 800e006:	d904      	bls.n	800e012 <__ascii_wctomb+0x14>
 800e008:	228a      	movs	r2, #138	@ 0x8a
 800e00a:	2001      	movs	r0, #1
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	4240      	negs	r0, r0
 800e010:	4770      	bx	lr
 800e012:	2001      	movs	r0, #1
 800e014:	700a      	strb	r2, [r1, #0]
 800e016:	e7fb      	b.n	800e010 <__ascii_wctomb+0x12>

0800e018 <fiprintf>:
 800e018:	b40e      	push	{r1, r2, r3}
 800e01a:	b517      	push	{r0, r1, r2, r4, lr}
 800e01c:	4c05      	ldr	r4, [pc, #20]	@ (800e034 <fiprintf+0x1c>)
 800e01e:	ab05      	add	r3, sp, #20
 800e020:	cb04      	ldmia	r3!, {r2}
 800e022:	0001      	movs	r1, r0
 800e024:	6820      	ldr	r0, [r4, #0]
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	f000 f83c 	bl	800e0a4 <_vfiprintf_r>
 800e02c:	bc1e      	pop	{r1, r2, r3, r4}
 800e02e:	bc08      	pop	{r3}
 800e030:	b003      	add	sp, #12
 800e032:	4718      	bx	r3
 800e034:	20000028 	.word	0x20000028

0800e038 <abort>:
 800e038:	2006      	movs	r0, #6
 800e03a:	b510      	push	{r4, lr}
 800e03c:	f000 fa18 	bl	800e470 <raise>
 800e040:	2001      	movs	r0, #1
 800e042:	f7f7 fb39 	bl	80056b8 <_exit>

0800e046 <_malloc_usable_size_r>:
 800e046:	1f0b      	subs	r3, r1, #4
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	1f18      	subs	r0, r3, #4
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	da01      	bge.n	800e054 <_malloc_usable_size_r+0xe>
 800e050:	580b      	ldr	r3, [r1, r0]
 800e052:	18c0      	adds	r0, r0, r3
 800e054:	4770      	bx	lr

0800e056 <__sfputc_r>:
 800e056:	6893      	ldr	r3, [r2, #8]
 800e058:	b510      	push	{r4, lr}
 800e05a:	3b01      	subs	r3, #1
 800e05c:	6093      	str	r3, [r2, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	da04      	bge.n	800e06c <__sfputc_r+0x16>
 800e062:	6994      	ldr	r4, [r2, #24]
 800e064:	42a3      	cmp	r3, r4
 800e066:	db07      	blt.n	800e078 <__sfputc_r+0x22>
 800e068:	290a      	cmp	r1, #10
 800e06a:	d005      	beq.n	800e078 <__sfputc_r+0x22>
 800e06c:	6813      	ldr	r3, [r2, #0]
 800e06e:	1c58      	adds	r0, r3, #1
 800e070:	6010      	str	r0, [r2, #0]
 800e072:	7019      	strb	r1, [r3, #0]
 800e074:	0008      	movs	r0, r1
 800e076:	bd10      	pop	{r4, pc}
 800e078:	f000 f930 	bl	800e2dc <__swbuf_r>
 800e07c:	0001      	movs	r1, r0
 800e07e:	e7f9      	b.n	800e074 <__sfputc_r+0x1e>

0800e080 <__sfputs_r>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	0006      	movs	r6, r0
 800e084:	000f      	movs	r7, r1
 800e086:	0014      	movs	r4, r2
 800e088:	18d5      	adds	r5, r2, r3
 800e08a:	42ac      	cmp	r4, r5
 800e08c:	d101      	bne.n	800e092 <__sfputs_r+0x12>
 800e08e:	2000      	movs	r0, #0
 800e090:	e007      	b.n	800e0a2 <__sfputs_r+0x22>
 800e092:	7821      	ldrb	r1, [r4, #0]
 800e094:	003a      	movs	r2, r7
 800e096:	0030      	movs	r0, r6
 800e098:	f7ff ffdd 	bl	800e056 <__sfputc_r>
 800e09c:	3401      	adds	r4, #1
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d1f3      	bne.n	800e08a <__sfputs_r+0xa>
 800e0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0a4 <_vfiprintf_r>:
 800e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a6:	b0a1      	sub	sp, #132	@ 0x84
 800e0a8:	000f      	movs	r7, r1
 800e0aa:	0015      	movs	r5, r2
 800e0ac:	001e      	movs	r6, r3
 800e0ae:	9003      	str	r0, [sp, #12]
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d004      	beq.n	800e0be <_vfiprintf_r+0x1a>
 800e0b4:	6a03      	ldr	r3, [r0, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <_vfiprintf_r+0x1a>
 800e0ba:	f7fe f86b 	bl	800c194 <__sinit>
 800e0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0c0:	07db      	lsls	r3, r3, #31
 800e0c2:	d405      	bmi.n	800e0d0 <_vfiprintf_r+0x2c>
 800e0c4:	89bb      	ldrh	r3, [r7, #12]
 800e0c6:	059b      	lsls	r3, r3, #22
 800e0c8:	d402      	bmi.n	800e0d0 <_vfiprintf_r+0x2c>
 800e0ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e0cc:	f7fe f99f 	bl	800c40e <__retarget_lock_acquire_recursive>
 800e0d0:	89bb      	ldrh	r3, [r7, #12]
 800e0d2:	071b      	lsls	r3, r3, #28
 800e0d4:	d502      	bpl.n	800e0dc <_vfiprintf_r+0x38>
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d113      	bne.n	800e104 <_vfiprintf_r+0x60>
 800e0dc:	0039      	movs	r1, r7
 800e0de:	9803      	ldr	r0, [sp, #12]
 800e0e0:	f000 f93e 	bl	800e360 <__swsetup_r>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d00d      	beq.n	800e104 <_vfiprintf_r+0x60>
 800e0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0ea:	07db      	lsls	r3, r3, #31
 800e0ec:	d503      	bpl.n	800e0f6 <_vfiprintf_r+0x52>
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	4240      	negs	r0, r0
 800e0f2:	b021      	add	sp, #132	@ 0x84
 800e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f6:	89bb      	ldrh	r3, [r7, #12]
 800e0f8:	059b      	lsls	r3, r3, #22
 800e0fa:	d4f8      	bmi.n	800e0ee <_vfiprintf_r+0x4a>
 800e0fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e0fe:	f7fe f987 	bl	800c410 <__retarget_lock_release_recursive>
 800e102:	e7f4      	b.n	800e0ee <_vfiprintf_r+0x4a>
 800e104:	2300      	movs	r3, #0
 800e106:	ac08      	add	r4, sp, #32
 800e108:	6163      	str	r3, [r4, #20]
 800e10a:	3320      	adds	r3, #32
 800e10c:	7663      	strb	r3, [r4, #25]
 800e10e:	3310      	adds	r3, #16
 800e110:	76a3      	strb	r3, [r4, #26]
 800e112:	9607      	str	r6, [sp, #28]
 800e114:	002e      	movs	r6, r5
 800e116:	7833      	ldrb	r3, [r6, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d001      	beq.n	800e120 <_vfiprintf_r+0x7c>
 800e11c:	2b25      	cmp	r3, #37	@ 0x25
 800e11e:	d148      	bne.n	800e1b2 <_vfiprintf_r+0x10e>
 800e120:	1b73      	subs	r3, r6, r5
 800e122:	9305      	str	r3, [sp, #20]
 800e124:	42ae      	cmp	r6, r5
 800e126:	d00b      	beq.n	800e140 <_vfiprintf_r+0x9c>
 800e128:	002a      	movs	r2, r5
 800e12a:	0039      	movs	r1, r7
 800e12c:	9803      	ldr	r0, [sp, #12]
 800e12e:	f7ff ffa7 	bl	800e080 <__sfputs_r>
 800e132:	3001      	adds	r0, #1
 800e134:	d100      	bne.n	800e138 <_vfiprintf_r+0x94>
 800e136:	e0ae      	b.n	800e296 <_vfiprintf_r+0x1f2>
 800e138:	6963      	ldr	r3, [r4, #20]
 800e13a:	9a05      	ldr	r2, [sp, #20]
 800e13c:	189b      	adds	r3, r3, r2
 800e13e:	6163      	str	r3, [r4, #20]
 800e140:	7833      	ldrb	r3, [r6, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d100      	bne.n	800e148 <_vfiprintf_r+0xa4>
 800e146:	e0a6      	b.n	800e296 <_vfiprintf_r+0x1f2>
 800e148:	2201      	movs	r2, #1
 800e14a:	2300      	movs	r3, #0
 800e14c:	4252      	negs	r2, r2
 800e14e:	6062      	str	r2, [r4, #4]
 800e150:	a904      	add	r1, sp, #16
 800e152:	3254      	adds	r2, #84	@ 0x54
 800e154:	1852      	adds	r2, r2, r1
 800e156:	1c75      	adds	r5, r6, #1
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	60e3      	str	r3, [r4, #12]
 800e15c:	60a3      	str	r3, [r4, #8]
 800e15e:	7013      	strb	r3, [r2, #0]
 800e160:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e162:	4b59      	ldr	r3, [pc, #356]	@ (800e2c8 <_vfiprintf_r+0x224>)
 800e164:	2205      	movs	r2, #5
 800e166:	0018      	movs	r0, r3
 800e168:	7829      	ldrb	r1, [r5, #0]
 800e16a:	9305      	str	r3, [sp, #20]
 800e16c:	f7fe f959 	bl	800c422 <memchr>
 800e170:	1c6e      	adds	r6, r5, #1
 800e172:	2800      	cmp	r0, #0
 800e174:	d11f      	bne.n	800e1b6 <_vfiprintf_r+0x112>
 800e176:	6822      	ldr	r2, [r4, #0]
 800e178:	06d3      	lsls	r3, r2, #27
 800e17a:	d504      	bpl.n	800e186 <_vfiprintf_r+0xe2>
 800e17c:	2353      	movs	r3, #83	@ 0x53
 800e17e:	a904      	add	r1, sp, #16
 800e180:	185b      	adds	r3, r3, r1
 800e182:	2120      	movs	r1, #32
 800e184:	7019      	strb	r1, [r3, #0]
 800e186:	0713      	lsls	r3, r2, #28
 800e188:	d504      	bpl.n	800e194 <_vfiprintf_r+0xf0>
 800e18a:	2353      	movs	r3, #83	@ 0x53
 800e18c:	a904      	add	r1, sp, #16
 800e18e:	185b      	adds	r3, r3, r1
 800e190:	212b      	movs	r1, #43	@ 0x2b
 800e192:	7019      	strb	r1, [r3, #0]
 800e194:	782b      	ldrb	r3, [r5, #0]
 800e196:	2b2a      	cmp	r3, #42	@ 0x2a
 800e198:	d016      	beq.n	800e1c8 <_vfiprintf_r+0x124>
 800e19a:	002e      	movs	r6, r5
 800e19c:	2100      	movs	r1, #0
 800e19e:	200a      	movs	r0, #10
 800e1a0:	68e3      	ldr	r3, [r4, #12]
 800e1a2:	7832      	ldrb	r2, [r6, #0]
 800e1a4:	1c75      	adds	r5, r6, #1
 800e1a6:	3a30      	subs	r2, #48	@ 0x30
 800e1a8:	2a09      	cmp	r2, #9
 800e1aa:	d950      	bls.n	800e24e <_vfiprintf_r+0x1aa>
 800e1ac:	2900      	cmp	r1, #0
 800e1ae:	d111      	bne.n	800e1d4 <_vfiprintf_r+0x130>
 800e1b0:	e017      	b.n	800e1e2 <_vfiprintf_r+0x13e>
 800e1b2:	3601      	adds	r6, #1
 800e1b4:	e7af      	b.n	800e116 <_vfiprintf_r+0x72>
 800e1b6:	9b05      	ldr	r3, [sp, #20]
 800e1b8:	6822      	ldr	r2, [r4, #0]
 800e1ba:	1ac0      	subs	r0, r0, r3
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4083      	lsls	r3, r0
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	0035      	movs	r5, r6
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	e7cc      	b.n	800e162 <_vfiprintf_r+0xbe>
 800e1c8:	9b07      	ldr	r3, [sp, #28]
 800e1ca:	1d19      	adds	r1, r3, #4
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	9107      	str	r1, [sp, #28]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	db01      	blt.n	800e1d8 <_vfiprintf_r+0x134>
 800e1d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1d6:	e004      	b.n	800e1e2 <_vfiprintf_r+0x13e>
 800e1d8:	425b      	negs	r3, r3
 800e1da:	60e3      	str	r3, [r4, #12]
 800e1dc:	2302      	movs	r3, #2
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	7833      	ldrb	r3, [r6, #0]
 800e1e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1e6:	d10c      	bne.n	800e202 <_vfiprintf_r+0x15e>
 800e1e8:	7873      	ldrb	r3, [r6, #1]
 800e1ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ec:	d134      	bne.n	800e258 <_vfiprintf_r+0x1b4>
 800e1ee:	9b07      	ldr	r3, [sp, #28]
 800e1f0:	3602      	adds	r6, #2
 800e1f2:	1d1a      	adds	r2, r3, #4
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	9207      	str	r2, [sp, #28]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	da01      	bge.n	800e200 <_vfiprintf_r+0x15c>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	425b      	negs	r3, r3
 800e200:	9309      	str	r3, [sp, #36]	@ 0x24
 800e202:	4d32      	ldr	r5, [pc, #200]	@ (800e2cc <_vfiprintf_r+0x228>)
 800e204:	2203      	movs	r2, #3
 800e206:	0028      	movs	r0, r5
 800e208:	7831      	ldrb	r1, [r6, #0]
 800e20a:	f7fe f90a 	bl	800c422 <memchr>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d006      	beq.n	800e220 <_vfiprintf_r+0x17c>
 800e212:	2340      	movs	r3, #64	@ 0x40
 800e214:	1b40      	subs	r0, r0, r5
 800e216:	4083      	lsls	r3, r0
 800e218:	6822      	ldr	r2, [r4, #0]
 800e21a:	3601      	adds	r6, #1
 800e21c:	4313      	orrs	r3, r2
 800e21e:	6023      	str	r3, [r4, #0]
 800e220:	7831      	ldrb	r1, [r6, #0]
 800e222:	2206      	movs	r2, #6
 800e224:	482a      	ldr	r0, [pc, #168]	@ (800e2d0 <_vfiprintf_r+0x22c>)
 800e226:	1c75      	adds	r5, r6, #1
 800e228:	7621      	strb	r1, [r4, #24]
 800e22a:	f7fe f8fa 	bl	800c422 <memchr>
 800e22e:	2800      	cmp	r0, #0
 800e230:	d040      	beq.n	800e2b4 <_vfiprintf_r+0x210>
 800e232:	4b28      	ldr	r3, [pc, #160]	@ (800e2d4 <_vfiprintf_r+0x230>)
 800e234:	2b00      	cmp	r3, #0
 800e236:	d122      	bne.n	800e27e <_vfiprintf_r+0x1da>
 800e238:	2207      	movs	r2, #7
 800e23a:	9b07      	ldr	r3, [sp, #28]
 800e23c:	3307      	adds	r3, #7
 800e23e:	4393      	bics	r3, r2
 800e240:	3308      	adds	r3, #8
 800e242:	9307      	str	r3, [sp, #28]
 800e244:	6963      	ldr	r3, [r4, #20]
 800e246:	9a04      	ldr	r2, [sp, #16]
 800e248:	189b      	adds	r3, r3, r2
 800e24a:	6163      	str	r3, [r4, #20]
 800e24c:	e762      	b.n	800e114 <_vfiprintf_r+0x70>
 800e24e:	4343      	muls	r3, r0
 800e250:	002e      	movs	r6, r5
 800e252:	2101      	movs	r1, #1
 800e254:	189b      	adds	r3, r3, r2
 800e256:	e7a4      	b.n	800e1a2 <_vfiprintf_r+0xfe>
 800e258:	2300      	movs	r3, #0
 800e25a:	200a      	movs	r0, #10
 800e25c:	0019      	movs	r1, r3
 800e25e:	3601      	adds	r6, #1
 800e260:	6063      	str	r3, [r4, #4]
 800e262:	7832      	ldrb	r2, [r6, #0]
 800e264:	1c75      	adds	r5, r6, #1
 800e266:	3a30      	subs	r2, #48	@ 0x30
 800e268:	2a09      	cmp	r2, #9
 800e26a:	d903      	bls.n	800e274 <_vfiprintf_r+0x1d0>
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d0c8      	beq.n	800e202 <_vfiprintf_r+0x15e>
 800e270:	9109      	str	r1, [sp, #36]	@ 0x24
 800e272:	e7c6      	b.n	800e202 <_vfiprintf_r+0x15e>
 800e274:	4341      	muls	r1, r0
 800e276:	002e      	movs	r6, r5
 800e278:	2301      	movs	r3, #1
 800e27a:	1889      	adds	r1, r1, r2
 800e27c:	e7f1      	b.n	800e262 <_vfiprintf_r+0x1be>
 800e27e:	aa07      	add	r2, sp, #28
 800e280:	9200      	str	r2, [sp, #0]
 800e282:	0021      	movs	r1, r4
 800e284:	003a      	movs	r2, r7
 800e286:	4b14      	ldr	r3, [pc, #80]	@ (800e2d8 <_vfiprintf_r+0x234>)
 800e288:	9803      	ldr	r0, [sp, #12]
 800e28a:	f7fd fb39 	bl	800b900 <_printf_float>
 800e28e:	9004      	str	r0, [sp, #16]
 800e290:	9b04      	ldr	r3, [sp, #16]
 800e292:	3301      	adds	r3, #1
 800e294:	d1d6      	bne.n	800e244 <_vfiprintf_r+0x1a0>
 800e296:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e298:	07db      	lsls	r3, r3, #31
 800e29a:	d405      	bmi.n	800e2a8 <_vfiprintf_r+0x204>
 800e29c:	89bb      	ldrh	r3, [r7, #12]
 800e29e:	059b      	lsls	r3, r3, #22
 800e2a0:	d402      	bmi.n	800e2a8 <_vfiprintf_r+0x204>
 800e2a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e2a4:	f7fe f8b4 	bl	800c410 <__retarget_lock_release_recursive>
 800e2a8:	89bb      	ldrh	r3, [r7, #12]
 800e2aa:	065b      	lsls	r3, r3, #25
 800e2ac:	d500      	bpl.n	800e2b0 <_vfiprintf_r+0x20c>
 800e2ae:	e71e      	b.n	800e0ee <_vfiprintf_r+0x4a>
 800e2b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e2b2:	e71e      	b.n	800e0f2 <_vfiprintf_r+0x4e>
 800e2b4:	aa07      	add	r2, sp, #28
 800e2b6:	9200      	str	r2, [sp, #0]
 800e2b8:	0021      	movs	r1, r4
 800e2ba:	003a      	movs	r2, r7
 800e2bc:	4b06      	ldr	r3, [pc, #24]	@ (800e2d8 <_vfiprintf_r+0x234>)
 800e2be:	9803      	ldr	r0, [sp, #12]
 800e2c0:	f7fd fdcc 	bl	800be5c <_printf_i>
 800e2c4:	e7e3      	b.n	800e28e <_vfiprintf_r+0x1ea>
 800e2c6:	46c0      	nop			@ (mov r8, r8)
 800e2c8:	0800ea2e 	.word	0x0800ea2e
 800e2cc:	0800ea34 	.word	0x0800ea34
 800e2d0:	0800ea38 	.word	0x0800ea38
 800e2d4:	0800b901 	.word	0x0800b901
 800e2d8:	0800e081 	.word	0x0800e081

0800e2dc <__swbuf_r>:
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	0006      	movs	r6, r0
 800e2e0:	000d      	movs	r5, r1
 800e2e2:	0014      	movs	r4, r2
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d004      	beq.n	800e2f2 <__swbuf_r+0x16>
 800e2e8:	6a03      	ldr	r3, [r0, #32]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <__swbuf_r+0x16>
 800e2ee:	f7fd ff51 	bl	800c194 <__sinit>
 800e2f2:	69a3      	ldr	r3, [r4, #24]
 800e2f4:	60a3      	str	r3, [r4, #8]
 800e2f6:	89a3      	ldrh	r3, [r4, #12]
 800e2f8:	071b      	lsls	r3, r3, #28
 800e2fa:	d502      	bpl.n	800e302 <__swbuf_r+0x26>
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <__swbuf_r+0x3a>
 800e302:	0021      	movs	r1, r4
 800e304:	0030      	movs	r0, r6
 800e306:	f000 f82b 	bl	800e360 <__swsetup_r>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d003      	beq.n	800e316 <__swbuf_r+0x3a>
 800e30e:	2501      	movs	r5, #1
 800e310:	426d      	negs	r5, r5
 800e312:	0028      	movs	r0, r5
 800e314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e316:	6923      	ldr	r3, [r4, #16]
 800e318:	6820      	ldr	r0, [r4, #0]
 800e31a:	b2ef      	uxtb	r7, r5
 800e31c:	1ac0      	subs	r0, r0, r3
 800e31e:	6963      	ldr	r3, [r4, #20]
 800e320:	b2ed      	uxtb	r5, r5
 800e322:	4283      	cmp	r3, r0
 800e324:	dc05      	bgt.n	800e332 <__swbuf_r+0x56>
 800e326:	0021      	movs	r1, r4
 800e328:	0030      	movs	r0, r6
 800e32a:	f7ff fd81 	bl	800de30 <_fflush_r>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d1ed      	bne.n	800e30e <__swbuf_r+0x32>
 800e332:	68a3      	ldr	r3, [r4, #8]
 800e334:	3001      	adds	r0, #1
 800e336:	3b01      	subs	r3, #1
 800e338:	60a3      	str	r3, [r4, #8]
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	6022      	str	r2, [r4, #0]
 800e340:	701f      	strb	r7, [r3, #0]
 800e342:	6963      	ldr	r3, [r4, #20]
 800e344:	4283      	cmp	r3, r0
 800e346:	d004      	beq.n	800e352 <__swbuf_r+0x76>
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	07db      	lsls	r3, r3, #31
 800e34c:	d5e1      	bpl.n	800e312 <__swbuf_r+0x36>
 800e34e:	2d0a      	cmp	r5, #10
 800e350:	d1df      	bne.n	800e312 <__swbuf_r+0x36>
 800e352:	0021      	movs	r1, r4
 800e354:	0030      	movs	r0, r6
 800e356:	f7ff fd6b 	bl	800de30 <_fflush_r>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d0d9      	beq.n	800e312 <__swbuf_r+0x36>
 800e35e:	e7d6      	b.n	800e30e <__swbuf_r+0x32>

0800e360 <__swsetup_r>:
 800e360:	4b2d      	ldr	r3, [pc, #180]	@ (800e418 <__swsetup_r+0xb8>)
 800e362:	b570      	push	{r4, r5, r6, lr}
 800e364:	0005      	movs	r5, r0
 800e366:	6818      	ldr	r0, [r3, #0]
 800e368:	000c      	movs	r4, r1
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d004      	beq.n	800e378 <__swsetup_r+0x18>
 800e36e:	6a03      	ldr	r3, [r0, #32]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <__swsetup_r+0x18>
 800e374:	f7fd ff0e 	bl	800c194 <__sinit>
 800e378:	220c      	movs	r2, #12
 800e37a:	5ea3      	ldrsh	r3, [r4, r2]
 800e37c:	071a      	lsls	r2, r3, #28
 800e37e:	d423      	bmi.n	800e3c8 <__swsetup_r+0x68>
 800e380:	06da      	lsls	r2, r3, #27
 800e382:	d407      	bmi.n	800e394 <__swsetup_r+0x34>
 800e384:	2209      	movs	r2, #9
 800e386:	602a      	str	r2, [r5, #0]
 800e388:	2240      	movs	r2, #64	@ 0x40
 800e38a:	2001      	movs	r0, #1
 800e38c:	4313      	orrs	r3, r2
 800e38e:	81a3      	strh	r3, [r4, #12]
 800e390:	4240      	negs	r0, r0
 800e392:	e03a      	b.n	800e40a <__swsetup_r+0xaa>
 800e394:	075b      	lsls	r3, r3, #29
 800e396:	d513      	bpl.n	800e3c0 <__swsetup_r+0x60>
 800e398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e39a:	2900      	cmp	r1, #0
 800e39c:	d008      	beq.n	800e3b0 <__swsetup_r+0x50>
 800e39e:	0023      	movs	r3, r4
 800e3a0:	3344      	adds	r3, #68	@ 0x44
 800e3a2:	4299      	cmp	r1, r3
 800e3a4:	d002      	beq.n	800e3ac <__swsetup_r+0x4c>
 800e3a6:	0028      	movs	r0, r5
 800e3a8:	f7fe febc 	bl	800d124 <_free_r>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3b0:	2224      	movs	r2, #36	@ 0x24
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	4393      	bics	r3, r2
 800e3b6:	81a3      	strh	r3, [r4, #12]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	6063      	str	r3, [r4, #4]
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	2308      	movs	r3, #8
 800e3c2:	89a2      	ldrh	r2, [r4, #12]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10b      	bne.n	800e3e6 <__swsetup_r+0x86>
 800e3ce:	21a0      	movs	r1, #160	@ 0xa0
 800e3d0:	2280      	movs	r2, #128	@ 0x80
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	0089      	lsls	r1, r1, #2
 800e3d6:	0092      	lsls	r2, r2, #2
 800e3d8:	400b      	ands	r3, r1
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d003      	beq.n	800e3e6 <__swsetup_r+0x86>
 800e3de:	0021      	movs	r1, r4
 800e3e0:	0028      	movs	r0, r5
 800e3e2:	f000 f88f 	bl	800e504 <__smakebuf_r>
 800e3e6:	220c      	movs	r2, #12
 800e3e8:	5ea3      	ldrsh	r3, [r4, r2]
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	001a      	movs	r2, r3
 800e3ee:	400a      	ands	r2, r1
 800e3f0:	420b      	tst	r3, r1
 800e3f2:	d00b      	beq.n	800e40c <__swsetup_r+0xac>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	60a2      	str	r2, [r4, #8]
 800e3f8:	6962      	ldr	r2, [r4, #20]
 800e3fa:	4252      	negs	r2, r2
 800e3fc:	61a2      	str	r2, [r4, #24]
 800e3fe:	2000      	movs	r0, #0
 800e400:	6922      	ldr	r2, [r4, #16]
 800e402:	4282      	cmp	r2, r0
 800e404:	d101      	bne.n	800e40a <__swsetup_r+0xaa>
 800e406:	061a      	lsls	r2, r3, #24
 800e408:	d4be      	bmi.n	800e388 <__swsetup_r+0x28>
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	0799      	lsls	r1, r3, #30
 800e40e:	d400      	bmi.n	800e412 <__swsetup_r+0xb2>
 800e410:	6962      	ldr	r2, [r4, #20]
 800e412:	60a2      	str	r2, [r4, #8]
 800e414:	e7f3      	b.n	800e3fe <__swsetup_r+0x9e>
 800e416:	46c0      	nop			@ (mov r8, r8)
 800e418:	20000028 	.word	0x20000028

0800e41c <_raise_r>:
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	0004      	movs	r4, r0
 800e420:	000d      	movs	r5, r1
 800e422:	291f      	cmp	r1, #31
 800e424:	d904      	bls.n	800e430 <_raise_r+0x14>
 800e426:	2316      	movs	r3, #22
 800e428:	6003      	str	r3, [r0, #0]
 800e42a:	2001      	movs	r0, #1
 800e42c:	4240      	negs	r0, r0
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e432:	2b00      	cmp	r3, #0
 800e434:	d004      	beq.n	800e440 <_raise_r+0x24>
 800e436:	008a      	lsls	r2, r1, #2
 800e438:	189b      	adds	r3, r3, r2
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	2a00      	cmp	r2, #0
 800e43e:	d108      	bne.n	800e452 <_raise_r+0x36>
 800e440:	0020      	movs	r0, r4
 800e442:	f000 f831 	bl	800e4a8 <_getpid_r>
 800e446:	002a      	movs	r2, r5
 800e448:	0001      	movs	r1, r0
 800e44a:	0020      	movs	r0, r4
 800e44c:	f000 f81a 	bl	800e484 <_kill_r>
 800e450:	e7ed      	b.n	800e42e <_raise_r+0x12>
 800e452:	2a01      	cmp	r2, #1
 800e454:	d009      	beq.n	800e46a <_raise_r+0x4e>
 800e456:	1c51      	adds	r1, r2, #1
 800e458:	d103      	bne.n	800e462 <_raise_r+0x46>
 800e45a:	2316      	movs	r3, #22
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	2001      	movs	r0, #1
 800e460:	e7e5      	b.n	800e42e <_raise_r+0x12>
 800e462:	2100      	movs	r1, #0
 800e464:	0028      	movs	r0, r5
 800e466:	6019      	str	r1, [r3, #0]
 800e468:	4790      	blx	r2
 800e46a:	2000      	movs	r0, #0
 800e46c:	e7df      	b.n	800e42e <_raise_r+0x12>
	...

0800e470 <raise>:
 800e470:	b510      	push	{r4, lr}
 800e472:	4b03      	ldr	r3, [pc, #12]	@ (800e480 <raise+0x10>)
 800e474:	0001      	movs	r1, r0
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	f7ff ffd0 	bl	800e41c <_raise_r>
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	46c0      	nop			@ (mov r8, r8)
 800e480:	20000028 	.word	0x20000028

0800e484 <_kill_r>:
 800e484:	2300      	movs	r3, #0
 800e486:	b570      	push	{r4, r5, r6, lr}
 800e488:	4d06      	ldr	r5, [pc, #24]	@ (800e4a4 <_kill_r+0x20>)
 800e48a:	0004      	movs	r4, r0
 800e48c:	0008      	movs	r0, r1
 800e48e:	0011      	movs	r1, r2
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	f7f7 f901 	bl	8005698 <_kill>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d103      	bne.n	800e4a2 <_kill_r+0x1e>
 800e49a:	682b      	ldr	r3, [r5, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d000      	beq.n	800e4a2 <_kill_r+0x1e>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	2000074c 	.word	0x2000074c

0800e4a8 <_getpid_r>:
 800e4a8:	b510      	push	{r4, lr}
 800e4aa:	f7f7 f8ef 	bl	800568c <_getpid>
 800e4ae:	bd10      	pop	{r4, pc}

0800e4b0 <__swhatbuf_r>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	000e      	movs	r6, r1
 800e4b4:	001d      	movs	r5, r3
 800e4b6:	230e      	movs	r3, #14
 800e4b8:	5ec9      	ldrsh	r1, [r1, r3]
 800e4ba:	0014      	movs	r4, r2
 800e4bc:	b096      	sub	sp, #88	@ 0x58
 800e4be:	2900      	cmp	r1, #0
 800e4c0:	da0c      	bge.n	800e4dc <__swhatbuf_r+0x2c>
 800e4c2:	89b2      	ldrh	r2, [r6, #12]
 800e4c4:	2380      	movs	r3, #128	@ 0x80
 800e4c6:	0011      	movs	r1, r2
 800e4c8:	4019      	ands	r1, r3
 800e4ca:	421a      	tst	r2, r3
 800e4cc:	d114      	bne.n	800e4f8 <__swhatbuf_r+0x48>
 800e4ce:	2380      	movs	r3, #128	@ 0x80
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	6029      	str	r1, [r5, #0]
 800e4d6:	6023      	str	r3, [r4, #0]
 800e4d8:	b016      	add	sp, #88	@ 0x58
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	466a      	mov	r2, sp
 800e4de:	f000 f853 	bl	800e588 <_fstat_r>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	dbed      	blt.n	800e4c2 <__swhatbuf_r+0x12>
 800e4e6:	23f0      	movs	r3, #240	@ 0xf0
 800e4e8:	9901      	ldr	r1, [sp, #4]
 800e4ea:	021b      	lsls	r3, r3, #8
 800e4ec:	4019      	ands	r1, r3
 800e4ee:	4b04      	ldr	r3, [pc, #16]	@ (800e500 <__swhatbuf_r+0x50>)
 800e4f0:	18c9      	adds	r1, r1, r3
 800e4f2:	424b      	negs	r3, r1
 800e4f4:	4159      	adcs	r1, r3
 800e4f6:	e7ea      	b.n	800e4ce <__swhatbuf_r+0x1e>
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	2340      	movs	r3, #64	@ 0x40
 800e4fc:	e7e9      	b.n	800e4d2 <__swhatbuf_r+0x22>
 800e4fe:	46c0      	nop			@ (mov r8, r8)
 800e500:	ffffe000 	.word	0xffffe000

0800e504 <__smakebuf_r>:
 800e504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e506:	2602      	movs	r6, #2
 800e508:	898b      	ldrh	r3, [r1, #12]
 800e50a:	0005      	movs	r5, r0
 800e50c:	000c      	movs	r4, r1
 800e50e:	b085      	sub	sp, #20
 800e510:	4233      	tst	r3, r6
 800e512:	d007      	beq.n	800e524 <__smakebuf_r+0x20>
 800e514:	0023      	movs	r3, r4
 800e516:	3347      	adds	r3, #71	@ 0x47
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	2301      	movs	r3, #1
 800e51e:	6163      	str	r3, [r4, #20]
 800e520:	b005      	add	sp, #20
 800e522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e524:	ab03      	add	r3, sp, #12
 800e526:	aa02      	add	r2, sp, #8
 800e528:	f7ff ffc2 	bl	800e4b0 <__swhatbuf_r>
 800e52c:	9f02      	ldr	r7, [sp, #8]
 800e52e:	9001      	str	r0, [sp, #4]
 800e530:	0039      	movs	r1, r7
 800e532:	0028      	movs	r0, r5
 800e534:	f7fe fe6c 	bl	800d210 <_malloc_r>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d108      	bne.n	800e54e <__smakebuf_r+0x4a>
 800e53c:	220c      	movs	r2, #12
 800e53e:	5ea3      	ldrsh	r3, [r4, r2]
 800e540:	059a      	lsls	r2, r3, #22
 800e542:	d4ed      	bmi.n	800e520 <__smakebuf_r+0x1c>
 800e544:	2203      	movs	r2, #3
 800e546:	4393      	bics	r3, r2
 800e548:	431e      	orrs	r6, r3
 800e54a:	81a6      	strh	r6, [r4, #12]
 800e54c:	e7e2      	b.n	800e514 <__smakebuf_r+0x10>
 800e54e:	2380      	movs	r3, #128	@ 0x80
 800e550:	89a2      	ldrh	r2, [r4, #12]
 800e552:	6020      	str	r0, [r4, #0]
 800e554:	4313      	orrs	r3, r2
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	6120      	str	r0, [r4, #16]
 800e55c:	6167      	str	r7, [r4, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00c      	beq.n	800e57c <__smakebuf_r+0x78>
 800e562:	0028      	movs	r0, r5
 800e564:	230e      	movs	r3, #14
 800e566:	5ee1      	ldrsh	r1, [r4, r3]
 800e568:	f000 f820 	bl	800e5ac <_isatty_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d005      	beq.n	800e57c <__smakebuf_r+0x78>
 800e570:	2303      	movs	r3, #3
 800e572:	89a2      	ldrh	r2, [r4, #12]
 800e574:	439a      	bics	r2, r3
 800e576:	3b02      	subs	r3, #2
 800e578:	4313      	orrs	r3, r2
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	9a01      	ldr	r2, [sp, #4]
 800e580:	4313      	orrs	r3, r2
 800e582:	81a3      	strh	r3, [r4, #12]
 800e584:	e7cc      	b.n	800e520 <__smakebuf_r+0x1c>
	...

0800e588 <_fstat_r>:
 800e588:	2300      	movs	r3, #0
 800e58a:	b570      	push	{r4, r5, r6, lr}
 800e58c:	4d06      	ldr	r5, [pc, #24]	@ (800e5a8 <_fstat_r+0x20>)
 800e58e:	0004      	movs	r4, r0
 800e590:	0008      	movs	r0, r1
 800e592:	0011      	movs	r1, r2
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	f7f7 f8df 	bl	8005758 <_fstat>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d103      	bne.n	800e5a6 <_fstat_r+0x1e>
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d000      	beq.n	800e5a6 <_fstat_r+0x1e>
 800e5a4:	6023      	str	r3, [r4, #0]
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	2000074c 	.word	0x2000074c

0800e5ac <_isatty_r>:
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	b570      	push	{r4, r5, r6, lr}
 800e5b0:	4d06      	ldr	r5, [pc, #24]	@ (800e5cc <_isatty_r+0x20>)
 800e5b2:	0004      	movs	r4, r0
 800e5b4:	0008      	movs	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f7 f8dc 	bl	8005774 <_isatty>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d103      	bne.n	800e5c8 <_isatty_r+0x1c>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d000      	beq.n	800e5c8 <_isatty_r+0x1c>
 800e5c6:	6023      	str	r3, [r4, #0]
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	2000074c 	.word	0x2000074c

0800e5d0 <_init>:
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	46c0      	nop			@ (mov r8, r8)
 800e5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5d6:	bc08      	pop	{r3}
 800e5d8:	469e      	mov	lr, r3
 800e5da:	4770      	bx	lr

0800e5dc <_fini>:
 800e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5de:	46c0      	nop			@ (mov r8, r8)
 800e5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5e2:	bc08      	pop	{r3}
 800e5e4:	469e      	mov	lr, r3
 800e5e6:	4770      	bx	lr
