
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800ac58  0800ac58  0000bc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a4  0800b0a4  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b0a4  0800b0a4  0000d1e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b0a4  0800b0a4  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a4  0800b0a4  0000c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b0ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200001e0  0800b28c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800b28c  0000d6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018308  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00025510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001186  00000000  00000000  00029b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a57  00000000  00000000  0002ac96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af60  00000000  00000000  0002f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0fc5  00000000  00000000  0004a64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006360  00000000  00000000  000eb658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  000f19b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e0 	.word	0x200001e0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800ac40 	.word	0x0800ac40

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e4 	.word	0x200001e4
 80000fc:	0800ac40 	.word	0x0800ac40

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 faa7 	bl	8001988 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f9eb 	bl	8001820 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa99 	bl	8001988 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa8f 	bl	8001988 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa15 	bl	80018a8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa0b 	bl	80018a8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f8a3 	bl	80005f4 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f82b 	bl	8000514 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f895 	bl	80005f4 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f88b 	bl	80005f4 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f839 	bl	8000564 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f82f 	bl	8000564 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d018      	beq.n	80005b0 <__gesf2+0x4c>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00a      	beq.n	8000598 <__gesf2+0x34>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10a      	bne.n	80005a0 <__gesf2+0x3c>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d029      	beq.n	80005e2 <__gesf2+0x7e>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d12d      	bne.n	80005ee <__gesf2+0x8a>
 8000592:	0048      	lsls	r0, r1, #1
 8000594:	3801      	subs	r0, #1
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	2d00      	cmp	r5, #0
 800059a:	d125      	bne.n	80005e8 <__gesf2+0x84>
 800059c:	2a00      	cmp	r2, #0
 800059e:	d101      	bne.n	80005a4 <__gesf2+0x40>
 80005a0:	2c00      	cmp	r4, #0
 80005a2:	d0f6      	beq.n	8000592 <__gesf2+0x2e>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d019      	beq.n	80005dc <__gesf2+0x78>
 80005a8:	2001      	movs	r0, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	4318      	orrs	r0, r3
 80005ae:	e7f2      	b.n	8000596 <__gesf2+0x32>
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d119      	bne.n	80005e8 <__gesf2+0x84>
 80005b4:	28ff      	cmp	r0, #255	@ 0xff
 80005b6:	d1f7      	bne.n	80005a8 <__gesf2+0x44>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d115      	bne.n	80005e8 <__gesf2+0x84>
 80005bc:	2000      	movs	r0, #0
 80005be:	428b      	cmp	r3, r1
 80005c0:	d1f2      	bne.n	80005a8 <__gesf2+0x44>
 80005c2:	e7e8      	b.n	8000596 <__gesf2+0x32>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0ef      	beq.n	80005a8 <__gesf2+0x44>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1ed      	bne.n	80005a8 <__gesf2+0x44>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dceb      	bgt.n	80005a8 <__gesf2+0x44>
 80005d0:	db04      	blt.n	80005dc <__gesf2+0x78>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8e8      	bhi.n	80005a8 <__gesf2+0x44>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dc      	bcs.n	8000596 <__gesf2+0x32>
 80005dc:	0058      	lsls	r0, r3, #1
 80005de:	3801      	subs	r0, #1
 80005e0:	e7d9      	b.n	8000596 <__gesf2+0x32>
 80005e2:	2c00      	cmp	r4, #0
 80005e4:	d0d7      	beq.n	8000596 <__gesf2+0x32>
 80005e6:	e7df      	b.n	80005a8 <__gesf2+0x44>
 80005e8:	2002      	movs	r0, #2
 80005ea:	4240      	negs	r0, r0
 80005ec:	e7d3      	b.n	8000596 <__gesf2+0x32>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d1da      	bne.n	80005a8 <__gesf2+0x44>
 80005f2:	e7ee      	b.n	80005d2 <__gesf2+0x6e>

080005f4 <__lesf2>:
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	0042      	lsls	r2, r0, #1
 80005f8:	0244      	lsls	r4, r0, #9
 80005fa:	024d      	lsls	r5, r1, #9
 80005fc:	0fc3      	lsrs	r3, r0, #31
 80005fe:	0048      	lsls	r0, r1, #1
 8000600:	0a64      	lsrs	r4, r4, #9
 8000602:	0e12      	lsrs	r2, r2, #24
 8000604:	0a6d      	lsrs	r5, r5, #9
 8000606:	0e00      	lsrs	r0, r0, #24
 8000608:	0fc9      	lsrs	r1, r1, #31
 800060a:	2aff      	cmp	r2, #255	@ 0xff
 800060c:	d017      	beq.n	800063e <__lesf2+0x4a>
 800060e:	28ff      	cmp	r0, #255	@ 0xff
 8000610:	d00a      	beq.n	8000628 <__lesf2+0x34>
 8000612:	2a00      	cmp	r2, #0
 8000614:	d11b      	bne.n	800064e <__lesf2+0x5a>
 8000616:	2800      	cmp	r0, #0
 8000618:	d10a      	bne.n	8000630 <__lesf2+0x3c>
 800061a:	2d00      	cmp	r5, #0
 800061c:	d01d      	beq.n	800065a <__lesf2+0x66>
 800061e:	2c00      	cmp	r4, #0
 8000620:	d12d      	bne.n	800067e <__lesf2+0x8a>
 8000622:	0048      	lsls	r0, r1, #1
 8000624:	3801      	subs	r0, #1
 8000626:	e011      	b.n	800064c <__lesf2+0x58>
 8000628:	2d00      	cmp	r5, #0
 800062a:	d10e      	bne.n	800064a <__lesf2+0x56>
 800062c:	2a00      	cmp	r2, #0
 800062e:	d101      	bne.n	8000634 <__lesf2+0x40>
 8000630:	2c00      	cmp	r4, #0
 8000632:	d0f6      	beq.n	8000622 <__lesf2+0x2e>
 8000634:	428b      	cmp	r3, r1
 8000636:	d10c      	bne.n	8000652 <__lesf2+0x5e>
 8000638:	0058      	lsls	r0, r3, #1
 800063a:	3801      	subs	r0, #1
 800063c:	e006      	b.n	800064c <__lesf2+0x58>
 800063e:	2c00      	cmp	r4, #0
 8000640:	d103      	bne.n	800064a <__lesf2+0x56>
 8000642:	28ff      	cmp	r0, #255	@ 0xff
 8000644:	d105      	bne.n	8000652 <__lesf2+0x5e>
 8000646:	2d00      	cmp	r5, #0
 8000648:	d015      	beq.n	8000676 <__lesf2+0x82>
 800064a:	2002      	movs	r0, #2
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	2800      	cmp	r0, #0
 8000650:	d106      	bne.n	8000660 <__lesf2+0x6c>
 8000652:	2001      	movs	r0, #1
 8000654:	425b      	negs	r3, r3
 8000656:	4318      	orrs	r0, r3
 8000658:	e7f8      	b.n	800064c <__lesf2+0x58>
 800065a:	2c00      	cmp	r4, #0
 800065c:	d0f6      	beq.n	800064c <__lesf2+0x58>
 800065e:	e7f8      	b.n	8000652 <__lesf2+0x5e>
 8000660:	428b      	cmp	r3, r1
 8000662:	d1f6      	bne.n	8000652 <__lesf2+0x5e>
 8000664:	4282      	cmp	r2, r0
 8000666:	dcf4      	bgt.n	8000652 <__lesf2+0x5e>
 8000668:	dbe6      	blt.n	8000638 <__lesf2+0x44>
 800066a:	42ac      	cmp	r4, r5
 800066c:	d8f1      	bhi.n	8000652 <__lesf2+0x5e>
 800066e:	2000      	movs	r0, #0
 8000670:	42ac      	cmp	r4, r5
 8000672:	d2eb      	bcs.n	800064c <__lesf2+0x58>
 8000674:	e7e0      	b.n	8000638 <__lesf2+0x44>
 8000676:	2000      	movs	r0, #0
 8000678:	428b      	cmp	r3, r1
 800067a:	d1ea      	bne.n	8000652 <__lesf2+0x5e>
 800067c:	e7e6      	b.n	800064c <__lesf2+0x58>
 800067e:	428b      	cmp	r3, r1
 8000680:	d1e7      	bne.n	8000652 <__lesf2+0x5e>
 8000682:	e7f2      	b.n	800066a <__lesf2+0x76>

08000684 <__aeabi_fmul>:
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	464f      	mov	r7, r9
 8000688:	4646      	mov	r6, r8
 800068a:	46d6      	mov	lr, sl
 800068c:	0044      	lsls	r4, r0, #1
 800068e:	b5c0      	push	{r6, r7, lr}
 8000690:	0246      	lsls	r6, r0, #9
 8000692:	1c0f      	adds	r7, r1, #0
 8000694:	0a76      	lsrs	r6, r6, #9
 8000696:	0e24      	lsrs	r4, r4, #24
 8000698:	0fc5      	lsrs	r5, r0, #31
 800069a:	2c00      	cmp	r4, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fmul+0x1c>
 800069e:	e0da      	b.n	8000856 <__aeabi_fmul+0x1d2>
 80006a0:	2cff      	cmp	r4, #255	@ 0xff
 80006a2:	d074      	beq.n	800078e <__aeabi_fmul+0x10a>
 80006a4:	2380      	movs	r3, #128	@ 0x80
 80006a6:	00f6      	lsls	r6, r6, #3
 80006a8:	04db      	lsls	r3, r3, #19
 80006aa:	431e      	orrs	r6, r3
 80006ac:	2300      	movs	r3, #0
 80006ae:	4699      	mov	r9, r3
 80006b0:	469a      	mov	sl, r3
 80006b2:	3c7f      	subs	r4, #127	@ 0x7f
 80006b4:	027b      	lsls	r3, r7, #9
 80006b6:	0a5b      	lsrs	r3, r3, #9
 80006b8:	4698      	mov	r8, r3
 80006ba:	007b      	lsls	r3, r7, #1
 80006bc:	0e1b      	lsrs	r3, r3, #24
 80006be:	0fff      	lsrs	r7, r7, #31
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d074      	beq.n	80007ae <__aeabi_fmul+0x12a>
 80006c4:	2bff      	cmp	r3, #255	@ 0xff
 80006c6:	d100      	bne.n	80006ca <__aeabi_fmul+0x46>
 80006c8:	e08e      	b.n	80007e8 <__aeabi_fmul+0x164>
 80006ca:	4642      	mov	r2, r8
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	00d2      	lsls	r2, r2, #3
 80006d0:	04c9      	lsls	r1, r1, #19
 80006d2:	4311      	orrs	r1, r2
 80006d4:	3b7f      	subs	r3, #127	@ 0x7f
 80006d6:	002a      	movs	r2, r5
 80006d8:	18e4      	adds	r4, r4, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	407a      	eors	r2, r7
 80006de:	4688      	mov	r8, r1
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	2b0a      	cmp	r3, #10
 80006e4:	dc75      	bgt.n	80007d2 <__aeabi_fmul+0x14e>
 80006e6:	464b      	mov	r3, r9
 80006e8:	2000      	movs	r0, #0
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	dd0f      	ble.n	800070e <__aeabi_fmul+0x8a>
 80006ee:	4649      	mov	r1, r9
 80006f0:	2301      	movs	r3, #1
 80006f2:	408b      	lsls	r3, r1
 80006f4:	21a6      	movs	r1, #166	@ 0xa6
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	420b      	tst	r3, r1
 80006fa:	d169      	bne.n	80007d0 <__aeabi_fmul+0x14c>
 80006fc:	2190      	movs	r1, #144	@ 0x90
 80006fe:	0089      	lsls	r1, r1, #2
 8000700:	420b      	tst	r3, r1
 8000702:	d000      	beq.n	8000706 <__aeabi_fmul+0x82>
 8000704:	e100      	b.n	8000908 <__aeabi_fmul+0x284>
 8000706:	2188      	movs	r1, #136	@ 0x88
 8000708:	4219      	tst	r1, r3
 800070a:	d000      	beq.n	800070e <__aeabi_fmul+0x8a>
 800070c:	e0f5      	b.n	80008fa <__aeabi_fmul+0x276>
 800070e:	4641      	mov	r1, r8
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	0c09      	lsrs	r1, r1, #16
 8000714:	4643      	mov	r3, r8
 8000716:	0008      	movs	r0, r1
 8000718:	0c35      	lsrs	r5, r6, #16
 800071a:	0436      	lsls	r6, r6, #16
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	0c36      	lsrs	r6, r6, #16
 8000720:	4370      	muls	r0, r6
 8000722:	4369      	muls	r1, r5
 8000724:	435e      	muls	r6, r3
 8000726:	435d      	muls	r5, r3
 8000728:	1876      	adds	r6, r6, r1
 800072a:	0c03      	lsrs	r3, r0, #16
 800072c:	199b      	adds	r3, r3, r6
 800072e:	4299      	cmp	r1, r3
 8000730:	d903      	bls.n	800073a <__aeabi_fmul+0xb6>
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	0249      	lsls	r1, r1, #9
 8000736:	468c      	mov	ip, r1
 8000738:	4465      	add	r5, ip
 800073a:	0400      	lsls	r0, r0, #16
 800073c:	0419      	lsls	r1, r3, #16
 800073e:	0c00      	lsrs	r0, r0, #16
 8000740:	1809      	adds	r1, r1, r0
 8000742:	018e      	lsls	r6, r1, #6
 8000744:	1e70      	subs	r0, r6, #1
 8000746:	4186      	sbcs	r6, r0
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	0e89      	lsrs	r1, r1, #26
 800074c:	195b      	adds	r3, r3, r5
 800074e:	430e      	orrs	r6, r1
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	431e      	orrs	r6, r3
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	d46c      	bmi.n	8000832 <__aeabi_fmul+0x1ae>
 8000758:	0023      	movs	r3, r4
 800075a:	337f      	adds	r3, #127	@ 0x7f
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_fmul+0xde>
 8000760:	e0b1      	b.n	80008c6 <__aeabi_fmul+0x242>
 8000762:	0015      	movs	r5, r2
 8000764:	0771      	lsls	r1, r6, #29
 8000766:	d00b      	beq.n	8000780 <__aeabi_fmul+0xfc>
 8000768:	200f      	movs	r0, #15
 800076a:	0021      	movs	r1, r4
 800076c:	4030      	ands	r0, r6
 800076e:	2804      	cmp	r0, #4
 8000770:	d006      	beq.n	8000780 <__aeabi_fmul+0xfc>
 8000772:	3604      	adds	r6, #4
 8000774:	0132      	lsls	r2, r6, #4
 8000776:	d503      	bpl.n	8000780 <__aeabi_fmul+0xfc>
 8000778:	4b6e      	ldr	r3, [pc, #440]	@ (8000934 <__aeabi_fmul+0x2b0>)
 800077a:	401e      	ands	r6, r3
 800077c:	000b      	movs	r3, r1
 800077e:	3380      	adds	r3, #128	@ 0x80
 8000780:	2bfe      	cmp	r3, #254	@ 0xfe
 8000782:	dd00      	ble.n	8000786 <__aeabi_fmul+0x102>
 8000784:	e0bd      	b.n	8000902 <__aeabi_fmul+0x27e>
 8000786:	01b2      	lsls	r2, r6, #6
 8000788:	0a52      	lsrs	r2, r2, #9
 800078a:	b2db      	uxtb	r3, r3
 800078c:	e048      	b.n	8000820 <__aeabi_fmul+0x19c>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fmul+0x110>
 8000792:	e092      	b.n	80008ba <__aeabi_fmul+0x236>
 8000794:	2308      	movs	r3, #8
 8000796:	4699      	mov	r9, r3
 8000798:	3b06      	subs	r3, #6
 800079a:	469a      	mov	sl, r3
 800079c:	027b      	lsls	r3, r7, #9
 800079e:	0a5b      	lsrs	r3, r3, #9
 80007a0:	4698      	mov	r8, r3
 80007a2:	007b      	lsls	r3, r7, #1
 80007a4:	24ff      	movs	r4, #255	@ 0xff
 80007a6:	0e1b      	lsrs	r3, r3, #24
 80007a8:	0fff      	lsrs	r7, r7, #31
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d18a      	bne.n	80006c4 <__aeabi_fmul+0x40>
 80007ae:	4642      	mov	r2, r8
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d164      	bne.n	800087e <__aeabi_fmul+0x1fa>
 80007b4:	4649      	mov	r1, r9
 80007b6:	3201      	adds	r2, #1
 80007b8:	4311      	orrs	r1, r2
 80007ba:	4689      	mov	r9, r1
 80007bc:	290a      	cmp	r1, #10
 80007be:	dc08      	bgt.n	80007d2 <__aeabi_fmul+0x14e>
 80007c0:	407d      	eors	r5, r7
 80007c2:	2001      	movs	r0, #1
 80007c4:	b2ea      	uxtb	r2, r5
 80007c6:	2902      	cmp	r1, #2
 80007c8:	dc91      	bgt.n	80006ee <__aeabi_fmul+0x6a>
 80007ca:	0015      	movs	r5, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	e027      	b.n	8000820 <__aeabi_fmul+0x19c>
 80007d0:	0015      	movs	r5, r2
 80007d2:	4653      	mov	r3, sl
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d100      	bne.n	80007da <__aeabi_fmul+0x156>
 80007d8:	e093      	b.n	8000902 <__aeabi_fmul+0x27e>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d01a      	beq.n	8000814 <__aeabi_fmul+0x190>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d12c      	bne.n	800083c <__aeabi_fmul+0x1b8>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2200      	movs	r2, #0
 80007e6:	e01b      	b.n	8000820 <__aeabi_fmul+0x19c>
 80007e8:	4643      	mov	r3, r8
 80007ea:	34ff      	adds	r4, #255	@ 0xff
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d055      	beq.n	800089c <__aeabi_fmul+0x218>
 80007f0:	2103      	movs	r1, #3
 80007f2:	464b      	mov	r3, r9
 80007f4:	430b      	orrs	r3, r1
 80007f6:	0019      	movs	r1, r3
 80007f8:	2b0a      	cmp	r3, #10
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fmul+0x17a>
 80007fc:	e092      	b.n	8000924 <__aeabi_fmul+0x2a0>
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d000      	beq.n	8000804 <__aeabi_fmul+0x180>
 8000802:	e08c      	b.n	800091e <__aeabi_fmul+0x29a>
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	03d2      	lsls	r2, r2, #15
 8000808:	4216      	tst	r6, r2
 800080a:	d003      	beq.n	8000814 <__aeabi_fmul+0x190>
 800080c:	4643      	mov	r3, r8
 800080e:	4213      	tst	r3, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_fmul+0x190>
 8000812:	e07d      	b.n	8000910 <__aeabi_fmul+0x28c>
 8000814:	2280      	movs	r2, #128	@ 0x80
 8000816:	03d2      	lsls	r2, r2, #15
 8000818:	4332      	orrs	r2, r6
 800081a:	0252      	lsls	r2, r2, #9
 800081c:	0a52      	lsrs	r2, r2, #9
 800081e:	23ff      	movs	r3, #255	@ 0xff
 8000820:	05d8      	lsls	r0, r3, #23
 8000822:	07ed      	lsls	r5, r5, #31
 8000824:	4310      	orrs	r0, r2
 8000826:	4328      	orrs	r0, r5
 8000828:	bce0      	pop	{r5, r6, r7}
 800082a:	46ba      	mov	sl, r7
 800082c:	46b1      	mov	r9, r6
 800082e:	46a8      	mov	r8, r5
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	2301      	movs	r3, #1
 8000834:	0015      	movs	r5, r2
 8000836:	0871      	lsrs	r1, r6, #1
 8000838:	401e      	ands	r6, r3
 800083a:	430e      	orrs	r6, r1
 800083c:	0023      	movs	r3, r4
 800083e:	3380      	adds	r3, #128	@ 0x80
 8000840:	1c61      	adds	r1, r4, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd41      	ble.n	80008ca <__aeabi_fmul+0x246>
 8000846:	0772      	lsls	r2, r6, #29
 8000848:	d094      	beq.n	8000774 <__aeabi_fmul+0xf0>
 800084a:	220f      	movs	r2, #15
 800084c:	4032      	ands	r2, r6
 800084e:	2a04      	cmp	r2, #4
 8000850:	d000      	beq.n	8000854 <__aeabi_fmul+0x1d0>
 8000852:	e78e      	b.n	8000772 <__aeabi_fmul+0xee>
 8000854:	e78e      	b.n	8000774 <__aeabi_fmul+0xf0>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d105      	bne.n	8000866 <__aeabi_fmul+0x1e2>
 800085a:	2304      	movs	r3, #4
 800085c:	4699      	mov	r9, r3
 800085e:	3b03      	subs	r3, #3
 8000860:	2400      	movs	r4, #0
 8000862:	469a      	mov	sl, r3
 8000864:	e726      	b.n	80006b4 <__aeabi_fmul+0x30>
 8000866:	0030      	movs	r0, r6
 8000868:	f002 f966 	bl	8002b38 <__clzsi2>
 800086c:	2476      	movs	r4, #118	@ 0x76
 800086e:	1f43      	subs	r3, r0, #5
 8000870:	409e      	lsls	r6, r3
 8000872:	2300      	movs	r3, #0
 8000874:	4264      	negs	r4, r4
 8000876:	4699      	mov	r9, r3
 8000878:	469a      	mov	sl, r3
 800087a:	1a24      	subs	r4, r4, r0
 800087c:	e71a      	b.n	80006b4 <__aeabi_fmul+0x30>
 800087e:	4640      	mov	r0, r8
 8000880:	f002 f95a 	bl	8002b38 <__clzsi2>
 8000884:	464b      	mov	r3, r9
 8000886:	1a24      	subs	r4, r4, r0
 8000888:	3c76      	subs	r4, #118	@ 0x76
 800088a:	2b0a      	cmp	r3, #10
 800088c:	dca1      	bgt.n	80007d2 <__aeabi_fmul+0x14e>
 800088e:	4643      	mov	r3, r8
 8000890:	3805      	subs	r0, #5
 8000892:	4083      	lsls	r3, r0
 8000894:	407d      	eors	r5, r7
 8000896:	4698      	mov	r8, r3
 8000898:	b2ea      	uxtb	r2, r5
 800089a:	e724      	b.n	80006e6 <__aeabi_fmul+0x62>
 800089c:	464a      	mov	r2, r9
 800089e:	3302      	adds	r3, #2
 80008a0:	4313      	orrs	r3, r2
 80008a2:	002a      	movs	r2, r5
 80008a4:	407a      	eors	r2, r7
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	dc92      	bgt.n	80007d2 <__aeabi_fmul+0x14e>
 80008ac:	4649      	mov	r1, r9
 80008ae:	0015      	movs	r5, r2
 80008b0:	2900      	cmp	r1, #0
 80008b2:	d026      	beq.n	8000902 <__aeabi_fmul+0x27e>
 80008b4:	4699      	mov	r9, r3
 80008b6:	2002      	movs	r0, #2
 80008b8:	e719      	b.n	80006ee <__aeabi_fmul+0x6a>
 80008ba:	230c      	movs	r3, #12
 80008bc:	4699      	mov	r9, r3
 80008be:	3b09      	subs	r3, #9
 80008c0:	24ff      	movs	r4, #255	@ 0xff
 80008c2:	469a      	mov	sl, r3
 80008c4:	e6f6      	b.n	80006b4 <__aeabi_fmul+0x30>
 80008c6:	0015      	movs	r5, r2
 80008c8:	0021      	movs	r1, r4
 80008ca:	2201      	movs	r2, #1
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b1b      	cmp	r3, #27
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_fmul+0x250>
 80008d2:	e786      	b.n	80007e2 <__aeabi_fmul+0x15e>
 80008d4:	319e      	adds	r1, #158	@ 0x9e
 80008d6:	0032      	movs	r2, r6
 80008d8:	408e      	lsls	r6, r1
 80008da:	40da      	lsrs	r2, r3
 80008dc:	1e73      	subs	r3, r6, #1
 80008de:	419e      	sbcs	r6, r3
 80008e0:	4332      	orrs	r2, r6
 80008e2:	0753      	lsls	r3, r2, #29
 80008e4:	d004      	beq.n	80008f0 <__aeabi_fmul+0x26c>
 80008e6:	230f      	movs	r3, #15
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d000      	beq.n	80008f0 <__aeabi_fmul+0x26c>
 80008ee:	3204      	adds	r2, #4
 80008f0:	0153      	lsls	r3, r2, #5
 80008f2:	d510      	bpl.n	8000916 <__aeabi_fmul+0x292>
 80008f4:	2301      	movs	r3, #1
 80008f6:	2200      	movs	r2, #0
 80008f8:	e792      	b.n	8000820 <__aeabi_fmul+0x19c>
 80008fa:	003d      	movs	r5, r7
 80008fc:	4646      	mov	r6, r8
 80008fe:	4682      	mov	sl, r0
 8000900:	e767      	b.n	80007d2 <__aeabi_fmul+0x14e>
 8000902:	23ff      	movs	r3, #255	@ 0xff
 8000904:	2200      	movs	r2, #0
 8000906:	e78b      	b.n	8000820 <__aeabi_fmul+0x19c>
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	2500      	movs	r5, #0
 800090c:	03d2      	lsls	r2, r2, #15
 800090e:	e786      	b.n	800081e <__aeabi_fmul+0x19a>
 8000910:	003d      	movs	r5, r7
 8000912:	431a      	orrs	r2, r3
 8000914:	e783      	b.n	800081e <__aeabi_fmul+0x19a>
 8000916:	0192      	lsls	r2, r2, #6
 8000918:	2300      	movs	r3, #0
 800091a:	0a52      	lsrs	r2, r2, #9
 800091c:	e780      	b.n	8000820 <__aeabi_fmul+0x19c>
 800091e:	003d      	movs	r5, r7
 8000920:	4646      	mov	r6, r8
 8000922:	e777      	b.n	8000814 <__aeabi_fmul+0x190>
 8000924:	002a      	movs	r2, r5
 8000926:	2301      	movs	r3, #1
 8000928:	407a      	eors	r2, r7
 800092a:	408b      	lsls	r3, r1
 800092c:	2003      	movs	r0, #3
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	e6e9      	b.n	8000706 <__aeabi_fmul+0x82>
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	f7ffffff 	.word	0xf7ffffff

08000938 <__aeabi_i2f>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	2800      	cmp	r0, #0
 800093c:	d012      	beq.n	8000964 <__aeabi_i2f+0x2c>
 800093e:	17c3      	asrs	r3, r0, #31
 8000940:	18c5      	adds	r5, r0, r3
 8000942:	405d      	eors	r5, r3
 8000944:	0fc4      	lsrs	r4, r0, #31
 8000946:	0028      	movs	r0, r5
 8000948:	f002 f8f6 	bl	8002b38 <__clzsi2>
 800094c:	239e      	movs	r3, #158	@ 0x9e
 800094e:	1a1b      	subs	r3, r3, r0
 8000950:	2b96      	cmp	r3, #150	@ 0x96
 8000952:	dc0f      	bgt.n	8000974 <__aeabi_i2f+0x3c>
 8000954:	2808      	cmp	r0, #8
 8000956:	d038      	beq.n	80009ca <__aeabi_i2f+0x92>
 8000958:	3808      	subs	r0, #8
 800095a:	4085      	lsls	r5, r0
 800095c:	026d      	lsls	r5, r5, #9
 800095e:	0a6d      	lsrs	r5, r5, #9
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	e002      	b.n	800096a <__aeabi_i2f+0x32>
 8000964:	2400      	movs	r4, #0
 8000966:	2000      	movs	r0, #0
 8000968:	2500      	movs	r5, #0
 800096a:	05c0      	lsls	r0, r0, #23
 800096c:	4328      	orrs	r0, r5
 800096e:	07e4      	lsls	r4, r4, #31
 8000970:	4320      	orrs	r0, r4
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	2b99      	cmp	r3, #153	@ 0x99
 8000976:	dc14      	bgt.n	80009a2 <__aeabi_i2f+0x6a>
 8000978:	1f42      	subs	r2, r0, #5
 800097a:	4095      	lsls	r5, r2
 800097c:	002a      	movs	r2, r5
 800097e:	4915      	ldr	r1, [pc, #84]	@ (80009d4 <__aeabi_i2f+0x9c>)
 8000980:	4011      	ands	r1, r2
 8000982:	0755      	lsls	r5, r2, #29
 8000984:	d01c      	beq.n	80009c0 <__aeabi_i2f+0x88>
 8000986:	250f      	movs	r5, #15
 8000988:	402a      	ands	r2, r5
 800098a:	2a04      	cmp	r2, #4
 800098c:	d018      	beq.n	80009c0 <__aeabi_i2f+0x88>
 800098e:	3104      	adds	r1, #4
 8000990:	08ca      	lsrs	r2, r1, #3
 8000992:	0149      	lsls	r1, r1, #5
 8000994:	d515      	bpl.n	80009c2 <__aeabi_i2f+0x8a>
 8000996:	239f      	movs	r3, #159	@ 0x9f
 8000998:	0252      	lsls	r2, r2, #9
 800099a:	1a18      	subs	r0, r3, r0
 800099c:	0a55      	lsrs	r5, r2, #9
 800099e:	b2c0      	uxtb	r0, r0
 80009a0:	e7e3      	b.n	800096a <__aeabi_i2f+0x32>
 80009a2:	2205      	movs	r2, #5
 80009a4:	0029      	movs	r1, r5
 80009a6:	1a12      	subs	r2, r2, r0
 80009a8:	40d1      	lsrs	r1, r2
 80009aa:	0002      	movs	r2, r0
 80009ac:	321b      	adds	r2, #27
 80009ae:	4095      	lsls	r5, r2
 80009b0:	002a      	movs	r2, r5
 80009b2:	1e55      	subs	r5, r2, #1
 80009b4:	41aa      	sbcs	r2, r5
 80009b6:	430a      	orrs	r2, r1
 80009b8:	4906      	ldr	r1, [pc, #24]	@ (80009d4 <__aeabi_i2f+0x9c>)
 80009ba:	4011      	ands	r1, r2
 80009bc:	0755      	lsls	r5, r2, #29
 80009be:	d1e2      	bne.n	8000986 <__aeabi_i2f+0x4e>
 80009c0:	08ca      	lsrs	r2, r1, #3
 80009c2:	0252      	lsls	r2, r2, #9
 80009c4:	0a55      	lsrs	r5, r2, #9
 80009c6:	b2d8      	uxtb	r0, r3
 80009c8:	e7cf      	b.n	800096a <__aeabi_i2f+0x32>
 80009ca:	026d      	lsls	r5, r5, #9
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	308e      	adds	r0, #142	@ 0x8e
 80009d0:	e7cb      	b.n	800096a <__aeabi_i2f+0x32>
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	fbffffff 	.word	0xfbffffff

080009d8 <__aeabi_ui2f>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	1e04      	subs	r4, r0, #0
 80009dc:	d00d      	beq.n	80009fa <__aeabi_ui2f+0x22>
 80009de:	f002 f8ab 	bl	8002b38 <__clzsi2>
 80009e2:	239e      	movs	r3, #158	@ 0x9e
 80009e4:	1a1b      	subs	r3, r3, r0
 80009e6:	2b96      	cmp	r3, #150	@ 0x96
 80009e8:	dc0c      	bgt.n	8000a04 <__aeabi_ui2f+0x2c>
 80009ea:	2808      	cmp	r0, #8
 80009ec:	d034      	beq.n	8000a58 <__aeabi_ui2f+0x80>
 80009ee:	3808      	subs	r0, #8
 80009f0:	4084      	lsls	r4, r0
 80009f2:	0264      	lsls	r4, r4, #9
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	b2d8      	uxtb	r0, r3
 80009f8:	e001      	b.n	80009fe <__aeabi_ui2f+0x26>
 80009fa:	2000      	movs	r0, #0
 80009fc:	2400      	movs	r4, #0
 80009fe:	05c0      	lsls	r0, r0, #23
 8000a00:	4320      	orrs	r0, r4
 8000a02:	bd10      	pop	{r4, pc}
 8000a04:	2b99      	cmp	r3, #153	@ 0x99
 8000a06:	dc13      	bgt.n	8000a30 <__aeabi_ui2f+0x58>
 8000a08:	1f42      	subs	r2, r0, #5
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <__aeabi_ui2f+0x88>)
 8000a0e:	4022      	ands	r2, r4
 8000a10:	0761      	lsls	r1, r4, #29
 8000a12:	d01c      	beq.n	8000a4e <__aeabi_ui2f+0x76>
 8000a14:	210f      	movs	r1, #15
 8000a16:	4021      	ands	r1, r4
 8000a18:	2904      	cmp	r1, #4
 8000a1a:	d018      	beq.n	8000a4e <__aeabi_ui2f+0x76>
 8000a1c:	3204      	adds	r2, #4
 8000a1e:	08d4      	lsrs	r4, r2, #3
 8000a20:	0152      	lsls	r2, r2, #5
 8000a22:	d515      	bpl.n	8000a50 <__aeabi_ui2f+0x78>
 8000a24:	239f      	movs	r3, #159	@ 0x9f
 8000a26:	0264      	lsls	r4, r4, #9
 8000a28:	1a18      	subs	r0, r3, r0
 8000a2a:	0a64      	lsrs	r4, r4, #9
 8000a2c:	b2c0      	uxtb	r0, r0
 8000a2e:	e7e6      	b.n	80009fe <__aeabi_ui2f+0x26>
 8000a30:	0002      	movs	r2, r0
 8000a32:	0021      	movs	r1, r4
 8000a34:	321b      	adds	r2, #27
 8000a36:	4091      	lsls	r1, r2
 8000a38:	000a      	movs	r2, r1
 8000a3a:	1e51      	subs	r1, r2, #1
 8000a3c:	418a      	sbcs	r2, r1
 8000a3e:	2105      	movs	r1, #5
 8000a40:	1a09      	subs	r1, r1, r0
 8000a42:	40cc      	lsrs	r4, r1
 8000a44:	4314      	orrs	r4, r2
 8000a46:	4a06      	ldr	r2, [pc, #24]	@ (8000a60 <__aeabi_ui2f+0x88>)
 8000a48:	4022      	ands	r2, r4
 8000a4a:	0761      	lsls	r1, r4, #29
 8000a4c:	d1e2      	bne.n	8000a14 <__aeabi_ui2f+0x3c>
 8000a4e:	08d4      	lsrs	r4, r2, #3
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	0a64      	lsrs	r4, r4, #9
 8000a54:	b2d8      	uxtb	r0, r3
 8000a56:	e7d2      	b.n	80009fe <__aeabi_ui2f+0x26>
 8000a58:	0264      	lsls	r4, r4, #9
 8000a5a:	0a64      	lsrs	r4, r4, #9
 8000a5c:	308e      	adds	r0, #142	@ 0x8e
 8000a5e:	e7ce      	b.n	80009fe <__aeabi_ui2f+0x26>
 8000a60:	fbffffff 	.word	0xfbffffff

08000a64 <__aeabi_dadd>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	b5c0      	push	{r6, r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	9000      	str	r0, [sp, #0]
 8000a72:	9101      	str	r1, [sp, #4]
 8000a74:	030e      	lsls	r6, r1, #12
 8000a76:	004c      	lsls	r4, r1, #1
 8000a78:	0fcd      	lsrs	r5, r1, #31
 8000a7a:	0a71      	lsrs	r1, r6, #9
 8000a7c:	9e00      	ldr	r6, [sp, #0]
 8000a7e:	005f      	lsls	r7, r3, #1
 8000a80:	0f76      	lsrs	r6, r6, #29
 8000a82:	430e      	orrs	r6, r1
 8000a84:	9900      	ldr	r1, [sp, #0]
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	00c9      	lsls	r1, r1, #3
 8000a8c:	4689      	mov	r9, r1
 8000a8e:	0319      	lsls	r1, r3, #12
 8000a90:	0d7b      	lsrs	r3, r7, #21
 8000a92:	4698      	mov	r8, r3
 8000a94:	9b01      	ldr	r3, [sp, #4]
 8000a96:	0a49      	lsrs	r1, r1, #9
 8000a98:	0fdb      	lsrs	r3, r3, #31
 8000a9a:	469c      	mov	ip, r3
 8000a9c:	9b00      	ldr	r3, [sp, #0]
 8000a9e:	9a00      	ldr	r2, [sp, #0]
 8000aa0:	0f5b      	lsrs	r3, r3, #29
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	4641      	mov	r1, r8
 8000aa6:	0d64      	lsrs	r4, r4, #21
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	1a61      	subs	r1, r4, r1
 8000aac:	4565      	cmp	r5, ip
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x4e>
 8000ab0:	e0a6      	b.n	8000c00 <__aeabi_dadd+0x19c>
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	dd72      	ble.n	8000b9c <__aeabi_dadd+0x138>
 8000ab6:	4647      	mov	r7, r8
 8000ab8:	2f00      	cmp	r7, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x5a>
 8000abc:	e0dd      	b.n	8000c7a <__aeabi_dadd+0x216>
 8000abe:	4fcc      	ldr	r7, [pc, #816]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000ac0:	42bc      	cmp	r4, r7
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x62>
 8000ac4:	e19a      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000ac6:	2701      	movs	r7, #1
 8000ac8:	2938      	cmp	r1, #56	@ 0x38
 8000aca:	dc17      	bgt.n	8000afc <__aeabi_dadd+0x98>
 8000acc:	2780      	movs	r7, #128	@ 0x80
 8000ace:	043f      	lsls	r7, r7, #16
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	291f      	cmp	r1, #31
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_dadd+0x74>
 8000ad6:	e1dd      	b.n	8000e94 <__aeabi_dadd+0x430>
 8000ad8:	2720      	movs	r7, #32
 8000ada:	1a78      	subs	r0, r7, r1
 8000adc:	001f      	movs	r7, r3
 8000ade:	4087      	lsls	r7, r0
 8000ae0:	46ba      	mov	sl, r7
 8000ae2:	0017      	movs	r7, r2
 8000ae4:	40cf      	lsrs	r7, r1
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	0038      	movs	r0, r7
 8000aea:	4657      	mov	r7, sl
 8000aec:	4307      	orrs	r7, r0
 8000aee:	4660      	mov	r0, ip
 8000af0:	4082      	lsls	r2, r0
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	1e50      	subs	r0, r2, #1
 8000af6:	4182      	sbcs	r2, r0
 8000af8:	1af6      	subs	r6, r6, r3
 8000afa:	4317      	orrs	r7, r2
 8000afc:	464b      	mov	r3, r9
 8000afe:	1bdf      	subs	r7, r3, r7
 8000b00:	45b9      	cmp	r9, r7
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	4240      	negs	r0, r0
 8000b06:	1a36      	subs	r6, r6, r0
 8000b08:	0233      	lsls	r3, r6, #8
 8000b0a:	d400      	bmi.n	8000b0e <__aeabi_dadd+0xaa>
 8000b0c:	e0ff      	b.n	8000d0e <__aeabi_dadd+0x2aa>
 8000b0e:	0276      	lsls	r6, r6, #9
 8000b10:	0a76      	lsrs	r6, r6, #9
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0xb4>
 8000b16:	e13c      	b.n	8000d92 <__aeabi_dadd+0x32e>
 8000b18:	0030      	movs	r0, r6
 8000b1a:	f002 f80d 	bl	8002b38 <__clzsi2>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	3b08      	subs	r3, #8
 8000b22:	2120      	movs	r1, #32
 8000b24:	0038      	movs	r0, r7
 8000b26:	1aca      	subs	r2, r1, r3
 8000b28:	40d0      	lsrs	r0, r2
 8000b2a:	409e      	lsls	r6, r3
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	409f      	lsls	r7, r3
 8000b30:	4332      	orrs	r2, r6
 8000b32:	429c      	cmp	r4, r3
 8000b34:	dd00      	ble.n	8000b38 <__aeabi_dadd+0xd4>
 8000b36:	e1a6      	b.n	8000e86 <__aeabi_dadd+0x422>
 8000b38:	1b18      	subs	r0, r3, r4
 8000b3a:	3001      	adds	r0, #1
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	003e      	movs	r6, r7
 8000b40:	408f      	lsls	r7, r1
 8000b42:	40c6      	lsrs	r6, r0
 8000b44:	1e7b      	subs	r3, r7, #1
 8000b46:	419f      	sbcs	r7, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	408b      	lsls	r3, r1
 8000b4c:	4337      	orrs	r7, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	40c2      	lsrs	r2, r0
 8000b52:	003b      	movs	r3, r7
 8000b54:	0016      	movs	r6, r2
 8000b56:	2400      	movs	r4, #0
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0xfa>
 8000b5c:	e1df      	b.n	8000f1e <__aeabi_dadd+0x4ba>
 8000b5e:	077b      	lsls	r3, r7, #29
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x100>
 8000b62:	e332      	b.n	80011ca <__aeabi_dadd+0x766>
 8000b64:	230f      	movs	r3, #15
 8000b66:	003a      	movs	r2, r7
 8000b68:	403b      	ands	r3, r7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_dadd+0x114>
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	42ba      	cmp	r2, r7
 8000b72:	41bf      	sbcs	r7, r7
 8000b74:	427f      	negs	r7, r7
 8000b76:	19f6      	adds	r6, r6, r7
 8000b78:	0233      	lsls	r3, r6, #8
 8000b7a:	d400      	bmi.n	8000b7e <__aeabi_dadd+0x11a>
 8000b7c:	e323      	b.n	80011c6 <__aeabi_dadd+0x762>
 8000b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000b80:	3401      	adds	r4, #1
 8000b82:	429c      	cmp	r4, r3
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x124>
 8000b86:	e0b4      	b.n	8000cf2 <__aeabi_dadd+0x28e>
 8000b88:	4b9a      	ldr	r3, [pc, #616]	@ (8000df4 <__aeabi_dadd+0x390>)
 8000b8a:	0564      	lsls	r4, r4, #21
 8000b8c:	401e      	ands	r6, r3
 8000b8e:	0d64      	lsrs	r4, r4, #21
 8000b90:	0777      	lsls	r7, r6, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	0276      	lsls	r6, r6, #9
 8000b96:	4317      	orrs	r7, r2
 8000b98:	0b36      	lsrs	r6, r6, #12
 8000b9a:	e0ac      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x13e>
 8000ba0:	e07e      	b.n	8000ca0 <__aeabi_dadd+0x23c>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	1b09      	subs	r1, r1, r4
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x148>
 8000baa:	e160      	b.n	8000e6e <__aeabi_dadd+0x40a>
 8000bac:	0034      	movs	r4, r6
 8000bae:	4648      	mov	r0, r9
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x152>
 8000bb4:	e1c9      	b.n	8000f4a <__aeabi_dadd+0x4e6>
 8000bb6:	1e4c      	subs	r4, r1, #1
 8000bb8:	2901      	cmp	r1, #1
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x15a>
 8000bbc:	e22e      	b.n	800101c <__aeabi_dadd+0x5b8>
 8000bbe:	4d8c      	ldr	r5, [pc, #560]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000bc0:	42a9      	cmp	r1, r5
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x162>
 8000bc4:	e224      	b.n	8001010 <__aeabi_dadd+0x5ac>
 8000bc6:	2701      	movs	r7, #1
 8000bc8:	2c38      	cmp	r4, #56	@ 0x38
 8000bca:	dc11      	bgt.n	8000bf0 <__aeabi_dadd+0x18c>
 8000bcc:	0021      	movs	r1, r4
 8000bce:	291f      	cmp	r1, #31
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dadd+0x170>
 8000bd2:	e20b      	b.n	8000fec <__aeabi_dadd+0x588>
 8000bd4:	2420      	movs	r4, #32
 8000bd6:	0037      	movs	r7, r6
 8000bd8:	4648      	mov	r0, r9
 8000bda:	1a64      	subs	r4, r4, r1
 8000bdc:	40a7      	lsls	r7, r4
 8000bde:	40c8      	lsrs	r0, r1
 8000be0:	4307      	orrs	r7, r0
 8000be2:	4648      	mov	r0, r9
 8000be4:	40a0      	lsls	r0, r4
 8000be6:	40ce      	lsrs	r6, r1
 8000be8:	1e44      	subs	r4, r0, #1
 8000bea:	41a0      	sbcs	r0, r4
 8000bec:	1b9b      	subs	r3, r3, r6
 8000bee:	4307      	orrs	r7, r0
 8000bf0:	1bd7      	subs	r7, r2, r7
 8000bf2:	42ba      	cmp	r2, r7
 8000bf4:	4192      	sbcs	r2, r2
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	4644      	mov	r4, r8
 8000bfc:	1a9e      	subs	r6, r3, r2
 8000bfe:	e783      	b.n	8000b08 <__aeabi_dadd+0xa4>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_dadd+0x1a2>
 8000c04:	e09c      	b.n	8000d40 <__aeabi_dadd+0x2dc>
 8000c06:	4647      	mov	r7, r8
 8000c08:	2f00      	cmp	r7, #0
 8000c0a:	d167      	bne.n	8000cdc <__aeabi_dadd+0x278>
 8000c0c:	001f      	movs	r7, r3
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x1b0>
 8000c12:	e0e4      	b.n	8000dde <__aeabi_dadd+0x37a>
 8000c14:	1e48      	subs	r0, r1, #1
 8000c16:	2901      	cmp	r1, #1
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x1b8>
 8000c1a:	e19b      	b.n	8000f54 <__aeabi_dadd+0x4f0>
 8000c1c:	4f74      	ldr	r7, [pc, #464]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c1e:	42b9      	cmp	r1, r7
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x1c0>
 8000c22:	e0eb      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000c24:	2701      	movs	r7, #1
 8000c26:	0001      	movs	r1, r0
 8000c28:	2838      	cmp	r0, #56	@ 0x38
 8000c2a:	dc11      	bgt.n	8000c50 <__aeabi_dadd+0x1ec>
 8000c2c:	291f      	cmp	r1, #31
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dadd+0x1ce>
 8000c30:	e1c7      	b.n	8000fc2 <__aeabi_dadd+0x55e>
 8000c32:	2720      	movs	r7, #32
 8000c34:	1a78      	subs	r0, r7, r1
 8000c36:	001f      	movs	r7, r3
 8000c38:	4684      	mov	ip, r0
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	40c8      	lsrs	r0, r1
 8000c40:	4307      	orrs	r7, r0
 8000c42:	4660      	mov	r0, ip
 8000c44:	4082      	lsls	r2, r0
 8000c46:	40cb      	lsrs	r3, r1
 8000c48:	1e50      	subs	r0, r2, #1
 8000c4a:	4182      	sbcs	r2, r0
 8000c4c:	18f6      	adds	r6, r6, r3
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	444f      	add	r7, r9
 8000c52:	454f      	cmp	r7, r9
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4240      	negs	r0, r0
 8000c58:	1836      	adds	r6, r6, r0
 8000c5a:	0233      	lsls	r3, r6, #8
 8000c5c:	d557      	bpl.n	8000d0e <__aeabi_dadd+0x2aa>
 8000c5e:	4b64      	ldr	r3, [pc, #400]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c60:	3401      	adds	r4, #1
 8000c62:	429c      	cmp	r4, r3
 8000c64:	d045      	beq.n	8000cf2 <__aeabi_dadd+0x28e>
 8000c66:	2101      	movs	r1, #1
 8000c68:	4b62      	ldr	r3, [pc, #392]	@ (8000df4 <__aeabi_dadd+0x390>)
 8000c6a:	087a      	lsrs	r2, r7, #1
 8000c6c:	401e      	ands	r6, r3
 8000c6e:	4039      	ands	r1, r7
 8000c70:	430a      	orrs	r2, r1
 8000c72:	07f7      	lsls	r7, r6, #31
 8000c74:	4317      	orrs	r7, r2
 8000c76:	0876      	lsrs	r6, r6, #1
 8000c78:	e771      	b.n	8000b5e <__aeabi_dadd+0xfa>
 8000c7a:	001f      	movs	r7, r3
 8000c7c:	4317      	orrs	r7, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x21e>
 8000c80:	e0ad      	b.n	8000dde <__aeabi_dadd+0x37a>
 8000c82:	1e4f      	subs	r7, r1, #1
 8000c84:	46bc      	mov	ip, r7
 8000c86:	2901      	cmp	r1, #1
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dadd+0x228>
 8000c8a:	e182      	b.n	8000f92 <__aeabi_dadd+0x52e>
 8000c8c:	4f58      	ldr	r7, [pc, #352]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c8e:	42b9      	cmp	r1, r7
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x230>
 8000c92:	e190      	b.n	8000fb6 <__aeabi_dadd+0x552>
 8000c94:	4661      	mov	r1, ip
 8000c96:	2701      	movs	r7, #1
 8000c98:	2938      	cmp	r1, #56	@ 0x38
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x23a>
 8000c9c:	e72e      	b.n	8000afc <__aeabi_dadd+0x98>
 8000c9e:	e718      	b.n	8000ad2 <__aeabi_dadd+0x6e>
 8000ca0:	4f55      	ldr	r7, [pc, #340]	@ (8000df8 <__aeabi_dadd+0x394>)
 8000ca2:	1c61      	adds	r1, r4, #1
 8000ca4:	4239      	tst	r1, r7
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x246>
 8000ca8:	e0d0      	b.n	8000e4c <__aeabi_dadd+0x3e8>
 8000caa:	0031      	movs	r1, r6
 8000cac:	4648      	mov	r0, r9
 8000cae:	001f      	movs	r7, r3
 8000cb0:	4301      	orrs	r1, r0
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d000      	beq.n	8000cba <__aeabi_dadd+0x256>
 8000cb8:	e13d      	b.n	8000f36 <__aeabi_dadd+0x4d2>
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x25c>
 8000cbe:	e1bc      	b.n	800103a <__aeabi_dadd+0x5d6>
 8000cc0:	2f00      	cmp	r7, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x262>
 8000cc4:	e1bf      	b.n	8001046 <__aeabi_dadd+0x5e2>
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	2100      	movs	r1, #0
 8000cca:	08d8      	lsrs	r0, r3, #3
 8000ccc:	0777      	lsls	r7, r6, #29
 8000cce:	4307      	orrs	r7, r0
 8000cd0:	08f0      	lsrs	r0, r6, #3
 8000cd2:	0306      	lsls	r6, r0, #12
 8000cd4:	054c      	lsls	r4, r1, #21
 8000cd6:	0b36      	lsrs	r6, r6, #12
 8000cd8:	0d64      	lsrs	r4, r4, #21
 8000cda:	e00c      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000cdc:	4f44      	ldr	r7, [pc, #272]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000cde:	42bc      	cmp	r4, r7
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x280>
 8000ce2:	e08b      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	2938      	cmp	r1, #56	@ 0x38
 8000ce8:	dcb2      	bgt.n	8000c50 <__aeabi_dadd+0x1ec>
 8000cea:	2780      	movs	r7, #128	@ 0x80
 8000cec:	043f      	lsls	r7, r7, #16
 8000cee:	433b      	orrs	r3, r7
 8000cf0:	e79c      	b.n	8000c2c <__aeabi_dadd+0x1c8>
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	0524      	lsls	r4, r4, #20
 8000cf8:	4334      	orrs	r4, r6
 8000cfa:	07ed      	lsls	r5, r5, #31
 8000cfc:	432c      	orrs	r4, r5
 8000cfe:	0038      	movs	r0, r7
 8000d00:	0021      	movs	r1, r4
 8000d02:	b002      	add	sp, #8
 8000d04:	bce0      	pop	{r5, r6, r7}
 8000d06:	46ba      	mov	sl, r7
 8000d08:	46b1      	mov	r9, r6
 8000d0a:	46a8      	mov	r8, r5
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0e:	077b      	lsls	r3, r7, #29
 8000d10:	d004      	beq.n	8000d1c <__aeabi_dadd+0x2b8>
 8000d12:	230f      	movs	r3, #15
 8000d14:	403b      	ands	r3, r7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x2b8>
 8000d1a:	e728      	b.n	8000b6e <__aeabi_dadd+0x10a>
 8000d1c:	08f8      	lsrs	r0, r7, #3
 8000d1e:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d20:	0777      	lsls	r7, r6, #29
 8000d22:	4307      	orrs	r7, r0
 8000d24:	08f0      	lsrs	r0, r6, #3
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dadd+0x2c8>
 8000d2a:	e24a      	b.n	80011c2 <__aeabi_dadd+0x75e>
 8000d2c:	003b      	movs	r3, r7
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	d059      	beq.n	8000de6 <__aeabi_dadd+0x382>
 8000d32:	2680      	movs	r6, #128	@ 0x80
 8000d34:	0336      	lsls	r6, r6, #12
 8000d36:	4306      	orrs	r6, r0
 8000d38:	0336      	lsls	r6, r6, #12
 8000d3a:	4c2d      	ldr	r4, [pc, #180]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d3c:	0b36      	lsrs	r6, r6, #12
 8000d3e:	e7da      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d061      	beq.n	8000e08 <__aeabi_dadd+0x3a4>
 8000d44:	4641      	mov	r1, r8
 8000d46:	1b09      	subs	r1, r1, r4
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x2ea>
 8000d4c:	e0b9      	b.n	8000ec2 <__aeabi_dadd+0x45e>
 8000d4e:	4c28      	ldr	r4, [pc, #160]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x2f2>
 8000d54:	e1a5      	b.n	80010a2 <__aeabi_dadd+0x63e>
 8000d56:	2701      	movs	r7, #1
 8000d58:	2938      	cmp	r1, #56	@ 0x38
 8000d5a:	dc13      	bgt.n	8000d84 <__aeabi_dadd+0x320>
 8000d5c:	2480      	movs	r4, #128	@ 0x80
 8000d5e:	0424      	lsls	r4, r4, #16
 8000d60:	4326      	orrs	r6, r4
 8000d62:	291f      	cmp	r1, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x304>
 8000d66:	e1c8      	b.n	80010fa <__aeabi_dadd+0x696>
 8000d68:	2420      	movs	r4, #32
 8000d6a:	0037      	movs	r7, r6
 8000d6c:	4648      	mov	r0, r9
 8000d6e:	1a64      	subs	r4, r4, r1
 8000d70:	40a7      	lsls	r7, r4
 8000d72:	40c8      	lsrs	r0, r1
 8000d74:	4307      	orrs	r7, r0
 8000d76:	4648      	mov	r0, r9
 8000d78:	40a0      	lsls	r0, r4
 8000d7a:	40ce      	lsrs	r6, r1
 8000d7c:	1e44      	subs	r4, r0, #1
 8000d7e:	41a0      	sbcs	r0, r4
 8000d80:	199b      	adds	r3, r3, r6
 8000d82:	4307      	orrs	r7, r0
 8000d84:	18bf      	adds	r7, r7, r2
 8000d86:	4297      	cmp	r7, r2
 8000d88:	4192      	sbcs	r2, r2
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	18d6      	adds	r6, r2, r3
 8000d90:	e763      	b.n	8000c5a <__aeabi_dadd+0x1f6>
 8000d92:	0038      	movs	r0, r7
 8000d94:	f001 fed0 	bl	8002b38 <__clzsi2>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_dadd+0x33e>
 8000da0:	e6bf      	b.n	8000b22 <__aeabi_dadd+0xbe>
 8000da2:	003a      	movs	r2, r7
 8000da4:	3808      	subs	r0, #8
 8000da6:	4082      	lsls	r2, r0
 8000da8:	429c      	cmp	r4, r3
 8000daa:	dd00      	ble.n	8000dae <__aeabi_dadd+0x34a>
 8000dac:	e083      	b.n	8000eb6 <__aeabi_dadd+0x452>
 8000dae:	1b1b      	subs	r3, r3, r4
 8000db0:	1c58      	adds	r0, r3, #1
 8000db2:	281f      	cmp	r0, #31
 8000db4:	dc00      	bgt.n	8000db8 <__aeabi_dadd+0x354>
 8000db6:	e1b4      	b.n	8001122 <__aeabi_dadd+0x6be>
 8000db8:	0017      	movs	r7, r2
 8000dba:	3b1f      	subs	r3, #31
 8000dbc:	40df      	lsrs	r7, r3
 8000dbe:	2820      	cmp	r0, #32
 8000dc0:	d005      	beq.n	8000dce <__aeabi_dadd+0x36a>
 8000dc2:	2340      	movs	r3, #64	@ 0x40
 8000dc4:	1a1b      	subs	r3, r3, r0
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	1e53      	subs	r3, r2, #1
 8000dca:	419a      	sbcs	r2, r3
 8000dcc:	4317      	orrs	r7, r2
 8000dce:	2400      	movs	r4, #0
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	d00a      	beq.n	8000dea <__aeabi_dadd+0x386>
 8000dd4:	077b      	lsls	r3, r7, #29
 8000dd6:	d000      	beq.n	8000dda <__aeabi_dadd+0x376>
 8000dd8:	e6c4      	b.n	8000b64 <__aeabi_dadd+0x100>
 8000dda:	0026      	movs	r6, r4
 8000ddc:	e79e      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000dde:	464b      	mov	r3, r9
 8000de0:	000c      	movs	r4, r1
 8000de2:	08d8      	lsrs	r0, r3, #3
 8000de4:	e79b      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 8000de6:	2700      	movs	r7, #0
 8000de8:	4c01      	ldr	r4, [pc, #4]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000dea:	2600      	movs	r6, #0
 8000dec:	e783      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	000007ff 	.word	0x000007ff
 8000df4:	ff7fffff 	.word	0xff7fffff
 8000df8:	000007fe 	.word	0x000007fe
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	0777      	lsls	r7, r6, #29
 8000e00:	08d8      	lsrs	r0, r3, #3
 8000e02:	4307      	orrs	r7, r0
 8000e04:	08f0      	lsrs	r0, r6, #3
 8000e06:	e791      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8000e08:	4fcd      	ldr	r7, [pc, #820]	@ (8001140 <__aeabi_dadd+0x6dc>)
 8000e0a:	1c61      	adds	r1, r4, #1
 8000e0c:	4239      	tst	r1, r7
 8000e0e:	d16b      	bne.n	8000ee8 <__aeabi_dadd+0x484>
 8000e10:	0031      	movs	r1, r6
 8000e12:	4648      	mov	r0, r9
 8000e14:	4301      	orrs	r1, r0
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x3b8>
 8000e1a:	e14b      	b.n	80010b4 <__aeabi_dadd+0x650>
 8000e1c:	001f      	movs	r7, r3
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	2900      	cmp	r1, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x3c2>
 8000e24:	e181      	b.n	800112a <__aeabi_dadd+0x6c6>
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x3c8>
 8000e2a:	e74c      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8000e2c:	444a      	add	r2, r9
 8000e2e:	454a      	cmp	r2, r9
 8000e30:	4180      	sbcs	r0, r0
 8000e32:	18f6      	adds	r6, r6, r3
 8000e34:	4240      	negs	r0, r0
 8000e36:	1836      	adds	r6, r6, r0
 8000e38:	0233      	lsls	r3, r6, #8
 8000e3a:	d500      	bpl.n	8000e3e <__aeabi_dadd+0x3da>
 8000e3c:	e1b0      	b.n	80011a0 <__aeabi_dadd+0x73c>
 8000e3e:	0017      	movs	r7, r2
 8000e40:	4691      	mov	r9, r2
 8000e42:	4337      	orrs	r7, r6
 8000e44:	d000      	beq.n	8000e48 <__aeabi_dadd+0x3e4>
 8000e46:	e73e      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e754      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	1a89      	subs	r1, r1, r2
 8000e50:	4688      	mov	r8, r1
 8000e52:	45c1      	cmp	r9, r8
 8000e54:	41bf      	sbcs	r7, r7
 8000e56:	1af1      	subs	r1, r6, r3
 8000e58:	427f      	negs	r7, r7
 8000e5a:	1bc9      	subs	r1, r1, r7
 8000e5c:	020f      	lsls	r7, r1, #8
 8000e5e:	d461      	bmi.n	8000f24 <__aeabi_dadd+0x4c0>
 8000e60:	4647      	mov	r7, r8
 8000e62:	430f      	orrs	r7, r1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x404>
 8000e66:	e0bd      	b.n	8000fe4 <__aeabi_dadd+0x580>
 8000e68:	000e      	movs	r6, r1
 8000e6a:	4647      	mov	r7, r8
 8000e6c:	e651      	b.n	8000b12 <__aeabi_dadd+0xae>
 8000e6e:	4cb5      	ldr	r4, [pc, #724]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x412>
 8000e74:	e100      	b.n	8001078 <__aeabi_dadd+0x614>
 8000e76:	2701      	movs	r7, #1
 8000e78:	2938      	cmp	r1, #56	@ 0x38
 8000e7a:	dd00      	ble.n	8000e7e <__aeabi_dadd+0x41a>
 8000e7c:	e6b8      	b.n	8000bf0 <__aeabi_dadd+0x18c>
 8000e7e:	2480      	movs	r4, #128	@ 0x80
 8000e80:	0424      	lsls	r4, r4, #16
 8000e82:	4326      	orrs	r6, r4
 8000e84:	e6a3      	b.n	8000bce <__aeabi_dadd+0x16a>
 8000e86:	4eb0      	ldr	r6, [pc, #704]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000e88:	1ae4      	subs	r4, r4, r3
 8000e8a:	4016      	ands	r6, r2
 8000e8c:	077b      	lsls	r3, r7, #29
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x42e>
 8000e90:	e73f      	b.n	8000d12 <__aeabi_dadd+0x2ae>
 8000e92:	e743      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000e94:	000f      	movs	r7, r1
 8000e96:	0018      	movs	r0, r3
 8000e98:	3f20      	subs	r7, #32
 8000e9a:	40f8      	lsrs	r0, r7
 8000e9c:	4684      	mov	ip, r0
 8000e9e:	2920      	cmp	r1, #32
 8000ea0:	d003      	beq.n	8000eaa <__aeabi_dadd+0x446>
 8000ea2:	2740      	movs	r7, #64	@ 0x40
 8000ea4:	1a79      	subs	r1, r7, r1
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	1e53      	subs	r3, r2, #1
 8000eac:	419a      	sbcs	r2, r3
 8000eae:	4663      	mov	r3, ip
 8000eb0:	0017      	movs	r7, r2
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	e622      	b.n	8000afc <__aeabi_dadd+0x98>
 8000eb6:	48a4      	ldr	r0, [pc, #656]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000eb8:	1ae1      	subs	r1, r4, r3
 8000eba:	4010      	ands	r0, r2
 8000ebc:	0747      	lsls	r7, r0, #29
 8000ebe:	08c0      	lsrs	r0, r0, #3
 8000ec0:	e707      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000ec2:	0034      	movs	r4, r6
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	4304      	orrs	r4, r0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x468>
 8000eca:	e0fa      	b.n	80010c2 <__aeabi_dadd+0x65e>
 8000ecc:	1e4c      	subs	r4, r1, #1
 8000ece:	2901      	cmp	r1, #1
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dadd+0x470>
 8000ed2:	e0d7      	b.n	8001084 <__aeabi_dadd+0x620>
 8000ed4:	4f9b      	ldr	r7, [pc, #620]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000ed6:	42b9      	cmp	r1, r7
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0x478>
 8000eda:	e0e2      	b.n	80010a2 <__aeabi_dadd+0x63e>
 8000edc:	2701      	movs	r7, #1
 8000ede:	2c38      	cmp	r4, #56	@ 0x38
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_dadd+0x480>
 8000ee2:	e74f      	b.n	8000d84 <__aeabi_dadd+0x320>
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	e73c      	b.n	8000d62 <__aeabi_dadd+0x2fe>
 8000ee8:	4c96      	ldr	r4, [pc, #600]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x48c>
 8000eee:	e0dd      	b.n	80010ac <__aeabi_dadd+0x648>
 8000ef0:	444a      	add	r2, r9
 8000ef2:	454a      	cmp	r2, r9
 8000ef4:	4180      	sbcs	r0, r0
 8000ef6:	18f3      	adds	r3, r6, r3
 8000ef8:	4240      	negs	r0, r0
 8000efa:	1818      	adds	r0, r3, r0
 8000efc:	07c7      	lsls	r7, r0, #31
 8000efe:	0852      	lsrs	r2, r2, #1
 8000f00:	4317      	orrs	r7, r2
 8000f02:	0846      	lsrs	r6, r0, #1
 8000f04:	0752      	lsls	r2, r2, #29
 8000f06:	d005      	beq.n	8000f14 <__aeabi_dadd+0x4b0>
 8000f08:	220f      	movs	r2, #15
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	403a      	ands	r2, r7
 8000f0e:	2a04      	cmp	r2, #4
 8000f10:	d000      	beq.n	8000f14 <__aeabi_dadd+0x4b0>
 8000f12:	e62c      	b.n	8000b6e <__aeabi_dadd+0x10a>
 8000f14:	0776      	lsls	r6, r6, #29
 8000f16:	08ff      	lsrs	r7, r7, #3
 8000f18:	4337      	orrs	r7, r6
 8000f1a:	0900      	lsrs	r0, r0, #4
 8000f1c:	e6d9      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000f1e:	2700      	movs	r7, #0
 8000f20:	2600      	movs	r6, #0
 8000f22:	e6e8      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000f24:	4649      	mov	r1, r9
 8000f26:	1a57      	subs	r7, r2, r1
 8000f28:	42ba      	cmp	r2, r7
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	1b9e      	subs	r6, r3, r6
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4665      	mov	r5, ip
 8000f32:	1ab6      	subs	r6, r6, r2
 8000f34:	e5ed      	b.n	8000b12 <__aeabi_dadd+0xae>
 8000f36:	2900      	cmp	r1, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dadd+0x4d8>
 8000f3a:	e0c6      	b.n	80010ca <__aeabi_dadd+0x666>
 8000f3c:	2f00      	cmp	r7, #0
 8000f3e:	d167      	bne.n	8001010 <__aeabi_dadd+0x5ac>
 8000f40:	2680      	movs	r6, #128	@ 0x80
 8000f42:	2500      	movs	r5, #0
 8000f44:	4c7f      	ldr	r4, [pc, #508]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000f46:	0336      	lsls	r6, r6, #12
 8000f48:	e6d5      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000f4a:	4665      	mov	r5, ip
 8000f4c:	000c      	movs	r4, r1
 8000f4e:	001e      	movs	r6, r3
 8000f50:	08d0      	lsrs	r0, r2, #3
 8000f52:	e6e4      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 8000f54:	444a      	add	r2, r9
 8000f56:	454a      	cmp	r2, r9
 8000f58:	4180      	sbcs	r0, r0
 8000f5a:	18f3      	adds	r3, r6, r3
 8000f5c:	4240      	negs	r0, r0
 8000f5e:	1818      	adds	r0, r3, r0
 8000f60:	0011      	movs	r1, r2
 8000f62:	0203      	lsls	r3, r0, #8
 8000f64:	d400      	bmi.n	8000f68 <__aeabi_dadd+0x504>
 8000f66:	e096      	b.n	8001096 <__aeabi_dadd+0x632>
 8000f68:	4b77      	ldr	r3, [pc, #476]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000f6a:	0849      	lsrs	r1, r1, #1
 8000f6c:	4018      	ands	r0, r3
 8000f6e:	07c3      	lsls	r3, r0, #31
 8000f70:	430b      	orrs	r3, r1
 8000f72:	0844      	lsrs	r4, r0, #1
 8000f74:	0749      	lsls	r1, r1, #29
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x516>
 8000f78:	e129      	b.n	80011ce <__aeabi_dadd+0x76a>
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	2a04      	cmp	r2, #4
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x520>
 8000f82:	e0ea      	b.n	800115a <__aeabi_dadd+0x6f6>
 8000f84:	1d1f      	adds	r7, r3, #4
 8000f86:	429f      	cmp	r7, r3
 8000f88:	41b6      	sbcs	r6, r6
 8000f8a:	4276      	negs	r6, r6
 8000f8c:	1936      	adds	r6, r6, r4
 8000f8e:	2402      	movs	r4, #2
 8000f90:	e6c4      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000f92:	4649      	mov	r1, r9
 8000f94:	1a8f      	subs	r7, r1, r2
 8000f96:	45b9      	cmp	r9, r7
 8000f98:	4180      	sbcs	r0, r0
 8000f9a:	1af6      	subs	r6, r6, r3
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1a36      	subs	r6, r6, r0
 8000fa0:	0233      	lsls	r3, r6, #8
 8000fa2:	d406      	bmi.n	8000fb2 <__aeabi_dadd+0x54e>
 8000fa4:	0773      	lsls	r3, r6, #29
 8000fa6:	08ff      	lsrs	r7, r7, #3
 8000fa8:	2101      	movs	r1, #1
 8000faa:	431f      	orrs	r7, r3
 8000fac:	08f0      	lsrs	r0, r6, #3
 8000fae:	e690      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000fb0:	4665      	mov	r5, ip
 8000fb2:	2401      	movs	r4, #1
 8000fb4:	e5ab      	b.n	8000b0e <__aeabi_dadd+0xaa>
 8000fb6:	464b      	mov	r3, r9
 8000fb8:	0777      	lsls	r7, r6, #29
 8000fba:	08d8      	lsrs	r0, r3, #3
 8000fbc:	4307      	orrs	r7, r0
 8000fbe:	08f0      	lsrs	r0, r6, #3
 8000fc0:	e6b4      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8000fc2:	000f      	movs	r7, r1
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	3f20      	subs	r7, #32
 8000fc8:	40f8      	lsrs	r0, r7
 8000fca:	4684      	mov	ip, r0
 8000fcc:	2920      	cmp	r1, #32
 8000fce:	d003      	beq.n	8000fd8 <__aeabi_dadd+0x574>
 8000fd0:	2740      	movs	r7, #64	@ 0x40
 8000fd2:	1a79      	subs	r1, r7, r1
 8000fd4:	408b      	lsls	r3, r1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	1e53      	subs	r3, r2, #1
 8000fda:	419a      	sbcs	r2, r3
 8000fdc:	4663      	mov	r3, ip
 8000fde:	0017      	movs	r7, r2
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e635      	b.n	8000c50 <__aeabi_dadd+0x1ec>
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	2600      	movs	r6, #0
 8000fea:	e684      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000fec:	000c      	movs	r4, r1
 8000fee:	0035      	movs	r5, r6
 8000ff0:	3c20      	subs	r4, #32
 8000ff2:	40e5      	lsrs	r5, r4
 8000ff4:	2920      	cmp	r1, #32
 8000ff6:	d005      	beq.n	8001004 <__aeabi_dadd+0x5a0>
 8000ff8:	2440      	movs	r4, #64	@ 0x40
 8000ffa:	1a61      	subs	r1, r4, r1
 8000ffc:	408e      	lsls	r6, r1
 8000ffe:	4649      	mov	r1, r9
 8001000:	4331      	orrs	r1, r6
 8001002:	4689      	mov	r9, r1
 8001004:	4648      	mov	r0, r9
 8001006:	1e41      	subs	r1, r0, #1
 8001008:	4188      	sbcs	r0, r1
 800100a:	0007      	movs	r7, r0
 800100c:	432f      	orrs	r7, r5
 800100e:	e5ef      	b.n	8000bf0 <__aeabi_dadd+0x18c>
 8001010:	08d2      	lsrs	r2, r2, #3
 8001012:	075f      	lsls	r7, r3, #29
 8001014:	4665      	mov	r5, ip
 8001016:	4317      	orrs	r7, r2
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	e687      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 800101c:	1a17      	subs	r7, r2, r0
 800101e:	42ba      	cmp	r2, r7
 8001020:	4192      	sbcs	r2, r2
 8001022:	1b9e      	subs	r6, r3, r6
 8001024:	4252      	negs	r2, r2
 8001026:	1ab6      	subs	r6, r6, r2
 8001028:	0233      	lsls	r3, r6, #8
 800102a:	d4c1      	bmi.n	8000fb0 <__aeabi_dadd+0x54c>
 800102c:	0773      	lsls	r3, r6, #29
 800102e:	08ff      	lsrs	r7, r7, #3
 8001030:	4665      	mov	r5, ip
 8001032:	2101      	movs	r1, #1
 8001034:	431f      	orrs	r7, r3
 8001036:	08f0      	lsrs	r0, r6, #3
 8001038:	e64b      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 800103a:	2f00      	cmp	r7, #0
 800103c:	d07b      	beq.n	8001136 <__aeabi_dadd+0x6d2>
 800103e:	4665      	mov	r5, ip
 8001040:	001e      	movs	r6, r3
 8001042:	4691      	mov	r9, r2
 8001044:	e63f      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8001046:	1a81      	subs	r1, r0, r2
 8001048:	4688      	mov	r8, r1
 800104a:	45c1      	cmp	r9, r8
 800104c:	41a4      	sbcs	r4, r4
 800104e:	1af1      	subs	r1, r6, r3
 8001050:	4264      	negs	r4, r4
 8001052:	1b09      	subs	r1, r1, r4
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	0424      	lsls	r4, r4, #16
 8001058:	4221      	tst	r1, r4
 800105a:	d077      	beq.n	800114c <__aeabi_dadd+0x6e8>
 800105c:	1a10      	subs	r0, r2, r0
 800105e:	4282      	cmp	r2, r0
 8001060:	4192      	sbcs	r2, r2
 8001062:	0007      	movs	r7, r0
 8001064:	1b9e      	subs	r6, r3, r6
 8001066:	4252      	negs	r2, r2
 8001068:	1ab6      	subs	r6, r6, r2
 800106a:	4337      	orrs	r7, r6
 800106c:	d000      	beq.n	8001070 <__aeabi_dadd+0x60c>
 800106e:	e0a0      	b.n	80011b2 <__aeabi_dadd+0x74e>
 8001070:	4665      	mov	r5, ip
 8001072:	2400      	movs	r4, #0
 8001074:	2600      	movs	r6, #0
 8001076:	e63e      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8001078:	075f      	lsls	r7, r3, #29
 800107a:	08d2      	lsrs	r2, r2, #3
 800107c:	4665      	mov	r5, ip
 800107e:	4317      	orrs	r7, r2
 8001080:	08d8      	lsrs	r0, r3, #3
 8001082:	e653      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8001084:	1881      	adds	r1, r0, r2
 8001086:	4291      	cmp	r1, r2
 8001088:	4192      	sbcs	r2, r2
 800108a:	18f0      	adds	r0, r6, r3
 800108c:	4252      	negs	r2, r2
 800108e:	1880      	adds	r0, r0, r2
 8001090:	0203      	lsls	r3, r0, #8
 8001092:	d500      	bpl.n	8001096 <__aeabi_dadd+0x632>
 8001094:	e768      	b.n	8000f68 <__aeabi_dadd+0x504>
 8001096:	0747      	lsls	r7, r0, #29
 8001098:	08c9      	lsrs	r1, r1, #3
 800109a:	430f      	orrs	r7, r1
 800109c:	08c0      	lsrs	r0, r0, #3
 800109e:	2101      	movs	r1, #1
 80010a0:	e617      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80010a2:	08d2      	lsrs	r2, r2, #3
 80010a4:	075f      	lsls	r7, r3, #29
 80010a6:	4317      	orrs	r7, r2
 80010a8:	08d8      	lsrs	r0, r3, #3
 80010aa:	e63f      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010ac:	000c      	movs	r4, r1
 80010ae:	2600      	movs	r6, #0
 80010b0:	2700      	movs	r7, #0
 80010b2:	e620      	b.n	8000cf6 <__aeabi_dadd+0x292>
 80010b4:	2900      	cmp	r1, #0
 80010b6:	d156      	bne.n	8001166 <__aeabi_dadd+0x702>
 80010b8:	075f      	lsls	r7, r3, #29
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	4317      	orrs	r7, r2
 80010be:	08d8      	lsrs	r0, r3, #3
 80010c0:	e634      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010c2:	000c      	movs	r4, r1
 80010c4:	001e      	movs	r6, r3
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e629      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 80010ca:	08c1      	lsrs	r1, r0, #3
 80010cc:	0770      	lsls	r0, r6, #29
 80010ce:	4301      	orrs	r1, r0
 80010d0:	08f0      	lsrs	r0, r6, #3
 80010d2:	2f00      	cmp	r7, #0
 80010d4:	d062      	beq.n	800119c <__aeabi_dadd+0x738>
 80010d6:	2480      	movs	r4, #128	@ 0x80
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	4220      	tst	r0, r4
 80010dc:	d007      	beq.n	80010ee <__aeabi_dadd+0x68a>
 80010de:	08de      	lsrs	r6, r3, #3
 80010e0:	4226      	tst	r6, r4
 80010e2:	d104      	bne.n	80010ee <__aeabi_dadd+0x68a>
 80010e4:	4665      	mov	r5, ip
 80010e6:	0030      	movs	r0, r6
 80010e8:	08d1      	lsrs	r1, r2, #3
 80010ea:	075b      	lsls	r3, r3, #29
 80010ec:	4319      	orrs	r1, r3
 80010ee:	0f4f      	lsrs	r7, r1, #29
 80010f0:	00c9      	lsls	r1, r1, #3
 80010f2:	08c9      	lsrs	r1, r1, #3
 80010f4:	077f      	lsls	r7, r7, #29
 80010f6:	430f      	orrs	r7, r1
 80010f8:	e618      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010fa:	000c      	movs	r4, r1
 80010fc:	0030      	movs	r0, r6
 80010fe:	3c20      	subs	r4, #32
 8001100:	40e0      	lsrs	r0, r4
 8001102:	4684      	mov	ip, r0
 8001104:	2920      	cmp	r1, #32
 8001106:	d005      	beq.n	8001114 <__aeabi_dadd+0x6b0>
 8001108:	2440      	movs	r4, #64	@ 0x40
 800110a:	1a61      	subs	r1, r4, r1
 800110c:	408e      	lsls	r6, r1
 800110e:	4649      	mov	r1, r9
 8001110:	4331      	orrs	r1, r6
 8001112:	4689      	mov	r9, r1
 8001114:	4648      	mov	r0, r9
 8001116:	1e41      	subs	r1, r0, #1
 8001118:	4188      	sbcs	r0, r1
 800111a:	4661      	mov	r1, ip
 800111c:	0007      	movs	r7, r0
 800111e:	430f      	orrs	r7, r1
 8001120:	e630      	b.n	8000d84 <__aeabi_dadd+0x320>
 8001122:	2120      	movs	r1, #32
 8001124:	2700      	movs	r7, #0
 8001126:	1a09      	subs	r1, r1, r0
 8001128:	e50e      	b.n	8000b48 <__aeabi_dadd+0xe4>
 800112a:	001e      	movs	r6, r3
 800112c:	2f00      	cmp	r7, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x6ce>
 8001130:	e522      	b.n	8000b78 <__aeabi_dadd+0x114>
 8001132:	2400      	movs	r4, #0
 8001134:	e758      	b.n	8000fe8 <__aeabi_dadd+0x584>
 8001136:	2500      	movs	r5, #0
 8001138:	2400      	movs	r4, #0
 800113a:	2600      	movs	r6, #0
 800113c:	e5db      	b.n	8000cf6 <__aeabi_dadd+0x292>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	000007fe 	.word	0x000007fe
 8001144:	000007ff 	.word	0x000007ff
 8001148:	ff7fffff 	.word	0xff7fffff
 800114c:	4647      	mov	r7, r8
 800114e:	430f      	orrs	r7, r1
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x6f0>
 8001152:	e747      	b.n	8000fe4 <__aeabi_dadd+0x580>
 8001154:	000e      	movs	r6, r1
 8001156:	46c1      	mov	r9, r8
 8001158:	e5b5      	b.n	8000cc6 <__aeabi_dadd+0x262>
 800115a:	08df      	lsrs	r7, r3, #3
 800115c:	0764      	lsls	r4, r4, #29
 800115e:	2102      	movs	r1, #2
 8001160:	4327      	orrs	r7, r4
 8001162:	0900      	lsrs	r0, r0, #4
 8001164:	e5b5      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8001166:	0019      	movs	r1, r3
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	0777      	lsls	r7, r6, #29
 800116c:	4307      	orrs	r7, r0
 800116e:	4311      	orrs	r1, r2
 8001170:	08f0      	lsrs	r0, r6, #3
 8001172:	2900      	cmp	r1, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x714>
 8001176:	e5d9      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	0309      	lsls	r1, r1, #12
 800117c:	4208      	tst	r0, r1
 800117e:	d007      	beq.n	8001190 <__aeabi_dadd+0x72c>
 8001180:	08dc      	lsrs	r4, r3, #3
 8001182:	420c      	tst	r4, r1
 8001184:	d104      	bne.n	8001190 <__aeabi_dadd+0x72c>
 8001186:	08d2      	lsrs	r2, r2, #3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	431a      	orrs	r2, r3
 800118c:	0017      	movs	r7, r2
 800118e:	0020      	movs	r0, r4
 8001190:	0f7b      	lsrs	r3, r7, #29
 8001192:	00ff      	lsls	r7, r7, #3
 8001194:	08ff      	lsrs	r7, r7, #3
 8001196:	075b      	lsls	r3, r3, #29
 8001198:	431f      	orrs	r7, r3
 800119a:	e5c7      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 800119c:	000f      	movs	r7, r1
 800119e:	e5c5      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <__aeabi_dadd+0x788>)
 80011a2:	08d2      	lsrs	r2, r2, #3
 80011a4:	4033      	ands	r3, r6
 80011a6:	075f      	lsls	r7, r3, #29
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	2401      	movs	r4, #1
 80011ac:	4317      	orrs	r7, r2
 80011ae:	0b1e      	lsrs	r6, r3, #12
 80011b0:	e5a1      	b.n	8000cf6 <__aeabi_dadd+0x292>
 80011b2:	4226      	tst	r6, r4
 80011b4:	d012      	beq.n	80011dc <__aeabi_dadd+0x778>
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <__aeabi_dadd+0x788>)
 80011b8:	4665      	mov	r5, ip
 80011ba:	0002      	movs	r2, r0
 80011bc:	2401      	movs	r4, #1
 80011be:	401e      	ands	r6, r3
 80011c0:	e4e6      	b.n	8000b90 <__aeabi_dadd+0x12c>
 80011c2:	0021      	movs	r1, r4
 80011c4:	e585      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011c6:	0017      	movs	r7, r2
 80011c8:	e5a8      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 80011ca:	003a      	movs	r2, r7
 80011cc:	e4d4      	b.n	8000b78 <__aeabi_dadd+0x114>
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	0764      	lsls	r4, r4, #29
 80011d2:	431c      	orrs	r4, r3
 80011d4:	0027      	movs	r7, r4
 80011d6:	2102      	movs	r1, #2
 80011d8:	0900      	lsrs	r0, r0, #4
 80011da:	e57a      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011dc:	08c0      	lsrs	r0, r0, #3
 80011de:	0777      	lsls	r7, r6, #29
 80011e0:	4307      	orrs	r7, r0
 80011e2:	4665      	mov	r5, ip
 80011e4:	2100      	movs	r1, #0
 80011e6:	08f0      	lsrs	r0, r6, #3
 80011e8:	e573      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	ff7fffff 	.word	0xff7fffff

080011f0 <__aeabi_ddiv>:
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	46de      	mov	lr, fp
 80011f4:	4645      	mov	r5, r8
 80011f6:	4657      	mov	r7, sl
 80011f8:	464e      	mov	r6, r9
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	b087      	sub	sp, #28
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	030b      	lsls	r3, r1, #12
 8001204:	0b1b      	lsrs	r3, r3, #12
 8001206:	469b      	mov	fp, r3
 8001208:	0fca      	lsrs	r2, r1, #31
 800120a:	004b      	lsls	r3, r1, #1
 800120c:	0004      	movs	r4, r0
 800120e:	4680      	mov	r8, r0
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	9202      	str	r2, [sp, #8]
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x28>
 8001216:	e098      	b.n	800134a <__aeabi_ddiv+0x15a>
 8001218:	4a7c      	ldr	r2, [pc, #496]	@ (800140c <__aeabi_ddiv+0x21c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d037      	beq.n	800128e <__aeabi_ddiv+0x9e>
 800121e:	4659      	mov	r1, fp
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	00c9      	lsls	r1, r1, #3
 8001224:	430a      	orrs	r2, r1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	0409      	lsls	r1, r1, #16
 800122a:	4311      	orrs	r1, r2
 800122c:	00c2      	lsls	r2, r0, #3
 800122e:	4690      	mov	r8, r2
 8001230:	4a77      	ldr	r2, [pc, #476]	@ (8001410 <__aeabi_ddiv+0x220>)
 8001232:	4689      	mov	r9, r1
 8001234:	4692      	mov	sl, r2
 8001236:	449a      	add	sl, r3
 8001238:	2300      	movs	r3, #0
 800123a:	2400      	movs	r4, #0
 800123c:	9303      	str	r3, [sp, #12]
 800123e:	9e00      	ldr	r6, [sp, #0]
 8001240:	9f01      	ldr	r7, [sp, #4]
 8001242:	033b      	lsls	r3, r7, #12
 8001244:	0b1b      	lsrs	r3, r3, #12
 8001246:	469b      	mov	fp, r3
 8001248:	007b      	lsls	r3, r7, #1
 800124a:	0030      	movs	r0, r6
 800124c:	0d5b      	lsrs	r3, r3, #21
 800124e:	0ffd      	lsrs	r5, r7, #31
 8001250:	2b00      	cmp	r3, #0
 8001252:	d059      	beq.n	8001308 <__aeabi_ddiv+0x118>
 8001254:	4a6d      	ldr	r2, [pc, #436]	@ (800140c <__aeabi_ddiv+0x21c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d048      	beq.n	80012ec <__aeabi_ddiv+0xfc>
 800125a:	4659      	mov	r1, fp
 800125c:	0f72      	lsrs	r2, r6, #29
 800125e:	00c9      	lsls	r1, r1, #3
 8001260:	430a      	orrs	r2, r1
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	0409      	lsls	r1, r1, #16
 8001266:	4311      	orrs	r1, r2
 8001268:	468b      	mov	fp, r1
 800126a:	4969      	ldr	r1, [pc, #420]	@ (8001410 <__aeabi_ddiv+0x220>)
 800126c:	00f2      	lsls	r2, r6, #3
 800126e:	468c      	mov	ip, r1
 8001270:	4651      	mov	r1, sl
 8001272:	4463      	add	r3, ip
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	469a      	mov	sl, r3
 8001278:	2100      	movs	r1, #0
 800127a:	9e02      	ldr	r6, [sp, #8]
 800127c:	406e      	eors	r6, r5
 800127e:	b2f6      	uxtb	r6, r6
 8001280:	2c0f      	cmp	r4, #15
 8001282:	d900      	bls.n	8001286 <__aeabi_ddiv+0x96>
 8001284:	e0ce      	b.n	8001424 <__aeabi_ddiv+0x234>
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <__aeabi_ddiv+0x224>)
 8001288:	00a4      	lsls	r4, r4, #2
 800128a:	591b      	ldr	r3, [r3, r4]
 800128c:	469f      	mov	pc, r3
 800128e:	465a      	mov	r2, fp
 8001290:	4302      	orrs	r2, r0
 8001292:	4691      	mov	r9, r2
 8001294:	d000      	beq.n	8001298 <__aeabi_ddiv+0xa8>
 8001296:	e090      	b.n	80013ba <__aeabi_ddiv+0x1ca>
 8001298:	469a      	mov	sl, r3
 800129a:	2302      	movs	r3, #2
 800129c:	4690      	mov	r8, r2
 800129e:	2408      	movs	r4, #8
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	e7cc      	b.n	800123e <__aeabi_ddiv+0x4e>
 80012a4:	46cb      	mov	fp, r9
 80012a6:	4642      	mov	r2, r8
 80012a8:	9d02      	ldr	r5, [sp, #8]
 80012aa:	9903      	ldr	r1, [sp, #12]
 80012ac:	2902      	cmp	r1, #2
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0xc2>
 80012b0:	e1de      	b.n	8001670 <__aeabi_ddiv+0x480>
 80012b2:	2903      	cmp	r1, #3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0xc8>
 80012b6:	e08d      	b.n	80013d4 <__aeabi_ddiv+0x1e4>
 80012b8:	2901      	cmp	r1, #1
 80012ba:	d000      	beq.n	80012be <__aeabi_ddiv+0xce>
 80012bc:	e179      	b.n	80015b2 <__aeabi_ddiv+0x3c2>
 80012be:	002e      	movs	r6, r5
 80012c0:	2200      	movs	r2, #0
 80012c2:	2300      	movs	r3, #0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4690      	mov	r8, r2
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	4323      	orrs	r3, r4
 80012cc:	07f6      	lsls	r6, r6, #31
 80012ce:	4333      	orrs	r3, r6
 80012d0:	4640      	mov	r0, r8
 80012d2:	0019      	movs	r1, r3
 80012d4:	b007      	add	sp, #28
 80012d6:	bcf0      	pop	{r4, r5, r6, r7}
 80012d8:	46bb      	mov	fp, r7
 80012da:	46b2      	mov	sl, r6
 80012dc:	46a9      	mov	r9, r5
 80012de:	46a0      	mov	r8, r4
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	2200      	movs	r2, #0
 80012e4:	2400      	movs	r4, #0
 80012e6:	4690      	mov	r8, r2
 80012e8:	4b48      	ldr	r3, [pc, #288]	@ (800140c <__aeabi_ddiv+0x21c>)
 80012ea:	e7ed      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80012ec:	465a      	mov	r2, fp
 80012ee:	9b00      	ldr	r3, [sp, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <__aeabi_ddiv+0x228>)
 80012f4:	469c      	mov	ip, r3
 80012f6:	44e2      	add	sl, ip
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	d159      	bne.n	80013b0 <__aeabi_ddiv+0x1c0>
 80012fc:	2302      	movs	r3, #2
 80012fe:	431c      	orrs	r4, r3
 8001300:	2300      	movs	r3, #0
 8001302:	2102      	movs	r1, #2
 8001304:	469b      	mov	fp, r3
 8001306:	e7b8      	b.n	800127a <__aeabi_ddiv+0x8a>
 8001308:	465a      	mov	r2, fp
 800130a:	9b00      	ldr	r3, [sp, #0]
 800130c:	431a      	orrs	r2, r3
 800130e:	d049      	beq.n	80013a4 <__aeabi_ddiv+0x1b4>
 8001310:	465b      	mov	r3, fp
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_ddiv+0x128>
 8001316:	e19c      	b.n	8001652 <__aeabi_ddiv+0x462>
 8001318:	4658      	mov	r0, fp
 800131a:	f001 fc0d 	bl	8002b38 <__clzsi2>
 800131e:	0002      	movs	r2, r0
 8001320:	0003      	movs	r3, r0
 8001322:	3a0b      	subs	r2, #11
 8001324:	271d      	movs	r7, #29
 8001326:	9e00      	ldr	r6, [sp, #0]
 8001328:	1aba      	subs	r2, r7, r2
 800132a:	0019      	movs	r1, r3
 800132c:	4658      	mov	r0, fp
 800132e:	40d6      	lsrs	r6, r2
 8001330:	3908      	subs	r1, #8
 8001332:	4088      	lsls	r0, r1
 8001334:	0032      	movs	r2, r6
 8001336:	4302      	orrs	r2, r0
 8001338:	4693      	mov	fp, r2
 800133a:	9a00      	ldr	r2, [sp, #0]
 800133c:	408a      	lsls	r2, r1
 800133e:	4937      	ldr	r1, [pc, #220]	@ (800141c <__aeabi_ddiv+0x22c>)
 8001340:	4453      	add	r3, sl
 8001342:	468a      	mov	sl, r1
 8001344:	2100      	movs	r1, #0
 8001346:	449a      	add	sl, r3
 8001348:	e797      	b.n	800127a <__aeabi_ddiv+0x8a>
 800134a:	465b      	mov	r3, fp
 800134c:	4303      	orrs	r3, r0
 800134e:	4699      	mov	r9, r3
 8001350:	d021      	beq.n	8001396 <__aeabi_ddiv+0x1a6>
 8001352:	465b      	mov	r3, fp
 8001354:	2b00      	cmp	r3, #0
 8001356:	d100      	bne.n	800135a <__aeabi_ddiv+0x16a>
 8001358:	e169      	b.n	800162e <__aeabi_ddiv+0x43e>
 800135a:	4658      	mov	r0, fp
 800135c:	f001 fbec 	bl	8002b38 <__clzsi2>
 8001360:	230b      	movs	r3, #11
 8001362:	425b      	negs	r3, r3
 8001364:	469c      	mov	ip, r3
 8001366:	0002      	movs	r2, r0
 8001368:	4484      	add	ip, r0
 800136a:	4666      	mov	r6, ip
 800136c:	231d      	movs	r3, #29
 800136e:	1b9b      	subs	r3, r3, r6
 8001370:	0026      	movs	r6, r4
 8001372:	0011      	movs	r1, r2
 8001374:	4658      	mov	r0, fp
 8001376:	40de      	lsrs	r6, r3
 8001378:	3908      	subs	r1, #8
 800137a:	4088      	lsls	r0, r1
 800137c:	0033      	movs	r3, r6
 800137e:	4303      	orrs	r3, r0
 8001380:	4699      	mov	r9, r3
 8001382:	0023      	movs	r3, r4
 8001384:	408b      	lsls	r3, r1
 8001386:	4698      	mov	r8, r3
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <__aeabi_ddiv+0x230>)
 800138a:	2400      	movs	r4, #0
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	469a      	mov	sl, r3
 8001390:	2300      	movs	r3, #0
 8001392:	9303      	str	r3, [sp, #12]
 8001394:	e753      	b.n	800123e <__aeabi_ddiv+0x4e>
 8001396:	2300      	movs	r3, #0
 8001398:	4698      	mov	r8, r3
 800139a:	469a      	mov	sl, r3
 800139c:	3301      	adds	r3, #1
 800139e:	2404      	movs	r4, #4
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	e74c      	b.n	800123e <__aeabi_ddiv+0x4e>
 80013a4:	2301      	movs	r3, #1
 80013a6:	431c      	orrs	r4, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	2101      	movs	r1, #1
 80013ac:	469b      	mov	fp, r3
 80013ae:	e764      	b.n	800127a <__aeabi_ddiv+0x8a>
 80013b0:	2303      	movs	r3, #3
 80013b2:	0032      	movs	r2, r6
 80013b4:	2103      	movs	r1, #3
 80013b6:	431c      	orrs	r4, r3
 80013b8:	e75f      	b.n	800127a <__aeabi_ddiv+0x8a>
 80013ba:	469a      	mov	sl, r3
 80013bc:	2303      	movs	r3, #3
 80013be:	46d9      	mov	r9, fp
 80013c0:	240c      	movs	r4, #12
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	e73b      	b.n	800123e <__aeabi_ddiv+0x4e>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2480      	movs	r4, #128	@ 0x80
 80013ca:	4698      	mov	r8, r3
 80013cc:	2600      	movs	r6, #0
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <__aeabi_ddiv+0x21c>)
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	e779      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80013d4:	2480      	movs	r4, #128	@ 0x80
 80013d6:	465b      	mov	r3, fp
 80013d8:	0324      	lsls	r4, r4, #12
 80013da:	431c      	orrs	r4, r3
 80013dc:	0324      	lsls	r4, r4, #12
 80013de:	002e      	movs	r6, r5
 80013e0:	4690      	mov	r8, r2
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <__aeabi_ddiv+0x21c>)
 80013e4:	0b24      	lsrs	r4, r4, #12
 80013e6:	e76f      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80013e8:	2480      	movs	r4, #128	@ 0x80
 80013ea:	464b      	mov	r3, r9
 80013ec:	0324      	lsls	r4, r4, #12
 80013ee:	4223      	tst	r3, r4
 80013f0:	d002      	beq.n	80013f8 <__aeabi_ddiv+0x208>
 80013f2:	465b      	mov	r3, fp
 80013f4:	4223      	tst	r3, r4
 80013f6:	d0f0      	beq.n	80013da <__aeabi_ddiv+0x1ea>
 80013f8:	2480      	movs	r4, #128	@ 0x80
 80013fa:	464b      	mov	r3, r9
 80013fc:	0324      	lsls	r4, r4, #12
 80013fe:	431c      	orrs	r4, r3
 8001400:	0324      	lsls	r4, r4, #12
 8001402:	9e02      	ldr	r6, [sp, #8]
 8001404:	4b01      	ldr	r3, [pc, #4]	@ (800140c <__aeabi_ddiv+0x21c>)
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	e75e      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	000007ff 	.word	0x000007ff
 8001410:	fffffc01 	.word	0xfffffc01
 8001414:	0800ac78 	.word	0x0800ac78
 8001418:	fffff801 	.word	0xfffff801
 800141c:	000003f3 	.word	0x000003f3
 8001420:	fffffc0d 	.word	0xfffffc0d
 8001424:	45cb      	cmp	fp, r9
 8001426:	d200      	bcs.n	800142a <__aeabi_ddiv+0x23a>
 8001428:	e0f8      	b.n	800161c <__aeabi_ddiv+0x42c>
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x23e>
 800142c:	e0f3      	b.n	8001616 <__aeabi_ddiv+0x426>
 800142e:	2301      	movs	r3, #1
 8001430:	425b      	negs	r3, r3
 8001432:	469c      	mov	ip, r3
 8001434:	4644      	mov	r4, r8
 8001436:	4648      	mov	r0, r9
 8001438:	2500      	movs	r5, #0
 800143a:	44e2      	add	sl, ip
 800143c:	465b      	mov	r3, fp
 800143e:	0e17      	lsrs	r7, r2, #24
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	431f      	orrs	r7, r3
 8001444:	0c19      	lsrs	r1, r3, #16
 8001446:	043b      	lsls	r3, r7, #16
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	9700      	str	r7, [sp, #0]
 800144c:	0c1f      	lsrs	r7, r3, #16
 800144e:	4691      	mov	r9, r2
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9703      	str	r7, [sp, #12]
 8001454:	f7fe fef6 	bl	8000244 <__aeabi_uidivmod>
 8001458:	0002      	movs	r2, r0
 800145a:	437a      	muls	r2, r7
 800145c:	040b      	lsls	r3, r1, #16
 800145e:	0c21      	lsrs	r1, r4, #16
 8001460:	4680      	mov	r8, r0
 8001462:	4319      	orrs	r1, r3
 8001464:	428a      	cmp	r2, r1
 8001466:	d909      	bls.n	800147c <__aeabi_ddiv+0x28c>
 8001468:	9f00      	ldr	r7, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	46bc      	mov	ip, r7
 800146e:	425b      	negs	r3, r3
 8001470:	4461      	add	r1, ip
 8001472:	469c      	mov	ip, r3
 8001474:	44e0      	add	r8, ip
 8001476:	428f      	cmp	r7, r1
 8001478:	d800      	bhi.n	800147c <__aeabi_ddiv+0x28c>
 800147a:	e15c      	b.n	8001736 <__aeabi_ddiv+0x546>
 800147c:	1a88      	subs	r0, r1, r2
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	f7fe fee0 	bl	8000244 <__aeabi_uidivmod>
 8001484:	9a03      	ldr	r2, [sp, #12]
 8001486:	0424      	lsls	r4, r4, #16
 8001488:	4342      	muls	r2, r0
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	0c24      	lsrs	r4, r4, #16
 800148e:	0003      	movs	r3, r0
 8001490:	430c      	orrs	r4, r1
 8001492:	42a2      	cmp	r2, r4
 8001494:	d906      	bls.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001496:	9900      	ldr	r1, [sp, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	468c      	mov	ip, r1
 800149c:	4464      	add	r4, ip
 800149e:	42a1      	cmp	r1, r4
 80014a0:	d800      	bhi.n	80014a4 <__aeabi_ddiv+0x2b4>
 80014a2:	e142      	b.n	800172a <__aeabi_ddiv+0x53a>
 80014a4:	1aa0      	subs	r0, r4, r2
 80014a6:	4642      	mov	r2, r8
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	4693      	mov	fp, r2
 80014ae:	464b      	mov	r3, r9
 80014b0:	4659      	mov	r1, fp
 80014b2:	0c1b      	lsrs	r3, r3, #16
 80014b4:	001f      	movs	r7, r3
 80014b6:	9304      	str	r3, [sp, #16]
 80014b8:	040b      	lsls	r3, r1, #16
 80014ba:	4649      	mov	r1, r9
 80014bc:	0409      	lsls	r1, r1, #16
 80014be:	0c09      	lsrs	r1, r1, #16
 80014c0:	000c      	movs	r4, r1
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	435c      	muls	r4, r3
 80014c6:	0c12      	lsrs	r2, r2, #16
 80014c8:	437b      	muls	r3, r7
 80014ca:	4688      	mov	r8, r1
 80014cc:	4351      	muls	r1, r2
 80014ce:	437a      	muls	r2, r7
 80014d0:	0c27      	lsrs	r7, r4, #16
 80014d2:	46bc      	mov	ip, r7
 80014d4:	185b      	adds	r3, r3, r1
 80014d6:	4463      	add	r3, ip
 80014d8:	4299      	cmp	r1, r3
 80014da:	d903      	bls.n	80014e4 <__aeabi_ddiv+0x2f4>
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0249      	lsls	r1, r1, #9
 80014e0:	468c      	mov	ip, r1
 80014e2:	4462      	add	r2, ip
 80014e4:	0c19      	lsrs	r1, r3, #16
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	0c24      	lsrs	r4, r4, #16
 80014ec:	188a      	adds	r2, r1, r2
 80014ee:	191c      	adds	r4, r3, r4
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d302      	bcc.n	80014fa <__aeabi_ddiv+0x30a>
 80014f4:	d116      	bne.n	8001524 <__aeabi_ddiv+0x334>
 80014f6:	42a5      	cmp	r5, r4
 80014f8:	d214      	bcs.n	8001524 <__aeabi_ddiv+0x334>
 80014fa:	465b      	mov	r3, fp
 80014fc:	9f00      	ldr	r7, [sp, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	444d      	add	r5, r9
 8001502:	9305      	str	r3, [sp, #20]
 8001504:	454d      	cmp	r5, r9
 8001506:	419b      	sbcs	r3, r3
 8001508:	46bc      	mov	ip, r7
 800150a:	425b      	negs	r3, r3
 800150c:	4463      	add	r3, ip
 800150e:	18c0      	adds	r0, r0, r3
 8001510:	4287      	cmp	r7, r0
 8001512:	d300      	bcc.n	8001516 <__aeabi_ddiv+0x326>
 8001514:	e102      	b.n	800171c <__aeabi_ddiv+0x52c>
 8001516:	4282      	cmp	r2, r0
 8001518:	d900      	bls.n	800151c <__aeabi_ddiv+0x32c>
 800151a:	e129      	b.n	8001770 <__aeabi_ddiv+0x580>
 800151c:	d100      	bne.n	8001520 <__aeabi_ddiv+0x330>
 800151e:	e124      	b.n	800176a <__aeabi_ddiv+0x57a>
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	469b      	mov	fp, r3
 8001524:	1b2c      	subs	r4, r5, r4
 8001526:	42a5      	cmp	r5, r4
 8001528:	41ad      	sbcs	r5, r5
 800152a:	9b00      	ldr	r3, [sp, #0]
 800152c:	1a80      	subs	r0, r0, r2
 800152e:	426d      	negs	r5, r5
 8001530:	1b40      	subs	r0, r0, r5
 8001532:	4283      	cmp	r3, r0
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x348>
 8001536:	e10f      	b.n	8001758 <__aeabi_ddiv+0x568>
 8001538:	9902      	ldr	r1, [sp, #8]
 800153a:	f7fe fe83 	bl	8000244 <__aeabi_uidivmod>
 800153e:	9a03      	ldr	r2, [sp, #12]
 8001540:	040b      	lsls	r3, r1, #16
 8001542:	4342      	muls	r2, r0
 8001544:	0c21      	lsrs	r1, r4, #16
 8001546:	0005      	movs	r5, r0
 8001548:	4319      	orrs	r1, r3
 800154a:	428a      	cmp	r2, r1
 800154c:	d900      	bls.n	8001550 <__aeabi_ddiv+0x360>
 800154e:	e0cb      	b.n	80016e8 <__aeabi_ddiv+0x4f8>
 8001550:	1a88      	subs	r0, r1, r2
 8001552:	9902      	ldr	r1, [sp, #8]
 8001554:	f7fe fe76 	bl	8000244 <__aeabi_uidivmod>
 8001558:	9a03      	ldr	r2, [sp, #12]
 800155a:	0424      	lsls	r4, r4, #16
 800155c:	4342      	muls	r2, r0
 800155e:	0409      	lsls	r1, r1, #16
 8001560:	0c24      	lsrs	r4, r4, #16
 8001562:	0003      	movs	r3, r0
 8001564:	430c      	orrs	r4, r1
 8001566:	42a2      	cmp	r2, r4
 8001568:	d900      	bls.n	800156c <__aeabi_ddiv+0x37c>
 800156a:	e0ca      	b.n	8001702 <__aeabi_ddiv+0x512>
 800156c:	4641      	mov	r1, r8
 800156e:	1aa4      	subs	r4, r4, r2
 8001570:	042a      	lsls	r2, r5, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	9f04      	ldr	r7, [sp, #16]
 8001576:	0413      	lsls	r3, r2, #16
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	4359      	muls	r1, r3
 800157c:	4640      	mov	r0, r8
 800157e:	437b      	muls	r3, r7
 8001580:	469c      	mov	ip, r3
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	4368      	muls	r0, r5
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	4484      	add	ip, r0
 800158a:	4463      	add	r3, ip
 800158c:	437d      	muls	r5, r7
 800158e:	4298      	cmp	r0, r3
 8001590:	d903      	bls.n	800159a <__aeabi_ddiv+0x3aa>
 8001592:	2080      	movs	r0, #128	@ 0x80
 8001594:	0240      	lsls	r0, r0, #9
 8001596:	4684      	mov	ip, r0
 8001598:	4465      	add	r5, ip
 800159a:	0c18      	lsrs	r0, r3, #16
 800159c:	0409      	lsls	r1, r1, #16
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	0c09      	lsrs	r1, r1, #16
 80015a2:	1940      	adds	r0, r0, r5
 80015a4:	185b      	adds	r3, r3, r1
 80015a6:	4284      	cmp	r4, r0
 80015a8:	d327      	bcc.n	80015fa <__aeabi_ddiv+0x40a>
 80015aa:	d023      	beq.n	80015f4 <__aeabi_ddiv+0x404>
 80015ac:	2301      	movs	r3, #1
 80015ae:	0035      	movs	r5, r6
 80015b0:	431a      	orrs	r2, r3
 80015b2:	4b94      	ldr	r3, [pc, #592]	@ (8001804 <__aeabi_ddiv+0x614>)
 80015b4:	4453      	add	r3, sl
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dd60      	ble.n	800167c <__aeabi_ddiv+0x48c>
 80015ba:	0751      	lsls	r1, r2, #29
 80015bc:	d000      	beq.n	80015c0 <__aeabi_ddiv+0x3d0>
 80015be:	e086      	b.n	80016ce <__aeabi_ddiv+0x4de>
 80015c0:	002e      	movs	r6, r5
 80015c2:	08d1      	lsrs	r1, r2, #3
 80015c4:	465a      	mov	r2, fp
 80015c6:	01d2      	lsls	r2, r2, #7
 80015c8:	d506      	bpl.n	80015d8 <__aeabi_ddiv+0x3e8>
 80015ca:	465a      	mov	r2, fp
 80015cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001808 <__aeabi_ddiv+0x618>)
 80015ce:	401a      	ands	r2, r3
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	4693      	mov	fp, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4453      	add	r3, sl
 80015d8:	4a8c      	ldr	r2, [pc, #560]	@ (800180c <__aeabi_ddiv+0x61c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_ddiv+0x3f0>
 80015de:	e680      	b.n	80012e2 <__aeabi_ddiv+0xf2>
 80015e0:	465a      	mov	r2, fp
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	430a      	orrs	r2, r1
 80015e6:	4690      	mov	r8, r2
 80015e8:	465a      	mov	r2, fp
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	0254      	lsls	r4, r2, #9
 80015ee:	0b24      	lsrs	r4, r4, #12
 80015f0:	0d5b      	lsrs	r3, r3, #21
 80015f2:	e669      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80015f4:	0035      	movs	r5, r6
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0db      	beq.n	80015b2 <__aeabi_ddiv+0x3c2>
 80015fa:	9d00      	ldr	r5, [sp, #0]
 80015fc:	1e51      	subs	r1, r2, #1
 80015fe:	46ac      	mov	ip, r5
 8001600:	4464      	add	r4, ip
 8001602:	42ac      	cmp	r4, r5
 8001604:	d200      	bcs.n	8001608 <__aeabi_ddiv+0x418>
 8001606:	e09e      	b.n	8001746 <__aeabi_ddiv+0x556>
 8001608:	4284      	cmp	r4, r0
 800160a:	d200      	bcs.n	800160e <__aeabi_ddiv+0x41e>
 800160c:	e0e1      	b.n	80017d2 <__aeabi_ddiv+0x5e2>
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x422>
 8001610:	e0ee      	b.n	80017f0 <__aeabi_ddiv+0x600>
 8001612:	000a      	movs	r2, r1
 8001614:	e7ca      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 8001616:	4542      	cmp	r2, r8
 8001618:	d900      	bls.n	800161c <__aeabi_ddiv+0x42c>
 800161a:	e708      	b.n	800142e <__aeabi_ddiv+0x23e>
 800161c:	464b      	mov	r3, r9
 800161e:	07dc      	lsls	r4, r3, #31
 8001620:	0858      	lsrs	r0, r3, #1
 8001622:	4643      	mov	r3, r8
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	431c      	orrs	r4, r3
 8001628:	4643      	mov	r3, r8
 800162a:	07dd      	lsls	r5, r3, #31
 800162c:	e706      	b.n	800143c <__aeabi_ddiv+0x24c>
 800162e:	f001 fa83 	bl	8002b38 <__clzsi2>
 8001632:	2315      	movs	r3, #21
 8001634:	469c      	mov	ip, r3
 8001636:	4484      	add	ip, r0
 8001638:	0002      	movs	r2, r0
 800163a:	4663      	mov	r3, ip
 800163c:	3220      	adds	r2, #32
 800163e:	2b1c      	cmp	r3, #28
 8001640:	dc00      	bgt.n	8001644 <__aeabi_ddiv+0x454>
 8001642:	e692      	b.n	800136a <__aeabi_ddiv+0x17a>
 8001644:	0023      	movs	r3, r4
 8001646:	3808      	subs	r0, #8
 8001648:	4083      	lsls	r3, r0
 800164a:	4699      	mov	r9, r3
 800164c:	2300      	movs	r3, #0
 800164e:	4698      	mov	r8, r3
 8001650:	e69a      	b.n	8001388 <__aeabi_ddiv+0x198>
 8001652:	f001 fa71 	bl	8002b38 <__clzsi2>
 8001656:	0002      	movs	r2, r0
 8001658:	0003      	movs	r3, r0
 800165a:	3215      	adds	r2, #21
 800165c:	3320      	adds	r3, #32
 800165e:	2a1c      	cmp	r2, #28
 8001660:	dc00      	bgt.n	8001664 <__aeabi_ddiv+0x474>
 8001662:	e65f      	b.n	8001324 <__aeabi_ddiv+0x134>
 8001664:	9900      	ldr	r1, [sp, #0]
 8001666:	3808      	subs	r0, #8
 8001668:	4081      	lsls	r1, r0
 800166a:	2200      	movs	r2, #0
 800166c:	468b      	mov	fp, r1
 800166e:	e666      	b.n	800133e <__aeabi_ddiv+0x14e>
 8001670:	2200      	movs	r2, #0
 8001672:	002e      	movs	r6, r5
 8001674:	2400      	movs	r4, #0
 8001676:	4690      	mov	r8, r2
 8001678:	4b65      	ldr	r3, [pc, #404]	@ (8001810 <__aeabi_ddiv+0x620>)
 800167a:	e625      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 800167c:	002e      	movs	r6, r5
 800167e:	2101      	movs	r1, #1
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	2938      	cmp	r1, #56	@ 0x38
 8001684:	dd00      	ble.n	8001688 <__aeabi_ddiv+0x498>
 8001686:	e61b      	b.n	80012c0 <__aeabi_ddiv+0xd0>
 8001688:	291f      	cmp	r1, #31
 800168a:	dc7e      	bgt.n	800178a <__aeabi_ddiv+0x59a>
 800168c:	4861      	ldr	r0, [pc, #388]	@ (8001814 <__aeabi_ddiv+0x624>)
 800168e:	0014      	movs	r4, r2
 8001690:	4450      	add	r0, sl
 8001692:	465b      	mov	r3, fp
 8001694:	4082      	lsls	r2, r0
 8001696:	4083      	lsls	r3, r0
 8001698:	40cc      	lsrs	r4, r1
 800169a:	1e50      	subs	r0, r2, #1
 800169c:	4182      	sbcs	r2, r0
 800169e:	4323      	orrs	r3, r4
 80016a0:	431a      	orrs	r2, r3
 80016a2:	465b      	mov	r3, fp
 80016a4:	40cb      	lsrs	r3, r1
 80016a6:	0751      	lsls	r1, r2, #29
 80016a8:	d009      	beq.n	80016be <__aeabi_ddiv+0x4ce>
 80016aa:	210f      	movs	r1, #15
 80016ac:	4011      	ands	r1, r2
 80016ae:	2904      	cmp	r1, #4
 80016b0:	d005      	beq.n	80016be <__aeabi_ddiv+0x4ce>
 80016b2:	1d11      	adds	r1, r2, #4
 80016b4:	4291      	cmp	r1, r2
 80016b6:	4192      	sbcs	r2, r2
 80016b8:	4252      	negs	r2, r2
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	000a      	movs	r2, r1
 80016be:	0219      	lsls	r1, r3, #8
 80016c0:	d400      	bmi.n	80016c4 <__aeabi_ddiv+0x4d4>
 80016c2:	e09b      	b.n	80017fc <__aeabi_ddiv+0x60c>
 80016c4:	2200      	movs	r2, #0
 80016c6:	2301      	movs	r3, #1
 80016c8:	2400      	movs	r4, #0
 80016ca:	4690      	mov	r8, r2
 80016cc:	e5fc      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80016ce:	210f      	movs	r1, #15
 80016d0:	4011      	ands	r1, r2
 80016d2:	2904      	cmp	r1, #4
 80016d4:	d100      	bne.n	80016d8 <__aeabi_ddiv+0x4e8>
 80016d6:	e773      	b.n	80015c0 <__aeabi_ddiv+0x3d0>
 80016d8:	1d11      	adds	r1, r2, #4
 80016da:	4291      	cmp	r1, r2
 80016dc:	4192      	sbcs	r2, r2
 80016de:	4252      	negs	r2, r2
 80016e0:	002e      	movs	r6, r5
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	4493      	add	fp, r2
 80016e6:	e76d      	b.n	80015c4 <__aeabi_ddiv+0x3d4>
 80016e8:	9b00      	ldr	r3, [sp, #0]
 80016ea:	3d01      	subs	r5, #1
 80016ec:	469c      	mov	ip, r3
 80016ee:	4461      	add	r1, ip
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d900      	bls.n	80016f6 <__aeabi_ddiv+0x506>
 80016f4:	e72c      	b.n	8001550 <__aeabi_ddiv+0x360>
 80016f6:	428a      	cmp	r2, r1
 80016f8:	d800      	bhi.n	80016fc <__aeabi_ddiv+0x50c>
 80016fa:	e729      	b.n	8001550 <__aeabi_ddiv+0x360>
 80016fc:	1e85      	subs	r5, r0, #2
 80016fe:	4461      	add	r1, ip
 8001700:	e726      	b.n	8001550 <__aeabi_ddiv+0x360>
 8001702:	9900      	ldr	r1, [sp, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	468c      	mov	ip, r1
 8001708:	4464      	add	r4, ip
 800170a:	42a1      	cmp	r1, r4
 800170c:	d900      	bls.n	8001710 <__aeabi_ddiv+0x520>
 800170e:	e72d      	b.n	800156c <__aeabi_ddiv+0x37c>
 8001710:	42a2      	cmp	r2, r4
 8001712:	d800      	bhi.n	8001716 <__aeabi_ddiv+0x526>
 8001714:	e72a      	b.n	800156c <__aeabi_ddiv+0x37c>
 8001716:	1e83      	subs	r3, r0, #2
 8001718:	4464      	add	r4, ip
 800171a:	e727      	b.n	800156c <__aeabi_ddiv+0x37c>
 800171c:	4287      	cmp	r7, r0
 800171e:	d000      	beq.n	8001722 <__aeabi_ddiv+0x532>
 8001720:	e6fe      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001722:	45a9      	cmp	r9, r5
 8001724:	d900      	bls.n	8001728 <__aeabi_ddiv+0x538>
 8001726:	e6fb      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001728:	e6f5      	b.n	8001516 <__aeabi_ddiv+0x326>
 800172a:	42a2      	cmp	r2, r4
 800172c:	d800      	bhi.n	8001730 <__aeabi_ddiv+0x540>
 800172e:	e6b9      	b.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001730:	1e83      	subs	r3, r0, #2
 8001732:	4464      	add	r4, ip
 8001734:	e6b6      	b.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001736:	428a      	cmp	r2, r1
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x54c>
 800173a:	e69f      	b.n	800147c <__aeabi_ddiv+0x28c>
 800173c:	46bc      	mov	ip, r7
 800173e:	1e83      	subs	r3, r0, #2
 8001740:	4698      	mov	r8, r3
 8001742:	4461      	add	r1, ip
 8001744:	e69a      	b.n	800147c <__aeabi_ddiv+0x28c>
 8001746:	000a      	movs	r2, r1
 8001748:	4284      	cmp	r4, r0
 800174a:	d000      	beq.n	800174e <__aeabi_ddiv+0x55e>
 800174c:	e72e      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 800174e:	454b      	cmp	r3, r9
 8001750:	d000      	beq.n	8001754 <__aeabi_ddiv+0x564>
 8001752:	e72b      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 8001754:	0035      	movs	r5, r6
 8001756:	e72c      	b.n	80015b2 <__aeabi_ddiv+0x3c2>
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <__aeabi_ddiv+0x614>)
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <__aeabi_ddiv+0x628>)
 800175c:	4453      	add	r3, sl
 800175e:	4592      	cmp	sl, r2
 8001760:	db43      	blt.n	80017ea <__aeabi_ddiv+0x5fa>
 8001762:	2201      	movs	r2, #1
 8001764:	2100      	movs	r1, #0
 8001766:	4493      	add	fp, r2
 8001768:	e72c      	b.n	80015c4 <__aeabi_ddiv+0x3d4>
 800176a:	42ac      	cmp	r4, r5
 800176c:	d800      	bhi.n	8001770 <__aeabi_ddiv+0x580>
 800176e:	e6d7      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001770:	2302      	movs	r3, #2
 8001772:	425b      	negs	r3, r3
 8001774:	469c      	mov	ip, r3
 8001776:	9900      	ldr	r1, [sp, #0]
 8001778:	444d      	add	r5, r9
 800177a:	454d      	cmp	r5, r9
 800177c:	419b      	sbcs	r3, r3
 800177e:	44e3      	add	fp, ip
 8001780:	468c      	mov	ip, r1
 8001782:	425b      	negs	r3, r3
 8001784:	4463      	add	r3, ip
 8001786:	18c0      	adds	r0, r0, r3
 8001788:	e6cc      	b.n	8001524 <__aeabi_ddiv+0x334>
 800178a:	201f      	movs	r0, #31
 800178c:	4240      	negs	r0, r0
 800178e:	1ac3      	subs	r3, r0, r3
 8001790:	4658      	mov	r0, fp
 8001792:	40d8      	lsrs	r0, r3
 8001794:	2920      	cmp	r1, #32
 8001796:	d004      	beq.n	80017a2 <__aeabi_ddiv+0x5b2>
 8001798:	4659      	mov	r1, fp
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <__aeabi_ddiv+0x62c>)
 800179c:	4453      	add	r3, sl
 800179e:	4099      	lsls	r1, r3
 80017a0:	430a      	orrs	r2, r1
 80017a2:	1e53      	subs	r3, r2, #1
 80017a4:	419a      	sbcs	r2, r3
 80017a6:	2307      	movs	r3, #7
 80017a8:	0019      	movs	r1, r3
 80017aa:	4302      	orrs	r2, r0
 80017ac:	2400      	movs	r4, #0
 80017ae:	4011      	ands	r1, r2
 80017b0:	4213      	tst	r3, r2
 80017b2:	d009      	beq.n	80017c8 <__aeabi_ddiv+0x5d8>
 80017b4:	3308      	adds	r3, #8
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d01d      	beq.n	80017f8 <__aeabi_ddiv+0x608>
 80017bc:	1d13      	adds	r3, r2, #4
 80017be:	4293      	cmp	r3, r2
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	001a      	movs	r2, r3
 80017c4:	4249      	negs	r1, r1
 80017c6:	0749      	lsls	r1, r1, #29
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	430a      	orrs	r2, r1
 80017cc:	4690      	mov	r8, r2
 80017ce:	2300      	movs	r3, #0
 80017d0:	e57a      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80017d2:	4649      	mov	r1, r9
 80017d4:	9f00      	ldr	r7, [sp, #0]
 80017d6:	004d      	lsls	r5, r1, #1
 80017d8:	454d      	cmp	r5, r9
 80017da:	4189      	sbcs	r1, r1
 80017dc:	46bc      	mov	ip, r7
 80017de:	4249      	negs	r1, r1
 80017e0:	4461      	add	r1, ip
 80017e2:	46a9      	mov	r9, r5
 80017e4:	3a02      	subs	r2, #2
 80017e6:	1864      	adds	r4, r4, r1
 80017e8:	e7ae      	b.n	8001748 <__aeabi_ddiv+0x558>
 80017ea:	2201      	movs	r2, #1
 80017ec:	4252      	negs	r2, r2
 80017ee:	e746      	b.n	800167e <__aeabi_ddiv+0x48e>
 80017f0:	4599      	cmp	r9, r3
 80017f2:	d3ee      	bcc.n	80017d2 <__aeabi_ddiv+0x5e2>
 80017f4:	000a      	movs	r2, r1
 80017f6:	e7aa      	b.n	800174e <__aeabi_ddiv+0x55e>
 80017f8:	2100      	movs	r1, #0
 80017fa:	e7e5      	b.n	80017c8 <__aeabi_ddiv+0x5d8>
 80017fc:	0759      	lsls	r1, r3, #29
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	0b1c      	lsrs	r4, r3, #12
 8001802:	e7e1      	b.n	80017c8 <__aeabi_ddiv+0x5d8>
 8001804:	000003ff 	.word	0x000003ff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	000007ff 	.word	0x000007ff
 8001814:	0000041e 	.word	0x0000041e
 8001818:	fffffc02 	.word	0xfffffc02
 800181c:	0000043e 	.word	0x0000043e

08001820 <__eqdf2>:
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	4657      	mov	r7, sl
 8001824:	46de      	mov	lr, fp
 8001826:	464e      	mov	r6, r9
 8001828:	4645      	mov	r5, r8
 800182a:	b5e0      	push	{r5, r6, r7, lr}
 800182c:	000d      	movs	r5, r1
 800182e:	0004      	movs	r4, r0
 8001830:	0fe8      	lsrs	r0, r5, #31
 8001832:	4683      	mov	fp, r0
 8001834:	0309      	lsls	r1, r1, #12
 8001836:	0fd8      	lsrs	r0, r3, #31
 8001838:	0b09      	lsrs	r1, r1, #12
 800183a:	4682      	mov	sl, r0
 800183c:	4819      	ldr	r0, [pc, #100]	@ (80018a4 <__eqdf2+0x84>)
 800183e:	468c      	mov	ip, r1
 8001840:	031f      	lsls	r7, r3, #12
 8001842:	0069      	lsls	r1, r5, #1
 8001844:	005e      	lsls	r6, r3, #1
 8001846:	0d49      	lsrs	r1, r1, #21
 8001848:	0b3f      	lsrs	r7, r7, #12
 800184a:	0d76      	lsrs	r6, r6, #21
 800184c:	4281      	cmp	r1, r0
 800184e:	d018      	beq.n	8001882 <__eqdf2+0x62>
 8001850:	4286      	cmp	r6, r0
 8001852:	d00f      	beq.n	8001874 <__eqdf2+0x54>
 8001854:	2001      	movs	r0, #1
 8001856:	42b1      	cmp	r1, r6
 8001858:	d10d      	bne.n	8001876 <__eqdf2+0x56>
 800185a:	45bc      	cmp	ip, r7
 800185c:	d10b      	bne.n	8001876 <__eqdf2+0x56>
 800185e:	4294      	cmp	r4, r2
 8001860:	d109      	bne.n	8001876 <__eqdf2+0x56>
 8001862:	45d3      	cmp	fp, sl
 8001864:	d01c      	beq.n	80018a0 <__eqdf2+0x80>
 8001866:	2900      	cmp	r1, #0
 8001868:	d105      	bne.n	8001876 <__eqdf2+0x56>
 800186a:	4660      	mov	r0, ip
 800186c:	4320      	orrs	r0, r4
 800186e:	1e43      	subs	r3, r0, #1
 8001870:	4198      	sbcs	r0, r3
 8001872:	e000      	b.n	8001876 <__eqdf2+0x56>
 8001874:	2001      	movs	r0, #1
 8001876:	bcf0      	pop	{r4, r5, r6, r7}
 8001878:	46bb      	mov	fp, r7
 800187a:	46b2      	mov	sl, r6
 800187c:	46a9      	mov	r9, r5
 800187e:	46a0      	mov	r8, r4
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	2001      	movs	r0, #1
 8001884:	428e      	cmp	r6, r1
 8001886:	d1f6      	bne.n	8001876 <__eqdf2+0x56>
 8001888:	4661      	mov	r1, ip
 800188a:	4339      	orrs	r1, r7
 800188c:	000f      	movs	r7, r1
 800188e:	4317      	orrs	r7, r2
 8001890:	4327      	orrs	r7, r4
 8001892:	d1f0      	bne.n	8001876 <__eqdf2+0x56>
 8001894:	465b      	mov	r3, fp
 8001896:	4652      	mov	r2, sl
 8001898:	1a98      	subs	r0, r3, r2
 800189a:	1e43      	subs	r3, r0, #1
 800189c:	4198      	sbcs	r0, r3
 800189e:	e7ea      	b.n	8001876 <__eqdf2+0x56>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7e8      	b.n	8001876 <__eqdf2+0x56>
 80018a4:	000007ff 	.word	0x000007ff

080018a8 <__gedf2>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	4657      	mov	r7, sl
 80018ac:	464e      	mov	r6, r9
 80018ae:	4645      	mov	r5, r8
 80018b0:	46de      	mov	lr, fp
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	000d      	movs	r5, r1
 80018b6:	030e      	lsls	r6, r1, #12
 80018b8:	0049      	lsls	r1, r1, #1
 80018ba:	0d49      	lsrs	r1, r1, #21
 80018bc:	468a      	mov	sl, r1
 80018be:	0fdf      	lsrs	r7, r3, #31
 80018c0:	0fe9      	lsrs	r1, r5, #31
 80018c2:	46bc      	mov	ip, r7
 80018c4:	b083      	sub	sp, #12
 80018c6:	4f2f      	ldr	r7, [pc, #188]	@ (8001984 <__gedf2+0xdc>)
 80018c8:	0004      	movs	r4, r0
 80018ca:	4680      	mov	r8, r0
 80018cc:	9101      	str	r1, [sp, #4]
 80018ce:	0058      	lsls	r0, r3, #1
 80018d0:	0319      	lsls	r1, r3, #12
 80018d2:	4691      	mov	r9, r2
 80018d4:	0b36      	lsrs	r6, r6, #12
 80018d6:	0b09      	lsrs	r1, r1, #12
 80018d8:	0d40      	lsrs	r0, r0, #21
 80018da:	45ba      	cmp	sl, r7
 80018dc:	d01d      	beq.n	800191a <__gedf2+0x72>
 80018de:	42b8      	cmp	r0, r7
 80018e0:	d00d      	beq.n	80018fe <__gedf2+0x56>
 80018e2:	4657      	mov	r7, sl
 80018e4:	2f00      	cmp	r7, #0
 80018e6:	d12a      	bne.n	800193e <__gedf2+0x96>
 80018e8:	4334      	orrs	r4, r6
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d124      	bne.n	8001938 <__gedf2+0x90>
 80018ee:	430a      	orrs	r2, r1
 80018f0:	d036      	beq.n	8001960 <__gedf2+0xb8>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d141      	bne.n	800197a <__gedf2+0xd2>
 80018f6:	4663      	mov	r3, ip
 80018f8:	0058      	lsls	r0, r3, #1
 80018fa:	3801      	subs	r0, #1
 80018fc:	e015      	b.n	800192a <__gedf2+0x82>
 80018fe:	4311      	orrs	r1, r2
 8001900:	d138      	bne.n	8001974 <__gedf2+0xcc>
 8001902:	4653      	mov	r3, sl
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <__gedf2+0x64>
 8001908:	4326      	orrs	r6, r4
 800190a:	d0f4      	beq.n	80018f6 <__gedf2+0x4e>
 800190c:	9b01      	ldr	r3, [sp, #4]
 800190e:	4563      	cmp	r3, ip
 8001910:	d107      	bne.n	8001922 <__gedf2+0x7a>
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	0058      	lsls	r0, r3, #1
 8001916:	3801      	subs	r0, #1
 8001918:	e007      	b.n	800192a <__gedf2+0x82>
 800191a:	4326      	orrs	r6, r4
 800191c:	d12a      	bne.n	8001974 <__gedf2+0xcc>
 800191e:	4550      	cmp	r0, sl
 8001920:	d021      	beq.n	8001966 <__gedf2+0xbe>
 8001922:	2001      	movs	r0, #1
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	425f      	negs	r7, r3
 8001928:	4338      	orrs	r0, r7
 800192a:	b003      	add	sp, #12
 800192c:	bcf0      	pop	{r4, r5, r6, r7}
 800192e:	46bb      	mov	fp, r7
 8001930:	46b2      	mov	sl, r6
 8001932:	46a9      	mov	r9, r5
 8001934:	46a0      	mov	r8, r4
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001938:	2c00      	cmp	r4, #0
 800193a:	d0dc      	beq.n	80018f6 <__gedf2+0x4e>
 800193c:	e7e6      	b.n	800190c <__gedf2+0x64>
 800193e:	2800      	cmp	r0, #0
 8001940:	d0ef      	beq.n	8001922 <__gedf2+0x7a>
 8001942:	9b01      	ldr	r3, [sp, #4]
 8001944:	4563      	cmp	r3, ip
 8001946:	d1ec      	bne.n	8001922 <__gedf2+0x7a>
 8001948:	4582      	cmp	sl, r0
 800194a:	dcea      	bgt.n	8001922 <__gedf2+0x7a>
 800194c:	dbe1      	blt.n	8001912 <__gedf2+0x6a>
 800194e:	428e      	cmp	r6, r1
 8001950:	d8e7      	bhi.n	8001922 <__gedf2+0x7a>
 8001952:	d1de      	bne.n	8001912 <__gedf2+0x6a>
 8001954:	45c8      	cmp	r8, r9
 8001956:	d8e4      	bhi.n	8001922 <__gedf2+0x7a>
 8001958:	2000      	movs	r0, #0
 800195a:	45c8      	cmp	r8, r9
 800195c:	d2e5      	bcs.n	800192a <__gedf2+0x82>
 800195e:	e7d8      	b.n	8001912 <__gedf2+0x6a>
 8001960:	2c00      	cmp	r4, #0
 8001962:	d0e2      	beq.n	800192a <__gedf2+0x82>
 8001964:	e7dd      	b.n	8001922 <__gedf2+0x7a>
 8001966:	4311      	orrs	r1, r2
 8001968:	d104      	bne.n	8001974 <__gedf2+0xcc>
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	4563      	cmp	r3, ip
 800196e:	d1d8      	bne.n	8001922 <__gedf2+0x7a>
 8001970:	2000      	movs	r0, #0
 8001972:	e7da      	b.n	800192a <__gedf2+0x82>
 8001974:	2002      	movs	r0, #2
 8001976:	4240      	negs	r0, r0
 8001978:	e7d7      	b.n	800192a <__gedf2+0x82>
 800197a:	9b01      	ldr	r3, [sp, #4]
 800197c:	4563      	cmp	r3, ip
 800197e:	d0e6      	beq.n	800194e <__gedf2+0xa6>
 8001980:	e7cf      	b.n	8001922 <__gedf2+0x7a>
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	000007ff 	.word	0x000007ff

08001988 <__ledf2>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	4657      	mov	r7, sl
 800198c:	464e      	mov	r6, r9
 800198e:	4645      	mov	r5, r8
 8001990:	46de      	mov	lr, fp
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	000d      	movs	r5, r1
 8001996:	030e      	lsls	r6, r1, #12
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	0d49      	lsrs	r1, r1, #21
 800199c:	468a      	mov	sl, r1
 800199e:	0fdf      	lsrs	r7, r3, #31
 80019a0:	0fe9      	lsrs	r1, r5, #31
 80019a2:	46bc      	mov	ip, r7
 80019a4:	b083      	sub	sp, #12
 80019a6:	4f2e      	ldr	r7, [pc, #184]	@ (8001a60 <__ledf2+0xd8>)
 80019a8:	0004      	movs	r4, r0
 80019aa:	4680      	mov	r8, r0
 80019ac:	9101      	str	r1, [sp, #4]
 80019ae:	0058      	lsls	r0, r3, #1
 80019b0:	0319      	lsls	r1, r3, #12
 80019b2:	4691      	mov	r9, r2
 80019b4:	0b36      	lsrs	r6, r6, #12
 80019b6:	0b09      	lsrs	r1, r1, #12
 80019b8:	0d40      	lsrs	r0, r0, #21
 80019ba:	45ba      	cmp	sl, r7
 80019bc:	d01e      	beq.n	80019fc <__ledf2+0x74>
 80019be:	42b8      	cmp	r0, r7
 80019c0:	d00d      	beq.n	80019de <__ledf2+0x56>
 80019c2:	4657      	mov	r7, sl
 80019c4:	2f00      	cmp	r7, #0
 80019c6:	d127      	bne.n	8001a18 <__ledf2+0x90>
 80019c8:	4334      	orrs	r4, r6
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d133      	bne.n	8001a36 <__ledf2+0xae>
 80019ce:	430a      	orrs	r2, r1
 80019d0:	d034      	beq.n	8001a3c <__ledf2+0xb4>
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d140      	bne.n	8001a58 <__ledf2+0xd0>
 80019d6:	4663      	mov	r3, ip
 80019d8:	0058      	lsls	r0, r3, #1
 80019da:	3801      	subs	r0, #1
 80019dc:	e015      	b.n	8001a0a <__ledf2+0x82>
 80019de:	4311      	orrs	r1, r2
 80019e0:	d112      	bne.n	8001a08 <__ledf2+0x80>
 80019e2:	4653      	mov	r3, sl
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <__ledf2+0x64>
 80019e8:	4326      	orrs	r6, r4
 80019ea:	d0f4      	beq.n	80019d6 <__ledf2+0x4e>
 80019ec:	9b01      	ldr	r3, [sp, #4]
 80019ee:	4563      	cmp	r3, ip
 80019f0:	d01d      	beq.n	8001a2e <__ledf2+0xa6>
 80019f2:	2001      	movs	r0, #1
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	425f      	negs	r7, r3
 80019f8:	4338      	orrs	r0, r7
 80019fa:	e006      	b.n	8001a0a <__ledf2+0x82>
 80019fc:	4326      	orrs	r6, r4
 80019fe:	d103      	bne.n	8001a08 <__ledf2+0x80>
 8001a00:	4550      	cmp	r0, sl
 8001a02:	d1f6      	bne.n	80019f2 <__ledf2+0x6a>
 8001a04:	4311      	orrs	r1, r2
 8001a06:	d01c      	beq.n	8001a42 <__ledf2+0xba>
 8001a08:	2002      	movs	r0, #2
 8001a0a:	b003      	add	sp, #12
 8001a0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0e:	46bb      	mov	fp, r7
 8001a10:	46b2      	mov	sl, r6
 8001a12:	46a9      	mov	r9, r5
 8001a14:	46a0      	mov	r8, r4
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d0ea      	beq.n	80019f2 <__ledf2+0x6a>
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	4563      	cmp	r3, ip
 8001a20:	d1e7      	bne.n	80019f2 <__ledf2+0x6a>
 8001a22:	4582      	cmp	sl, r0
 8001a24:	dce5      	bgt.n	80019f2 <__ledf2+0x6a>
 8001a26:	db02      	blt.n	8001a2e <__ledf2+0xa6>
 8001a28:	428e      	cmp	r6, r1
 8001a2a:	d8e2      	bhi.n	80019f2 <__ledf2+0x6a>
 8001a2c:	d00e      	beq.n	8001a4c <__ledf2+0xc4>
 8001a2e:	9b01      	ldr	r3, [sp, #4]
 8001a30:	0058      	lsls	r0, r3, #1
 8001a32:	3801      	subs	r0, #1
 8001a34:	e7e9      	b.n	8001a0a <__ledf2+0x82>
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d0cd      	beq.n	80019d6 <__ledf2+0x4e>
 8001a3a:	e7d7      	b.n	80019ec <__ledf2+0x64>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d0e4      	beq.n	8001a0a <__ledf2+0x82>
 8001a40:	e7d7      	b.n	80019f2 <__ledf2+0x6a>
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	2000      	movs	r0, #0
 8001a46:	4563      	cmp	r3, ip
 8001a48:	d0df      	beq.n	8001a0a <__ledf2+0x82>
 8001a4a:	e7d2      	b.n	80019f2 <__ledf2+0x6a>
 8001a4c:	45c8      	cmp	r8, r9
 8001a4e:	d8d0      	bhi.n	80019f2 <__ledf2+0x6a>
 8001a50:	2000      	movs	r0, #0
 8001a52:	45c8      	cmp	r8, r9
 8001a54:	d2d9      	bcs.n	8001a0a <__ledf2+0x82>
 8001a56:	e7ea      	b.n	8001a2e <__ledf2+0xa6>
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	4563      	cmp	r3, ip
 8001a5c:	d0e4      	beq.n	8001a28 <__ledf2+0xa0>
 8001a5e:	e7c8      	b.n	80019f2 <__ledf2+0x6a>
 8001a60:	000007ff 	.word	0x000007ff

08001a64 <__aeabi_dmul>:
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	4657      	mov	r7, sl
 8001a68:	464e      	mov	r6, r9
 8001a6a:	46de      	mov	lr, fp
 8001a6c:	4645      	mov	r5, r8
 8001a6e:	b5e0      	push	{r5, r6, r7, lr}
 8001a70:	001f      	movs	r7, r3
 8001a72:	030b      	lsls	r3, r1, #12
 8001a74:	0b1b      	lsrs	r3, r3, #12
 8001a76:	0016      	movs	r6, r2
 8001a78:	469a      	mov	sl, r3
 8001a7a:	0fca      	lsrs	r2, r1, #31
 8001a7c:	004b      	lsls	r3, r1, #1
 8001a7e:	0004      	movs	r4, r0
 8001a80:	4691      	mov	r9, r2
 8001a82:	b085      	sub	sp, #20
 8001a84:	0d5b      	lsrs	r3, r3, #21
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x26>
 8001a88:	e1cf      	b.n	8001e2a <__aeabi_dmul+0x3c6>
 8001a8a:	4acd      	ldr	r2, [pc, #820]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d055      	beq.n	8001b3c <__aeabi_dmul+0xd8>
 8001a90:	4651      	mov	r1, sl
 8001a92:	0f42      	lsrs	r2, r0, #29
 8001a94:	00c9      	lsls	r1, r1, #3
 8001a96:	430a      	orrs	r2, r1
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	0409      	lsls	r1, r1, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	00c2      	lsls	r2, r0, #3
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4ac8      	ldr	r2, [pc, #800]	@ (8001dc4 <__aeabi_dmul+0x360>)
 8001aa4:	468a      	mov	sl, r1
 8001aa6:	4693      	mov	fp, r2
 8001aa8:	449b      	add	fp, r3
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2500      	movs	r5, #0
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	033c      	lsls	r4, r7, #12
 8001ab2:	007b      	lsls	r3, r7, #1
 8001ab4:	0ffa      	lsrs	r2, r7, #31
 8001ab6:	9601      	str	r6, [sp, #4]
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	0d5b      	lsrs	r3, r3, #21
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dmul+0x5e>
 8001ac0:	e188      	b.n	8001dd4 <__aeabi_dmul+0x370>
 8001ac2:	4abf      	ldr	r2, [pc, #764]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dmul+0x66>
 8001ac8:	e092      	b.n	8001bf0 <__aeabi_dmul+0x18c>
 8001aca:	4abe      	ldr	r2, [pc, #760]	@ (8001dc4 <__aeabi_dmul+0x360>)
 8001acc:	4694      	mov	ip, r2
 8001ace:	4463      	add	r3, ip
 8001ad0:	449b      	add	fp, r3
 8001ad2:	2d0a      	cmp	r5, #10
 8001ad4:	dc42      	bgt.n	8001b5c <__aeabi_dmul+0xf8>
 8001ad6:	00e4      	lsls	r4, r4, #3
 8001ad8:	0f73      	lsrs	r3, r6, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	2480      	movs	r4, #128	@ 0x80
 8001ade:	4649      	mov	r1, r9
 8001ae0:	0424      	lsls	r4, r4, #16
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	00f3      	lsls	r3, r6, #3
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9b00      	ldr	r3, [sp, #0]
 8001aea:	2000      	movs	r0, #0
 8001aec:	4059      	eors	r1, r3
 8001aee:	b2cb      	uxtb	r3, r1
 8001af0:	9303      	str	r3, [sp, #12]
 8001af2:	2d02      	cmp	r5, #2
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x94>
 8001af6:	e094      	b.n	8001c22 <__aeabi_dmul+0x1be>
 8001af8:	2301      	movs	r3, #1
 8001afa:	40ab      	lsls	r3, r5
 8001afc:	001d      	movs	r5, r3
 8001afe:	23a6      	movs	r3, #166	@ 0xa6
 8001b00:	002a      	movs	r2, r5
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	401a      	ands	r2, r3
 8001b06:	421d      	tst	r5, r3
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0xa8>
 8001b0a:	e229      	b.n	8001f60 <__aeabi_dmul+0x4fc>
 8001b0c:	2390      	movs	r3, #144	@ 0x90
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	421d      	tst	r5, r3
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0xb2>
 8001b14:	e24d      	b.n	8001fb2 <__aeabi_dmul+0x54e>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2480      	movs	r4, #128	@ 0x80
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001b20:	0010      	movs	r0, r2
 8001b22:	464a      	mov	r2, r9
 8001b24:	051b      	lsls	r3, r3, #20
 8001b26:	4323      	orrs	r3, r4
 8001b28:	07d2      	lsls	r2, r2, #31
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	b005      	add	sp, #20
 8001b30:	bcf0      	pop	{r4, r5, r6, r7}
 8001b32:	46bb      	mov	fp, r7
 8001b34:	46b2      	mov	sl, r6
 8001b36:	46a9      	mov	r9, r5
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3c:	4652      	mov	r2, sl
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	4690      	mov	r8, r2
 8001b42:	d000      	beq.n	8001b46 <__aeabi_dmul+0xe2>
 8001b44:	e1ac      	b.n	8001ea0 <__aeabi_dmul+0x43c>
 8001b46:	469b      	mov	fp, r3
 8001b48:	2302      	movs	r3, #2
 8001b4a:	4692      	mov	sl, r2
 8001b4c:	2508      	movs	r5, #8
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	e7ae      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	46a2      	mov	sl, r4
 8001b56:	4699      	mov	r9, r3
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	9b02      	ldr	r3, [sp, #8]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dmul+0x100>
 8001b62:	e1ca      	b.n	8001efa <__aeabi_dmul+0x496>
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dmul+0x106>
 8001b68:	e192      	b.n	8001e90 <__aeabi_dmul+0x42c>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d110      	bne.n	8001b90 <__aeabi_dmul+0x12c>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2400      	movs	r4, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	e7d4      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001b76:	2201      	movs	r2, #1
 8001b78:	087b      	lsrs	r3, r7, #1
 8001b7a:	403a      	ands	r2, r7
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	4652      	mov	r2, sl
 8001b80:	07d2      	lsls	r2, r2, #31
 8001b82:	4313      	orrs	r3, r2
 8001b84:	4698      	mov	r8, r3
 8001b86:	4653      	mov	r3, sl
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	469a      	mov	sl, r3
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	4699      	mov	r9, r3
 8001b90:	465b      	mov	r3, fp
 8001b92:	1c58      	adds	r0, r3, #1
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	445b      	add	r3, fp
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_dmul+0x13c>
 8001b9e:	e1b1      	b.n	8001f04 <__aeabi_dmul+0x4a0>
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	0752      	lsls	r2, r2, #29
 8001ba4:	d00b      	beq.n	8001bbe <__aeabi_dmul+0x15a>
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4641      	mov	r1, r8
 8001baa:	400a      	ands	r2, r1
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d006      	beq.n	8001bbe <__aeabi_dmul+0x15a>
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	1d11      	adds	r1, r2, #4
 8001bb4:	4541      	cmp	r1, r8
 8001bb6:	4192      	sbcs	r2, r2
 8001bb8:	4688      	mov	r8, r1
 8001bba:	4252      	negs	r2, r2
 8001bbc:	4492      	add	sl, r2
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	01d2      	lsls	r2, r2, #7
 8001bc2:	d506      	bpl.n	8001bd2 <__aeabi_dmul+0x16e>
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	4b80      	ldr	r3, [pc, #512]	@ (8001dc8 <__aeabi_dmul+0x364>)
 8001bc8:	401a      	ands	r2, r3
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	4692      	mov	sl, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	18c3      	adds	r3, r0, r3
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dcc <__aeabi_dmul+0x368>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dmul+0x176>
 8001bd8:	e18f      	b.n	8001efa <__aeabi_dmul+0x496>
 8001bda:	4642      	mov	r2, r8
 8001bdc:	08d1      	lsrs	r1, r2, #3
 8001bde:	4652      	mov	r2, sl
 8001be0:	0752      	lsls	r2, r2, #29
 8001be2:	430a      	orrs	r2, r1
 8001be4:	4651      	mov	r1, sl
 8001be6:	055b      	lsls	r3, r3, #21
 8001be8:	024c      	lsls	r4, r1, #9
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	0d5b      	lsrs	r3, r3, #21
 8001bee:	e797      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001bf0:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001bf2:	4326      	orrs	r6, r4
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	44e3      	add	fp, ip
 8001bf8:	2e00      	cmp	r6, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dmul+0x19a>
 8001bfc:	e16f      	b.n	8001ede <__aeabi_dmul+0x47a>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	4649      	mov	r1, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	9b00      	ldr	r3, [sp, #0]
 8001c06:	4059      	eors	r1, r3
 8001c08:	b2cb      	uxtb	r3, r1
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	2d0a      	cmp	r5, #10
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dmul+0x1ae>
 8001c10:	e133      	b.n	8001e7a <__aeabi_dmul+0x416>
 8001c12:	2301      	movs	r3, #1
 8001c14:	40ab      	lsls	r3, r5
 8001c16:	001d      	movs	r5, r3
 8001c18:	2303      	movs	r3, #3
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2288      	movs	r2, #136	@ 0x88
 8001c1e:	422a      	tst	r2, r5
 8001c20:	d197      	bne.n	8001b52 <__aeabi_dmul+0xee>
 8001c22:	4642      	mov	r2, r8
 8001c24:	4643      	mov	r3, r8
 8001c26:	0412      	lsls	r2, r2, #16
 8001c28:	0c12      	lsrs	r2, r2, #16
 8001c2a:	0016      	movs	r6, r2
 8001c2c:	9801      	ldr	r0, [sp, #4]
 8001c2e:	0c1d      	lsrs	r5, r3, #16
 8001c30:	0c03      	lsrs	r3, r0, #16
 8001c32:	0400      	lsls	r0, r0, #16
 8001c34:	0c00      	lsrs	r0, r0, #16
 8001c36:	4346      	muls	r6, r0
 8001c38:	46b4      	mov	ip, r6
 8001c3a:	001e      	movs	r6, r3
 8001c3c:	436e      	muls	r6, r5
 8001c3e:	9600      	str	r6, [sp, #0]
 8001c40:	0016      	movs	r6, r2
 8001c42:	0007      	movs	r7, r0
 8001c44:	435e      	muls	r6, r3
 8001c46:	4661      	mov	r1, ip
 8001c48:	46b0      	mov	r8, r6
 8001c4a:	436f      	muls	r7, r5
 8001c4c:	0c0e      	lsrs	r6, r1, #16
 8001c4e:	44b8      	add	r8, r7
 8001c50:	4446      	add	r6, r8
 8001c52:	42b7      	cmp	r7, r6
 8001c54:	d905      	bls.n	8001c62 <__aeabi_dmul+0x1fe>
 8001c56:	2180      	movs	r1, #128	@ 0x80
 8001c58:	0249      	lsls	r1, r1, #9
 8001c5a:	4688      	mov	r8, r1
 8001c5c:	9f00      	ldr	r7, [sp, #0]
 8001c5e:	4447      	add	r7, r8
 8001c60:	9700      	str	r7, [sp, #0]
 8001c62:	4661      	mov	r1, ip
 8001c64:	0409      	lsls	r1, r1, #16
 8001c66:	0c09      	lsrs	r1, r1, #16
 8001c68:	0c37      	lsrs	r7, r6, #16
 8001c6a:	0436      	lsls	r6, r6, #16
 8001c6c:	468c      	mov	ip, r1
 8001c6e:	0031      	movs	r1, r6
 8001c70:	4461      	add	r1, ip
 8001c72:	9101      	str	r1, [sp, #4]
 8001c74:	0011      	movs	r1, r2
 8001c76:	0c26      	lsrs	r6, r4, #16
 8001c78:	0424      	lsls	r4, r4, #16
 8001c7a:	0c24      	lsrs	r4, r4, #16
 8001c7c:	4361      	muls	r1, r4
 8001c7e:	468c      	mov	ip, r1
 8001c80:	0021      	movs	r1, r4
 8001c82:	4369      	muls	r1, r5
 8001c84:	4689      	mov	r9, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	0c09      	lsrs	r1, r1, #16
 8001c8a:	4688      	mov	r8, r1
 8001c8c:	4372      	muls	r2, r6
 8001c8e:	444a      	add	r2, r9
 8001c90:	4442      	add	r2, r8
 8001c92:	4375      	muls	r5, r6
 8001c94:	4591      	cmp	r9, r2
 8001c96:	d903      	bls.n	8001ca0 <__aeabi_dmul+0x23c>
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0249      	lsls	r1, r1, #9
 8001c9c:	4688      	mov	r8, r1
 8001c9e:	4445      	add	r5, r8
 8001ca0:	0c11      	lsrs	r1, r2, #16
 8001ca2:	4688      	mov	r8, r1
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	0409      	lsls	r1, r1, #16
 8001ca8:	0c09      	lsrs	r1, r1, #16
 8001caa:	468c      	mov	ip, r1
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	4462      	add	r2, ip
 8001cb0:	18b9      	adds	r1, r7, r2
 8001cb2:	9102      	str	r1, [sp, #8]
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	0c09      	lsrs	r1, r1, #16
 8001cb8:	468c      	mov	ip, r1
 8001cba:	4651      	mov	r1, sl
 8001cbc:	040f      	lsls	r7, r1, #16
 8001cbe:	0c3f      	lsrs	r7, r7, #16
 8001cc0:	0039      	movs	r1, r7
 8001cc2:	4341      	muls	r1, r0
 8001cc4:	4445      	add	r5, r8
 8001cc6:	4688      	mov	r8, r1
 8001cc8:	4661      	mov	r1, ip
 8001cca:	4341      	muls	r1, r0
 8001ccc:	468a      	mov	sl, r1
 8001cce:	4641      	mov	r1, r8
 8001cd0:	4660      	mov	r0, ip
 8001cd2:	0c09      	lsrs	r1, r1, #16
 8001cd4:	4689      	mov	r9, r1
 8001cd6:	4358      	muls	r0, r3
 8001cd8:	437b      	muls	r3, r7
 8001cda:	4453      	add	r3, sl
 8001cdc:	444b      	add	r3, r9
 8001cde:	459a      	cmp	sl, r3
 8001ce0:	d903      	bls.n	8001cea <__aeabi_dmul+0x286>
 8001ce2:	2180      	movs	r1, #128	@ 0x80
 8001ce4:	0249      	lsls	r1, r1, #9
 8001ce6:	4689      	mov	r9, r1
 8001ce8:	4448      	add	r0, r9
 8001cea:	0c19      	lsrs	r1, r3, #16
 8001cec:	4689      	mov	r9, r1
 8001cee:	4641      	mov	r1, r8
 8001cf0:	0409      	lsls	r1, r1, #16
 8001cf2:	0c09      	lsrs	r1, r1, #16
 8001cf4:	4688      	mov	r8, r1
 8001cf6:	0039      	movs	r1, r7
 8001cf8:	4361      	muls	r1, r4
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4443      	add	r3, r8
 8001cfe:	4688      	mov	r8, r1
 8001d00:	4661      	mov	r1, ip
 8001d02:	434c      	muls	r4, r1
 8001d04:	4371      	muls	r1, r6
 8001d06:	468c      	mov	ip, r1
 8001d08:	4641      	mov	r1, r8
 8001d0a:	4377      	muls	r7, r6
 8001d0c:	0c0e      	lsrs	r6, r1, #16
 8001d0e:	193f      	adds	r7, r7, r4
 8001d10:	19f6      	adds	r6, r6, r7
 8001d12:	4448      	add	r0, r9
 8001d14:	42b4      	cmp	r4, r6
 8001d16:	d903      	bls.n	8001d20 <__aeabi_dmul+0x2bc>
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	4689      	mov	r9, r1
 8001d1e:	44cc      	add	ip, r9
 8001d20:	9902      	ldr	r1, [sp, #8]
 8001d22:	9f00      	ldr	r7, [sp, #0]
 8001d24:	4689      	mov	r9, r1
 8001d26:	0431      	lsls	r1, r6, #16
 8001d28:	444f      	add	r7, r9
 8001d2a:	4689      	mov	r9, r1
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4297      	cmp	r7, r2
 8001d30:	4192      	sbcs	r2, r2
 8001d32:	040c      	lsls	r4, r1, #16
 8001d34:	0c24      	lsrs	r4, r4, #16
 8001d36:	444c      	add	r4, r9
 8001d38:	18ff      	adds	r7, r7, r3
 8001d3a:	4252      	negs	r2, r2
 8001d3c:	1964      	adds	r4, r4, r5
 8001d3e:	18a1      	adds	r1, r4, r2
 8001d40:	429f      	cmp	r7, r3
 8001d42:	419b      	sbcs	r3, r3
 8001d44:	4688      	mov	r8, r1
 8001d46:	4682      	mov	sl, r0
 8001d48:	425b      	negs	r3, r3
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	4590      	cmp	r8, r2
 8001d4e:	4192      	sbcs	r2, r2
 8001d50:	42ac      	cmp	r4, r5
 8001d52:	41a4      	sbcs	r4, r4
 8001d54:	44c2      	add	sl, r8
 8001d56:	44d1      	add	r9, sl
 8001d58:	4252      	negs	r2, r2
 8001d5a:	4264      	negs	r4, r4
 8001d5c:	4314      	orrs	r4, r2
 8001d5e:	4599      	cmp	r9, r3
 8001d60:	419b      	sbcs	r3, r3
 8001d62:	4582      	cmp	sl, r0
 8001d64:	4192      	sbcs	r2, r2
 8001d66:	425b      	negs	r3, r3
 8001d68:	4252      	negs	r2, r2
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	464a      	mov	r2, r9
 8001d6e:	0c36      	lsrs	r6, r6, #16
 8001d70:	19a4      	adds	r4, r4, r6
 8001d72:	18e3      	adds	r3, r4, r3
 8001d74:	4463      	add	r3, ip
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	0dd2      	lsrs	r2, r2, #23
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	9901      	ldr	r1, [sp, #4]
 8001d7e:	4692      	mov	sl, r2
 8001d80:	027a      	lsls	r2, r7, #9
 8001d82:	430a      	orrs	r2, r1
 8001d84:	1e50      	subs	r0, r2, #1
 8001d86:	4182      	sbcs	r2, r0
 8001d88:	0dff      	lsrs	r7, r7, #23
 8001d8a:	4317      	orrs	r7, r2
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	0252      	lsls	r2, r2, #9
 8001d90:	4317      	orrs	r7, r2
 8001d92:	46b8      	mov	r8, r7
 8001d94:	01db      	lsls	r3, r3, #7
 8001d96:	d500      	bpl.n	8001d9a <__aeabi_dmul+0x336>
 8001d98:	e6ed      	b.n	8001b76 <__aeabi_dmul+0x112>
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <__aeabi_dmul+0x36c>)
 8001d9c:	9a03      	ldr	r2, [sp, #12]
 8001d9e:	445b      	add	r3, fp
 8001da0:	4691      	mov	r9, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc00      	bgt.n	8001da8 <__aeabi_dmul+0x344>
 8001da6:	e0ac      	b.n	8001f02 <__aeabi_dmul+0x49e>
 8001da8:	003a      	movs	r2, r7
 8001daa:	0752      	lsls	r2, r2, #29
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dmul+0x34c>
 8001dae:	e710      	b.n	8001bd2 <__aeabi_dmul+0x16e>
 8001db0:	220f      	movs	r2, #15
 8001db2:	4658      	mov	r0, fp
 8001db4:	403a      	ands	r2, r7
 8001db6:	2a04      	cmp	r2, #4
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dmul+0x358>
 8001dba:	e6f9      	b.n	8001bb0 <__aeabi_dmul+0x14c>
 8001dbc:	e709      	b.n	8001bd2 <__aeabi_dmul+0x16e>
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	000007ff 	.word	0x000007ff
 8001dc4:	fffffc01 	.word	0xfffffc01
 8001dc8:	feffffff 	.word	0xfeffffff
 8001dcc:	000007fe 	.word	0x000007fe
 8001dd0:	000003ff 	.word	0x000003ff
 8001dd4:	0022      	movs	r2, r4
 8001dd6:	4332      	orrs	r2, r6
 8001dd8:	d06f      	beq.n	8001eba <__aeabi_dmul+0x456>
 8001dda:	2c00      	cmp	r4, #0
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dmul+0x37c>
 8001dde:	e0c2      	b.n	8001f66 <__aeabi_dmul+0x502>
 8001de0:	0020      	movs	r0, r4
 8001de2:	f000 fea9 	bl	8002b38 <__clzsi2>
 8001de6:	0002      	movs	r2, r0
 8001de8:	0003      	movs	r3, r0
 8001dea:	3a0b      	subs	r2, #11
 8001dec:	201d      	movs	r0, #29
 8001dee:	1a82      	subs	r2, r0, r2
 8001df0:	0030      	movs	r0, r6
 8001df2:	0019      	movs	r1, r3
 8001df4:	40d0      	lsrs	r0, r2
 8001df6:	3908      	subs	r1, #8
 8001df8:	408c      	lsls	r4, r1
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	4322      	orrs	r2, r4
 8001dfe:	0034      	movs	r4, r6
 8001e00:	408c      	lsls	r4, r1
 8001e02:	4659      	mov	r1, fp
 8001e04:	1acb      	subs	r3, r1, r3
 8001e06:	4986      	ldr	r1, [pc, #536]	@ (8002020 <__aeabi_dmul+0x5bc>)
 8001e08:	468b      	mov	fp, r1
 8001e0a:	449b      	add	fp, r3
 8001e0c:	2d0a      	cmp	r5, #10
 8001e0e:	dd00      	ble.n	8001e12 <__aeabi_dmul+0x3ae>
 8001e10:	e6a4      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001e12:	4649      	mov	r1, r9
 8001e14:	9b00      	ldr	r3, [sp, #0]
 8001e16:	9401      	str	r4, [sp, #4]
 8001e18:	4059      	eors	r1, r3
 8001e1a:	b2cb      	uxtb	r3, r1
 8001e1c:	0014      	movs	r4, r2
 8001e1e:	2000      	movs	r0, #0
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	2d02      	cmp	r5, #2
 8001e24:	dd00      	ble.n	8001e28 <__aeabi_dmul+0x3c4>
 8001e26:	e667      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001e28:	e6fb      	b.n	8001c22 <__aeabi_dmul+0x1be>
 8001e2a:	4653      	mov	r3, sl
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	4698      	mov	r8, r3
 8001e30:	d03c      	beq.n	8001eac <__aeabi_dmul+0x448>
 8001e32:	4653      	mov	r3, sl
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x3d6>
 8001e38:	e0a3      	b.n	8001f82 <__aeabi_dmul+0x51e>
 8001e3a:	4650      	mov	r0, sl
 8001e3c:	f000 fe7c 	bl	8002b38 <__clzsi2>
 8001e40:	230b      	movs	r3, #11
 8001e42:	425b      	negs	r3, r3
 8001e44:	469c      	mov	ip, r3
 8001e46:	0002      	movs	r2, r0
 8001e48:	4484      	add	ip, r0
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	4650      	mov	r0, sl
 8001e4e:	3908      	subs	r1, #8
 8001e50:	4088      	lsls	r0, r1
 8001e52:	231d      	movs	r3, #29
 8001e54:	4680      	mov	r8, r0
 8001e56:	4660      	mov	r0, ip
 8001e58:	1a1b      	subs	r3, r3, r0
 8001e5a:	0020      	movs	r0, r4
 8001e5c:	40d8      	lsrs	r0, r3
 8001e5e:	0003      	movs	r3, r0
 8001e60:	4640      	mov	r0, r8
 8001e62:	4303      	orrs	r3, r0
 8001e64:	469a      	mov	sl, r3
 8001e66:	0023      	movs	r3, r4
 8001e68:	408b      	lsls	r3, r1
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002020 <__aeabi_dmul+0x5bc>)
 8001e6e:	2500      	movs	r5, #0
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	469b      	mov	fp, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	e61a      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001e7a:	2d0f      	cmp	r5, #15
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dmul+0x41c>
 8001e7e:	e0c9      	b.n	8002014 <__aeabi_dmul+0x5b0>
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	4652      	mov	r2, sl
 8001e84:	031b      	lsls	r3, r3, #12
 8001e86:	421a      	tst	r2, r3
 8001e88:	d002      	beq.n	8001e90 <__aeabi_dmul+0x42c>
 8001e8a:	421c      	tst	r4, r3
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x42c>
 8001e8e:	e092      	b.n	8001fb6 <__aeabi_dmul+0x552>
 8001e90:	2480      	movs	r4, #128	@ 0x80
 8001e92:	4653      	mov	r3, sl
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	431c      	orrs	r4, r3
 8001e98:	0324      	lsls	r4, r4, #12
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	e63e      	b.n	8001b1e <__aeabi_dmul+0xba>
 8001ea0:	469b      	mov	fp, r3
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	4680      	mov	r8, r0
 8001ea6:	250c      	movs	r5, #12
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	e601      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001eac:	2300      	movs	r3, #0
 8001eae:	469a      	mov	sl, r3
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	2504      	movs	r5, #4
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	e5fa      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	2d0a      	cmp	r5, #10
 8001ec0:	dd00      	ble.n	8001ec4 <__aeabi_dmul+0x460>
 8001ec2:	e64b      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	9800      	ldr	r0, [sp, #0]
 8001ec8:	4041      	eors	r1, r0
 8001eca:	b2c9      	uxtb	r1, r1
 8001ecc:	9103      	str	r1, [sp, #12]
 8001ece:	2d02      	cmp	r5, #2
 8001ed0:	dc00      	bgt.n	8001ed4 <__aeabi_dmul+0x470>
 8001ed2:	e096      	b.n	8002002 <__aeabi_dmul+0x59e>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2001      	movs	r0, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	e60c      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001ede:	4649      	mov	r1, r9
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9a00      	ldr	r2, [sp, #0]
 8001ee4:	432b      	orrs	r3, r5
 8001ee6:	4051      	eors	r1, r2
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	9203      	str	r2, [sp, #12]
 8001eec:	2b0a      	cmp	r3, #10
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dmul+0x48e>
 8001ef0:	e634      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	d157      	bne.n	8001fa6 <__aeabi_dmul+0x542>
 8001ef6:	9b03      	ldr	r3, [sp, #12]
 8001ef8:	4699      	mov	r9, r3
 8001efa:	2400      	movs	r4, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <__aeabi_dmul+0x5c0>)
 8001f00:	e60e      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001f02:	4658      	mov	r0, fp
 8001f04:	2101      	movs	r1, #1
 8001f06:	1ac9      	subs	r1, r1, r3
 8001f08:	2938      	cmp	r1, #56	@ 0x38
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dmul+0x4aa>
 8001f0c:	e62f      	b.n	8001b6e <__aeabi_dmul+0x10a>
 8001f0e:	291f      	cmp	r1, #31
 8001f10:	dd56      	ble.n	8001fc0 <__aeabi_dmul+0x55c>
 8001f12:	221f      	movs	r2, #31
 8001f14:	4654      	mov	r4, sl
 8001f16:	4252      	negs	r2, r2
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	40dc      	lsrs	r4, r3
 8001f1c:	2920      	cmp	r1, #32
 8001f1e:	d007      	beq.n	8001f30 <__aeabi_dmul+0x4cc>
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <__aeabi_dmul+0x5c4>)
 8001f22:	4642      	mov	r2, r8
 8001f24:	469c      	mov	ip, r3
 8001f26:	4653      	mov	r3, sl
 8001f28:	4460      	add	r0, ip
 8001f2a:	4083      	lsls	r3, r0
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4642      	mov	r2, r8
 8001f32:	2107      	movs	r1, #7
 8001f34:	1e53      	subs	r3, r2, #1
 8001f36:	419a      	sbcs	r2, r3
 8001f38:	000b      	movs	r3, r1
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2400      	movs	r4, #0
 8001f40:	4211      	tst	r1, r2
 8001f42:	d009      	beq.n	8001f58 <__aeabi_dmul+0x4f4>
 8001f44:	230f      	movs	r3, #15
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d05d      	beq.n	8002008 <__aeabi_dmul+0x5a4>
 8001f4c:	1d11      	adds	r1, r2, #4
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	419b      	sbcs	r3, r3
 8001f52:	000a      	movs	r2, r1
 8001f54:	425b      	negs	r3, r3
 8001f56:	075b      	lsls	r3, r3, #29
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e5df      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001f60:	9b03      	ldr	r3, [sp, #12]
 8001f62:	4699      	mov	r9, r3
 8001f64:	e5fa      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001f66:	9801      	ldr	r0, [sp, #4]
 8001f68:	f000 fde6 	bl	8002b38 <__clzsi2>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	0003      	movs	r3, r0
 8001f70:	3215      	adds	r2, #21
 8001f72:	3320      	adds	r3, #32
 8001f74:	2a1c      	cmp	r2, #28
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_dmul+0x516>
 8001f78:	e738      	b.n	8001dec <__aeabi_dmul+0x388>
 8001f7a:	9a01      	ldr	r2, [sp, #4]
 8001f7c:	3808      	subs	r0, #8
 8001f7e:	4082      	lsls	r2, r0
 8001f80:	e73f      	b.n	8001e02 <__aeabi_dmul+0x39e>
 8001f82:	f000 fdd9 	bl	8002b38 <__clzsi2>
 8001f86:	2315      	movs	r3, #21
 8001f88:	469c      	mov	ip, r3
 8001f8a:	4484      	add	ip, r0
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	4663      	mov	r3, ip
 8001f90:	3220      	adds	r2, #32
 8001f92:	2b1c      	cmp	r3, #28
 8001f94:	dc00      	bgt.n	8001f98 <__aeabi_dmul+0x534>
 8001f96:	e758      	b.n	8001e4a <__aeabi_dmul+0x3e6>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4698      	mov	r8, r3
 8001f9c:	0023      	movs	r3, r4
 8001f9e:	3808      	subs	r0, #8
 8001fa0:	4083      	lsls	r3, r0
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	e762      	b.n	8001e6c <__aeabi_dmul+0x408>
 8001fa6:	001d      	movs	r5, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2400      	movs	r4, #0
 8001fac:	2002      	movs	r0, #2
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	e5a2      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001fb2:	9002      	str	r0, [sp, #8]
 8001fb4:	e632      	b.n	8001c1c <__aeabi_dmul+0x1b8>
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	9b00      	ldr	r3, [sp, #0]
 8001fba:	9a01      	ldr	r2, [sp, #4]
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	e5ae      	b.n	8001b1e <__aeabi_dmul+0xba>
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <__aeabi_dmul+0x5c8>)
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	18c3      	adds	r3, r0, r3
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	40c8      	lsrs	r0, r1
 8001fcc:	4302      	orrs	r2, r0
 8001fce:	4640      	mov	r0, r8
 8001fd0:	4098      	lsls	r0, r3
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	1e58      	subs	r0, r3, #1
 8001fd6:	4183      	sbcs	r3, r0
 8001fd8:	4654      	mov	r4, sl
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	40cc      	lsrs	r4, r1
 8001fde:	0753      	lsls	r3, r2, #29
 8001fe0:	d009      	beq.n	8001ff6 <__aeabi_dmul+0x592>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dmul+0x592>
 8001fea:	1d13      	adds	r3, r2, #4
 8001fec:	4293      	cmp	r3, r2
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4252      	negs	r2, r2
 8001ff2:	18a4      	adds	r4, r4, r2
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	0223      	lsls	r3, r4, #8
 8001ff8:	d508      	bpl.n	800200c <__aeabi_dmul+0x5a8>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	e58e      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8002002:	4689      	mov	r9, r1
 8002004:	2400      	movs	r4, #0
 8002006:	e58b      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8002008:	2300      	movs	r3, #0
 800200a:	e7a5      	b.n	8001f58 <__aeabi_dmul+0x4f4>
 800200c:	0763      	lsls	r3, r4, #29
 800200e:	0264      	lsls	r4, r4, #9
 8002010:	0b24      	lsrs	r4, r4, #12
 8002012:	e7a1      	b.n	8001f58 <__aeabi_dmul+0x4f4>
 8002014:	9b00      	ldr	r3, [sp, #0]
 8002016:	46a2      	mov	sl, r4
 8002018:	4699      	mov	r9, r3
 800201a:	9b01      	ldr	r3, [sp, #4]
 800201c:	4698      	mov	r8, r3
 800201e:	e737      	b.n	8001e90 <__aeabi_dmul+0x42c>
 8002020:	fffffc0d 	.word	0xfffffc0d
 8002024:	000007ff 	.word	0x000007ff
 8002028:	0000043e 	.word	0x0000043e
 800202c:	0000041e 	.word	0x0000041e

08002030 <__aeabi_dsub>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	4657      	mov	r7, sl
 8002034:	464e      	mov	r6, r9
 8002036:	4645      	mov	r5, r8
 8002038:	46de      	mov	lr, fp
 800203a:	b5e0      	push	{r5, r6, r7, lr}
 800203c:	b083      	sub	sp, #12
 800203e:	9000      	str	r0, [sp, #0]
 8002040:	9101      	str	r1, [sp, #4]
 8002042:	030c      	lsls	r4, r1, #12
 8002044:	004d      	lsls	r5, r1, #1
 8002046:	0fce      	lsrs	r6, r1, #31
 8002048:	0a61      	lsrs	r1, r4, #9
 800204a:	9c00      	ldr	r4, [sp, #0]
 800204c:	005f      	lsls	r7, r3, #1
 800204e:	0f64      	lsrs	r4, r4, #29
 8002050:	430c      	orrs	r4, r1
 8002052:	9900      	ldr	r1, [sp, #0]
 8002054:	9200      	str	r2, [sp, #0]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	00c8      	lsls	r0, r1, #3
 800205a:	0319      	lsls	r1, r3, #12
 800205c:	0d7b      	lsrs	r3, r7, #21
 800205e:	4699      	mov	r9, r3
 8002060:	9b01      	ldr	r3, [sp, #4]
 8002062:	4fcc      	ldr	r7, [pc, #816]	@ (8002394 <__aeabi_dsub+0x364>)
 8002064:	0fdb      	lsrs	r3, r3, #31
 8002066:	469c      	mov	ip, r3
 8002068:	0a4b      	lsrs	r3, r1, #9
 800206a:	9900      	ldr	r1, [sp, #0]
 800206c:	4680      	mov	r8, r0
 800206e:	0f49      	lsrs	r1, r1, #29
 8002070:	4319      	orrs	r1, r3
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	468b      	mov	fp, r1
 8002076:	00da      	lsls	r2, r3, #3
 8002078:	4692      	mov	sl, r2
 800207a:	0d6d      	lsrs	r5, r5, #21
 800207c:	45b9      	cmp	r9, r7
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x52>
 8002080:	e0bf      	b.n	8002202 <__aeabi_dsub+0x1d2>
 8002082:	2301      	movs	r3, #1
 8002084:	4661      	mov	r1, ip
 8002086:	4059      	eors	r1, r3
 8002088:	464b      	mov	r3, r9
 800208a:	468c      	mov	ip, r1
 800208c:	1aeb      	subs	r3, r5, r3
 800208e:	428e      	cmp	r6, r1
 8002090:	d075      	beq.n	800217e <__aeabi_dsub+0x14e>
 8002092:	2b00      	cmp	r3, #0
 8002094:	dc00      	bgt.n	8002098 <__aeabi_dsub+0x68>
 8002096:	e2a3      	b.n	80025e0 <__aeabi_dsub+0x5b0>
 8002098:	4649      	mov	r1, r9
 800209a:	2900      	cmp	r1, #0
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x70>
 800209e:	e0ce      	b.n	800223e <__aeabi_dsub+0x20e>
 80020a0:	42bd      	cmp	r5, r7
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x76>
 80020a4:	e200      	b.n	80024a8 <__aeabi_dsub+0x478>
 80020a6:	2701      	movs	r7, #1
 80020a8:	2b38      	cmp	r3, #56	@ 0x38
 80020aa:	dc19      	bgt.n	80020e0 <__aeabi_dsub+0xb0>
 80020ac:	2780      	movs	r7, #128	@ 0x80
 80020ae:	4659      	mov	r1, fp
 80020b0:	043f      	lsls	r7, r7, #16
 80020b2:	4339      	orrs	r1, r7
 80020b4:	468b      	mov	fp, r1
 80020b6:	2b1f      	cmp	r3, #31
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x8c>
 80020ba:	e1fa      	b.n	80024b2 <__aeabi_dsub+0x482>
 80020bc:	2720      	movs	r7, #32
 80020be:	1af9      	subs	r1, r7, r3
 80020c0:	468c      	mov	ip, r1
 80020c2:	4659      	mov	r1, fp
 80020c4:	4667      	mov	r7, ip
 80020c6:	40b9      	lsls	r1, r7
 80020c8:	000f      	movs	r7, r1
 80020ca:	0011      	movs	r1, r2
 80020cc:	40d9      	lsrs	r1, r3
 80020ce:	430f      	orrs	r7, r1
 80020d0:	4661      	mov	r1, ip
 80020d2:	408a      	lsls	r2, r1
 80020d4:	1e51      	subs	r1, r2, #1
 80020d6:	418a      	sbcs	r2, r1
 80020d8:	4659      	mov	r1, fp
 80020da:	40d9      	lsrs	r1, r3
 80020dc:	4317      	orrs	r7, r2
 80020de:	1a64      	subs	r4, r4, r1
 80020e0:	1bc7      	subs	r7, r0, r7
 80020e2:	42b8      	cmp	r0, r7
 80020e4:	4180      	sbcs	r0, r0
 80020e6:	4240      	negs	r0, r0
 80020e8:	1a24      	subs	r4, r4, r0
 80020ea:	0223      	lsls	r3, r4, #8
 80020ec:	d400      	bmi.n	80020f0 <__aeabi_dsub+0xc0>
 80020ee:	e140      	b.n	8002372 <__aeabi_dsub+0x342>
 80020f0:	0264      	lsls	r4, r4, #9
 80020f2:	0a64      	lsrs	r4, r4, #9
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0xca>
 80020f8:	e154      	b.n	80023a4 <__aeabi_dsub+0x374>
 80020fa:	0020      	movs	r0, r4
 80020fc:	f000 fd1c 	bl	8002b38 <__clzsi2>
 8002100:	0003      	movs	r3, r0
 8002102:	3b08      	subs	r3, #8
 8002104:	2120      	movs	r1, #32
 8002106:	0038      	movs	r0, r7
 8002108:	1aca      	subs	r2, r1, r3
 800210a:	40d0      	lsrs	r0, r2
 800210c:	409c      	lsls	r4, r3
 800210e:	0002      	movs	r2, r0
 8002110:	409f      	lsls	r7, r3
 8002112:	4322      	orrs	r2, r4
 8002114:	429d      	cmp	r5, r3
 8002116:	dd00      	ble.n	800211a <__aeabi_dsub+0xea>
 8002118:	e1a6      	b.n	8002468 <__aeabi_dsub+0x438>
 800211a:	1b58      	subs	r0, r3, r5
 800211c:	3001      	adds	r0, #1
 800211e:	1a09      	subs	r1, r1, r0
 8002120:	003c      	movs	r4, r7
 8002122:	408f      	lsls	r7, r1
 8002124:	40c4      	lsrs	r4, r0
 8002126:	1e7b      	subs	r3, r7, #1
 8002128:	419f      	sbcs	r7, r3
 800212a:	0013      	movs	r3, r2
 800212c:	408b      	lsls	r3, r1
 800212e:	4327      	orrs	r7, r4
 8002130:	431f      	orrs	r7, r3
 8002132:	40c2      	lsrs	r2, r0
 8002134:	003b      	movs	r3, r7
 8002136:	0014      	movs	r4, r2
 8002138:	2500      	movs	r5, #0
 800213a:	4313      	orrs	r3, r2
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x110>
 800213e:	e1f7      	b.n	8002530 <__aeabi_dsub+0x500>
 8002140:	077b      	lsls	r3, r7, #29
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x116>
 8002144:	e377      	b.n	8002836 <__aeabi_dsub+0x806>
 8002146:	230f      	movs	r3, #15
 8002148:	0038      	movs	r0, r7
 800214a:	403b      	ands	r3, r7
 800214c:	2b04      	cmp	r3, #4
 800214e:	d004      	beq.n	800215a <__aeabi_dsub+0x12a>
 8002150:	1d38      	adds	r0, r7, #4
 8002152:	42b8      	cmp	r0, r7
 8002154:	41bf      	sbcs	r7, r7
 8002156:	427f      	negs	r7, r7
 8002158:	19e4      	adds	r4, r4, r7
 800215a:	0223      	lsls	r3, r4, #8
 800215c:	d400      	bmi.n	8002160 <__aeabi_dsub+0x130>
 800215e:	e368      	b.n	8002832 <__aeabi_dsub+0x802>
 8002160:	4b8c      	ldr	r3, [pc, #560]	@ (8002394 <__aeabi_dsub+0x364>)
 8002162:	3501      	adds	r5, #1
 8002164:	429d      	cmp	r5, r3
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0x13a>
 8002168:	e0f4      	b.n	8002354 <__aeabi_dsub+0x324>
 800216a:	4b8b      	ldr	r3, [pc, #556]	@ (8002398 <__aeabi_dsub+0x368>)
 800216c:	056d      	lsls	r5, r5, #21
 800216e:	401c      	ands	r4, r3
 8002170:	0d6d      	lsrs	r5, r5, #21
 8002172:	0767      	lsls	r7, r4, #29
 8002174:	08c0      	lsrs	r0, r0, #3
 8002176:	0264      	lsls	r4, r4, #9
 8002178:	4307      	orrs	r7, r0
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	e0ec      	b.n	8002358 <__aeabi_dsub+0x328>
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc00      	bgt.n	8002184 <__aeabi_dsub+0x154>
 8002182:	e329      	b.n	80027d8 <__aeabi_dsub+0x7a8>
 8002184:	4649      	mov	r1, r9
 8002186:	2900      	cmp	r1, #0
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x15c>
 800218a:	e0d6      	b.n	800233a <__aeabi_dsub+0x30a>
 800218c:	4659      	mov	r1, fp
 800218e:	4311      	orrs	r1, r2
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x164>
 8002192:	e12e      	b.n	80023f2 <__aeabi_dsub+0x3c2>
 8002194:	1e59      	subs	r1, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x16c>
 800219a:	e1e6      	b.n	800256a <__aeabi_dsub+0x53a>
 800219c:	42bb      	cmp	r3, r7
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x172>
 80021a0:	e182      	b.n	80024a8 <__aeabi_dsub+0x478>
 80021a2:	2701      	movs	r7, #1
 80021a4:	000b      	movs	r3, r1
 80021a6:	2938      	cmp	r1, #56	@ 0x38
 80021a8:	dc14      	bgt.n	80021d4 <__aeabi_dsub+0x1a4>
 80021aa:	2b1f      	cmp	r3, #31
 80021ac:	dd00      	ble.n	80021b0 <__aeabi_dsub+0x180>
 80021ae:	e23c      	b.n	800262a <__aeabi_dsub+0x5fa>
 80021b0:	2720      	movs	r7, #32
 80021b2:	1af9      	subs	r1, r7, r3
 80021b4:	468c      	mov	ip, r1
 80021b6:	4659      	mov	r1, fp
 80021b8:	4667      	mov	r7, ip
 80021ba:	40b9      	lsls	r1, r7
 80021bc:	000f      	movs	r7, r1
 80021be:	0011      	movs	r1, r2
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	430f      	orrs	r7, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	408a      	lsls	r2, r1
 80021c8:	1e51      	subs	r1, r2, #1
 80021ca:	418a      	sbcs	r2, r1
 80021cc:	4659      	mov	r1, fp
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	4317      	orrs	r7, r2
 80021d2:	1864      	adds	r4, r4, r1
 80021d4:	183f      	adds	r7, r7, r0
 80021d6:	4287      	cmp	r7, r0
 80021d8:	4180      	sbcs	r0, r0
 80021da:	4240      	negs	r0, r0
 80021dc:	1824      	adds	r4, r4, r0
 80021de:	0223      	lsls	r3, r4, #8
 80021e0:	d400      	bmi.n	80021e4 <__aeabi_dsub+0x1b4>
 80021e2:	e0c6      	b.n	8002372 <__aeabi_dsub+0x342>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <__aeabi_dsub+0x364>)
 80021e6:	3501      	adds	r5, #1
 80021e8:	429d      	cmp	r5, r3
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x1be>
 80021ec:	e0b2      	b.n	8002354 <__aeabi_dsub+0x324>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4b69      	ldr	r3, [pc, #420]	@ (8002398 <__aeabi_dsub+0x368>)
 80021f2:	087a      	lsrs	r2, r7, #1
 80021f4:	401c      	ands	r4, r3
 80021f6:	4039      	ands	r1, r7
 80021f8:	430a      	orrs	r2, r1
 80021fa:	07e7      	lsls	r7, r4, #31
 80021fc:	4317      	orrs	r7, r2
 80021fe:	0864      	lsrs	r4, r4, #1
 8002200:	e79e      	b.n	8002140 <__aeabi_dsub+0x110>
 8002202:	4b66      	ldr	r3, [pc, #408]	@ (800239c <__aeabi_dsub+0x36c>)
 8002204:	4311      	orrs	r1, r2
 8002206:	468a      	mov	sl, r1
 8002208:	18eb      	adds	r3, r5, r3
 800220a:	2900      	cmp	r1, #0
 800220c:	d028      	beq.n	8002260 <__aeabi_dsub+0x230>
 800220e:	4566      	cmp	r6, ip
 8002210:	d02c      	beq.n	800226c <__aeabi_dsub+0x23c>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d05b      	beq.n	80022ce <__aeabi_dsub+0x29e>
 8002216:	2d00      	cmp	r5, #0
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x1ec>
 800221a:	e12c      	b.n	8002476 <__aeabi_dsub+0x446>
 800221c:	465b      	mov	r3, fp
 800221e:	4666      	mov	r6, ip
 8002220:	075f      	lsls	r7, r3, #29
 8002222:	08d2      	lsrs	r2, r2, #3
 8002224:	4317      	orrs	r7, r2
 8002226:	08dd      	lsrs	r5, r3, #3
 8002228:	003b      	movs	r3, r7
 800222a:	432b      	orrs	r3, r5
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x200>
 800222e:	e0e2      	b.n	80023f6 <__aeabi_dsub+0x3c6>
 8002230:	2480      	movs	r4, #128	@ 0x80
 8002232:	0324      	lsls	r4, r4, #12
 8002234:	432c      	orrs	r4, r5
 8002236:	0324      	lsls	r4, r4, #12
 8002238:	4d56      	ldr	r5, [pc, #344]	@ (8002394 <__aeabi_dsub+0x364>)
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	e08c      	b.n	8002358 <__aeabi_dsub+0x328>
 800223e:	4659      	mov	r1, fp
 8002240:	4311      	orrs	r1, r2
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x216>
 8002244:	e0d5      	b.n	80023f2 <__aeabi_dsub+0x3c2>
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x21e>
 800224c:	e1b9      	b.n	80025c2 <__aeabi_dsub+0x592>
 800224e:	42bb      	cmp	r3, r7
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x224>
 8002252:	e1b1      	b.n	80025b8 <__aeabi_dsub+0x588>
 8002254:	2701      	movs	r7, #1
 8002256:	000b      	movs	r3, r1
 8002258:	2938      	cmp	r1, #56	@ 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x22e>
 800225c:	e740      	b.n	80020e0 <__aeabi_dsub+0xb0>
 800225e:	e72a      	b.n	80020b6 <__aeabi_dsub+0x86>
 8002260:	4661      	mov	r1, ip
 8002262:	2701      	movs	r7, #1
 8002264:	4079      	eors	r1, r7
 8002266:	468c      	mov	ip, r1
 8002268:	4566      	cmp	r6, ip
 800226a:	d1d2      	bne.n	8002212 <__aeabi_dsub+0x1e2>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x242>
 8002270:	e0c5      	b.n	80023fe <__aeabi_dsub+0x3ce>
 8002272:	2d00      	cmp	r5, #0
 8002274:	d000      	beq.n	8002278 <__aeabi_dsub+0x248>
 8002276:	e155      	b.n	8002524 <__aeabi_dsub+0x4f4>
 8002278:	464b      	mov	r3, r9
 800227a:	0025      	movs	r5, r4
 800227c:	4305      	orrs	r5, r0
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x252>
 8002280:	e212      	b.n	80026a8 <__aeabi_dsub+0x678>
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	468c      	mov	ip, r1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x25c>
 800228a:	e249      	b.n	8002720 <__aeabi_dsub+0x6f0>
 800228c:	4d41      	ldr	r5, [pc, #260]	@ (8002394 <__aeabi_dsub+0x364>)
 800228e:	42ab      	cmp	r3, r5
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x264>
 8002292:	e28f      	b.n	80027b4 <__aeabi_dsub+0x784>
 8002294:	2701      	movs	r7, #1
 8002296:	2938      	cmp	r1, #56	@ 0x38
 8002298:	dc11      	bgt.n	80022be <__aeabi_dsub+0x28e>
 800229a:	4663      	mov	r3, ip
 800229c:	2b1f      	cmp	r3, #31
 800229e:	dd00      	ble.n	80022a2 <__aeabi_dsub+0x272>
 80022a0:	e25b      	b.n	800275a <__aeabi_dsub+0x72a>
 80022a2:	4661      	mov	r1, ip
 80022a4:	2320      	movs	r3, #32
 80022a6:	0027      	movs	r7, r4
 80022a8:	1a5b      	subs	r3, r3, r1
 80022aa:	0005      	movs	r5, r0
 80022ac:	4098      	lsls	r0, r3
 80022ae:	409f      	lsls	r7, r3
 80022b0:	40cd      	lsrs	r5, r1
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	4198      	sbcs	r0, r3
 80022b6:	40cc      	lsrs	r4, r1
 80022b8:	432f      	orrs	r7, r5
 80022ba:	4307      	orrs	r7, r0
 80022bc:	44a3      	add	fp, r4
 80022be:	18bf      	adds	r7, r7, r2
 80022c0:	4297      	cmp	r7, r2
 80022c2:	4192      	sbcs	r2, r2
 80022c4:	4252      	negs	r2, r2
 80022c6:	445a      	add	r2, fp
 80022c8:	0014      	movs	r4, r2
 80022ca:	464d      	mov	r5, r9
 80022cc:	e787      	b.n	80021de <__aeabi_dsub+0x1ae>
 80022ce:	4f34      	ldr	r7, [pc, #208]	@ (80023a0 <__aeabi_dsub+0x370>)
 80022d0:	1c6b      	adds	r3, r5, #1
 80022d2:	423b      	tst	r3, r7
 80022d4:	d000      	beq.n	80022d8 <__aeabi_dsub+0x2a8>
 80022d6:	e0b6      	b.n	8002446 <__aeabi_dsub+0x416>
 80022d8:	4659      	mov	r1, fp
 80022da:	0023      	movs	r3, r4
 80022dc:	4311      	orrs	r1, r2
 80022de:	000f      	movs	r7, r1
 80022e0:	4303      	orrs	r3, r0
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x2b8>
 80022e6:	e126      	b.n	8002536 <__aeabi_dsub+0x506>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x2be>
 80022ec:	e1c0      	b.n	8002670 <__aeabi_dsub+0x640>
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x2c4>
 80022f2:	e0a1      	b.n	8002438 <__aeabi_dsub+0x408>
 80022f4:	1a83      	subs	r3, r0, r2
 80022f6:	4698      	mov	r8, r3
 80022f8:	465b      	mov	r3, fp
 80022fa:	4540      	cmp	r0, r8
 80022fc:	41ad      	sbcs	r5, r5
 80022fe:	1ae3      	subs	r3, r4, r3
 8002300:	426d      	negs	r5, r5
 8002302:	1b5b      	subs	r3, r3, r5
 8002304:	2580      	movs	r5, #128	@ 0x80
 8002306:	042d      	lsls	r5, r5, #16
 8002308:	422b      	tst	r3, r5
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x2de>
 800230c:	e14b      	b.n	80025a6 <__aeabi_dsub+0x576>
 800230e:	465b      	mov	r3, fp
 8002310:	1a10      	subs	r0, r2, r0
 8002312:	4282      	cmp	r2, r0
 8002314:	4192      	sbcs	r2, r2
 8002316:	1b1c      	subs	r4, r3, r4
 8002318:	0007      	movs	r7, r0
 800231a:	2601      	movs	r6, #1
 800231c:	4663      	mov	r3, ip
 800231e:	4252      	negs	r2, r2
 8002320:	1aa4      	subs	r4, r4, r2
 8002322:	4327      	orrs	r7, r4
 8002324:	401e      	ands	r6, r3
 8002326:	2f00      	cmp	r7, #0
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x2fc>
 800232a:	e142      	b.n	80025b2 <__aeabi_dsub+0x582>
 800232c:	422c      	tst	r4, r5
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x302>
 8002330:	e26d      	b.n	800280e <__aeabi_dsub+0x7de>
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <__aeabi_dsub+0x368>)
 8002334:	2501      	movs	r5, #1
 8002336:	401c      	ands	r4, r3
 8002338:	e71b      	b.n	8002172 <__aeabi_dsub+0x142>
 800233a:	42bd      	cmp	r5, r7
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x310>
 800233e:	e13b      	b.n	80025b8 <__aeabi_dsub+0x588>
 8002340:	2701      	movs	r7, #1
 8002342:	2b38      	cmp	r3, #56	@ 0x38
 8002344:	dd00      	ble.n	8002348 <__aeabi_dsub+0x318>
 8002346:	e745      	b.n	80021d4 <__aeabi_dsub+0x1a4>
 8002348:	2780      	movs	r7, #128	@ 0x80
 800234a:	4659      	mov	r1, fp
 800234c:	043f      	lsls	r7, r7, #16
 800234e:	4339      	orrs	r1, r7
 8002350:	468b      	mov	fp, r1
 8002352:	e72a      	b.n	80021aa <__aeabi_dsub+0x17a>
 8002354:	2400      	movs	r4, #0
 8002356:	2700      	movs	r7, #0
 8002358:	052d      	lsls	r5, r5, #20
 800235a:	4325      	orrs	r5, r4
 800235c:	07f6      	lsls	r6, r6, #31
 800235e:	4335      	orrs	r5, r6
 8002360:	0038      	movs	r0, r7
 8002362:	0029      	movs	r1, r5
 8002364:	b003      	add	sp, #12
 8002366:	bcf0      	pop	{r4, r5, r6, r7}
 8002368:	46bb      	mov	fp, r7
 800236a:	46b2      	mov	sl, r6
 800236c:	46a9      	mov	r9, r5
 800236e:	46a0      	mov	r8, r4
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	077b      	lsls	r3, r7, #29
 8002374:	d004      	beq.n	8002380 <__aeabi_dsub+0x350>
 8002376:	230f      	movs	r3, #15
 8002378:	403b      	ands	r3, r7
 800237a:	2b04      	cmp	r3, #4
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x350>
 800237e:	e6e7      	b.n	8002150 <__aeabi_dsub+0x120>
 8002380:	002b      	movs	r3, r5
 8002382:	08f8      	lsrs	r0, r7, #3
 8002384:	4a03      	ldr	r2, [pc, #12]	@ (8002394 <__aeabi_dsub+0x364>)
 8002386:	0767      	lsls	r7, r4, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	08e5      	lsrs	r5, r4, #3
 800238c:	4293      	cmp	r3, r2
 800238e:	d100      	bne.n	8002392 <__aeabi_dsub+0x362>
 8002390:	e74a      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002392:	e0a5      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002394:	000007ff 	.word	0x000007ff
 8002398:	ff7fffff 	.word	0xff7fffff
 800239c:	fffff801 	.word	0xfffff801
 80023a0:	000007fe 	.word	0x000007fe
 80023a4:	0038      	movs	r0, r7
 80023a6:	f000 fbc7 	bl	8002b38 <__clzsi2>
 80023aa:	0003      	movs	r3, r0
 80023ac:	3318      	adds	r3, #24
 80023ae:	2b1f      	cmp	r3, #31
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_dsub+0x384>
 80023b2:	e6a7      	b.n	8002104 <__aeabi_dsub+0xd4>
 80023b4:	003a      	movs	r2, r7
 80023b6:	3808      	subs	r0, #8
 80023b8:	4082      	lsls	r2, r0
 80023ba:	429d      	cmp	r5, r3
 80023bc:	dd00      	ble.n	80023c0 <__aeabi_dsub+0x390>
 80023be:	e08a      	b.n	80024d6 <__aeabi_dsub+0x4a6>
 80023c0:	1b5b      	subs	r3, r3, r5
 80023c2:	1c58      	adds	r0, r3, #1
 80023c4:	281f      	cmp	r0, #31
 80023c6:	dc00      	bgt.n	80023ca <__aeabi_dsub+0x39a>
 80023c8:	e1d8      	b.n	800277c <__aeabi_dsub+0x74c>
 80023ca:	0017      	movs	r7, r2
 80023cc:	3b1f      	subs	r3, #31
 80023ce:	40df      	lsrs	r7, r3
 80023d0:	2820      	cmp	r0, #32
 80023d2:	d005      	beq.n	80023e0 <__aeabi_dsub+0x3b0>
 80023d4:	2340      	movs	r3, #64	@ 0x40
 80023d6:	1a1b      	subs	r3, r3, r0
 80023d8:	409a      	lsls	r2, r3
 80023da:	1e53      	subs	r3, r2, #1
 80023dc:	419a      	sbcs	r2, r3
 80023de:	4317      	orrs	r7, r2
 80023e0:	2500      	movs	r5, #0
 80023e2:	2f00      	cmp	r7, #0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x3b8>
 80023e6:	e0e5      	b.n	80025b4 <__aeabi_dsub+0x584>
 80023e8:	077b      	lsls	r3, r7, #29
 80023ea:	d000      	beq.n	80023ee <__aeabi_dsub+0x3be>
 80023ec:	e6ab      	b.n	8002146 <__aeabi_dsub+0x116>
 80023ee:	002c      	movs	r4, r5
 80023f0:	e7c6      	b.n	8002380 <__aeabi_dsub+0x350>
 80023f2:	08c0      	lsrs	r0, r0, #3
 80023f4:	e7c6      	b.n	8002384 <__aeabi_dsub+0x354>
 80023f6:	2700      	movs	r7, #0
 80023f8:	2400      	movs	r4, #0
 80023fa:	4dd1      	ldr	r5, [pc, #836]	@ (8002740 <__aeabi_dsub+0x710>)
 80023fc:	e7ac      	b.n	8002358 <__aeabi_dsub+0x328>
 80023fe:	4fd1      	ldr	r7, [pc, #836]	@ (8002744 <__aeabi_dsub+0x714>)
 8002400:	1c6b      	adds	r3, r5, #1
 8002402:	423b      	tst	r3, r7
 8002404:	d171      	bne.n	80024ea <__aeabi_dsub+0x4ba>
 8002406:	0023      	movs	r3, r4
 8002408:	4303      	orrs	r3, r0
 800240a:	2d00      	cmp	r5, #0
 800240c:	d000      	beq.n	8002410 <__aeabi_dsub+0x3e0>
 800240e:	e14e      	b.n	80026ae <__aeabi_dsub+0x67e>
 8002410:	4657      	mov	r7, sl
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x3e8>
 8002416:	e1b5      	b.n	8002784 <__aeabi_dsub+0x754>
 8002418:	2f00      	cmp	r7, #0
 800241a:	d00d      	beq.n	8002438 <__aeabi_dsub+0x408>
 800241c:	1883      	adds	r3, r0, r2
 800241e:	4283      	cmp	r3, r0
 8002420:	4180      	sbcs	r0, r0
 8002422:	445c      	add	r4, fp
 8002424:	4240      	negs	r0, r0
 8002426:	1824      	adds	r4, r4, r0
 8002428:	0222      	lsls	r2, r4, #8
 800242a:	d500      	bpl.n	800242e <__aeabi_dsub+0x3fe>
 800242c:	e1c8      	b.n	80027c0 <__aeabi_dsub+0x790>
 800242e:	001f      	movs	r7, r3
 8002430:	4698      	mov	r8, r3
 8002432:	4327      	orrs	r7, r4
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x408>
 8002436:	e0bc      	b.n	80025b2 <__aeabi_dsub+0x582>
 8002438:	4643      	mov	r3, r8
 800243a:	0767      	lsls	r7, r4, #29
 800243c:	08db      	lsrs	r3, r3, #3
 800243e:	431f      	orrs	r7, r3
 8002440:	08e5      	lsrs	r5, r4, #3
 8002442:	2300      	movs	r3, #0
 8002444:	e04c      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002446:	1a83      	subs	r3, r0, r2
 8002448:	4698      	mov	r8, r3
 800244a:	465b      	mov	r3, fp
 800244c:	4540      	cmp	r0, r8
 800244e:	41bf      	sbcs	r7, r7
 8002450:	1ae3      	subs	r3, r4, r3
 8002452:	427f      	negs	r7, r7
 8002454:	1bdb      	subs	r3, r3, r7
 8002456:	021f      	lsls	r7, r3, #8
 8002458:	d47c      	bmi.n	8002554 <__aeabi_dsub+0x524>
 800245a:	4647      	mov	r7, r8
 800245c:	431f      	orrs	r7, r3
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x432>
 8002460:	e0a6      	b.n	80025b0 <__aeabi_dsub+0x580>
 8002462:	001c      	movs	r4, r3
 8002464:	4647      	mov	r7, r8
 8002466:	e645      	b.n	80020f4 <__aeabi_dsub+0xc4>
 8002468:	4cb7      	ldr	r4, [pc, #732]	@ (8002748 <__aeabi_dsub+0x718>)
 800246a:	1aed      	subs	r5, r5, r3
 800246c:	4014      	ands	r4, r2
 800246e:	077b      	lsls	r3, r7, #29
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x444>
 8002472:	e780      	b.n	8002376 <__aeabi_dsub+0x346>
 8002474:	e784      	b.n	8002380 <__aeabi_dsub+0x350>
 8002476:	464b      	mov	r3, r9
 8002478:	0025      	movs	r5, r4
 800247a:	4305      	orrs	r5, r0
 800247c:	d066      	beq.n	800254c <__aeabi_dsub+0x51c>
 800247e:	1e5f      	subs	r7, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x456>
 8002484:	e0fc      	b.n	8002680 <__aeabi_dsub+0x650>
 8002486:	4dae      	ldr	r5, [pc, #696]	@ (8002740 <__aeabi_dsub+0x710>)
 8002488:	42ab      	cmp	r3, r5
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x45e>
 800248c:	e15e      	b.n	800274c <__aeabi_dsub+0x71c>
 800248e:	4666      	mov	r6, ip
 8002490:	2f38      	cmp	r7, #56	@ 0x38
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x466>
 8002494:	e0b4      	b.n	8002600 <__aeabi_dsub+0x5d0>
 8002496:	2001      	movs	r0, #1
 8002498:	1a17      	subs	r7, r2, r0
 800249a:	42ba      	cmp	r2, r7
 800249c:	4192      	sbcs	r2, r2
 800249e:	465b      	mov	r3, fp
 80024a0:	4252      	negs	r2, r2
 80024a2:	464d      	mov	r5, r9
 80024a4:	1a9c      	subs	r4, r3, r2
 80024a6:	e620      	b.n	80020ea <__aeabi_dsub+0xba>
 80024a8:	0767      	lsls	r7, r4, #29
 80024aa:	08c0      	lsrs	r0, r0, #3
 80024ac:	4307      	orrs	r7, r0
 80024ae:	08e5      	lsrs	r5, r4, #3
 80024b0:	e6ba      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80024b2:	001f      	movs	r7, r3
 80024b4:	4659      	mov	r1, fp
 80024b6:	3f20      	subs	r7, #32
 80024b8:	40f9      	lsrs	r1, r7
 80024ba:	000f      	movs	r7, r1
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d005      	beq.n	80024cc <__aeabi_dsub+0x49c>
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	4659      	mov	r1, fp
 80024c6:	4099      	lsls	r1, r3
 80024c8:	430a      	orrs	r2, r1
 80024ca:	4692      	mov	sl, r2
 80024cc:	4653      	mov	r3, sl
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	4193      	sbcs	r3, r2
 80024d2:	431f      	orrs	r7, r3
 80024d4:	e604      	b.n	80020e0 <__aeabi_dsub+0xb0>
 80024d6:	1aeb      	subs	r3, r5, r3
 80024d8:	4d9b      	ldr	r5, [pc, #620]	@ (8002748 <__aeabi_dsub+0x718>)
 80024da:	4015      	ands	r5, r2
 80024dc:	076f      	lsls	r7, r5, #29
 80024de:	08ed      	lsrs	r5, r5, #3
 80024e0:	032c      	lsls	r4, r5, #12
 80024e2:	055d      	lsls	r5, r3, #21
 80024e4:	0b24      	lsrs	r4, r4, #12
 80024e6:	0d6d      	lsrs	r5, r5, #21
 80024e8:	e736      	b.n	8002358 <__aeabi_dsub+0x328>
 80024ea:	4d95      	ldr	r5, [pc, #596]	@ (8002740 <__aeabi_dsub+0x710>)
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x4c2>
 80024f0:	e0d6      	b.n	80026a0 <__aeabi_dsub+0x670>
 80024f2:	1882      	adds	r2, r0, r2
 80024f4:	0021      	movs	r1, r4
 80024f6:	4282      	cmp	r2, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4459      	add	r1, fp
 80024fc:	4240      	negs	r0, r0
 80024fe:	1808      	adds	r0, r1, r0
 8002500:	07c7      	lsls	r7, r0, #31
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	4317      	orrs	r7, r2
 8002506:	0844      	lsrs	r4, r0, #1
 8002508:	0752      	lsls	r2, r2, #29
 800250a:	d400      	bmi.n	800250e <__aeabi_dsub+0x4de>
 800250c:	e185      	b.n	800281a <__aeabi_dsub+0x7ea>
 800250e:	220f      	movs	r2, #15
 8002510:	001d      	movs	r5, r3
 8002512:	403a      	ands	r2, r7
 8002514:	2a04      	cmp	r2, #4
 8002516:	d000      	beq.n	800251a <__aeabi_dsub+0x4ea>
 8002518:	e61a      	b.n	8002150 <__aeabi_dsub+0x120>
 800251a:	08ff      	lsrs	r7, r7, #3
 800251c:	0764      	lsls	r4, r4, #29
 800251e:	4327      	orrs	r7, r4
 8002520:	0905      	lsrs	r5, r0, #4
 8002522:	e7dd      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002524:	465b      	mov	r3, fp
 8002526:	08d2      	lsrs	r2, r2, #3
 8002528:	075f      	lsls	r7, r3, #29
 800252a:	4317      	orrs	r7, r2
 800252c:	08dd      	lsrs	r5, r3, #3
 800252e:	e67b      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002530:	2700      	movs	r7, #0
 8002532:	2400      	movs	r4, #0
 8002534:	e710      	b.n	8002358 <__aeabi_dsub+0x328>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x50c>
 800253a:	e0d6      	b.n	80026ea <__aeabi_dsub+0x6ba>
 800253c:	2900      	cmp	r1, #0
 800253e:	d000      	beq.n	8002542 <__aeabi_dsub+0x512>
 8002540:	e12f      	b.n	80027a2 <__aeabi_dsub+0x772>
 8002542:	2480      	movs	r4, #128	@ 0x80
 8002544:	2600      	movs	r6, #0
 8002546:	4d7e      	ldr	r5, [pc, #504]	@ (8002740 <__aeabi_dsub+0x710>)
 8002548:	0324      	lsls	r4, r4, #12
 800254a:	e705      	b.n	8002358 <__aeabi_dsub+0x328>
 800254c:	4666      	mov	r6, ip
 800254e:	465c      	mov	r4, fp
 8002550:	08d0      	lsrs	r0, r2, #3
 8002552:	e717      	b.n	8002384 <__aeabi_dsub+0x354>
 8002554:	465b      	mov	r3, fp
 8002556:	1a17      	subs	r7, r2, r0
 8002558:	42ba      	cmp	r2, r7
 800255a:	4192      	sbcs	r2, r2
 800255c:	1b1c      	subs	r4, r3, r4
 800255e:	2601      	movs	r6, #1
 8002560:	4663      	mov	r3, ip
 8002562:	4252      	negs	r2, r2
 8002564:	1aa4      	subs	r4, r4, r2
 8002566:	401e      	ands	r6, r3
 8002568:	e5c4      	b.n	80020f4 <__aeabi_dsub+0xc4>
 800256a:	1883      	adds	r3, r0, r2
 800256c:	4283      	cmp	r3, r0
 800256e:	4180      	sbcs	r0, r0
 8002570:	445c      	add	r4, fp
 8002572:	4240      	negs	r0, r0
 8002574:	1825      	adds	r5, r4, r0
 8002576:	022a      	lsls	r2, r5, #8
 8002578:	d400      	bmi.n	800257c <__aeabi_dsub+0x54c>
 800257a:	e0da      	b.n	8002732 <__aeabi_dsub+0x702>
 800257c:	4a72      	ldr	r2, [pc, #456]	@ (8002748 <__aeabi_dsub+0x718>)
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	4015      	ands	r5, r2
 8002582:	07ea      	lsls	r2, r5, #31
 8002584:	431a      	orrs	r2, r3
 8002586:	0869      	lsrs	r1, r5, #1
 8002588:	075b      	lsls	r3, r3, #29
 800258a:	d400      	bmi.n	800258e <__aeabi_dsub+0x55e>
 800258c:	e14a      	b.n	8002824 <__aeabi_dsub+0x7f4>
 800258e:	230f      	movs	r3, #15
 8002590:	4013      	ands	r3, r2
 8002592:	2b04      	cmp	r3, #4
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x568>
 8002596:	e0fc      	b.n	8002792 <__aeabi_dsub+0x762>
 8002598:	1d17      	adds	r7, r2, #4
 800259a:	4297      	cmp	r7, r2
 800259c:	41a4      	sbcs	r4, r4
 800259e:	4264      	negs	r4, r4
 80025a0:	2502      	movs	r5, #2
 80025a2:	1864      	adds	r4, r4, r1
 80025a4:	e6ec      	b.n	8002380 <__aeabi_dsub+0x350>
 80025a6:	4647      	mov	r7, r8
 80025a8:	001c      	movs	r4, r3
 80025aa:	431f      	orrs	r7, r3
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dsub+0x580>
 80025ae:	e743      	b.n	8002438 <__aeabi_dsub+0x408>
 80025b0:	2600      	movs	r6, #0
 80025b2:	2500      	movs	r5, #0
 80025b4:	2400      	movs	r4, #0
 80025b6:	e6cf      	b.n	8002358 <__aeabi_dsub+0x328>
 80025b8:	08c0      	lsrs	r0, r0, #3
 80025ba:	0767      	lsls	r7, r4, #29
 80025bc:	4307      	orrs	r7, r0
 80025be:	08e5      	lsrs	r5, r4, #3
 80025c0:	e632      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80025c2:	1a87      	subs	r7, r0, r2
 80025c4:	465b      	mov	r3, fp
 80025c6:	42b8      	cmp	r0, r7
 80025c8:	4180      	sbcs	r0, r0
 80025ca:	1ae4      	subs	r4, r4, r3
 80025cc:	4240      	negs	r0, r0
 80025ce:	1a24      	subs	r4, r4, r0
 80025d0:	0223      	lsls	r3, r4, #8
 80025d2:	d428      	bmi.n	8002626 <__aeabi_dsub+0x5f6>
 80025d4:	0763      	lsls	r3, r4, #29
 80025d6:	08ff      	lsrs	r7, r7, #3
 80025d8:	431f      	orrs	r7, r3
 80025da:	08e5      	lsrs	r5, r4, #3
 80025dc:	2301      	movs	r3, #1
 80025de:	e77f      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x5b6>
 80025e4:	e673      	b.n	80022ce <__aeabi_dsub+0x29e>
 80025e6:	464b      	mov	r3, r9
 80025e8:	1b5f      	subs	r7, r3, r5
 80025ea:	003b      	movs	r3, r7
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x5c2>
 80025f0:	e742      	b.n	8002478 <__aeabi_dsub+0x448>
 80025f2:	2f38      	cmp	r7, #56	@ 0x38
 80025f4:	dd00      	ble.n	80025f8 <__aeabi_dsub+0x5c8>
 80025f6:	e0ec      	b.n	80027d2 <__aeabi_dsub+0x7a2>
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	000e      	movs	r6, r1
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431c      	orrs	r4, r3
 8002600:	2f1f      	cmp	r7, #31
 8002602:	dc25      	bgt.n	8002650 <__aeabi_dsub+0x620>
 8002604:	2520      	movs	r5, #32
 8002606:	0023      	movs	r3, r4
 8002608:	1bed      	subs	r5, r5, r7
 800260a:	0001      	movs	r1, r0
 800260c:	40a8      	lsls	r0, r5
 800260e:	40ab      	lsls	r3, r5
 8002610:	40f9      	lsrs	r1, r7
 8002612:	1e45      	subs	r5, r0, #1
 8002614:	41a8      	sbcs	r0, r5
 8002616:	430b      	orrs	r3, r1
 8002618:	40fc      	lsrs	r4, r7
 800261a:	4318      	orrs	r0, r3
 800261c:	465b      	mov	r3, fp
 800261e:	1b1b      	subs	r3, r3, r4
 8002620:	469b      	mov	fp, r3
 8002622:	e739      	b.n	8002498 <__aeabi_dsub+0x468>
 8002624:	4666      	mov	r6, ip
 8002626:	2501      	movs	r5, #1
 8002628:	e562      	b.n	80020f0 <__aeabi_dsub+0xc0>
 800262a:	001f      	movs	r7, r3
 800262c:	4659      	mov	r1, fp
 800262e:	3f20      	subs	r7, #32
 8002630:	40f9      	lsrs	r1, r7
 8002632:	468c      	mov	ip, r1
 8002634:	2b20      	cmp	r3, #32
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0x614>
 8002638:	2740      	movs	r7, #64	@ 0x40
 800263a:	4659      	mov	r1, fp
 800263c:	1afb      	subs	r3, r7, r3
 800263e:	4099      	lsls	r1, r3
 8002640:	430a      	orrs	r2, r1
 8002642:	4692      	mov	sl, r2
 8002644:	4657      	mov	r7, sl
 8002646:	1e7b      	subs	r3, r7, #1
 8002648:	419f      	sbcs	r7, r3
 800264a:	4663      	mov	r3, ip
 800264c:	431f      	orrs	r7, r3
 800264e:	e5c1      	b.n	80021d4 <__aeabi_dsub+0x1a4>
 8002650:	003b      	movs	r3, r7
 8002652:	0025      	movs	r5, r4
 8002654:	3b20      	subs	r3, #32
 8002656:	40dd      	lsrs	r5, r3
 8002658:	2f20      	cmp	r7, #32
 800265a:	d004      	beq.n	8002666 <__aeabi_dsub+0x636>
 800265c:	2340      	movs	r3, #64	@ 0x40
 800265e:	1bdb      	subs	r3, r3, r7
 8002660:	409c      	lsls	r4, r3
 8002662:	4320      	orrs	r0, r4
 8002664:	4680      	mov	r8, r0
 8002666:	4640      	mov	r0, r8
 8002668:	1e43      	subs	r3, r0, #1
 800266a:	4198      	sbcs	r0, r3
 800266c:	4328      	orrs	r0, r5
 800266e:	e713      	b.n	8002498 <__aeabi_dsub+0x468>
 8002670:	2900      	cmp	r1, #0
 8002672:	d09d      	beq.n	80025b0 <__aeabi_dsub+0x580>
 8002674:	2601      	movs	r6, #1
 8002676:	4663      	mov	r3, ip
 8002678:	465c      	mov	r4, fp
 800267a:	4690      	mov	r8, r2
 800267c:	401e      	ands	r6, r3
 800267e:	e6db      	b.n	8002438 <__aeabi_dsub+0x408>
 8002680:	1a17      	subs	r7, r2, r0
 8002682:	465b      	mov	r3, fp
 8002684:	42ba      	cmp	r2, r7
 8002686:	4192      	sbcs	r2, r2
 8002688:	1b1c      	subs	r4, r3, r4
 800268a:	4252      	negs	r2, r2
 800268c:	1aa4      	subs	r4, r4, r2
 800268e:	0223      	lsls	r3, r4, #8
 8002690:	d4c8      	bmi.n	8002624 <__aeabi_dsub+0x5f4>
 8002692:	0763      	lsls	r3, r4, #29
 8002694:	08ff      	lsrs	r7, r7, #3
 8002696:	431f      	orrs	r7, r3
 8002698:	4666      	mov	r6, ip
 800269a:	2301      	movs	r3, #1
 800269c:	08e5      	lsrs	r5, r4, #3
 800269e:	e71f      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 80026a0:	001d      	movs	r5, r3
 80026a2:	2400      	movs	r4, #0
 80026a4:	2700      	movs	r7, #0
 80026a6:	e657      	b.n	8002358 <__aeabi_dsub+0x328>
 80026a8:	465c      	mov	r4, fp
 80026aa:	08d0      	lsrs	r0, r2, #3
 80026ac:	e66a      	b.n	8002384 <__aeabi_dsub+0x354>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x684>
 80026b2:	e737      	b.n	8002524 <__aeabi_dsub+0x4f4>
 80026b4:	4653      	mov	r3, sl
 80026b6:	08c0      	lsrs	r0, r0, #3
 80026b8:	0767      	lsls	r7, r4, #29
 80026ba:	4307      	orrs	r7, r0
 80026bc:	08e5      	lsrs	r5, r4, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <__aeabi_dsub+0x694>
 80026c2:	e5b1      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	031b      	lsls	r3, r3, #12
 80026c8:	421d      	tst	r5, r3
 80026ca:	d008      	beq.n	80026de <__aeabi_dsub+0x6ae>
 80026cc:	4659      	mov	r1, fp
 80026ce:	08c8      	lsrs	r0, r1, #3
 80026d0:	4218      	tst	r0, r3
 80026d2:	d104      	bne.n	80026de <__aeabi_dsub+0x6ae>
 80026d4:	08d2      	lsrs	r2, r2, #3
 80026d6:	0749      	lsls	r1, r1, #29
 80026d8:	430a      	orrs	r2, r1
 80026da:	0017      	movs	r7, r2
 80026dc:	0005      	movs	r5, r0
 80026de:	0f7b      	lsrs	r3, r7, #29
 80026e0:	00ff      	lsls	r7, r7, #3
 80026e2:	08ff      	lsrs	r7, r7, #3
 80026e4:	075b      	lsls	r3, r3, #29
 80026e6:	431f      	orrs	r7, r3
 80026e8:	e59e      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80026ea:	08c0      	lsrs	r0, r0, #3
 80026ec:	0763      	lsls	r3, r4, #29
 80026ee:	4318      	orrs	r0, r3
 80026f0:	08e5      	lsrs	r5, r4, #3
 80026f2:	2900      	cmp	r1, #0
 80026f4:	d053      	beq.n	800279e <__aeabi_dsub+0x76e>
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	421d      	tst	r5, r3
 80026fc:	d00a      	beq.n	8002714 <__aeabi_dsub+0x6e4>
 80026fe:	4659      	mov	r1, fp
 8002700:	08cc      	lsrs	r4, r1, #3
 8002702:	421c      	tst	r4, r3
 8002704:	d106      	bne.n	8002714 <__aeabi_dsub+0x6e4>
 8002706:	2601      	movs	r6, #1
 8002708:	4663      	mov	r3, ip
 800270a:	0025      	movs	r5, r4
 800270c:	08d0      	lsrs	r0, r2, #3
 800270e:	0749      	lsls	r1, r1, #29
 8002710:	4308      	orrs	r0, r1
 8002712:	401e      	ands	r6, r3
 8002714:	0f47      	lsrs	r7, r0, #29
 8002716:	00c0      	lsls	r0, r0, #3
 8002718:	08c0      	lsrs	r0, r0, #3
 800271a:	077f      	lsls	r7, r7, #29
 800271c:	4307      	orrs	r7, r0
 800271e:	e583      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002720:	1883      	adds	r3, r0, r2
 8002722:	4293      	cmp	r3, r2
 8002724:	4192      	sbcs	r2, r2
 8002726:	445c      	add	r4, fp
 8002728:	4252      	negs	r2, r2
 800272a:	18a5      	adds	r5, r4, r2
 800272c:	022a      	lsls	r2, r5, #8
 800272e:	d500      	bpl.n	8002732 <__aeabi_dsub+0x702>
 8002730:	e724      	b.n	800257c <__aeabi_dsub+0x54c>
 8002732:	076f      	lsls	r7, r5, #29
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	431f      	orrs	r7, r3
 8002738:	08ed      	lsrs	r5, r5, #3
 800273a:	2301      	movs	r3, #1
 800273c:	e6d0      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	000007ff 	.word	0x000007ff
 8002744:	000007fe 	.word	0x000007fe
 8002748:	ff7fffff 	.word	0xff7fffff
 800274c:	465b      	mov	r3, fp
 800274e:	08d2      	lsrs	r2, r2, #3
 8002750:	075f      	lsls	r7, r3, #29
 8002752:	4666      	mov	r6, ip
 8002754:	4317      	orrs	r7, r2
 8002756:	08dd      	lsrs	r5, r3, #3
 8002758:	e566      	b.n	8002228 <__aeabi_dsub+0x1f8>
 800275a:	0025      	movs	r5, r4
 800275c:	3b20      	subs	r3, #32
 800275e:	40dd      	lsrs	r5, r3
 8002760:	4663      	mov	r3, ip
 8002762:	2b20      	cmp	r3, #32
 8002764:	d005      	beq.n	8002772 <__aeabi_dsub+0x742>
 8002766:	2340      	movs	r3, #64	@ 0x40
 8002768:	4661      	mov	r1, ip
 800276a:	1a5b      	subs	r3, r3, r1
 800276c:	409c      	lsls	r4, r3
 800276e:	4320      	orrs	r0, r4
 8002770:	4680      	mov	r8, r0
 8002772:	4647      	mov	r7, r8
 8002774:	1e7b      	subs	r3, r7, #1
 8002776:	419f      	sbcs	r7, r3
 8002778:	432f      	orrs	r7, r5
 800277a:	e5a0      	b.n	80022be <__aeabi_dsub+0x28e>
 800277c:	2120      	movs	r1, #32
 800277e:	2700      	movs	r7, #0
 8002780:	1a09      	subs	r1, r1, r0
 8002782:	e4d2      	b.n	800212a <__aeabi_dsub+0xfa>
 8002784:	2f00      	cmp	r7, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x75a>
 8002788:	e713      	b.n	80025b2 <__aeabi_dsub+0x582>
 800278a:	465c      	mov	r4, fp
 800278c:	0017      	movs	r7, r2
 800278e:	2500      	movs	r5, #0
 8002790:	e5f6      	b.n	8002380 <__aeabi_dsub+0x350>
 8002792:	08d7      	lsrs	r7, r2, #3
 8002794:	0749      	lsls	r1, r1, #29
 8002796:	2302      	movs	r3, #2
 8002798:	430f      	orrs	r7, r1
 800279a:	092d      	lsrs	r5, r5, #4
 800279c:	e6a0      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800279e:	0007      	movs	r7, r0
 80027a0:	e542      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027a2:	465b      	mov	r3, fp
 80027a4:	2601      	movs	r6, #1
 80027a6:	075f      	lsls	r7, r3, #29
 80027a8:	08dd      	lsrs	r5, r3, #3
 80027aa:	4663      	mov	r3, ip
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	4317      	orrs	r7, r2
 80027b0:	401e      	ands	r6, r3
 80027b2:	e539      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027b4:	465b      	mov	r3, fp
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	075f      	lsls	r7, r3, #29
 80027ba:	4317      	orrs	r7, r2
 80027bc:	08dd      	lsrs	r5, r3, #3
 80027be:	e533      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027c0:	4a1e      	ldr	r2, [pc, #120]	@ (800283c <__aeabi_dsub+0x80c>)
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	4022      	ands	r2, r4
 80027c6:	0757      	lsls	r7, r2, #29
 80027c8:	0252      	lsls	r2, r2, #9
 80027ca:	2501      	movs	r5, #1
 80027cc:	431f      	orrs	r7, r3
 80027ce:	0b14      	lsrs	r4, r2, #12
 80027d0:	e5c2      	b.n	8002358 <__aeabi_dsub+0x328>
 80027d2:	000e      	movs	r6, r1
 80027d4:	2001      	movs	r0, #1
 80027d6:	e65f      	b.n	8002498 <__aeabi_dsub+0x468>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <__aeabi_dsub+0x7c8>
 80027dc:	464b      	mov	r3, r9
 80027de:	1b5b      	subs	r3, r3, r5
 80027e0:	469c      	mov	ip, r3
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x7b8>
 80027e6:	e548      	b.n	800227a <__aeabi_dsub+0x24a>
 80027e8:	2701      	movs	r7, #1
 80027ea:	2b38      	cmp	r3, #56	@ 0x38
 80027ec:	dd00      	ble.n	80027f0 <__aeabi_dsub+0x7c0>
 80027ee:	e566      	b.n	80022be <__aeabi_dsub+0x28e>
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431c      	orrs	r4, r3
 80027f6:	e550      	b.n	800229a <__aeabi_dsub+0x26a>
 80027f8:	1c6b      	adds	r3, r5, #1
 80027fa:	4d11      	ldr	r5, [pc, #68]	@ (8002840 <__aeabi_dsub+0x810>)
 80027fc:	422b      	tst	r3, r5
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x7d2>
 8002800:	e673      	b.n	80024ea <__aeabi_dsub+0x4ba>
 8002802:	4659      	mov	r1, fp
 8002804:	0023      	movs	r3, r4
 8002806:	4311      	orrs	r1, r2
 8002808:	468a      	mov	sl, r1
 800280a:	4303      	orrs	r3, r0
 800280c:	e600      	b.n	8002410 <__aeabi_dsub+0x3e0>
 800280e:	0767      	lsls	r7, r4, #29
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	2300      	movs	r3, #0
 8002814:	4307      	orrs	r7, r0
 8002816:	08e5      	lsrs	r5, r4, #3
 8002818:	e662      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800281a:	0764      	lsls	r4, r4, #29
 800281c:	08ff      	lsrs	r7, r7, #3
 800281e:	4327      	orrs	r7, r4
 8002820:	0905      	lsrs	r5, r0, #4
 8002822:	e65d      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	4311      	orrs	r1, r2
 800282a:	000f      	movs	r7, r1
 800282c:	2302      	movs	r3, #2
 800282e:	092d      	lsrs	r5, r5, #4
 8002830:	e656      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002832:	0007      	movs	r7, r0
 8002834:	e5a4      	b.n	8002380 <__aeabi_dsub+0x350>
 8002836:	0038      	movs	r0, r7
 8002838:	e48f      	b.n	800215a <__aeabi_dsub+0x12a>
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	ff7fffff 	.word	0xff7fffff
 8002840:	000007fe 	.word	0x000007fe

08002844 <__aeabi_dcmpun>:
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	46c6      	mov	lr, r8
 8002848:	031e      	lsls	r6, r3, #12
 800284a:	0b36      	lsrs	r6, r6, #12
 800284c:	46b0      	mov	r8, r6
 800284e:	4e0d      	ldr	r6, [pc, #52]	@ (8002884 <__aeabi_dcmpun+0x40>)
 8002850:	030c      	lsls	r4, r1, #12
 8002852:	004d      	lsls	r5, r1, #1
 8002854:	005f      	lsls	r7, r3, #1
 8002856:	b500      	push	{lr}
 8002858:	0b24      	lsrs	r4, r4, #12
 800285a:	0d6d      	lsrs	r5, r5, #21
 800285c:	0d7f      	lsrs	r7, r7, #21
 800285e:	42b5      	cmp	r5, r6
 8002860:	d00b      	beq.n	800287a <__aeabi_dcmpun+0x36>
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <__aeabi_dcmpun+0x40>)
 8002864:	2000      	movs	r0, #0
 8002866:	428f      	cmp	r7, r1
 8002868:	d104      	bne.n	8002874 <__aeabi_dcmpun+0x30>
 800286a:	4646      	mov	r6, r8
 800286c:	4316      	orrs	r6, r2
 800286e:	0030      	movs	r0, r6
 8002870:	1e43      	subs	r3, r0, #1
 8002872:	4198      	sbcs	r0, r3
 8002874:	bc80      	pop	{r7}
 8002876:	46b8      	mov	r8, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	4304      	orrs	r4, r0
 800287c:	2001      	movs	r0, #1
 800287e:	2c00      	cmp	r4, #0
 8002880:	d1f8      	bne.n	8002874 <__aeabi_dcmpun+0x30>
 8002882:	e7ee      	b.n	8002862 <__aeabi_dcmpun+0x1e>
 8002884:	000007ff 	.word	0x000007ff

08002888 <__aeabi_d2iz>:
 8002888:	000b      	movs	r3, r1
 800288a:	0002      	movs	r2, r0
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4d16      	ldr	r5, [pc, #88]	@ (80028e8 <__aeabi_d2iz+0x60>)
 8002890:	030c      	lsls	r4, r1, #12
 8002892:	b082      	sub	sp, #8
 8002894:	0049      	lsls	r1, r1, #1
 8002896:	2000      	movs	r0, #0
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	0d49      	lsrs	r1, r1, #21
 80028a0:	0fde      	lsrs	r6, r3, #31
 80028a2:	42a9      	cmp	r1, r5
 80028a4:	dd04      	ble.n	80028b0 <__aeabi_d2iz+0x28>
 80028a6:	4811      	ldr	r0, [pc, #68]	@ (80028ec <__aeabi_d2iz+0x64>)
 80028a8:	4281      	cmp	r1, r0
 80028aa:	dd03      	ble.n	80028b4 <__aeabi_d2iz+0x2c>
 80028ac:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <__aeabi_d2iz+0x68>)
 80028ae:	18f0      	adds	r0, r6, r3
 80028b0:	b002      	add	sp, #8
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	2080      	movs	r0, #128	@ 0x80
 80028b6:	0340      	lsls	r0, r0, #13
 80028b8:	4320      	orrs	r0, r4
 80028ba:	4c0e      	ldr	r4, [pc, #56]	@ (80028f4 <__aeabi_d2iz+0x6c>)
 80028bc:	1a64      	subs	r4, r4, r1
 80028be:	2c1f      	cmp	r4, #31
 80028c0:	dd08      	ble.n	80028d4 <__aeabi_d2iz+0x4c>
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <__aeabi_d2iz+0x70>)
 80028c4:	1a5b      	subs	r3, r3, r1
 80028c6:	40d8      	lsrs	r0, r3
 80028c8:	0003      	movs	r3, r0
 80028ca:	4258      	negs	r0, r3
 80028cc:	2e00      	cmp	r6, #0
 80028ce:	d1ef      	bne.n	80028b0 <__aeabi_d2iz+0x28>
 80028d0:	0018      	movs	r0, r3
 80028d2:	e7ed      	b.n	80028b0 <__aeabi_d2iz+0x28>
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <__aeabi_d2iz+0x74>)
 80028d6:	9a00      	ldr	r2, [sp, #0]
 80028d8:	469c      	mov	ip, r3
 80028da:	0003      	movs	r3, r0
 80028dc:	4461      	add	r1, ip
 80028de:	408b      	lsls	r3, r1
 80028e0:	40e2      	lsrs	r2, r4
 80028e2:	4313      	orrs	r3, r2
 80028e4:	e7f1      	b.n	80028ca <__aeabi_d2iz+0x42>
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	000003fe 	.word	0x000003fe
 80028ec:	0000041d 	.word	0x0000041d
 80028f0:	7fffffff 	.word	0x7fffffff
 80028f4:	00000433 	.word	0x00000433
 80028f8:	00000413 	.word	0x00000413
 80028fc:	fffffbed 	.word	0xfffffbed

08002900 <__aeabi_i2d>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	2800      	cmp	r0, #0
 8002904:	d016      	beq.n	8002934 <__aeabi_i2d+0x34>
 8002906:	17c3      	asrs	r3, r0, #31
 8002908:	18c5      	adds	r5, r0, r3
 800290a:	405d      	eors	r5, r3
 800290c:	0fc4      	lsrs	r4, r0, #31
 800290e:	0028      	movs	r0, r5
 8002910:	f000 f912 	bl	8002b38 <__clzsi2>
 8002914:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <__aeabi_i2d+0x58>)
 8002916:	1a1b      	subs	r3, r3, r0
 8002918:	055b      	lsls	r3, r3, #21
 800291a:	0d5b      	lsrs	r3, r3, #21
 800291c:	280a      	cmp	r0, #10
 800291e:	dc14      	bgt.n	800294a <__aeabi_i2d+0x4a>
 8002920:	0002      	movs	r2, r0
 8002922:	002e      	movs	r6, r5
 8002924:	3215      	adds	r2, #21
 8002926:	4096      	lsls	r6, r2
 8002928:	220b      	movs	r2, #11
 800292a:	1a12      	subs	r2, r2, r0
 800292c:	40d5      	lsrs	r5, r2
 800292e:	032d      	lsls	r5, r5, #12
 8002930:	0b2d      	lsrs	r5, r5, #12
 8002932:	e003      	b.n	800293c <__aeabi_i2d+0x3c>
 8002934:	2400      	movs	r4, #0
 8002936:	2300      	movs	r3, #0
 8002938:	2500      	movs	r5, #0
 800293a:	2600      	movs	r6, #0
 800293c:	051b      	lsls	r3, r3, #20
 800293e:	432b      	orrs	r3, r5
 8002940:	07e4      	lsls	r4, r4, #31
 8002942:	4323      	orrs	r3, r4
 8002944:	0030      	movs	r0, r6
 8002946:	0019      	movs	r1, r3
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	380b      	subs	r0, #11
 800294c:	4085      	lsls	r5, r0
 800294e:	032d      	lsls	r5, r5, #12
 8002950:	2600      	movs	r6, #0
 8002952:	0b2d      	lsrs	r5, r5, #12
 8002954:	e7f2      	b.n	800293c <__aeabi_i2d+0x3c>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	0000041e 	.word	0x0000041e

0800295c <__aeabi_ui2d>:
 800295c:	b510      	push	{r4, lr}
 800295e:	1e04      	subs	r4, r0, #0
 8002960:	d010      	beq.n	8002984 <__aeabi_ui2d+0x28>
 8002962:	f000 f8e9 	bl	8002b38 <__clzsi2>
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <__aeabi_ui2d+0x44>)
 8002968:	1a1b      	subs	r3, r3, r0
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	280a      	cmp	r0, #10
 8002970:	dc0f      	bgt.n	8002992 <__aeabi_ui2d+0x36>
 8002972:	220b      	movs	r2, #11
 8002974:	0021      	movs	r1, r4
 8002976:	1a12      	subs	r2, r2, r0
 8002978:	40d1      	lsrs	r1, r2
 800297a:	3015      	adds	r0, #21
 800297c:	030a      	lsls	r2, r1, #12
 800297e:	4084      	lsls	r4, r0
 8002980:	0b12      	lsrs	r2, r2, #12
 8002982:	e001      	b.n	8002988 <__aeabi_ui2d+0x2c>
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	051b      	lsls	r3, r3, #20
 800298a:	4313      	orrs	r3, r2
 800298c:	0020      	movs	r0, r4
 800298e:	0019      	movs	r1, r3
 8002990:	bd10      	pop	{r4, pc}
 8002992:	0022      	movs	r2, r4
 8002994:	380b      	subs	r0, #11
 8002996:	4082      	lsls	r2, r0
 8002998:	0312      	lsls	r2, r2, #12
 800299a:	2400      	movs	r4, #0
 800299c:	0b12      	lsrs	r2, r2, #12
 800299e:	e7f3      	b.n	8002988 <__aeabi_ui2d+0x2c>
 80029a0:	0000041e 	.word	0x0000041e

080029a4 <__aeabi_f2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0242      	lsls	r2, r0, #9
 80029a8:	0043      	lsls	r3, r0, #1
 80029aa:	0fc4      	lsrs	r4, r0, #31
 80029ac:	20fe      	movs	r0, #254	@ 0xfe
 80029ae:	0e1b      	lsrs	r3, r3, #24
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	0a55      	lsrs	r5, r2, #9
 80029b4:	4208      	tst	r0, r1
 80029b6:	d00c      	beq.n	80029d2 <__aeabi_f2d+0x2e>
 80029b8:	21e0      	movs	r1, #224	@ 0xe0
 80029ba:	0089      	lsls	r1, r1, #2
 80029bc:	468c      	mov	ip, r1
 80029be:	076d      	lsls	r5, r5, #29
 80029c0:	0b12      	lsrs	r2, r2, #12
 80029c2:	4463      	add	r3, ip
 80029c4:	051b      	lsls	r3, r3, #20
 80029c6:	4313      	orrs	r3, r2
 80029c8:	07e4      	lsls	r4, r4, #31
 80029ca:	4323      	orrs	r3, r4
 80029cc:	0028      	movs	r0, r5
 80029ce:	0019      	movs	r1, r3
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <__aeabi_f2d+0x5c>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d01b      	beq.n	8002a12 <__aeabi_f2d+0x6e>
 80029da:	0028      	movs	r0, r5
 80029dc:	f000 f8ac 	bl	8002b38 <__clzsi2>
 80029e0:	280a      	cmp	r0, #10
 80029e2:	dc1c      	bgt.n	8002a1e <__aeabi_f2d+0x7a>
 80029e4:	230b      	movs	r3, #11
 80029e6:	002a      	movs	r2, r5
 80029e8:	1a1b      	subs	r3, r3, r0
 80029ea:	40da      	lsrs	r2, r3
 80029ec:	0003      	movs	r3, r0
 80029ee:	3315      	adds	r3, #21
 80029f0:	409d      	lsls	r5, r3
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <__aeabi_f2d+0x88>)
 80029f4:	0312      	lsls	r2, r2, #12
 80029f6:	1a1b      	subs	r3, r3, r0
 80029f8:	055b      	lsls	r3, r3, #21
 80029fa:	0b12      	lsrs	r2, r2, #12
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	e7e1      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	d009      	beq.n	8002a18 <__aeabi_f2d+0x74>
 8002a04:	0b13      	lsrs	r3, r2, #12
 8002a06:	2280      	movs	r2, #128	@ 0x80
 8002a08:	0312      	lsls	r2, r2, #12
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	076d      	lsls	r5, r5, #29
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <__aeabi_f2d+0x8c>)
 8002a10:	e7d8      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2200      	movs	r2, #0
 8002a16:	e7d5      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <__aeabi_f2d+0x8c>)
 8002a1c:	e7d2      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	002a      	movs	r2, r5
 8002a22:	3b0b      	subs	r3, #11
 8002a24:	409a      	lsls	r2, r3
 8002a26:	2500      	movs	r5, #0
 8002a28:	e7e3      	b.n	80029f2 <__aeabi_f2d+0x4e>
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	00000389 	.word	0x00000389
 8002a30:	000007ff 	.word	0x000007ff

08002a34 <__aeabi_d2f>:
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	004b      	lsls	r3, r1, #1
 8002a38:	030f      	lsls	r7, r1, #12
 8002a3a:	0d5b      	lsrs	r3, r3, #21
 8002a3c:	4c3a      	ldr	r4, [pc, #232]	@ (8002b28 <__aeabi_d2f+0xf4>)
 8002a3e:	0f45      	lsrs	r5, r0, #29
 8002a40:	b083      	sub	sp, #12
 8002a42:	0a7f      	lsrs	r7, r7, #9
 8002a44:	1c5e      	adds	r6, r3, #1
 8002a46:	432f      	orrs	r7, r5
 8002a48:	9000      	str	r0, [sp, #0]
 8002a4a:	9101      	str	r1, [sp, #4]
 8002a4c:	0fca      	lsrs	r2, r1, #31
 8002a4e:	00c5      	lsls	r5, r0, #3
 8002a50:	4226      	tst	r6, r4
 8002a52:	d00b      	beq.n	8002a6c <__aeabi_d2f+0x38>
 8002a54:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <__aeabi_d2f+0xf8>)
 8002a56:	185c      	adds	r4, r3, r1
 8002a58:	2cfe      	cmp	r4, #254	@ 0xfe
 8002a5a:	dd13      	ble.n	8002a84 <__aeabi_d2f+0x50>
 8002a5c:	20ff      	movs	r0, #255	@ 0xff
 8002a5e:	2300      	movs	r3, #0
 8002a60:	05c0      	lsls	r0, r0, #23
 8002a62:	4318      	orrs	r0, r3
 8002a64:	07d2      	lsls	r2, r2, #31
 8002a66:	4310      	orrs	r0, r2
 8002a68:	b003      	add	sp, #12
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6c:	433d      	orrs	r5, r7
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <__aeabi_d2f+0x42>
 8002a72:	2000      	movs	r0, #0
 8002a74:	e7f4      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	d0f0      	beq.n	8002a5c <__aeabi_d2f+0x28>
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	03db      	lsls	r3, r3, #15
 8002a7e:	20ff      	movs	r0, #255	@ 0xff
 8002a80:	433b      	orrs	r3, r7
 8002a82:	e7ed      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	dd0c      	ble.n	8002aa2 <__aeabi_d2f+0x6e>
 8002a88:	9b00      	ldr	r3, [sp, #0]
 8002a8a:	00ff      	lsls	r7, r7, #3
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	4183      	sbcs	r3, r0
 8002a92:	0f69      	lsrs	r1, r5, #29
 8002a94:	433b      	orrs	r3, r7
 8002a96:	430b      	orrs	r3, r1
 8002a98:	0759      	lsls	r1, r3, #29
 8002a9a:	d127      	bne.n	8002aec <__aeabi_d2f+0xb8>
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	b2e0      	uxtb	r0, r4
 8002aa0:	e7de      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	3117      	adds	r1, #23
 8002aa6:	db31      	blt.n	8002b0c <__aeabi_d2f+0xd8>
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	201e      	movs	r0, #30
 8002aac:	0409      	lsls	r1, r1, #16
 8002aae:	4339      	orrs	r1, r7
 8002ab0:	1b00      	subs	r0, r0, r4
 8002ab2:	281f      	cmp	r0, #31
 8002ab4:	dd2d      	ble.n	8002b12 <__aeabi_d2f+0xde>
 8002ab6:	2602      	movs	r6, #2
 8002ab8:	4276      	negs	r6, r6
 8002aba:	1b34      	subs	r4, r6, r4
 8002abc:	000e      	movs	r6, r1
 8002abe:	40e6      	lsrs	r6, r4
 8002ac0:	0034      	movs	r4, r6
 8002ac2:	2820      	cmp	r0, #32
 8002ac4:	d004      	beq.n	8002ad0 <__aeabi_d2f+0x9c>
 8002ac6:	481a      	ldr	r0, [pc, #104]	@ (8002b30 <__aeabi_d2f+0xfc>)
 8002ac8:	4684      	mov	ip, r0
 8002aca:	4463      	add	r3, ip
 8002acc:	4099      	lsls	r1, r3
 8002ace:	430d      	orrs	r5, r1
 8002ad0:	002b      	movs	r3, r5
 8002ad2:	1e59      	subs	r1, r3, #1
 8002ad4:	418b      	sbcs	r3, r1
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	0759      	lsls	r1, r3, #29
 8002ada:	d003      	beq.n	8002ae4 <__aeabi_d2f+0xb0>
 8002adc:	210f      	movs	r1, #15
 8002ade:	4019      	ands	r1, r3
 8002ae0:	2904      	cmp	r1, #4
 8002ae2:	d10b      	bne.n	8002afc <__aeabi_d2f+0xc8>
 8002ae4:	019b      	lsls	r3, r3, #6
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	0a5b      	lsrs	r3, r3, #9
 8002aea:	e7b9      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002aec:	210f      	movs	r1, #15
 8002aee:	4019      	ands	r1, r3
 8002af0:	2904      	cmp	r1, #4
 8002af2:	d104      	bne.n	8002afe <__aeabi_d2f+0xca>
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	0a5b      	lsrs	r3, r3, #9
 8002af8:	b2e0      	uxtb	r0, r4
 8002afa:	e7b1      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002afc:	2400      	movs	r4, #0
 8002afe:	3304      	adds	r3, #4
 8002b00:	0159      	lsls	r1, r3, #5
 8002b02:	d5f7      	bpl.n	8002af4 <__aeabi_d2f+0xc0>
 8002b04:	3401      	adds	r4, #1
 8002b06:	2300      	movs	r3, #0
 8002b08:	b2e0      	uxtb	r0, r4
 8002b0a:	e7a9      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e7a6      	b.n	8002a60 <__aeabi_d2f+0x2c>
 8002b12:	4c08      	ldr	r4, [pc, #32]	@ (8002b34 <__aeabi_d2f+0x100>)
 8002b14:	191c      	adds	r4, r3, r4
 8002b16:	002b      	movs	r3, r5
 8002b18:	40a5      	lsls	r5, r4
 8002b1a:	40c3      	lsrs	r3, r0
 8002b1c:	40a1      	lsls	r1, r4
 8002b1e:	1e68      	subs	r0, r5, #1
 8002b20:	4185      	sbcs	r5, r0
 8002b22:	4329      	orrs	r1, r5
 8002b24:	430b      	orrs	r3, r1
 8002b26:	e7d7      	b.n	8002ad8 <__aeabi_d2f+0xa4>
 8002b28:	000007fe 	.word	0x000007fe
 8002b2c:	fffffc80 	.word	0xfffffc80
 8002b30:	fffffca2 	.word	0xfffffca2
 8002b34:	fffffc82 	.word	0xfffffc82

08002b38 <__clzsi2>:
 8002b38:	211c      	movs	r1, #28
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	4298      	cmp	r0, r3
 8002b40:	d301      	bcc.n	8002b46 <__clzsi2+0xe>
 8002b42:	0c00      	lsrs	r0, r0, #16
 8002b44:	3910      	subs	r1, #16
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	4298      	cmp	r0, r3
 8002b4a:	d301      	bcc.n	8002b50 <__clzsi2+0x18>
 8002b4c:	0a00      	lsrs	r0, r0, #8
 8002b4e:	3908      	subs	r1, #8
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	4298      	cmp	r0, r3
 8002b54:	d301      	bcc.n	8002b5a <__clzsi2+0x22>
 8002b56:	0900      	lsrs	r0, r0, #4
 8002b58:	3904      	subs	r1, #4
 8002b5a:	a202      	add	r2, pc, #8	@ (adr r2, 8002b64 <__clzsi2+0x2c>)
 8002b5c:	5c10      	ldrb	r0, [r2, r0]
 8002b5e:	1840      	adds	r0, r0, r1
 8002b60:	4770      	bx	lr
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	02020304 	.word	0x02020304
 8002b68:	01010101 	.word	0x01010101
	...

08002b74 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 8002b7c:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	23fa      	movs	r3, #250	@ 0xfa
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d34f      	bcc.n	8002c28 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002b88:	230f      	movs	r3, #15
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e041      	b.n	8002c16 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 8002b92:	250f      	movs	r5, #15
 8002b94:	197b      	adds	r3, r7, r5
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	58d2      	ldr	r2, [r2, r3]
 8002b9e:	197b      	adds	r3, r7, r5
 8002ba0:	781c      	ldrb	r4, [r3, #0]
 8002ba2:	23fa      	movs	r3, #250	@ 0xfa
 8002ba4:	0059      	lsls	r1, r3, #1
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	f7fd fac6 	bl	8000138 <__udivsi3>
 8002bac:	0003      	movs	r3, r0
 8002bae:	0019      	movs	r1, r3
 8002bb0:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002bb2:	00a2      	lsls	r2, r4, #2
 8002bb4:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 8002bb6:	197b      	adds	r3, r7, r5
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b32      	ldr	r3, [pc, #200]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	58d3      	ldr	r3, [r2, r3]
 8002bc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bc2:	d805      	bhi.n	8002bd0 <HAL_ADC_ConvCpltCallback+0x5c>
 8002bc4:	197b      	adds	r3, r7, r5
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	2100      	movs	r1, #0
 8002bce:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8002bd0:	250f      	movs	r5, #15
 8002bd2:	197b      	adds	r3, r7, r5
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	58d3      	ldr	r3, [r2, r3]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fd fefb 	bl	80009d8 <__aeabi_ui2f>
 8002be2:	197b      	adds	r3, r7, r5
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <HAL_ADC_ConvCpltCallback+0x114>)
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	58d2      	ldr	r2, [r2, r3]
 8002bec:	197b      	adds	r3, r7, r5
 8002bee:	781c      	ldrb	r4, [r3, #0]
 8002bf0:	1c11      	adds	r1, r2, #0
 8002bf2:	f7fd fd47 	bl	8000684 <__aeabi_fmul>
 8002bf6:	1c03      	adds	r3, r0, #0
 8002bf8:	1c19      	adds	r1, r3, #0
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_ADC_ConvCpltCallback+0x118>)
 8002bfc:	00a2      	lsls	r2, r4, #2
 8002bfe:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8002c00:	197b      	adds	r3, r7, r5
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	2100      	movs	r1, #0
 8002c0a:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002c0c:	197b      	adds	r3, r7, r5
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	197b      	adds	r3, r7, r5
 8002c12:	3201      	adds	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	230f      	movs	r3, #15
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d9b8      	bls.n	8002b92 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8002c26:	e026      	b.n	8002c76 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002c28:	230e      	movs	r3, #14
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e016      	b.n	8002c60 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8002c32:	200e      	movs	r0, #14
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	58d3      	ldr	r3, [r2, r3]
 8002c3e:	183a      	adds	r2, r7, r0
 8002c40:	7811      	ldrb	r1, [r2, #0]
 8002c42:	4a13      	ldr	r2, [pc, #76]	@ (8002c90 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	5a8a      	ldrh	r2, [r1, r2]
 8002c48:	0011      	movs	r1, r2
 8002c4a:	183a      	adds	r2, r7, r0
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	1859      	adds	r1, r3, r1
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <HAL_ADC_ConvCpltCallback+0x110>)
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	183b      	adds	r3, r7, r0
 8002c5c:	3201      	adds	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	230e      	movs	r3, #14
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d9e3      	bls.n	8002c32 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002c74:	801a      	strh	r2, [r3, #0]
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	20000578 	.word	0x20000578
 8002c84:	2000057c 	.word	0x2000057c
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	200004c8 	.word	0x200004c8
 8002c90:	200004d4 	.word	0x200004d4

08002c94 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 8002ca0:	1dbb      	adds	r3, r7, #6
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d112      	bne.n	8002cce <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2101      	movs	r1, #1
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fcd7 	bl	800566e <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	019b      	lsls	r3, r3, #6
 8002cc4:	480a      	ldr	r0, [pc, #40]	@ (8002cf0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	0019      	movs	r1, r3
 8002cca:	f002 fcd0 	bl	800566e <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8002cce:	1dbb      	adds	r3, r7, #6
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	2b40      	cmp	r3, #64	@ 0x40
 8002cd4:	d102      	bne.n	8002cdc <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200004dc 	.word	0x200004dc
 8002ce8:	200004db 	.word	0x200004db
 8002cec:	50001400 	.word	0x50001400
 8002cf0:	50000800 	.word	0x50000800
 8002cf4:	200004e6 	.word	0x200004e6

08002cf8 <gsm_is_valid_resp>:
	strcpy(gsm_match_resp, op_check);
	gsm_status = GSM_WAIT;
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
}

uint8_t gsm_is_valid_resp() {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <gsm_is_valid_resp+0x20>)
 8002cfe:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <gsm_is_valid_resp+0x24>)
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f005 ffd8 	bl	8008cb8 <strstr>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	1e5a      	subs	r2, r3, #1
 8002d0c:	4193      	sbcs	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	20000564 	.word	0x20000564
 8002d1c:	20000500 	.word	0x20000500

08002d20 <HAL_TIM_PeriodElapsedCallback>:
		gsm_rx_flag = 1;
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a8a      	ldr	r2, [pc, #552]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d000      	beq.n	8002d34 <HAL_TIM_PeriodElapsedCallback+0x14>
 8002d32:	e10c      	b.n	8002f4e <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8002d34:	4b89      	ldr	r3, [pc, #548]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a89      	ldr	r2, [pc, #548]	@ (8002f60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d924      	bls.n	8002d88 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(sec > 60) {
 8002d3e:	4b89      	ldr	r3, [pc, #548]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b3c      	cmp	r3, #60	@ 0x3c
 8002d44:	d916      	bls.n	8002d74 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8002d46:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002d4c:	d909      	bls.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8002d4e:	4b86      	ldr	r3, [pc, #536]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
					hr++;
 8002d54:	4b85      	ldr	r3, [pc, #532]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b83      	ldr	r3, [pc, #524]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002d5e:	801a      	strh	r2, [r3, #0]
 8002d60:	e004      	b.n	8002d6c <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 8002d62:	4b81      	ldr	r3, [pc, #516]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4b7f      	ldr	r3, [pc, #508]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002d6a:	601a      	str	r2, [r3, #0]
				sec = 0;
 8002d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e005      	b.n	8002d80 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8002d74:	4b7b      	ldr	r3, [pc, #492]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b79      	ldr	r3, [pc, #484]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002d7e:	701a      	strb	r2, [r3, #0]
			ms = 0;
 8002d80:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e004      	b.n	8002d92 <HAL_TIM_PeriodElapsedCallback+0x72>
			/*###*/
		} else ms++;
 8002d88:	4b74      	ldr	r3, [pc, #464]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4b73      	ldr	r3, [pc, #460]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002d90:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 8002d92:	4b72      	ldr	r3, [pc, #456]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4976      	ldr	r1, [pc, #472]	@ (8002f70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd fa53 	bl	8000244 <__aeabi_uidivmod>
 8002d9e:	1e0b      	subs	r3, r1, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_TIM_PeriodElapsedCallback+0x88>
			sensor_refresh_flag = 1;
 8002da2:	4b74      	ldr	r3, [pc, #464]	@ (8002f74 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
		vi_update_flag = 1;
 8002da8:	4b73      	ldr	r3, [pc, #460]	@ (8002f78 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8002dae:	4b73      	ldr	r3, [pc, #460]	@ (8002f7c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002db6:	4b72      	ldr	r3, [pc, #456]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002dc4:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002f84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8002dce:	4b6e      	ldr	r3, [pc, #440]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	e000      	b.n	8002dda <HAL_TIM_PeriodElapsedCallback+0xba>
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4b6b      	ldr	r3, [pc, #428]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002ddc:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8002dde:	4b6b      	ldr	r3, [pc, #428]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8002de6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f90 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	e000      	b.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8002df0:	2200      	movs	r2, #0
 8002df2:	4b67      	ldr	r3, [pc, #412]	@ (8002f90 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002df4:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 8002df6:	4b67      	ldr	r3, [pc, #412]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002dfe:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	e000      	b.n	8002e0a <HAL_TIM_PeriodElapsedCallback+0xea>
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002e0c:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8002e0e:	4b62      	ldr	r3, [pc, #392]	@ (8002f98 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	23fa      	movs	r3, #250	@ 0xfa
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d908      	bls.n	8002e2c <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 8002e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8002e20:	4b5e      	ldr	r3, [pc, #376]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	2102      	movs	r1, #2
 8002e26:	0018      	movs	r0, r3
 8002e28:	f002 fc21 	bl	800566e <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d14f      	bne.n	8002ed4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8002e34:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_TIM_PeriodElapsedCallback+0x13e>
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	1c18      	adds	r0, r3, #0
 8002e42:	f7ff fdaf 	bl	80029a4 <__aeabi_f2d>
 8002e46:	4a59      	ldr	r2, [pc, #356]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002e48:	4b59      	ldr	r3, [pc, #356]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002e4a:	f7fd fe0b 	bl	8000a64 <__aeabi_dadd>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	000b      	movs	r3, r1
 8002e52:	0010      	movs	r0, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	f7ff fded 	bl	8002a34 <__aeabi_d2f>
 8002e5a:	1c02      	adds	r2, r0, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_TIM_PeriodElapsedCallback+0x140>
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4b51      	ldr	r3, [pc, #324]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e62:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 8002e64:	4b50      	ldr	r3, [pc, #320]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b52      	ldr	r3, [pc, #328]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1c19      	adds	r1, r3, #0
 8002e6e:	1c10      	adds	r0, r2, #0
 8002e70:	f7fd fb46 	bl	8000500 <__aeabi_fcmpge>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d03d      	beq.n	8002ef4 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 8002e78:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 8002e7e:	4b47      	ldr	r3, [pc, #284]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	2101      	movs	r1, #1
 8002e84:	0018      	movs	r0, r3
 8002e86:	f002 fbf2 	bl	800566e <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	484a      	ldr	r0, [pc, #296]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	0019      	movs	r1, r3
 8002e94:	f002 fbeb 	bl	800566e <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 80; i++);
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_PeriodElapsedCallback+0x18e>
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	3201      	adds	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	230f      	movs	r3, #15
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b4f      	cmp	r3, #79	@ 0x4f
 8002eb6:	d9f4      	bls.n	8002ea2 <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 8002eb8:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f002 fbd5 	bl	800566e <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	483b      	ldr	r0, [pc, #236]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	0019      	movs	r1, r3
 8002ece:	f002 fbce 	bl	800566e <HAL_GPIO_WritePin>
 8002ed2:	e00f      	b.n	8002ef4 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8002ed4:	4b31      	ldr	r3, [pc, #196]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	0018      	movs	r0, r3
 8002edc:	f002 fbc7 	bl	800566e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	4834      	ldr	r0, [pc, #208]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	0019      	movs	r1, r3
 8002eea:	f002 fbc0 	bl	800566e <HAL_GPIO_WritePin>
			triac_time = 0;
 8002eee:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8002efe:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	e000      	b.n	8002f0c <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f0e:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8002f10:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d916      	bls.n	8002f4e <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8002f20:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 8002f26:	f7ff fee7 	bl	8002cf8 <gsm_is_valid_resp>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8002f2e:	4b26      	ldr	r3, [pc, #152]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e002      	b.n	8002f3c <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 8002f36:	4b24      	ldr	r3, [pc, #144]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f38:	2263      	movs	r2, #99	@ 0x63
 8002f3a:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8002f42:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 8002f48:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
		}


	}
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	200004b8 	.word	0x200004b8
 8002f60:	00002710 	.word	0x00002710
 8002f64:	200004bc 	.word	0x200004bc
 8002f68:	200004c0 	.word	0x200004c0
 8002f6c:	200004c4 	.word	0x200004c4
 8002f70:	00001388 	.word	0x00001388
 8002f74:	200004b5 	.word	0x200004b5
 8002f78:	200004e7 	.word	0x200004e7
 8002f7c:	200004a8 	.word	0x200004a8
 8002f80:	200004ac 	.word	0x200004ac
 8002f84:	200004a9 	.word	0x200004a9
 8002f88:	200004ae 	.word	0x200004ae
 8002f8c:	200004aa 	.word	0x200004aa
 8002f90:	200004b0 	.word	0x200004b0
 8002f94:	200004b4 	.word	0x200004b4
 8002f98:	200004b2 	.word	0x200004b2
 8002f9c:	50001400 	.word	0x50001400
 8002fa0:	200004e4 	.word	0x200004e4
 8002fa4:	200004db 	.word	0x200004db
 8002fa8:	200004dc 	.word	0x200004dc
 8002fac:	9999999a 	.word	0x9999999a
 8002fb0:	3fb99999 	.word	0x3fb99999
 8002fb4:	200004e0 	.word	0x200004e0
 8002fb8:	50000800 	.word	0x50000800
 8002fbc:	200004fd 	.word	0x200004fd
 8002fc0:	200004f8 	.word	0x200004f8
 8002fc4:	200004fa 	.word	0x200004fa
 8002fc8:	200004f6 	.word	0x200004f6
 8002fcc:	200004f4 	.word	0x200004f4
 8002fd0:	200004f5 	.word	0x200004f5

08002fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	b0be      	sub	sp, #248	@ 0xf8
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fda:	f001 f87d 	bl	80040d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fde:	f000 f979 	bl	80032d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe2:	f000 fb9b 	bl	800371c <MX_GPIO_Init>
  MX_DMA_Init();
 8002fe6:	f000 fb7b 	bl	80036e0 <MX_DMA_Init>
  MX_I2C2_Init();
 8002fea:	f000 fa9f 	bl	800352c <MX_I2C2_Init>
  MX_TIM16_Init();
 8002fee:	f000 fb1d 	bl	800362c <MX_TIM16_Init>
  MX_I2C1_Init();
 8002ff2:	f000 fa5b 	bl	80034ac <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002ff6:	f000 fb3f 	bl	8003678 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002ffa:	f000 f9c5 	bl	8003388 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002ffe:	f000 fad5 	bl	80035ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 8003002:	4ba5      	ldr	r3, [pc, #660]	@ (8003298 <main+0x2c4>)
 8003004:	2200      	movs	r2, #0
 8003006:	2101      	movs	r1, #1
 8003008:	0018      	movs	r0, r3
 800300a:	f002 fb30 	bl	800566e <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	48a2      	ldr	r0, [pc, #648]	@ (800329c <main+0x2c8>)
 8003014:	2200      	movs	r2, #0
 8003016:	0019      	movs	r1, r3
 8003018:	f002 fb29 	bl	800566e <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 800301c:	23ec      	movs	r3, #236	@ 0xec
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 8003024:	23f7      	movs	r3, #247	@ 0xf7
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 800302c:	23f4      	movs	r3, #244	@ 0xf4
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2200      	movs	r2, #0
 8003032:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 8003034:	4b9a      	ldr	r3, [pc, #616]	@ (80032a0 <main+0x2cc>)
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 800303c:	4b98      	ldr	r3, [pc, #608]	@ (80032a0 <main+0x2cc>)
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	0152      	lsls	r2, r2, #5
 8003042:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8003044:	4b96      	ldr	r3, [pc, #600]	@ (80032a0 <main+0x2cc>)
 8003046:	2280      	movs	r2, #128	@ 0x80
 8003048:	0192      	lsls	r2, r2, #6
 800304a:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 800304c:	4b94      	ldr	r3, [pc, #592]	@ (80032a0 <main+0x2cc>)
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	01d2      	lsls	r2, r2, #7
 8003052:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8003054:	4b92      	ldr	r3, [pc, #584]	@ (80032a0 <main+0x2cc>)
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	0212      	lsls	r2, r2, #8
 800305a:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 800305c:	23a0      	movs	r3, #160	@ 0xa0
 800305e:	05db      	lsls	r3, r3, #23
 8003060:	2280      	movs	r2, #128	@ 0x80
 8003062:	0052      	lsls	r2, r2, #1
 8003064:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003066:	4b8e      	ldr	r3, [pc, #568]	@ (80032a0 <main+0x2cc>)
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 800306e:	4b8d      	ldr	r3, [pc, #564]	@ (80032a4 <main+0x2d0>)
 8003070:	2200      	movs	r2, #0
 8003072:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8003074:	4b8b      	ldr	r3, [pc, #556]	@ (80032a4 <main+0x2d0>)
 8003076:	2200      	movs	r2, #0
 8003078:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 800307a:	4b8a      	ldr	r3, [pc, #552]	@ (80032a4 <main+0x2d0>)
 800307c:	2200      	movs	r2, #0
 800307e:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 8003080:	2324      	movs	r3, #36	@ 0x24
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	0018      	movs	r0, r3
 8003086:	23c8      	movs	r3, #200	@ 0xc8
 8003088:	001a      	movs	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f005 fe0c 	bl	8008ca8 <memset>
	char api_key[20] = "07AFUS2QQTX0QLDF"; /* key for production */
 8003090:	2310      	movs	r3, #16
 8003092:	18f9      	adds	r1, r7, r3
 8003094:	4a84      	ldr	r2, [pc, #528]	@ (80032a8 <main+0x2d4>)
 8003096:	000b      	movs	r3, r1
 8003098:	ca31      	ldmia	r2!, {r0, r4, r5}
 800309a:	c331      	stmia	r3!, {r0, r4, r5}
 800309c:	6810      	ldr	r0, [r2, #0]
 800309e:	6018      	str	r0, [r3, #0]
 80030a0:	7912      	ldrb	r2, [r2, #4]
 80030a2:	711a      	strb	r2, [r3, #4]
 80030a4:	2311      	movs	r3, #17
 80030a6:	18cb      	adds	r3, r1, r3
 80030a8:	2203      	movs	r2, #3
 80030aa:	2100      	movs	r1, #0
 80030ac:	0018      	movs	r0, r3
 80030ae:	f005 fdfb 	bl	8008ca8 <memset>
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
//	HAL_Delay(700);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
//	HAL_Delay(15000);
//
	uint8_t prev_idx = 1;
 80030b2:	23f3      	movs	r3, #243	@ 0xf3
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 80030ba:	23f2      	movs	r3, #242	@ 0xf2
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 80030c2:	23f0      	movs	r3, #240	@ 0xf0
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	22c8      	movs	r2, #200	@ 0xc8
 80030c8:	0052      	lsls	r2, r2, #1
 80030ca:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 80030cc:	4b77      	ldr	r3, [pc, #476]	@ (80032ac <main+0x2d8>)
 80030ce:	0018      	movs	r0, r3
 80030d0:	f004 fa32 	bl	8007538 <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 80030d4:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <main+0x2dc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 80030da:	4b76      	ldr	r3, [pc, #472]	@ (80032b4 <main+0x2e0>)
 80030dc:	22ff      	movs	r2, #255	@ 0xff
 80030de:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 80030e0:	003b      	movs	r3, r7
 80030e2:	0018      	movs	r0, r3
 80030e4:	2307      	movs	r3, #7
 80030e6:	001a      	movs	r2, r3
 80030e8:	2100      	movs	r1, #0
 80030ea:	f005 fddd 	bl	8008ca8 <memset>
	ti.day = 14;
 80030ee:	2108      	movs	r1, #8
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	220e      	movs	r2, #14
 80030f4:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	220b      	movs	r2, #11
 80030fa:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2218      	movs	r2, #24
 8003100:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2202      	movs	r2, #2
 8003106:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2215      	movs	r2, #21
 800310c:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 800310e:	187b      	adds	r3, r7, r1
 8003110:	220e      	movs	r2, #14
 8003112:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2200      	movs	r2, #0
 8003118:	719a      	strb	r2, [r3, #6]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 800311a:	21ec      	movs	r1, #236	@ 0xec
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8003128:	23ee      	movs	r3, #238	@ 0xee
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8003130:	23f4      	movs	r3, #244	@ 0xf4
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8003138:	4b5f      	ldr	r3, [pc, #380]	@ (80032b8 <main+0x2e4>)
 800313a:	681c      	ldr	r4, [r3, #0]
 800313c:	25f0      	movs	r5, #240	@ 0xf0
 800313e:	197b      	adds	r3, r7, r5
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	f7fd fbf8 	bl	8000938 <__aeabi_i2f>
 8003148:	1c03      	adds	r3, r0, #0
 800314a:	1c19      	adds	r1, r3, #0
 800314c:	1c20      	adds	r0, r4, #0
 800314e:	f7fd f9d7 	bl	8000500 <__aeabi_fcmpge>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d10d      	bne.n	8003172 <main+0x19e>
 8003156:	4b58      	ldr	r3, [pc, #352]	@ (80032b8 <main+0x2e4>)
 8003158:	685c      	ldr	r4, [r3, #4]
 800315a:	197b      	adds	r3, r7, r5
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f7fd fbea 	bl	8000938 <__aeabi_i2f>
 8003164:	1c03      	adds	r3, r0, #0
 8003166:	1c19      	adds	r1, r3, #0
 8003168:	1c20      	adds	r0, r4, #0
 800316a:	f7fd f9c9 	bl	8000500 <__aeabi_fcmpge>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d010      	beq.n	8003194 <main+0x1c0>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8003172:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <main+0x2c4>)
 8003174:	2200      	movs	r2, #0
 8003176:	2101      	movs	r1, #1
 8003178:	0018      	movs	r0, r3
 800317a:	f002 fa78 	bl	800566e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	4846      	ldr	r0, [pc, #280]	@ (800329c <main+0x2c8>)
 8003184:	2200      	movs	r2, #0
 8003186:	0019      	movs	r1, r3
 8003188:	f002 fa71 	bl	800566e <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 800318c:	4b4b      	ldr	r3, [pc, #300]	@ (80032bc <main+0x2e8>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e002      	b.n	800319a <main+0x1c6>
		}
		else {
			triac_temp_ctrl = 1;
 8003194:	4b49      	ldr	r3, [pc, #292]	@ (80032bc <main+0x2e8>)
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 800319a:	4b48      	ldr	r3, [pc, #288]	@ (80032bc <main+0x2e8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d165      	bne.n	800326e <main+0x29a>
			if(BTN1_READ() == 0) {
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4a3e      	ldr	r2, [pc, #248]	@ (80032a0 <main+0x2cc>)
 80031a8:	0019      	movs	r1, r3
 80031aa:	0010      	movs	r0, r2
 80031ac:	f002 fa42 	bl	8005634 <HAL_GPIO_ReadPin>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d112      	bne.n	80031da <main+0x206>
				if(BTN1_READ() == 0) {
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4a39      	ldr	r2, [pc, #228]	@ (80032a0 <main+0x2cc>)
 80031ba:	0019      	movs	r1, r3
 80031bc:	0010      	movs	r0, r2
 80031be:	f002 fa39 	bl	8005634 <HAL_GPIO_ReadPin>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d1a9      	bne.n	800311a <main+0x146>
					mode = 1;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	@ (80032c0 <main+0x2ec>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
					triac_time = 6.5; /* 130V */
 80031cc:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <main+0x2f0>)
 80031ce:	4a3e      	ldr	r2, [pc, #248]	@ (80032c8 <main+0x2f4>)
 80031d0:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 80031d2:	4b3e      	ldr	r3, [pc, #248]	@ (80032cc <main+0x2f8>)
 80031d4:	2202      	movs	r2, #2
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e79f      	b.n	800311a <main+0x146>
				}
			}
			else if(BTN2_READ() == 0) {
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <main+0x2cc>)
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f002 fa26 	bl	8005634 <HAL_GPIO_ReadPin>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d112      	bne.n	8003212 <main+0x23e>
				if(BTN2_READ() == 0) {
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4a2b      	ldr	r2, [pc, #172]	@ (80032a0 <main+0x2cc>)
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f002 fa1d 	bl	8005634 <HAL_GPIO_ReadPin>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d18d      	bne.n	800311a <main+0x146>
					mode = 2;
 80031fe:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <main+0x2ec>)
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
					triac_time = 5.5; /* 170V */
 8003204:	4b2f      	ldr	r3, [pc, #188]	@ (80032c4 <main+0x2f0>)
 8003206:	4a32      	ldr	r2, [pc, #200]	@ (80032d0 <main+0x2fc>)
 8003208:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800320a:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <main+0x2f8>)
 800320c:	2202      	movs	r2, #2
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e783      	b.n	800311a <main+0x146>
				}
			}
			else if(BTN3_READ() == 0) {
 8003212:	4b23      	ldr	r3, [pc, #140]	@ (80032a0 <main+0x2cc>)
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	0018      	movs	r0, r3
 8003218:	f002 fa0c 	bl	8005634 <HAL_GPIO_ReadPin>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d112      	bne.n	8003246 <main+0x272>
				if(BTN3_READ() == 0) {
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <main+0x2cc>)
 8003222:	2180      	movs	r1, #128	@ 0x80
 8003224:	0018      	movs	r0, r3
 8003226:	f002 fa05 	bl	8005634 <HAL_GPIO_ReadPin>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d000      	beq.n	8003230 <main+0x25c>
 800322e:	e774      	b.n	800311a <main+0x146>
					mode = 3;
 8003230:	4b23      	ldr	r3, [pc, #140]	@ (80032c0 <main+0x2ec>)
 8003232:	2203      	movs	r2, #3
 8003234:	701a      	strb	r2, [r3, #0]
					triac_time = 4; /* 205V */
 8003236:	4b23      	ldr	r3, [pc, #140]	@ (80032c4 <main+0x2f0>)
 8003238:	2281      	movs	r2, #129	@ 0x81
 800323a:	05d2      	lsls	r2, r2, #23
 800323c:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800323e:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <main+0x2f8>)
 8003240:	2202      	movs	r2, #2
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e769      	b.n	800311a <main+0x146>
				}
			}
			else {
				mode = 0;
 8003246:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <main+0x2ec>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <main+0x2f8>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <main+0x2c4>)
 8003254:	2200      	movs	r2, #0
 8003256:	2101      	movs	r1, #1
 8003258:	0018      	movs	r0, r3
 800325a:	f002 fa08 	bl	800566e <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	480e      	ldr	r0, [pc, #56]	@ (800329c <main+0x2c8>)
 8003264:	2200      	movs	r2, #0
 8003266:	0019      	movs	r1, r3
 8003268:	f002 fa01 	bl	800566e <HAL_GPIO_WritePin>
 800326c:	e755      	b.n	800311a <main+0x146>
			}
		}
		else {
			mode = 0;
 800326e:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <main+0x2ec>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003274:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <main+0x2f8>)
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 800327a:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <main+0x2c4>)
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	0018      	movs	r0, r3
 8003282:	f002 f9f4 	bl	800566e <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	4804      	ldr	r0, [pc, #16]	@ (800329c <main+0x2c8>)
 800328c:	2200      	movs	r2, #0
 800328e:	0019      	movs	r1, r3
 8003290:	f002 f9ed 	bl	800566e <HAL_GPIO_WritePin>
		sdo[0] = 0;
 8003294:	e741      	b.n	800311a <main+0x146>
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	50001400 	.word	0x50001400
 800329c:	50000800 	.word	0x50000800
 80032a0:	50000400 	.word	0x50000400
 80032a4:	200004d4 	.word	0x200004d4
 80032a8:	0800ac64 	.word	0x0800ac64
 80032ac:	200003c8 	.word	0x200003c8
 80032b0:	200004db 	.word	0x200004db
 80032b4:	200004fc 	.word	0x200004fc
 80032b8:	200004e8 	.word	0x200004e8
 80032bc:	200004da 	.word	0x200004da
 80032c0:	200004e5 	.word	0x200004e5
 80032c4:	200004e0 	.word	0x200004e0
 80032c8:	40d00000 	.word	0x40d00000
 80032cc:	200004e4 	.word	0x200004e4
 80032d0:	40b00000 	.word	0x40b00000

080032d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b093      	sub	sp, #76	@ 0x4c
 80032d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032da:	2414      	movs	r4, #20
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	0018      	movs	r0, r3
 80032e0:	2334      	movs	r3, #52	@ 0x34
 80032e2:	001a      	movs	r2, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	f005 fcdf 	bl	8008ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	0018      	movs	r0, r3
 80032ee:	2310      	movs	r3, #16
 80032f0:	001a      	movs	r2, r3
 80032f2:	2100      	movs	r1, #0
 80032f4:	f005 fcd8 	bl	8008ca8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f003 f9d1 	bl	80066a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003308:	193b      	adds	r3, r7, r4
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	0052      	lsls	r2, r2, #1
 800330e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003310:	0021      	movs	r1, r4
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2202      	movs	r2, #2
 8003322:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2202      	movs	r2, #2
 8003328:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	220c      	movs	r2, #12
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8003336:	187b      	adds	r3, r7, r1
 8003338:	22b0      	movs	r2, #176	@ 0xb0
 800333a:	0352      	lsls	r2, r2, #13
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	22a0      	movs	r2, #160	@ 0xa0
 8003342:	0612      	lsls	r2, r2, #24
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003346:	187b      	adds	r3, r7, r1
 8003348:	0018      	movs	r0, r3
 800334a:	f003 f9f7 	bl	800673c <HAL_RCC_OscConfig>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003352:	f000 fb0d 	bl	8003970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	2202      	movs	r2, #2
 8003360:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	2101      	movs	r1, #1
 8003372:	0018      	movs	r0, r3
 8003374:	f003 fcf2 	bl	8006d5c <HAL_RCC_ClockConfig>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800337c:	f000 faf8 	bl	8003970 <Error_Handler>
  }
}
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b013      	add	sp, #76	@ 0x4c
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	0018      	movs	r0, r3
 8003392:	230c      	movs	r3, #12
 8003394:	001a      	movs	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	f005 fc86 	bl	8008ca8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <MX_ADC1_Init+0x110>)
 800339e:	4a3f      	ldr	r2, [pc, #252]	@ (800349c <MX_ADC1_Init+0x114>)
 80033a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80033a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033a4:	2280      	movs	r2, #128	@ 0x80
 80033a6:	0352      	lsls	r2, r2, #13
 80033a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033b0:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033b8:	2280      	movs	r2, #128	@ 0x80
 80033ba:	0392      	lsls	r2, r2, #14
 80033bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80033be:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033c0:	2208      	movs	r2, #8
 80033c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033c4:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80033ca:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80033d6:	4b30      	ldr	r3, [pc, #192]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033d8:	2203      	movs	r2, #3
 80033da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033de:	2220      	movs	r2, #32
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80033f0:	4b29      	ldr	r3, [pc, #164]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033f2:	222c      	movs	r2, #44	@ 0x2c
 80033f4:	2101      	movs	r1, #1
 80033f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033f8:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <MX_ADC1_Init+0x110>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80033fe:	4b26      	ldr	r3, [pc, #152]	@ (8003498 <MX_ADC1_Init+0x110>)
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <MX_ADC1_Init+0x110>)
 8003406:	2200      	movs	r2, #0
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800340a:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <MX_ADC1_Init+0x110>)
 800340c:	223c      	movs	r2, #60	@ 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003412:	4b21      	ldr	r3, [pc, #132]	@ (8003498 <MX_ADC1_Init+0x110>)
 8003414:	2200      	movs	r2, #0
 8003416:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003418:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <MX_ADC1_Init+0x110>)
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fffe 	bl	800441c <HAL_ADC_Init>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d001      	beq.n	8003428 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003424:	f000 faa4 	bl	8003970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <MX_ADC1_Init+0x118>)
 800342c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343a:	1d3a      	adds	r2, r7, #4
 800343c:	4b16      	ldr	r3, [pc, #88]	@ (8003498 <MX_ADC1_Init+0x110>)
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f001 fabb 	bl	80049bc <HAL_ADC_ConfigChannel>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800344a:	f000 fa91 	bl	8003970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	4a14      	ldr	r2, [pc, #80]	@ (80034a4 <MX_ADC1_Init+0x11c>)
 8003452:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	2204      	movs	r2, #4
 8003458:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800345a:	1d3a      	adds	r2, r7, #4
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_ADC1_Init+0x110>)
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f001 faab 	bl	80049bc <HAL_ADC_ConfigChannel>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800346a:	f000 fa81 	bl	8003970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	4a0d      	ldr	r2, [pc, #52]	@ (80034a8 <MX_ADC1_Init+0x120>)
 8003472:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	2208      	movs	r2, #8
 8003478:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800347a:	1d3a      	adds	r2, r7, #4
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <MX_ADC1_Init+0x110>)
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f001 fa9b 	bl	80049bc <HAL_ADC_ConfigChannel>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800348a:	f000 fa71 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	200001fc 	.word	0x200001fc
 800349c:	40012400 	.word	0x40012400
 80034a0:	08000004 	.word	0x08000004
 80034a4:	0c000008 	.word	0x0c000008
 80034a8:	b4002000 	.word	0xb4002000

080034ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <MX_I2C1_Init+0x78>)
 80034b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <MX_I2C1_Init+0x7c>)
 80034ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c8:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034ce:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f002 f911 	bl	8005710 <HAL_I2C_Init>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d001      	beq.n	80034f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034f2:	f000 fa3d 	bl	8003970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034f8:	2100      	movs	r1, #0
 80034fa:	0018      	movs	r0, r3
 80034fc:	f003 f83a 	bl	8006574 <HAL_I2CEx_ConfigAnalogFilter>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003504:	f000 fa34 	bl	8003970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <MX_I2C1_Init+0x74>)
 800350a:	2100      	movs	r1, #0
 800350c:	0018      	movs	r0, r3
 800350e:	f003 f87d 	bl	800660c <HAL_I2CEx_ConfigDigitalFilter>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003516:	f000 fa2b 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200002bc 	.word	0x200002bc
 8003524:	40005400 	.word	0x40005400
 8003528:	0060112f 	.word	0x0060112f

0800352c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003532:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <MX_I2C2_Init+0x78>)
 8003534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0060112F;
 8003536:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003538:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <MX_I2C2_Init+0x7c>)
 800353a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 78;
 800353c:	4b18      	ldr	r3, [pc, #96]	@ (80035a0 <MX_I2C2_Init+0x74>)
 800353e:	224e      	movs	r2, #78	@ 0x4e
 8003540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003542:	4b17      	ldr	r3, [pc, #92]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003544:	2201      	movs	r2, #1
 8003546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003548:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <MX_I2C2_Init+0x74>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800354e:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003554:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800355a:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <MX_I2C2_Init+0x74>)
 800355c:	2200      	movs	r2, #0
 800355e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003560:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003562:	2200      	movs	r2, #0
 8003564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003566:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003568:	0018      	movs	r0, r3
 800356a:	f002 f8d1 	bl	8005710 <HAL_I2C_Init>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003572:	f000 f9fd 	bl	8003970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003576:	4b0a      	ldr	r3, [pc, #40]	@ (80035a0 <MX_I2C2_Init+0x74>)
 8003578:	2100      	movs	r1, #0
 800357a:	0018      	movs	r0, r3
 800357c:	f002 fffa 	bl	8006574 <HAL_I2CEx_ConfigAnalogFilter>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003584:	f000 f9f4 	bl	8003970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <MX_I2C2_Init+0x74>)
 800358a:	2100      	movs	r1, #0
 800358c:	0018      	movs	r0, r3
 800358e:	f003 f83d 	bl	800660c <HAL_I2CEx_ConfigDigitalFilter>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003596:	f000 f9eb 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000310 	.word	0x20000310
 80035a4:	40005800 	.word	0x40005800
 80035a8:	0060112f 	.word	0x0060112f

080035ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <MX_SPI2_Init+0x7c>)
 80035b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035b8:	2282      	movs	r2, #130	@ 0x82
 80035ba:	0052      	lsls	r2, r2, #1
 80035bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80035be:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	00d2      	lsls	r2, r2, #3
 80035c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035c8:	22e0      	movs	r2, #224	@ 0xe0
 80035ca:	00d2      	lsls	r2, r2, #3
 80035cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ce:	4b15      	ldr	r3, [pc, #84]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035da:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e2:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <MX_SPI2_Init+0x78>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <MX_SPI2_Init+0x78>)
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <MX_SPI2_Init+0x78>)
 8003608:	2208      	movs	r2, #8
 800360a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <MX_SPI2_Init+0x78>)
 800360e:	0018      	movs	r0, r3
 8003610:	f003 fe82 	bl	8007318 <HAL_SPI_Init>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003618:	f000 f9aa 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	20000364 	.word	0x20000364
 8003628:	40003800 	.word	0x40003800

0800362c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <MX_TIM16_Init+0x44>)
 8003632:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <MX_TIM16_Init+0x48>)
 8003634:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 8003636:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <MX_TIM16_Init+0x44>)
 8003638:	2220      	movs	r2, #32
 800363a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <MX_TIM16_Init+0x44>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <MX_TIM16_Init+0x44>)
 8003644:	2264      	movs	r2, #100	@ 0x64
 8003646:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003648:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <MX_TIM16_Init+0x44>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800364e:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <MX_TIM16_Init+0x44>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <MX_TIM16_Init+0x44>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <MX_TIM16_Init+0x44>)
 800365c:	0018      	movs	r0, r3
 800365e:	f003 ff13 	bl	8007488 <HAL_TIM_Base_Init>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d001      	beq.n	800366a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8003666:	f000 f983 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200003c8 	.word	0x200003c8
 8003674:	40014400 	.word	0x40014400

08003678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800367c:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 800367e:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <MX_USART3_UART_Init+0x64>)
 8003680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003682:	4b15      	ldr	r3, [pc, #84]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 8003684:	22e1      	movs	r2, #225	@ 0xe1
 8003686:	0252      	lsls	r2, r2, #9
 8003688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800368a:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800369c:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 800369e:	220c      	movs	r2, #12
 80036a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036b4:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036bc:	2200      	movs	r2, #0
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <MX_USART3_UART_Init+0x60>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f004 f952 	bl	800796c <HAL_UART_Init>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80036cc:	f000 f950 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	20000414 	.word	0x20000414
 80036dc:	40004800 	.word	0x40004800

080036e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <MX_DMA_Init+0x38>)
 80036e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <MX_DMA_Init+0x38>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <MX_DMA_Init+0x38>)
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2009      	movs	r0, #9
 8003704:	f001 fbfe 	bl	8004f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003708:	2009      	movs	r0, #9
 800370a:	f001 fc10 	bl	8004f2e <HAL_NVIC_EnableIRQ>

}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	40021000 	.word	0x40021000

0800371c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08b      	sub	sp, #44	@ 0x2c
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	2414      	movs	r4, #20
 8003724:	193b      	adds	r3, r7, r4
 8003726:	0018      	movs	r0, r3
 8003728:	2314      	movs	r3, #20
 800372a:	001a      	movs	r2, r3
 800372c:	2100      	movs	r1, #0
 800372e:	f005 fabb 	bl	8008ca8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	4b8a      	ldr	r3, [pc, #552]	@ (800395c <MX_GPIO_Init+0x240>)
 8003734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003736:	4b89      	ldr	r3, [pc, #548]	@ (800395c <MX_GPIO_Init+0x240>)
 8003738:	2104      	movs	r1, #4
 800373a:	430a      	orrs	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
 800373e:	4b87      	ldr	r3, [pc, #540]	@ (800395c <MX_GPIO_Init+0x240>)
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	2204      	movs	r2, #4
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800374a:	4b84      	ldr	r3, [pc, #528]	@ (800395c <MX_GPIO_Init+0x240>)
 800374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374e:	4b83      	ldr	r3, [pc, #524]	@ (800395c <MX_GPIO_Init+0x240>)
 8003750:	2120      	movs	r1, #32
 8003752:	430a      	orrs	r2, r1
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <MX_GPIO_Init+0x240>)
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	2220      	movs	r2, #32
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	4b7e      	ldr	r3, [pc, #504]	@ (800395c <MX_GPIO_Init+0x240>)
 8003764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <MX_GPIO_Init+0x240>)
 8003768:	2101      	movs	r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34
 800376e:	4b7b      	ldr	r3, [pc, #492]	@ (800395c <MX_GPIO_Init+0x240>)
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	2201      	movs	r2, #1
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	4b78      	ldr	r3, [pc, #480]	@ (800395c <MX_GPIO_Init+0x240>)
 800377c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800377e:	4b77      	ldr	r3, [pc, #476]	@ (800395c <MX_GPIO_Init+0x240>)
 8003780:	2102      	movs	r1, #2
 8003782:	430a      	orrs	r2, r1
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34
 8003786:	4b75      	ldr	r3, [pc, #468]	@ (800395c <MX_GPIO_Init+0x240>)
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003792:	4b72      	ldr	r3, [pc, #456]	@ (800395c <MX_GPIO_Init+0x240>)
 8003794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003796:	4b71      	ldr	r3, [pc, #452]	@ (800395c <MX_GPIO_Init+0x240>)
 8003798:	2108      	movs	r1, #8
 800379a:	430a      	orrs	r2, r1
 800379c:	635a      	str	r2, [r3, #52]	@ 0x34
 800379e:	4b6f      	ldr	r3, [pc, #444]	@ (800395c <MX_GPIO_Init+0x240>)
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	2208      	movs	r2, #8
 80037a4:	4013      	ands	r3, r2
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80037aa:	23e0      	movs	r3, #224	@ 0xe0
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	486c      	ldr	r0, [pc, #432]	@ (8003960 <MX_GPIO_Init+0x244>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	0019      	movs	r1, r3
 80037b4:	f001 ff5b 	bl	800566e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 80037b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003964 <MX_GPIO_Init+0x248>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	2103      	movs	r1, #3
 80037be:	0018      	movs	r0, r3
 80037c0:	f001 ff55 	bl	800566e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 80037c4:	23e0      	movs	r3, #224	@ 0xe0
 80037c6:	0059      	lsls	r1, r3, #1
 80037c8:	23a0      	movs	r3, #160	@ 0xa0
 80037ca:	05db      	lsls	r3, r3, #23
 80037cc:	2200      	movs	r2, #0
 80037ce:	0018      	movs	r0, r3
 80037d0:	f001 ff4d 	bl	800566e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 80037d4:	23f0      	movs	r3, #240	@ 0xf0
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	4863      	ldr	r0, [pc, #396]	@ (8003968 <MX_GPIO_Init+0x24c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	0019      	movs	r1, r3
 80037de:	f001 ff46 	bl	800566e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80037e2:	4b62      	ldr	r3, [pc, #392]	@ (800396c <MX_GPIO_Init+0x250>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	2108      	movs	r1, #8
 80037e8:	0018      	movs	r0, r3
 80037ea:	f001 ff40 	bl	800566e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	22e0      	movs	r2, #224	@ 0xe0
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	2201      	movs	r2, #1
 80037fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003808:	193b      	adds	r3, r7, r4
 800380a:	4a55      	ldr	r2, [pc, #340]	@ (8003960 <MX_GPIO_Init+0x244>)
 800380c:	0019      	movs	r1, r3
 800380e:	0010      	movs	r0, r2
 8003810:	f001 fdac 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 8003814:	193b      	adds	r3, r7, r4
 8003816:	2203      	movs	r2, #3
 8003818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381a:	193b      	adds	r3, r7, r4
 800381c:	2201      	movs	r2, #1
 800381e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	193b      	adds	r3, r7, r4
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	193b      	adds	r3, r7, r4
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800382c:	193b      	adds	r3, r7, r4
 800382e:	4a4d      	ldr	r2, [pc, #308]	@ (8003964 <MX_GPIO_Init+0x248>)
 8003830:	0019      	movs	r1, r3
 8003832:	0010      	movs	r0, r2
 8003834:	f001 fd9a 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8003838:	193b      	adds	r3, r7, r4
 800383a:	2210      	movs	r2, #16
 800383c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800383e:	193b      	adds	r3, r7, r4
 8003840:	2284      	movs	r2, #132	@ 0x84
 8003842:	0392      	lsls	r2, r2, #14
 8003844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003846:	193b      	adds	r3, r7, r4
 8003848:	2201      	movs	r2, #1
 800384a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 800384c:	193a      	adds	r2, r7, r4
 800384e:	23a0      	movs	r3, #160	@ 0xa0
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	0011      	movs	r1, r2
 8003854:	0018      	movs	r0, r3
 8003856:	f001 fd89 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 800385a:	0021      	movs	r1, r4
 800385c:	187b      	adds	r3, r7, r1
 800385e:	22e0      	movs	r2, #224	@ 0xe0
 8003860:	0052      	lsls	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003864:	000c      	movs	r4, r1
 8003866:	193b      	adds	r3, r7, r4
 8003868:	2201      	movs	r2, #1
 800386a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	193b      	adds	r3, r7, r4
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	193b      	adds	r3, r7, r4
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	193a      	adds	r2, r7, r4
 800387a:	23a0      	movs	r3, #160	@ 0xa0
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	0011      	movs	r1, r2
 8003880:	0018      	movs	r0, r3
 8003882:	f001 fd73 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC2_Pin CS_TC3_Pin CS_TC4_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin;
 8003886:	0021      	movs	r1, r4
 8003888:	187b      	adds	r3, r7, r1
 800388a:	22f0      	movs	r2, #240	@ 0xf0
 800388c:	0212      	lsls	r2, r2, #8
 800388e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003890:	000c      	movs	r4, r1
 8003892:	193b      	adds	r3, r7, r4
 8003894:	2201      	movs	r2, #1
 8003896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	193b      	adds	r3, r7, r4
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <MX_GPIO_Init+0x24c>)
 80038a8:	0019      	movs	r1, r3
 80038aa:	0010      	movs	r0, r2
 80038ac:	f001 fd5e 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 80038b0:	0021      	movs	r1, r4
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	2240      	movs	r2, #64	@ 0x40
 80038b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2284      	movs	r2, #132	@ 0x84
 80038bc:	0392      	lsls	r2, r2, #14
 80038be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	000c      	movs	r4, r1
 80038c2:	193b      	adds	r3, r7, r4
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <MX_GPIO_Init+0x244>)
 80038cc:	0019      	movs	r1, r3
 80038ce:	0010      	movs	r0, r2
 80038d0:	f001 fd4c 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	2208      	movs	r2, #8
 80038d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	2201      	movs	r2, #1
 80038de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	4a1f      	ldr	r2, [pc, #124]	@ (800396c <MX_GPIO_Init+0x250>)
 80038f0:	0019      	movs	r1, r3
 80038f2:	0010      	movs	r0, r2
 80038f4:	f001 fd3a 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	2208      	movs	r2, #8
 80038fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	2202      	movs	r2, #2
 8003902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	193b      	adds	r3, r7, r4
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	193b      	adds	r3, r7, r4
 800390c:	2200      	movs	r2, #0
 800390e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003910:	193b      	adds	r3, r7, r4
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	193b      	adds	r3, r7, r4
 8003918:	4a13      	ldr	r2, [pc, #76]	@ (8003968 <MX_GPIO_Init+0x24c>)
 800391a:	0019      	movs	r1, r3
 800391c:	0010      	movs	r0, r2
 800391e:	f001 fd25 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 8003922:	0021      	movs	r1, r4
 8003924:	187b      	adds	r3, r7, r1
 8003926:	22e0      	movs	r2, #224	@ 0xe0
 8003928:	0092      	lsls	r2, r2, #2
 800392a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800392c:	187b      	adds	r3, r7, r1
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	187b      	adds	r3, r7, r1
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	187b      	adds	r3, r7, r1
 800393a:	4a0b      	ldr	r2, [pc, #44]	@ (8003968 <MX_GPIO_Init+0x24c>)
 800393c:	0019      	movs	r1, r3
 800393e:	0010      	movs	r0, r2
 8003940:	f001 fd14 	bl	800536c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2007      	movs	r0, #7
 800394a:	f001 fadb 	bl	8004f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800394e:	2007      	movs	r0, #7
 8003950:	f001 faed 	bl	8004f2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b00b      	add	sp, #44	@ 0x2c
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	50000800 	.word	0x50000800
 8003964:	50001400 	.word	0x50001400
 8003968:	50000400 	.word	0x50000400
 800396c:	50000c00 	.word	0x50000c00

08003970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003974:	b672      	cpsid	i
}
 8003976:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	e7fd      	b.n	8003978 <Error_Handler+0x8>

0800397c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <HAL_MspInit+0x44>)
 8003984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <HAL_MspInit+0x44>)
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	641a      	str	r2, [r3, #64]	@ 0x40
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <HAL_MspInit+0x44>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	2201      	movs	r2, #1
 8003994:	4013      	ands	r3, r2
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <HAL_MspInit+0x44>)
 800399c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399e:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <HAL_MspInit+0x44>)
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	0549      	lsls	r1, r1, #21
 80039a4:	430a      	orrs	r2, r1
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_MspInit+0x44>)
 80039aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	055b      	lsls	r3, r3, #21
 80039b0:	4013      	ands	r3, r2
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b091      	sub	sp, #68	@ 0x44
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	232c      	movs	r3, #44	@ 0x2c
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	0018      	movs	r0, r3
 80039d2:	2314      	movs	r3, #20
 80039d4:	001a      	movs	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f005 f966 	bl	8008ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039dc:	2410      	movs	r4, #16
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	0018      	movs	r0, r3
 80039e2:	231c      	movs	r3, #28
 80039e4:	001a      	movs	r2, r3
 80039e6:	2100      	movs	r1, #0
 80039e8:	f005 f95e 	bl	8008ca8 <memset>
  if(hadc->Instance==ADC1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3a      	ldr	r2, [pc, #232]	@ (8003adc <HAL_ADC_MspInit+0x118>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d16d      	bne.n	8003ad2 <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039f6:	193b      	adds	r3, r7, r4
 80039f8:	2280      	movs	r2, #128	@ 0x80
 80039fa:	01d2      	lsls	r2, r2, #7
 80039fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 80039fe:	193b      	adds	r3, r7, r4
 8003a00:	2280      	movs	r2, #128	@ 0x80
 8003a02:	05d2      	lsls	r2, r2, #23
 8003a04:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f003 fb51 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003a12:	f7ff ffad 	bl	8003970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a16:	4b32      	ldr	r3, [pc, #200]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a1c:	2180      	movs	r1, #128	@ 0x80
 8003a1e:	0349      	lsls	r1, r1, #13
 8003a20:	430a      	orrs	r2, r1
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	035b      	lsls	r3, r3, #13
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ae0 <HAL_ADC_MspInit+0x11c>)
 8003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a42:	2201      	movs	r2, #1
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a4a:	212c      	movs	r1, #44	@ 0x2c
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2203      	movs	r2, #3
 8003a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	187a      	adds	r2, r7, r1
 8003a60:	23a0      	movs	r3, #160	@ 0xa0
 8003a62:	05db      	lsls	r3, r3, #23
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f001 fc80 	bl	800536c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_ADC_MspInit+0x124>)
 8003a70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a74:	2205      	movs	r2, #5
 8003a76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a84:	4b17      	ldr	r3, [pc, #92]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a86:	2280      	movs	r2, #128	@ 0x80
 8003a88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a92:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	00d2      	lsls	r2, r2, #3
 8003a98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003aa0:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f001 fa5d 	bl	8004f68 <HAL_DMA_Init>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8003ab2:	f7ff ff5d 	bl	8003970 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003aba:	651a      	str	r2, [r3, #80]	@ 0x50
 8003abc:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <HAL_ADC_MspInit+0x120>)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	200c      	movs	r0, #12
 8003ac8:	f001 fa1c 	bl	8004f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003acc:	200c      	movs	r0, #12
 8003ace:	f001 fa2e 	bl	8004f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b011      	add	sp, #68	@ 0x44
 8003ad8:	bd90      	pop	{r4, r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	40012400 	.word	0x40012400
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	20000260 	.word	0x20000260
 8003ae8:	40020008 	.word	0x40020008

08003aec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b093      	sub	sp, #76	@ 0x4c
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	2334      	movs	r3, #52	@ 0x34
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	0018      	movs	r0, r3
 8003afa:	2314      	movs	r3, #20
 8003afc:	001a      	movs	r2, r3
 8003afe:	2100      	movs	r1, #0
 8003b00:	f005 f8d2 	bl	8008ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b04:	2418      	movs	r4, #24
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	0018      	movs	r0, r3
 8003b0a:	231c      	movs	r3, #28
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f005 f8ca 	bl	8008ca8 <memset>
  if(hi2c->Instance==I2C1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a42      	ldr	r2, [pc, #264]	@ (8003c24 <HAL_I2C_MspInit+0x138>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d140      	bne.n	8003ba0 <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b1e:	193b      	adds	r3, r7, r4
 8003b20:	2220      	movs	r2, #32
 8003b22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b24:	193b      	adds	r3, r7, r4
 8003b26:	2200      	movs	r2, #0
 8003b28:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f003 fabf 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003b36:	f7ff ff1b 	bl	8003970 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b40:	2101      	movs	r1, #1
 8003b42:	430a      	orrs	r2, r1
 8003b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b46:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b52:	2134      	movs	r1, #52	@ 0x34
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	22c0      	movs	r2, #192	@ 0xc0
 8003b58:	00d2      	lsls	r2, r2, #3
 8003b5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	2212      	movs	r2, #18
 8003b60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	2206      	movs	r2, #6
 8003b72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b74:	187a      	adds	r2, r7, r1
 8003b76:	23a0      	movs	r3, #160	@ 0xa0
 8003b78:	05db      	lsls	r3, r3, #23
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f001 fbf5 	bl	800536c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b82:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b86:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	0389      	lsls	r1, r1, #14
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	039b      	lsls	r3, r3, #14
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b9e:	e03d      	b.n	8003c1c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d138      	bne.n	8003c1c <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bc2:	2134      	movs	r1, #52	@ 0x34
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	22c0      	movs	r2, #192	@ 0xc0
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2212      	movs	r2, #18
 8003bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2206      	movs	r2, #6
 8003be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <HAL_I2C_MspInit+0x144>)
 8003be8:	0019      	movs	r1, r3
 8003bea:	0010      	movs	r0, r2
 8003bec:	f001 fbbe 	bl	800536c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003bf6:	2180      	movs	r1, #128	@ 0x80
 8003bf8:	03c9      	lsls	r1, r1, #15
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	03db      	lsls	r3, r3, #15
 8003c06:	4013      	ands	r3, r2
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2018      	movs	r0, #24
 8003c12:	f001 f977 	bl	8004f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8003c16:	2018      	movs	r0, #24
 8003c18:	f001 f989 	bl	8004f2e <HAL_NVIC_EnableIRQ>
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b013      	add	sp, #76	@ 0x4c
 8003c22:	bd90      	pop	{r4, r7, pc}
 8003c24:	40005400 	.word	0x40005400
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40005800 	.word	0x40005800
 8003c30:	50000400 	.word	0x50000400

08003c34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b08b      	sub	sp, #44	@ 0x2c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	2414      	movs	r4, #20
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	0018      	movs	r0, r3
 8003c42:	2314      	movs	r3, #20
 8003c44:	001a      	movs	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f005 f82e 	bl	8008ca8 <memset>
  if(hspi->Instance==SPI2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_SPI_MspInit+0xd0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d151      	bne.n	8003cfa <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c56:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	01c9      	lsls	r1, r1, #7
 8003c60:	430a      	orrs	r2, r1
 8003c62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c64:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	01db      	lsls	r3, r3, #7
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c76:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c7e:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c82:	2201      	movs	r2, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c90:	2102      	movs	r1, #2
 8003c92:	430a      	orrs	r2, r1
 8003c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c96:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <HAL_SPI_MspInit+0xd4>)
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	2202      	movs	r2, #2
 8003cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc0:	193a      	adds	r2, r7, r4
 8003cc2:	23a0      	movs	r3, #160	@ 0xa0
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f001 fb4f 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003cce:	0021      	movs	r1, r4
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	2202      	movs	r2, #2
 8003cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	2201      	movs	r2, #1
 8003cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	4a06      	ldr	r2, [pc, #24]	@ (8003d0c <HAL_SPI_MspInit+0xd8>)
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	0010      	movs	r0, r2
 8003cf6:	f001 fb39 	bl	800536c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b00b      	add	sp, #44	@ 0x2c
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	40003800 	.word	0x40003800
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	50000400 	.word	0x50000400

08003d10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <HAL_TIM_Base_MspInit+0x48>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d115      	bne.n	8003d4e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_TIM_Base_MspInit+0x4c>)
 8003d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <HAL_TIM_Base_MspInit+0x4c>)
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	0289      	lsls	r1, r1, #10
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_TIM_Base_MspInit+0x4c>)
 8003d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	029b      	lsls	r3, r3, #10
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	2015      	movs	r0, #21
 8003d44:	f001 f8de 	bl	8004f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003d48:	2015      	movs	r0, #21
 8003d4a:	f001 f8f0 	bl	8004f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b08b      	sub	sp, #44	@ 0x2c
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	2414      	movs	r4, #20
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	2314      	movs	r3, #20
 8003d70:	001a      	movs	r2, r3
 8003d72:	2100      	movs	r1, #0
 8003d74:	f004 ff98 	bl	8008ca8 <memset>
  if(huart->Instance==USART3)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <HAL_UART_MspInit+0xd0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d151      	bne.n	8003e26 <HAL_UART_MspInit+0xc6>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d82:	4b2c      	ldr	r3, [pc, #176]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d86:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003d88:	2180      	movs	r1, #128	@ 0x80
 8003d8a:	02c9      	lsls	r1, r1, #11
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d90:	4b28      	ldr	r3, [pc, #160]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	02db      	lsls	r3, r3, #11
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <HAL_UART_MspInit+0xd4>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	2204      	movs	r2, #4
 8003dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8003dec:	193a      	adds	r2, r7, r4
 8003dee:	23a0      	movs	r3, #160	@ 0xa0
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f001 fab9 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8003dfa:	0021      	movs	r1, r4
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2202      	movs	r2, #2
 8003e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2204      	movs	r2, #4
 8003e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	4a06      	ldr	r2, [pc, #24]	@ (8003e38 <HAL_UART_MspInit+0xd8>)
 8003e1e:	0019      	movs	r1, r3
 8003e20:	0010      	movs	r0, r2
 8003e22:	f001 faa3 	bl	800536c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b00b      	add	sp, #44	@ 0x2c
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	40004800 	.word	0x40004800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	50000400 	.word	0x50000400

08003e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e40:	46c0      	nop			@ (mov r8, r8)
 8003e42:	e7fd      	b.n	8003e40 <NMI_Handler+0x4>

08003e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e48:	46c0      	nop			@ (mov r8, r8)
 8003e4a:	e7fd      	b.n	8003e48 <HardFault_Handler+0x4>

08003e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e64:	f000 f9a2 	bl	80041ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 8003e72:	2010      	movs	r0, #16
 8003e74:	f001 fc18 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8003e78:	2040      	movs	r0, #64	@ 0x40
 8003e7a:	f001 fc15 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e88:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <DMA1_Channel1_IRQHandler+0x14>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f001 f960 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	20000260 	.word	0x20000260

08003e9c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <ADC1_IRQHandler+0x14>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fc62 	bl	800476c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	200001fc 	.word	0x200001fc

08003eb4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <TIM16_IRQHandler+0x14>)
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f003 fb92 	bl	80075e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	200003c8 	.word	0x200003c8

08003ecc <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <I2C2_IRQHandler+0x2c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	23e0      	movs	r3, #224	@ 0xe0
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4013      	ands	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <I2C2_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <I2C2_IRQHandler+0x2c>)
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f001 fcd5 	bl	8005890 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8003ee6:	e003      	b.n	8003ef0 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <I2C2_IRQHandler+0x2c>)
 8003eea:	0018      	movs	r0, r3
 8003eec:	f001 fcb6 	bl	800585c <HAL_I2C_EV_IRQHandler>
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	20000310 	.word	0x20000310

08003efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  return 1;
 8003f00:	2301      	movs	r3, #1
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_kill>:

int _kill(int pid, int sig)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f12:	f004 ff39 	bl	8008d88 <__errno>
 8003f16:	0003      	movs	r3, r0
 8003f18:	2216      	movs	r2, #22
 8003f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	425b      	negs	r3, r3
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_exit>:

void _exit (int status)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f30:	2301      	movs	r3, #1
 8003f32:	425a      	negs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff ffe5 	bl	8003f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	e7fd      	b.n	8003f3e <_exit+0x16>

08003f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e00a      	b.n	8003f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f54:	e000      	b.n	8003f58 <_read+0x16>
 8003f56:	bf00      	nop
 8003f58:	0001      	movs	r1, r0
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	60ba      	str	r2, [r7, #8]
 8003f60:	b2ca      	uxtb	r2, r1
 8003f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	dbf0      	blt.n	8003f54 <_read+0x12>
  }

  return len;
 8003f72:	687b      	ldr	r3, [r7, #4]
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b006      	add	sp, #24
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e009      	b.n	8003fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	60ba      	str	r2, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	0018      	movs	r0, r3
 8003f98:	e000      	b.n	8003f9c <_write+0x20>
 8003f9a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	dbf1      	blt.n	8003f8e <_write+0x12>
  }
  return len;
 8003faa:	687b      	ldr	r3, [r7, #4]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b006      	add	sp, #24
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_close>:

int _close(int file)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	425b      	negs	r3, r3
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2280      	movs	r2, #128	@ 0x80
 8003fd6:	0192      	lsls	r2, r2, #6
 8003fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_isatty>:

int _isatty(int file)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b002      	add	sp, #8
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b004      	add	sp, #16
 800400a:	bd80      	pop	{r7, pc}

0800400c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <_sbrk+0x5c>)
 8004016:	4b15      	ldr	r3, [pc, #84]	@ (800406c <_sbrk+0x60>)
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004028:	4b11      	ldr	r3, [pc, #68]	@ (8004070 <_sbrk+0x64>)
 800402a:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <_sbrk+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402e:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <_sbrk+0x64>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d207      	bcs.n	800404c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800403c:	f004 fea4 	bl	8008d88 <__errno>
 8004040:	0003      	movs	r3, r0
 8004042:	220c      	movs	r2, #12
 8004044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004046:	2301      	movs	r3, #1
 8004048:	425b      	negs	r3, r3
 800404a:	e009      	b.n	8004060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <_sbrk+0x64>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	18d2      	adds	r2, r2, r3
 800405a:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <_sbrk+0x64>)
 800405c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20009000 	.word	0x20009000
 800406c:	00000400 	.word	0x00000400
 8004070:	20000588 	.word	0x20000588
 8004074:	200006e0 	.word	0x200006e0

08004078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004084:	480d      	ldr	r0, [pc, #52]	@ (80040bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004086:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004088:	f7ff fff6 	bl	8004078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800408c:	480c      	ldr	r0, [pc, #48]	@ (80040c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800408e:	490d      	ldr	r1, [pc, #52]	@ (80040c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004090:	4a0d      	ldr	r2, [pc, #52]	@ (80040c8 <LoopForever+0xe>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004094:	e002      	b.n	800409c <LoopCopyDataInit>

08004096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800409a:	3304      	adds	r3, #4

0800409c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800409c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800409e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a0:	d3f9      	bcc.n	8004096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040a2:	4a0a      	ldr	r2, [pc, #40]	@ (80040cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040a4:	4c0a      	ldr	r4, [pc, #40]	@ (80040d0 <LoopForever+0x16>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040a8:	e001      	b.n	80040ae <LoopFillZerobss>

080040aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040ac:	3204      	adds	r2, #4

080040ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b0:	d3fb      	bcc.n	80040aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80040b2:	f004 fe6f 	bl	8008d94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80040b6:	f7fe ff8d 	bl	8002fd4 <main>

080040ba <LoopForever>:

LoopForever:
  b LoopForever
 80040ba:	e7fe      	b.n	80040ba <LoopForever>
  ldr   r0, =_estack
 80040bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80040c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80040c8:	0800b0ac 	.word	0x0800b0ac
  ldr r2, =_sbss
 80040cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80040d0:	200006dc 	.word	0x200006dc

080040d4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080040d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_Init+0x3c>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_Init+0x3c>)
 80040ea:	2180      	movs	r1, #128	@ 0x80
 80040ec:	0049      	lsls	r1, r1, #1
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f2:	2003      	movs	r0, #3
 80040f4:	f000 f810 	bl	8004118 <HAL_InitTick>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d003      	beq.n	8004104 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e001      	b.n	8004108 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004104:	f7ff fc3a 	bl	800397c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	781b      	ldrb	r3, [r3, #0]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40022000 	.word	0x40022000

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004120:	230f      	movs	r3, #15
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <HAL_InitTick+0x88>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02b      	beq.n	8004188 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004130:	4b1c      	ldr	r3, [pc, #112]	@ (80041a4 <HAL_InitTick+0x8c>)
 8004132:	681c      	ldr	r4, [r3, #0]
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <HAL_InitTick+0x88>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	0019      	movs	r1, r3
 800413a:	23fa      	movs	r3, #250	@ 0xfa
 800413c:	0098      	lsls	r0, r3, #2
 800413e:	f7fb fffb 	bl	8000138 <__udivsi3>
 8004142:	0003      	movs	r3, r0
 8004144:	0019      	movs	r1, r3
 8004146:	0020      	movs	r0, r4
 8004148:	f7fb fff6 	bl	8000138 <__udivsi3>
 800414c:	0003      	movs	r3, r0
 800414e:	0018      	movs	r0, r3
 8004150:	f000 fefd 	bl	8004f4e <HAL_SYSTICK_Config>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d112      	bne.n	800417e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d80a      	bhi.n	8004174 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	2301      	movs	r3, #1
 8004162:	425b      	negs	r3, r3
 8004164:	2200      	movs	r2, #0
 8004166:	0018      	movs	r0, r3
 8004168:	f000 fecc 	bl	8004f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800416c:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <HAL_InitTick+0x90>)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e00d      	b.n	8004190 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e008      	b.n	8004190 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800417e:	230f      	movs	r3, #15
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e003      	b.n	8004190 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004188:	230f      	movs	r3, #15
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004190:	230f      	movs	r3, #15
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b005      	add	sp, #20
 800419c:	bd90      	pop	{r4, r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000014 	.word	0x20000014
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	20000010 	.word	0x20000010

080041ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_IncTick+0x1c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	001a      	movs	r2, r3
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_IncTick+0x20>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	18d2      	adds	r2, r2, r3
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_IncTick+0x20>)
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	20000014 	.word	0x20000014
 80041cc:	2000058c 	.word	0x2000058c

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b02      	ldr	r3, [pc, #8]	@ (80041e0 <HAL_GetTick+0x10>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	2000058c 	.word	0x2000058c

080041e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a05      	ldr	r2, [pc, #20]	@ (8004208 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80041f4:	401a      	ands	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b002      	add	sp, #8
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	fe3fffff 	.word	0xfe3fffff

0800420c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	23e0      	movs	r3, #224	@ 0xe0
 800421a:	045b      	lsls	r3, r3, #17
 800421c:	4013      	ands	r3, r2
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}

08004226 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	2104      	movs	r1, #4
 800423a:	400a      	ands	r2, r1
 800423c:	2107      	movs	r1, #7
 800423e:	4091      	lsls	r1, r2
 8004240:	000a      	movs	r2, r1
 8004242:	43d2      	mvns	r2, r2
 8004244:	401a      	ands	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2104      	movs	r1, #4
 800424a:	400b      	ands	r3, r1
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4099      	lsls	r1, r3
 8004250:	000b      	movs	r3, r1
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b004      	add	sp, #16
 800425e:	bd80      	pop	{r7, pc}

08004260 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	2104      	movs	r1, #4
 8004272:	400a      	ands	r2, r1
 8004274:	2107      	movs	r1, #7
 8004276:	4091      	lsls	r1, r2
 8004278:	000a      	movs	r2, r1
 800427a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2104      	movs	r1, #4
 8004280:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004282:	40da      	lsrs	r2, r3
 8004284:	0013      	movs	r3, r2
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b002      	add	sp, #8
 800428c:	bd80      	pop	{r7, pc}

0800428e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	23c0      	movs	r3, #192	@ 0xc0
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4013      	ands	r3, r2
 80042a0:	d101      	bne.n	80042a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	211f      	movs	r1, #31
 80042c4:	400a      	ands	r2, r1
 80042c6:	210f      	movs	r1, #15
 80042c8:	4091      	lsls	r1, r2
 80042ca:	000a      	movs	r2, r1
 80042cc:	43d2      	mvns	r2, r2
 80042ce:	401a      	ands	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0e9b      	lsrs	r3, r3, #26
 80042d4:	210f      	movs	r1, #15
 80042d6:	4019      	ands	r1, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	201f      	movs	r0, #31
 80042dc:	4003      	ands	r3, r0
 80042de:	4099      	lsls	r1, r3
 80042e0:	000b      	movs	r3, r1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	035b      	lsls	r3, r3, #13
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}

08004312 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	0352      	lsls	r2, r2, #13
 8004324:	0b52      	lsrs	r2, r2, #13
 8004326:	43d2      	mvns	r2, r2
 8004328:	401a      	ands	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}

08004336 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2203      	movs	r2, #3
 8004344:	4013      	ands	r3, r2
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b002      	add	sp, #8
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	0212      	lsls	r2, r2, #8
 8004364:	43d2      	mvns	r2, r2
 8004366:	401a      	ands	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	400b      	ands	r3, r1
 8004370:	4904      	ldr	r1, [pc, #16]	@ (8004384 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004372:	400b      	ands	r3, r1
 8004374:	431a      	orrs	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	07ffff00 	.word	0x07ffff00

08004388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a05      	ldr	r2, [pc, #20]	@ (80043ac <LL_ADC_EnableInternalRegulator+0x24>)
 8004396:	4013      	ands	r3, r2
 8004398:	2280      	movs	r2, #128	@ 0x80
 800439a:	0552      	lsls	r2, r2, #21
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	6fffffe8 	.word	0x6fffffe8

080043b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	055b      	lsls	r3, r3, #21
 80043c0:	401a      	ands	r2, r3
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	055b      	lsls	r3, r3, #21
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2201      	movs	r2, #1
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <LL_ADC_IsEnabled+0x18>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <LL_ADC_IsEnabled+0x1a>
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}

080043fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2204      	movs	r2, #4
 8004408:	4013      	ands	r3, r2
 800440a:	2b04      	cmp	r3, #4
 800440c:	d101      	bne.n	8004412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004424:	231f      	movs	r3, #31
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e17f      	b.n	8004742 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fab9 	bl	80039c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2254      	movs	r2, #84	@ 0x54
 800445c:	2100      	movs	r1, #0
 800445e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff ffa3 	bl	80043b0 <LL_ADC_IsInternalRegulatorEnabled>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d115      	bne.n	800449a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0018      	movs	r0, r3
 8004474:	f7ff ff88 	bl	8004388 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004478:	4bb4      	ldr	r3, [pc, #720]	@ (800474c <HAL_ADC_Init+0x330>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	49b4      	ldr	r1, [pc, #720]	@ (8004750 <HAL_ADC_Init+0x334>)
 800447e:	0018      	movs	r0, r3
 8004480:	f7fb fe5a 	bl	8000138 <__udivsi3>
 8004484:	0003      	movs	r3, r0
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800448c:	e002      	b.n	8004494 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3b01      	subs	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f9      	bne.n	800448e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff ff86 	bl	80043b0 <LL_ADC_IsInternalRegulatorEnabled>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d10f      	bne.n	80044c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	2210      	movs	r2, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	2201      	movs	r2, #1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044c0:	231f      	movs	r3, #31
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff ff94 	bl	80043fa <LL_ADC_REG_IsConversionOngoing>
 80044d2:	0003      	movs	r3, r0
 80044d4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	2210      	movs	r2, #16
 80044dc:	4013      	ands	r3, r2
 80044de:	d000      	beq.n	80044e2 <HAL_ADC_Init+0xc6>
 80044e0:	e122      	b.n	8004728 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d000      	beq.n	80044ea <HAL_ADC_Init+0xce>
 80044e8:	e11e      	b.n	8004728 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	4a99      	ldr	r2, [pc, #612]	@ (8004754 <HAL_ADC_Init+0x338>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	2202      	movs	r2, #2
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0018      	movs	r0, r3
 8004500:	f7ff ff6a 	bl	80043d8 <LL_ADC_IsEnabled>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d000      	beq.n	800450a <HAL_ADC_Init+0xee>
 8004508:	e0ad      	b.n	8004666 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7e1b      	ldrb	r3, [r3, #24]
 8004512:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004514:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7e5b      	ldrb	r3, [r3, #25]
 800451a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800451c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7e9b      	ldrb	r3, [r3, #26]
 8004522:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004524:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_ADC_Init+0x118>
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	015b      	lsls	r3, r3, #5
 8004532:	e000      	b.n	8004536 <HAL_ADC_Init+0x11a>
 8004534:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004536:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800453c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da04      	bge.n	8004550 <HAL_ADC_Init+0x134>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	e001      	b.n	8004554 <HAL_ADC_Init+0x138>
 8004550:	2380      	movs	r3, #128	@ 0x80
 8004552:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004554:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	212c      	movs	r1, #44	@ 0x2c
 800455a:	5c5b      	ldrb	r3, [r3, r1]
 800455c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800455e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	5c9b      	ldrb	r3, [r3, r2]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d115      	bne.n	800459c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7e9b      	ldrb	r3, [r3, #26]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2280      	movs	r2, #128	@ 0x80
 800457c:	0252      	lsls	r2, r2, #9
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e00b      	b.n	800459c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	2220      	movs	r2, #32
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	2201      	movs	r2, #1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a8:	23e0      	movs	r3, #224	@ 0xe0
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80045b2:	4313      	orrs	r3, r2
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a65      	ldr	r2, [pc, #404]	@ (8004758 <HAL_ADC_Init+0x33c>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0f9b      	lsrs	r3, r3, #30
 80045d6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045dc:	4313      	orrs	r3, r2
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	223c      	movs	r2, #60	@ 0x3c
 80045e8:	5c9b      	ldrb	r3, [r3, r2]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d111      	bne.n	8004612 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0f9b      	lsrs	r3, r3, #30
 80045f4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045fa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004600:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004606:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	2201      	movs	r2, #1
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a50      	ldr	r2, [pc, #320]	@ (800475c <HAL_ADC_Init+0x340>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	430a      	orrs	r2, r1
 8004626:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	23c0      	movs	r3, #192	@ 0xc0
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	429a      	cmp	r2, r3
 8004632:	d018      	beq.n	8004666 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	05db      	lsls	r3, r3, #23
 800463c:	429a      	cmp	r2, r3
 800463e:	d012      	beq.n	8004666 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	429a      	cmp	r2, r3
 800464a:	d00c      	beq.n	8004666 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800464c:	4b44      	ldr	r3, [pc, #272]	@ (8004760 <HAL_ADC_Init+0x344>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a44      	ldr	r2, [pc, #272]	@ (8004764 <HAL_ADC_Init+0x348>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	23f0      	movs	r3, #240	@ 0xf0
 800465c:	039b      	lsls	r3, r3, #14
 800465e:	401a      	ands	r2, r3
 8004660:	4b3f      	ldr	r3, [pc, #252]	@ (8004760 <HAL_ADC_Init+0x344>)
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466e:	001a      	movs	r2, r3
 8004670:	2100      	movs	r1, #0
 8004672:	f7ff fdd8 	bl	8004226 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	493a      	ldr	r1, [pc, #232]	@ (8004768 <HAL_ADC_Init+0x34c>)
 8004680:	001a      	movs	r2, r3
 8004682:	f7ff fdd0 	bl	8004226 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2110      	movs	r1, #16
 800469a:	4249      	negs	r1, r1
 800469c:	430a      	orrs	r2, r1
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a0:	e018      	b.n	80046d4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	2380      	movs	r3, #128	@ 0x80
 80046a8:	039b      	lsls	r3, r3, #14
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d112      	bne.n	80046d4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	221c      	movs	r2, #28
 80046be:	4013      	ands	r3, r2
 80046c0:	2210      	movs	r2, #16
 80046c2:	4252      	negs	r2, r2
 80046c4:	409a      	lsls	r2, r3
 80046c6:	0011      	movs	r1, r2
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2100      	movs	r1, #0
 80046da:	0018      	movs	r0, r3
 80046dc:	f7ff fdc0 	bl	8004260 <LL_ADC_GetSamplingTimeCommonChannels>
 80046e0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d10b      	bne.n	8004702 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	2203      	movs	r2, #3
 80046f6:	4393      	bics	r3, r2
 80046f8:	2201      	movs	r2, #1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004700:	e01c      	b.n	800473c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	2212      	movs	r2, #18
 8004708:	4393      	bics	r3, r2
 800470a:	2210      	movs	r2, #16
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	2201      	movs	r2, #1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800471e:	231f      	movs	r3, #31
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004726:	e009      	b.n	800473c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	2210      	movs	r2, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004734:	231f      	movs	r3, #31
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800473c:	231f      	movs	r3, #31
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	781b      	ldrb	r3, [r3, #0]
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b008      	add	sp, #32
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	2000000c 	.word	0x2000000c
 8004750:	00030d40 	.word	0x00030d40
 8004754:	fffffefd 	.word	0xfffffefd
 8004758:	ffde0201 	.word	0xffde0201
 800475c:	1ffffc02 	.word	0x1ffffc02
 8004760:	40012708 	.word	0x40012708
 8004764:	ffc3ffff 	.word	0xffc3ffff
 8004768:	07ffff04 	.word	0x07ffff04

0800476c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2202      	movs	r2, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d017      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x54>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2202      	movs	r2, #2
 8004794:	4013      	ands	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479c:	2210      	movs	r2, #16
 800479e:	4013      	ands	r3, r2
 80047a0:	d106      	bne.n	80047b0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 faea 	bl	8004d8c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2202      	movs	r2, #2
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2204      	movs	r2, #4
 80047c4:	4013      	ands	r3, r2
 80047c6:	d003      	beq.n	80047d0 <HAL_ADC_IRQHandler+0x64>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2204      	movs	r2, #4
 80047cc:	4013      	ands	r3, r2
 80047ce:	d107      	bne.n	80047e0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2208      	movs	r2, #8
 80047d4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047d6:	d04d      	beq.n	8004874 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2208      	movs	r2, #8
 80047dc:	4013      	ands	r3, r2
 80047de:	d049      	beq.n	8004874 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	2210      	movs	r2, #16
 80047e6:	4013      	ands	r3, r2
 80047e8:	d106      	bne.n	80047f8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	2280      	movs	r2, #128	@ 0x80
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f7ff fd46 	bl	800428e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004802:	1e03      	subs	r3, r0, #0
 8004804:	d02e      	beq.n	8004864 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	7e9b      	ldrb	r3, [r3, #26]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d12a      	bne.n	8004864 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2208      	movs	r2, #8
 8004816:	4013      	ands	r3, r2
 8004818:	2b08      	cmp	r3, #8
 800481a:	d123      	bne.n	8004864 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff fdea 	bl	80043fa <LL_ADC_REG_IsConversionOngoing>
 8004826:	1e03      	subs	r3, r0, #0
 8004828:	d110      	bne.n	800484c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	210c      	movs	r1, #12
 8004836:	438a      	bics	r2, r1
 8004838:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	4a56      	ldr	r2, [pc, #344]	@ (8004998 <HAL_ADC_IRQHandler+0x22c>)
 8004840:	4013      	ands	r3, r2
 8004842:	2201      	movs	r2, #1
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	659a      	str	r2, [r3, #88]	@ 0x58
 800484a:	e00b      	b.n	8004864 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	2220      	movs	r2, #32
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	2201      	movs	r2, #1
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f7fe f984 	bl	8002b74 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	220c      	movs	r2, #12
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	4013      	ands	r3, r2
 800487a:	d012      	beq.n	80048a2 <HAL_ADC_IRQHandler+0x136>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2280      	movs	r2, #128	@ 0x80
 8004880:	4013      	ands	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	2280      	movs	r2, #128	@ 0x80
 800488a:	0252      	lsls	r2, r2, #9
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f881 	bl	800499c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d014      	beq.n	80048d6 <HAL_ADC_IRQHandler+0x16a>
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	2280      	movs	r2, #128	@ 0x80
 80048bc:	0292      	lsls	r2, r2, #10
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fa50 	bl	8004d6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2280      	movs	r2, #128	@ 0x80
 80048d2:	0052      	lsls	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4013      	ands	r3, r2
 80048de:	d014      	beq.n	800490a <HAL_ADC_IRQHandler+0x19e>
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	2380      	movs	r3, #128	@ 0x80
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00f      	beq.n	800490a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	02d2      	lsls	r2, r2, #11
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fa3e 	bl	8004d7c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2280      	movs	r2, #128	@ 0x80
 8004906:	0092      	lsls	r2, r2, #2
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2210      	movs	r2, #16
 800490e:	4013      	ands	r3, r2
 8004910:	d02b      	beq.n	800496a <HAL_ADC_IRQHandler+0x1fe>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2210      	movs	r2, #16
 8004916:	4013      	ands	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e008      	b.n	800493a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff fd02 	bl	8004336 <LL_ADC_REG_GetDMATransfer>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004936:	2301      	movs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d110      	bne.n	8004962 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	2280      	movs	r2, #128	@ 0x80
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	2202      	movs	r2, #2
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 f825 	bl	80049ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2210      	movs	r2, #16
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	019b      	lsls	r3, r3, #6
 8004970:	4013      	ands	r3, r2
 8004972:	d00d      	beq.n	8004990 <HAL_ADC_IRQHandler+0x224>
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	4013      	ands	r3, r2
 800497c:	d008      	beq.n	8004990 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 fa0b 	bl	8004d9c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2280      	movs	r2, #128	@ 0x80
 800498c:	0192      	lsls	r2, r2, #6
 800498e:	601a      	str	r2, [r3, #0]
  }
}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b006      	add	sp, #24
 8004996:	bd80      	pop	{r7, pc}
 8004998:	fffffefe 	.word	0xfffffefe

0800499c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049b4:	46c0      	nop			@ (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049c6:	2317      	movs	r3, #23
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2254      	movs	r2, #84	@ 0x54
 80049d6:	5c9b      	ldrb	r3, [r3, r2]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x24>
 80049dc:	2302      	movs	r3, #2
 80049de:	e1c0      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x3a6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2254      	movs	r2, #84	@ 0x54
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7ff fd04 	bl	80043fa <LL_ADC_REG_IsConversionOngoing>
 80049f2:	1e03      	subs	r3, r0, #0
 80049f4:	d000      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x3c>
 80049f6:	e1a3      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d100      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x46>
 8004a00:	e143      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d004      	beq.n	8004a18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a12:	4ac1      	ldr	r2, [pc, #772]	@ (8004d18 <HAL_ADC_ConfigChannel+0x35c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0019      	movs	r1, r3
 8004a22:	0010      	movs	r0, r2
 8004a24:	f7ff fc64 	bl	80042f0 <LL_ADC_REG_SetSequencerChAdd>
 8004a28:	e0c9      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	211f      	movs	r1, #31
 8004a34:	400b      	ands	r3, r1
 8004a36:	210f      	movs	r1, #15
 8004a38:	4099      	lsls	r1, r3
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	4013      	ands	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	035b      	lsls	r3, r3, #13
 8004a48:	0b5b      	lsrs	r3, r3, #13
 8004a4a:	d105      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x9c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	221f      	movs	r2, #31
 8004a54:	4013      	ands	r3, r2
 8004a56:	e098      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d000      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0xa8>
 8004a62:	e091      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x1cc>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d000      	beq.n	8004a70 <HAL_ADC_ConfigChannel+0xb4>
 8004a6e:	e089      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x1c8>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2204      	movs	r2, #4
 8004a76:	4013      	ands	r3, r2
 8004a78:	d000      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0xc0>
 8004a7a:	e081      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x1c4>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	4013      	ands	r3, r2
 8004a84:	d000      	beq.n	8004a88 <HAL_ADC_ConfigChannel+0xcc>
 8004a86:	e079      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x1c0>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d000      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0xd8>
 8004a92:	e071      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x1bc>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d000      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0xe4>
 8004a9e:	e069      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x1b8>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2240      	movs	r2, #64	@ 0x40
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d000      	beq.n	8004aac <HAL_ADC_ConfigChannel+0xf0>
 8004aaa:	e061      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x1b4>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d000      	beq.n	8004ab8 <HAL_ADC_ConfigChannel+0xfc>
 8004ab6:	e059      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x1b0>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d151      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1ac>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4013      	ands	r3, r2
 8004ace:	d149      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x1a8>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d141      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x1a4>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	2380      	movs	r3, #128	@ 0x80
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d139      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1a0>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	2380      	movs	r3, #128	@ 0x80
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	4013      	ands	r3, r2
 8004af2:	d131      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x19c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	4013      	ands	r3, r2
 8004afe:	d129      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x198>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	01db      	lsls	r3, r3, #7
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d121      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x194>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4013      	ands	r3, r2
 8004b16:	d119      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x190>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	@ 0x80
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	4013      	ands	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x18c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d109      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x188>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	02db      	lsls	r3, r3, #11
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d001      	beq.n	8004b40 <HAL_ADC_ConfigChannel+0x184>
 8004b3c:	2312      	movs	r3, #18
 8004b3e:	e024      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b40:	2300      	movs	r3, #0
 8004b42:	e022      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b44:	2311      	movs	r3, #17
 8004b46:	e020      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	e01e      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	e01c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b50:	230e      	movs	r3, #14
 8004b52:	e01a      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b54:	230d      	movs	r3, #13
 8004b56:	e018      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	e016      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	e014      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b60:	230a      	movs	r3, #10
 8004b62:	e012      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b64:	2309      	movs	r3, #9
 8004b66:	e010      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	e00e      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	e00c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b70:	2306      	movs	r3, #6
 8004b72:	e00a      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b74:	2305      	movs	r3, #5
 8004b76:	e008      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e006      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e004      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e002      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	6852      	ldr	r2, [r2, #4]
 8004b8e:	201f      	movs	r0, #31
 8004b90:	4002      	ands	r2, r0
 8004b92:	4093      	lsls	r3, r2
 8004b94:	000a      	movs	r2, r1
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d808      	bhi.n	8004bbe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	001a      	movs	r2, r3
 8004bba:	f7ff fb79 	bl	80042b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	001a      	movs	r2, r3
 8004bcc:	f7ff fbc0 	bl	8004350 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db00      	blt.n	8004bda <HAL_ADC_ConfigChannel+0x21e>
 8004bd8:	e0bc      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bda:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7ff fb15 	bl	800420c <LL_ADC_GetCommonPathInternalCh>
 8004be2:	0003      	movs	r3, r0
 8004be4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a4d      	ldr	r2, [pc, #308]	@ (8004d20 <HAL_ADC_ConfigChannel+0x364>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d122      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bf8:	d11d      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2280      	movs	r2, #128	@ 0x80
 8004bfe:	0412      	lsls	r2, r2, #16
 8004c00:	4313      	orrs	r3, r2
 8004c02:	4a46      	ldr	r2, [pc, #280]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f7ff faec 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c0c:	4b45      	ldr	r3, [pc, #276]	@ (8004d24 <HAL_ADC_ConfigChannel+0x368>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4945      	ldr	r1, [pc, #276]	@ (8004d28 <HAL_ADC_ConfigChannel+0x36c>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fb fa90 	bl	8000138 <__udivsi3>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	0013      	movs	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c26:	e002      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f9      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c34:	e08e      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d2c <HAL_ADC_ConfigChannel+0x370>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10e      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	045b      	lsls	r3, r3, #17
 8004c46:	4013      	ands	r3, r2
 8004c48:	d109      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2280      	movs	r2, #128	@ 0x80
 8004c4e:	0452      	lsls	r2, r2, #17
 8004c50:	4313      	orrs	r3, r2
 8004c52:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c54:	0019      	movs	r1, r3
 8004c56:	0010      	movs	r0, r2
 8004c58:	f7ff fac4 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
 8004c5c:	e07a      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a33      	ldr	r2, [pc, #204]	@ (8004d30 <HAL_ADC_ConfigChannel+0x374>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d000      	beq.n	8004c6a <HAL_ADC_ConfigChannel+0x2ae>
 8004c68:	e074      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	03db      	lsls	r3, r3, #15
 8004c70:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c72:	d000      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x2ba>
 8004c74:	e06e      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	03d2      	lsls	r2, r2, #15
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	4a27      	ldr	r2, [pc, #156]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c80:	0019      	movs	r1, r3
 8004c82:	0010      	movs	r0, r2
 8004c84:	f7ff faae 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
 8004c88:	e064      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d004      	beq.n	8004ca0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <HAL_ADC_ConfigChannel+0x35c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0019      	movs	r1, r3
 8004caa:	0010      	movs	r0, r2
 8004cac:	f7ff fb31 	bl	8004312 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da4d      	bge.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cb8:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff faa6 	bl	800420c <LL_ADC_GetCommonPathInternalCh>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <HAL_ADC_ConfigChannel+0x364>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_ADC_ConfigChannel+0x378>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	4a11      	ldr	r2, [pc, #68]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	0010      	movs	r0, r2
 8004cda:	f7ff fa83 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
 8004cde:	e039      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a11      	ldr	r2, [pc, #68]	@ (8004d2c <HAL_ADC_ConfigChannel+0x370>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4a12      	ldr	r2, [pc, #72]	@ (8004d38 <HAL_ADC_ConfigChannel+0x37c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	f7ff fa75 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
 8004cfa:	e02b      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0b      	ldr	r2, [pc, #44]	@ (8004d30 <HAL_ADC_ConfigChannel+0x374>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d126      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a0c      	ldr	r2, [pc, #48]	@ (8004d3c <HAL_ADC_ConfigChannel+0x380>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	4a03      	ldr	r2, [pc, #12]	@ (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004d0e:	0019      	movs	r1, r3
 8004d10:	0010      	movs	r0, r2
 8004d12:	f7ff fa67 	bl	80041e4 <LL_ADC_SetCommonPathInternalCh>
 8004d16:	e01d      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
 8004d18:	80000004 	.word	0x80000004
 8004d1c:	40012708 	.word	0x40012708
 8004d20:	b0001000 	.word	0xb0001000
 8004d24:	2000000c 	.word	0x2000000c
 8004d28:	00030d40 	.word	0x00030d40
 8004d2c:	b8004000 	.word	0xb8004000
 8004d30:	b4002000 	.word	0xb4002000
 8004d34:	ff7fffff 	.word	0xff7fffff
 8004d38:	feffffff 	.word	0xfeffffff
 8004d3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	2220      	movs	r2, #32
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d4c:	2317      	movs	r3, #23
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2254      	movs	r2, #84	@ 0x54
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d5c:	2317      	movs	r3, #23
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)

08004d6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004d94:	46c0      	nop			@ (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	0002      	movs	r2, r0
 8004db4:	1dfb      	adds	r3, r7, #7
 8004db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dbe:	d809      	bhi.n	8004dd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc0:	1dfb      	adds	r3, r7, #7
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	231f      	movs	r3, #31
 8004dc8:	401a      	ands	r2, r3
 8004dca:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <__NVIC_EnableIRQ+0x30>)
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4091      	lsls	r1, r2
 8004dd0:	000a      	movs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	e000e100 	.word	0xe000e100

08004de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	0002      	movs	r2, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dee:	1dfb      	adds	r3, r7, #7
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df4:	d828      	bhi.n	8004e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004df6:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb4 <__NVIC_SetPriority+0xd4>)
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	33c0      	adds	r3, #192	@ 0xc0
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	589b      	ldr	r3, [r3, r2]
 8004e06:	1dfa      	adds	r2, r7, #7
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	0011      	movs	r1, r2
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	400a      	ands	r2, r1
 8004e10:	00d2      	lsls	r2, r2, #3
 8004e12:	21ff      	movs	r1, #255	@ 0xff
 8004e14:	4091      	lsls	r1, r2
 8004e16:	000a      	movs	r2, r1
 8004e18:	43d2      	mvns	r2, r2
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	22ff      	movs	r2, #255	@ 0xff
 8004e24:	401a      	ands	r2, r3
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	4003      	ands	r3, r0
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e34:	481f      	ldr	r0, [pc, #124]	@ (8004eb4 <__NVIC_SetPriority+0xd4>)
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	33c0      	adds	r3, #192	@ 0xc0
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e46:	e031      	b.n	8004eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e48:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <__NVIC_SetPriority+0xd8>)
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	0019      	movs	r1, r3
 8004e50:	230f      	movs	r3, #15
 8004e52:	400b      	ands	r3, r1
 8004e54:	3b08      	subs	r3, #8
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	3306      	adds	r3, #6
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	3304      	adds	r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1dfa      	adds	r2, r7, #7
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	0011      	movs	r1, r2
 8004e68:	2203      	movs	r2, #3
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	00d2      	lsls	r2, r2, #3
 8004e6e:	21ff      	movs	r1, #255	@ 0xff
 8004e70:	4091      	lsls	r1, r2
 8004e72:	000a      	movs	r2, r1
 8004e74:	43d2      	mvns	r2, r2
 8004e76:	401a      	ands	r2, r3
 8004e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	019b      	lsls	r3, r3, #6
 8004e7e:	22ff      	movs	r2, #255	@ 0xff
 8004e80:	401a      	ands	r2, r3
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	0018      	movs	r0, r3
 8004e88:	2303      	movs	r3, #3
 8004e8a:	4003      	ands	r3, r0
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e90:	4809      	ldr	r0, [pc, #36]	@ (8004eb8 <__NVIC_SetPriority+0xd8>)
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	001c      	movs	r4, r3
 8004e98:	230f      	movs	r3, #15
 8004e9a:	4023      	ands	r3, r4
 8004e9c:	3b08      	subs	r3, #8
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	3306      	adds	r3, #6
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	18c3      	adds	r3, r0, r3
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	e000e100 	.word	0xe000e100
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	045b      	lsls	r3, r3, #17
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d301      	bcc.n	8004ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e010      	b.n	8004ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <SysTick_Config+0x44>)
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004edc:	2301      	movs	r3, #1
 8004ede:	425b      	negs	r3, r3
 8004ee0:	2103      	movs	r1, #3
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7ff ff7c 	bl	8004de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <SysTick_Config+0x44>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eee:	4b04      	ldr	r3, [pc, #16]	@ (8004f00 <SysTick_Config+0x44>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	e000e010 	.word	0xe000e010

08004f04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	210f      	movs	r1, #15
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	1c02      	adds	r2, r0, #0
 8004f14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b25b      	sxtb	r3, r3
 8004f1e:	0011      	movs	r1, r2
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7ff ff5d 	bl	8004de0 <__NVIC_SetPriority>
}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	0002      	movs	r2, r0
 8004f36:	1dfb      	adds	r3, r7, #7
 8004f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff ff33 	bl	8004dac <__NVIC_EnableIRQ>
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff ffaf 	bl	8004ebc <SysTick_Config>
 8004f5e:	0003      	movs	r3, r0
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e077      	b.n	800506a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005074 <HAL_DMA_Init+0x10c>)
 8004f80:	4694      	mov	ip, r2
 8004f82:	4463      	add	r3, ip
 8004f84:	2114      	movs	r1, #20
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7fb f8d6 	bl	8000138 <__udivsi3>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	009a      	lsls	r2, r3, #2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2225      	movs	r2, #37	@ 0x25
 8004f98:	2102      	movs	r1, #2
 8004f9a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4934      	ldr	r1, [pc, #208]	@ (8005078 <HAL_DMA_Init+0x110>)
 8004fa8:	400a      	ands	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 f971 	bl	80052cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	01db      	lsls	r3, r3, #7
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d102      	bne.n	8004ffc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005004:	213f      	movs	r1, #63	@ 0x3f
 8005006:	400a      	ands	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005012:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d011      	beq.n	8005040 <HAL_DMA_Init+0xd8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d80d      	bhi.n	8005040 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 f97c 	bl	8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e008      	b.n	8005052 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2225      	movs	r2, #37	@ 0x25
 800505c:	2101      	movs	r1, #1
 800505e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	@ 0x24
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	bffdfff8 	.word	0xbffdfff8
 8005078:	ffff800f 	.word	0xffff800f

0800507c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	210f      	movs	r1, #15
 8005086:	187b      	adds	r3, r7, r1
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2225      	movs	r2, #37	@ 0x25
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d006      	beq.n	80050a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800509e:	187b      	adds	r3, r7, r1
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e049      	b.n	800513a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	210e      	movs	r1, #14
 80050b2:	438a      	bics	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2101      	movs	r1, #1
 80050c2:	438a      	bics	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d0:	491d      	ldr	r1, [pc, #116]	@ (8005148 <HAL_DMA_Abort_IT+0xcc>)
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80050d6:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_DMA_Abort_IT+0xd0>)
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	221c      	movs	r2, #28
 80050e0:	4013      	ands	r3, r2
 80050e2:	2201      	movs	r2, #1
 80050e4:	409a      	lsls	r2, r3
 80050e6:	4b19      	ldr	r3, [pc, #100]	@ (800514c <HAL_DMA_Abort_IT+0xd0>)
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80050f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005108:	490f      	ldr	r1, [pc, #60]	@ (8005148 <HAL_DMA_Abort_IT+0xcc>)
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005116:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2225      	movs	r2, #37	@ 0x25
 800511c:	2101      	movs	r1, #1
 800511e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	@ 0x24
 8005124:	2100      	movs	r1, #0
 8005126:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	0010      	movs	r0, r2
 8005138:	4798      	blx	r3
    }
  }
  return status;
 800513a:	230f      	movs	r3, #15
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	781b      	ldrb	r3, [r3, #0]
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fffffeff 	.word	0xfffffeff
 800514c:	40020000 	.word	0x40020000

08005150 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005158:	4b55      	ldr	r3, [pc, #340]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	221c      	movs	r2, #28
 800516c:	4013      	ands	r3, r2
 800516e:	2204      	movs	r2, #4
 8005170:	409a      	lsls	r2, r3
 8005172:	0013      	movs	r3, r2
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4013      	ands	r3, r2
 8005178:	d027      	beq.n	80051ca <HAL_DMA_IRQHandler+0x7a>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2204      	movs	r2, #4
 800517e:	4013      	ands	r3, r2
 8005180:	d023      	beq.n	80051ca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2220      	movs	r2, #32
 800518a:	4013      	ands	r3, r2
 800518c:	d107      	bne.n	800519e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2104      	movs	r1, #4
 800519a:	438a      	bics	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800519e:	4b44      	ldr	r3, [pc, #272]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	221c      	movs	r2, #28
 80051a8:	4013      	ands	r3, r2
 80051aa:	2204      	movs	r2, #4
 80051ac:	409a      	lsls	r2, r3
 80051ae:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d100      	bne.n	80051be <HAL_DMA_IRQHandler+0x6e>
 80051bc:	e073      	b.n	80052a6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	0010      	movs	r0, r2
 80051c6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80051c8:	e06d      	b.n	80052a6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	221c      	movs	r2, #28
 80051d0:	4013      	ands	r3, r2
 80051d2:	2202      	movs	r2, #2
 80051d4:	409a      	lsls	r2, r3
 80051d6:	0013      	movs	r3, r2
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4013      	ands	r3, r2
 80051dc:	d02e      	beq.n	800523c <HAL_DMA_IRQHandler+0xec>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2202      	movs	r2, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d02a      	beq.n	800523c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2220      	movs	r2, #32
 80051ee:	4013      	ands	r3, r2
 80051f0:	d10b      	bne.n	800520a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	210a      	movs	r1, #10
 80051fe:	438a      	bics	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2225      	movs	r2, #37	@ 0x25
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 800520c:	6859      	ldr	r1, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	221c      	movs	r2, #28
 8005214:	4013      	ands	r3, r2
 8005216:	2202      	movs	r2, #2
 8005218:	409a      	lsls	r2, r3
 800521a:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	@ 0x24
 8005224:	2100      	movs	r1, #0
 8005226:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d03a      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	0010      	movs	r0, r2
 8005238:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800523a:	e034      	b.n	80052a6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	221c      	movs	r2, #28
 8005242:	4013      	ands	r3, r2
 8005244:	2208      	movs	r2, #8
 8005246:	409a      	lsls	r2, r3
 8005248:	0013      	movs	r3, r2
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	d02b      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x158>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2208      	movs	r2, #8
 8005254:	4013      	ands	r3, r2
 8005256:	d027      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	210e      	movs	r1, #14
 8005264:	438a      	bics	r2, r1
 8005266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	221c      	movs	r2, #28
 8005272:	4013      	ands	r3, r2
 8005274:	2201      	movs	r2, #1
 8005276:	409a      	lsls	r2, r3
 8005278:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <HAL_DMA_IRQHandler+0x160>)
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2225      	movs	r2, #37	@ 0x25
 8005288:	2101      	movs	r1, #1
 800528a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	@ 0x24
 8005290:	2100      	movs	r1, #0
 8005292:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	0010      	movs	r0, r2
 80052a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46c0      	nop			@ (mov r8, r8)
}
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b004      	add	sp, #16
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40020000 	.word	0x40020000

080052b4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2225      	movs	r2, #37	@ 0x25
 80052c0:	5c9b      	ldrb	r3, [r3, r2]
 80052c2:	b2db      	uxtb	r3, r3
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b002      	add	sp, #8
 80052ca:	bd80      	pop	{r7, pc}

080052cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	4a10      	ldr	r2, [pc, #64]	@ (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80052dc:	4694      	mov	ip, r2
 80052de:	4463      	add	r3, ip
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	001a      	movs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	001a      	movs	r2, r3
 80052ee:	23ff      	movs	r3, #255	@ 0xff
 80052f0:	4013      	ands	r3, r2
 80052f2:	3b08      	subs	r3, #8
 80052f4:	2114      	movs	r1, #20
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fa ff1e 	bl	8000138 <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a07      	ldr	r2, [pc, #28]	@ (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005304:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	221f      	movs	r2, #31
 800530a:	4013      	ands	r3, r2
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b004      	add	sp, #16
 800531a:	bd80      	pop	{r7, pc}
 800531c:	10008200 	.word	0x10008200
 8005320:	40020880 	.word	0x40020880

08005324 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	223f      	movs	r2, #63	@ 0x3f
 8005332:	4013      	ands	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a0a      	ldr	r2, [pc, #40]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800533a:	4694      	mov	ip, r2
 800533c:	4463      	add	r3, ip
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	001a      	movs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a07      	ldr	r2, [pc, #28]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	2203      	movs	r2, #3
 8005352:	4013      	ands	r3, r2
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	46bd      	mov	sp, r7
 8005360:	b004      	add	sp, #16
 8005362:	bd80      	pop	{r7, pc}
 8005364:	1000823f 	.word	0x1000823f
 8005368:	40020940 	.word	0x40020940

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800537a:	e147      	b.n	800560c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2101      	movs	r1, #1
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4091      	lsls	r1, r2
 8005386:	000a      	movs	r2, r1
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d100      	bne.n	8005394 <HAL_GPIO_Init+0x28>
 8005392:	e138      	b.n	8005606 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	4013      	ands	r3, r2
 800539c:	2b01      	cmp	r3, #1
 800539e:	d005      	beq.n	80053ac <HAL_GPIO_Init+0x40>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2203      	movs	r2, #3
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d130      	bne.n	800540e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	2203      	movs	r2, #3
 80053b8:	409a      	lsls	r2, r3
 80053ba:	0013      	movs	r3, r2
 80053bc:	43da      	mvns	r2, r3
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4013      	ands	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	409a      	lsls	r2, r3
 80053ce:	0013      	movs	r3, r2
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053e2:	2201      	movs	r2, #1
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	409a      	lsls	r2, r3
 80053e8:	0013      	movs	r3, r2
 80053ea:	43da      	mvns	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	2201      	movs	r2, #1
 80053fa:	401a      	ands	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	409a      	lsls	r2, r3
 8005400:	0013      	movs	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	4013      	ands	r3, r2
 8005416:	2b03      	cmp	r3, #3
 8005418:	d017      	beq.n	800544a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	2203      	movs	r2, #3
 8005426:	409a      	lsls	r2, r3
 8005428:	0013      	movs	r3, r2
 800542a:	43da      	mvns	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	0013      	movs	r3, r2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2203      	movs	r2, #3
 8005450:	4013      	ands	r3, r2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d123      	bne.n	800549e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	08da      	lsrs	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3208      	adds	r2, #8
 800545e:	0092      	lsls	r2, r2, #2
 8005460:	58d3      	ldr	r3, [r2, r3]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2207      	movs	r2, #7
 8005468:	4013      	ands	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	220f      	movs	r2, #15
 800546e:	409a      	lsls	r2, r3
 8005470:	0013      	movs	r3, r2
 8005472:	43da      	mvns	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2107      	movs	r1, #7
 8005482:	400b      	ands	r3, r1
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	409a      	lsls	r2, r3
 8005488:	0013      	movs	r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	08da      	lsrs	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3208      	adds	r2, #8
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	6939      	ldr	r1, [r7, #16]
 800549c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	409a      	lsls	r2, r3
 80054ac:	0013      	movs	r3, r2
 80054ae:	43da      	mvns	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2203      	movs	r2, #3
 80054bc:	401a      	ands	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	0013      	movs	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	23c0      	movs	r3, #192	@ 0xc0
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	4013      	ands	r3, r2
 80054dc:	d100      	bne.n	80054e0 <HAL_GPIO_Init+0x174>
 80054de:	e092      	b.n	8005606 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80054e0:	4a50      	ldr	r2, [pc, #320]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	3318      	adds	r3, #24
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	589b      	ldr	r3, [r3, r2]
 80054ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2203      	movs	r2, #3
 80054f2:	4013      	ands	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	220f      	movs	r2, #15
 80054f8:	409a      	lsls	r2, r3
 80054fa:	0013      	movs	r3, r2
 80054fc:	43da      	mvns	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	23a0      	movs	r3, #160	@ 0xa0
 8005508:	05db      	lsls	r3, r3, #23
 800550a:	429a      	cmp	r2, r3
 800550c:	d013      	beq.n	8005536 <HAL_GPIO_Init+0x1ca>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a45      	ldr	r2, [pc, #276]	@ (8005628 <HAL_GPIO_Init+0x2bc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00d      	beq.n	8005532 <HAL_GPIO_Init+0x1c6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a44      	ldr	r2, [pc, #272]	@ (800562c <HAL_GPIO_Init+0x2c0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <HAL_GPIO_Init+0x1c2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a43      	ldr	r2, [pc, #268]	@ (8005630 <HAL_GPIO_Init+0x2c4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_GPIO_Init+0x1be>
 8005526:	2303      	movs	r3, #3
 8005528:	e006      	b.n	8005538 <HAL_GPIO_Init+0x1cc>
 800552a:	2305      	movs	r3, #5
 800552c:	e004      	b.n	8005538 <HAL_GPIO_Init+0x1cc>
 800552e:	2302      	movs	r3, #2
 8005530:	e002      	b.n	8005538 <HAL_GPIO_Init+0x1cc>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_GPIO_Init+0x1cc>
 8005536:	2300      	movs	r3, #0
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	2103      	movs	r1, #3
 800553c:	400a      	ands	r2, r1
 800553e:	00d2      	lsls	r2, r2, #3
 8005540:	4093      	lsls	r3, r2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005548:	4936      	ldr	r1, [pc, #216]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	089b      	lsrs	r3, r3, #2
 800554e:	3318      	adds	r3, #24
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005556:	4b33      	ldr	r3, [pc, #204]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	43da      	mvns	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	035b      	lsls	r3, r3, #13
 800556e:	4013      	ands	r3, r2
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800557a:	4b2a      	ldr	r3, [pc, #168]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005580:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	43da      	mvns	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	039b      	lsls	r3, r3, #14
 8005598:	4013      	ands	r3, r2
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 80055ac:	2384      	movs	r3, #132	@ 0x84
 80055ae:	58d3      	ldr	r3, [r2, r3]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	43da      	mvns	r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	029b      	lsls	r3, r3, #10
 80055c4:	4013      	ands	r3, r2
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055d0:	4914      	ldr	r1, [pc, #80]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 80055d2:	2284      	movs	r2, #132	@ 0x84
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80055d8:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 80055da:	2380      	movs	r3, #128	@ 0x80
 80055dc:	58d3      	ldr	r3, [r2, r3]
 80055de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	43da      	mvns	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4013      	ands	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	025b      	lsls	r3, r3, #9
 80055f2:	4013      	ands	r3, r2
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055fe:	4909      	ldr	r1, [pc, #36]	@ (8005624 <HAL_GPIO_Init+0x2b8>)
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	3301      	adds	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	40da      	lsrs	r2, r3
 8005614:	1e13      	subs	r3, r2, #0
 8005616:	d000      	beq.n	800561a <HAL_GPIO_Init+0x2ae>
 8005618:	e6b0      	b.n	800537c <HAL_GPIO_Init+0x10>
  }
}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b006      	add	sp, #24
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021800 	.word	0x40021800
 8005628:	50000400 	.word	0x50000400
 800562c:	50000800 	.word	0x50000800
 8005630:	50000c00 	.word	0x50000c00

08005634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	000a      	movs	r2, r1
 800563e:	1cbb      	adds	r3, r7, #2
 8005640:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	1cba      	adds	r2, r7, #2
 8005648:	8812      	ldrh	r2, [r2, #0]
 800564a:	4013      	ands	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800564e:	230f      	movs	r3, #15
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e003      	b.n	8005660 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005658:	230f      	movs	r3, #15
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005660:	230f      	movs	r3, #15
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	781b      	ldrb	r3, [r3, #0]
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	0008      	movs	r0, r1
 8005678:	0011      	movs	r1, r2
 800567a:	1cbb      	adds	r3, r7, #2
 800567c:	1c02      	adds	r2, r0, #0
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	1c7b      	adds	r3, r7, #1
 8005682:	1c0a      	adds	r2, r1, #0
 8005684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005686:	1c7b      	adds	r3, r7, #1
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800568e:	1cbb      	adds	r3, r7, #2
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005696:	e003      	b.n	80056a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005698:	1cbb      	adds	r3, r7, #2
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	0002      	movs	r2, r0
 80056b0:	1dbb      	adds	r3, r7, #6
 80056b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	1dba      	adds	r2, r7, #6
 80056ba:	8812      	ldrh	r2, [r2, #0]
 80056bc:	4013      	ands	r3, r2
 80056be:	d008      	beq.n	80056d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80056c0:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80056c2:	1dba      	adds	r2, r7, #6
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80056c8:	1dbb      	adds	r3, r7, #6
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 f815 	bl	80056fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80056d2:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	1dba      	adds	r2, r7, #6
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	4013      	ands	r3, r2
 80056dc:	d008      	beq.n	80056f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80056e0:	1dba      	adds	r2, r7, #6
 80056e2:	8812      	ldrh	r2, [r2, #0]
 80056e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80056e6:	1dbb      	adds	r3, r7, #6
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fd fad2 	bl	8002c94 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80056f0:	46c0      	nop			@ (mov r8, r8)
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b002      	add	sp, #8
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021800 	.word	0x40021800

080056fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	0002      	movs	r2, r0
 8005704:	1dbb      	adds	r3, r7, #6
 8005706:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005708:	46c0      	nop			@ (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e08f      	b.n	8005842 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2241      	movs	r2, #65	@ 0x41
 8005726:	5c9b      	ldrb	r3, [r3, r2]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2240      	movs	r2, #64	@ 0x40
 8005732:	2100      	movs	r1, #0
 8005734:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f7fe f9d7 	bl	8003aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2241      	movs	r2, #65	@ 0x41
 8005742:	2124      	movs	r1, #36	@ 0x24
 8005744:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2101      	movs	r1, #1
 8005752:	438a      	bics	r2, r1
 8005754:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	493b      	ldr	r1, [pc, #236]	@ (800584c <HAL_I2C_Init+0x13c>)
 8005760:	400a      	ands	r2, r1
 8005762:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4938      	ldr	r1, [pc, #224]	@ (8005850 <HAL_I2C_Init+0x140>)
 8005770:	400a      	ands	r2, r1
 8005772:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d108      	bne.n	800578e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2180      	movs	r1, #128	@ 0x80
 8005786:	0209      	lsls	r1, r1, #8
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e007      	b.n	800579e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2184      	movs	r1, #132	@ 0x84
 8005798:	0209      	lsls	r1, r1, #8
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d109      	bne.n	80057ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2180      	movs	r1, #128	@ 0x80
 80057b2:	0109      	lsls	r1, r1, #4
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	e007      	b.n	80057ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4923      	ldr	r1, [pc, #140]	@ (8005854 <HAL_I2C_Init+0x144>)
 80057c6:	400a      	ands	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4920      	ldr	r1, [pc, #128]	@ (8005858 <HAL_I2C_Init+0x148>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	491a      	ldr	r1, [pc, #104]	@ (8005850 <HAL_I2C_Init+0x140>)
 80057e6:	400a      	ands	r2, r1
 80057e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69d9      	ldr	r1, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2101      	movs	r1, #1
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2241      	movs	r2, #65	@ 0x41
 800582e:	2120      	movs	r1, #32
 8005830:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2242      	movs	r2, #66	@ 0x42
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	f0ffffff 	.word	0xf0ffffff
 8005850:	ffff7fff 	.word	0xffff7fff
 8005854:	fffff7ff 	.word	0xfffff7ff
 8005858:	02008000 	.word	0x02008000

0800585c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
  }
}
 8005888:	46c0      	nop			@ (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b004      	add	sp, #16
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	001a      	movs	r2, r3
 80058ae:	2301      	movs	r3, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d010      	beq.n	80058d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	09db      	lsrs	r3, r3, #7
 80058b8:	001a      	movs	r2, r3
 80058ba:	2301      	movs	r3, #1
 80058bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058be:	d00a      	beq.n	80058d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c4:	2201      	movs	r2, #1
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2280      	movs	r2, #128	@ 0x80
 80058d2:	0052      	lsls	r2, r2, #1
 80058d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	0a9b      	lsrs	r3, r3, #10
 80058da:	001a      	movs	r2, r3
 80058dc:	2301      	movs	r3, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d010      	beq.n	8005904 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	001a      	movs	r2, r3
 80058e8:	2301      	movs	r3, #1
 80058ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058ec:	d00a      	beq.n	8005904 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	2208      	movs	r2, #8
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2280      	movs	r2, #128	@ 0x80
 8005900:	00d2      	lsls	r2, r2, #3
 8005902:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	0a5b      	lsrs	r3, r3, #9
 8005908:	001a      	movs	r2, r3
 800590a:	2301      	movs	r3, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d010      	beq.n	8005932 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	09db      	lsrs	r3, r3, #7
 8005914:	001a      	movs	r2, r3
 8005916:	2301      	movs	r3, #1
 8005918:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800591a:	d00a      	beq.n	8005932 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	2202      	movs	r2, #2
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2280      	movs	r2, #128	@ 0x80
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	220b      	movs	r2, #11
 800593c:	4013      	ands	r3, r2
 800593e:	d005      	beq.n	800594c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0011      	movs	r1, r2
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fc44 	bl	80061d4 <I2C_ITError>
  }
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b006      	add	sp, #24
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800596c:	46c0      	nop			@ (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b002      	add	sp, #8
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	0008      	movs	r0, r1
 800597e:	0011      	movs	r1, r2
 8005980:	1cfb      	adds	r3, r7, #3
 8005982:	1c02      	adds	r2, r0, #0
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	003b      	movs	r3, r7
 8005988:	1c0a      	adds	r2, r1, #0
 800598a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800598c:	46c0      	nop			@ (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800599c:	46c0      	nop			@ (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059ac:	46c0      	nop			@ (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2240      	movs	r2, #64	@ 0x40
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <I2C_Slave_ISR_IT+0x24>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e0fb      	b.n	8005be0 <I2C_Slave_ISR_IT+0x21c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2240      	movs	r2, #64	@ 0x40
 80059ec:	2101      	movs	r1, #1
 80059ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	001a      	movs	r2, r3
 80059f6:	2301      	movs	r3, #1
 80059f8:	4013      	ands	r3, r2
 80059fa:	d00c      	beq.n	8005a16 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	001a      	movs	r2, r3
 8005a02:	2301      	movs	r3, #1
 8005a04:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a06:	d006      	beq.n	8005a16 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	0011      	movs	r1, r2
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 f9f6 	bl	8005e00 <I2C_ITSlaveCplt>
 8005a14:	e0df      	b.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d054      	beq.n	8005acc <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	001a      	movs	r2, r3
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a2c:	d04e      	beq.n	8005acc <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d12d      	bne.n	8005a94 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2241      	movs	r2, #65	@ 0x41
 8005a3c:	5c9b      	ldrb	r3, [r3, r2]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b28      	cmp	r3, #40	@ 0x28
 8005a42:	d10b      	bne.n	8005a5c <I2C_Slave_ISR_IT+0x98>
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	2380      	movs	r3, #128	@ 0x80
 8005a48:	049b      	lsls	r3, r3, #18
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d106      	bne.n	8005a5c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	0011      	movs	r1, r2
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fb63 	bl	8006120 <I2C_ITListenCplt>
 8005a5a:	e036      	b.n	8005aca <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2241      	movs	r2, #65	@ 0x41
 8005a60:	5c9b      	ldrb	r3, [r3, r2]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b29      	cmp	r3, #41	@ 0x29
 8005a66:	d110      	bne.n	8005a8a <I2C_Slave_ISR_IT+0xc6>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8005be8 <I2C_Slave_ISR_IT+0x224>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00c      	beq.n	8005a8a <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2210      	movs	r2, #16
 8005a76:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 fcd5 	bl	800642a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f956 	bl	8005d34 <I2C_ITSlaveSeqCplt>
 8005a88:	e01f      	b.n	8005aca <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a92:	e09d      	b.n	8005bd0 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <I2C_Slave_ISR_IT+0xf6>
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	045b      	lsls	r3, r3, #17
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d000      	beq.n	8005aba <I2C_Slave_ISR_IT+0xf6>
 8005ab8:	e08a      	b.n	8005bd0 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0011      	movs	r1, r2
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 fb86 	bl	80061d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ac8:	e082      	b.n	8005bd0 <I2C_Slave_ISR_IT+0x20c>
 8005aca:	e081      	b.n	8005bd0 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d031      	beq.n	8005b3c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	001a      	movs	r2, r3
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ae2:	d02b      	beq.n	8005b3c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d018      	beq.n	8005b20 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d154      	bne.n	8005bd4 <I2C_Slave_ISR_IT+0x210>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005be8 <I2C_Slave_ISR_IT+0x224>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d050      	beq.n	8005bd4 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f000 f8fd 	bl	8005d34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b3a:	e04b      	b.n	8005bd4 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	08db      	lsrs	r3, r3, #3
 8005b40:	001a      	movs	r2, r3
 8005b42:	2301      	movs	r3, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d00c      	beq.n	8005b62 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	08db      	lsrs	r3, r3, #3
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b52:	d006      	beq.n	8005b62 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	0011      	movs	r1, r2
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f846 	bl	8005bec <I2C_ITAddrCplt>
 8005b60:	e039      	b.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	001a      	movs	r2, r3
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d033      	beq.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	001a      	movs	r2, r3
 8005b74:	2301      	movs	r3, #1
 8005b76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b78:	d02d      	beq.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d018      	beq.n	8005bb6 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005bb4:	e00f      	b.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	045b      	lsls	r3, r3, #17
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d002      	beq.n	8005bc6 <I2C_Slave_ISR_IT+0x202>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 f8b3 	bl	8005d34 <I2C_ITSlaveSeqCplt>
 8005bce:	e002      	b.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8005bd0:	46c0      	nop			@ (mov r8, r8)
 8005bd2:	e000      	b.n	8005bd6 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8005bd4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2240      	movs	r2, #64	@ 0x40
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b006      	add	sp, #24
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	ffff0000 	.word	0xffff0000

08005bec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2241      	movs	r2, #65	@ 0x41
 8005bfa:	5c9b      	ldrb	r3, [r3, r2]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	001a      	movs	r2, r3
 8005c00:	2328      	movs	r3, #40	@ 0x28
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b28      	cmp	r3, #40	@ 0x28
 8005c06:	d000      	beq.n	8005c0a <I2C_ITAddrCplt+0x1e>
 8005c08:	e088      	b.n	8005d1c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	250f      	movs	r5, #15
 8005c16:	197b      	adds	r3, r7, r5
 8005c18:	2101      	movs	r1, #1
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	200c      	movs	r0, #12
 8005c2a:	183b      	adds	r3, r7, r0
 8005c2c:	21fe      	movs	r1, #254	@ 0xfe
 8005c2e:	400a      	ands	r2, r1
 8005c30:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	240a      	movs	r4, #10
 8005c3c:	193b      	adds	r3, r7, r4
 8005c3e:	0592      	lsls	r2, r2, #22
 8005c40:	0d92      	lsrs	r2, r2, #22
 8005c42:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	21fe      	movs	r1, #254	@ 0xfe
 8005c52:	400a      	ands	r2, r1
 8005c54:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d148      	bne.n	8005cf0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c5e:	0021      	movs	r1, r4
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	4053      	eors	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	001a      	movs	r2, r3
 8005c72:	2306      	movs	r3, #6
 8005c74:	4013      	ands	r3, r2
 8005c76:	d120      	bne.n	8005cba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005c78:	183b      	adds	r3, r7, r0
 8005c7a:	187a      	adds	r2, r7, r1
 8005c7c:	8812      	ldrh	r2, [r2, #0]
 8005c7e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d14c      	bne.n	8005d2c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2240      	movs	r2, #64	@ 0x40
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ca8:	183b      	adds	r3, r7, r0
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	197b      	adds	r3, r7, r5
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7ff fe5e 	bl	8005974 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cb8:	e038      	b.n	8005d2c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005cba:	240c      	movs	r4, #12
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	18ba      	adds	r2, r7, r2
 8005cc2:	8812      	ldrh	r2, [r2, #0]
 8005cc4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	021a      	lsls	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	0011      	movs	r1, r2
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 fbec 	bl	80064ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	@ 0x40
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cdc:	193b      	adds	r3, r7, r4
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	230f      	movs	r3, #15
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	7819      	ldrb	r1, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7ff fe43 	bl	8005974 <HAL_I2C_AddrCallback>
}
 8005cee:	e01d      	b.n	8005d2c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 fbd7 	bl	80064ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2240      	movs	r2, #64	@ 0x40
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d06:	230c      	movs	r3, #12
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	230f      	movs	r3, #15
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	7819      	ldrb	r1, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fe2d 	bl	8005974 <HAL_I2C_AddrCallback>
}
 8005d1a:	e007      	b.n	8005d2c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2240      	movs	r2, #64	@ 0x40
 8005d28:	2100      	movs	r1, #0
 8005d2a:	5499      	strb	r1, [r3, r2]
}
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b004      	add	sp, #16
 8005d32:	bdb0      	pop	{r4, r5, r7, pc}

08005d34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2242      	movs	r2, #66	@ 0x42
 8005d48:	2100      	movs	r1, #0
 8005d4a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0b9b      	lsrs	r3, r3, #14
 8005d50:	001a      	movs	r2, r3
 8005d52:	2301      	movs	r3, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	d008      	beq.n	8005d6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4925      	ldr	r1, [pc, #148]	@ (8005df8 <I2C_ITSlaveSeqCplt+0xc4>)
 8005d64:	400a      	ands	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e00d      	b.n	8005d86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0bdb      	lsrs	r3, r3, #15
 8005d6e:	001a      	movs	r2, r3
 8005d70:	2301      	movs	r3, #1
 8005d72:	4013      	ands	r3, r2
 8005d74:	d007      	beq.n	8005d86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	491e      	ldr	r1, [pc, #120]	@ (8005dfc <I2C_ITSlaveSeqCplt+0xc8>)
 8005d82:	400a      	ands	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2241      	movs	r2, #65	@ 0x41
 8005d8a:	5c9b      	ldrb	r3, [r3, r2]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b29      	cmp	r3, #41	@ 0x29
 8005d90:	d114      	bne.n	8005dbc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2241      	movs	r2, #65	@ 0x41
 8005d96:	2128      	movs	r1, #40	@ 0x28
 8005d98:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2221      	movs	r2, #33	@ 0x21
 8005d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2101      	movs	r1, #1
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 fb81 	bl	80064ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2240      	movs	r2, #64	@ 0x40
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff fdcd 	bl	8005954 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dba:	e019      	b.n	8005df0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2241      	movs	r2, #65	@ 0x41
 8005dc0:	5c9b      	ldrb	r3, [r3, r2]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc6:	d113      	bne.n	8005df0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2241      	movs	r2, #65	@ 0x41
 8005dcc:	2128      	movs	r1, #40	@ 0x28
 8005dce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2222      	movs	r2, #34	@ 0x22
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2102      	movs	r1, #2
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f000 fb66 	bl	80064ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7ff fdba 	bl	8005964 <HAL_I2C_SlaveRxCpltCallback>
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b004      	add	sp, #16
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	ffffbfff 	.word	0xffffbfff
 8005dfc:	ffff7fff 	.word	0xffff7fff

08005e00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e1c:	200b      	movs	r0, #11
 8005e1e:	183b      	adds	r3, r7, r0
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	2141      	movs	r1, #65	@ 0x41
 8005e24:	5c52      	ldrb	r2, [r2, r1]
 8005e26:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e30:	183b      	adds	r3, r7, r0
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b21      	cmp	r3, #33	@ 0x21
 8005e36:	d003      	beq.n	8005e40 <I2C_ITSlaveCplt+0x40>
 8005e38:	183b      	adds	r3, r7, r0
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b29      	cmp	r3, #41	@ 0x29
 8005e3e:	d109      	bne.n	8005e54 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e40:	4ab0      	ldr	r2, [pc, #704]	@ (8006104 <I2C_ITSlaveCplt+0x304>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fb30 	bl	80064ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2221      	movs	r2, #33	@ 0x21
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e52:	e020      	b.n	8005e96 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e54:	220b      	movs	r2, #11
 8005e56:	18bb      	adds	r3, r7, r2
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b22      	cmp	r3, #34	@ 0x22
 8005e5c:	d003      	beq.n	8005e66 <I2C_ITSlaveCplt+0x66>
 8005e5e:	18bb      	adds	r3, r7, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e64:	d109      	bne.n	8005e7a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e66:	4aa8      	ldr	r2, [pc, #672]	@ (8006108 <I2C_ITSlaveCplt+0x308>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0011      	movs	r1, r2
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fb1d 	bl	80064ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2222      	movs	r2, #34	@ 0x22
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e78:	e00d      	b.n	8005e96 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005e7a:	230b      	movs	r3, #11
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b28      	cmp	r3, #40	@ 0x28
 8005e82:	d108      	bne.n	8005e96 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005e84:	4aa1      	ldr	r2, [pc, #644]	@ (800610c <I2C_ITSlaveCplt+0x30c>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 fb0e 	bl	80064ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2180      	movs	r1, #128	@ 0x80
 8005ea2:	0209      	lsls	r1, r1, #8
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4997      	ldr	r1, [pc, #604]	@ (8006110 <I2C_ITSlaveCplt+0x310>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 fab5 	bl	800642a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	0b9b      	lsrs	r3, r3, #14
 8005ec4:	001a      	movs	r2, r3
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	498f      	ldr	r1, [pc, #572]	@ (8006114 <I2C_ITSlaveCplt+0x314>)
 8005ed8:	400a      	ands	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d020      	beq.n	8005f26 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ef2:	e018      	b.n	8005f26 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	0bdb      	lsrs	r3, r3, #15
 8005ef8:	001a      	movs	r2, r3
 8005efa:	2301      	movs	r3, #1
 8005efc:	4013      	ands	r3, r2
 8005efe:	d012      	beq.n	8005f26 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4983      	ldr	r1, [pc, #524]	@ (8006118 <I2C_ITSlaveCplt+0x318>)
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d006      	beq.n	8005f26 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	001a      	movs	r2, r3
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d020      	beq.n	8005f74 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2204      	movs	r2, #4
 8005f36:	4393      	bics	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	2204      	movs	r2, #4
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	001a      	movs	r2, r3
 8005f90:	2301      	movs	r3, #1
 8005f92:	4013      	ands	r3, r2
 8005f94:	d051      	beq.n	800603a <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	001a      	movs	r2, r3
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fa0:	d04b      	beq.n	800603a <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d12d      	bne.n	8006008 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2241      	movs	r2, #65	@ 0x41
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b28      	cmp	r3, #40	@ 0x28
 8005fb6:	d10b      	bne.n	8005fd0 <I2C_ITSlaveCplt+0x1d0>
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	049b      	lsls	r3, r3, #18
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d106      	bne.n	8005fd0 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 f8a9 	bl	8006120 <I2C_ITListenCplt>
 8005fce:	e034      	b.n	800603a <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2241      	movs	r2, #65	@ 0x41
 8005fd4:	5c9b      	ldrb	r3, [r3, r2]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b29      	cmp	r3, #41	@ 0x29
 8005fda:	d110      	bne.n	8005ffe <I2C_ITSlaveCplt+0x1fe>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a4f      	ldr	r2, [pc, #316]	@ (800611c <I2C_ITSlaveCplt+0x31c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00c      	beq.n	8005ffe <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2210      	movs	r2, #16
 8005fea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 fa1b 	bl	800642a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7ff fe9c 	bl	8005d34 <I2C_ITSlaveSeqCplt>
 8005ffc:	e01d      	b.n	800603a <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2210      	movs	r2, #16
 8006004:	61da      	str	r2, [r3, #28]
 8006006:	e018      	b.n	800603a <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2210      	movs	r2, #16
 800600e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006014:	2204      	movs	r2, #4
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <I2C_ITSlaveCplt+0x22c>
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	045b      	lsls	r3, r3, #17
 8006028:	429a      	cmp	r2, r3
 800602a:	d106      	bne.n	800603a <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f000 f8cd 	bl	80061d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2242      	movs	r2, #66	@ 0x42
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0011      	movs	r1, r2
 8006058:	0018      	movs	r0, r3
 800605a:	f000 f8bb 	bl	80061d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2241      	movs	r2, #65	@ 0x41
 8006062:	5c9b      	ldrb	r3, [r3, r2]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b28      	cmp	r3, #40	@ 0x28
 8006068:	d147      	bne.n	80060fa <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	0011      	movs	r1, r2
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f855 	bl	8006120 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006076:	e040      	b.n	80060fa <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607c:	4a27      	ldr	r2, [pc, #156]	@ (800611c <I2C_ITSlaveCplt+0x31c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d016      	beq.n	80060b0 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	0018      	movs	r0, r3
 8006086:	f7ff fe55 	bl	8005d34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a23      	ldr	r2, [pc, #140]	@ (800611c <I2C_ITSlaveCplt+0x31c>)
 800608e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2241      	movs	r2, #65	@ 0x41
 8006094:	2120      	movs	r1, #32
 8006096:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2240      	movs	r2, #64	@ 0x40
 80060a2:	2100      	movs	r1, #0
 80060a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff fc73 	bl	8005994 <HAL_I2C_ListenCpltCallback>
}
 80060ae:	e024      	b.n	80060fa <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2241      	movs	r2, #65	@ 0x41
 80060b4:	5c9b      	ldrb	r3, [r3, r2]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b22      	cmp	r3, #34	@ 0x22
 80060ba:	d10f      	bne.n	80060dc <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2241      	movs	r2, #65	@ 0x41
 80060c0:	2120      	movs	r1, #32
 80060c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2240      	movs	r2, #64	@ 0x40
 80060ce:	2100      	movs	r1, #0
 80060d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fc45 	bl	8005964 <HAL_I2C_SlaveRxCpltCallback>
}
 80060da:	e00e      	b.n	80060fa <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2241      	movs	r2, #65	@ 0x41
 80060e0:	2120      	movs	r1, #32
 80060e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2240      	movs	r2, #64	@ 0x40
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7ff fc2d 	bl	8005954 <HAL_I2C_SlaveTxCpltCallback>
}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b006      	add	sp, #24
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	00008001 	.word	0x00008001
 8006108:	00008002 	.word	0x00008002
 800610c:	00008003 	.word	0x00008003
 8006110:	fe00e800 	.word	0xfe00e800
 8006114:	ffffbfff 	.word	0xffffbfff
 8006118:	ffff7fff 	.word	0xffff7fff
 800611c:	ffff0000 	.word	0xffff0000

08006120 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a27      	ldr	r2, [pc, #156]	@ (80061cc <I2C_ITListenCplt+0xac>)
 800612e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2241      	movs	r2, #65	@ 0x41
 800613a:	2120      	movs	r1, #32
 800613c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2242      	movs	r2, #66	@ 0x42
 8006142:	2100      	movs	r1, #0
 8006144:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	001a      	movs	r2, r3
 8006152:	2301      	movs	r3, #1
 8006154:	4013      	ands	r3, r2
 8006156:	d022      	beq.n	800619e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d012      	beq.n	800619e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	2204      	movs	r2, #4
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800619e:	4a0c      	ldr	r2, [pc, #48]	@ (80061d0 <I2C_ITListenCplt+0xb0>)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0011      	movs	r1, r2
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 f981 	bl	80064ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2210      	movs	r2, #16
 80061b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2240      	movs	r2, #64	@ 0x40
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	0018      	movs	r0, r3
 80061be:	f7ff fbe9 	bl	8005994 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b002      	add	sp, #8
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	ffff0000 	.word	0xffff0000
 80061d0:	00008003 	.word	0x00008003

080061d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80061de:	200f      	movs	r0, #15
 80061e0:	183b      	adds	r3, r7, r0
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	2141      	movs	r1, #65	@ 0x41
 80061e6:	5c52      	ldrb	r2, [r2, r1]
 80061e8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2242      	movs	r2, #66	@ 0x42
 80061ee:	2100      	movs	r1, #0
 80061f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a72      	ldr	r2, [pc, #456]	@ (80063c0 <I2C_ITError+0x1ec>)
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800620a:	183b      	adds	r3, r7, r0
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b28      	cmp	r3, #40	@ 0x28
 8006210:	d007      	beq.n	8006222 <I2C_ITError+0x4e>
 8006212:	183b      	adds	r3, r7, r0
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b29      	cmp	r3, #41	@ 0x29
 8006218:	d003      	beq.n	8006222 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800621a:	183b      	adds	r3, r7, r0
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006220:	d10c      	bne.n	800623c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2103      	movs	r1, #3
 8006226:	0018      	movs	r0, r3
 8006228:	f000 f940 	bl	80064ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2241      	movs	r2, #65	@ 0x41
 8006230:	2128      	movs	r1, #40	@ 0x28
 8006232:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a63      	ldr	r2, [pc, #396]	@ (80063c4 <I2C_ITError+0x1f0>)
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34
 800623a:	e032      	b.n	80062a2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800623c:	4a62      	ldr	r2, [pc, #392]	@ (80063c8 <I2C_ITError+0x1f4>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f000 f932 	bl	80064ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0018      	movs	r0, r3
 800624c:	f000 f8ed 	bl	800642a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2241      	movs	r2, #65	@ 0x41
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b60      	cmp	r3, #96	@ 0x60
 800625a:	d01f      	beq.n	800629c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2241      	movs	r2, #65	@ 0x41
 8006260:	2120      	movs	r1, #32
 8006262:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	2220      	movs	r2, #32
 800626c:	4013      	ands	r3, r2
 800626e:	2b20      	cmp	r3, #32
 8006270:	d114      	bne.n	800629c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2210      	movs	r2, #16
 800627a:	4013      	ands	r3, r2
 800627c:	2b10      	cmp	r3, #16
 800627e:	d109      	bne.n	8006294 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2210      	movs	r2, #16
 8006286:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628c:	2204      	movs	r2, #4
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2220      	movs	r2, #32
 800629a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d03b      	beq.n	8006328 <I2C_ITError+0x154>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b11      	cmp	r3, #17
 80062b4:	d002      	beq.n	80062bc <I2C_ITError+0xe8>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b21      	cmp	r3, #33	@ 0x21
 80062ba:	d135      	bne.n	8006328 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	2380      	movs	r3, #128	@ 0x80
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	401a      	ands	r2, r3
 80062c8:	2380      	movs	r3, #128	@ 0x80
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d107      	bne.n	80062e0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	493c      	ldr	r1, [pc, #240]	@ (80063cc <I2C_ITError+0x1f8>)
 80062dc:	400a      	ands	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7fe ffe5 	bl	80052b4 <HAL_DMA_GetState>
 80062ea:	0003      	movs	r3, r0
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d016      	beq.n	800631e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	4a36      	ldr	r2, [pc, #216]	@ (80063d0 <I2C_ITError+0x1fc>)
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2240      	movs	r2, #64	@ 0x40
 80062fc:	2100      	movs	r1, #0
 80062fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006304:	0018      	movs	r0, r3
 8006306:	f7fe feb9 	bl	800507c <HAL_DMA_Abort_IT>
 800630a:	1e03      	subs	r3, r0, #0
 800630c:	d051      	beq.n	80063b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	0018      	movs	r0, r3
 800631a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800631c:	e049      	b.n	80063b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0018      	movs	r0, r3
 8006322:	f000 f859 	bl	80063d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006326:	e044      	b.n	80063b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d03b      	beq.n	80063a8 <I2C_ITError+0x1d4>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b12      	cmp	r3, #18
 8006334:	d002      	beq.n	800633c <I2C_ITError+0x168>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b22      	cmp	r3, #34	@ 0x22
 800633a:	d135      	bne.n	80063a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	2380      	movs	r3, #128	@ 0x80
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	401a      	ands	r2, r3
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	429a      	cmp	r2, r3
 800634e:	d107      	bne.n	8006360 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	491e      	ldr	r1, [pc, #120]	@ (80063d4 <I2C_ITError+0x200>)
 800635c:	400a      	ands	r2, r1
 800635e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006364:	0018      	movs	r0, r3
 8006366:	f7fe ffa5 	bl	80052b4 <HAL_DMA_GetState>
 800636a:	0003      	movs	r3, r0
 800636c:	2b01      	cmp	r3, #1
 800636e:	d016      	beq.n	800639e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	4a16      	ldr	r2, [pc, #88]	@ (80063d0 <I2C_ITError+0x1fc>)
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2240      	movs	r2, #64	@ 0x40
 800637c:	2100      	movs	r1, #0
 800637e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	0018      	movs	r0, r3
 8006386:	f7fe fe79 	bl	800507c <HAL_DMA_Abort_IT>
 800638a:	1e03      	subs	r3, r0, #0
 800638c:	d013      	beq.n	80063b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	0018      	movs	r0, r3
 800639a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800639c:	e00b      	b.n	80063b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f000 f819 	bl	80063d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063a6:	e006      	b.n	80063b6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 f814 	bl	80063d8 <I2C_TreatErrorCallback>
  }
}
 80063b0:	e002      	b.n	80063b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	e000      	b.n	80063b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063b6:	46c0      	nop			@ (mov r8, r8)
}
 80063b8:	46c0      	nop			@ (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	ffff0000 	.word	0xffff0000
 80063c4:	080059c5 	.word	0x080059c5
 80063c8:	00008003 	.word	0x00008003
 80063cc:	ffffbfff 	.word	0xffffbfff
 80063d0:	0800646f 	.word	0x0800646f
 80063d4:	ffff7fff 	.word	0xffff7fff

080063d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2241      	movs	r2, #65	@ 0x41
 80063e4:	5c9b      	ldrb	r3, [r3, r2]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b60      	cmp	r3, #96	@ 0x60
 80063ea:	d10f      	bne.n	800640c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2241      	movs	r2, #65	@ 0x41
 80063f0:	2120      	movs	r1, #32
 80063f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2240      	movs	r2, #64	@ 0x40
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fad5 	bl	80059b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800640a:	e00a      	b.n	8006422 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2240      	movs	r2, #64	@ 0x40
 8006416:	2100      	movs	r1, #0
 8006418:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	0018      	movs	r0, r3
 800641e:	f7ff fac1 	bl	80059a4 <HAL_I2C_ErrorCallback>
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b002      	add	sp, #8
 8006428:	bd80      	pop	{r7, pc}

0800642a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2202      	movs	r2, #2
 800643a:	4013      	ands	r3, r2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d103      	bne.n	8006448 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2200      	movs	r2, #0
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2201      	movs	r2, #1
 8006450:	4013      	ands	r3, r2
 8006452:	2b01      	cmp	r3, #1
 8006454:	d007      	beq.n	8006466 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2101      	movs	r1, #1
 8006462:	430a      	orrs	r2, r1
 8006464:	619a      	str	r2, [r3, #24]
  }
}
 8006466:	46c0      	nop			@ (mov r8, r8)
 8006468:	46bd      	mov	sp, r7
 800646a:	b002      	add	sp, #8
 800646c:	bd80      	pop	{r7, pc}

0800646e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	2200      	movs	r2, #0
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006498:	2200      	movs	r2, #0
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	0018      	movs	r0, r3
 80064a0:	f7ff ff9a 	bl	80063d8 <I2C_TreatErrorCallback>
}
 80064a4:	46c0      	nop			@ (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b004      	add	sp, #16
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	000a      	movs	r2, r1
 80064b6:	1cbb      	adds	r3, r7, #2
 80064b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064be:	1cbb      	adds	r3, r7, #2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	4013      	ands	r3, r2
 80064c6:	d010      	beq.n	80064ea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2242      	movs	r2, #66	@ 0x42
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2241      	movs	r2, #65	@ 0x41
 80064d4:	5c9b      	ldrb	r3, [r3, r2]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	001a      	movs	r2, r3
 80064da:	2328      	movs	r3, #40	@ 0x28
 80064dc:	4013      	ands	r3, r2
 80064de:	2b28      	cmp	r3, #40	@ 0x28
 80064e0:	d003      	beq.n	80064ea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22b0      	movs	r2, #176	@ 0xb0
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064ea:	1cbb      	adds	r3, r7, #2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	d010      	beq.n	8006516 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2244      	movs	r2, #68	@ 0x44
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2241      	movs	r2, #65	@ 0x41
 8006500:	5c9b      	ldrb	r3, [r3, r2]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	001a      	movs	r2, r3
 8006506:	2328      	movs	r3, #40	@ 0x28
 8006508:	4013      	ands	r3, r2
 800650a:	2b28      	cmp	r3, #40	@ 0x28
 800650c:	d003      	beq.n	8006516 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22b0      	movs	r2, #176	@ 0xb0
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006516:	1cbb      	adds	r3, r7, #2
 8006518:	2200      	movs	r2, #0
 800651a:	5e9b      	ldrsh	r3, [r3, r2]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da03      	bge.n	8006528 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	22b8      	movs	r2, #184	@ 0xb8
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006528:	1cbb      	adds	r3, r7, #2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	2b10      	cmp	r3, #16
 800652e:	d103      	bne.n	8006538 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2290      	movs	r2, #144	@ 0x90
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006538:	1cbb      	adds	r3, r7, #2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2b20      	cmp	r3, #32
 800653e:	d103      	bne.n	8006548 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006548:	1cbb      	adds	r3, r7, #2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d103      	bne.n	8006558 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2240      	movs	r2, #64	@ 0x40
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	43d9      	mvns	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	400a      	ands	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2241      	movs	r2, #65	@ 0x41
 8006582:	5c9b      	ldrb	r3, [r3, r2]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b20      	cmp	r3, #32
 8006588:	d138      	bne.n	80065fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2240      	movs	r2, #64	@ 0x40
 800658e:	5c9b      	ldrb	r3, [r3, r2]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006594:	2302      	movs	r3, #2
 8006596:	e032      	b.n	80065fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	2101      	movs	r1, #1
 800659e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2241      	movs	r2, #65	@ 0x41
 80065a4:	2124      	movs	r1, #36	@ 0x24
 80065a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2101      	movs	r1, #1
 80065b4:	438a      	bics	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4911      	ldr	r1, [pc, #68]	@ (8006608 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80065c4:	400a      	ands	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2101      	movs	r1, #1
 80065e4:	430a      	orrs	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2241      	movs	r2, #65	@ 0x41
 80065ec:	2120      	movs	r1, #32
 80065ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2240      	movs	r2, #64	@ 0x40
 80065f4:	2100      	movs	r1, #0
 80065f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	ffffefff 	.word	0xffffefff

0800660c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2241      	movs	r2, #65	@ 0x41
 800661a:	5c9b      	ldrb	r3, [r3, r2]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b20      	cmp	r3, #32
 8006620:	d139      	bne.n	8006696 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2240      	movs	r2, #64	@ 0x40
 8006626:	5c9b      	ldrb	r3, [r3, r2]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800662c:	2302      	movs	r3, #2
 800662e:	e033      	b.n	8006698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2240      	movs	r2, #64	@ 0x40
 8006634:	2101      	movs	r1, #1
 8006636:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2241      	movs	r2, #65	@ 0x41
 800663c:	2124      	movs	r1, #36	@ 0x24
 800663e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2101      	movs	r1, #1
 800664c:	438a      	bics	r2, r1
 800664e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a11      	ldr	r2, [pc, #68]	@ (80066a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800665c:	4013      	ands	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2101      	movs	r1, #1
 800667e:	430a      	orrs	r2, r1
 8006680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2241      	movs	r2, #65	@ 0x41
 8006686:	2120      	movs	r1, #32
 8006688:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2240      	movs	r2, #64	@ 0x40
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b004      	add	sp, #16
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	fffff0ff 	.word	0xfffff0ff

080066a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80066ac:	4b19      	ldr	r3, [pc, #100]	@ (8006714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a19      	ldr	r2, [pc, #100]	@ (8006718 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	0019      	movs	r1, r3
 80066b6:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	2380      	movs	r3, #128	@ 0x80
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d11f      	bne.n	8006708 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80066c8:	4b14      	ldr	r3, [pc, #80]	@ (800671c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	0013      	movs	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4912      	ldr	r1, [pc, #72]	@ (8006720 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80066d6:	0018      	movs	r0, r3
 80066d8:	f7f9 fd2e 	bl	8000138 <__udivsi3>
 80066dc:	0003      	movs	r3, r0
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066e2:	e008      	b.n	80066f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e001      	b.n	80066f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e009      	b.n	800670a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066f6:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	2380      	movs	r3, #128	@ 0x80
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	401a      	ands	r2, r3
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	429a      	cmp	r2, r3
 8006706:	d0ed      	beq.n	80066e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b004      	add	sp, #16
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	40007000 	.word	0x40007000
 8006718:	fffff9ff 	.word	0xfffff9ff
 800671c:	2000000c 	.word	0x2000000c
 8006720:	000f4240 	.word	0x000f4240

08006724 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006728:	4b03      	ldr	r3, [pc, #12]	@ (8006738 <LL_RCC_GetAPB1Prescaler+0x14>)
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	23e0      	movs	r3, #224	@ 0xe0
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	4013      	ands	r3, r2
}
 8006732:	0018      	movs	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40021000 	.word	0x40021000

0800673c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e2f3      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2201      	movs	r2, #1
 8006754:	4013      	ands	r3, r2
 8006756:	d100      	bne.n	800675a <HAL_RCC_OscConfig+0x1e>
 8006758:	e07c      	b.n	8006854 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800675a:	4bc3      	ldr	r3, [pc, #780]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2238      	movs	r2, #56	@ 0x38
 8006760:	4013      	ands	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006764:	4bc0      	ldr	r3, [pc, #768]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2203      	movs	r2, #3
 800676a:	4013      	ands	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b10      	cmp	r3, #16
 8006772:	d102      	bne.n	800677a <HAL_RCC_OscConfig+0x3e>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d002      	beq.n	8006780 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d10b      	bne.n	8006798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	4bb9      	ldr	r3, [pc, #740]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	4013      	ands	r3, r2
 800678a:	d062      	beq.n	8006852 <HAL_RCC_OscConfig+0x116>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d15e      	bne.n	8006852 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e2ce      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	2380      	movs	r3, #128	@ 0x80
 800679e:	025b      	lsls	r3, r3, #9
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d107      	bne.n	80067b4 <HAL_RCC_OscConfig+0x78>
 80067a4:	4bb0      	ldr	r3, [pc, #704]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4baf      	ldr	r3, [pc, #700]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067aa:	2180      	movs	r1, #128	@ 0x80
 80067ac:	0249      	lsls	r1, r1, #9
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e020      	b.n	80067f6 <HAL_RCC_OscConfig+0xba>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	23a0      	movs	r3, #160	@ 0xa0
 80067ba:	02db      	lsls	r3, r3, #11
 80067bc:	429a      	cmp	r2, r3
 80067be:	d10e      	bne.n	80067de <HAL_RCC_OscConfig+0xa2>
 80067c0:	4ba9      	ldr	r3, [pc, #676]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4ba8      	ldr	r3, [pc, #672]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067c6:	2180      	movs	r1, #128	@ 0x80
 80067c8:	02c9      	lsls	r1, r1, #11
 80067ca:	430a      	orrs	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	4ba6      	ldr	r3, [pc, #664]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4ba5      	ldr	r3, [pc, #660]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067d4:	2180      	movs	r1, #128	@ 0x80
 80067d6:	0249      	lsls	r1, r1, #9
 80067d8:	430a      	orrs	r2, r1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e00b      	b.n	80067f6 <HAL_RCC_OscConfig+0xba>
 80067de:	4ba2      	ldr	r3, [pc, #648]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067e4:	49a1      	ldr	r1, [pc, #644]	@ (8006a6c <HAL_RCC_OscConfig+0x330>)
 80067e6:	400a      	ands	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	4b9f      	ldr	r3, [pc, #636]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80067f0:	499f      	ldr	r1, [pc, #636]	@ (8006a70 <HAL_RCC_OscConfig+0x334>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d014      	beq.n	8006828 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fd fce7 	bl	80041d0 <HAL_GetTick>
 8006802:	0003      	movs	r3, r0
 8006804:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006808:	f7fd fce2 	bl	80041d0 <HAL_GetTick>
 800680c:	0002      	movs	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	@ 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e28d      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800681a:	4b93      	ldr	r3, [pc, #588]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	4013      	ands	r3, r2
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0xcc>
 8006826:	e015      	b.n	8006854 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fd fcd2 	bl	80041d0 <HAL_GetTick>
 800682c:	0003      	movs	r3, r0
 800682e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006832:	f7fd fccd 	bl	80041d0 <HAL_GetTick>
 8006836:	0002      	movs	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b64      	cmp	r3, #100	@ 0x64
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e278      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006844:	4b88      	ldr	r3, [pc, #544]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2380      	movs	r3, #128	@ 0x80
 800684a:	029b      	lsls	r3, r3, #10
 800684c:	4013      	ands	r3, r2
 800684e:	d1f0      	bne.n	8006832 <HAL_RCC_OscConfig+0xf6>
 8006850:	e000      	b.n	8006854 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006852:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2202      	movs	r2, #2
 800685a:	4013      	ands	r3, r2
 800685c:	d100      	bne.n	8006860 <HAL_RCC_OscConfig+0x124>
 800685e:	e099      	b.n	8006994 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006860:	4b81      	ldr	r3, [pc, #516]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2238      	movs	r2, #56	@ 0x38
 8006866:	4013      	ands	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800686a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2203      	movs	r2, #3
 8006870:	4013      	ands	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b10      	cmp	r3, #16
 8006878:	d102      	bne.n	8006880 <HAL_RCC_OscConfig+0x144>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d002      	beq.n	8006886 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d135      	bne.n	80068f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006886:	4b78      	ldr	r3, [pc, #480]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	2380      	movs	r3, #128	@ 0x80
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4013      	ands	r3, r2
 8006890:	d005      	beq.n	800689e <HAL_RCC_OscConfig+0x162>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e24b      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689e:	4b72      	ldr	r3, [pc, #456]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	4a74      	ldr	r2, [pc, #464]	@ (8006a74 <HAL_RCC_OscConfig+0x338>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	0019      	movs	r1, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	021a      	lsls	r2, r3, #8
 80068ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d112      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6e      	ldr	r2, [pc, #440]	@ (8006a78 <HAL_RCC_OscConfig+0x33c>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	0019      	movs	r1, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	4b67      	ldr	r3, [pc, #412]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068ca:	430a      	orrs	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80068ce:	4b66      	ldr	r3, [pc, #408]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	0adb      	lsrs	r3, r3, #11
 80068d4:	2207      	movs	r2, #7
 80068d6:	4013      	ands	r3, r2
 80068d8:	4a68      	ldr	r2, [pc, #416]	@ (8006a7c <HAL_RCC_OscConfig+0x340>)
 80068da:	40da      	lsrs	r2, r3
 80068dc:	4b68      	ldr	r3, [pc, #416]	@ (8006a80 <HAL_RCC_OscConfig+0x344>)
 80068de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068e0:	4b68      	ldr	r3, [pc, #416]	@ (8006a84 <HAL_RCC_OscConfig+0x348>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7fd fc17 	bl	8004118 <HAL_InitTick>
 80068ea:	1e03      	subs	r3, r0, #0
 80068ec:	d051      	beq.n	8006992 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e221      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d030      	beq.n	800695c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006a78 <HAL_RCC_OscConfig+0x33c>)
 8006900:	4013      	ands	r3, r2
 8006902:	0019      	movs	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	4b57      	ldr	r3, [pc, #348]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800690a:	430a      	orrs	r2, r1
 800690c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800690e:	4b56      	ldr	r3, [pc, #344]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b55      	ldr	r3, [pc, #340]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006914:	2180      	movs	r1, #128	@ 0x80
 8006916:	0049      	lsls	r1, r1, #1
 8006918:	430a      	orrs	r2, r1
 800691a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fd fc58 	bl	80041d0 <HAL_GetTick>
 8006920:	0003      	movs	r3, r0
 8006922:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006926:	f7fd fc53 	bl	80041d0 <HAL_GetTick>
 800692a:	0002      	movs	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e1fe      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006938:	4b4b      	ldr	r3, [pc, #300]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4013      	ands	r3, r2
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006944:	4b48      	ldr	r3, [pc, #288]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a4a      	ldr	r2, [pc, #296]	@ (8006a74 <HAL_RCC_OscConfig+0x338>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	4b44      	ldr	r3, [pc, #272]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e01b      	b.n	8006994 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800695c:	4b42      	ldr	r3, [pc, #264]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b41      	ldr	r3, [pc, #260]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006962:	4949      	ldr	r1, [pc, #292]	@ (8006a88 <HAL_RCC_OscConfig+0x34c>)
 8006964:	400a      	ands	r2, r1
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fd fc32 	bl	80041d0 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006972:	f7fd fc2d 	bl	80041d0 <HAL_GetTick>
 8006976:	0002      	movs	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e1d8      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006984:	4b38      	ldr	r3, [pc, #224]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	2380      	movs	r3, #128	@ 0x80
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	4013      	ands	r3, r2
 800698e:	d1f0      	bne.n	8006972 <HAL_RCC_OscConfig+0x236>
 8006990:	e000      	b.n	8006994 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006992:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2208      	movs	r2, #8
 800699a:	4013      	ands	r3, r2
 800699c:	d047      	beq.n	8006a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800699e:	4b32      	ldr	r3, [pc, #200]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2238      	movs	r2, #56	@ 0x38
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	d10a      	bne.n	80069c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80069aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ae:	2202      	movs	r2, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d03c      	beq.n	8006a2e <HAL_RCC_OscConfig+0x2f2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d138      	bne.n	8006a2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e1ba      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d019      	beq.n	80069fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80069c8:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80069cc:	4b26      	ldr	r3, [pc, #152]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069ce:	2101      	movs	r1, #1
 80069d0:	430a      	orrs	r2, r1
 80069d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd fbfc 	bl	80041d0 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069de:	f7fd fbf7 	bl	80041d0 <HAL_GetTick>
 80069e2:	0002      	movs	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e1a2      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f4:	2202      	movs	r2, #2
 80069f6:	4013      	ands	r3, r2
 80069f8:	d0f1      	beq.n	80069de <HAL_RCC_OscConfig+0x2a2>
 80069fa:	e018      	b.n	8006a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 80069fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a00:	4b19      	ldr	r3, [pc, #100]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006a02:	2101      	movs	r1, #1
 8006a04:	438a      	bics	r2, r1
 8006a06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fd fbe2 	bl	80041d0 <HAL_GetTick>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a12:	f7fd fbdd 	bl	80041d0 <HAL_GetTick>
 8006a16:	0002      	movs	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e188      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a24:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a28:	2202      	movs	r2, #2
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d1f1      	bne.n	8006a12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2204      	movs	r2, #4
 8006a34:	4013      	ands	r3, r2
 8006a36:	d100      	bne.n	8006a3a <HAL_RCC_OscConfig+0x2fe>
 8006a38:	e0c6      	b.n	8006bc8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3a:	231f      	movs	r3, #31
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a42:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2238      	movs	r2, #56	@ 0x38
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d11e      	bne.n	8006a8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <HAL_RCC_OscConfig+0x32c>)
 8006a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a52:	2202      	movs	r2, #2
 8006a54:	4013      	ands	r3, r2
 8006a56:	d100      	bne.n	8006a5a <HAL_RCC_OscConfig+0x31e>
 8006a58:	e0b6      	b.n	8006bc8 <HAL_RCC_OscConfig+0x48c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d000      	beq.n	8006a64 <HAL_RCC_OscConfig+0x328>
 8006a62:	e0b1      	b.n	8006bc8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e166      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	fffeffff 	.word	0xfffeffff
 8006a70:	fffbffff 	.word	0xfffbffff
 8006a74:	ffff80ff 	.word	0xffff80ff
 8006a78:	ffffc7ff 	.word	0xffffc7ff
 8006a7c:	00f42400 	.word	0x00f42400
 8006a80:	2000000c 	.word	0x2000000c
 8006a84:	20000010 	.word	0x20000010
 8006a88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a8c:	4bac      	ldr	r3, [pc, #688]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a90:	2380      	movs	r3, #128	@ 0x80
 8006a92:	055b      	lsls	r3, r3, #21
 8006a94:	4013      	ands	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_RCC_OscConfig+0x360>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x362>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d011      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006aa8:	2180      	movs	r1, #128	@ 0x80
 8006aaa:	0549      	lsls	r1, r1, #21
 8006aac:	430a      	orrs	r2, r1
 8006aae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ab0:	4ba3      	ldr	r3, [pc, #652]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ab4:	2380      	movs	r3, #128	@ 0x80
 8006ab6:	055b      	lsls	r3, r3, #21
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006abe:	231f      	movs	r3, #31
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac6:	4b9f      	ldr	r3, [pc, #636]	@ (8006d44 <HAL_RCC_OscConfig+0x608>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	2380      	movs	r3, #128	@ 0x80
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d11a      	bne.n	8006b08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8006d44 <HAL_RCC_OscConfig+0x608>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b9b      	ldr	r3, [pc, #620]	@ (8006d44 <HAL_RCC_OscConfig+0x608>)
 8006ad8:	2180      	movs	r1, #128	@ 0x80
 8006ada:	0049      	lsls	r1, r1, #1
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006ae0:	f7fd fb76 	bl	80041d0 <HAL_GetTick>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aea:	f7fd fb71 	bl	80041d0 <HAL_GetTick>
 8006aee:	0002      	movs	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e11c      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006afc:	4b91      	ldr	r3, [pc, #580]	@ (8006d44 <HAL_RCC_OscConfig+0x608>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2380      	movs	r3, #128	@ 0x80
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4013      	ands	r3, r2
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x3e2>
 8006b10:	4b8b      	ldr	r3, [pc, #556]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b14:	4b8a      	ldr	r3, [pc, #552]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b16:	2101      	movs	r1, #1
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b1c:	e01c      	b.n	8006b58 <HAL_RCC_OscConfig+0x41c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x404>
 8006b26:	4b86      	ldr	r3, [pc, #536]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b2a:	4b85      	ldr	r3, [pc, #532]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b32:	4b83      	ldr	r3, [pc, #524]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b36:	4b82      	ldr	r3, [pc, #520]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b38:	2101      	movs	r1, #1
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b3e:	e00b      	b.n	8006b58 <HAL_RCC_OscConfig+0x41c>
 8006b40:	4b7f      	ldr	r3, [pc, #508]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b44:	4b7e      	ldr	r3, [pc, #504]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b46:	2101      	movs	r1, #1
 8006b48:	438a      	bics	r2, r1
 8006b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b50:	4b7b      	ldr	r3, [pc, #492]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b52:	2104      	movs	r1, #4
 8006b54:	438a      	bics	r2, r1
 8006b56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d014      	beq.n	8006b8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fd fb36 	bl	80041d0 <HAL_GetTick>
 8006b64:	0003      	movs	r3, r0
 8006b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b68:	e009      	b.n	8006b7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fd fb31 	bl	80041d0 <HAL_GetTick>
 8006b6e:	0002      	movs	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	4a74      	ldr	r2, [pc, #464]	@ (8006d48 <HAL_RCC_OscConfig+0x60c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0db      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b7e:	4b70      	ldr	r3, [pc, #448]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b82:	2202      	movs	r2, #2
 8006b84:	4013      	ands	r3, r2
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x42e>
 8006b88:	e013      	b.n	8006bb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8a:	f7fd fb21 	bl	80041d0 <HAL_GetTick>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b92:	e009      	b.n	8006ba8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b94:	f7fd fb1c 	bl	80041d0 <HAL_GetTick>
 8006b98:	0002      	movs	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006d48 <HAL_RCC_OscConfig+0x60c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e0c6      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ba8:	4b65      	ldr	r3, [pc, #404]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bac:	2202      	movs	r2, #2
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006bb2:	231f      	movs	r3, #31
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d105      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006bbc:	4b60      	ldr	r3, [pc, #384]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006bc2:	4962      	ldr	r1, [pc, #392]	@ (8006d4c <HAL_RCC_OscConfig+0x610>)
 8006bc4:	400a      	ands	r2, r1
 8006bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d100      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x496>
 8006bd0:	e0b0      	b.n	8006d34 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2238      	movs	r2, #56	@ 0x38
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d100      	bne.n	8006be0 <HAL_RCC_OscConfig+0x4a4>
 8006bde:	e078      	b.n	8006cd2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d153      	bne.n	8006c90 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be8:	4b55      	ldr	r3, [pc, #340]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b54      	ldr	r3, [pc, #336]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006bee:	4958      	ldr	r1, [pc, #352]	@ (8006d50 <HAL_RCC_OscConfig+0x614>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fd faec 	bl	80041d0 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fd fae7 	bl	80041d0 <HAL_GetTick>
 8006c02:	0002      	movs	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e092      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c10:	4b4b      	ldr	r3, [pc, #300]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	@ 0x80
 8006c16:	049b      	lsls	r3, r3, #18
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c1c:	4b48      	ldr	r3, [pc, #288]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4a4c      	ldr	r2, [pc, #304]	@ (8006d54 <HAL_RCC_OscConfig+0x618>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c42:	431a      	orrs	r2, r3
 8006c44:	4b3e      	ldr	r3, [pc, #248]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c46:	430a      	orrs	r2, r1
 8006c48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c50:	2180      	movs	r1, #128	@ 0x80
 8006c52:	0449      	lsls	r1, r1, #17
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006c58:	4b39      	ldr	r3, [pc, #228]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	4b38      	ldr	r3, [pc, #224]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c5e:	2180      	movs	r1, #128	@ 0x80
 8006c60:	0549      	lsls	r1, r1, #21
 8006c62:	430a      	orrs	r2, r1
 8006c64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fd fab3 	bl	80041d0 <HAL_GetTick>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c70:	f7fd faae 	bl	80041d0 <HAL_GetTick>
 8006c74:	0002      	movs	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e059      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c82:	4b2f      	ldr	r3, [pc, #188]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	2380      	movs	r3, #128	@ 0x80
 8006c88:	049b      	lsls	r3, r3, #18
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCC_OscConfig+0x534>
 8006c8e:	e051      	b.n	8006d34 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c90:	4b2b      	ldr	r3, [pc, #172]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b2a      	ldr	r3, [pc, #168]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006c96:	492e      	ldr	r1, [pc, #184]	@ (8006d50 <HAL_RCC_OscConfig+0x614>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fd fa98 	bl	80041d0 <HAL_GetTick>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca6:	f7fd fa93 	bl	80041d0 <HAL_GetTick>
 8006caa:	0002      	movs	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e03e      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb8:	4b21      	ldr	r3, [pc, #132]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	2380      	movs	r3, #128	@ 0x80
 8006cbe:	049b      	lsls	r3, r3, #18
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d1f0      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006cca:	4923      	ldr	r1, [pc, #140]	@ (8006d58 <HAL_RCC_OscConfig+0x61c>)
 8006ccc:	400a      	ands	r2, r1
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e030      	b.n	8006d34 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e02b      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006cde:	4b18      	ldr	r3, [pc, #96]	@ (8006d40 <HAL_RCC_OscConfig+0x604>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	401a      	ands	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d11e      	bne.n	8006d30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2270      	movs	r2, #112	@ 0x70
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d117      	bne.n	8006d30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	23fe      	movs	r3, #254	@ 0xfe
 8006d04:	01db      	lsls	r3, r3, #7
 8006d06:	401a      	ands	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d10e      	bne.n	8006d30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	23f8      	movs	r3, #248	@ 0xf8
 8006d16:	039b      	lsls	r3, r3, #14
 8006d18:	401a      	ands	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d106      	bne.n	8006d30 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	0f5b      	lsrs	r3, r3, #29
 8006d26:	075a      	lsls	r2, r3, #29
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	0018      	movs	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b008      	add	sp, #32
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40007000 	.word	0x40007000
 8006d48:	00001388 	.word	0x00001388
 8006d4c:	efffffff 	.word	0xefffffff
 8006d50:	feffffff 	.word	0xfeffffff
 8006d54:	1fc1808c 	.word	0x1fc1808c
 8006d58:	effefffc 	.word	0xeffefffc

08006d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0e9      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d70:	4b76      	ldr	r3, [pc, #472]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2207      	movs	r2, #7
 8006d76:	4013      	ands	r3, r2
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d91e      	bls.n	8006dbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7e:	4b73      	ldr	r3, [pc, #460]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2207      	movs	r2, #7
 8006d84:	4393      	bics	r3, r2
 8006d86:	0019      	movs	r1, r3
 8006d88:	4b70      	ldr	r3, [pc, #448]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d90:	f7fd fa1e 	bl	80041d0 <HAL_GetTick>
 8006d94:	0003      	movs	r3, r0
 8006d96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d98:	e009      	b.n	8006dae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9a:	f7fd fa19 	bl	80041d0 <HAL_GetTick>
 8006d9e:	0002      	movs	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	4a6a      	ldr	r2, [pc, #424]	@ (8006f50 <HAL_RCC_ClockConfig+0x1f4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e0ca      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006dae:	4b67      	ldr	r3, [pc, #412]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2207      	movs	r2, #7
 8006db4:	4013      	ands	r3, r2
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d1ee      	bne.n	8006d9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d015      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d006      	beq.n	8006dde <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006dd0:	4b60      	ldr	r3, [pc, #384]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd6:	21e0      	movs	r1, #224	@ 0xe0
 8006dd8:	01c9      	lsls	r1, r1, #7
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dde:	4b5d      	ldr	r3, [pc, #372]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4a5d      	ldr	r2, [pc, #372]	@ (8006f58 <HAL_RCC_ClockConfig+0x1fc>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	0019      	movs	r1, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	4b59      	ldr	r3, [pc, #356]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006dee:	430a      	orrs	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d057      	beq.n	8006eac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d107      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e04:	4b53      	ldr	r3, [pc, #332]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d12b      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e097      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	049b      	lsls	r3, r3, #18
 8006e24:	4013      	ands	r3, r2
 8006e26:	d11f      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e08b      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e34:	4b47      	ldr	r3, [pc, #284]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	2380      	movs	r3, #128	@ 0x80
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e07f      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d106      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e4c:	4b41      	ldr	r3, [pc, #260]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e50:	2202      	movs	r2, #2
 8006e52:	4013      	ands	r3, r2
 8006e54:	d108      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e074      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5e:	2202      	movs	r2, #2
 8006e60:	4013      	ands	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e06d      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e68:	4b3a      	ldr	r3, [pc, #232]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	4393      	bics	r3, r2
 8006e70:	0019      	movs	r1, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	4b37      	ldr	r3, [pc, #220]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fd f9a8 	bl	80041d0 <HAL_GetTick>
 8006e80:	0003      	movs	r3, r0
 8006e82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e84:	e009      	b.n	8006e9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e86:	f7fd f9a3 	bl	80041d0 <HAL_GetTick>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	4a2f      	ldr	r2, [pc, #188]	@ (8006f50 <HAL_RCC_ClockConfig+0x1f4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e054      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2238      	movs	r2, #56	@ 0x38
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d1ec      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eac:	4b27      	ldr	r3, [pc, #156]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d21e      	bcs.n	8006ef8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2207      	movs	r2, #7
 8006ec0:	4393      	bics	r3, r2
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	4b21      	ldr	r3, [pc, #132]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ecc:	f7fd f980 	bl	80041d0 <HAL_GetTick>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ed4:	e009      	b.n	8006eea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed6:	f7fd f97b 	bl	80041d0 <HAL_GetTick>
 8006eda:	0002      	movs	r2, r0
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <HAL_RCC_ClockConfig+0x1f4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e02c      	b.n	8006f44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006eea:	4b18      	ldr	r3, [pc, #96]	@ (8006f4c <HAL_RCC_ClockConfig+0x1f0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2207      	movs	r2, #7
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d1ee      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2204      	movs	r2, #4
 8006efe:	4013      	ands	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006f02:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4a15      	ldr	r2, [pc, #84]	@ (8006f5c <HAL_RCC_ClockConfig+0x200>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	4b10      	ldr	r3, [pc, #64]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006f16:	f000 f829 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8006f1a:	0001      	movs	r1, r0
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <HAL_RCC_ClockConfig+0x1f8>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	220f      	movs	r2, #15
 8006f24:	401a      	ands	r2, r3
 8006f26:	4b0e      	ldr	r3, [pc, #56]	@ (8006f60 <HAL_RCC_ClockConfig+0x204>)
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	58d3      	ldr	r3, [r2, r3]
 8006f2c:	221f      	movs	r2, #31
 8006f2e:	4013      	ands	r3, r2
 8006f30:	000a      	movs	r2, r1
 8006f32:	40da      	lsrs	r2, r3
 8006f34:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <HAL_RCC_ClockConfig+0x208>)
 8006f36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_ClockConfig+0x20c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7fd f8eb 	bl	8004118 <HAL_InitTick>
 8006f42:	0003      	movs	r3, r0
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b004      	add	sp, #16
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	00001388 	.word	0x00001388
 8006f54:	40021000 	.word	0x40021000
 8006f58:	fffff0ff 	.word	0xfffff0ff
 8006f5c:	ffff8fff 	.word	0xffff8fff
 8006f60:	0800acb8 	.word	0x0800acb8
 8006f64:	2000000c 	.word	0x2000000c
 8006f68:	20000010 	.word	0x20000010

08006f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f72:	4b3c      	ldr	r3, [pc, #240]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2238      	movs	r2, #56	@ 0x38
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d10f      	bne.n	8006f9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f7c:	4b39      	ldr	r3, [pc, #228]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	0adb      	lsrs	r3, r3, #11
 8006f82:	2207      	movs	r2, #7
 8006f84:	4013      	ands	r3, r2
 8006f86:	2201      	movs	r2, #1
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	0013      	movs	r3, r2
 8006f8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	4835      	ldr	r0, [pc, #212]	@ (8007068 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f92:	f7f9 f8d1 	bl	8000138 <__udivsi3>
 8006f96:	0003      	movs	r3, r0
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	e05d      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f9c:	4b31      	ldr	r3, [pc, #196]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2238      	movs	r2, #56	@ 0x38
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fa8:	4b30      	ldr	r3, [pc, #192]	@ (800706c <HAL_RCC_GetSysClockFreq+0x100>)
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e054      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fae:	4b2d      	ldr	r3, [pc, #180]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2238      	movs	r2, #56	@ 0x38
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d138      	bne.n	800702c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006fba:	4b2a      	ldr	r3, [pc, #168]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fc4:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	091b      	lsrs	r3, r3, #4
 8006fca:	2207      	movs	r2, #7
 8006fcc:	4013      	ands	r3, r2
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4824      	ldr	r0, [pc, #144]	@ (800706c <HAL_RCC_GetSysClockFreq+0x100>)
 8006fdc:	f7f9 f8ac 	bl	8000138 <__udivsi3>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	227f      	movs	r2, #127	@ 0x7f
 8006fec:	4013      	ands	r3, r2
 8006fee:	434b      	muls	r3, r1
 8006ff0:	617b      	str	r3, [r7, #20]
        break;
 8006ff2:	e00d      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	481c      	ldr	r0, [pc, #112]	@ (8007068 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ff8:	f7f9 f89e 	bl	8000138 <__udivsi3>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	0019      	movs	r1, r3
 8007000:	4b18      	ldr	r3, [pc, #96]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	227f      	movs	r2, #127	@ 0x7f
 8007008:	4013      	ands	r3, r2
 800700a:	434b      	muls	r3, r1
 800700c:	617b      	str	r3, [r7, #20]
        break;
 800700e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007010:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	0f5b      	lsrs	r3, r3, #29
 8007016:	2207      	movs	r2, #7
 8007018:	4013      	ands	r3, r2
 800701a:	3301      	adds	r3, #1
 800701c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	6978      	ldr	r0, [r7, #20]
 8007022:	f7f9 f889 	bl	8000138 <__udivsi3>
 8007026:	0003      	movs	r3, r0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e015      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2238      	movs	r2, #56	@ 0x38
 8007032:	4013      	ands	r3, r2
 8007034:	2b20      	cmp	r3, #32
 8007036:	d103      	bne.n	8007040 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e00b      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007040:	4b08      	ldr	r3, [pc, #32]	@ (8007064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2238      	movs	r2, #56	@ 0x38
 8007046:	4013      	ands	r3, r2
 8007048:	2b18      	cmp	r3, #24
 800704a:	d103      	bne.n	8007054 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800704c:	23fa      	movs	r3, #250	@ 0xfa
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	e001      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007058:	693b      	ldr	r3, [r7, #16]
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b006      	add	sp, #24
 8007060:	bd80      	pop	{r7, pc}
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	40021000 	.word	0x40021000
 8007068:	00f42400 	.word	0x00f42400
 800706c:	007a1200 	.word	0x007a1200

08007070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <HAL_RCC_GetHCLKFreq+0x10>)
 8007076:	681b      	ldr	r3, [r3, #0]
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	2000000c 	.word	0x2000000c

08007084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007084:	b5b0      	push	{r4, r5, r7, lr}
 8007086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007088:	f7ff fff2 	bl	8007070 <HAL_RCC_GetHCLKFreq>
 800708c:	0004      	movs	r4, r0
 800708e:	f7ff fb49 	bl	8006724 <LL_RCC_GetAPB1Prescaler>
 8007092:	0003      	movs	r3, r0
 8007094:	0b1a      	lsrs	r2, r3, #12
 8007096:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	58d3      	ldr	r3, [r2, r3]
 800709c:	221f      	movs	r2, #31
 800709e:	4013      	ands	r3, r2
 80070a0:	40dc      	lsrs	r4, r3
 80070a2:	0023      	movs	r3, r4
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bdb0      	pop	{r4, r5, r7, pc}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	0800acf8 	.word	0x0800acf8

080070b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80070b8:	2313      	movs	r3, #19
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070c0:	2312      	movs	r3, #18
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	029b      	lsls	r3, r3, #10
 80070d0:	4013      	ands	r3, r2
 80070d2:	d100      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80070d4:	e0a3      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d6:	2011      	movs	r0, #17
 80070d8:	183b      	adds	r3, r7, r0
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070de:	4b86      	ldr	r3, [pc, #536]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	055b      	lsls	r3, r3, #21
 80070e6:	4013      	ands	r3, r2
 80070e8:	d110      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ea:	4b83      	ldr	r3, [pc, #524]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ee:	4b82      	ldr	r3, [pc, #520]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070f0:	2180      	movs	r1, #128	@ 0x80
 80070f2:	0549      	lsls	r1, r1, #21
 80070f4:	430a      	orrs	r2, r1
 80070f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070f8:	4b7f      	ldr	r3, [pc, #508]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070fc:	2380      	movs	r3, #128	@ 0x80
 80070fe:	055b      	lsls	r3, r3, #21
 8007100:	4013      	ands	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007106:	183b      	adds	r3, r7, r0
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800710c:	4b7b      	ldr	r3, [pc, #492]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b7a      	ldr	r3, [pc, #488]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007112:	2180      	movs	r1, #128	@ 0x80
 8007114:	0049      	lsls	r1, r1, #1
 8007116:	430a      	orrs	r2, r1
 8007118:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800711a:	f7fd f859 	bl	80041d0 <HAL_GetTick>
 800711e:	0003      	movs	r3, r0
 8007120:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007122:	e00b      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007124:	f7fd f854 	bl	80041d0 <HAL_GetTick>
 8007128:	0002      	movs	r2, r0
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d904      	bls.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007132:	2313      	movs	r3, #19
 8007134:	18fb      	adds	r3, r7, r3
 8007136:	2203      	movs	r2, #3
 8007138:	701a      	strb	r2, [r3, #0]
        break;
 800713a:	e005      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800713c:	4b6f      	ldr	r3, [pc, #444]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	2380      	movs	r3, #128	@ 0x80
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	4013      	ands	r3, r2
 8007146:	d0ed      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007148:	2313      	movs	r3, #19
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d154      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007152:	4b69      	ldr	r3, [pc, #420]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007154:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007156:	23c0      	movs	r3, #192	@ 0xc0
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4013      	ands	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d019      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d014      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800716e:	4b62      	ldr	r3, [pc, #392]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007172:	4a63      	ldr	r2, [pc, #396]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007174:	4013      	ands	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007178:	4b5f      	ldr	r3, [pc, #380]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800717a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800717c:	4b5e      	ldr	r3, [pc, #376]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800717e:	2180      	movs	r1, #128	@ 0x80
 8007180:	0249      	lsls	r1, r1, #9
 8007182:	430a      	orrs	r2, r1
 8007184:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007186:	4b5c      	ldr	r3, [pc, #368]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800718a:	4b5b      	ldr	r3, [pc, #364]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800718c:	495d      	ldr	r1, [pc, #372]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800718e:	400a      	ands	r2, r1
 8007190:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007192:	4b59      	ldr	r3, [pc, #356]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2201      	movs	r2, #1
 800719c:	4013      	ands	r3, r2
 800719e:	d016      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fd f816 	bl	80041d0 <HAL_GetTick>
 80071a4:	0003      	movs	r3, r0
 80071a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a8:	e00c      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fd f811 	bl	80041d0 <HAL_GetTick>
 80071ae:	0002      	movs	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	4a54      	ldr	r2, [pc, #336]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d904      	bls.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80071ba:	2313      	movs	r3, #19
 80071bc:	18fb      	adds	r3, r7, r3
 80071be:	2203      	movs	r2, #3
 80071c0:	701a      	strb	r2, [r3, #0]
            break;
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c4:	4b4c      	ldr	r3, [pc, #304]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c8:	2202      	movs	r2, #2
 80071ca:	4013      	ands	r3, r2
 80071cc:	d0ed      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071ce:	2313      	movs	r3, #19
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071d8:	4b47      	ldr	r3, [pc, #284]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071dc:	4a48      	ldr	r2, [pc, #288]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80071de:	4013      	ands	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	4b44      	ldr	r3, [pc, #272]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071e8:	430a      	orrs	r2, r1
 80071ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071ec:	e00c      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071ee:	2312      	movs	r3, #18
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	2213      	movs	r2, #19
 80071f4:	18ba      	adds	r2, r7, r2
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e005      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	2312      	movs	r3, #18
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2213      	movs	r2, #19
 8007202:	18ba      	adds	r2, r7, r2
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007208:	2311      	movs	r3, #17
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007212:	4b39      	ldr	r3, [pc, #228]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007216:	4b38      	ldr	r3, [pc, #224]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007218:	493c      	ldr	r1, [pc, #240]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800721a:	400a      	ands	r2, r1
 800721c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2201      	movs	r2, #1
 8007224:	4013      	ands	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007228:	4b33      	ldr	r3, [pc, #204]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800722a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722c:	2203      	movs	r2, #3
 800722e:	4393      	bics	r3, r2
 8007230:	0019      	movs	r1, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	4b30      	ldr	r3, [pc, #192]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007238:	430a      	orrs	r2, r1
 800723a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2202      	movs	r2, #2
 8007242:	4013      	ands	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007246:	4b2c      	ldr	r3, [pc, #176]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	220c      	movs	r2, #12
 800724c:	4393      	bics	r3, r2
 800724e:	0019      	movs	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	4b28      	ldr	r3, [pc, #160]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007256:	430a      	orrs	r2, r1
 8007258:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2220      	movs	r2, #32
 8007260:	4013      	ands	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007264:	4b24      	ldr	r3, [pc, #144]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007268:	4a29      	ldr	r2, [pc, #164]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726a:	4013      	ands	r3, r2
 800726c:	0019      	movs	r1, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	4b21      	ldr	r3, [pc, #132]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007274:	430a      	orrs	r2, r1
 8007276:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	2380      	movs	r3, #128	@ 0x80
 800727e:	01db      	lsls	r3, r3, #7
 8007280:	4013      	ands	r3, r2
 8007282:	d015      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007284:	4b1c      	ldr	r3, [pc, #112]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	0899      	lsrs	r1, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	4b19      	ldr	r3, [pc, #100]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007292:	430a      	orrs	r2, r1
 8007294:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	2380      	movs	r3, #128	@ 0x80
 800729c:	05db      	lsls	r3, r3, #23
 800729e:	429a      	cmp	r2, r3
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072a2:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072a8:	2180      	movs	r1, #128	@ 0x80
 80072aa:	0249      	lsls	r1, r1, #9
 80072ac:	430a      	orrs	r2, r1
 80072ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	2380      	movs	r3, #128	@ 0x80
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	4013      	ands	r3, r2
 80072ba:	d016      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c0:	4a14      	ldr	r2, [pc, #80]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	0019      	movs	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072cc:	430a      	orrs	r2, r1
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	01db      	lsls	r3, r3, #7
 80072d8:	429a      	cmp	r2, r3
 80072da:	d106      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072e2:	2180      	movs	r1, #128	@ 0x80
 80072e4:	0249      	lsls	r1, r1, #9
 80072e6:	430a      	orrs	r2, r1
 80072e8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80072ea:	2312      	movs	r3, #18
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	781b      	ldrb	r3, [r3, #0]
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b006      	add	sp, #24
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40021000 	.word	0x40021000
 80072fc:	40007000 	.word	0x40007000
 8007300:	fffffcff 	.word	0xfffffcff
 8007304:	fffeffff 	.word	0xfffeffff
 8007308:	00001388 	.word	0x00001388
 800730c:	efffffff 	.word	0xefffffff
 8007310:	ffffcfff 	.word	0xffffcfff
 8007314:	ffff3fff 	.word	0xffff3fff

08007318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0a8      	b.n	800747c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	2382      	movs	r3, #130	@ 0x82
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	429a      	cmp	r2, r3
 800733c:	d009      	beq.n	8007352 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	61da      	str	r2, [r3, #28]
 8007344:	e005      	b.n	8007352 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	225d      	movs	r2, #93	@ 0x5d
 800735c:	5c9b      	ldrb	r3, [r3, r2]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d107      	bne.n	8007374 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	225c      	movs	r2, #92	@ 0x5c
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	0018      	movs	r0, r3
 8007370:	f7fc fc60 	bl	8003c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	225d      	movs	r2, #93	@ 0x5d
 8007378:	2102      	movs	r1, #2
 800737a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2140      	movs	r1, #64	@ 0x40
 8007388:	438a      	bics	r2, r1
 800738a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	23e0      	movs	r3, #224	@ 0xe0
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	429a      	cmp	r2, r3
 8007396:	d902      	bls.n	800739e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e002      	b.n	80073a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800739e:	2380      	movs	r3, #128	@ 0x80
 80073a0:	015b      	lsls	r3, r3, #5
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	23f0      	movs	r3, #240	@ 0xf0
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d008      	beq.n	80073c2 <HAL_SPI_Init+0xaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	23e0      	movs	r3, #224	@ 0xe0
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d002      	beq.n	80073c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	2382      	movs	r3, #130	@ 0x82
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	401a      	ands	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6899      	ldr	r1, [r3, #8]
 80073d0:	2384      	movs	r3, #132	@ 0x84
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	400b      	ands	r3, r1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2102      	movs	r1, #2
 80073de:	400b      	ands	r3, r1
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2101      	movs	r1, #1
 80073e8:	400b      	ands	r3, r1
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6999      	ldr	r1, [r3, #24]
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	400b      	ands	r3, r1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	2138      	movs	r1, #56	@ 0x38
 80073fe:	400b      	ands	r3, r1
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	2180      	movs	r1, #128	@ 0x80
 8007408:	400b      	ands	r3, r1
 800740a:	431a      	orrs	r2, r3
 800740c:	0011      	movs	r1, r2
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007412:	2380      	movs	r3, #128	@ 0x80
 8007414:	019b      	lsls	r3, r3, #6
 8007416:	401a      	ands	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	2204      	movs	r2, #4
 8007428:	401a      	ands	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742e:	2110      	movs	r1, #16
 8007430:	400b      	ands	r3, r1
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007438:	2108      	movs	r1, #8
 800743a:	400b      	ands	r3, r1
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68d9      	ldr	r1, [r3, #12]
 8007442:	23f0      	movs	r3, #240	@ 0xf0
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	400b      	ands	r3, r1
 8007448:	431a      	orrs	r2, r3
 800744a:	0011      	movs	r1, r2
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	015b      	lsls	r3, r3, #5
 8007452:	401a      	ands	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4907      	ldr	r1, [pc, #28]	@ (8007484 <HAL_SPI_Init+0x16c>)
 8007468:	400a      	ands	r2, r1
 800746a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	225d      	movs	r2, #93	@ 0x5d
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	0018      	movs	r0, r3
 800747e:	46bd      	mov	sp, r7
 8007480:	b004      	add	sp, #16
 8007482:	bd80      	pop	{r7, pc}
 8007484:	fffff7ff 	.word	0xfffff7ff

08007488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e04a      	b.n	8007530 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	223d      	movs	r2, #61	@ 0x3d
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d107      	bne.n	80074b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	223c      	movs	r2, #60	@ 0x3c
 80074aa:	2100      	movs	r1, #0
 80074ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7fc fc2d 	bl	8003d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	223d      	movs	r2, #61	@ 0x3d
 80074ba:	2102      	movs	r1, #2
 80074bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	0019      	movs	r1, r3
 80074c8:	0010      	movs	r0, r2
 80074ca:	f000 f9b3 	bl	8007834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2248      	movs	r2, #72	@ 0x48
 80074d2:	2101      	movs	r1, #1
 80074d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	223e      	movs	r2, #62	@ 0x3e
 80074da:	2101      	movs	r1, #1
 80074dc:	5499      	strb	r1, [r3, r2]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	223f      	movs	r2, #63	@ 0x3f
 80074e2:	2101      	movs	r1, #1
 80074e4:	5499      	strb	r1, [r3, r2]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2240      	movs	r2, #64	@ 0x40
 80074ea:	2101      	movs	r1, #1
 80074ec:	5499      	strb	r1, [r3, r2]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2241      	movs	r2, #65	@ 0x41
 80074f2:	2101      	movs	r1, #1
 80074f4:	5499      	strb	r1, [r3, r2]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2242      	movs	r2, #66	@ 0x42
 80074fa:	2101      	movs	r1, #1
 80074fc:	5499      	strb	r1, [r3, r2]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2243      	movs	r2, #67	@ 0x43
 8007502:	2101      	movs	r1, #1
 8007504:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2244      	movs	r2, #68	@ 0x44
 800750a:	2101      	movs	r1, #1
 800750c:	5499      	strb	r1, [r3, r2]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2245      	movs	r2, #69	@ 0x45
 8007512:	2101      	movs	r1, #1
 8007514:	5499      	strb	r1, [r3, r2]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2246      	movs	r2, #70	@ 0x46
 800751a:	2101      	movs	r1, #1
 800751c:	5499      	strb	r1, [r3, r2]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2247      	movs	r2, #71	@ 0x47
 8007522:	2101      	movs	r1, #1
 8007524:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	223d      	movs	r2, #61	@ 0x3d
 800752a:	2101      	movs	r1, #1
 800752c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	0018      	movs	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	223d      	movs	r2, #61	@ 0x3d
 8007544:	5c9b      	ldrb	r3, [r3, r2]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e03c      	b.n	80075ca <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	223d      	movs	r2, #61	@ 0x3d
 8007554:	2102      	movs	r1, #2
 8007556:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2101      	movs	r1, #1
 8007564:	430a      	orrs	r2, r1
 8007566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a19      	ldr	r2, [pc, #100]	@ (80075d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_TIM_Base_Start_IT+0x4e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a18      	ldr	r2, [pc, #96]	@ (80075d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIM_Base_Start_IT+0x4e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	@ (80075dc <HAL_TIM_Base_Start_IT+0xa4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d116      	bne.n	80075b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <HAL_TIM_Base_Start_IT+0xa8>)
 800758e:	4013      	ands	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b06      	cmp	r3, #6
 8007596:	d016      	beq.n	80075c6 <HAL_TIM_Base_Start_IT+0x8e>
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	429a      	cmp	r2, r3
 80075a0:	d011      	beq.n	80075c6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2101      	movs	r1, #1
 80075ae:	430a      	orrs	r2, r1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e008      	b.n	80075c6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2101      	movs	r1, #1
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e000      	b.n	80075c8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	0018      	movs	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b004      	add	sp, #16
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40014000 	.word	0x40014000
 80075e0:	00010007 	.word	0x00010007

080075e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2202      	movs	r2, #2
 8007600:	4013      	ands	r3, r2
 8007602:	d021      	beq.n	8007648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2202      	movs	r2, #2
 8007608:	4013      	ands	r3, r2
 800760a:	d01d      	beq.n	8007648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2203      	movs	r2, #3
 8007612:	4252      	negs	r2, r2
 8007614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2203      	movs	r2, #3
 8007624:	4013      	ands	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f8ea 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007630:	e007      	b.n	8007642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f000 f8dd 	bl	80077f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	0018      	movs	r0, r3
 800763e:	f000 f8e9 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2204      	movs	r2, #4
 800764c:	4013      	ands	r3, r2
 800764e:	d022      	beq.n	8007696 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2204      	movs	r2, #4
 8007654:	4013      	ands	r3, r2
 8007656:	d01e      	beq.n	8007696 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2205      	movs	r2, #5
 800765e:	4252      	negs	r2, r2
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2202      	movs	r2, #2
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	23c0      	movs	r3, #192	@ 0xc0
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4013      	ands	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 f8c3 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 800767e:	e007      	b.n	8007690 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	0018      	movs	r0, r3
 8007684:	f000 f8b6 	bl	80077f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	0018      	movs	r0, r3
 800768c:	f000 f8c2 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2208      	movs	r2, #8
 800769a:	4013      	ands	r3, r2
 800769c:	d021      	beq.n	80076e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2208      	movs	r2, #8
 80076a2:	4013      	ands	r3, r2
 80076a4:	d01d      	beq.n	80076e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2209      	movs	r2, #9
 80076ac:	4252      	negs	r2, r2
 80076ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2204      	movs	r2, #4
 80076b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	2203      	movs	r2, #3
 80076be:	4013      	ands	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f000 f89d 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 80076ca:	e007      	b.n	80076dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	0018      	movs	r0, r3
 80076d0:	f000 f890 	bl	80077f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0018      	movs	r0, r3
 80076d8:	f000 f89c 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2210      	movs	r2, #16
 80076e6:	4013      	ands	r3, r2
 80076e8:	d022      	beq.n	8007730 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2210      	movs	r2, #16
 80076ee:	4013      	ands	r3, r2
 80076f0:	d01e      	beq.n	8007730 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2211      	movs	r2, #17
 80076f8:	4252      	negs	r2, r2
 80076fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2208      	movs	r2, #8
 8007700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	23c0      	movs	r3, #192	@ 0xc0
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4013      	ands	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	0018      	movs	r0, r3
 8007714:	f000 f876 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007718:	e007      	b.n	800772a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	0018      	movs	r0, r3
 800771e:	f000 f869 	bl	80077f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	0018      	movs	r0, r3
 8007726:	f000 f875 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2201      	movs	r2, #1
 8007734:	4013      	ands	r3, r2
 8007736:	d00c      	beq.n	8007752 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	4013      	ands	r3, r2
 800773e:	d008      	beq.n	8007752 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2202      	movs	r2, #2
 8007746:	4252      	negs	r2, r2
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	0018      	movs	r0, r3
 800774e:	f7fb fae7 	bl	8002d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2280      	movs	r2, #128	@ 0x80
 8007756:	4013      	ands	r3, r2
 8007758:	d104      	bne.n	8007764 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	2380      	movs	r3, #128	@ 0x80
 800775e:	019b      	lsls	r3, r3, #6
 8007760:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007762:	d00b      	beq.n	800777c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2280      	movs	r2, #128	@ 0x80
 8007768:	4013      	ands	r3, r2
 800776a:	d007      	beq.n	800777c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <HAL_TIM_IRQHandler+0x208>)
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	0018      	movs	r0, r3
 8007778:	f000 f8e8 	bl	800794c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	2380      	movs	r3, #128	@ 0x80
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4013      	ands	r3, r2
 8007784:	d00b      	beq.n	800779e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2280      	movs	r2, #128	@ 0x80
 800778a:	4013      	ands	r3, r2
 800778c:	d007      	beq.n	800779e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a17      	ldr	r2, [pc, #92]	@ (80077f0 <HAL_TIM_IRQHandler+0x20c>)
 8007794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0018      	movs	r0, r3
 800779a:	f000 f8df 	bl	800795c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2240      	movs	r2, #64	@ 0x40
 80077a2:	4013      	ands	r3, r2
 80077a4:	d00c      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2240      	movs	r2, #64	@ 0x40
 80077aa:	4013      	ands	r3, r2
 80077ac:	d008      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2241      	movs	r2, #65	@ 0x41
 80077b4:	4252      	negs	r2, r2
 80077b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	0018      	movs	r0, r3
 80077bc:	f000 f832 	bl	8007824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2220      	movs	r2, #32
 80077c4:	4013      	ands	r3, r2
 80077c6:	d00c      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	4013      	ands	r3, r2
 80077ce:	d008      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2221      	movs	r2, #33	@ 0x21
 80077d6:	4252      	negs	r2, r2
 80077d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f8ad 	bl	800793c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b004      	add	sp, #16
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	ffffdf7f 	.word	0xffffdf7f
 80077f0:	fffffeff 	.word	0xfffffeff

080077f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077fc:	46c0      	nop			@ (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800780c:	46c0      	nop			@ (mov r8, r8)
 800780e:	46bd      	mov	sp, r7
 8007810:	b002      	add	sp, #8
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800781c:	46c0      	nop			@ (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	b002      	add	sp, #8
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800782c:	46c0      	nop			@ (mov r8, r8)
 800782e:	46bd      	mov	sp, r7
 8007830:	b002      	add	sp, #8
 8007832:	bd80      	pop	{r7, pc}

08007834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a36      	ldr	r2, [pc, #216]	@ (8007920 <TIM_Base_SetConfig+0xec>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_Base_SetConfig+0x20>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a35      	ldr	r2, [pc, #212]	@ (8007924 <TIM_Base_SetConfig+0xf0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d108      	bne.n	8007866 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2270      	movs	r2, #112	@ 0x70
 8007858:	4393      	bics	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2d      	ldr	r2, [pc, #180]	@ (8007920 <TIM_Base_SetConfig+0xec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <TIM_Base_SetConfig+0x62>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2c      	ldr	r2, [pc, #176]	@ (8007924 <TIM_Base_SetConfig+0xf0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00f      	beq.n	8007896 <TIM_Base_SetConfig+0x62>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a2b      	ldr	r2, [pc, #172]	@ (8007928 <TIM_Base_SetConfig+0xf4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00b      	beq.n	8007896 <TIM_Base_SetConfig+0x62>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2a      	ldr	r2, [pc, #168]	@ (800792c <TIM_Base_SetConfig+0xf8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_Base_SetConfig+0x62>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a29      	ldr	r2, [pc, #164]	@ (8007930 <TIM_Base_SetConfig+0xfc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_Base_SetConfig+0x62>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a28      	ldr	r2, [pc, #160]	@ (8007934 <TIM_Base_SetConfig+0x100>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a27      	ldr	r2, [pc, #156]	@ (8007938 <TIM_Base_SetConfig+0x104>)
 800789a:	4013      	ands	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	4393      	bics	r3, r2
 80078ae:	001a      	movs	r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a13      	ldr	r2, [pc, #76]	@ (8007920 <TIM_Base_SetConfig+0xec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00b      	beq.n	80078ee <TIM_Base_SetConfig+0xba>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a14      	ldr	r2, [pc, #80]	@ (800792c <TIM_Base_SetConfig+0xf8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d007      	beq.n	80078ee <TIM_Base_SetConfig+0xba>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a13      	ldr	r2, [pc, #76]	@ (8007930 <TIM_Base_SetConfig+0xfc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_Base_SetConfig+0xba>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a12      	ldr	r2, [pc, #72]	@ (8007934 <TIM_Base_SetConfig+0x100>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d103      	bne.n	80078f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2201      	movs	r2, #1
 8007902:	4013      	ands	r3, r2
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2201      	movs	r2, #1
 800790e:	4393      	bics	r3, r2
 8007910:	001a      	movs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]
  }
}
 8007916:	46c0      	nop			@ (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	b004      	add	sp, #16
 800791c:	bd80      	pop	{r7, pc}
 800791e:	46c0      	nop			@ (mov r8, r8)
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40000400 	.word	0x40000400
 8007928:	40002000 	.word	0x40002000
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800
 8007938:	fffffcff 	.word	0xfffffcff

0800793c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007944:	46c0      	nop			@ (mov r8, r8)
 8007946:	46bd      	mov	sp, r7
 8007948:	b002      	add	sp, #8
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007954:	46c0      	nop			@ (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	b002      	add	sp, #8
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007964:	46c0      	nop			@ (mov r8, r8)
 8007966:	46bd      	mov	sp, r7
 8007968:	b002      	add	sp, #8
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e046      	b.n	8007a0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2288      	movs	r2, #136	@ 0x88
 8007982:	589b      	ldr	r3, [r3, r2]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2284      	movs	r2, #132	@ 0x84
 800798c:	2100      	movs	r1, #0
 800798e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	0018      	movs	r0, r3
 8007994:	f7fc f9e4 	bl	8003d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2288      	movs	r2, #136	@ 0x88
 800799c:	2124      	movs	r1, #36	@ 0x24
 800799e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2101      	movs	r1, #1
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f000 f9d0 	bl	8007d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	0018      	movs	r0, r3
 80079c4:	f000 f828 	bl	8007a18 <UART_SetConfig>
 80079c8:	0003      	movs	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e01c      	b.n	8007a0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	490d      	ldr	r1, [pc, #52]	@ (8007a14 <HAL_UART_Init+0xa8>)
 80079de:	400a      	ands	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	212a      	movs	r1, #42	@ 0x2a
 80079ee:	438a      	bics	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2101      	movs	r1, #1
 80079fe:	430a      	orrs	r2, r1
 8007a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 fa5f 	bl	8007ec8 <UART_CheckIdleState>
 8007a0a:	0003      	movs	r3, r0
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	ffffb7ff 	.word	0xffffb7ff

08007a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a20:	231a      	movs	r3, #26
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4abc      	ldr	r2, [pc, #752]	@ (8007d38 <UART_SetConfig+0x320>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4ab7      	ldr	r2, [pc, #732]	@ (8007d3c <UART_SetConfig+0x324>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	0019      	movs	r1, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4aae      	ldr	r2, [pc, #696]	@ (8007d40 <UART_SetConfig+0x328>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	0019      	movs	r1, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	220f      	movs	r2, #15
 8007a9c:	4393      	bics	r3, r2
 8007a9e:	0019      	movs	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4aa4      	ldr	r2, [pc, #656]	@ (8007d44 <UART_SetConfig+0x32c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d127      	bne.n	8007b06 <UART_SetConfig+0xee>
 8007ab6:	4ba4      	ldr	r3, [pc, #656]	@ (8007d48 <UART_SetConfig+0x330>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	2203      	movs	r2, #3
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d017      	beq.n	8007af2 <UART_SetConfig+0xda>
 8007ac2:	d81b      	bhi.n	8007afc <UART_SetConfig+0xe4>
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d00a      	beq.n	8007ade <UART_SetConfig+0xc6>
 8007ac8:	d818      	bhi.n	8007afc <UART_SetConfig+0xe4>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <UART_SetConfig+0xbc>
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d00a      	beq.n	8007ae8 <UART_SetConfig+0xd0>
 8007ad2:	e013      	b.n	8007afc <UART_SetConfig+0xe4>
 8007ad4:	231b      	movs	r3, #27
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e058      	b.n	8007b90 <UART_SetConfig+0x178>
 8007ade:	231b      	movs	r3, #27
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e053      	b.n	8007b90 <UART_SetConfig+0x178>
 8007ae8:	231b      	movs	r3, #27
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	2204      	movs	r2, #4
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e04e      	b.n	8007b90 <UART_SetConfig+0x178>
 8007af2:	231b      	movs	r3, #27
 8007af4:	18fb      	adds	r3, r7, r3
 8007af6:	2208      	movs	r2, #8
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e049      	b.n	8007b90 <UART_SetConfig+0x178>
 8007afc:	231b      	movs	r3, #27
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	2210      	movs	r2, #16
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e044      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a90      	ldr	r2, [pc, #576]	@ (8007d4c <UART_SetConfig+0x334>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d127      	bne.n	8007b60 <UART_SetConfig+0x148>
 8007b10:	4b8d      	ldr	r3, [pc, #564]	@ (8007d48 <UART_SetConfig+0x330>)
 8007b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b14:	220c      	movs	r2, #12
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b0c      	cmp	r3, #12
 8007b1a:	d017      	beq.n	8007b4c <UART_SetConfig+0x134>
 8007b1c:	d81b      	bhi.n	8007b56 <UART_SetConfig+0x13e>
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d00a      	beq.n	8007b38 <UART_SetConfig+0x120>
 8007b22:	d818      	bhi.n	8007b56 <UART_SetConfig+0x13e>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <UART_SetConfig+0x116>
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d00a      	beq.n	8007b42 <UART_SetConfig+0x12a>
 8007b2c:	e013      	b.n	8007b56 <UART_SetConfig+0x13e>
 8007b2e:	231b      	movs	r3, #27
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	e02b      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b38:	231b      	movs	r3, #27
 8007b3a:	18fb      	adds	r3, r7, r3
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e026      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b42:	231b      	movs	r3, #27
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	2204      	movs	r2, #4
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e021      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b4c:	231b      	movs	r3, #27
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	2208      	movs	r2, #8
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e01c      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b56:	231b      	movs	r3, #27
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e017      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a7a      	ldr	r2, [pc, #488]	@ (8007d50 <UART_SetConfig+0x338>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d104      	bne.n	8007b74 <UART_SetConfig+0x15c>
 8007b6a:	231b      	movs	r3, #27
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e00d      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a76      	ldr	r2, [pc, #472]	@ (8007d54 <UART_SetConfig+0x33c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d104      	bne.n	8007b88 <UART_SetConfig+0x170>
 8007b7e:	231b      	movs	r3, #27
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	e003      	b.n	8007b90 <UART_SetConfig+0x178>
 8007b88:	231b      	movs	r3, #27
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d000      	beq.n	8007b9e <UART_SetConfig+0x186>
 8007b9c:	e065      	b.n	8007c6a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007b9e:	231b      	movs	r3, #27
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d015      	beq.n	8007bd4 <UART_SetConfig+0x1bc>
 8007ba8:	dc18      	bgt.n	8007bdc <UART_SetConfig+0x1c4>
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d00d      	beq.n	8007bca <UART_SetConfig+0x1b2>
 8007bae:	dc15      	bgt.n	8007bdc <UART_SetConfig+0x1c4>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <UART_SetConfig+0x1a2>
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d005      	beq.n	8007bc4 <UART_SetConfig+0x1ac>
 8007bb8:	e010      	b.n	8007bdc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bba:	f7ff fa63 	bl	8007084 <HAL_RCC_GetPCLK1Freq>
 8007bbe:	0003      	movs	r3, r0
 8007bc0:	617b      	str	r3, [r7, #20]
        break;
 8007bc2:	e012      	b.n	8007bea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b64      	ldr	r3, [pc, #400]	@ (8007d58 <UART_SetConfig+0x340>)
 8007bc6:	617b      	str	r3, [r7, #20]
        break;
 8007bc8:	e00f      	b.n	8007bea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7ff f9cf 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8007bce:	0003      	movs	r3, r0
 8007bd0:	617b      	str	r3, [r7, #20]
        break;
 8007bd2:	e00a      	b.n	8007bea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd4:	2380      	movs	r3, #128	@ 0x80
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	617b      	str	r3, [r7, #20]
        break;
 8007bda:	e006      	b.n	8007bea <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007be0:	231a      	movs	r3, #26
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
        break;
 8007be8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d100      	bne.n	8007bf2 <UART_SetConfig+0x1da>
 8007bf0:	e08d      	b.n	8007d0e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bf6:	4b59      	ldr	r3, [pc, #356]	@ (8007d5c <UART_SetConfig+0x344>)
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	5ad3      	ldrh	r3, [r2, r3]
 8007bfc:	0019      	movs	r1, r3
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f7f8 fa9a 	bl	8000138 <__udivsi3>
 8007c04:	0003      	movs	r3, r0
 8007c06:	005a      	lsls	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	18d2      	adds	r2, r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	0019      	movs	r1, r3
 8007c16:	0010      	movs	r0, r2
 8007c18:	f7f8 fa8e 	bl	8000138 <__udivsi3>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d91c      	bls.n	8007c60 <UART_SetConfig+0x248>
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	2380      	movs	r3, #128	@ 0x80
 8007c2a:	025b      	lsls	r3, r3, #9
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d217      	bcs.n	8007c60 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	200e      	movs	r0, #14
 8007c36:	183b      	adds	r3, r7, r0
 8007c38:	210f      	movs	r1, #15
 8007c3a:	438a      	bics	r2, r1
 8007c3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	085b      	lsrs	r3, r3, #1
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2207      	movs	r2, #7
 8007c46:	4013      	ands	r3, r2
 8007c48:	b299      	uxth	r1, r3
 8007c4a:	183b      	adds	r3, r7, r0
 8007c4c:	183a      	adds	r2, r7, r0
 8007c4e:	8812      	ldrh	r2, [r2, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	183a      	adds	r2, r7, r0
 8007c5a:	8812      	ldrh	r2, [r2, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	e056      	b.n	8007d0e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007c60:	231a      	movs	r3, #26
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e051      	b.n	8007d0e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c6a:	231b      	movs	r3, #27
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d015      	beq.n	8007ca0 <UART_SetConfig+0x288>
 8007c74:	dc18      	bgt.n	8007ca8 <UART_SetConfig+0x290>
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d00d      	beq.n	8007c96 <UART_SetConfig+0x27e>
 8007c7a:	dc15      	bgt.n	8007ca8 <UART_SetConfig+0x290>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <UART_SetConfig+0x26e>
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d005      	beq.n	8007c90 <UART_SetConfig+0x278>
 8007c84:	e010      	b.n	8007ca8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c86:	f7ff f9fd 	bl	8007084 <HAL_RCC_GetPCLK1Freq>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	617b      	str	r3, [r7, #20]
        break;
 8007c8e:	e012      	b.n	8007cb6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b31      	ldr	r3, [pc, #196]	@ (8007d58 <UART_SetConfig+0x340>)
 8007c92:	617b      	str	r3, [r7, #20]
        break;
 8007c94:	e00f      	b.n	8007cb6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7ff f969 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8007c9a:	0003      	movs	r3, r0
 8007c9c:	617b      	str	r3, [r7, #20]
        break;
 8007c9e:	e00a      	b.n	8007cb6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
        break;
 8007ca6:	e006      	b.n	8007cb6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cac:	231a      	movs	r3, #26
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	701a      	strb	r2, [r3, #0]
        break;
 8007cb4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d028      	beq.n	8007d0e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc0:	4b26      	ldr	r3, [pc, #152]	@ (8007d5c <UART_SetConfig+0x344>)
 8007cc2:	0052      	lsls	r2, r2, #1
 8007cc4:	5ad3      	ldrh	r3, [r2, r3]
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	6978      	ldr	r0, [r7, #20]
 8007cca:	f7f8 fa35 	bl	8000138 <__udivsi3>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	001a      	movs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	18d2      	adds	r2, r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	0019      	movs	r1, r3
 8007ce0:	0010      	movs	r0, r2
 8007ce2:	f7f8 fa29 	bl	8000138 <__udivsi3>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b0f      	cmp	r3, #15
 8007cee:	d90a      	bls.n	8007d06 <UART_SetConfig+0x2ee>
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	2380      	movs	r3, #128	@ 0x80
 8007cf4:	025b      	lsls	r3, r3, #9
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d205      	bcs.n	8007d06 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60da      	str	r2, [r3, #12]
 8007d04:	e003      	b.n	8007d0e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007d06:	231a      	movs	r3, #26
 8007d08:	18fb      	adds	r3, r7, r3
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	226a      	movs	r2, #106	@ 0x6a
 8007d12:	2101      	movs	r1, #1
 8007d14:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2268      	movs	r2, #104	@ 0x68
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d2a:	231a      	movs	r3, #26
 8007d2c:	18fb      	adds	r3, r7, r3
 8007d2e:	781b      	ldrb	r3, [r3, #0]
}
 8007d30:	0018      	movs	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	b008      	add	sp, #32
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	cfff69f3 	.word	0xcfff69f3
 8007d3c:	ffffcfff 	.word	0xffffcfff
 8007d40:	11fff4ff 	.word	0x11fff4ff
 8007d44:	40013800 	.word	0x40013800
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	40004400 	.word	0x40004400
 8007d50:	40004800 	.word	0x40004800
 8007d54:	40004c00 	.word	0x40004c00
 8007d58:	00f42400 	.word	0x00f42400
 8007d5c:	0800ad18 	.word	0x0800ad18

08007d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d00b      	beq.n	8007d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a4a      	ldr	r2, [pc, #296]	@ (8007ea4 <UART_AdvFeatureConfig+0x144>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4013      	ands	r3, r2
 8007d92:	d00b      	beq.n	8007dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4a43      	ldr	r2, [pc, #268]	@ (8007ea8 <UART_AdvFeatureConfig+0x148>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	0019      	movs	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db0:	2202      	movs	r2, #2
 8007db2:	4013      	ands	r3, r2
 8007db4:	d00b      	beq.n	8007dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8007eac <UART_AdvFeatureConfig+0x14c>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4a34      	ldr	r2, [pc, #208]	@ (8007eb0 <UART_AdvFeatureConfig+0x150>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	0019      	movs	r1, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df4:	2210      	movs	r2, #16
 8007df6:	4013      	ands	r3, r2
 8007df8:	d00b      	beq.n	8007e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4a2c      	ldr	r2, [pc, #176]	@ (8007eb4 <UART_AdvFeatureConfig+0x154>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	0019      	movs	r1, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	2220      	movs	r2, #32
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d00b      	beq.n	8007e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	4a25      	ldr	r2, [pc, #148]	@ (8007eb8 <UART_AdvFeatureConfig+0x158>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	0019      	movs	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	2240      	movs	r2, #64	@ 0x40
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d01d      	beq.n	8007e7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4a1d      	ldr	r2, [pc, #116]	@ (8007ebc <UART_AdvFeatureConfig+0x15c>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	0019      	movs	r1, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e5a:	2380      	movs	r3, #128	@ 0x80
 8007e5c:	035b      	lsls	r3, r3, #13
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d10b      	bne.n	8007e7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <UART_AdvFeatureConfig+0x160>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7e:	2280      	movs	r2, #128	@ 0x80
 8007e80:	4013      	ands	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ec4 <UART_AdvFeatureConfig+0x164>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	0019      	movs	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	46c0      	nop			@ (mov r8, r8)
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b002      	add	sp, #8
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	ffff7fff 	.word	0xffff7fff
 8007ea8:	fffdffff 	.word	0xfffdffff
 8007eac:	fffeffff 	.word	0xfffeffff
 8007eb0:	fffbffff 	.word	0xfffbffff
 8007eb4:	ffffefff 	.word	0xffffefff
 8007eb8:	ffffdfff 	.word	0xffffdfff
 8007ebc:	ffefffff 	.word	0xffefffff
 8007ec0:	ff9fffff 	.word	0xff9fffff
 8007ec4:	fff7ffff 	.word	0xfff7ffff

08007ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b092      	sub	sp, #72	@ 0x48
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2290      	movs	r2, #144	@ 0x90
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed8:	f7fc f97a 	bl	80041d0 <HAL_GetTick>
 8007edc:	0003      	movs	r3, r0
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	4013      	ands	r3, r2
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d12d      	bne.n	8007f4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef0:	2280      	movs	r2, #128	@ 0x80
 8007ef2:	0391      	lsls	r1, r2, #14
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4a47      	ldr	r2, [pc, #284]	@ (8008014 <UART_CheckIdleState+0x14c>)
 8007ef8:	9200      	str	r2, [sp, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f000 f88e 	bl	800801c <UART_WaitOnFlagUntilTimeout>
 8007f00:	1e03      	subs	r3, r0, #0
 8007f02:	d022      	beq.n	8007f4a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f04:	f3ef 8310 	mrs	r3, PRIMASK
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f0e:	2301      	movs	r3, #1
 8007f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f14:	f383 8810 	msr	PRIMASK, r3
}
 8007f18:	46c0      	nop			@ (mov r8, r8)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2180      	movs	r1, #128	@ 0x80
 8007f26:	438a      	bics	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2288      	movs	r2, #136	@ 0x88
 8007f3a:	2120      	movs	r1, #32
 8007f3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2284      	movs	r2, #132	@ 0x84
 8007f42:	2100      	movs	r1, #0
 8007f44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e060      	b.n	800800c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2204      	movs	r2, #4
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d146      	bne.n	8007fe6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5a:	2280      	movs	r2, #128	@ 0x80
 8007f5c:	03d1      	lsls	r1, r2, #15
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4a2c      	ldr	r2, [pc, #176]	@ (8008014 <UART_CheckIdleState+0x14c>)
 8007f62:	9200      	str	r2, [sp, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f000 f859 	bl	800801c <UART_WaitOnFlagUntilTimeout>
 8007f6a:	1e03      	subs	r3, r0, #0
 8007f6c:	d03b      	beq.n	8007fe6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f74:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	2301      	movs	r3, #1
 8007f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f383 8810 	msr	PRIMASK, r3
}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4922      	ldr	r1, [pc, #136]	@ (8008018 <UART_CheckIdleState+0x150>)
 8007f90:	400a      	ands	r2, r1
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f383 8810 	msr	PRIMASK, r3
}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007faa:	2301      	movs	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f383 8810 	msr	PRIMASK, r3
}
 8007fb4:	46c0      	nop			@ (mov r8, r8)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	438a      	bics	r2, r1
 8007fc4:	609a      	str	r2, [r3, #8]
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f383 8810 	msr	PRIMASK, r3
}
 8007fd0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	228c      	movs	r2, #140	@ 0x8c
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2284      	movs	r2, #132	@ 0x84
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e012      	b.n	800800c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2288      	movs	r2, #136	@ 0x88
 8007fea:	2120      	movs	r1, #32
 8007fec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	228c      	movs	r2, #140	@ 0x8c
 8007ff2:	2120      	movs	r1, #32
 8007ff4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2284      	movs	r2, #132	@ 0x84
 8008006:	2100      	movs	r1, #0
 8008008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	0018      	movs	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	b010      	add	sp, #64	@ 0x40
 8008012:	bd80      	pop	{r7, pc}
 8008014:	01ffffff 	.word	0x01ffffff
 8008018:	fffffedf 	.word	0xfffffedf

0800801c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	1dfb      	adds	r3, r7, #7
 800802a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800802c:	e051      	b.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	3301      	adds	r3, #1
 8008032:	d04e      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008034:	f7fc f8cc 	bl	80041d0 <HAL_GetTick>
 8008038:	0002      	movs	r2, r0
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	429a      	cmp	r2, r3
 8008042:	d302      	bcc.n	800804a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e051      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2204      	movs	r2, #4
 8008056:	4013      	ands	r3, r2
 8008058:	d03b      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b80      	cmp	r3, #128	@ 0x80
 800805e:	d038      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d035      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	2208      	movs	r2, #8
 800806e:	4013      	ands	r3, r2
 8008070:	2b08      	cmp	r3, #8
 8008072:	d111      	bne.n	8008098 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2208      	movs	r2, #8
 800807a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0018      	movs	r0, r3
 8008080:	f000 f83c 	bl	80080fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2290      	movs	r2, #144	@ 0x90
 8008088:	2108      	movs	r1, #8
 800808a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2284      	movs	r2, #132	@ 0x84
 8008090:	2100      	movs	r1, #0
 8008092:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e02c      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69da      	ldr	r2, [r3, #28]
 800809e:	2380      	movs	r3, #128	@ 0x80
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	401a      	ands	r2, r3
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d112      	bne.n	80080d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2280      	movs	r2, #128	@ 0x80
 80080b2:	0112      	lsls	r2, r2, #4
 80080b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	0018      	movs	r0, r3
 80080ba:	f000 f81f 	bl	80080fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2290      	movs	r2, #144	@ 0x90
 80080c2:	2120      	movs	r1, #32
 80080c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2284      	movs	r2, #132	@ 0x84
 80080ca:	2100      	movs	r1, #0
 80080cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e00f      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	4013      	ands	r3, r2
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	425a      	negs	r2, r3
 80080e2:	4153      	adcs	r3, r2
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	001a      	movs	r2, r3
 80080e8:	1dfb      	adds	r3, r7, #7
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d09e      	beq.n	800802e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	0018      	movs	r0, r3
 80080f4:	46bd      	mov	sp, r7
 80080f6:	b004      	add	sp, #16
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08e      	sub	sp, #56	@ 0x38
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008104:	f3ef 8310 	mrs	r3, PRIMASK
 8008108:	617b      	str	r3, [r7, #20]
  return(result);
 800810a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
 800810e:	2301      	movs	r3, #1
 8008110:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f383 8810 	msr	PRIMASK, r3
}
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4926      	ldr	r1, [pc, #152]	@ (80081c0 <UART_EndRxTransfer+0xc4>)
 8008126:	400a      	ands	r2, r1
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f383 8810 	msr	PRIMASK, r3
}
 8008134:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008136:	f3ef 8310 	mrs	r3, PRIMASK
 800813a:	623b      	str	r3, [r7, #32]
  return(result);
 800813c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800813e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008140:	2301      	movs	r3, #1
 8008142:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	f383 8810 	msr	PRIMASK, r3
}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	491b      	ldr	r1, [pc, #108]	@ (80081c4 <UART_EndRxTransfer+0xc8>)
 8008158:	400a      	ands	r2, r1
 800815a:	609a      	str	r2, [r3, #8]
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	f383 8810 	msr	PRIMASK, r3
}
 8008166:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d118      	bne.n	80081a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008170:	f3ef 8310 	mrs	r3, PRIMASK
 8008174:	60bb      	str	r3, [r7, #8]
  return(result);
 8008176:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800817a:	2301      	movs	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f383 8810 	msr	PRIMASK, r3
}
 8008184:	46c0      	nop			@ (mov r8, r8)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2110      	movs	r1, #16
 8008192:	438a      	bics	r2, r1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f383 8810 	msr	PRIMASK, r3
}
 80081a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	228c      	movs	r2, #140	@ 0x8c
 80081a6:	2120      	movs	r1, #32
 80081a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80081b6:	46c0      	nop			@ (mov r8, r8)
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b00e      	add	sp, #56	@ 0x38
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	fffffedf 	.word	0xfffffedf
 80081c4:	effffffe 	.word	0xeffffffe

080081c8 <__cvt>:
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	001f      	movs	r7, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	0016      	movs	r6, r2
 80081d0:	b08b      	sub	sp, #44	@ 0x2c
 80081d2:	429f      	cmp	r7, r3
 80081d4:	da04      	bge.n	80081e0 <__cvt+0x18>
 80081d6:	2180      	movs	r1, #128	@ 0x80
 80081d8:	0609      	lsls	r1, r1, #24
 80081da:	187b      	adds	r3, r7, r1
 80081dc:	001f      	movs	r7, r3
 80081de:	232d      	movs	r3, #45	@ 0x2d
 80081e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80081e4:	7013      	strb	r3, [r2, #0]
 80081e6:	2320      	movs	r3, #32
 80081e8:	2203      	movs	r2, #3
 80081ea:	439d      	bics	r5, r3
 80081ec:	2d46      	cmp	r5, #70	@ 0x46
 80081ee:	d007      	beq.n	8008200 <__cvt+0x38>
 80081f0:	002b      	movs	r3, r5
 80081f2:	3b45      	subs	r3, #69	@ 0x45
 80081f4:	4259      	negs	r1, r3
 80081f6:	414b      	adcs	r3, r1
 80081f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80081fa:	3a01      	subs	r2, #1
 80081fc:	18cb      	adds	r3, r1, r3
 80081fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008200:	ab09      	add	r3, sp, #36	@ 0x24
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	ab08      	add	r3, sp, #32
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800820a:	9200      	str	r2, [sp, #0]
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008210:	0032      	movs	r2, r6
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	003b      	movs	r3, r7
 8008216:	f000 fe75 	bl	8008f04 <_dtoa_r>
 800821a:	0004      	movs	r4, r0
 800821c:	2d47      	cmp	r5, #71	@ 0x47
 800821e:	d11b      	bne.n	8008258 <__cvt+0x90>
 8008220:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d511      	bpl.n	800824a <__cvt+0x82>
 8008226:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008228:	18c3      	adds	r3, r0, r3
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	0030      	movs	r0, r6
 8008232:	0039      	movs	r1, r7
 8008234:	f7f8 f906 	bl	8000444 <__aeabi_dcmpeq>
 8008238:	2800      	cmp	r0, #0
 800823a:	d001      	beq.n	8008240 <__cvt+0x78>
 800823c:	9b07      	ldr	r3, [sp, #28]
 800823e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008240:	2230      	movs	r2, #48	@ 0x30
 8008242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008244:	9907      	ldr	r1, [sp, #28]
 8008246:	428b      	cmp	r3, r1
 8008248:	d320      	bcc.n	800828c <__cvt+0xc4>
 800824a:	0020      	movs	r0, r4
 800824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008250:	1b1b      	subs	r3, r3, r4
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	b00b      	add	sp, #44	@ 0x2c
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800825a:	18c3      	adds	r3, r0, r3
 800825c:	9307      	str	r3, [sp, #28]
 800825e:	2d46      	cmp	r5, #70	@ 0x46
 8008260:	d1e4      	bne.n	800822c <__cvt+0x64>
 8008262:	7803      	ldrb	r3, [r0, #0]
 8008264:	2b30      	cmp	r3, #48	@ 0x30
 8008266:	d10c      	bne.n	8008282 <__cvt+0xba>
 8008268:	2200      	movs	r2, #0
 800826a:	2300      	movs	r3, #0
 800826c:	0030      	movs	r0, r6
 800826e:	0039      	movs	r1, r7
 8008270:	f7f8 f8e8 	bl	8000444 <__aeabi_dcmpeq>
 8008274:	2800      	cmp	r0, #0
 8008276:	d104      	bne.n	8008282 <__cvt+0xba>
 8008278:	2301      	movs	r3, #1
 800827a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008284:	9a07      	ldr	r2, [sp, #28]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	18d3      	adds	r3, r2, r3
 800828a:	e7ce      	b.n	800822a <__cvt+0x62>
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e7d6      	b.n	8008242 <__cvt+0x7a>

08008294 <__exponent>:
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	232b      	movs	r3, #43	@ 0x2b
 8008298:	b085      	sub	sp, #20
 800829a:	0005      	movs	r5, r0
 800829c:	1e0c      	subs	r4, r1, #0
 800829e:	7002      	strb	r2, [r0, #0]
 80082a0:	da01      	bge.n	80082a6 <__exponent+0x12>
 80082a2:	424c      	negs	r4, r1
 80082a4:	3302      	adds	r3, #2
 80082a6:	706b      	strb	r3, [r5, #1]
 80082a8:	2c09      	cmp	r4, #9
 80082aa:	dd2c      	ble.n	8008306 <__exponent+0x72>
 80082ac:	ab02      	add	r3, sp, #8
 80082ae:	1dde      	adds	r6, r3, #7
 80082b0:	0020      	movs	r0, r4
 80082b2:	210a      	movs	r1, #10
 80082b4:	f7f8 f8b0 	bl	8000418 <__aeabi_idivmod>
 80082b8:	0037      	movs	r7, r6
 80082ba:	3130      	adds	r1, #48	@ 0x30
 80082bc:	3e01      	subs	r6, #1
 80082be:	0020      	movs	r0, r4
 80082c0:	7031      	strb	r1, [r6, #0]
 80082c2:	210a      	movs	r1, #10
 80082c4:	9401      	str	r4, [sp, #4]
 80082c6:	f7f7 ffc1 	bl	800024c <__divsi3>
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	0004      	movs	r4, r0
 80082ce:	2b63      	cmp	r3, #99	@ 0x63
 80082d0:	dcee      	bgt.n	80082b0 <__exponent+0x1c>
 80082d2:	1eba      	subs	r2, r7, #2
 80082d4:	1ca8      	adds	r0, r5, #2
 80082d6:	0001      	movs	r1, r0
 80082d8:	0013      	movs	r3, r2
 80082da:	3430      	adds	r4, #48	@ 0x30
 80082dc:	7014      	strb	r4, [r2, #0]
 80082de:	ac02      	add	r4, sp, #8
 80082e0:	3407      	adds	r4, #7
 80082e2:	429c      	cmp	r4, r3
 80082e4:	d80a      	bhi.n	80082fc <__exponent+0x68>
 80082e6:	2300      	movs	r3, #0
 80082e8:	4294      	cmp	r4, r2
 80082ea:	d303      	bcc.n	80082f4 <__exponent+0x60>
 80082ec:	3309      	adds	r3, #9
 80082ee:	aa02      	add	r2, sp, #8
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	1bdb      	subs	r3, r3, r7
 80082f4:	18c0      	adds	r0, r0, r3
 80082f6:	1b40      	subs	r0, r0, r5
 80082f8:	b005      	add	sp, #20
 80082fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fc:	781c      	ldrb	r4, [r3, #0]
 80082fe:	3301      	adds	r3, #1
 8008300:	700c      	strb	r4, [r1, #0]
 8008302:	3101      	adds	r1, #1
 8008304:	e7eb      	b.n	80082de <__exponent+0x4a>
 8008306:	2330      	movs	r3, #48	@ 0x30
 8008308:	18e4      	adds	r4, r4, r3
 800830a:	70ab      	strb	r3, [r5, #2]
 800830c:	1d28      	adds	r0, r5, #4
 800830e:	70ec      	strb	r4, [r5, #3]
 8008310:	e7f1      	b.n	80082f6 <__exponent+0x62>
	...

08008314 <_printf_float>:
 8008314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008316:	b097      	sub	sp, #92	@ 0x5c
 8008318:	000d      	movs	r5, r1
 800831a:	920a      	str	r2, [sp, #40]	@ 0x28
 800831c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800831e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008320:	9009      	str	r0, [sp, #36]	@ 0x24
 8008322:	f000 fcdf 	bl	8008ce4 <_localeconv_r>
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	0018      	movs	r0, r3
 800832a:	930d      	str	r3, [sp, #52]	@ 0x34
 800832c:	f7f7 fee8 	bl	8000100 <strlen>
 8008330:	2300      	movs	r3, #0
 8008332:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008334:	9314      	str	r3, [sp, #80]	@ 0x50
 8008336:	7e2b      	ldrb	r3, [r5, #24]
 8008338:	2207      	movs	r2, #7
 800833a:	930c      	str	r3, [sp, #48]	@ 0x30
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008340:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	05c9      	lsls	r1, r1, #23
 8008346:	d545      	bpl.n	80083d4 <_printf_float+0xc0>
 8008348:	189b      	adds	r3, r3, r2
 800834a:	4393      	bics	r3, r2
 800834c:	001a      	movs	r2, r3
 800834e:	3208      	adds	r2, #8
 8008350:	6022      	str	r2, [r4, #0]
 8008352:	2201      	movs	r2, #1
 8008354:	681e      	ldr	r6, [r3, #0]
 8008356:	685f      	ldr	r7, [r3, #4]
 8008358:	007b      	lsls	r3, r7, #1
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	9311      	str	r3, [sp, #68]	@ 0x44
 800835e:	9610      	str	r6, [sp, #64]	@ 0x40
 8008360:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008362:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008364:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008366:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008368:	4ba7      	ldr	r3, [pc, #668]	@ (8008608 <_printf_float+0x2f4>)
 800836a:	4252      	negs	r2, r2
 800836c:	f7fa fa6a 	bl	8002844 <__aeabi_dcmpun>
 8008370:	2800      	cmp	r0, #0
 8008372:	d131      	bne.n	80083d8 <_printf_float+0xc4>
 8008374:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008376:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008378:	2201      	movs	r2, #1
 800837a:	4ba3      	ldr	r3, [pc, #652]	@ (8008608 <_printf_float+0x2f4>)
 800837c:	4252      	negs	r2, r2
 800837e:	f7f8 f871 	bl	8000464 <__aeabi_dcmple>
 8008382:	2800      	cmp	r0, #0
 8008384:	d128      	bne.n	80083d8 <_printf_float+0xc4>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	0030      	movs	r0, r6
 800838c:	0039      	movs	r1, r7
 800838e:	f7f8 f85f 	bl	8000450 <__aeabi_dcmplt>
 8008392:	2800      	cmp	r0, #0
 8008394:	d003      	beq.n	800839e <_printf_float+0x8a>
 8008396:	002b      	movs	r3, r5
 8008398:	222d      	movs	r2, #45	@ 0x2d
 800839a:	3343      	adds	r3, #67	@ 0x43
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083a0:	4f9a      	ldr	r7, [pc, #616]	@ (800860c <_printf_float+0x2f8>)
 80083a2:	2b47      	cmp	r3, #71	@ 0x47
 80083a4:	d800      	bhi.n	80083a8 <_printf_float+0x94>
 80083a6:	4f9a      	ldr	r7, [pc, #616]	@ (8008610 <_printf_float+0x2fc>)
 80083a8:	2303      	movs	r3, #3
 80083aa:	2400      	movs	r4, #0
 80083ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ae:	612b      	str	r3, [r5, #16]
 80083b0:	3301      	adds	r3, #1
 80083b2:	439a      	bics	r2, r3
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b8:	0029      	movs	r1, r5
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c0:	aa15      	add	r2, sp, #84	@ 0x54
 80083c2:	f000 f9e5 	bl	8008790 <_printf_common>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d000      	beq.n	80083cc <_printf_float+0xb8>
 80083ca:	e09e      	b.n	800850a <_printf_float+0x1f6>
 80083cc:	2001      	movs	r0, #1
 80083ce:	4240      	negs	r0, r0
 80083d0:	b017      	add	sp, #92	@ 0x5c
 80083d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d4:	3307      	adds	r3, #7
 80083d6:	e7b8      	b.n	800834a <_printf_float+0x36>
 80083d8:	0032      	movs	r2, r6
 80083da:	003b      	movs	r3, r7
 80083dc:	0030      	movs	r0, r6
 80083de:	0039      	movs	r1, r7
 80083e0:	f7fa fa30 	bl	8002844 <__aeabi_dcmpun>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d00b      	beq.n	8008400 <_printf_float+0xec>
 80083e8:	2f00      	cmp	r7, #0
 80083ea:	da03      	bge.n	80083f4 <_printf_float+0xe0>
 80083ec:	002b      	movs	r3, r5
 80083ee:	222d      	movs	r2, #45	@ 0x2d
 80083f0:	3343      	adds	r3, #67	@ 0x43
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083f6:	4f87      	ldr	r7, [pc, #540]	@ (8008614 <_printf_float+0x300>)
 80083f8:	2b47      	cmp	r3, #71	@ 0x47
 80083fa:	d8d5      	bhi.n	80083a8 <_printf_float+0x94>
 80083fc:	4f86      	ldr	r7, [pc, #536]	@ (8008618 <_printf_float+0x304>)
 80083fe:	e7d3      	b.n	80083a8 <_printf_float+0x94>
 8008400:	2220      	movs	r2, #32
 8008402:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008404:	686b      	ldr	r3, [r5, #4]
 8008406:	4394      	bics	r4, r2
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	d146      	bne.n	800849a <_printf_float+0x186>
 800840c:	3307      	adds	r3, #7
 800840e:	606b      	str	r3, [r5, #4]
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	4313      	orrs	r3, r2
 8008418:	2200      	movs	r2, #0
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	9206      	str	r2, [sp, #24]
 800841e:	aa14      	add	r2, sp, #80	@ 0x50
 8008420:	9205      	str	r2, [sp, #20]
 8008422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008424:	a90a      	add	r1, sp, #40	@ 0x28
 8008426:	9204      	str	r2, [sp, #16]
 8008428:	aa13      	add	r2, sp, #76	@ 0x4c
 800842a:	9203      	str	r2, [sp, #12]
 800842c:	2223      	movs	r2, #35	@ 0x23
 800842e:	1852      	adds	r2, r2, r1
 8008430:	9202      	str	r2, [sp, #8]
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	686b      	ldr	r3, [r5, #4]
 8008436:	0032      	movs	r2, r6
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800843c:	003b      	movs	r3, r7
 800843e:	f7ff fec3 	bl	80081c8 <__cvt>
 8008442:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008444:	0007      	movs	r7, r0
 8008446:	2c47      	cmp	r4, #71	@ 0x47
 8008448:	d12d      	bne.n	80084a6 <_printf_float+0x192>
 800844a:	1cd3      	adds	r3, r2, #3
 800844c:	db02      	blt.n	8008454 <_printf_float+0x140>
 800844e:	686b      	ldr	r3, [r5, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	dd47      	ble.n	80084e4 <_printf_float+0x1d0>
 8008454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008456:	3b02      	subs	r3, #2
 8008458:	b2db      	uxtb	r3, r3
 800845a:	930c      	str	r3, [sp, #48]	@ 0x30
 800845c:	0028      	movs	r0, r5
 800845e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008462:	3901      	subs	r1, #1
 8008464:	3050      	adds	r0, #80	@ 0x50
 8008466:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008468:	f7ff ff14 	bl	8008294 <__exponent>
 800846c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800846e:	0004      	movs	r4, r0
 8008470:	1813      	adds	r3, r2, r0
 8008472:	612b      	str	r3, [r5, #16]
 8008474:	2a01      	cmp	r2, #1
 8008476:	dc02      	bgt.n	800847e <_printf_float+0x16a>
 8008478:	682a      	ldr	r2, [r5, #0]
 800847a:	07d2      	lsls	r2, r2, #31
 800847c:	d501      	bpl.n	8008482 <_printf_float+0x16e>
 800847e:	3301      	adds	r3, #1
 8008480:	612b      	str	r3, [r5, #16]
 8008482:	2323      	movs	r3, #35	@ 0x23
 8008484:	aa0a      	add	r2, sp, #40	@ 0x28
 8008486:	189b      	adds	r3, r3, r2
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d100      	bne.n	8008490 <_printf_float+0x17c>
 800848e:	e792      	b.n	80083b6 <_printf_float+0xa2>
 8008490:	002b      	movs	r3, r5
 8008492:	222d      	movs	r2, #45	@ 0x2d
 8008494:	3343      	adds	r3, #67	@ 0x43
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e78d      	b.n	80083b6 <_printf_float+0xa2>
 800849a:	2c47      	cmp	r4, #71	@ 0x47
 800849c:	d1b8      	bne.n	8008410 <_printf_float+0xfc>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1b6      	bne.n	8008410 <_printf_float+0xfc>
 80084a2:	3301      	adds	r3, #1
 80084a4:	e7b3      	b.n	800840e <_printf_float+0xfa>
 80084a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084a8:	2b65      	cmp	r3, #101	@ 0x65
 80084aa:	d9d7      	bls.n	800845c <_printf_float+0x148>
 80084ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084ae:	2b66      	cmp	r3, #102	@ 0x66
 80084b0:	d11a      	bne.n	80084e8 <_printf_float+0x1d4>
 80084b2:	686b      	ldr	r3, [r5, #4]
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	dd09      	ble.n	80084cc <_printf_float+0x1b8>
 80084b8:	612a      	str	r2, [r5, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <_printf_float+0x1b0>
 80084be:	6829      	ldr	r1, [r5, #0]
 80084c0:	07c9      	lsls	r1, r1, #31
 80084c2:	d50b      	bpl.n	80084dc <_printf_float+0x1c8>
 80084c4:	3301      	adds	r3, #1
 80084c6:	189b      	adds	r3, r3, r2
 80084c8:	612b      	str	r3, [r5, #16]
 80084ca:	e007      	b.n	80084dc <_printf_float+0x1c8>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <_printf_float+0x1c4>
 80084d0:	2201      	movs	r2, #1
 80084d2:	6829      	ldr	r1, [r5, #0]
 80084d4:	4211      	tst	r1, r2
 80084d6:	d000      	beq.n	80084da <_printf_float+0x1c6>
 80084d8:	1c9a      	adds	r2, r3, #2
 80084da:	612a      	str	r2, [r5, #16]
 80084dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084de:	2400      	movs	r4, #0
 80084e0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80084e2:	e7ce      	b.n	8008482 <_printf_float+0x16e>
 80084e4:	2367      	movs	r3, #103	@ 0x67
 80084e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80084e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084ec:	4299      	cmp	r1, r3
 80084ee:	db06      	blt.n	80084fe <_printf_float+0x1ea>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	6129      	str	r1, [r5, #16]
 80084f4:	07db      	lsls	r3, r3, #31
 80084f6:	d5f1      	bpl.n	80084dc <_printf_float+0x1c8>
 80084f8:	3101      	adds	r1, #1
 80084fa:	6129      	str	r1, [r5, #16]
 80084fc:	e7ee      	b.n	80084dc <_printf_float+0x1c8>
 80084fe:	2201      	movs	r2, #1
 8008500:	2900      	cmp	r1, #0
 8008502:	dce0      	bgt.n	80084c6 <_printf_float+0x1b2>
 8008504:	1892      	adds	r2, r2, r2
 8008506:	1a52      	subs	r2, r2, r1
 8008508:	e7dd      	b.n	80084c6 <_printf_float+0x1b2>
 800850a:	682a      	ldr	r2, [r5, #0]
 800850c:	0553      	lsls	r3, r2, #21
 800850e:	d408      	bmi.n	8008522 <_printf_float+0x20e>
 8008510:	692b      	ldr	r3, [r5, #16]
 8008512:	003a      	movs	r2, r7
 8008514:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008518:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800851a:	47a0      	blx	r4
 800851c:	3001      	adds	r0, #1
 800851e:	d129      	bne.n	8008574 <_printf_float+0x260>
 8008520:	e754      	b.n	80083cc <_printf_float+0xb8>
 8008522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008524:	2b65      	cmp	r3, #101	@ 0x65
 8008526:	d800      	bhi.n	800852a <_printf_float+0x216>
 8008528:	e0db      	b.n	80086e2 <_printf_float+0x3ce>
 800852a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800852c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	f7f7 ff87 	bl	8000444 <__aeabi_dcmpeq>
 8008536:	2800      	cmp	r0, #0
 8008538:	d033      	beq.n	80085a2 <_printf_float+0x28e>
 800853a:	2301      	movs	r3, #1
 800853c:	4a37      	ldr	r2, [pc, #220]	@ (800861c <_printf_float+0x308>)
 800853e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008540:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008542:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008544:	47a0      	blx	r4
 8008546:	3001      	adds	r0, #1
 8008548:	d100      	bne.n	800854c <_printf_float+0x238>
 800854a:	e73f      	b.n	80083cc <_printf_float+0xb8>
 800854c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800854e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008550:	42b3      	cmp	r3, r6
 8008552:	db02      	blt.n	800855a <_printf_float+0x246>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	07db      	lsls	r3, r3, #31
 8008558:	d50c      	bpl.n	8008574 <_printf_float+0x260>
 800855a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800855c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800855e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008564:	47a0      	blx	r4
 8008566:	2400      	movs	r4, #0
 8008568:	3001      	adds	r0, #1
 800856a:	d100      	bne.n	800856e <_printf_float+0x25a>
 800856c:	e72e      	b.n	80083cc <_printf_float+0xb8>
 800856e:	1e73      	subs	r3, r6, #1
 8008570:	42a3      	cmp	r3, r4
 8008572:	dc0a      	bgt.n	800858a <_printf_float+0x276>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	079b      	lsls	r3, r3, #30
 8008578:	d500      	bpl.n	800857c <_printf_float+0x268>
 800857a:	e106      	b.n	800878a <_printf_float+0x476>
 800857c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800857e:	68e8      	ldr	r0, [r5, #12]
 8008580:	4298      	cmp	r0, r3
 8008582:	db00      	blt.n	8008586 <_printf_float+0x272>
 8008584:	e724      	b.n	80083d0 <_printf_float+0xbc>
 8008586:	0018      	movs	r0, r3
 8008588:	e722      	b.n	80083d0 <_printf_float+0xbc>
 800858a:	002a      	movs	r2, r5
 800858c:	2301      	movs	r3, #1
 800858e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008590:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008592:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008594:	321a      	adds	r2, #26
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	d100      	bne.n	800859e <_printf_float+0x28a>
 800859c:	e716      	b.n	80083cc <_printf_float+0xb8>
 800859e:	3401      	adds	r4, #1
 80085a0:	e7e5      	b.n	800856e <_printf_float+0x25a>
 80085a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc3b      	bgt.n	8008620 <_printf_float+0x30c>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <_printf_float+0x308>)
 80085ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80085b2:	47a0      	blx	r4
 80085b4:	3001      	adds	r0, #1
 80085b6:	d100      	bne.n	80085ba <_printf_float+0x2a6>
 80085b8:	e708      	b.n	80083cc <_printf_float+0xb8>
 80085ba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80085bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085be:	4333      	orrs	r3, r6
 80085c0:	d102      	bne.n	80085c8 <_printf_float+0x2b4>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	07db      	lsls	r3, r3, #31
 80085c6:	d5d5      	bpl.n	8008574 <_printf_float+0x260>
 80085c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80085d2:	47a0      	blx	r4
 80085d4:	2300      	movs	r3, #0
 80085d6:	3001      	adds	r0, #1
 80085d8:	d100      	bne.n	80085dc <_printf_float+0x2c8>
 80085da:	e6f7      	b.n	80083cc <_printf_float+0xb8>
 80085dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80085de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085e2:	425b      	negs	r3, r3
 80085e4:	4293      	cmp	r3, r2
 80085e6:	dc01      	bgt.n	80085ec <_printf_float+0x2d8>
 80085e8:	0033      	movs	r3, r6
 80085ea:	e792      	b.n	8008512 <_printf_float+0x1fe>
 80085ec:	002a      	movs	r2, r5
 80085ee:	2301      	movs	r3, #1
 80085f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80085f6:	321a      	adds	r2, #26
 80085f8:	47a0      	blx	r4
 80085fa:	3001      	adds	r0, #1
 80085fc:	d100      	bne.n	8008600 <_printf_float+0x2ec>
 80085fe:	e6e5      	b.n	80083cc <_printf_float+0xb8>
 8008600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008602:	3301      	adds	r3, #1
 8008604:	e7ea      	b.n	80085dc <_printf_float+0x2c8>
 8008606:	46c0      	nop			@ (mov r8, r8)
 8008608:	7fefffff 	.word	0x7fefffff
 800860c:	0800ad34 	.word	0x0800ad34
 8008610:	0800ad30 	.word	0x0800ad30
 8008614:	0800ad3c 	.word	0x0800ad3c
 8008618:	0800ad38 	.word	0x0800ad38
 800861c:	0800ad40 	.word	0x0800ad40
 8008620:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008622:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008624:	930c      	str	r3, [sp, #48]	@ 0x30
 8008626:	429e      	cmp	r6, r3
 8008628:	dd00      	ble.n	800862c <_printf_float+0x318>
 800862a:	001e      	movs	r6, r3
 800862c:	2e00      	cmp	r6, #0
 800862e:	dc31      	bgt.n	8008694 <_printf_float+0x380>
 8008630:	43f3      	mvns	r3, r6
 8008632:	2400      	movs	r4, #0
 8008634:	17db      	asrs	r3, r3, #31
 8008636:	4033      	ands	r3, r6
 8008638:	930e      	str	r3, [sp, #56]	@ 0x38
 800863a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800863c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800863e:	1af3      	subs	r3, r6, r3
 8008640:	42a3      	cmp	r3, r4
 8008642:	dc30      	bgt.n	80086a6 <_printf_float+0x392>
 8008644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008646:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008648:	429a      	cmp	r2, r3
 800864a:	dc38      	bgt.n	80086be <_printf_float+0x3aa>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	07db      	lsls	r3, r3, #31
 8008650:	d435      	bmi.n	80086be <_printf_float+0x3aa>
 8008652:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008656:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	1b14      	subs	r4, r2, r4
 800865c:	429c      	cmp	r4, r3
 800865e:	dd00      	ble.n	8008662 <_printf_float+0x34e>
 8008660:	001c      	movs	r4, r3
 8008662:	2c00      	cmp	r4, #0
 8008664:	dc34      	bgt.n	80086d0 <_printf_float+0x3bc>
 8008666:	43e3      	mvns	r3, r4
 8008668:	2600      	movs	r6, #0
 800866a:	17db      	asrs	r3, r3, #31
 800866c:	401c      	ands	r4, r3
 800866e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	1b1b      	subs	r3, r3, r4
 8008676:	42b3      	cmp	r3, r6
 8008678:	dc00      	bgt.n	800867c <_printf_float+0x368>
 800867a:	e77b      	b.n	8008574 <_printf_float+0x260>
 800867c:	002a      	movs	r2, r5
 800867e:	2301      	movs	r3, #1
 8008680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008684:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008686:	321a      	adds	r2, #26
 8008688:	47b8      	blx	r7
 800868a:	3001      	adds	r0, #1
 800868c:	d100      	bne.n	8008690 <_printf_float+0x37c>
 800868e:	e69d      	b.n	80083cc <_printf_float+0xb8>
 8008690:	3601      	adds	r6, #1
 8008692:	e7ec      	b.n	800866e <_printf_float+0x35a>
 8008694:	0033      	movs	r3, r6
 8008696:	003a      	movs	r2, r7
 8008698:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800869a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800869c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800869e:	47a0      	blx	r4
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1c5      	bne.n	8008630 <_printf_float+0x31c>
 80086a4:	e692      	b.n	80083cc <_printf_float+0xb8>
 80086a6:	002a      	movs	r2, r5
 80086a8:	2301      	movs	r3, #1
 80086aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086b0:	321a      	adds	r2, #26
 80086b2:	47b0      	blx	r6
 80086b4:	3001      	adds	r0, #1
 80086b6:	d100      	bne.n	80086ba <_printf_float+0x3a6>
 80086b8:	e688      	b.n	80083cc <_printf_float+0xb8>
 80086ba:	3401      	adds	r4, #1
 80086bc:	e7bd      	b.n	800863a <_printf_float+0x326>
 80086be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80086c8:	47a0      	blx	r4
 80086ca:	3001      	adds	r0, #1
 80086cc:	d1c1      	bne.n	8008652 <_printf_float+0x33e>
 80086ce:	e67d      	b.n	80083cc <_printf_float+0xb8>
 80086d0:	19ba      	adds	r2, r7, r6
 80086d2:	0023      	movs	r3, r4
 80086d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086da:	47b0      	blx	r6
 80086dc:	3001      	adds	r0, #1
 80086de:	d1c2      	bne.n	8008666 <_printf_float+0x352>
 80086e0:	e674      	b.n	80083cc <_printf_float+0xb8>
 80086e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	dc02      	bgt.n	80086f0 <_printf_float+0x3dc>
 80086ea:	2301      	movs	r3, #1
 80086ec:	421a      	tst	r2, r3
 80086ee:	d039      	beq.n	8008764 <_printf_float+0x450>
 80086f0:	2301      	movs	r3, #1
 80086f2:	003a      	movs	r2, r7
 80086f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086fa:	47b0      	blx	r6
 80086fc:	3001      	adds	r0, #1
 80086fe:	d100      	bne.n	8008702 <_printf_float+0x3ee>
 8008700:	e664      	b.n	80083cc <_printf_float+0xb8>
 8008702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800870a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800870c:	47b0      	blx	r6
 800870e:	3001      	adds	r0, #1
 8008710:	d100      	bne.n	8008714 <_printf_float+0x400>
 8008712:	e65b      	b.n	80083cc <_printf_float+0xb8>
 8008714:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008716:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800871a:	2200      	movs	r2, #0
 800871c:	3b01      	subs	r3, #1
 800871e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008720:	2300      	movs	r3, #0
 8008722:	f7f7 fe8f 	bl	8000444 <__aeabi_dcmpeq>
 8008726:	2800      	cmp	r0, #0
 8008728:	d11a      	bne.n	8008760 <_printf_float+0x44c>
 800872a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800872c:	1c7a      	adds	r2, r7, #1
 800872e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008730:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008732:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008734:	47b0      	blx	r6
 8008736:	3001      	adds	r0, #1
 8008738:	d10e      	bne.n	8008758 <_printf_float+0x444>
 800873a:	e647      	b.n	80083cc <_printf_float+0xb8>
 800873c:	002a      	movs	r2, r5
 800873e:	2301      	movs	r3, #1
 8008740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008744:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008746:	321a      	adds	r2, #26
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	d100      	bne.n	8008750 <_printf_float+0x43c>
 800874e:	e63d      	b.n	80083cc <_printf_float+0xb8>
 8008750:	3601      	adds	r6, #1
 8008752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008754:	429e      	cmp	r6, r3
 8008756:	dbf1      	blt.n	800873c <_printf_float+0x428>
 8008758:	002a      	movs	r2, r5
 800875a:	0023      	movs	r3, r4
 800875c:	3250      	adds	r2, #80	@ 0x50
 800875e:	e6d9      	b.n	8008514 <_printf_float+0x200>
 8008760:	2600      	movs	r6, #0
 8008762:	e7f6      	b.n	8008752 <_printf_float+0x43e>
 8008764:	003a      	movs	r2, r7
 8008766:	e7e2      	b.n	800872e <_printf_float+0x41a>
 8008768:	002a      	movs	r2, r5
 800876a:	2301      	movs	r3, #1
 800876c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800876e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008770:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008772:	3219      	adds	r2, #25
 8008774:	47b0      	blx	r6
 8008776:	3001      	adds	r0, #1
 8008778:	d100      	bne.n	800877c <_printf_float+0x468>
 800877a:	e627      	b.n	80083cc <_printf_float+0xb8>
 800877c:	3401      	adds	r4, #1
 800877e:	68eb      	ldr	r3, [r5, #12]
 8008780:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	42a3      	cmp	r3, r4
 8008786:	dcef      	bgt.n	8008768 <_printf_float+0x454>
 8008788:	e6f8      	b.n	800857c <_printf_float+0x268>
 800878a:	2400      	movs	r4, #0
 800878c:	e7f7      	b.n	800877e <_printf_float+0x46a>
 800878e:	46c0      	nop			@ (mov r8, r8)

08008790 <_printf_common>:
 8008790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008792:	0016      	movs	r6, r2
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	688a      	ldr	r2, [r1, #8]
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	000c      	movs	r4, r1
 800879c:	9000      	str	r0, [sp, #0]
 800879e:	4293      	cmp	r3, r2
 80087a0:	da00      	bge.n	80087a4 <_printf_common+0x14>
 80087a2:	0013      	movs	r3, r2
 80087a4:	0022      	movs	r2, r4
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	3243      	adds	r2, #67	@ 0x43
 80087aa:	7812      	ldrb	r2, [r2, #0]
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d001      	beq.n	80087b4 <_printf_common+0x24>
 80087b0:	3301      	adds	r3, #1
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	069b      	lsls	r3, r3, #26
 80087b8:	d502      	bpl.n	80087c0 <_printf_common+0x30>
 80087ba:	6833      	ldr	r3, [r6, #0]
 80087bc:	3302      	adds	r3, #2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	2306      	movs	r3, #6
 80087c4:	0015      	movs	r5, r2
 80087c6:	401d      	ands	r5, r3
 80087c8:	421a      	tst	r2, r3
 80087ca:	d027      	beq.n	800881c <_printf_common+0x8c>
 80087cc:	0023      	movs	r3, r4
 80087ce:	3343      	adds	r3, #67	@ 0x43
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	1e5a      	subs	r2, r3, #1
 80087d4:	4193      	sbcs	r3, r2
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	0692      	lsls	r2, r2, #26
 80087da:	d430      	bmi.n	800883e <_printf_common+0xae>
 80087dc:	0022      	movs	r2, r4
 80087de:	9901      	ldr	r1, [sp, #4]
 80087e0:	9800      	ldr	r0, [sp, #0]
 80087e2:	9d08      	ldr	r5, [sp, #32]
 80087e4:	3243      	adds	r2, #67	@ 0x43
 80087e6:	47a8      	blx	r5
 80087e8:	3001      	adds	r0, #1
 80087ea:	d025      	beq.n	8008838 <_printf_common+0xa8>
 80087ec:	2206      	movs	r2, #6
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	2500      	movs	r5, #0
 80087f2:	4013      	ands	r3, r2
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d105      	bne.n	8008804 <_printf_common+0x74>
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	68e5      	ldr	r5, [r4, #12]
 80087fc:	1aed      	subs	r5, r5, r3
 80087fe:	43eb      	mvns	r3, r5
 8008800:	17db      	asrs	r3, r3, #31
 8008802:	401d      	ands	r5, r3
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	6922      	ldr	r2, [r4, #16]
 8008808:	4293      	cmp	r3, r2
 800880a:	dd01      	ble.n	8008810 <_printf_common+0x80>
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	18ed      	adds	r5, r5, r3
 8008810:	2600      	movs	r6, #0
 8008812:	42b5      	cmp	r5, r6
 8008814:	d120      	bne.n	8008858 <_printf_common+0xc8>
 8008816:	2000      	movs	r0, #0
 8008818:	e010      	b.n	800883c <_printf_common+0xac>
 800881a:	3501      	adds	r5, #1
 800881c:	68e3      	ldr	r3, [r4, #12]
 800881e:	6832      	ldr	r2, [r6, #0]
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	42ab      	cmp	r3, r5
 8008824:	ddd2      	ble.n	80087cc <_printf_common+0x3c>
 8008826:	0022      	movs	r2, r4
 8008828:	2301      	movs	r3, #1
 800882a:	9901      	ldr	r1, [sp, #4]
 800882c:	9800      	ldr	r0, [sp, #0]
 800882e:	9f08      	ldr	r7, [sp, #32]
 8008830:	3219      	adds	r2, #25
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	d1f0      	bne.n	800881a <_printf_common+0x8a>
 8008838:	2001      	movs	r0, #1
 800883a:	4240      	negs	r0, r0
 800883c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800883e:	2030      	movs	r0, #48	@ 0x30
 8008840:	18e1      	adds	r1, r4, r3
 8008842:	3143      	adds	r1, #67	@ 0x43
 8008844:	7008      	strb	r0, [r1, #0]
 8008846:	0021      	movs	r1, r4
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	3145      	adds	r1, #69	@ 0x45
 800884c:	7809      	ldrb	r1, [r1, #0]
 800884e:	18a2      	adds	r2, r4, r2
 8008850:	3243      	adds	r2, #67	@ 0x43
 8008852:	3302      	adds	r3, #2
 8008854:	7011      	strb	r1, [r2, #0]
 8008856:	e7c1      	b.n	80087dc <_printf_common+0x4c>
 8008858:	0022      	movs	r2, r4
 800885a:	2301      	movs	r3, #1
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	9800      	ldr	r0, [sp, #0]
 8008860:	9f08      	ldr	r7, [sp, #32]
 8008862:	321a      	adds	r2, #26
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	d0e6      	beq.n	8008838 <_printf_common+0xa8>
 800886a:	3601      	adds	r6, #1
 800886c:	e7d1      	b.n	8008812 <_printf_common+0x82>
	...

08008870 <_printf_i>:
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008872:	b08b      	sub	sp, #44	@ 0x2c
 8008874:	9206      	str	r2, [sp, #24]
 8008876:	000a      	movs	r2, r1
 8008878:	3243      	adds	r2, #67	@ 0x43
 800887a:	9307      	str	r3, [sp, #28]
 800887c:	9005      	str	r0, [sp, #20]
 800887e:	9203      	str	r2, [sp, #12]
 8008880:	7e0a      	ldrb	r2, [r1, #24]
 8008882:	000c      	movs	r4, r1
 8008884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008886:	2a78      	cmp	r2, #120	@ 0x78
 8008888:	d809      	bhi.n	800889e <_printf_i+0x2e>
 800888a:	2a62      	cmp	r2, #98	@ 0x62
 800888c:	d80b      	bhi.n	80088a6 <_printf_i+0x36>
 800888e:	2a00      	cmp	r2, #0
 8008890:	d100      	bne.n	8008894 <_printf_i+0x24>
 8008892:	e0ba      	b.n	8008a0a <_printf_i+0x19a>
 8008894:	497a      	ldr	r1, [pc, #488]	@ (8008a80 <_printf_i+0x210>)
 8008896:	9104      	str	r1, [sp, #16]
 8008898:	2a58      	cmp	r2, #88	@ 0x58
 800889a:	d100      	bne.n	800889e <_printf_i+0x2e>
 800889c:	e08e      	b.n	80089bc <_printf_i+0x14c>
 800889e:	0025      	movs	r5, r4
 80088a0:	3542      	adds	r5, #66	@ 0x42
 80088a2:	702a      	strb	r2, [r5, #0]
 80088a4:	e022      	b.n	80088ec <_printf_i+0x7c>
 80088a6:	0010      	movs	r0, r2
 80088a8:	3863      	subs	r0, #99	@ 0x63
 80088aa:	2815      	cmp	r0, #21
 80088ac:	d8f7      	bhi.n	800889e <_printf_i+0x2e>
 80088ae:	f7f7 fc39 	bl	8000124 <__gnu_thumb1_case_shi>
 80088b2:	0016      	.short	0x0016
 80088b4:	fff6001f 	.word	0xfff6001f
 80088b8:	fff6fff6 	.word	0xfff6fff6
 80088bc:	001ffff6 	.word	0x001ffff6
 80088c0:	fff6fff6 	.word	0xfff6fff6
 80088c4:	fff6fff6 	.word	0xfff6fff6
 80088c8:	0036009f 	.word	0x0036009f
 80088cc:	fff6007e 	.word	0xfff6007e
 80088d0:	00b0fff6 	.word	0x00b0fff6
 80088d4:	0036fff6 	.word	0x0036fff6
 80088d8:	fff6fff6 	.word	0xfff6fff6
 80088dc:	0082      	.short	0x0082
 80088de:	0025      	movs	r5, r4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	3542      	adds	r5, #66	@ 0x42
 80088e4:	1d11      	adds	r1, r2, #4
 80088e6:	6019      	str	r1, [r3, #0]
 80088e8:	6813      	ldr	r3, [r2, #0]
 80088ea:	702b      	strb	r3, [r5, #0]
 80088ec:	2301      	movs	r3, #1
 80088ee:	e09e      	b.n	8008a2e <_printf_i+0x1be>
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	6809      	ldr	r1, [r1, #0]
 80088f4:	1d02      	adds	r2, r0, #4
 80088f6:	060d      	lsls	r5, r1, #24
 80088f8:	d50b      	bpl.n	8008912 <_printf_i+0xa2>
 80088fa:	6806      	ldr	r6, [r0, #0]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	2e00      	cmp	r6, #0
 8008900:	da03      	bge.n	800890a <_printf_i+0x9a>
 8008902:	232d      	movs	r3, #45	@ 0x2d
 8008904:	9a03      	ldr	r2, [sp, #12]
 8008906:	4276      	negs	r6, r6
 8008908:	7013      	strb	r3, [r2, #0]
 800890a:	4b5d      	ldr	r3, [pc, #372]	@ (8008a80 <_printf_i+0x210>)
 800890c:	270a      	movs	r7, #10
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	e018      	b.n	8008944 <_printf_i+0xd4>
 8008912:	6806      	ldr	r6, [r0, #0]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	0649      	lsls	r1, r1, #25
 8008918:	d5f1      	bpl.n	80088fe <_printf_i+0x8e>
 800891a:	b236      	sxth	r6, r6
 800891c:	e7ef      	b.n	80088fe <_printf_i+0x8e>
 800891e:	6808      	ldr	r0, [r1, #0]
 8008920:	6819      	ldr	r1, [r3, #0]
 8008922:	c940      	ldmia	r1!, {r6}
 8008924:	0605      	lsls	r5, r0, #24
 8008926:	d402      	bmi.n	800892e <_printf_i+0xbe>
 8008928:	0640      	lsls	r0, r0, #25
 800892a:	d500      	bpl.n	800892e <_printf_i+0xbe>
 800892c:	b2b6      	uxth	r6, r6
 800892e:	6019      	str	r1, [r3, #0]
 8008930:	4b53      	ldr	r3, [pc, #332]	@ (8008a80 <_printf_i+0x210>)
 8008932:	270a      	movs	r7, #10
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	2a6f      	cmp	r2, #111	@ 0x6f
 8008938:	d100      	bne.n	800893c <_printf_i+0xcc>
 800893a:	3f02      	subs	r7, #2
 800893c:	0023      	movs	r3, r4
 800893e:	2200      	movs	r2, #0
 8008940:	3343      	adds	r3, #67	@ 0x43
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	db06      	blt.n	800895a <_printf_i+0xea>
 800894c:	2104      	movs	r1, #4
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	9d03      	ldr	r5, [sp, #12]
 8008952:	438a      	bics	r2, r1
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	4333      	orrs	r3, r6
 8008958:	d00c      	beq.n	8008974 <_printf_i+0x104>
 800895a:	9d03      	ldr	r5, [sp, #12]
 800895c:	0030      	movs	r0, r6
 800895e:	0039      	movs	r1, r7
 8008960:	f7f7 fc70 	bl	8000244 <__aeabi_uidivmod>
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	3d01      	subs	r5, #1
 8008968:	5c5b      	ldrb	r3, [r3, r1]
 800896a:	702b      	strb	r3, [r5, #0]
 800896c:	0033      	movs	r3, r6
 800896e:	0006      	movs	r6, r0
 8008970:	429f      	cmp	r7, r3
 8008972:	d9f3      	bls.n	800895c <_printf_i+0xec>
 8008974:	2f08      	cmp	r7, #8
 8008976:	d109      	bne.n	800898c <_printf_i+0x11c>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d506      	bpl.n	800898c <_printf_i+0x11c>
 800897e:	6862      	ldr	r2, [r4, #4]
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	dc02      	bgt.n	800898c <_printf_i+0x11c>
 8008986:	2330      	movs	r3, #48	@ 0x30
 8008988:	3d01      	subs	r5, #1
 800898a:	702b      	strb	r3, [r5, #0]
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1b5b      	subs	r3, r3, r5
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	9b07      	ldr	r3, [sp, #28]
 8008994:	0021      	movs	r1, r4
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	9805      	ldr	r0, [sp, #20]
 800899a:	9b06      	ldr	r3, [sp, #24]
 800899c:	aa09      	add	r2, sp, #36	@ 0x24
 800899e:	f7ff fef7 	bl	8008790 <_printf_common>
 80089a2:	3001      	adds	r0, #1
 80089a4:	d148      	bne.n	8008a38 <_printf_i+0x1c8>
 80089a6:	2001      	movs	r0, #1
 80089a8:	4240      	negs	r0, r0
 80089aa:	b00b      	add	sp, #44	@ 0x2c
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ae:	2220      	movs	r2, #32
 80089b0:	6809      	ldr	r1, [r1, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	6022      	str	r2, [r4, #0]
 80089b6:	2278      	movs	r2, #120	@ 0x78
 80089b8:	4932      	ldr	r1, [pc, #200]	@ (8008a84 <_printf_i+0x214>)
 80089ba:	9104      	str	r1, [sp, #16]
 80089bc:	0021      	movs	r1, r4
 80089be:	3145      	adds	r1, #69	@ 0x45
 80089c0:	700a      	strb	r2, [r1, #0]
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	c940      	ldmia	r1!, {r6}
 80089c8:	0610      	lsls	r0, r2, #24
 80089ca:	d402      	bmi.n	80089d2 <_printf_i+0x162>
 80089cc:	0650      	lsls	r0, r2, #25
 80089ce:	d500      	bpl.n	80089d2 <_printf_i+0x162>
 80089d0:	b2b6      	uxth	r6, r6
 80089d2:	6019      	str	r1, [r3, #0]
 80089d4:	07d3      	lsls	r3, r2, #31
 80089d6:	d502      	bpl.n	80089de <_printf_i+0x16e>
 80089d8:	2320      	movs	r3, #32
 80089da:	4313      	orrs	r3, r2
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d001      	beq.n	80089e6 <_printf_i+0x176>
 80089e2:	2710      	movs	r7, #16
 80089e4:	e7aa      	b.n	800893c <_printf_i+0xcc>
 80089e6:	2220      	movs	r2, #32
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	4393      	bics	r3, r2
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	e7f8      	b.n	80089e2 <_printf_i+0x172>
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	680d      	ldr	r5, [r1, #0]
 80089f4:	1d10      	adds	r0, r2, #4
 80089f6:	6949      	ldr	r1, [r1, #20]
 80089f8:	6018      	str	r0, [r3, #0]
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	062e      	lsls	r6, r5, #24
 80089fe:	d501      	bpl.n	8008a04 <_printf_i+0x194>
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	e002      	b.n	8008a0a <_printf_i+0x19a>
 8008a04:	066d      	lsls	r5, r5, #25
 8008a06:	d5fb      	bpl.n	8008a00 <_printf_i+0x190>
 8008a08:	8019      	strh	r1, [r3, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9d03      	ldr	r5, [sp, #12]
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	e7bf      	b.n	8008992 <_printf_i+0x122>
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	1d11      	adds	r1, r2, #4
 8008a16:	6019      	str	r1, [r3, #0]
 8008a18:	6815      	ldr	r5, [r2, #0]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	0028      	movs	r0, r5
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	f000 f9df 	bl	8008de2 <memchr>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d001      	beq.n	8008a2c <_printf_i+0x1bc>
 8008a28:	1b40      	subs	r0, r0, r5
 8008a2a:	6060      	str	r0, [r4, #4]
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	2300      	movs	r3, #0
 8008a32:	9a03      	ldr	r2, [sp, #12]
 8008a34:	7013      	strb	r3, [r2, #0]
 8008a36:	e7ac      	b.n	8008992 <_printf_i+0x122>
 8008a38:	002a      	movs	r2, r5
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	9906      	ldr	r1, [sp, #24]
 8008a3e:	9805      	ldr	r0, [sp, #20]
 8008a40:	9d07      	ldr	r5, [sp, #28]
 8008a42:	47a8      	blx	r5
 8008a44:	3001      	adds	r0, #1
 8008a46:	d0ae      	beq.n	80089a6 <_printf_i+0x136>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	079b      	lsls	r3, r3, #30
 8008a4c:	d415      	bmi.n	8008a7a <_printf_i+0x20a>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	68e0      	ldr	r0, [r4, #12]
 8008a52:	4298      	cmp	r0, r3
 8008a54:	daa9      	bge.n	80089aa <_printf_i+0x13a>
 8008a56:	0018      	movs	r0, r3
 8008a58:	e7a7      	b.n	80089aa <_printf_i+0x13a>
 8008a5a:	0022      	movs	r2, r4
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9906      	ldr	r1, [sp, #24]
 8008a60:	9805      	ldr	r0, [sp, #20]
 8008a62:	9e07      	ldr	r6, [sp, #28]
 8008a64:	3219      	adds	r2, #25
 8008a66:	47b0      	blx	r6
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d09c      	beq.n	80089a6 <_printf_i+0x136>
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	dcf0      	bgt.n	8008a5a <_printf_i+0x1ea>
 8008a78:	e7e9      	b.n	8008a4e <_printf_i+0x1de>
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	e7f7      	b.n	8008a6e <_printf_i+0x1fe>
 8008a7e:	46c0      	nop			@ (mov r8, r8)
 8008a80:	0800ad42 	.word	0x0800ad42
 8008a84:	0800ad53 	.word	0x0800ad53

08008a88 <std>:
 8008a88:	2300      	movs	r3, #0
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	0004      	movs	r4, r0
 8008a8e:	6003      	str	r3, [r0, #0]
 8008a90:	6043      	str	r3, [r0, #4]
 8008a92:	6083      	str	r3, [r0, #8]
 8008a94:	8181      	strh	r1, [r0, #12]
 8008a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a98:	81c2      	strh	r2, [r0, #14]
 8008a9a:	6103      	str	r3, [r0, #16]
 8008a9c:	6143      	str	r3, [r0, #20]
 8008a9e:	6183      	str	r3, [r0, #24]
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	305c      	adds	r0, #92	@ 0x5c
 8008aa6:	f000 f8ff 	bl	8008ca8 <memset>
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <std+0x50>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8008adc <std+0x54>)
 8008ab2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae0 <std+0x58>)
 8008ab6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae4 <std+0x5c>)
 8008aba:	6323      	str	r3, [r4, #48]	@ 0x30
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <std+0x60>)
 8008abe:	429c      	cmp	r4, r3
 8008ac0:	d005      	beq.n	8008ace <std+0x46>
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <std+0x64>)
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d002      	beq.n	8008ace <std+0x46>
 8008ac8:	4b09      	ldr	r3, [pc, #36]	@ (8008af0 <std+0x68>)
 8008aca:	429c      	cmp	r4, r3
 8008acc:	d103      	bne.n	8008ad6 <std+0x4e>
 8008ace:	0020      	movs	r0, r4
 8008ad0:	3058      	adds	r0, #88	@ 0x58
 8008ad2:	f000 f983 	bl	8008ddc <__retarget_lock_init_recursive>
 8008ad6:	bd10      	pop	{r4, pc}
 8008ad8:	08008c11 	.word	0x08008c11
 8008adc:	08008c39 	.word	0x08008c39
 8008ae0:	08008c71 	.word	0x08008c71
 8008ae4:	08008c9d 	.word	0x08008c9d
 8008ae8:	20000590 	.word	0x20000590
 8008aec:	200005f8 	.word	0x200005f8
 8008af0:	20000660 	.word	0x20000660

08008af4 <stdio_exit_handler>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	4a03      	ldr	r2, [pc, #12]	@ (8008b04 <stdio_exit_handler+0x10>)
 8008af8:	4903      	ldr	r1, [pc, #12]	@ (8008b08 <stdio_exit_handler+0x14>)
 8008afa:	4804      	ldr	r0, [pc, #16]	@ (8008b0c <stdio_exit_handler+0x18>)
 8008afc:	f000 f86c 	bl	8008bd8 <_fwalk_sglue>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	46c0      	nop			@ (mov r8, r8)
 8008b04:	20000018 	.word	0x20000018
 8008b08:	0800a535 	.word	0x0800a535
 8008b0c:	20000028 	.word	0x20000028

08008b10 <cleanup_stdio>:
 8008b10:	6841      	ldr	r1, [r0, #4]
 8008b12:	4b0b      	ldr	r3, [pc, #44]	@ (8008b40 <cleanup_stdio+0x30>)
 8008b14:	b510      	push	{r4, lr}
 8008b16:	0004      	movs	r4, r0
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	d001      	beq.n	8008b20 <cleanup_stdio+0x10>
 8008b1c:	f001 fd0a 	bl	800a534 <_fflush_r>
 8008b20:	68a1      	ldr	r1, [r4, #8]
 8008b22:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <cleanup_stdio+0x34>)
 8008b24:	4299      	cmp	r1, r3
 8008b26:	d002      	beq.n	8008b2e <cleanup_stdio+0x1e>
 8008b28:	0020      	movs	r0, r4
 8008b2a:	f001 fd03 	bl	800a534 <_fflush_r>
 8008b2e:	68e1      	ldr	r1, [r4, #12]
 8008b30:	4b05      	ldr	r3, [pc, #20]	@ (8008b48 <cleanup_stdio+0x38>)
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d002      	beq.n	8008b3c <cleanup_stdio+0x2c>
 8008b36:	0020      	movs	r0, r4
 8008b38:	f001 fcfc 	bl	800a534 <_fflush_r>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	20000590 	.word	0x20000590
 8008b44:	200005f8 	.word	0x200005f8
 8008b48:	20000660 	.word	0x20000660

08008b4c <global_stdio_init.part.0>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	4b09      	ldr	r3, [pc, #36]	@ (8008b74 <global_stdio_init.part.0+0x28>)
 8008b50:	4a09      	ldr	r2, [pc, #36]	@ (8008b78 <global_stdio_init.part.0+0x2c>)
 8008b52:	2104      	movs	r1, #4
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	4809      	ldr	r0, [pc, #36]	@ (8008b7c <global_stdio_init.part.0+0x30>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7ff ff95 	bl	8008a88 <std>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	2109      	movs	r1, #9
 8008b62:	4807      	ldr	r0, [pc, #28]	@ (8008b80 <global_stdio_init.part.0+0x34>)
 8008b64:	f7ff ff90 	bl	8008a88 <std>
 8008b68:	2202      	movs	r2, #2
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	4805      	ldr	r0, [pc, #20]	@ (8008b84 <global_stdio_init.part.0+0x38>)
 8008b6e:	f7ff ff8b 	bl	8008a88 <std>
 8008b72:	bd10      	pop	{r4, pc}
 8008b74:	200006c8 	.word	0x200006c8
 8008b78:	08008af5 	.word	0x08008af5
 8008b7c:	20000590 	.word	0x20000590
 8008b80:	200005f8 	.word	0x200005f8
 8008b84:	20000660 	.word	0x20000660

08008b88 <__sfp_lock_acquire>:
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	4802      	ldr	r0, [pc, #8]	@ (8008b94 <__sfp_lock_acquire+0xc>)
 8008b8c:	f000 f927 	bl	8008dde <__retarget_lock_acquire_recursive>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	46c0      	nop			@ (mov r8, r8)
 8008b94:	200006d1 	.word	0x200006d1

08008b98 <__sfp_lock_release>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4802      	ldr	r0, [pc, #8]	@ (8008ba4 <__sfp_lock_release+0xc>)
 8008b9c:	f000 f920 	bl	8008de0 <__retarget_lock_release_recursive>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	200006d1 	.word	0x200006d1

08008ba8 <__sinit>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	0004      	movs	r4, r0
 8008bac:	f7ff ffec 	bl	8008b88 <__sfp_lock_acquire>
 8008bb0:	6a23      	ldr	r3, [r4, #32]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <__sinit+0x14>
 8008bb6:	f7ff ffef 	bl	8008b98 <__sfp_lock_release>
 8008bba:	bd10      	pop	{r4, pc}
 8008bbc:	4b04      	ldr	r3, [pc, #16]	@ (8008bd0 <__sinit+0x28>)
 8008bbe:	6223      	str	r3, [r4, #32]
 8008bc0:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <__sinit+0x2c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1f6      	bne.n	8008bb6 <__sinit+0xe>
 8008bc8:	f7ff ffc0 	bl	8008b4c <global_stdio_init.part.0>
 8008bcc:	e7f3      	b.n	8008bb6 <__sinit+0xe>
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	08008b11 	.word	0x08008b11
 8008bd4:	200006c8 	.word	0x200006c8

08008bd8 <_fwalk_sglue>:
 8008bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bda:	0014      	movs	r4, r2
 8008bdc:	2600      	movs	r6, #0
 8008bde:	9000      	str	r0, [sp, #0]
 8008be0:	9101      	str	r1, [sp, #4]
 8008be2:	68a5      	ldr	r5, [r4, #8]
 8008be4:	6867      	ldr	r7, [r4, #4]
 8008be6:	3f01      	subs	r7, #1
 8008be8:	d504      	bpl.n	8008bf4 <_fwalk_sglue+0x1c>
 8008bea:	6824      	ldr	r4, [r4, #0]
 8008bec:	2c00      	cmp	r4, #0
 8008bee:	d1f8      	bne.n	8008be2 <_fwalk_sglue+0xa>
 8008bf0:	0030      	movs	r0, r6
 8008bf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bf4:	89ab      	ldrh	r3, [r5, #12]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d908      	bls.n	8008c0c <_fwalk_sglue+0x34>
 8008bfa:	220e      	movs	r2, #14
 8008bfc:	5eab      	ldrsh	r3, [r5, r2]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	d004      	beq.n	8008c0c <_fwalk_sglue+0x34>
 8008c02:	0029      	movs	r1, r5
 8008c04:	9800      	ldr	r0, [sp, #0]
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	4798      	blx	r3
 8008c0a:	4306      	orrs	r6, r0
 8008c0c:	3568      	adds	r5, #104	@ 0x68
 8008c0e:	e7ea      	b.n	8008be6 <_fwalk_sglue+0xe>

08008c10 <__sread>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	000c      	movs	r4, r1
 8008c14:	250e      	movs	r5, #14
 8008c16:	5f49      	ldrsh	r1, [r1, r5]
 8008c18:	f000 f88e 	bl	8008d38 <_read_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	db03      	blt.n	8008c28 <__sread+0x18>
 8008c20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c22:	181b      	adds	r3, r3, r0
 8008c24:	6563      	str	r3, [r4, #84]	@ 0x54
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	4a02      	ldr	r2, [pc, #8]	@ (8008c34 <__sread+0x24>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	e7f9      	b.n	8008c26 <__sread+0x16>
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	ffffefff 	.word	0xffffefff

08008c38 <__swrite>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	001f      	movs	r7, r3
 8008c3c:	898b      	ldrh	r3, [r1, #12]
 8008c3e:	0005      	movs	r5, r0
 8008c40:	000c      	movs	r4, r1
 8008c42:	0016      	movs	r6, r2
 8008c44:	05db      	lsls	r3, r3, #23
 8008c46:	d505      	bpl.n	8008c54 <__swrite+0x1c>
 8008c48:	230e      	movs	r3, #14
 8008c4a:	5ec9      	ldrsh	r1, [r1, r3]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2302      	movs	r3, #2
 8008c50:	f000 f85e 	bl	8008d10 <_lseek_r>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	4a05      	ldr	r2, [pc, #20]	@ (8008c6c <__swrite+0x34>)
 8008c58:	0028      	movs	r0, r5
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	0032      	movs	r2, r6
 8008c60:	230e      	movs	r3, #14
 8008c62:	5ee1      	ldrsh	r1, [r4, r3]
 8008c64:	003b      	movs	r3, r7
 8008c66:	f000 f87b 	bl	8008d60 <_write_r>
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c6c:	ffffefff 	.word	0xffffefff

08008c70 <__sseek>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	000c      	movs	r4, r1
 8008c74:	250e      	movs	r5, #14
 8008c76:	5f49      	ldrsh	r1, [r1, r5]
 8008c78:	f000 f84a 	bl	8008d10 <_lseek_r>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	1c42      	adds	r2, r0, #1
 8008c80:	d103      	bne.n	8008c8a <__sseek+0x1a>
 8008c82:	4a05      	ldr	r2, [pc, #20]	@ (8008c98 <__sseek+0x28>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
 8008c8a:	2280      	movs	r2, #128	@ 0x80
 8008c8c:	0152      	lsls	r2, r2, #5
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c94:	e7f8      	b.n	8008c88 <__sseek+0x18>
 8008c96:	46c0      	nop			@ (mov r8, r8)
 8008c98:	ffffefff 	.word	0xffffefff

08008c9c <__sclose>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	230e      	movs	r3, #14
 8008ca0:	5ec9      	ldrsh	r1, [r1, r3]
 8008ca2:	f000 f823 	bl	8008cec <_close_r>
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <memset>:
 8008ca8:	0003      	movs	r3, r0
 8008caa:	1882      	adds	r2, r0, r2
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d100      	bne.n	8008cb2 <memset+0xa>
 8008cb0:	4770      	bx	lr
 8008cb2:	7019      	strb	r1, [r3, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	e7f9      	b.n	8008cac <memset+0x4>

08008cb8 <strstr>:
 8008cb8:	780a      	ldrb	r2, [r1, #0]
 8008cba:	b530      	push	{r4, r5, lr}
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d10c      	bne.n	8008cda <strstr+0x22>
 8008cc0:	bd30      	pop	{r4, r5, pc}
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d108      	bne.n	8008cd8 <strstr+0x20>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	5ccc      	ldrb	r4, [r1, r3]
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	d0f8      	beq.n	8008cc0 <strstr+0x8>
 8008cce:	5cc5      	ldrb	r5, [r0, r3]
 8008cd0:	42a5      	cmp	r5, r4
 8008cd2:	d101      	bne.n	8008cd8 <strstr+0x20>
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	e7f7      	b.n	8008cc8 <strstr+0x10>
 8008cd8:	3001      	adds	r0, #1
 8008cda:	7803      	ldrb	r3, [r0, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1f0      	bne.n	8008cc2 <strstr+0xa>
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	e7ed      	b.n	8008cc0 <strstr+0x8>

08008ce4 <_localeconv_r>:
 8008ce4:	4800      	ldr	r0, [pc, #0]	@ (8008ce8 <_localeconv_r+0x4>)
 8008ce6:	4770      	bx	lr
 8008ce8:	20000164 	.word	0x20000164

08008cec <_close_r>:
 8008cec:	2300      	movs	r3, #0
 8008cee:	b570      	push	{r4, r5, r6, lr}
 8008cf0:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <_close_r+0x20>)
 8008cf2:	0004      	movs	r4, r0
 8008cf4:	0008      	movs	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7fb f95c 	bl	8003fb4 <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d103      	bne.n	8008d08 <_close_r+0x1c>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d000      	beq.n	8008d08 <_close_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd70      	pop	{r4, r5, r6, pc}
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	200006cc 	.word	0x200006cc

08008d10 <_lseek_r>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	0004      	movs	r4, r0
 8008d14:	0008      	movs	r0, r1
 8008d16:	0011      	movs	r1, r2
 8008d18:	001a      	movs	r2, r3
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4d05      	ldr	r5, [pc, #20]	@ (8008d34 <_lseek_r+0x24>)
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7fb f969 	bl	8003ff6 <_lseek>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d103      	bne.n	8008d30 <_lseek_r+0x20>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d000      	beq.n	8008d30 <_lseek_r+0x20>
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	46c0      	nop			@ (mov r8, r8)
 8008d34:	200006cc 	.word	0x200006cc

08008d38 <_read_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	0004      	movs	r4, r0
 8008d3c:	0008      	movs	r0, r1
 8008d3e:	0011      	movs	r1, r2
 8008d40:	001a      	movs	r2, r3
 8008d42:	2300      	movs	r3, #0
 8008d44:	4d05      	ldr	r5, [pc, #20]	@ (8008d5c <_read_r+0x24>)
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7fb f8fb 	bl	8003f42 <_read>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d103      	bne.n	8008d58 <_read_r+0x20>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d000      	beq.n	8008d58 <_read_r+0x20>
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	200006cc 	.word	0x200006cc

08008d60 <_write_r>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	0004      	movs	r4, r0
 8008d64:	0008      	movs	r0, r1
 8008d66:	0011      	movs	r1, r2
 8008d68:	001a      	movs	r2, r3
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4d05      	ldr	r5, [pc, #20]	@ (8008d84 <_write_r+0x24>)
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7fb f904 	bl	8003f7c <_write>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d103      	bne.n	8008d80 <_write_r+0x20>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d000      	beq.n	8008d80 <_write_r+0x20>
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	46c0      	nop			@ (mov r8, r8)
 8008d84:	200006cc 	.word	0x200006cc

08008d88 <__errno>:
 8008d88:	4b01      	ldr	r3, [pc, #4]	@ (8008d90 <__errno+0x8>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	4770      	bx	lr
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	20000024 	.word	0x20000024

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	2600      	movs	r6, #0
 8008d98:	4c0c      	ldr	r4, [pc, #48]	@ (8008dcc <__libc_init_array+0x38>)
 8008d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008dd0 <__libc_init_array+0x3c>)
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	2600      	movs	r6, #0
 8008da6:	f001 ff4b 	bl	800ac40 <_init>
 8008daa:	4c0a      	ldr	r4, [pc, #40]	@ (8008dd4 <__libc_init_array+0x40>)
 8008dac:	4d0a      	ldr	r5, [pc, #40]	@ (8008dd8 <__libc_init_array+0x44>)
 8008dae:	1b64      	subs	r4, r4, r5
 8008db0:	10a4      	asrs	r4, r4, #2
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	00b3      	lsls	r3, r6, #2
 8008dba:	58eb      	ldr	r3, [r5, r3]
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	00b3      	lsls	r3, r6, #2
 8008dc4:	58eb      	ldr	r3, [r5, r3]
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	0800b0a4 	.word	0x0800b0a4
 8008dd0:	0800b0a4 	.word	0x0800b0a4
 8008dd4:	0800b0a8 	.word	0x0800b0a8
 8008dd8:	0800b0a4 	.word	0x0800b0a4

08008ddc <__retarget_lock_init_recursive>:
 8008ddc:	4770      	bx	lr

08008dde <__retarget_lock_acquire_recursive>:
 8008dde:	4770      	bx	lr

08008de0 <__retarget_lock_release_recursive>:
 8008de0:	4770      	bx	lr

08008de2 <memchr>:
 8008de2:	b2c9      	uxtb	r1, r1
 8008de4:	1882      	adds	r2, r0, r2
 8008de6:	4290      	cmp	r0, r2
 8008de8:	d101      	bne.n	8008dee <memchr+0xc>
 8008dea:	2000      	movs	r0, #0
 8008dec:	4770      	bx	lr
 8008dee:	7803      	ldrb	r3, [r0, #0]
 8008df0:	428b      	cmp	r3, r1
 8008df2:	d0fb      	beq.n	8008dec <memchr+0xa>
 8008df4:	3001      	adds	r0, #1
 8008df6:	e7f6      	b.n	8008de6 <memchr+0x4>

08008df8 <quorem>:
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	6903      	ldr	r3, [r0, #16]
 8008dfc:	690c      	ldr	r4, [r1, #16]
 8008dfe:	b089      	sub	sp, #36	@ 0x24
 8008e00:	9003      	str	r0, [sp, #12]
 8008e02:	9106      	str	r1, [sp, #24]
 8008e04:	2000      	movs	r0, #0
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	db63      	blt.n	8008ed2 <quorem+0xda>
 8008e0a:	000b      	movs	r3, r1
 8008e0c:	3c01      	subs	r4, #1
 8008e0e:	3314      	adds	r3, #20
 8008e10:	00a5      	lsls	r5, r4, #2
 8008e12:	9304      	str	r3, [sp, #16]
 8008e14:	195b      	adds	r3, r3, r5
 8008e16:	9305      	str	r3, [sp, #20]
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3314      	adds	r3, #20
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	195d      	adds	r5, r3, r5
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	682f      	ldr	r7, [r5, #0]
 8008e24:	681e      	ldr	r6, [r3, #0]
 8008e26:	0038      	movs	r0, r7
 8008e28:	3601      	adds	r6, #1
 8008e2a:	0031      	movs	r1, r6
 8008e2c:	f7f7 f984 	bl	8000138 <__udivsi3>
 8008e30:	9002      	str	r0, [sp, #8]
 8008e32:	42b7      	cmp	r7, r6
 8008e34:	d327      	bcc.n	8008e86 <quorem+0x8e>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	2700      	movs	r7, #0
 8008e3a:	469c      	mov	ip, r3
 8008e3c:	9e01      	ldr	r6, [sp, #4]
 8008e3e:	9707      	str	r7, [sp, #28]
 8008e40:	4662      	mov	r2, ip
 8008e42:	ca08      	ldmia	r2!, {r3}
 8008e44:	6830      	ldr	r0, [r6, #0]
 8008e46:	4694      	mov	ip, r2
 8008e48:	9a02      	ldr	r2, [sp, #8]
 8008e4a:	b299      	uxth	r1, r3
 8008e4c:	4351      	muls	r1, r2
 8008e4e:	0c1b      	lsrs	r3, r3, #16
 8008e50:	4353      	muls	r3, r2
 8008e52:	19c9      	adds	r1, r1, r7
 8008e54:	0c0a      	lsrs	r2, r1, #16
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	b289      	uxth	r1, r1
 8008e5a:	b282      	uxth	r2, r0
 8008e5c:	1a52      	subs	r2, r2, r1
 8008e5e:	9907      	ldr	r1, [sp, #28]
 8008e60:	0c1f      	lsrs	r7, r3, #16
 8008e62:	1852      	adds	r2, r2, r1
 8008e64:	0c00      	lsrs	r0, r0, #16
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	1411      	asrs	r1, r2, #16
 8008e6a:	1ac3      	subs	r3, r0, r3
 8008e6c:	185b      	adds	r3, r3, r1
 8008e6e:	1419      	asrs	r1, r3, #16
 8008e70:	b292      	uxth	r2, r2
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	431a      	orrs	r2, r3
 8008e76:	9b05      	ldr	r3, [sp, #20]
 8008e78:	9107      	str	r1, [sp, #28]
 8008e7a:	c604      	stmia	r6!, {r2}
 8008e7c:	4563      	cmp	r3, ip
 8008e7e:	d2df      	bcs.n	8008e40 <quorem+0x48>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d02b      	beq.n	8008ede <quorem+0xe6>
 8008e86:	9906      	ldr	r1, [sp, #24]
 8008e88:	9803      	ldr	r0, [sp, #12]
 8008e8a:	f001 f9b7 	bl	800a1fc <__mcmp>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	db1e      	blt.n	8008ed0 <quorem+0xd8>
 8008e92:	2600      	movs	r6, #0
 8008e94:	9d01      	ldr	r5, [sp, #4]
 8008e96:	9904      	ldr	r1, [sp, #16]
 8008e98:	c901      	ldmia	r1!, {r0}
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b287      	uxth	r7, r0
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	1bd2      	subs	r2, r2, r7
 8008ea2:	1992      	adds	r2, r2, r6
 8008ea4:	0c00      	lsrs	r0, r0, #16
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	1a1b      	subs	r3, r3, r0
 8008eaa:	1410      	asrs	r0, r2, #16
 8008eac:	181b      	adds	r3, r3, r0
 8008eae:	141e      	asrs	r6, r3, #16
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	9b05      	ldr	r3, [sp, #20]
 8008eb8:	c504      	stmia	r5!, {r2}
 8008eba:	428b      	cmp	r3, r1
 8008ebc:	d2ec      	bcs.n	8008e98 <quorem+0xa0>
 8008ebe:	9a01      	ldr	r2, [sp, #4]
 8008ec0:	00a3      	lsls	r3, r4, #2
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	d014      	beq.n	8008ef4 <quorem+0xfc>
 8008eca:	9b02      	ldr	r3, [sp, #8]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	9302      	str	r3, [sp, #8]
 8008ed0:	9802      	ldr	r0, [sp, #8]
 8008ed2:	b009      	add	sp, #36	@ 0x24
 8008ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <quorem+0xee>
 8008edc:	3c01      	subs	r4, #1
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	3d04      	subs	r5, #4
 8008ee2:	42ab      	cmp	r3, r5
 8008ee4:	d3f7      	bcc.n	8008ed6 <quorem+0xde>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	611c      	str	r4, [r3, #16]
 8008eea:	e7cc      	b.n	8008e86 <quorem+0x8e>
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d104      	bne.n	8008efc <quorem+0x104>
 8008ef2:	3c01      	subs	r4, #1
 8008ef4:	9a01      	ldr	r2, [sp, #4]
 8008ef6:	3b04      	subs	r3, #4
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d3f7      	bcc.n	8008eec <quorem+0xf4>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	611c      	str	r4, [r3, #16]
 8008f00:	e7e3      	b.n	8008eca <quorem+0xd2>
	...

08008f04 <_dtoa_r>:
 8008f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f06:	0014      	movs	r4, r2
 8008f08:	001d      	movs	r5, r3
 8008f0a:	69c6      	ldr	r6, [r0, #28]
 8008f0c:	b09d      	sub	sp, #116	@ 0x74
 8008f0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f10:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008f12:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008f14:	9003      	str	r0, [sp, #12]
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	d10f      	bne.n	8008f3a <_dtoa_r+0x36>
 8008f1a:	2010      	movs	r0, #16
 8008f1c:	f000 fe2c 	bl	8009b78 <malloc>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	1e02      	subs	r2, r0, #0
 8008f24:	61d8      	str	r0, [r3, #28]
 8008f26:	d104      	bne.n	8008f32 <_dtoa_r+0x2e>
 8008f28:	21ef      	movs	r1, #239	@ 0xef
 8008f2a:	4bc7      	ldr	r3, [pc, #796]	@ (8009248 <_dtoa_r+0x344>)
 8008f2c:	48c7      	ldr	r0, [pc, #796]	@ (800924c <_dtoa_r+0x348>)
 8008f2e:	f001 fb49 	bl	800a5c4 <__assert_func>
 8008f32:	6046      	str	r6, [r0, #4]
 8008f34:	6086      	str	r6, [r0, #8]
 8008f36:	6006      	str	r6, [r0, #0]
 8008f38:	60c6      	str	r6, [r0, #12]
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	d00b      	beq.n	8008f5c <_dtoa_r+0x58>
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	2301      	movs	r3, #1
 8008f48:	4093      	lsls	r3, r2
 8008f4a:	604a      	str	r2, [r1, #4]
 8008f4c:	608b      	str	r3, [r1, #8]
 8008f4e:	9803      	ldr	r0, [sp, #12]
 8008f50:	f000 ff12 	bl	8009d78 <_Bfree>
 8008f54:	2200      	movs	r2, #0
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	2d00      	cmp	r5, #0
 8008f5e:	da1e      	bge.n	8008f9e <_dtoa_r+0x9a>
 8008f60:	2301      	movs	r3, #1
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	006b      	lsls	r3, r5, #1
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f6a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008f6c:	4bb8      	ldr	r3, [pc, #736]	@ (8009250 <_dtoa_r+0x34c>)
 8008f6e:	4ab8      	ldr	r2, [pc, #736]	@ (8009250 <_dtoa_r+0x34c>)
 8008f70:	403b      	ands	r3, r7
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d116      	bne.n	8008fa4 <_dtoa_r+0xa0>
 8008f76:	4bb7      	ldr	r3, [pc, #732]	@ (8009254 <_dtoa_r+0x350>)
 8008f78:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	033b      	lsls	r3, r7, #12
 8008f7e:	0b1b      	lsrs	r3, r3, #12
 8008f80:	4323      	orrs	r3, r4
 8008f82:	d101      	bne.n	8008f88 <_dtoa_r+0x84>
 8008f84:	f000 fd80 	bl	8009a88 <_dtoa_r+0xb84>
 8008f88:	4bb3      	ldr	r3, [pc, #716]	@ (8009258 <_dtoa_r+0x354>)
 8008f8a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	d002      	beq.n	8008f98 <_dtoa_r+0x94>
 8008f92:	4bb2      	ldr	r3, [pc, #712]	@ (800925c <_dtoa_r+0x358>)
 8008f94:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	9808      	ldr	r0, [sp, #32]
 8008f9a:	b01d      	add	sp, #116	@ 0x74
 8008f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	e7e2      	b.n	8008f6a <_dtoa_r+0x66>
 8008fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fa8:	9212      	str	r2, [sp, #72]	@ 0x48
 8008faa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008fae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f7f7 fa46 	bl	8000444 <__aeabi_dcmpeq>
 8008fb8:	1e06      	subs	r6, r0, #0
 8008fba:	d00b      	beq.n	8008fd4 <_dtoa_r+0xd0>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <_dtoa_r+0xca>
 8008fc8:	4ba5      	ldr	r3, [pc, #660]	@ (8009260 <_dtoa_r+0x35c>)
 8008fca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	4ba5      	ldr	r3, [pc, #660]	@ (8009264 <_dtoa_r+0x360>)
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	e7e1      	b.n	8008f98 <_dtoa_r+0x94>
 8008fd4:	ab1a      	add	r3, sp, #104	@ 0x68
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9803      	ldr	r0, [sp, #12]
 8008fde:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008fe0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fe2:	f001 f9c1 	bl	800a368 <__d2b>
 8008fe6:	007a      	lsls	r2, r7, #1
 8008fe8:	9005      	str	r0, [sp, #20]
 8008fea:	0d52      	lsrs	r2, r2, #21
 8008fec:	d100      	bne.n	8008ff0 <_dtoa_r+0xec>
 8008fee:	e07b      	b.n	80090e8 <_dtoa_r+0x1e4>
 8008ff0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ff2:	9618      	str	r6, [sp, #96]	@ 0x60
 8008ff4:	0319      	lsls	r1, r3, #12
 8008ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8009268 <_dtoa_r+0x364>)
 8008ff8:	0b09      	lsrs	r1, r1, #12
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	499b      	ldr	r1, [pc, #620]	@ (800926c <_dtoa_r+0x368>)
 8008ffe:	1857      	adds	r7, r2, r1
 8009000:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009002:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009004:	0019      	movs	r1, r3
 8009006:	2200      	movs	r2, #0
 8009008:	4b99      	ldr	r3, [pc, #612]	@ (8009270 <_dtoa_r+0x36c>)
 800900a:	f7f9 f811 	bl	8002030 <__aeabi_dsub>
 800900e:	4a99      	ldr	r2, [pc, #612]	@ (8009274 <_dtoa_r+0x370>)
 8009010:	4b99      	ldr	r3, [pc, #612]	@ (8009278 <_dtoa_r+0x374>)
 8009012:	f7f8 fd27 	bl	8001a64 <__aeabi_dmul>
 8009016:	4a99      	ldr	r2, [pc, #612]	@ (800927c <_dtoa_r+0x378>)
 8009018:	4b99      	ldr	r3, [pc, #612]	@ (8009280 <_dtoa_r+0x37c>)
 800901a:	f7f7 fd23 	bl	8000a64 <__aeabi_dadd>
 800901e:	0004      	movs	r4, r0
 8009020:	0038      	movs	r0, r7
 8009022:	000d      	movs	r5, r1
 8009024:	f7f9 fc6c 	bl	8002900 <__aeabi_i2d>
 8009028:	4a96      	ldr	r2, [pc, #600]	@ (8009284 <_dtoa_r+0x380>)
 800902a:	4b97      	ldr	r3, [pc, #604]	@ (8009288 <_dtoa_r+0x384>)
 800902c:	f7f8 fd1a 	bl	8001a64 <__aeabi_dmul>
 8009030:	0002      	movs	r2, r0
 8009032:	000b      	movs	r3, r1
 8009034:	0020      	movs	r0, r4
 8009036:	0029      	movs	r1, r5
 8009038:	f7f7 fd14 	bl	8000a64 <__aeabi_dadd>
 800903c:	0004      	movs	r4, r0
 800903e:	000d      	movs	r5, r1
 8009040:	f7f9 fc22 	bl	8002888 <__aeabi_d2iz>
 8009044:	2200      	movs	r2, #0
 8009046:	9004      	str	r0, [sp, #16]
 8009048:	2300      	movs	r3, #0
 800904a:	0020      	movs	r0, r4
 800904c:	0029      	movs	r1, r5
 800904e:	f7f7 f9ff 	bl	8000450 <__aeabi_dcmplt>
 8009052:	2800      	cmp	r0, #0
 8009054:	d00b      	beq.n	800906e <_dtoa_r+0x16a>
 8009056:	9804      	ldr	r0, [sp, #16]
 8009058:	f7f9 fc52 	bl	8002900 <__aeabi_i2d>
 800905c:	002b      	movs	r3, r5
 800905e:	0022      	movs	r2, r4
 8009060:	f7f7 f9f0 	bl	8000444 <__aeabi_dcmpeq>
 8009064:	4243      	negs	r3, r0
 8009066:	4158      	adcs	r0, r3
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	1a1b      	subs	r3, r3, r0
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	2301      	movs	r3, #1
 8009070:	9315      	str	r3, [sp, #84]	@ 0x54
 8009072:	9b04      	ldr	r3, [sp, #16]
 8009074:	2b16      	cmp	r3, #22
 8009076:	d810      	bhi.n	800909a <_dtoa_r+0x196>
 8009078:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800907a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	4b83      	ldr	r3, [pc, #524]	@ (800928c <_dtoa_r+0x388>)
 8009080:	00d2      	lsls	r2, r2, #3
 8009082:	189b      	adds	r3, r3, r2
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f7f7 f9e2 	bl	8000450 <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d047      	beq.n	8009120 <_dtoa_r+0x21c>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	3b01      	subs	r3, #1
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	2300      	movs	r3, #0
 8009098:	9315      	str	r3, [sp, #84]	@ 0x54
 800909a:	2200      	movs	r2, #0
 800909c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800909e:	9206      	str	r2, [sp, #24]
 80090a0:	1bdb      	subs	r3, r3, r7
 80090a2:	1e5a      	subs	r2, r3, #1
 80090a4:	d53e      	bpl.n	8009124 <_dtoa_r+0x220>
 80090a6:	2201      	movs	r2, #1
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	9306      	str	r3, [sp, #24]
 80090ac:	2300      	movs	r3, #0
 80090ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80090b0:	9b04      	ldr	r3, [sp, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	db38      	blt.n	8009128 <_dtoa_r+0x224>
 80090b6:	9a04      	ldr	r2, [sp, #16]
 80090b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090ba:	4694      	mov	ip, r2
 80090bc:	4463      	add	r3, ip
 80090be:	930d      	str	r3, [sp, #52]	@ 0x34
 80090c0:	2300      	movs	r3, #0
 80090c2:	9214      	str	r2, [sp, #80]	@ 0x50
 80090c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80090c8:	2401      	movs	r4, #1
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d862      	bhi.n	8009194 <_dtoa_r+0x290>
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	dd02      	ble.n	80090d8 <_dtoa_r+0x1d4>
 80090d2:	2400      	movs	r4, #0
 80090d4:	3b04      	subs	r3, #4
 80090d6:	9322      	str	r3, [sp, #136]	@ 0x88
 80090d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80090da:	1e98      	subs	r0, r3, #2
 80090dc:	2803      	cmp	r0, #3
 80090de:	d863      	bhi.n	80091a8 <_dtoa_r+0x2a4>
 80090e0:	f7f7 f816 	bl	8000110 <__gnu_thumb1_case_uqi>
 80090e4:	2b385654 	.word	0x2b385654
 80090e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090ea:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80090ec:	18f6      	adds	r6, r6, r3
 80090ee:	4b68      	ldr	r3, [pc, #416]	@ (8009290 <_dtoa_r+0x38c>)
 80090f0:	18f2      	adds	r2, r6, r3
 80090f2:	2a20      	cmp	r2, #32
 80090f4:	dd0f      	ble.n	8009116 <_dtoa_r+0x212>
 80090f6:	2340      	movs	r3, #64	@ 0x40
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	409f      	lsls	r7, r3
 80090fc:	4b65      	ldr	r3, [pc, #404]	@ (8009294 <_dtoa_r+0x390>)
 80090fe:	0038      	movs	r0, r7
 8009100:	18f3      	adds	r3, r6, r3
 8009102:	40dc      	lsrs	r4, r3
 8009104:	4320      	orrs	r0, r4
 8009106:	f7f9 fc29 	bl	800295c <__aeabi_ui2d>
 800910a:	2201      	movs	r2, #1
 800910c:	4b62      	ldr	r3, [pc, #392]	@ (8009298 <_dtoa_r+0x394>)
 800910e:	1e77      	subs	r7, r6, #1
 8009110:	18cb      	adds	r3, r1, r3
 8009112:	9218      	str	r2, [sp, #96]	@ 0x60
 8009114:	e776      	b.n	8009004 <_dtoa_r+0x100>
 8009116:	2320      	movs	r3, #32
 8009118:	0020      	movs	r0, r4
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	4098      	lsls	r0, r3
 800911e:	e7f2      	b.n	8009106 <_dtoa_r+0x202>
 8009120:	9015      	str	r0, [sp, #84]	@ 0x54
 8009122:	e7ba      	b.n	800909a <_dtoa_r+0x196>
 8009124:	920d      	str	r2, [sp, #52]	@ 0x34
 8009126:	e7c3      	b.n	80090b0 <_dtoa_r+0x1ac>
 8009128:	9b06      	ldr	r3, [sp, #24]
 800912a:	9a04      	ldr	r2, [sp, #16]
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	4253      	negs	r3, r2
 8009132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009134:	2300      	movs	r3, #0
 8009136:	9314      	str	r3, [sp, #80]	@ 0x50
 8009138:	e7c5      	b.n	80090c6 <_dtoa_r+0x1c2>
 800913a:	2301      	movs	r3, #1
 800913c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800913e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009140:	4694      	mov	ip, r2
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	4463      	add	r3, ip
 8009146:	930e      	str	r3, [sp, #56]	@ 0x38
 8009148:	3301      	adds	r3, #1
 800914a:	9309      	str	r3, [sp, #36]	@ 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc08      	bgt.n	8009162 <_dtoa_r+0x25e>
 8009150:	2301      	movs	r3, #1
 8009152:	e006      	b.n	8009162 <_dtoa_r+0x25e>
 8009154:	2301      	movs	r3, #1
 8009156:	9310      	str	r3, [sp, #64]	@ 0x40
 8009158:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800915a:	2b00      	cmp	r3, #0
 800915c:	dd28      	ble.n	80091b0 <_dtoa_r+0x2ac>
 800915e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009160:	9309      	str	r3, [sp, #36]	@ 0x24
 8009162:	9a03      	ldr	r2, [sp, #12]
 8009164:	2100      	movs	r1, #0
 8009166:	69d0      	ldr	r0, [r2, #28]
 8009168:	2204      	movs	r2, #4
 800916a:	0015      	movs	r5, r2
 800916c:	3514      	adds	r5, #20
 800916e:	429d      	cmp	r5, r3
 8009170:	d923      	bls.n	80091ba <_dtoa_r+0x2b6>
 8009172:	6041      	str	r1, [r0, #4]
 8009174:	9803      	ldr	r0, [sp, #12]
 8009176:	f000 fdbb 	bl	8009cf0 <_Balloc>
 800917a:	9008      	str	r0, [sp, #32]
 800917c:	2800      	cmp	r0, #0
 800917e:	d11f      	bne.n	80091c0 <_dtoa_r+0x2bc>
 8009180:	21b0      	movs	r1, #176	@ 0xb0
 8009182:	4b46      	ldr	r3, [pc, #280]	@ (800929c <_dtoa_r+0x398>)
 8009184:	4831      	ldr	r0, [pc, #196]	@ (800924c <_dtoa_r+0x348>)
 8009186:	9a08      	ldr	r2, [sp, #32]
 8009188:	31ff      	adds	r1, #255	@ 0xff
 800918a:	e6d0      	b.n	8008f2e <_dtoa_r+0x2a>
 800918c:	2300      	movs	r3, #0
 800918e:	e7e2      	b.n	8009156 <_dtoa_r+0x252>
 8009190:	2300      	movs	r3, #0
 8009192:	e7d3      	b.n	800913c <_dtoa_r+0x238>
 8009194:	2300      	movs	r3, #0
 8009196:	9410      	str	r4, [sp, #64]	@ 0x40
 8009198:	9322      	str	r3, [sp, #136]	@ 0x88
 800919a:	3b01      	subs	r3, #1
 800919c:	2200      	movs	r2, #0
 800919e:	930e      	str	r3, [sp, #56]	@ 0x38
 80091a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a2:	3313      	adds	r3, #19
 80091a4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80091a6:	e7dc      	b.n	8009162 <_dtoa_r+0x25e>
 80091a8:	2301      	movs	r3, #1
 80091aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80091ac:	3b02      	subs	r3, #2
 80091ae:	e7f5      	b.n	800919c <_dtoa_r+0x298>
 80091b0:	2301      	movs	r3, #1
 80091b2:	001a      	movs	r2, r3
 80091b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80091b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b8:	e7f4      	b.n	80091a4 <_dtoa_r+0x2a0>
 80091ba:	3101      	adds	r1, #1
 80091bc:	0052      	lsls	r2, r2, #1
 80091be:	e7d4      	b.n	800916a <_dtoa_r+0x266>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	9a08      	ldr	r2, [sp, #32]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ca:	2b0e      	cmp	r3, #14
 80091cc:	d900      	bls.n	80091d0 <_dtoa_r+0x2cc>
 80091ce:	e0d6      	b.n	800937e <_dtoa_r+0x47a>
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	d100      	bne.n	80091d6 <_dtoa_r+0x2d2>
 80091d4:	e0d3      	b.n	800937e <_dtoa_r+0x47a>
 80091d6:	9b04      	ldr	r3, [sp, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dd63      	ble.n	80092a4 <_dtoa_r+0x3a0>
 80091dc:	210f      	movs	r1, #15
 80091de:	9a04      	ldr	r2, [sp, #16]
 80091e0:	4b2a      	ldr	r3, [pc, #168]	@ (800928c <_dtoa_r+0x388>)
 80091e2:	400a      	ands	r2, r1
 80091e4:	00d2      	lsls	r2, r2, #3
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	681e      	ldr	r6, [r3, #0]
 80091ea:	685f      	ldr	r7, [r3, #4]
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	2402      	movs	r4, #2
 80091f0:	111d      	asrs	r5, r3, #4
 80091f2:	05db      	lsls	r3, r3, #23
 80091f4:	d50a      	bpl.n	800920c <_dtoa_r+0x308>
 80091f6:	4b2a      	ldr	r3, [pc, #168]	@ (80092a0 <_dtoa_r+0x39c>)
 80091f8:	400d      	ands	r5, r1
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009200:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009202:	f7f7 fff5 	bl	80011f0 <__aeabi_ddiv>
 8009206:	900a      	str	r0, [sp, #40]	@ 0x28
 8009208:	910b      	str	r1, [sp, #44]	@ 0x2c
 800920a:	3401      	adds	r4, #1
 800920c:	4b24      	ldr	r3, [pc, #144]	@ (80092a0 <_dtoa_r+0x39c>)
 800920e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009210:	2d00      	cmp	r5, #0
 8009212:	d108      	bne.n	8009226 <_dtoa_r+0x322>
 8009214:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009216:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009218:	0032      	movs	r2, r6
 800921a:	003b      	movs	r3, r7
 800921c:	f7f7 ffe8 	bl	80011f0 <__aeabi_ddiv>
 8009220:	900a      	str	r0, [sp, #40]	@ 0x28
 8009222:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009224:	e059      	b.n	80092da <_dtoa_r+0x3d6>
 8009226:	2301      	movs	r3, #1
 8009228:	421d      	tst	r5, r3
 800922a:	d009      	beq.n	8009240 <_dtoa_r+0x33c>
 800922c:	18e4      	adds	r4, r4, r3
 800922e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009230:	0030      	movs	r0, r6
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	0039      	movs	r1, r7
 8009238:	f7f8 fc14 	bl	8001a64 <__aeabi_dmul>
 800923c:	0006      	movs	r6, r0
 800923e:	000f      	movs	r7, r1
 8009240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009242:	106d      	asrs	r5, r5, #1
 8009244:	3308      	adds	r3, #8
 8009246:	e7e2      	b.n	800920e <_dtoa_r+0x30a>
 8009248:	0800ad71 	.word	0x0800ad71
 800924c:	0800ad88 	.word	0x0800ad88
 8009250:	7ff00000 	.word	0x7ff00000
 8009254:	0000270f 	.word	0x0000270f
 8009258:	0800ad6d 	.word	0x0800ad6d
 800925c:	0800ad70 	.word	0x0800ad70
 8009260:	0800ad41 	.word	0x0800ad41
 8009264:	0800ad40 	.word	0x0800ad40
 8009268:	3ff00000 	.word	0x3ff00000
 800926c:	fffffc01 	.word	0xfffffc01
 8009270:	3ff80000 	.word	0x3ff80000
 8009274:	636f4361 	.word	0x636f4361
 8009278:	3fd287a7 	.word	0x3fd287a7
 800927c:	8b60c8b3 	.word	0x8b60c8b3
 8009280:	3fc68a28 	.word	0x3fc68a28
 8009284:	509f79fb 	.word	0x509f79fb
 8009288:	3fd34413 	.word	0x3fd34413
 800928c:	0800aed8 	.word	0x0800aed8
 8009290:	00000432 	.word	0x00000432
 8009294:	00000412 	.word	0x00000412
 8009298:	fe100000 	.word	0xfe100000
 800929c:	0800ade0 	.word	0x0800ade0
 80092a0:	0800aeb0 	.word	0x0800aeb0
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	2402      	movs	r4, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d016      	beq.n	80092da <_dtoa_r+0x3d6>
 80092ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80092ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80092b0:	220f      	movs	r2, #15
 80092b2:	425d      	negs	r5, r3
 80092b4:	402a      	ands	r2, r5
 80092b6:	4bd5      	ldr	r3, [pc, #852]	@ (800960c <_dtoa_r+0x708>)
 80092b8:	00d2      	lsls	r2, r2, #3
 80092ba:	189b      	adds	r3, r3, r2
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f7f8 fbd0 	bl	8001a64 <__aeabi_dmul>
 80092c4:	2701      	movs	r7, #1
 80092c6:	2300      	movs	r3, #0
 80092c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80092ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092cc:	4ed0      	ldr	r6, [pc, #832]	@ (8009610 <_dtoa_r+0x70c>)
 80092ce:	112d      	asrs	r5, r5, #4
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	d000      	beq.n	80092d6 <_dtoa_r+0x3d2>
 80092d4:	e095      	b.n	8009402 <_dtoa_r+0x4fe>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1a2      	bne.n	8009220 <_dtoa_r+0x31c>
 80092da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80092dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80092de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d100      	bne.n	80092e6 <_dtoa_r+0x3e2>
 80092e4:	e098      	b.n	8009418 <_dtoa_r+0x514>
 80092e6:	2200      	movs	r2, #0
 80092e8:	0030      	movs	r0, r6
 80092ea:	0039      	movs	r1, r7
 80092ec:	4bc9      	ldr	r3, [pc, #804]	@ (8009614 <_dtoa_r+0x710>)
 80092ee:	f7f7 f8af 	bl	8000450 <__aeabi_dcmplt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d100      	bne.n	80092f8 <_dtoa_r+0x3f4>
 80092f6:	e08f      	b.n	8009418 <_dtoa_r+0x514>
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d100      	bne.n	8009300 <_dtoa_r+0x3fc>
 80092fe:	e08b      	b.n	8009418 <_dtoa_r+0x514>
 8009300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009302:	2b00      	cmp	r3, #0
 8009304:	dd37      	ble.n	8009376 <_dtoa_r+0x472>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	2200      	movs	r2, #0
 800930a:	3b01      	subs	r3, #1
 800930c:	930c      	str	r3, [sp, #48]	@ 0x30
 800930e:	0030      	movs	r0, r6
 8009310:	4bc1      	ldr	r3, [pc, #772]	@ (8009618 <_dtoa_r+0x714>)
 8009312:	0039      	movs	r1, r7
 8009314:	f7f8 fba6 	bl	8001a64 <__aeabi_dmul>
 8009318:	900a      	str	r0, [sp, #40]	@ 0x28
 800931a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800931c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931e:	3401      	adds	r4, #1
 8009320:	0020      	movs	r0, r4
 8009322:	9311      	str	r3, [sp, #68]	@ 0x44
 8009324:	f7f9 faec 	bl	8002900 <__aeabi_i2d>
 8009328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800932a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800932c:	f7f8 fb9a 	bl	8001a64 <__aeabi_dmul>
 8009330:	4bba      	ldr	r3, [pc, #744]	@ (800961c <_dtoa_r+0x718>)
 8009332:	2200      	movs	r2, #0
 8009334:	f7f7 fb96 	bl	8000a64 <__aeabi_dadd>
 8009338:	4bb9      	ldr	r3, [pc, #740]	@ (8009620 <_dtoa_r+0x71c>)
 800933a:	0006      	movs	r6, r0
 800933c:	18cf      	adds	r7, r1, r3
 800933e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009340:	2b00      	cmp	r3, #0
 8009342:	d16d      	bne.n	8009420 <_dtoa_r+0x51c>
 8009344:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009346:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009348:	2200      	movs	r2, #0
 800934a:	4bb6      	ldr	r3, [pc, #728]	@ (8009624 <_dtoa_r+0x720>)
 800934c:	f7f8 fe70 	bl	8002030 <__aeabi_dsub>
 8009350:	0032      	movs	r2, r6
 8009352:	003b      	movs	r3, r7
 8009354:	0004      	movs	r4, r0
 8009356:	000d      	movs	r5, r1
 8009358:	f7f7 f88e 	bl	8000478 <__aeabi_dcmpgt>
 800935c:	2800      	cmp	r0, #0
 800935e:	d000      	beq.n	8009362 <_dtoa_r+0x45e>
 8009360:	e2b6      	b.n	80098d0 <_dtoa_r+0x9cc>
 8009362:	2180      	movs	r1, #128	@ 0x80
 8009364:	0609      	lsls	r1, r1, #24
 8009366:	187b      	adds	r3, r7, r1
 8009368:	0032      	movs	r2, r6
 800936a:	0020      	movs	r0, r4
 800936c:	0029      	movs	r1, r5
 800936e:	f7f7 f86f 	bl	8000450 <__aeabi_dcmplt>
 8009372:	2800      	cmp	r0, #0
 8009374:	d128      	bne.n	80093c8 <_dtoa_r+0x4c4>
 8009376:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009378:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800937a:	930a      	str	r3, [sp, #40]	@ 0x28
 800937c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800937e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009380:	2b00      	cmp	r3, #0
 8009382:	da00      	bge.n	8009386 <_dtoa_r+0x482>
 8009384:	e174      	b.n	8009670 <_dtoa_r+0x76c>
 8009386:	9a04      	ldr	r2, [sp, #16]
 8009388:	2a0e      	cmp	r2, #14
 800938a:	dd00      	ble.n	800938e <_dtoa_r+0x48a>
 800938c:	e170      	b.n	8009670 <_dtoa_r+0x76c>
 800938e:	4b9f      	ldr	r3, [pc, #636]	@ (800960c <_dtoa_r+0x708>)
 8009390:	00d2      	lsls	r2, r2, #3
 8009392:	189b      	adds	r3, r3, r2
 8009394:	685c      	ldr	r4, [r3, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	9407      	str	r4, [sp, #28]
 800939c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db00      	blt.n	80093a4 <_dtoa_r+0x4a0>
 80093a2:	e0e7      	b.n	8009574 <_dtoa_r+0x670>
 80093a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dd00      	ble.n	80093ac <_dtoa_r+0x4a8>
 80093aa:	e0e3      	b.n	8009574 <_dtoa_r+0x670>
 80093ac:	d10c      	bne.n	80093c8 <_dtoa_r+0x4c4>
 80093ae:	9806      	ldr	r0, [sp, #24]
 80093b0:	9907      	ldr	r1, [sp, #28]
 80093b2:	2200      	movs	r2, #0
 80093b4:	4b9b      	ldr	r3, [pc, #620]	@ (8009624 <_dtoa_r+0x720>)
 80093b6:	f7f8 fb55 	bl	8001a64 <__aeabi_dmul>
 80093ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093be:	f7f7 f865 	bl	800048c <__aeabi_dcmpge>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d100      	bne.n	80093c8 <_dtoa_r+0x4c4>
 80093c6:	e286      	b.n	80098d6 <_dtoa_r+0x9d2>
 80093c8:	2600      	movs	r6, #0
 80093ca:	0037      	movs	r7, r6
 80093cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ce:	9c08      	ldr	r4, [sp, #32]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80093d4:	9704      	str	r7, [sp, #16]
 80093d6:	2700      	movs	r7, #0
 80093d8:	0031      	movs	r1, r6
 80093da:	9803      	ldr	r0, [sp, #12]
 80093dc:	f000 fccc 	bl	8009d78 <_Bfree>
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d100      	bne.n	80093e8 <_dtoa_r+0x4e4>
 80093e6:	e0bb      	b.n	8009560 <_dtoa_r+0x65c>
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	d005      	beq.n	80093f8 <_dtoa_r+0x4f4>
 80093ec:	429f      	cmp	r7, r3
 80093ee:	d003      	beq.n	80093f8 <_dtoa_r+0x4f4>
 80093f0:	0039      	movs	r1, r7
 80093f2:	9803      	ldr	r0, [sp, #12]
 80093f4:	f000 fcc0 	bl	8009d78 <_Bfree>
 80093f8:	9904      	ldr	r1, [sp, #16]
 80093fa:	9803      	ldr	r0, [sp, #12]
 80093fc:	f000 fcbc 	bl	8009d78 <_Bfree>
 8009400:	e0ae      	b.n	8009560 <_dtoa_r+0x65c>
 8009402:	423d      	tst	r5, r7
 8009404:	d005      	beq.n	8009412 <_dtoa_r+0x50e>
 8009406:	6832      	ldr	r2, [r6, #0]
 8009408:	6873      	ldr	r3, [r6, #4]
 800940a:	f7f8 fb2b 	bl	8001a64 <__aeabi_dmul>
 800940e:	003b      	movs	r3, r7
 8009410:	3401      	adds	r4, #1
 8009412:	106d      	asrs	r5, r5, #1
 8009414:	3608      	adds	r6, #8
 8009416:	e75b      	b.n	80092d0 <_dtoa_r+0x3cc>
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	930c      	str	r3, [sp, #48]	@ 0x30
 800941c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800941e:	e77f      	b.n	8009320 <_dtoa_r+0x41c>
 8009420:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009422:	4b7a      	ldr	r3, [pc, #488]	@ (800960c <_dtoa_r+0x708>)
 8009424:	3a01      	subs	r2, #1
 8009426:	00d2      	lsls	r2, r2, #3
 8009428:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800942a:	189b      	adds	r3, r3, r2
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2900      	cmp	r1, #0
 8009432:	d04c      	beq.n	80094ce <_dtoa_r+0x5ca>
 8009434:	2000      	movs	r0, #0
 8009436:	497c      	ldr	r1, [pc, #496]	@ (8009628 <_dtoa_r+0x724>)
 8009438:	f7f7 feda 	bl	80011f0 <__aeabi_ddiv>
 800943c:	0032      	movs	r2, r6
 800943e:	003b      	movs	r3, r7
 8009440:	f7f8 fdf6 	bl	8002030 <__aeabi_dsub>
 8009444:	9a08      	ldr	r2, [sp, #32]
 8009446:	0006      	movs	r6, r0
 8009448:	4694      	mov	ip, r2
 800944a:	000f      	movs	r7, r1
 800944c:	9b08      	ldr	r3, [sp, #32]
 800944e:	9316      	str	r3, [sp, #88]	@ 0x58
 8009450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009452:	4463      	add	r3, ip
 8009454:	9311      	str	r3, [sp, #68]	@ 0x44
 8009456:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800945a:	f7f9 fa15 	bl	8002888 <__aeabi_d2iz>
 800945e:	0005      	movs	r5, r0
 8009460:	f7f9 fa4e 	bl	8002900 <__aeabi_i2d>
 8009464:	0002      	movs	r2, r0
 8009466:	000b      	movs	r3, r1
 8009468:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800946a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800946c:	f7f8 fde0 	bl	8002030 <__aeabi_dsub>
 8009470:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009472:	3530      	adds	r5, #48	@ 0x30
 8009474:	1c5c      	adds	r4, r3, #1
 8009476:	701d      	strb	r5, [r3, #0]
 8009478:	0032      	movs	r2, r6
 800947a:	003b      	movs	r3, r7
 800947c:	900a      	str	r0, [sp, #40]	@ 0x28
 800947e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009480:	f7f6 ffe6 	bl	8000450 <__aeabi_dcmplt>
 8009484:	2800      	cmp	r0, #0
 8009486:	d16b      	bne.n	8009560 <_dtoa_r+0x65c>
 8009488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800948a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800948c:	2000      	movs	r0, #0
 800948e:	4961      	ldr	r1, [pc, #388]	@ (8009614 <_dtoa_r+0x710>)
 8009490:	f7f8 fdce 	bl	8002030 <__aeabi_dsub>
 8009494:	0032      	movs	r2, r6
 8009496:	003b      	movs	r3, r7
 8009498:	f7f6 ffda 	bl	8000450 <__aeabi_dcmplt>
 800949c:	2800      	cmp	r0, #0
 800949e:	d000      	beq.n	80094a2 <_dtoa_r+0x59e>
 80094a0:	e0c6      	b.n	8009630 <_dtoa_r+0x72c>
 80094a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d100      	bne.n	80094aa <_dtoa_r+0x5a6>
 80094a8:	e765      	b.n	8009376 <_dtoa_r+0x472>
 80094aa:	2200      	movs	r2, #0
 80094ac:	0030      	movs	r0, r6
 80094ae:	0039      	movs	r1, r7
 80094b0:	4b59      	ldr	r3, [pc, #356]	@ (8009618 <_dtoa_r+0x714>)
 80094b2:	f7f8 fad7 	bl	8001a64 <__aeabi_dmul>
 80094b6:	2200      	movs	r2, #0
 80094b8:	0006      	movs	r6, r0
 80094ba:	000f      	movs	r7, r1
 80094bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094c0:	4b55      	ldr	r3, [pc, #340]	@ (8009618 <_dtoa_r+0x714>)
 80094c2:	f7f8 facf 	bl	8001a64 <__aeabi_dmul>
 80094c6:	9416      	str	r4, [sp, #88]	@ 0x58
 80094c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80094ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094cc:	e7c3      	b.n	8009456 <_dtoa_r+0x552>
 80094ce:	0030      	movs	r0, r6
 80094d0:	0039      	movs	r1, r7
 80094d2:	f7f8 fac7 	bl	8001a64 <__aeabi_dmul>
 80094d6:	9d08      	ldr	r5, [sp, #32]
 80094d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094da:	002b      	movs	r3, r5
 80094dc:	4694      	mov	ip, r2
 80094de:	9016      	str	r0, [sp, #88]	@ 0x58
 80094e0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80094e2:	4463      	add	r3, ip
 80094e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80094e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ea:	f7f9 f9cd 	bl	8002888 <__aeabi_d2iz>
 80094ee:	0004      	movs	r4, r0
 80094f0:	f7f9 fa06 	bl	8002900 <__aeabi_i2d>
 80094f4:	000b      	movs	r3, r1
 80094f6:	0002      	movs	r2, r0
 80094f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094fc:	f7f8 fd98 	bl	8002030 <__aeabi_dsub>
 8009500:	3430      	adds	r4, #48	@ 0x30
 8009502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009504:	702c      	strb	r4, [r5, #0]
 8009506:	3501      	adds	r5, #1
 8009508:	0006      	movs	r6, r0
 800950a:	000f      	movs	r7, r1
 800950c:	42ab      	cmp	r3, r5
 800950e:	d12a      	bne.n	8009566 <_dtoa_r+0x662>
 8009510:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009512:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009514:	9b08      	ldr	r3, [sp, #32]
 8009516:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009518:	469c      	mov	ip, r3
 800951a:	2200      	movs	r2, #0
 800951c:	4b42      	ldr	r3, [pc, #264]	@ (8009628 <_dtoa_r+0x724>)
 800951e:	4464      	add	r4, ip
 8009520:	f7f7 faa0 	bl	8000a64 <__aeabi_dadd>
 8009524:	0002      	movs	r2, r0
 8009526:	000b      	movs	r3, r1
 8009528:	0030      	movs	r0, r6
 800952a:	0039      	movs	r1, r7
 800952c:	f7f6 ffa4 	bl	8000478 <__aeabi_dcmpgt>
 8009530:	2800      	cmp	r0, #0
 8009532:	d000      	beq.n	8009536 <_dtoa_r+0x632>
 8009534:	e07c      	b.n	8009630 <_dtoa_r+0x72c>
 8009536:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009538:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800953a:	2000      	movs	r0, #0
 800953c:	493a      	ldr	r1, [pc, #232]	@ (8009628 <_dtoa_r+0x724>)
 800953e:	f7f8 fd77 	bl	8002030 <__aeabi_dsub>
 8009542:	0002      	movs	r2, r0
 8009544:	000b      	movs	r3, r1
 8009546:	0030      	movs	r0, r6
 8009548:	0039      	movs	r1, r7
 800954a:	f7f6 ff81 	bl	8000450 <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	d100      	bne.n	8009554 <_dtoa_r+0x650>
 8009552:	e710      	b.n	8009376 <_dtoa_r+0x472>
 8009554:	0023      	movs	r3, r4
 8009556:	3c01      	subs	r4, #1
 8009558:	7822      	ldrb	r2, [r4, #0]
 800955a:	2a30      	cmp	r2, #48	@ 0x30
 800955c:	d0fa      	beq.n	8009554 <_dtoa_r+0x650>
 800955e:	001c      	movs	r4, r3
 8009560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	e042      	b.n	80095ec <_dtoa_r+0x6e8>
 8009566:	2200      	movs	r2, #0
 8009568:	4b2b      	ldr	r3, [pc, #172]	@ (8009618 <_dtoa_r+0x714>)
 800956a:	f7f8 fa7b 	bl	8001a64 <__aeabi_dmul>
 800956e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009570:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009572:	e7b8      	b.n	80094e6 <_dtoa_r+0x5e2>
 8009574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009576:	9d08      	ldr	r5, [sp, #32]
 8009578:	3b01      	subs	r3, #1
 800957a:	195b      	adds	r3, r3, r5
 800957c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800957e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009580:	930a      	str	r3, [sp, #40]	@ 0x28
 8009582:	9a06      	ldr	r2, [sp, #24]
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	0030      	movs	r0, r6
 8009588:	0039      	movs	r1, r7
 800958a:	f7f7 fe31 	bl	80011f0 <__aeabi_ddiv>
 800958e:	f7f9 f97b 	bl	8002888 <__aeabi_d2iz>
 8009592:	9009      	str	r0, [sp, #36]	@ 0x24
 8009594:	f7f9 f9b4 	bl	8002900 <__aeabi_i2d>
 8009598:	9a06      	ldr	r2, [sp, #24]
 800959a:	9b07      	ldr	r3, [sp, #28]
 800959c:	f7f8 fa62 	bl	8001a64 <__aeabi_dmul>
 80095a0:	0002      	movs	r2, r0
 80095a2:	000b      	movs	r3, r1
 80095a4:	0030      	movs	r0, r6
 80095a6:	0039      	movs	r1, r7
 80095a8:	f7f8 fd42 	bl	8002030 <__aeabi_dsub>
 80095ac:	002b      	movs	r3, r5
 80095ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b0:	3501      	adds	r5, #1
 80095b2:	3230      	adds	r2, #48	@ 0x30
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095b8:	002c      	movs	r4, r5
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d14b      	bne.n	8009656 <_dtoa_r+0x752>
 80095be:	0002      	movs	r2, r0
 80095c0:	000b      	movs	r3, r1
 80095c2:	f7f7 fa4f 	bl	8000a64 <__aeabi_dadd>
 80095c6:	9a06      	ldr	r2, [sp, #24]
 80095c8:	9b07      	ldr	r3, [sp, #28]
 80095ca:	0006      	movs	r6, r0
 80095cc:	000f      	movs	r7, r1
 80095ce:	f7f6 ff53 	bl	8000478 <__aeabi_dcmpgt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d12a      	bne.n	800962c <_dtoa_r+0x728>
 80095d6:	9a06      	ldr	r2, [sp, #24]
 80095d8:	9b07      	ldr	r3, [sp, #28]
 80095da:	0030      	movs	r0, r6
 80095dc:	0039      	movs	r1, r7
 80095de:	f7f6 ff31 	bl	8000444 <__aeabi_dcmpeq>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d002      	beq.n	80095ec <_dtoa_r+0x6e8>
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	07dd      	lsls	r5, r3, #31
 80095ea:	d41f      	bmi.n	800962c <_dtoa_r+0x728>
 80095ec:	9905      	ldr	r1, [sp, #20]
 80095ee:	9803      	ldr	r0, [sp, #12]
 80095f0:	f000 fbc2 	bl	8009d78 <_Bfree>
 80095f4:	2300      	movs	r3, #0
 80095f6:	7023      	strb	r3, [r4, #0]
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095fc:	3301      	adds	r3, #1
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009602:	2b00      	cmp	r3, #0
 8009604:	d100      	bne.n	8009608 <_dtoa_r+0x704>
 8009606:	e4c7      	b.n	8008f98 <_dtoa_r+0x94>
 8009608:	601c      	str	r4, [r3, #0]
 800960a:	e4c5      	b.n	8008f98 <_dtoa_r+0x94>
 800960c:	0800aed8 	.word	0x0800aed8
 8009610:	0800aeb0 	.word	0x0800aeb0
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	40240000 	.word	0x40240000
 800961c:	401c0000 	.word	0x401c0000
 8009620:	fcc00000 	.word	0xfcc00000
 8009624:	40140000 	.word	0x40140000
 8009628:	3fe00000 	.word	0x3fe00000
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009630:	0023      	movs	r3, r4
 8009632:	001c      	movs	r4, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	2a39      	cmp	r2, #57	@ 0x39
 800963a:	d108      	bne.n	800964e <_dtoa_r+0x74a>
 800963c:	9a08      	ldr	r2, [sp, #32]
 800963e:	429a      	cmp	r2, r3
 8009640:	d1f7      	bne.n	8009632 <_dtoa_r+0x72e>
 8009642:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009644:	9908      	ldr	r1, [sp, #32]
 8009646:	3201      	adds	r2, #1
 8009648:	920c      	str	r2, [sp, #48]	@ 0x30
 800964a:	2230      	movs	r2, #48	@ 0x30
 800964c:	700a      	strb	r2, [r1, #0]
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	3201      	adds	r2, #1
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	e784      	b.n	8009560 <_dtoa_r+0x65c>
 8009656:	2200      	movs	r2, #0
 8009658:	4bc6      	ldr	r3, [pc, #792]	@ (8009974 <_dtoa_r+0xa70>)
 800965a:	f7f8 fa03 	bl	8001a64 <__aeabi_dmul>
 800965e:	2200      	movs	r2, #0
 8009660:	2300      	movs	r3, #0
 8009662:	0006      	movs	r6, r0
 8009664:	000f      	movs	r7, r1
 8009666:	f7f6 feed 	bl	8000444 <__aeabi_dcmpeq>
 800966a:	2800      	cmp	r0, #0
 800966c:	d089      	beq.n	8009582 <_dtoa_r+0x67e>
 800966e:	e7bd      	b.n	80095ec <_dtoa_r+0x6e8>
 8009670:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009672:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009674:	9c06      	ldr	r4, [sp, #24]
 8009676:	2f00      	cmp	r7, #0
 8009678:	d014      	beq.n	80096a4 <_dtoa_r+0x7a0>
 800967a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800967c:	2a01      	cmp	r2, #1
 800967e:	dd00      	ble.n	8009682 <_dtoa_r+0x77e>
 8009680:	e0e4      	b.n	800984c <_dtoa_r+0x948>
 8009682:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009684:	2a00      	cmp	r2, #0
 8009686:	d100      	bne.n	800968a <_dtoa_r+0x786>
 8009688:	e0da      	b.n	8009840 <_dtoa_r+0x93c>
 800968a:	4abb      	ldr	r2, [pc, #748]	@ (8009978 <_dtoa_r+0xa74>)
 800968c:	189b      	adds	r3, r3, r2
 800968e:	9a06      	ldr	r2, [sp, #24]
 8009690:	2101      	movs	r1, #1
 8009692:	18d2      	adds	r2, r2, r3
 8009694:	9206      	str	r2, [sp, #24]
 8009696:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009698:	9803      	ldr	r0, [sp, #12]
 800969a:	18d3      	adds	r3, r2, r3
 800969c:	930d      	str	r3, [sp, #52]	@ 0x34
 800969e:	f000 fc23 	bl	8009ee8 <__i2b>
 80096a2:	0007      	movs	r7, r0
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	d00e      	beq.n	80096c6 <_dtoa_r+0x7c2>
 80096a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd0b      	ble.n	80096c6 <_dtoa_r+0x7c2>
 80096ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096b0:	0023      	movs	r3, r4
 80096b2:	4294      	cmp	r4, r2
 80096b4:	dd00      	ble.n	80096b8 <_dtoa_r+0x7b4>
 80096b6:	0013      	movs	r3, r2
 80096b8:	9a06      	ldr	r2, [sp, #24]
 80096ba:	1ae4      	subs	r4, r4, r3
 80096bc:	1ad2      	subs	r2, r2, r3
 80096be:	9206      	str	r2, [sp, #24]
 80096c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80096c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d021      	beq.n	8009710 <_dtoa_r+0x80c>
 80096cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d100      	bne.n	80096d4 <_dtoa_r+0x7d0>
 80096d2:	e0d3      	b.n	800987c <_dtoa_r+0x978>
 80096d4:	9e05      	ldr	r6, [sp, #20]
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	d014      	beq.n	8009704 <_dtoa_r+0x800>
 80096da:	0039      	movs	r1, r7
 80096dc:	002a      	movs	r2, r5
 80096de:	9803      	ldr	r0, [sp, #12]
 80096e0:	f000 fcc4 	bl	800a06c <__pow5mult>
 80096e4:	9a05      	ldr	r2, [sp, #20]
 80096e6:	0001      	movs	r1, r0
 80096e8:	0007      	movs	r7, r0
 80096ea:	9803      	ldr	r0, [sp, #12]
 80096ec:	f000 fc14 	bl	8009f18 <__multiply>
 80096f0:	0006      	movs	r6, r0
 80096f2:	9905      	ldr	r1, [sp, #20]
 80096f4:	9803      	ldr	r0, [sp, #12]
 80096f6:	f000 fb3f 	bl	8009d78 <_Bfree>
 80096fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096fc:	9605      	str	r6, [sp, #20]
 80096fe:	1b5b      	subs	r3, r3, r5
 8009700:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009702:	d005      	beq.n	8009710 <_dtoa_r+0x80c>
 8009704:	0031      	movs	r1, r6
 8009706:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009708:	9803      	ldr	r0, [sp, #12]
 800970a:	f000 fcaf 	bl	800a06c <__pow5mult>
 800970e:	9005      	str	r0, [sp, #20]
 8009710:	2101      	movs	r1, #1
 8009712:	9803      	ldr	r0, [sp, #12]
 8009714:	f000 fbe8 	bl	8009ee8 <__i2b>
 8009718:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800971a:	0006      	movs	r6, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d100      	bne.n	8009722 <_dtoa_r+0x81e>
 8009720:	e1bc      	b.n	8009a9c <_dtoa_r+0xb98>
 8009722:	001a      	movs	r2, r3
 8009724:	0001      	movs	r1, r0
 8009726:	9803      	ldr	r0, [sp, #12]
 8009728:	f000 fca0 	bl	800a06c <__pow5mult>
 800972c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800972e:	0006      	movs	r6, r0
 8009730:	2500      	movs	r5, #0
 8009732:	2b01      	cmp	r3, #1
 8009734:	dc16      	bgt.n	8009764 <_dtoa_r+0x860>
 8009736:	2500      	movs	r5, #0
 8009738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973a:	42ab      	cmp	r3, r5
 800973c:	d10e      	bne.n	800975c <_dtoa_r+0x858>
 800973e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009740:	031b      	lsls	r3, r3, #12
 8009742:	42ab      	cmp	r3, r5
 8009744:	d10a      	bne.n	800975c <_dtoa_r+0x858>
 8009746:	4b8d      	ldr	r3, [pc, #564]	@ (800997c <_dtoa_r+0xa78>)
 8009748:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800974a:	4213      	tst	r3, r2
 800974c:	d006      	beq.n	800975c <_dtoa_r+0x858>
 800974e:	9b06      	ldr	r3, [sp, #24]
 8009750:	3501      	adds	r5, #1
 8009752:	3301      	adds	r3, #1
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009758:	3301      	adds	r3, #1
 800975a:	930d      	str	r3, [sp, #52]	@ 0x34
 800975c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800975e:	2001      	movs	r0, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <_dtoa_r+0x872>
 8009764:	6933      	ldr	r3, [r6, #16]
 8009766:	3303      	adds	r3, #3
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	18f3      	adds	r3, r6, r3
 800976c:	6858      	ldr	r0, [r3, #4]
 800976e:	f000 fb6b 	bl	8009e48 <__hi0bits>
 8009772:	2320      	movs	r3, #32
 8009774:	1a18      	subs	r0, r3, r0
 8009776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009778:	1818      	adds	r0, r3, r0
 800977a:	0002      	movs	r2, r0
 800977c:	231f      	movs	r3, #31
 800977e:	401a      	ands	r2, r3
 8009780:	4218      	tst	r0, r3
 8009782:	d100      	bne.n	8009786 <_dtoa_r+0x882>
 8009784:	e081      	b.n	800988a <_dtoa_r+0x986>
 8009786:	3301      	adds	r3, #1
 8009788:	1a9b      	subs	r3, r3, r2
 800978a:	2b04      	cmp	r3, #4
 800978c:	dd79      	ble.n	8009882 <_dtoa_r+0x97e>
 800978e:	231c      	movs	r3, #28
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	9a06      	ldr	r2, [sp, #24]
 8009794:	18e4      	adds	r4, r4, r3
 8009796:	18d2      	adds	r2, r2, r3
 8009798:	9206      	str	r2, [sp, #24]
 800979a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800979c:	18d3      	adds	r3, r2, r3
 800979e:	930d      	str	r3, [sp, #52]	@ 0x34
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd05      	ble.n	80097b2 <_dtoa_r+0x8ae>
 80097a6:	001a      	movs	r2, r3
 80097a8:	9905      	ldr	r1, [sp, #20]
 80097aa:	9803      	ldr	r0, [sp, #12]
 80097ac:	f000 fcba 	bl	800a124 <__lshift>
 80097b0:	9005      	str	r0, [sp, #20]
 80097b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd05      	ble.n	80097c4 <_dtoa_r+0x8c0>
 80097b8:	0031      	movs	r1, r6
 80097ba:	001a      	movs	r2, r3
 80097bc:	9803      	ldr	r0, [sp, #12]
 80097be:	f000 fcb1 	bl	800a124 <__lshift>
 80097c2:	0006      	movs	r6, r0
 80097c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d061      	beq.n	800988e <_dtoa_r+0x98a>
 80097ca:	0031      	movs	r1, r6
 80097cc:	9805      	ldr	r0, [sp, #20]
 80097ce:	f000 fd15 	bl	800a1fc <__mcmp>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	da5b      	bge.n	800988e <_dtoa_r+0x98a>
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	220a      	movs	r2, #10
 80097da:	3b01      	subs	r3, #1
 80097dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80097de:	9905      	ldr	r1, [sp, #20]
 80097e0:	2300      	movs	r3, #0
 80097e2:	9803      	ldr	r0, [sp, #12]
 80097e4:	f000 faec 	bl	8009dc0 <__multadd>
 80097e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097ea:	9005      	str	r0, [sp, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d100      	bne.n	80097f2 <_dtoa_r+0x8ee>
 80097f0:	e15b      	b.n	8009aaa <_dtoa_r+0xba6>
 80097f2:	2300      	movs	r3, #0
 80097f4:	0039      	movs	r1, r7
 80097f6:	220a      	movs	r2, #10
 80097f8:	9803      	ldr	r0, [sp, #12]
 80097fa:	f000 fae1 	bl	8009dc0 <__multadd>
 80097fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009800:	0007      	movs	r7, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	dc4d      	bgt.n	80098a2 <_dtoa_r+0x99e>
 8009806:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009808:	2b02      	cmp	r3, #2
 800980a:	dd46      	ble.n	800989a <_dtoa_r+0x996>
 800980c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980e:	2b00      	cmp	r3, #0
 8009810:	d000      	beq.n	8009814 <_dtoa_r+0x910>
 8009812:	e5db      	b.n	80093cc <_dtoa_r+0x4c8>
 8009814:	0031      	movs	r1, r6
 8009816:	2205      	movs	r2, #5
 8009818:	9803      	ldr	r0, [sp, #12]
 800981a:	f000 fad1 	bl	8009dc0 <__multadd>
 800981e:	0006      	movs	r6, r0
 8009820:	0001      	movs	r1, r0
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f000 fcea 	bl	800a1fc <__mcmp>
 8009828:	2800      	cmp	r0, #0
 800982a:	dc00      	bgt.n	800982e <_dtoa_r+0x92a>
 800982c:	e5ce      	b.n	80093cc <_dtoa_r+0x4c8>
 800982e:	9b08      	ldr	r3, [sp, #32]
 8009830:	9a08      	ldr	r2, [sp, #32]
 8009832:	1c5c      	adds	r4, r3, #1
 8009834:	2331      	movs	r3, #49	@ 0x31
 8009836:	7013      	strb	r3, [r2, #0]
 8009838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800983a:	3301      	adds	r3, #1
 800983c:	930c      	str	r3, [sp, #48]	@ 0x30
 800983e:	e5c9      	b.n	80093d4 <_dtoa_r+0x4d0>
 8009840:	2336      	movs	r3, #54	@ 0x36
 8009842:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009844:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009846:	1a9b      	subs	r3, r3, r2
 8009848:	9c06      	ldr	r4, [sp, #24]
 800984a:	e720      	b.n	800968e <_dtoa_r+0x78a>
 800984c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800984e:	1e5d      	subs	r5, r3, #1
 8009850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009852:	42ab      	cmp	r3, r5
 8009854:	db08      	blt.n	8009868 <_dtoa_r+0x964>
 8009856:	1b5d      	subs	r5, r3, r5
 8009858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	daf4      	bge.n	8009848 <_dtoa_r+0x944>
 800985e:	9b06      	ldr	r3, [sp, #24]
 8009860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009862:	1a9c      	subs	r4, r3, r2
 8009864:	2300      	movs	r3, #0
 8009866:	e712      	b.n	800968e <_dtoa_r+0x78a>
 8009868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800986a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800986c:	1aeb      	subs	r3, r5, r3
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	9314      	str	r3, [sp, #80]	@ 0x50
 8009872:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009874:	9c06      	ldr	r4, [sp, #24]
 8009876:	2500      	movs	r5, #0
 8009878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800987a:	e708      	b.n	800968e <_dtoa_r+0x78a>
 800987c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800987e:	9905      	ldr	r1, [sp, #20]
 8009880:	e742      	b.n	8009708 <_dtoa_r+0x804>
 8009882:	2b04      	cmp	r3, #4
 8009884:	d08c      	beq.n	80097a0 <_dtoa_r+0x89c>
 8009886:	331c      	adds	r3, #28
 8009888:	e783      	b.n	8009792 <_dtoa_r+0x88e>
 800988a:	0013      	movs	r3, r2
 800988c:	e7fb      	b.n	8009886 <_dtoa_r+0x982>
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	930c      	str	r3, [sp, #48]	@ 0x30
 8009892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009894:	930e      	str	r3, [sp, #56]	@ 0x38
 8009896:	2b00      	cmp	r3, #0
 8009898:	ddb5      	ble.n	8009806 <_dtoa_r+0x902>
 800989a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d100      	bne.n	80098a2 <_dtoa_r+0x99e>
 80098a0:	e107      	b.n	8009ab2 <_dtoa_r+0xbae>
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	dd05      	ble.n	80098b2 <_dtoa_r+0x9ae>
 80098a6:	0039      	movs	r1, r7
 80098a8:	0022      	movs	r2, r4
 80098aa:	9803      	ldr	r0, [sp, #12]
 80098ac:	f000 fc3a 	bl	800a124 <__lshift>
 80098b0:	0007      	movs	r7, r0
 80098b2:	9704      	str	r7, [sp, #16]
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	d020      	beq.n	80098fa <_dtoa_r+0x9f6>
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	9803      	ldr	r0, [sp, #12]
 80098bc:	f000 fa18 	bl	8009cf0 <_Balloc>
 80098c0:	1e04      	subs	r4, r0, #0
 80098c2:	d10c      	bne.n	80098de <_dtoa_r+0x9da>
 80098c4:	0022      	movs	r2, r4
 80098c6:	4b2e      	ldr	r3, [pc, #184]	@ (8009980 <_dtoa_r+0xa7c>)
 80098c8:	482e      	ldr	r0, [pc, #184]	@ (8009984 <_dtoa_r+0xa80>)
 80098ca:	492f      	ldr	r1, [pc, #188]	@ (8009988 <_dtoa_r+0xa84>)
 80098cc:	f7ff fb2f 	bl	8008f2e <_dtoa_r+0x2a>
 80098d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80098d2:	0037      	movs	r7, r6
 80098d4:	e7ab      	b.n	800982e <_dtoa_r+0x92a>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80098da:	930c      	str	r3, [sp, #48]	@ 0x30
 80098dc:	e7f9      	b.n	80098d2 <_dtoa_r+0x9ce>
 80098de:	0039      	movs	r1, r7
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	310c      	adds	r1, #12
 80098e4:	3202      	adds	r2, #2
 80098e6:	0092      	lsls	r2, r2, #2
 80098e8:	300c      	adds	r0, #12
 80098ea:	f000 fe61 	bl	800a5b0 <memcpy>
 80098ee:	2201      	movs	r2, #1
 80098f0:	0021      	movs	r1, r4
 80098f2:	9803      	ldr	r0, [sp, #12]
 80098f4:	f000 fc16 	bl	800a124 <__lshift>
 80098f8:	9004      	str	r0, [sp, #16]
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098fe:	9306      	str	r3, [sp, #24]
 8009900:	3b01      	subs	r3, #1
 8009902:	189b      	adds	r3, r3, r2
 8009904:	2201      	movs	r2, #1
 8009906:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990a:	4013      	ands	r3, r2
 800990c:	930e      	str	r3, [sp, #56]	@ 0x38
 800990e:	0031      	movs	r1, r6
 8009910:	9805      	ldr	r0, [sp, #20]
 8009912:	f7ff fa71 	bl	8008df8 <quorem>
 8009916:	0039      	movs	r1, r7
 8009918:	0005      	movs	r5, r0
 800991a:	900a      	str	r0, [sp, #40]	@ 0x28
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	f000 fc6d 	bl	800a1fc <__mcmp>
 8009922:	9a04      	ldr	r2, [sp, #16]
 8009924:	900d      	str	r0, [sp, #52]	@ 0x34
 8009926:	0031      	movs	r1, r6
 8009928:	9803      	ldr	r0, [sp, #12]
 800992a:	f000 fc83 	bl	800a234 <__mdiff>
 800992e:	2201      	movs	r2, #1
 8009930:	68c3      	ldr	r3, [r0, #12]
 8009932:	0004      	movs	r4, r0
 8009934:	3530      	adds	r5, #48	@ 0x30
 8009936:	9209      	str	r2, [sp, #36]	@ 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <_dtoa_r+0xa42>
 800993c:	0001      	movs	r1, r0
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f000 fc5c 	bl	800a1fc <__mcmp>
 8009944:	9009      	str	r0, [sp, #36]	@ 0x24
 8009946:	0021      	movs	r1, r4
 8009948:	9803      	ldr	r0, [sp, #12]
 800994a:	f000 fa15 	bl	8009d78 <_Bfree>
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009952:	1c5c      	adds	r4, r3, #1
 8009954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009956:	4313      	orrs	r3, r2
 8009958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800995a:	4313      	orrs	r3, r2
 800995c:	d116      	bne.n	800998c <_dtoa_r+0xa88>
 800995e:	2d39      	cmp	r5, #57	@ 0x39
 8009960:	d02f      	beq.n	80099c2 <_dtoa_r+0xabe>
 8009962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd01      	ble.n	800996c <_dtoa_r+0xa68>
 8009968:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800996a:	3531      	adds	r5, #49	@ 0x31
 800996c:	9b06      	ldr	r3, [sp, #24]
 800996e:	701d      	strb	r5, [r3, #0]
 8009970:	e532      	b.n	80093d8 <_dtoa_r+0x4d4>
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	40240000 	.word	0x40240000
 8009978:	00000433 	.word	0x00000433
 800997c:	7ff00000 	.word	0x7ff00000
 8009980:	0800ade0 	.word	0x0800ade0
 8009984:	0800ad88 	.word	0x0800ad88
 8009988:	000002ef 	.word	0x000002ef
 800998c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800998e:	2b00      	cmp	r3, #0
 8009990:	db04      	blt.n	800999c <_dtoa_r+0xa98>
 8009992:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009994:	4313      	orrs	r3, r2
 8009996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009998:	4313      	orrs	r3, r2
 800999a:	d11e      	bne.n	80099da <_dtoa_r+0xad6>
 800999c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dde4      	ble.n	800996c <_dtoa_r+0xa68>
 80099a2:	9905      	ldr	r1, [sp, #20]
 80099a4:	2201      	movs	r2, #1
 80099a6:	9803      	ldr	r0, [sp, #12]
 80099a8:	f000 fbbc 	bl	800a124 <__lshift>
 80099ac:	0031      	movs	r1, r6
 80099ae:	9005      	str	r0, [sp, #20]
 80099b0:	f000 fc24 	bl	800a1fc <__mcmp>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	dc02      	bgt.n	80099be <_dtoa_r+0xaba>
 80099b8:	d1d8      	bne.n	800996c <_dtoa_r+0xa68>
 80099ba:	07eb      	lsls	r3, r5, #31
 80099bc:	d5d6      	bpl.n	800996c <_dtoa_r+0xa68>
 80099be:	2d39      	cmp	r5, #57	@ 0x39
 80099c0:	d1d2      	bne.n	8009968 <_dtoa_r+0xa64>
 80099c2:	2339      	movs	r3, #57	@ 0x39
 80099c4:	9a06      	ldr	r2, [sp, #24]
 80099c6:	7013      	strb	r3, [r2, #0]
 80099c8:	0023      	movs	r3, r4
 80099ca:	001c      	movs	r4, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	2a39      	cmp	r2, #57	@ 0x39
 80099d2:	d050      	beq.n	8009a76 <_dtoa_r+0xb72>
 80099d4:	3201      	adds	r2, #1
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e4fe      	b.n	80093d8 <_dtoa_r+0x4d4>
 80099da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dd03      	ble.n	80099e8 <_dtoa_r+0xae4>
 80099e0:	2d39      	cmp	r5, #57	@ 0x39
 80099e2:	d0ee      	beq.n	80099c2 <_dtoa_r+0xabe>
 80099e4:	3501      	adds	r5, #1
 80099e6:	e7c1      	b.n	800996c <_dtoa_r+0xa68>
 80099e8:	9b06      	ldr	r3, [sp, #24]
 80099ea:	9a06      	ldr	r2, [sp, #24]
 80099ec:	701d      	strb	r5, [r3, #0]
 80099ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d02b      	beq.n	8009a4c <_dtoa_r+0xb48>
 80099f4:	2300      	movs	r3, #0
 80099f6:	220a      	movs	r2, #10
 80099f8:	9905      	ldr	r1, [sp, #20]
 80099fa:	9803      	ldr	r0, [sp, #12]
 80099fc:	f000 f9e0 	bl	8009dc0 <__multadd>
 8009a00:	9b04      	ldr	r3, [sp, #16]
 8009a02:	9005      	str	r0, [sp, #20]
 8009a04:	429f      	cmp	r7, r3
 8009a06:	d109      	bne.n	8009a1c <_dtoa_r+0xb18>
 8009a08:	0039      	movs	r1, r7
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	9803      	ldr	r0, [sp, #12]
 8009a10:	f000 f9d6 	bl	8009dc0 <__multadd>
 8009a14:	0007      	movs	r7, r0
 8009a16:	9004      	str	r0, [sp, #16]
 8009a18:	9406      	str	r4, [sp, #24]
 8009a1a:	e778      	b.n	800990e <_dtoa_r+0xa0a>
 8009a1c:	0039      	movs	r1, r7
 8009a1e:	2300      	movs	r3, #0
 8009a20:	220a      	movs	r2, #10
 8009a22:	9803      	ldr	r0, [sp, #12]
 8009a24:	f000 f9cc 	bl	8009dc0 <__multadd>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	0007      	movs	r7, r0
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	9904      	ldr	r1, [sp, #16]
 8009a30:	9803      	ldr	r0, [sp, #12]
 8009a32:	f000 f9c5 	bl	8009dc0 <__multadd>
 8009a36:	9004      	str	r0, [sp, #16]
 8009a38:	e7ee      	b.n	8009a18 <_dtoa_r+0xb14>
 8009a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3c:	2401      	movs	r4, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dd00      	ble.n	8009a44 <_dtoa_r+0xb40>
 8009a42:	001c      	movs	r4, r3
 8009a44:	9704      	str	r7, [sp, #16]
 8009a46:	2700      	movs	r7, #0
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	191c      	adds	r4, r3, r4
 8009a4c:	9905      	ldr	r1, [sp, #20]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	9803      	ldr	r0, [sp, #12]
 8009a52:	f000 fb67 	bl	800a124 <__lshift>
 8009a56:	0031      	movs	r1, r6
 8009a58:	9005      	str	r0, [sp, #20]
 8009a5a:	f000 fbcf 	bl	800a1fc <__mcmp>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	dcb2      	bgt.n	80099c8 <_dtoa_r+0xac4>
 8009a62:	d101      	bne.n	8009a68 <_dtoa_r+0xb64>
 8009a64:	07ed      	lsls	r5, r5, #31
 8009a66:	d4af      	bmi.n	80099c8 <_dtoa_r+0xac4>
 8009a68:	0023      	movs	r3, r4
 8009a6a:	001c      	movs	r4, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	2a30      	cmp	r2, #48	@ 0x30
 8009a72:	d0fa      	beq.n	8009a6a <_dtoa_r+0xb66>
 8009a74:	e4b0      	b.n	80093d8 <_dtoa_r+0x4d4>
 8009a76:	9a08      	ldr	r2, [sp, #32]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d1a6      	bne.n	80099ca <_dtoa_r+0xac6>
 8009a7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a7e:	3301      	adds	r3, #1
 8009a80:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a82:	2331      	movs	r3, #49	@ 0x31
 8009a84:	7013      	strb	r3, [r2, #0]
 8009a86:	e4a7      	b.n	80093d8 <_dtoa_r+0x4d4>
 8009a88:	4b14      	ldr	r3, [pc, #80]	@ (8009adc <_dtoa_r+0xbd8>)
 8009a8a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	4b14      	ldr	r3, [pc, #80]	@ (8009ae0 <_dtoa_r+0xbdc>)
 8009a90:	2a00      	cmp	r2, #0
 8009a92:	d001      	beq.n	8009a98 <_dtoa_r+0xb94>
 8009a94:	f7ff fa7e 	bl	8008f94 <_dtoa_r+0x90>
 8009a98:	f7ff fa7e 	bl	8008f98 <_dtoa_r+0x94>
 8009a9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	dc00      	bgt.n	8009aa4 <_dtoa_r+0xba0>
 8009aa2:	e648      	b.n	8009736 <_dtoa_r+0x832>
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009aa8:	e665      	b.n	8009776 <_dtoa_r+0x872>
 8009aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dc00      	bgt.n	8009ab2 <_dtoa_r+0xbae>
 8009ab0:	e6a9      	b.n	8009806 <_dtoa_r+0x902>
 8009ab2:	2400      	movs	r4, #0
 8009ab4:	0031      	movs	r1, r6
 8009ab6:	9805      	ldr	r0, [sp, #20]
 8009ab8:	f7ff f99e 	bl	8008df8 <quorem>
 8009abc:	9b08      	ldr	r3, [sp, #32]
 8009abe:	3030      	adds	r0, #48	@ 0x30
 8009ac0:	5518      	strb	r0, [r3, r4]
 8009ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	0005      	movs	r5, r0
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	ddb6      	ble.n	8009a3a <_dtoa_r+0xb36>
 8009acc:	2300      	movs	r3, #0
 8009ace:	220a      	movs	r2, #10
 8009ad0:	9905      	ldr	r1, [sp, #20]
 8009ad2:	9803      	ldr	r0, [sp, #12]
 8009ad4:	f000 f974 	bl	8009dc0 <__multadd>
 8009ad8:	9005      	str	r0, [sp, #20]
 8009ada:	e7eb      	b.n	8009ab4 <_dtoa_r+0xbb0>
 8009adc:	0800ad64 	.word	0x0800ad64
 8009ae0:	0800ad6c 	.word	0x0800ad6c

08009ae4 <_free_r>:
 8009ae4:	b570      	push	{r4, r5, r6, lr}
 8009ae6:	0005      	movs	r5, r0
 8009ae8:	1e0c      	subs	r4, r1, #0
 8009aea:	d010      	beq.n	8009b0e <_free_r+0x2a>
 8009aec:	3c04      	subs	r4, #4
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da00      	bge.n	8009af6 <_free_r+0x12>
 8009af4:	18e4      	adds	r4, r4, r3
 8009af6:	0028      	movs	r0, r5
 8009af8:	f000 f8ea 	bl	8009cd0 <__malloc_lock>
 8009afc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b74 <_free_r+0x90>)
 8009afe:	6813      	ldr	r3, [r2, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <_free_r+0x2c>
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6014      	str	r4, [r2, #0]
 8009b08:	0028      	movs	r0, r5
 8009b0a:	f000 f8e9 	bl	8009ce0 <__malloc_unlock>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d908      	bls.n	8009b26 <_free_r+0x42>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	1821      	adds	r1, r4, r0
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	d1f3      	bne.n	8009b04 <_free_r+0x20>
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	1809      	adds	r1, r1, r0
 8009b22:	6021      	str	r1, [r4, #0]
 8009b24:	e7ee      	b.n	8009b04 <_free_r+0x20>
 8009b26:	001a      	movs	r2, r3
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <_free_r+0x4e>
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	d9f9      	bls.n	8009b26 <_free_r+0x42>
 8009b32:	6811      	ldr	r1, [r2, #0]
 8009b34:	1850      	adds	r0, r2, r1
 8009b36:	42a0      	cmp	r0, r4
 8009b38:	d10b      	bne.n	8009b52 <_free_r+0x6e>
 8009b3a:	6820      	ldr	r0, [r4, #0]
 8009b3c:	1809      	adds	r1, r1, r0
 8009b3e:	1850      	adds	r0, r2, r1
 8009b40:	6011      	str	r1, [r2, #0]
 8009b42:	4283      	cmp	r3, r0
 8009b44:	d1e0      	bne.n	8009b08 <_free_r+0x24>
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	1841      	adds	r1, r0, r1
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	6053      	str	r3, [r2, #4]
 8009b50:	e7da      	b.n	8009b08 <_free_r+0x24>
 8009b52:	42a0      	cmp	r0, r4
 8009b54:	d902      	bls.n	8009b5c <_free_r+0x78>
 8009b56:	230c      	movs	r3, #12
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	e7d5      	b.n	8009b08 <_free_r+0x24>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	1821      	adds	r1, r4, r0
 8009b60:	428b      	cmp	r3, r1
 8009b62:	d103      	bne.n	8009b6c <_free_r+0x88>
 8009b64:	6819      	ldr	r1, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	1809      	adds	r1, r1, r0
 8009b6a:	6021      	str	r1, [r4, #0]
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	6054      	str	r4, [r2, #4]
 8009b70:	e7ca      	b.n	8009b08 <_free_r+0x24>
 8009b72:	46c0      	nop			@ (mov r8, r8)
 8009b74:	200006d8 	.word	0x200006d8

08009b78 <malloc>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4b03      	ldr	r3, [pc, #12]	@ (8009b88 <malloc+0x10>)
 8009b7c:	0001      	movs	r1, r0
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	f000 f826 	bl	8009bd0 <_malloc_r>
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	46c0      	nop			@ (mov r8, r8)
 8009b88:	20000024 	.word	0x20000024

08009b8c <sbrk_aligned>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009bcc <sbrk_aligned+0x40>)
 8009b90:	000d      	movs	r5, r1
 8009b92:	6831      	ldr	r1, [r6, #0]
 8009b94:	0004      	movs	r4, r0
 8009b96:	2900      	cmp	r1, #0
 8009b98:	d102      	bne.n	8009ba0 <sbrk_aligned+0x14>
 8009b9a:	f000 fcf7 	bl	800a58c <_sbrk_r>
 8009b9e:	6030      	str	r0, [r6, #0]
 8009ba0:	0029      	movs	r1, r5
 8009ba2:	0020      	movs	r0, r4
 8009ba4:	f000 fcf2 	bl	800a58c <_sbrk_r>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d103      	bne.n	8009bb4 <sbrk_aligned+0x28>
 8009bac:	2501      	movs	r5, #1
 8009bae:	426d      	negs	r5, r5
 8009bb0:	0028      	movs	r0, r5
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	1cc5      	adds	r5, r0, #3
 8009bb8:	439d      	bics	r5, r3
 8009bba:	42a8      	cmp	r0, r5
 8009bbc:	d0f8      	beq.n	8009bb0 <sbrk_aligned+0x24>
 8009bbe:	1a29      	subs	r1, r5, r0
 8009bc0:	0020      	movs	r0, r4
 8009bc2:	f000 fce3 	bl	800a58c <_sbrk_r>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d1f2      	bne.n	8009bb0 <sbrk_aligned+0x24>
 8009bca:	e7ef      	b.n	8009bac <sbrk_aligned+0x20>
 8009bcc:	200006d4 	.word	0x200006d4

08009bd0 <_malloc_r>:
 8009bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	1ccb      	adds	r3, r1, #3
 8009bd6:	4393      	bics	r3, r2
 8009bd8:	3308      	adds	r3, #8
 8009bda:	0005      	movs	r5, r0
 8009bdc:	001f      	movs	r7, r3
 8009bde:	2b0c      	cmp	r3, #12
 8009be0:	d234      	bcs.n	8009c4c <_malloc_r+0x7c>
 8009be2:	270c      	movs	r7, #12
 8009be4:	42b9      	cmp	r1, r7
 8009be6:	d833      	bhi.n	8009c50 <_malloc_r+0x80>
 8009be8:	0028      	movs	r0, r5
 8009bea:	f000 f871 	bl	8009cd0 <__malloc_lock>
 8009bee:	4e37      	ldr	r6, [pc, #220]	@ (8009ccc <_malloc_r+0xfc>)
 8009bf0:	6833      	ldr	r3, [r6, #0]
 8009bf2:	001c      	movs	r4, r3
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d12f      	bne.n	8009c58 <_malloc_r+0x88>
 8009bf8:	0039      	movs	r1, r7
 8009bfa:	0028      	movs	r0, r5
 8009bfc:	f7ff ffc6 	bl	8009b8c <sbrk_aligned>
 8009c00:	0004      	movs	r4, r0
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d15f      	bne.n	8009cc6 <_malloc_r+0xf6>
 8009c06:	6834      	ldr	r4, [r6, #0]
 8009c08:	9400      	str	r4, [sp, #0]
 8009c0a:	9b00      	ldr	r3, [sp, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d14a      	bne.n	8009ca6 <_malloc_r+0xd6>
 8009c10:	2c00      	cmp	r4, #0
 8009c12:	d052      	beq.n	8009cba <_malloc_r+0xea>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	0028      	movs	r0, r5
 8009c18:	18e3      	adds	r3, r4, r3
 8009c1a:	9900      	ldr	r1, [sp, #0]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	f000 fcb5 	bl	800a58c <_sbrk_r>
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	4283      	cmp	r3, r0
 8009c26:	d148      	bne.n	8009cba <_malloc_r+0xea>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	0028      	movs	r0, r5
 8009c2c:	1aff      	subs	r7, r7, r3
 8009c2e:	0039      	movs	r1, r7
 8009c30:	f7ff ffac 	bl	8009b8c <sbrk_aligned>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d040      	beq.n	8009cba <_malloc_r+0xea>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	19db      	adds	r3, r3, r7
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	6833      	ldr	r3, [r6, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	d133      	bne.n	8009cae <_malloc_r+0xde>
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	e019      	b.n	8009c80 <_malloc_r+0xb0>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dac9      	bge.n	8009be4 <_malloc_r+0x14>
 8009c50:	230c      	movs	r3, #12
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	2000      	movs	r0, #0
 8009c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c58:	6821      	ldr	r1, [r4, #0]
 8009c5a:	1bc9      	subs	r1, r1, r7
 8009c5c:	d420      	bmi.n	8009ca0 <_malloc_r+0xd0>
 8009c5e:	290b      	cmp	r1, #11
 8009c60:	d90a      	bls.n	8009c78 <_malloc_r+0xa8>
 8009c62:	19e2      	adds	r2, r4, r7
 8009c64:	6027      	str	r7, [r4, #0]
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	d104      	bne.n	8009c74 <_malloc_r+0xa4>
 8009c6a:	6032      	str	r2, [r6, #0]
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	6011      	str	r1, [r2, #0]
 8009c70:	6053      	str	r3, [r2, #4]
 8009c72:	e005      	b.n	8009c80 <_malloc_r+0xb0>
 8009c74:	605a      	str	r2, [r3, #4]
 8009c76:	e7f9      	b.n	8009c6c <_malloc_r+0x9c>
 8009c78:	6862      	ldr	r2, [r4, #4]
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	d10e      	bne.n	8009c9c <_malloc_r+0xcc>
 8009c7e:	6032      	str	r2, [r6, #0]
 8009c80:	0028      	movs	r0, r5
 8009c82:	f000 f82d 	bl	8009ce0 <__malloc_unlock>
 8009c86:	0020      	movs	r0, r4
 8009c88:	2207      	movs	r2, #7
 8009c8a:	300b      	adds	r0, #11
 8009c8c:	1d23      	adds	r3, r4, #4
 8009c8e:	4390      	bics	r0, r2
 8009c90:	1ac2      	subs	r2, r0, r3
 8009c92:	4298      	cmp	r0, r3
 8009c94:	d0df      	beq.n	8009c56 <_malloc_r+0x86>
 8009c96:	1a1b      	subs	r3, r3, r0
 8009c98:	50a3      	str	r3, [r4, r2]
 8009c9a:	e7dc      	b.n	8009c56 <_malloc_r+0x86>
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	e7ef      	b.n	8009c80 <_malloc_r+0xb0>
 8009ca0:	0023      	movs	r3, r4
 8009ca2:	6864      	ldr	r4, [r4, #4]
 8009ca4:	e7a6      	b.n	8009bf4 <_malloc_r+0x24>
 8009ca6:	9c00      	ldr	r4, [sp, #0]
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	e7ad      	b.n	8009c0a <_malloc_r+0x3a>
 8009cae:	001a      	movs	r2, r3
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	42a3      	cmp	r3, r4
 8009cb4:	d1fb      	bne.n	8009cae <_malloc_r+0xde>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e7da      	b.n	8009c70 <_malloc_r+0xa0>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	0028      	movs	r0, r5
 8009cbe:	602b      	str	r3, [r5, #0]
 8009cc0:	f000 f80e 	bl	8009ce0 <__malloc_unlock>
 8009cc4:	e7c6      	b.n	8009c54 <_malloc_r+0x84>
 8009cc6:	6007      	str	r7, [r0, #0]
 8009cc8:	e7da      	b.n	8009c80 <_malloc_r+0xb0>
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	200006d8 	.word	0x200006d8

08009cd0 <__malloc_lock>:
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	4802      	ldr	r0, [pc, #8]	@ (8009cdc <__malloc_lock+0xc>)
 8009cd4:	f7ff f883 	bl	8008dde <__retarget_lock_acquire_recursive>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	46c0      	nop			@ (mov r8, r8)
 8009cdc:	200006d0 	.word	0x200006d0

08009ce0 <__malloc_unlock>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4802      	ldr	r0, [pc, #8]	@ (8009cec <__malloc_unlock+0xc>)
 8009ce4:	f7ff f87c 	bl	8008de0 <__retarget_lock_release_recursive>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	200006d0 	.word	0x200006d0

08009cf0 <_Balloc>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	69c5      	ldr	r5, [r0, #28]
 8009cf4:	0006      	movs	r6, r0
 8009cf6:	000c      	movs	r4, r1
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	d10e      	bne.n	8009d1a <_Balloc+0x2a>
 8009cfc:	2010      	movs	r0, #16
 8009cfe:	f7ff ff3b 	bl	8009b78 <malloc>
 8009d02:	1e02      	subs	r2, r0, #0
 8009d04:	61f0      	str	r0, [r6, #28]
 8009d06:	d104      	bne.n	8009d12 <_Balloc+0x22>
 8009d08:	216b      	movs	r1, #107	@ 0x6b
 8009d0a:	4b19      	ldr	r3, [pc, #100]	@ (8009d70 <_Balloc+0x80>)
 8009d0c:	4819      	ldr	r0, [pc, #100]	@ (8009d74 <_Balloc+0x84>)
 8009d0e:	f000 fc59 	bl	800a5c4 <__assert_func>
 8009d12:	6045      	str	r5, [r0, #4]
 8009d14:	6085      	str	r5, [r0, #8]
 8009d16:	6005      	str	r5, [r0, #0]
 8009d18:	60c5      	str	r5, [r0, #12]
 8009d1a:	69f5      	ldr	r5, [r6, #28]
 8009d1c:	68eb      	ldr	r3, [r5, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <_Balloc+0x5a>
 8009d22:	69f3      	ldr	r3, [r6, #28]
 8009d24:	00a2      	lsls	r2, r4, #2
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d118      	bne.n	8009d62 <_Balloc+0x72>
 8009d30:	2101      	movs	r1, #1
 8009d32:	000d      	movs	r5, r1
 8009d34:	40a5      	lsls	r5, r4
 8009d36:	1d6a      	adds	r2, r5, #5
 8009d38:	0030      	movs	r0, r6
 8009d3a:	0092      	lsls	r2, r2, #2
 8009d3c:	f000 fc60 	bl	800a600 <_calloc_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d00c      	beq.n	8009d5e <_Balloc+0x6e>
 8009d44:	6044      	str	r4, [r0, #4]
 8009d46:	6085      	str	r5, [r0, #8]
 8009d48:	e00d      	b.n	8009d66 <_Balloc+0x76>
 8009d4a:	2221      	movs	r2, #33	@ 0x21
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	0030      	movs	r0, r6
 8009d50:	f000 fc56 	bl	800a600 <_calloc_r>
 8009d54:	69f3      	ldr	r3, [r6, #28]
 8009d56:	60e8      	str	r0, [r5, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e1      	bne.n	8009d22 <_Balloc+0x32>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	bd70      	pop	{r4, r5, r6, pc}
 8009d62:	6802      	ldr	r2, [r0, #0]
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6103      	str	r3, [r0, #16]
 8009d6a:	60c3      	str	r3, [r0, #12]
 8009d6c:	e7f8      	b.n	8009d60 <_Balloc+0x70>
 8009d6e:	46c0      	nop			@ (mov r8, r8)
 8009d70:	0800ad71 	.word	0x0800ad71
 8009d74:	0800adf1 	.word	0x0800adf1

08009d78 <_Bfree>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	69c6      	ldr	r6, [r0, #28]
 8009d7c:	0005      	movs	r5, r0
 8009d7e:	000c      	movs	r4, r1
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	d10e      	bne.n	8009da2 <_Bfree+0x2a>
 8009d84:	2010      	movs	r0, #16
 8009d86:	f7ff fef7 	bl	8009b78 <malloc>
 8009d8a:	1e02      	subs	r2, r0, #0
 8009d8c:	61e8      	str	r0, [r5, #28]
 8009d8e:	d104      	bne.n	8009d9a <_Bfree+0x22>
 8009d90:	218f      	movs	r1, #143	@ 0x8f
 8009d92:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <_Bfree+0x40>)
 8009d94:	4809      	ldr	r0, [pc, #36]	@ (8009dbc <_Bfree+0x44>)
 8009d96:	f000 fc15 	bl	800a5c4 <__assert_func>
 8009d9a:	6046      	str	r6, [r0, #4]
 8009d9c:	6086      	str	r6, [r0, #8]
 8009d9e:	6006      	str	r6, [r0, #0]
 8009da0:	60c6      	str	r6, [r0, #12]
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d007      	beq.n	8009db6 <_Bfree+0x3e>
 8009da6:	69eb      	ldr	r3, [r5, #28]
 8009da8:	6862      	ldr	r2, [r4, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	0092      	lsls	r2, r2, #2
 8009dae:	189b      	adds	r3, r3, r2
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	601c      	str	r4, [r3, #0]
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	0800ad71 	.word	0x0800ad71
 8009dbc:	0800adf1 	.word	0x0800adf1

08009dc0 <__multadd>:
 8009dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc2:	000f      	movs	r7, r1
 8009dc4:	9001      	str	r0, [sp, #4]
 8009dc6:	000c      	movs	r4, r1
 8009dc8:	001e      	movs	r6, r3
 8009dca:	2000      	movs	r0, #0
 8009dcc:	690d      	ldr	r5, [r1, #16]
 8009dce:	3714      	adds	r7, #20
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	b299      	uxth	r1, r3
 8009dd6:	4351      	muls	r1, r2
 8009dd8:	0c1b      	lsrs	r3, r3, #16
 8009dda:	4353      	muls	r3, r2
 8009ddc:	1989      	adds	r1, r1, r6
 8009dde:	0c0e      	lsrs	r6, r1, #16
 8009de0:	199b      	adds	r3, r3, r6
 8009de2:	0c1e      	lsrs	r6, r3, #16
 8009de4:	b289      	uxth	r1, r1
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	185b      	adds	r3, r3, r1
 8009dea:	c708      	stmia	r7!, {r3}
 8009dec:	4285      	cmp	r5, r0
 8009dee:	dcef      	bgt.n	8009dd0 <__multadd+0x10>
 8009df0:	2e00      	cmp	r6, #0
 8009df2:	d022      	beq.n	8009e3a <__multadd+0x7a>
 8009df4:	68a3      	ldr	r3, [r4, #8]
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	dc19      	bgt.n	8009e2e <__multadd+0x6e>
 8009dfa:	6861      	ldr	r1, [r4, #4]
 8009dfc:	9801      	ldr	r0, [sp, #4]
 8009dfe:	3101      	adds	r1, #1
 8009e00:	f7ff ff76 	bl	8009cf0 <_Balloc>
 8009e04:	1e07      	subs	r7, r0, #0
 8009e06:	d105      	bne.n	8009e14 <__multadd+0x54>
 8009e08:	003a      	movs	r2, r7
 8009e0a:	21ba      	movs	r1, #186	@ 0xba
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e40 <__multadd+0x80>)
 8009e0e:	480d      	ldr	r0, [pc, #52]	@ (8009e44 <__multadd+0x84>)
 8009e10:	f000 fbd8 	bl	800a5c4 <__assert_func>
 8009e14:	0021      	movs	r1, r4
 8009e16:	6922      	ldr	r2, [r4, #16]
 8009e18:	310c      	adds	r1, #12
 8009e1a:	3202      	adds	r2, #2
 8009e1c:	0092      	lsls	r2, r2, #2
 8009e1e:	300c      	adds	r0, #12
 8009e20:	f000 fbc6 	bl	800a5b0 <memcpy>
 8009e24:	0021      	movs	r1, r4
 8009e26:	9801      	ldr	r0, [sp, #4]
 8009e28:	f7ff ffa6 	bl	8009d78 <_Bfree>
 8009e2c:	003c      	movs	r4, r7
 8009e2e:	1d2b      	adds	r3, r5, #4
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	18e3      	adds	r3, r4, r3
 8009e34:	3501      	adds	r5, #1
 8009e36:	605e      	str	r6, [r3, #4]
 8009e38:	6125      	str	r5, [r4, #16]
 8009e3a:	0020      	movs	r0, r4
 8009e3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e3e:	46c0      	nop			@ (mov r8, r8)
 8009e40:	0800ade0 	.word	0x0800ade0
 8009e44:	0800adf1 	.word	0x0800adf1

08009e48 <__hi0bits>:
 8009e48:	2280      	movs	r2, #128	@ 0x80
 8009e4a:	0003      	movs	r3, r0
 8009e4c:	0252      	lsls	r2, r2, #9
 8009e4e:	2000      	movs	r0, #0
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d201      	bcs.n	8009e58 <__hi0bits+0x10>
 8009e54:	041b      	lsls	r3, r3, #16
 8009e56:	3010      	adds	r0, #16
 8009e58:	2280      	movs	r2, #128	@ 0x80
 8009e5a:	0452      	lsls	r2, r2, #17
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d201      	bcs.n	8009e64 <__hi0bits+0x1c>
 8009e60:	3008      	adds	r0, #8
 8009e62:	021b      	lsls	r3, r3, #8
 8009e64:	2280      	movs	r2, #128	@ 0x80
 8009e66:	0552      	lsls	r2, r2, #21
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d201      	bcs.n	8009e70 <__hi0bits+0x28>
 8009e6c:	3004      	adds	r0, #4
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	2280      	movs	r2, #128	@ 0x80
 8009e72:	05d2      	lsls	r2, r2, #23
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d201      	bcs.n	8009e7c <__hi0bits+0x34>
 8009e78:	3002      	adds	r0, #2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	db03      	blt.n	8009e88 <__hi0bits+0x40>
 8009e80:	3001      	adds	r0, #1
 8009e82:	4213      	tst	r3, r2
 8009e84:	d100      	bne.n	8009e88 <__hi0bits+0x40>
 8009e86:	2020      	movs	r0, #32
 8009e88:	4770      	bx	lr

08009e8a <__lo0bits>:
 8009e8a:	6803      	ldr	r3, [r0, #0]
 8009e8c:	0001      	movs	r1, r0
 8009e8e:	2207      	movs	r2, #7
 8009e90:	0018      	movs	r0, r3
 8009e92:	4010      	ands	r0, r2
 8009e94:	4213      	tst	r3, r2
 8009e96:	d00d      	beq.n	8009eb4 <__lo0bits+0x2a>
 8009e98:	3a06      	subs	r2, #6
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	4213      	tst	r3, r2
 8009e9e:	d105      	bne.n	8009eac <__lo0bits+0x22>
 8009ea0:	3002      	adds	r0, #2
 8009ea2:	4203      	tst	r3, r0
 8009ea4:	d003      	beq.n	8009eae <__lo0bits+0x24>
 8009ea6:	40d3      	lsrs	r3, r2
 8009ea8:	0010      	movs	r0, r2
 8009eaa:	600b      	str	r3, [r1, #0]
 8009eac:	4770      	bx	lr
 8009eae:	089b      	lsrs	r3, r3, #2
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	e7fb      	b.n	8009eac <__lo0bits+0x22>
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	d101      	bne.n	8009ebe <__lo0bits+0x34>
 8009eba:	2010      	movs	r0, #16
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d101      	bne.n	8009ec8 <__lo0bits+0x3e>
 8009ec4:	3008      	adds	r0, #8
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	071a      	lsls	r2, r3, #28
 8009eca:	d101      	bne.n	8009ed0 <__lo0bits+0x46>
 8009ecc:	3004      	adds	r0, #4
 8009ece:	091b      	lsrs	r3, r3, #4
 8009ed0:	079a      	lsls	r2, r3, #30
 8009ed2:	d101      	bne.n	8009ed8 <__lo0bits+0x4e>
 8009ed4:	3002      	adds	r0, #2
 8009ed6:	089b      	lsrs	r3, r3, #2
 8009ed8:	07da      	lsls	r2, r3, #31
 8009eda:	d4e9      	bmi.n	8009eb0 <__lo0bits+0x26>
 8009edc:	3001      	adds	r0, #1
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	d1e6      	bne.n	8009eb0 <__lo0bits+0x26>
 8009ee2:	2020      	movs	r0, #32
 8009ee4:	e7e2      	b.n	8009eac <__lo0bits+0x22>
	...

08009ee8 <__i2b>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	000c      	movs	r4, r1
 8009eec:	2101      	movs	r1, #1
 8009eee:	f7ff feff 	bl	8009cf0 <_Balloc>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d107      	bne.n	8009f06 <__i2b+0x1e>
 8009ef6:	2146      	movs	r1, #70	@ 0x46
 8009ef8:	4c05      	ldr	r4, [pc, #20]	@ (8009f10 <__i2b+0x28>)
 8009efa:	0002      	movs	r2, r0
 8009efc:	4b05      	ldr	r3, [pc, #20]	@ (8009f14 <__i2b+0x2c>)
 8009efe:	0020      	movs	r0, r4
 8009f00:	31ff      	adds	r1, #255	@ 0xff
 8009f02:	f000 fb5f 	bl	800a5c4 <__assert_func>
 8009f06:	2301      	movs	r3, #1
 8009f08:	6144      	str	r4, [r0, #20]
 8009f0a:	6103      	str	r3, [r0, #16]
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	46c0      	nop			@ (mov r8, r8)
 8009f10:	0800adf1 	.word	0x0800adf1
 8009f14:	0800ade0 	.word	0x0800ade0

08009f18 <__multiply>:
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1a:	0014      	movs	r4, r2
 8009f1c:	690a      	ldr	r2, [r1, #16]
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	000d      	movs	r5, r1
 8009f22:	b089      	sub	sp, #36	@ 0x24
 8009f24:	429a      	cmp	r2, r3
 8009f26:	db02      	blt.n	8009f2e <__multiply+0x16>
 8009f28:	0023      	movs	r3, r4
 8009f2a:	000c      	movs	r4, r1
 8009f2c:	001d      	movs	r5, r3
 8009f2e:	6927      	ldr	r7, [r4, #16]
 8009f30:	692e      	ldr	r6, [r5, #16]
 8009f32:	6861      	ldr	r1, [r4, #4]
 8009f34:	19bb      	adds	r3, r7, r6
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	68a3      	ldr	r3, [r4, #8]
 8009f3a:	19ba      	adds	r2, r7, r6
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	da00      	bge.n	8009f42 <__multiply+0x2a>
 8009f40:	3101      	adds	r1, #1
 8009f42:	f7ff fed5 	bl	8009cf0 <_Balloc>
 8009f46:	4684      	mov	ip, r0
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d106      	bne.n	8009f5a <__multiply+0x42>
 8009f4c:	21b1      	movs	r1, #177	@ 0xb1
 8009f4e:	4662      	mov	r2, ip
 8009f50:	4b44      	ldr	r3, [pc, #272]	@ (800a064 <__multiply+0x14c>)
 8009f52:	4845      	ldr	r0, [pc, #276]	@ (800a068 <__multiply+0x150>)
 8009f54:	0049      	lsls	r1, r1, #1
 8009f56:	f000 fb35 	bl	800a5c4 <__assert_func>
 8009f5a:	0002      	movs	r2, r0
 8009f5c:	19bb      	adds	r3, r7, r6
 8009f5e:	3214      	adds	r2, #20
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	18d3      	adds	r3, r2, r3
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2100      	movs	r1, #0
 8009f68:	0013      	movs	r3, r2
 8009f6a:	9801      	ldr	r0, [sp, #4]
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d328      	bcc.n	8009fc2 <__multiply+0xaa>
 8009f70:	0023      	movs	r3, r4
 8009f72:	00bf      	lsls	r7, r7, #2
 8009f74:	3314      	adds	r3, #20
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	3514      	adds	r5, #20
 8009f7a:	19db      	adds	r3, r3, r7
 8009f7c:	00b6      	lsls	r6, r6, #2
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	19ab      	adds	r3, r5, r6
 8009f82:	9307      	str	r3, [sp, #28]
 8009f84:	2304      	movs	r3, #4
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	0023      	movs	r3, r4
 8009f8a:	9902      	ldr	r1, [sp, #8]
 8009f8c:	3315      	adds	r3, #21
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	d305      	bcc.n	8009f9e <__multiply+0x86>
 8009f92:	1b0c      	subs	r4, r1, r4
 8009f94:	3c15      	subs	r4, #21
 8009f96:	08a4      	lsrs	r4, r4, #2
 8009f98:	3401      	adds	r4, #1
 8009f9a:	00a3      	lsls	r3, r4, #2
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	9b07      	ldr	r3, [sp, #28]
 8009fa0:	429d      	cmp	r5, r3
 8009fa2:	d310      	bcc.n	8009fc6 <__multiply+0xae>
 8009fa4:	9b00      	ldr	r3, [sp, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	dd05      	ble.n	8009fb6 <__multiply+0x9e>
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d052      	beq.n	800a05c <__multiply+0x144>
 8009fb6:	4663      	mov	r3, ip
 8009fb8:	4660      	mov	r0, ip
 8009fba:	9a00      	ldr	r2, [sp, #0]
 8009fbc:	611a      	str	r2, [r3, #16]
 8009fbe:	b009      	add	sp, #36	@ 0x24
 8009fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc2:	c302      	stmia	r3!, {r1}
 8009fc4:	e7d1      	b.n	8009f6a <__multiply+0x52>
 8009fc6:	682c      	ldr	r4, [r5, #0]
 8009fc8:	b2a4      	uxth	r4, r4
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d01f      	beq.n	800a00e <__multiply+0xf6>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	0017      	movs	r7, r2
 8009fd2:	9e04      	ldr	r6, [sp, #16]
 8009fd4:	9303      	str	r3, [sp, #12]
 8009fd6:	ce08      	ldmia	r6!, {r3}
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	466b      	mov	r3, sp
 8009fde:	8b1b      	ldrh	r3, [r3, #24]
 8009fe0:	b288      	uxth	r0, r1
 8009fe2:	4363      	muls	r3, r4
 8009fe4:	181b      	adds	r3, r3, r0
 8009fe6:	9803      	ldr	r0, [sp, #12]
 8009fe8:	0c09      	lsrs	r1, r1, #16
 8009fea:	181b      	adds	r3, r3, r0
 8009fec:	9806      	ldr	r0, [sp, #24]
 8009fee:	0c00      	lsrs	r0, r0, #16
 8009ff0:	4360      	muls	r0, r4
 8009ff2:	1840      	adds	r0, r0, r1
 8009ff4:	0c19      	lsrs	r1, r3, #16
 8009ff6:	1841      	adds	r1, r0, r1
 8009ff8:	0c08      	lsrs	r0, r1, #16
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	0409      	lsls	r1, r1, #16
 8009ffe:	4319      	orrs	r1, r3
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	9003      	str	r0, [sp, #12]
 800a004:	c702      	stmia	r7!, {r1}
 800a006:	42b3      	cmp	r3, r6
 800a008:	d8e5      	bhi.n	8009fd6 <__multiply+0xbe>
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	50d0      	str	r0, [r2, r3]
 800a00e:	682c      	ldr	r4, [r5, #0]
 800a010:	0c24      	lsrs	r4, r4, #16
 800a012:	d020      	beq.n	800a056 <__multiply+0x13e>
 800a014:	2100      	movs	r1, #0
 800a016:	0010      	movs	r0, r2
 800a018:	6813      	ldr	r3, [r2, #0]
 800a01a:	9e04      	ldr	r6, [sp, #16]
 800a01c:	9103      	str	r1, [sp, #12]
 800a01e:	6831      	ldr	r1, [r6, #0]
 800a020:	6807      	ldr	r7, [r0, #0]
 800a022:	b289      	uxth	r1, r1
 800a024:	4361      	muls	r1, r4
 800a026:	0c3f      	lsrs	r7, r7, #16
 800a028:	19c9      	adds	r1, r1, r7
 800a02a:	9f03      	ldr	r7, [sp, #12]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	19c9      	adds	r1, r1, r7
 800a030:	040f      	lsls	r7, r1, #16
 800a032:	431f      	orrs	r7, r3
 800a034:	6007      	str	r7, [r0, #0]
 800a036:	ce80      	ldmia	r6!, {r7}
 800a038:	6843      	ldr	r3, [r0, #4]
 800a03a:	0c3f      	lsrs	r7, r7, #16
 800a03c:	4367      	muls	r7, r4
 800a03e:	b29b      	uxth	r3, r3
 800a040:	0c09      	lsrs	r1, r1, #16
 800a042:	18fb      	adds	r3, r7, r3
 800a044:	185b      	adds	r3, r3, r1
 800a046:	0c19      	lsrs	r1, r3, #16
 800a048:	9103      	str	r1, [sp, #12]
 800a04a:	9902      	ldr	r1, [sp, #8]
 800a04c:	3004      	adds	r0, #4
 800a04e:	42b1      	cmp	r1, r6
 800a050:	d8e5      	bhi.n	800a01e <__multiply+0x106>
 800a052:	9905      	ldr	r1, [sp, #20]
 800a054:	5053      	str	r3, [r2, r1]
 800a056:	3504      	adds	r5, #4
 800a058:	3204      	adds	r2, #4
 800a05a:	e7a0      	b.n	8009f9e <__multiply+0x86>
 800a05c:	9b00      	ldr	r3, [sp, #0]
 800a05e:	3b01      	subs	r3, #1
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	e79f      	b.n	8009fa4 <__multiply+0x8c>
 800a064:	0800ade0 	.word	0x0800ade0
 800a068:	0800adf1 	.word	0x0800adf1

0800a06c <__pow5mult>:
 800a06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a06e:	2303      	movs	r3, #3
 800a070:	0015      	movs	r5, r2
 800a072:	0007      	movs	r7, r0
 800a074:	000e      	movs	r6, r1
 800a076:	401a      	ands	r2, r3
 800a078:	421d      	tst	r5, r3
 800a07a:	d008      	beq.n	800a08e <__pow5mult+0x22>
 800a07c:	4925      	ldr	r1, [pc, #148]	@ (800a114 <__pow5mult+0xa8>)
 800a07e:	3a01      	subs	r2, #1
 800a080:	0092      	lsls	r2, r2, #2
 800a082:	5852      	ldr	r2, [r2, r1]
 800a084:	2300      	movs	r3, #0
 800a086:	0031      	movs	r1, r6
 800a088:	f7ff fe9a 	bl	8009dc0 <__multadd>
 800a08c:	0006      	movs	r6, r0
 800a08e:	10ad      	asrs	r5, r5, #2
 800a090:	d03d      	beq.n	800a10e <__pow5mult+0xa2>
 800a092:	69fc      	ldr	r4, [r7, #28]
 800a094:	2c00      	cmp	r4, #0
 800a096:	d10f      	bne.n	800a0b8 <__pow5mult+0x4c>
 800a098:	2010      	movs	r0, #16
 800a09a:	f7ff fd6d 	bl	8009b78 <malloc>
 800a09e:	1e02      	subs	r2, r0, #0
 800a0a0:	61f8      	str	r0, [r7, #28]
 800a0a2:	d105      	bne.n	800a0b0 <__pow5mult+0x44>
 800a0a4:	21b4      	movs	r1, #180	@ 0xb4
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a118 <__pow5mult+0xac>)
 800a0a8:	481c      	ldr	r0, [pc, #112]	@ (800a11c <__pow5mult+0xb0>)
 800a0aa:	31ff      	adds	r1, #255	@ 0xff
 800a0ac:	f000 fa8a 	bl	800a5c4 <__assert_func>
 800a0b0:	6044      	str	r4, [r0, #4]
 800a0b2:	6084      	str	r4, [r0, #8]
 800a0b4:	6004      	str	r4, [r0, #0]
 800a0b6:	60c4      	str	r4, [r0, #12]
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	689c      	ldr	r4, [r3, #8]
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	d108      	bne.n	800a0d4 <__pow5mult+0x68>
 800a0c2:	0038      	movs	r0, r7
 800a0c4:	4916      	ldr	r1, [pc, #88]	@ (800a120 <__pow5mult+0xb4>)
 800a0c6:	f7ff ff0f 	bl	8009ee8 <__i2b>
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	0004      	movs	r4, r0
 800a0ce:	6098      	str	r0, [r3, #8]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	421d      	tst	r5, r3
 800a0d8:	d00a      	beq.n	800a0f0 <__pow5mult+0x84>
 800a0da:	0031      	movs	r1, r6
 800a0dc:	0022      	movs	r2, r4
 800a0de:	0038      	movs	r0, r7
 800a0e0:	f7ff ff1a 	bl	8009f18 <__multiply>
 800a0e4:	0031      	movs	r1, r6
 800a0e6:	9001      	str	r0, [sp, #4]
 800a0e8:	0038      	movs	r0, r7
 800a0ea:	f7ff fe45 	bl	8009d78 <_Bfree>
 800a0ee:	9e01      	ldr	r6, [sp, #4]
 800a0f0:	106d      	asrs	r5, r5, #1
 800a0f2:	d00c      	beq.n	800a10e <__pow5mult+0xa2>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d107      	bne.n	800a10a <__pow5mult+0x9e>
 800a0fa:	0022      	movs	r2, r4
 800a0fc:	0021      	movs	r1, r4
 800a0fe:	0038      	movs	r0, r7
 800a100:	f7ff ff0a 	bl	8009f18 <__multiply>
 800a104:	2300      	movs	r3, #0
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	6003      	str	r3, [r0, #0]
 800a10a:	0004      	movs	r4, r0
 800a10c:	e7e2      	b.n	800a0d4 <__pow5mult+0x68>
 800a10e:	0030      	movs	r0, r6
 800a110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a112:	46c0      	nop			@ (mov r8, r8)
 800a114:	0800aea4 	.word	0x0800aea4
 800a118:	0800ad71 	.word	0x0800ad71
 800a11c:	0800adf1 	.word	0x0800adf1
 800a120:	00000271 	.word	0x00000271

0800a124 <__lshift>:
 800a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a126:	000c      	movs	r4, r1
 800a128:	0016      	movs	r6, r2
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	1157      	asrs	r7, r2, #5
 800a12e:	b085      	sub	sp, #20
 800a130:	18fb      	adds	r3, r7, r3
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	3301      	adds	r3, #1
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	6849      	ldr	r1, [r1, #4]
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	9002      	str	r0, [sp, #8]
 800a13e:	9a00      	ldr	r2, [sp, #0]
 800a140:	4293      	cmp	r3, r2
 800a142:	db10      	blt.n	800a166 <__lshift+0x42>
 800a144:	9802      	ldr	r0, [sp, #8]
 800a146:	f7ff fdd3 	bl	8009cf0 <_Balloc>
 800a14a:	2300      	movs	r3, #0
 800a14c:	0001      	movs	r1, r0
 800a14e:	0005      	movs	r5, r0
 800a150:	001a      	movs	r2, r3
 800a152:	3114      	adds	r1, #20
 800a154:	4298      	cmp	r0, r3
 800a156:	d10c      	bne.n	800a172 <__lshift+0x4e>
 800a158:	21ef      	movs	r1, #239	@ 0xef
 800a15a:	002a      	movs	r2, r5
 800a15c:	4b25      	ldr	r3, [pc, #148]	@ (800a1f4 <__lshift+0xd0>)
 800a15e:	4826      	ldr	r0, [pc, #152]	@ (800a1f8 <__lshift+0xd4>)
 800a160:	0049      	lsls	r1, r1, #1
 800a162:	f000 fa2f 	bl	800a5c4 <__assert_func>
 800a166:	3101      	adds	r1, #1
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	e7e8      	b.n	800a13e <__lshift+0x1a>
 800a16c:	0098      	lsls	r0, r3, #2
 800a16e:	500a      	str	r2, [r1, r0]
 800a170:	3301      	adds	r3, #1
 800a172:	42bb      	cmp	r3, r7
 800a174:	dbfa      	blt.n	800a16c <__lshift+0x48>
 800a176:	43fb      	mvns	r3, r7
 800a178:	17db      	asrs	r3, r3, #31
 800a17a:	401f      	ands	r7, r3
 800a17c:	00bf      	lsls	r7, r7, #2
 800a17e:	0023      	movs	r3, r4
 800a180:	201f      	movs	r0, #31
 800a182:	19c9      	adds	r1, r1, r7
 800a184:	0037      	movs	r7, r6
 800a186:	6922      	ldr	r2, [r4, #16]
 800a188:	3314      	adds	r3, #20
 800a18a:	0092      	lsls	r2, r2, #2
 800a18c:	189a      	adds	r2, r3, r2
 800a18e:	4007      	ands	r7, r0
 800a190:	4206      	tst	r6, r0
 800a192:	d029      	beq.n	800a1e8 <__lshift+0xc4>
 800a194:	3001      	adds	r0, #1
 800a196:	1bc0      	subs	r0, r0, r7
 800a198:	9003      	str	r0, [sp, #12]
 800a19a:	468c      	mov	ip, r1
 800a19c:	2000      	movs	r0, #0
 800a19e:	681e      	ldr	r6, [r3, #0]
 800a1a0:	40be      	lsls	r6, r7
 800a1a2:	4306      	orrs	r6, r0
 800a1a4:	4660      	mov	r0, ip
 800a1a6:	c040      	stmia	r0!, {r6}
 800a1a8:	4684      	mov	ip, r0
 800a1aa:	9e03      	ldr	r6, [sp, #12]
 800a1ac:	cb01      	ldmia	r3!, {r0}
 800a1ae:	40f0      	lsrs	r0, r6
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d8f4      	bhi.n	800a19e <__lshift+0x7a>
 800a1b4:	0026      	movs	r6, r4
 800a1b6:	3615      	adds	r6, #21
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	42b2      	cmp	r2, r6
 800a1bc:	d304      	bcc.n	800a1c8 <__lshift+0xa4>
 800a1be:	1b13      	subs	r3, r2, r4
 800a1c0:	3b15      	subs	r3, #21
 800a1c2:	089b      	lsrs	r3, r3, #2
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	50c8      	str	r0, [r1, r3]
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d002      	beq.n	800a1d4 <__lshift+0xb0>
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	9802      	ldr	r0, [sp, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	0021      	movs	r1, r4
 800a1dc:	612b      	str	r3, [r5, #16]
 800a1de:	f7ff fdcb 	bl	8009d78 <_Bfree>
 800a1e2:	0028      	movs	r0, r5
 800a1e4:	b005      	add	sp, #20
 800a1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e8:	cb01      	ldmia	r3!, {r0}
 800a1ea:	c101      	stmia	r1!, {r0}
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d8fb      	bhi.n	800a1e8 <__lshift+0xc4>
 800a1f0:	e7f0      	b.n	800a1d4 <__lshift+0xb0>
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	0800ade0 	.word	0x0800ade0
 800a1f8:	0800adf1 	.word	0x0800adf1

0800a1fc <__mcmp>:
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	690b      	ldr	r3, [r1, #16]
 800a200:	6904      	ldr	r4, [r0, #16]
 800a202:	0002      	movs	r2, r0
 800a204:	1ae0      	subs	r0, r4, r3
 800a206:	429c      	cmp	r4, r3
 800a208:	d10f      	bne.n	800a22a <__mcmp+0x2e>
 800a20a:	3214      	adds	r2, #20
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	3114      	adds	r1, #20
 800a210:	0014      	movs	r4, r2
 800a212:	18c9      	adds	r1, r1, r3
 800a214:	18d2      	adds	r2, r2, r3
 800a216:	3a04      	subs	r2, #4
 800a218:	3904      	subs	r1, #4
 800a21a:	6815      	ldr	r5, [r2, #0]
 800a21c:	680b      	ldr	r3, [r1, #0]
 800a21e:	429d      	cmp	r5, r3
 800a220:	d004      	beq.n	800a22c <__mcmp+0x30>
 800a222:	2001      	movs	r0, #1
 800a224:	429d      	cmp	r5, r3
 800a226:	d200      	bcs.n	800a22a <__mcmp+0x2e>
 800a228:	3802      	subs	r0, #2
 800a22a:	bd30      	pop	{r4, r5, pc}
 800a22c:	4294      	cmp	r4, r2
 800a22e:	d3f2      	bcc.n	800a216 <__mcmp+0x1a>
 800a230:	e7fb      	b.n	800a22a <__mcmp+0x2e>
	...

0800a234 <__mdiff>:
 800a234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a236:	000c      	movs	r4, r1
 800a238:	b087      	sub	sp, #28
 800a23a:	9000      	str	r0, [sp, #0]
 800a23c:	0011      	movs	r1, r2
 800a23e:	0020      	movs	r0, r4
 800a240:	0017      	movs	r7, r2
 800a242:	f7ff ffdb 	bl	800a1fc <__mcmp>
 800a246:	1e05      	subs	r5, r0, #0
 800a248:	d110      	bne.n	800a26c <__mdiff+0x38>
 800a24a:	0001      	movs	r1, r0
 800a24c:	9800      	ldr	r0, [sp, #0]
 800a24e:	f7ff fd4f 	bl	8009cf0 <_Balloc>
 800a252:	1e02      	subs	r2, r0, #0
 800a254:	d104      	bne.n	800a260 <__mdiff+0x2c>
 800a256:	4b40      	ldr	r3, [pc, #256]	@ (800a358 <__mdiff+0x124>)
 800a258:	4840      	ldr	r0, [pc, #256]	@ (800a35c <__mdiff+0x128>)
 800a25a:	4941      	ldr	r1, [pc, #260]	@ (800a360 <__mdiff+0x12c>)
 800a25c:	f000 f9b2 	bl	800a5c4 <__assert_func>
 800a260:	2301      	movs	r3, #1
 800a262:	6145      	str	r5, [r0, #20]
 800a264:	6103      	str	r3, [r0, #16]
 800a266:	0010      	movs	r0, r2
 800a268:	b007      	add	sp, #28
 800a26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26c:	2600      	movs	r6, #0
 800a26e:	42b0      	cmp	r0, r6
 800a270:	da03      	bge.n	800a27a <__mdiff+0x46>
 800a272:	0023      	movs	r3, r4
 800a274:	003c      	movs	r4, r7
 800a276:	001f      	movs	r7, r3
 800a278:	3601      	adds	r6, #1
 800a27a:	6861      	ldr	r1, [r4, #4]
 800a27c:	9800      	ldr	r0, [sp, #0]
 800a27e:	f7ff fd37 	bl	8009cf0 <_Balloc>
 800a282:	1e02      	subs	r2, r0, #0
 800a284:	d103      	bne.n	800a28e <__mdiff+0x5a>
 800a286:	4b34      	ldr	r3, [pc, #208]	@ (800a358 <__mdiff+0x124>)
 800a288:	4834      	ldr	r0, [pc, #208]	@ (800a35c <__mdiff+0x128>)
 800a28a:	4936      	ldr	r1, [pc, #216]	@ (800a364 <__mdiff+0x130>)
 800a28c:	e7e6      	b.n	800a25c <__mdiff+0x28>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	3414      	adds	r4, #20
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	18e3      	adds	r3, r4, r3
 800a298:	0021      	movs	r1, r4
 800a29a:	9401      	str	r4, [sp, #4]
 800a29c:	003c      	movs	r4, r7
 800a29e:	9302      	str	r3, [sp, #8]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	3414      	adds	r4, #20
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	18e3      	adds	r3, r4, r3
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	0003      	movs	r3, r0
 800a2ac:	60c6      	str	r6, [r0, #12]
 800a2ae:	468c      	mov	ip, r1
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	3314      	adds	r3, #20
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	4663      	mov	r3, ip
 800a2ba:	cb20      	ldmia	r3!, {r5}
 800a2bc:	b2a9      	uxth	r1, r5
 800a2be:	000e      	movs	r6, r1
 800a2c0:	469c      	mov	ip, r3
 800a2c2:	cc08      	ldmia	r4!, {r3}
 800a2c4:	0c2d      	lsrs	r5, r5, #16
 800a2c6:	b299      	uxth	r1, r3
 800a2c8:	1a71      	subs	r1, r6, r1
 800a2ca:	1809      	adds	r1, r1, r0
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	1408      	asrs	r0, r1, #16
 800a2d0:	1aeb      	subs	r3, r5, r3
 800a2d2:	181b      	adds	r3, r3, r0
 800a2d4:	1418      	asrs	r0, r3, #16
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	041b      	lsls	r3, r3, #16
 800a2da:	4319      	orrs	r1, r3
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	c302      	stmia	r3!, {r1}
 800a2e0:	9305      	str	r3, [sp, #20]
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d8e7      	bhi.n	800a2b8 <__mdiff+0x84>
 800a2e8:	0039      	movs	r1, r7
 800a2ea:	9c03      	ldr	r4, [sp, #12]
 800a2ec:	3115      	adds	r1, #21
 800a2ee:	2304      	movs	r3, #4
 800a2f0:	428c      	cmp	r4, r1
 800a2f2:	d304      	bcc.n	800a2fe <__mdiff+0xca>
 800a2f4:	1be3      	subs	r3, r4, r7
 800a2f6:	3b15      	subs	r3, #21
 800a2f8:	089b      	lsrs	r3, r3, #2
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	9901      	ldr	r1, [sp, #4]
 800a300:	18cd      	adds	r5, r1, r3
 800a302:	9904      	ldr	r1, [sp, #16]
 800a304:	002e      	movs	r6, r5
 800a306:	18cb      	adds	r3, r1, r3
 800a308:	001f      	movs	r7, r3
 800a30a:	9902      	ldr	r1, [sp, #8]
 800a30c:	428e      	cmp	r6, r1
 800a30e:	d311      	bcc.n	800a334 <__mdiff+0x100>
 800a310:	9c02      	ldr	r4, [sp, #8]
 800a312:	1ee9      	subs	r1, r5, #3
 800a314:	2000      	movs	r0, #0
 800a316:	428c      	cmp	r4, r1
 800a318:	d304      	bcc.n	800a324 <__mdiff+0xf0>
 800a31a:	0021      	movs	r1, r4
 800a31c:	3103      	adds	r1, #3
 800a31e:	1b49      	subs	r1, r1, r5
 800a320:	0889      	lsrs	r1, r1, #2
 800a322:	0088      	lsls	r0, r1, #2
 800a324:	181b      	adds	r3, r3, r0
 800a326:	3b04      	subs	r3, #4
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	2900      	cmp	r1, #0
 800a32c:	d010      	beq.n	800a350 <__mdiff+0x11c>
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	6113      	str	r3, [r2, #16]
 800a332:	e798      	b.n	800a266 <__mdiff+0x32>
 800a334:	4684      	mov	ip, r0
 800a336:	ce02      	ldmia	r6!, {r1}
 800a338:	b288      	uxth	r0, r1
 800a33a:	4460      	add	r0, ip
 800a33c:	1400      	asrs	r0, r0, #16
 800a33e:	0c0c      	lsrs	r4, r1, #16
 800a340:	1904      	adds	r4, r0, r4
 800a342:	4461      	add	r1, ip
 800a344:	1420      	asrs	r0, r4, #16
 800a346:	b289      	uxth	r1, r1
 800a348:	0424      	lsls	r4, r4, #16
 800a34a:	4321      	orrs	r1, r4
 800a34c:	c702      	stmia	r7!, {r1}
 800a34e:	e7dc      	b.n	800a30a <__mdiff+0xd6>
 800a350:	9900      	ldr	r1, [sp, #0]
 800a352:	3901      	subs	r1, #1
 800a354:	9100      	str	r1, [sp, #0]
 800a356:	e7e6      	b.n	800a326 <__mdiff+0xf2>
 800a358:	0800ade0 	.word	0x0800ade0
 800a35c:	0800adf1 	.word	0x0800adf1
 800a360:	00000237 	.word	0x00000237
 800a364:	00000245 	.word	0x00000245

0800a368 <__d2b>:
 800a368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36a:	2101      	movs	r1, #1
 800a36c:	0016      	movs	r6, r2
 800a36e:	001f      	movs	r7, r3
 800a370:	f7ff fcbe 	bl	8009cf0 <_Balloc>
 800a374:	1e04      	subs	r4, r0, #0
 800a376:	d105      	bne.n	800a384 <__d2b+0x1c>
 800a378:	0022      	movs	r2, r4
 800a37a:	4b25      	ldr	r3, [pc, #148]	@ (800a410 <__d2b+0xa8>)
 800a37c:	4825      	ldr	r0, [pc, #148]	@ (800a414 <__d2b+0xac>)
 800a37e:	4926      	ldr	r1, [pc, #152]	@ (800a418 <__d2b+0xb0>)
 800a380:	f000 f920 	bl	800a5c4 <__assert_func>
 800a384:	033b      	lsls	r3, r7, #12
 800a386:	007d      	lsls	r5, r7, #1
 800a388:	0b1b      	lsrs	r3, r3, #12
 800a38a:	0d6d      	lsrs	r5, r5, #21
 800a38c:	d002      	beq.n	800a394 <__d2b+0x2c>
 800a38e:	2280      	movs	r2, #128	@ 0x80
 800a390:	0352      	lsls	r2, r2, #13
 800a392:	4313      	orrs	r3, r2
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	2e00      	cmp	r6, #0
 800a398:	d025      	beq.n	800a3e6 <__d2b+0x7e>
 800a39a:	4668      	mov	r0, sp
 800a39c:	9600      	str	r6, [sp, #0]
 800a39e:	f7ff fd74 	bl	8009e8a <__lo0bits>
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	9900      	ldr	r1, [sp, #0]
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d01b      	beq.n	800a3e2 <__d2b+0x7a>
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	001e      	movs	r6, r3
 800a3ae:	1a12      	subs	r2, r2, r0
 800a3b0:	4096      	lsls	r6, r2
 800a3b2:	0032      	movs	r2, r6
 800a3b4:	40c3      	lsrs	r3, r0
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	6162      	str	r2, [r4, #20]
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	9e01      	ldr	r6, [sp, #4]
 800a3be:	61a6      	str	r6, [r4, #24]
 800a3c0:	1e73      	subs	r3, r6, #1
 800a3c2:	419e      	sbcs	r6, r3
 800a3c4:	3601      	adds	r6, #1
 800a3c6:	6126      	str	r6, [r4, #16]
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d014      	beq.n	800a3f6 <__d2b+0x8e>
 800a3cc:	2635      	movs	r6, #53	@ 0x35
 800a3ce:	4b13      	ldr	r3, [pc, #76]	@ (800a41c <__d2b+0xb4>)
 800a3d0:	18ed      	adds	r5, r5, r3
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	182d      	adds	r5, r5, r0
 800a3d6:	601d      	str	r5, [r3, #0]
 800a3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3da:	1a36      	subs	r6, r6, r0
 800a3dc:	601e      	str	r6, [r3, #0]
 800a3de:	0020      	movs	r0, r4
 800a3e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3e2:	6161      	str	r1, [r4, #20]
 800a3e4:	e7ea      	b.n	800a3bc <__d2b+0x54>
 800a3e6:	a801      	add	r0, sp, #4
 800a3e8:	f7ff fd4f 	bl	8009e8a <__lo0bits>
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	2601      	movs	r6, #1
 800a3f0:	6163      	str	r3, [r4, #20]
 800a3f2:	3020      	adds	r0, #32
 800a3f4:	e7e7      	b.n	800a3c6 <__d2b+0x5e>
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a420 <__d2b+0xb8>)
 800a3f8:	18c0      	adds	r0, r0, r3
 800a3fa:	9b08      	ldr	r3, [sp, #32]
 800a3fc:	6018      	str	r0, [r3, #0]
 800a3fe:	4b09      	ldr	r3, [pc, #36]	@ (800a424 <__d2b+0xbc>)
 800a400:	18f3      	adds	r3, r6, r3
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	18e3      	adds	r3, r4, r3
 800a406:	6958      	ldr	r0, [r3, #20]
 800a408:	f7ff fd1e 	bl	8009e48 <__hi0bits>
 800a40c:	0176      	lsls	r6, r6, #5
 800a40e:	e7e3      	b.n	800a3d8 <__d2b+0x70>
 800a410:	0800ade0 	.word	0x0800ade0
 800a414:	0800adf1 	.word	0x0800adf1
 800a418:	0000030f 	.word	0x0000030f
 800a41c:	fffffbcd 	.word	0xfffffbcd
 800a420:	fffffbce 	.word	0xfffffbce
 800a424:	3fffffff 	.word	0x3fffffff

0800a428 <__sflush_r>:
 800a428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a42a:	220c      	movs	r2, #12
 800a42c:	5e8b      	ldrsh	r3, [r1, r2]
 800a42e:	0005      	movs	r5, r0
 800a430:	000c      	movs	r4, r1
 800a432:	071a      	lsls	r2, r3, #28
 800a434:	d456      	bmi.n	800a4e4 <__sflush_r+0xbc>
 800a436:	684a      	ldr	r2, [r1, #4]
 800a438:	2a00      	cmp	r2, #0
 800a43a:	dc02      	bgt.n	800a442 <__sflush_r+0x1a>
 800a43c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a43e:	2a00      	cmp	r2, #0
 800a440:	dd4e      	ble.n	800a4e0 <__sflush_r+0xb8>
 800a442:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a444:	2f00      	cmp	r7, #0
 800a446:	d04b      	beq.n	800a4e0 <__sflush_r+0xb8>
 800a448:	2200      	movs	r2, #0
 800a44a:	2080      	movs	r0, #128	@ 0x80
 800a44c:	682e      	ldr	r6, [r5, #0]
 800a44e:	602a      	str	r2, [r5, #0]
 800a450:	001a      	movs	r2, r3
 800a452:	0140      	lsls	r0, r0, #5
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	4002      	ands	r2, r0
 800a458:	4203      	tst	r3, r0
 800a45a:	d033      	beq.n	800a4c4 <__sflush_r+0x9c>
 800a45c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	075b      	lsls	r3, r3, #29
 800a462:	d506      	bpl.n	800a472 <__sflush_r+0x4a>
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	1ad2      	subs	r2, r2, r3
 800a468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <__sflush_r+0x4a>
 800a46e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a470:	1ad2      	subs	r2, r2, r3
 800a472:	2300      	movs	r3, #0
 800a474:	0028      	movs	r0, r5
 800a476:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a478:	6a21      	ldr	r1, [r4, #32]
 800a47a:	47b8      	blx	r7
 800a47c:	89a2      	ldrh	r2, [r4, #12]
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d106      	bne.n	800a490 <__sflush_r+0x68>
 800a482:	6829      	ldr	r1, [r5, #0]
 800a484:	291d      	cmp	r1, #29
 800a486:	d846      	bhi.n	800a516 <__sflush_r+0xee>
 800a488:	4b29      	ldr	r3, [pc, #164]	@ (800a530 <__sflush_r+0x108>)
 800a48a:	40cb      	lsrs	r3, r1
 800a48c:	07db      	lsls	r3, r3, #31
 800a48e:	d542      	bpl.n	800a516 <__sflush_r+0xee>
 800a490:	2300      	movs	r3, #0
 800a492:	6063      	str	r3, [r4, #4]
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	04d2      	lsls	r2, r2, #19
 800a49a:	d505      	bpl.n	800a4a8 <__sflush_r+0x80>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <__sflush_r+0x7e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d100      	bne.n	800a4a8 <__sflush_r+0x80>
 800a4a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4aa:	602e      	str	r6, [r5, #0]
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d017      	beq.n	800a4e0 <__sflush_r+0xb8>
 800a4b0:	0023      	movs	r3, r4
 800a4b2:	3344      	adds	r3, #68	@ 0x44
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	d002      	beq.n	800a4be <__sflush_r+0x96>
 800a4b8:	0028      	movs	r0, r5
 800a4ba:	f7ff fb13 	bl	8009ae4 <_free_r>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4c2:	e00d      	b.n	800a4e0 <__sflush_r+0xb8>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	0028      	movs	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	0002      	movs	r2, r0
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d1c6      	bne.n	800a45e <__sflush_r+0x36>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0c3      	beq.n	800a45e <__sflush_r+0x36>
 800a4d6:	2b1d      	cmp	r3, #29
 800a4d8:	d001      	beq.n	800a4de <__sflush_r+0xb6>
 800a4da:	2b16      	cmp	r3, #22
 800a4dc:	d11a      	bne.n	800a514 <__sflush_r+0xec>
 800a4de:	602e      	str	r6, [r5, #0]
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e01e      	b.n	800a522 <__sflush_r+0xfa>
 800a4e4:	690e      	ldr	r6, [r1, #16]
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d0fa      	beq.n	800a4e0 <__sflush_r+0xb8>
 800a4ea:	680f      	ldr	r7, [r1, #0]
 800a4ec:	600e      	str	r6, [r1, #0]
 800a4ee:	1bba      	subs	r2, r7, r6
 800a4f0:	9201      	str	r2, [sp, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	079b      	lsls	r3, r3, #30
 800a4f6:	d100      	bne.n	800a4fa <__sflush_r+0xd2>
 800a4f8:	694a      	ldr	r2, [r1, #20]
 800a4fa:	60a2      	str	r2, [r4, #8]
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	ddee      	ble.n	800a4e0 <__sflush_r+0xb8>
 800a502:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a504:	0032      	movs	r2, r6
 800a506:	001f      	movs	r7, r3
 800a508:	0028      	movs	r0, r5
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	6a21      	ldr	r1, [r4, #32]
 800a50e:	47b8      	blx	r7
 800a510:	2800      	cmp	r0, #0
 800a512:	dc07      	bgt.n	800a524 <__sflush_r+0xfc>
 800a514:	89a2      	ldrh	r2, [r4, #12]
 800a516:	2340      	movs	r3, #64	@ 0x40
 800a518:	2001      	movs	r0, #1
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b21b      	sxth	r3, r3
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	4240      	negs	r0, r0
 800a522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	1836      	adds	r6, r6, r0
 800a528:	1a1b      	subs	r3, r3, r0
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	e7e6      	b.n	800a4fc <__sflush_r+0xd4>
 800a52e:	46c0      	nop			@ (mov r8, r8)
 800a530:	20400001 	.word	0x20400001

0800a534 <_fflush_r>:
 800a534:	690b      	ldr	r3, [r1, #16]
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	0005      	movs	r5, r0
 800a53a:	000c      	movs	r4, r1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <_fflush_r+0x12>
 800a540:	2500      	movs	r5, #0
 800a542:	0028      	movs	r0, r5
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	2800      	cmp	r0, #0
 800a548:	d004      	beq.n	800a554 <_fflush_r+0x20>
 800a54a:	6a03      	ldr	r3, [r0, #32]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <_fflush_r+0x20>
 800a550:	f7fe fb2a 	bl	8008ba8 <__sinit>
 800a554:	220c      	movs	r2, #12
 800a556:	5ea3      	ldrsh	r3, [r4, r2]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0f1      	beq.n	800a540 <_fflush_r+0xc>
 800a55c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a55e:	07d2      	lsls	r2, r2, #31
 800a560:	d404      	bmi.n	800a56c <_fflush_r+0x38>
 800a562:	059b      	lsls	r3, r3, #22
 800a564:	d402      	bmi.n	800a56c <_fflush_r+0x38>
 800a566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a568:	f7fe fc39 	bl	8008dde <__retarget_lock_acquire_recursive>
 800a56c:	0028      	movs	r0, r5
 800a56e:	0021      	movs	r1, r4
 800a570:	f7ff ff5a 	bl	800a428 <__sflush_r>
 800a574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a576:	0005      	movs	r5, r0
 800a578:	07db      	lsls	r3, r3, #31
 800a57a:	d4e2      	bmi.n	800a542 <_fflush_r+0xe>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	059b      	lsls	r3, r3, #22
 800a580:	d4df      	bmi.n	800a542 <_fflush_r+0xe>
 800a582:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a584:	f7fe fc2c 	bl	8008de0 <__retarget_lock_release_recursive>
 800a588:	e7db      	b.n	800a542 <_fflush_r+0xe>
	...

0800a58c <_sbrk_r>:
 800a58c:	2300      	movs	r3, #0
 800a58e:	b570      	push	{r4, r5, r6, lr}
 800a590:	4d06      	ldr	r5, [pc, #24]	@ (800a5ac <_sbrk_r+0x20>)
 800a592:	0004      	movs	r4, r0
 800a594:	0008      	movs	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f9 fd38 	bl	800400c <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d103      	bne.n	800a5a8 <_sbrk_r+0x1c>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d000      	beq.n	800a5a8 <_sbrk_r+0x1c>
 800a5a6:	6023      	str	r3, [r4, #0]
 800a5a8:	bd70      	pop	{r4, r5, r6, pc}
 800a5aa:	46c0      	nop			@ (mov r8, r8)
 800a5ac:	200006cc 	.word	0x200006cc

0800a5b0 <memcpy>:
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d100      	bne.n	800a5ba <memcpy+0xa>
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	5ccc      	ldrb	r4, [r1, r3]
 800a5bc:	54c4      	strb	r4, [r0, r3]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	e7f8      	b.n	800a5b4 <memcpy+0x4>
	...

0800a5c4 <__assert_func>:
 800a5c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a5c6:	0014      	movs	r4, r2
 800a5c8:	001a      	movs	r2, r3
 800a5ca:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <__assert_func+0x2c>)
 800a5cc:	0005      	movs	r5, r0
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	000e      	movs	r6, r1
 800a5d2:	68d8      	ldr	r0, [r3, #12]
 800a5d4:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <__assert_func+0x30>)
 800a5d6:	2c00      	cmp	r4, #0
 800a5d8:	d101      	bne.n	800a5de <__assert_func+0x1a>
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <__assert_func+0x34>)
 800a5dc:	001c      	movs	r4, r3
 800a5de:	4907      	ldr	r1, [pc, #28]	@ (800a5fc <__assert_func+0x38>)
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	9402      	str	r4, [sp, #8]
 800a5e4:	002b      	movs	r3, r5
 800a5e6:	9600      	str	r6, [sp, #0]
 800a5e8:	f000 f856 	bl	800a698 <fiprintf>
 800a5ec:	f000 f864 	bl	800a6b8 <abort>
 800a5f0:	20000024 	.word	0x20000024
 800a5f4:	0800ae54 	.word	0x0800ae54
 800a5f8:	0800ae8f 	.word	0x0800ae8f
 800a5fc:	0800ae61 	.word	0x0800ae61

0800a600 <_calloc_r>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	0c0b      	lsrs	r3, r1, #16
 800a604:	0c15      	lsrs	r5, r2, #16
 800a606:	2b00      	cmp	r3, #0
 800a608:	d11e      	bne.n	800a648 <_calloc_r+0x48>
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	d10c      	bne.n	800a628 <_calloc_r+0x28>
 800a60e:	b289      	uxth	r1, r1
 800a610:	b294      	uxth	r4, r2
 800a612:	434c      	muls	r4, r1
 800a614:	0021      	movs	r1, r4
 800a616:	f7ff fadb 	bl	8009bd0 <_malloc_r>
 800a61a:	1e05      	subs	r5, r0, #0
 800a61c:	d01b      	beq.n	800a656 <_calloc_r+0x56>
 800a61e:	0022      	movs	r2, r4
 800a620:	2100      	movs	r1, #0
 800a622:	f7fe fb41 	bl	8008ca8 <memset>
 800a626:	e016      	b.n	800a656 <_calloc_r+0x56>
 800a628:	1c2b      	adds	r3, r5, #0
 800a62a:	1c0c      	adds	r4, r1, #0
 800a62c:	b289      	uxth	r1, r1
 800a62e:	b292      	uxth	r2, r2
 800a630:	434a      	muls	r2, r1
 800a632:	b29b      	uxth	r3, r3
 800a634:	b2a1      	uxth	r1, r4
 800a636:	4359      	muls	r1, r3
 800a638:	0c14      	lsrs	r4, r2, #16
 800a63a:	190c      	adds	r4, r1, r4
 800a63c:	0c23      	lsrs	r3, r4, #16
 800a63e:	d107      	bne.n	800a650 <_calloc_r+0x50>
 800a640:	0424      	lsls	r4, r4, #16
 800a642:	b292      	uxth	r2, r2
 800a644:	4314      	orrs	r4, r2
 800a646:	e7e5      	b.n	800a614 <_calloc_r+0x14>
 800a648:	2d00      	cmp	r5, #0
 800a64a:	d101      	bne.n	800a650 <_calloc_r+0x50>
 800a64c:	1c14      	adds	r4, r2, #0
 800a64e:	e7ed      	b.n	800a62c <_calloc_r+0x2c>
 800a650:	230c      	movs	r3, #12
 800a652:	2500      	movs	r5, #0
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	0028      	movs	r0, r5
 800a658:	bd70      	pop	{r4, r5, r6, pc}

0800a65a <__ascii_mbtowc>:
 800a65a:	b082      	sub	sp, #8
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d100      	bne.n	800a662 <__ascii_mbtowc+0x8>
 800a660:	a901      	add	r1, sp, #4
 800a662:	1e10      	subs	r0, r2, #0
 800a664:	d006      	beq.n	800a674 <__ascii_mbtowc+0x1a>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d006      	beq.n	800a678 <__ascii_mbtowc+0x1e>
 800a66a:	7813      	ldrb	r3, [r2, #0]
 800a66c:	600b      	str	r3, [r1, #0]
 800a66e:	7810      	ldrb	r0, [r2, #0]
 800a670:	1e43      	subs	r3, r0, #1
 800a672:	4198      	sbcs	r0, r3
 800a674:	b002      	add	sp, #8
 800a676:	4770      	bx	lr
 800a678:	2002      	movs	r0, #2
 800a67a:	4240      	negs	r0, r0
 800a67c:	e7fa      	b.n	800a674 <__ascii_mbtowc+0x1a>

0800a67e <__ascii_wctomb>:
 800a67e:	0003      	movs	r3, r0
 800a680:	1e08      	subs	r0, r1, #0
 800a682:	d005      	beq.n	800a690 <__ascii_wctomb+0x12>
 800a684:	2aff      	cmp	r2, #255	@ 0xff
 800a686:	d904      	bls.n	800a692 <__ascii_wctomb+0x14>
 800a688:	228a      	movs	r2, #138	@ 0x8a
 800a68a:	2001      	movs	r0, #1
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	4240      	negs	r0, r0
 800a690:	4770      	bx	lr
 800a692:	2001      	movs	r0, #1
 800a694:	700a      	strb	r2, [r1, #0]
 800a696:	e7fb      	b.n	800a690 <__ascii_wctomb+0x12>

0800a698 <fiprintf>:
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	b517      	push	{r0, r1, r2, r4, lr}
 800a69c:	4c05      	ldr	r4, [pc, #20]	@ (800a6b4 <fiprintf+0x1c>)
 800a69e:	ab05      	add	r3, sp, #20
 800a6a0:	cb04      	ldmia	r3!, {r2}
 800a6a2:	0001      	movs	r1, r0
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f000 f834 	bl	800a714 <_vfiprintf_r>
 800a6ac:	bc1e      	pop	{r1, r2, r3, r4}
 800a6ae:	bc08      	pop	{r3}
 800a6b0:	b003      	add	sp, #12
 800a6b2:	4718      	bx	r3
 800a6b4:	20000024 	.word	0x20000024

0800a6b8 <abort>:
 800a6b8:	2006      	movs	r0, #6
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	f000 fa10 	bl	800aae0 <raise>
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7f9 fc31 	bl	8003f28 <_exit>

0800a6c6 <__sfputc_r>:
 800a6c6:	6893      	ldr	r3, [r2, #8]
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	6093      	str	r3, [r2, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da04      	bge.n	800a6dc <__sfputc_r+0x16>
 800a6d2:	6994      	ldr	r4, [r2, #24]
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	db07      	blt.n	800a6e8 <__sfputc_r+0x22>
 800a6d8:	290a      	cmp	r1, #10
 800a6da:	d005      	beq.n	800a6e8 <__sfputc_r+0x22>
 800a6dc:	6813      	ldr	r3, [r2, #0]
 800a6de:	1c58      	adds	r0, r3, #1
 800a6e0:	6010      	str	r0, [r2, #0]
 800a6e2:	7019      	strb	r1, [r3, #0]
 800a6e4:	0008      	movs	r0, r1
 800a6e6:	bd10      	pop	{r4, pc}
 800a6e8:	f000 f930 	bl	800a94c <__swbuf_r>
 800a6ec:	0001      	movs	r1, r0
 800a6ee:	e7f9      	b.n	800a6e4 <__sfputc_r+0x1e>

0800a6f0 <__sfputs_r>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	0006      	movs	r6, r0
 800a6f4:	000f      	movs	r7, r1
 800a6f6:	0014      	movs	r4, r2
 800a6f8:	18d5      	adds	r5, r2, r3
 800a6fa:	42ac      	cmp	r4, r5
 800a6fc:	d101      	bne.n	800a702 <__sfputs_r+0x12>
 800a6fe:	2000      	movs	r0, #0
 800a700:	e007      	b.n	800a712 <__sfputs_r+0x22>
 800a702:	7821      	ldrb	r1, [r4, #0]
 800a704:	003a      	movs	r2, r7
 800a706:	0030      	movs	r0, r6
 800a708:	f7ff ffdd 	bl	800a6c6 <__sfputc_r>
 800a70c:	3401      	adds	r4, #1
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d1f3      	bne.n	800a6fa <__sfputs_r+0xa>
 800a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a714 <_vfiprintf_r>:
 800a714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a716:	b0a1      	sub	sp, #132	@ 0x84
 800a718:	000f      	movs	r7, r1
 800a71a:	0015      	movs	r5, r2
 800a71c:	001e      	movs	r6, r3
 800a71e:	9003      	str	r0, [sp, #12]
 800a720:	2800      	cmp	r0, #0
 800a722:	d004      	beq.n	800a72e <_vfiprintf_r+0x1a>
 800a724:	6a03      	ldr	r3, [r0, #32]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <_vfiprintf_r+0x1a>
 800a72a:	f7fe fa3d 	bl	8008ba8 <__sinit>
 800a72e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a730:	07db      	lsls	r3, r3, #31
 800a732:	d405      	bmi.n	800a740 <_vfiprintf_r+0x2c>
 800a734:	89bb      	ldrh	r3, [r7, #12]
 800a736:	059b      	lsls	r3, r3, #22
 800a738:	d402      	bmi.n	800a740 <_vfiprintf_r+0x2c>
 800a73a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a73c:	f7fe fb4f 	bl	8008dde <__retarget_lock_acquire_recursive>
 800a740:	89bb      	ldrh	r3, [r7, #12]
 800a742:	071b      	lsls	r3, r3, #28
 800a744:	d502      	bpl.n	800a74c <_vfiprintf_r+0x38>
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d113      	bne.n	800a774 <_vfiprintf_r+0x60>
 800a74c:	0039      	movs	r1, r7
 800a74e:	9803      	ldr	r0, [sp, #12]
 800a750:	f000 f93e 	bl	800a9d0 <__swsetup_r>
 800a754:	2800      	cmp	r0, #0
 800a756:	d00d      	beq.n	800a774 <_vfiprintf_r+0x60>
 800a758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a75a:	07db      	lsls	r3, r3, #31
 800a75c:	d503      	bpl.n	800a766 <_vfiprintf_r+0x52>
 800a75e:	2001      	movs	r0, #1
 800a760:	4240      	negs	r0, r0
 800a762:	b021      	add	sp, #132	@ 0x84
 800a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a766:	89bb      	ldrh	r3, [r7, #12]
 800a768:	059b      	lsls	r3, r3, #22
 800a76a:	d4f8      	bmi.n	800a75e <_vfiprintf_r+0x4a>
 800a76c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a76e:	f7fe fb37 	bl	8008de0 <__retarget_lock_release_recursive>
 800a772:	e7f4      	b.n	800a75e <_vfiprintf_r+0x4a>
 800a774:	2300      	movs	r3, #0
 800a776:	ac08      	add	r4, sp, #32
 800a778:	6163      	str	r3, [r4, #20]
 800a77a:	3320      	adds	r3, #32
 800a77c:	7663      	strb	r3, [r4, #25]
 800a77e:	3310      	adds	r3, #16
 800a780:	76a3      	strb	r3, [r4, #26]
 800a782:	9607      	str	r6, [sp, #28]
 800a784:	002e      	movs	r6, r5
 800a786:	7833      	ldrb	r3, [r6, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <_vfiprintf_r+0x7c>
 800a78c:	2b25      	cmp	r3, #37	@ 0x25
 800a78e:	d148      	bne.n	800a822 <_vfiprintf_r+0x10e>
 800a790:	1b73      	subs	r3, r6, r5
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	42ae      	cmp	r6, r5
 800a796:	d00b      	beq.n	800a7b0 <_vfiprintf_r+0x9c>
 800a798:	002a      	movs	r2, r5
 800a79a:	0039      	movs	r1, r7
 800a79c:	9803      	ldr	r0, [sp, #12]
 800a79e:	f7ff ffa7 	bl	800a6f0 <__sfputs_r>
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d100      	bne.n	800a7a8 <_vfiprintf_r+0x94>
 800a7a6:	e0ae      	b.n	800a906 <_vfiprintf_r+0x1f2>
 800a7a8:	6963      	ldr	r3, [r4, #20]
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	189b      	adds	r3, r3, r2
 800a7ae:	6163      	str	r3, [r4, #20]
 800a7b0:	7833      	ldrb	r3, [r6, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d100      	bne.n	800a7b8 <_vfiprintf_r+0xa4>
 800a7b6:	e0a6      	b.n	800a906 <_vfiprintf_r+0x1f2>
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4252      	negs	r2, r2
 800a7be:	6062      	str	r2, [r4, #4]
 800a7c0:	a904      	add	r1, sp, #16
 800a7c2:	3254      	adds	r2, #84	@ 0x54
 800a7c4:	1852      	adds	r2, r2, r1
 800a7c6:	1c75      	adds	r5, r6, #1
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	60e3      	str	r3, [r4, #12]
 800a7cc:	60a3      	str	r3, [r4, #8]
 800a7ce:	7013      	strb	r3, [r2, #0]
 800a7d0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a7d2:	4b59      	ldr	r3, [pc, #356]	@ (800a938 <_vfiprintf_r+0x224>)
 800a7d4:	2205      	movs	r2, #5
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	7829      	ldrb	r1, [r5, #0]
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	f7fe fb01 	bl	8008de2 <memchr>
 800a7e0:	1c6e      	adds	r6, r5, #1
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d11f      	bne.n	800a826 <_vfiprintf_r+0x112>
 800a7e6:	6822      	ldr	r2, [r4, #0]
 800a7e8:	06d3      	lsls	r3, r2, #27
 800a7ea:	d504      	bpl.n	800a7f6 <_vfiprintf_r+0xe2>
 800a7ec:	2353      	movs	r3, #83	@ 0x53
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	185b      	adds	r3, r3, r1
 800a7f2:	2120      	movs	r1, #32
 800a7f4:	7019      	strb	r1, [r3, #0]
 800a7f6:	0713      	lsls	r3, r2, #28
 800a7f8:	d504      	bpl.n	800a804 <_vfiprintf_r+0xf0>
 800a7fa:	2353      	movs	r3, #83	@ 0x53
 800a7fc:	a904      	add	r1, sp, #16
 800a7fe:	185b      	adds	r3, r3, r1
 800a800:	212b      	movs	r1, #43	@ 0x2b
 800a802:	7019      	strb	r1, [r3, #0]
 800a804:	782b      	ldrb	r3, [r5, #0]
 800a806:	2b2a      	cmp	r3, #42	@ 0x2a
 800a808:	d016      	beq.n	800a838 <_vfiprintf_r+0x124>
 800a80a:	002e      	movs	r6, r5
 800a80c:	2100      	movs	r1, #0
 800a80e:	200a      	movs	r0, #10
 800a810:	68e3      	ldr	r3, [r4, #12]
 800a812:	7832      	ldrb	r2, [r6, #0]
 800a814:	1c75      	adds	r5, r6, #1
 800a816:	3a30      	subs	r2, #48	@ 0x30
 800a818:	2a09      	cmp	r2, #9
 800a81a:	d950      	bls.n	800a8be <_vfiprintf_r+0x1aa>
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d111      	bne.n	800a844 <_vfiprintf_r+0x130>
 800a820:	e017      	b.n	800a852 <_vfiprintf_r+0x13e>
 800a822:	3601      	adds	r6, #1
 800a824:	e7af      	b.n	800a786 <_vfiprintf_r+0x72>
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	1ac0      	subs	r0, r0, r3
 800a82c:	2301      	movs	r3, #1
 800a82e:	4083      	lsls	r3, r0
 800a830:	4313      	orrs	r3, r2
 800a832:	0035      	movs	r5, r6
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	e7cc      	b.n	800a7d2 <_vfiprintf_r+0xbe>
 800a838:	9b07      	ldr	r3, [sp, #28]
 800a83a:	1d19      	adds	r1, r3, #4
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	9107      	str	r1, [sp, #28]
 800a840:	2b00      	cmp	r3, #0
 800a842:	db01      	blt.n	800a848 <_vfiprintf_r+0x134>
 800a844:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a846:	e004      	b.n	800a852 <_vfiprintf_r+0x13e>
 800a848:	425b      	negs	r3, r3
 800a84a:	60e3      	str	r3, [r4, #12]
 800a84c:	2302      	movs	r3, #2
 800a84e:	4313      	orrs	r3, r2
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	7833      	ldrb	r3, [r6, #0]
 800a854:	2b2e      	cmp	r3, #46	@ 0x2e
 800a856:	d10c      	bne.n	800a872 <_vfiprintf_r+0x15e>
 800a858:	7873      	ldrb	r3, [r6, #1]
 800a85a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a85c:	d134      	bne.n	800a8c8 <_vfiprintf_r+0x1b4>
 800a85e:	9b07      	ldr	r3, [sp, #28]
 800a860:	3602      	adds	r6, #2
 800a862:	1d1a      	adds	r2, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9207      	str	r2, [sp, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da01      	bge.n	800a870 <_vfiprintf_r+0x15c>
 800a86c:	2301      	movs	r3, #1
 800a86e:	425b      	negs	r3, r3
 800a870:	9309      	str	r3, [sp, #36]	@ 0x24
 800a872:	4d32      	ldr	r5, [pc, #200]	@ (800a93c <_vfiprintf_r+0x228>)
 800a874:	2203      	movs	r2, #3
 800a876:	0028      	movs	r0, r5
 800a878:	7831      	ldrb	r1, [r6, #0]
 800a87a:	f7fe fab2 	bl	8008de2 <memchr>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d006      	beq.n	800a890 <_vfiprintf_r+0x17c>
 800a882:	2340      	movs	r3, #64	@ 0x40
 800a884:	1b40      	subs	r0, r0, r5
 800a886:	4083      	lsls	r3, r0
 800a888:	6822      	ldr	r2, [r4, #0]
 800a88a:	3601      	adds	r6, #1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	7831      	ldrb	r1, [r6, #0]
 800a892:	2206      	movs	r2, #6
 800a894:	482a      	ldr	r0, [pc, #168]	@ (800a940 <_vfiprintf_r+0x22c>)
 800a896:	1c75      	adds	r5, r6, #1
 800a898:	7621      	strb	r1, [r4, #24]
 800a89a:	f7fe faa2 	bl	8008de2 <memchr>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d040      	beq.n	800a924 <_vfiprintf_r+0x210>
 800a8a2:	4b28      	ldr	r3, [pc, #160]	@ (800a944 <_vfiprintf_r+0x230>)
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d122      	bne.n	800a8ee <_vfiprintf_r+0x1da>
 800a8a8:	2207      	movs	r2, #7
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	3307      	adds	r3, #7
 800a8ae:	4393      	bics	r3, r2
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	9307      	str	r3, [sp, #28]
 800a8b4:	6963      	ldr	r3, [r4, #20]
 800a8b6:	9a04      	ldr	r2, [sp, #16]
 800a8b8:	189b      	adds	r3, r3, r2
 800a8ba:	6163      	str	r3, [r4, #20]
 800a8bc:	e762      	b.n	800a784 <_vfiprintf_r+0x70>
 800a8be:	4343      	muls	r3, r0
 800a8c0:	002e      	movs	r6, r5
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	189b      	adds	r3, r3, r2
 800a8c6:	e7a4      	b.n	800a812 <_vfiprintf_r+0xfe>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	200a      	movs	r0, #10
 800a8cc:	0019      	movs	r1, r3
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	6063      	str	r3, [r4, #4]
 800a8d2:	7832      	ldrb	r2, [r6, #0]
 800a8d4:	1c75      	adds	r5, r6, #1
 800a8d6:	3a30      	subs	r2, #48	@ 0x30
 800a8d8:	2a09      	cmp	r2, #9
 800a8da:	d903      	bls.n	800a8e4 <_vfiprintf_r+0x1d0>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0c8      	beq.n	800a872 <_vfiprintf_r+0x15e>
 800a8e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8e2:	e7c6      	b.n	800a872 <_vfiprintf_r+0x15e>
 800a8e4:	4341      	muls	r1, r0
 800a8e6:	002e      	movs	r6, r5
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	1889      	adds	r1, r1, r2
 800a8ec:	e7f1      	b.n	800a8d2 <_vfiprintf_r+0x1be>
 800a8ee:	aa07      	add	r2, sp, #28
 800a8f0:	9200      	str	r2, [sp, #0]
 800a8f2:	0021      	movs	r1, r4
 800a8f4:	003a      	movs	r2, r7
 800a8f6:	4b14      	ldr	r3, [pc, #80]	@ (800a948 <_vfiprintf_r+0x234>)
 800a8f8:	9803      	ldr	r0, [sp, #12]
 800a8fa:	f7fd fd0b 	bl	8008314 <_printf_float>
 800a8fe:	9004      	str	r0, [sp, #16]
 800a900:	9b04      	ldr	r3, [sp, #16]
 800a902:	3301      	adds	r3, #1
 800a904:	d1d6      	bne.n	800a8b4 <_vfiprintf_r+0x1a0>
 800a906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a908:	07db      	lsls	r3, r3, #31
 800a90a:	d405      	bmi.n	800a918 <_vfiprintf_r+0x204>
 800a90c:	89bb      	ldrh	r3, [r7, #12]
 800a90e:	059b      	lsls	r3, r3, #22
 800a910:	d402      	bmi.n	800a918 <_vfiprintf_r+0x204>
 800a912:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a914:	f7fe fa64 	bl	8008de0 <__retarget_lock_release_recursive>
 800a918:	89bb      	ldrh	r3, [r7, #12]
 800a91a:	065b      	lsls	r3, r3, #25
 800a91c:	d500      	bpl.n	800a920 <_vfiprintf_r+0x20c>
 800a91e:	e71e      	b.n	800a75e <_vfiprintf_r+0x4a>
 800a920:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a922:	e71e      	b.n	800a762 <_vfiprintf_r+0x4e>
 800a924:	aa07      	add	r2, sp, #28
 800a926:	9200      	str	r2, [sp, #0]
 800a928:	0021      	movs	r1, r4
 800a92a:	003a      	movs	r2, r7
 800a92c:	4b06      	ldr	r3, [pc, #24]	@ (800a948 <_vfiprintf_r+0x234>)
 800a92e:	9803      	ldr	r0, [sp, #12]
 800a930:	f7fd ff9e 	bl	8008870 <_printf_i>
 800a934:	e7e3      	b.n	800a8fe <_vfiprintf_r+0x1ea>
 800a936:	46c0      	nop			@ (mov r8, r8)
 800a938:	0800ae90 	.word	0x0800ae90
 800a93c:	0800ae96 	.word	0x0800ae96
 800a940:	0800ae9a 	.word	0x0800ae9a
 800a944:	08008315 	.word	0x08008315
 800a948:	0800a6f1 	.word	0x0800a6f1

0800a94c <__swbuf_r>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	0006      	movs	r6, r0
 800a950:	000d      	movs	r5, r1
 800a952:	0014      	movs	r4, r2
 800a954:	2800      	cmp	r0, #0
 800a956:	d004      	beq.n	800a962 <__swbuf_r+0x16>
 800a958:	6a03      	ldr	r3, [r0, #32]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <__swbuf_r+0x16>
 800a95e:	f7fe f923 	bl	8008ba8 <__sinit>
 800a962:	69a3      	ldr	r3, [r4, #24]
 800a964:	60a3      	str	r3, [r4, #8]
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	071b      	lsls	r3, r3, #28
 800a96a:	d502      	bpl.n	800a972 <__swbuf_r+0x26>
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <__swbuf_r+0x3a>
 800a972:	0021      	movs	r1, r4
 800a974:	0030      	movs	r0, r6
 800a976:	f000 f82b 	bl	800a9d0 <__swsetup_r>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d003      	beq.n	800a986 <__swbuf_r+0x3a>
 800a97e:	2501      	movs	r5, #1
 800a980:	426d      	negs	r5, r5
 800a982:	0028      	movs	r0, r5
 800a984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	6820      	ldr	r0, [r4, #0]
 800a98a:	b2ef      	uxtb	r7, r5
 800a98c:	1ac0      	subs	r0, r0, r3
 800a98e:	6963      	ldr	r3, [r4, #20]
 800a990:	b2ed      	uxtb	r5, r5
 800a992:	4283      	cmp	r3, r0
 800a994:	dc05      	bgt.n	800a9a2 <__swbuf_r+0x56>
 800a996:	0021      	movs	r1, r4
 800a998:	0030      	movs	r0, r6
 800a99a:	f7ff fdcb 	bl	800a534 <_fflush_r>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d1ed      	bne.n	800a97e <__swbuf_r+0x32>
 800a9a2:	68a3      	ldr	r3, [r4, #8]
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	701f      	strb	r7, [r3, #0]
 800a9b2:	6963      	ldr	r3, [r4, #20]
 800a9b4:	4283      	cmp	r3, r0
 800a9b6:	d004      	beq.n	800a9c2 <__swbuf_r+0x76>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	07db      	lsls	r3, r3, #31
 800a9bc:	d5e1      	bpl.n	800a982 <__swbuf_r+0x36>
 800a9be:	2d0a      	cmp	r5, #10
 800a9c0:	d1df      	bne.n	800a982 <__swbuf_r+0x36>
 800a9c2:	0021      	movs	r1, r4
 800a9c4:	0030      	movs	r0, r6
 800a9c6:	f7ff fdb5 	bl	800a534 <_fflush_r>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d0d9      	beq.n	800a982 <__swbuf_r+0x36>
 800a9ce:	e7d6      	b.n	800a97e <__swbuf_r+0x32>

0800a9d0 <__swsetup_r>:
 800a9d0:	4b2d      	ldr	r3, [pc, #180]	@ (800aa88 <__swsetup_r+0xb8>)
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	0005      	movs	r5, r0
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	000c      	movs	r4, r1
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d004      	beq.n	800a9e8 <__swsetup_r+0x18>
 800a9de:	6a03      	ldr	r3, [r0, #32]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <__swsetup_r+0x18>
 800a9e4:	f7fe f8e0 	bl	8008ba8 <__sinit>
 800a9e8:	220c      	movs	r2, #12
 800a9ea:	5ea3      	ldrsh	r3, [r4, r2]
 800a9ec:	071a      	lsls	r2, r3, #28
 800a9ee:	d423      	bmi.n	800aa38 <__swsetup_r+0x68>
 800a9f0:	06da      	lsls	r2, r3, #27
 800a9f2:	d407      	bmi.n	800aa04 <__swsetup_r+0x34>
 800a9f4:	2209      	movs	r2, #9
 800a9f6:	602a      	str	r2, [r5, #0]
 800a9f8:	2240      	movs	r2, #64	@ 0x40
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	4240      	negs	r0, r0
 800aa02:	e03a      	b.n	800aa7a <__swsetup_r+0xaa>
 800aa04:	075b      	lsls	r3, r3, #29
 800aa06:	d513      	bpl.n	800aa30 <__swsetup_r+0x60>
 800aa08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	d008      	beq.n	800aa20 <__swsetup_r+0x50>
 800aa0e:	0023      	movs	r3, r4
 800aa10:	3344      	adds	r3, #68	@ 0x44
 800aa12:	4299      	cmp	r1, r3
 800aa14:	d002      	beq.n	800aa1c <__swsetup_r+0x4c>
 800aa16:	0028      	movs	r0, r5
 800aa18:	f7ff f864 	bl	8009ae4 <_free_r>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa20:	2224      	movs	r2, #36	@ 0x24
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	4393      	bics	r3, r2
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6063      	str	r3, [r4, #4]
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	2308      	movs	r3, #8
 800aa32:	89a2      	ldrh	r2, [r4, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <__swsetup_r+0x86>
 800aa3e:	21a0      	movs	r1, #160	@ 0xa0
 800aa40:	2280      	movs	r2, #128	@ 0x80
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	0089      	lsls	r1, r1, #2
 800aa46:	0092      	lsls	r2, r2, #2
 800aa48:	400b      	ands	r3, r1
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d003      	beq.n	800aa56 <__swsetup_r+0x86>
 800aa4e:	0021      	movs	r1, r4
 800aa50:	0028      	movs	r0, r5
 800aa52:	f000 f88f 	bl	800ab74 <__smakebuf_r>
 800aa56:	220c      	movs	r2, #12
 800aa58:	5ea3      	ldrsh	r3, [r4, r2]
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	001a      	movs	r2, r3
 800aa5e:	400a      	ands	r2, r1
 800aa60:	420b      	tst	r3, r1
 800aa62:	d00b      	beq.n	800aa7c <__swsetup_r+0xac>
 800aa64:	2200      	movs	r2, #0
 800aa66:	60a2      	str	r2, [r4, #8]
 800aa68:	6962      	ldr	r2, [r4, #20]
 800aa6a:	4252      	negs	r2, r2
 800aa6c:	61a2      	str	r2, [r4, #24]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	4282      	cmp	r2, r0
 800aa74:	d101      	bne.n	800aa7a <__swsetup_r+0xaa>
 800aa76:	061a      	lsls	r2, r3, #24
 800aa78:	d4be      	bmi.n	800a9f8 <__swsetup_r+0x28>
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	0799      	lsls	r1, r3, #30
 800aa7e:	d400      	bmi.n	800aa82 <__swsetup_r+0xb2>
 800aa80:	6962      	ldr	r2, [r4, #20]
 800aa82:	60a2      	str	r2, [r4, #8]
 800aa84:	e7f3      	b.n	800aa6e <__swsetup_r+0x9e>
 800aa86:	46c0      	nop			@ (mov r8, r8)
 800aa88:	20000024 	.word	0x20000024

0800aa8c <_raise_r>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	0004      	movs	r4, r0
 800aa90:	000d      	movs	r5, r1
 800aa92:	291f      	cmp	r1, #31
 800aa94:	d904      	bls.n	800aaa0 <_raise_r+0x14>
 800aa96:	2316      	movs	r3, #22
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	4240      	negs	r0, r0
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <_raise_r+0x24>
 800aaa6:	008a      	lsls	r2, r1, #2
 800aaa8:	189b      	adds	r3, r3, r2
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d108      	bne.n	800aac2 <_raise_r+0x36>
 800aab0:	0020      	movs	r0, r4
 800aab2:	f000 f831 	bl	800ab18 <_getpid_r>
 800aab6:	002a      	movs	r2, r5
 800aab8:	0001      	movs	r1, r0
 800aaba:	0020      	movs	r0, r4
 800aabc:	f000 f81a 	bl	800aaf4 <_kill_r>
 800aac0:	e7ed      	b.n	800aa9e <_raise_r+0x12>
 800aac2:	2a01      	cmp	r2, #1
 800aac4:	d009      	beq.n	800aada <_raise_r+0x4e>
 800aac6:	1c51      	adds	r1, r2, #1
 800aac8:	d103      	bne.n	800aad2 <_raise_r+0x46>
 800aaca:	2316      	movs	r3, #22
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	2001      	movs	r0, #1
 800aad0:	e7e5      	b.n	800aa9e <_raise_r+0x12>
 800aad2:	2100      	movs	r1, #0
 800aad4:	0028      	movs	r0, r5
 800aad6:	6019      	str	r1, [r3, #0]
 800aad8:	4790      	blx	r2
 800aada:	2000      	movs	r0, #0
 800aadc:	e7df      	b.n	800aa9e <_raise_r+0x12>
	...

0800aae0 <raise>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4b03      	ldr	r3, [pc, #12]	@ (800aaf0 <raise+0x10>)
 800aae4:	0001      	movs	r1, r0
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	f7ff ffd0 	bl	800aa8c <_raise_r>
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	46c0      	nop			@ (mov r8, r8)
 800aaf0:	20000024 	.word	0x20000024

0800aaf4 <_kill_r>:
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	b570      	push	{r4, r5, r6, lr}
 800aaf8:	4d06      	ldr	r5, [pc, #24]	@ (800ab14 <_kill_r+0x20>)
 800aafa:	0004      	movs	r4, r0
 800aafc:	0008      	movs	r0, r1
 800aafe:	0011      	movs	r1, r2
 800ab00:	602b      	str	r3, [r5, #0]
 800ab02:	f7f9 fa01 	bl	8003f08 <_kill>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d103      	bne.n	800ab12 <_kill_r+0x1e>
 800ab0a:	682b      	ldr	r3, [r5, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d000      	beq.n	800ab12 <_kill_r+0x1e>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	200006cc 	.word	0x200006cc

0800ab18 <_getpid_r>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	f7f9 f9ef 	bl	8003efc <_getpid>
 800ab1e:	bd10      	pop	{r4, pc}

0800ab20 <__swhatbuf_r>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	000e      	movs	r6, r1
 800ab24:	001d      	movs	r5, r3
 800ab26:	230e      	movs	r3, #14
 800ab28:	5ec9      	ldrsh	r1, [r1, r3]
 800ab2a:	0014      	movs	r4, r2
 800ab2c:	b096      	sub	sp, #88	@ 0x58
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	da0c      	bge.n	800ab4c <__swhatbuf_r+0x2c>
 800ab32:	89b2      	ldrh	r2, [r6, #12]
 800ab34:	2380      	movs	r3, #128	@ 0x80
 800ab36:	0011      	movs	r1, r2
 800ab38:	4019      	ands	r1, r3
 800ab3a:	421a      	tst	r2, r3
 800ab3c:	d114      	bne.n	800ab68 <__swhatbuf_r+0x48>
 800ab3e:	2380      	movs	r3, #128	@ 0x80
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	2000      	movs	r0, #0
 800ab44:	6029      	str	r1, [r5, #0]
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	b016      	add	sp, #88	@ 0x58
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	466a      	mov	r2, sp
 800ab4e:	f000 f853 	bl	800abf8 <_fstat_r>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	dbed      	blt.n	800ab32 <__swhatbuf_r+0x12>
 800ab56:	23f0      	movs	r3, #240	@ 0xf0
 800ab58:	9901      	ldr	r1, [sp, #4]
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	4019      	ands	r1, r3
 800ab5e:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <__swhatbuf_r+0x50>)
 800ab60:	18c9      	adds	r1, r1, r3
 800ab62:	424b      	negs	r3, r1
 800ab64:	4159      	adcs	r1, r3
 800ab66:	e7ea      	b.n	800ab3e <__swhatbuf_r+0x1e>
 800ab68:	2100      	movs	r1, #0
 800ab6a:	2340      	movs	r3, #64	@ 0x40
 800ab6c:	e7e9      	b.n	800ab42 <__swhatbuf_r+0x22>
 800ab6e:	46c0      	nop			@ (mov r8, r8)
 800ab70:	ffffe000 	.word	0xffffe000

0800ab74 <__smakebuf_r>:
 800ab74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab76:	2602      	movs	r6, #2
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	0005      	movs	r5, r0
 800ab7c:	000c      	movs	r4, r1
 800ab7e:	b085      	sub	sp, #20
 800ab80:	4233      	tst	r3, r6
 800ab82:	d007      	beq.n	800ab94 <__smakebuf_r+0x20>
 800ab84:	0023      	movs	r3, r4
 800ab86:	3347      	adds	r3, #71	@ 0x47
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	6163      	str	r3, [r4, #20]
 800ab90:	b005      	add	sp, #20
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab94:	ab03      	add	r3, sp, #12
 800ab96:	aa02      	add	r2, sp, #8
 800ab98:	f7ff ffc2 	bl	800ab20 <__swhatbuf_r>
 800ab9c:	9f02      	ldr	r7, [sp, #8]
 800ab9e:	9001      	str	r0, [sp, #4]
 800aba0:	0039      	movs	r1, r7
 800aba2:	0028      	movs	r0, r5
 800aba4:	f7ff f814 	bl	8009bd0 <_malloc_r>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d108      	bne.n	800abbe <__smakebuf_r+0x4a>
 800abac:	220c      	movs	r2, #12
 800abae:	5ea3      	ldrsh	r3, [r4, r2]
 800abb0:	059a      	lsls	r2, r3, #22
 800abb2:	d4ed      	bmi.n	800ab90 <__smakebuf_r+0x1c>
 800abb4:	2203      	movs	r2, #3
 800abb6:	4393      	bics	r3, r2
 800abb8:	431e      	orrs	r6, r3
 800abba:	81a6      	strh	r6, [r4, #12]
 800abbc:	e7e2      	b.n	800ab84 <__smakebuf_r+0x10>
 800abbe:	2380      	movs	r3, #128	@ 0x80
 800abc0:	89a2      	ldrh	r2, [r4, #12]
 800abc2:	6020      	str	r0, [r4, #0]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	6120      	str	r0, [r4, #16]
 800abcc:	6167      	str	r7, [r4, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00c      	beq.n	800abec <__smakebuf_r+0x78>
 800abd2:	0028      	movs	r0, r5
 800abd4:	230e      	movs	r3, #14
 800abd6:	5ee1      	ldrsh	r1, [r4, r3]
 800abd8:	f000 f820 	bl	800ac1c <_isatty_r>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d005      	beq.n	800abec <__smakebuf_r+0x78>
 800abe0:	2303      	movs	r3, #3
 800abe2:	89a2      	ldrh	r2, [r4, #12]
 800abe4:	439a      	bics	r2, r3
 800abe6:	3b02      	subs	r3, #2
 800abe8:	4313      	orrs	r3, r2
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	9a01      	ldr	r2, [sp, #4]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	e7cc      	b.n	800ab90 <__smakebuf_r+0x1c>
	...

0800abf8 <_fstat_r>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	4d06      	ldr	r5, [pc, #24]	@ (800ac18 <_fstat_r+0x20>)
 800abfe:	0004      	movs	r4, r0
 800ac00:	0008      	movs	r0, r1
 800ac02:	0011      	movs	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f9 f9df 	bl	8003fc8 <_fstat>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d103      	bne.n	800ac16 <_fstat_r+0x1e>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d000      	beq.n	800ac16 <_fstat_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	200006cc 	.word	0x200006cc

0800ac1c <_isatty_r>:
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	b570      	push	{r4, r5, r6, lr}
 800ac20:	4d06      	ldr	r5, [pc, #24]	@ (800ac3c <_isatty_r+0x20>)
 800ac22:	0004      	movs	r4, r0
 800ac24:	0008      	movs	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f9 f9dc 	bl	8003fe4 <_isatty>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d103      	bne.n	800ac38 <_isatty_r+0x1c>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d000      	beq.n	800ac38 <_isatty_r+0x1c>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	200006cc 	.word	0x200006cc

0800ac40 <_init>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	46c0      	nop			@ (mov r8, r8)
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr

0800ac4c <_fini>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	46c0      	nop			@ (mov r8, r8)
 800ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac52:	bc08      	pop	{r3}
 800ac54:	469e      	mov	lr, r3
 800ac56:	4770      	bx	lr
