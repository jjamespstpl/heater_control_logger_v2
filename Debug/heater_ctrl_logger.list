
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db18  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800dbd0  0800dbd0  0000ebd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1f4  0800e1f4  000101e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e1f4  0800e1f4  000101e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e1f4  0800e1f4  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1f4  0800e1f4  0000f1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1f8  0800e1f8  0000f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800e1fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001e4  0800e3e0  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  0800e3e0  000106e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001911c  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331e  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f9  00000000  00000000  0002dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f11  00000000  00000000  0002ef19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c348  00000000  00000000  00048e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11f1  00000000  00000000  00065172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  001063a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0010cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800dbb8 	.word	0x0800dbb8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800dbb8 	.word	0x0800dbb8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fcb9 	bl	8001dac <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fbfd 	bl	8001c44 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fcab 	bl	8001dac <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fca1 	bl	8001dac <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fc27 	bl	8001ccc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fc1d 	bl	8001ccc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fa95 	bl	80009d8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fa1d 	bl	80008f8 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fa87 	bl	80009d8 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fa7d 	bl	80009d8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fa2b 	bl	8000948 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fa21 	bl	8000948 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	024b      	lsls	r3, r1, #9
 8000518:	0a5a      	lsrs	r2, r3, #9
 800051a:	4694      	mov	ip, r2
 800051c:	004a      	lsls	r2, r1, #1
 800051e:	0fc9      	lsrs	r1, r1, #31
 8000520:	46ce      	mov	lr, r9
 8000522:	4647      	mov	r7, r8
 8000524:	4689      	mov	r9, r1
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0246      	lsls	r6, r0, #9
 800052a:	0e2d      	lsrs	r5, r5, #24
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	b580      	push	{r7, lr}
 8000530:	0999      	lsrs	r1, r3, #6
 8000532:	0a77      	lsrs	r7, r6, #9
 8000534:	0fc4      	lsrs	r4, r0, #31
 8000536:	09b6      	lsrs	r6, r6, #6
 8000538:	1aab      	subs	r3, r5, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	d020      	beq.n	8000580 <__aeabi_fadd+0x6c>
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd0c      	ble.n	800055c <__aeabi_fadd+0x48>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d134      	bne.n	80005b0 <__aeabi_fadd+0x9c>
 8000546:	2900      	cmp	r1, #0
 8000548:	d02a      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	2b01      	cmp	r3, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x3e>
 8000550:	e08f      	b.n	8000672 <__aeabi_fadd+0x15e>
 8000552:	2bff      	cmp	r3, #255	@ 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x44>
 8000556:	e0cd      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000558:	0013      	movs	r3, r2
 800055a:	e02f      	b.n	80005bc <__aeabi_fadd+0xa8>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d060      	beq.n	8000622 <__aeabi_fadd+0x10e>
 8000560:	1b53      	subs	r3, r2, r5
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x54>
 8000566:	e0ee      	b.n	8000746 <__aeabi_fadd+0x232>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x5a>
 800056c:	e13e      	b.n	80007ec <__aeabi_fadd+0x2d8>
 800056e:	1e5c      	subs	r4, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e16b      	b.n	800084e <__aeabi_fadd+0x33a>
 8000576:	2bff      	cmp	r3, #255	@ 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x68>
 800057a:	e0b9      	b.n	80006f0 <__aeabi_fadd+0x1dc>
 800057c:	0023      	movs	r3, r4
 800057e:	e0e7      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000580:	2b00      	cmp	r3, #0
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fadd+0x72>
 8000584:	e0a4      	b.n	80006d0 <__aeabi_fadd+0x1bc>
 8000586:	2a00      	cmp	r2, #0
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x14a>
 800058a:	2dff      	cmp	r5, #255	@ 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e0b1      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	4311      	orrs	r1, r2
 8000596:	2b1b      	cmp	r3, #27
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x88>
 800059a:	e0e9      	b.n	8000770 <__aeabi_fadd+0x25c>
 800059c:	002b      	movs	r3, r5
 800059e:	3605      	adds	r6, #5
 80005a0:	08f7      	lsrs	r7, r6, #3
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x94>
 80005a6:	e0a5      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005a8:	027a      	lsls	r2, r7, #9
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e030      	b.n	8000612 <__aeabi_fadd+0xfe>
 80005b0:	2dff      	cmp	r5, #255	@ 0xff
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xa2>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	4311      	orrs	r1, r2
 80005bc:	2001      	movs	r0, #1
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dc08      	bgt.n	80005d4 <__aeabi_fadd+0xc0>
 80005c2:	0008      	movs	r0, r1
 80005c4:	2220      	movs	r2, #32
 80005c6:	40d8      	lsrs	r0, r3
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4099      	lsls	r1, r3
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	4193      	sbcs	r3, r2
 80005d2:	4318      	orrs	r0, r3
 80005d4:	1a36      	subs	r6, r6, r0
 80005d6:	0173      	lsls	r3, r6, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0xc8>
 80005da:	e071      	b.n	80006c0 <__aeabi_fadd+0x1ac>
 80005dc:	01b6      	lsls	r6, r6, #6
 80005de:	09b7      	lsrs	r7, r6, #6
 80005e0:	0038      	movs	r0, r7
 80005e2:	f002 fcbb 	bl	8002f5c <__clzsi2>
 80005e6:	003b      	movs	r3, r7
 80005e8:	3805      	subs	r0, #5
 80005ea:	4083      	lsls	r3, r0
 80005ec:	4285      	cmp	r5, r0
 80005ee:	dd4d      	ble.n	800068c <__aeabi_fadd+0x178>
 80005f0:	4eb4      	ldr	r6, [pc, #720]	@ (80008c4 <__aeabi_fadd+0x3b0>)
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	401e      	ands	r6, r3
 80005f6:	075a      	lsls	r2, r3, #29
 80005f8:	d068      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80005fa:	220f      	movs	r2, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d064      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 8000602:	3604      	adds	r6, #4
 8000604:	0173      	lsls	r3, r6, #5
 8000606:	d561      	bpl.n	80006cc <__aeabi_fadd+0x1b8>
 8000608:	1c68      	adds	r0, r5, #1
 800060a:	2dfe      	cmp	r5, #254	@ 0xfe
 800060c:	d154      	bne.n	80006b8 <__aeabi_fadd+0x1a4>
 800060e:	20ff      	movs	r0, #255	@ 0xff
 8000610:	2200      	movs	r2, #0
 8000612:	05c0      	lsls	r0, r0, #23
 8000614:	4310      	orrs	r0, r2
 8000616:	07e4      	lsls	r4, r4, #31
 8000618:	4320      	orrs	r0, r4
 800061a:	bcc0      	pop	{r6, r7}
 800061c:	46b9      	mov	r9, r7
 800061e:	46b0      	mov	r8, r6
 8000620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000622:	22fe      	movs	r2, #254	@ 0xfe
 8000624:	4690      	mov	r8, r2
 8000626:	1c68      	adds	r0, r5, #1
 8000628:	0002      	movs	r2, r0
 800062a:	4640      	mov	r0, r8
 800062c:	4210      	tst	r0, r2
 800062e:	d16b      	bne.n	8000708 <__aeabi_fadd+0x1f4>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0dd      	b.n	80007f2 <__aeabi_fadd+0x2de>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x128>
 800063a:	e102      	b.n	8000842 <__aeabi_fadd+0x32e>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0b3      	beq.n	80005a8 <__aeabi_fadd+0x94>
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	1a77      	subs	r7, r6, r1
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4217      	tst	r7, r2
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x138>
 800064a:	e136      	b.n	80008ba <__aeabi_fadd+0x3a6>
 800064c:	464c      	mov	r4, r9
 800064e:	1b8e      	subs	r6, r1, r6
 8000650:	d061      	beq.n	8000716 <__aeabi_fadd+0x202>
 8000652:	2001      	movs	r0, #1
 8000654:	4216      	tst	r6, r2
 8000656:	d130      	bne.n	80006ba <__aeabi_fadd+0x1a6>
 8000658:	2300      	movs	r3, #0
 800065a:	08f7      	lsrs	r7, r6, #3
 800065c:	e7a4      	b.n	80005a8 <__aeabi_fadd+0x94>
 800065e:	2900      	cmp	r1, #0
 8000660:	d09e      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	2b01      	cmp	r3, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x156>
 8000668:	e0ca      	b.n	8000800 <__aeabi_fadd+0x2ec>
 800066a:	2bff      	cmp	r3, #255	@ 0xff
 800066c:	d042      	beq.n	80006f4 <__aeabi_fadd+0x1e0>
 800066e:	0013      	movs	r3, r2
 8000670:	e791      	b.n	8000596 <__aeabi_fadd+0x82>
 8000672:	1a71      	subs	r1, r6, r1
 8000674:	014b      	lsls	r3, r1, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x166>
 8000678:	e0d1      	b.n	800081e <__aeabi_fadd+0x30a>
 800067a:	018f      	lsls	r7, r1, #6
 800067c:	09bf      	lsrs	r7, r7, #6
 800067e:	0038      	movs	r0, r7
 8000680:	f002 fc6c 	bl	8002f5c <__clzsi2>
 8000684:	003b      	movs	r3, r7
 8000686:	3805      	subs	r0, #5
 8000688:	4083      	lsls	r3, r0
 800068a:	2501      	movs	r5, #1
 800068c:	2220      	movs	r2, #32
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	3001      	adds	r0, #1
 8000692:	1a12      	subs	r2, r2, r0
 8000694:	001e      	movs	r6, r3
 8000696:	4093      	lsls	r3, r2
 8000698:	40c6      	lsrs	r6, r0
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431e      	orrs	r6, r3
 80006a0:	d039      	beq.n	8000716 <__aeabi_fadd+0x202>
 80006a2:	0773      	lsls	r3, r6, #29
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x194>
 80006a6:	e11b      	b.n	80008e0 <__aeabi_fadd+0x3cc>
 80006a8:	230f      	movs	r3, #15
 80006aa:	2500      	movs	r5, #0
 80006ac:	4033      	ands	r3, r6
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d1a7      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006b2:	2001      	movs	r0, #1
 80006b4:	0172      	lsls	r2, r6, #5
 80006b6:	d57c      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80006b8:	b2c0      	uxtb	r0, r0
 80006ba:	01b2      	lsls	r2, r6, #6
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	e7a8      	b.n	8000612 <__aeabi_fadd+0xfe>
 80006c0:	0773      	lsls	r3, r6, #29
 80006c2:	d003      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4033      	ands	r3, r6
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d19a      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006cc:	002b      	movs	r3, r5
 80006ce:	e767      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <__aeabi_fadd+0x208>
 80006d4:	1b53      	subs	r3, r2, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d17b      	bne.n	80007d2 <__aeabi_fadd+0x2be>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x1cc>
 80006de:	e086      	b.n	80007ee <__aeabi_fadd+0x2da>
 80006e0:	1e5d      	subs	r5, r3, #1
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1d4>
 80006e6:	e08b      	b.n	8000800 <__aeabi_fadd+0x2ec>
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d002      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80006ec:	002b      	movs	r3, r5
 80006ee:	e075      	b.n	80007dc <__aeabi_fadd+0x2c8>
 80006f0:	464c      	mov	r4, r9
 80006f2:	4667      	mov	r7, ip
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x1e6>
 80006f8:	e789      	b.n	800060e <__aeabi_fadd+0xfa>
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	433a      	orrs	r2, r7
 8000700:	0252      	lsls	r2, r2, #9
 8000702:	20ff      	movs	r0, #255	@ 0xff
 8000704:	0a52      	lsrs	r2, r2, #9
 8000706:	e784      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000708:	1a77      	subs	r7, r6, r1
 800070a:	017b      	lsls	r3, r7, #5
 800070c:	d46b      	bmi.n	80007e6 <__aeabi_fadd+0x2d2>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x200>
 8000712:	e765      	b.n	80005e0 <__aeabi_fadd+0xcc>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	e77a      	b.n	8000612 <__aeabi_fadd+0xfe>
 800071c:	22fe      	movs	r2, #254	@ 0xfe
 800071e:	1c6b      	adds	r3, r5, #1
 8000720:	421a      	tst	r2, r3
 8000722:	d149      	bne.n	80007b8 <__aeabi_fadd+0x2a4>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x216>
 8000728:	e09f      	b.n	800086a <__aeabi_fadd+0x356>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x21c>
 800072e:	e0ba      	b.n	80008a6 <__aeabi_fadd+0x392>
 8000730:	2900      	cmp	r1, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x222>
 8000734:	e0cf      	b.n	80008d6 <__aeabi_fadd+0x3c2>
 8000736:	1872      	adds	r2, r6, r1
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x22a>
 800073c:	e0cd      	b.n	80008da <__aeabi_fadd+0x3c6>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	2001      	movs	r0, #1
 8000742:	0a52      	lsrs	r2, r2, #9
 8000744:	e765      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000746:	2aff      	cmp	r2, #255	@ 0xff
 8000748:	d0d2      	beq.n	80006f0 <__aeabi_fadd+0x1dc>
 800074a:	2080      	movs	r0, #128	@ 0x80
 800074c:	04c0      	lsls	r0, r0, #19
 800074e:	4306      	orrs	r6, r0
 8000750:	2001      	movs	r0, #1
 8000752:	2b1b      	cmp	r3, #27
 8000754:	dc08      	bgt.n	8000768 <__aeabi_fadd+0x254>
 8000756:	0030      	movs	r0, r6
 8000758:	2420      	movs	r4, #32
 800075a:	40d8      	lsrs	r0, r3
 800075c:	1ae3      	subs	r3, r4, r3
 800075e:	409e      	lsls	r6, r3
 8000760:	0033      	movs	r3, r6
 8000762:	1e5c      	subs	r4, r3, #1
 8000764:	41a3      	sbcs	r3, r4
 8000766:	4318      	orrs	r0, r3
 8000768:	464c      	mov	r4, r9
 800076a:	0015      	movs	r5, r2
 800076c:	1a0e      	subs	r6, r1, r0
 800076e:	e732      	b.n	80005d6 <__aeabi_fadd+0xc2>
 8000770:	0008      	movs	r0, r1
 8000772:	2220      	movs	r2, #32
 8000774:	40d8      	lsrs	r0, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	4099      	lsls	r1, r3
 800077a:	000b      	movs	r3, r1
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	4193      	sbcs	r3, r2
 8000780:	4303      	orrs	r3, r0
 8000782:	18f6      	adds	r6, r6, r3
 8000784:	0173      	lsls	r3, r6, #5
 8000786:	d59b      	bpl.n	80006c0 <__aeabi_fadd+0x1ac>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x27c>
 800078e:	e73e      	b.n	800060e <__aeabi_fadd+0xfa>
 8000790:	2301      	movs	r3, #1
 8000792:	494d      	ldr	r1, [pc, #308]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000794:	0872      	lsrs	r2, r6, #1
 8000796:	4033      	ands	r3, r6
 8000798:	400a      	ands	r2, r1
 800079a:	431a      	orrs	r2, r3
 800079c:	0016      	movs	r6, r2
 800079e:	0753      	lsls	r3, r2, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e72a      	b.n	8000602 <__aeabi_fadd+0xee>
 80007ac:	0173      	lsls	r3, r6, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80007b0:	e72a      	b.n	8000608 <__aeabi_fadd+0xf4>
 80007b2:	002b      	movs	r3, r5
 80007b4:	08f7      	lsrs	r7, r6, #3
 80007b6:	e6f7      	b.n	80005a8 <__aeabi_fadd+0x94>
 80007b8:	2bff      	cmp	r3, #255	@ 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x2aa>
 80007bc:	e727      	b.n	800060e <__aeabi_fadd+0xfa>
 80007be:	1871      	adds	r1, r6, r1
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	074a      	lsls	r2, r1, #29
 80007c4:	d02f      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007c6:	220f      	movs	r2, #15
 80007c8:	400a      	ands	r2, r1
 80007ca:	2a04      	cmp	r2, #4
 80007cc:	d02b      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007ce:	1d0e      	adds	r6, r1, #4
 80007d0:	e6e6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d08d      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	04c0      	lsls	r0, r0, #19
 80007da:	4306      	orrs	r6, r0
 80007dc:	2b1b      	cmp	r3, #27
 80007de:	dd24      	ble.n	800082a <__aeabi_fadd+0x316>
 80007e0:	0013      	movs	r3, r2
 80007e2:	1d4e      	adds	r6, r1, #5
 80007e4:	e6dc      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007e6:	464c      	mov	r4, r9
 80007e8:	1b8f      	subs	r7, r1, r6
 80007ea:	e6f9      	b.n	80005e0 <__aeabi_fadd+0xcc>
 80007ec:	464c      	mov	r4, r9
 80007ee:	000e      	movs	r6, r1
 80007f0:	e6d6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d149      	bne.n	800088a <__aeabi_fadd+0x376>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d068      	beq.n	80008cc <__aeabi_fadd+0x3b8>
 80007fa:	4667      	mov	r7, ip
 80007fc:	464c      	mov	r4, r9
 80007fe:	e77c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000800:	1870      	adds	r0, r6, r1
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d574      	bpl.n	80008f0 <__aeabi_fadd+0x3dc>
 8000806:	4930      	ldr	r1, [pc, #192]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000808:	0840      	lsrs	r0, r0, #1
 800080a:	4001      	ands	r1, r0
 800080c:	0743      	lsls	r3, r0, #29
 800080e:	d009      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000810:	230f      	movs	r3, #15
 8000812:	4003      	ands	r3, r0
 8000814:	2b04      	cmp	r3, #4
 8000816:	d005      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000818:	2302      	movs	r3, #2
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	e6c0      	b.n	80005a0 <__aeabi_fadd+0x8c>
 800081e:	2301      	movs	r3, #1
 8000820:	08cf      	lsrs	r7, r1, #3
 8000822:	e6c1      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000824:	2302      	movs	r3, #2
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e6be      	b.n	80005a8 <__aeabi_fadd+0x94>
 800082a:	2520      	movs	r5, #32
 800082c:	0030      	movs	r0, r6
 800082e:	40d8      	lsrs	r0, r3
 8000830:	1aeb      	subs	r3, r5, r3
 8000832:	409e      	lsls	r6, r3
 8000834:	0033      	movs	r3, r6
 8000836:	1e5d      	subs	r5, r3, #1
 8000838:	41ab      	sbcs	r3, r5
 800083a:	4303      	orrs	r3, r0
 800083c:	0015      	movs	r5, r2
 800083e:	185e      	adds	r6, r3, r1
 8000840:	e7a0      	b.n	8000784 <__aeabi_fadd+0x270>
 8000842:	2900      	cmp	r1, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x334>
 8000846:	e765      	b.n	8000714 <__aeabi_fadd+0x200>
 8000848:	464c      	mov	r4, r9
 800084a:	4667      	mov	r7, ip
 800084c:	e6ac      	b.n	80005a8 <__aeabi_fadd+0x94>
 800084e:	1b8f      	subs	r7, r1, r6
 8000850:	017b      	lsls	r3, r7, #5
 8000852:	d52e      	bpl.n	80008b2 <__aeabi_fadd+0x39e>
 8000854:	01bf      	lsls	r7, r7, #6
 8000856:	09bf      	lsrs	r7, r7, #6
 8000858:	0038      	movs	r0, r7
 800085a:	f002 fb7f 	bl	8002f5c <__clzsi2>
 800085e:	003b      	movs	r3, r7
 8000860:	3805      	subs	r0, #5
 8000862:	4083      	lsls	r3, r0
 8000864:	464c      	mov	r4, r9
 8000866:	3501      	adds	r5, #1
 8000868:	e710      	b.n	800068c <__aeabi_fadd+0x178>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x35c>
 800086e:	e740      	b.n	80006f2 <__aeabi_fadd+0x1de>
 8000870:	2900      	cmp	r1, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x362>
 8000874:	e741      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	429f      	cmp	r7, r3
 800087c:	d200      	bcs.n	8000880 <__aeabi_fadd+0x36c>
 800087e:	e73c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000880:	459c      	cmp	ip, r3
 8000882:	d300      	bcc.n	8000886 <__aeabi_fadd+0x372>
 8000884:	e739      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000886:	4667      	mov	r7, ip
 8000888:	e737      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800088a:	2900      	cmp	r1, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x37c>
 800088e:	e734      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	429f      	cmp	r7, r3
 8000896:	d200      	bcs.n	800089a <__aeabi_fadd+0x386>
 8000898:	e72f      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800089a:	459c      	cmp	ip, r3
 800089c:	d300      	bcc.n	80008a0 <__aeabi_fadd+0x38c>
 800089e:	e72c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a0:	464c      	mov	r4, r9
 80008a2:	4667      	mov	r7, ip
 80008a4:	e729      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x398>
 80008aa:	e734      	b.n	8000716 <__aeabi_fadd+0x202>
 80008ac:	2300      	movs	r3, #0
 80008ae:	08cf      	lsrs	r7, r1, #3
 80008b0:	e67a      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008b2:	464c      	mov	r4, r9
 80008b4:	2301      	movs	r3, #1
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	e676      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x3ac>
 80008be:	e729      	b.n	8000714 <__aeabi_fadd+0x200>
 80008c0:	08ff      	lsrs	r7, r7, #3
 80008c2:	e671      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008c4:	fbffffff 	.word	0xfbffffff
 80008c8:	7dffffff 	.word	0x7dffffff
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2400      	movs	r4, #0
 80008d0:	20ff      	movs	r0, #255	@ 0xff
 80008d2:	03d2      	lsls	r2, r2, #15
 80008d4:	e69d      	b.n	8000612 <__aeabi_fadd+0xfe>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e666      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008da:	2300      	movs	r3, #0
 80008dc:	08d7      	lsrs	r7, r2, #3
 80008de:	e663      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008e0:	2001      	movs	r0, #1
 80008e2:	0172      	lsls	r2, r6, #5
 80008e4:	d500      	bpl.n	80008e8 <__aeabi_fadd+0x3d4>
 80008e6:	e6e7      	b.n	80006b8 <__aeabi_fadd+0x1a4>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2300      	movs	r3, #0
 80008ec:	08cf      	lsrs	r7, r1, #3
 80008ee:	e65b      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f0:	2301      	movs	r3, #1
 80008f2:	08c7      	lsrs	r7, r0, #3
 80008f4:	e658      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f6:	46c0      	nop			@ (mov r8, r8)

080008f8 <__eqsf2>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	0042      	lsls	r2, r0, #1
 80008fc:	024e      	lsls	r6, r1, #9
 80008fe:	004c      	lsls	r4, r1, #1
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	0a6d      	lsrs	r5, r5, #9
 8000904:	0e12      	lsrs	r2, r2, #24
 8000906:	0fc3      	lsrs	r3, r0, #31
 8000908:	0a76      	lsrs	r6, r6, #9
 800090a:	0e24      	lsrs	r4, r4, #24
 800090c:	0fc9      	lsrs	r1, r1, #31
 800090e:	2aff      	cmp	r2, #255	@ 0xff
 8000910:	d010      	beq.n	8000934 <__eqsf2+0x3c>
 8000912:	2cff      	cmp	r4, #255	@ 0xff
 8000914:	d00c      	beq.n	8000930 <__eqsf2+0x38>
 8000916:	2001      	movs	r0, #1
 8000918:	42a2      	cmp	r2, r4
 800091a:	d10a      	bne.n	8000932 <__eqsf2+0x3a>
 800091c:	42b5      	cmp	r5, r6
 800091e:	d108      	bne.n	8000932 <__eqsf2+0x3a>
 8000920:	428b      	cmp	r3, r1
 8000922:	d00f      	beq.n	8000944 <__eqsf2+0x4c>
 8000924:	2a00      	cmp	r2, #0
 8000926:	d104      	bne.n	8000932 <__eqsf2+0x3a>
 8000928:	0028      	movs	r0, r5
 800092a:	1e43      	subs	r3, r0, #1
 800092c:	4198      	sbcs	r0, r3
 800092e:	e000      	b.n	8000932 <__eqsf2+0x3a>
 8000930:	2001      	movs	r0, #1
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	2001      	movs	r0, #1
 8000936:	2cff      	cmp	r4, #255	@ 0xff
 8000938:	d1fb      	bne.n	8000932 <__eqsf2+0x3a>
 800093a:	4335      	orrs	r5, r6
 800093c:	d1f9      	bne.n	8000932 <__eqsf2+0x3a>
 800093e:	404b      	eors	r3, r1
 8000940:	0018      	movs	r0, r3
 8000942:	e7f6      	b.n	8000932 <__eqsf2+0x3a>
 8000944:	2000      	movs	r0, #0
 8000946:	e7f4      	b.n	8000932 <__eqsf2+0x3a>

08000948 <__gesf2>:
 8000948:	b530      	push	{r4, r5, lr}
 800094a:	0042      	lsls	r2, r0, #1
 800094c:	0244      	lsls	r4, r0, #9
 800094e:	024d      	lsls	r5, r1, #9
 8000950:	0fc3      	lsrs	r3, r0, #31
 8000952:	0048      	lsls	r0, r1, #1
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	0e12      	lsrs	r2, r2, #24
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	0e00      	lsrs	r0, r0, #24
 800095c:	0fc9      	lsrs	r1, r1, #31
 800095e:	2aff      	cmp	r2, #255	@ 0xff
 8000960:	d018      	beq.n	8000994 <__gesf2+0x4c>
 8000962:	28ff      	cmp	r0, #255	@ 0xff
 8000964:	d00a      	beq.n	800097c <__gesf2+0x34>
 8000966:	2a00      	cmp	r2, #0
 8000968:	d11e      	bne.n	80009a8 <__gesf2+0x60>
 800096a:	2800      	cmp	r0, #0
 800096c:	d10a      	bne.n	8000984 <__gesf2+0x3c>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d029      	beq.n	80009c6 <__gesf2+0x7e>
 8000972:	2c00      	cmp	r4, #0
 8000974:	d12d      	bne.n	80009d2 <__gesf2+0x8a>
 8000976:	0048      	lsls	r0, r1, #1
 8000978:	3801      	subs	r0, #1
 800097a:	bd30      	pop	{r4, r5, pc}
 800097c:	2d00      	cmp	r5, #0
 800097e:	d125      	bne.n	80009cc <__gesf2+0x84>
 8000980:	2a00      	cmp	r2, #0
 8000982:	d101      	bne.n	8000988 <__gesf2+0x40>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d0f6      	beq.n	8000976 <__gesf2+0x2e>
 8000988:	428b      	cmp	r3, r1
 800098a:	d019      	beq.n	80009c0 <__gesf2+0x78>
 800098c:	2001      	movs	r0, #1
 800098e:	425b      	negs	r3, r3
 8000990:	4318      	orrs	r0, r3
 8000992:	e7f2      	b.n	800097a <__gesf2+0x32>
 8000994:	2c00      	cmp	r4, #0
 8000996:	d119      	bne.n	80009cc <__gesf2+0x84>
 8000998:	28ff      	cmp	r0, #255	@ 0xff
 800099a:	d1f7      	bne.n	800098c <__gesf2+0x44>
 800099c:	2d00      	cmp	r5, #0
 800099e:	d115      	bne.n	80009cc <__gesf2+0x84>
 80009a0:	2000      	movs	r0, #0
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d1f2      	bne.n	800098c <__gesf2+0x44>
 80009a6:	e7e8      	b.n	800097a <__gesf2+0x32>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d0ef      	beq.n	800098c <__gesf2+0x44>
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d1ed      	bne.n	800098c <__gesf2+0x44>
 80009b0:	4282      	cmp	r2, r0
 80009b2:	dceb      	bgt.n	800098c <__gesf2+0x44>
 80009b4:	db04      	blt.n	80009c0 <__gesf2+0x78>
 80009b6:	42ac      	cmp	r4, r5
 80009b8:	d8e8      	bhi.n	800098c <__gesf2+0x44>
 80009ba:	2000      	movs	r0, #0
 80009bc:	42ac      	cmp	r4, r5
 80009be:	d2dc      	bcs.n	800097a <__gesf2+0x32>
 80009c0:	0058      	lsls	r0, r3, #1
 80009c2:	3801      	subs	r0, #1
 80009c4:	e7d9      	b.n	800097a <__gesf2+0x32>
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d0d7      	beq.n	800097a <__gesf2+0x32>
 80009ca:	e7df      	b.n	800098c <__gesf2+0x44>
 80009cc:	2002      	movs	r0, #2
 80009ce:	4240      	negs	r0, r0
 80009d0:	e7d3      	b.n	800097a <__gesf2+0x32>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d1da      	bne.n	800098c <__gesf2+0x44>
 80009d6:	e7ee      	b.n	80009b6 <__gesf2+0x6e>

080009d8 <__lesf2>:
 80009d8:	b530      	push	{r4, r5, lr}
 80009da:	0042      	lsls	r2, r0, #1
 80009dc:	0244      	lsls	r4, r0, #9
 80009de:	024d      	lsls	r5, r1, #9
 80009e0:	0fc3      	lsrs	r3, r0, #31
 80009e2:	0048      	lsls	r0, r1, #1
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0e12      	lsrs	r2, r2, #24
 80009e8:	0a6d      	lsrs	r5, r5, #9
 80009ea:	0e00      	lsrs	r0, r0, #24
 80009ec:	0fc9      	lsrs	r1, r1, #31
 80009ee:	2aff      	cmp	r2, #255	@ 0xff
 80009f0:	d017      	beq.n	8000a22 <__lesf2+0x4a>
 80009f2:	28ff      	cmp	r0, #255	@ 0xff
 80009f4:	d00a      	beq.n	8000a0c <__lesf2+0x34>
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d11b      	bne.n	8000a32 <__lesf2+0x5a>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d10a      	bne.n	8000a14 <__lesf2+0x3c>
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d01d      	beq.n	8000a3e <__lesf2+0x66>
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	d12d      	bne.n	8000a62 <__lesf2+0x8a>
 8000a06:	0048      	lsls	r0, r1, #1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	e011      	b.n	8000a30 <__lesf2+0x58>
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d10e      	bne.n	8000a2e <__lesf2+0x56>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d101      	bne.n	8000a18 <__lesf2+0x40>
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d0f6      	beq.n	8000a06 <__lesf2+0x2e>
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d10c      	bne.n	8000a36 <__lesf2+0x5e>
 8000a1c:	0058      	lsls	r0, r3, #1
 8000a1e:	3801      	subs	r0, #1
 8000a20:	e006      	b.n	8000a30 <__lesf2+0x58>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d103      	bne.n	8000a2e <__lesf2+0x56>
 8000a26:	28ff      	cmp	r0, #255	@ 0xff
 8000a28:	d105      	bne.n	8000a36 <__lesf2+0x5e>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d015      	beq.n	8000a5a <__lesf2+0x82>
 8000a2e:	2002      	movs	r0, #2
 8000a30:	bd30      	pop	{r4, r5, pc}
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d106      	bne.n	8000a44 <__lesf2+0x6c>
 8000a36:	2001      	movs	r0, #1
 8000a38:	425b      	negs	r3, r3
 8000a3a:	4318      	orrs	r0, r3
 8000a3c:	e7f8      	b.n	8000a30 <__lesf2+0x58>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d0f6      	beq.n	8000a30 <__lesf2+0x58>
 8000a42:	e7f8      	b.n	8000a36 <__lesf2+0x5e>
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d1f6      	bne.n	8000a36 <__lesf2+0x5e>
 8000a48:	4282      	cmp	r2, r0
 8000a4a:	dcf4      	bgt.n	8000a36 <__lesf2+0x5e>
 8000a4c:	dbe6      	blt.n	8000a1c <__lesf2+0x44>
 8000a4e:	42ac      	cmp	r4, r5
 8000a50:	d8f1      	bhi.n	8000a36 <__lesf2+0x5e>
 8000a52:	2000      	movs	r0, #0
 8000a54:	42ac      	cmp	r4, r5
 8000a56:	d2eb      	bcs.n	8000a30 <__lesf2+0x58>
 8000a58:	e7e0      	b.n	8000a1c <__lesf2+0x44>
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1ea      	bne.n	8000a36 <__lesf2+0x5e>
 8000a60:	e7e6      	b.n	8000a30 <__lesf2+0x58>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d1e7      	bne.n	8000a36 <__lesf2+0x5e>
 8000a66:	e7f2      	b.n	8000a4e <__lesf2+0x76>

08000a68 <__aeabi_fmul>:
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	464f      	mov	r7, r9
 8000a6c:	4646      	mov	r6, r8
 8000a6e:	46d6      	mov	lr, sl
 8000a70:	0044      	lsls	r4, r0, #1
 8000a72:	b5c0      	push	{r6, r7, lr}
 8000a74:	0246      	lsls	r6, r0, #9
 8000a76:	1c0f      	adds	r7, r1, #0
 8000a78:	0a76      	lsrs	r6, r6, #9
 8000a7a:	0e24      	lsrs	r4, r4, #24
 8000a7c:	0fc5      	lsrs	r5, r0, #31
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fmul+0x1c>
 8000a82:	e0da      	b.n	8000c3a <__aeabi_fmul+0x1d2>
 8000a84:	2cff      	cmp	r4, #255	@ 0xff
 8000a86:	d074      	beq.n	8000b72 <__aeabi_fmul+0x10a>
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	00f6      	lsls	r6, r6, #3
 8000a8c:	04db      	lsls	r3, r3, #19
 8000a8e:	431e      	orrs	r6, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	4699      	mov	r9, r3
 8000a94:	469a      	mov	sl, r3
 8000a96:	3c7f      	subs	r4, #127	@ 0x7f
 8000a98:	027b      	lsls	r3, r7, #9
 8000a9a:	0a5b      	lsrs	r3, r3, #9
 8000a9c:	4698      	mov	r8, r3
 8000a9e:	007b      	lsls	r3, r7, #1
 8000aa0:	0e1b      	lsrs	r3, r3, #24
 8000aa2:	0fff      	lsrs	r7, r7, #31
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d074      	beq.n	8000b92 <__aeabi_fmul+0x12a>
 8000aa8:	2bff      	cmp	r3, #255	@ 0xff
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fmul+0x46>
 8000aac:	e08e      	b.n	8000bcc <__aeabi_fmul+0x164>
 8000aae:	4642      	mov	r2, r8
 8000ab0:	2180      	movs	r1, #128	@ 0x80
 8000ab2:	00d2      	lsls	r2, r2, #3
 8000ab4:	04c9      	lsls	r1, r1, #19
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	3b7f      	subs	r3, #127	@ 0x7f
 8000aba:	002a      	movs	r2, r5
 8000abc:	18e4      	adds	r4, r4, r3
 8000abe:	464b      	mov	r3, r9
 8000ac0:	407a      	eors	r2, r7
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	dc75      	bgt.n	8000bb6 <__aeabi_fmul+0x14e>
 8000aca:	464b      	mov	r3, r9
 8000acc:	2000      	movs	r0, #0
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	dd0f      	ble.n	8000af2 <__aeabi_fmul+0x8a>
 8000ad2:	4649      	mov	r1, r9
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	21a6      	movs	r1, #166	@ 0xa6
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	420b      	tst	r3, r1
 8000ade:	d169      	bne.n	8000bb4 <__aeabi_fmul+0x14c>
 8000ae0:	2190      	movs	r1, #144	@ 0x90
 8000ae2:	0089      	lsls	r1, r1, #2
 8000ae4:	420b      	tst	r3, r1
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fmul+0x82>
 8000ae8:	e100      	b.n	8000cec <__aeabi_fmul+0x284>
 8000aea:	2188      	movs	r1, #136	@ 0x88
 8000aec:	4219      	tst	r1, r3
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fmul+0x8a>
 8000af0:	e0f5      	b.n	8000cde <__aeabi_fmul+0x276>
 8000af2:	4641      	mov	r1, r8
 8000af4:	0409      	lsls	r1, r1, #16
 8000af6:	0c09      	lsrs	r1, r1, #16
 8000af8:	4643      	mov	r3, r8
 8000afa:	0008      	movs	r0, r1
 8000afc:	0c35      	lsrs	r5, r6, #16
 8000afe:	0436      	lsls	r6, r6, #16
 8000b00:	0c1b      	lsrs	r3, r3, #16
 8000b02:	0c36      	lsrs	r6, r6, #16
 8000b04:	4370      	muls	r0, r6
 8000b06:	4369      	muls	r1, r5
 8000b08:	435e      	muls	r6, r3
 8000b0a:	435d      	muls	r5, r3
 8000b0c:	1876      	adds	r6, r6, r1
 8000b0e:	0c03      	lsrs	r3, r0, #16
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d903      	bls.n	8000b1e <__aeabi_fmul+0xb6>
 8000b16:	2180      	movs	r1, #128	@ 0x80
 8000b18:	0249      	lsls	r1, r1, #9
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	4465      	add	r5, ip
 8000b1e:	0400      	lsls	r0, r0, #16
 8000b20:	0419      	lsls	r1, r3, #16
 8000b22:	0c00      	lsrs	r0, r0, #16
 8000b24:	1809      	adds	r1, r1, r0
 8000b26:	018e      	lsls	r6, r1, #6
 8000b28:	1e70      	subs	r0, r6, #1
 8000b2a:	4186      	sbcs	r6, r0
 8000b2c:	0c1b      	lsrs	r3, r3, #16
 8000b2e:	0e89      	lsrs	r1, r1, #26
 8000b30:	195b      	adds	r3, r3, r5
 8000b32:	430e      	orrs	r6, r1
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	431e      	orrs	r6, r3
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	d46c      	bmi.n	8000c16 <__aeabi_fmul+0x1ae>
 8000b3c:	0023      	movs	r3, r4
 8000b3e:	337f      	adds	r3, #127	@ 0x7f
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dc00      	bgt.n	8000b46 <__aeabi_fmul+0xde>
 8000b44:	e0b1      	b.n	8000caa <__aeabi_fmul+0x242>
 8000b46:	0015      	movs	r5, r2
 8000b48:	0771      	lsls	r1, r6, #29
 8000b4a:	d00b      	beq.n	8000b64 <__aeabi_fmul+0xfc>
 8000b4c:	200f      	movs	r0, #15
 8000b4e:	0021      	movs	r1, r4
 8000b50:	4030      	ands	r0, r6
 8000b52:	2804      	cmp	r0, #4
 8000b54:	d006      	beq.n	8000b64 <__aeabi_fmul+0xfc>
 8000b56:	3604      	adds	r6, #4
 8000b58:	0132      	lsls	r2, r6, #4
 8000b5a:	d503      	bpl.n	8000b64 <__aeabi_fmul+0xfc>
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d18 <__aeabi_fmul+0x2b0>)
 8000b5e:	401e      	ands	r6, r3
 8000b60:	000b      	movs	r3, r1
 8000b62:	3380      	adds	r3, #128	@ 0x80
 8000b64:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_fmul+0x102>
 8000b68:	e0bd      	b.n	8000ce6 <__aeabi_fmul+0x27e>
 8000b6a:	01b2      	lsls	r2, r6, #6
 8000b6c:	0a52      	lsrs	r2, r2, #9
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	e048      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fmul+0x110>
 8000b76:	e092      	b.n	8000c9e <__aeabi_fmul+0x236>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	469a      	mov	sl, r3
 8000b80:	027b      	lsls	r3, r7, #9
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	4698      	mov	r8, r3
 8000b86:	007b      	lsls	r3, r7, #1
 8000b88:	24ff      	movs	r4, #255	@ 0xff
 8000b8a:	0e1b      	lsrs	r3, r3, #24
 8000b8c:	0fff      	lsrs	r7, r7, #31
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d18a      	bne.n	8000aa8 <__aeabi_fmul+0x40>
 8000b92:	4642      	mov	r2, r8
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d164      	bne.n	8000c62 <__aeabi_fmul+0x1fa>
 8000b98:	4649      	mov	r1, r9
 8000b9a:	3201      	adds	r2, #1
 8000b9c:	4311      	orrs	r1, r2
 8000b9e:	4689      	mov	r9, r1
 8000ba0:	290a      	cmp	r1, #10
 8000ba2:	dc08      	bgt.n	8000bb6 <__aeabi_fmul+0x14e>
 8000ba4:	407d      	eors	r5, r7
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	b2ea      	uxtb	r2, r5
 8000baa:	2902      	cmp	r1, #2
 8000bac:	dc91      	bgt.n	8000ad2 <__aeabi_fmul+0x6a>
 8000bae:	0015      	movs	r5, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e027      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000bb4:	0015      	movs	r5, r2
 8000bb6:	4653      	mov	r3, sl
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fmul+0x156>
 8000bbc:	e093      	b.n	8000ce6 <__aeabi_fmul+0x27e>
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d01a      	beq.n	8000bf8 <__aeabi_fmul+0x190>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d12c      	bne.n	8000c20 <__aeabi_fmul+0x1b8>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e01b      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	34ff      	adds	r4, #255	@ 0xff
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d055      	beq.n	8000c80 <__aeabi_fmul+0x218>
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	0019      	movs	r1, r3
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fmul+0x17a>
 8000be0:	e092      	b.n	8000d08 <__aeabi_fmul+0x2a0>
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fmul+0x180>
 8000be6:	e08c      	b.n	8000d02 <__aeabi_fmul+0x29a>
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	03d2      	lsls	r2, r2, #15
 8000bec:	4216      	tst	r6, r2
 8000bee:	d003      	beq.n	8000bf8 <__aeabi_fmul+0x190>
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	4213      	tst	r3, r2
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fmul+0x190>
 8000bf6:	e07d      	b.n	8000cf4 <__aeabi_fmul+0x28c>
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	03d2      	lsls	r2, r2, #15
 8000bfc:	4332      	orrs	r2, r6
 8000bfe:	0252      	lsls	r2, r2, #9
 8000c00:	0a52      	lsrs	r2, r2, #9
 8000c02:	23ff      	movs	r3, #255	@ 0xff
 8000c04:	05d8      	lsls	r0, r3, #23
 8000c06:	07ed      	lsls	r5, r5, #31
 8000c08:	4310      	orrs	r0, r2
 8000c0a:	4328      	orrs	r0, r5
 8000c0c:	bce0      	pop	{r5, r6, r7}
 8000c0e:	46ba      	mov	sl, r7
 8000c10:	46b1      	mov	r9, r6
 8000c12:	46a8      	mov	r8, r5
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	2301      	movs	r3, #1
 8000c18:	0015      	movs	r5, r2
 8000c1a:	0871      	lsrs	r1, r6, #1
 8000c1c:	401e      	ands	r6, r3
 8000c1e:	430e      	orrs	r6, r1
 8000c20:	0023      	movs	r3, r4
 8000c22:	3380      	adds	r3, #128	@ 0x80
 8000c24:	1c61      	adds	r1, r4, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dd41      	ble.n	8000cae <__aeabi_fmul+0x246>
 8000c2a:	0772      	lsls	r2, r6, #29
 8000c2c:	d094      	beq.n	8000b58 <__aeabi_fmul+0xf0>
 8000c2e:	220f      	movs	r2, #15
 8000c30:	4032      	ands	r2, r6
 8000c32:	2a04      	cmp	r2, #4
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fmul+0x1d0>
 8000c36:	e78e      	b.n	8000b56 <__aeabi_fmul+0xee>
 8000c38:	e78e      	b.n	8000b58 <__aeabi_fmul+0xf0>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d105      	bne.n	8000c4a <__aeabi_fmul+0x1e2>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	4699      	mov	r9, r3
 8000c42:	3b03      	subs	r3, #3
 8000c44:	2400      	movs	r4, #0
 8000c46:	469a      	mov	sl, r3
 8000c48:	e726      	b.n	8000a98 <__aeabi_fmul+0x30>
 8000c4a:	0030      	movs	r0, r6
 8000c4c:	f002 f986 	bl	8002f5c <__clzsi2>
 8000c50:	2476      	movs	r4, #118	@ 0x76
 8000c52:	1f43      	subs	r3, r0, #5
 8000c54:	409e      	lsls	r6, r3
 8000c56:	2300      	movs	r3, #0
 8000c58:	4264      	negs	r4, r4
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	1a24      	subs	r4, r4, r0
 8000c60:	e71a      	b.n	8000a98 <__aeabi_fmul+0x30>
 8000c62:	4640      	mov	r0, r8
 8000c64:	f002 f97a 	bl	8002f5c <__clzsi2>
 8000c68:	464b      	mov	r3, r9
 8000c6a:	1a24      	subs	r4, r4, r0
 8000c6c:	3c76      	subs	r4, #118	@ 0x76
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	dca1      	bgt.n	8000bb6 <__aeabi_fmul+0x14e>
 8000c72:	4643      	mov	r3, r8
 8000c74:	3805      	subs	r0, #5
 8000c76:	4083      	lsls	r3, r0
 8000c78:	407d      	eors	r5, r7
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	b2ea      	uxtb	r2, r5
 8000c7e:	e724      	b.n	8000aca <__aeabi_fmul+0x62>
 8000c80:	464a      	mov	r2, r9
 8000c82:	3302      	adds	r3, #2
 8000c84:	4313      	orrs	r3, r2
 8000c86:	002a      	movs	r2, r5
 8000c88:	407a      	eors	r2, r7
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	dc92      	bgt.n	8000bb6 <__aeabi_fmul+0x14e>
 8000c90:	4649      	mov	r1, r9
 8000c92:	0015      	movs	r5, r2
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d026      	beq.n	8000ce6 <__aeabi_fmul+0x27e>
 8000c98:	4699      	mov	r9, r3
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	e719      	b.n	8000ad2 <__aeabi_fmul+0x6a>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	4699      	mov	r9, r3
 8000ca2:	3b09      	subs	r3, #9
 8000ca4:	24ff      	movs	r4, #255	@ 0xff
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	e6f6      	b.n	8000a98 <__aeabi_fmul+0x30>
 8000caa:	0015      	movs	r5, r2
 8000cac:	0021      	movs	r1, r4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b1b      	cmp	r3, #27
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_fmul+0x250>
 8000cb6:	e786      	b.n	8000bc6 <__aeabi_fmul+0x15e>
 8000cb8:	319e      	adds	r1, #158	@ 0x9e
 8000cba:	0032      	movs	r2, r6
 8000cbc:	408e      	lsls	r6, r1
 8000cbe:	40da      	lsrs	r2, r3
 8000cc0:	1e73      	subs	r3, r6, #1
 8000cc2:	419e      	sbcs	r6, r3
 8000cc4:	4332      	orrs	r2, r6
 8000cc6:	0753      	lsls	r3, r2, #29
 8000cc8:	d004      	beq.n	8000cd4 <__aeabi_fmul+0x26c>
 8000cca:	230f      	movs	r3, #15
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_fmul+0x26c>
 8000cd2:	3204      	adds	r2, #4
 8000cd4:	0153      	lsls	r3, r2, #5
 8000cd6:	d510      	bpl.n	8000cfa <__aeabi_fmul+0x292>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e792      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000cde:	003d      	movs	r5, r7
 8000ce0:	4646      	mov	r6, r8
 8000ce2:	4682      	mov	sl, r0
 8000ce4:	e767      	b.n	8000bb6 <__aeabi_fmul+0x14e>
 8000ce6:	23ff      	movs	r3, #255	@ 0xff
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e78b      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	2500      	movs	r5, #0
 8000cf0:	03d2      	lsls	r2, r2, #15
 8000cf2:	e786      	b.n	8000c02 <__aeabi_fmul+0x19a>
 8000cf4:	003d      	movs	r5, r7
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	e783      	b.n	8000c02 <__aeabi_fmul+0x19a>
 8000cfa:	0192      	lsls	r2, r2, #6
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	0a52      	lsrs	r2, r2, #9
 8000d00:	e780      	b.n	8000c04 <__aeabi_fmul+0x19c>
 8000d02:	003d      	movs	r5, r7
 8000d04:	4646      	mov	r6, r8
 8000d06:	e777      	b.n	8000bf8 <__aeabi_fmul+0x190>
 8000d08:	002a      	movs	r2, r5
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	407a      	eors	r2, r7
 8000d0e:	408b      	lsls	r3, r1
 8000d10:	2003      	movs	r0, #3
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	e6e9      	b.n	8000aea <__aeabi_fmul+0x82>
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	f7ffffff 	.word	0xf7ffffff

08000d1c <__aeabi_f2iz>:
 8000d1c:	0241      	lsls	r1, r0, #9
 8000d1e:	0042      	lsls	r2, r0, #1
 8000d20:	0fc3      	lsrs	r3, r0, #31
 8000d22:	0a49      	lsrs	r1, r1, #9
 8000d24:	2000      	movs	r0, #0
 8000d26:	0e12      	lsrs	r2, r2, #24
 8000d28:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d2a:	dd03      	ble.n	8000d34 <__aeabi_f2iz+0x18>
 8000d2c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d2e:	dd02      	ble.n	8000d36 <__aeabi_f2iz+0x1a>
 8000d30:	4a09      	ldr	r2, [pc, #36]	@ (8000d58 <__aeabi_f2iz+0x3c>)
 8000d32:	1898      	adds	r0, r3, r2
 8000d34:	4770      	bx	lr
 8000d36:	2080      	movs	r0, #128	@ 0x80
 8000d38:	0400      	lsls	r0, r0, #16
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	2a95      	cmp	r2, #149	@ 0x95
 8000d3e:	dc07      	bgt.n	8000d50 <__aeabi_f2iz+0x34>
 8000d40:	2096      	movs	r0, #150	@ 0x96
 8000d42:	1a82      	subs	r2, r0, r2
 8000d44:	40d1      	lsrs	r1, r2
 8000d46:	4248      	negs	r0, r1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f3      	bne.n	8000d34 <__aeabi_f2iz+0x18>
 8000d4c:	0008      	movs	r0, r1
 8000d4e:	e7f1      	b.n	8000d34 <__aeabi_f2iz+0x18>
 8000d50:	3a96      	subs	r2, #150	@ 0x96
 8000d52:	4091      	lsls	r1, r2
 8000d54:	e7f7      	b.n	8000d46 <__aeabi_f2iz+0x2a>
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	7fffffff 	.word	0x7fffffff

08000d5c <__aeabi_i2f>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d012      	beq.n	8000d88 <__aeabi_i2f+0x2c>
 8000d62:	17c3      	asrs	r3, r0, #31
 8000d64:	18c5      	adds	r5, r0, r3
 8000d66:	405d      	eors	r5, r3
 8000d68:	0fc4      	lsrs	r4, r0, #31
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	f002 f8f6 	bl	8002f5c <__clzsi2>
 8000d70:	239e      	movs	r3, #158	@ 0x9e
 8000d72:	1a1b      	subs	r3, r3, r0
 8000d74:	2b96      	cmp	r3, #150	@ 0x96
 8000d76:	dc0f      	bgt.n	8000d98 <__aeabi_i2f+0x3c>
 8000d78:	2808      	cmp	r0, #8
 8000d7a:	d038      	beq.n	8000dee <__aeabi_i2f+0x92>
 8000d7c:	3808      	subs	r0, #8
 8000d7e:	4085      	lsls	r5, r0
 8000d80:	026d      	lsls	r5, r5, #9
 8000d82:	0a6d      	lsrs	r5, r5, #9
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	e002      	b.n	8000d8e <__aeabi_i2f+0x32>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	05c0      	lsls	r0, r0, #23
 8000d90:	4328      	orrs	r0, r5
 8000d92:	07e4      	lsls	r4, r4, #31
 8000d94:	4320      	orrs	r0, r4
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	2b99      	cmp	r3, #153	@ 0x99
 8000d9a:	dc14      	bgt.n	8000dc6 <__aeabi_i2f+0x6a>
 8000d9c:	1f42      	subs	r2, r0, #5
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	002a      	movs	r2, r5
 8000da2:	4915      	ldr	r1, [pc, #84]	@ (8000df8 <__aeabi_i2f+0x9c>)
 8000da4:	4011      	ands	r1, r2
 8000da6:	0755      	lsls	r5, r2, #29
 8000da8:	d01c      	beq.n	8000de4 <__aeabi_i2f+0x88>
 8000daa:	250f      	movs	r5, #15
 8000dac:	402a      	ands	r2, r5
 8000dae:	2a04      	cmp	r2, #4
 8000db0:	d018      	beq.n	8000de4 <__aeabi_i2f+0x88>
 8000db2:	3104      	adds	r1, #4
 8000db4:	08ca      	lsrs	r2, r1, #3
 8000db6:	0149      	lsls	r1, r1, #5
 8000db8:	d515      	bpl.n	8000de6 <__aeabi_i2f+0x8a>
 8000dba:	239f      	movs	r3, #159	@ 0x9f
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	1a18      	subs	r0, r3, r0
 8000dc0:	0a55      	lsrs	r5, r2, #9
 8000dc2:	b2c0      	uxtb	r0, r0
 8000dc4:	e7e3      	b.n	8000d8e <__aeabi_i2f+0x32>
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	0029      	movs	r1, r5
 8000dca:	1a12      	subs	r2, r2, r0
 8000dcc:	40d1      	lsrs	r1, r2
 8000dce:	0002      	movs	r2, r0
 8000dd0:	321b      	adds	r2, #27
 8000dd2:	4095      	lsls	r5, r2
 8000dd4:	002a      	movs	r2, r5
 8000dd6:	1e55      	subs	r5, r2, #1
 8000dd8:	41aa      	sbcs	r2, r5
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	4906      	ldr	r1, [pc, #24]	@ (8000df8 <__aeabi_i2f+0x9c>)
 8000dde:	4011      	ands	r1, r2
 8000de0:	0755      	lsls	r5, r2, #29
 8000de2:	d1e2      	bne.n	8000daa <__aeabi_i2f+0x4e>
 8000de4:	08ca      	lsrs	r2, r1, #3
 8000de6:	0252      	lsls	r2, r2, #9
 8000de8:	0a55      	lsrs	r5, r2, #9
 8000dea:	b2d8      	uxtb	r0, r3
 8000dec:	e7cf      	b.n	8000d8e <__aeabi_i2f+0x32>
 8000dee:	026d      	lsls	r5, r5, #9
 8000df0:	0a6d      	lsrs	r5, r5, #9
 8000df2:	308e      	adds	r0, #142	@ 0x8e
 8000df4:	e7cb      	b.n	8000d8e <__aeabi_i2f+0x32>
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	fbffffff 	.word	0xfbffffff

08000dfc <__aeabi_ui2f>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	1e04      	subs	r4, r0, #0
 8000e00:	d00d      	beq.n	8000e1e <__aeabi_ui2f+0x22>
 8000e02:	f002 f8ab 	bl	8002f5c <__clzsi2>
 8000e06:	239e      	movs	r3, #158	@ 0x9e
 8000e08:	1a1b      	subs	r3, r3, r0
 8000e0a:	2b96      	cmp	r3, #150	@ 0x96
 8000e0c:	dc0c      	bgt.n	8000e28 <__aeabi_ui2f+0x2c>
 8000e0e:	2808      	cmp	r0, #8
 8000e10:	d034      	beq.n	8000e7c <__aeabi_ui2f+0x80>
 8000e12:	3808      	subs	r0, #8
 8000e14:	4084      	lsls	r4, r0
 8000e16:	0264      	lsls	r4, r4, #9
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	b2d8      	uxtb	r0, r3
 8000e1c:	e001      	b.n	8000e22 <__aeabi_ui2f+0x26>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	2400      	movs	r4, #0
 8000e22:	05c0      	lsls	r0, r0, #23
 8000e24:	4320      	orrs	r0, r4
 8000e26:	bd10      	pop	{r4, pc}
 8000e28:	2b99      	cmp	r3, #153	@ 0x99
 8000e2a:	dc13      	bgt.n	8000e54 <__aeabi_ui2f+0x58>
 8000e2c:	1f42      	subs	r2, r0, #5
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <__aeabi_ui2f+0x88>)
 8000e32:	4022      	ands	r2, r4
 8000e34:	0761      	lsls	r1, r4, #29
 8000e36:	d01c      	beq.n	8000e72 <__aeabi_ui2f+0x76>
 8000e38:	210f      	movs	r1, #15
 8000e3a:	4021      	ands	r1, r4
 8000e3c:	2904      	cmp	r1, #4
 8000e3e:	d018      	beq.n	8000e72 <__aeabi_ui2f+0x76>
 8000e40:	3204      	adds	r2, #4
 8000e42:	08d4      	lsrs	r4, r2, #3
 8000e44:	0152      	lsls	r2, r2, #5
 8000e46:	d515      	bpl.n	8000e74 <__aeabi_ui2f+0x78>
 8000e48:	239f      	movs	r3, #159	@ 0x9f
 8000e4a:	0264      	lsls	r4, r4, #9
 8000e4c:	1a18      	subs	r0, r3, r0
 8000e4e:	0a64      	lsrs	r4, r4, #9
 8000e50:	b2c0      	uxtb	r0, r0
 8000e52:	e7e6      	b.n	8000e22 <__aeabi_ui2f+0x26>
 8000e54:	0002      	movs	r2, r0
 8000e56:	0021      	movs	r1, r4
 8000e58:	321b      	adds	r2, #27
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	1e51      	subs	r1, r2, #1
 8000e60:	418a      	sbcs	r2, r1
 8000e62:	2105      	movs	r1, #5
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	4314      	orrs	r4, r2
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <__aeabi_ui2f+0x88>)
 8000e6c:	4022      	ands	r2, r4
 8000e6e:	0761      	lsls	r1, r4, #29
 8000e70:	d1e2      	bne.n	8000e38 <__aeabi_ui2f+0x3c>
 8000e72:	08d4      	lsrs	r4, r2, #3
 8000e74:	0264      	lsls	r4, r4, #9
 8000e76:	0a64      	lsrs	r4, r4, #9
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	e7d2      	b.n	8000e22 <__aeabi_ui2f+0x26>
 8000e7c:	0264      	lsls	r4, r4, #9
 8000e7e:	0a64      	lsrs	r4, r4, #9
 8000e80:	308e      	adds	r0, #142	@ 0x8e
 8000e82:	e7ce      	b.n	8000e22 <__aeabi_ui2f+0x26>
 8000e84:	fbffffff 	.word	0xfbffffff

08000e88 <__aeabi_dadd>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	b5c0      	push	{r6, r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	9000      	str	r0, [sp, #0]
 8000e96:	9101      	str	r1, [sp, #4]
 8000e98:	030e      	lsls	r6, r1, #12
 8000e9a:	004c      	lsls	r4, r1, #1
 8000e9c:	0fcd      	lsrs	r5, r1, #31
 8000e9e:	0a71      	lsrs	r1, r6, #9
 8000ea0:	9e00      	ldr	r6, [sp, #0]
 8000ea2:	005f      	lsls	r7, r3, #1
 8000ea4:	0f76      	lsrs	r6, r6, #29
 8000ea6:	430e      	orrs	r6, r1
 8000ea8:	9900      	ldr	r1, [sp, #0]
 8000eaa:	9200      	str	r2, [sp, #0]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	00c9      	lsls	r1, r1, #3
 8000eb0:	4689      	mov	r9, r1
 8000eb2:	0319      	lsls	r1, r3, #12
 8000eb4:	0d7b      	lsrs	r3, r7, #21
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	9b01      	ldr	r3, [sp, #4]
 8000eba:	0a49      	lsrs	r1, r1, #9
 8000ebc:	0fdb      	lsrs	r3, r3, #31
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	9a00      	ldr	r2, [sp, #0]
 8000ec4:	0f5b      	lsrs	r3, r3, #29
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	4641      	mov	r1, r8
 8000eca:	0d64      	lsrs	r4, r4, #21
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	1a61      	subs	r1, r4, r1
 8000ed0:	4565      	cmp	r5, ip
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_dadd+0x4e>
 8000ed4:	e0a6      	b.n	8001024 <__aeabi_dadd+0x19c>
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	dd72      	ble.n	8000fc0 <__aeabi_dadd+0x138>
 8000eda:	4647      	mov	r7, r8
 8000edc:	2f00      	cmp	r7, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x5a>
 8000ee0:	e0dd      	b.n	800109e <__aeabi_dadd+0x216>
 8000ee2:	4fcc      	ldr	r7, [pc, #816]	@ (8001214 <__aeabi_dadd+0x38c>)
 8000ee4:	42bc      	cmp	r4, r7
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x62>
 8000ee8:	e19a      	b.n	8001220 <__aeabi_dadd+0x398>
 8000eea:	2701      	movs	r7, #1
 8000eec:	2938      	cmp	r1, #56	@ 0x38
 8000eee:	dc17      	bgt.n	8000f20 <__aeabi_dadd+0x98>
 8000ef0:	2780      	movs	r7, #128	@ 0x80
 8000ef2:	043f      	lsls	r7, r7, #16
 8000ef4:	433b      	orrs	r3, r7
 8000ef6:	291f      	cmp	r1, #31
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dadd+0x74>
 8000efa:	e1dd      	b.n	80012b8 <__aeabi_dadd+0x430>
 8000efc:	2720      	movs	r7, #32
 8000efe:	1a78      	subs	r0, r7, r1
 8000f00:	001f      	movs	r7, r3
 8000f02:	4087      	lsls	r7, r0
 8000f04:	46ba      	mov	sl, r7
 8000f06:	0017      	movs	r7, r2
 8000f08:	40cf      	lsrs	r7, r1
 8000f0a:	4684      	mov	ip, r0
 8000f0c:	0038      	movs	r0, r7
 8000f0e:	4657      	mov	r7, sl
 8000f10:	4307      	orrs	r7, r0
 8000f12:	4660      	mov	r0, ip
 8000f14:	4082      	lsls	r2, r0
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	1e50      	subs	r0, r2, #1
 8000f1a:	4182      	sbcs	r2, r0
 8000f1c:	1af6      	subs	r6, r6, r3
 8000f1e:	4317      	orrs	r7, r2
 8000f20:	464b      	mov	r3, r9
 8000f22:	1bdf      	subs	r7, r3, r7
 8000f24:	45b9      	cmp	r9, r7
 8000f26:	4180      	sbcs	r0, r0
 8000f28:	4240      	negs	r0, r0
 8000f2a:	1a36      	subs	r6, r6, r0
 8000f2c:	0233      	lsls	r3, r6, #8
 8000f2e:	d400      	bmi.n	8000f32 <__aeabi_dadd+0xaa>
 8000f30:	e0ff      	b.n	8001132 <__aeabi_dadd+0x2aa>
 8000f32:	0276      	lsls	r6, r6, #9
 8000f34:	0a76      	lsrs	r6, r6, #9
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0xb4>
 8000f3a:	e13c      	b.n	80011b6 <__aeabi_dadd+0x32e>
 8000f3c:	0030      	movs	r0, r6
 8000f3e:	f002 f80d 	bl	8002f5c <__clzsi2>
 8000f42:	0003      	movs	r3, r0
 8000f44:	3b08      	subs	r3, #8
 8000f46:	2120      	movs	r1, #32
 8000f48:	0038      	movs	r0, r7
 8000f4a:	1aca      	subs	r2, r1, r3
 8000f4c:	40d0      	lsrs	r0, r2
 8000f4e:	409e      	lsls	r6, r3
 8000f50:	0002      	movs	r2, r0
 8000f52:	409f      	lsls	r7, r3
 8000f54:	4332      	orrs	r2, r6
 8000f56:	429c      	cmp	r4, r3
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dadd+0xd4>
 8000f5a:	e1a6      	b.n	80012aa <__aeabi_dadd+0x422>
 8000f5c:	1b18      	subs	r0, r3, r4
 8000f5e:	3001      	adds	r0, #1
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	003e      	movs	r6, r7
 8000f64:	408f      	lsls	r7, r1
 8000f66:	40c6      	lsrs	r6, r0
 8000f68:	1e7b      	subs	r3, r7, #1
 8000f6a:	419f      	sbcs	r7, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	408b      	lsls	r3, r1
 8000f70:	4337      	orrs	r7, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	40c2      	lsrs	r2, r0
 8000f76:	003b      	movs	r3, r7
 8000f78:	0016      	movs	r6, r2
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0xfa>
 8000f80:	e1df      	b.n	8001342 <__aeabi_dadd+0x4ba>
 8000f82:	077b      	lsls	r3, r7, #29
 8000f84:	d100      	bne.n	8000f88 <__aeabi_dadd+0x100>
 8000f86:	e332      	b.n	80015ee <__aeabi_dadd+0x766>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	403b      	ands	r3, r7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d004      	beq.n	8000f9c <__aeabi_dadd+0x114>
 8000f92:	1d3a      	adds	r2, r7, #4
 8000f94:	42ba      	cmp	r2, r7
 8000f96:	41bf      	sbcs	r7, r7
 8000f98:	427f      	negs	r7, r7
 8000f9a:	19f6      	adds	r6, r6, r7
 8000f9c:	0233      	lsls	r3, r6, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x11a>
 8000fa0:	e323      	b.n	80015ea <__aeabi_dadd+0x762>
 8000fa2:	4b9c      	ldr	r3, [pc, #624]	@ (8001214 <__aeabi_dadd+0x38c>)
 8000fa4:	3401      	adds	r4, #1
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x124>
 8000faa:	e0b4      	b.n	8001116 <__aeabi_dadd+0x28e>
 8000fac:	4b9a      	ldr	r3, [pc, #616]	@ (8001218 <__aeabi_dadd+0x390>)
 8000fae:	0564      	lsls	r4, r4, #21
 8000fb0:	401e      	ands	r6, r3
 8000fb2:	0d64      	lsrs	r4, r4, #21
 8000fb4:	0777      	lsls	r7, r6, #29
 8000fb6:	08d2      	lsrs	r2, r2, #3
 8000fb8:	0276      	lsls	r6, r6, #9
 8000fba:	4317      	orrs	r7, r2
 8000fbc:	0b36      	lsrs	r6, r6, #12
 8000fbe:	e0ac      	b.n	800111a <__aeabi_dadd+0x292>
 8000fc0:	2900      	cmp	r1, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x13e>
 8000fc4:	e07e      	b.n	80010c4 <__aeabi_dadd+0x23c>
 8000fc6:	4641      	mov	r1, r8
 8000fc8:	1b09      	subs	r1, r1, r4
 8000fca:	2c00      	cmp	r4, #0
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_dadd+0x148>
 8000fce:	e160      	b.n	8001292 <__aeabi_dadd+0x40a>
 8000fd0:	0034      	movs	r4, r6
 8000fd2:	4648      	mov	r0, r9
 8000fd4:	4304      	orrs	r4, r0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x152>
 8000fd8:	e1c9      	b.n	800136e <__aeabi_dadd+0x4e6>
 8000fda:	1e4c      	subs	r4, r1, #1
 8000fdc:	2901      	cmp	r1, #1
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dadd+0x15a>
 8000fe0:	e22e      	b.n	8001440 <__aeabi_dadd+0x5b8>
 8000fe2:	4d8c      	ldr	r5, [pc, #560]	@ (8001214 <__aeabi_dadd+0x38c>)
 8000fe4:	42a9      	cmp	r1, r5
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dadd+0x162>
 8000fe8:	e224      	b.n	8001434 <__aeabi_dadd+0x5ac>
 8000fea:	2701      	movs	r7, #1
 8000fec:	2c38      	cmp	r4, #56	@ 0x38
 8000fee:	dc11      	bgt.n	8001014 <__aeabi_dadd+0x18c>
 8000ff0:	0021      	movs	r1, r4
 8000ff2:	291f      	cmp	r1, #31
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0x170>
 8000ff6:	e20b      	b.n	8001410 <__aeabi_dadd+0x588>
 8000ff8:	2420      	movs	r4, #32
 8000ffa:	0037      	movs	r7, r6
 8000ffc:	4648      	mov	r0, r9
 8000ffe:	1a64      	subs	r4, r4, r1
 8001000:	40a7      	lsls	r7, r4
 8001002:	40c8      	lsrs	r0, r1
 8001004:	4307      	orrs	r7, r0
 8001006:	4648      	mov	r0, r9
 8001008:	40a0      	lsls	r0, r4
 800100a:	40ce      	lsrs	r6, r1
 800100c:	1e44      	subs	r4, r0, #1
 800100e:	41a0      	sbcs	r0, r4
 8001010:	1b9b      	subs	r3, r3, r6
 8001012:	4307      	orrs	r7, r0
 8001014:	1bd7      	subs	r7, r2, r7
 8001016:	42ba      	cmp	r2, r7
 8001018:	4192      	sbcs	r2, r2
 800101a:	4252      	negs	r2, r2
 800101c:	4665      	mov	r5, ip
 800101e:	4644      	mov	r4, r8
 8001020:	1a9e      	subs	r6, r3, r2
 8001022:	e783      	b.n	8000f2c <__aeabi_dadd+0xa4>
 8001024:	2900      	cmp	r1, #0
 8001026:	dc00      	bgt.n	800102a <__aeabi_dadd+0x1a2>
 8001028:	e09c      	b.n	8001164 <__aeabi_dadd+0x2dc>
 800102a:	4647      	mov	r7, r8
 800102c:	2f00      	cmp	r7, #0
 800102e:	d167      	bne.n	8001100 <__aeabi_dadd+0x278>
 8001030:	001f      	movs	r7, r3
 8001032:	4317      	orrs	r7, r2
 8001034:	d100      	bne.n	8001038 <__aeabi_dadd+0x1b0>
 8001036:	e0e4      	b.n	8001202 <__aeabi_dadd+0x37a>
 8001038:	1e48      	subs	r0, r1, #1
 800103a:	2901      	cmp	r1, #1
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x1b8>
 800103e:	e19b      	b.n	8001378 <__aeabi_dadd+0x4f0>
 8001040:	4f74      	ldr	r7, [pc, #464]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001042:	42b9      	cmp	r1, r7
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x1c0>
 8001046:	e0eb      	b.n	8001220 <__aeabi_dadd+0x398>
 8001048:	2701      	movs	r7, #1
 800104a:	0001      	movs	r1, r0
 800104c:	2838      	cmp	r0, #56	@ 0x38
 800104e:	dc11      	bgt.n	8001074 <__aeabi_dadd+0x1ec>
 8001050:	291f      	cmp	r1, #31
 8001052:	dd00      	ble.n	8001056 <__aeabi_dadd+0x1ce>
 8001054:	e1c7      	b.n	80013e6 <__aeabi_dadd+0x55e>
 8001056:	2720      	movs	r7, #32
 8001058:	1a78      	subs	r0, r7, r1
 800105a:	001f      	movs	r7, r3
 800105c:	4684      	mov	ip, r0
 800105e:	4087      	lsls	r7, r0
 8001060:	0010      	movs	r0, r2
 8001062:	40c8      	lsrs	r0, r1
 8001064:	4307      	orrs	r7, r0
 8001066:	4660      	mov	r0, ip
 8001068:	4082      	lsls	r2, r0
 800106a:	40cb      	lsrs	r3, r1
 800106c:	1e50      	subs	r0, r2, #1
 800106e:	4182      	sbcs	r2, r0
 8001070:	18f6      	adds	r6, r6, r3
 8001072:	4317      	orrs	r7, r2
 8001074:	444f      	add	r7, r9
 8001076:	454f      	cmp	r7, r9
 8001078:	4180      	sbcs	r0, r0
 800107a:	4240      	negs	r0, r0
 800107c:	1836      	adds	r6, r6, r0
 800107e:	0233      	lsls	r3, r6, #8
 8001080:	d557      	bpl.n	8001132 <__aeabi_dadd+0x2aa>
 8001082:	4b64      	ldr	r3, [pc, #400]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001084:	3401      	adds	r4, #1
 8001086:	429c      	cmp	r4, r3
 8001088:	d045      	beq.n	8001116 <__aeabi_dadd+0x28e>
 800108a:	2101      	movs	r1, #1
 800108c:	4b62      	ldr	r3, [pc, #392]	@ (8001218 <__aeabi_dadd+0x390>)
 800108e:	087a      	lsrs	r2, r7, #1
 8001090:	401e      	ands	r6, r3
 8001092:	4039      	ands	r1, r7
 8001094:	430a      	orrs	r2, r1
 8001096:	07f7      	lsls	r7, r6, #31
 8001098:	4317      	orrs	r7, r2
 800109a:	0876      	lsrs	r6, r6, #1
 800109c:	e771      	b.n	8000f82 <__aeabi_dadd+0xfa>
 800109e:	001f      	movs	r7, r3
 80010a0:	4317      	orrs	r7, r2
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x21e>
 80010a4:	e0ad      	b.n	8001202 <__aeabi_dadd+0x37a>
 80010a6:	1e4f      	subs	r7, r1, #1
 80010a8:	46bc      	mov	ip, r7
 80010aa:	2901      	cmp	r1, #1
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x228>
 80010ae:	e182      	b.n	80013b6 <__aeabi_dadd+0x52e>
 80010b0:	4f58      	ldr	r7, [pc, #352]	@ (8001214 <__aeabi_dadd+0x38c>)
 80010b2:	42b9      	cmp	r1, r7
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x230>
 80010b6:	e190      	b.n	80013da <__aeabi_dadd+0x552>
 80010b8:	4661      	mov	r1, ip
 80010ba:	2701      	movs	r7, #1
 80010bc:	2938      	cmp	r1, #56	@ 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x23a>
 80010c0:	e72e      	b.n	8000f20 <__aeabi_dadd+0x98>
 80010c2:	e718      	b.n	8000ef6 <__aeabi_dadd+0x6e>
 80010c4:	4f55      	ldr	r7, [pc, #340]	@ (800121c <__aeabi_dadd+0x394>)
 80010c6:	1c61      	adds	r1, r4, #1
 80010c8:	4239      	tst	r1, r7
 80010ca:	d000      	beq.n	80010ce <__aeabi_dadd+0x246>
 80010cc:	e0d0      	b.n	8001270 <__aeabi_dadd+0x3e8>
 80010ce:	0031      	movs	r1, r6
 80010d0:	4648      	mov	r0, r9
 80010d2:	001f      	movs	r7, r3
 80010d4:	4301      	orrs	r1, r0
 80010d6:	4317      	orrs	r7, r2
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x256>
 80010dc:	e13d      	b.n	800135a <__aeabi_dadd+0x4d2>
 80010de:	2900      	cmp	r1, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dadd+0x25c>
 80010e2:	e1bc      	b.n	800145e <__aeabi_dadd+0x5d6>
 80010e4:	2f00      	cmp	r7, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x262>
 80010e8:	e1bf      	b.n	800146a <__aeabi_dadd+0x5e2>
 80010ea:	464b      	mov	r3, r9
 80010ec:	2100      	movs	r1, #0
 80010ee:	08d8      	lsrs	r0, r3, #3
 80010f0:	0777      	lsls	r7, r6, #29
 80010f2:	4307      	orrs	r7, r0
 80010f4:	08f0      	lsrs	r0, r6, #3
 80010f6:	0306      	lsls	r6, r0, #12
 80010f8:	054c      	lsls	r4, r1, #21
 80010fa:	0b36      	lsrs	r6, r6, #12
 80010fc:	0d64      	lsrs	r4, r4, #21
 80010fe:	e00c      	b.n	800111a <__aeabi_dadd+0x292>
 8001100:	4f44      	ldr	r7, [pc, #272]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001102:	42bc      	cmp	r4, r7
 8001104:	d100      	bne.n	8001108 <__aeabi_dadd+0x280>
 8001106:	e08b      	b.n	8001220 <__aeabi_dadd+0x398>
 8001108:	2701      	movs	r7, #1
 800110a:	2938      	cmp	r1, #56	@ 0x38
 800110c:	dcb2      	bgt.n	8001074 <__aeabi_dadd+0x1ec>
 800110e:	2780      	movs	r7, #128	@ 0x80
 8001110:	043f      	lsls	r7, r7, #16
 8001112:	433b      	orrs	r3, r7
 8001114:	e79c      	b.n	8001050 <__aeabi_dadd+0x1c8>
 8001116:	2600      	movs	r6, #0
 8001118:	2700      	movs	r7, #0
 800111a:	0524      	lsls	r4, r4, #20
 800111c:	4334      	orrs	r4, r6
 800111e:	07ed      	lsls	r5, r5, #31
 8001120:	432c      	orrs	r4, r5
 8001122:	0038      	movs	r0, r7
 8001124:	0021      	movs	r1, r4
 8001126:	b002      	add	sp, #8
 8001128:	bce0      	pop	{r5, r6, r7}
 800112a:	46ba      	mov	sl, r7
 800112c:	46b1      	mov	r9, r6
 800112e:	46a8      	mov	r8, r5
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001132:	077b      	lsls	r3, r7, #29
 8001134:	d004      	beq.n	8001140 <__aeabi_dadd+0x2b8>
 8001136:	230f      	movs	r3, #15
 8001138:	403b      	ands	r3, r7
 800113a:	2b04      	cmp	r3, #4
 800113c:	d000      	beq.n	8001140 <__aeabi_dadd+0x2b8>
 800113e:	e728      	b.n	8000f92 <__aeabi_dadd+0x10a>
 8001140:	08f8      	lsrs	r0, r7, #3
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001144:	0777      	lsls	r7, r6, #29
 8001146:	4307      	orrs	r7, r0
 8001148:	08f0      	lsrs	r0, r6, #3
 800114a:	429c      	cmp	r4, r3
 800114c:	d000      	beq.n	8001150 <__aeabi_dadd+0x2c8>
 800114e:	e24a      	b.n	80015e6 <__aeabi_dadd+0x75e>
 8001150:	003b      	movs	r3, r7
 8001152:	4303      	orrs	r3, r0
 8001154:	d059      	beq.n	800120a <__aeabi_dadd+0x382>
 8001156:	2680      	movs	r6, #128	@ 0x80
 8001158:	0336      	lsls	r6, r6, #12
 800115a:	4306      	orrs	r6, r0
 800115c:	0336      	lsls	r6, r6, #12
 800115e:	4c2d      	ldr	r4, [pc, #180]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001160:	0b36      	lsrs	r6, r6, #12
 8001162:	e7da      	b.n	800111a <__aeabi_dadd+0x292>
 8001164:	2900      	cmp	r1, #0
 8001166:	d061      	beq.n	800122c <__aeabi_dadd+0x3a4>
 8001168:	4641      	mov	r1, r8
 800116a:	1b09      	subs	r1, r1, r4
 800116c:	2c00      	cmp	r4, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x2ea>
 8001170:	e0b9      	b.n	80012e6 <__aeabi_dadd+0x45e>
 8001172:	4c28      	ldr	r4, [pc, #160]	@ (8001214 <__aeabi_dadd+0x38c>)
 8001174:	45a0      	cmp	r8, r4
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x2f2>
 8001178:	e1a5      	b.n	80014c6 <__aeabi_dadd+0x63e>
 800117a:	2701      	movs	r7, #1
 800117c:	2938      	cmp	r1, #56	@ 0x38
 800117e:	dc13      	bgt.n	80011a8 <__aeabi_dadd+0x320>
 8001180:	2480      	movs	r4, #128	@ 0x80
 8001182:	0424      	lsls	r4, r4, #16
 8001184:	4326      	orrs	r6, r4
 8001186:	291f      	cmp	r1, #31
 8001188:	dd00      	ble.n	800118c <__aeabi_dadd+0x304>
 800118a:	e1c8      	b.n	800151e <__aeabi_dadd+0x696>
 800118c:	2420      	movs	r4, #32
 800118e:	0037      	movs	r7, r6
 8001190:	4648      	mov	r0, r9
 8001192:	1a64      	subs	r4, r4, r1
 8001194:	40a7      	lsls	r7, r4
 8001196:	40c8      	lsrs	r0, r1
 8001198:	4307      	orrs	r7, r0
 800119a:	4648      	mov	r0, r9
 800119c:	40a0      	lsls	r0, r4
 800119e:	40ce      	lsrs	r6, r1
 80011a0:	1e44      	subs	r4, r0, #1
 80011a2:	41a0      	sbcs	r0, r4
 80011a4:	199b      	adds	r3, r3, r6
 80011a6:	4307      	orrs	r7, r0
 80011a8:	18bf      	adds	r7, r7, r2
 80011aa:	4297      	cmp	r7, r2
 80011ac:	4192      	sbcs	r2, r2
 80011ae:	4252      	negs	r2, r2
 80011b0:	4644      	mov	r4, r8
 80011b2:	18d6      	adds	r6, r2, r3
 80011b4:	e763      	b.n	800107e <__aeabi_dadd+0x1f6>
 80011b6:	0038      	movs	r0, r7
 80011b8:	f001 fed0 	bl	8002f5c <__clzsi2>
 80011bc:	0003      	movs	r3, r0
 80011be:	3318      	adds	r3, #24
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_dadd+0x33e>
 80011c4:	e6bf      	b.n	8000f46 <__aeabi_dadd+0xbe>
 80011c6:	003a      	movs	r2, r7
 80011c8:	3808      	subs	r0, #8
 80011ca:	4082      	lsls	r2, r0
 80011cc:	429c      	cmp	r4, r3
 80011ce:	dd00      	ble.n	80011d2 <__aeabi_dadd+0x34a>
 80011d0:	e083      	b.n	80012da <__aeabi_dadd+0x452>
 80011d2:	1b1b      	subs	r3, r3, r4
 80011d4:	1c58      	adds	r0, r3, #1
 80011d6:	281f      	cmp	r0, #31
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_dadd+0x354>
 80011da:	e1b4      	b.n	8001546 <__aeabi_dadd+0x6be>
 80011dc:	0017      	movs	r7, r2
 80011de:	3b1f      	subs	r3, #31
 80011e0:	40df      	lsrs	r7, r3
 80011e2:	2820      	cmp	r0, #32
 80011e4:	d005      	beq.n	80011f2 <__aeabi_dadd+0x36a>
 80011e6:	2340      	movs	r3, #64	@ 0x40
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	409a      	lsls	r2, r3
 80011ec:	1e53      	subs	r3, r2, #1
 80011ee:	419a      	sbcs	r2, r3
 80011f0:	4317      	orrs	r7, r2
 80011f2:	2400      	movs	r4, #0
 80011f4:	2f00      	cmp	r7, #0
 80011f6:	d00a      	beq.n	800120e <__aeabi_dadd+0x386>
 80011f8:	077b      	lsls	r3, r7, #29
 80011fa:	d000      	beq.n	80011fe <__aeabi_dadd+0x376>
 80011fc:	e6c4      	b.n	8000f88 <__aeabi_dadd+0x100>
 80011fe:	0026      	movs	r6, r4
 8001200:	e79e      	b.n	8001140 <__aeabi_dadd+0x2b8>
 8001202:	464b      	mov	r3, r9
 8001204:	000c      	movs	r4, r1
 8001206:	08d8      	lsrs	r0, r3, #3
 8001208:	e79b      	b.n	8001142 <__aeabi_dadd+0x2ba>
 800120a:	2700      	movs	r7, #0
 800120c:	4c01      	ldr	r4, [pc, #4]	@ (8001214 <__aeabi_dadd+0x38c>)
 800120e:	2600      	movs	r6, #0
 8001210:	e783      	b.n	800111a <__aeabi_dadd+0x292>
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	000007ff 	.word	0x000007ff
 8001218:	ff7fffff 	.word	0xff7fffff
 800121c:	000007fe 	.word	0x000007fe
 8001220:	464b      	mov	r3, r9
 8001222:	0777      	lsls	r7, r6, #29
 8001224:	08d8      	lsrs	r0, r3, #3
 8001226:	4307      	orrs	r7, r0
 8001228:	08f0      	lsrs	r0, r6, #3
 800122a:	e791      	b.n	8001150 <__aeabi_dadd+0x2c8>
 800122c:	4fcd      	ldr	r7, [pc, #820]	@ (8001564 <__aeabi_dadd+0x6dc>)
 800122e:	1c61      	adds	r1, r4, #1
 8001230:	4239      	tst	r1, r7
 8001232:	d16b      	bne.n	800130c <__aeabi_dadd+0x484>
 8001234:	0031      	movs	r1, r6
 8001236:	4648      	mov	r0, r9
 8001238:	4301      	orrs	r1, r0
 800123a:	2c00      	cmp	r4, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_dadd+0x3b8>
 800123e:	e14b      	b.n	80014d8 <__aeabi_dadd+0x650>
 8001240:	001f      	movs	r7, r3
 8001242:	4317      	orrs	r7, r2
 8001244:	2900      	cmp	r1, #0
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x3c2>
 8001248:	e181      	b.n	800154e <__aeabi_dadd+0x6c6>
 800124a:	2f00      	cmp	r7, #0
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x3c8>
 800124e:	e74c      	b.n	80010ea <__aeabi_dadd+0x262>
 8001250:	444a      	add	r2, r9
 8001252:	454a      	cmp	r2, r9
 8001254:	4180      	sbcs	r0, r0
 8001256:	18f6      	adds	r6, r6, r3
 8001258:	4240      	negs	r0, r0
 800125a:	1836      	adds	r6, r6, r0
 800125c:	0233      	lsls	r3, r6, #8
 800125e:	d500      	bpl.n	8001262 <__aeabi_dadd+0x3da>
 8001260:	e1b0      	b.n	80015c4 <__aeabi_dadd+0x73c>
 8001262:	0017      	movs	r7, r2
 8001264:	4691      	mov	r9, r2
 8001266:	4337      	orrs	r7, r6
 8001268:	d000      	beq.n	800126c <__aeabi_dadd+0x3e4>
 800126a:	e73e      	b.n	80010ea <__aeabi_dadd+0x262>
 800126c:	2600      	movs	r6, #0
 800126e:	e754      	b.n	800111a <__aeabi_dadd+0x292>
 8001270:	4649      	mov	r1, r9
 8001272:	1a89      	subs	r1, r1, r2
 8001274:	4688      	mov	r8, r1
 8001276:	45c1      	cmp	r9, r8
 8001278:	41bf      	sbcs	r7, r7
 800127a:	1af1      	subs	r1, r6, r3
 800127c:	427f      	negs	r7, r7
 800127e:	1bc9      	subs	r1, r1, r7
 8001280:	020f      	lsls	r7, r1, #8
 8001282:	d461      	bmi.n	8001348 <__aeabi_dadd+0x4c0>
 8001284:	4647      	mov	r7, r8
 8001286:	430f      	orrs	r7, r1
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x404>
 800128a:	e0bd      	b.n	8001408 <__aeabi_dadd+0x580>
 800128c:	000e      	movs	r6, r1
 800128e:	4647      	mov	r7, r8
 8001290:	e651      	b.n	8000f36 <__aeabi_dadd+0xae>
 8001292:	4cb5      	ldr	r4, [pc, #724]	@ (8001568 <__aeabi_dadd+0x6e0>)
 8001294:	45a0      	cmp	r8, r4
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x412>
 8001298:	e100      	b.n	800149c <__aeabi_dadd+0x614>
 800129a:	2701      	movs	r7, #1
 800129c:	2938      	cmp	r1, #56	@ 0x38
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dadd+0x41a>
 80012a0:	e6b8      	b.n	8001014 <__aeabi_dadd+0x18c>
 80012a2:	2480      	movs	r4, #128	@ 0x80
 80012a4:	0424      	lsls	r4, r4, #16
 80012a6:	4326      	orrs	r6, r4
 80012a8:	e6a3      	b.n	8000ff2 <__aeabi_dadd+0x16a>
 80012aa:	4eb0      	ldr	r6, [pc, #704]	@ (800156c <__aeabi_dadd+0x6e4>)
 80012ac:	1ae4      	subs	r4, r4, r3
 80012ae:	4016      	ands	r6, r2
 80012b0:	077b      	lsls	r3, r7, #29
 80012b2:	d000      	beq.n	80012b6 <__aeabi_dadd+0x42e>
 80012b4:	e73f      	b.n	8001136 <__aeabi_dadd+0x2ae>
 80012b6:	e743      	b.n	8001140 <__aeabi_dadd+0x2b8>
 80012b8:	000f      	movs	r7, r1
 80012ba:	0018      	movs	r0, r3
 80012bc:	3f20      	subs	r7, #32
 80012be:	40f8      	lsrs	r0, r7
 80012c0:	4684      	mov	ip, r0
 80012c2:	2920      	cmp	r1, #32
 80012c4:	d003      	beq.n	80012ce <__aeabi_dadd+0x446>
 80012c6:	2740      	movs	r7, #64	@ 0x40
 80012c8:	1a79      	subs	r1, r7, r1
 80012ca:	408b      	lsls	r3, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	1e53      	subs	r3, r2, #1
 80012d0:	419a      	sbcs	r2, r3
 80012d2:	4663      	mov	r3, ip
 80012d4:	0017      	movs	r7, r2
 80012d6:	431f      	orrs	r7, r3
 80012d8:	e622      	b.n	8000f20 <__aeabi_dadd+0x98>
 80012da:	48a4      	ldr	r0, [pc, #656]	@ (800156c <__aeabi_dadd+0x6e4>)
 80012dc:	1ae1      	subs	r1, r4, r3
 80012de:	4010      	ands	r0, r2
 80012e0:	0747      	lsls	r7, r0, #29
 80012e2:	08c0      	lsrs	r0, r0, #3
 80012e4:	e707      	b.n	80010f6 <__aeabi_dadd+0x26e>
 80012e6:	0034      	movs	r4, r6
 80012e8:	4648      	mov	r0, r9
 80012ea:	4304      	orrs	r4, r0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x468>
 80012ee:	e0fa      	b.n	80014e6 <__aeabi_dadd+0x65e>
 80012f0:	1e4c      	subs	r4, r1, #1
 80012f2:	2901      	cmp	r1, #1
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x470>
 80012f6:	e0d7      	b.n	80014a8 <__aeabi_dadd+0x620>
 80012f8:	4f9b      	ldr	r7, [pc, #620]	@ (8001568 <__aeabi_dadd+0x6e0>)
 80012fa:	42b9      	cmp	r1, r7
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x478>
 80012fe:	e0e2      	b.n	80014c6 <__aeabi_dadd+0x63e>
 8001300:	2701      	movs	r7, #1
 8001302:	2c38      	cmp	r4, #56	@ 0x38
 8001304:	dd00      	ble.n	8001308 <__aeabi_dadd+0x480>
 8001306:	e74f      	b.n	80011a8 <__aeabi_dadd+0x320>
 8001308:	0021      	movs	r1, r4
 800130a:	e73c      	b.n	8001186 <__aeabi_dadd+0x2fe>
 800130c:	4c96      	ldr	r4, [pc, #600]	@ (8001568 <__aeabi_dadd+0x6e0>)
 800130e:	42a1      	cmp	r1, r4
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x48c>
 8001312:	e0dd      	b.n	80014d0 <__aeabi_dadd+0x648>
 8001314:	444a      	add	r2, r9
 8001316:	454a      	cmp	r2, r9
 8001318:	4180      	sbcs	r0, r0
 800131a:	18f3      	adds	r3, r6, r3
 800131c:	4240      	negs	r0, r0
 800131e:	1818      	adds	r0, r3, r0
 8001320:	07c7      	lsls	r7, r0, #31
 8001322:	0852      	lsrs	r2, r2, #1
 8001324:	4317      	orrs	r7, r2
 8001326:	0846      	lsrs	r6, r0, #1
 8001328:	0752      	lsls	r2, r2, #29
 800132a:	d005      	beq.n	8001338 <__aeabi_dadd+0x4b0>
 800132c:	220f      	movs	r2, #15
 800132e:	000c      	movs	r4, r1
 8001330:	403a      	ands	r2, r7
 8001332:	2a04      	cmp	r2, #4
 8001334:	d000      	beq.n	8001338 <__aeabi_dadd+0x4b0>
 8001336:	e62c      	b.n	8000f92 <__aeabi_dadd+0x10a>
 8001338:	0776      	lsls	r6, r6, #29
 800133a:	08ff      	lsrs	r7, r7, #3
 800133c:	4337      	orrs	r7, r6
 800133e:	0900      	lsrs	r0, r0, #4
 8001340:	e6d9      	b.n	80010f6 <__aeabi_dadd+0x26e>
 8001342:	2700      	movs	r7, #0
 8001344:	2600      	movs	r6, #0
 8001346:	e6e8      	b.n	800111a <__aeabi_dadd+0x292>
 8001348:	4649      	mov	r1, r9
 800134a:	1a57      	subs	r7, r2, r1
 800134c:	42ba      	cmp	r2, r7
 800134e:	4192      	sbcs	r2, r2
 8001350:	1b9e      	subs	r6, r3, r6
 8001352:	4252      	negs	r2, r2
 8001354:	4665      	mov	r5, ip
 8001356:	1ab6      	subs	r6, r6, r2
 8001358:	e5ed      	b.n	8000f36 <__aeabi_dadd+0xae>
 800135a:	2900      	cmp	r1, #0
 800135c:	d000      	beq.n	8001360 <__aeabi_dadd+0x4d8>
 800135e:	e0c6      	b.n	80014ee <__aeabi_dadd+0x666>
 8001360:	2f00      	cmp	r7, #0
 8001362:	d167      	bne.n	8001434 <__aeabi_dadd+0x5ac>
 8001364:	2680      	movs	r6, #128	@ 0x80
 8001366:	2500      	movs	r5, #0
 8001368:	4c7f      	ldr	r4, [pc, #508]	@ (8001568 <__aeabi_dadd+0x6e0>)
 800136a:	0336      	lsls	r6, r6, #12
 800136c:	e6d5      	b.n	800111a <__aeabi_dadd+0x292>
 800136e:	4665      	mov	r5, ip
 8001370:	000c      	movs	r4, r1
 8001372:	001e      	movs	r6, r3
 8001374:	08d0      	lsrs	r0, r2, #3
 8001376:	e6e4      	b.n	8001142 <__aeabi_dadd+0x2ba>
 8001378:	444a      	add	r2, r9
 800137a:	454a      	cmp	r2, r9
 800137c:	4180      	sbcs	r0, r0
 800137e:	18f3      	adds	r3, r6, r3
 8001380:	4240      	negs	r0, r0
 8001382:	1818      	adds	r0, r3, r0
 8001384:	0011      	movs	r1, r2
 8001386:	0203      	lsls	r3, r0, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0x504>
 800138a:	e096      	b.n	80014ba <__aeabi_dadd+0x632>
 800138c:	4b77      	ldr	r3, [pc, #476]	@ (800156c <__aeabi_dadd+0x6e4>)
 800138e:	0849      	lsrs	r1, r1, #1
 8001390:	4018      	ands	r0, r3
 8001392:	07c3      	lsls	r3, r0, #31
 8001394:	430b      	orrs	r3, r1
 8001396:	0844      	lsrs	r4, r0, #1
 8001398:	0749      	lsls	r1, r1, #29
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x516>
 800139c:	e129      	b.n	80015f2 <__aeabi_dadd+0x76a>
 800139e:	220f      	movs	r2, #15
 80013a0:	401a      	ands	r2, r3
 80013a2:	2a04      	cmp	r2, #4
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x520>
 80013a6:	e0ea      	b.n	800157e <__aeabi_dadd+0x6f6>
 80013a8:	1d1f      	adds	r7, r3, #4
 80013aa:	429f      	cmp	r7, r3
 80013ac:	41b6      	sbcs	r6, r6
 80013ae:	4276      	negs	r6, r6
 80013b0:	1936      	adds	r6, r6, r4
 80013b2:	2402      	movs	r4, #2
 80013b4:	e6c4      	b.n	8001140 <__aeabi_dadd+0x2b8>
 80013b6:	4649      	mov	r1, r9
 80013b8:	1a8f      	subs	r7, r1, r2
 80013ba:	45b9      	cmp	r9, r7
 80013bc:	4180      	sbcs	r0, r0
 80013be:	1af6      	subs	r6, r6, r3
 80013c0:	4240      	negs	r0, r0
 80013c2:	1a36      	subs	r6, r6, r0
 80013c4:	0233      	lsls	r3, r6, #8
 80013c6:	d406      	bmi.n	80013d6 <__aeabi_dadd+0x54e>
 80013c8:	0773      	lsls	r3, r6, #29
 80013ca:	08ff      	lsrs	r7, r7, #3
 80013cc:	2101      	movs	r1, #1
 80013ce:	431f      	orrs	r7, r3
 80013d0:	08f0      	lsrs	r0, r6, #3
 80013d2:	e690      	b.n	80010f6 <__aeabi_dadd+0x26e>
 80013d4:	4665      	mov	r5, ip
 80013d6:	2401      	movs	r4, #1
 80013d8:	e5ab      	b.n	8000f32 <__aeabi_dadd+0xaa>
 80013da:	464b      	mov	r3, r9
 80013dc:	0777      	lsls	r7, r6, #29
 80013de:	08d8      	lsrs	r0, r3, #3
 80013e0:	4307      	orrs	r7, r0
 80013e2:	08f0      	lsrs	r0, r6, #3
 80013e4:	e6b4      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80013e6:	000f      	movs	r7, r1
 80013e8:	0018      	movs	r0, r3
 80013ea:	3f20      	subs	r7, #32
 80013ec:	40f8      	lsrs	r0, r7
 80013ee:	4684      	mov	ip, r0
 80013f0:	2920      	cmp	r1, #32
 80013f2:	d003      	beq.n	80013fc <__aeabi_dadd+0x574>
 80013f4:	2740      	movs	r7, #64	@ 0x40
 80013f6:	1a79      	subs	r1, r7, r1
 80013f8:	408b      	lsls	r3, r1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	1e53      	subs	r3, r2, #1
 80013fe:	419a      	sbcs	r2, r3
 8001400:	4663      	mov	r3, ip
 8001402:	0017      	movs	r7, r2
 8001404:	431f      	orrs	r7, r3
 8001406:	e635      	b.n	8001074 <__aeabi_dadd+0x1ec>
 8001408:	2500      	movs	r5, #0
 800140a:	2400      	movs	r4, #0
 800140c:	2600      	movs	r6, #0
 800140e:	e684      	b.n	800111a <__aeabi_dadd+0x292>
 8001410:	000c      	movs	r4, r1
 8001412:	0035      	movs	r5, r6
 8001414:	3c20      	subs	r4, #32
 8001416:	40e5      	lsrs	r5, r4
 8001418:	2920      	cmp	r1, #32
 800141a:	d005      	beq.n	8001428 <__aeabi_dadd+0x5a0>
 800141c:	2440      	movs	r4, #64	@ 0x40
 800141e:	1a61      	subs	r1, r4, r1
 8001420:	408e      	lsls	r6, r1
 8001422:	4649      	mov	r1, r9
 8001424:	4331      	orrs	r1, r6
 8001426:	4689      	mov	r9, r1
 8001428:	4648      	mov	r0, r9
 800142a:	1e41      	subs	r1, r0, #1
 800142c:	4188      	sbcs	r0, r1
 800142e:	0007      	movs	r7, r0
 8001430:	432f      	orrs	r7, r5
 8001432:	e5ef      	b.n	8001014 <__aeabi_dadd+0x18c>
 8001434:	08d2      	lsrs	r2, r2, #3
 8001436:	075f      	lsls	r7, r3, #29
 8001438:	4665      	mov	r5, ip
 800143a:	4317      	orrs	r7, r2
 800143c:	08d8      	lsrs	r0, r3, #3
 800143e:	e687      	b.n	8001150 <__aeabi_dadd+0x2c8>
 8001440:	1a17      	subs	r7, r2, r0
 8001442:	42ba      	cmp	r2, r7
 8001444:	4192      	sbcs	r2, r2
 8001446:	1b9e      	subs	r6, r3, r6
 8001448:	4252      	negs	r2, r2
 800144a:	1ab6      	subs	r6, r6, r2
 800144c:	0233      	lsls	r3, r6, #8
 800144e:	d4c1      	bmi.n	80013d4 <__aeabi_dadd+0x54c>
 8001450:	0773      	lsls	r3, r6, #29
 8001452:	08ff      	lsrs	r7, r7, #3
 8001454:	4665      	mov	r5, ip
 8001456:	2101      	movs	r1, #1
 8001458:	431f      	orrs	r7, r3
 800145a:	08f0      	lsrs	r0, r6, #3
 800145c:	e64b      	b.n	80010f6 <__aeabi_dadd+0x26e>
 800145e:	2f00      	cmp	r7, #0
 8001460:	d07b      	beq.n	800155a <__aeabi_dadd+0x6d2>
 8001462:	4665      	mov	r5, ip
 8001464:	001e      	movs	r6, r3
 8001466:	4691      	mov	r9, r2
 8001468:	e63f      	b.n	80010ea <__aeabi_dadd+0x262>
 800146a:	1a81      	subs	r1, r0, r2
 800146c:	4688      	mov	r8, r1
 800146e:	45c1      	cmp	r9, r8
 8001470:	41a4      	sbcs	r4, r4
 8001472:	1af1      	subs	r1, r6, r3
 8001474:	4264      	negs	r4, r4
 8001476:	1b09      	subs	r1, r1, r4
 8001478:	2480      	movs	r4, #128	@ 0x80
 800147a:	0424      	lsls	r4, r4, #16
 800147c:	4221      	tst	r1, r4
 800147e:	d077      	beq.n	8001570 <__aeabi_dadd+0x6e8>
 8001480:	1a10      	subs	r0, r2, r0
 8001482:	4282      	cmp	r2, r0
 8001484:	4192      	sbcs	r2, r2
 8001486:	0007      	movs	r7, r0
 8001488:	1b9e      	subs	r6, r3, r6
 800148a:	4252      	negs	r2, r2
 800148c:	1ab6      	subs	r6, r6, r2
 800148e:	4337      	orrs	r7, r6
 8001490:	d000      	beq.n	8001494 <__aeabi_dadd+0x60c>
 8001492:	e0a0      	b.n	80015d6 <__aeabi_dadd+0x74e>
 8001494:	4665      	mov	r5, ip
 8001496:	2400      	movs	r4, #0
 8001498:	2600      	movs	r6, #0
 800149a:	e63e      	b.n	800111a <__aeabi_dadd+0x292>
 800149c:	075f      	lsls	r7, r3, #29
 800149e:	08d2      	lsrs	r2, r2, #3
 80014a0:	4665      	mov	r5, ip
 80014a2:	4317      	orrs	r7, r2
 80014a4:	08d8      	lsrs	r0, r3, #3
 80014a6:	e653      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80014a8:	1881      	adds	r1, r0, r2
 80014aa:	4291      	cmp	r1, r2
 80014ac:	4192      	sbcs	r2, r2
 80014ae:	18f0      	adds	r0, r6, r3
 80014b0:	4252      	negs	r2, r2
 80014b2:	1880      	adds	r0, r0, r2
 80014b4:	0203      	lsls	r3, r0, #8
 80014b6:	d500      	bpl.n	80014ba <__aeabi_dadd+0x632>
 80014b8:	e768      	b.n	800138c <__aeabi_dadd+0x504>
 80014ba:	0747      	lsls	r7, r0, #29
 80014bc:	08c9      	lsrs	r1, r1, #3
 80014be:	430f      	orrs	r7, r1
 80014c0:	08c0      	lsrs	r0, r0, #3
 80014c2:	2101      	movs	r1, #1
 80014c4:	e617      	b.n	80010f6 <__aeabi_dadd+0x26e>
 80014c6:	08d2      	lsrs	r2, r2, #3
 80014c8:	075f      	lsls	r7, r3, #29
 80014ca:	4317      	orrs	r7, r2
 80014cc:	08d8      	lsrs	r0, r3, #3
 80014ce:	e63f      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80014d0:	000c      	movs	r4, r1
 80014d2:	2600      	movs	r6, #0
 80014d4:	2700      	movs	r7, #0
 80014d6:	e620      	b.n	800111a <__aeabi_dadd+0x292>
 80014d8:	2900      	cmp	r1, #0
 80014da:	d156      	bne.n	800158a <__aeabi_dadd+0x702>
 80014dc:	075f      	lsls	r7, r3, #29
 80014de:	08d2      	lsrs	r2, r2, #3
 80014e0:	4317      	orrs	r7, r2
 80014e2:	08d8      	lsrs	r0, r3, #3
 80014e4:	e634      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80014e6:	000c      	movs	r4, r1
 80014e8:	001e      	movs	r6, r3
 80014ea:	08d0      	lsrs	r0, r2, #3
 80014ec:	e629      	b.n	8001142 <__aeabi_dadd+0x2ba>
 80014ee:	08c1      	lsrs	r1, r0, #3
 80014f0:	0770      	lsls	r0, r6, #29
 80014f2:	4301      	orrs	r1, r0
 80014f4:	08f0      	lsrs	r0, r6, #3
 80014f6:	2f00      	cmp	r7, #0
 80014f8:	d062      	beq.n	80015c0 <__aeabi_dadd+0x738>
 80014fa:	2480      	movs	r4, #128	@ 0x80
 80014fc:	0324      	lsls	r4, r4, #12
 80014fe:	4220      	tst	r0, r4
 8001500:	d007      	beq.n	8001512 <__aeabi_dadd+0x68a>
 8001502:	08de      	lsrs	r6, r3, #3
 8001504:	4226      	tst	r6, r4
 8001506:	d104      	bne.n	8001512 <__aeabi_dadd+0x68a>
 8001508:	4665      	mov	r5, ip
 800150a:	0030      	movs	r0, r6
 800150c:	08d1      	lsrs	r1, r2, #3
 800150e:	075b      	lsls	r3, r3, #29
 8001510:	4319      	orrs	r1, r3
 8001512:	0f4f      	lsrs	r7, r1, #29
 8001514:	00c9      	lsls	r1, r1, #3
 8001516:	08c9      	lsrs	r1, r1, #3
 8001518:	077f      	lsls	r7, r7, #29
 800151a:	430f      	orrs	r7, r1
 800151c:	e618      	b.n	8001150 <__aeabi_dadd+0x2c8>
 800151e:	000c      	movs	r4, r1
 8001520:	0030      	movs	r0, r6
 8001522:	3c20      	subs	r4, #32
 8001524:	40e0      	lsrs	r0, r4
 8001526:	4684      	mov	ip, r0
 8001528:	2920      	cmp	r1, #32
 800152a:	d005      	beq.n	8001538 <__aeabi_dadd+0x6b0>
 800152c:	2440      	movs	r4, #64	@ 0x40
 800152e:	1a61      	subs	r1, r4, r1
 8001530:	408e      	lsls	r6, r1
 8001532:	4649      	mov	r1, r9
 8001534:	4331      	orrs	r1, r6
 8001536:	4689      	mov	r9, r1
 8001538:	4648      	mov	r0, r9
 800153a:	1e41      	subs	r1, r0, #1
 800153c:	4188      	sbcs	r0, r1
 800153e:	4661      	mov	r1, ip
 8001540:	0007      	movs	r7, r0
 8001542:	430f      	orrs	r7, r1
 8001544:	e630      	b.n	80011a8 <__aeabi_dadd+0x320>
 8001546:	2120      	movs	r1, #32
 8001548:	2700      	movs	r7, #0
 800154a:	1a09      	subs	r1, r1, r0
 800154c:	e50e      	b.n	8000f6c <__aeabi_dadd+0xe4>
 800154e:	001e      	movs	r6, r3
 8001550:	2f00      	cmp	r7, #0
 8001552:	d000      	beq.n	8001556 <__aeabi_dadd+0x6ce>
 8001554:	e522      	b.n	8000f9c <__aeabi_dadd+0x114>
 8001556:	2400      	movs	r4, #0
 8001558:	e758      	b.n	800140c <__aeabi_dadd+0x584>
 800155a:	2500      	movs	r5, #0
 800155c:	2400      	movs	r4, #0
 800155e:	2600      	movs	r6, #0
 8001560:	e5db      	b.n	800111a <__aeabi_dadd+0x292>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	000007fe 	.word	0x000007fe
 8001568:	000007ff 	.word	0x000007ff
 800156c:	ff7fffff 	.word	0xff7fffff
 8001570:	4647      	mov	r7, r8
 8001572:	430f      	orrs	r7, r1
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x6f0>
 8001576:	e747      	b.n	8001408 <__aeabi_dadd+0x580>
 8001578:	000e      	movs	r6, r1
 800157a:	46c1      	mov	r9, r8
 800157c:	e5b5      	b.n	80010ea <__aeabi_dadd+0x262>
 800157e:	08df      	lsrs	r7, r3, #3
 8001580:	0764      	lsls	r4, r4, #29
 8001582:	2102      	movs	r1, #2
 8001584:	4327      	orrs	r7, r4
 8001586:	0900      	lsrs	r0, r0, #4
 8001588:	e5b5      	b.n	80010f6 <__aeabi_dadd+0x26e>
 800158a:	0019      	movs	r1, r3
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	0777      	lsls	r7, r6, #29
 8001590:	4307      	orrs	r7, r0
 8001592:	4311      	orrs	r1, r2
 8001594:	08f0      	lsrs	r0, r6, #3
 8001596:	2900      	cmp	r1, #0
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x714>
 800159a:	e5d9      	b.n	8001150 <__aeabi_dadd+0x2c8>
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0309      	lsls	r1, r1, #12
 80015a0:	4208      	tst	r0, r1
 80015a2:	d007      	beq.n	80015b4 <__aeabi_dadd+0x72c>
 80015a4:	08dc      	lsrs	r4, r3, #3
 80015a6:	420c      	tst	r4, r1
 80015a8:	d104      	bne.n	80015b4 <__aeabi_dadd+0x72c>
 80015aa:	08d2      	lsrs	r2, r2, #3
 80015ac:	075b      	lsls	r3, r3, #29
 80015ae:	431a      	orrs	r2, r3
 80015b0:	0017      	movs	r7, r2
 80015b2:	0020      	movs	r0, r4
 80015b4:	0f7b      	lsrs	r3, r7, #29
 80015b6:	00ff      	lsls	r7, r7, #3
 80015b8:	08ff      	lsrs	r7, r7, #3
 80015ba:	075b      	lsls	r3, r3, #29
 80015bc:	431f      	orrs	r7, r3
 80015be:	e5c7      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80015c0:	000f      	movs	r7, r1
 80015c2:	e5c5      	b.n	8001150 <__aeabi_dadd+0x2c8>
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <__aeabi_dadd+0x788>)
 80015c6:	08d2      	lsrs	r2, r2, #3
 80015c8:	4033      	ands	r3, r6
 80015ca:	075f      	lsls	r7, r3, #29
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	2401      	movs	r4, #1
 80015d0:	4317      	orrs	r7, r2
 80015d2:	0b1e      	lsrs	r6, r3, #12
 80015d4:	e5a1      	b.n	800111a <__aeabi_dadd+0x292>
 80015d6:	4226      	tst	r6, r4
 80015d8:	d012      	beq.n	8001600 <__aeabi_dadd+0x778>
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <__aeabi_dadd+0x788>)
 80015dc:	4665      	mov	r5, ip
 80015de:	0002      	movs	r2, r0
 80015e0:	2401      	movs	r4, #1
 80015e2:	401e      	ands	r6, r3
 80015e4:	e4e6      	b.n	8000fb4 <__aeabi_dadd+0x12c>
 80015e6:	0021      	movs	r1, r4
 80015e8:	e585      	b.n	80010f6 <__aeabi_dadd+0x26e>
 80015ea:	0017      	movs	r7, r2
 80015ec:	e5a8      	b.n	8001140 <__aeabi_dadd+0x2b8>
 80015ee:	003a      	movs	r2, r7
 80015f0:	e4d4      	b.n	8000f9c <__aeabi_dadd+0x114>
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	0764      	lsls	r4, r4, #29
 80015f6:	431c      	orrs	r4, r3
 80015f8:	0027      	movs	r7, r4
 80015fa:	2102      	movs	r1, #2
 80015fc:	0900      	lsrs	r0, r0, #4
 80015fe:	e57a      	b.n	80010f6 <__aeabi_dadd+0x26e>
 8001600:	08c0      	lsrs	r0, r0, #3
 8001602:	0777      	lsls	r7, r6, #29
 8001604:	4307      	orrs	r7, r0
 8001606:	4665      	mov	r5, ip
 8001608:	2100      	movs	r1, #0
 800160a:	08f0      	lsrs	r0, r6, #3
 800160c:	e573      	b.n	80010f6 <__aeabi_dadd+0x26e>
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	ff7fffff 	.word	0xff7fffff

08001614 <__aeabi_ddiv>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	46de      	mov	lr, fp
 8001618:	4645      	mov	r5, r8
 800161a:	4657      	mov	r7, sl
 800161c:	464e      	mov	r6, r9
 800161e:	b5e0      	push	{r5, r6, r7, lr}
 8001620:	b087      	sub	sp, #28
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	030b      	lsls	r3, r1, #12
 8001628:	0b1b      	lsrs	r3, r3, #12
 800162a:	469b      	mov	fp, r3
 800162c:	0fca      	lsrs	r2, r1, #31
 800162e:	004b      	lsls	r3, r1, #1
 8001630:	0004      	movs	r4, r0
 8001632:	4680      	mov	r8, r0
 8001634:	0d5b      	lsrs	r3, r3, #21
 8001636:	9202      	str	r2, [sp, #8]
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x28>
 800163a:	e098      	b.n	800176e <__aeabi_ddiv+0x15a>
 800163c:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <__aeabi_ddiv+0x21c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d037      	beq.n	80016b2 <__aeabi_ddiv+0x9e>
 8001642:	4659      	mov	r1, fp
 8001644:	0f42      	lsrs	r2, r0, #29
 8001646:	00c9      	lsls	r1, r1, #3
 8001648:	430a      	orrs	r2, r1
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	0409      	lsls	r1, r1, #16
 800164e:	4311      	orrs	r1, r2
 8001650:	00c2      	lsls	r2, r0, #3
 8001652:	4690      	mov	r8, r2
 8001654:	4a77      	ldr	r2, [pc, #476]	@ (8001834 <__aeabi_ddiv+0x220>)
 8001656:	4689      	mov	r9, r1
 8001658:	4692      	mov	sl, r2
 800165a:	449a      	add	sl, r3
 800165c:	2300      	movs	r3, #0
 800165e:	2400      	movs	r4, #0
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	9e00      	ldr	r6, [sp, #0]
 8001664:	9f01      	ldr	r7, [sp, #4]
 8001666:	033b      	lsls	r3, r7, #12
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	469b      	mov	fp, r3
 800166c:	007b      	lsls	r3, r7, #1
 800166e:	0030      	movs	r0, r6
 8001670:	0d5b      	lsrs	r3, r3, #21
 8001672:	0ffd      	lsrs	r5, r7, #31
 8001674:	2b00      	cmp	r3, #0
 8001676:	d059      	beq.n	800172c <__aeabi_ddiv+0x118>
 8001678:	4a6d      	ldr	r2, [pc, #436]	@ (8001830 <__aeabi_ddiv+0x21c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d048      	beq.n	8001710 <__aeabi_ddiv+0xfc>
 800167e:	4659      	mov	r1, fp
 8001680:	0f72      	lsrs	r2, r6, #29
 8001682:	00c9      	lsls	r1, r1, #3
 8001684:	430a      	orrs	r2, r1
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0409      	lsls	r1, r1, #16
 800168a:	4311      	orrs	r1, r2
 800168c:	468b      	mov	fp, r1
 800168e:	4969      	ldr	r1, [pc, #420]	@ (8001834 <__aeabi_ddiv+0x220>)
 8001690:	00f2      	lsls	r2, r6, #3
 8001692:	468c      	mov	ip, r1
 8001694:	4651      	mov	r1, sl
 8001696:	4463      	add	r3, ip
 8001698:	1acb      	subs	r3, r1, r3
 800169a:	469a      	mov	sl, r3
 800169c:	2100      	movs	r1, #0
 800169e:	9e02      	ldr	r6, [sp, #8]
 80016a0:	406e      	eors	r6, r5
 80016a2:	b2f6      	uxtb	r6, r6
 80016a4:	2c0f      	cmp	r4, #15
 80016a6:	d900      	bls.n	80016aa <__aeabi_ddiv+0x96>
 80016a8:	e0ce      	b.n	8001848 <__aeabi_ddiv+0x234>
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <__aeabi_ddiv+0x224>)
 80016ac:	00a4      	lsls	r4, r4, #2
 80016ae:	591b      	ldr	r3, [r3, r4]
 80016b0:	469f      	mov	pc, r3
 80016b2:	465a      	mov	r2, fp
 80016b4:	4302      	orrs	r2, r0
 80016b6:	4691      	mov	r9, r2
 80016b8:	d000      	beq.n	80016bc <__aeabi_ddiv+0xa8>
 80016ba:	e090      	b.n	80017de <__aeabi_ddiv+0x1ca>
 80016bc:	469a      	mov	sl, r3
 80016be:	2302      	movs	r3, #2
 80016c0:	4690      	mov	r8, r2
 80016c2:	2408      	movs	r4, #8
 80016c4:	9303      	str	r3, [sp, #12]
 80016c6:	e7cc      	b.n	8001662 <__aeabi_ddiv+0x4e>
 80016c8:	46cb      	mov	fp, r9
 80016ca:	4642      	mov	r2, r8
 80016cc:	9d02      	ldr	r5, [sp, #8]
 80016ce:	9903      	ldr	r1, [sp, #12]
 80016d0:	2902      	cmp	r1, #2
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0xc2>
 80016d4:	e1de      	b.n	8001a94 <__aeabi_ddiv+0x480>
 80016d6:	2903      	cmp	r1, #3
 80016d8:	d100      	bne.n	80016dc <__aeabi_ddiv+0xc8>
 80016da:	e08d      	b.n	80017f8 <__aeabi_ddiv+0x1e4>
 80016dc:	2901      	cmp	r1, #1
 80016de:	d000      	beq.n	80016e2 <__aeabi_ddiv+0xce>
 80016e0:	e179      	b.n	80019d6 <__aeabi_ddiv+0x3c2>
 80016e2:	002e      	movs	r6, r5
 80016e4:	2200      	movs	r2, #0
 80016e6:	2300      	movs	r3, #0
 80016e8:	2400      	movs	r4, #0
 80016ea:	4690      	mov	r8, r2
 80016ec:	051b      	lsls	r3, r3, #20
 80016ee:	4323      	orrs	r3, r4
 80016f0:	07f6      	lsls	r6, r6, #31
 80016f2:	4333      	orrs	r3, r6
 80016f4:	4640      	mov	r0, r8
 80016f6:	0019      	movs	r1, r3
 80016f8:	b007      	add	sp, #28
 80016fa:	bcf0      	pop	{r4, r5, r6, r7}
 80016fc:	46bb      	mov	fp, r7
 80016fe:	46b2      	mov	sl, r6
 8001700:	46a9      	mov	r9, r5
 8001702:	46a0      	mov	r8, r4
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	2200      	movs	r2, #0
 8001708:	2400      	movs	r4, #0
 800170a:	4690      	mov	r8, r2
 800170c:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <__aeabi_ddiv+0x21c>)
 800170e:	e7ed      	b.n	80016ec <__aeabi_ddiv+0xd8>
 8001710:	465a      	mov	r2, fp
 8001712:	9b00      	ldr	r3, [sp, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <__aeabi_ddiv+0x228>)
 8001718:	469c      	mov	ip, r3
 800171a:	44e2      	add	sl, ip
 800171c:	2a00      	cmp	r2, #0
 800171e:	d159      	bne.n	80017d4 <__aeabi_ddiv+0x1c0>
 8001720:	2302      	movs	r3, #2
 8001722:	431c      	orrs	r4, r3
 8001724:	2300      	movs	r3, #0
 8001726:	2102      	movs	r1, #2
 8001728:	469b      	mov	fp, r3
 800172a:	e7b8      	b.n	800169e <__aeabi_ddiv+0x8a>
 800172c:	465a      	mov	r2, fp
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	d049      	beq.n	80017c8 <__aeabi_ddiv+0x1b4>
 8001734:	465b      	mov	r3, fp
 8001736:	2b00      	cmp	r3, #0
 8001738:	d100      	bne.n	800173c <__aeabi_ddiv+0x128>
 800173a:	e19c      	b.n	8001a76 <__aeabi_ddiv+0x462>
 800173c:	4658      	mov	r0, fp
 800173e:	f001 fc0d 	bl	8002f5c <__clzsi2>
 8001742:	0002      	movs	r2, r0
 8001744:	0003      	movs	r3, r0
 8001746:	3a0b      	subs	r2, #11
 8001748:	271d      	movs	r7, #29
 800174a:	9e00      	ldr	r6, [sp, #0]
 800174c:	1aba      	subs	r2, r7, r2
 800174e:	0019      	movs	r1, r3
 8001750:	4658      	mov	r0, fp
 8001752:	40d6      	lsrs	r6, r2
 8001754:	3908      	subs	r1, #8
 8001756:	4088      	lsls	r0, r1
 8001758:	0032      	movs	r2, r6
 800175a:	4302      	orrs	r2, r0
 800175c:	4693      	mov	fp, r2
 800175e:	9a00      	ldr	r2, [sp, #0]
 8001760:	408a      	lsls	r2, r1
 8001762:	4937      	ldr	r1, [pc, #220]	@ (8001840 <__aeabi_ddiv+0x22c>)
 8001764:	4453      	add	r3, sl
 8001766:	468a      	mov	sl, r1
 8001768:	2100      	movs	r1, #0
 800176a:	449a      	add	sl, r3
 800176c:	e797      	b.n	800169e <__aeabi_ddiv+0x8a>
 800176e:	465b      	mov	r3, fp
 8001770:	4303      	orrs	r3, r0
 8001772:	4699      	mov	r9, r3
 8001774:	d021      	beq.n	80017ba <__aeabi_ddiv+0x1a6>
 8001776:	465b      	mov	r3, fp
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <__aeabi_ddiv+0x16a>
 800177c:	e169      	b.n	8001a52 <__aeabi_ddiv+0x43e>
 800177e:	4658      	mov	r0, fp
 8001780:	f001 fbec 	bl	8002f5c <__clzsi2>
 8001784:	230b      	movs	r3, #11
 8001786:	425b      	negs	r3, r3
 8001788:	469c      	mov	ip, r3
 800178a:	0002      	movs	r2, r0
 800178c:	4484      	add	ip, r0
 800178e:	4666      	mov	r6, ip
 8001790:	231d      	movs	r3, #29
 8001792:	1b9b      	subs	r3, r3, r6
 8001794:	0026      	movs	r6, r4
 8001796:	0011      	movs	r1, r2
 8001798:	4658      	mov	r0, fp
 800179a:	40de      	lsrs	r6, r3
 800179c:	3908      	subs	r1, #8
 800179e:	4088      	lsls	r0, r1
 80017a0:	0033      	movs	r3, r6
 80017a2:	4303      	orrs	r3, r0
 80017a4:	4699      	mov	r9, r3
 80017a6:	0023      	movs	r3, r4
 80017a8:	408b      	lsls	r3, r1
 80017aa:	4698      	mov	r8, r3
 80017ac:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <__aeabi_ddiv+0x230>)
 80017ae:	2400      	movs	r4, #0
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	469a      	mov	sl, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	e753      	b.n	8001662 <__aeabi_ddiv+0x4e>
 80017ba:	2300      	movs	r3, #0
 80017bc:	4698      	mov	r8, r3
 80017be:	469a      	mov	sl, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	2404      	movs	r4, #4
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	e74c      	b.n	8001662 <__aeabi_ddiv+0x4e>
 80017c8:	2301      	movs	r3, #1
 80017ca:	431c      	orrs	r4, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	2101      	movs	r1, #1
 80017d0:	469b      	mov	fp, r3
 80017d2:	e764      	b.n	800169e <__aeabi_ddiv+0x8a>
 80017d4:	2303      	movs	r3, #3
 80017d6:	0032      	movs	r2, r6
 80017d8:	2103      	movs	r1, #3
 80017da:	431c      	orrs	r4, r3
 80017dc:	e75f      	b.n	800169e <__aeabi_ddiv+0x8a>
 80017de:	469a      	mov	sl, r3
 80017e0:	2303      	movs	r3, #3
 80017e2:	46d9      	mov	r9, fp
 80017e4:	240c      	movs	r4, #12
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	e73b      	b.n	8001662 <__aeabi_ddiv+0x4e>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2480      	movs	r4, #128	@ 0x80
 80017ee:	4698      	mov	r8, r3
 80017f0:	2600      	movs	r6, #0
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <__aeabi_ddiv+0x21c>)
 80017f4:	0324      	lsls	r4, r4, #12
 80017f6:	e779      	b.n	80016ec <__aeabi_ddiv+0xd8>
 80017f8:	2480      	movs	r4, #128	@ 0x80
 80017fa:	465b      	mov	r3, fp
 80017fc:	0324      	lsls	r4, r4, #12
 80017fe:	431c      	orrs	r4, r3
 8001800:	0324      	lsls	r4, r4, #12
 8001802:	002e      	movs	r6, r5
 8001804:	4690      	mov	r8, r2
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <__aeabi_ddiv+0x21c>)
 8001808:	0b24      	lsrs	r4, r4, #12
 800180a:	e76f      	b.n	80016ec <__aeabi_ddiv+0xd8>
 800180c:	2480      	movs	r4, #128	@ 0x80
 800180e:	464b      	mov	r3, r9
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	4223      	tst	r3, r4
 8001814:	d002      	beq.n	800181c <__aeabi_ddiv+0x208>
 8001816:	465b      	mov	r3, fp
 8001818:	4223      	tst	r3, r4
 800181a:	d0f0      	beq.n	80017fe <__aeabi_ddiv+0x1ea>
 800181c:	2480      	movs	r4, #128	@ 0x80
 800181e:	464b      	mov	r3, r9
 8001820:	0324      	lsls	r4, r4, #12
 8001822:	431c      	orrs	r4, r3
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	9e02      	ldr	r6, [sp, #8]
 8001828:	4b01      	ldr	r3, [pc, #4]	@ (8001830 <__aeabi_ddiv+0x21c>)
 800182a:	0b24      	lsrs	r4, r4, #12
 800182c:	e75e      	b.n	80016ec <__aeabi_ddiv+0xd8>
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	000007ff 	.word	0x000007ff
 8001834:	fffffc01 	.word	0xfffffc01
 8001838:	0800dd5c 	.word	0x0800dd5c
 800183c:	fffff801 	.word	0xfffff801
 8001840:	000003f3 	.word	0x000003f3
 8001844:	fffffc0d 	.word	0xfffffc0d
 8001848:	45cb      	cmp	fp, r9
 800184a:	d200      	bcs.n	800184e <__aeabi_ddiv+0x23a>
 800184c:	e0f8      	b.n	8001a40 <__aeabi_ddiv+0x42c>
 800184e:	d100      	bne.n	8001852 <__aeabi_ddiv+0x23e>
 8001850:	e0f3      	b.n	8001a3a <__aeabi_ddiv+0x426>
 8001852:	2301      	movs	r3, #1
 8001854:	425b      	negs	r3, r3
 8001856:	469c      	mov	ip, r3
 8001858:	4644      	mov	r4, r8
 800185a:	4648      	mov	r0, r9
 800185c:	2500      	movs	r5, #0
 800185e:	44e2      	add	sl, ip
 8001860:	465b      	mov	r3, fp
 8001862:	0e17      	lsrs	r7, r2, #24
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	431f      	orrs	r7, r3
 8001868:	0c19      	lsrs	r1, r3, #16
 800186a:	043b      	lsls	r3, r7, #16
 800186c:	0212      	lsls	r2, r2, #8
 800186e:	9700      	str	r7, [sp, #0]
 8001870:	0c1f      	lsrs	r7, r3, #16
 8001872:	4691      	mov	r9, r2
 8001874:	9102      	str	r1, [sp, #8]
 8001876:	9703      	str	r7, [sp, #12]
 8001878:	f7fe fce4 	bl	8000244 <__aeabi_uidivmod>
 800187c:	0002      	movs	r2, r0
 800187e:	437a      	muls	r2, r7
 8001880:	040b      	lsls	r3, r1, #16
 8001882:	0c21      	lsrs	r1, r4, #16
 8001884:	4680      	mov	r8, r0
 8001886:	4319      	orrs	r1, r3
 8001888:	428a      	cmp	r2, r1
 800188a:	d909      	bls.n	80018a0 <__aeabi_ddiv+0x28c>
 800188c:	9f00      	ldr	r7, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	46bc      	mov	ip, r7
 8001892:	425b      	negs	r3, r3
 8001894:	4461      	add	r1, ip
 8001896:	469c      	mov	ip, r3
 8001898:	44e0      	add	r8, ip
 800189a:	428f      	cmp	r7, r1
 800189c:	d800      	bhi.n	80018a0 <__aeabi_ddiv+0x28c>
 800189e:	e15c      	b.n	8001b5a <__aeabi_ddiv+0x546>
 80018a0:	1a88      	subs	r0, r1, r2
 80018a2:	9902      	ldr	r1, [sp, #8]
 80018a4:	f7fe fcce 	bl	8000244 <__aeabi_uidivmod>
 80018a8:	9a03      	ldr	r2, [sp, #12]
 80018aa:	0424      	lsls	r4, r4, #16
 80018ac:	4342      	muls	r2, r0
 80018ae:	0409      	lsls	r1, r1, #16
 80018b0:	0c24      	lsrs	r4, r4, #16
 80018b2:	0003      	movs	r3, r0
 80018b4:	430c      	orrs	r4, r1
 80018b6:	42a2      	cmp	r2, r4
 80018b8:	d906      	bls.n	80018c8 <__aeabi_ddiv+0x2b4>
 80018ba:	9900      	ldr	r1, [sp, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	468c      	mov	ip, r1
 80018c0:	4464      	add	r4, ip
 80018c2:	42a1      	cmp	r1, r4
 80018c4:	d800      	bhi.n	80018c8 <__aeabi_ddiv+0x2b4>
 80018c6:	e142      	b.n	8001b4e <__aeabi_ddiv+0x53a>
 80018c8:	1aa0      	subs	r0, r4, r2
 80018ca:	4642      	mov	r2, r8
 80018cc:	0412      	lsls	r2, r2, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	4693      	mov	fp, r2
 80018d2:	464b      	mov	r3, r9
 80018d4:	4659      	mov	r1, fp
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	001f      	movs	r7, r3
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	040b      	lsls	r3, r1, #16
 80018de:	4649      	mov	r1, r9
 80018e0:	0409      	lsls	r1, r1, #16
 80018e2:	0c09      	lsrs	r1, r1, #16
 80018e4:	000c      	movs	r4, r1
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	435c      	muls	r4, r3
 80018ea:	0c12      	lsrs	r2, r2, #16
 80018ec:	437b      	muls	r3, r7
 80018ee:	4688      	mov	r8, r1
 80018f0:	4351      	muls	r1, r2
 80018f2:	437a      	muls	r2, r7
 80018f4:	0c27      	lsrs	r7, r4, #16
 80018f6:	46bc      	mov	ip, r7
 80018f8:	185b      	adds	r3, r3, r1
 80018fa:	4463      	add	r3, ip
 80018fc:	4299      	cmp	r1, r3
 80018fe:	d903      	bls.n	8001908 <__aeabi_ddiv+0x2f4>
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	468c      	mov	ip, r1
 8001906:	4462      	add	r2, ip
 8001908:	0c19      	lsrs	r1, r3, #16
 800190a:	0424      	lsls	r4, r4, #16
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0c24      	lsrs	r4, r4, #16
 8001910:	188a      	adds	r2, r1, r2
 8001912:	191c      	adds	r4, r3, r4
 8001914:	4290      	cmp	r0, r2
 8001916:	d302      	bcc.n	800191e <__aeabi_ddiv+0x30a>
 8001918:	d116      	bne.n	8001948 <__aeabi_ddiv+0x334>
 800191a:	42a5      	cmp	r5, r4
 800191c:	d214      	bcs.n	8001948 <__aeabi_ddiv+0x334>
 800191e:	465b      	mov	r3, fp
 8001920:	9f00      	ldr	r7, [sp, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	444d      	add	r5, r9
 8001926:	9305      	str	r3, [sp, #20]
 8001928:	454d      	cmp	r5, r9
 800192a:	419b      	sbcs	r3, r3
 800192c:	46bc      	mov	ip, r7
 800192e:	425b      	negs	r3, r3
 8001930:	4463      	add	r3, ip
 8001932:	18c0      	adds	r0, r0, r3
 8001934:	4287      	cmp	r7, r0
 8001936:	d300      	bcc.n	800193a <__aeabi_ddiv+0x326>
 8001938:	e102      	b.n	8001b40 <__aeabi_ddiv+0x52c>
 800193a:	4282      	cmp	r2, r0
 800193c:	d900      	bls.n	8001940 <__aeabi_ddiv+0x32c>
 800193e:	e129      	b.n	8001b94 <__aeabi_ddiv+0x580>
 8001940:	d100      	bne.n	8001944 <__aeabi_ddiv+0x330>
 8001942:	e124      	b.n	8001b8e <__aeabi_ddiv+0x57a>
 8001944:	9b05      	ldr	r3, [sp, #20]
 8001946:	469b      	mov	fp, r3
 8001948:	1b2c      	subs	r4, r5, r4
 800194a:	42a5      	cmp	r5, r4
 800194c:	41ad      	sbcs	r5, r5
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	1a80      	subs	r0, r0, r2
 8001952:	426d      	negs	r5, r5
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	4283      	cmp	r3, r0
 8001958:	d100      	bne.n	800195c <__aeabi_ddiv+0x348>
 800195a:	e10f      	b.n	8001b7c <__aeabi_ddiv+0x568>
 800195c:	9902      	ldr	r1, [sp, #8]
 800195e:	f7fe fc71 	bl	8000244 <__aeabi_uidivmod>
 8001962:	9a03      	ldr	r2, [sp, #12]
 8001964:	040b      	lsls	r3, r1, #16
 8001966:	4342      	muls	r2, r0
 8001968:	0c21      	lsrs	r1, r4, #16
 800196a:	0005      	movs	r5, r0
 800196c:	4319      	orrs	r1, r3
 800196e:	428a      	cmp	r2, r1
 8001970:	d900      	bls.n	8001974 <__aeabi_ddiv+0x360>
 8001972:	e0cb      	b.n	8001b0c <__aeabi_ddiv+0x4f8>
 8001974:	1a88      	subs	r0, r1, r2
 8001976:	9902      	ldr	r1, [sp, #8]
 8001978:	f7fe fc64 	bl	8000244 <__aeabi_uidivmod>
 800197c:	9a03      	ldr	r2, [sp, #12]
 800197e:	0424      	lsls	r4, r4, #16
 8001980:	4342      	muls	r2, r0
 8001982:	0409      	lsls	r1, r1, #16
 8001984:	0c24      	lsrs	r4, r4, #16
 8001986:	0003      	movs	r3, r0
 8001988:	430c      	orrs	r4, r1
 800198a:	42a2      	cmp	r2, r4
 800198c:	d900      	bls.n	8001990 <__aeabi_ddiv+0x37c>
 800198e:	e0ca      	b.n	8001b26 <__aeabi_ddiv+0x512>
 8001990:	4641      	mov	r1, r8
 8001992:	1aa4      	subs	r4, r4, r2
 8001994:	042a      	lsls	r2, r5, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	9f04      	ldr	r7, [sp, #16]
 800199a:	0413      	lsls	r3, r2, #16
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	4359      	muls	r1, r3
 80019a0:	4640      	mov	r0, r8
 80019a2:	437b      	muls	r3, r7
 80019a4:	469c      	mov	ip, r3
 80019a6:	0c15      	lsrs	r5, r2, #16
 80019a8:	4368      	muls	r0, r5
 80019aa:	0c0b      	lsrs	r3, r1, #16
 80019ac:	4484      	add	ip, r0
 80019ae:	4463      	add	r3, ip
 80019b0:	437d      	muls	r5, r7
 80019b2:	4298      	cmp	r0, r3
 80019b4:	d903      	bls.n	80019be <__aeabi_ddiv+0x3aa>
 80019b6:	2080      	movs	r0, #128	@ 0x80
 80019b8:	0240      	lsls	r0, r0, #9
 80019ba:	4684      	mov	ip, r0
 80019bc:	4465      	add	r5, ip
 80019be:	0c18      	lsrs	r0, r3, #16
 80019c0:	0409      	lsls	r1, r1, #16
 80019c2:	041b      	lsls	r3, r3, #16
 80019c4:	0c09      	lsrs	r1, r1, #16
 80019c6:	1940      	adds	r0, r0, r5
 80019c8:	185b      	adds	r3, r3, r1
 80019ca:	4284      	cmp	r4, r0
 80019cc:	d327      	bcc.n	8001a1e <__aeabi_ddiv+0x40a>
 80019ce:	d023      	beq.n	8001a18 <__aeabi_ddiv+0x404>
 80019d0:	2301      	movs	r3, #1
 80019d2:	0035      	movs	r5, r6
 80019d4:	431a      	orrs	r2, r3
 80019d6:	4b94      	ldr	r3, [pc, #592]	@ (8001c28 <__aeabi_ddiv+0x614>)
 80019d8:	4453      	add	r3, sl
 80019da:	2b00      	cmp	r3, #0
 80019dc:	dd60      	ble.n	8001aa0 <__aeabi_ddiv+0x48c>
 80019de:	0751      	lsls	r1, r2, #29
 80019e0:	d000      	beq.n	80019e4 <__aeabi_ddiv+0x3d0>
 80019e2:	e086      	b.n	8001af2 <__aeabi_ddiv+0x4de>
 80019e4:	002e      	movs	r6, r5
 80019e6:	08d1      	lsrs	r1, r2, #3
 80019e8:	465a      	mov	r2, fp
 80019ea:	01d2      	lsls	r2, r2, #7
 80019ec:	d506      	bpl.n	80019fc <__aeabi_ddiv+0x3e8>
 80019ee:	465a      	mov	r2, fp
 80019f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <__aeabi_ddiv+0x618>)
 80019f2:	401a      	ands	r2, r3
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	4693      	mov	fp, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4453      	add	r3, sl
 80019fc:	4a8c      	ldr	r2, [pc, #560]	@ (8001c30 <__aeabi_ddiv+0x61c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_ddiv+0x3f0>
 8001a02:	e680      	b.n	8001706 <__aeabi_ddiv+0xf2>
 8001a04:	465a      	mov	r2, fp
 8001a06:	0752      	lsls	r2, r2, #29
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	4690      	mov	r8, r2
 8001a0c:	465a      	mov	r2, fp
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	0254      	lsls	r4, r2, #9
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	0d5b      	lsrs	r3, r3, #21
 8001a16:	e669      	b.n	80016ec <__aeabi_ddiv+0xd8>
 8001a18:	0035      	movs	r5, r6
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0db      	beq.n	80019d6 <__aeabi_ddiv+0x3c2>
 8001a1e:	9d00      	ldr	r5, [sp, #0]
 8001a20:	1e51      	subs	r1, r2, #1
 8001a22:	46ac      	mov	ip, r5
 8001a24:	4464      	add	r4, ip
 8001a26:	42ac      	cmp	r4, r5
 8001a28:	d200      	bcs.n	8001a2c <__aeabi_ddiv+0x418>
 8001a2a:	e09e      	b.n	8001b6a <__aeabi_ddiv+0x556>
 8001a2c:	4284      	cmp	r4, r0
 8001a2e:	d200      	bcs.n	8001a32 <__aeabi_ddiv+0x41e>
 8001a30:	e0e1      	b.n	8001bf6 <__aeabi_ddiv+0x5e2>
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x422>
 8001a34:	e0ee      	b.n	8001c14 <__aeabi_ddiv+0x600>
 8001a36:	000a      	movs	r2, r1
 8001a38:	e7ca      	b.n	80019d0 <__aeabi_ddiv+0x3bc>
 8001a3a:	4542      	cmp	r2, r8
 8001a3c:	d900      	bls.n	8001a40 <__aeabi_ddiv+0x42c>
 8001a3e:	e708      	b.n	8001852 <__aeabi_ddiv+0x23e>
 8001a40:	464b      	mov	r3, r9
 8001a42:	07dc      	lsls	r4, r3, #31
 8001a44:	0858      	lsrs	r0, r3, #1
 8001a46:	4643      	mov	r3, r8
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	431c      	orrs	r4, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	07dd      	lsls	r5, r3, #31
 8001a50:	e706      	b.n	8001860 <__aeabi_ddiv+0x24c>
 8001a52:	f001 fa83 	bl	8002f5c <__clzsi2>
 8001a56:	2315      	movs	r3, #21
 8001a58:	469c      	mov	ip, r3
 8001a5a:	4484      	add	ip, r0
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	4663      	mov	r3, ip
 8001a60:	3220      	adds	r2, #32
 8001a62:	2b1c      	cmp	r3, #28
 8001a64:	dc00      	bgt.n	8001a68 <__aeabi_ddiv+0x454>
 8001a66:	e692      	b.n	800178e <__aeabi_ddiv+0x17a>
 8001a68:	0023      	movs	r3, r4
 8001a6a:	3808      	subs	r0, #8
 8001a6c:	4083      	lsls	r3, r0
 8001a6e:	4699      	mov	r9, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	4698      	mov	r8, r3
 8001a74:	e69a      	b.n	80017ac <__aeabi_ddiv+0x198>
 8001a76:	f001 fa71 	bl	8002f5c <__clzsi2>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	3215      	adds	r2, #21
 8001a80:	3320      	adds	r3, #32
 8001a82:	2a1c      	cmp	r2, #28
 8001a84:	dc00      	bgt.n	8001a88 <__aeabi_ddiv+0x474>
 8001a86:	e65f      	b.n	8001748 <__aeabi_ddiv+0x134>
 8001a88:	9900      	ldr	r1, [sp, #0]
 8001a8a:	3808      	subs	r0, #8
 8001a8c:	4081      	lsls	r1, r0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	468b      	mov	fp, r1
 8001a92:	e666      	b.n	8001762 <__aeabi_ddiv+0x14e>
 8001a94:	2200      	movs	r2, #0
 8001a96:	002e      	movs	r6, r5
 8001a98:	2400      	movs	r4, #0
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	4b65      	ldr	r3, [pc, #404]	@ (8001c34 <__aeabi_ddiv+0x620>)
 8001a9e:	e625      	b.n	80016ec <__aeabi_ddiv+0xd8>
 8001aa0:	002e      	movs	r6, r5
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	1ac9      	subs	r1, r1, r3
 8001aa6:	2938      	cmp	r1, #56	@ 0x38
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_ddiv+0x498>
 8001aaa:	e61b      	b.n	80016e4 <__aeabi_ddiv+0xd0>
 8001aac:	291f      	cmp	r1, #31
 8001aae:	dc7e      	bgt.n	8001bae <__aeabi_ddiv+0x59a>
 8001ab0:	4861      	ldr	r0, [pc, #388]	@ (8001c38 <__aeabi_ddiv+0x624>)
 8001ab2:	0014      	movs	r4, r2
 8001ab4:	4450      	add	r0, sl
 8001ab6:	465b      	mov	r3, fp
 8001ab8:	4082      	lsls	r2, r0
 8001aba:	4083      	lsls	r3, r0
 8001abc:	40cc      	lsrs	r4, r1
 8001abe:	1e50      	subs	r0, r2, #1
 8001ac0:	4182      	sbcs	r2, r0
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	465b      	mov	r3, fp
 8001ac8:	40cb      	lsrs	r3, r1
 8001aca:	0751      	lsls	r1, r2, #29
 8001acc:	d009      	beq.n	8001ae2 <__aeabi_ddiv+0x4ce>
 8001ace:	210f      	movs	r1, #15
 8001ad0:	4011      	ands	r1, r2
 8001ad2:	2904      	cmp	r1, #4
 8001ad4:	d005      	beq.n	8001ae2 <__aeabi_ddiv+0x4ce>
 8001ad6:	1d11      	adds	r1, r2, #4
 8001ad8:	4291      	cmp	r1, r2
 8001ada:	4192      	sbcs	r2, r2
 8001adc:	4252      	negs	r2, r2
 8001ade:	189b      	adds	r3, r3, r2
 8001ae0:	000a      	movs	r2, r1
 8001ae2:	0219      	lsls	r1, r3, #8
 8001ae4:	d400      	bmi.n	8001ae8 <__aeabi_ddiv+0x4d4>
 8001ae6:	e09b      	b.n	8001c20 <__aeabi_ddiv+0x60c>
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2301      	movs	r3, #1
 8001aec:	2400      	movs	r4, #0
 8001aee:	4690      	mov	r8, r2
 8001af0:	e5fc      	b.n	80016ec <__aeabi_ddiv+0xd8>
 8001af2:	210f      	movs	r1, #15
 8001af4:	4011      	ands	r1, r2
 8001af6:	2904      	cmp	r1, #4
 8001af8:	d100      	bne.n	8001afc <__aeabi_ddiv+0x4e8>
 8001afa:	e773      	b.n	80019e4 <__aeabi_ddiv+0x3d0>
 8001afc:	1d11      	adds	r1, r2, #4
 8001afe:	4291      	cmp	r1, r2
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4252      	negs	r2, r2
 8001b04:	002e      	movs	r6, r5
 8001b06:	08c9      	lsrs	r1, r1, #3
 8001b08:	4493      	add	fp, r2
 8001b0a:	e76d      	b.n	80019e8 <__aeabi_ddiv+0x3d4>
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	3d01      	subs	r5, #1
 8001b10:	469c      	mov	ip, r3
 8001b12:	4461      	add	r1, ip
 8001b14:	428b      	cmp	r3, r1
 8001b16:	d900      	bls.n	8001b1a <__aeabi_ddiv+0x506>
 8001b18:	e72c      	b.n	8001974 <__aeabi_ddiv+0x360>
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d800      	bhi.n	8001b20 <__aeabi_ddiv+0x50c>
 8001b1e:	e729      	b.n	8001974 <__aeabi_ddiv+0x360>
 8001b20:	1e85      	subs	r5, r0, #2
 8001b22:	4461      	add	r1, ip
 8001b24:	e726      	b.n	8001974 <__aeabi_ddiv+0x360>
 8001b26:	9900      	ldr	r1, [sp, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	468c      	mov	ip, r1
 8001b2c:	4464      	add	r4, ip
 8001b2e:	42a1      	cmp	r1, r4
 8001b30:	d900      	bls.n	8001b34 <__aeabi_ddiv+0x520>
 8001b32:	e72d      	b.n	8001990 <__aeabi_ddiv+0x37c>
 8001b34:	42a2      	cmp	r2, r4
 8001b36:	d800      	bhi.n	8001b3a <__aeabi_ddiv+0x526>
 8001b38:	e72a      	b.n	8001990 <__aeabi_ddiv+0x37c>
 8001b3a:	1e83      	subs	r3, r0, #2
 8001b3c:	4464      	add	r4, ip
 8001b3e:	e727      	b.n	8001990 <__aeabi_ddiv+0x37c>
 8001b40:	4287      	cmp	r7, r0
 8001b42:	d000      	beq.n	8001b46 <__aeabi_ddiv+0x532>
 8001b44:	e6fe      	b.n	8001944 <__aeabi_ddiv+0x330>
 8001b46:	45a9      	cmp	r9, r5
 8001b48:	d900      	bls.n	8001b4c <__aeabi_ddiv+0x538>
 8001b4a:	e6fb      	b.n	8001944 <__aeabi_ddiv+0x330>
 8001b4c:	e6f5      	b.n	800193a <__aeabi_ddiv+0x326>
 8001b4e:	42a2      	cmp	r2, r4
 8001b50:	d800      	bhi.n	8001b54 <__aeabi_ddiv+0x540>
 8001b52:	e6b9      	b.n	80018c8 <__aeabi_ddiv+0x2b4>
 8001b54:	1e83      	subs	r3, r0, #2
 8001b56:	4464      	add	r4, ip
 8001b58:	e6b6      	b.n	80018c8 <__aeabi_ddiv+0x2b4>
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d800      	bhi.n	8001b60 <__aeabi_ddiv+0x54c>
 8001b5e:	e69f      	b.n	80018a0 <__aeabi_ddiv+0x28c>
 8001b60:	46bc      	mov	ip, r7
 8001b62:	1e83      	subs	r3, r0, #2
 8001b64:	4698      	mov	r8, r3
 8001b66:	4461      	add	r1, ip
 8001b68:	e69a      	b.n	80018a0 <__aeabi_ddiv+0x28c>
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	4284      	cmp	r4, r0
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_ddiv+0x55e>
 8001b70:	e72e      	b.n	80019d0 <__aeabi_ddiv+0x3bc>
 8001b72:	454b      	cmp	r3, r9
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0x564>
 8001b76:	e72b      	b.n	80019d0 <__aeabi_ddiv+0x3bc>
 8001b78:	0035      	movs	r5, r6
 8001b7a:	e72c      	b.n	80019d6 <__aeabi_ddiv+0x3c2>
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <__aeabi_ddiv+0x614>)
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <__aeabi_ddiv+0x628>)
 8001b80:	4453      	add	r3, sl
 8001b82:	4592      	cmp	sl, r2
 8001b84:	db43      	blt.n	8001c0e <__aeabi_ddiv+0x5fa>
 8001b86:	2201      	movs	r2, #1
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4493      	add	fp, r2
 8001b8c:	e72c      	b.n	80019e8 <__aeabi_ddiv+0x3d4>
 8001b8e:	42ac      	cmp	r4, r5
 8001b90:	d800      	bhi.n	8001b94 <__aeabi_ddiv+0x580>
 8001b92:	e6d7      	b.n	8001944 <__aeabi_ddiv+0x330>
 8001b94:	2302      	movs	r3, #2
 8001b96:	425b      	negs	r3, r3
 8001b98:	469c      	mov	ip, r3
 8001b9a:	9900      	ldr	r1, [sp, #0]
 8001b9c:	444d      	add	r5, r9
 8001b9e:	454d      	cmp	r5, r9
 8001ba0:	419b      	sbcs	r3, r3
 8001ba2:	44e3      	add	fp, ip
 8001ba4:	468c      	mov	ip, r1
 8001ba6:	425b      	negs	r3, r3
 8001ba8:	4463      	add	r3, ip
 8001baa:	18c0      	adds	r0, r0, r3
 8001bac:	e6cc      	b.n	8001948 <__aeabi_ddiv+0x334>
 8001bae:	201f      	movs	r0, #31
 8001bb0:	4240      	negs	r0, r0
 8001bb2:	1ac3      	subs	r3, r0, r3
 8001bb4:	4658      	mov	r0, fp
 8001bb6:	40d8      	lsrs	r0, r3
 8001bb8:	2920      	cmp	r1, #32
 8001bba:	d004      	beq.n	8001bc6 <__aeabi_ddiv+0x5b2>
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <__aeabi_ddiv+0x62c>)
 8001bc0:	4453      	add	r3, sl
 8001bc2:	4099      	lsls	r1, r3
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	1e53      	subs	r3, r2, #1
 8001bc8:	419a      	sbcs	r2, r3
 8001bca:	2307      	movs	r3, #7
 8001bcc:	0019      	movs	r1, r3
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	4011      	ands	r1, r2
 8001bd4:	4213      	tst	r3, r2
 8001bd6:	d009      	beq.n	8001bec <__aeabi_ddiv+0x5d8>
 8001bd8:	3308      	adds	r3, #8
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d01d      	beq.n	8001c1c <__aeabi_ddiv+0x608>
 8001be0:	1d13      	adds	r3, r2, #4
 8001be2:	4293      	cmp	r3, r2
 8001be4:	4189      	sbcs	r1, r1
 8001be6:	001a      	movs	r2, r3
 8001be8:	4249      	negs	r1, r1
 8001bea:	0749      	lsls	r1, r1, #29
 8001bec:	08d2      	lsrs	r2, r2, #3
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	4690      	mov	r8, r2
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e57a      	b.n	80016ec <__aeabi_ddiv+0xd8>
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	9f00      	ldr	r7, [sp, #0]
 8001bfa:	004d      	lsls	r5, r1, #1
 8001bfc:	454d      	cmp	r5, r9
 8001bfe:	4189      	sbcs	r1, r1
 8001c00:	46bc      	mov	ip, r7
 8001c02:	4249      	negs	r1, r1
 8001c04:	4461      	add	r1, ip
 8001c06:	46a9      	mov	r9, r5
 8001c08:	3a02      	subs	r2, #2
 8001c0a:	1864      	adds	r4, r4, r1
 8001c0c:	e7ae      	b.n	8001b6c <__aeabi_ddiv+0x558>
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4252      	negs	r2, r2
 8001c12:	e746      	b.n	8001aa2 <__aeabi_ddiv+0x48e>
 8001c14:	4599      	cmp	r9, r3
 8001c16:	d3ee      	bcc.n	8001bf6 <__aeabi_ddiv+0x5e2>
 8001c18:	000a      	movs	r2, r1
 8001c1a:	e7aa      	b.n	8001b72 <__aeabi_ddiv+0x55e>
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	e7e5      	b.n	8001bec <__aeabi_ddiv+0x5d8>
 8001c20:	0759      	lsls	r1, r3, #29
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	0b1c      	lsrs	r4, r3, #12
 8001c26:	e7e1      	b.n	8001bec <__aeabi_ddiv+0x5d8>
 8001c28:	000003ff 	.word	0x000003ff
 8001c2c:	feffffff 	.word	0xfeffffff
 8001c30:	000007fe 	.word	0x000007fe
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	0000041e 	.word	0x0000041e
 8001c3c:	fffffc02 	.word	0xfffffc02
 8001c40:	0000043e 	.word	0x0000043e

08001c44 <__eqdf2>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	4657      	mov	r7, sl
 8001c48:	46de      	mov	lr, fp
 8001c4a:	464e      	mov	r6, r9
 8001c4c:	4645      	mov	r5, r8
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	000d      	movs	r5, r1
 8001c52:	0004      	movs	r4, r0
 8001c54:	0fe8      	lsrs	r0, r5, #31
 8001c56:	4683      	mov	fp, r0
 8001c58:	0309      	lsls	r1, r1, #12
 8001c5a:	0fd8      	lsrs	r0, r3, #31
 8001c5c:	0b09      	lsrs	r1, r1, #12
 8001c5e:	4682      	mov	sl, r0
 8001c60:	4819      	ldr	r0, [pc, #100]	@ (8001cc8 <__eqdf2+0x84>)
 8001c62:	468c      	mov	ip, r1
 8001c64:	031f      	lsls	r7, r3, #12
 8001c66:	0069      	lsls	r1, r5, #1
 8001c68:	005e      	lsls	r6, r3, #1
 8001c6a:	0d49      	lsrs	r1, r1, #21
 8001c6c:	0b3f      	lsrs	r7, r7, #12
 8001c6e:	0d76      	lsrs	r6, r6, #21
 8001c70:	4281      	cmp	r1, r0
 8001c72:	d018      	beq.n	8001ca6 <__eqdf2+0x62>
 8001c74:	4286      	cmp	r6, r0
 8001c76:	d00f      	beq.n	8001c98 <__eqdf2+0x54>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	42b1      	cmp	r1, r6
 8001c7c:	d10d      	bne.n	8001c9a <__eqdf2+0x56>
 8001c7e:	45bc      	cmp	ip, r7
 8001c80:	d10b      	bne.n	8001c9a <__eqdf2+0x56>
 8001c82:	4294      	cmp	r4, r2
 8001c84:	d109      	bne.n	8001c9a <__eqdf2+0x56>
 8001c86:	45d3      	cmp	fp, sl
 8001c88:	d01c      	beq.n	8001cc4 <__eqdf2+0x80>
 8001c8a:	2900      	cmp	r1, #0
 8001c8c:	d105      	bne.n	8001c9a <__eqdf2+0x56>
 8001c8e:	4660      	mov	r0, ip
 8001c90:	4320      	orrs	r0, r4
 8001c92:	1e43      	subs	r3, r0, #1
 8001c94:	4198      	sbcs	r0, r3
 8001c96:	e000      	b.n	8001c9a <__eqdf2+0x56>
 8001c98:	2001      	movs	r0, #1
 8001c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c9c:	46bb      	mov	fp, r7
 8001c9e:	46b2      	mov	sl, r6
 8001ca0:	46a9      	mov	r9, r5
 8001ca2:	46a0      	mov	r8, r4
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	428e      	cmp	r6, r1
 8001caa:	d1f6      	bne.n	8001c9a <__eqdf2+0x56>
 8001cac:	4661      	mov	r1, ip
 8001cae:	4339      	orrs	r1, r7
 8001cb0:	000f      	movs	r7, r1
 8001cb2:	4317      	orrs	r7, r2
 8001cb4:	4327      	orrs	r7, r4
 8001cb6:	d1f0      	bne.n	8001c9a <__eqdf2+0x56>
 8001cb8:	465b      	mov	r3, fp
 8001cba:	4652      	mov	r2, sl
 8001cbc:	1a98      	subs	r0, r3, r2
 8001cbe:	1e43      	subs	r3, r0, #1
 8001cc0:	4198      	sbcs	r0, r3
 8001cc2:	e7ea      	b.n	8001c9a <__eqdf2+0x56>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e7e8      	b.n	8001c9a <__eqdf2+0x56>
 8001cc8:	000007ff 	.word	0x000007ff

08001ccc <__gedf2>:
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	4657      	mov	r7, sl
 8001cd0:	464e      	mov	r6, r9
 8001cd2:	4645      	mov	r5, r8
 8001cd4:	46de      	mov	lr, fp
 8001cd6:	b5e0      	push	{r5, r6, r7, lr}
 8001cd8:	000d      	movs	r5, r1
 8001cda:	030e      	lsls	r6, r1, #12
 8001cdc:	0049      	lsls	r1, r1, #1
 8001cde:	0d49      	lsrs	r1, r1, #21
 8001ce0:	468a      	mov	sl, r1
 8001ce2:	0fdf      	lsrs	r7, r3, #31
 8001ce4:	0fe9      	lsrs	r1, r5, #31
 8001ce6:	46bc      	mov	ip, r7
 8001ce8:	b083      	sub	sp, #12
 8001cea:	4f2f      	ldr	r7, [pc, #188]	@ (8001da8 <__gedf2+0xdc>)
 8001cec:	0004      	movs	r4, r0
 8001cee:	4680      	mov	r8, r0
 8001cf0:	9101      	str	r1, [sp, #4]
 8001cf2:	0058      	lsls	r0, r3, #1
 8001cf4:	0319      	lsls	r1, r3, #12
 8001cf6:	4691      	mov	r9, r2
 8001cf8:	0b36      	lsrs	r6, r6, #12
 8001cfa:	0b09      	lsrs	r1, r1, #12
 8001cfc:	0d40      	lsrs	r0, r0, #21
 8001cfe:	45ba      	cmp	sl, r7
 8001d00:	d01d      	beq.n	8001d3e <__gedf2+0x72>
 8001d02:	42b8      	cmp	r0, r7
 8001d04:	d00d      	beq.n	8001d22 <__gedf2+0x56>
 8001d06:	4657      	mov	r7, sl
 8001d08:	2f00      	cmp	r7, #0
 8001d0a:	d12a      	bne.n	8001d62 <__gedf2+0x96>
 8001d0c:	4334      	orrs	r4, r6
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d124      	bne.n	8001d5c <__gedf2+0x90>
 8001d12:	430a      	orrs	r2, r1
 8001d14:	d036      	beq.n	8001d84 <__gedf2+0xb8>
 8001d16:	2c00      	cmp	r4, #0
 8001d18:	d141      	bne.n	8001d9e <__gedf2+0xd2>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	0058      	lsls	r0, r3, #1
 8001d1e:	3801      	subs	r0, #1
 8001d20:	e015      	b.n	8001d4e <__gedf2+0x82>
 8001d22:	4311      	orrs	r1, r2
 8001d24:	d138      	bne.n	8001d98 <__gedf2+0xcc>
 8001d26:	4653      	mov	r3, sl
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <__gedf2+0x64>
 8001d2c:	4326      	orrs	r6, r4
 8001d2e:	d0f4      	beq.n	8001d1a <__gedf2+0x4e>
 8001d30:	9b01      	ldr	r3, [sp, #4]
 8001d32:	4563      	cmp	r3, ip
 8001d34:	d107      	bne.n	8001d46 <__gedf2+0x7a>
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	0058      	lsls	r0, r3, #1
 8001d3a:	3801      	subs	r0, #1
 8001d3c:	e007      	b.n	8001d4e <__gedf2+0x82>
 8001d3e:	4326      	orrs	r6, r4
 8001d40:	d12a      	bne.n	8001d98 <__gedf2+0xcc>
 8001d42:	4550      	cmp	r0, sl
 8001d44:	d021      	beq.n	8001d8a <__gedf2+0xbe>
 8001d46:	2001      	movs	r0, #1
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	425f      	negs	r7, r3
 8001d4c:	4338      	orrs	r0, r7
 8001d4e:	b003      	add	sp, #12
 8001d50:	bcf0      	pop	{r4, r5, r6, r7}
 8001d52:	46bb      	mov	fp, r7
 8001d54:	46b2      	mov	sl, r6
 8001d56:	46a9      	mov	r9, r5
 8001d58:	46a0      	mov	r8, r4
 8001d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	d0dc      	beq.n	8001d1a <__gedf2+0x4e>
 8001d60:	e7e6      	b.n	8001d30 <__gedf2+0x64>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d0ef      	beq.n	8001d46 <__gedf2+0x7a>
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	4563      	cmp	r3, ip
 8001d6a:	d1ec      	bne.n	8001d46 <__gedf2+0x7a>
 8001d6c:	4582      	cmp	sl, r0
 8001d6e:	dcea      	bgt.n	8001d46 <__gedf2+0x7a>
 8001d70:	dbe1      	blt.n	8001d36 <__gedf2+0x6a>
 8001d72:	428e      	cmp	r6, r1
 8001d74:	d8e7      	bhi.n	8001d46 <__gedf2+0x7a>
 8001d76:	d1de      	bne.n	8001d36 <__gedf2+0x6a>
 8001d78:	45c8      	cmp	r8, r9
 8001d7a:	d8e4      	bhi.n	8001d46 <__gedf2+0x7a>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	45c8      	cmp	r8, r9
 8001d80:	d2e5      	bcs.n	8001d4e <__gedf2+0x82>
 8001d82:	e7d8      	b.n	8001d36 <__gedf2+0x6a>
 8001d84:	2c00      	cmp	r4, #0
 8001d86:	d0e2      	beq.n	8001d4e <__gedf2+0x82>
 8001d88:	e7dd      	b.n	8001d46 <__gedf2+0x7a>
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	d104      	bne.n	8001d98 <__gedf2+0xcc>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	4563      	cmp	r3, ip
 8001d92:	d1d8      	bne.n	8001d46 <__gedf2+0x7a>
 8001d94:	2000      	movs	r0, #0
 8001d96:	e7da      	b.n	8001d4e <__gedf2+0x82>
 8001d98:	2002      	movs	r0, #2
 8001d9a:	4240      	negs	r0, r0
 8001d9c:	e7d7      	b.n	8001d4e <__gedf2+0x82>
 8001d9e:	9b01      	ldr	r3, [sp, #4]
 8001da0:	4563      	cmp	r3, ip
 8001da2:	d0e6      	beq.n	8001d72 <__gedf2+0xa6>
 8001da4:	e7cf      	b.n	8001d46 <__gedf2+0x7a>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff

08001dac <__ledf2>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	4657      	mov	r7, sl
 8001db0:	464e      	mov	r6, r9
 8001db2:	4645      	mov	r5, r8
 8001db4:	46de      	mov	lr, fp
 8001db6:	b5e0      	push	{r5, r6, r7, lr}
 8001db8:	000d      	movs	r5, r1
 8001dba:	030e      	lsls	r6, r1, #12
 8001dbc:	0049      	lsls	r1, r1, #1
 8001dbe:	0d49      	lsrs	r1, r1, #21
 8001dc0:	468a      	mov	sl, r1
 8001dc2:	0fdf      	lsrs	r7, r3, #31
 8001dc4:	0fe9      	lsrs	r1, r5, #31
 8001dc6:	46bc      	mov	ip, r7
 8001dc8:	b083      	sub	sp, #12
 8001dca:	4f2e      	ldr	r7, [pc, #184]	@ (8001e84 <__ledf2+0xd8>)
 8001dcc:	0004      	movs	r4, r0
 8001dce:	4680      	mov	r8, r0
 8001dd0:	9101      	str	r1, [sp, #4]
 8001dd2:	0058      	lsls	r0, r3, #1
 8001dd4:	0319      	lsls	r1, r3, #12
 8001dd6:	4691      	mov	r9, r2
 8001dd8:	0b36      	lsrs	r6, r6, #12
 8001dda:	0b09      	lsrs	r1, r1, #12
 8001ddc:	0d40      	lsrs	r0, r0, #21
 8001dde:	45ba      	cmp	sl, r7
 8001de0:	d01e      	beq.n	8001e20 <__ledf2+0x74>
 8001de2:	42b8      	cmp	r0, r7
 8001de4:	d00d      	beq.n	8001e02 <__ledf2+0x56>
 8001de6:	4657      	mov	r7, sl
 8001de8:	2f00      	cmp	r7, #0
 8001dea:	d127      	bne.n	8001e3c <__ledf2+0x90>
 8001dec:	4334      	orrs	r4, r6
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d133      	bne.n	8001e5a <__ledf2+0xae>
 8001df2:	430a      	orrs	r2, r1
 8001df4:	d034      	beq.n	8001e60 <__ledf2+0xb4>
 8001df6:	2c00      	cmp	r4, #0
 8001df8:	d140      	bne.n	8001e7c <__ledf2+0xd0>
 8001dfa:	4663      	mov	r3, ip
 8001dfc:	0058      	lsls	r0, r3, #1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	e015      	b.n	8001e2e <__ledf2+0x82>
 8001e02:	4311      	orrs	r1, r2
 8001e04:	d112      	bne.n	8001e2c <__ledf2+0x80>
 8001e06:	4653      	mov	r3, sl
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <__ledf2+0x64>
 8001e0c:	4326      	orrs	r6, r4
 8001e0e:	d0f4      	beq.n	8001dfa <__ledf2+0x4e>
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	4563      	cmp	r3, ip
 8001e14:	d01d      	beq.n	8001e52 <__ledf2+0xa6>
 8001e16:	2001      	movs	r0, #1
 8001e18:	9b01      	ldr	r3, [sp, #4]
 8001e1a:	425f      	negs	r7, r3
 8001e1c:	4338      	orrs	r0, r7
 8001e1e:	e006      	b.n	8001e2e <__ledf2+0x82>
 8001e20:	4326      	orrs	r6, r4
 8001e22:	d103      	bne.n	8001e2c <__ledf2+0x80>
 8001e24:	4550      	cmp	r0, sl
 8001e26:	d1f6      	bne.n	8001e16 <__ledf2+0x6a>
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	d01c      	beq.n	8001e66 <__ledf2+0xba>
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	b003      	add	sp, #12
 8001e30:	bcf0      	pop	{r4, r5, r6, r7}
 8001e32:	46bb      	mov	fp, r7
 8001e34:	46b2      	mov	sl, r6
 8001e36:	46a9      	mov	r9, r5
 8001e38:	46a0      	mov	r8, r4
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d0ea      	beq.n	8001e16 <__ledf2+0x6a>
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	4563      	cmp	r3, ip
 8001e44:	d1e7      	bne.n	8001e16 <__ledf2+0x6a>
 8001e46:	4582      	cmp	sl, r0
 8001e48:	dce5      	bgt.n	8001e16 <__ledf2+0x6a>
 8001e4a:	db02      	blt.n	8001e52 <__ledf2+0xa6>
 8001e4c:	428e      	cmp	r6, r1
 8001e4e:	d8e2      	bhi.n	8001e16 <__ledf2+0x6a>
 8001e50:	d00e      	beq.n	8001e70 <__ledf2+0xc4>
 8001e52:	9b01      	ldr	r3, [sp, #4]
 8001e54:	0058      	lsls	r0, r3, #1
 8001e56:	3801      	subs	r0, #1
 8001e58:	e7e9      	b.n	8001e2e <__ledf2+0x82>
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d0cd      	beq.n	8001dfa <__ledf2+0x4e>
 8001e5e:	e7d7      	b.n	8001e10 <__ledf2+0x64>
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d0e4      	beq.n	8001e2e <__ledf2+0x82>
 8001e64:	e7d7      	b.n	8001e16 <__ledf2+0x6a>
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	2000      	movs	r0, #0
 8001e6a:	4563      	cmp	r3, ip
 8001e6c:	d0df      	beq.n	8001e2e <__ledf2+0x82>
 8001e6e:	e7d2      	b.n	8001e16 <__ledf2+0x6a>
 8001e70:	45c8      	cmp	r8, r9
 8001e72:	d8d0      	bhi.n	8001e16 <__ledf2+0x6a>
 8001e74:	2000      	movs	r0, #0
 8001e76:	45c8      	cmp	r8, r9
 8001e78:	d2d9      	bcs.n	8001e2e <__ledf2+0x82>
 8001e7a:	e7ea      	b.n	8001e52 <__ledf2+0xa6>
 8001e7c:	9b01      	ldr	r3, [sp, #4]
 8001e7e:	4563      	cmp	r3, ip
 8001e80:	d0e4      	beq.n	8001e4c <__ledf2+0xa0>
 8001e82:	e7c8      	b.n	8001e16 <__ledf2+0x6a>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__aeabi_dmul>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	4657      	mov	r7, sl
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	46de      	mov	lr, fp
 8001e90:	4645      	mov	r5, r8
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	001f      	movs	r7, r3
 8001e96:	030b      	lsls	r3, r1, #12
 8001e98:	0b1b      	lsrs	r3, r3, #12
 8001e9a:	0016      	movs	r6, r2
 8001e9c:	469a      	mov	sl, r3
 8001e9e:	0fca      	lsrs	r2, r1, #31
 8001ea0:	004b      	lsls	r3, r1, #1
 8001ea2:	0004      	movs	r4, r0
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	0d5b      	lsrs	r3, r3, #21
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dmul+0x26>
 8001eac:	e1cf      	b.n	800224e <__aeabi_dmul+0x3c6>
 8001eae:	4acd      	ldr	r2, [pc, #820]	@ (80021e4 <__aeabi_dmul+0x35c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d055      	beq.n	8001f60 <__aeabi_dmul+0xd8>
 8001eb4:	4651      	mov	r1, sl
 8001eb6:	0f42      	lsrs	r2, r0, #29
 8001eb8:	00c9      	lsls	r1, r1, #3
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	0409      	lsls	r1, r1, #16
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	00c2      	lsls	r2, r0, #3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	4ac8      	ldr	r2, [pc, #800]	@ (80021e8 <__aeabi_dmul+0x360>)
 8001ec8:	468a      	mov	sl, r1
 8001eca:	4693      	mov	fp, r2
 8001ecc:	449b      	add	fp, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	033c      	lsls	r4, r7, #12
 8001ed6:	007b      	lsls	r3, r7, #1
 8001ed8:	0ffa      	lsrs	r2, r7, #31
 8001eda:	9601      	str	r6, [sp, #4]
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	0d5b      	lsrs	r3, r3, #21
 8001ee0:	9200      	str	r2, [sp, #0]
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dmul+0x5e>
 8001ee4:	e188      	b.n	80021f8 <__aeabi_dmul+0x370>
 8001ee6:	4abf      	ldr	r2, [pc, #764]	@ (80021e4 <__aeabi_dmul+0x35c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dmul+0x66>
 8001eec:	e092      	b.n	8002014 <__aeabi_dmul+0x18c>
 8001eee:	4abe      	ldr	r2, [pc, #760]	@ (80021e8 <__aeabi_dmul+0x360>)
 8001ef0:	4694      	mov	ip, r2
 8001ef2:	4463      	add	r3, ip
 8001ef4:	449b      	add	fp, r3
 8001ef6:	2d0a      	cmp	r5, #10
 8001ef8:	dc42      	bgt.n	8001f80 <__aeabi_dmul+0xf8>
 8001efa:	00e4      	lsls	r4, r4, #3
 8001efc:	0f73      	lsrs	r3, r6, #29
 8001efe:	4323      	orrs	r3, r4
 8001f00:	2480      	movs	r4, #128	@ 0x80
 8001f02:	4649      	mov	r1, r9
 8001f04:	0424      	lsls	r4, r4, #16
 8001f06:	431c      	orrs	r4, r3
 8001f08:	00f3      	lsls	r3, r6, #3
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	9b00      	ldr	r3, [sp, #0]
 8001f0e:	2000      	movs	r0, #0
 8001f10:	4059      	eors	r1, r3
 8001f12:	b2cb      	uxtb	r3, r1
 8001f14:	9303      	str	r3, [sp, #12]
 8001f16:	2d02      	cmp	r5, #2
 8001f18:	dc00      	bgt.n	8001f1c <__aeabi_dmul+0x94>
 8001f1a:	e094      	b.n	8002046 <__aeabi_dmul+0x1be>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	40ab      	lsls	r3, r5
 8001f20:	001d      	movs	r5, r3
 8001f22:	23a6      	movs	r3, #166	@ 0xa6
 8001f24:	002a      	movs	r2, r5
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	401a      	ands	r2, r3
 8001f2a:	421d      	tst	r5, r3
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dmul+0xa8>
 8001f2e:	e229      	b.n	8002384 <__aeabi_dmul+0x4fc>
 8001f30:	2390      	movs	r3, #144	@ 0x90
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	421d      	tst	r5, r3
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dmul+0xb2>
 8001f38:	e24d      	b.n	80023d6 <__aeabi_dmul+0x54e>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2480      	movs	r4, #128	@ 0x80
 8001f3e:	4699      	mov	r9, r3
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	4ba8      	ldr	r3, [pc, #672]	@ (80021e4 <__aeabi_dmul+0x35c>)
 8001f44:	0010      	movs	r0, r2
 8001f46:	464a      	mov	r2, r9
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	07d2      	lsls	r2, r2, #31
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	b005      	add	sp, #20
 8001f54:	bcf0      	pop	{r4, r5, r6, r7}
 8001f56:	46bb      	mov	fp, r7
 8001f58:	46b2      	mov	sl, r6
 8001f5a:	46a9      	mov	r9, r5
 8001f5c:	46a0      	mov	r8, r4
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f60:	4652      	mov	r2, sl
 8001f62:	4302      	orrs	r2, r0
 8001f64:	4690      	mov	r8, r2
 8001f66:	d000      	beq.n	8001f6a <__aeabi_dmul+0xe2>
 8001f68:	e1ac      	b.n	80022c4 <__aeabi_dmul+0x43c>
 8001f6a:	469b      	mov	fp, r3
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	4692      	mov	sl, r2
 8001f70:	2508      	movs	r5, #8
 8001f72:	9302      	str	r3, [sp, #8]
 8001f74:	e7ae      	b.n	8001ed4 <__aeabi_dmul+0x4c>
 8001f76:	9b00      	ldr	r3, [sp, #0]
 8001f78:	46a2      	mov	sl, r4
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	9b01      	ldr	r3, [sp, #4]
 8001f7e:	4698      	mov	r8, r3
 8001f80:	9b02      	ldr	r3, [sp, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dmul+0x100>
 8001f86:	e1ca      	b.n	800231e <__aeabi_dmul+0x496>
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dmul+0x106>
 8001f8c:	e192      	b.n	80022b4 <__aeabi_dmul+0x42c>
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d110      	bne.n	8001fb4 <__aeabi_dmul+0x12c>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2400      	movs	r4, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	e7d4      	b.n	8001f44 <__aeabi_dmul+0xbc>
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	087b      	lsrs	r3, r7, #1
 8001f9e:	403a      	ands	r2, r7
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	4652      	mov	r2, sl
 8001fa4:	07d2      	lsls	r2, r2, #31
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	4698      	mov	r8, r3
 8001faa:	4653      	mov	r3, sl
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	469a      	mov	sl, r3
 8001fb0:	9b03      	ldr	r3, [sp, #12]
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	1c58      	adds	r0, r3, #1
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	445b      	add	r3, fp
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	dc00      	bgt.n	8001fc4 <__aeabi_dmul+0x13c>
 8001fc2:	e1b1      	b.n	8002328 <__aeabi_dmul+0x4a0>
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	d00b      	beq.n	8001fe2 <__aeabi_dmul+0x15a>
 8001fca:	220f      	movs	r2, #15
 8001fcc:	4641      	mov	r1, r8
 8001fce:	400a      	ands	r2, r1
 8001fd0:	2a04      	cmp	r2, #4
 8001fd2:	d006      	beq.n	8001fe2 <__aeabi_dmul+0x15a>
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	1d11      	adds	r1, r2, #4
 8001fd8:	4541      	cmp	r1, r8
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4688      	mov	r8, r1
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4492      	add	sl, r2
 8001fe2:	4652      	mov	r2, sl
 8001fe4:	01d2      	lsls	r2, r2, #7
 8001fe6:	d506      	bpl.n	8001ff6 <__aeabi_dmul+0x16e>
 8001fe8:	4652      	mov	r2, sl
 8001fea:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <__aeabi_dmul+0x364>)
 8001fec:	401a      	ands	r2, r3
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	4692      	mov	sl, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	18c3      	adds	r3, r0, r3
 8001ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80021f0 <__aeabi_dmul+0x368>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	dd00      	ble.n	8001ffe <__aeabi_dmul+0x176>
 8001ffc:	e18f      	b.n	800231e <__aeabi_dmul+0x496>
 8001ffe:	4642      	mov	r2, r8
 8002000:	08d1      	lsrs	r1, r2, #3
 8002002:	4652      	mov	r2, sl
 8002004:	0752      	lsls	r2, r2, #29
 8002006:	430a      	orrs	r2, r1
 8002008:	4651      	mov	r1, sl
 800200a:	055b      	lsls	r3, r3, #21
 800200c:	024c      	lsls	r4, r1, #9
 800200e:	0b24      	lsrs	r4, r4, #12
 8002010:	0d5b      	lsrs	r3, r3, #21
 8002012:	e797      	b.n	8001f44 <__aeabi_dmul+0xbc>
 8002014:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <__aeabi_dmul+0x35c>)
 8002016:	4326      	orrs	r6, r4
 8002018:	469c      	mov	ip, r3
 800201a:	44e3      	add	fp, ip
 800201c:	2e00      	cmp	r6, #0
 800201e:	d100      	bne.n	8002022 <__aeabi_dmul+0x19a>
 8002020:	e16f      	b.n	8002302 <__aeabi_dmul+0x47a>
 8002022:	2303      	movs	r3, #3
 8002024:	4649      	mov	r1, r9
 8002026:	431d      	orrs	r5, r3
 8002028:	9b00      	ldr	r3, [sp, #0]
 800202a:	4059      	eors	r1, r3
 800202c:	b2cb      	uxtb	r3, r1
 800202e:	9303      	str	r3, [sp, #12]
 8002030:	2d0a      	cmp	r5, #10
 8002032:	dd00      	ble.n	8002036 <__aeabi_dmul+0x1ae>
 8002034:	e133      	b.n	800229e <__aeabi_dmul+0x416>
 8002036:	2301      	movs	r3, #1
 8002038:	40ab      	lsls	r3, r5
 800203a:	001d      	movs	r5, r3
 800203c:	2303      	movs	r3, #3
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2288      	movs	r2, #136	@ 0x88
 8002042:	422a      	tst	r2, r5
 8002044:	d197      	bne.n	8001f76 <__aeabi_dmul+0xee>
 8002046:	4642      	mov	r2, r8
 8002048:	4643      	mov	r3, r8
 800204a:	0412      	lsls	r2, r2, #16
 800204c:	0c12      	lsrs	r2, r2, #16
 800204e:	0016      	movs	r6, r2
 8002050:	9801      	ldr	r0, [sp, #4]
 8002052:	0c1d      	lsrs	r5, r3, #16
 8002054:	0c03      	lsrs	r3, r0, #16
 8002056:	0400      	lsls	r0, r0, #16
 8002058:	0c00      	lsrs	r0, r0, #16
 800205a:	4346      	muls	r6, r0
 800205c:	46b4      	mov	ip, r6
 800205e:	001e      	movs	r6, r3
 8002060:	436e      	muls	r6, r5
 8002062:	9600      	str	r6, [sp, #0]
 8002064:	0016      	movs	r6, r2
 8002066:	0007      	movs	r7, r0
 8002068:	435e      	muls	r6, r3
 800206a:	4661      	mov	r1, ip
 800206c:	46b0      	mov	r8, r6
 800206e:	436f      	muls	r7, r5
 8002070:	0c0e      	lsrs	r6, r1, #16
 8002072:	44b8      	add	r8, r7
 8002074:	4446      	add	r6, r8
 8002076:	42b7      	cmp	r7, r6
 8002078:	d905      	bls.n	8002086 <__aeabi_dmul+0x1fe>
 800207a:	2180      	movs	r1, #128	@ 0x80
 800207c:	0249      	lsls	r1, r1, #9
 800207e:	4688      	mov	r8, r1
 8002080:	9f00      	ldr	r7, [sp, #0]
 8002082:	4447      	add	r7, r8
 8002084:	9700      	str	r7, [sp, #0]
 8002086:	4661      	mov	r1, ip
 8002088:	0409      	lsls	r1, r1, #16
 800208a:	0c09      	lsrs	r1, r1, #16
 800208c:	0c37      	lsrs	r7, r6, #16
 800208e:	0436      	lsls	r6, r6, #16
 8002090:	468c      	mov	ip, r1
 8002092:	0031      	movs	r1, r6
 8002094:	4461      	add	r1, ip
 8002096:	9101      	str	r1, [sp, #4]
 8002098:	0011      	movs	r1, r2
 800209a:	0c26      	lsrs	r6, r4, #16
 800209c:	0424      	lsls	r4, r4, #16
 800209e:	0c24      	lsrs	r4, r4, #16
 80020a0:	4361      	muls	r1, r4
 80020a2:	468c      	mov	ip, r1
 80020a4:	0021      	movs	r1, r4
 80020a6:	4369      	muls	r1, r5
 80020a8:	4689      	mov	r9, r1
 80020aa:	4661      	mov	r1, ip
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	4688      	mov	r8, r1
 80020b0:	4372      	muls	r2, r6
 80020b2:	444a      	add	r2, r9
 80020b4:	4442      	add	r2, r8
 80020b6:	4375      	muls	r5, r6
 80020b8:	4591      	cmp	r9, r2
 80020ba:	d903      	bls.n	80020c4 <__aeabi_dmul+0x23c>
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	0249      	lsls	r1, r1, #9
 80020c0:	4688      	mov	r8, r1
 80020c2:	4445      	add	r5, r8
 80020c4:	0c11      	lsrs	r1, r2, #16
 80020c6:	4688      	mov	r8, r1
 80020c8:	4661      	mov	r1, ip
 80020ca:	0409      	lsls	r1, r1, #16
 80020cc:	0c09      	lsrs	r1, r1, #16
 80020ce:	468c      	mov	ip, r1
 80020d0:	0412      	lsls	r2, r2, #16
 80020d2:	4462      	add	r2, ip
 80020d4:	18b9      	adds	r1, r7, r2
 80020d6:	9102      	str	r1, [sp, #8]
 80020d8:	4651      	mov	r1, sl
 80020da:	0c09      	lsrs	r1, r1, #16
 80020dc:	468c      	mov	ip, r1
 80020de:	4651      	mov	r1, sl
 80020e0:	040f      	lsls	r7, r1, #16
 80020e2:	0c3f      	lsrs	r7, r7, #16
 80020e4:	0039      	movs	r1, r7
 80020e6:	4341      	muls	r1, r0
 80020e8:	4445      	add	r5, r8
 80020ea:	4688      	mov	r8, r1
 80020ec:	4661      	mov	r1, ip
 80020ee:	4341      	muls	r1, r0
 80020f0:	468a      	mov	sl, r1
 80020f2:	4641      	mov	r1, r8
 80020f4:	4660      	mov	r0, ip
 80020f6:	0c09      	lsrs	r1, r1, #16
 80020f8:	4689      	mov	r9, r1
 80020fa:	4358      	muls	r0, r3
 80020fc:	437b      	muls	r3, r7
 80020fe:	4453      	add	r3, sl
 8002100:	444b      	add	r3, r9
 8002102:	459a      	cmp	sl, r3
 8002104:	d903      	bls.n	800210e <__aeabi_dmul+0x286>
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	0249      	lsls	r1, r1, #9
 800210a:	4689      	mov	r9, r1
 800210c:	4448      	add	r0, r9
 800210e:	0c19      	lsrs	r1, r3, #16
 8002110:	4689      	mov	r9, r1
 8002112:	4641      	mov	r1, r8
 8002114:	0409      	lsls	r1, r1, #16
 8002116:	0c09      	lsrs	r1, r1, #16
 8002118:	4688      	mov	r8, r1
 800211a:	0039      	movs	r1, r7
 800211c:	4361      	muls	r1, r4
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	4443      	add	r3, r8
 8002122:	4688      	mov	r8, r1
 8002124:	4661      	mov	r1, ip
 8002126:	434c      	muls	r4, r1
 8002128:	4371      	muls	r1, r6
 800212a:	468c      	mov	ip, r1
 800212c:	4641      	mov	r1, r8
 800212e:	4377      	muls	r7, r6
 8002130:	0c0e      	lsrs	r6, r1, #16
 8002132:	193f      	adds	r7, r7, r4
 8002134:	19f6      	adds	r6, r6, r7
 8002136:	4448      	add	r0, r9
 8002138:	42b4      	cmp	r4, r6
 800213a:	d903      	bls.n	8002144 <__aeabi_dmul+0x2bc>
 800213c:	2180      	movs	r1, #128	@ 0x80
 800213e:	0249      	lsls	r1, r1, #9
 8002140:	4689      	mov	r9, r1
 8002142:	44cc      	add	ip, r9
 8002144:	9902      	ldr	r1, [sp, #8]
 8002146:	9f00      	ldr	r7, [sp, #0]
 8002148:	4689      	mov	r9, r1
 800214a:	0431      	lsls	r1, r6, #16
 800214c:	444f      	add	r7, r9
 800214e:	4689      	mov	r9, r1
 8002150:	4641      	mov	r1, r8
 8002152:	4297      	cmp	r7, r2
 8002154:	4192      	sbcs	r2, r2
 8002156:	040c      	lsls	r4, r1, #16
 8002158:	0c24      	lsrs	r4, r4, #16
 800215a:	444c      	add	r4, r9
 800215c:	18ff      	adds	r7, r7, r3
 800215e:	4252      	negs	r2, r2
 8002160:	1964      	adds	r4, r4, r5
 8002162:	18a1      	adds	r1, r4, r2
 8002164:	429f      	cmp	r7, r3
 8002166:	419b      	sbcs	r3, r3
 8002168:	4688      	mov	r8, r1
 800216a:	4682      	mov	sl, r0
 800216c:	425b      	negs	r3, r3
 800216e:	4699      	mov	r9, r3
 8002170:	4590      	cmp	r8, r2
 8002172:	4192      	sbcs	r2, r2
 8002174:	42ac      	cmp	r4, r5
 8002176:	41a4      	sbcs	r4, r4
 8002178:	44c2      	add	sl, r8
 800217a:	44d1      	add	r9, sl
 800217c:	4252      	negs	r2, r2
 800217e:	4264      	negs	r4, r4
 8002180:	4314      	orrs	r4, r2
 8002182:	4599      	cmp	r9, r3
 8002184:	419b      	sbcs	r3, r3
 8002186:	4582      	cmp	sl, r0
 8002188:	4192      	sbcs	r2, r2
 800218a:	425b      	negs	r3, r3
 800218c:	4252      	negs	r2, r2
 800218e:	4313      	orrs	r3, r2
 8002190:	464a      	mov	r2, r9
 8002192:	0c36      	lsrs	r6, r6, #16
 8002194:	19a4      	adds	r4, r4, r6
 8002196:	18e3      	adds	r3, r4, r3
 8002198:	4463      	add	r3, ip
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	0dd2      	lsrs	r2, r2, #23
 800219e:	431a      	orrs	r2, r3
 80021a0:	9901      	ldr	r1, [sp, #4]
 80021a2:	4692      	mov	sl, r2
 80021a4:	027a      	lsls	r2, r7, #9
 80021a6:	430a      	orrs	r2, r1
 80021a8:	1e50      	subs	r0, r2, #1
 80021aa:	4182      	sbcs	r2, r0
 80021ac:	0dff      	lsrs	r7, r7, #23
 80021ae:	4317      	orrs	r7, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	0252      	lsls	r2, r2, #9
 80021b4:	4317      	orrs	r7, r2
 80021b6:	46b8      	mov	r8, r7
 80021b8:	01db      	lsls	r3, r3, #7
 80021ba:	d500      	bpl.n	80021be <__aeabi_dmul+0x336>
 80021bc:	e6ed      	b.n	8001f9a <__aeabi_dmul+0x112>
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <__aeabi_dmul+0x36c>)
 80021c0:	9a03      	ldr	r2, [sp, #12]
 80021c2:	445b      	add	r3, fp
 80021c4:	4691      	mov	r9, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dc00      	bgt.n	80021cc <__aeabi_dmul+0x344>
 80021ca:	e0ac      	b.n	8002326 <__aeabi_dmul+0x49e>
 80021cc:	003a      	movs	r2, r7
 80021ce:	0752      	lsls	r2, r2, #29
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dmul+0x34c>
 80021d2:	e710      	b.n	8001ff6 <__aeabi_dmul+0x16e>
 80021d4:	220f      	movs	r2, #15
 80021d6:	4658      	mov	r0, fp
 80021d8:	403a      	ands	r2, r7
 80021da:	2a04      	cmp	r2, #4
 80021dc:	d000      	beq.n	80021e0 <__aeabi_dmul+0x358>
 80021de:	e6f9      	b.n	8001fd4 <__aeabi_dmul+0x14c>
 80021e0:	e709      	b.n	8001ff6 <__aeabi_dmul+0x16e>
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff
 80021e8:	fffffc01 	.word	0xfffffc01
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	000003ff 	.word	0x000003ff
 80021f8:	0022      	movs	r2, r4
 80021fa:	4332      	orrs	r2, r6
 80021fc:	d06f      	beq.n	80022de <__aeabi_dmul+0x456>
 80021fe:	2c00      	cmp	r4, #0
 8002200:	d100      	bne.n	8002204 <__aeabi_dmul+0x37c>
 8002202:	e0c2      	b.n	800238a <__aeabi_dmul+0x502>
 8002204:	0020      	movs	r0, r4
 8002206:	f000 fea9 	bl	8002f5c <__clzsi2>
 800220a:	0002      	movs	r2, r0
 800220c:	0003      	movs	r3, r0
 800220e:	3a0b      	subs	r2, #11
 8002210:	201d      	movs	r0, #29
 8002212:	1a82      	subs	r2, r0, r2
 8002214:	0030      	movs	r0, r6
 8002216:	0019      	movs	r1, r3
 8002218:	40d0      	lsrs	r0, r2
 800221a:	3908      	subs	r1, #8
 800221c:	408c      	lsls	r4, r1
 800221e:	0002      	movs	r2, r0
 8002220:	4322      	orrs	r2, r4
 8002222:	0034      	movs	r4, r6
 8002224:	408c      	lsls	r4, r1
 8002226:	4659      	mov	r1, fp
 8002228:	1acb      	subs	r3, r1, r3
 800222a:	4986      	ldr	r1, [pc, #536]	@ (8002444 <__aeabi_dmul+0x5bc>)
 800222c:	468b      	mov	fp, r1
 800222e:	449b      	add	fp, r3
 8002230:	2d0a      	cmp	r5, #10
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x3ae>
 8002234:	e6a4      	b.n	8001f80 <__aeabi_dmul+0xf8>
 8002236:	4649      	mov	r1, r9
 8002238:	9b00      	ldr	r3, [sp, #0]
 800223a:	9401      	str	r4, [sp, #4]
 800223c:	4059      	eors	r1, r3
 800223e:	b2cb      	uxtb	r3, r1
 8002240:	0014      	movs	r4, r2
 8002242:	2000      	movs	r0, #0
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	2d02      	cmp	r5, #2
 8002248:	dd00      	ble.n	800224c <__aeabi_dmul+0x3c4>
 800224a:	e667      	b.n	8001f1c <__aeabi_dmul+0x94>
 800224c:	e6fb      	b.n	8002046 <__aeabi_dmul+0x1be>
 800224e:	4653      	mov	r3, sl
 8002250:	4303      	orrs	r3, r0
 8002252:	4698      	mov	r8, r3
 8002254:	d03c      	beq.n	80022d0 <__aeabi_dmul+0x448>
 8002256:	4653      	mov	r3, sl
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dmul+0x3d6>
 800225c:	e0a3      	b.n	80023a6 <__aeabi_dmul+0x51e>
 800225e:	4650      	mov	r0, sl
 8002260:	f000 fe7c 	bl	8002f5c <__clzsi2>
 8002264:	230b      	movs	r3, #11
 8002266:	425b      	negs	r3, r3
 8002268:	469c      	mov	ip, r3
 800226a:	0002      	movs	r2, r0
 800226c:	4484      	add	ip, r0
 800226e:	0011      	movs	r1, r2
 8002270:	4650      	mov	r0, sl
 8002272:	3908      	subs	r1, #8
 8002274:	4088      	lsls	r0, r1
 8002276:	231d      	movs	r3, #29
 8002278:	4680      	mov	r8, r0
 800227a:	4660      	mov	r0, ip
 800227c:	1a1b      	subs	r3, r3, r0
 800227e:	0020      	movs	r0, r4
 8002280:	40d8      	lsrs	r0, r3
 8002282:	0003      	movs	r3, r0
 8002284:	4640      	mov	r0, r8
 8002286:	4303      	orrs	r3, r0
 8002288:	469a      	mov	sl, r3
 800228a:	0023      	movs	r3, r4
 800228c:	408b      	lsls	r3, r1
 800228e:	4698      	mov	r8, r3
 8002290:	4b6c      	ldr	r3, [pc, #432]	@ (8002444 <__aeabi_dmul+0x5bc>)
 8002292:	2500      	movs	r5, #0
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	469b      	mov	fp, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	e61a      	b.n	8001ed4 <__aeabi_dmul+0x4c>
 800229e:	2d0f      	cmp	r5, #15
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dmul+0x41c>
 80022a2:	e0c9      	b.n	8002438 <__aeabi_dmul+0x5b0>
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	4652      	mov	r2, sl
 80022a8:	031b      	lsls	r3, r3, #12
 80022aa:	421a      	tst	r2, r3
 80022ac:	d002      	beq.n	80022b4 <__aeabi_dmul+0x42c>
 80022ae:	421c      	tst	r4, r3
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dmul+0x42c>
 80022b2:	e092      	b.n	80023da <__aeabi_dmul+0x552>
 80022b4:	2480      	movs	r4, #128	@ 0x80
 80022b6:	4653      	mov	r3, sl
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	431c      	orrs	r4, r3
 80022bc:	0324      	lsls	r4, r4, #12
 80022be:	4642      	mov	r2, r8
 80022c0:	0b24      	lsrs	r4, r4, #12
 80022c2:	e63e      	b.n	8001f42 <__aeabi_dmul+0xba>
 80022c4:	469b      	mov	fp, r3
 80022c6:	2303      	movs	r3, #3
 80022c8:	4680      	mov	r8, r0
 80022ca:	250c      	movs	r5, #12
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	e601      	b.n	8001ed4 <__aeabi_dmul+0x4c>
 80022d0:	2300      	movs	r3, #0
 80022d2:	469a      	mov	sl, r3
 80022d4:	469b      	mov	fp, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	2504      	movs	r5, #4
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	e5fa      	b.n	8001ed4 <__aeabi_dmul+0x4c>
 80022de:	2101      	movs	r1, #1
 80022e0:	430d      	orrs	r5, r1
 80022e2:	2d0a      	cmp	r5, #10
 80022e4:	dd00      	ble.n	80022e8 <__aeabi_dmul+0x460>
 80022e6:	e64b      	b.n	8001f80 <__aeabi_dmul+0xf8>
 80022e8:	4649      	mov	r1, r9
 80022ea:	9800      	ldr	r0, [sp, #0]
 80022ec:	4041      	eors	r1, r0
 80022ee:	b2c9      	uxtb	r1, r1
 80022f0:	9103      	str	r1, [sp, #12]
 80022f2:	2d02      	cmp	r5, #2
 80022f4:	dc00      	bgt.n	80022f8 <__aeabi_dmul+0x470>
 80022f6:	e096      	b.n	8002426 <__aeabi_dmul+0x59e>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2400      	movs	r4, #0
 80022fc:	2001      	movs	r0, #1
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	e60c      	b.n	8001f1c <__aeabi_dmul+0x94>
 8002302:	4649      	mov	r1, r9
 8002304:	2302      	movs	r3, #2
 8002306:	9a00      	ldr	r2, [sp, #0]
 8002308:	432b      	orrs	r3, r5
 800230a:	4051      	eors	r1, r2
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	9203      	str	r2, [sp, #12]
 8002310:	2b0a      	cmp	r3, #10
 8002312:	dd00      	ble.n	8002316 <__aeabi_dmul+0x48e>
 8002314:	e634      	b.n	8001f80 <__aeabi_dmul+0xf8>
 8002316:	2d00      	cmp	r5, #0
 8002318:	d157      	bne.n	80023ca <__aeabi_dmul+0x542>
 800231a:	9b03      	ldr	r3, [sp, #12]
 800231c:	4699      	mov	r9, r3
 800231e:	2400      	movs	r4, #0
 8002320:	2200      	movs	r2, #0
 8002322:	4b49      	ldr	r3, [pc, #292]	@ (8002448 <__aeabi_dmul+0x5c0>)
 8002324:	e60e      	b.n	8001f44 <__aeabi_dmul+0xbc>
 8002326:	4658      	mov	r0, fp
 8002328:	2101      	movs	r1, #1
 800232a:	1ac9      	subs	r1, r1, r3
 800232c:	2938      	cmp	r1, #56	@ 0x38
 800232e:	dd00      	ble.n	8002332 <__aeabi_dmul+0x4aa>
 8002330:	e62f      	b.n	8001f92 <__aeabi_dmul+0x10a>
 8002332:	291f      	cmp	r1, #31
 8002334:	dd56      	ble.n	80023e4 <__aeabi_dmul+0x55c>
 8002336:	221f      	movs	r2, #31
 8002338:	4654      	mov	r4, sl
 800233a:	4252      	negs	r2, r2
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	40dc      	lsrs	r4, r3
 8002340:	2920      	cmp	r1, #32
 8002342:	d007      	beq.n	8002354 <__aeabi_dmul+0x4cc>
 8002344:	4b41      	ldr	r3, [pc, #260]	@ (800244c <__aeabi_dmul+0x5c4>)
 8002346:	4642      	mov	r2, r8
 8002348:	469c      	mov	ip, r3
 800234a:	4653      	mov	r3, sl
 800234c:	4460      	add	r0, ip
 800234e:	4083      	lsls	r3, r0
 8002350:	431a      	orrs	r2, r3
 8002352:	4690      	mov	r8, r2
 8002354:	4642      	mov	r2, r8
 8002356:	2107      	movs	r1, #7
 8002358:	1e53      	subs	r3, r2, #1
 800235a:	419a      	sbcs	r2, r3
 800235c:	000b      	movs	r3, r1
 800235e:	4322      	orrs	r2, r4
 8002360:	4013      	ands	r3, r2
 8002362:	2400      	movs	r4, #0
 8002364:	4211      	tst	r1, r2
 8002366:	d009      	beq.n	800237c <__aeabi_dmul+0x4f4>
 8002368:	230f      	movs	r3, #15
 800236a:	4013      	ands	r3, r2
 800236c:	2b04      	cmp	r3, #4
 800236e:	d05d      	beq.n	800242c <__aeabi_dmul+0x5a4>
 8002370:	1d11      	adds	r1, r2, #4
 8002372:	4291      	cmp	r1, r2
 8002374:	419b      	sbcs	r3, r3
 8002376:	000a      	movs	r2, r1
 8002378:	425b      	negs	r3, r3
 800237a:	075b      	lsls	r3, r3, #29
 800237c:	08d2      	lsrs	r2, r2, #3
 800237e:	431a      	orrs	r2, r3
 8002380:	2300      	movs	r3, #0
 8002382:	e5df      	b.n	8001f44 <__aeabi_dmul+0xbc>
 8002384:	9b03      	ldr	r3, [sp, #12]
 8002386:	4699      	mov	r9, r3
 8002388:	e5fa      	b.n	8001f80 <__aeabi_dmul+0xf8>
 800238a:	9801      	ldr	r0, [sp, #4]
 800238c:	f000 fde6 	bl	8002f5c <__clzsi2>
 8002390:	0002      	movs	r2, r0
 8002392:	0003      	movs	r3, r0
 8002394:	3215      	adds	r2, #21
 8002396:	3320      	adds	r3, #32
 8002398:	2a1c      	cmp	r2, #28
 800239a:	dc00      	bgt.n	800239e <__aeabi_dmul+0x516>
 800239c:	e738      	b.n	8002210 <__aeabi_dmul+0x388>
 800239e:	9a01      	ldr	r2, [sp, #4]
 80023a0:	3808      	subs	r0, #8
 80023a2:	4082      	lsls	r2, r0
 80023a4:	e73f      	b.n	8002226 <__aeabi_dmul+0x39e>
 80023a6:	f000 fdd9 	bl	8002f5c <__clzsi2>
 80023aa:	2315      	movs	r3, #21
 80023ac:	469c      	mov	ip, r3
 80023ae:	4484      	add	ip, r0
 80023b0:	0002      	movs	r2, r0
 80023b2:	4663      	mov	r3, ip
 80023b4:	3220      	adds	r2, #32
 80023b6:	2b1c      	cmp	r3, #28
 80023b8:	dc00      	bgt.n	80023bc <__aeabi_dmul+0x534>
 80023ba:	e758      	b.n	800226e <__aeabi_dmul+0x3e6>
 80023bc:	2300      	movs	r3, #0
 80023be:	4698      	mov	r8, r3
 80023c0:	0023      	movs	r3, r4
 80023c2:	3808      	subs	r0, #8
 80023c4:	4083      	lsls	r3, r0
 80023c6:	469a      	mov	sl, r3
 80023c8:	e762      	b.n	8002290 <__aeabi_dmul+0x408>
 80023ca:	001d      	movs	r5, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	2400      	movs	r4, #0
 80023d0:	2002      	movs	r0, #2
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	e5a2      	b.n	8001f1c <__aeabi_dmul+0x94>
 80023d6:	9002      	str	r0, [sp, #8]
 80023d8:	e632      	b.n	8002040 <__aeabi_dmul+0x1b8>
 80023da:	431c      	orrs	r4, r3
 80023dc:	9b00      	ldr	r3, [sp, #0]
 80023de:	9a01      	ldr	r2, [sp, #4]
 80023e0:	4699      	mov	r9, r3
 80023e2:	e5ae      	b.n	8001f42 <__aeabi_dmul+0xba>
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <__aeabi_dmul+0x5c8>)
 80023e6:	4652      	mov	r2, sl
 80023e8:	18c3      	adds	r3, r0, r3
 80023ea:	4640      	mov	r0, r8
 80023ec:	409a      	lsls	r2, r3
 80023ee:	40c8      	lsrs	r0, r1
 80023f0:	4302      	orrs	r2, r0
 80023f2:	4640      	mov	r0, r8
 80023f4:	4098      	lsls	r0, r3
 80023f6:	0003      	movs	r3, r0
 80023f8:	1e58      	subs	r0, r3, #1
 80023fa:	4183      	sbcs	r3, r0
 80023fc:	4654      	mov	r4, sl
 80023fe:	431a      	orrs	r2, r3
 8002400:	40cc      	lsrs	r4, r1
 8002402:	0753      	lsls	r3, r2, #29
 8002404:	d009      	beq.n	800241a <__aeabi_dmul+0x592>
 8002406:	230f      	movs	r3, #15
 8002408:	4013      	ands	r3, r2
 800240a:	2b04      	cmp	r3, #4
 800240c:	d005      	beq.n	800241a <__aeabi_dmul+0x592>
 800240e:	1d13      	adds	r3, r2, #4
 8002410:	4293      	cmp	r3, r2
 8002412:	4192      	sbcs	r2, r2
 8002414:	4252      	negs	r2, r2
 8002416:	18a4      	adds	r4, r4, r2
 8002418:	001a      	movs	r2, r3
 800241a:	0223      	lsls	r3, r4, #8
 800241c:	d508      	bpl.n	8002430 <__aeabi_dmul+0x5a8>
 800241e:	2301      	movs	r3, #1
 8002420:	2400      	movs	r4, #0
 8002422:	2200      	movs	r2, #0
 8002424:	e58e      	b.n	8001f44 <__aeabi_dmul+0xbc>
 8002426:	4689      	mov	r9, r1
 8002428:	2400      	movs	r4, #0
 800242a:	e58b      	b.n	8001f44 <__aeabi_dmul+0xbc>
 800242c:	2300      	movs	r3, #0
 800242e:	e7a5      	b.n	800237c <__aeabi_dmul+0x4f4>
 8002430:	0763      	lsls	r3, r4, #29
 8002432:	0264      	lsls	r4, r4, #9
 8002434:	0b24      	lsrs	r4, r4, #12
 8002436:	e7a1      	b.n	800237c <__aeabi_dmul+0x4f4>
 8002438:	9b00      	ldr	r3, [sp, #0]
 800243a:	46a2      	mov	sl, r4
 800243c:	4699      	mov	r9, r3
 800243e:	9b01      	ldr	r3, [sp, #4]
 8002440:	4698      	mov	r8, r3
 8002442:	e737      	b.n	80022b4 <__aeabi_dmul+0x42c>
 8002444:	fffffc0d 	.word	0xfffffc0d
 8002448:	000007ff 	.word	0x000007ff
 800244c:	0000043e 	.word	0x0000043e
 8002450:	0000041e 	.word	0x0000041e

08002454 <__aeabi_dsub>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	b083      	sub	sp, #12
 8002462:	9000      	str	r0, [sp, #0]
 8002464:	9101      	str	r1, [sp, #4]
 8002466:	030c      	lsls	r4, r1, #12
 8002468:	004d      	lsls	r5, r1, #1
 800246a:	0fce      	lsrs	r6, r1, #31
 800246c:	0a61      	lsrs	r1, r4, #9
 800246e:	9c00      	ldr	r4, [sp, #0]
 8002470:	005f      	lsls	r7, r3, #1
 8002472:	0f64      	lsrs	r4, r4, #29
 8002474:	430c      	orrs	r4, r1
 8002476:	9900      	ldr	r1, [sp, #0]
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	00c8      	lsls	r0, r1, #3
 800247e:	0319      	lsls	r1, r3, #12
 8002480:	0d7b      	lsrs	r3, r7, #21
 8002482:	4699      	mov	r9, r3
 8002484:	9b01      	ldr	r3, [sp, #4]
 8002486:	4fcc      	ldr	r7, [pc, #816]	@ (80027b8 <__aeabi_dsub+0x364>)
 8002488:	0fdb      	lsrs	r3, r3, #31
 800248a:	469c      	mov	ip, r3
 800248c:	0a4b      	lsrs	r3, r1, #9
 800248e:	9900      	ldr	r1, [sp, #0]
 8002490:	4680      	mov	r8, r0
 8002492:	0f49      	lsrs	r1, r1, #29
 8002494:	4319      	orrs	r1, r3
 8002496:	9b00      	ldr	r3, [sp, #0]
 8002498:	468b      	mov	fp, r1
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	4692      	mov	sl, r2
 800249e:	0d6d      	lsrs	r5, r5, #21
 80024a0:	45b9      	cmp	r9, r7
 80024a2:	d100      	bne.n	80024a6 <__aeabi_dsub+0x52>
 80024a4:	e0bf      	b.n	8002626 <__aeabi_dsub+0x1d2>
 80024a6:	2301      	movs	r3, #1
 80024a8:	4661      	mov	r1, ip
 80024aa:	4059      	eors	r1, r3
 80024ac:	464b      	mov	r3, r9
 80024ae:	468c      	mov	ip, r1
 80024b0:	1aeb      	subs	r3, r5, r3
 80024b2:	428e      	cmp	r6, r1
 80024b4:	d075      	beq.n	80025a2 <__aeabi_dsub+0x14e>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	dc00      	bgt.n	80024bc <__aeabi_dsub+0x68>
 80024ba:	e2a3      	b.n	8002a04 <__aeabi_dsub+0x5b0>
 80024bc:	4649      	mov	r1, r9
 80024be:	2900      	cmp	r1, #0
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x70>
 80024c2:	e0ce      	b.n	8002662 <__aeabi_dsub+0x20e>
 80024c4:	42bd      	cmp	r5, r7
 80024c6:	d100      	bne.n	80024ca <__aeabi_dsub+0x76>
 80024c8:	e200      	b.n	80028cc <__aeabi_dsub+0x478>
 80024ca:	2701      	movs	r7, #1
 80024cc:	2b38      	cmp	r3, #56	@ 0x38
 80024ce:	dc19      	bgt.n	8002504 <__aeabi_dsub+0xb0>
 80024d0:	2780      	movs	r7, #128	@ 0x80
 80024d2:	4659      	mov	r1, fp
 80024d4:	043f      	lsls	r7, r7, #16
 80024d6:	4339      	orrs	r1, r7
 80024d8:	468b      	mov	fp, r1
 80024da:	2b1f      	cmp	r3, #31
 80024dc:	dd00      	ble.n	80024e0 <__aeabi_dsub+0x8c>
 80024de:	e1fa      	b.n	80028d6 <__aeabi_dsub+0x482>
 80024e0:	2720      	movs	r7, #32
 80024e2:	1af9      	subs	r1, r7, r3
 80024e4:	468c      	mov	ip, r1
 80024e6:	4659      	mov	r1, fp
 80024e8:	4667      	mov	r7, ip
 80024ea:	40b9      	lsls	r1, r7
 80024ec:	000f      	movs	r7, r1
 80024ee:	0011      	movs	r1, r2
 80024f0:	40d9      	lsrs	r1, r3
 80024f2:	430f      	orrs	r7, r1
 80024f4:	4661      	mov	r1, ip
 80024f6:	408a      	lsls	r2, r1
 80024f8:	1e51      	subs	r1, r2, #1
 80024fa:	418a      	sbcs	r2, r1
 80024fc:	4659      	mov	r1, fp
 80024fe:	40d9      	lsrs	r1, r3
 8002500:	4317      	orrs	r7, r2
 8002502:	1a64      	subs	r4, r4, r1
 8002504:	1bc7      	subs	r7, r0, r7
 8002506:	42b8      	cmp	r0, r7
 8002508:	4180      	sbcs	r0, r0
 800250a:	4240      	negs	r0, r0
 800250c:	1a24      	subs	r4, r4, r0
 800250e:	0223      	lsls	r3, r4, #8
 8002510:	d400      	bmi.n	8002514 <__aeabi_dsub+0xc0>
 8002512:	e140      	b.n	8002796 <__aeabi_dsub+0x342>
 8002514:	0264      	lsls	r4, r4, #9
 8002516:	0a64      	lsrs	r4, r4, #9
 8002518:	2c00      	cmp	r4, #0
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0xca>
 800251c:	e154      	b.n	80027c8 <__aeabi_dsub+0x374>
 800251e:	0020      	movs	r0, r4
 8002520:	f000 fd1c 	bl	8002f5c <__clzsi2>
 8002524:	0003      	movs	r3, r0
 8002526:	3b08      	subs	r3, #8
 8002528:	2120      	movs	r1, #32
 800252a:	0038      	movs	r0, r7
 800252c:	1aca      	subs	r2, r1, r3
 800252e:	40d0      	lsrs	r0, r2
 8002530:	409c      	lsls	r4, r3
 8002532:	0002      	movs	r2, r0
 8002534:	409f      	lsls	r7, r3
 8002536:	4322      	orrs	r2, r4
 8002538:	429d      	cmp	r5, r3
 800253a:	dd00      	ble.n	800253e <__aeabi_dsub+0xea>
 800253c:	e1a6      	b.n	800288c <__aeabi_dsub+0x438>
 800253e:	1b58      	subs	r0, r3, r5
 8002540:	3001      	adds	r0, #1
 8002542:	1a09      	subs	r1, r1, r0
 8002544:	003c      	movs	r4, r7
 8002546:	408f      	lsls	r7, r1
 8002548:	40c4      	lsrs	r4, r0
 800254a:	1e7b      	subs	r3, r7, #1
 800254c:	419f      	sbcs	r7, r3
 800254e:	0013      	movs	r3, r2
 8002550:	408b      	lsls	r3, r1
 8002552:	4327      	orrs	r7, r4
 8002554:	431f      	orrs	r7, r3
 8002556:	40c2      	lsrs	r2, r0
 8002558:	003b      	movs	r3, r7
 800255a:	0014      	movs	r4, r2
 800255c:	2500      	movs	r5, #0
 800255e:	4313      	orrs	r3, r2
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x110>
 8002562:	e1f7      	b.n	8002954 <__aeabi_dsub+0x500>
 8002564:	077b      	lsls	r3, r7, #29
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x116>
 8002568:	e377      	b.n	8002c5a <__aeabi_dsub+0x806>
 800256a:	230f      	movs	r3, #15
 800256c:	0038      	movs	r0, r7
 800256e:	403b      	ands	r3, r7
 8002570:	2b04      	cmp	r3, #4
 8002572:	d004      	beq.n	800257e <__aeabi_dsub+0x12a>
 8002574:	1d38      	adds	r0, r7, #4
 8002576:	42b8      	cmp	r0, r7
 8002578:	41bf      	sbcs	r7, r7
 800257a:	427f      	negs	r7, r7
 800257c:	19e4      	adds	r4, r4, r7
 800257e:	0223      	lsls	r3, r4, #8
 8002580:	d400      	bmi.n	8002584 <__aeabi_dsub+0x130>
 8002582:	e368      	b.n	8002c56 <__aeabi_dsub+0x802>
 8002584:	4b8c      	ldr	r3, [pc, #560]	@ (80027b8 <__aeabi_dsub+0x364>)
 8002586:	3501      	adds	r5, #1
 8002588:	429d      	cmp	r5, r3
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x13a>
 800258c:	e0f4      	b.n	8002778 <__aeabi_dsub+0x324>
 800258e:	4b8b      	ldr	r3, [pc, #556]	@ (80027bc <__aeabi_dsub+0x368>)
 8002590:	056d      	lsls	r5, r5, #21
 8002592:	401c      	ands	r4, r3
 8002594:	0d6d      	lsrs	r5, r5, #21
 8002596:	0767      	lsls	r7, r4, #29
 8002598:	08c0      	lsrs	r0, r0, #3
 800259a:	0264      	lsls	r4, r4, #9
 800259c:	4307      	orrs	r7, r0
 800259e:	0b24      	lsrs	r4, r4, #12
 80025a0:	e0ec      	b.n	800277c <__aeabi_dsub+0x328>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	dc00      	bgt.n	80025a8 <__aeabi_dsub+0x154>
 80025a6:	e329      	b.n	8002bfc <__aeabi_dsub+0x7a8>
 80025a8:	4649      	mov	r1, r9
 80025aa:	2900      	cmp	r1, #0
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dsub+0x15c>
 80025ae:	e0d6      	b.n	800275e <__aeabi_dsub+0x30a>
 80025b0:	4659      	mov	r1, fp
 80025b2:	4311      	orrs	r1, r2
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x164>
 80025b6:	e12e      	b.n	8002816 <__aeabi_dsub+0x3c2>
 80025b8:	1e59      	subs	r1, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x16c>
 80025be:	e1e6      	b.n	800298e <__aeabi_dsub+0x53a>
 80025c0:	42bb      	cmp	r3, r7
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dsub+0x172>
 80025c4:	e182      	b.n	80028cc <__aeabi_dsub+0x478>
 80025c6:	2701      	movs	r7, #1
 80025c8:	000b      	movs	r3, r1
 80025ca:	2938      	cmp	r1, #56	@ 0x38
 80025cc:	dc14      	bgt.n	80025f8 <__aeabi_dsub+0x1a4>
 80025ce:	2b1f      	cmp	r3, #31
 80025d0:	dd00      	ble.n	80025d4 <__aeabi_dsub+0x180>
 80025d2:	e23c      	b.n	8002a4e <__aeabi_dsub+0x5fa>
 80025d4:	2720      	movs	r7, #32
 80025d6:	1af9      	subs	r1, r7, r3
 80025d8:	468c      	mov	ip, r1
 80025da:	4659      	mov	r1, fp
 80025dc:	4667      	mov	r7, ip
 80025de:	40b9      	lsls	r1, r7
 80025e0:	000f      	movs	r7, r1
 80025e2:	0011      	movs	r1, r2
 80025e4:	40d9      	lsrs	r1, r3
 80025e6:	430f      	orrs	r7, r1
 80025e8:	4661      	mov	r1, ip
 80025ea:	408a      	lsls	r2, r1
 80025ec:	1e51      	subs	r1, r2, #1
 80025ee:	418a      	sbcs	r2, r1
 80025f0:	4659      	mov	r1, fp
 80025f2:	40d9      	lsrs	r1, r3
 80025f4:	4317      	orrs	r7, r2
 80025f6:	1864      	adds	r4, r4, r1
 80025f8:	183f      	adds	r7, r7, r0
 80025fa:	4287      	cmp	r7, r0
 80025fc:	4180      	sbcs	r0, r0
 80025fe:	4240      	negs	r0, r0
 8002600:	1824      	adds	r4, r4, r0
 8002602:	0223      	lsls	r3, r4, #8
 8002604:	d400      	bmi.n	8002608 <__aeabi_dsub+0x1b4>
 8002606:	e0c6      	b.n	8002796 <__aeabi_dsub+0x342>
 8002608:	4b6b      	ldr	r3, [pc, #428]	@ (80027b8 <__aeabi_dsub+0x364>)
 800260a:	3501      	adds	r5, #1
 800260c:	429d      	cmp	r5, r3
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x1be>
 8002610:	e0b2      	b.n	8002778 <__aeabi_dsub+0x324>
 8002612:	2101      	movs	r1, #1
 8002614:	4b69      	ldr	r3, [pc, #420]	@ (80027bc <__aeabi_dsub+0x368>)
 8002616:	087a      	lsrs	r2, r7, #1
 8002618:	401c      	ands	r4, r3
 800261a:	4039      	ands	r1, r7
 800261c:	430a      	orrs	r2, r1
 800261e:	07e7      	lsls	r7, r4, #31
 8002620:	4317      	orrs	r7, r2
 8002622:	0864      	lsrs	r4, r4, #1
 8002624:	e79e      	b.n	8002564 <__aeabi_dsub+0x110>
 8002626:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <__aeabi_dsub+0x36c>)
 8002628:	4311      	orrs	r1, r2
 800262a:	468a      	mov	sl, r1
 800262c:	18eb      	adds	r3, r5, r3
 800262e:	2900      	cmp	r1, #0
 8002630:	d028      	beq.n	8002684 <__aeabi_dsub+0x230>
 8002632:	4566      	cmp	r6, ip
 8002634:	d02c      	beq.n	8002690 <__aeabi_dsub+0x23c>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d05b      	beq.n	80026f2 <__aeabi_dsub+0x29e>
 800263a:	2d00      	cmp	r5, #0
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x1ec>
 800263e:	e12c      	b.n	800289a <__aeabi_dsub+0x446>
 8002640:	465b      	mov	r3, fp
 8002642:	4666      	mov	r6, ip
 8002644:	075f      	lsls	r7, r3, #29
 8002646:	08d2      	lsrs	r2, r2, #3
 8002648:	4317      	orrs	r7, r2
 800264a:	08dd      	lsrs	r5, r3, #3
 800264c:	003b      	movs	r3, r7
 800264e:	432b      	orrs	r3, r5
 8002650:	d100      	bne.n	8002654 <__aeabi_dsub+0x200>
 8002652:	e0e2      	b.n	800281a <__aeabi_dsub+0x3c6>
 8002654:	2480      	movs	r4, #128	@ 0x80
 8002656:	0324      	lsls	r4, r4, #12
 8002658:	432c      	orrs	r4, r5
 800265a:	0324      	lsls	r4, r4, #12
 800265c:	4d56      	ldr	r5, [pc, #344]	@ (80027b8 <__aeabi_dsub+0x364>)
 800265e:	0b24      	lsrs	r4, r4, #12
 8002660:	e08c      	b.n	800277c <__aeabi_dsub+0x328>
 8002662:	4659      	mov	r1, fp
 8002664:	4311      	orrs	r1, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x216>
 8002668:	e0d5      	b.n	8002816 <__aeabi_dsub+0x3c2>
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x21e>
 8002670:	e1b9      	b.n	80029e6 <__aeabi_dsub+0x592>
 8002672:	42bb      	cmp	r3, r7
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x224>
 8002676:	e1b1      	b.n	80029dc <__aeabi_dsub+0x588>
 8002678:	2701      	movs	r7, #1
 800267a:	000b      	movs	r3, r1
 800267c:	2938      	cmp	r1, #56	@ 0x38
 800267e:	dd00      	ble.n	8002682 <__aeabi_dsub+0x22e>
 8002680:	e740      	b.n	8002504 <__aeabi_dsub+0xb0>
 8002682:	e72a      	b.n	80024da <__aeabi_dsub+0x86>
 8002684:	4661      	mov	r1, ip
 8002686:	2701      	movs	r7, #1
 8002688:	4079      	eors	r1, r7
 800268a:	468c      	mov	ip, r1
 800268c:	4566      	cmp	r6, ip
 800268e:	d1d2      	bne.n	8002636 <__aeabi_dsub+0x1e2>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x242>
 8002694:	e0c5      	b.n	8002822 <__aeabi_dsub+0x3ce>
 8002696:	2d00      	cmp	r5, #0
 8002698:	d000      	beq.n	800269c <__aeabi_dsub+0x248>
 800269a:	e155      	b.n	8002948 <__aeabi_dsub+0x4f4>
 800269c:	464b      	mov	r3, r9
 800269e:	0025      	movs	r5, r4
 80026a0:	4305      	orrs	r5, r0
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dsub+0x252>
 80026a4:	e212      	b.n	8002acc <__aeabi_dsub+0x678>
 80026a6:	1e59      	subs	r1, r3, #1
 80026a8:	468c      	mov	ip, r1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x25c>
 80026ae:	e249      	b.n	8002b44 <__aeabi_dsub+0x6f0>
 80026b0:	4d41      	ldr	r5, [pc, #260]	@ (80027b8 <__aeabi_dsub+0x364>)
 80026b2:	42ab      	cmp	r3, r5
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0x264>
 80026b6:	e28f      	b.n	8002bd8 <__aeabi_dsub+0x784>
 80026b8:	2701      	movs	r7, #1
 80026ba:	2938      	cmp	r1, #56	@ 0x38
 80026bc:	dc11      	bgt.n	80026e2 <__aeabi_dsub+0x28e>
 80026be:	4663      	mov	r3, ip
 80026c0:	2b1f      	cmp	r3, #31
 80026c2:	dd00      	ble.n	80026c6 <__aeabi_dsub+0x272>
 80026c4:	e25b      	b.n	8002b7e <__aeabi_dsub+0x72a>
 80026c6:	4661      	mov	r1, ip
 80026c8:	2320      	movs	r3, #32
 80026ca:	0027      	movs	r7, r4
 80026cc:	1a5b      	subs	r3, r3, r1
 80026ce:	0005      	movs	r5, r0
 80026d0:	4098      	lsls	r0, r3
 80026d2:	409f      	lsls	r7, r3
 80026d4:	40cd      	lsrs	r5, r1
 80026d6:	1e43      	subs	r3, r0, #1
 80026d8:	4198      	sbcs	r0, r3
 80026da:	40cc      	lsrs	r4, r1
 80026dc:	432f      	orrs	r7, r5
 80026de:	4307      	orrs	r7, r0
 80026e0:	44a3      	add	fp, r4
 80026e2:	18bf      	adds	r7, r7, r2
 80026e4:	4297      	cmp	r7, r2
 80026e6:	4192      	sbcs	r2, r2
 80026e8:	4252      	negs	r2, r2
 80026ea:	445a      	add	r2, fp
 80026ec:	0014      	movs	r4, r2
 80026ee:	464d      	mov	r5, r9
 80026f0:	e787      	b.n	8002602 <__aeabi_dsub+0x1ae>
 80026f2:	4f34      	ldr	r7, [pc, #208]	@ (80027c4 <__aeabi_dsub+0x370>)
 80026f4:	1c6b      	adds	r3, r5, #1
 80026f6:	423b      	tst	r3, r7
 80026f8:	d000      	beq.n	80026fc <__aeabi_dsub+0x2a8>
 80026fa:	e0b6      	b.n	800286a <__aeabi_dsub+0x416>
 80026fc:	4659      	mov	r1, fp
 80026fe:	0023      	movs	r3, r4
 8002700:	4311      	orrs	r1, r2
 8002702:	000f      	movs	r7, r1
 8002704:	4303      	orrs	r3, r0
 8002706:	2d00      	cmp	r5, #0
 8002708:	d000      	beq.n	800270c <__aeabi_dsub+0x2b8>
 800270a:	e126      	b.n	800295a <__aeabi_dsub+0x506>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x2be>
 8002710:	e1c0      	b.n	8002a94 <__aeabi_dsub+0x640>
 8002712:	2900      	cmp	r1, #0
 8002714:	d100      	bne.n	8002718 <__aeabi_dsub+0x2c4>
 8002716:	e0a1      	b.n	800285c <__aeabi_dsub+0x408>
 8002718:	1a83      	subs	r3, r0, r2
 800271a:	4698      	mov	r8, r3
 800271c:	465b      	mov	r3, fp
 800271e:	4540      	cmp	r0, r8
 8002720:	41ad      	sbcs	r5, r5
 8002722:	1ae3      	subs	r3, r4, r3
 8002724:	426d      	negs	r5, r5
 8002726:	1b5b      	subs	r3, r3, r5
 8002728:	2580      	movs	r5, #128	@ 0x80
 800272a:	042d      	lsls	r5, r5, #16
 800272c:	422b      	tst	r3, r5
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x2de>
 8002730:	e14b      	b.n	80029ca <__aeabi_dsub+0x576>
 8002732:	465b      	mov	r3, fp
 8002734:	1a10      	subs	r0, r2, r0
 8002736:	4282      	cmp	r2, r0
 8002738:	4192      	sbcs	r2, r2
 800273a:	1b1c      	subs	r4, r3, r4
 800273c:	0007      	movs	r7, r0
 800273e:	2601      	movs	r6, #1
 8002740:	4663      	mov	r3, ip
 8002742:	4252      	negs	r2, r2
 8002744:	1aa4      	subs	r4, r4, r2
 8002746:	4327      	orrs	r7, r4
 8002748:	401e      	ands	r6, r3
 800274a:	2f00      	cmp	r7, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x2fc>
 800274e:	e142      	b.n	80029d6 <__aeabi_dsub+0x582>
 8002750:	422c      	tst	r4, r5
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x302>
 8002754:	e26d      	b.n	8002c32 <__aeabi_dsub+0x7de>
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <__aeabi_dsub+0x368>)
 8002758:	2501      	movs	r5, #1
 800275a:	401c      	ands	r4, r3
 800275c:	e71b      	b.n	8002596 <__aeabi_dsub+0x142>
 800275e:	42bd      	cmp	r5, r7
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x310>
 8002762:	e13b      	b.n	80029dc <__aeabi_dsub+0x588>
 8002764:	2701      	movs	r7, #1
 8002766:	2b38      	cmp	r3, #56	@ 0x38
 8002768:	dd00      	ble.n	800276c <__aeabi_dsub+0x318>
 800276a:	e745      	b.n	80025f8 <__aeabi_dsub+0x1a4>
 800276c:	2780      	movs	r7, #128	@ 0x80
 800276e:	4659      	mov	r1, fp
 8002770:	043f      	lsls	r7, r7, #16
 8002772:	4339      	orrs	r1, r7
 8002774:	468b      	mov	fp, r1
 8002776:	e72a      	b.n	80025ce <__aeabi_dsub+0x17a>
 8002778:	2400      	movs	r4, #0
 800277a:	2700      	movs	r7, #0
 800277c:	052d      	lsls	r5, r5, #20
 800277e:	4325      	orrs	r5, r4
 8002780:	07f6      	lsls	r6, r6, #31
 8002782:	4335      	orrs	r5, r6
 8002784:	0038      	movs	r0, r7
 8002786:	0029      	movs	r1, r5
 8002788:	b003      	add	sp, #12
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002796:	077b      	lsls	r3, r7, #29
 8002798:	d004      	beq.n	80027a4 <__aeabi_dsub+0x350>
 800279a:	230f      	movs	r3, #15
 800279c:	403b      	ands	r3, r7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d000      	beq.n	80027a4 <__aeabi_dsub+0x350>
 80027a2:	e6e7      	b.n	8002574 <__aeabi_dsub+0x120>
 80027a4:	002b      	movs	r3, r5
 80027a6:	08f8      	lsrs	r0, r7, #3
 80027a8:	4a03      	ldr	r2, [pc, #12]	@ (80027b8 <__aeabi_dsub+0x364>)
 80027aa:	0767      	lsls	r7, r4, #29
 80027ac:	4307      	orrs	r7, r0
 80027ae:	08e5      	lsrs	r5, r4, #3
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x362>
 80027b4:	e74a      	b.n	800264c <__aeabi_dsub+0x1f8>
 80027b6:	e0a5      	b.n	8002904 <__aeabi_dsub+0x4b0>
 80027b8:	000007ff 	.word	0x000007ff
 80027bc:	ff7fffff 	.word	0xff7fffff
 80027c0:	fffff801 	.word	0xfffff801
 80027c4:	000007fe 	.word	0x000007fe
 80027c8:	0038      	movs	r0, r7
 80027ca:	f000 fbc7 	bl	8002f5c <__clzsi2>
 80027ce:	0003      	movs	r3, r0
 80027d0:	3318      	adds	r3, #24
 80027d2:	2b1f      	cmp	r3, #31
 80027d4:	dc00      	bgt.n	80027d8 <__aeabi_dsub+0x384>
 80027d6:	e6a7      	b.n	8002528 <__aeabi_dsub+0xd4>
 80027d8:	003a      	movs	r2, r7
 80027da:	3808      	subs	r0, #8
 80027dc:	4082      	lsls	r2, r0
 80027de:	429d      	cmp	r5, r3
 80027e0:	dd00      	ble.n	80027e4 <__aeabi_dsub+0x390>
 80027e2:	e08a      	b.n	80028fa <__aeabi_dsub+0x4a6>
 80027e4:	1b5b      	subs	r3, r3, r5
 80027e6:	1c58      	adds	r0, r3, #1
 80027e8:	281f      	cmp	r0, #31
 80027ea:	dc00      	bgt.n	80027ee <__aeabi_dsub+0x39a>
 80027ec:	e1d8      	b.n	8002ba0 <__aeabi_dsub+0x74c>
 80027ee:	0017      	movs	r7, r2
 80027f0:	3b1f      	subs	r3, #31
 80027f2:	40df      	lsrs	r7, r3
 80027f4:	2820      	cmp	r0, #32
 80027f6:	d005      	beq.n	8002804 <__aeabi_dsub+0x3b0>
 80027f8:	2340      	movs	r3, #64	@ 0x40
 80027fa:	1a1b      	subs	r3, r3, r0
 80027fc:	409a      	lsls	r2, r3
 80027fe:	1e53      	subs	r3, r2, #1
 8002800:	419a      	sbcs	r2, r3
 8002802:	4317      	orrs	r7, r2
 8002804:	2500      	movs	r5, #0
 8002806:	2f00      	cmp	r7, #0
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x3b8>
 800280a:	e0e5      	b.n	80029d8 <__aeabi_dsub+0x584>
 800280c:	077b      	lsls	r3, r7, #29
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x3be>
 8002810:	e6ab      	b.n	800256a <__aeabi_dsub+0x116>
 8002812:	002c      	movs	r4, r5
 8002814:	e7c6      	b.n	80027a4 <__aeabi_dsub+0x350>
 8002816:	08c0      	lsrs	r0, r0, #3
 8002818:	e7c6      	b.n	80027a8 <__aeabi_dsub+0x354>
 800281a:	2700      	movs	r7, #0
 800281c:	2400      	movs	r4, #0
 800281e:	4dd1      	ldr	r5, [pc, #836]	@ (8002b64 <__aeabi_dsub+0x710>)
 8002820:	e7ac      	b.n	800277c <__aeabi_dsub+0x328>
 8002822:	4fd1      	ldr	r7, [pc, #836]	@ (8002b68 <__aeabi_dsub+0x714>)
 8002824:	1c6b      	adds	r3, r5, #1
 8002826:	423b      	tst	r3, r7
 8002828:	d171      	bne.n	800290e <__aeabi_dsub+0x4ba>
 800282a:	0023      	movs	r3, r4
 800282c:	4303      	orrs	r3, r0
 800282e:	2d00      	cmp	r5, #0
 8002830:	d000      	beq.n	8002834 <__aeabi_dsub+0x3e0>
 8002832:	e14e      	b.n	8002ad2 <__aeabi_dsub+0x67e>
 8002834:	4657      	mov	r7, sl
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x3e8>
 800283a:	e1b5      	b.n	8002ba8 <__aeabi_dsub+0x754>
 800283c:	2f00      	cmp	r7, #0
 800283e:	d00d      	beq.n	800285c <__aeabi_dsub+0x408>
 8002840:	1883      	adds	r3, r0, r2
 8002842:	4283      	cmp	r3, r0
 8002844:	4180      	sbcs	r0, r0
 8002846:	445c      	add	r4, fp
 8002848:	4240      	negs	r0, r0
 800284a:	1824      	adds	r4, r4, r0
 800284c:	0222      	lsls	r2, r4, #8
 800284e:	d500      	bpl.n	8002852 <__aeabi_dsub+0x3fe>
 8002850:	e1c8      	b.n	8002be4 <__aeabi_dsub+0x790>
 8002852:	001f      	movs	r7, r3
 8002854:	4698      	mov	r8, r3
 8002856:	4327      	orrs	r7, r4
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x408>
 800285a:	e0bc      	b.n	80029d6 <__aeabi_dsub+0x582>
 800285c:	4643      	mov	r3, r8
 800285e:	0767      	lsls	r7, r4, #29
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	431f      	orrs	r7, r3
 8002864:	08e5      	lsrs	r5, r4, #3
 8002866:	2300      	movs	r3, #0
 8002868:	e04c      	b.n	8002904 <__aeabi_dsub+0x4b0>
 800286a:	1a83      	subs	r3, r0, r2
 800286c:	4698      	mov	r8, r3
 800286e:	465b      	mov	r3, fp
 8002870:	4540      	cmp	r0, r8
 8002872:	41bf      	sbcs	r7, r7
 8002874:	1ae3      	subs	r3, r4, r3
 8002876:	427f      	negs	r7, r7
 8002878:	1bdb      	subs	r3, r3, r7
 800287a:	021f      	lsls	r7, r3, #8
 800287c:	d47c      	bmi.n	8002978 <__aeabi_dsub+0x524>
 800287e:	4647      	mov	r7, r8
 8002880:	431f      	orrs	r7, r3
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x432>
 8002884:	e0a6      	b.n	80029d4 <__aeabi_dsub+0x580>
 8002886:	001c      	movs	r4, r3
 8002888:	4647      	mov	r7, r8
 800288a:	e645      	b.n	8002518 <__aeabi_dsub+0xc4>
 800288c:	4cb7      	ldr	r4, [pc, #732]	@ (8002b6c <__aeabi_dsub+0x718>)
 800288e:	1aed      	subs	r5, r5, r3
 8002890:	4014      	ands	r4, r2
 8002892:	077b      	lsls	r3, r7, #29
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x444>
 8002896:	e780      	b.n	800279a <__aeabi_dsub+0x346>
 8002898:	e784      	b.n	80027a4 <__aeabi_dsub+0x350>
 800289a:	464b      	mov	r3, r9
 800289c:	0025      	movs	r5, r4
 800289e:	4305      	orrs	r5, r0
 80028a0:	d066      	beq.n	8002970 <__aeabi_dsub+0x51c>
 80028a2:	1e5f      	subs	r7, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x456>
 80028a8:	e0fc      	b.n	8002aa4 <__aeabi_dsub+0x650>
 80028aa:	4dae      	ldr	r5, [pc, #696]	@ (8002b64 <__aeabi_dsub+0x710>)
 80028ac:	42ab      	cmp	r3, r5
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x45e>
 80028b0:	e15e      	b.n	8002b70 <__aeabi_dsub+0x71c>
 80028b2:	4666      	mov	r6, ip
 80028b4:	2f38      	cmp	r7, #56	@ 0x38
 80028b6:	dc00      	bgt.n	80028ba <__aeabi_dsub+0x466>
 80028b8:	e0b4      	b.n	8002a24 <__aeabi_dsub+0x5d0>
 80028ba:	2001      	movs	r0, #1
 80028bc:	1a17      	subs	r7, r2, r0
 80028be:	42ba      	cmp	r2, r7
 80028c0:	4192      	sbcs	r2, r2
 80028c2:	465b      	mov	r3, fp
 80028c4:	4252      	negs	r2, r2
 80028c6:	464d      	mov	r5, r9
 80028c8:	1a9c      	subs	r4, r3, r2
 80028ca:	e620      	b.n	800250e <__aeabi_dsub+0xba>
 80028cc:	0767      	lsls	r7, r4, #29
 80028ce:	08c0      	lsrs	r0, r0, #3
 80028d0:	4307      	orrs	r7, r0
 80028d2:	08e5      	lsrs	r5, r4, #3
 80028d4:	e6ba      	b.n	800264c <__aeabi_dsub+0x1f8>
 80028d6:	001f      	movs	r7, r3
 80028d8:	4659      	mov	r1, fp
 80028da:	3f20      	subs	r7, #32
 80028dc:	40f9      	lsrs	r1, r7
 80028de:	000f      	movs	r7, r1
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d005      	beq.n	80028f0 <__aeabi_dsub+0x49c>
 80028e4:	2140      	movs	r1, #64	@ 0x40
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	4659      	mov	r1, fp
 80028ea:	4099      	lsls	r1, r3
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4692      	mov	sl, r2
 80028f0:	4653      	mov	r3, sl
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	4193      	sbcs	r3, r2
 80028f6:	431f      	orrs	r7, r3
 80028f8:	e604      	b.n	8002504 <__aeabi_dsub+0xb0>
 80028fa:	1aeb      	subs	r3, r5, r3
 80028fc:	4d9b      	ldr	r5, [pc, #620]	@ (8002b6c <__aeabi_dsub+0x718>)
 80028fe:	4015      	ands	r5, r2
 8002900:	076f      	lsls	r7, r5, #29
 8002902:	08ed      	lsrs	r5, r5, #3
 8002904:	032c      	lsls	r4, r5, #12
 8002906:	055d      	lsls	r5, r3, #21
 8002908:	0b24      	lsrs	r4, r4, #12
 800290a:	0d6d      	lsrs	r5, r5, #21
 800290c:	e736      	b.n	800277c <__aeabi_dsub+0x328>
 800290e:	4d95      	ldr	r5, [pc, #596]	@ (8002b64 <__aeabi_dsub+0x710>)
 8002910:	42ab      	cmp	r3, r5
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x4c2>
 8002914:	e0d6      	b.n	8002ac4 <__aeabi_dsub+0x670>
 8002916:	1882      	adds	r2, r0, r2
 8002918:	0021      	movs	r1, r4
 800291a:	4282      	cmp	r2, r0
 800291c:	4180      	sbcs	r0, r0
 800291e:	4459      	add	r1, fp
 8002920:	4240      	negs	r0, r0
 8002922:	1808      	adds	r0, r1, r0
 8002924:	07c7      	lsls	r7, r0, #31
 8002926:	0852      	lsrs	r2, r2, #1
 8002928:	4317      	orrs	r7, r2
 800292a:	0844      	lsrs	r4, r0, #1
 800292c:	0752      	lsls	r2, r2, #29
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x4de>
 8002930:	e185      	b.n	8002c3e <__aeabi_dsub+0x7ea>
 8002932:	220f      	movs	r2, #15
 8002934:	001d      	movs	r5, r3
 8002936:	403a      	ands	r2, r7
 8002938:	2a04      	cmp	r2, #4
 800293a:	d000      	beq.n	800293e <__aeabi_dsub+0x4ea>
 800293c:	e61a      	b.n	8002574 <__aeabi_dsub+0x120>
 800293e:	08ff      	lsrs	r7, r7, #3
 8002940:	0764      	lsls	r4, r4, #29
 8002942:	4327      	orrs	r7, r4
 8002944:	0905      	lsrs	r5, r0, #4
 8002946:	e7dd      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002948:	465b      	mov	r3, fp
 800294a:	08d2      	lsrs	r2, r2, #3
 800294c:	075f      	lsls	r7, r3, #29
 800294e:	4317      	orrs	r7, r2
 8002950:	08dd      	lsrs	r5, r3, #3
 8002952:	e67b      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002954:	2700      	movs	r7, #0
 8002956:	2400      	movs	r4, #0
 8002958:	e710      	b.n	800277c <__aeabi_dsub+0x328>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d000      	beq.n	8002960 <__aeabi_dsub+0x50c>
 800295e:	e0d6      	b.n	8002b0e <__aeabi_dsub+0x6ba>
 8002960:	2900      	cmp	r1, #0
 8002962:	d000      	beq.n	8002966 <__aeabi_dsub+0x512>
 8002964:	e12f      	b.n	8002bc6 <__aeabi_dsub+0x772>
 8002966:	2480      	movs	r4, #128	@ 0x80
 8002968:	2600      	movs	r6, #0
 800296a:	4d7e      	ldr	r5, [pc, #504]	@ (8002b64 <__aeabi_dsub+0x710>)
 800296c:	0324      	lsls	r4, r4, #12
 800296e:	e705      	b.n	800277c <__aeabi_dsub+0x328>
 8002970:	4666      	mov	r6, ip
 8002972:	465c      	mov	r4, fp
 8002974:	08d0      	lsrs	r0, r2, #3
 8002976:	e717      	b.n	80027a8 <__aeabi_dsub+0x354>
 8002978:	465b      	mov	r3, fp
 800297a:	1a17      	subs	r7, r2, r0
 800297c:	42ba      	cmp	r2, r7
 800297e:	4192      	sbcs	r2, r2
 8002980:	1b1c      	subs	r4, r3, r4
 8002982:	2601      	movs	r6, #1
 8002984:	4663      	mov	r3, ip
 8002986:	4252      	negs	r2, r2
 8002988:	1aa4      	subs	r4, r4, r2
 800298a:	401e      	ands	r6, r3
 800298c:	e5c4      	b.n	8002518 <__aeabi_dsub+0xc4>
 800298e:	1883      	adds	r3, r0, r2
 8002990:	4283      	cmp	r3, r0
 8002992:	4180      	sbcs	r0, r0
 8002994:	445c      	add	r4, fp
 8002996:	4240      	negs	r0, r0
 8002998:	1825      	adds	r5, r4, r0
 800299a:	022a      	lsls	r2, r5, #8
 800299c:	d400      	bmi.n	80029a0 <__aeabi_dsub+0x54c>
 800299e:	e0da      	b.n	8002b56 <__aeabi_dsub+0x702>
 80029a0:	4a72      	ldr	r2, [pc, #456]	@ (8002b6c <__aeabi_dsub+0x718>)
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	4015      	ands	r5, r2
 80029a6:	07ea      	lsls	r2, r5, #31
 80029a8:	431a      	orrs	r2, r3
 80029aa:	0869      	lsrs	r1, r5, #1
 80029ac:	075b      	lsls	r3, r3, #29
 80029ae:	d400      	bmi.n	80029b2 <__aeabi_dsub+0x55e>
 80029b0:	e14a      	b.n	8002c48 <__aeabi_dsub+0x7f4>
 80029b2:	230f      	movs	r3, #15
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x568>
 80029ba:	e0fc      	b.n	8002bb6 <__aeabi_dsub+0x762>
 80029bc:	1d17      	adds	r7, r2, #4
 80029be:	4297      	cmp	r7, r2
 80029c0:	41a4      	sbcs	r4, r4
 80029c2:	4264      	negs	r4, r4
 80029c4:	2502      	movs	r5, #2
 80029c6:	1864      	adds	r4, r4, r1
 80029c8:	e6ec      	b.n	80027a4 <__aeabi_dsub+0x350>
 80029ca:	4647      	mov	r7, r8
 80029cc:	001c      	movs	r4, r3
 80029ce:	431f      	orrs	r7, r3
 80029d0:	d000      	beq.n	80029d4 <__aeabi_dsub+0x580>
 80029d2:	e743      	b.n	800285c <__aeabi_dsub+0x408>
 80029d4:	2600      	movs	r6, #0
 80029d6:	2500      	movs	r5, #0
 80029d8:	2400      	movs	r4, #0
 80029da:	e6cf      	b.n	800277c <__aeabi_dsub+0x328>
 80029dc:	08c0      	lsrs	r0, r0, #3
 80029de:	0767      	lsls	r7, r4, #29
 80029e0:	4307      	orrs	r7, r0
 80029e2:	08e5      	lsrs	r5, r4, #3
 80029e4:	e632      	b.n	800264c <__aeabi_dsub+0x1f8>
 80029e6:	1a87      	subs	r7, r0, r2
 80029e8:	465b      	mov	r3, fp
 80029ea:	42b8      	cmp	r0, r7
 80029ec:	4180      	sbcs	r0, r0
 80029ee:	1ae4      	subs	r4, r4, r3
 80029f0:	4240      	negs	r0, r0
 80029f2:	1a24      	subs	r4, r4, r0
 80029f4:	0223      	lsls	r3, r4, #8
 80029f6:	d428      	bmi.n	8002a4a <__aeabi_dsub+0x5f6>
 80029f8:	0763      	lsls	r3, r4, #29
 80029fa:	08ff      	lsrs	r7, r7, #3
 80029fc:	431f      	orrs	r7, r3
 80029fe:	08e5      	lsrs	r5, r4, #3
 8002a00:	2301      	movs	r3, #1
 8002a02:	e77f      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x5b6>
 8002a08:	e673      	b.n	80026f2 <__aeabi_dsub+0x29e>
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	1b5f      	subs	r7, r3, r5
 8002a0e:	003b      	movs	r3, r7
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x5c2>
 8002a14:	e742      	b.n	800289c <__aeabi_dsub+0x448>
 8002a16:	2f38      	cmp	r7, #56	@ 0x38
 8002a18:	dd00      	ble.n	8002a1c <__aeabi_dsub+0x5c8>
 8002a1a:	e0ec      	b.n	8002bf6 <__aeabi_dsub+0x7a2>
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	000e      	movs	r6, r1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431c      	orrs	r4, r3
 8002a24:	2f1f      	cmp	r7, #31
 8002a26:	dc25      	bgt.n	8002a74 <__aeabi_dsub+0x620>
 8002a28:	2520      	movs	r5, #32
 8002a2a:	0023      	movs	r3, r4
 8002a2c:	1bed      	subs	r5, r5, r7
 8002a2e:	0001      	movs	r1, r0
 8002a30:	40a8      	lsls	r0, r5
 8002a32:	40ab      	lsls	r3, r5
 8002a34:	40f9      	lsrs	r1, r7
 8002a36:	1e45      	subs	r5, r0, #1
 8002a38:	41a8      	sbcs	r0, r5
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	40fc      	lsrs	r4, r7
 8002a3e:	4318      	orrs	r0, r3
 8002a40:	465b      	mov	r3, fp
 8002a42:	1b1b      	subs	r3, r3, r4
 8002a44:	469b      	mov	fp, r3
 8002a46:	e739      	b.n	80028bc <__aeabi_dsub+0x468>
 8002a48:	4666      	mov	r6, ip
 8002a4a:	2501      	movs	r5, #1
 8002a4c:	e562      	b.n	8002514 <__aeabi_dsub+0xc0>
 8002a4e:	001f      	movs	r7, r3
 8002a50:	4659      	mov	r1, fp
 8002a52:	3f20      	subs	r7, #32
 8002a54:	40f9      	lsrs	r1, r7
 8002a56:	468c      	mov	ip, r1
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d005      	beq.n	8002a68 <__aeabi_dsub+0x614>
 8002a5c:	2740      	movs	r7, #64	@ 0x40
 8002a5e:	4659      	mov	r1, fp
 8002a60:	1afb      	subs	r3, r7, r3
 8002a62:	4099      	lsls	r1, r3
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4692      	mov	sl, r2
 8002a68:	4657      	mov	r7, sl
 8002a6a:	1e7b      	subs	r3, r7, #1
 8002a6c:	419f      	sbcs	r7, r3
 8002a6e:	4663      	mov	r3, ip
 8002a70:	431f      	orrs	r7, r3
 8002a72:	e5c1      	b.n	80025f8 <__aeabi_dsub+0x1a4>
 8002a74:	003b      	movs	r3, r7
 8002a76:	0025      	movs	r5, r4
 8002a78:	3b20      	subs	r3, #32
 8002a7a:	40dd      	lsrs	r5, r3
 8002a7c:	2f20      	cmp	r7, #32
 8002a7e:	d004      	beq.n	8002a8a <__aeabi_dsub+0x636>
 8002a80:	2340      	movs	r3, #64	@ 0x40
 8002a82:	1bdb      	subs	r3, r3, r7
 8002a84:	409c      	lsls	r4, r3
 8002a86:	4320      	orrs	r0, r4
 8002a88:	4680      	mov	r8, r0
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	1e43      	subs	r3, r0, #1
 8002a8e:	4198      	sbcs	r0, r3
 8002a90:	4328      	orrs	r0, r5
 8002a92:	e713      	b.n	80028bc <__aeabi_dsub+0x468>
 8002a94:	2900      	cmp	r1, #0
 8002a96:	d09d      	beq.n	80029d4 <__aeabi_dsub+0x580>
 8002a98:	2601      	movs	r6, #1
 8002a9a:	4663      	mov	r3, ip
 8002a9c:	465c      	mov	r4, fp
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	401e      	ands	r6, r3
 8002aa2:	e6db      	b.n	800285c <__aeabi_dsub+0x408>
 8002aa4:	1a17      	subs	r7, r2, r0
 8002aa6:	465b      	mov	r3, fp
 8002aa8:	42ba      	cmp	r2, r7
 8002aaa:	4192      	sbcs	r2, r2
 8002aac:	1b1c      	subs	r4, r3, r4
 8002aae:	4252      	negs	r2, r2
 8002ab0:	1aa4      	subs	r4, r4, r2
 8002ab2:	0223      	lsls	r3, r4, #8
 8002ab4:	d4c8      	bmi.n	8002a48 <__aeabi_dsub+0x5f4>
 8002ab6:	0763      	lsls	r3, r4, #29
 8002ab8:	08ff      	lsrs	r7, r7, #3
 8002aba:	431f      	orrs	r7, r3
 8002abc:	4666      	mov	r6, ip
 8002abe:	2301      	movs	r3, #1
 8002ac0:	08e5      	lsrs	r5, r4, #3
 8002ac2:	e71f      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002ac4:	001d      	movs	r5, r3
 8002ac6:	2400      	movs	r4, #0
 8002ac8:	2700      	movs	r7, #0
 8002aca:	e657      	b.n	800277c <__aeabi_dsub+0x328>
 8002acc:	465c      	mov	r4, fp
 8002ace:	08d0      	lsrs	r0, r2, #3
 8002ad0:	e66a      	b.n	80027a8 <__aeabi_dsub+0x354>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x684>
 8002ad6:	e737      	b.n	8002948 <__aeabi_dsub+0x4f4>
 8002ad8:	4653      	mov	r3, sl
 8002ada:	08c0      	lsrs	r0, r0, #3
 8002adc:	0767      	lsls	r7, r4, #29
 8002ade:	4307      	orrs	r7, r0
 8002ae0:	08e5      	lsrs	r5, r4, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x694>
 8002ae6:	e5b1      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	031b      	lsls	r3, r3, #12
 8002aec:	421d      	tst	r5, r3
 8002aee:	d008      	beq.n	8002b02 <__aeabi_dsub+0x6ae>
 8002af0:	4659      	mov	r1, fp
 8002af2:	08c8      	lsrs	r0, r1, #3
 8002af4:	4218      	tst	r0, r3
 8002af6:	d104      	bne.n	8002b02 <__aeabi_dsub+0x6ae>
 8002af8:	08d2      	lsrs	r2, r2, #3
 8002afa:	0749      	lsls	r1, r1, #29
 8002afc:	430a      	orrs	r2, r1
 8002afe:	0017      	movs	r7, r2
 8002b00:	0005      	movs	r5, r0
 8002b02:	0f7b      	lsrs	r3, r7, #29
 8002b04:	00ff      	lsls	r7, r7, #3
 8002b06:	08ff      	lsrs	r7, r7, #3
 8002b08:	075b      	lsls	r3, r3, #29
 8002b0a:	431f      	orrs	r7, r3
 8002b0c:	e59e      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002b0e:	08c0      	lsrs	r0, r0, #3
 8002b10:	0763      	lsls	r3, r4, #29
 8002b12:	4318      	orrs	r0, r3
 8002b14:	08e5      	lsrs	r5, r4, #3
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d053      	beq.n	8002bc2 <__aeabi_dsub+0x76e>
 8002b1a:	2380      	movs	r3, #128	@ 0x80
 8002b1c:	031b      	lsls	r3, r3, #12
 8002b1e:	421d      	tst	r5, r3
 8002b20:	d00a      	beq.n	8002b38 <__aeabi_dsub+0x6e4>
 8002b22:	4659      	mov	r1, fp
 8002b24:	08cc      	lsrs	r4, r1, #3
 8002b26:	421c      	tst	r4, r3
 8002b28:	d106      	bne.n	8002b38 <__aeabi_dsub+0x6e4>
 8002b2a:	2601      	movs	r6, #1
 8002b2c:	4663      	mov	r3, ip
 8002b2e:	0025      	movs	r5, r4
 8002b30:	08d0      	lsrs	r0, r2, #3
 8002b32:	0749      	lsls	r1, r1, #29
 8002b34:	4308      	orrs	r0, r1
 8002b36:	401e      	ands	r6, r3
 8002b38:	0f47      	lsrs	r7, r0, #29
 8002b3a:	00c0      	lsls	r0, r0, #3
 8002b3c:	08c0      	lsrs	r0, r0, #3
 8002b3e:	077f      	lsls	r7, r7, #29
 8002b40:	4307      	orrs	r7, r0
 8002b42:	e583      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002b44:	1883      	adds	r3, r0, r2
 8002b46:	4293      	cmp	r3, r2
 8002b48:	4192      	sbcs	r2, r2
 8002b4a:	445c      	add	r4, fp
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	18a5      	adds	r5, r4, r2
 8002b50:	022a      	lsls	r2, r5, #8
 8002b52:	d500      	bpl.n	8002b56 <__aeabi_dsub+0x702>
 8002b54:	e724      	b.n	80029a0 <__aeabi_dsub+0x54c>
 8002b56:	076f      	lsls	r7, r5, #29
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	431f      	orrs	r7, r3
 8002b5c:	08ed      	lsrs	r5, r5, #3
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e6d0      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	000007ff 	.word	0x000007ff
 8002b68:	000007fe 	.word	0x000007fe
 8002b6c:	ff7fffff 	.word	0xff7fffff
 8002b70:	465b      	mov	r3, fp
 8002b72:	08d2      	lsrs	r2, r2, #3
 8002b74:	075f      	lsls	r7, r3, #29
 8002b76:	4666      	mov	r6, ip
 8002b78:	4317      	orrs	r7, r2
 8002b7a:	08dd      	lsrs	r5, r3, #3
 8002b7c:	e566      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002b7e:	0025      	movs	r5, r4
 8002b80:	3b20      	subs	r3, #32
 8002b82:	40dd      	lsrs	r5, r3
 8002b84:	4663      	mov	r3, ip
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d005      	beq.n	8002b96 <__aeabi_dsub+0x742>
 8002b8a:	2340      	movs	r3, #64	@ 0x40
 8002b8c:	4661      	mov	r1, ip
 8002b8e:	1a5b      	subs	r3, r3, r1
 8002b90:	409c      	lsls	r4, r3
 8002b92:	4320      	orrs	r0, r4
 8002b94:	4680      	mov	r8, r0
 8002b96:	4647      	mov	r7, r8
 8002b98:	1e7b      	subs	r3, r7, #1
 8002b9a:	419f      	sbcs	r7, r3
 8002b9c:	432f      	orrs	r7, r5
 8002b9e:	e5a0      	b.n	80026e2 <__aeabi_dsub+0x28e>
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	2700      	movs	r7, #0
 8002ba4:	1a09      	subs	r1, r1, r0
 8002ba6:	e4d2      	b.n	800254e <__aeabi_dsub+0xfa>
 8002ba8:	2f00      	cmp	r7, #0
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x75a>
 8002bac:	e713      	b.n	80029d6 <__aeabi_dsub+0x582>
 8002bae:	465c      	mov	r4, fp
 8002bb0:	0017      	movs	r7, r2
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	e5f6      	b.n	80027a4 <__aeabi_dsub+0x350>
 8002bb6:	08d7      	lsrs	r7, r2, #3
 8002bb8:	0749      	lsls	r1, r1, #29
 8002bba:	2302      	movs	r3, #2
 8002bbc:	430f      	orrs	r7, r1
 8002bbe:	092d      	lsrs	r5, r5, #4
 8002bc0:	e6a0      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002bc2:	0007      	movs	r7, r0
 8002bc4:	e542      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002bc6:	465b      	mov	r3, fp
 8002bc8:	2601      	movs	r6, #1
 8002bca:	075f      	lsls	r7, r3, #29
 8002bcc:	08dd      	lsrs	r5, r3, #3
 8002bce:	4663      	mov	r3, ip
 8002bd0:	08d2      	lsrs	r2, r2, #3
 8002bd2:	4317      	orrs	r7, r2
 8002bd4:	401e      	ands	r6, r3
 8002bd6:	e539      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002bd8:	465b      	mov	r3, fp
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	075f      	lsls	r7, r3, #29
 8002bde:	4317      	orrs	r7, r2
 8002be0:	08dd      	lsrs	r5, r3, #3
 8002be2:	e533      	b.n	800264c <__aeabi_dsub+0x1f8>
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <__aeabi_dsub+0x80c>)
 8002be6:	08db      	lsrs	r3, r3, #3
 8002be8:	4022      	ands	r2, r4
 8002bea:	0757      	lsls	r7, r2, #29
 8002bec:	0252      	lsls	r2, r2, #9
 8002bee:	2501      	movs	r5, #1
 8002bf0:	431f      	orrs	r7, r3
 8002bf2:	0b14      	lsrs	r4, r2, #12
 8002bf4:	e5c2      	b.n	800277c <__aeabi_dsub+0x328>
 8002bf6:	000e      	movs	r6, r1
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	e65f      	b.n	80028bc <__aeabi_dsub+0x468>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <__aeabi_dsub+0x7c8>
 8002c00:	464b      	mov	r3, r9
 8002c02:	1b5b      	subs	r3, r3, r5
 8002c04:	469c      	mov	ip, r3
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0x7b8>
 8002c0a:	e548      	b.n	800269e <__aeabi_dsub+0x24a>
 8002c0c:	2701      	movs	r7, #1
 8002c0e:	2b38      	cmp	r3, #56	@ 0x38
 8002c10:	dd00      	ble.n	8002c14 <__aeabi_dsub+0x7c0>
 8002c12:	e566      	b.n	80026e2 <__aeabi_dsub+0x28e>
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431c      	orrs	r4, r3
 8002c1a:	e550      	b.n	80026be <__aeabi_dsub+0x26a>
 8002c1c:	1c6b      	adds	r3, r5, #1
 8002c1e:	4d11      	ldr	r5, [pc, #68]	@ (8002c64 <__aeabi_dsub+0x810>)
 8002c20:	422b      	tst	r3, r5
 8002c22:	d000      	beq.n	8002c26 <__aeabi_dsub+0x7d2>
 8002c24:	e673      	b.n	800290e <__aeabi_dsub+0x4ba>
 8002c26:	4659      	mov	r1, fp
 8002c28:	0023      	movs	r3, r4
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	468a      	mov	sl, r1
 8002c2e:	4303      	orrs	r3, r0
 8002c30:	e600      	b.n	8002834 <__aeabi_dsub+0x3e0>
 8002c32:	0767      	lsls	r7, r4, #29
 8002c34:	08c0      	lsrs	r0, r0, #3
 8002c36:	2300      	movs	r3, #0
 8002c38:	4307      	orrs	r7, r0
 8002c3a:	08e5      	lsrs	r5, r4, #3
 8002c3c:	e662      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002c3e:	0764      	lsls	r4, r4, #29
 8002c40:	08ff      	lsrs	r7, r7, #3
 8002c42:	4327      	orrs	r7, r4
 8002c44:	0905      	lsrs	r5, r0, #4
 8002c46:	e65d      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002c48:	08d2      	lsrs	r2, r2, #3
 8002c4a:	0749      	lsls	r1, r1, #29
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	000f      	movs	r7, r1
 8002c50:	2302      	movs	r3, #2
 8002c52:	092d      	lsrs	r5, r5, #4
 8002c54:	e656      	b.n	8002904 <__aeabi_dsub+0x4b0>
 8002c56:	0007      	movs	r7, r0
 8002c58:	e5a4      	b.n	80027a4 <__aeabi_dsub+0x350>
 8002c5a:	0038      	movs	r0, r7
 8002c5c:	e48f      	b.n	800257e <__aeabi_dsub+0x12a>
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	ff7fffff 	.word	0xff7fffff
 8002c64:	000007fe 	.word	0x000007fe

08002c68 <__aeabi_dcmpun>:
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	46c6      	mov	lr, r8
 8002c6c:	031e      	lsls	r6, r3, #12
 8002c6e:	0b36      	lsrs	r6, r6, #12
 8002c70:	46b0      	mov	r8, r6
 8002c72:	4e0d      	ldr	r6, [pc, #52]	@ (8002ca8 <__aeabi_dcmpun+0x40>)
 8002c74:	030c      	lsls	r4, r1, #12
 8002c76:	004d      	lsls	r5, r1, #1
 8002c78:	005f      	lsls	r7, r3, #1
 8002c7a:	b500      	push	{lr}
 8002c7c:	0b24      	lsrs	r4, r4, #12
 8002c7e:	0d6d      	lsrs	r5, r5, #21
 8002c80:	0d7f      	lsrs	r7, r7, #21
 8002c82:	42b5      	cmp	r5, r6
 8002c84:	d00b      	beq.n	8002c9e <__aeabi_dcmpun+0x36>
 8002c86:	4908      	ldr	r1, [pc, #32]	@ (8002ca8 <__aeabi_dcmpun+0x40>)
 8002c88:	2000      	movs	r0, #0
 8002c8a:	428f      	cmp	r7, r1
 8002c8c:	d104      	bne.n	8002c98 <__aeabi_dcmpun+0x30>
 8002c8e:	4646      	mov	r6, r8
 8002c90:	4316      	orrs	r6, r2
 8002c92:	0030      	movs	r0, r6
 8002c94:	1e43      	subs	r3, r0, #1
 8002c96:	4198      	sbcs	r0, r3
 8002c98:	bc80      	pop	{r7}
 8002c9a:	46b8      	mov	r8, r7
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9e:	4304      	orrs	r4, r0
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d1f8      	bne.n	8002c98 <__aeabi_dcmpun+0x30>
 8002ca6:	e7ee      	b.n	8002c86 <__aeabi_dcmpun+0x1e>
 8002ca8:	000007ff 	.word	0x000007ff

08002cac <__aeabi_d2iz>:
 8002cac:	000b      	movs	r3, r1
 8002cae:	0002      	movs	r2, r0
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	4d16      	ldr	r5, [pc, #88]	@ (8002d0c <__aeabi_d2iz+0x60>)
 8002cb4:	030c      	lsls	r4, r1, #12
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	0049      	lsls	r1, r1, #1
 8002cba:	2000      	movs	r0, #0
 8002cbc:	9200      	str	r2, [sp, #0]
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	0b24      	lsrs	r4, r4, #12
 8002cc2:	0d49      	lsrs	r1, r1, #21
 8002cc4:	0fde      	lsrs	r6, r3, #31
 8002cc6:	42a9      	cmp	r1, r5
 8002cc8:	dd04      	ble.n	8002cd4 <__aeabi_d2iz+0x28>
 8002cca:	4811      	ldr	r0, [pc, #68]	@ (8002d10 <__aeabi_d2iz+0x64>)
 8002ccc:	4281      	cmp	r1, r0
 8002cce:	dd03      	ble.n	8002cd8 <__aeabi_d2iz+0x2c>
 8002cd0:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <__aeabi_d2iz+0x68>)
 8002cd2:	18f0      	adds	r0, r6, r3
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	2080      	movs	r0, #128	@ 0x80
 8002cda:	0340      	lsls	r0, r0, #13
 8002cdc:	4320      	orrs	r0, r4
 8002cde:	4c0e      	ldr	r4, [pc, #56]	@ (8002d18 <__aeabi_d2iz+0x6c>)
 8002ce0:	1a64      	subs	r4, r4, r1
 8002ce2:	2c1f      	cmp	r4, #31
 8002ce4:	dd08      	ble.n	8002cf8 <__aeabi_d2iz+0x4c>
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <__aeabi_d2iz+0x70>)
 8002ce8:	1a5b      	subs	r3, r3, r1
 8002cea:	40d8      	lsrs	r0, r3
 8002cec:	0003      	movs	r3, r0
 8002cee:	4258      	negs	r0, r3
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <__aeabi_d2iz+0x28>
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	e7ed      	b.n	8002cd4 <__aeabi_d2iz+0x28>
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <__aeabi_d2iz+0x74>)
 8002cfa:	9a00      	ldr	r2, [sp, #0]
 8002cfc:	469c      	mov	ip, r3
 8002cfe:	0003      	movs	r3, r0
 8002d00:	4461      	add	r1, ip
 8002d02:	408b      	lsls	r3, r1
 8002d04:	40e2      	lsrs	r2, r4
 8002d06:	4313      	orrs	r3, r2
 8002d08:	e7f1      	b.n	8002cee <__aeabi_d2iz+0x42>
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	000003fe 	.word	0x000003fe
 8002d10:	0000041d 	.word	0x0000041d
 8002d14:	7fffffff 	.word	0x7fffffff
 8002d18:	00000433 	.word	0x00000433
 8002d1c:	00000413 	.word	0x00000413
 8002d20:	fffffbed 	.word	0xfffffbed

08002d24 <__aeabi_i2d>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d016      	beq.n	8002d58 <__aeabi_i2d+0x34>
 8002d2a:	17c3      	asrs	r3, r0, #31
 8002d2c:	18c5      	adds	r5, r0, r3
 8002d2e:	405d      	eors	r5, r3
 8002d30:	0fc4      	lsrs	r4, r0, #31
 8002d32:	0028      	movs	r0, r5
 8002d34:	f000 f912 	bl	8002f5c <__clzsi2>
 8002d38:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <__aeabi_i2d+0x58>)
 8002d3a:	1a1b      	subs	r3, r3, r0
 8002d3c:	055b      	lsls	r3, r3, #21
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	280a      	cmp	r0, #10
 8002d42:	dc14      	bgt.n	8002d6e <__aeabi_i2d+0x4a>
 8002d44:	0002      	movs	r2, r0
 8002d46:	002e      	movs	r6, r5
 8002d48:	3215      	adds	r2, #21
 8002d4a:	4096      	lsls	r6, r2
 8002d4c:	220b      	movs	r2, #11
 8002d4e:	1a12      	subs	r2, r2, r0
 8002d50:	40d5      	lsrs	r5, r2
 8002d52:	032d      	lsls	r5, r5, #12
 8002d54:	0b2d      	lsrs	r5, r5, #12
 8002d56:	e003      	b.n	8002d60 <__aeabi_i2d+0x3c>
 8002d58:	2400      	movs	r4, #0
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2500      	movs	r5, #0
 8002d5e:	2600      	movs	r6, #0
 8002d60:	051b      	lsls	r3, r3, #20
 8002d62:	432b      	orrs	r3, r5
 8002d64:	07e4      	lsls	r4, r4, #31
 8002d66:	4323      	orrs	r3, r4
 8002d68:	0030      	movs	r0, r6
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
 8002d6e:	380b      	subs	r0, #11
 8002d70:	4085      	lsls	r5, r0
 8002d72:	032d      	lsls	r5, r5, #12
 8002d74:	2600      	movs	r6, #0
 8002d76:	0b2d      	lsrs	r5, r5, #12
 8002d78:	e7f2      	b.n	8002d60 <__aeabi_i2d+0x3c>
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	0000041e 	.word	0x0000041e

08002d80 <__aeabi_ui2d>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	1e04      	subs	r4, r0, #0
 8002d84:	d010      	beq.n	8002da8 <__aeabi_ui2d+0x28>
 8002d86:	f000 f8e9 	bl	8002f5c <__clzsi2>
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <__aeabi_ui2d+0x44>)
 8002d8c:	1a1b      	subs	r3, r3, r0
 8002d8e:	055b      	lsls	r3, r3, #21
 8002d90:	0d5b      	lsrs	r3, r3, #21
 8002d92:	280a      	cmp	r0, #10
 8002d94:	dc0f      	bgt.n	8002db6 <__aeabi_ui2d+0x36>
 8002d96:	220b      	movs	r2, #11
 8002d98:	0021      	movs	r1, r4
 8002d9a:	1a12      	subs	r2, r2, r0
 8002d9c:	40d1      	lsrs	r1, r2
 8002d9e:	3015      	adds	r0, #21
 8002da0:	030a      	lsls	r2, r1, #12
 8002da2:	4084      	lsls	r4, r0
 8002da4:	0b12      	lsrs	r2, r2, #12
 8002da6:	e001      	b.n	8002dac <__aeabi_ui2d+0x2c>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	051b      	lsls	r3, r3, #20
 8002dae:	4313      	orrs	r3, r2
 8002db0:	0020      	movs	r0, r4
 8002db2:	0019      	movs	r1, r3
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	0022      	movs	r2, r4
 8002db8:	380b      	subs	r0, #11
 8002dba:	4082      	lsls	r2, r0
 8002dbc:	0312      	lsls	r2, r2, #12
 8002dbe:	2400      	movs	r4, #0
 8002dc0:	0b12      	lsrs	r2, r2, #12
 8002dc2:	e7f3      	b.n	8002dac <__aeabi_ui2d+0x2c>
 8002dc4:	0000041e 	.word	0x0000041e

08002dc8 <__aeabi_f2d>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	0242      	lsls	r2, r0, #9
 8002dcc:	0043      	lsls	r3, r0, #1
 8002dce:	0fc4      	lsrs	r4, r0, #31
 8002dd0:	20fe      	movs	r0, #254	@ 0xfe
 8002dd2:	0e1b      	lsrs	r3, r3, #24
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	0a55      	lsrs	r5, r2, #9
 8002dd8:	4208      	tst	r0, r1
 8002dda:	d00c      	beq.n	8002df6 <__aeabi_f2d+0x2e>
 8002ddc:	21e0      	movs	r1, #224	@ 0xe0
 8002dde:	0089      	lsls	r1, r1, #2
 8002de0:	468c      	mov	ip, r1
 8002de2:	076d      	lsls	r5, r5, #29
 8002de4:	0b12      	lsrs	r2, r2, #12
 8002de6:	4463      	add	r3, ip
 8002de8:	051b      	lsls	r3, r3, #20
 8002dea:	4313      	orrs	r3, r2
 8002dec:	07e4      	lsls	r4, r4, #31
 8002dee:	4323      	orrs	r3, r4
 8002df0:	0028      	movs	r0, r5
 8002df2:	0019      	movs	r1, r3
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d114      	bne.n	8002e24 <__aeabi_f2d+0x5c>
 8002dfa:	2d00      	cmp	r5, #0
 8002dfc:	d01b      	beq.n	8002e36 <__aeabi_f2d+0x6e>
 8002dfe:	0028      	movs	r0, r5
 8002e00:	f000 f8ac 	bl	8002f5c <__clzsi2>
 8002e04:	280a      	cmp	r0, #10
 8002e06:	dc1c      	bgt.n	8002e42 <__aeabi_f2d+0x7a>
 8002e08:	230b      	movs	r3, #11
 8002e0a:	002a      	movs	r2, r5
 8002e0c:	1a1b      	subs	r3, r3, r0
 8002e0e:	40da      	lsrs	r2, r3
 8002e10:	0003      	movs	r3, r0
 8002e12:	3315      	adds	r3, #21
 8002e14:	409d      	lsls	r5, r3
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <__aeabi_f2d+0x88>)
 8002e18:	0312      	lsls	r2, r2, #12
 8002e1a:	1a1b      	subs	r3, r3, r0
 8002e1c:	055b      	lsls	r3, r3, #21
 8002e1e:	0b12      	lsrs	r2, r2, #12
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	e7e1      	b.n	8002de8 <__aeabi_f2d+0x20>
 8002e24:	2d00      	cmp	r5, #0
 8002e26:	d009      	beq.n	8002e3c <__aeabi_f2d+0x74>
 8002e28:	0b13      	lsrs	r3, r2, #12
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	0312      	lsls	r2, r2, #12
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	076d      	lsls	r5, r5, #29
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <__aeabi_f2d+0x8c>)
 8002e34:	e7d8      	b.n	8002de8 <__aeabi_f2d+0x20>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	e7d5      	b.n	8002de8 <__aeabi_f2d+0x20>
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <__aeabi_f2d+0x8c>)
 8002e40:	e7d2      	b.n	8002de8 <__aeabi_f2d+0x20>
 8002e42:	0003      	movs	r3, r0
 8002e44:	002a      	movs	r2, r5
 8002e46:	3b0b      	subs	r3, #11
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	e7e3      	b.n	8002e16 <__aeabi_f2d+0x4e>
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	00000389 	.word	0x00000389
 8002e54:	000007ff 	.word	0x000007ff

08002e58 <__aeabi_d2f>:
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	004b      	lsls	r3, r1, #1
 8002e5c:	030f      	lsls	r7, r1, #12
 8002e5e:	0d5b      	lsrs	r3, r3, #21
 8002e60:	4c3a      	ldr	r4, [pc, #232]	@ (8002f4c <__aeabi_d2f+0xf4>)
 8002e62:	0f45      	lsrs	r5, r0, #29
 8002e64:	b083      	sub	sp, #12
 8002e66:	0a7f      	lsrs	r7, r7, #9
 8002e68:	1c5e      	adds	r6, r3, #1
 8002e6a:	432f      	orrs	r7, r5
 8002e6c:	9000      	str	r0, [sp, #0]
 8002e6e:	9101      	str	r1, [sp, #4]
 8002e70:	0fca      	lsrs	r2, r1, #31
 8002e72:	00c5      	lsls	r5, r0, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d00b      	beq.n	8002e90 <__aeabi_d2f+0x38>
 8002e78:	4935      	ldr	r1, [pc, #212]	@ (8002f50 <__aeabi_d2f+0xf8>)
 8002e7a:	185c      	adds	r4, r3, r1
 8002e7c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002e7e:	dd13      	ble.n	8002ea8 <__aeabi_d2f+0x50>
 8002e80:	20ff      	movs	r0, #255	@ 0xff
 8002e82:	2300      	movs	r3, #0
 8002e84:	05c0      	lsls	r0, r0, #23
 8002e86:	4318      	orrs	r0, r3
 8002e88:	07d2      	lsls	r2, r2, #31
 8002e8a:	4310      	orrs	r0, r2
 8002e8c:	b003      	add	sp, #12
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e90:	433d      	orrs	r5, r7
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <__aeabi_d2f+0x42>
 8002e96:	2000      	movs	r0, #0
 8002e98:	e7f4      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002e9a:	2d00      	cmp	r5, #0
 8002e9c:	d0f0      	beq.n	8002e80 <__aeabi_d2f+0x28>
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	03db      	lsls	r3, r3, #15
 8002ea2:	20ff      	movs	r0, #255	@ 0xff
 8002ea4:	433b      	orrs	r3, r7
 8002ea6:	e7ed      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002ea8:	2c00      	cmp	r4, #0
 8002eaa:	dd0c      	ble.n	8002ec6 <__aeabi_d2f+0x6e>
 8002eac:	9b00      	ldr	r3, [sp, #0]
 8002eae:	00ff      	lsls	r7, r7, #3
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	4183      	sbcs	r3, r0
 8002eb6:	0f69      	lsrs	r1, r5, #29
 8002eb8:	433b      	orrs	r3, r7
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	0759      	lsls	r1, r3, #29
 8002ebe:	d127      	bne.n	8002f10 <__aeabi_d2f+0xb8>
 8002ec0:	08db      	lsrs	r3, r3, #3
 8002ec2:	b2e0      	uxtb	r0, r4
 8002ec4:	e7de      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	3117      	adds	r1, #23
 8002eca:	db31      	blt.n	8002f30 <__aeabi_d2f+0xd8>
 8002ecc:	2180      	movs	r1, #128	@ 0x80
 8002ece:	201e      	movs	r0, #30
 8002ed0:	0409      	lsls	r1, r1, #16
 8002ed2:	4339      	orrs	r1, r7
 8002ed4:	1b00      	subs	r0, r0, r4
 8002ed6:	281f      	cmp	r0, #31
 8002ed8:	dd2d      	ble.n	8002f36 <__aeabi_d2f+0xde>
 8002eda:	2602      	movs	r6, #2
 8002edc:	4276      	negs	r6, r6
 8002ede:	1b34      	subs	r4, r6, r4
 8002ee0:	000e      	movs	r6, r1
 8002ee2:	40e6      	lsrs	r6, r4
 8002ee4:	0034      	movs	r4, r6
 8002ee6:	2820      	cmp	r0, #32
 8002ee8:	d004      	beq.n	8002ef4 <__aeabi_d2f+0x9c>
 8002eea:	481a      	ldr	r0, [pc, #104]	@ (8002f54 <__aeabi_d2f+0xfc>)
 8002eec:	4684      	mov	ip, r0
 8002eee:	4463      	add	r3, ip
 8002ef0:	4099      	lsls	r1, r3
 8002ef2:	430d      	orrs	r5, r1
 8002ef4:	002b      	movs	r3, r5
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	418b      	sbcs	r3, r1
 8002efa:	4323      	orrs	r3, r4
 8002efc:	0759      	lsls	r1, r3, #29
 8002efe:	d003      	beq.n	8002f08 <__aeabi_d2f+0xb0>
 8002f00:	210f      	movs	r1, #15
 8002f02:	4019      	ands	r1, r3
 8002f04:	2904      	cmp	r1, #4
 8002f06:	d10b      	bne.n	8002f20 <__aeabi_d2f+0xc8>
 8002f08:	019b      	lsls	r3, r3, #6
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	0a5b      	lsrs	r3, r3, #9
 8002f0e:	e7b9      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002f10:	210f      	movs	r1, #15
 8002f12:	4019      	ands	r1, r3
 8002f14:	2904      	cmp	r1, #4
 8002f16:	d104      	bne.n	8002f22 <__aeabi_d2f+0xca>
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	0a5b      	lsrs	r3, r3, #9
 8002f1c:	b2e0      	uxtb	r0, r4
 8002f1e:	e7b1      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002f20:	2400      	movs	r4, #0
 8002f22:	3304      	adds	r3, #4
 8002f24:	0159      	lsls	r1, r3, #5
 8002f26:	d5f7      	bpl.n	8002f18 <__aeabi_d2f+0xc0>
 8002f28:	3401      	adds	r4, #1
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	b2e0      	uxtb	r0, r4
 8002f2e:	e7a9      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002f30:	2000      	movs	r0, #0
 8002f32:	2300      	movs	r3, #0
 8002f34:	e7a6      	b.n	8002e84 <__aeabi_d2f+0x2c>
 8002f36:	4c08      	ldr	r4, [pc, #32]	@ (8002f58 <__aeabi_d2f+0x100>)
 8002f38:	191c      	adds	r4, r3, r4
 8002f3a:	002b      	movs	r3, r5
 8002f3c:	40a5      	lsls	r5, r4
 8002f3e:	40c3      	lsrs	r3, r0
 8002f40:	40a1      	lsls	r1, r4
 8002f42:	1e68      	subs	r0, r5, #1
 8002f44:	4185      	sbcs	r5, r0
 8002f46:	4329      	orrs	r1, r5
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	e7d7      	b.n	8002efc <__aeabi_d2f+0xa4>
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	fffffc80 	.word	0xfffffc80
 8002f54:	fffffca2 	.word	0xfffffca2
 8002f58:	fffffc82 	.word	0xfffffc82

08002f5c <__clzsi2>:
 8002f5c:	211c      	movs	r1, #28
 8002f5e:	2301      	movs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4298      	cmp	r0, r3
 8002f64:	d301      	bcc.n	8002f6a <__clzsi2+0xe>
 8002f66:	0c00      	lsrs	r0, r0, #16
 8002f68:	3910      	subs	r1, #16
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	d301      	bcc.n	8002f74 <__clzsi2+0x18>
 8002f70:	0a00      	lsrs	r0, r0, #8
 8002f72:	3908      	subs	r1, #8
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	4298      	cmp	r0, r3
 8002f78:	d301      	bcc.n	8002f7e <__clzsi2+0x22>
 8002f7a:	0900      	lsrs	r0, r0, #4
 8002f7c:	3904      	subs	r1, #4
 8002f7e:	a202      	add	r2, pc, #8	@ (adr r2, 8002f88 <__clzsi2+0x2c>)
 8002f80:	5c10      	ldrb	r0, [r2, r0]
 8002f82:	1840      	adds	r0, r0, r1
 8002f84:	4770      	bx	lr
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	02020304 	.word	0x02020304
 8002f8c:	01010101 	.word	0x01010101
	...

08002f98 <ds3231_settime>:
uint8_t _dec_to_bcd(int dec);
void _ds3231_setreg(uint8_t addr, uint8_t val);
uint8_t _ds3231_getreg(uint8_t addr);

// function to set time
void ds3231_settime(DateTime* t) {
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = _dec_to_bcd(t->sec);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	799b      	ldrb	r3, [r3, #6]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fa64 	bl	8003472 <_dec_to_bcd>
 8002faa:	0003      	movs	r3, r0
 8002fac:	001a      	movs	r2, r3
 8002fae:	2408      	movs	r4, #8
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	701a      	strb	r2, [r3, #0]
	set_time[1] = _dec_to_bcd(t->min);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	795b      	ldrb	r3, [r3, #5]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 fa5a 	bl	8003472 <_dec_to_bcd>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	705a      	strb	r2, [r3, #1]
	set_time[2] = _dec_to_bcd(t->hr);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	791b      	ldrb	r3, [r3, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fa51 	bl	8003472 <_dec_to_bcd>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	709a      	strb	r2, [r3, #2]
	set_time[3] = _dec_to_bcd(t->dow);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fa48 	bl	8003472 <_dec_to_bcd>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	70da      	strb	r2, [r3, #3]
	set_time[4] = _dec_to_bcd(t->day);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fa3f 	bl	8003472 <_dec_to_bcd>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	711a      	strb	r2, [r3, #4]
	set_time[5] = _dec_to_bcd(t->month);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fa36 	bl	8003472 <_dec_to_bcd>
 8003006:	0003      	movs	r3, r0
 8003008:	001a      	movs	r2, r3
 800300a:	193b      	adds	r3, r7, r4
 800300c:	715a      	strb	r2, [r3, #5]
	set_time[6] = _dec_to_bcd(t->year);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 fa2d 	bl	8003472 <_dec_to_bcd>
 8003018:	0003      	movs	r3, r0
 800301a:	001a      	movs	r2, r3
 800301c:	193b      	adds	r3, r7, r4
 800301e:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(_ds3231_hi2c, ((DS3231_ADDRESS << 1) | 1), 0x00, 1, set_time, 7, 1000);
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <ds3231_settime+0xac>)
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	23fa      	movs	r3, #250	@ 0xfa
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	2307      	movs	r3, #7
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	193b      	adds	r3, r7, r4
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	2200      	movs	r2, #0
 8003036:	21d1      	movs	r1, #209	@ 0xd1
 8003038:	f004 f8ce 	bl	80071d8 <HAL_I2C_Mem_Write>
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b005      	add	sp, #20
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	20000000 	.word	0x20000000

08003048 <ds3231_gettime>:

void ds3231_gettime(DateTime* t) {
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af04      	add	r7, sp, #16
 800304e:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7] = {};
 8003050:	2408      	movs	r4, #8
 8003052:	193b      	adds	r3, r7, r4
 8003054:	0018      	movs	r0, r3
 8003056:	2307      	movs	r3, #7
 8003058:	001a      	movs	r2, r3
 800305a:	2100      	movs	r1, #0
 800305c:	f008 fc30 	bl	800b8c0 <memset>
	HAL_I2C_Mem_Read(_ds3231_hi2c, DS3231_ADDRESS << 1, 0x00, 1, get_time, 7, 1000);
 8003060:	4b28      	ldr	r3, [pc, #160]	@ (8003104 <ds3231_gettime+0xbc>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	23fa      	movs	r3, #250	@ 0xfa
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	9302      	str	r3, [sp, #8]
 800306a:	2307      	movs	r3, #7
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	193b      	adds	r3, r7, r4
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2301      	movs	r3, #1
 8003074:	2200      	movs	r2, #0
 8003076:	21d0      	movs	r1, #208	@ 0xd0
 8003078:	f004 f9dc 	bl	8007434 <HAL_I2C_Mem_Read>
	t->sec = _bcd_to_dec(get_time[0]);
 800307c:	193b      	adds	r3, r7, r4
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f9dd 	bl	8003440 <_bcd_to_dec>
 8003086:	0003      	movs	r3, r0
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	719a      	strb	r2, [r3, #6]
	t->min = _bcd_to_dec(get_time[1]);
 800308e:	193b      	adds	r3, r7, r4
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f9d4 	bl	8003440 <_bcd_to_dec>
 8003098:	0003      	movs	r3, r0
 800309a:	b2da      	uxtb	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	715a      	strb	r2, [r3, #5]
	t->hr =_bcd_to_dec(get_time[2]);
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	789b      	ldrb	r3, [r3, #2]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 f9cb 	bl	8003440 <_bcd_to_dec>
 80030aa:	0003      	movs	r3, r0
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	711a      	strb	r2, [r3, #4]
	t->dow = _bcd_to_dec(get_time[3]);
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f9c2 	bl	8003440 <_bcd_to_dec>
 80030bc:	0003      	movs	r3, r0
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	709a      	strb	r2, [r3, #2]
	t->day = _bcd_to_dec(get_time[4]);
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 f9b9 	bl	8003440 <_bcd_to_dec>
 80030ce:	0003      	movs	r3, r0
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	701a      	strb	r2, [r3, #0]
	t->month = _bcd_to_dec(get_time[5]);
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	795b      	ldrb	r3, [r3, #5]
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f9b0 	bl	8003440 <_bcd_to_dec>
 80030e0:	0003      	movs	r3, r0
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	705a      	strb	r2, [r3, #1]
	t->year = _bcd_to_dec(get_time[6]);
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	799b      	ldrb	r3, [r3, #6]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 f9a7 	bl	8003440 <_bcd_to_dec>
 80030f2:	0003      	movs	r3, r0
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	70da      	strb	r2, [r3, #3]
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b005      	add	sp, #20
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	20000000 	.word	0x20000000

08003108 <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af02      	add	r7, sp, #8
 800310e:	0002      	movs	r2, r0
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	1dbb      	adds	r3, r7, #6
 8003116:	1c0a      	adds	r2, r1, #0
 8003118:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 800311a:	210c      	movs	r1, #12
 800311c:	187b      	adds	r3, r7, r1
 800311e:	1dfa      	adds	r2, r7, #7
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	187b      	adds	r3, r7, r1
 8003126:	1dba      	adds	r2, r7, #6
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <_ds3231_setreg+0x40>)
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	187a      	adds	r2, r7, r1
 8003132:	23fa      	movs	r3, #250	@ 0xfa
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2302      	movs	r3, #2
 800313a:	21d0      	movs	r1, #208	@ 0xd0
 800313c:	f003 fe1a 	bl	8006d74 <HAL_I2C_Master_Transmit>
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000000 	.word	0x20000000

0800314c <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b087      	sub	sp, #28
 8003150:	af02      	add	r7, sp, #8
 8003152:	0002      	movs	r2, r0
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 8003158:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <_ds3231_getreg+0x44>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	1dfa      	adds	r2, r7, #7
 800315e:	23fa      	movs	r3, #250	@ 0xfa
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2301      	movs	r3, #1
 8003166:	21d0      	movs	r1, #208	@ 0xd0
 8003168:	f003 fe04 	bl	8006d74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <_ds3231_getreg+0x44>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	240f      	movs	r4, #15
 8003172:	193a      	adds	r2, r7, r4
 8003174:	23fa      	movs	r3, #250	@ 0xfa
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2301      	movs	r3, #1
 800317c:	21d0      	movs	r1, #208	@ 0xd0
 800317e:	f003 ff23 	bl	8006fc8 <HAL_I2C_Master_Receive>
	return val;
 8003182:	193b      	adds	r3, r7, r4
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b005      	add	sp, #20
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	20000000 	.word	0x20000000

08003194 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	0005      	movs	r5, r0
 800319c:	000c      	movs	r4, r1
 800319e:	0010      	movs	r0, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	1c2a      	adds	r2, r5, #0
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	1dbb      	adds	r3, r7, #6
 80031aa:	1c22      	adds	r2, r4, #0
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	1d7b      	adds	r3, r7, #5
 80031b0:	1c02      	adds	r2, r0, #0
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	1c0a      	adds	r2, r1, #0
 80031b8:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 80031ba:	2328      	movs	r3, #40	@ 0x28
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2217      	movs	r2, #23
 80031c2:	18bc      	adds	r4, r7, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f954 	bl	8003472 <_dec_to_bcd>
 80031ca:	0003      	movs	r3, r0
 80031cc:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2216      	movs	r2, #22
 80031d4:	18bc      	adds	r4, r7, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f94b 	bl	8003472 <_dec_to_bcd>
 80031dc:	0003      	movs	r3, r0
 80031de:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 80031e0:	1d7b      	adds	r3, r7, #5
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2215      	movs	r2, #21
 80031e6:	18bc      	adds	r4, r7, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 f942 	bl	8003472 <_dec_to_bcd>
 80031ee:	0003      	movs	r3, r0
 80031f0:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2214      	movs	r2, #20
 80031f8:	18bc      	adds	r4, r7, r2
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f939 	bl	8003472 <_dec_to_bcd>
 8003200:	0003      	movs	r3, r0
 8003202:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d858      	bhi.n	80032be <ds3231_setalarm1+0x12a>
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	4b54      	ldr	r3, [pc, #336]	@ (8003360 <ds3231_setalarm1+0x1cc>)
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 8003216:	2214      	movs	r2, #20
 8003218:	18bb      	adds	r3, r7, r2
 800321a:	18ba      	adds	r2, r7, r2
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	4249      	negs	r1, r1
 8003222:	430a      	orrs	r2, r1
 8003224:	701a      	strb	r2, [r3, #0]
	  break;
 8003226:	e04d      	b.n	80032c4 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 8003228:	2214      	movs	r2, #20
 800322a:	18bb      	adds	r3, r7, r2
 800322c:	18ba      	adds	r2, r7, r2
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	4249      	negs	r1, r1
 8003234:	430a      	orrs	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003238:	2215      	movs	r2, #21
 800323a:	18bb      	adds	r3, r7, r2
 800323c:	18ba      	adds	r2, r7, r2
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	4249      	negs	r1, r1
 8003244:	430a      	orrs	r2, r1
 8003246:	701a      	strb	r2, [r3, #0]
	  break;
 8003248:	e03c      	b.n	80032c4 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 800324a:	2214      	movs	r2, #20
 800324c:	18bb      	adds	r3, r7, r2
 800324e:	18ba      	adds	r2, r7, r2
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	2180      	movs	r1, #128	@ 0x80
 8003254:	4249      	negs	r1, r1
 8003256:	430a      	orrs	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 800325a:	2215      	movs	r2, #21
 800325c:	18bb      	adds	r3, r7, r2
 800325e:	18ba      	adds	r2, r7, r2
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	4249      	negs	r1, r1
 8003266:	430a      	orrs	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 800326a:	2216      	movs	r2, #22
 800326c:	18bb      	adds	r3, r7, r2
 800326e:	18ba      	adds	r2, r7, r2
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	4249      	negs	r1, r1
 8003276:	430a      	orrs	r2, r1
 8003278:	701a      	strb	r2, [r3, #0]
	  break;
 800327a:	e023      	b.n	80032c4 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 800327c:	2214      	movs	r2, #20
 800327e:	18bb      	adds	r3, r7, r2
 8003280:	18ba      	adds	r2, r7, r2
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	4249      	negs	r1, r1
 8003288:	430a      	orrs	r2, r1
 800328a:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 800328c:	2215      	movs	r2, #21
 800328e:	18bb      	adds	r3, r7, r2
 8003290:	18ba      	adds	r2, r7, r2
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	4249      	negs	r1, r1
 8003298:	430a      	orrs	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 800329c:	2216      	movs	r2, #22
 800329e:	18bb      	adds	r3, r7, r2
 80032a0:	18ba      	adds	r2, r7, r2
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	4249      	negs	r1, r1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 80032ac:	2217      	movs	r2, #23
 80032ae:	18bb      	adds	r3, r7, r2
 80032b0:	18ba      	adds	r2, r7, r2
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	2180      	movs	r1, #128	@ 0x80
 80032b6:	4249      	negs	r1, r1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	701a      	strb	r2, [r3, #0]
	  break;
 80032bc:	e002      	b.n	80032c4 <ds3231_setalarm1+0x130>
  default:
	  break;
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	e000      	b.n	80032c4 <ds3231_setalarm1+0x130>
	  break;
 80032c2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 80032c4:	2013      	movs	r0, #19
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	2207      	movs	r2, #7
 80032ca:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 80032cc:	210c      	movs	r1, #12
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	183a      	adds	r2, r7, r0
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	2217      	movs	r2, #23
 80032da:	18ba      	adds	r2, r7, r2
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	2216      	movs	r2, #22
 80032e4:	18ba      	adds	r2, r7, r2
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	709a      	strb	r2, [r3, #2]
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	2215      	movs	r2, #21
 80032ee:	18ba      	adds	r2, r7, r2
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	70da      	strb	r2, [r3, #3]
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	2214      	movs	r2, #20
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <ds3231_setalarm1+0x1d0>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	187a      	adds	r2, r7, r1
 8003304:	23fa      	movs	r3, #250	@ 0xfa
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2305      	movs	r3, #5
 800330c:	21d0      	movs	r1, #208	@ 0xd0
 800330e:	f003 fd31 	bl	8006d74 <HAL_I2C_Master_Transmit>
 8003312:	1e03      	subs	r3, r0, #0
 8003314:	d001      	beq.n	800331a <ds3231_setalarm1+0x186>
 8003316:	2300      	movs	r3, #0
 8003318:	e01d      	b.n	8003356 <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 800331a:	2512      	movs	r5, #18
 800331c:	197b      	adds	r3, r7, r5
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 8003322:	197c      	adds	r4, r7, r5
 8003324:	200e      	movs	r0, #14
 8003326:	f7ff ff11 	bl	800314c <_ds3231_getreg>
 800332a:	0003      	movs	r3, r0
 800332c:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 800332e:	0028      	movs	r0, r5
 8003330:	183b      	adds	r3, r7, r0
 8003332:	183a      	adds	r2, r7, r0
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 800333c:	183b      	adds	r3, r7, r0
 800333e:	183a      	adds	r2, r7, r0
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	2104      	movs	r1, #4
 8003344:	430a      	orrs	r2, r1
 8003346:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 8003348:	183b      	adds	r3, r7, r0
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	0019      	movs	r1, r3
 800334e:	200e      	movs	r0, #14
 8003350:	f7ff feda 	bl	8003108 <_ds3231_setreg>

  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bdb0      	pop	{r4, r5, r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	0800dd9c 	.word	0x0800dd9c
 8003364:	20000000 	.word	0x20000000

08003368 <ds3231_clearalarm1>:

uint8_t ds3231_clearalarm1() {
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 800336e:	1dfc      	adds	r4, r7, #7
 8003370:	200e      	movs	r0, #14
 8003372:	f7ff feeb 	bl	800314c <_ds3231_getreg>
 8003376:	0003      	movs	r3, r0
 8003378:	7023      	strb	r3, [r4, #0]
  ctrlReg &= ~DS3231_CON_A1IE;
 800337a:	1dfb      	adds	r3, r7, #7
 800337c:	1dfa      	adds	r2, r7, #7
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	2101      	movs	r1, #1
 8003382:	438a      	bics	r2, r1
 8003384:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	0019      	movs	r1, r3
 800338c:	200e      	movs	r0, #14
 800338e:	f7ff febb 	bl	8003108 <_ds3231_setreg>

  /* Clear Status Register */
  statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 8003392:	1dbc      	adds	r4, r7, #6
 8003394:	200f      	movs	r0, #15
 8003396:	f7ff fed9 	bl	800314c <_ds3231_getreg>
 800339a:	0003      	movs	r3, r0
 800339c:	7023      	strb	r3, [r4, #0]
  statusReg &= ~DS3231_STA_A1F;
 800339e:	1dbb      	adds	r3, r7, #6
 80033a0:	1dba      	adds	r2, r7, #6
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	438a      	bics	r2, r1
 80033a8:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 80033aa:	1dbb      	adds	r3, r7, #6
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	0019      	movs	r1, r3
 80033b0:	200f      	movs	r0, #15
 80033b2:	f7ff fea9 	bl	8003108 <_ds3231_setreg>

  return 1;
 80033b6:	2301      	movs	r3, #1
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b003      	add	sp, #12
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <ds3231_clearflagalarm1>:

void ds3231_clearflagalarm1() {
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 80033c6:	1dfc      	adds	r4, r7, #7
 80033c8:	200f      	movs	r0, #15
 80033ca:	f7ff febf 	bl	800314c <_ds3231_getreg>
 80033ce:	0003      	movs	r3, r0
 80033d0:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	d00b      	beq.n	80033f4 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	1dfa      	adds	r2, r7, #7
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	0019      	movs	r1, r3
 80033ee:	200f      	movs	r0, #15
 80033f0:	f7ff fe8a 	bl	8003108 <_ds3231_setreg>
  }
}
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b003      	add	sp, #12
 80033fa:	bd90      	pop	{r4, r7, pc}

080033fc <alarmcheck>:

void alarmcheck() {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
	reg = _ds3231_getreg(DS3231_REG_ALARM1);
 8003408:	1dfc      	adds	r4, r7, #7
 800340a:	2007      	movs	r0, #7
 800340c:	f7ff fe9e 	bl	800314c <_ds3231_getreg>
 8003410:	0003      	movs	r3, r0
 8003412:	7023      	strb	r3, [r4, #0]
	reg = _ds3231_getreg(DS3231_REG_ALARM1+1);
 8003414:	1dfc      	adds	r4, r7, #7
 8003416:	2008      	movs	r0, #8
 8003418:	f7ff fe98 	bl	800314c <_ds3231_getreg>
 800341c:	0003      	movs	r3, r0
 800341e:	7023      	strb	r3, [r4, #0]
	reg = _ds3231_getreg(DS3231_REG_ALARM1+2);
 8003420:	1dfc      	adds	r4, r7, #7
 8003422:	2009      	movs	r0, #9
 8003424:	f7ff fe92 	bl	800314c <_ds3231_getreg>
 8003428:	0003      	movs	r3, r0
 800342a:	7023      	strb	r3, [r4, #0]
	reg = _ds3231_getreg(DS3231_REG_ALARM1+3);
 800342c:	1dfc      	adds	r4, r7, #7
 800342e:	200a      	movs	r0, #10
 8003430:	f7ff fe8c 	bl	800314c <_ds3231_getreg>
 8003434:	0003      	movs	r3, r0
 8003436:	7023      	strb	r3, [r4, #0]
}
 8003438:	46c0      	nop			@ (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b003      	add	sp, #12
 800343e:	bd90      	pop	{r4, r7, pc}

08003440 <_bcd_to_dec>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
int _bcd_to_dec(uint8_t val) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	0002      	movs	r2, r0
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	701a      	strb	r2, [r3, #0]
	return (int)( (val/16*10) + (val%16) );
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	001a      	movs	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	189b      	adds	r3, r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	0019      	movs	r1, r3
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	220f      	movs	r2, #15
 8003466:	4013      	ands	r3, r2
 8003468:	18cb      	adds	r3, r1, r3
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}

08003472 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003472:	b590      	push	{r4, r7, lr}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	210a      	movs	r1, #10
 800347e:	0018      	movs	r0, r3
 8003480:	f7fc fee4 	bl	800024c <__divsi3>
 8003484:	0003      	movs	r3, r0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	b2dc      	uxtb	r4, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	210a      	movs	r1, #10
 8003490:	0018      	movs	r0, r3
 8003492:	f7fc ffc1 	bl	8000418 <__aeabi_idivmod>
 8003496:	000b      	movs	r3, r1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	b2db      	uxtb	r3, r3
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b003      	add	sp, #12
 80034a4:	bd90      	pop	{r4, r7, pc}
	...

080034a8 <led_blink>:
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;
uint8_t led_blink_flag;

void led_blink() {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
	LED_ON();
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <led_blink+0x1c>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	2102      	movs	r1, #2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f003 fb67 	bl	8006b86 <HAL_GPIO_WritePin>
	led_blink_flag = 1;
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <led_blink+0x20>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	50001400 	.word	0x50001400
 80034c8:	200004b8 	.word	0x200004b8

080034cc <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 80034d4:	4b40      	ldr	r3, [pc, #256]	@ (80035d8 <HAL_ADC_ConvCpltCallback+0x10c>)
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	23fa      	movs	r3, #250	@ 0xfa
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	429a      	cmp	r2, r3
 80034de:	d34f      	bcc.n	8003580 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80034e0:	230f      	movs	r3, #15
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e041      	b.n	800356e <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80034ea:	250f      	movs	r5, #15
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	4b3a      	ldr	r3, [pc, #232]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	58d2      	ldr	r2, [r2, r3]
 80034f6:	197b      	adds	r3, r7, r5
 80034f8:	781c      	ldrb	r4, [r3, #0]
 80034fa:	23fa      	movs	r3, #250	@ 0xfa
 80034fc:	0059      	lsls	r1, r3, #1
 80034fe:	0010      	movs	r0, r2
 8003500:	f7fc fe1a 	bl	8000138 <__udivsi3>
 8003504:	0003      	movs	r3, r0
 8003506:	0019      	movs	r1, r3
 8003508:	4b34      	ldr	r3, [pc, #208]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 800350a:	00a2      	lsls	r2, r4, #2
 800350c:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 800350e:	197b      	adds	r3, r7, r5
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	4b32      	ldr	r3, [pc, #200]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	58d3      	ldr	r3, [r2, r3]
 8003518:	2bc7      	cmp	r3, #199	@ 0xc7
 800351a:	d805      	bhi.n	8003528 <HAL_ADC_ConvCpltCallback+0x5c>
 800351c:	197b      	adds	r3, r7, r5
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 8003522:	0092      	lsls	r2, r2, #2
 8003524:	2100      	movs	r1, #0
 8003526:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8003528:	250f      	movs	r5, #15
 800352a:	197b      	adds	r3, r7, r5
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	58d3      	ldr	r3, [r2, r3]
 8003534:	0018      	movs	r0, r3
 8003536:	f7fd fc61 	bl	8000dfc <__aeabi_ui2f>
 800353a:	197b      	adds	r3, r7, r5
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <HAL_ADC_ConvCpltCallback+0x114>)
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	58d2      	ldr	r2, [r2, r3]
 8003544:	197b      	adds	r3, r7, r5
 8003546:	781c      	ldrb	r4, [r3, #0]
 8003548:	1c11      	adds	r1, r2, #0
 800354a:	f7fd fa8d 	bl	8000a68 <__aeabi_fmul>
 800354e:	1c03      	adds	r3, r0, #0
 8003550:	1c19      	adds	r1, r3, #0
 8003552:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_ADC_ConvCpltCallback+0x118>)
 8003554:	00a2      	lsls	r2, r4, #2
 8003556:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003558:	197b      	adds	r3, r7, r5
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	2100      	movs	r1, #0
 8003562:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003564:	197b      	adds	r3, r7, r5
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	197b      	adds	r3, r7, r5
 800356a:	3201      	adds	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	230f      	movs	r3, #15
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d9b8      	bls.n	80034ea <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_ADC_ConvCpltCallback+0x10c>)
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 800357e:	e026      	b.n	80035ce <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003580:	230e      	movs	r3, #14
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e016      	b.n	80035b8 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 800358a:	200e      	movs	r0, #14
 800358c:	183b      	adds	r3, r7, r0
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	58d3      	ldr	r3, [r2, r3]
 8003596:	183a      	adds	r2, r7, r0
 8003598:	7811      	ldrb	r1, [r2, #0]
 800359a:	4a13      	ldr	r2, [pc, #76]	@ (80035e8 <HAL_ADC_ConvCpltCallback+0x11c>)
 800359c:	0049      	lsls	r1, r1, #1
 800359e:	5a8a      	ldrh	r2, [r1, r2]
 80035a0:	0011      	movs	r1, r2
 80035a2:	183a      	adds	r2, r7, r0
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	1859      	adds	r1, r3, r1
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_ADC_ConvCpltCallback+0x110>)
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	3201      	adds	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	230e      	movs	r3, #14
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d9e3      	bls.n	800358a <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 80035c2:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035cc:	801a      	strh	r2, [r3, #0]
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b004      	add	sp, #16
 80035d4:	bdb0      	pop	{r4, r5, r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	20000586 	.word	0x20000586
 80035dc:	20000588 	.word	0x20000588
 80035e0:	20000004 	.word	0x20000004
 80035e4:	200004cc 	.word	0x200004cc
 80035e8:	200004d8 	.word	0x200004d8

080035ec <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	0002      	movs	r2, r0
 80035f4:	1dbb      	adds	r3, r7, #6
 80035f6:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 80035f8:	1dbb      	adds	r3, r7, #6
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d112      	bne.n	8003626 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
		triac_timer = 0;
 8003600:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800360e:	2200      	movs	r2, #0
 8003610:	2101      	movs	r1, #1
 8003612:	0018      	movs	r0, r3
 8003614:	f003 fab7 	bl	8006b86 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	019b      	lsls	r3, r3, #6
 800361c:	480a      	ldr	r0, [pc, #40]	@ (8003648 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800361e:	2200      	movs	r2, #0
 8003620:	0019      	movs	r1, r3
 8003622:	f003 fab0 	bl	8006b86 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d102      	bne.n	8003634 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 800362e:	4b07      	ldr	r3, [pc, #28]	@ (800364c <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200004e8 	.word	0x200004e8
 8003640:	200004e5 	.word	0x200004e5
 8003644:	50001400 	.word	0x50001400
 8003648:	50000800 	.word	0x50000800
 800364c:	200004f2 	.word	0x200004f2

08003650 <gsm_cmd>:
/* Util funcs */
// Check if target string exists in buffer
uint8_t find_string_in_buffer(const char* buffer, const char* target) {
}

uint8_t gsm_cmd(char *cmd, char *op_check, uint16_t wtime) {
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	4c20      	ldr	r4, [pc, #128]	@ (80036d4 <gsm_cmd+0x84>)
 8003654:	44a5      	add	sp, r4
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <gsm_cmd+0x88>)
 800365e:	2582      	movs	r5, #130	@ 0x82
 8003660:	00ad      	lsls	r5, r5, #2
 8003662:	195b      	adds	r3, r3, r5
 8003664:	19db      	adds	r3, r3, r7
 8003666:	801a      	strh	r2, [r3, #0]
	char cmd_string[500];
	memset(cmd_string, 0, 20);
 8003668:	2414      	movs	r4, #20
 800366a:	193b      	adds	r3, r7, r4
 800366c:	2214      	movs	r2, #20
 800366e:	2100      	movs	r1, #0
 8003670:	0018      	movs	r0, r3
 8003672:	f008 f925 	bl	800b8c0 <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003676:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <gsm_cmd+0x8c>)
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4919      	ldr	r1, [pc, #100]	@ (80036e0 <gsm_cmd+0x90>)
 800367c:	1938      	adds	r0, r7, r4
 800367e:	f008 f8b1 	bl	800b7e4 <siprintf>
	gsm_tx_busy = 1;
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <gsm_cmd+0x94>)
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
	gsm_rx_timeout = wtime * 10;
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <gsm_cmd+0x88>)
 800368a:	195b      	adds	r3, r3, r5
 800368c:	19db      	adds	r3, r3, r7
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	1c1a      	adds	r2, r3, #0
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	18db      	adds	r3, r3, r3
 8003698:	b29a      	uxth	r2, r3
 800369a:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <gsm_cmd+0x98>)
 800369c:	801a      	strh	r2, [r3, #0]
	strcpy(gsm_match_resp, op_check);
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <gsm_cmd+0x9c>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f008 f9a8 	bl	800b9fa <strcpy>
	gsm_status = GSM_WAIT;
 80036aa:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <gsm_cmd+0xa0>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fc fd24 	bl	8000100 <strlen>
 80036b8:	0003      	movs	r3, r0
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	1939      	adds	r1, r7, r4
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <gsm_cmd+0xa4>)
 80036c0:	0018      	movs	r0, r3
 80036c2:	f006 fc41 	bl	8009f48 <HAL_UART_Transmit_DMA>
 80036c6:	0003      	movs	r3, r0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	2382      	movs	r3, #130	@ 0x82
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	449d      	add	sp, r3
 80036d2:	bdb0      	pop	{r4, r5, r7, pc}
 80036d4:	fffffdf8 	.word	0xfffffdf8
 80036d8:	fffffdfe 	.word	0xfffffdfe
 80036dc:	0800dbd0 	.word	0x0800dbd0
 80036e0:	0800dbd4 	.word	0x0800dbd4
 80036e4:	20000500 	.word	0x20000500
 80036e8:	20000506 	.word	0x20000506
 80036ec:	20000570 	.word	0x20000570
 80036f0:	20000502 	.word	0x20000502
 80036f4:	20000418 	.word	0x20000418

080036f8 <gsm_is_valid_resp>:

uint8_t gsm_is_valid_resp() {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 80036fc:	4a06      	ldr	r2, [pc, #24]	@ (8003718 <gsm_is_valid_resp+0x20>)
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <gsm_is_valid_resp+0x24>)
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f008 f8e4 	bl	800b8d0 <strstr>
 8003708:	0003      	movs	r3, r0
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	4193      	sbcs	r3, r2
 800370e:	b2db      	uxtb	r3, r3
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000570 	.word	0x20000570
 800371c:	2000050c 	.word	0x2000050c

08003720 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <HAL_UART_TxCpltCallback+0x44>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d114      	bne.n	800375c <HAL_UART_TxCpltCallback+0x3c>
		gsm_tx_busy = 0;
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <HAL_UART_TxCpltCallback+0x48>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
		gsm_rx_busy = 1;
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <HAL_UART_TxCpltCallback+0x4c>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
		memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_UART_TxCpltCallback+0x50>)
 8003740:	2264      	movs	r2, #100	@ 0x64
 8003742:	2100      	movs	r1, #0
 8003744:	0018      	movs	r0, r3
 8003746:	f008 f8bb 	bl	800b8c0 <memset>
		HAL_UART_Receive_DMA(huart, gsm_rx_buffer, GSM_RX_BUFFER_SIZE);
 800374a:	4909      	ldr	r1, [pc, #36]	@ (8003770 <HAL_UART_TxCpltCallback+0x50>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2264      	movs	r2, #100	@ 0x64
 8003750:	0018      	movs	r0, r3
 8003752:	f006 fc8b 	bl	800a06c <HAL_UART_Receive_DMA>
		gsm_rx_flag = 1;
 8003756:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <HAL_UART_TxCpltCallback+0x54>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
	}
}
 800375c:	46c0      	nop			@ (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40004800 	.word	0x40004800
 8003768:	20000500 	.word	0x20000500
 800376c:	20000501 	.word	0x20000501
 8003770:	2000050c 	.word	0x2000050c
 8003774:	20000509 	.word	0x20000509

08003778 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a8a      	ldr	r2, [pc, #552]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d000      	beq.n	800378c <HAL_TIM_PeriodElapsedCallback+0x14>
 800378a:	e10c      	b.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 800378c:	4b89      	ldr	r3, [pc, #548]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a89      	ldr	r2, [pc, #548]	@ (80039b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d924      	bls.n	80037e0 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(sec > 60) {
 8003796:	4b89      	ldr	r3, [pc, #548]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b3c      	cmp	r3, #60	@ 0x3c
 800379c:	d916      	bls.n	80037cc <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 800379e:	4b88      	ldr	r3, [pc, #544]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b3c      	cmp	r3, #60	@ 0x3c
 80037a4:	d909      	bls.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 80037a6:	4b86      	ldr	r3, [pc, #536]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
					hr++;
 80037ac:	4b85      	ldr	r3, [pc, #532]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b83      	ldr	r3, [pc, #524]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	e004      	b.n	80037c4 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 80037ba:	4b81      	ldr	r3, [pc, #516]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	4b7f      	ldr	r3, [pc, #508]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037c2:	601a      	str	r2, [r3, #0]
				sec = 0;
 80037c4:	4b7d      	ldr	r3, [pc, #500]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e005      	b.n	80037d8 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 80037cc:	4b7b      	ldr	r3, [pc, #492]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	4b79      	ldr	r3, [pc, #484]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037d6:	701a      	strb	r2, [r3, #0]
			ms = 0;
 80037d8:	4b76      	ldr	r3, [pc, #472]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e004      	b.n	80037ea <HAL_TIM_PeriodElapsedCallback+0x72>
			/*###*/
		} else ms++;
 80037e0:	4b74      	ldr	r3, [pc, #464]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	4b73      	ldr	r3, [pc, #460]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037e8:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 80037ea:	4b72      	ldr	r3, [pc, #456]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4976      	ldr	r1, [pc, #472]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fc fd27 	bl	8000244 <__aeabi_uidivmod>
 80037f6:	1e0b      	subs	r3, r1, #0
 80037f8:	d102      	bne.n	8003800 <HAL_TIM_PeriodElapsedCallback+0x88>
			sensor_refresh_flag = 1;
 80037fa:	4b74      	ldr	r3, [pc, #464]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
		vi_update_flag = 1;
 8003800:	4b73      	ldr	r3, [pc, #460]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8003806:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <HAL_TIM_PeriodElapsedCallback+0xa0>
 800380e:	4b72      	ldr	r3, [pc, #456]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	e000      	b.n	800381a <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003818:	2200      	movs	r2, #0
 800381a:	4b6f      	ldr	r3, [pc, #444]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800381c:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 800381e:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003826:	4b6e      	ldr	r3, [pc, #440]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	e000      	b.n	8003832 <HAL_TIM_PeriodElapsedCallback+0xba>
 8003830:	2200      	movs	r2, #0
 8003832:	4b6b      	ldr	r3, [pc, #428]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003834:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003836:	4b6b      	ldr	r3, [pc, #428]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800383e:	4b6a      	ldr	r3, [pc, #424]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	e000      	b.n	800384a <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003848:	2200      	movs	r2, #0
 800384a:	4b67      	ldr	r3, [pc, #412]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800384c:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 800384e:	4b67      	ldr	r3, [pc, #412]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8003856:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	e000      	b.n	8003862 <HAL_TIM_PeriodElapsedCallback+0xea>
 8003860:	2200      	movs	r2, #0
 8003862:	4b63      	ldr	r3, [pc, #396]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003864:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8003866:	4b62      	ldr	r3, [pc, #392]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	23fa      	movs	r3, #250	@ 0xfa
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	429a      	cmp	r2, r3
 8003870:	d908      	bls.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 8003872:	4b5e      	ldr	r3, [pc, #376]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003878:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800387a:	2200      	movs	r2, #0
 800387c:	2102      	movs	r1, #2
 800387e:	0018      	movs	r0, r3
 8003880:	f003 f981 	bl	8006b86 <HAL_GPIO_WritePin>
		}

		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8003884:	4b5c      	ldr	r3, [pc, #368]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_TIM_PeriodElapsedCallback+0x122>
 800388e:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	e000      	b.n	800389c <HAL_TIM_PeriodElapsedCallback+0x124>
 800389a:	2200      	movs	r2, #0
 800389c:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800389e:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b56      	ldr	r3, [pc, #344]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d916      	bls.n	80038de <HAL_TIM_PeriodElapsedCallback+0x166>
			gsm_rx_timer = 0;
 80038b0:	4b52      	ldr	r3, [pc, #328]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 80038b6:	f7ff ff1f 	bl	80036f8 <gsm_is_valid_resp>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x14e>
				gsm_status = GSM_OK;
 80038be:	4b51      	ldr	r3, [pc, #324]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e002      	b.n	80038cc <HAL_TIM_PeriodElapsedCallback+0x154>
			else
				gsm_status = GSM_NOK;
 80038c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80038c8:	2263      	movs	r2, #99	@ 0x63
 80038ca:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 80038cc:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 80038d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 80038d8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
		}

		if(triac_mode == MODE_CTRL) {
 80038de:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d14f      	bne.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x20e>
			triac_timer = triac_timer_flag ? triac_timer + 1 : 0;
 80038e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_TIM_PeriodElapsedCallback+0x18a>
 80038ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003a18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	21fe      	movs	r1, #254	@ 0xfe
 80038f4:	0589      	lsls	r1, r1, #22
 80038f6:	1c18      	adds	r0, r3, #0
 80038f8:	f7fc fe0c 	bl	8000514 <__aeabi_fadd>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	1c1a      	adds	r2, r3, #0
 8003900:	e000      	b.n	8003904 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8003902:	2200      	movs	r2, #0
 8003904:	4b44      	ldr	r3, [pc, #272]	@ (8003a18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003906:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time * 100) {
 8003908:	4b44      	ldr	r3, [pc, #272]	@ (8003a1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4944      	ldr	r1, [pc, #272]	@ (8003a20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800390e:	1c18      	adds	r0, r3, #0
 8003910:	f7fd f8aa 	bl	8000a68 <__aeabi_fmul>
 8003914:	1c03      	adds	r3, r0, #0
 8003916:	1c1a      	adds	r2, r3, #0
 8003918:	4b3f      	ldr	r3, [pc, #252]	@ (8003a18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1c19      	adds	r1, r3, #0
 800391e:	1c10      	adds	r0, r2, #0
 8003920:	f7fc fdda 	bl	80004d8 <__aeabi_fcmple>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d100      	bne.n	800392a <HAL_TIM_PeriodElapsedCallback+0x1b2>
			TRIAC1_SET(0); /* trigger TRIAC */
			TRIAC2_SET(0);
			triac_time = 0;
		}
	}
}
 8003928:	e03d      	b.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x22e>
				triac_timer_flag = 0;
 800392a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger TRIAC */
 8003930:	4b30      	ldr	r3, [pc, #192]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003932:	2201      	movs	r2, #1
 8003934:	2101      	movs	r1, #1
 8003936:	0018      	movs	r0, r3
 8003938:	f003 f925 	bl	8006b86 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	019b      	lsls	r3, r3, #6
 8003940:	4838      	ldr	r0, [pc, #224]	@ (8003a24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003942:	2201      	movs	r2, #1
 8003944:	0019      	movs	r1, r3
 8003946:	f003 f91e 	bl	8006b86 <HAL_GPIO_WritePin>
				for(uint16_t i = 0; i < 80; i++);
 800394a:	230e      	movs	r3, #14
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e005      	b.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8003954:	210e      	movs	r1, #14
 8003956:	187b      	adds	r3, r7, r1
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	187b      	adds	r3, r7, r1
 800395c:	3201      	adds	r2, #1
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	230e      	movs	r3, #14
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	2b4f      	cmp	r3, #79	@ 0x4f
 8003968:	d9f4      	bls.n	8003954 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				TRIAC1_SET(0); /* trigger TRIAC */
 800396a:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800396c:	2200      	movs	r2, #0
 800396e:	2101      	movs	r1, #1
 8003970:	0018      	movs	r0, r3
 8003972:	f003 f908 	bl	8006b86 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	482a      	ldr	r0, [pc, #168]	@ (8003a24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800397c:	2200      	movs	r2, #0
 800397e:	0019      	movs	r1, r3
 8003980:	f003 f901 	bl	8006b86 <HAL_GPIO_WritePin>
}
 8003984:	e00f      	b.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x22e>
			TRIAC1_SET(0); /* trigger TRIAC */
 8003986:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003988:	2200      	movs	r2, #0
 800398a:	2101      	movs	r1, #1
 800398c:	0018      	movs	r0, r3
 800398e:	f003 f8fa 	bl	8006b86 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	4823      	ldr	r0, [pc, #140]	@ (8003a24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003998:	2200      	movs	r2, #0
 800399a:	0019      	movs	r1, r3
 800399c:	f003 f8f3 	bl	8006b86 <HAL_GPIO_WritePin>
			triac_time = 0;
 80039a0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	40014400 	.word	0x40014400
 80039b4:	200004bc 	.word	0x200004bc
 80039b8:	00002710 	.word	0x00002710
 80039bc:	200004c0 	.word	0x200004c0
 80039c0:	200004c4 	.word	0x200004c4
 80039c4:	200004c8 	.word	0x200004c8
 80039c8:	00001388 	.word	0x00001388
 80039cc:	200004ba 	.word	0x200004ba
 80039d0:	200004f3 	.word	0x200004f3
 80039d4:	200004ac 	.word	0x200004ac
 80039d8:	200004b0 	.word	0x200004b0
 80039dc:	200004ad 	.word	0x200004ad
 80039e0:	200004b2 	.word	0x200004b2
 80039e4:	200004ae 	.word	0x200004ae
 80039e8:	200004b4 	.word	0x200004b4
 80039ec:	200004b8 	.word	0x200004b8
 80039f0:	200004b6 	.word	0x200004b6
 80039f4:	50001400 	.word	0x50001400
 80039f8:	20000509 	.word	0x20000509
 80039fc:	20000504 	.word	0x20000504
 8003a00:	20000506 	.word	0x20000506
 8003a04:	20000502 	.word	0x20000502
 8003a08:	20000500 	.word	0x20000500
 8003a0c:	20000501 	.word	0x20000501
 8003a10:	200004f0 	.word	0x200004f0
 8003a14:	200004e5 	.word	0x200004e5
 8003a18:	200004e8 	.word	0x200004e8
 8003a1c:	200004ec 	.word	0x200004ec
 8003a20:	42c80000 	.word	0x42c80000
 8003a24:	50000800 	.word	0x50000800

08003a28 <eeprom_write>:
//	}
//}



void eeprom_write(uint16_t idx, uint8_t data) {
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b089      	sub	sp, #36	@ 0x24
 8003a2c:	af04      	add	r7, sp, #16
 8003a2e:	0002      	movs	r2, r0
 8003a30:	1dbb      	adds	r3, r7, #6
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	1d7b      	adds	r3, r7, #5
 8003a36:	1c0a      	adds	r2, r1, #0
 8003a38:	701a      	strb	r2, [r3, #0]
	uint8_t d = data;
 8003a3a:	210e      	movs	r1, #14
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	1d7a      	adds	r2, r7, #5
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8003a44:	200f      	movs	r0, #15
 8003a46:	183b      	adds	r3, r7, r0
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR , 0, I2C_MEMADD_SIZE_8BIT, &d, 1, HAL_MAX_DELAY);  // write the data to the EEPROM
 8003a4c:	183c      	adds	r4, r7, r0
 8003a4e:	480b      	ldr	r0, [pc, #44]	@ (8003a7c <eeprom_write+0x54>)
 8003a50:	2301      	movs	r3, #1
 8003a52:	425b      	negs	r3, r3
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	2301      	movs	r3, #1
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	187b      	adds	r3, r7, r1
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2200      	movs	r2, #0
 8003a62:	21ae      	movs	r1, #174	@ 0xae
 8003a64:	f003 fbb8 	bl	80071d8 <HAL_I2C_Mem_Write>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	7023      	strb	r3, [r4, #0]
	HAL_Delay(5);
 8003a6c:	2005      	movs	r0, #5
 8003a6e:	f001 fb79 	bl	8005164 <HAL_Delay>
}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b005      	add	sp, #20
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	200002c0 	.word	0x200002c0

08003a80 <eeprom_read>:
uint8_t eeprom_read(uint16_t idx) {
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	0002      	movs	r2, r0
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	801a      	strh	r2, [r3, #0]
	uint8_t data = 0;
 8003a8c:	210f      	movs	r1, #15
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, 0, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);  // write the data to the EEPROM
 8003a94:	4809      	ldr	r0, [pc, #36]	@ (8003abc <eeprom_read+0x3c>)
 8003a96:	23fa      	movs	r3, #250	@ 0xfa
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	000c      	movs	r4, r1
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	21ae      	movs	r1, #174	@ 0xae
 8003aac:	f003 fcc2 	bl	8007434 <HAL_I2C_Mem_Read>
	return data;
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	781b      	ldrb	r3, [r3, #0]
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b005      	add	sp, #20
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	200002c0 	.word	0x200002c0

08003ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac2:	46de      	mov	lr, fp
 8003ac4:	4657      	mov	r7, sl
 8003ac6:	464e      	mov	r6, r9
 8003ac8:	4645      	mov	r5, r8
 8003aca:	b5e0      	push	{r5, r6, r7, lr}
 8003acc:	b0c9      	sub	sp, #292	@ 0x124
 8003ace:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ad0:	f001 fac2 	bl	8005058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ad4:	f000 fb4e 	bl	8004174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ad8:	f000 fd70 	bl	80045bc <MX_GPIO_Init>
  MX_DMA_Init();
 8003adc:	f000 fd50 	bl	8004580 <MX_DMA_Init>
  MX_I2C2_Init();
 8003ae0:	f000 fc74 	bl	80043cc <MX_I2C2_Init>
  MX_TIM16_Init();
 8003ae4:	f000 fcf2 	bl	80044cc <MX_TIM16_Init>
  MX_I2C1_Init();
 8003ae8:	f000 fc30 	bl	800434c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003aec:	f000 fd14 	bl	8004518 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003af0:	f000 fb9a 	bl	8004228 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003af4:	f000 fcaa 	bl	800444c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 8003af8:	4be1      	ldr	r3, [pc, #900]	@ (8003e80 <main+0x3c0>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	2101      	movs	r1, #1
 8003afe:	0018      	movs	r0, r3
 8003b00:	f003 f841 	bl	8006b86 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	019b      	lsls	r3, r3, #6
 8003b08:	48de      	ldr	r0, [pc, #888]	@ (8003e84 <main+0x3c4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	f003 f83a 	bl	8006b86 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8003b12:	23f0      	movs	r3, #240	@ 0xf0
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 8003b1a:	23ff      	movs	r3, #255	@ 0xff
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8003b22:	23fc      	movs	r3, #252	@ 0xfc
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2200      	movs	r2, #0
 8003b28:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 8003b2a:	4bd7      	ldr	r3, [pc, #860]	@ (8003e88 <main+0x3c8>)
 8003b2c:	2280      	movs	r2, #128	@ 0x80
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8003b32:	4bd5      	ldr	r3, [pc, #852]	@ (8003e88 <main+0x3c8>)
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	0152      	lsls	r2, r2, #5
 8003b38:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8003b3a:	4bd3      	ldr	r3, [pc, #844]	@ (8003e88 <main+0x3c8>)
 8003b3c:	2280      	movs	r2, #128	@ 0x80
 8003b3e:	0192      	lsls	r2, r2, #6
 8003b40:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8003b42:	4bd1      	ldr	r3, [pc, #836]	@ (8003e88 <main+0x3c8>)
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	01d2      	lsls	r2, r2, #7
 8003b48:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8003b4a:	4bcf      	ldr	r3, [pc, #828]	@ (8003e88 <main+0x3c8>)
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	0212      	lsls	r2, r2, #8
 8003b50:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8003b52:	23a0      	movs	r3, #160	@ 0xa0
 8003b54:	05db      	lsls	r3, r3, #23
 8003b56:	2280      	movs	r2, #128	@ 0x80
 8003b58:	0052      	lsls	r2, r2, #1
 8003b5a:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003b5c:	4bca      	ldr	r3, [pc, #808]	@ (8003e88 <main+0x3c8>)
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	0112      	lsls	r2, r2, #4
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 8003b64:	4bc9      	ldr	r3, [pc, #804]	@ (8003e8c <main+0x3cc>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8003b6a:	4bc8      	ldr	r3, [pc, #800]	@ (8003e8c <main+0x3cc>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8003b70:	4bc6      	ldr	r3, [pc, #792]	@ (8003e8c <main+0x3cc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3);
 8003b76:	49c5      	ldr	r1, [pc, #788]	@ (8003e8c <main+0x3cc>)
 8003b78:	4bc5      	ldr	r3, [pc, #788]	@ (8003e90 <main+0x3d0>)
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f001 fe11 	bl	80057a4 <HAL_ADC_Start_DMA>
	/* GSM stuff */
	char content_string[200] = "";
 8003b82:	2328      	movs	r3, #40	@ 0x28
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	0018      	movs	r0, r3
 8003b88:	23c8      	movs	r3, #200	@ 0xc8
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	f007 fe97 	bl	800b8c0 <memset>
	char api_key[20] = "07AFUS2QQTX0QLDF"; /* key for production */
 8003b92:	2314      	movs	r3, #20
 8003b94:	18f9      	adds	r1, r7, r3
 8003b96:	4abf      	ldr	r2, [pc, #764]	@ (8003e94 <main+0x3d4>)
 8003b98:	000b      	movs	r3, r1
 8003b9a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003b9c:	c331      	stmia	r3!, {r0, r4, r5}
 8003b9e:	6810      	ldr	r0, [r2, #0]
 8003ba0:	6018      	str	r0, [r3, #0]
 8003ba2:	7912      	ldrb	r2, [r2, #4]
 8003ba4:	711a      	strb	r2, [r3, #4]
 8003ba6:	2311      	movs	r3, #17
 8003ba8:	18cb      	adds	r3, r1, r3
 8003baa:	2203      	movs	r2, #3
 8003bac:	2100      	movs	r1, #0
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f007 fe86 	bl	800b8c0 <memset>
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
//	HAL_Delay(700);
//	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
//	HAL_Delay(15000);
//
	uint8_t prev_idx = 1;
 8003bb4:	23fb      	movs	r3, #251	@ 0xfb
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 8003bbc:	23fa      	movs	r3, #250	@ 0xfa
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 8003bc4:	23f8      	movs	r3, #248	@ 0xf8
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	22c8      	movs	r2, #200	@ 0xc8
 8003bca:	0052      	lsls	r2, r2, #1
 8003bcc:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 8003bce:	4bb2      	ldr	r3, [pc, #712]	@ (8003e98 <main+0x3d8>)
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f005 ff49 	bl	8009a68 <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 8003bd6:	4bb1      	ldr	r3, [pc, #708]	@ (8003e9c <main+0x3dc>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8003bdc:	4bb0      	ldr	r3, [pc, #704]	@ (8003ea0 <main+0x3e0>)
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	0018      	movs	r0, r3
 8003be6:	2307      	movs	r3, #7
 8003be8:	001a      	movs	r2, r3
 8003bea:	2100      	movs	r1, #0
 8003bec:	f007 fe68 	bl	800b8c0 <memset>
	ti.day = 14;
 8003bf0:	210c      	movs	r1, #12
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	220e      	movs	r2, #14
 8003bf6:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	220b      	movs	r2, #11
 8003bfc:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2218      	movs	r2, #24
 8003c02:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2202      	movs	r2, #2
 8003c08:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2215      	movs	r2, #21
 8003c0e:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	220e      	movs	r2, #14
 8003c14:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	719a      	strb	r2, [r3, #6]
	ds3231_settime(&ti);
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff f9ba 	bl	8002f98 <ds3231_settime>
	ds3231_gettime(&time);
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7ff fa0e 	bl	8003048 <ds3231_gettime>

	ds3231_clearalarm1();
 8003c2c:	f7ff fb9c 	bl	8003368 <ds3231_clearalarm1>
	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 8003c30:	230a      	movs	r3, #10
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2003      	movs	r0, #3
 8003c3c:	f7ff faaa 	bl	8003194 <ds3231_setalarm1>
	alarmcheck();
 8003c40:	f7ff fbdc 	bl	80033fc <alarmcheck>

	uint16_t ee_data = 0;
 8003c44:	24f6      	movs	r4, #246	@ 0xf6
 8003c46:	193b      	adds	r3, r7, r4
 8003c48:	2200      	movs	r2, #0
 8003c4a:	801a      	strh	r2, [r3, #0]

	eeprom_write(1, 9);
 8003c4c:	2109      	movs	r1, #9
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7ff feea 	bl	8003a28 <eeprom_write>
	ee_data = eeprom_read(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7ff ff13 	bl	8003a80 <eeprom_read>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	801a      	strh	r2, [r3, #0]

	while (1)
	{

		ds3231_clearflagalarm1(); /* clear alarm flag */
 8003c62:	f7ff fbad 	bl	80033c0 <ds3231_clearflagalarm1>
//		}
		/*###*/
		/* routines */

		/*### Sensor read ###*/
		if(sensor_refresh_flag == 1) {
 8003c66:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea4 <main+0x3e4>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d15d      	bne.n	8003d2a <main+0x26a>
			sensor_rx_select(sensor_idx);
 8003c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea8 <main+0x3e8>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f001 f976 	bl	8004f64 <sensor_rx_select>
//			HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 10);
			sensor_rx_disable(); // Disables all IC comms
 8003c78:	f001 f954 	bl	8004f24 <sensor_rx_disable>
			temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 8003c7c:	20f0      	movs	r0, #240	@ 0xf0
 8003c7e:	183b      	adds	r3, r7, r0
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	001a      	movs	r2, r3
 8003c84:	183b      	adds	r3, r7, r0
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	109b      	asrs	r3, r3, #2
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	24ff      	movs	r4, #255	@ 0xff
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	2101      	movs	r1, #1
 8003c96:	400a      	ands	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
			temp_word = (sdo[0] | sdo[1] << 8);
 8003c9a:	183b      	adds	r3, r7, r0
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b21a      	sxth	r2, r3
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	21f4      	movs	r1, #244	@ 0xf4
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	801a      	strh	r2, [r3, #0]
			temp12b = (temp_word & 0b111111111111000) >> 3;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	10db      	asrs	r3, r3, #3
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	23fc      	movs	r3, #252	@ 0xfc
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	0512      	lsls	r2, r2, #20
 8003cc2:	0d12      	lsrs	r2, r2, #20
 8003cc4:	801a      	strh	r2, [r3, #0]
			/* store the temp */
			if(temp_state == 1) {
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <main+0x21e>
				temperatures[sensor_idx - 1] = -99;
 8003cce:	4b76      	ldr	r3, [pc, #472]	@ (8003ea8 <main+0x3e8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <main+0x3ec>)
 8003cd6:	0092      	lsls	r2, r2, #2
 8003cd8:	4975      	ldr	r1, [pc, #468]	@ (8003eb0 <main+0x3f0>)
 8003cda:	50d1      	str	r1, [r2, r3]
 8003cdc:	e016      	b.n	8003d0c <main+0x24c>
			}
			else {
				temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 8003cde:	23fc      	movs	r3, #252	@ 0xfc
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7ff f81d 	bl	8002d24 <__aeabi_i2d>
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b71      	ldr	r3, [pc, #452]	@ (8003eb4 <main+0x3f4>)
 8003cee:	f7fe f8cb 	bl	8001e88 <__aeabi_dmul>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	000b      	movs	r3, r1
 8003cf6:	496c      	ldr	r1, [pc, #432]	@ (8003ea8 <main+0x3e8>)
 8003cf8:	7809      	ldrb	r1, [r1, #0]
 8003cfa:	1e4c      	subs	r4, r1, #1
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	0019      	movs	r1, r3
 8003d00:	f7ff f8aa 	bl	8002e58 <__aeabi_d2f>
 8003d04:	1c01      	adds	r1, r0, #0
 8003d06:	4b69      	ldr	r3, [pc, #420]	@ (8003eac <main+0x3ec>)
 8003d08:	00a2      	lsls	r2, r4, #2
 8003d0a:	50d1      	str	r1, [r2, r3]
			}
			sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 8003d0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ea8 <main+0x3e8>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d804      	bhi.n	8003d1e <main+0x25e>
 8003d14:	4b64      	ldr	r3, [pc, #400]	@ (8003ea8 <main+0x3e8>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	e000      	b.n	8003d20 <main+0x260>
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <main+0x3e8>)
 8003d22:	701a      	strb	r2, [r3, #0]
			sensor_refresh_flag = 0;
 8003d24:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea4 <main+0x3e4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 8003d2a:	21f0      	movs	r1, #240	@ 0xf0
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2200      	movs	r2, #0
 8003d36:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8003d38:	23f4      	movs	r3, #244	@ 0xf4
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8003d40:	23fc      	movs	r3, #252	@ 0xfc
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8003d48:	4b58      	ldr	r3, [pc, #352]	@ (8003eac <main+0x3ec>)
 8003d4a:	681c      	ldr	r4, [r3, #0]
 8003d4c:	25f8      	movs	r5, #248	@ 0xf8
 8003d4e:	197b      	adds	r3, r7, r5
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fd f802 	bl	8000d5c <__aeabi_i2f>
 8003d58:	1c03      	adds	r3, r0, #0
 8003d5a:	1c19      	adds	r1, r3, #0
 8003d5c:	1c20      	adds	r0, r4, #0
 8003d5e:	f7fc fbcf 	bl	8000500 <__aeabi_fcmpge>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d10d      	bne.n	8003d82 <main+0x2c2>
 8003d66:	4b51      	ldr	r3, [pc, #324]	@ (8003eac <main+0x3ec>)
 8003d68:	685c      	ldr	r4, [r3, #4]
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fc fff4 	bl	8000d5c <__aeabi_i2f>
 8003d74:	1c03      	adds	r3, r0, #0
 8003d76:	1c19      	adds	r1, r3, #0
 8003d78:	1c20      	adds	r0, r4, #0
 8003d7a:	f7fc fbc1 	bl	8000500 <__aeabi_fcmpge>
 8003d7e:	1e03      	subs	r3, r0, #0
 8003d80:	d010      	beq.n	8003da4 <main+0x2e4>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8003d82:	4b3f      	ldr	r3, [pc, #252]	@ (8003e80 <main+0x3c0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	2101      	movs	r1, #1
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f002 fefc 	bl	8006b86 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	483c      	ldr	r0, [pc, #240]	@ (8003e84 <main+0x3c4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	0019      	movs	r1, r3
 8003d98:	f002 fef5 	bl	8006b86 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8003d9c:	4b46      	ldr	r3, [pc, #280]	@ (8003eb8 <main+0x3f8>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e002      	b.n	8003daa <main+0x2ea>
		}
		else {
			triac_temp_ctrl = 1;
 8003da4:	4b44      	ldr	r3, [pc, #272]	@ (8003eb8 <main+0x3f8>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8003daa:	4b43      	ldr	r3, [pc, #268]	@ (8003eb8 <main+0x3f8>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d000      	beq.n	8003db4 <main+0x2f4>
 8003db2:	e08d      	b.n	8003ed0 <main+0x410>
			if(BTN1_READ() == 0) {
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a33      	ldr	r2, [pc, #204]	@ (8003e88 <main+0x3c8>)
 8003dba:	0019      	movs	r1, r3
 8003dbc:	0010      	movs	r0, r2
 8003dbe:	f002 fec5 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d113      	bne.n	8003dee <main+0x32e>
				if(BTN1_READ() == 0) {
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a2f      	ldr	r2, [pc, #188]	@ (8003e88 <main+0x3c8>)
 8003dcc:	0019      	movs	r1, r3
 8003dce:	0010      	movs	r0, r2
 8003dd0:	f002 febc 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d000      	beq.n	8003dda <main+0x31a>
 8003dd8:	e08d      	b.n	8003ef6 <main+0x436>
					mode = 1;
 8003dda:	4b38      	ldr	r3, [pc, #224]	@ (8003ebc <main+0x3fc>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
					triac_time = 6.5; /* 130V */
 8003de0:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <main+0x400>)
 8003de2:	4a38      	ldr	r2, [pc, #224]	@ (8003ec4 <main+0x404>)
 8003de4:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003de6:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <main+0x408>)
 8003de8:	2202      	movs	r2, #2
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e083      	b.n	8003ef6 <main+0x436>
				}
			}
			else if(BTN2_READ() == 0) {
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4a25      	ldr	r2, [pc, #148]	@ (8003e88 <main+0x3c8>)
 8003df4:	0019      	movs	r1, r3
 8003df6:	0010      	movs	r0, r2
 8003df8:	f002 fea8 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d112      	bne.n	8003e26 <main+0x366>
				if(BTN2_READ() == 0) {
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4a20      	ldr	r2, [pc, #128]	@ (8003e88 <main+0x3c8>)
 8003e06:	0019      	movs	r1, r3
 8003e08:	0010      	movs	r0, r2
 8003e0a:	f002 fe9f 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d171      	bne.n	8003ef6 <main+0x436>
					mode = 2;
 8003e12:	4b2a      	ldr	r3, [pc, #168]	@ (8003ebc <main+0x3fc>)
 8003e14:	2202      	movs	r2, #2
 8003e16:	701a      	strb	r2, [r3, #0]
					triac_time = 5.5; /* 170V */
 8003e18:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <main+0x400>)
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <main+0x40c>)
 8003e1c:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec8 <main+0x408>)
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e067      	b.n	8003ef6 <main+0x436>
				}
			}
			else if(BTN3_READ() == 0) {
 8003e26:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <main+0x3c8>)
 8003e28:	2180      	movs	r1, #128	@ 0x80
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f002 fe8e 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d111      	bne.n	8003e58 <main+0x398>
				if(BTN3_READ() == 0) {
 8003e34:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <main+0x3c8>)
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f002 fe87 	bl	8006b4c <HAL_GPIO_ReadPin>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d159      	bne.n	8003ef6 <main+0x436>
					mode = 3;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <main+0x3fc>)
 8003e44:	2203      	movs	r2, #3
 8003e46:	701a      	strb	r2, [r3, #0]
					triac_time = 4; /* 205V */
 8003e48:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <main+0x400>)
 8003e4a:	2281      	movs	r2, #129	@ 0x81
 8003e4c:	05d2      	lsls	r2, r2, #23
 8003e4e:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003e50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec8 <main+0x408>)
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e04e      	b.n	8003ef6 <main+0x436>
				}
			}
			else {
				mode = 0;
 8003e58:	4b18      	ldr	r3, [pc, #96]	@ (8003ebc <main+0x3fc>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <main+0x408>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <main+0x3c0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	2101      	movs	r1, #1
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f002 fe8b 	bl	8006b86 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <main+0x3c4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	0019      	movs	r1, r3
 8003e7a:	f002 fe84 	bl	8006b86 <HAL_GPIO_WritePin>
 8003e7e:	e03a      	b.n	8003ef6 <main+0x436>
 8003e80:	50001400 	.word	0x50001400
 8003e84:	50000800 	.word	0x50000800
 8003e88:	50000400 	.word	0x50000400
 8003e8c:	200004d8 	.word	0x200004d8
 8003e90:	20000200 	.word	0x20000200
 8003e94:	0800dd48 	.word	0x0800dd48
 8003e98:	200003cc 	.word	0x200003cc
 8003e9c:	200004e5 	.word	0x200004e5
 8003ea0:	20000508 	.word	0x20000508
 8003ea4:	200004ba 	.word	0x200004ba
 8003ea8:	200004b9 	.word	0x200004b9
 8003eac:	200004f4 	.word	0x200004f4
 8003eb0:	c2c60000 	.word	0xc2c60000
 8003eb4:	3fd00000 	.word	0x3fd00000
 8003eb8:	200004e4 	.word	0x200004e4
 8003ebc:	200004f1 	.word	0x200004f1
 8003ec0:	200004ec 	.word	0x200004ec
 8003ec4:	40d00000 	.word	0x40d00000
 8003ec8:	200004f0 	.word	0x200004f0
 8003ecc:	40b00000 	.word	0x40b00000
			}
		}
		else {
			mode = 0;
 8003ed0:	4b89      	ldr	r3, [pc, #548]	@ (80040f8 <main+0x638>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8003ed6:	4b89      	ldr	r3, [pc, #548]	@ (80040fc <main+0x63c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 8003edc:	4b88      	ldr	r3, [pc, #544]	@ (8004100 <main+0x640>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f002 fe4f 	bl	8006b86 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	019b      	lsls	r3, r3, #6
 8003eec:	4885      	ldr	r0, [pc, #532]	@ (8004104 <main+0x644>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	f002 fe48 	bl	8006b86 <HAL_GPIO_WritePin>
		}
		/* GSM stuff */
		/*########################################################################*/
		if(gsm_status != GSM_WAIT) {
 8003ef6:	4b84      	ldr	r3, [pc, #528]	@ (8004108 <main+0x648>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d100      	bne.n	8003f02 <main+0x442>
 8003f00:	e0d7      	b.n	80040b2 <main+0x5f2>
			if(upload_running) {
 8003f02:	4b82      	ldr	r3, [pc, #520]	@ (800410c <main+0x64c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d100      	bne.n	8003f0c <main+0x44c>
 8003f0a:	e0cd      	b.n	80040a8 <main+0x5e8>
				if(gsm_status == GSM_OK || gsm_status == GSM_NOK) {
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004108 <main+0x648>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <main+0x460>
 8003f16:	4b7c      	ldr	r3, [pc, #496]	@ (8004108 <main+0x648>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b63      	cmp	r3, #99	@ 0x63
 8003f1e:	d115      	bne.n	8003f4c <main+0x48c>
					if(gsm_cmd_step >= GSM_CMD_LAST_IDX) {
 8003f20:	4b7b      	ldr	r3, [pc, #492]	@ (8004110 <main+0x650>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d90b      	bls.n	8003f40 <main+0x480>
						upload_flag = 1; /* successful upload */
 8003f28:	4b7a      	ldr	r3, [pc, #488]	@ (8004114 <main+0x654>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
						led_blink();
 8003f2e:	f7ff fabb 	bl	80034a8 <led_blink>
						gsm_cmd_step = 0; /* prep for next upload */
 8003f32:	4b77      	ldr	r3, [pc, #476]	@ (8004110 <main+0x650>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
						upload_running = 0; /* wait for next time slot */
 8003f38:	4b74      	ldr	r3, [pc, #464]	@ (800410c <main+0x64c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e005      	b.n	8003f4c <main+0x48c>
					}
					else
						gsm_cmd_step += 1;
 8003f40:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <main+0x650>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b71      	ldr	r3, [pc, #452]	@ (8004110 <main+0x650>)
 8003f4a:	701a      	strb	r2, [r3, #0]
				}
//				else if(gsm_status == GSM_NOK) {
//					gsm_cmd_step = 0;
//					upload_running = 0; /* cancel upload seq */
//				}
				switch(gsm_cmd_step) {
 8003f4c:	4b70      	ldr	r3, [pc, #448]	@ (8004110 <main+0x650>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b0e      	cmp	r3, #14
 8003f52:	d900      	bls.n	8003f56 <main+0x496>
 8003f54:	e0ad      	b.n	80040b2 <main+0x5f2>
 8003f56:	009a      	lsls	r2, r3, #2
 8003f58:	4b6f      	ldr	r3, [pc, #444]	@ (8004118 <main+0x658>)
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	469f      	mov	pc, r3
				case 0:
					break;
				case 1:
					gsm_cmd("AT+NETCLOSE","OK", GSM_WAIT_TIME_LOW);
 8003f60:	23fa      	movs	r3, #250	@ 0xfa
 8003f62:	005a      	lsls	r2, r3, #1
 8003f64:	496d      	ldr	r1, [pc, #436]	@ (800411c <main+0x65c>)
 8003f66:	4b6e      	ldr	r3, [pc, #440]	@ (8004120 <main+0x660>)
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fb71 	bl	8003650 <gsm_cmd>
					break;
 8003f6e:	e0a0      	b.n	80040b2 <main+0x5f2>
				case 2:
					gsm_cmd("AT+CCHMODE=1","OK", GSM_WAIT_TIME_LOW);
 8003f70:	23fa      	movs	r3, #250	@ 0xfa
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	4969      	ldr	r1, [pc, #420]	@ (800411c <main+0x65c>)
 8003f76:	4b6b      	ldr	r3, [pc, #428]	@ (8004124 <main+0x664>)
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fb69 	bl	8003650 <gsm_cmd>
					break;
 8003f7e:	e098      	b.n	80040b2 <main+0x5f2>
				case 3:
					gsm_cmd("AT+CCHSET=1","OK", GSM_WAIT_TIME_LOW);
 8003f80:	23fa      	movs	r3, #250	@ 0xfa
 8003f82:	005a      	lsls	r2, r3, #1
 8003f84:	4965      	ldr	r1, [pc, #404]	@ (800411c <main+0x65c>)
 8003f86:	4b68      	ldr	r3, [pc, #416]	@ (8004128 <main+0x668>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff fb61 	bl	8003650 <gsm_cmd>
					break;
 8003f8e:	e090      	b.n	80040b2 <main+0x5f2>
				case 4:
					gsm_cmd("AT+CCHSTART","OK", GSM_WAIT_TIME_LOW);
 8003f90:	23fa      	movs	r3, #250	@ 0xfa
 8003f92:	005a      	lsls	r2, r3, #1
 8003f94:	4961      	ldr	r1, [pc, #388]	@ (800411c <main+0x65c>)
 8003f96:	4b65      	ldr	r3, [pc, #404]	@ (800412c <main+0x66c>)
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fb59 	bl	8003650 <gsm_cmd>
					break;
 8003f9e:	e088      	b.n	80040b2 <main+0x5f2>
				case 5:
					gsm_cmd("AT+CCHSSLCFG=0,0","OK",GSM_WAIT_TIME_LOW);
 8003fa0:	23fa      	movs	r3, #250	@ 0xfa
 8003fa2:	005a      	lsls	r2, r3, #1
 8003fa4:	495d      	ldr	r1, [pc, #372]	@ (800411c <main+0x65c>)
 8003fa6:	4b62      	ldr	r3, [pc, #392]	@ (8004130 <main+0x670>)
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff fb51 	bl	8003650 <gsm_cmd>
					break;
 8003fae:	e080      	b.n	80040b2 <main+0x5f2>
				case 6:
					gsm_cmd("AT+CSOCKSETPN=1","OK", GSM_WAIT_TIME_LOW);
 8003fb0:	23fa      	movs	r3, #250	@ 0xfa
 8003fb2:	005a      	lsls	r2, r3, #1
 8003fb4:	4959      	ldr	r1, [pc, #356]	@ (800411c <main+0x65c>)
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004134 <main+0x674>)
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff fb49 	bl	8003650 <gsm_cmd>
					break;
 8003fbe:	e078      	b.n	80040b2 <main+0x5f2>
				case 7:
					gsm_cmd("AT+CIPMODE=0","OK", GSM_WAIT_TIME_LOW);
 8003fc0:	23fa      	movs	r3, #250	@ 0xfa
 8003fc2:	005a      	lsls	r2, r3, #1
 8003fc4:	4955      	ldr	r1, [pc, #340]	@ (800411c <main+0x65c>)
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004138 <main+0x678>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fb41 	bl	8003650 <gsm_cmd>
					break;
 8003fce:	e070      	b.n	80040b2 <main+0x5f2>
				case 8:
					gsm_cmd("AT+NETOPEN","OK", GSM_WAIT_TIME_LOW);
 8003fd0:	23fa      	movs	r3, #250	@ 0xfa
 8003fd2:	005a      	lsls	r2, r3, #1
 8003fd4:	4951      	ldr	r1, [pc, #324]	@ (800411c <main+0x65c>)
 8003fd6:	4b59      	ldr	r3, [pc, #356]	@ (800413c <main+0x67c>)
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fb39 	bl	8003650 <gsm_cmd>
					break;
 8003fde:	e068      	b.n	80040b2 <main+0x5f2>
				case 9:
					gsm_cmd("AT+CGATT=1","OK", GSM_WAIT_TIME_LOW);
 8003fe0:	23fa      	movs	r3, #250	@ 0xfa
 8003fe2:	005a      	lsls	r2, r3, #1
 8003fe4:	494d      	ldr	r1, [pc, #308]	@ (800411c <main+0x65c>)
 8003fe6:	4b56      	ldr	r3, [pc, #344]	@ (8004140 <main+0x680>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff fb31 	bl	8003650 <gsm_cmd>
					break;
 8003fee:	e060      	b.n	80040b2 <main+0x5f2>
				case 10:
					gsm_cmd("AT+CGACT=1,1","OK", GSM_WAIT_TIME_LOW);
 8003ff0:	23fa      	movs	r3, #250	@ 0xfa
 8003ff2:	005a      	lsls	r2, r3, #1
 8003ff4:	4949      	ldr	r1, [pc, #292]	@ (800411c <main+0x65c>)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <main+0x684>)
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff fb29 	bl	8003650 <gsm_cmd>
					break;
 8003ffe:	e058      	b.n	80040b2 <main+0x5f2>
				case 11:
					gsm_cmd("AT+IPADDR","OK", GSM_WAIT_TIME_MED);
 8004000:	4a51      	ldr	r2, [pc, #324]	@ (8004148 <main+0x688>)
 8004002:	4946      	ldr	r1, [pc, #280]	@ (800411c <main+0x65c>)
 8004004:	4b51      	ldr	r3, [pc, #324]	@ (800414c <main+0x68c>)
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff fb22 	bl	8003650 <gsm_cmd>
					break;
 800400c:	e051      	b.n	80040b2 <main+0x5f2>
				case 12:
					gsm_cmd("AT+CCHOPEN=0,\"api.thingspeak.com\",443,2","CONNECT 115200", GSM_WAIT_TIME_MED);
 800400e:	4a4e      	ldr	r2, [pc, #312]	@ (8004148 <main+0x688>)
 8004010:	494f      	ldr	r1, [pc, #316]	@ (8004150 <main+0x690>)
 8004012:	4b50      	ldr	r3, [pc, #320]	@ (8004154 <main+0x694>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fb1b 	bl	8003650 <gsm_cmd>
					break;
 800401a:	e04a      	b.n	80040b2 <main+0x5f2>
				case 13:
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
							"HTTP/1.1\r\nHost: api.thingspeak.com\r\n", \
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 800401c:	4b4e      	ldr	r3, [pc, #312]	@ (8004158 <main+0x698>)
 800401e:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 8004020:	1c18      	adds	r0, r3, #0
 8004022:	f7fc fe7b 	bl	8000d1c <__aeabi_f2iz>
 8004026:	4682      	mov	sl, r0
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004028:	4b4b      	ldr	r3, [pc, #300]	@ (8004158 <main+0x698>)
 800402a:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 800402c:	1c18      	adds	r0, r3, #0
 800402e:	f7fc fe75 	bl	8000d1c <__aeabi_f2iz>
 8004032:	4680      	mov	r8, r0
 8004034:	4b30      	ldr	r3, [pc, #192]	@ (80040f8 <main+0x638>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	469b      	mov	fp, r3
							(float)adc_arr[CUR], (int)adc_arr[VOLT], kwh);
 800403a:	4b48      	ldr	r3, [pc, #288]	@ (800415c <main+0x69c>)
 800403c:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 800403e:	1c18      	adds	r0, r3, #0
 8004040:	f7fe fec2 	bl	8002dc8 <__aeabi_f2d>
 8004044:	0004      	movs	r4, r0
 8004046:	000d      	movs	r5, r1
							(float)adc_arr[CUR], (int)adc_arr[VOLT], kwh);
 8004048:	4b44      	ldr	r3, [pc, #272]	@ (800415c <main+0x69c>)
 800404a:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 800404c:	1c18      	adds	r0, r3, #0
 800404e:	f7fc fe65 	bl	8000d1c <__aeabi_f2iz>
 8004052:	4681      	mov	r9, r0
 8004054:	4b42      	ldr	r3, [pc, #264]	@ (8004160 <main+0x6a0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c18      	adds	r0, r3, #0
 800405a:	f7fe feb5 	bl	8002dc8 <__aeabi_f2d>
 800405e:	0002      	movs	r2, r0
 8004060:	000b      	movs	r3, r1
 8004062:	2114      	movs	r1, #20
 8004064:	187e      	adds	r6, r7, r1
 8004066:	493f      	ldr	r1, [pc, #252]	@ (8004164 <main+0x6a4>)
 8004068:	2028      	movs	r0, #40	@ 0x28
 800406a:	1838      	adds	r0, r7, r0
 800406c:	9206      	str	r2, [sp, #24]
 800406e:	9307      	str	r3, [sp, #28]
 8004070:	464b      	mov	r3, r9
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	9402      	str	r4, [sp, #8]
 8004076:	9503      	str	r5, [sp, #12]
 8004078:	465b      	mov	r3, fp
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	4643      	mov	r3, r8
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4653      	mov	r3, sl
 8004082:	0032      	movs	r2, r6
 8004084:	f007 fbae 	bl	800b7e4 <siprintf>
					 * kwh
					 * temp 1
					 * temp 2
					 *
					 */
					gsm_cmd(content_string, "200 OK", GSM_WAIT_TIME_MED);
 8004088:	4a2f      	ldr	r2, [pc, #188]	@ (8004148 <main+0x688>)
 800408a:	4937      	ldr	r1, [pc, #220]	@ (8004168 <main+0x6a8>)
 800408c:	2028      	movs	r0, #40	@ 0x28
 800408e:	183b      	adds	r3, r7, r0
 8004090:	0018      	movs	r0, r3
 8004092:	f7ff fadd 	bl	8003650 <gsm_cmd>
					break;
 8004096:	e00c      	b.n	80040b2 <main+0x5f2>
				case 14:
					gsm_cmd("AT+CIPCLOSE=0", "OK", GSM_WAIT_TIME_LOW);
 8004098:	23fa      	movs	r3, #250	@ 0xfa
 800409a:	005a      	lsls	r2, r3, #1
 800409c:	491f      	ldr	r1, [pc, #124]	@ (800411c <main+0x65c>)
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <main+0x6ac>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fad5 	bl	8003650 <gsm_cmd>
					break;
 80040a6:	e004      	b.n	80040b2 <main+0x5f2>
				default:
				}
			}
			else gsm_cmd_step = 0;
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <main+0x650>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e000      	b.n	80040b2 <main+0x5f2>
					break;
 80040b0:	46c0      	nop			@ (mov r8, r8)
		}
		if(sec % 30 == 0 && sec != 0) {
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <main+0x6b0>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	211e      	movs	r1, #30
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7fc f8c3 	bl	8000244 <__aeabi_uidivmod>
 80040be:	000b      	movs	r3, r1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d112      	bne.n	80040ec <main+0x62c>
 80040c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <main+0x6b0>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00e      	beq.n	80040ec <main+0x62c>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80040ce:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <main+0x64c>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10e      	bne.n	80040f4 <main+0x634>
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <main+0x654>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <main+0x634>
				upload_running = 1; /* start uploading */
 80040de:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <main+0x64c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
				gsm_cmd_step = 0; /* with the first command */
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <main+0x650>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80040ea:	e003      	b.n	80040f4 <main+0x634>
			}
		} else upload_flag = 0;
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <main+0x654>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e5b6      	b.n	8003c62 <main+0x1a2>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 80040f4:	46c0      	nop			@ (mov r8, r8)
		ds3231_clearflagalarm1(); /* clear alarm flag */
 80040f6:	e5b4      	b.n	8003c62 <main+0x1a2>
 80040f8:	200004f1 	.word	0x200004f1
 80040fc:	200004f0 	.word	0x200004f0
 8004100:	50001400 	.word	0x50001400
 8004104:	50000800 	.word	0x50000800
 8004108:	20000502 	.word	0x20000502
 800410c:	20000584 	.word	0x20000584
 8004110:	20000508 	.word	0x20000508
 8004114:	20000585 	.word	0x20000585
 8004118:	0800ddb0 	.word	0x0800ddb0
 800411c:	0800dbdc 	.word	0x0800dbdc
 8004120:	0800dbe0 	.word	0x0800dbe0
 8004124:	0800dbec 	.word	0x0800dbec
 8004128:	0800dbfc 	.word	0x0800dbfc
 800412c:	0800dc08 	.word	0x0800dc08
 8004130:	0800dc14 	.word	0x0800dc14
 8004134:	0800dc28 	.word	0x0800dc28
 8004138:	0800dc38 	.word	0x0800dc38
 800413c:	0800dc48 	.word	0x0800dc48
 8004140:	0800dc54 	.word	0x0800dc54
 8004144:	0800dc60 	.word	0x0800dc60
 8004148:	00002710 	.word	0x00002710
 800414c:	0800dc70 	.word	0x0800dc70
 8004150:	0800dc7c 	.word	0x0800dc7c
 8004154:	0800dc8c 	.word	0x0800dc8c
 8004158:	200004f4 	.word	0x200004f4
 800415c:	200004cc 	.word	0x200004cc
 8004160:	200004e0 	.word	0x200004e0
 8004164:	0800dcb4 	.word	0x0800dcb4
 8004168:	0800dd30 	.word	0x0800dd30
 800416c:	0800dd38 	.word	0x0800dd38
 8004170:	200004c0 	.word	0x200004c0

08004174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b093      	sub	sp, #76	@ 0x4c
 8004178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800417a:	2414      	movs	r4, #20
 800417c:	193b      	adds	r3, r7, r4
 800417e:	0018      	movs	r0, r3
 8004180:	2334      	movs	r3, #52	@ 0x34
 8004182:	001a      	movs	r2, r3
 8004184:	2100      	movs	r1, #0
 8004186:	f007 fb9b 	bl	800b8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	0018      	movs	r0, r3
 800418e:	2310      	movs	r3, #16
 8004190:	001a      	movs	r2, r3
 8004192:	2100      	movs	r1, #0
 8004194:	f007 fb94 	bl	800b8c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	0018      	movs	r0, r3
 800419e:	f004 fd19 	bl	8008bd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041a2:	193b      	adds	r3, r7, r4
 80041a4:	2202      	movs	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80041b0:	0021      	movs	r1, r4
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2200      	movs	r2, #0
 80041b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	2202      	movs	r2, #2
 80041c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2202      	movs	r2, #2
 80041c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	220c      	movs	r2, #12
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	22b0      	movs	r2, #176	@ 0xb0
 80041da:	0352      	lsls	r2, r2, #13
 80041dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	22a0      	movs	r2, #160	@ 0xa0
 80041e2:	0612      	lsls	r2, r2, #24
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	0018      	movs	r0, r3
 80041ea:	f004 fd3f 	bl	8008c6c <HAL_RCC_OscConfig>
 80041ee:	1e03      	subs	r3, r0, #0
 80041f0:	d001      	beq.n	80041f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80041f2:	f000 fb0d 	bl	8004810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	2207      	movs	r2, #7
 80041fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2202      	movs	r2, #2
 8004200:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	2200      	movs	r2, #0
 8004206:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	2101      	movs	r1, #1
 8004212:	0018      	movs	r0, r3
 8004214:	f005 f83a 	bl	800928c <HAL_RCC_ClockConfig>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800421c:	f000 faf8 	bl	8004810 <Error_Handler>
  }
}
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b013      	add	sp, #76	@ 0x4c
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	0018      	movs	r0, r3
 8004232:	230c      	movs	r3, #12
 8004234:	001a      	movs	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f007 fb42 	bl	800b8c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800423c:	4b3e      	ldr	r3, [pc, #248]	@ (8004338 <MX_ADC1_Init+0x110>)
 800423e:	4a3f      	ldr	r2, [pc, #252]	@ (800433c <MX_ADC1_Init+0x114>)
 8004240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8004242:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004244:	2280      	movs	r2, #128	@ 0x80
 8004246:	0352      	lsls	r2, r2, #13
 8004248:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800424a:	4b3b      	ldr	r3, [pc, #236]	@ (8004338 <MX_ADC1_Init+0x110>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004250:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004256:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	0392      	lsls	r2, r2, #14
 800425c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800425e:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004260:	2208      	movs	r2, #8
 8004262:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004264:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004266:	2200      	movs	r2, #0
 8004268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800426a:	4b33      	ldr	r3, [pc, #204]	@ (8004338 <MX_ADC1_Init+0x110>)
 800426c:	2200      	movs	r2, #0
 800426e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004270:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004272:	2201      	movs	r2, #1
 8004274:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8004276:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004278:	2203      	movs	r2, #3
 800427a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800427c:	4b2e      	ldr	r3, [pc, #184]	@ (8004338 <MX_ADC1_Init+0x110>)
 800427e:	2220      	movs	r2, #32
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004284:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004286:	2200      	movs	r2, #0
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800428a:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <MX_ADC1_Init+0x110>)
 800428c:	2200      	movs	r2, #0
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004290:	4b29      	ldr	r3, [pc, #164]	@ (8004338 <MX_ADC1_Init+0x110>)
 8004292:	222c      	movs	r2, #44	@ 0x2c
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004298:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <MX_ADC1_Init+0x110>)
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800429e:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80042a4:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80042aa:	4b23      	ldr	r3, [pc, #140]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042ac:	223c      	movs	r2, #60	@ 0x3c
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80042b2:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042ba:	0018      	movs	r0, r3
 80042bc:	f001 f8ca 	bl	8005454 <HAL_ADC_Init>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80042c4:	f000 faa4 	bl	8004810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <MX_ADC1_Init+0x118>)
 80042cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042da:	1d3a      	adds	r2, r7, #4
 80042dc:	4b16      	ldr	r3, [pc, #88]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042de:	0011      	movs	r1, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	f001 fc1d 	bl	8005b20 <HAL_ADC_ConfigChannel>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d001      	beq.n	80042ee <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80042ea:	f000 fa91 	bl	8004810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	4a14      	ldr	r2, [pc, #80]	@ (8004344 <MX_ADC1_Init+0x11c>)
 80042f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	2204      	movs	r2, #4
 80042f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042fa:	1d3a      	adds	r2, r7, #4
 80042fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <MX_ADC1_Init+0x110>)
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f001 fc0d 	bl	8005b20 <HAL_ADC_ConfigChannel>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800430a:	f000 fa81 	bl	8004810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	4a0d      	ldr	r2, [pc, #52]	@ (8004348 <MX_ADC1_Init+0x120>)
 8004312:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	2208      	movs	r2, #8
 8004318:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800431a:	1d3a      	adds	r2, r7, #4
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <MX_ADC1_Init+0x110>)
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f001 fbfd 	bl	8005b20 <HAL_ADC_ConfigChannel>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800432a:	f000 fa71 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	20000200 	.word	0x20000200
 800433c:	40012400 	.word	0x40012400
 8004340:	08000004 	.word	0x08000004
 8004344:	0c000008 	.word	0x0c000008
 8004348:	b4002000 	.word	0xb4002000

0800434c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004350:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004352:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <MX_I2C1_Init+0x78>)
 8004354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8004356:	4b1a      	ldr	r3, [pc, #104]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <MX_I2C1_Init+0x7c>)
 800435a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800435c:	4b18      	ldr	r3, [pc, #96]	@ (80043c0 <MX_I2C1_Init+0x74>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004362:	4b17      	ldr	r3, [pc, #92]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004364:	2201      	movs	r2, #1
 8004366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004368:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <MX_I2C1_Init+0x74>)
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800436e:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004376:	2200      	movs	r2, #0
 8004378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800437a:	4b11      	ldr	r3, [pc, #68]	@ (80043c0 <MX_I2C1_Init+0x74>)
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004380:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004382:	2200      	movs	r2, #0
 8004384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004386:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004388:	0018      	movs	r0, r3
 800438a:	f002 fc4d 	bl	8006c28 <HAL_I2C_Init>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d001      	beq.n	8004396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004392:	f000 fa3d 	bl	8004810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004396:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <MX_I2C1_Init+0x74>)
 8004398:	2100      	movs	r1, #0
 800439a:	0018      	movs	r0, r3
 800439c:	f004 fb82 	bl	8008aa4 <HAL_I2CEx_ConfigAnalogFilter>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80043a4:	f000 fa34 	bl	8004810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <MX_I2C1_Init+0x74>)
 80043aa:	2100      	movs	r1, #0
 80043ac:	0018      	movs	r0, r3
 80043ae:	f004 fbc5 	bl	8008b3c <HAL_I2CEx_ConfigDigitalFilter>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d001      	beq.n	80043ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80043b6:	f000 fa2b 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200002c0 	.word	0x200002c0
 80043c4:	40005400 	.word	0x40005400
 80043c8:	0060112f 	.word	0x0060112f

080043cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <MX_I2C2_Init+0x78>)
 80043d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0060112F;
 80043d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <MX_I2C2_Init+0x7c>)
 80043da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 78;
 80043dc:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043de:	224e      	movs	r2, #78	@ 0x4e
 80043e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80043ee:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043fa:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <MX_I2C2_Init+0x74>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004400:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <MX_I2C2_Init+0x74>)
 8004402:	2200      	movs	r2, #0
 8004404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004406:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <MX_I2C2_Init+0x74>)
 8004408:	0018      	movs	r0, r3
 800440a:	f002 fc0d 	bl	8006c28 <HAL_I2C_Init>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d001      	beq.n	8004416 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004412:	f000 f9fd 	bl	8004810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <MX_I2C2_Init+0x74>)
 8004418:	2100      	movs	r1, #0
 800441a:	0018      	movs	r0, r3
 800441c:	f004 fb42 	bl	8008aa4 <HAL_I2CEx_ConfigAnalogFilter>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004424:	f000 f9f4 	bl	8004810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <MX_I2C2_Init+0x74>)
 800442a:	2100      	movs	r1, #0
 800442c:	0018      	movs	r0, r3
 800442e:	f004 fb85 	bl	8008b3c <HAL_I2CEx_ConfigDigitalFilter>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d001      	beq.n	800443a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004436:	f000 f9eb 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000314 	.word	0x20000314
 8004444:	40005800 	.word	0x40005800
 8004448:	0060112f 	.word	0x0060112f

0800444c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004450:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004452:	4a1d      	ldr	r2, [pc, #116]	@ (80044c8 <MX_SPI2_Init+0x7c>)
 8004454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004458:	2282      	movs	r2, #130	@ 0x82
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800445e:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004460:	2280      	movs	r2, #128	@ 0x80
 8004462:	00d2      	lsls	r2, r2, #3
 8004464:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004466:	4b17      	ldr	r3, [pc, #92]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004468:	22e0      	movs	r2, #224	@ 0xe0
 800446a:	00d2      	lsls	r2, r2, #3
 800446c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004476:	2200      	movs	r2, #0
 8004478:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <MX_SPI2_Init+0x78>)
 800447c:	2280      	movs	r2, #128	@ 0x80
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004484:	2200      	movs	r2, #0
 8004486:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004488:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <MX_SPI2_Init+0x78>)
 800448a:	2200      	movs	r2, #0
 800448c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800448e:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004490:	2200      	movs	r2, #0
 8004492:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <MX_SPI2_Init+0x78>)
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800449a:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <MX_SPI2_Init+0x78>)
 800449c:	2207      	movs	r2, #7
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044a0:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <MX_SPI2_Init+0x78>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <MX_SPI2_Init+0x78>)
 80044a8:	2208      	movs	r2, #8
 80044aa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <MX_SPI2_Init+0x78>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f005 f9ca 	bl	8009848 <HAL_SPI_Init>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80044b8:	f000 f9aa 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	20000368 	.word	0x20000368
 80044c8:	40003800 	.word	0x40003800

080044cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044d2:	4a10      	ldr	r2, [pc, #64]	@ (8004514 <MX_TIM16_Init+0x48>)
 80044d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 80044d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044d8:	2220      	movs	r2, #32
 80044da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15;
 80044e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044e4:	220f      	movs	r2, #15
 80044e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e8:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f4:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <MX_TIM16_Init+0x44>)
 80044fc:	0018      	movs	r0, r3
 80044fe:	f005 fa5b 	bl	80099b8 <HAL_TIM_Base_Init>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d001      	beq.n	800450a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004506:	f000 f983 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200003cc 	.word	0x200003cc
 8004514:	40014400 	.word	0x40014400

08004518 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800451c:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 800451e:	4a17      	ldr	r2, [pc, #92]	@ (800457c <MX_USART3_UART_Init+0x64>)
 8004520:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004524:	22e1      	movs	r2, #225	@ 0xe1
 8004526:	0252      	lsls	r2, r2, #9
 8004528:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800452a:	4b13      	ldr	r3, [pc, #76]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004538:	2200      	movs	r2, #0
 800453a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800453c:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 800453e:	220c      	movs	r2, #12
 8004540:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800454e:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004550:	2200      	movs	r2, #0
 8004552:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004556:	2200      	movs	r2, #0
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 800455c:	2200      	movs	r2, #0
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <MX_USART3_UART_Init+0x60>)
 8004562:	0018      	movs	r0, r3
 8004564:	f005 fc9a 	bl	8009e9c <HAL_UART_Init>
 8004568:	1e03      	subs	r3, r0, #0
 800456a:	d001      	beq.n	8004570 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800456c:	f000 f950 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	20000418 	.word	0x20000418
 800457c:	40004800 	.word	0x40004800

08004580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <MX_DMA_Init+0x38>)
 8004588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <MX_DMA_Init+0x38>)
 800458c:	2101      	movs	r1, #1
 800458e:	430a      	orrs	r2, r1
 8004590:	639a      	str	r2, [r3, #56]	@ 0x38
 8004592:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <MX_DMA_Init+0x38>)
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	2009      	movs	r0, #9
 80045a4:	f001 fe74 	bl	8006290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80045a8:	2009      	movs	r0, #9
 80045aa:	f001 fe86 	bl	80062ba <HAL_NVIC_EnableIRQ>

}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000

080045bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b08b      	sub	sp, #44	@ 0x2c
 80045c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c2:	2414      	movs	r4, #20
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	0018      	movs	r0, r3
 80045c8:	2314      	movs	r3, #20
 80045ca:	001a      	movs	r2, r3
 80045cc:	2100      	movs	r1, #0
 80045ce:	f007 f977 	bl	800b8c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d2:	4b8a      	ldr	r3, [pc, #552]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	4b89      	ldr	r3, [pc, #548]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045d8:	2104      	movs	r1, #4
 80045da:	430a      	orrs	r2, r1
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80045de:	4b87      	ldr	r3, [pc, #540]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ea:	4b84      	ldr	r3, [pc, #528]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ee:	4b83      	ldr	r3, [pc, #524]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045f0:	2120      	movs	r1, #32
 80045f2:	430a      	orrs	r2, r1
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80045f6:	4b81      	ldr	r3, [pc, #516]	@ (80047fc <MX_GPIO_Init+0x240>)
 80045f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fa:	2220      	movs	r2, #32
 80045fc:	4013      	ands	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	4b7e      	ldr	r3, [pc, #504]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004606:	4b7d      	ldr	r3, [pc, #500]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004608:	2101      	movs	r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	635a      	str	r2, [r3, #52]	@ 0x34
 800460e:	4b7b      	ldr	r3, [pc, #492]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004612:	2201      	movs	r2, #1
 8004614:	4013      	ands	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800461a:	4b78      	ldr	r3, [pc, #480]	@ (80047fc <MX_GPIO_Init+0x240>)
 800461c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800461e:	4b77      	ldr	r3, [pc, #476]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004620:	2102      	movs	r1, #2
 8004622:	430a      	orrs	r2, r1
 8004624:	635a      	str	r2, [r3, #52]	@ 0x34
 8004626:	4b75      	ldr	r3, [pc, #468]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	2202      	movs	r2, #2
 800462c:	4013      	ands	r3, r2
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004632:	4b72      	ldr	r3, [pc, #456]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004636:	4b71      	ldr	r3, [pc, #452]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004638:	2108      	movs	r1, #8
 800463a:	430a      	orrs	r2, r1
 800463c:	635a      	str	r2, [r3, #52]	@ 0x34
 800463e:	4b6f      	ldr	r3, [pc, #444]	@ (80047fc <MX_GPIO_Init+0x240>)
 8004640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004642:	2208      	movs	r2, #8
 8004644:	4013      	ands	r3, r2
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800464a:	23e0      	movs	r3, #224	@ 0xe0
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	486c      	ldr	r0, [pc, #432]	@ (8004800 <MX_GPIO_Init+0x244>)
 8004650:	2200      	movs	r2, #0
 8004652:	0019      	movs	r1, r3
 8004654:	f002 fa97 	bl	8006b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8004658:	4b6a      	ldr	r3, [pc, #424]	@ (8004804 <MX_GPIO_Init+0x248>)
 800465a:	2200      	movs	r2, #0
 800465c:	2103      	movs	r1, #3
 800465e:	0018      	movs	r0, r3
 8004660:	f002 fa91 	bl	8006b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 8004664:	23e0      	movs	r3, #224	@ 0xe0
 8004666:	0059      	lsls	r1, r3, #1
 8004668:	23a0      	movs	r3, #160	@ 0xa0
 800466a:	05db      	lsls	r3, r3, #23
 800466c:	2200      	movs	r2, #0
 800466e:	0018      	movs	r0, r3
 8004670:	f002 fa89 	bl	8006b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 8004674:	23f0      	movs	r3, #240	@ 0xf0
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	4863      	ldr	r0, [pc, #396]	@ (8004808 <MX_GPIO_Init+0x24c>)
 800467a:	2200      	movs	r2, #0
 800467c:	0019      	movs	r1, r3
 800467e:	f002 fa82 	bl	8006b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004682:	4b62      	ldr	r3, [pc, #392]	@ (800480c <MX_GPIO_Init+0x250>)
 8004684:	2200      	movs	r2, #0
 8004686:	2108      	movs	r1, #8
 8004688:	0018      	movs	r0, r3
 800468a:	f002 fa7c 	bl	8006b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800468e:	193b      	adds	r3, r7, r4
 8004690:	22e0      	movs	r2, #224	@ 0xe0
 8004692:	0212      	lsls	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004696:	193b      	adds	r3, r7, r4
 8004698:	2201      	movs	r2, #1
 800469a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	193b      	adds	r3, r7, r4
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	2200      	movs	r2, #0
 80046a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	4a55      	ldr	r2, [pc, #340]	@ (8004800 <MX_GPIO_Init+0x244>)
 80046ac:	0019      	movs	r1, r3
 80046ae:	0010      	movs	r0, r2
 80046b0:	f002 f8e8 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	2203      	movs	r2, #3
 80046b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	2201      	movs	r2, #1
 80046be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c6:	193b      	adds	r3, r7, r4
 80046c8:	2200      	movs	r2, #0
 80046ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046cc:	193b      	adds	r3, r7, r4
 80046ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004804 <MX_GPIO_Init+0x248>)
 80046d0:	0019      	movs	r1, r3
 80046d2:	0010      	movs	r0, r2
 80046d4:	f002 f8d6 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	2210      	movs	r2, #16
 80046dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046de:	193b      	adds	r3, r7, r4
 80046e0:	2284      	movs	r2, #132	@ 0x84
 80046e2:	0392      	lsls	r2, r2, #14
 80046e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	2201      	movs	r2, #1
 80046ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 80046ec:	193a      	adds	r2, r7, r4
 80046ee:	23a0      	movs	r3, #160	@ 0xa0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	0011      	movs	r1, r2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f002 f8c5 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 80046fa:	0021      	movs	r1, r4
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	22e0      	movs	r2, #224	@ 0xe0
 8004700:	0052      	lsls	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004704:	000c      	movs	r4, r1
 8004706:	193b      	adds	r3, r7, r4
 8004708:	2201      	movs	r2, #1
 800470a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470c:	193b      	adds	r3, r7, r4
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	193b      	adds	r3, r7, r4
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004718:	193a      	adds	r2, r7, r4
 800471a:	23a0      	movs	r3, #160	@ 0xa0
 800471c:	05db      	lsls	r3, r3, #23
 800471e:	0011      	movs	r1, r2
 8004720:	0018      	movs	r0, r3
 8004722:	f002 f8af 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC2_Pin CS_TC3_Pin CS_TC4_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin|CS_TC5_Pin;
 8004726:	0021      	movs	r1, r4
 8004728:	187b      	adds	r3, r7, r1
 800472a:	22f0      	movs	r2, #240	@ 0xf0
 800472c:	0212      	lsls	r2, r2, #8
 800472e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004730:	000c      	movs	r4, r1
 8004732:	193b      	adds	r3, r7, r4
 8004734:	2201      	movs	r2, #1
 8004736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	193b      	adds	r3, r7, r4
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473e:	193b      	adds	r3, r7, r4
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004744:	193b      	adds	r3, r7, r4
 8004746:	4a30      	ldr	r2, [pc, #192]	@ (8004808 <MX_GPIO_Init+0x24c>)
 8004748:	0019      	movs	r1, r3
 800474a:	0010      	movs	r0, r2
 800474c:	f002 f89a 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 8004750:	0021      	movs	r1, r4
 8004752:	187b      	adds	r3, r7, r1
 8004754:	2240      	movs	r2, #64	@ 0x40
 8004756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004758:	187b      	adds	r3, r7, r1
 800475a:	2284      	movs	r2, #132	@ 0x84
 800475c:	0392      	lsls	r2, r2, #14
 800475e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	000c      	movs	r4, r1
 8004762:	193b      	adds	r3, r7, r4
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8004768:	193b      	adds	r3, r7, r4
 800476a:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <MX_GPIO_Init+0x244>)
 800476c:	0019      	movs	r1, r3
 800476e:	0010      	movs	r0, r2
 8004770:	f002 f888 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004774:	193b      	adds	r3, r7, r4
 8004776:	2208      	movs	r2, #8
 8004778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477a:	193b      	adds	r3, r7, r4
 800477c:	2201      	movs	r2, #1
 800477e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	193b      	adds	r3, r7, r4
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	193b      	adds	r3, r7, r4
 8004788:	2200      	movs	r2, #0
 800478a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800478c:	193b      	adds	r3, r7, r4
 800478e:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <MX_GPIO_Init+0x250>)
 8004790:	0019      	movs	r1, r3
 8004792:	0010      	movs	r0, r2
 8004794:	f002 f876 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004798:	193b      	adds	r3, r7, r4
 800479a:	2208      	movs	r2, #8
 800479c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	2202      	movs	r2, #2
 80047a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	2200      	movs	r2, #0
 80047ae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	2200      	movs	r2, #0
 80047b4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <MX_GPIO_Init+0x24c>)
 80047ba:	0019      	movs	r1, r3
 80047bc:	0010      	movs	r0, r2
 80047be:	f002 f861 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 80047c2:	0021      	movs	r1, r4
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	22e0      	movs	r2, #224	@ 0xe0
 80047c8:	0092      	lsls	r2, r2, #2
 80047ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047cc:	187b      	adds	r3, r7, r1
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	4a0b      	ldr	r2, [pc, #44]	@ (8004808 <MX_GPIO_Init+0x24c>)
 80047dc:	0019      	movs	r1, r3
 80047de:	0010      	movs	r0, r2
 80047e0:	f002 f850 	bl	8006884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80047e4:	2200      	movs	r2, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	2007      	movs	r0, #7
 80047ea:	f001 fd51 	bl	8006290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80047ee:	2007      	movs	r0, #7
 80047f0:	f001 fd63 	bl	80062ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80047f4:	46c0      	nop			@ (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b00b      	add	sp, #44	@ 0x2c
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	50000800 	.word	0x50000800
 8004804:	50001400 	.word	0x50001400
 8004808:	50000400 	.word	0x50000400
 800480c:	50000c00 	.word	0x50000c00

08004810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004814:	b672      	cpsid	i
}
 8004816:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	e7fd      	b.n	8004818 <Error_Handler+0x8>

0800481c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004822:	4b0f      	ldr	r3, [pc, #60]	@ (8004860 <HAL_MspInit+0x44>)
 8004824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004826:	4b0e      	ldr	r3, [pc, #56]	@ (8004860 <HAL_MspInit+0x44>)
 8004828:	2101      	movs	r1, #1
 800482a:	430a      	orrs	r2, r1
 800482c:	641a      	str	r2, [r3, #64]	@ 0x40
 800482e:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <HAL_MspInit+0x44>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2201      	movs	r2, #1
 8004834:	4013      	ands	r3, r2
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <HAL_MspInit+0x44>)
 800483c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800483e:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <HAL_MspInit+0x44>)
 8004840:	2180      	movs	r1, #128	@ 0x80
 8004842:	0549      	lsls	r1, r1, #21
 8004844:	430a      	orrs	r2, r1
 8004846:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004848:	4b05      	ldr	r3, [pc, #20]	@ (8004860 <HAL_MspInit+0x44>)
 800484a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	055b      	lsls	r3, r3, #21
 8004850:	4013      	ands	r3, r2
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	40021000 	.word	0x40021000

08004864 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b091      	sub	sp, #68	@ 0x44
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486c:	232c      	movs	r3, #44	@ 0x2c
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	0018      	movs	r0, r3
 8004872:	2314      	movs	r3, #20
 8004874:	001a      	movs	r2, r3
 8004876:	2100      	movs	r1, #0
 8004878:	f007 f822 	bl	800b8c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800487c:	2410      	movs	r4, #16
 800487e:	193b      	adds	r3, r7, r4
 8004880:	0018      	movs	r0, r3
 8004882:	231c      	movs	r3, #28
 8004884:	001a      	movs	r2, r3
 8004886:	2100      	movs	r1, #0
 8004888:	f007 f81a 	bl	800b8c0 <memset>
  if(hadc->Instance==ADC1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3a      	ldr	r2, [pc, #232]	@ (800497c <HAL_ADC_MspInit+0x118>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d16d      	bne.n	8004972 <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004896:	193b      	adds	r3, r7, r4
 8004898:	2280      	movs	r2, #128	@ 0x80
 800489a:	01d2      	lsls	r2, r2, #7
 800489c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	2280      	movs	r2, #128	@ 0x80
 80048a2:	05d2      	lsls	r2, r2, #23
 80048a4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	0018      	movs	r0, r3
 80048aa:	f004 fe99 	bl	80095e0 <HAL_RCCEx_PeriphCLKConfig>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80048b2:	f7ff ffad 	bl	8004810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80048b6:	4b32      	ldr	r3, [pc, #200]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ba:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048bc:	2180      	movs	r1, #128	@ 0x80
 80048be:	0349      	lsls	r1, r1, #13
 80048c0:	430a      	orrs	r2, r1
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	035b      	lsls	r3, r3, #13
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048d8:	2101      	movs	r1, #1
 80048da:	430a      	orrs	r2, r1
 80048dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80048de:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <HAL_ADC_MspInit+0x11c>)
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2201      	movs	r2, #1
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048ea:	212c      	movs	r1, #44	@ 0x2c
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	220c      	movs	r2, #12
 80048f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	2203      	movs	r2, #3
 80048f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	23a0      	movs	r3, #160	@ 0xa0
 8004902:	05db      	lsls	r3, r3, #23
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f001 ffbc 	bl	8006884 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800490c:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_ADC_MspInit+0x124>)
 8004910:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004912:	4b1c      	ldr	r3, [pc, #112]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004914:	2205      	movs	r2, #5
 8004916:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004918:	4b1a      	ldr	r3, [pc, #104]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800491e:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004920:	2200      	movs	r2, #0
 8004922:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004924:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800492a:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	0052      	lsls	r2, r2, #1
 8004930:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004932:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004934:	2280      	movs	r2, #128	@ 0x80
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800493a:	4b12      	ldr	r3, [pc, #72]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800493c:	2220      	movs	r2, #32
 800493e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004940:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004942:	2200      	movs	r2, #0
 8004944:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004946:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 8004948:	0018      	movs	r0, r3
 800494a:	f001 fcd3 	bl	80062f4 <HAL_DMA_Init>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8004952:	f7ff ff5d 	bl	8004810 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800495a:	651a      	str	r2, [r3, #80]	@ 0x50
 800495c:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <HAL_ADC_MspInit+0x120>)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004962:	2200      	movs	r2, #0
 8004964:	2100      	movs	r1, #0
 8004966:	200c      	movs	r0, #12
 8004968:	f001 fc92 	bl	8006290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800496c:	200c      	movs	r0, #12
 800496e:	f001 fca4 	bl	80062ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b011      	add	sp, #68	@ 0x44
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	40012400 	.word	0x40012400
 8004980:	40021000 	.word	0x40021000
 8004984:	20000264 	.word	0x20000264
 8004988:	40020008 	.word	0x40020008

0800498c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b093      	sub	sp, #76	@ 0x4c
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	2334      	movs	r3, #52	@ 0x34
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	0018      	movs	r0, r3
 800499a:	2314      	movs	r3, #20
 800499c:	001a      	movs	r2, r3
 800499e:	2100      	movs	r1, #0
 80049a0:	f006 ff8e 	bl	800b8c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049a4:	2418      	movs	r4, #24
 80049a6:	193b      	adds	r3, r7, r4
 80049a8:	0018      	movs	r0, r3
 80049aa:	231c      	movs	r3, #28
 80049ac:	001a      	movs	r2, r3
 80049ae:	2100      	movs	r1, #0
 80049b0:	f006 ff86 	bl	800b8c0 <memset>
  if(hi2c->Instance==I2C1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a42      	ldr	r2, [pc, #264]	@ (8004ac4 <HAL_I2C_MspInit+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d140      	bne.n	8004a40 <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	2220      	movs	r2, #32
 80049c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049c4:	193b      	adds	r3, r7, r4
 80049c6:	2200      	movs	r2, #0
 80049c8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049ca:	193b      	adds	r3, r7, r4
 80049cc:	0018      	movs	r0, r3
 80049ce:	f004 fe07 	bl	80095e0 <HAL_RCCEx_PeriphCLKConfig>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80049d6:	f7ff ff1b 	bl	8004810 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 80049dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049de:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 80049e0:	2101      	movs	r1, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049e6:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 80049e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ea:	2201      	movs	r2, #1
 80049ec:	4013      	ands	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049f2:	2134      	movs	r1, #52	@ 0x34
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	22c0      	movs	r2, #192	@ 0xc0
 80049f8:	00d2      	lsls	r2, r2, #3
 80049fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	2212      	movs	r2, #18
 8004a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	2200      	movs	r2, #0
 8004a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	2206      	movs	r2, #6
 8004a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a14:	187a      	adds	r2, r7, r1
 8004a16:	23a0      	movs	r3, #160	@ 0xa0
 8004a18:	05db      	lsls	r3, r3, #23
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f001 ff31 	bl	8006884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a22:	4b29      	ldr	r3, [pc, #164]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a26:	4b28      	ldr	r3, [pc, #160]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	0389      	lsls	r1, r1, #14
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	039b      	lsls	r3, r3, #14
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004a3e:	e03d      	b.n	8004abc <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a21      	ldr	r2, [pc, #132]	@ (8004acc <HAL_I2C_MspInit+0x140>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d138      	bne.n	8004abc <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a50:	2102      	movs	r1, #2
 8004a52:	430a      	orrs	r2, r1
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a62:	2134      	movs	r1, #52	@ 0x34
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	22c0      	movs	r2, #192	@ 0xc0
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	2212      	movs	r2, #18
 8004a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a72:	187b      	adds	r3, r7, r1
 8004a74:	2201      	movs	r2, #1
 8004a76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	2206      	movs	r2, #6
 8004a82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <HAL_I2C_MspInit+0x144>)
 8004a88:	0019      	movs	r1, r3
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	f001 fefa 	bl	8006884 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004a90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004a96:	2180      	movs	r1, #128	@ 0x80
 8004a98:	03c9      	lsls	r1, r1, #15
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <HAL_I2C_MspInit+0x13c>)
 8004aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	03db      	lsls	r3, r3, #15
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8004aac:	2200      	movs	r2, #0
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2018      	movs	r0, #24
 8004ab2:	f001 fbed 	bl	8006290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8004ab6:	2018      	movs	r0, #24
 8004ab8:	f001 fbff 	bl	80062ba <HAL_NVIC_EnableIRQ>
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b013      	add	sp, #76	@ 0x4c
 8004ac2:	bd90      	pop	{r4, r7, pc}
 8004ac4:	40005400 	.word	0x40005400
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40005800 	.word	0x40005800
 8004ad0:	50000400 	.word	0x50000400

08004ad4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b08b      	sub	sp, #44	@ 0x2c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	2414      	movs	r4, #20
 8004ade:	193b      	adds	r3, r7, r4
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	2314      	movs	r3, #20
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f006 feea 	bl	800b8c0 <memset>
  if(hspi->Instance==SPI2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <HAL_SPI_MspInit+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d151      	bne.n	8004b9a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004af6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004af8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004afa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004afc:	2180      	movs	r1, #128	@ 0x80
 8004afe:	01c9      	lsls	r1, r1, #7
 8004b00:	430a      	orrs	r2, r1
 8004b02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b04:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	01db      	lsls	r3, r3, #7
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b18:	2101      	movs	r1, #1
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b22:	2201      	movs	r2, #1
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b30:	2102      	movs	r1, #2
 8004b32:	430a      	orrs	r2, r1
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b36:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <HAL_SPI_MspInit+0xd4>)
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PB2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	193b      	adds	r3, r7, r4
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	193b      	adds	r3, r7, r4
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004b5a:	193b      	adds	r3, r7, r4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b60:	193a      	adds	r2, r7, r4
 8004b62:	23a0      	movs	r3, #160	@ 0xa0
 8004b64:	05db      	lsls	r3, r3, #23
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f001 fe8b 	bl	8006884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b6e:	0021      	movs	r1, r4
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	2204      	movs	r2, #4
 8004b74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	2202      	movs	r2, #2
 8004b7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	2200      	movs	r2, #0
 8004b86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004b88:	187b      	adds	r3, r7, r1
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	4a06      	ldr	r2, [pc, #24]	@ (8004bac <HAL_SPI_MspInit+0xd8>)
 8004b92:	0019      	movs	r1, r3
 8004b94:	0010      	movs	r0, r2
 8004b96:	f001 fe75 	bl	8006884 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b00b      	add	sp, #44	@ 0x2c
 8004ba0:	bd90      	pop	{r4, r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	40003800 	.word	0x40003800
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	50000400 	.word	0x50000400

08004bb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <HAL_TIM_Base_MspInit+0x48>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d115      	bne.n	8004bee <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bfc <HAL_TIM_Base_MspInit+0x4c>)
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_TIM_Base_MspInit+0x4c>)
 8004bc8:	2180      	movs	r1, #128	@ 0x80
 8004bca:	0289      	lsls	r1, r1, #10
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <HAL_TIM_Base_MspInit+0x4c>)
 8004bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	029b      	lsls	r3, r3, #10
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2100      	movs	r1, #0
 8004be2:	2015      	movs	r0, #21
 8004be4:	f001 fb54 	bl	8006290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004be8:	2015      	movs	r0, #21
 8004bea:	f001 fb66 	bl	80062ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b08b      	sub	sp, #44	@ 0x2c
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	2414      	movs	r4, #20
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	2314      	movs	r3, #20
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f006 fe54 	bl	800b8c0 <memset>
  if(huart->Instance==USART3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd0 <HAL_UART_MspInit+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d151      	bne.n	8004cc6 <HAL_UART_MspInit+0xc6>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c22:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c26:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c28:	2180      	movs	r1, #128	@ 0x80
 8004c2a:	02c9      	lsls	r1, r1, #11
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	02db      	lsls	r3, r3, #11
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c44:	2101      	movs	r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c4a:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c56:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c62:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_UART_MspInit+0xd4>)
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	2202      	movs	r2, #2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	2220      	movs	r2, #32
 8004c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	193b      	adds	r3, r7, r4
 8004c76:	2202      	movs	r2, #2
 8004c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	193b      	adds	r3, r7, r4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c80:	193b      	adds	r3, r7, r4
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	2204      	movs	r2, #4
 8004c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8004c8c:	193a      	adds	r2, r7, r4
 8004c8e:	23a0      	movs	r3, #160	@ 0xa0
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f001 fdf5 	bl	8006884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8004c9a:	0021      	movs	r1, r4
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	4a06      	ldr	r2, [pc, #24]	@ (8004cd8 <HAL_UART_MspInit+0xd8>)
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	0010      	movs	r0, r2
 8004cc2:	f001 fddf 	bl	8006884 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b00b      	add	sp, #44	@ 0x2c
 8004ccc:	bd90      	pop	{r4, r7, pc}
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	40004800 	.word	0x40004800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	50000400 	.word	0x50000400

08004cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ce0:	46c0      	nop			@ (mov r8, r8)
 8004ce2:	e7fd      	b.n	8004ce0 <NMI_Handler+0x4>

08004ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	e7fd      	b.n	8004ce8 <HardFault_Handler+0x4>

08004cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d04:	f000 fa12 	bl	800512c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 8004d12:	2010      	movs	r0, #16
 8004d14:	f001 ff54 	bl	8006bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8004d18:	2040      	movs	r0, #64	@ 0x40
 8004d1a:	f001 ff51 	bl	8006bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <DMA1_Channel1_IRQHandler+0x14>)
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f001 fc5c 	bl	80065e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	20000264 	.word	0x20000264

08004d3c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <ADC1_IRQHandler+0x14>)
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 fdbc 	bl	80058c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			@ (mov r8, r8)
 8004d50:	20000200 	.word	0x20000200

08004d54 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004d58:	4b03      	ldr	r3, [pc, #12]	@ (8004d68 <TIM16_IRQHandler+0x14>)
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f004 feda 	bl	8009b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	200003cc 	.word	0x200003cc

08004d6c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <I2C2_IRQHandler+0x2c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	23e0      	movs	r3, #224	@ 0xe0
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <I2C2_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <I2C2_IRQHandler+0x2c>)
 8004d80:	0018      	movs	r0, r3
 8004d82:	f002 fca5 	bl	80076d0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8004d86:	e003      	b.n	8004d90 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8004d88:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <I2C2_IRQHandler+0x2c>)
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f002 fc86 	bl	800769c <HAL_I2C_EV_IRQHandler>
}
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	20000314 	.word	0x20000314

08004d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  return 1;
 8004da0:	2301      	movs	r3, #1
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_kill>:

int _kill(int pid, int sig)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004db2:	f006 fdf5 	bl	800b9a0 <__errno>
 8004db6:	0003      	movs	r3, r0
 8004db8:	2216      	movs	r2, #22
 8004dba:	601a      	str	r2, [r3, #0]
  return -1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	425b      	negs	r3, r3
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b002      	add	sp, #8
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <_exit>:

void _exit (int status)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	425a      	negs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff ffe5 	bl	8004da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	e7fd      	b.n	8004dde <_exit+0x16>

08004de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e00a      	b.n	8004e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004df4:	e000      	b.n	8004df8 <_read+0x16>
 8004df6:	bf00      	nop
 8004df8:	0001      	movs	r1, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	60ba      	str	r2, [r7, #8]
 8004e00:	b2ca      	uxtb	r2, r1
 8004e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3301      	adds	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	dbf0      	blt.n	8004df4 <_read+0x12>
  }

  return len;
 8004e12:	687b      	ldr	r3, [r7, #4]
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b006      	add	sp, #24
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e009      	b.n	8004e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	60ba      	str	r2, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	0018      	movs	r0, r3
 8004e38:	e000      	b.n	8004e3c <_write+0x20>
 8004e3a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	dbf1      	blt.n	8004e2e <_write+0x12>
  }
  return len;
 8004e4a:	687b      	ldr	r3, [r7, #4]
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b006      	add	sp, #24
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_close>:

int _close(int file)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	425b      	negs	r3, r3
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2280      	movs	r2, #128	@ 0x80
 8004e76:	0192      	lsls	r2, r2, #6
 8004e78:	605a      	str	r2, [r3, #4]
  return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_isatty>:

int _isatty(int file)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e8c:	2301      	movs	r3, #1
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eb4:	4a14      	ldr	r2, [pc, #80]	@ (8004f08 <_sbrk+0x5c>)
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <_sbrk+0x60>)
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ec0:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <_sbrk+0x64>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ec8:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <_sbrk+0x64>)
 8004eca:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <_sbrk+0x68>)
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ece:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <_sbrk+0x64>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	18d3      	adds	r3, r2, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d207      	bcs.n	8004eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004edc:	f006 fd60 	bl	800b9a0 <__errno>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	220c      	movs	r2, #12
 8004ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	425b      	negs	r3, r3
 8004eea:	e009      	b.n	8004f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <_sbrk+0x64>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <_sbrk+0x64>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	18d2      	adds	r2, r2, r3
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <_sbrk+0x64>)
 8004efc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004efe:	68fb      	ldr	r3, [r7, #12]
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b006      	add	sp, #24
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20009000 	.word	0x20009000
 8004f0c:	00000400 	.word	0x00000400
 8004f10:	20000594 	.word	0x20000594
 8004f14:	200006e8 	.word	0x200006e8

08004f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 8004f28:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <sensor_rx_disable+0x3c>)
 8004f2a:	2280      	movs	r2, #128	@ 0x80
 8004f2c:	0112      	lsls	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <sensor_rx_disable+0x3c>)
 8004f32:	2280      	movs	r2, #128	@ 0x80
 8004f34:	0152      	lsls	r2, r2, #5
 8004f36:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <sensor_rx_disable+0x3c>)
 8004f3a:	2280      	movs	r2, #128	@ 0x80
 8004f3c:	0192      	lsls	r2, r2, #6
 8004f3e:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8004f40:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <sensor_rx_disable+0x3c>)
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	01d2      	lsls	r2, r2, #7
 8004f46:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <sensor_rx_disable+0x3c>)
 8004f4a:	2280      	movs	r2, #128	@ 0x80
 8004f4c:	0212      	lsls	r2, r2, #8
 8004f4e:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8004f50:	23a0      	movs	r3, #160	@ 0xa0
 8004f52:	05db      	lsls	r3, r3, #23
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	0052      	lsls	r2, r2, #1
 8004f58:	619a      	str	r2, [r3, #24]
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	50000400 	.word	0x50000400

08004f64 <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	1dfb      	adds	r3, r7, #7
 8004f6e:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 8004f70:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <sensor_rx_select+0x98>)
 8004f72:	2280      	movs	r2, #128	@ 0x80
 8004f74:	0112      	lsls	r2, r2, #4
 8004f76:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <sensor_rx_select+0x98>)
 8004f7a:	2280      	movs	r2, #128	@ 0x80
 8004f7c:	0152      	lsls	r2, r2, #5
 8004f7e:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8004f80:	4b1e      	ldr	r3, [pc, #120]	@ (8004ffc <sensor_rx_select+0x98>)
 8004f82:	2280      	movs	r2, #128	@ 0x80
 8004f84:	0192      	lsls	r2, r2, #6
 8004f86:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8004f88:	4b1c      	ldr	r3, [pc, #112]	@ (8004ffc <sensor_rx_select+0x98>)
 8004f8a:	2280      	movs	r2, #128	@ 0x80
 8004f8c:	01d2      	lsls	r2, r2, #7
 8004f8e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8004f90:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <sensor_rx_select+0x98>)
 8004f92:	2280      	movs	r2, #128	@ 0x80
 8004f94:	0212      	lsls	r2, r2, #8
 8004f96:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8004f98:	23a0      	movs	r3, #160	@ 0xa0
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	2280      	movs	r2, #128	@ 0x80
 8004f9e:	0052      	lsls	r2, r2, #1
 8004fa0:	619a      	str	r2, [r3, #24]
	switch(index) {
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d824      	bhi.n	8004ff4 <sensor_rx_select+0x90>
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <sensor_rx_select+0x9c>)
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 8004fb4:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <sensor_rx_select+0x98>)
 8004fb6:	2280      	movs	r2, #128	@ 0x80
 8004fb8:	0112      	lsls	r2, r2, #4
 8004fba:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004fbc:	e01a      	b.n	8004ff4 <sensor_rx_select+0x90>
	case 2:
		TEMP2_CS(0);
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <sensor_rx_select+0x98>)
 8004fc0:	2280      	movs	r2, #128	@ 0x80
 8004fc2:	0152      	lsls	r2, r2, #5
 8004fc4:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004fc6:	e015      	b.n	8004ff4 <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <sensor_rx_select+0x98>)
 8004fca:	2280      	movs	r2, #128	@ 0x80
 8004fcc:	0192      	lsls	r2, r2, #6
 8004fce:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004fd0:	e010      	b.n	8004ff4 <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <sensor_rx_select+0x98>)
 8004fd4:	2280      	movs	r2, #128	@ 0x80
 8004fd6:	01d2      	lsls	r2, r2, #7
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004fda:	e00b      	b.n	8004ff4 <sensor_rx_select+0x90>
	case 5:
		TEMP5_CS(0);
 8004fdc:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <sensor_rx_select+0x98>)
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	0212      	lsls	r2, r2, #8
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004fe4:	e006      	b.n	8004ff4 <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 8004fe6:	23a0      	movs	r3, #160	@ 0xa0
 8004fe8:	05db      	lsls	r3, r3, #23
 8004fea:	2280      	movs	r2, #128	@ 0x80
 8004fec:	0052      	lsls	r2, r2, #1
 8004fee:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8004ff0:	e000      	b.n	8004ff4 <sensor_rx_select+0x90>
		return;
 8004ff2:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	50000400 	.word	0x50000400
 8005000:	0800de4c 	.word	0x0800de4c

08005004 <Reset_Handler>:
 8005004:	480d      	ldr	r0, [pc, #52]	@ (800503c <LoopForever+0x2>)
 8005006:	4685      	mov	sp, r0
 8005008:	f7ff ff86 	bl	8004f18 <SystemInit>
 800500c:	480c      	ldr	r0, [pc, #48]	@ (8005040 <LoopForever+0x6>)
 800500e:	490d      	ldr	r1, [pc, #52]	@ (8005044 <LoopForever+0xa>)
 8005010:	4a0d      	ldr	r2, [pc, #52]	@ (8005048 <LoopForever+0xe>)
 8005012:	2300      	movs	r3, #0
 8005014:	e002      	b.n	800501c <LoopCopyDataInit>

08005016 <CopyDataInit>:
 8005016:	58d4      	ldr	r4, [r2, r3]
 8005018:	50c4      	str	r4, [r0, r3]
 800501a:	3304      	adds	r3, #4

0800501c <LoopCopyDataInit>:
 800501c:	18c4      	adds	r4, r0, r3
 800501e:	428c      	cmp	r4, r1
 8005020:	d3f9      	bcc.n	8005016 <CopyDataInit>
 8005022:	4a0a      	ldr	r2, [pc, #40]	@ (800504c <LoopForever+0x12>)
 8005024:	4c0a      	ldr	r4, [pc, #40]	@ (8005050 <LoopForever+0x16>)
 8005026:	2300      	movs	r3, #0
 8005028:	e001      	b.n	800502e <LoopFillZerobss>

0800502a <FillZerobss>:
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	3204      	adds	r2, #4

0800502e <LoopFillZerobss>:
 800502e:	42a2      	cmp	r2, r4
 8005030:	d3fb      	bcc.n	800502a <FillZerobss>
 8005032:	f006 fcbb 	bl	800b9ac <__libc_init_array>
 8005036:	f7fe fd43 	bl	8003ac0 <main>

0800503a <LoopForever>:
 800503a:	e7fe      	b.n	800503a <LoopForever>
 800503c:	20009000 	.word	0x20009000
 8005040:	20000000 	.word	0x20000000
 8005044:	200001e4 	.word	0x200001e4
 8005048:	0800e1fc 	.word	0x0800e1fc
 800504c:	200001e4 	.word	0x200001e4
 8005050:	200006e8 	.word	0x200006e8

08005054 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 8005054:	e7fe      	b.n	8005054 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08005058 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_Init+0x3c>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <HAL_Init+0x3c>)
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	0049      	lsls	r1, r1, #1
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005072:	2003      	movs	r0, #3
 8005074:	f000 f810 	bl	8005098 <HAL_InitTick>
 8005078:	1e03      	subs	r3, r0, #0
 800507a:	d003      	beq.n	8005084 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800507c:	1dfb      	adds	r3, r7, #7
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e001      	b.n	8005088 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005084:	f7ff fbca 	bl	800481c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	781b      	ldrb	r3, [r3, #0]
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40022000 	.word	0x40022000

08005098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050a0:	230f      	movs	r3, #15
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80050a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005120 <HAL_InitTick+0x88>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02b      	beq.n	8005108 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <HAL_InitTick+0x8c>)
 80050b2:	681c      	ldr	r4, [r3, #0]
 80050b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005120 <HAL_InitTick+0x88>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	0019      	movs	r1, r3
 80050ba:	23fa      	movs	r3, #250	@ 0xfa
 80050bc:	0098      	lsls	r0, r3, #2
 80050be:	f7fb f83b 	bl	8000138 <__udivsi3>
 80050c2:	0003      	movs	r3, r0
 80050c4:	0019      	movs	r1, r3
 80050c6:	0020      	movs	r0, r4
 80050c8:	f7fb f836 	bl	8000138 <__udivsi3>
 80050cc:	0003      	movs	r3, r0
 80050ce:	0018      	movs	r0, r3
 80050d0:	f001 f903 	bl	80062da <HAL_SYSTICK_Config>
 80050d4:	1e03      	subs	r3, r0, #0
 80050d6:	d112      	bne.n	80050fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d80a      	bhi.n	80050f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	2301      	movs	r3, #1
 80050e2:	425b      	negs	r3, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	0018      	movs	r0, r3
 80050e8:	f001 f8d2 	bl	8006290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <HAL_InitTick+0x90>)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e00d      	b.n	8005110 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e008      	b.n	8005110 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050fe:	230f      	movs	r3, #15
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e003      	b.n	8005110 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005108:	230f      	movs	r3, #15
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005110:	230f      	movs	r3, #15
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	781b      	ldrb	r3, [r3, #0]
}
 8005116:	0018      	movs	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	b005      	add	sp, #20
 800511c:	bd90      	pop	{r4, r7, pc}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	20000018 	.word	0x20000018
 8005124:	20000010 	.word	0x20000010
 8005128:	20000014 	.word	0x20000014

0800512c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_IncTick+0x1c>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	001a      	movs	r2, r3
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_IncTick+0x20>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	18d2      	adds	r2, r2, r3
 800513c:	4b03      	ldr	r3, [pc, #12]	@ (800514c <HAL_IncTick+0x20>)
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	20000018 	.word	0x20000018
 800514c:	20000598 	.word	0x20000598

08005150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  return uwTick;
 8005154:	4b02      	ldr	r3, [pc, #8]	@ (8005160 <HAL_GetTick+0x10>)
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	20000598 	.word	0x20000598

08005164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800516c:	f7ff fff0 	bl	8005150 <HAL_GetTick>
 8005170:	0003      	movs	r3, r0
 8005172:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	d005      	beq.n	800518a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800517e:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <HAL_Delay+0x44>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	001a      	movs	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	189b      	adds	r3, r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	f7ff ffe0 	bl	8005150 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d8f7      	bhi.n	800518c <HAL_Delay+0x28>
  {
  }
}
 800519c:	46c0      	nop			@ (mov r8, r8)
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	20000018 	.word	0x20000018

080051ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80051bc:	401a      	ands	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	fe3fffff 	.word	0xfe3fffff

080051d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	23e0      	movs	r3, #224	@ 0xe0
 80051e2:	045b      	lsls	r3, r3, #17
 80051e4:	4013      	ands	r3, r2
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b002      	add	sp, #8
 80051ec:	bd80      	pop	{r7, pc}

080051ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	2104      	movs	r1, #4
 8005202:	400a      	ands	r2, r1
 8005204:	2107      	movs	r1, #7
 8005206:	4091      	lsls	r1, r2
 8005208:	000a      	movs	r2, r1
 800520a:	43d2      	mvns	r2, r2
 800520c:	401a      	ands	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2104      	movs	r1, #4
 8005212:	400b      	ands	r3, r1
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4099      	lsls	r1, r3
 8005218:	000b      	movs	r3, r1
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b004      	add	sp, #16
 8005226:	bd80      	pop	{r7, pc}

08005228 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	2104      	movs	r1, #4
 800523a:	400a      	ands	r2, r1
 800523c:	2107      	movs	r1, #7
 800523e:	4091      	lsls	r1, r2
 8005240:	000a      	movs	r2, r1
 8005242:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2104      	movs	r1, #4
 8005248:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800524a:	40da      	lsrs	r2, r3
 800524c:	0013      	movs	r3, r2
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}

08005256 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	23c0      	movs	r3, #192	@ 0xc0
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	4013      	ands	r3, r2
 8005268:	d101      	bne.n	800526e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800526e:	2300      	movs	r3, #0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}

08005278 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	211f      	movs	r1, #31
 800528c:	400a      	ands	r2, r1
 800528e:	210f      	movs	r1, #15
 8005290:	4091      	lsls	r1, r2
 8005292:	000a      	movs	r2, r1
 8005294:	43d2      	mvns	r2, r2
 8005296:	401a      	ands	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	0e9b      	lsrs	r3, r3, #26
 800529c:	210f      	movs	r1, #15
 800529e:	4019      	ands	r1, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	201f      	movs	r0, #31
 80052a4:	4003      	ands	r3, r0
 80052a6:	4099      	lsls	r1, r3
 80052a8:	000b      	movs	r3, r1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052b0:	46c0      	nop			@ (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	035b      	lsls	r3, r3, #13
 80052ca:	0b5b      	lsrs	r3, r3, #13
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b002      	add	sp, #8
 80052d8:	bd80      	pop	{r7, pc}

080052da <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	0352      	lsls	r2, r2, #13
 80052ec:	0b52      	lsrs	r2, r2, #13
 80052ee:	43d2      	mvns	r2, r2
 80052f0:	401a      	ands	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b002      	add	sp, #8
 80052fc:	bd80      	pop	{r7, pc}

080052fe <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2203      	movs	r2, #3
 800530c:	4013      	ands	r3, r2
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b002      	add	sp, #8
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	0212      	lsls	r2, r2, #8
 800532c:	43d2      	mvns	r2, r2
 800532e:	401a      	ands	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	400b      	ands	r3, r1
 8005338:	4904      	ldr	r1, [pc, #16]	@ (800534c <LL_ADC_SetChannelSamplingTime+0x34>)
 800533a:	400b      	ands	r3, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	07ffff00 	.word	0x07ffff00

08005350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a05      	ldr	r2, [pc, #20]	@ (8005374 <LL_ADC_EnableInternalRegulator+0x24>)
 800535e:	4013      	ands	r3, r2
 8005360:	2280      	movs	r2, #128	@ 0x80
 8005362:	0552      	lsls	r2, r2, #21
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b002      	add	sp, #8
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	6fffffe8 	.word	0x6fffffe8

08005378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	055b      	lsls	r3, r3, #21
 8005388:	401a      	ands	r2, r3
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	055b      	lsls	r3, r3, #21
 800538e:	429a      	cmp	r2, r3
 8005390:	d101      	bne.n	8005396 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005396:	2300      	movs	r3, #0
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}

080053a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <LL_ADC_Enable+0x20>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	2201      	movs	r2, #1
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	7fffffe8 	.word	0x7fffffe8

080053c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a04      	ldr	r2, [pc, #16]	@ (80053e4 <LL_ADC_Disable+0x20>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	2202      	movs	r2, #2
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	7fffffe8 	.word	0x7fffffe8

080053e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2201      	movs	r2, #1
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <LL_ADC_IsEnabled+0x18>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <LL_ADC_IsEnabled+0x1a>
 8005400:	2300      	movs	r3, #0
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b002      	add	sp, #8
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a04      	ldr	r2, [pc, #16]	@ (800542c <LL_ADC_REG_StartConversion+0x20>)
 800541a:	4013      	ands	r3, r2
 800541c:	2204      	movs	r2, #4
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005424:	46c0      	nop			@ (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b002      	add	sp, #8
 800542a:	bd80      	pop	{r7, pc}
 800542c:	7fffffe8 	.word	0x7fffffe8

08005430 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2204      	movs	r2, #4
 800543e:	4013      	ands	r3, r2
 8005440:	2b04      	cmp	r3, #4
 8005442:	d101      	bne.n	8005448 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800545c:	231f      	movs	r3, #31
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e17f      	b.n	800577a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f7ff f9ed 	bl	8004864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2254      	movs	r2, #84	@ 0x54
 8005494:	2100      	movs	r1, #0
 8005496:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0018      	movs	r0, r3
 800549e:	f7ff ff6b 	bl	8005378 <LL_ADC_IsInternalRegulatorEnabled>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d115      	bne.n	80054d2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7ff ff50 	bl	8005350 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054b0:	4bb4      	ldr	r3, [pc, #720]	@ (8005784 <HAL_ADC_Init+0x330>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	49b4      	ldr	r1, [pc, #720]	@ (8005788 <HAL_ADC_Init+0x334>)
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7fa fe3e 	bl	8000138 <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054c4:	e002      	b.n	80054cc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f9      	bne.n	80054c6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff ff4e 	bl	8005378 <LL_ADC_IsInternalRegulatorEnabled>
 80054dc:	1e03      	subs	r3, r0, #0
 80054de:	d10f      	bne.n	8005500 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e4:	2210      	movs	r2, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f0:	2201      	movs	r2, #1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80054f8:	231f      	movs	r3, #31
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f7ff ff93 	bl	8005430 <LL_ADC_REG_IsConversionOngoing>
 800550a:	0003      	movs	r3, r0
 800550c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	2210      	movs	r2, #16
 8005514:	4013      	ands	r3, r2
 8005516:	d000      	beq.n	800551a <HAL_ADC_Init+0xc6>
 8005518:	e122      	b.n	8005760 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d000      	beq.n	8005522 <HAL_ADC_Init+0xce>
 8005520:	e11e      	b.n	8005760 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	4a99      	ldr	r2, [pc, #612]	@ (800578c <HAL_ADC_Init+0x338>)
 8005528:	4013      	ands	r3, r2
 800552a:	2202      	movs	r2, #2
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0018      	movs	r0, r3
 8005538:	f7ff ff56 	bl	80053e8 <LL_ADC_IsEnabled>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d000      	beq.n	8005542 <HAL_ADC_Init+0xee>
 8005540:	e0ad      	b.n	800569e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	7e1b      	ldrb	r3, [r3, #24]
 800554a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800554c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	7e5b      	ldrb	r3, [r3, #25]
 8005552:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005554:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7e9b      	ldrb	r3, [r3, #26]
 800555a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800555c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_ADC_Init+0x118>
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	015b      	lsls	r3, r3, #5
 800556a:	e000      	b.n	800556e <HAL_ADC_Init+0x11a>
 800556c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800556e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005574:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da04      	bge.n	8005588 <HAL_ADC_Init+0x134>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	e001      	b.n	800558c <HAL_ADC_Init+0x138>
 8005588:	2380      	movs	r3, #128	@ 0x80
 800558a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800558c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	212c      	movs	r1, #44	@ 0x2c
 8005592:	5c5b      	ldrb	r3, [r3, r1]
 8005594:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005596:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4313      	orrs	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d115      	bne.n	80055d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7e9b      	ldrb	r3, [r3, #26]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2280      	movs	r2, #128	@ 0x80
 80055b4:	0252      	lsls	r2, r2, #9
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e00b      	b.n	80055d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	2220      	movs	r2, #32
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	2201      	movs	r2, #1
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e0:	23e0      	movs	r3, #224	@ 0xe0
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80055ea:	4313      	orrs	r3, r2
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a65      	ldr	r2, [pc, #404]	@ (8005790 <HAL_ADC_Init+0x33c>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	430a      	orrs	r2, r1
 8005606:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0f9b      	lsrs	r3, r3, #30
 800560e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005614:	4313      	orrs	r3, r2
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	223c      	movs	r2, #60	@ 0x3c
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d111      	bne.n	800564a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0f9b      	lsrs	r3, r3, #30
 800562c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005632:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005638:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800563e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	2201      	movs	r2, #1
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	4a50      	ldr	r2, [pc, #320]	@ (8005794 <HAL_ADC_Init+0x340>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	430a      	orrs	r2, r1
 800565e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	23c0      	movs	r3, #192	@ 0xc0
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	429a      	cmp	r2, r3
 800566a:	d018      	beq.n	800569e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	05db      	lsls	r3, r3, #23
 8005674:	429a      	cmp	r2, r3
 8005676:	d012      	beq.n	800569e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	429a      	cmp	r2, r3
 8005682:	d00c      	beq.n	800569e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005684:	4b44      	ldr	r3, [pc, #272]	@ (8005798 <HAL_ADC_Init+0x344>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a44      	ldr	r2, [pc, #272]	@ (800579c <HAL_ADC_Init+0x348>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	23f0      	movs	r3, #240	@ 0xf0
 8005694:	039b      	lsls	r3, r3, #14
 8005696:	401a      	ands	r2, r3
 8005698:	4b3f      	ldr	r3, [pc, #252]	@ (8005798 <HAL_ADC_Init+0x344>)
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a6:	001a      	movs	r2, r3
 80056a8:	2100      	movs	r1, #0
 80056aa:	f7ff fda0 	bl	80051ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	493a      	ldr	r1, [pc, #232]	@ (80057a0 <HAL_ADC_Init+0x34c>)
 80056b8:	001a      	movs	r2, r3
 80056ba:	f7ff fd98 	bl	80051ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2110      	movs	r1, #16
 80056d2:	4249      	negs	r1, r1
 80056d4:	430a      	orrs	r2, r1
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80056d8:	e018      	b.n	800570c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	039b      	lsls	r3, r3, #14
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d112      	bne.n	800570c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	221c      	movs	r2, #28
 80056f6:	4013      	ands	r3, r2
 80056f8:	2210      	movs	r2, #16
 80056fa:	4252      	negs	r2, r2
 80056fc:	409a      	lsls	r2, r3
 80056fe:	0011      	movs	r1, r2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2100      	movs	r1, #0
 8005712:	0018      	movs	r0, r3
 8005714:	f7ff fd88 	bl	8005228 <LL_ADC_GetSamplingTimeCommonChannels>
 8005718:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800571e:	429a      	cmp	r2, r3
 8005720:	d10b      	bne.n	800573a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572c:	2203      	movs	r2, #3
 800572e:	4393      	bics	r3, r2
 8005730:	2201      	movs	r2, #1
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005738:	e01c      	b.n	8005774 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573e:	2212      	movs	r2, #18
 8005740:	4393      	bics	r3, r2
 8005742:	2210      	movs	r2, #16
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574e:	2201      	movs	r2, #1
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005756:	231f      	movs	r3, #31
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800575e:	e009      	b.n	8005774 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005764:	2210      	movs	r2, #16
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800576c:	231f      	movs	r3, #31
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005774:	231f      	movs	r3, #31
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	781b      	ldrb	r3, [r3, #0]
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b008      	add	sp, #32
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	20000010 	.word	0x20000010
 8005788:	00030d40 	.word	0x00030d40
 800578c:	fffffefd 	.word	0xfffffefd
 8005790:	ffde0201 	.word	0xffde0201
 8005794:	1ffffc02 	.word	0x1ffffc02
 8005798:	40012708 	.word	0x40012708
 800579c:	ffc3ffff 	.word	0xffc3ffff
 80057a0:	07ffff04 	.word	0x07ffff04

080057a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057a4:	b5b0      	push	{r4, r5, r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff fe3b 	bl	8005430 <LL_ADC_REG_IsConversionOngoing>
 80057ba:	1e03      	subs	r3, r0, #0
 80057bc:	d16c      	bne.n	8005898 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2254      	movs	r2, #84	@ 0x54
 80057c2:	5c9b      	ldrb	r3, [r3, r2]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_Start_DMA+0x28>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e06c      	b.n	80058a6 <HAL_ADC_Start_DMA+0x102>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2254      	movs	r2, #84	@ 0x54
 80057d0:	2101      	movs	r1, #1
 80057d2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d113      	bne.n	8005808 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7ff fdff 	bl	80053e8 <LL_ADC_IsEnabled>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff fde6 	bl	80053c4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2101      	movs	r1, #1
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005808:	2517      	movs	r5, #23
 800580a:	197c      	adds	r4, r7, r5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	0018      	movs	r0, r3
 8005810:	f000 fb5e 	bl	8005ed0 <ADC_Enable>
 8005814:	0003      	movs	r3, r0
 8005816:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005818:	002c      	movs	r4, r5
 800581a:	193b      	adds	r3, r7, r4
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d13e      	bne.n	80058a0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	4a22      	ldr	r2, [pc, #136]	@ (80058b0 <HAL_ADC_Start_DMA+0x10c>)
 8005828:	4013      	ands	r3, r2
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	0052      	lsls	r2, r2, #1
 800582e:	431a      	orrs	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <HAL_ADC_Start_DMA+0x110>)
 8005840:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005846:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <HAL_ADC_Start_DMA+0x114>)
 8005848:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_ADC_Start_DMA+0x118>)
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	221c      	movs	r2, #28
 8005858:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2254      	movs	r2, #84	@ 0x54
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2110      	movs	r1, #16
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3340      	adds	r3, #64	@ 0x40
 800587c:	0019      	movs	r1, r3
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	193c      	adds	r4, r7, r4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f000 fdc0 	bl	8006408 <HAL_DMA_Start_IT>
 8005888:	0003      	movs	r3, r0
 800588a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fdbb 	bl	800540c <LL_ADC_REG_StartConversion>
 8005896:	e003      	b.n	80058a0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005898:	2317      	movs	r3, #23
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2202      	movs	r2, #2
 800589e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80058a0:	2317      	movs	r3, #23
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	781b      	ldrb	r3, [r3, #0]
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b006      	add	sp, #24
 80058ac:	bdb0      	pop	{r4, r5, r7, pc}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	fffff0fe 	.word	0xfffff0fe
 80058b4:	08005fdd 	.word	0x08005fdd
 80058b8:	080060a5 	.word	0x080060a5
 80058bc:	080060c3 	.word	0x080060c3

080058c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2202      	movs	r2, #2
 80058e0:	4013      	ands	r3, r2
 80058e2:	d017      	beq.n	8005914 <HAL_ADC_IRQHandler+0x54>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2202      	movs	r2, #2
 80058e8:	4013      	ands	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	2210      	movs	r2, #16
 80058f2:	4013      	ands	r3, r2
 80058f4:	d106      	bne.n	8005904 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	2280      	movs	r2, #128	@ 0x80
 80058fc:	0112      	lsls	r2, r2, #4
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fc06 	bl	8006118 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2202      	movs	r2, #2
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2204      	movs	r2, #4
 8005918:	4013      	ands	r3, r2
 800591a:	d003      	beq.n	8005924 <HAL_ADC_IRQHandler+0x64>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2204      	movs	r2, #4
 8005920:	4013      	ands	r3, r2
 8005922:	d107      	bne.n	8005934 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2208      	movs	r2, #8
 8005928:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800592a:	d04d      	beq.n	80059c8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2208      	movs	r2, #8
 8005930:	4013      	ands	r3, r2
 8005932:	d049      	beq.n	80059c8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005938:	2210      	movs	r2, #16
 800593a:	4013      	ands	r3, r2
 800593c:	d106      	bne.n	800594c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	2280      	movs	r2, #128	@ 0x80
 8005944:	0092      	lsls	r2, r2, #2
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	0018      	movs	r0, r3
 8005952:	f7ff fc80 	bl	8005256 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005956:	1e03      	subs	r3, r0, #0
 8005958:	d02e      	beq.n	80059b8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7e9b      	ldrb	r3, [r3, #26]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d12a      	bne.n	80059b8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2208      	movs	r2, #8
 800596a:	4013      	ands	r3, r2
 800596c:	2b08      	cmp	r3, #8
 800596e:	d123      	bne.n	80059b8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff fd5b 	bl	8005430 <LL_ADC_REG_IsConversionOngoing>
 800597a:	1e03      	subs	r3, r0, #0
 800597c:	d110      	bne.n	80059a0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	210c      	movs	r1, #12
 800598a:	438a      	bics	r2, r1
 800598c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	4a56      	ldr	r2, [pc, #344]	@ (8005aec <HAL_ADC_IRQHandler+0x22c>)
 8005994:	4013      	ands	r3, r2
 8005996:	2201      	movs	r2, #1
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	659a      	str	r2, [r3, #88]	@ 0x58
 800599e:	e00b      	b.n	80059b8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	2220      	movs	r2, #32
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	2201      	movs	r2, #1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fd fd86 	bl	80034cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	220c      	movs	r2, #12
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2280      	movs	r2, #128	@ 0x80
 80059cc:	4013      	ands	r3, r2
 80059ce:	d012      	beq.n	80059f6 <HAL_ADC_IRQHandler+0x136>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	4013      	ands	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059dc:	2280      	movs	r2, #128	@ 0x80
 80059de:	0252      	lsls	r2, r2, #9
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f000 f889 	bl	8005b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2280      	movs	r2, #128	@ 0x80
 80059f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4013      	ands	r3, r2
 80059fe:	d014      	beq.n	8005a2a <HAL_ADC_IRQHandler+0x16a>
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4013      	ands	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0e:	2280      	movs	r2, #128	@ 0x80
 8005a10:	0292      	lsls	r2, r2, #10
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 fb6c 	bl	80060f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2280      	movs	r2, #128	@ 0x80
 8005a26:	0052      	lsls	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	2380      	movs	r3, #128	@ 0x80
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4013      	ands	r3, r2
 8005a32:	d014      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x19e>
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	2280      	movs	r2, #128	@ 0x80
 8005a44:	02d2      	lsls	r2, r2, #11
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f000 fb5a 	bl	8006108 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2280      	movs	r2, #128	@ 0x80
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2210      	movs	r2, #16
 8005a62:	4013      	ands	r3, r2
 8005a64:	d02b      	beq.n	8005abe <HAL_ADC_IRQHandler+0x1fe>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d027      	beq.n	8005abe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e008      	b.n	8005a8e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7ff fc3c 	bl	80052fe <LL_ADC_REG_GetDMATransfer>
 8005a86:	1e03      	subs	r3, r0, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d110      	bne.n	8005ab6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	2280      	movs	r2, #128	@ 0x80
 8005a9a:	00d2      	lsls	r2, r2, #3
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f000 f82d 	bl	8005b10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2210      	movs	r2, #16
 8005abc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	2380      	movs	r3, #128	@ 0x80
 8005ac2:	019b      	lsls	r3, r3, #6
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_ADC_IRQHandler+0x224>
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	2380      	movs	r3, #128	@ 0x80
 8005acc:	019b      	lsls	r3, r3, #6
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d008      	beq.n	8005ae4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 fb27 	bl	8006128 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2280      	movs	r2, #128	@ 0x80
 8005ae0:	0192      	lsls	r2, r2, #6
 8005ae2:	601a      	str	r2, [r3, #0]
  }
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffffefe 	.word	0xfffffefe

08005af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005b08:	46c0      	nop			@ (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005b18:	46c0      	nop			@ (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2a:	2317      	movs	r3, #23
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2254      	movs	r2, #84	@ 0x54
 8005b3a:	5c9b      	ldrb	r3, [r3, r2]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x24>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e1c0      	b.n	8005ec6 <HAL_ADC_ConfigChannel+0x3a6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2254      	movs	r2, #84	@ 0x54
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7ff fc6d 	bl	8005430 <LL_ADC_REG_IsConversionOngoing>
 8005b56:	1e03      	subs	r3, r0, #0
 8005b58:	d000      	beq.n	8005b5c <HAL_ADC_ConfigChannel+0x3c>
 8005b5a:	e1a3      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d100      	bne.n	8005b66 <HAL_ADC_ConfigChannel+0x46>
 8005b64:	e143      	b.n	8005dee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	2380      	movs	r3, #128	@ 0x80
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d004      	beq.n	8005b7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b76:	4ac1      	ldr	r2, [pc, #772]	@ (8005e7c <HAL_ADC_ConfigChannel+0x35c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	0019      	movs	r1, r3
 8005b86:	0010      	movs	r0, r2
 8005b88:	f7ff fb96 	bl	80052b8 <LL_ADC_REG_SetSequencerChAdd>
 8005b8c:	e0c9      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	211f      	movs	r1, #31
 8005b98:	400b      	ands	r3, r1
 8005b9a:	210f      	movs	r1, #15
 8005b9c:	4099      	lsls	r1, r3
 8005b9e:	000b      	movs	r3, r1
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	035b      	lsls	r3, r3, #13
 8005bac:	0b5b      	lsrs	r3, r3, #13
 8005bae:	d105      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x9c>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	0e9b      	lsrs	r3, r3, #26
 8005bb6:	221f      	movs	r2, #31
 8005bb8:	4013      	ands	r3, r2
 8005bba:	e098      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d000      	beq.n	8005bc8 <HAL_ADC_ConfigChannel+0xa8>
 8005bc6:	e091      	b.n	8005cec <HAL_ADC_ConfigChannel+0x1cc>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d000      	beq.n	8005bd4 <HAL_ADC_ConfigChannel+0xb4>
 8005bd2:	e089      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x1c8>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d000      	beq.n	8005be0 <HAL_ADC_ConfigChannel+0xc0>
 8005bde:	e081      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x1c4>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4013      	ands	r3, r2
 8005be8:	d000      	beq.n	8005bec <HAL_ADC_ConfigChannel+0xcc>
 8005bea:	e079      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0x1c0>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d000      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0xd8>
 8005bf6:	e071      	b.n	8005cdc <HAL_ADC_ConfigChannel+0x1bc>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d000      	beq.n	8005c04 <HAL_ADC_ConfigChannel+0xe4>
 8005c02:	e069      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x1b8>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2240      	movs	r2, #64	@ 0x40
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d000      	beq.n	8005c10 <HAL_ADC_ConfigChannel+0xf0>
 8005c0e:	e061      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x1b4>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2280      	movs	r2, #128	@ 0x80
 8005c16:	4013      	ands	r3, r2
 8005c18:	d000      	beq.n	8005c1c <HAL_ADC_ConfigChannel+0xfc>
 8005c1a:	e059      	b.n	8005cd0 <HAL_ADC_ConfigChannel+0x1b0>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	2380      	movs	r3, #128	@ 0x80
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4013      	ands	r3, r2
 8005c26:	d151      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x1ac>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	d149      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x1a8>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	2380      	movs	r3, #128	@ 0x80
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d141      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x1a4>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d139      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1a0>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	4013      	ands	r3, r2
 8005c56:	d131      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x19c>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	019b      	lsls	r3, r3, #6
 8005c60:	4013      	ands	r3, r2
 8005c62:	d129      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x198>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	01db      	lsls	r3, r3, #7
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d121      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x194>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d119      	bne.n	8005cb0 <HAL_ADC_ConfigChannel+0x190>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	025b      	lsls	r3, r3, #9
 8005c84:	4013      	ands	r3, r2
 8005c86:	d111      	bne.n	8005cac <HAL_ADC_ConfigChannel+0x18c>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	2380      	movs	r3, #128	@ 0x80
 8005c8e:	029b      	lsls	r3, r3, #10
 8005c90:	4013      	ands	r3, r2
 8005c92:	d109      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x188>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	02db      	lsls	r3, r3, #11
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d001      	beq.n	8005ca4 <HAL_ADC_ConfigChannel+0x184>
 8005ca0:	2312      	movs	r3, #18
 8005ca2:	e024      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e022      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ca8:	2311      	movs	r3, #17
 8005caa:	e020      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cac:	2310      	movs	r3, #16
 8005cae:	e01e      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cb0:	230f      	movs	r3, #15
 8005cb2:	e01c      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cb4:	230e      	movs	r3, #14
 8005cb6:	e01a      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cb8:	230d      	movs	r3, #13
 8005cba:	e018      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	e016      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cc0:	230b      	movs	r3, #11
 8005cc2:	e014      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cc4:	230a      	movs	r3, #10
 8005cc6:	e012      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cc8:	2309      	movs	r3, #9
 8005cca:	e010      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	e00e      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cd0:	2307      	movs	r3, #7
 8005cd2:	e00c      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cd4:	2306      	movs	r3, #6
 8005cd6:	e00a      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cd8:	2305      	movs	r3, #5
 8005cda:	e008      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	e006      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e004      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e002      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_ADC_ConfigChannel+0x1ce>
 8005cec:	2300      	movs	r3, #0
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	6852      	ldr	r2, [r2, #4]
 8005cf2:	201f      	movs	r0, #31
 8005cf4:	4002      	ands	r2, r0
 8005cf6:	4093      	lsls	r3, r2
 8005cf8:	000a      	movs	r2, r1
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d808      	bhi.n	8005d22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	f7ff faab 	bl	8005278 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	001a      	movs	r2, r3
 8005d30:	f7ff faf2 	bl	8005318 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	db00      	blt.n	8005d3e <HAL_ADC_ConfigChannel+0x21e>
 8005d3c:	e0bc      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d3e:	4b50      	ldr	r3, [pc, #320]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7ff fa47 	bl	80051d4 <LL_ADC_GetCommonPathInternalCh>
 8005d46:	0003      	movs	r3, r0
 8005d48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8005e84 <HAL_ADC_ConfigChannel+0x364>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d122      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	2380      	movs	r3, #128	@ 0x80
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d5c:	d11d      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2280      	movs	r2, #128	@ 0x80
 8005d62:	0412      	lsls	r2, r2, #16
 8005d64:	4313      	orrs	r3, r2
 8005d66:	4a46      	ldr	r2, [pc, #280]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005d68:	0019      	movs	r1, r3
 8005d6a:	0010      	movs	r0, r2
 8005d6c:	f7ff fa1e 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d70:	4b45      	ldr	r3, [pc, #276]	@ (8005e88 <HAL_ADC_ConfigChannel+0x368>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4945      	ldr	r1, [pc, #276]	@ (8005e8c <HAL_ADC_ConfigChannel+0x36c>)
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7fa f9de 	bl	8000138 <__udivsi3>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	0013      	movs	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d8a:	e002      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f9      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d98:	e08e      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e90 <HAL_ADC_ConfigChannel+0x370>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10e      	bne.n	8005dc2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	2380      	movs	r3, #128	@ 0x80
 8005da8:	045b      	lsls	r3, r3, #17
 8005daa:	4013      	ands	r3, r2
 8005dac:	d109      	bne.n	8005dc2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2280      	movs	r2, #128	@ 0x80
 8005db2:	0452      	lsls	r2, r2, #17
 8005db4:	4313      	orrs	r3, r2
 8005db6:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005db8:	0019      	movs	r1, r3
 8005dba:	0010      	movs	r0, r2
 8005dbc:	f7ff f9f6 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
 8005dc0:	e07a      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a33      	ldr	r2, [pc, #204]	@ (8005e94 <HAL_ADC_ConfigChannel+0x374>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d000      	beq.n	8005dce <HAL_ADC_ConfigChannel+0x2ae>
 8005dcc:	e074      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	03db      	lsls	r3, r3, #15
 8005dd4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005dd6:	d000      	beq.n	8005dda <HAL_ADC_ConfigChannel+0x2ba>
 8005dd8:	e06e      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2280      	movs	r2, #128	@ 0x80
 8005dde:	03d2      	lsls	r2, r2, #15
 8005de0:	4313      	orrs	r3, r2
 8005de2:	4a27      	ldr	r2, [pc, #156]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005de4:	0019      	movs	r1, r3
 8005de6:	0010      	movs	r0, r2
 8005de8:	f7ff f9e0 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
 8005dec:	e064      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	2380      	movs	r3, #128	@ 0x80
 8005df4:	061b      	lsls	r3, r3, #24
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d004      	beq.n	8005e04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <HAL_ADC_ConfigChannel+0x35c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d107      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	0010      	movs	r0, r2
 8005e10:	f7ff fa63 	bl	80052da <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da4d      	bge.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e1c:	4b18      	ldr	r3, [pc, #96]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7ff f9d8 	bl	80051d4 <LL_ADC_GetCommonPathInternalCh>
 8005e24:	0003      	movs	r3, r0
 8005e26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <HAL_ADC_ConfigChannel+0x364>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d108      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <HAL_ADC_ConfigChannel+0x378>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	4a11      	ldr	r2, [pc, #68]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	0010      	movs	r0, r2
 8005e3e:	f7ff f9b5 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
 8005e42:	e039      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a11      	ldr	r2, [pc, #68]	@ (8005e90 <HAL_ADC_ConfigChannel+0x370>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <HAL_ADC_ConfigChannel+0x37c>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	4a0a      	ldr	r2, [pc, #40]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005e56:	0019      	movs	r1, r3
 8005e58:	0010      	movs	r0, r2
 8005e5a:	f7ff f9a7 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
 8005e5e:	e02b      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a0b      	ldr	r2, [pc, #44]	@ (8005e94 <HAL_ADC_ConfigChannel+0x374>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d126      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea0 <HAL_ADC_ConfigChannel+0x380>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	4a03      	ldr	r2, [pc, #12]	@ (8005e80 <HAL_ADC_ConfigChannel+0x360>)
 8005e72:	0019      	movs	r1, r3
 8005e74:	0010      	movs	r0, r2
 8005e76:	f7ff f999 	bl	80051ac <LL_ADC_SetCommonPathInternalCh>
 8005e7a:	e01d      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x398>
 8005e7c:	80000004 	.word	0x80000004
 8005e80:	40012708 	.word	0x40012708
 8005e84:	b0001000 	.word	0xb0001000
 8005e88:	20000010 	.word	0x20000010
 8005e8c:	00030d40 	.word	0x00030d40
 8005e90:	b8004000 	.word	0xb8004000
 8005e94:	b4002000 	.word	0xb4002000
 8005e98:	ff7fffff 	.word	0xff7fffff
 8005e9c:	feffffff 	.word	0xfeffffff
 8005ea0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005eb0:	2317      	movs	r3, #23
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2254      	movs	r2, #84	@ 0x54
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005ec0:	2317      	movs	r3, #23
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	781b      	ldrb	r3, [r3, #0]
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b006      	add	sp, #24
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			@ (mov r8, r8)

08005ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7ff fa81 	bl	80053e8 <LL_ADC_IsEnabled>
 8005ee6:	1e03      	subs	r3, r0, #0
 8005ee8:	d000      	beq.n	8005eec <ADC_Enable+0x1c>
 8005eea:	e069      	b.n	8005fc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4a36      	ldr	r2, [pc, #216]	@ (8005fcc <ADC_Enable+0xfc>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d00d      	beq.n	8005f14 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	2210      	movs	r2, #16
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e056      	b.n	8005fc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7ff fa41 	bl	80053a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd0 <ADC_Enable+0x100>)
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff f957 	bl	80051d4 <LL_ADC_GetCommonPathInternalCh>
 8005f26:	0002      	movs	r2, r0
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d00f      	beq.n	8005f50 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f30:	4b28      	ldr	r3, [pc, #160]	@ (8005fd4 <ADC_Enable+0x104>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4928      	ldr	r1, [pc, #160]	@ (8005fd8 <ADC_Enable+0x108>)
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7fa f8fe 	bl	8000138 <__udivsi3>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005f40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f42:	e002      	b.n	8005f4a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f9      	bne.n	8005f44 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7e5b      	ldrb	r3, [r3, #25]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d033      	beq.n	8005fc0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005f58:	f7ff f8fa 	bl	8005150 <HAL_GetTick>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f60:	e027      	b.n	8005fb2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7ff fa3e 	bl	80053e8 <LL_ADC_IsEnabled>
 8005f6c:	1e03      	subs	r3, r0, #0
 8005f6e:	d104      	bne.n	8005f7a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7ff fa13 	bl	80053a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f7a:	f7ff f8e9 	bl	8005150 <HAL_GetTick>
 8005f7e:	0002      	movs	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d914      	bls.n	8005fb2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d00d      	beq.n	8005fb2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e007      	b.n	8005fc2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d1d0      	bne.n	8005f62 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	80000017 	.word	0x80000017
 8005fd0:	40012708 	.word	0x40012708
 8005fd4:	20000010 	.word	0x20000010
 8005fd8:	00030d40 	.word	0x00030d40

08005fdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fee:	2250      	movs	r2, #80	@ 0x50
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d141      	bne.n	8006078 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff8:	2280      	movs	r2, #128	@ 0x80
 8005ffa:	0092      	lsls	r2, r2, #2
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff f925 	bl	8005256 <LL_ADC_REG_IsTriggerSourceSWStart>
 800600c:	1e03      	subs	r3, r0, #0
 800600e:	d02e      	beq.n	800606e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	7e9b      	ldrb	r3, [r3, #26]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d12a      	bne.n	800606e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2208      	movs	r2, #8
 8006020:	4013      	ands	r3, r2
 8006022:	2b08      	cmp	r3, #8
 8006024:	d123      	bne.n	800606e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	0018      	movs	r0, r3
 800602c:	f7ff fa00 	bl	8005430 <LL_ADC_REG_IsConversionOngoing>
 8006030:	1e03      	subs	r3, r0, #0
 8006032:	d110      	bne.n	8006056 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	210c      	movs	r1, #12
 8006040:	438a      	bics	r2, r1
 8006042:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <ADC_DMAConvCplt+0xc4>)
 800604a:	4013      	ands	r3, r2
 800604c:	2201      	movs	r2, #1
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	659a      	str	r2, [r3, #88]	@ 0x58
 8006054:	e00b      	b.n	800606e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	2220      	movs	r2, #32
 800605c:	431a      	orrs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006066:	2201      	movs	r2, #1
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	0018      	movs	r0, r3
 8006072:	f7fd fa2b 	bl	80034cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006076:	e00f      	b.n	8006098 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	2210      	movs	r2, #16
 800607e:	4013      	ands	r3, r2
 8006080:	d004      	beq.n	800608c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	0018      	movs	r0, r3
 8006086:	f7ff fd43 	bl	8005b10 <HAL_ADC_ErrorCallback>
}
 800608a:	e005      	b.n	8006098 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	0010      	movs	r0, r2
 8006096:	4798      	blx	r3
}
 8006098:	46c0      	nop			@ (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b004      	add	sp, #16
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	fffffefe 	.word	0xfffffefe

080060a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7ff fd1b 	bl	8005af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	2240      	movs	r2, #64	@ 0x40
 80060d6:	431a      	orrs	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	2204      	movs	r2, #4
 80060e2:	431a      	orrs	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	0018      	movs	r0, r3
 80060ec:	f7ff fd10 	bl	8005b10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060f0:	46c0      	nop			@ (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b004      	add	sp, #16
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006100:	46c0      	nop			@ (mov r8, r8)
 8006102:	46bd      	mov	sp, r7
 8006104:	b002      	add	sp, #8
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006110:	46c0      	nop			@ (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006130:	46c0      	nop			@ (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}

08006138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	0002      	movs	r2, r0
 8006140:	1dfb      	adds	r3, r7, #7
 8006142:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b7f      	cmp	r3, #127	@ 0x7f
 800614a:	d809      	bhi.n	8006160 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614c:	1dfb      	adds	r3, r7, #7
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	001a      	movs	r2, r3
 8006152:	231f      	movs	r3, #31
 8006154:	401a      	ands	r2, r3
 8006156:	4b04      	ldr	r3, [pc, #16]	@ (8006168 <__NVIC_EnableIRQ+0x30>)
 8006158:	2101      	movs	r1, #1
 800615a:	4091      	lsls	r1, r2
 800615c:	000a      	movs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e000e100 	.word	0xe000e100

0800616c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	0002      	movs	r2, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	1dfb      	adds	r3, r7, #7
 8006178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800617a:	1dfb      	adds	r3, r7, #7
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006180:	d828      	bhi.n	80061d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006182:	4a2f      	ldr	r2, [pc, #188]	@ (8006240 <__NVIC_SetPriority+0xd4>)
 8006184:	1dfb      	adds	r3, r7, #7
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b25b      	sxtb	r3, r3
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	33c0      	adds	r3, #192	@ 0xc0
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	589b      	ldr	r3, [r3, r2]
 8006192:	1dfa      	adds	r2, r7, #7
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	0011      	movs	r1, r2
 8006198:	2203      	movs	r2, #3
 800619a:	400a      	ands	r2, r1
 800619c:	00d2      	lsls	r2, r2, #3
 800619e:	21ff      	movs	r1, #255	@ 0xff
 80061a0:	4091      	lsls	r1, r2
 80061a2:	000a      	movs	r2, r1
 80061a4:	43d2      	mvns	r2, r2
 80061a6:	401a      	ands	r2, r3
 80061a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	019b      	lsls	r3, r3, #6
 80061ae:	22ff      	movs	r2, #255	@ 0xff
 80061b0:	401a      	ands	r2, r3
 80061b2:	1dfb      	adds	r3, r7, #7
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	0018      	movs	r0, r3
 80061b8:	2303      	movs	r3, #3
 80061ba:	4003      	ands	r3, r0
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061c0:	481f      	ldr	r0, [pc, #124]	@ (8006240 <__NVIC_SetPriority+0xd4>)
 80061c2:	1dfb      	adds	r3, r7, #7
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b25b      	sxtb	r3, r3
 80061c8:	089b      	lsrs	r3, r3, #2
 80061ca:	430a      	orrs	r2, r1
 80061cc:	33c0      	adds	r3, #192	@ 0xc0
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80061d2:	e031      	b.n	8006238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006244 <__NVIC_SetPriority+0xd8>)
 80061d6:	1dfb      	adds	r3, r7, #7
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	0019      	movs	r1, r3
 80061dc:	230f      	movs	r3, #15
 80061de:	400b      	ands	r3, r1
 80061e0:	3b08      	subs	r3, #8
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	3306      	adds	r3, #6
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	18d3      	adds	r3, r2, r3
 80061ea:	3304      	adds	r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	1dfa      	adds	r2, r7, #7
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	0011      	movs	r1, r2
 80061f4:	2203      	movs	r2, #3
 80061f6:	400a      	ands	r2, r1
 80061f8:	00d2      	lsls	r2, r2, #3
 80061fa:	21ff      	movs	r1, #255	@ 0xff
 80061fc:	4091      	lsls	r1, r2
 80061fe:	000a      	movs	r2, r1
 8006200:	43d2      	mvns	r2, r2
 8006202:	401a      	ands	r2, r3
 8006204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	22ff      	movs	r2, #255	@ 0xff
 800620c:	401a      	ands	r2, r3
 800620e:	1dfb      	adds	r3, r7, #7
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	0018      	movs	r0, r3
 8006214:	2303      	movs	r3, #3
 8006216:	4003      	ands	r3, r0
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800621c:	4809      	ldr	r0, [pc, #36]	@ (8006244 <__NVIC_SetPriority+0xd8>)
 800621e:	1dfb      	adds	r3, r7, #7
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	001c      	movs	r4, r3
 8006224:	230f      	movs	r3, #15
 8006226:	4023      	ands	r3, r4
 8006228:	3b08      	subs	r3, #8
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	430a      	orrs	r2, r1
 800622e:	3306      	adds	r3, #6
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	18c3      	adds	r3, r0, r3
 8006234:	3304      	adds	r3, #4
 8006236:	601a      	str	r2, [r3, #0]
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b003      	add	sp, #12
 800623e:	bd90      	pop	{r4, r7, pc}
 8006240:	e000e100 	.word	0xe000e100
 8006244:	e000ed00 	.word	0xe000ed00

08006248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	045b      	lsls	r3, r3, #17
 8006258:	429a      	cmp	r2, r3
 800625a:	d301      	bcc.n	8006260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800625c:	2301      	movs	r3, #1
 800625e:	e010      	b.n	8006282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006260:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <SysTick_Config+0x44>)
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	3a01      	subs	r2, #1
 8006266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006268:	2301      	movs	r3, #1
 800626a:	425b      	negs	r3, r3
 800626c:	2103      	movs	r1, #3
 800626e:	0018      	movs	r0, r3
 8006270:	f7ff ff7c 	bl	800616c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006274:	4b05      	ldr	r3, [pc, #20]	@ (800628c <SysTick_Config+0x44>)
 8006276:	2200      	movs	r2, #0
 8006278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800627a:	4b04      	ldr	r3, [pc, #16]	@ (800628c <SysTick_Config+0x44>)
 800627c:	2207      	movs	r2, #7
 800627e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006280:	2300      	movs	r3, #0
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b002      	add	sp, #8
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	e000e010 	.word	0xe000e010

08006290 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	210f      	movs	r1, #15
 800629c:	187b      	adds	r3, r7, r1
 800629e:	1c02      	adds	r2, r0, #0
 80062a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	187b      	adds	r3, r7, r1
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	0011      	movs	r1, r2
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff ff5d 	bl	800616c <__NVIC_SetPriority>
}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	46bd      	mov	sp, r7
 80062b6:	b004      	add	sp, #16
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	0002      	movs	r2, r0
 80062c2:	1dfb      	adds	r3, r7, #7
 80062c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062c6:	1dfb      	adds	r3, r7, #7
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	b25b      	sxtb	r3, r3
 80062cc:	0018      	movs	r0, r3
 80062ce:	f7ff ff33 	bl	8006138 <__NVIC_EnableIRQ>
}
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b002      	add	sp, #8
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7ff ffaf 	bl	8006248 <SysTick_Config>
 80062ea:	0003      	movs	r3, r0
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b002      	add	sp, #8
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e077      	b.n	80063f6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3d      	ldr	r2, [pc, #244]	@ (8006400 <HAL_DMA_Init+0x10c>)
 800630c:	4694      	mov	ip, r2
 800630e:	4463      	add	r3, ip
 8006310:	2114      	movs	r1, #20
 8006312:	0018      	movs	r0, r3
 8006314:	f7f9 ff10 	bl	8000138 <__udivsi3>
 8006318:	0003      	movs	r3, r0
 800631a:	009a      	lsls	r2, r3, #2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2225      	movs	r2, #37	@ 0x25
 8006324:	2102      	movs	r1, #2
 8006326:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4934      	ldr	r1, [pc, #208]	@ (8006404 <HAL_DMA_Init+0x110>)
 8006334:	400a      	ands	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6819      	ldr	r1, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 fa37 	bl	80067e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	2380      	movs	r3, #128	@ 0x80
 800637c:	01db      	lsls	r3, r3, #7
 800637e:	429a      	cmp	r2, r3
 8006380:	d102      	bne.n	8006388 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006390:	213f      	movs	r1, #63	@ 0x3f
 8006392:	400a      	ands	r2, r1
 8006394:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800639e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d011      	beq.n	80063cc <HAL_DMA_Init+0xd8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d80d      	bhi.n	80063cc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	0018      	movs	r0, r3
 80063b4:	f000 fa42 	bl	800683c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	e008      	b.n	80063de <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2225      	movs	r2, #37	@ 0x25
 80063e8:	2101      	movs	r1, #1
 80063ea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	@ 0x24
 80063f0:	2100      	movs	r1, #0
 80063f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b002      	add	sp, #8
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	bffdfff8 	.word	0xbffdfff8
 8006404:	ffff800f 	.word	0xffff800f

08006408 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2317      	movs	r3, #23
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2224      	movs	r2, #36	@ 0x24
 8006422:	5c9b      	ldrb	r3, [r3, r2]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_DMA_Start_IT+0x24>
 8006428:	2302      	movs	r3, #2
 800642a:	e06f      	b.n	800650c <HAL_DMA_Start_IT+0x104>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2224      	movs	r2, #36	@ 0x24
 8006430:	2101      	movs	r1, #1
 8006432:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2225      	movs	r2, #37	@ 0x25
 8006438:	5c9b      	ldrb	r3, [r3, r2]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d157      	bne.n	80064f0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2225      	movs	r2, #37	@ 0x25
 8006444:	2102      	movs	r1, #2
 8006446:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2101      	movs	r1, #1
 800645a:	438a      	bics	r2, r1
 800645c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f97d 	bl	8006764 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	210e      	movs	r1, #14
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e00f      	b.n	80064a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2104      	movs	r1, #4
 8006490:	438a      	bics	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	210a      	movs	r1, #10
 80064a0:	430a      	orrs	r2, r1
 80064a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	025b      	lsls	r3, r3, #9
 80064ae:	4013      	ands	r3, r2
 80064b0:	d008      	beq.n	80064c4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	2180      	movs	r1, #128	@ 0x80
 80064be:	0049      	lsls	r1, r1, #1
 80064c0:	430a      	orrs	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d6:	2180      	movs	r1, #128	@ 0x80
 80064d8:	0049      	lsls	r1, r1, #1
 80064da:	430a      	orrs	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2101      	movs	r1, #1
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e00a      	b.n	8006506 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2280      	movs	r2, #128	@ 0x80
 80064f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2224      	movs	r2, #36	@ 0x24
 80064fa:	2100      	movs	r1, #0
 80064fc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80064fe:	2317      	movs	r3, #23
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006506:	2317      	movs	r3, #23
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b006      	add	sp, #24
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800651c:	210f      	movs	r1, #15
 800651e:	187b      	adds	r3, r7, r1
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2225      	movs	r2, #37	@ 0x25
 8006528:	5c9b      	ldrb	r3, [r3, r2]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d006      	beq.n	800653e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2204      	movs	r2, #4
 8006534:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006536:	187b      	adds	r3, r7, r1
 8006538:	2201      	movs	r2, #1
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e049      	b.n	80065d2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	210e      	movs	r1, #14
 800654a:	438a      	bics	r2, r1
 800654c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2101      	movs	r1, #1
 800655a:	438a      	bics	r2, r1
 800655c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006568:	491d      	ldr	r1, [pc, #116]	@ (80065e0 <HAL_DMA_Abort_IT+0xcc>)
 800656a:	400a      	ands	r2, r1
 800656c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800656e:	4b1d      	ldr	r3, [pc, #116]	@ (80065e4 <HAL_DMA_Abort_IT+0xd0>)
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	221c      	movs	r2, #28
 8006578:	4013      	ands	r3, r2
 800657a:	2201      	movs	r2, #1
 800657c:	409a      	lsls	r2, r3
 800657e:	4b19      	ldr	r3, [pc, #100]	@ (80065e4 <HAL_DMA_Abort_IT+0xd0>)
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800658c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a0:	490f      	ldr	r1, [pc, #60]	@ (80065e0 <HAL_DMA_Abort_IT+0xcc>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80065ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2225      	movs	r2, #37	@ 0x25
 80065b4:	2101      	movs	r1, #1
 80065b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2224      	movs	r2, #36	@ 0x24
 80065bc:	2100      	movs	r1, #0
 80065be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	0010      	movs	r0, r2
 80065d0:	4798      	blx	r3
    }
  }
  return status;
 80065d2:	230f      	movs	r3, #15
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	781b      	ldrb	r3, [r3, #0]
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b004      	add	sp, #16
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	fffffeff 	.word	0xfffffeff
 80065e4:	40020000 	.word	0x40020000

080065e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80065f0:	4b55      	ldr	r3, [pc, #340]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	221c      	movs	r2, #28
 8006604:	4013      	ands	r3, r2
 8006606:	2204      	movs	r2, #4
 8006608:	409a      	lsls	r2, r3
 800660a:	0013      	movs	r3, r2
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4013      	ands	r3, r2
 8006610:	d027      	beq.n	8006662 <HAL_DMA_IRQHandler+0x7a>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2204      	movs	r2, #4
 8006616:	4013      	ands	r3, r2
 8006618:	d023      	beq.n	8006662 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2220      	movs	r2, #32
 8006622:	4013      	ands	r3, r2
 8006624:	d107      	bne.n	8006636 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2104      	movs	r1, #4
 8006632:	438a      	bics	r2, r1
 8006634:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006636:	4b44      	ldr	r3, [pc, #272]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	221c      	movs	r2, #28
 8006640:	4013      	ands	r3, r2
 8006642:	2204      	movs	r2, #4
 8006644:	409a      	lsls	r2, r3
 8006646:	4b40      	ldr	r3, [pc, #256]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d100      	bne.n	8006656 <HAL_DMA_IRQHandler+0x6e>
 8006654:	e073      	b.n	800673e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	0010      	movs	r0, r2
 800665e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006660:	e06d      	b.n	800673e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	221c      	movs	r2, #28
 8006668:	4013      	ands	r3, r2
 800666a:	2202      	movs	r2, #2
 800666c:	409a      	lsls	r2, r3
 800666e:	0013      	movs	r3, r2
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4013      	ands	r3, r2
 8006674:	d02e      	beq.n	80066d4 <HAL_DMA_IRQHandler+0xec>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2202      	movs	r2, #2
 800667a:	4013      	ands	r3, r2
 800667c:	d02a      	beq.n	80066d4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2220      	movs	r2, #32
 8006686:	4013      	ands	r3, r2
 8006688:	d10b      	bne.n	80066a2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	210a      	movs	r1, #10
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2225      	movs	r2, #37	@ 0x25
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	221c      	movs	r2, #28
 80066ac:	4013      	ands	r3, r2
 80066ae:	2202      	movs	r2, #2
 80066b0:	409a      	lsls	r2, r3
 80066b2:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	@ 0x24
 80066bc:	2100      	movs	r1, #0
 80066be:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d03a      	beq.n	800673e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	0010      	movs	r0, r2
 80066d0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80066d2:	e034      	b.n	800673e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	221c      	movs	r2, #28
 80066da:	4013      	ands	r3, r2
 80066dc:	2208      	movs	r2, #8
 80066de:	409a      	lsls	r2, r3
 80066e0:	0013      	movs	r3, r2
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4013      	ands	r3, r2
 80066e6:	d02b      	beq.n	8006740 <HAL_DMA_IRQHandler+0x158>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2208      	movs	r2, #8
 80066ec:	4013      	ands	r3, r2
 80066ee:	d027      	beq.n	8006740 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	210e      	movs	r1, #14
 80066fc:	438a      	bics	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006700:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	221c      	movs	r2, #28
 800670a:	4013      	ands	r3, r2
 800670c:	2201      	movs	r2, #1
 800670e:	409a      	lsls	r2, r3
 8006710:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <HAL_DMA_IRQHandler+0x160>)
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2225      	movs	r2, #37	@ 0x25
 8006720:	2101      	movs	r1, #1
 8006722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	@ 0x24
 8006728:	2100      	movs	r1, #0
 800672a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	0010      	movs	r0, r2
 800673c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800673e:	46c0      	nop			@ (mov r8, r8)
 8006740:	46c0      	nop			@ (mov r8, r8)
}
 8006742:	46bd      	mov	sp, r7
 8006744:	b004      	add	sp, #16
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40020000 	.word	0x40020000

0800674c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2225      	movs	r2, #37	@ 0x25
 8006758:	5c9b      	ldrb	r3, [r3, r2]
 800675a:	b2db      	uxtb	r3, r3
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800677a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800678c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <DMA_SetConfig+0x7c>)
 8006790:	6859      	ldr	r1, [r3, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	221c      	movs	r2, #28
 8006798:	4013      	ands	r3, r2
 800679a:	2201      	movs	r2, #1
 800679c:	409a      	lsls	r2, r3
 800679e:	4b10      	ldr	r3, [pc, #64]	@ (80067e0 <DMA_SetConfig+0x7c>)
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d108      	bne.n	80067c6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067c4:	e007      	b.n	80067d6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	46bd      	mov	sp, r7
 80067da:	b004      	add	sp, #16
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			@ (mov r8, r8)
 80067e0:	40020000 	.word	0x40020000

080067e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	089b      	lsrs	r3, r3, #2
 80067f2:	4a10      	ldr	r2, [pc, #64]	@ (8006834 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80067f4:	4694      	mov	ip, r2
 80067f6:	4463      	add	r3, ip
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	001a      	movs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	001a      	movs	r2, r3
 8006806:	23ff      	movs	r3, #255	@ 0xff
 8006808:	4013      	ands	r3, r2
 800680a:	3b08      	subs	r3, #8
 800680c:	2114      	movs	r1, #20
 800680e:	0018      	movs	r0, r3
 8006810:	f7f9 fc92 	bl	8000138 <__udivsi3>
 8006814:	0003      	movs	r3, r0
 8006816:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a07      	ldr	r2, [pc, #28]	@ (8006838 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800681c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	221f      	movs	r2, #31
 8006822:	4013      	ands	r3, r2
 8006824:	2201      	movs	r2, #1
 8006826:	409a      	lsls	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b004      	add	sp, #16
 8006832:	bd80      	pop	{r7, pc}
 8006834:	10008200 	.word	0x10008200
 8006838:	40020880 	.word	0x40020880

0800683c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	223f      	movs	r2, #63	@ 0x3f
 800684a:	4013      	ands	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a0a      	ldr	r2, [pc, #40]	@ (800687c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006852:	4694      	mov	ip, r2
 8006854:	4463      	add	r3, ip
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	001a      	movs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a07      	ldr	r2, [pc, #28]	@ (8006880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006862:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	2203      	movs	r2, #3
 800686a:	4013      	ands	r3, r2
 800686c:	2201      	movs	r2, #1
 800686e:	409a      	lsls	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8006874:	46c0      	nop			@ (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b004      	add	sp, #16
 800687a:	bd80      	pop	{r7, pc}
 800687c:	1000823f 	.word	0x1000823f
 8006880:	40020940 	.word	0x40020940

08006884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006892:	e147      	b.n	8006b24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2101      	movs	r1, #1
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4091      	lsls	r1, r2
 800689e:	000a      	movs	r2, r1
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d100      	bne.n	80068ac <HAL_GPIO_Init+0x28>
 80068aa:	e138      	b.n	8006b1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2203      	movs	r2, #3
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d005      	beq.n	80068c4 <HAL_GPIO_Init+0x40>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2203      	movs	r2, #3
 80068be:	4013      	ands	r3, r2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d130      	bne.n	8006926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	2203      	movs	r2, #3
 80068d0:	409a      	lsls	r2, r3
 80068d2:	0013      	movs	r3, r2
 80068d4:	43da      	mvns	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4013      	ands	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	409a      	lsls	r2, r3
 80068e6:	0013      	movs	r3, r2
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068fa:	2201      	movs	r2, #1
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	409a      	lsls	r2, r3
 8006900:	0013      	movs	r3, r2
 8006902:	43da      	mvns	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4013      	ands	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	091b      	lsrs	r3, r3, #4
 8006910:	2201      	movs	r2, #1
 8006912:	401a      	ands	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	409a      	lsls	r2, r3
 8006918:	0013      	movs	r3, r2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2203      	movs	r2, #3
 800692c:	4013      	ands	r3, r2
 800692e:	2b03      	cmp	r3, #3
 8006930:	d017      	beq.n	8006962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	2203      	movs	r2, #3
 800693e:	409a      	lsls	r2, r3
 8006940:	0013      	movs	r3, r2
 8006942:	43da      	mvns	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4013      	ands	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	409a      	lsls	r2, r3
 8006954:	0013      	movs	r3, r2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2203      	movs	r2, #3
 8006968:	4013      	ands	r3, r2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d123      	bne.n	80069b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	08da      	lsrs	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3208      	adds	r2, #8
 8006976:	0092      	lsls	r2, r2, #2
 8006978:	58d3      	ldr	r3, [r2, r3]
 800697a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2207      	movs	r2, #7
 8006980:	4013      	ands	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	220f      	movs	r2, #15
 8006986:	409a      	lsls	r2, r3
 8006988:	0013      	movs	r3, r2
 800698a:	43da      	mvns	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	4013      	ands	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2107      	movs	r1, #7
 800699a:	400b      	ands	r3, r1
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	409a      	lsls	r2, r3
 80069a0:	0013      	movs	r3, r2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	08da      	lsrs	r2, r3, #3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3208      	adds	r2, #8
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	6939      	ldr	r1, [r7, #16]
 80069b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	2203      	movs	r2, #3
 80069c2:	409a      	lsls	r2, r3
 80069c4:	0013      	movs	r3, r2
 80069c6:	43da      	mvns	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2203      	movs	r2, #3
 80069d4:	401a      	ands	r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	409a      	lsls	r2, r3
 80069dc:	0013      	movs	r3, r2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	23c0      	movs	r3, #192	@ 0xc0
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	4013      	ands	r3, r2
 80069f4:	d100      	bne.n	80069f8 <HAL_GPIO_Init+0x174>
 80069f6:	e092      	b.n	8006b1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80069f8:	4a50      	ldr	r2, [pc, #320]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3318      	adds	r3, #24
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	589b      	ldr	r3, [r3, r2]
 8006a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2203      	movs	r2, #3
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	220f      	movs	r2, #15
 8006a10:	409a      	lsls	r2, r3
 8006a12:	0013      	movs	r3, r2
 8006a14:	43da      	mvns	r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	23a0      	movs	r3, #160	@ 0xa0
 8006a20:	05db      	lsls	r3, r3, #23
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d013      	beq.n	8006a4e <HAL_GPIO_Init+0x1ca>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a45      	ldr	r2, [pc, #276]	@ (8006b40 <HAL_GPIO_Init+0x2bc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00d      	beq.n	8006a4a <HAL_GPIO_Init+0x1c6>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a44      	ldr	r2, [pc, #272]	@ (8006b44 <HAL_GPIO_Init+0x2c0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <HAL_GPIO_Init+0x1c2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a43      	ldr	r2, [pc, #268]	@ (8006b48 <HAL_GPIO_Init+0x2c4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d101      	bne.n	8006a42 <HAL_GPIO_Init+0x1be>
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e006      	b.n	8006a50 <HAL_GPIO_Init+0x1cc>
 8006a42:	2305      	movs	r3, #5
 8006a44:	e004      	b.n	8006a50 <HAL_GPIO_Init+0x1cc>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e002      	b.n	8006a50 <HAL_GPIO_Init+0x1cc>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <HAL_GPIO_Init+0x1cc>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	2103      	movs	r1, #3
 8006a54:	400a      	ands	r2, r1
 8006a56:	00d2      	lsls	r2, r2, #3
 8006a58:	4093      	lsls	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006a60:	4936      	ldr	r1, [pc, #216]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	089b      	lsrs	r3, r3, #2
 8006a66:	3318      	adds	r3, #24
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a6e:	4b33      	ldr	r3, [pc, #204]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	43da      	mvns	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	2380      	movs	r3, #128	@ 0x80
 8006a84:	035b      	lsls	r3, r3, #13
 8006a86:	4013      	ands	r3, r2
 8006a88:	d003      	beq.n	8006a92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a92:	4b2a      	ldr	r3, [pc, #168]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006a98:	4b28      	ldr	r3, [pc, #160]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	2380      	movs	r3, #128	@ 0x80
 8006aae:	039b      	lsls	r3, r3, #14
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d003      	beq.n	8006abc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006abc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006ac4:	2384      	movs	r3, #132	@ 0x84
 8006ac6:	58d3      	ldr	r3, [r2, r3]
 8006ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	43da      	mvns	r2, r3
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	2380      	movs	r3, #128	@ 0x80
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	4013      	ands	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ae8:	4914      	ldr	r1, [pc, #80]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006aea:	2284      	movs	r2, #132	@ 0x84
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006af0:	4a12      	ldr	r2, [pc, #72]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006af2:	2380      	movs	r3, #128	@ 0x80
 8006af4:	58d3      	ldr	r3, [r2, r3]
 8006af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	43da      	mvns	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4013      	ands	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	2380      	movs	r3, #128	@ 0x80
 8006b08:	025b      	lsls	r3, r3, #9
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b16:	4909      	ldr	r1, [pc, #36]	@ (8006b3c <HAL_GPIO_Init+0x2b8>)
 8006b18:	2280      	movs	r2, #128	@ 0x80
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	40da      	lsrs	r2, r3
 8006b2c:	1e13      	subs	r3, r2, #0
 8006b2e:	d000      	beq.n	8006b32 <HAL_GPIO_Init+0x2ae>
 8006b30:	e6b0      	b.n	8006894 <HAL_GPIO_Init+0x10>
  }
}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	46c0      	nop			@ (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b006      	add	sp, #24
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40021800 	.word	0x40021800
 8006b40:	50000400 	.word	0x50000400
 8006b44:	50000800 	.word	0x50000800
 8006b48:	50000c00 	.word	0x50000c00

08006b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	000a      	movs	r2, r1
 8006b56:	1cbb      	adds	r3, r7, #2
 8006b58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	1cba      	adds	r2, r7, #2
 8006b60:	8812      	ldrh	r2, [r2, #0]
 8006b62:	4013      	ands	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006b66:	230f      	movs	r3, #15
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b70:	230f      	movs	r3, #15
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006b78:	230f      	movs	r3, #15
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	781b      	ldrb	r3, [r3, #0]
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b004      	add	sp, #16
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	0008      	movs	r0, r1
 8006b90:	0011      	movs	r1, r2
 8006b92:	1cbb      	adds	r3, r7, #2
 8006b94:	1c02      	adds	r2, r0, #0
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	1c7b      	adds	r3, r7, #1
 8006b9a:	1c0a      	adds	r2, r1, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b9e:	1c7b      	adds	r3, r7, #1
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ba6:	1cbb      	adds	r3, r7, #2
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bae:	e003      	b.n	8006bb8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bb0:	1cbb      	adds	r3, r7, #2
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006bb8:	46c0      	nop			@ (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	0002      	movs	r2, r0
 8006bc8:	1dbb      	adds	r3, r7, #6
 8006bca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006bcc:	4b10      	ldr	r3, [pc, #64]	@ (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	1dba      	adds	r2, r7, #6
 8006bd2:	8812      	ldrh	r2, [r2, #0]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d008      	beq.n	8006bea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bda:	1dba      	adds	r2, r7, #6
 8006bdc:	8812      	ldrh	r2, [r2, #0]
 8006bde:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006be0:	1dbb      	adds	r3, r7, #6
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 f815 	bl	8006c14 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	1dba      	adds	r2, r7, #6
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d008      	beq.n	8006c08 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bf8:	1dba      	adds	r2, r7, #6
 8006bfa:	8812      	ldrh	r2, [r2, #0]
 8006bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006bfe:	1dbb      	adds	r3, r7, #6
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fc fcf2 	bl	80035ec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006c08:	46c0      	nop			@ (mov r8, r8)
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021800 	.word	0x40021800

08006c14 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	0002      	movs	r2, r0
 8006c1c:	1dbb      	adds	r3, r7, #6
 8006c1e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006c20:	46c0      	nop			@ (mov r8, r8)
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b002      	add	sp, #8
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e08f      	b.n	8006d5a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2241      	movs	r2, #65	@ 0x41
 8006c3e:	5c9b      	ldrb	r3, [r3, r2]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d107      	bne.n	8006c56 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2240      	movs	r2, #64	@ 0x40
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	0018      	movs	r0, r3
 8006c52:	f7fd fe9b 	bl	800498c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2241      	movs	r2, #65	@ 0x41
 8006c5a:	2124      	movs	r1, #36	@ 0x24
 8006c5c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	438a      	bics	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	493b      	ldr	r1, [pc, #236]	@ (8006d64 <HAL_I2C_Init+0x13c>)
 8006c78:	400a      	ands	r2, r1
 8006c7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4938      	ldr	r1, [pc, #224]	@ (8006d68 <HAL_I2C_Init+0x140>)
 8006c88:	400a      	ands	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d108      	bne.n	8006ca6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2180      	movs	r1, #128	@ 0x80
 8006c9e:	0209      	lsls	r1, r1, #8
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	e007      	b.n	8006cb6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2184      	movs	r1, #132	@ 0x84
 8006cb0:	0209      	lsls	r1, r1, #8
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d109      	bne.n	8006cd2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2180      	movs	r1, #128	@ 0x80
 8006cca:	0109      	lsls	r1, r1, #4
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
 8006cd0:	e007      	b.n	8006ce2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4923      	ldr	r1, [pc, #140]	@ (8006d6c <HAL_I2C_Init+0x144>)
 8006cde:	400a      	ands	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4920      	ldr	r1, [pc, #128]	@ (8006d70 <HAL_I2C_Init+0x148>)
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	491a      	ldr	r1, [pc, #104]	@ (8006d68 <HAL_I2C_Init+0x140>)
 8006cfe:	400a      	ands	r2, r1
 8006d00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69d9      	ldr	r1, [r3, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2241      	movs	r2, #65	@ 0x41
 8006d46:	2120      	movs	r1, #32
 8006d48:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2242      	movs	r2, #66	@ 0x42
 8006d54:	2100      	movs	r1, #0
 8006d56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b002      	add	sp, #8
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	f0ffffff 	.word	0xf0ffffff
 8006d68:	ffff7fff 	.word	0xffff7fff
 8006d6c:	fffff7ff 	.word	0xfffff7ff
 8006d70:	02008000 	.word	0x02008000

08006d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d74:	b590      	push	{r4, r7, lr}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	0008      	movs	r0, r1
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	0019      	movs	r1, r3
 8006d82:	230a      	movs	r3, #10
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	1c02      	adds	r2, r0, #0
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	1c0a      	adds	r2, r1, #0
 8006d90:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2241      	movs	r2, #65	@ 0x41
 8006d96:	5c9b      	ldrb	r3, [r3, r2]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d000      	beq.n	8006da0 <HAL_I2C_Master_Transmit+0x2c>
 8006d9e:	e10a      	b.n	8006fb6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2240      	movs	r2, #64	@ 0x40
 8006da4:	5c9b      	ldrb	r3, [r3, r2]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_I2C_Master_Transmit+0x3a>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e104      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2240      	movs	r2, #64	@ 0x40
 8006db2:	2101      	movs	r1, #1
 8006db4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006db6:	f7fe f9cb 	bl	8005150 <HAL_GetTick>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	0219      	lsls	r1, r3, #8
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2319      	movs	r3, #25
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f001 fb54 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8006dd0:	1e03      	subs	r3, r0, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0ef      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2241      	movs	r2, #65	@ 0x41
 8006ddc:	2121      	movs	r1, #33	@ 0x21
 8006dde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2242      	movs	r2, #66	@ 0x42
 8006de4:	2110      	movs	r1, #16
 8006de6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2208      	movs	r2, #8
 8006df8:	18ba      	adds	r2, r7, r2
 8006dfa:	8812      	ldrh	r2, [r2, #0]
 8006dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2bff      	cmp	r3, #255	@ 0xff
 8006e0c:	d906      	bls.n	8006e1c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	22ff      	movs	r2, #255	@ 0xff
 8006e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	045b      	lsls	r3, r3, #17
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e007      	b.n	8006e2c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006e26:	2380      	movs	r3, #128	@ 0x80
 8006e28:	049b      	lsls	r3, r3, #18
 8006e2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d027      	beq.n	8006e84 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	697c      	ldr	r4, [r7, #20]
 8006e70:	230a      	movs	r3, #10
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	8819      	ldrh	r1, [r3, #0]
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	4b51      	ldr	r3, [pc, #324]	@ (8006fc0 <HAL_I2C_Master_Transmit+0x24c>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	0023      	movs	r3, r4
 8006e7e:	f001 fd73 	bl	8008968 <I2C_TransferConfig>
 8006e82:	e06f      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	697c      	ldr	r4, [r7, #20]
 8006e8c:	230a      	movs	r3, #10
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	8819      	ldrh	r1, [r3, #0]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc0 <HAL_I2C_Master_Transmit+0x24c>)
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	0023      	movs	r3, r4
 8006e9a:	f001 fd65 	bl	8008968 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006e9e:	e061      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f001 fb3e 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e081      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d03a      	beq.n	8006f64 <HAL_I2C_Master_Transmit+0x1f0>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d136      	bne.n	8006f64 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	0013      	movs	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	@ 0x80
 8006f04:	f001 fab8 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8006f08:	1e03      	subs	r3, r0, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e053      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2bff      	cmp	r3, #255	@ 0xff
 8006f18:	d911      	bls.n	8006f3e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	22ff      	movs	r2, #255	@ 0xff
 8006f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	2380      	movs	r3, #128	@ 0x80
 8006f28:	045c      	lsls	r4, r3, #17
 8006f2a:	230a      	movs	r3, #10
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	8819      	ldrh	r1, [r3, #0]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	0023      	movs	r3, r4
 8006f38:	f001 fd16 	bl	8008968 <I2C_TransferConfig>
 8006f3c:	e012      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	049c      	lsls	r4, r3, #18
 8006f52:	230a      	movs	r3, #10
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	8819      	ldrh	r1, [r3, #0]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	0023      	movs	r3, r4
 8006f60:	f001 fd02 	bl	8008968 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d198      	bne.n	8006ea0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	0018      	movs	r0, r3
 8006f76:	f001 fb1d 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f7a:	1e03      	subs	r3, r0, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e01a      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2220      	movs	r2, #32
 8006f88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	490b      	ldr	r1, [pc, #44]	@ (8006fc4 <HAL_I2C_Master_Transmit+0x250>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2241      	movs	r2, #65	@ 0x41
 8006f9e:	2120      	movs	r1, #32
 8006fa0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2242      	movs	r2, #66	@ 0x42
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2240      	movs	r2, #64	@ 0x40
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b007      	add	sp, #28
 8006fbe:	bd90      	pop	{r4, r7, pc}
 8006fc0:	80002000 	.word	0x80002000
 8006fc4:	fe00e800 	.word	0xfe00e800

08006fc8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b089      	sub	sp, #36	@ 0x24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	0008      	movs	r0, r1
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	1c02      	adds	r2, r0, #0
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	2308      	movs	r3, #8
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	1c0a      	adds	r2, r1, #0
 8006fe4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2241      	movs	r2, #65	@ 0x41
 8006fea:	5c9b      	ldrb	r3, [r3, r2]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d000      	beq.n	8006ff4 <HAL_I2C_Master_Receive+0x2c>
 8006ff2:	e0e8      	b.n	80071c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2240      	movs	r2, #64	@ 0x40
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_I2C_Master_Receive+0x3a>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e0e2      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2240      	movs	r2, #64	@ 0x40
 8007006:	2101      	movs	r1, #1
 8007008:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800700a:	f7fe f8a1 	bl	8005150 <HAL_GetTick>
 800700e:	0003      	movs	r3, r0
 8007010:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007012:	2380      	movs	r3, #128	@ 0x80
 8007014:	0219      	lsls	r1, r3, #8
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2319      	movs	r3, #25
 800701e:	2201      	movs	r2, #1
 8007020:	f001 fa2a 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007024:	1e03      	subs	r3, r0, #0
 8007026:	d001      	beq.n	800702c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0cd      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2241      	movs	r2, #65	@ 0x41
 8007030:	2122      	movs	r1, #34	@ 0x22
 8007032:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2242      	movs	r2, #66	@ 0x42
 8007038:	2110      	movs	r1, #16
 800703a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2208      	movs	r2, #8
 800704c:	18ba      	adds	r2, r7, r2
 800704e:	8812      	ldrh	r2, [r2, #0]
 8007050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	2bff      	cmp	r3, #255	@ 0xff
 8007060:	d911      	bls.n	8007086 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	22ff      	movs	r2, #255	@ 0xff
 8007066:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706c:	b2da      	uxtb	r2, r3
 800706e:	2380      	movs	r3, #128	@ 0x80
 8007070:	045c      	lsls	r4, r3, #17
 8007072:	230a      	movs	r3, #10
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	8819      	ldrh	r1, [r3, #0]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	4b55      	ldr	r3, [pc, #340]	@ (80071d0 <HAL_I2C_Master_Receive+0x208>)
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	0023      	movs	r3, r4
 8007080:	f001 fc72 	bl	8008968 <I2C_TransferConfig>
 8007084:	e076      	b.n	8007174 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007094:	b2da      	uxtb	r2, r3
 8007096:	2380      	movs	r3, #128	@ 0x80
 8007098:	049c      	lsls	r4, r3, #18
 800709a:	230a      	movs	r3, #10
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	8819      	ldrh	r1, [r3, #0]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	4b4b      	ldr	r3, [pc, #300]	@ (80071d0 <HAL_I2C_Master_Receive+0x208>)
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	0023      	movs	r3, r4
 80070a8:	f001 fc5e 	bl	8008968 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80070ac:	e062      	b.n	8007174 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	0018      	movs	r0, r3
 80070b6:	f001 fac1 	bl	800863c <I2C_WaitOnRXNEFlagUntilTimeout>
 80070ba:	1e03      	subs	r3, r0, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e082      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d03a      	beq.n	8007174 <HAL_I2C_Master_Receive+0x1ac>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007102:	2b00      	cmp	r3, #0
 8007104:	d136      	bne.n	8007174 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	0013      	movs	r3, r2
 8007110:	2200      	movs	r2, #0
 8007112:	2180      	movs	r1, #128	@ 0x80
 8007114:	f001 f9b0 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007118:	1e03      	subs	r3, r0, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e053      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	2bff      	cmp	r3, #255	@ 0xff
 8007128:	d911      	bls.n	800714e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22ff      	movs	r2, #255	@ 0xff
 800712e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007134:	b2da      	uxtb	r2, r3
 8007136:	2380      	movs	r3, #128	@ 0x80
 8007138:	045c      	lsls	r4, r3, #17
 800713a:	230a      	movs	r3, #10
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	8819      	ldrh	r1, [r3, #0]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	2300      	movs	r3, #0
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	0023      	movs	r3, r4
 8007148:	f001 fc0e 	bl	8008968 <I2C_TransferConfig>
 800714c:	e012      	b.n	8007174 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715c:	b2da      	uxtb	r2, r3
 800715e:	2380      	movs	r3, #128	@ 0x80
 8007160:	049c      	lsls	r4, r3, #18
 8007162:	230a      	movs	r3, #10
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	8819      	ldrh	r1, [r3, #0]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	2300      	movs	r3, #0
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	0023      	movs	r3, r4
 8007170:	f001 fbfa 	bl	8008968 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d197      	bne.n	80070ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	0018      	movs	r0, r3
 8007186:	f001 fa15 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d001      	beq.n	8007192 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e01a      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2220      	movs	r2, #32
 8007198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	490b      	ldr	r1, [pc, #44]	@ (80071d4 <HAL_I2C_Master_Receive+0x20c>)
 80071a6:	400a      	ands	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2241      	movs	r2, #65	@ 0x41
 80071ae:	2120      	movs	r1, #32
 80071b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2242      	movs	r2, #66	@ 0x42
 80071b6:	2100      	movs	r1, #0
 80071b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2240      	movs	r2, #64	@ 0x40
 80071be:	2100      	movs	r1, #0
 80071c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
  }
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b007      	add	sp, #28
 80071ce:	bd90      	pop	{r4, r7, pc}
 80071d0:	80002400 	.word	0x80002400
 80071d4:	fe00e800 	.word	0xfe00e800

080071d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b089      	sub	sp, #36	@ 0x24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	000c      	movs	r4, r1
 80071e2:	0010      	movs	r0, r2
 80071e4:	0019      	movs	r1, r3
 80071e6:	230a      	movs	r3, #10
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	1c22      	adds	r2, r4, #0
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	2308      	movs	r3, #8
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	1c02      	adds	r2, r0, #0
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	1dbb      	adds	r3, r7, #6
 80071f8:	1c0a      	adds	r2, r1, #0
 80071fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2241      	movs	r2, #65	@ 0x41
 8007200:	5c9b      	ldrb	r3, [r3, r2]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b20      	cmp	r3, #32
 8007206:	d000      	beq.n	800720a <HAL_I2C_Mem_Write+0x32>
 8007208:	e10c      	b.n	8007424 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_I2C_Mem_Write+0x42>
 8007210:	232c      	movs	r3, #44	@ 0x2c
 8007212:	18fb      	adds	r3, r7, r3
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2280      	movs	r2, #128	@ 0x80
 800721e:	0092      	lsls	r2, r2, #2
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e0ff      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2240      	movs	r2, #64	@ 0x40
 800722a:	5c9b      	ldrb	r3, [r3, r2]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_I2C_Mem_Write+0x5c>
 8007230:	2302      	movs	r3, #2
 8007232:	e0f8      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2240      	movs	r2, #64	@ 0x40
 8007238:	2101      	movs	r1, #1
 800723a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800723c:	f7fd ff88 	bl	8005150 <HAL_GetTick>
 8007240:	0003      	movs	r3, r0
 8007242:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007244:	2380      	movs	r3, #128	@ 0x80
 8007246:	0219      	lsls	r1, r3, #8
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2319      	movs	r3, #25
 8007250:	2201      	movs	r2, #1
 8007252:	f001 f911 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007256:	1e03      	subs	r3, r0, #0
 8007258:	d001      	beq.n	800725e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e0e3      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2241      	movs	r2, #65	@ 0x41
 8007262:	2121      	movs	r1, #33	@ 0x21
 8007264:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2242      	movs	r2, #66	@ 0x42
 800726a:	2140      	movs	r1, #64	@ 0x40
 800726c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	222c      	movs	r2, #44	@ 0x2c
 800727e:	18ba      	adds	r2, r7, r2
 8007280:	8812      	ldrh	r2, [r2, #0]
 8007282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800728a:	1dbb      	adds	r3, r7, #6
 800728c:	881c      	ldrh	r4, [r3, #0]
 800728e:	2308      	movs	r3, #8
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	881a      	ldrh	r2, [r3, #0]
 8007294:	230a      	movs	r3, #10
 8007296:	18fb      	adds	r3, r7, r3
 8007298:	8819      	ldrh	r1, [r3, #0]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	0023      	movs	r3, r4
 80072a6:	f000 fbc1 	bl	8007a2c <I2C_RequestMemoryWrite>
 80072aa:	1e03      	subs	r3, r0, #0
 80072ac:	d005      	beq.n	80072ba <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2240      	movs	r2, #64	@ 0x40
 80072b2:	2100      	movs	r1, #0
 80072b4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e0b5      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2bff      	cmp	r3, #255	@ 0xff
 80072c2:	d911      	bls.n	80072e8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	22ff      	movs	r2, #255	@ 0xff
 80072c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	2380      	movs	r3, #128	@ 0x80
 80072d2:	045c      	lsls	r4, r3, #17
 80072d4:	230a      	movs	r3, #10
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	8819      	ldrh	r1, [r3, #0]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	2300      	movs	r3, #0
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	0023      	movs	r3, r4
 80072e2:	f001 fb41 	bl	8008968 <I2C_TransferConfig>
 80072e6:	e012      	b.n	800730e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	049c      	lsls	r4, r3, #18
 80072fc:	230a      	movs	r3, #10
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	8819      	ldrh	r1, [r3, #0]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	2300      	movs	r3, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	0023      	movs	r3, r4
 800730a:	f001 fb2d 	bl	8008968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	0018      	movs	r0, r3
 8007316:	f001 f907 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 800731a:	1e03      	subs	r3, r0, #0
 800731c:	d001      	beq.n	8007322 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e081      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03a      	beq.n	80073d2 <HAL_I2C_Mem_Write+0x1fa>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d136      	bne.n	80073d2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	0013      	movs	r3, r2
 800736e:	2200      	movs	r2, #0
 8007370:	2180      	movs	r1, #128	@ 0x80
 8007372:	f001 f881 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007376:	1e03      	subs	r3, r0, #0
 8007378:	d001      	beq.n	800737e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e053      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	2bff      	cmp	r3, #255	@ 0xff
 8007386:	d911      	bls.n	80073ac <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	22ff      	movs	r2, #255	@ 0xff
 800738c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007392:	b2da      	uxtb	r2, r3
 8007394:	2380      	movs	r3, #128	@ 0x80
 8007396:	045c      	lsls	r4, r3, #17
 8007398:	230a      	movs	r3, #10
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	8819      	ldrh	r1, [r3, #0]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	2300      	movs	r3, #0
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	0023      	movs	r3, r4
 80073a6:	f001 fadf 	bl	8008968 <I2C_TransferConfig>
 80073aa:	e012      	b.n	80073d2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	2380      	movs	r3, #128	@ 0x80
 80073be:	049c      	lsls	r4, r3, #18
 80073c0:	230a      	movs	r3, #10
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	8819      	ldrh	r1, [r3, #0]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	0023      	movs	r3, r4
 80073ce:	f001 facb 	bl	8008968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d198      	bne.n	800730e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	0018      	movs	r0, r3
 80073e4:	f001 f8e6 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073e8:	1e03      	subs	r3, r0, #0
 80073ea:	d001      	beq.n	80073f0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e01a      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2220      	movs	r2, #32
 80073f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	490b      	ldr	r1, [pc, #44]	@ (8007430 <HAL_I2C_Mem_Write+0x258>)
 8007404:	400a      	ands	r2, r1
 8007406:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2241      	movs	r2, #65	@ 0x41
 800740c:	2120      	movs	r1, #32
 800740e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2242      	movs	r2, #66	@ 0x42
 8007414:	2100      	movs	r1, #0
 8007416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2240      	movs	r2, #64	@ 0x40
 800741c:	2100      	movs	r1, #0
 800741e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b007      	add	sp, #28
 800742c:	bd90      	pop	{r4, r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b089      	sub	sp, #36	@ 0x24
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	000c      	movs	r4, r1
 800743e:	0010      	movs	r0, r2
 8007440:	0019      	movs	r1, r3
 8007442:	230a      	movs	r3, #10
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	1c22      	adds	r2, r4, #0
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	2308      	movs	r3, #8
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	1c02      	adds	r2, r0, #0
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	1c0a      	adds	r2, r1, #0
 8007456:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2241      	movs	r2, #65	@ 0x41
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b20      	cmp	r3, #32
 8007462:	d000      	beq.n	8007466 <HAL_I2C_Mem_Read+0x32>
 8007464:	e110      	b.n	8007688 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <HAL_I2C_Mem_Read+0x42>
 800746c:	232c      	movs	r3, #44	@ 0x2c
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2280      	movs	r2, #128	@ 0x80
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e103      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2240      	movs	r2, #64	@ 0x40
 8007486:	5c9b      	ldrb	r3, [r3, r2]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_I2C_Mem_Read+0x5c>
 800748c:	2302      	movs	r3, #2
 800748e:	e0fc      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	2101      	movs	r1, #1
 8007496:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007498:	f7fd fe5a 	bl	8005150 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074a0:	2380      	movs	r3, #128	@ 0x80
 80074a2:	0219      	lsls	r1, r3, #8
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	2319      	movs	r3, #25
 80074ac:	2201      	movs	r2, #1
 80074ae:	f000 ffe3 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 80074b2:	1e03      	subs	r3, r0, #0
 80074b4:	d001      	beq.n	80074ba <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0e7      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2241      	movs	r2, #65	@ 0x41
 80074be:	2122      	movs	r1, #34	@ 0x22
 80074c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2242      	movs	r2, #66	@ 0x42
 80074c6:	2140      	movs	r1, #64	@ 0x40
 80074c8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	222c      	movs	r2, #44	@ 0x2c
 80074da:	18ba      	adds	r2, r7, r2
 80074dc:	8812      	ldrh	r2, [r2, #0]
 80074de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074e6:	1dbb      	adds	r3, r7, #6
 80074e8:	881c      	ldrh	r4, [r3, #0]
 80074ea:	2308      	movs	r3, #8
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	230a      	movs	r3, #10
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	8819      	ldrh	r1, [r3, #0]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	0023      	movs	r3, r4
 8007502:	f000 faf7 	bl	8007af4 <I2C_RequestMemoryRead>
 8007506:	1e03      	subs	r3, r0, #0
 8007508:	d005      	beq.n	8007516 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2240      	movs	r2, #64	@ 0x40
 800750e:	2100      	movs	r1, #0
 8007510:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e0b9      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2bff      	cmp	r3, #255	@ 0xff
 800751e:	d911      	bls.n	8007544 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	@ 0xff
 8007524:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752a:	b2da      	uxtb	r2, r3
 800752c:	2380      	movs	r3, #128	@ 0x80
 800752e:	045c      	lsls	r4, r3, #17
 8007530:	230a      	movs	r3, #10
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	8819      	ldrh	r1, [r3, #0]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	4b56      	ldr	r3, [pc, #344]	@ (8007694 <HAL_I2C_Mem_Read+0x260>)
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	0023      	movs	r3, r4
 800753e:	f001 fa13 	bl	8008968 <I2C_TransferConfig>
 8007542:	e012      	b.n	800756a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007552:	b2da      	uxtb	r2, r3
 8007554:	2380      	movs	r3, #128	@ 0x80
 8007556:	049c      	lsls	r4, r3, #18
 8007558:	230a      	movs	r3, #10
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	8819      	ldrh	r1, [r3, #0]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	4b4c      	ldr	r3, [pc, #304]	@ (8007694 <HAL_I2C_Mem_Read+0x260>)
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	0023      	movs	r3, r4
 8007566:	f001 f9ff 	bl	8008968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800756a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	0013      	movs	r3, r2
 8007574:	2200      	movs	r2, #0
 8007576:	2104      	movs	r1, #4
 8007578:	f000 ff7e 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 800757c:	1e03      	subs	r3, r0, #0
 800757e:	d001      	beq.n	8007584 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e082      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d03a      	beq.n	8007636 <HAL_I2C_Mem_Read+0x202>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d136      	bne.n	8007636 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	0013      	movs	r3, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	2180      	movs	r1, #128	@ 0x80
 80075d6:	f000 ff4f 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 80075da:	1e03      	subs	r3, r0, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e053      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2bff      	cmp	r3, #255	@ 0xff
 80075ea:	d911      	bls.n	8007610 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	22ff      	movs	r2, #255	@ 0xff
 80075f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	2380      	movs	r3, #128	@ 0x80
 80075fa:	045c      	lsls	r4, r3, #17
 80075fc:	230a      	movs	r3, #10
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	8819      	ldrh	r1, [r3, #0]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	0023      	movs	r3, r4
 800760a:	f001 f9ad 	bl	8008968 <I2C_TransferConfig>
 800760e:	e012      	b.n	8007636 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761e:	b2da      	uxtb	r2, r3
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	049c      	lsls	r4, r3, #18
 8007624:	230a      	movs	r3, #10
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	8819      	ldrh	r1, [r3, #0]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	2300      	movs	r3, #0
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	0023      	movs	r3, r4
 8007632:	f001 f999 	bl	8008968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d194      	bne.n	800756a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	0018      	movs	r0, r3
 8007648:	f000 ffb4 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800764c:	1e03      	subs	r3, r0, #0
 800764e:	d001      	beq.n	8007654 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e01a      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2220      	movs	r2, #32
 800765a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	490c      	ldr	r1, [pc, #48]	@ (8007698 <HAL_I2C_Mem_Read+0x264>)
 8007668:	400a      	ands	r2, r1
 800766a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2241      	movs	r2, #65	@ 0x41
 8007670:	2120      	movs	r1, #32
 8007672:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2242      	movs	r2, #66	@ 0x42
 8007678:	2100      	movs	r1, #0
 800767a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2240      	movs	r2, #64	@ 0x40
 8007680:	2100      	movs	r1, #0
 8007682:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	e000      	b.n	800768a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b007      	add	sp, #28
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	80002400 	.word	0x80002400
 8007698:	fe00e800 	.word	0xfe00e800

0800769c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
  }
}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b004      	add	sp, #16
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	001a      	movs	r2, r3
 80076ee:	2301      	movs	r3, #1
 80076f0:	4013      	ands	r3, r2
 80076f2:	d010      	beq.n	8007716 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	09db      	lsrs	r3, r3, #7
 80076f8:	001a      	movs	r2, r3
 80076fa:	2301      	movs	r3, #1
 80076fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80076fe:	d00a      	beq.n	8007716 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	2201      	movs	r2, #1
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2280      	movs	r2, #128	@ 0x80
 8007712:	0052      	lsls	r2, r2, #1
 8007714:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	0a9b      	lsrs	r3, r3, #10
 800771a:	001a      	movs	r2, r3
 800771c:	2301      	movs	r3, #1
 800771e:	4013      	ands	r3, r2
 8007720:	d010      	beq.n	8007744 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	09db      	lsrs	r3, r3, #7
 8007726:	001a      	movs	r2, r3
 8007728:	2301      	movs	r3, #1
 800772a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800772c:	d00a      	beq.n	8007744 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	2208      	movs	r2, #8
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2280      	movs	r2, #128	@ 0x80
 8007740:	00d2      	lsls	r2, r2, #3
 8007742:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	0a5b      	lsrs	r3, r3, #9
 8007748:	001a      	movs	r2, r3
 800774a:	2301      	movs	r3, #1
 800774c:	4013      	ands	r3, r2
 800774e:	d010      	beq.n	8007772 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	09db      	lsrs	r3, r3, #7
 8007754:	001a      	movs	r2, r3
 8007756:	2301      	movs	r3, #1
 8007758:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800775a:	d00a      	beq.n	8007772 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007760:	2202      	movs	r2, #2
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2280      	movs	r2, #128	@ 0x80
 800776e:	0092      	lsls	r2, r2, #2
 8007770:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007776:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	220b      	movs	r2, #11
 800777c:	4013      	ands	r3, r2
 800777e:	d005      	beq.n	800778c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0011      	movs	r1, r2
 8007786:	0018      	movs	r0, r3
 8007788:	f000 fd0a 	bl	80081a0 <I2C_ITError>
  }
}
 800778c:	46c0      	nop			@ (mov r8, r8)
 800778e:	46bd      	mov	sp, r7
 8007790:	b006      	add	sp, #24
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800779c:	46c0      	nop			@ (mov r8, r8)
 800779e:	46bd      	mov	sp, r7
 80077a0:	b002      	add	sp, #8
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80077ac:	46c0      	nop			@ (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	0008      	movs	r0, r1
 80077be:	0011      	movs	r1, r2
 80077c0:	1cfb      	adds	r3, r7, #3
 80077c2:	1c02      	adds	r2, r0, #0
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	003b      	movs	r3, r7
 80077c8:	1c0a      	adds	r2, r1, #0
 80077ca:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80077cc:	46c0      	nop			@ (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80077dc:	46c0      	nop			@ (mov r8, r8)
 80077de:	46bd      	mov	sp, r7
 80077e0:	b002      	add	sp, #8
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80077ec:	46c0      	nop			@ (mov r8, r8)
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80077fc:	46c0      	nop			@ (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}

08007804 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2240      	movs	r2, #64	@ 0x40
 800781e:	5c9b      	ldrb	r3, [r3, r2]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <I2C_Slave_ISR_IT+0x24>
 8007824:	2302      	movs	r3, #2
 8007826:	e0fb      	b.n	8007a20 <I2C_Slave_ISR_IT+0x21c>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	2101      	movs	r1, #1
 800782e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	001a      	movs	r2, r3
 8007836:	2301      	movs	r3, #1
 8007838:	4013      	ands	r3, r2
 800783a:	d00c      	beq.n	8007856 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	001a      	movs	r2, r3
 8007842:	2301      	movs	r3, #1
 8007844:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007846:	d006      	beq.n	8007856 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f000 fabc 	bl	8007dcc <I2C_ITSlaveCplt>
 8007854:	e0df      	b.n	8007a16 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	091b      	lsrs	r3, r3, #4
 800785a:	001a      	movs	r2, r3
 800785c:	2301      	movs	r3, #1
 800785e:	4013      	ands	r3, r2
 8007860:	d054      	beq.n	800790c <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	091b      	lsrs	r3, r3, #4
 8007866:	001a      	movs	r2, r3
 8007868:	2301      	movs	r3, #1
 800786a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800786c:	d04e      	beq.n	800790c <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d12d      	bne.n	80078d4 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2241      	movs	r2, #65	@ 0x41
 800787c:	5c9b      	ldrb	r3, [r3, r2]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b28      	cmp	r3, #40	@ 0x28
 8007882:	d10b      	bne.n	800789c <I2C_Slave_ISR_IT+0x98>
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	2380      	movs	r3, #128	@ 0x80
 8007888:	049b      	lsls	r3, r3, #18
 800788a:	429a      	cmp	r2, r3
 800788c:	d106      	bne.n	800789c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	0011      	movs	r1, r2
 8007894:	0018      	movs	r0, r3
 8007896:	f000 fc29 	bl	80080ec <I2C_ITListenCplt>
 800789a:	e036      	b.n	800790a <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2241      	movs	r2, #65	@ 0x41
 80078a0:	5c9b      	ldrb	r3, [r3, r2]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b29      	cmp	r3, #41	@ 0x29
 80078a6:	d110      	bne.n	80078ca <I2C_Slave_ISR_IT+0xc6>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4a5f      	ldr	r2, [pc, #380]	@ (8007a28 <I2C_Slave_ISR_IT+0x224>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00c      	beq.n	80078ca <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2210      	movs	r2, #16
 80078b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	0018      	movs	r0, r3
 80078bc:	f000 fd9b 	bl	80083f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 fa1c 	bl	8007d00 <I2C_ITSlaveSeqCplt>
 80078c8:	e01f      	b.n	800790a <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2210      	movs	r2, #16
 80078d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80078d2:	e09d      	b.n	8007a10 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2210      	movs	r2, #16
 80078da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e0:	2204      	movs	r2, #4
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <I2C_Slave_ISR_IT+0xf6>
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	2380      	movs	r3, #128	@ 0x80
 80078f2:	045b      	lsls	r3, r3, #17
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d000      	beq.n	80078fa <I2C_Slave_ISR_IT+0xf6>
 80078f8:	e08a      	b.n	8007a10 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	0011      	movs	r1, r2
 8007902:	0018      	movs	r0, r3
 8007904:	f000 fc4c 	bl	80081a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007908:	e082      	b.n	8007a10 <I2C_Slave_ISR_IT+0x20c>
 800790a:	e081      	b.n	8007a10 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	089b      	lsrs	r3, r3, #2
 8007910:	001a      	movs	r2, r3
 8007912:	2301      	movs	r3, #1
 8007914:	4013      	ands	r3, r2
 8007916:	d031      	beq.n	800797c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	089b      	lsrs	r3, r3, #2
 800791c:	001a      	movs	r2, r3
 800791e:	2301      	movs	r3, #1
 8007920:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007922:	d02b      	beq.n	800797c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d018      	beq.n	8007960 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d154      	bne.n	8007a14 <I2C_Slave_ISR_IT+0x210>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <I2C_Slave_ISR_IT+0x224>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d050      	beq.n	8007a14 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	0018      	movs	r0, r3
 8007976:	f000 f9c3 	bl	8007d00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800797a:	e04b      	b.n	8007a14 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	08db      	lsrs	r3, r3, #3
 8007980:	001a      	movs	r2, r3
 8007982:	2301      	movs	r3, #1
 8007984:	4013      	ands	r3, r2
 8007986:	d00c      	beq.n	80079a2 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	08db      	lsrs	r3, r3, #3
 800798c:	001a      	movs	r2, r3
 800798e:	2301      	movs	r3, #1
 8007990:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007992:	d006      	beq.n	80079a2 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0011      	movs	r1, r2
 800799a:	0018      	movs	r0, r3
 800799c:	f000 f90c 	bl	8007bb8 <I2C_ITAddrCplt>
 80079a0:	e039      	b.n	8007a16 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	001a      	movs	r2, r3
 80079a8:	2301      	movs	r3, #1
 80079aa:	4013      	ands	r3, r2
 80079ac:	d033      	beq.n	8007a16 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	001a      	movs	r2, r3
 80079b4:	2301      	movs	r3, #1
 80079b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079b8:	d02d      	beq.n	8007a16 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d018      	beq.n	80079f6 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80079f4:	e00f      	b.n	8007a16 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	2380      	movs	r3, #128	@ 0x80
 80079fa:	045b      	lsls	r3, r3, #17
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d002      	beq.n	8007a06 <I2C_Slave_ISR_IT+0x202>
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d107      	bne.n	8007a16 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f000 f979 	bl	8007d00 <I2C_ITSlaveSeqCplt>
 8007a0e:	e002      	b.n	8007a16 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8007a10:	46c0      	nop			@ (mov r8, r8)
 8007a12:	e000      	b.n	8007a16 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8007a14:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2240      	movs	r2, #64	@ 0x40
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b006      	add	sp, #24
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	ffff0000 	.word	0xffff0000

08007a2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a2c:	b5b0      	push	{r4, r5, r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	000c      	movs	r4, r1
 8007a36:	0010      	movs	r0, r2
 8007a38:	0019      	movs	r1, r3
 8007a3a:	250a      	movs	r5, #10
 8007a3c:	197b      	adds	r3, r7, r5
 8007a3e:	1c22      	adds	r2, r4, #0
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	2308      	movs	r3, #8
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	1c02      	adds	r2, r0, #0
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	1dbb      	adds	r3, r7, #6
 8007a4c:	1c0a      	adds	r2, r1, #0
 8007a4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a50:	1dbb      	adds	r3, r7, #6
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	045c      	lsls	r4, r3, #17
 8007a5a:	197b      	adds	r3, r7, r5
 8007a5c:	8819      	ldrh	r1, [r3, #0]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	4b23      	ldr	r3, [pc, #140]	@ (8007af0 <I2C_RequestMemoryWrite+0xc4>)
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	0023      	movs	r3, r4
 8007a66:	f000 ff7f 	bl	8008968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a6c:	6a39      	ldr	r1, [r7, #32]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	0018      	movs	r0, r3
 8007a72:	f000 fd59 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a76:	1e03      	subs	r3, r0, #0
 8007a78:	d001      	beq.n	8007a7e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e033      	b.n	8007ae6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a7e:	1dbb      	adds	r3, r7, #6
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d107      	bne.n	8007a96 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a86:	2308      	movs	r3, #8
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a94:	e019      	b.n	8007aca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a96:	2308      	movs	r3, #8
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	0a1b      	lsrs	r3, r3, #8
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aaa:	6a39      	ldr	r1, [r7, #32]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 fd3a 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ab4:	1e03      	subs	r3, r0, #0
 8007ab6:	d001      	beq.n	8007abc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e014      	b.n	8007ae6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007abc:	2308      	movs	r3, #8
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	0013      	movs	r3, r2
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2180      	movs	r1, #128	@ 0x80
 8007ad8:	f000 fcce 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007adc:	1e03      	subs	r3, r0, #0
 8007ade:	d001      	beq.n	8007ae4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b004      	add	sp, #16
 8007aec:	bdb0      	pop	{r4, r5, r7, pc}
 8007aee:	46c0      	nop			@ (mov r8, r8)
 8007af0:	80002000 	.word	0x80002000

08007af4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007af4:	b5b0      	push	{r4, r5, r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	000c      	movs	r4, r1
 8007afe:	0010      	movs	r0, r2
 8007b00:	0019      	movs	r1, r3
 8007b02:	250a      	movs	r5, #10
 8007b04:	197b      	adds	r3, r7, r5
 8007b06:	1c22      	adds	r2, r4, #0
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	1c02      	adds	r2, r0, #0
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	1dbb      	adds	r3, r7, #6
 8007b14:	1c0a      	adds	r2, r1, #0
 8007b16:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b18:	1dbb      	adds	r3, r7, #6
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	197b      	adds	r3, r7, r5
 8007b20:	8819      	ldrh	r1, [r3, #0]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <I2C_RequestMemoryRead+0xc0>)
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f000 ff1d 	bl	8008968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b30:	6a39      	ldr	r1, [r7, #32]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 fcf7 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b3a:	1e03      	subs	r3, r0, #0
 8007b3c:	d001      	beq.n	8007b42 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e033      	b.n	8007baa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b42:	1dbb      	adds	r3, r7, #6
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d107      	bne.n	8007b5a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b58:	e019      	b.n	8007b8e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	0a1b      	lsrs	r3, r3, #8
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6e:	6a39      	ldr	r1, [r7, #32]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	0018      	movs	r0, r3
 8007b74:	f000 fcd8 	bl	8008528 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d001      	beq.n	8007b80 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e014      	b.n	8007baa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b80:	2308      	movs	r3, #8
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	0013      	movs	r3, r2
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2140      	movs	r1, #64	@ 0x40
 8007b9c:	f000 fc6c 	bl	8008478 <I2C_WaitOnFlagUntilTimeout>
 8007ba0:	1e03      	subs	r3, r0, #0
 8007ba2:	d001      	beq.n	8007ba8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	0018      	movs	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b004      	add	sp, #16
 8007bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	80002000 	.word	0x80002000

08007bb8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007bb8:	b5b0      	push	{r4, r5, r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2241      	movs	r2, #65	@ 0x41
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	001a      	movs	r2, r3
 8007bcc:	2328      	movs	r3, #40	@ 0x28
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2b28      	cmp	r3, #40	@ 0x28
 8007bd2:	d000      	beq.n	8007bd6 <I2C_ITAddrCplt+0x1e>
 8007bd4:	e088      	b.n	8007ce8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	250f      	movs	r5, #15
 8007be2:	197b      	adds	r3, r7, r5
 8007be4:	2101      	movs	r1, #1
 8007be6:	400a      	ands	r2, r1
 8007be8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	200c      	movs	r0, #12
 8007bf6:	183b      	adds	r3, r7, r0
 8007bf8:	21fe      	movs	r1, #254	@ 0xfe
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	240a      	movs	r4, #10
 8007c08:	193b      	adds	r3, r7, r4
 8007c0a:	0592      	lsls	r2, r2, #22
 8007c0c:	0d92      	lsrs	r2, r2, #22
 8007c0e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	2308      	movs	r3, #8
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	21fe      	movs	r1, #254	@ 0xfe
 8007c1e:	400a      	ands	r2, r1
 8007c20:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d148      	bne.n	8007cbc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007c2a:	0021      	movs	r1, r4
 8007c2c:	187b      	adds	r3, r7, r1
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	09db      	lsrs	r3, r3, #7
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	183b      	adds	r3, r7, r0
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	4053      	eors	r3, r2
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	001a      	movs	r2, r3
 8007c3e:	2306      	movs	r3, #6
 8007c40:	4013      	ands	r3, r2
 8007c42:	d120      	bne.n	8007c86 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8007c44:	183b      	adds	r3, r7, r0
 8007c46:	187a      	adds	r2, r7, r1
 8007c48:	8812      	ldrh	r2, [r2, #0]
 8007c4a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d14c      	bne.n	8007cf8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2208      	movs	r2, #8
 8007c6a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2240      	movs	r2, #64	@ 0x40
 8007c70:	2100      	movs	r1, #0
 8007c72:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c74:	183b      	adds	r3, r7, r0
 8007c76:	881a      	ldrh	r2, [r3, #0]
 8007c78:	197b      	adds	r3, r7, r5
 8007c7a:	7819      	ldrb	r1, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7ff fd98 	bl	80077b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c84:	e038      	b.n	8007cf8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8007c86:	240c      	movs	r4, #12
 8007c88:	193b      	adds	r3, r7, r4
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	18ba      	adds	r2, r7, r2
 8007c8e:	8812      	ldrh	r2, [r2, #0]
 8007c90:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007c92:	2380      	movs	r3, #128	@ 0x80
 8007c94:	021a      	lsls	r2, r3, #8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0011      	movs	r1, r2
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f000 fe9e 	bl	80089dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2240      	movs	r2, #64	@ 0x40
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ca8:	193b      	adds	r3, r7, r4
 8007caa:	881a      	ldrh	r2, [r3, #0]
 8007cac:	230f      	movs	r3, #15
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	7819      	ldrb	r1, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7ff fd7d 	bl	80077b4 <HAL_I2C_AddrCallback>
}
 8007cba:	e01d      	b.n	8007cf8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007cbc:	2380      	movs	r3, #128	@ 0x80
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0011      	movs	r1, r2
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f000 fe89 	bl	80089dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2240      	movs	r2, #64	@ 0x40
 8007cce:	2100      	movs	r1, #0
 8007cd0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	230f      	movs	r3, #15
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	7819      	ldrb	r1, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f7ff fd67 	bl	80077b4 <HAL_I2C_AddrCallback>
}
 8007ce6:	e007      	b.n	8007cf8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2208      	movs	r2, #8
 8007cee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2240      	movs	r2, #64	@ 0x40
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	5499      	strb	r1, [r3, r2]
}
 8007cf8:	46c0      	nop			@ (mov r8, r8)
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b004      	add	sp, #16
 8007cfe:	bdb0      	pop	{r4, r5, r7, pc}

08007d00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2242      	movs	r2, #66	@ 0x42
 8007d14:	2100      	movs	r1, #0
 8007d16:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	0b9b      	lsrs	r3, r3, #14
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4013      	ands	r3, r2
 8007d22:	d008      	beq.n	8007d36 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4925      	ldr	r1, [pc, #148]	@ (8007dc4 <I2C_ITSlaveSeqCplt+0xc4>)
 8007d30:	400a      	ands	r2, r1
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e00d      	b.n	8007d52 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	0bdb      	lsrs	r3, r3, #15
 8007d3a:	001a      	movs	r2, r3
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d007      	beq.n	8007d52 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	491e      	ldr	r1, [pc, #120]	@ (8007dc8 <I2C_ITSlaveSeqCplt+0xc8>)
 8007d4e:	400a      	ands	r2, r1
 8007d50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2241      	movs	r2, #65	@ 0x41
 8007d56:	5c9b      	ldrb	r3, [r3, r2]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b29      	cmp	r3, #41	@ 0x29
 8007d5c:	d114      	bne.n	8007d88 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2241      	movs	r2, #65	@ 0x41
 8007d62:	2128      	movs	r1, #40	@ 0x28
 8007d64:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2221      	movs	r2, #33	@ 0x21
 8007d6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2101      	movs	r1, #1
 8007d70:	0018      	movs	r0, r3
 8007d72:	f000 fe33 	bl	80089dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2240      	movs	r2, #64	@ 0x40
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	0018      	movs	r0, r3
 8007d82:	f7ff fd07 	bl	8007794 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d86:	e019      	b.n	8007dbc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2241      	movs	r2, #65	@ 0x41
 8007d8c:	5c9b      	ldrb	r3, [r3, r2]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d92:	d113      	bne.n	8007dbc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2241      	movs	r2, #65	@ 0x41
 8007d98:	2128      	movs	r1, #40	@ 0x28
 8007d9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2222      	movs	r2, #34	@ 0x22
 8007da0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2102      	movs	r1, #2
 8007da6:	0018      	movs	r0, r3
 8007da8:	f000 fe18 	bl	80089dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2240      	movs	r2, #64	@ 0x40
 8007db0:	2100      	movs	r1, #0
 8007db2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff fcf4 	bl	80077a4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dbc:	46c0      	nop			@ (mov r8, r8)
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b004      	add	sp, #16
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	ffffbfff 	.word	0xffffbfff
 8007dc8:	ffff7fff 	.word	0xffff7fff

08007dcc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007de8:	200b      	movs	r0, #11
 8007dea:	183b      	adds	r3, r7, r0
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	2141      	movs	r1, #65	@ 0x41
 8007df0:	5c52      	ldrb	r2, [r2, r1]
 8007df2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007dfc:	183b      	adds	r3, r7, r0
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b21      	cmp	r3, #33	@ 0x21
 8007e02:	d003      	beq.n	8007e0c <I2C_ITSlaveCplt+0x40>
 8007e04:	183b      	adds	r3, r7, r0
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b29      	cmp	r3, #41	@ 0x29
 8007e0a:	d109      	bne.n	8007e20 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e0c:	4ab0      	ldr	r2, [pc, #704]	@ (80080d0 <I2C_ITSlaveCplt+0x304>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f000 fde2 	bl	80089dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2221      	movs	r2, #33	@ 0x21
 8007e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e1e:	e020      	b.n	8007e62 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e20:	220b      	movs	r2, #11
 8007e22:	18bb      	adds	r3, r7, r2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b22      	cmp	r3, #34	@ 0x22
 8007e28:	d003      	beq.n	8007e32 <I2C_ITSlaveCplt+0x66>
 8007e2a:	18bb      	adds	r3, r7, r2
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e30:	d109      	bne.n	8007e46 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e32:	4aa8      	ldr	r2, [pc, #672]	@ (80080d4 <I2C_ITSlaveCplt+0x308>)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0011      	movs	r1, r2
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f000 fdcf 	bl	80089dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2222      	movs	r2, #34	@ 0x22
 8007e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e44:	e00d      	b.n	8007e62 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e46:	230b      	movs	r3, #11
 8007e48:	18fb      	adds	r3, r7, r3
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b28      	cmp	r3, #40	@ 0x28
 8007e4e:	d108      	bne.n	8007e62 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e50:	4aa1      	ldr	r2, [pc, #644]	@ (80080d8 <I2C_ITSlaveCplt+0x30c>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	0011      	movs	r1, r2
 8007e56:	0018      	movs	r0, r3
 8007e58:	f000 fdc0 	bl	80089dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2180      	movs	r1, #128	@ 0x80
 8007e6e:	0209      	lsls	r1, r1, #8
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4997      	ldr	r1, [pc, #604]	@ (80080dc <I2C_ITSlaveCplt+0x310>)
 8007e80:	400a      	ands	r2, r1
 8007e82:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	0018      	movs	r0, r3
 8007e88:	f000 fab5 	bl	80083f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	0b9b      	lsrs	r3, r3, #14
 8007e90:	001a      	movs	r2, r3
 8007e92:	2301      	movs	r3, #1
 8007e94:	4013      	ands	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	498f      	ldr	r1, [pc, #572]	@ (80080e0 <I2C_ITSlaveCplt+0x314>)
 8007ea4:	400a      	ands	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d020      	beq.n	8007ef2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ebe:	e018      	b.n	8007ef2 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	0bdb      	lsrs	r3, r3, #15
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4013      	ands	r3, r2
 8007eca:	d012      	beq.n	8007ef2 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4983      	ldr	r1, [pc, #524]	@ (80080e4 <I2C_ITSlaveCplt+0x318>)
 8007ed8:	400a      	ands	r2, r1
 8007eda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d006      	beq.n	8007ef2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	001a      	movs	r2, r3
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4013      	ands	r3, r2
 8007efc:	d020      	beq.n	8007f40 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2204      	movs	r2, #4
 8007f02:	4393      	bics	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00c      	beq.n	8007f40 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4e:	2204      	movs	r2, #4
 8007f50:	431a      	orrs	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	091b      	lsrs	r3, r3, #4
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	4013      	ands	r3, r2
 8007f60:	d051      	beq.n	8008006 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	001a      	movs	r2, r3
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f6c:	d04b      	beq.n	8008006 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d12d      	bne.n	8007fd4 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2241      	movs	r2, #65	@ 0x41
 8007f7c:	5c9b      	ldrb	r3, [r3, r2]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b28      	cmp	r3, #40	@ 0x28
 8007f82:	d10b      	bne.n	8007f9c <I2C_ITSlaveCplt+0x1d0>
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	2380      	movs	r3, #128	@ 0x80
 8007f88:	049b      	lsls	r3, r3, #18
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d106      	bne.n	8007f9c <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f8a9 	bl	80080ec <I2C_ITListenCplt>
 8007f9a:	e034      	b.n	8008006 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2241      	movs	r2, #65	@ 0x41
 8007fa0:	5c9b      	ldrb	r3, [r3, r2]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b29      	cmp	r3, #41	@ 0x29
 8007fa6:	d110      	bne.n	8007fca <I2C_ITSlaveCplt+0x1fe>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a4f      	ldr	r2, [pc, #316]	@ (80080e8 <I2C_ITSlaveCplt+0x31c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00c      	beq.n	8007fca <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2210      	movs	r2, #16
 8007fb6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f000 fa1b 	bl	80083f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	f7ff fe9c 	bl	8007d00 <I2C_ITSlaveSeqCplt>
 8007fc8:	e01d      	b.n	8008006 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	61da      	str	r2, [r3, #28]
 8007fd2:	e018      	b.n	8008006 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2210      	movs	r2, #16
 8007fda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <I2C_ITSlaveCplt+0x22c>
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	045b      	lsls	r3, r3, #17
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d106      	bne.n	8008006 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	0011      	movs	r1, r2
 8008000:	0018      	movs	r0, r3
 8008002:	f000 f8cd 	bl	80081a0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2242      	movs	r2, #66	@ 0x42
 800800a:	2100      	movs	r1, #0
 800800c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	0011      	movs	r1, r2
 8008024:	0018      	movs	r0, r3
 8008026:	f000 f8bb 	bl	80081a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2241      	movs	r2, #65	@ 0x41
 800802e:	5c9b      	ldrb	r3, [r3, r2]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b28      	cmp	r3, #40	@ 0x28
 8008034:	d147      	bne.n	80080c6 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	0011      	movs	r1, r2
 800803c:	0018      	movs	r0, r3
 800803e:	f000 f855 	bl	80080ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008042:	e040      	b.n	80080c6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	4a27      	ldr	r2, [pc, #156]	@ (80080e8 <I2C_ITSlaveCplt+0x31c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d016      	beq.n	800807c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	0018      	movs	r0, r3
 8008052:	f7ff fe55 	bl	8007d00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a23      	ldr	r2, [pc, #140]	@ (80080e8 <I2C_ITSlaveCplt+0x31c>)
 800805a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2241      	movs	r2, #65	@ 0x41
 8008060:	2120      	movs	r1, #32
 8008062:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	@ 0x40
 800806e:	2100      	movs	r1, #0
 8008070:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	0018      	movs	r0, r3
 8008076:	f7ff fbad 	bl	80077d4 <HAL_I2C_ListenCpltCallback>
}
 800807a:	e024      	b.n	80080c6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2241      	movs	r2, #65	@ 0x41
 8008080:	5c9b      	ldrb	r3, [r3, r2]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b22      	cmp	r3, #34	@ 0x22
 8008086:	d10f      	bne.n	80080a8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2241      	movs	r2, #65	@ 0x41
 800808c:	2120      	movs	r1, #32
 800808e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2240      	movs	r2, #64	@ 0x40
 800809a:	2100      	movs	r1, #0
 800809c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	0018      	movs	r0, r3
 80080a2:	f7ff fb7f 	bl	80077a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80080a6:	e00e      	b.n	80080c6 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2241      	movs	r2, #65	@ 0x41
 80080ac:	2120      	movs	r1, #32
 80080ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2240      	movs	r2, #64	@ 0x40
 80080ba:	2100      	movs	r1, #0
 80080bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	0018      	movs	r0, r3
 80080c2:	f7ff fb67 	bl	8007794 <HAL_I2C_SlaveTxCpltCallback>
}
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b006      	add	sp, #24
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	46c0      	nop			@ (mov r8, r8)
 80080d0:	00008001 	.word	0x00008001
 80080d4:	00008002 	.word	0x00008002
 80080d8:	00008003 	.word	0x00008003
 80080dc:	fe00e800 	.word	0xfe00e800
 80080e0:	ffffbfff 	.word	0xffffbfff
 80080e4:	ffff7fff 	.word	0xffff7fff
 80080e8:	ffff0000 	.word	0xffff0000

080080ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a27      	ldr	r2, [pc, #156]	@ (8008198 <I2C_ITListenCplt+0xac>)
 80080fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2241      	movs	r2, #65	@ 0x41
 8008106:	2120      	movs	r1, #32
 8008108:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2242      	movs	r2, #66	@ 0x42
 800810e:	2100      	movs	r1, #0
 8008110:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	001a      	movs	r2, r3
 800811e:	2301      	movs	r3, #1
 8008120:	4013      	ands	r3, r2
 8008122:	d022      	beq.n	800816a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008140:	2b00      	cmp	r3, #0
 8008142:	d012      	beq.n	800816a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	2204      	movs	r2, #4
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800816a:	4a0c      	ldr	r2, [pc, #48]	@ (800819c <I2C_ITListenCplt+0xb0>)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	0011      	movs	r1, r2
 8008170:	0018      	movs	r0, r3
 8008172:	f000 fc33 	bl	80089dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2210      	movs	r2, #16
 800817c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2240      	movs	r2, #64	@ 0x40
 8008182:	2100      	movs	r1, #0
 8008184:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff fb23 	bl	80077d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	46bd      	mov	sp, r7
 8008192:	b002      	add	sp, #8
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	ffff0000 	.word	0xffff0000
 800819c:	00008003 	.word	0x00008003

080081a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081aa:	200f      	movs	r0, #15
 80081ac:	183b      	adds	r3, r7, r0
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	2141      	movs	r1, #65	@ 0x41
 80081b2:	5c52      	ldrb	r2, [r2, r1]
 80081b4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2242      	movs	r2, #66	@ 0x42
 80081ba:	2100      	movs	r1, #0
 80081bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a72      	ldr	r2, [pc, #456]	@ (800838c <I2C_ITError+0x1ec>)
 80081c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80081d6:	183b      	adds	r3, r7, r0
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b28      	cmp	r3, #40	@ 0x28
 80081dc:	d007      	beq.n	80081ee <I2C_ITError+0x4e>
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b29      	cmp	r3, #41	@ 0x29
 80081e4:	d003      	beq.n	80081ee <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80081e6:	183b      	adds	r3, r7, r0
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ec:	d10c      	bne.n	8008208 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2103      	movs	r1, #3
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 fbf2 	bl	80089dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2241      	movs	r2, #65	@ 0x41
 80081fc:	2128      	movs	r1, #40	@ 0x28
 80081fe:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a63      	ldr	r2, [pc, #396]	@ (8008390 <I2C_ITError+0x1f0>)
 8008204:	635a      	str	r2, [r3, #52]	@ 0x34
 8008206:	e032      	b.n	800826e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008208:	4a62      	ldr	r2, [pc, #392]	@ (8008394 <I2C_ITError+0x1f4>)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0011      	movs	r1, r2
 800820e:	0018      	movs	r0, r3
 8008210:	f000 fbe4 	bl	80089dc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	0018      	movs	r0, r3
 8008218:	f000 f8ed 	bl	80083f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2241      	movs	r2, #65	@ 0x41
 8008220:	5c9b      	ldrb	r3, [r3, r2]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b60      	cmp	r3, #96	@ 0x60
 8008226:	d01f      	beq.n	8008268 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2241      	movs	r2, #65	@ 0x41
 800822c:	2120      	movs	r1, #32
 800822e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	2220      	movs	r2, #32
 8008238:	4013      	ands	r3, r2
 800823a:	2b20      	cmp	r3, #32
 800823c:	d114      	bne.n	8008268 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	2210      	movs	r2, #16
 8008246:	4013      	ands	r3, r2
 8008248:	2b10      	cmp	r3, #16
 800824a:	d109      	bne.n	8008260 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2210      	movs	r2, #16
 8008252:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008258:	2204      	movs	r2, #4
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2220      	movs	r2, #32
 8008266:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008272:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d03b      	beq.n	80082f4 <I2C_ITError+0x154>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b11      	cmp	r3, #17
 8008280:	d002      	beq.n	8008288 <I2C_ITError+0xe8>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b21      	cmp	r3, #33	@ 0x21
 8008286:	d135      	bne.n	80082f4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	2380      	movs	r3, #128	@ 0x80
 8008290:	01db      	lsls	r3, r3, #7
 8008292:	401a      	ands	r2, r3
 8008294:	2380      	movs	r3, #128	@ 0x80
 8008296:	01db      	lsls	r3, r3, #7
 8008298:	429a      	cmp	r2, r3
 800829a:	d107      	bne.n	80082ac <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	493c      	ldr	r1, [pc, #240]	@ (8008398 <I2C_ITError+0x1f8>)
 80082a8:	400a      	ands	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7fe fa4b 	bl	800674c <HAL_DMA_GetState>
 80082b6:	0003      	movs	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d016      	beq.n	80082ea <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	4a36      	ldr	r2, [pc, #216]	@ (800839c <I2C_ITError+0x1fc>)
 80082c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2240      	movs	r2, #64	@ 0x40
 80082c8:	2100      	movs	r1, #0
 80082ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7fe f91f 	bl	8006514 <HAL_DMA_Abort_IT>
 80082d6:	1e03      	subs	r3, r0, #0
 80082d8:	d051      	beq.n	800837e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e4:	0018      	movs	r0, r3
 80082e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082e8:	e049      	b.n	800837e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 f859 	bl	80083a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082f2:	e044      	b.n	800837e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d03b      	beq.n	8008374 <I2C_ITError+0x1d4>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b12      	cmp	r3, #18
 8008300:	d002      	beq.n	8008308 <I2C_ITError+0x168>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b22      	cmp	r3, #34	@ 0x22
 8008306:	d135      	bne.n	8008374 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	2380      	movs	r3, #128	@ 0x80
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	401a      	ands	r2, r3
 8008314:	2380      	movs	r3, #128	@ 0x80
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	429a      	cmp	r2, r3
 800831a:	d107      	bne.n	800832c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	491e      	ldr	r1, [pc, #120]	@ (80083a0 <I2C_ITError+0x200>)
 8008328:	400a      	ands	r2, r1
 800832a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008330:	0018      	movs	r0, r3
 8008332:	f7fe fa0b 	bl	800674c <HAL_DMA_GetState>
 8008336:	0003      	movs	r3, r0
 8008338:	2b01      	cmp	r3, #1
 800833a:	d016      	beq.n	800836a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008340:	4a16      	ldr	r2, [pc, #88]	@ (800839c <I2C_ITError+0x1fc>)
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2240      	movs	r2, #64	@ 0x40
 8008348:	2100      	movs	r1, #0
 800834a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008350:	0018      	movs	r0, r3
 8008352:	f7fe f8df 	bl	8006514 <HAL_DMA_Abort_IT>
 8008356:	1e03      	subs	r3, r0, #0
 8008358:	d013      	beq.n	8008382 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008364:	0018      	movs	r0, r3
 8008366:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008368:	e00b      	b.n	8008382 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	0018      	movs	r0, r3
 800836e:	f000 f819 	bl	80083a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008372:	e006      	b.n	8008382 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	0018      	movs	r0, r3
 8008378:	f000 f814 	bl	80083a4 <I2C_TreatErrorCallback>
  }
}
 800837c:	e002      	b.n	8008384 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	e000      	b.n	8008384 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008382:	46c0      	nop			@ (mov r8, r8)
}
 8008384:	46c0      	nop			@ (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}
 800838c:	ffff0000 	.word	0xffff0000
 8008390:	08007805 	.word	0x08007805
 8008394:	00008003 	.word	0x00008003
 8008398:	ffffbfff 	.word	0xffffbfff
 800839c:	0800843b 	.word	0x0800843b
 80083a0:	ffff7fff 	.word	0xffff7fff

080083a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2241      	movs	r2, #65	@ 0x41
 80083b0:	5c9b      	ldrb	r3, [r3, r2]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b60      	cmp	r3, #96	@ 0x60
 80083b6:	d10f      	bne.n	80083d8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2241      	movs	r2, #65	@ 0x41
 80083bc:	2120      	movs	r1, #32
 80083be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2240      	movs	r2, #64	@ 0x40
 80083ca:	2100      	movs	r1, #0
 80083cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7ff fa0f 	bl	80077f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083d6:	e00a      	b.n	80083ee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2240      	movs	r2, #64	@ 0x40
 80083e2:	2100      	movs	r1, #0
 80083e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	0018      	movs	r0, r3
 80083ea:	f7ff f9fb 	bl	80077e4 <HAL_I2C_ErrorCallback>
}
 80083ee:	46c0      	nop			@ (mov r8, r8)
 80083f0:	46bd      	mov	sp, r7
 80083f2:	b002      	add	sp, #8
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2202      	movs	r2, #2
 8008406:	4013      	ands	r3, r2
 8008408:	2b02      	cmp	r3, #2
 800840a:	d103      	bne.n	8008414 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	2201      	movs	r2, #1
 800841c:	4013      	ands	r3, r2
 800841e:	2b01      	cmp	r3, #1
 8008420:	d007      	beq.n	8008432 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2101      	movs	r1, #1
 800842e:	430a      	orrs	r2, r1
 8008430:	619a      	str	r2, [r3, #24]
  }
}
 8008432:	46c0      	nop			@ (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b002      	add	sp, #8
 8008438:	bd80      	pop	{r7, pc}

0800843a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	2200      	movs	r2, #0
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008464:	2200      	movs	r2, #0
 8008466:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	0018      	movs	r0, r3
 800846c:	f7ff ff9a 	bl	80083a4 <I2C_TreatErrorCallback>
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b004      	add	sp, #16
 8008476:	bd80      	pop	{r7, pc}

08008478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	1dfb      	adds	r3, r7, #7
 8008486:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008488:	e03a      	b.n	8008500 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	0018      	movs	r0, r3
 8008492:	f000 f971 	bl	8008778 <I2C_IsErrorOccurred>
 8008496:	1e03      	subs	r3, r0, #0
 8008498:	d001      	beq.n	800849e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e040      	b.n	8008520 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	d02d      	beq.n	8008500 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a4:	f7fc fe54 	bl	8005150 <HAL_GetTick>
 80084a8:	0002      	movs	r2, r0
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d302      	bcc.n	80084ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d122      	bne.n	8008500 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	4013      	ands	r3, r2
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	425a      	negs	r2, r3
 80084ca:	4153      	adcs	r3, r2
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	001a      	movs	r2, r3
 80084d0:	1dfb      	adds	r3, r7, #7
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d113      	bne.n	8008500 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084dc:	2220      	movs	r2, #32
 80084de:	431a      	orrs	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2241      	movs	r2, #65	@ 0x41
 80084e8:	2120      	movs	r1, #32
 80084ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2242      	movs	r2, #66	@ 0x42
 80084f0:	2100      	movs	r1, #0
 80084f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2240      	movs	r2, #64	@ 0x40
 80084f8:	2100      	movs	r1, #0
 80084fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e00f      	b.n	8008520 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4013      	ands	r3, r2
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	425a      	negs	r2, r3
 8008510:	4153      	adcs	r3, r2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	001a      	movs	r2, r3
 8008516:	1dfb      	adds	r3, r7, #7
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d0b5      	beq.n	800848a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	0018      	movs	r0, r3
 8008522:	46bd      	mov	sp, r7
 8008524:	b004      	add	sp, #16
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008534:	e032      	b.n	800859c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	0018      	movs	r0, r3
 800853e:	f000 f91b 	bl	8008778 <I2C_IsErrorOccurred>
 8008542:	1e03      	subs	r3, r0, #0
 8008544:	d001      	beq.n	800854a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e030      	b.n	80085ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	d025      	beq.n	800859c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008550:	f7fc fdfe 	bl	8005150 <HAL_GetTick>
 8008554:	0002      	movs	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	429a      	cmp	r2, r3
 800855e:	d302      	bcc.n	8008566 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11a      	bne.n	800859c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2202      	movs	r2, #2
 800856e:	4013      	ands	r3, r2
 8008570:	2b02      	cmp	r3, #2
 8008572:	d013      	beq.n	800859c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008578:	2220      	movs	r2, #32
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2241      	movs	r2, #65	@ 0x41
 8008584:	2120      	movs	r1, #32
 8008586:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2242      	movs	r2, #66	@ 0x42
 800858c:	2100      	movs	r1, #0
 800858e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2240      	movs	r2, #64	@ 0x40
 8008594:	2100      	movs	r1, #0
 8008596:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e007      	b.n	80085ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	2202      	movs	r2, #2
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d1c5      	bne.n	8008536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	0018      	movs	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b004      	add	sp, #16
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085c0:	e02f      	b.n	8008622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 f8d5 	bl	8008778 <I2C_IsErrorOccurred>
 80085ce:	1e03      	subs	r3, r0, #0
 80085d0:	d001      	beq.n	80085d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e02d      	b.n	8008632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d6:	f7fc fdbb 	bl	8005150 <HAL_GetTick>
 80085da:	0002      	movs	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11a      	bne.n	8008622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	2220      	movs	r2, #32
 80085f4:	4013      	ands	r3, r2
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d013      	beq.n	8008622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fe:	2220      	movs	r2, #32
 8008600:	431a      	orrs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2241      	movs	r2, #65	@ 0x41
 800860a:	2120      	movs	r1, #32
 800860c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2242      	movs	r2, #66	@ 0x42
 8008612:	2100      	movs	r1, #0
 8008614:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2240      	movs	r2, #64	@ 0x40
 800861a:	2100      	movs	r1, #0
 800861c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e007      	b.n	8008632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2220      	movs	r2, #32
 800862a:	4013      	ands	r3, r2
 800862c:	2b20      	cmp	r3, #32
 800862e:	d1c8      	bne.n	80085c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	0018      	movs	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	b004      	add	sp, #16
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2317      	movs	r3, #23
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008650:	e07b      	b.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	0018      	movs	r0, r3
 800865a:	f000 f88d 	bl	8008778 <I2C_IsErrorOccurred>
 800865e:	1e03      	subs	r3, r0, #0
 8008660:	d003      	beq.n	800866a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8008662:	2317      	movs	r3, #23
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2220      	movs	r2, #32
 8008672:	4013      	ands	r3, r2
 8008674:	2b20      	cmp	r3, #32
 8008676:	d140      	bne.n	80086fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8008678:	2117      	movs	r1, #23
 800867a:	187b      	adds	r3, r7, r1
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d13b      	bne.n	80086fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2204      	movs	r2, #4
 800868a:	4013      	ands	r3, r2
 800868c:	2b04      	cmp	r3, #4
 800868e:	d106      	bne.n	800869e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008698:	187b      	adds	r3, r7, r1
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2210      	movs	r2, #16
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d123      	bne.n	80086f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2210      	movs	r2, #16
 80086b2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2204      	movs	r2, #4
 80086b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2220      	movs	r2, #32
 80086c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4929      	ldr	r1, [pc, #164]	@ (8008774 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80086ce:	400a      	ands	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2241      	movs	r2, #65	@ 0x41
 80086d6:	2120      	movs	r1, #32
 80086d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2242      	movs	r2, #66	@ 0x42
 80086de:	2100      	movs	r1, #0
 80086e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2240      	movs	r2, #64	@ 0x40
 80086e6:	2100      	movs	r1, #0
 80086e8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80086ea:	2317      	movs	r3, #23
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	2201      	movs	r2, #1
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e002      	b.n	80086fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80086fa:	f7fc fd29 	bl	8005150 <HAL_GetTick>
 80086fe:	0002      	movs	r2, r0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	d302      	bcc.n	8008710 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11c      	bne.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8008710:	2017      	movs	r0, #23
 8008712:	183b      	adds	r3, r7, r0
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d117      	bne.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2204      	movs	r2, #4
 8008722:	4013      	ands	r3, r2
 8008724:	2b04      	cmp	r3, #4
 8008726:	d010      	beq.n	800874a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872c:	2220      	movs	r2, #32
 800872e:	431a      	orrs	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2241      	movs	r2, #65	@ 0x41
 8008738:	2120      	movs	r1, #32
 800873a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2240      	movs	r2, #64	@ 0x40
 8008740:	2100      	movs	r1, #0
 8008742:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008744:	183b      	adds	r3, r7, r0
 8008746:	2201      	movs	r2, #1
 8008748:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2204      	movs	r2, #4
 8008752:	4013      	ands	r3, r2
 8008754:	2b04      	cmp	r3, #4
 8008756:	d005      	beq.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8008758:	2317      	movs	r3, #23
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d100      	bne.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8008762:	e776      	b.n	8008652 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8008764:	2317      	movs	r3, #23
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	781b      	ldrb	r3, [r3, #0]
}
 800876a:	0018      	movs	r0, r3
 800876c:	46bd      	mov	sp, r7
 800876e:	b006      	add	sp, #24
 8008770:	bd80      	pop	{r7, pc}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	fe00e800 	.word	0xfe00e800

08008778 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008784:	2327      	movs	r3, #39	@ 0x27
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2210      	movs	r2, #16
 80087a0:	4013      	ands	r3, r2
 80087a2:	d100      	bne.n	80087a6 <I2C_IsErrorOccurred+0x2e>
 80087a4:	e079      	b.n	800889a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2210      	movs	r2, #16
 80087ac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087ae:	e057      	b.n	8008860 <I2C_IsErrorOccurred+0xe8>
 80087b0:	2227      	movs	r2, #39	@ 0x27
 80087b2:	18bb      	adds	r3, r7, r2
 80087b4:	18ba      	adds	r2, r7, r2
 80087b6:	7812      	ldrb	r2, [r2, #0]
 80087b8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3301      	adds	r3, #1
 80087be:	d04f      	beq.n	8008860 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80087c0:	f7fc fcc6 	bl	8005150 <HAL_GetTick>
 80087c4:	0002      	movs	r2, r0
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d302      	bcc.n	80087d6 <I2C_IsErrorOccurred+0x5e>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d144      	bne.n	8008860 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	01db      	lsls	r3, r3, #7
 80087e0:	4013      	ands	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80087e4:	2013      	movs	r0, #19
 80087e6:	183b      	adds	r3, r7, r0
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	2142      	movs	r1, #66	@ 0x42
 80087ec:	5c52      	ldrb	r2, [r2, r1]
 80087ee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	2380      	movs	r3, #128	@ 0x80
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	401a      	ands	r2, r3
 80087fc:	2380      	movs	r3, #128	@ 0x80
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	429a      	cmp	r2, r3
 8008802:	d126      	bne.n	8008852 <I2C_IsErrorOccurred+0xda>
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	2380      	movs	r3, #128	@ 0x80
 8008808:	01db      	lsls	r3, r3, #7
 800880a:	429a      	cmp	r2, r3
 800880c:	d021      	beq.n	8008852 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800880e:	183b      	adds	r3, r7, r0
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b20      	cmp	r3, #32
 8008814:	d01d      	beq.n	8008852 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2180      	movs	r1, #128	@ 0x80
 8008822:	01c9      	lsls	r1, r1, #7
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008828:	f7fc fc92 	bl	8005150 <HAL_GetTick>
 800882c:	0003      	movs	r3, r0
 800882e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008830:	e00f      	b.n	8008852 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008832:	f7fc fc8d 	bl	8005150 <HAL_GetTick>
 8008836:	0002      	movs	r2, r0
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b19      	cmp	r3, #25
 800883e:	d908      	bls.n	8008852 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	2220      	movs	r2, #32
 8008844:	4313      	orrs	r3, r2
 8008846:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008848:	2327      	movs	r3, #39	@ 0x27
 800884a:	18fb      	adds	r3, r7, r3
 800884c:	2201      	movs	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]

              break;
 8008850:	e006      	b.n	8008860 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2220      	movs	r2, #32
 800885a:	4013      	ands	r3, r2
 800885c:	2b20      	cmp	r3, #32
 800885e:	d1e8      	bne.n	8008832 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2220      	movs	r2, #32
 8008868:	4013      	ands	r3, r2
 800886a:	2b20      	cmp	r3, #32
 800886c:	d004      	beq.n	8008878 <I2C_IsErrorOccurred+0x100>
 800886e:	2327      	movs	r3, #39	@ 0x27
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d09b      	beq.n	80087b0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008878:	2327      	movs	r3, #39	@ 0x27
 800887a:	18fb      	adds	r3, r7, r3
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2220      	movs	r2, #32
 8008888:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	2204      	movs	r2, #4
 800888e:	4313      	orrs	r3, r2
 8008890:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008892:	2327      	movs	r3, #39	@ 0x27
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	2201      	movs	r2, #1
 8008898:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	2380      	movs	r3, #128	@ 0x80
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	4013      	ands	r3, r2
 80088aa:	d00c      	beq.n	80088c6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	2201      	movs	r2, #1
 80088b0:	4313      	orrs	r3, r2
 80088b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2280      	movs	r2, #128	@ 0x80
 80088ba:	0052      	lsls	r2, r2, #1
 80088bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088be:	2327      	movs	r3, #39	@ 0x27
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2201      	movs	r2, #1
 80088c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	2380      	movs	r3, #128	@ 0x80
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4013      	ands	r3, r2
 80088ce:	d00c      	beq.n	80088ea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2208      	movs	r2, #8
 80088d4:	4313      	orrs	r3, r2
 80088d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2280      	movs	r2, #128	@ 0x80
 80088de:	00d2      	lsls	r2, r2, #3
 80088e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088e2:	2327      	movs	r3, #39	@ 0x27
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	2380      	movs	r3, #128	@ 0x80
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4013      	ands	r3, r2
 80088f2:	d00c      	beq.n	800890e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2202      	movs	r2, #2
 80088f8:	4313      	orrs	r3, r2
 80088fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2280      	movs	r2, #128	@ 0x80
 8008902:	0092      	lsls	r2, r2, #2
 8008904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008906:	2327      	movs	r3, #39	@ 0x27
 8008908:	18fb      	adds	r3, r7, r3
 800890a:	2201      	movs	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800890e:	2327      	movs	r3, #39	@ 0x27
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01d      	beq.n	8008954 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0018      	movs	r0, r3
 800891c:	f7ff fd6b 	bl	80083f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	490e      	ldr	r1, [pc, #56]	@ (8008964 <I2C_IsErrorOccurred+0x1ec>)
 800892c:	400a      	ands	r2, r1
 800892e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	431a      	orrs	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2241      	movs	r2, #65	@ 0x41
 8008940:	2120      	movs	r1, #32
 8008942:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2242      	movs	r2, #66	@ 0x42
 8008948:	2100      	movs	r1, #0
 800894a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2240      	movs	r2, #64	@ 0x40
 8008950:	2100      	movs	r1, #0
 8008952:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008954:	2327      	movs	r3, #39	@ 0x27
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	781b      	ldrb	r3, [r3, #0]
}
 800895a:	0018      	movs	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	b00a      	add	sp, #40	@ 0x28
 8008960:	bd80      	pop	{r7, pc}
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	fe00e800 	.word	0xfe00e800

08008968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	0008      	movs	r0, r1
 8008972:	0011      	movs	r1, r2
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	240a      	movs	r4, #10
 8008978:	193b      	adds	r3, r7, r4
 800897a:	1c02      	adds	r2, r0, #0
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	2009      	movs	r0, #9
 8008980:	183b      	adds	r3, r7, r0
 8008982:	1c0a      	adds	r2, r1, #0
 8008984:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008986:	193b      	adds	r3, r7, r4
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	059b      	lsls	r3, r3, #22
 800898c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800898e:	183b      	adds	r3, r7, r0
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	0419      	lsls	r1, r3, #16
 8008994:	23ff      	movs	r3, #255	@ 0xff
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800899a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	4313      	orrs	r3, r2
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089b2:	0d51      	lsrs	r1, r2, #21
 80089b4:	2280      	movs	r2, #128	@ 0x80
 80089b6:	00d2      	lsls	r2, r2, #3
 80089b8:	400a      	ands	r2, r1
 80089ba:	4907      	ldr	r1, [pc, #28]	@ (80089d8 <I2C_TransferConfig+0x70>)
 80089bc:	430a      	orrs	r2, r1
 80089be:	43d2      	mvns	r2, r2
 80089c0:	401a      	ands	r2, r3
 80089c2:	0011      	movs	r1, r2
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80089ce:	46c0      	nop			@ (mov r8, r8)
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b007      	add	sp, #28
 80089d4:	bd90      	pop	{r4, r7, pc}
 80089d6:	46c0      	nop			@ (mov r8, r8)
 80089d8:	03ff63ff 	.word	0x03ff63ff

080089dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	000a      	movs	r2, r1
 80089e6:	1cbb      	adds	r3, r7, #2
 80089e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80089ee:	1cbb      	adds	r3, r7, #2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	2201      	movs	r2, #1
 80089f4:	4013      	ands	r3, r2
 80089f6:	d010      	beq.n	8008a1a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2242      	movs	r2, #66	@ 0x42
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2241      	movs	r2, #65	@ 0x41
 8008a04:	5c9b      	ldrb	r3, [r3, r2]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	001a      	movs	r2, r3
 8008a0a:	2328      	movs	r3, #40	@ 0x28
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b28      	cmp	r3, #40	@ 0x28
 8008a10:	d003      	beq.n	8008a1a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	22b0      	movs	r2, #176	@ 0xb0
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008a1a:	1cbb      	adds	r3, r7, #2
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	4013      	ands	r3, r2
 8008a22:	d010      	beq.n	8008a46 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2244      	movs	r2, #68	@ 0x44
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2241      	movs	r2, #65	@ 0x41
 8008a30:	5c9b      	ldrb	r3, [r3, r2]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	001a      	movs	r2, r3
 8008a36:	2328      	movs	r3, #40	@ 0x28
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b28      	cmp	r3, #40	@ 0x28
 8008a3c:	d003      	beq.n	8008a46 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	22b0      	movs	r2, #176	@ 0xb0
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008a46:	1cbb      	adds	r3, r7, #2
 8008a48:	2200      	movs	r2, #0
 8008a4a:	5e9b      	ldrsh	r3, [r3, r2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da03      	bge.n	8008a58 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	22b8      	movs	r2, #184	@ 0xb8
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008a58:	1cbb      	adds	r3, r7, #2
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	2b10      	cmp	r3, #16
 8008a5e:	d103      	bne.n	8008a68 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2290      	movs	r2, #144	@ 0x90
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008a68:	1cbb      	adds	r3, r7, #2
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d103      	bne.n	8008a78 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2220      	movs	r2, #32
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008a78:	1cbb      	adds	r3, r7, #2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	2b40      	cmp	r3, #64	@ 0x40
 8008a7e:	d103      	bne.n	8008a88 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2240      	movs	r2, #64	@ 0x40
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	43d9      	mvns	r1, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	400a      	ands	r2, r1
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b004      	add	sp, #16
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2241      	movs	r2, #65	@ 0x41
 8008ab2:	5c9b      	ldrb	r3, [r3, r2]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d138      	bne.n	8008b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2240      	movs	r2, #64	@ 0x40
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e032      	b.n	8008b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2240      	movs	r2, #64	@ 0x40
 8008acc:	2101      	movs	r1, #1
 8008ace:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2241      	movs	r2, #65	@ 0x41
 8008ad4:	2124      	movs	r1, #36	@ 0x24
 8008ad6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	438a      	bics	r2, r1
 8008ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4911      	ldr	r1, [pc, #68]	@ (8008b38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008af4:	400a      	ands	r2, r1
 8008af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6819      	ldr	r1, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2101      	movs	r1, #1
 8008b14:	430a      	orrs	r2, r1
 8008b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2241      	movs	r2, #65	@ 0x41
 8008b1c:	2120      	movs	r1, #32
 8008b1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2240      	movs	r2, #64	@ 0x40
 8008b24:	2100      	movs	r1, #0
 8008b26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e000      	b.n	8008b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b2c:	2302      	movs	r3, #2
  }
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b002      	add	sp, #8
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	ffffefff 	.word	0xffffefff

08008b3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2241      	movs	r2, #65	@ 0x41
 8008b4a:	5c9b      	ldrb	r3, [r3, r2]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d139      	bne.n	8008bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2240      	movs	r2, #64	@ 0x40
 8008b56:	5c9b      	ldrb	r3, [r3, r2]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e033      	b.n	8008bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2240      	movs	r2, #64	@ 0x40
 8008b64:	2101      	movs	r1, #1
 8008b66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2241      	movs	r2, #65	@ 0x41
 8008b6c:	2124      	movs	r1, #36	@ 0x24
 8008b6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	438a      	bics	r2, r1
 8008b7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a11      	ldr	r2, [pc, #68]	@ (8008bd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2101      	movs	r1, #1
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2241      	movs	r2, #65	@ 0x41
 8008bb6:	2120      	movs	r1, #32
 8008bb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2240      	movs	r2, #64	@ 0x40
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e000      	b.n	8008bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008bc6:	2302      	movs	r3, #2
  }
}
 8008bc8:	0018      	movs	r0, r3
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	b004      	add	sp, #16
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	fffff0ff 	.word	0xfffff0ff

08008bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008bdc:	4b19      	ldr	r3, [pc, #100]	@ (8008c44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a19      	ldr	r2, [pc, #100]	@ (8008c48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	0019      	movs	r1, r3
 8008be6:	4b17      	ldr	r3, [pc, #92]	@ (8008c44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d11f      	bne.n	8008c38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008bf8:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	0013      	movs	r3, r2
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4912      	ldr	r1, [pc, #72]	@ (8008c50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008c06:	0018      	movs	r0, r3
 8008c08:	f7f7 fa96 	bl	8000138 <__udivsi3>
 8008c0c:	0003      	movs	r3, r0
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c12:	e008      	b.n	8008c26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e001      	b.n	8008c26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e009      	b.n	8008c3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c26:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	2380      	movs	r3, #128	@ 0x80
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	401a      	ands	r2, r3
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d0ed      	beq.n	8008c14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b004      	add	sp, #16
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			@ (mov r8, r8)
 8008c44:	40007000 	.word	0x40007000
 8008c48:	fffff9ff 	.word	0xfffff9ff
 8008c4c:	20000010 	.word	0x20000010
 8008c50:	000f4240 	.word	0x000f4240

08008c54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008c58:	4b03      	ldr	r3, [pc, #12]	@ (8008c68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	23e0      	movs	r3, #224	@ 0xe0
 8008c5e:	01db      	lsls	r3, r3, #7
 8008c60:	4013      	ands	r3, r2
}
 8008c62:	0018      	movs	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40021000 	.word	0x40021000

08008c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e2f3      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2201      	movs	r2, #1
 8008c84:	4013      	ands	r3, r2
 8008c86:	d100      	bne.n	8008c8a <HAL_RCC_OscConfig+0x1e>
 8008c88:	e07c      	b.n	8008d84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c8a:	4bc3      	ldr	r3, [pc, #780]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2238      	movs	r2, #56	@ 0x38
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c94:	4bc0      	ldr	r3, [pc, #768]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2203      	movs	r2, #3
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d102      	bne.n	8008caa <HAL_RCC_OscConfig+0x3e>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d002      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d10b      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	2380      	movs	r3, #128	@ 0x80
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	4013      	ands	r3, r2
 8008cba:	d062      	beq.n	8008d82 <HAL_RCC_OscConfig+0x116>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d15e      	bne.n	8008d82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e2ce      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	2380      	movs	r3, #128	@ 0x80
 8008cce:	025b      	lsls	r3, r3, #9
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x78>
 8008cd4:	4bb0      	ldr	r3, [pc, #704]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4baf      	ldr	r3, [pc, #700]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008cda:	2180      	movs	r1, #128	@ 0x80
 8008cdc:	0249      	lsls	r1, r1, #9
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e020      	b.n	8008d26 <HAL_RCC_OscConfig+0xba>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	23a0      	movs	r3, #160	@ 0xa0
 8008cea:	02db      	lsls	r3, r3, #11
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d10e      	bne.n	8008d0e <HAL_RCC_OscConfig+0xa2>
 8008cf0:	4ba9      	ldr	r3, [pc, #676]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4ba8      	ldr	r3, [pc, #672]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008cf6:	2180      	movs	r1, #128	@ 0x80
 8008cf8:	02c9      	lsls	r1, r1, #11
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4ba5      	ldr	r3, [pc, #660]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d04:	2180      	movs	r1, #128	@ 0x80
 8008d06:	0249      	lsls	r1, r1, #9
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	e00b      	b.n	8008d26 <HAL_RCC_OscConfig+0xba>
 8008d0e:	4ba2      	ldr	r3, [pc, #648]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4ba1      	ldr	r3, [pc, #644]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d14:	49a1      	ldr	r1, [pc, #644]	@ (8008f9c <HAL_RCC_OscConfig+0x330>)
 8008d16:	400a      	ands	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d20:	499f      	ldr	r1, [pc, #636]	@ (8008fa0 <HAL_RCC_OscConfig+0x334>)
 8008d22:	400a      	ands	r2, r1
 8008d24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d014      	beq.n	8008d58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2e:	f7fc fa0f 	bl	8005150 <HAL_GetTick>
 8008d32:	0003      	movs	r3, r0
 8008d34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d38:	f7fc fa0a 	bl	8005150 <HAL_GetTick>
 8008d3c:	0002      	movs	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	@ 0x64
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e28d      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d4a:	4b93      	ldr	r3, [pc, #588]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	2380      	movs	r3, #128	@ 0x80
 8008d50:	029b      	lsls	r3, r3, #10
 8008d52:	4013      	ands	r3, r2
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0xcc>
 8008d56:	e015      	b.n	8008d84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d58:	f7fc f9fa 	bl	8005150 <HAL_GetTick>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d60:	e008      	b.n	8008d74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d62:	f7fc f9f5 	bl	8005150 <HAL_GetTick>
 8008d66:	0002      	movs	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b64      	cmp	r3, #100	@ 0x64
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e278      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d74:	4b88      	ldr	r3, [pc, #544]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	2380      	movs	r3, #128	@ 0x80
 8008d7a:	029b      	lsls	r3, r3, #10
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d1f0      	bne.n	8008d62 <HAL_RCC_OscConfig+0xf6>
 8008d80:	e000      	b.n	8008d84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d100      	bne.n	8008d90 <HAL_RCC_OscConfig+0x124>
 8008d8e:	e099      	b.n	8008ec4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d90:	4b81      	ldr	r3, [pc, #516]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2238      	movs	r2, #56	@ 0x38
 8008d96:	4013      	ands	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	4013      	ands	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d102      	bne.n	8008db0 <HAL_RCC_OscConfig+0x144>
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d002      	beq.n	8008db6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d135      	bne.n	8008e22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008db6:	4b78      	ldr	r3, [pc, #480]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d005      	beq.n	8008dce <HAL_RCC_OscConfig+0x162>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e24b      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dce:	4b72      	ldr	r3, [pc, #456]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4a74      	ldr	r2, [pc, #464]	@ (8008fa4 <HAL_RCC_OscConfig+0x338>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	0019      	movs	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	021a      	lsls	r2, r3, #8
 8008dde:	4b6e      	ldr	r3, [pc, #440]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008de0:	430a      	orrs	r2, r1
 8008de2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d112      	bne.n	8008e10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008dea:	4b6b      	ldr	r3, [pc, #428]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a6e      	ldr	r2, [pc, #440]	@ (8008fa8 <HAL_RCC_OscConfig+0x33c>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	0019      	movs	r1, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	4b67      	ldr	r3, [pc, #412]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008dfe:	4b66      	ldr	r3, [pc, #408]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	0adb      	lsrs	r3, r3, #11
 8008e04:	2207      	movs	r2, #7
 8008e06:	4013      	ands	r3, r2
 8008e08:	4a68      	ldr	r2, [pc, #416]	@ (8008fac <HAL_RCC_OscConfig+0x340>)
 8008e0a:	40da      	lsrs	r2, r3
 8008e0c:	4b68      	ldr	r3, [pc, #416]	@ (8008fb0 <HAL_RCC_OscConfig+0x344>)
 8008e0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008e10:	4b68      	ldr	r3, [pc, #416]	@ (8008fb4 <HAL_RCC_OscConfig+0x348>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7fc f93f 	bl	8005098 <HAL_InitTick>
 8008e1a:	1e03      	subs	r3, r0, #0
 8008e1c:	d051      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e221      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d030      	beq.n	8008e8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8008fa8 <HAL_RCC_OscConfig+0x33c>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	0019      	movs	r1, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	4b57      	ldr	r3, [pc, #348]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008e3e:	4b56      	ldr	r3, [pc, #344]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b55      	ldr	r3, [pc, #340]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e44:	2180      	movs	r1, #128	@ 0x80
 8008e46:	0049      	lsls	r1, r1, #1
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fc f980 	bl	8005150 <HAL_GetTick>
 8008e50:	0003      	movs	r3, r0
 8008e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e54:	e008      	b.n	8008e68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e56:	f7fc f97b 	bl	8005150 <HAL_GetTick>
 8008e5a:	0002      	movs	r2, r0
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e1fe      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e68:	4b4b      	ldr	r3, [pc, #300]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4013      	ands	r3, r2
 8008e72:	d0f0      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e74:	4b48      	ldr	r3, [pc, #288]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	4a4a      	ldr	r2, [pc, #296]	@ (8008fa4 <HAL_RCC_OscConfig+0x338>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	021a      	lsls	r2, r3, #8
 8008e84:	4b44      	ldr	r3, [pc, #272]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	e01b      	b.n	8008ec4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008e8c:	4b42      	ldr	r3, [pc, #264]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	4b41      	ldr	r3, [pc, #260]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008e92:	4949      	ldr	r1, [pc, #292]	@ (8008fb8 <HAL_RCC_OscConfig+0x34c>)
 8008e94:	400a      	ands	r2, r1
 8008e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e98:	f7fc f95a 	bl	8005150 <HAL_GetTick>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ea0:	e008      	b.n	8008eb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ea2:	f7fc f955 	bl	8005150 <HAL_GetTick>
 8008ea6:	0002      	movs	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e1d8      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008eb4:	4b38      	ldr	r3, [pc, #224]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d1f0      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x236>
 8008ec0:	e000      	b.n	8008ec4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ec2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2208      	movs	r2, #8
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d047      	beq.n	8008f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008ece:	4b32      	ldr	r3, [pc, #200]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2238      	movs	r2, #56	@ 0x38
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b18      	cmp	r3, #24
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008eda:	4b2f      	ldr	r3, [pc, #188]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ede:	2202      	movs	r2, #2
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	d03c      	beq.n	8008f5e <HAL_RCC_OscConfig+0x2f2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d138      	bne.n	8008f5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e1ba      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d019      	beq.n	8008f2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008ef8:	4b27      	ldr	r3, [pc, #156]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008efc:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008efe:	2101      	movs	r1, #1
 8008f00:	430a      	orrs	r2, r1
 8008f02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f04:	f7fc f924 	bl	8005150 <HAL_GetTick>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f0c:	e008      	b.n	8008f20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f0e:	f7fc f91f 	bl	8005150 <HAL_GetTick>
 8008f12:	0002      	movs	r2, r0
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e1a2      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f20:	4b1d      	ldr	r3, [pc, #116]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f24:	2202      	movs	r2, #2
 8008f26:	4013      	ands	r3, r2
 8008f28:	d0f1      	beq.n	8008f0e <HAL_RCC_OscConfig+0x2a2>
 8008f2a:	e018      	b.n	8008f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008f30:	4b19      	ldr	r3, [pc, #100]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f32:	2101      	movs	r1, #1
 8008f34:	438a      	bics	r2, r1
 8008f36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f38:	f7fc f90a 	bl	8005150 <HAL_GetTick>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f42:	f7fc f905 	bl	8005150 <HAL_GetTick>
 8008f46:	0002      	movs	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e188      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f54:	4b10      	ldr	r3, [pc, #64]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	d1f1      	bne.n	8008f42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2204      	movs	r2, #4
 8008f64:	4013      	ands	r3, r2
 8008f66:	d100      	bne.n	8008f6a <HAL_RCC_OscConfig+0x2fe>
 8008f68:	e0c6      	b.n	80090f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f6a:	231f      	movs	r3, #31
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008f72:	4b09      	ldr	r3, [pc, #36]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	2238      	movs	r2, #56	@ 0x38
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d11e      	bne.n	8008fbc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <HAL_RCC_OscConfig+0x32c>)
 8008f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f82:	2202      	movs	r2, #2
 8008f84:	4013      	ands	r3, r2
 8008f86:	d100      	bne.n	8008f8a <HAL_RCC_OscConfig+0x31e>
 8008f88:	e0b6      	b.n	80090f8 <HAL_RCC_OscConfig+0x48c>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d000      	beq.n	8008f94 <HAL_RCC_OscConfig+0x328>
 8008f92:	e0b1      	b.n	80090f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e166      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	fffeffff 	.word	0xfffeffff
 8008fa0:	fffbffff 	.word	0xfffbffff
 8008fa4:	ffff80ff 	.word	0xffff80ff
 8008fa8:	ffffc7ff 	.word	0xffffc7ff
 8008fac:	00f42400 	.word	0x00f42400
 8008fb0:	20000010 	.word	0x20000010
 8008fb4:	20000014 	.word	0x20000014
 8008fb8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008fbc:	4bac      	ldr	r3, [pc, #688]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8008fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fc0:	2380      	movs	r3, #128	@ 0x80
 8008fc2:	055b      	lsls	r3, r3, #21
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_OscConfig+0x360>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <HAL_RCC_OscConfig+0x362>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d011      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4ba7      	ldr	r3, [pc, #668]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8008fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fd6:	4ba6      	ldr	r3, [pc, #664]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8008fd8:	2180      	movs	r1, #128	@ 0x80
 8008fda:	0549      	lsls	r1, r1, #21
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8008fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fe4:	2380      	movs	r3, #128	@ 0x80
 8008fe6:	055b      	lsls	r3, r3, #21
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008fee:	231f      	movs	r3, #31
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8009274 <HAL_RCC_OscConfig+0x608>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	2380      	movs	r3, #128	@ 0x80
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4013      	ands	r3, r2
 8009000:	d11a      	bne.n	8009038 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009002:	4b9c      	ldr	r3, [pc, #624]	@ (8009274 <HAL_RCC_OscConfig+0x608>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4b9b      	ldr	r3, [pc, #620]	@ (8009274 <HAL_RCC_OscConfig+0x608>)
 8009008:	2180      	movs	r1, #128	@ 0x80
 800900a:	0049      	lsls	r1, r1, #1
 800900c:	430a      	orrs	r2, r1
 800900e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009010:	f7fc f89e 	bl	8005150 <HAL_GetTick>
 8009014:	0003      	movs	r3, r0
 8009016:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009018:	e008      	b.n	800902c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800901a:	f7fc f899 	bl	8005150 <HAL_GetTick>
 800901e:	0002      	movs	r2, r0
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e11c      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800902c:	4b91      	ldr	r3, [pc, #580]	@ (8009274 <HAL_RCC_OscConfig+0x608>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	2380      	movs	r3, #128	@ 0x80
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4013      	ands	r3, r2
 8009036:	d0f0      	beq.n	800901a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d106      	bne.n	800904e <HAL_RCC_OscConfig+0x3e2>
 8009040:	4b8b      	ldr	r3, [pc, #556]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009044:	4b8a      	ldr	r3, [pc, #552]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009046:	2101      	movs	r1, #1
 8009048:	430a      	orrs	r2, r1
 800904a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800904c:	e01c      	b.n	8009088 <HAL_RCC_OscConfig+0x41c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b05      	cmp	r3, #5
 8009054:	d10c      	bne.n	8009070 <HAL_RCC_OscConfig+0x404>
 8009056:	4b86      	ldr	r3, [pc, #536]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800905a:	4b85      	ldr	r3, [pc, #532]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800905c:	2104      	movs	r1, #4
 800905e:	430a      	orrs	r2, r1
 8009060:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009062:	4b83      	ldr	r3, [pc, #524]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009066:	4b82      	ldr	r3, [pc, #520]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009068:	2101      	movs	r1, #1
 800906a:	430a      	orrs	r2, r1
 800906c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800906e:	e00b      	b.n	8009088 <HAL_RCC_OscConfig+0x41c>
 8009070:	4b7f      	ldr	r3, [pc, #508]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009072:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009074:	4b7e      	ldr	r3, [pc, #504]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009076:	2101      	movs	r1, #1
 8009078:	438a      	bics	r2, r1
 800907a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800907c:	4b7c      	ldr	r3, [pc, #496]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800907e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009080:	4b7b      	ldr	r3, [pc, #492]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009082:	2104      	movs	r1, #4
 8009084:	438a      	bics	r2, r1
 8009086:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d014      	beq.n	80090ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fc f85e 	bl	8005150 <HAL_GetTick>
 8009094:	0003      	movs	r3, r0
 8009096:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009098:	e009      	b.n	80090ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800909a:	f7fc f859 	bl	8005150 <HAL_GetTick>
 800909e:	0002      	movs	r2, r0
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	4a74      	ldr	r2, [pc, #464]	@ (8009278 <HAL_RCC_OscConfig+0x60c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e0db      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ae:	4b70      	ldr	r3, [pc, #448]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80090b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b2:	2202      	movs	r2, #2
 80090b4:	4013      	ands	r3, r2
 80090b6:	d0f0      	beq.n	800909a <HAL_RCC_OscConfig+0x42e>
 80090b8:	e013      	b.n	80090e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ba:	f7fc f849 	bl	8005150 <HAL_GetTick>
 80090be:	0003      	movs	r3, r0
 80090c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090c2:	e009      	b.n	80090d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c4:	f7fc f844 	bl	8005150 <HAL_GetTick>
 80090c8:	0002      	movs	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	4a6a      	ldr	r2, [pc, #424]	@ (8009278 <HAL_RCC_OscConfig+0x60c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d901      	bls.n	80090d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e0c6      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090d8:	4b65      	ldr	r3, [pc, #404]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80090da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090dc:	2202      	movs	r2, #2
 80090de:	4013      	ands	r3, r2
 80090e0:	d1f0      	bne.n	80090c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80090e2:	231f      	movs	r3, #31
 80090e4:	18fb      	adds	r3, r7, r3
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d105      	bne.n	80090f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80090ec:	4b60      	ldr	r3, [pc, #384]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80090ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090f0:	4b5f      	ldr	r3, [pc, #380]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80090f2:	4962      	ldr	r1, [pc, #392]	@ (800927c <HAL_RCC_OscConfig+0x610>)
 80090f4:	400a      	ands	r2, r1
 80090f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d100      	bne.n	8009102 <HAL_RCC_OscConfig+0x496>
 8009100:	e0b0      	b.n	8009264 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009102:	4b5b      	ldr	r3, [pc, #364]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2238      	movs	r2, #56	@ 0x38
 8009108:	4013      	ands	r3, r2
 800910a:	2b10      	cmp	r3, #16
 800910c:	d100      	bne.n	8009110 <HAL_RCC_OscConfig+0x4a4>
 800910e:	e078      	b.n	8009202 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d153      	bne.n	80091c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009118:	4b55      	ldr	r3, [pc, #340]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	4b54      	ldr	r3, [pc, #336]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800911e:	4958      	ldr	r1, [pc, #352]	@ (8009280 <HAL_RCC_OscConfig+0x614>)
 8009120:	400a      	ands	r2, r1
 8009122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7fc f814 	bl	8005150 <HAL_GetTick>
 8009128:	0003      	movs	r3, r0
 800912a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800912e:	f7fc f80f 	bl	8005150 <HAL_GetTick>
 8009132:	0002      	movs	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e092      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009140:	4b4b      	ldr	r3, [pc, #300]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	049b      	lsls	r3, r3, #18
 8009148:	4013      	ands	r3, r2
 800914a:	d1f0      	bne.n	800912e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800914c:	4b48      	ldr	r3, [pc, #288]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a4c      	ldr	r2, [pc, #304]	@ (8009284 <HAL_RCC_OscConfig+0x618>)
 8009152:	4013      	ands	r3, r2
 8009154:	0019      	movs	r1, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1a      	ldr	r2, [r3, #32]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	431a      	orrs	r2, r3
 8009174:	4b3e      	ldr	r3, [pc, #248]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009176:	430a      	orrs	r2, r1
 8009178:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800917a:	4b3d      	ldr	r3, [pc, #244]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b3c      	ldr	r3, [pc, #240]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009180:	2180      	movs	r1, #128	@ 0x80
 8009182:	0449      	lsls	r1, r1, #17
 8009184:	430a      	orrs	r2, r1
 8009186:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009188:	4b39      	ldr	r3, [pc, #228]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	4b38      	ldr	r3, [pc, #224]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 800918e:	2180      	movs	r1, #128	@ 0x80
 8009190:	0549      	lsls	r1, r1, #21
 8009192:	430a      	orrs	r2, r1
 8009194:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009196:	f7fb ffdb 	bl	8005150 <HAL_GetTick>
 800919a:	0003      	movs	r3, r0
 800919c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091a0:	f7fb ffd6 	bl	8005150 <HAL_GetTick>
 80091a4:	0002      	movs	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e059      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	2380      	movs	r3, #128	@ 0x80
 80091b8:	049b      	lsls	r3, r3, #18
 80091ba:	4013      	ands	r3, r2
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x534>
 80091be:	e051      	b.n	8009264 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091c6:	492e      	ldr	r1, [pc, #184]	@ (8009280 <HAL_RCC_OscConfig+0x614>)
 80091c8:	400a      	ands	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091cc:	f7fb ffc0 	bl	8005150 <HAL_GetTick>
 80091d0:	0003      	movs	r3, r0
 80091d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091d4:	e008      	b.n	80091e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d6:	f7fb ffbb 	bl	8005150 <HAL_GetTick>
 80091da:	0002      	movs	r2, r0
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e03e      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091e8:	4b21      	ldr	r3, [pc, #132]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	2380      	movs	r3, #128	@ 0x80
 80091ee:	049b      	lsls	r3, r3, #18
 80091f0:	4013      	ands	r3, r2
 80091f2:	d1f0      	bne.n	80091d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80091f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 80091fa:	4923      	ldr	r1, [pc, #140]	@ (8009288 <HAL_RCC_OscConfig+0x61c>)
 80091fc:	400a      	ands	r2, r1
 80091fe:	60da      	str	r2, [r3, #12]
 8009200:	e030      	b.n	8009264 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e02b      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800920e:	4b18      	ldr	r3, [pc, #96]	@ (8009270 <HAL_RCC_OscConfig+0x604>)
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2203      	movs	r2, #3
 8009218:	401a      	ands	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	429a      	cmp	r2, r3
 8009220:	d11e      	bne.n	8009260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2270      	movs	r2, #112	@ 0x70
 8009226:	401a      	ands	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800922c:	429a      	cmp	r2, r3
 800922e:	d117      	bne.n	8009260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	23fe      	movs	r3, #254	@ 0xfe
 8009234:	01db      	lsls	r3, r3, #7
 8009236:	401a      	ands	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800923e:	429a      	cmp	r2, r3
 8009240:	d10e      	bne.n	8009260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	23f8      	movs	r3, #248	@ 0xf8
 8009246:	039b      	lsls	r3, r3, #14
 8009248:	401a      	ands	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800924e:	429a      	cmp	r2, r3
 8009250:	d106      	bne.n	8009260 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	0f5b      	lsrs	r3, r3, #29
 8009256:	075a      	lsls	r2, r3, #29
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800925c:	429a      	cmp	r2, r3
 800925e:	d001      	beq.n	8009264 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e000      	b.n	8009266 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b008      	add	sp, #32
 800926c:	bd80      	pop	{r7, pc}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	40021000 	.word	0x40021000
 8009274:	40007000 	.word	0x40007000
 8009278:	00001388 	.word	0x00001388
 800927c:	efffffff 	.word	0xefffffff
 8009280:	feffffff 	.word	0xfeffffff
 8009284:	1fc1808c 	.word	0x1fc1808c
 8009288:	effefffc 	.word	0xeffefffc

0800928c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e0e9      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092a0:	4b76      	ldr	r3, [pc, #472]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2207      	movs	r2, #7
 80092a6:	4013      	ands	r3, r2
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d91e      	bls.n	80092ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ae:	4b73      	ldr	r3, [pc, #460]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2207      	movs	r2, #7
 80092b4:	4393      	bics	r3, r2
 80092b6:	0019      	movs	r1, r3
 80092b8:	4b70      	ldr	r3, [pc, #448]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80092c0:	f7fb ff46 	bl	8005150 <HAL_GetTick>
 80092c4:	0003      	movs	r3, r0
 80092c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80092c8:	e009      	b.n	80092de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ca:	f7fb ff41 	bl	8005150 <HAL_GetTick>
 80092ce:	0002      	movs	r2, r0
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	4a6a      	ldr	r2, [pc, #424]	@ (8009480 <HAL_RCC_ClockConfig+0x1f4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e0ca      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80092de:	4b67      	ldr	r3, [pc, #412]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2207      	movs	r2, #7
 80092e4:	4013      	ands	r3, r2
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d1ee      	bne.n	80092ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2202      	movs	r2, #2
 80092f2:	4013      	ands	r3, r2
 80092f4:	d015      	beq.n	8009322 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2204      	movs	r2, #4
 80092fc:	4013      	ands	r3, r2
 80092fe:	d006      	beq.n	800930e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009300:	4b60      	ldr	r3, [pc, #384]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	4b5f      	ldr	r3, [pc, #380]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009306:	21e0      	movs	r1, #224	@ 0xe0
 8009308:	01c9      	lsls	r1, r1, #7
 800930a:	430a      	orrs	r2, r1
 800930c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800930e:	4b5d      	ldr	r3, [pc, #372]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	4a5d      	ldr	r2, [pc, #372]	@ (8009488 <HAL_RCC_ClockConfig+0x1fc>)
 8009314:	4013      	ands	r3, r2
 8009316:	0019      	movs	r1, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	4b59      	ldr	r3, [pc, #356]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800931e:	430a      	orrs	r2, r1
 8009320:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2201      	movs	r2, #1
 8009328:	4013      	ands	r3, r2
 800932a:	d057      	beq.n	80093dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d107      	bne.n	8009344 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009334:	4b53      	ldr	r3, [pc, #332]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	2380      	movs	r3, #128	@ 0x80
 800933a:	029b      	lsls	r3, r3, #10
 800933c:	4013      	ands	r3, r2
 800933e:	d12b      	bne.n	8009398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e097      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d107      	bne.n	800935c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800934c:	4b4d      	ldr	r3, [pc, #308]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	2380      	movs	r3, #128	@ 0x80
 8009352:	049b      	lsls	r3, r3, #18
 8009354:	4013      	ands	r3, r2
 8009356:	d11f      	bne.n	8009398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e08b      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d107      	bne.n	8009374 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009364:	4b47      	ldr	r3, [pc, #284]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	2380      	movs	r3, #128	@ 0x80
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4013      	ands	r3, r2
 800936e:	d113      	bne.n	8009398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e07f      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d106      	bne.n	800938a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800937c:	4b41      	ldr	r3, [pc, #260]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800937e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009380:	2202      	movs	r2, #2
 8009382:	4013      	ands	r3, r2
 8009384:	d108      	bne.n	8009398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e074      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938a:	4b3e      	ldr	r3, [pc, #248]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800938c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800938e:	2202      	movs	r2, #2
 8009390:	4013      	ands	r3, r2
 8009392:	d101      	bne.n	8009398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e06d      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009398:	4b3a      	ldr	r3, [pc, #232]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2207      	movs	r2, #7
 800939e:	4393      	bics	r3, r2
 80093a0:	0019      	movs	r1, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b37      	ldr	r3, [pc, #220]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 80093a8:	430a      	orrs	r2, r1
 80093aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ac:	f7fb fed0 	bl	8005150 <HAL_GetTick>
 80093b0:	0003      	movs	r3, r0
 80093b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b4:	e009      	b.n	80093ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b6:	f7fb fecb 	bl	8005150 <HAL_GetTick>
 80093ba:	0002      	movs	r2, r0
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	4a2f      	ldr	r2, [pc, #188]	@ (8009480 <HAL_RCC_ClockConfig+0x1f4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e054      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2238      	movs	r2, #56	@ 0x38
 80093d0:	401a      	ands	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	429a      	cmp	r2, r3
 80093da:	d1ec      	bne.n	80093b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093dc:	4b27      	ldr	r3, [pc, #156]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2207      	movs	r2, #7
 80093e2:	4013      	ands	r3, r2
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d21e      	bcs.n	8009428 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ea:	4b24      	ldr	r3, [pc, #144]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2207      	movs	r2, #7
 80093f0:	4393      	bics	r3, r2
 80093f2:	0019      	movs	r1, r3
 80093f4:	4b21      	ldr	r3, [pc, #132]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093fc:	f7fb fea8 	bl	8005150 <HAL_GetTick>
 8009400:	0003      	movs	r3, r0
 8009402:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009404:	e009      	b.n	800941a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009406:	f7fb fea3 	bl	8005150 <HAL_GetTick>
 800940a:	0002      	movs	r2, r0
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	4a1b      	ldr	r2, [pc, #108]	@ (8009480 <HAL_RCC_ClockConfig+0x1f4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d901      	bls.n	800941a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e02c      	b.n	8009474 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800941a:	4b18      	ldr	r3, [pc, #96]	@ (800947c <HAL_RCC_ClockConfig+0x1f0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2207      	movs	r2, #7
 8009420:	4013      	ands	r3, r2
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d1ee      	bne.n	8009406 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2204      	movs	r2, #4
 800942e:	4013      	ands	r3, r2
 8009430:	d009      	beq.n	8009446 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009432:	4b14      	ldr	r3, [pc, #80]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	4a15      	ldr	r2, [pc, #84]	@ (800948c <HAL_RCC_ClockConfig+0x200>)
 8009438:	4013      	ands	r3, r2
 800943a:	0019      	movs	r1, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 8009442:	430a      	orrs	r2, r1
 8009444:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009446:	f000 f829 	bl	800949c <HAL_RCC_GetSysClockFreq>
 800944a:	0001      	movs	r1, r0
 800944c:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <HAL_RCC_ClockConfig+0x1f8>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	0a1b      	lsrs	r3, r3, #8
 8009452:	220f      	movs	r2, #15
 8009454:	401a      	ands	r2, r3
 8009456:	4b0e      	ldr	r3, [pc, #56]	@ (8009490 <HAL_RCC_ClockConfig+0x204>)
 8009458:	0092      	lsls	r2, r2, #2
 800945a:	58d3      	ldr	r3, [r2, r3]
 800945c:	221f      	movs	r2, #31
 800945e:	4013      	ands	r3, r2
 8009460:	000a      	movs	r2, r1
 8009462:	40da      	lsrs	r2, r3
 8009464:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <HAL_RCC_ClockConfig+0x208>)
 8009466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009468:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <HAL_RCC_ClockConfig+0x20c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	0018      	movs	r0, r3
 800946e:	f7fb fe13 	bl	8005098 <HAL_InitTick>
 8009472:	0003      	movs	r3, r0
}
 8009474:	0018      	movs	r0, r3
 8009476:	46bd      	mov	sp, r7
 8009478:	b004      	add	sp, #16
 800947a:	bd80      	pop	{r7, pc}
 800947c:	40022000 	.word	0x40022000
 8009480:	00001388 	.word	0x00001388
 8009484:	40021000 	.word	0x40021000
 8009488:	fffff0ff 	.word	0xfffff0ff
 800948c:	ffff8fff 	.word	0xffff8fff
 8009490:	0800ddec 	.word	0x0800ddec
 8009494:	20000010 	.word	0x20000010
 8009498:	20000014 	.word	0x20000014

0800949c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094a2:	4b3c      	ldr	r3, [pc, #240]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2238      	movs	r2, #56	@ 0x38
 80094a8:	4013      	ands	r3, r2
 80094aa:	d10f      	bne.n	80094cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80094ac:	4b39      	ldr	r3, [pc, #228]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	0adb      	lsrs	r3, r3, #11
 80094b2:	2207      	movs	r2, #7
 80094b4:	4013      	ands	r3, r2
 80094b6:	2201      	movs	r2, #1
 80094b8:	409a      	lsls	r2, r3
 80094ba:	0013      	movs	r3, r2
 80094bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	4835      	ldr	r0, [pc, #212]	@ (8009598 <HAL_RCC_GetSysClockFreq+0xfc>)
 80094c2:	f7f6 fe39 	bl	8000138 <__udivsi3>
 80094c6:	0003      	movs	r3, r0
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	e05d      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094cc:	4b31      	ldr	r3, [pc, #196]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2238      	movs	r2, #56	@ 0x38
 80094d2:	4013      	ands	r3, r2
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d102      	bne.n	80094de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80094d8:	4b30      	ldr	r3, [pc, #192]	@ (800959c <HAL_RCC_GetSysClockFreq+0x100>)
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	e054      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094de:	4b2d      	ldr	r3, [pc, #180]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2238      	movs	r2, #56	@ 0x38
 80094e4:	4013      	ands	r3, r2
 80094e6:	2b10      	cmp	r3, #16
 80094e8:	d138      	bne.n	800955c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80094ea:	4b2a      	ldr	r3, [pc, #168]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	2203      	movs	r2, #3
 80094f0:	4013      	ands	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80094f4:	4b27      	ldr	r3, [pc, #156]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	091b      	lsrs	r3, r3, #4
 80094fa:	2207      	movs	r2, #7
 80094fc:	4013      	ands	r3, r2
 80094fe:	3301      	adds	r3, #1
 8009500:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b03      	cmp	r3, #3
 8009506:	d10d      	bne.n	8009524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	4824      	ldr	r0, [pc, #144]	@ (800959c <HAL_RCC_GetSysClockFreq+0x100>)
 800950c:	f7f6 fe14 	bl	8000138 <__udivsi3>
 8009510:	0003      	movs	r3, r0
 8009512:	0019      	movs	r1, r3
 8009514:	4b1f      	ldr	r3, [pc, #124]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	0a1b      	lsrs	r3, r3, #8
 800951a:	227f      	movs	r2, #127	@ 0x7f
 800951c:	4013      	ands	r3, r2
 800951e:	434b      	muls	r3, r1
 8009520:	617b      	str	r3, [r7, #20]
        break;
 8009522:	e00d      	b.n	8009540 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	481c      	ldr	r0, [pc, #112]	@ (8009598 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009528:	f7f6 fe06 	bl	8000138 <__udivsi3>
 800952c:	0003      	movs	r3, r0
 800952e:	0019      	movs	r1, r3
 8009530:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	0a1b      	lsrs	r3, r3, #8
 8009536:	227f      	movs	r2, #127	@ 0x7f
 8009538:	4013      	ands	r3, r2
 800953a:	434b      	muls	r3, r1
 800953c:	617b      	str	r3, [r7, #20]
        break;
 800953e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009540:	4b14      	ldr	r3, [pc, #80]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	0f5b      	lsrs	r3, r3, #29
 8009546:	2207      	movs	r2, #7
 8009548:	4013      	ands	r3, r2
 800954a:	3301      	adds	r3, #1
 800954c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	6978      	ldr	r0, [r7, #20]
 8009552:	f7f6 fdf1 	bl	8000138 <__udivsi3>
 8009556:	0003      	movs	r3, r0
 8009558:	613b      	str	r3, [r7, #16]
 800955a:	e015      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2238      	movs	r2, #56	@ 0x38
 8009562:	4013      	ands	r3, r2
 8009564:	2b20      	cmp	r3, #32
 8009566:	d103      	bne.n	8009570 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	e00b      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009570:	4b08      	ldr	r3, [pc, #32]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	2238      	movs	r2, #56	@ 0x38
 8009576:	4013      	ands	r3, r2
 8009578:	2b18      	cmp	r3, #24
 800957a:	d103      	bne.n	8009584 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800957c:	23fa      	movs	r3, #250	@ 0xfa
 800957e:	01db      	lsls	r3, r3, #7
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	e001      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009588:	693b      	ldr	r3, [r7, #16]
}
 800958a:	0018      	movs	r0, r3
 800958c:	46bd      	mov	sp, r7
 800958e:	b006      	add	sp, #24
 8009590:	bd80      	pop	{r7, pc}
 8009592:	46c0      	nop			@ (mov r8, r8)
 8009594:	40021000 	.word	0x40021000
 8009598:	00f42400 	.word	0x00f42400
 800959c:	007a1200 	.word	0x007a1200

080095a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095a4:	4b02      	ldr	r3, [pc, #8]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	46c0      	nop			@ (mov r8, r8)
 80095b0:	20000010 	.word	0x20000010

080095b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b4:	b5b0      	push	{r4, r5, r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80095b8:	f7ff fff2 	bl	80095a0 <HAL_RCC_GetHCLKFreq>
 80095bc:	0004      	movs	r4, r0
 80095be:	f7ff fb49 	bl	8008c54 <LL_RCC_GetAPB1Prescaler>
 80095c2:	0003      	movs	r3, r0
 80095c4:	0b1a      	lsrs	r2, r3, #12
 80095c6:	4b05      	ldr	r3, [pc, #20]	@ (80095dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	58d3      	ldr	r3, [r2, r3]
 80095cc:	221f      	movs	r2, #31
 80095ce:	4013      	ands	r3, r2
 80095d0:	40dc      	lsrs	r4, r3
 80095d2:	0023      	movs	r3, r4
}
 80095d4:	0018      	movs	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bdb0      	pop	{r4, r5, r7, pc}
 80095da:	46c0      	nop			@ (mov r8, r8)
 80095dc:	0800de2c 	.word	0x0800de2c

080095e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80095e8:	2313      	movs	r3, #19
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095f0:	2312      	movs	r3, #18
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	029b      	lsls	r3, r3, #10
 8009600:	4013      	ands	r3, r2
 8009602:	d100      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009604:	e0a3      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009606:	2011      	movs	r0, #17
 8009608:	183b      	adds	r3, r7, r0
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800960e:	4b86      	ldr	r3, [pc, #536]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009612:	2380      	movs	r3, #128	@ 0x80
 8009614:	055b      	lsls	r3, r3, #21
 8009616:	4013      	ands	r3, r2
 8009618:	d110      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800961a:	4b83      	ldr	r3, [pc, #524]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800961c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800961e:	4b82      	ldr	r3, [pc, #520]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009620:	2180      	movs	r1, #128	@ 0x80
 8009622:	0549      	lsls	r1, r1, #21
 8009624:	430a      	orrs	r2, r1
 8009626:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009628:	4b7f      	ldr	r3, [pc, #508]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800962a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800962c:	2380      	movs	r3, #128	@ 0x80
 800962e:	055b      	lsls	r3, r3, #21
 8009630:	4013      	ands	r3, r2
 8009632:	60bb      	str	r3, [r7, #8]
 8009634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009636:	183b      	adds	r3, r7, r0
 8009638:	2201      	movs	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800963c:	4b7b      	ldr	r3, [pc, #492]	@ (800982c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b7a      	ldr	r3, [pc, #488]	@ (800982c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009642:	2180      	movs	r1, #128	@ 0x80
 8009644:	0049      	lsls	r1, r1, #1
 8009646:	430a      	orrs	r2, r1
 8009648:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800964a:	f7fb fd81 	bl	8005150 <HAL_GetTick>
 800964e:	0003      	movs	r3, r0
 8009650:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009652:	e00b      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009654:	f7fb fd7c 	bl	8005150 <HAL_GetTick>
 8009658:	0002      	movs	r2, r0
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d904      	bls.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009662:	2313      	movs	r3, #19
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	2203      	movs	r2, #3
 8009668:	701a      	strb	r2, [r3, #0]
        break;
 800966a:	e005      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800966c:	4b6f      	ldr	r3, [pc, #444]	@ (800982c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	2380      	movs	r3, #128	@ 0x80
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	4013      	ands	r3, r2
 8009676:	d0ed      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009678:	2313      	movs	r3, #19
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d154      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009682:	4b69      	ldr	r3, [pc, #420]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009686:	23c0      	movs	r3, #192	@ 0xc0
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4013      	ands	r3, r2
 800968c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d019      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	429a      	cmp	r2, r3
 800969c:	d014      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800969e:	4b62      	ldr	r3, [pc, #392]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096a2:	4a63      	ldr	r2, [pc, #396]	@ (8009830 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096a8:	4b5f      	ldr	r3, [pc, #380]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096ae:	2180      	movs	r1, #128	@ 0x80
 80096b0:	0249      	lsls	r1, r1, #9
 80096b2:	430a      	orrs	r2, r1
 80096b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096b6:	4b5c      	ldr	r3, [pc, #368]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096bc:	495d      	ldr	r1, [pc, #372]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096be:	400a      	ands	r2, r1
 80096c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80096c2:	4b59      	ldr	r3, [pc, #356]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2201      	movs	r2, #1
 80096cc:	4013      	ands	r3, r2
 80096ce:	d016      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d0:	f7fb fd3e 	bl	8005150 <HAL_GetTick>
 80096d4:	0003      	movs	r3, r0
 80096d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096d8:	e00c      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096da:	f7fb fd39 	bl	8005150 <HAL_GetTick>
 80096de:	0002      	movs	r2, r0
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	4a54      	ldr	r2, [pc, #336]	@ (8009838 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d904      	bls.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80096ea:	2313      	movs	r3, #19
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2203      	movs	r2, #3
 80096f0:	701a      	strb	r2, [r3, #0]
            break;
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096f4:	4b4c      	ldr	r3, [pc, #304]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096f8:	2202      	movs	r2, #2
 80096fa:	4013      	ands	r3, r2
 80096fc:	d0ed      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80096fe:	2313      	movs	r3, #19
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009708:	4b47      	ldr	r3, [pc, #284]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800970a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800970c:	4a48      	ldr	r2, [pc, #288]	@ (8009830 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800970e:	4013      	ands	r3, r2
 8009710:	0019      	movs	r1, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	699a      	ldr	r2, [r3, #24]
 8009716:	4b44      	ldr	r3, [pc, #272]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009718:	430a      	orrs	r2, r1
 800971a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800971c:	e00c      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800971e:	2312      	movs	r3, #18
 8009720:	18fb      	adds	r3, r7, r3
 8009722:	2213      	movs	r2, #19
 8009724:	18ba      	adds	r2, r7, r2
 8009726:	7812      	ldrb	r2, [r2, #0]
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	e005      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	2312      	movs	r3, #18
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	2213      	movs	r2, #19
 8009732:	18ba      	adds	r2, r7, r2
 8009734:	7812      	ldrb	r2, [r2, #0]
 8009736:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009738:	2311      	movs	r3, #17
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d105      	bne.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009742:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009746:	4b38      	ldr	r3, [pc, #224]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009748:	493c      	ldr	r1, [pc, #240]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800974a:	400a      	ands	r2, r1
 800974c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2201      	movs	r2, #1
 8009754:	4013      	ands	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009758:	4b33      	ldr	r3, [pc, #204]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800975a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975c:	2203      	movs	r2, #3
 800975e:	4393      	bics	r3, r2
 8009760:	0019      	movs	r1, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b30      	ldr	r3, [pc, #192]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009768:	430a      	orrs	r2, r1
 800976a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2202      	movs	r2, #2
 8009772:	4013      	ands	r3, r2
 8009774:	d009      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009776:	4b2c      	ldr	r3, [pc, #176]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977a:	220c      	movs	r2, #12
 800977c:	4393      	bics	r3, r2
 800977e:	0019      	movs	r1, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	4b28      	ldr	r3, [pc, #160]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009786:	430a      	orrs	r2, r1
 8009788:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2220      	movs	r2, #32
 8009790:	4013      	ands	r3, r2
 8009792:	d009      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009794:	4b24      	ldr	r3, [pc, #144]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009798:	4a29      	ldr	r2, [pc, #164]	@ (8009840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800979a:	4013      	ands	r3, r2
 800979c:	0019      	movs	r1, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	4b21      	ldr	r3, [pc, #132]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097a4:	430a      	orrs	r2, r1
 80097a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	2380      	movs	r3, #128	@ 0x80
 80097ae:	01db      	lsls	r3, r3, #7
 80097b0:	4013      	ands	r3, r2
 80097b2:	d015      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	0899      	lsrs	r1, r3, #2
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695a      	ldr	r2, [r3, #20]
 80097c0:	4b19      	ldr	r3, [pc, #100]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097c2:	430a      	orrs	r2, r1
 80097c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695a      	ldr	r2, [r3, #20]
 80097ca:	2380      	movs	r3, #128	@ 0x80
 80097cc:	05db      	lsls	r3, r3, #23
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d106      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80097d2:	4b15      	ldr	r3, [pc, #84]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	4b14      	ldr	r3, [pc, #80]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097d8:	2180      	movs	r1, #128	@ 0x80
 80097da:	0249      	lsls	r1, r1, #9
 80097dc:	430a      	orrs	r2, r1
 80097de:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	2380      	movs	r3, #128	@ 0x80
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	4013      	ands	r3, r2
 80097ea:	d016      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80097ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f0:	4a14      	ldr	r2, [pc, #80]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	0019      	movs	r1, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691a      	ldr	r2, [r3, #16]
 80097fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097fc:	430a      	orrs	r2, r1
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	01db      	lsls	r3, r3, #7
 8009808:	429a      	cmp	r2, r3
 800980a:	d106      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009812:	2180      	movs	r1, #128	@ 0x80
 8009814:	0249      	lsls	r1, r1, #9
 8009816:	430a      	orrs	r2, r1
 8009818:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800981a:	2312      	movs	r3, #18
 800981c:	18fb      	adds	r3, r7, r3
 800981e:	781b      	ldrb	r3, [r3, #0]
}
 8009820:	0018      	movs	r0, r3
 8009822:	46bd      	mov	sp, r7
 8009824:	b006      	add	sp, #24
 8009826:	bd80      	pop	{r7, pc}
 8009828:	40021000 	.word	0x40021000
 800982c:	40007000 	.word	0x40007000
 8009830:	fffffcff 	.word	0xfffffcff
 8009834:	fffeffff 	.word	0xfffeffff
 8009838:	00001388 	.word	0x00001388
 800983c:	efffffff 	.word	0xefffffff
 8009840:	ffffcfff 	.word	0xffffcfff
 8009844:	ffff3fff 	.word	0xffff3fff

08009848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e0a8      	b.n	80099ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	2382      	movs	r3, #130	@ 0x82
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	429a      	cmp	r2, r3
 800986c:	d009      	beq.n	8009882 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	61da      	str	r2, [r3, #28]
 8009874:	e005      	b.n	8009882 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	225d      	movs	r2, #93	@ 0x5d
 800988c:	5c9b      	ldrb	r3, [r3, r2]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d107      	bne.n	80098a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	225c      	movs	r2, #92	@ 0x5c
 8009898:	2100      	movs	r1, #0
 800989a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	0018      	movs	r0, r3
 80098a0:	f7fb f918 	bl	8004ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	225d      	movs	r2, #93	@ 0x5d
 80098a8:	2102      	movs	r1, #2
 80098aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2140      	movs	r1, #64	@ 0x40
 80098b8:	438a      	bics	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	23e0      	movs	r3, #224	@ 0xe0
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d902      	bls.n	80098ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	e002      	b.n	80098d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098ce:	2380      	movs	r3, #128	@ 0x80
 80098d0:	015b      	lsls	r3, r3, #5
 80098d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68da      	ldr	r2, [r3, #12]
 80098d8:	23f0      	movs	r3, #240	@ 0xf0
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	429a      	cmp	r2, r3
 80098de:	d008      	beq.n	80098f2 <HAL_SPI_Init+0xaa>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	23e0      	movs	r3, #224	@ 0xe0
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d002      	beq.n	80098f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	2382      	movs	r3, #130	@ 0x82
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	401a      	ands	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6899      	ldr	r1, [r3, #8]
 8009900:	2384      	movs	r3, #132	@ 0x84
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	400b      	ands	r3, r1
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	2102      	movs	r1, #2
 800990e:	400b      	ands	r3, r1
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	2101      	movs	r1, #1
 8009918:	400b      	ands	r3, r1
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6999      	ldr	r1, [r3, #24]
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	400b      	ands	r3, r1
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	2138      	movs	r1, #56	@ 0x38
 800992e:	400b      	ands	r3, r1
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	2180      	movs	r1, #128	@ 0x80
 8009938:	400b      	ands	r3, r1
 800993a:	431a      	orrs	r2, r3
 800993c:	0011      	movs	r1, r2
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009942:	2380      	movs	r3, #128	@ 0x80
 8009944:	019b      	lsls	r3, r3, #6
 8009946:	401a      	ands	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	0c1b      	lsrs	r3, r3, #16
 8009956:	2204      	movs	r2, #4
 8009958:	401a      	ands	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995e:	2110      	movs	r1, #16
 8009960:	400b      	ands	r3, r1
 8009962:	431a      	orrs	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009968:	2108      	movs	r1, #8
 800996a:	400b      	ands	r3, r1
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68d9      	ldr	r1, [r3, #12]
 8009972:	23f0      	movs	r3, #240	@ 0xf0
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	400b      	ands	r3, r1
 8009978:	431a      	orrs	r2, r3
 800997a:	0011      	movs	r1, r2
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	2380      	movs	r3, #128	@ 0x80
 8009980:	015b      	lsls	r3, r3, #5
 8009982:	401a      	ands	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69da      	ldr	r2, [r3, #28]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4907      	ldr	r1, [pc, #28]	@ (80099b4 <HAL_SPI_Init+0x16c>)
 8009998:	400a      	ands	r2, r1
 800999a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	225d      	movs	r2, #93	@ 0x5d
 80099a6:	2101      	movs	r1, #1
 80099a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	0018      	movs	r0, r3
 80099ae:	46bd      	mov	sp, r7
 80099b0:	b004      	add	sp, #16
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	fffff7ff 	.word	0xfffff7ff

080099b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e04a      	b.n	8009a60 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	223d      	movs	r2, #61	@ 0x3d
 80099ce:	5c9b      	ldrb	r3, [r3, r2]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d107      	bne.n	80099e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	223c      	movs	r2, #60	@ 0x3c
 80099da:	2100      	movs	r1, #0
 80099dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	0018      	movs	r0, r3
 80099e2:	f7fb f8e5 	bl	8004bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	223d      	movs	r2, #61	@ 0x3d
 80099ea:	2102      	movs	r1, #2
 80099ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3304      	adds	r3, #4
 80099f6:	0019      	movs	r1, r3
 80099f8:	0010      	movs	r0, r2
 80099fa:	f000 f9b3 	bl	8009d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2248      	movs	r2, #72	@ 0x48
 8009a02:	2101      	movs	r1, #1
 8009a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	223e      	movs	r2, #62	@ 0x3e
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	5499      	strb	r1, [r3, r2]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	223f      	movs	r2, #63	@ 0x3f
 8009a12:	2101      	movs	r1, #1
 8009a14:	5499      	strb	r1, [r3, r2]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2240      	movs	r2, #64	@ 0x40
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	5499      	strb	r1, [r3, r2]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2241      	movs	r2, #65	@ 0x41
 8009a22:	2101      	movs	r1, #1
 8009a24:	5499      	strb	r1, [r3, r2]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2242      	movs	r2, #66	@ 0x42
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	5499      	strb	r1, [r3, r2]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2243      	movs	r2, #67	@ 0x43
 8009a32:	2101      	movs	r1, #1
 8009a34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2244      	movs	r2, #68	@ 0x44
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	5499      	strb	r1, [r3, r2]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2245      	movs	r2, #69	@ 0x45
 8009a42:	2101      	movs	r1, #1
 8009a44:	5499      	strb	r1, [r3, r2]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2246      	movs	r2, #70	@ 0x46
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	5499      	strb	r1, [r3, r2]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2247      	movs	r2, #71	@ 0x47
 8009a52:	2101      	movs	r1, #1
 8009a54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	223d      	movs	r2, #61	@ 0x3d
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	0018      	movs	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b002      	add	sp, #8
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	223d      	movs	r2, #61	@ 0x3d
 8009a74:	5c9b      	ldrb	r3, [r3, r2]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d001      	beq.n	8009a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e03c      	b.n	8009afa <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	223d      	movs	r2, #61	@ 0x3d
 8009a84:	2102      	movs	r1, #2
 8009a86:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2101      	movs	r1, #1
 8009a94:	430a      	orrs	r2, r1
 8009a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a19      	ldr	r2, [pc, #100]	@ (8009b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a18      	ldr	r2, [pc, #96]	@ (8009b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <HAL_TIM_Base_Start_IT+0xa4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d116      	bne.n	8009ae4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	4a14      	ldr	r2, [pc, #80]	@ (8009b10 <HAL_TIM_Base_Start_IT+0xa8>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b06      	cmp	r3, #6
 8009ac6:	d016      	beq.n	8009af6 <HAL_TIM_Base_Start_IT+0x8e>
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	2380      	movs	r3, #128	@ 0x80
 8009acc:	025b      	lsls	r3, r3, #9
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d011      	beq.n	8009af6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2101      	movs	r1, #1
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae2:	e008      	b.n	8009af6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2101      	movs	r1, #1
 8009af0:	430a      	orrs	r2, r1
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	e000      	b.n	8009af8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	0018      	movs	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b004      	add	sp, #16
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	46c0      	nop			@ (mov r8, r8)
 8009b04:	40012c00 	.word	0x40012c00
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	00010007 	.word	0x00010007

08009b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	4013      	ands	r3, r2
 8009b32:	d021      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2202      	movs	r2, #2
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d01d      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2203      	movs	r2, #3
 8009b42:	4252      	negs	r2, r2
 8009b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	2203      	movs	r2, #3
 8009b54:	4013      	ands	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	f000 f8ea 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009b60:	e007      	b.n	8009b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	0018      	movs	r0, r3
 8009b66:	f000 f8dd 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f000 f8e9 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d022      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2204      	movs	r2, #4
 8009b84:	4013      	ands	r3, r2
 8009b86:	d01e      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2205      	movs	r2, #5
 8009b8e:	4252      	negs	r2, r2
 8009b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	23c0      	movs	r3, #192	@ 0xc0
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 f8c3 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009bae:	e007      	b.n	8009bc0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f000 f8b6 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f000 f8c2 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2208      	movs	r2, #8
 8009bca:	4013      	ands	r3, r2
 8009bcc:	d021      	beq.n	8009c12 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	d01d      	beq.n	8009c12 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2209      	movs	r2, #9
 8009bdc:	4252      	negs	r2, r2
 8009bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2204      	movs	r2, #4
 8009be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	2203      	movs	r2, #3
 8009bee:	4013      	ands	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f000 f89d 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009bfa:	e007      	b.n	8009c0c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f000 f890 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	0018      	movs	r0, r3
 8009c08:	f000 f89c 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2210      	movs	r2, #16
 8009c16:	4013      	ands	r3, r2
 8009c18:	d022      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2210      	movs	r2, #16
 8009c1e:	4013      	ands	r3, r2
 8009c20:	d01e      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2211      	movs	r2, #17
 8009c28:	4252      	negs	r2, r2
 8009c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2208      	movs	r2, #8
 8009c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	23c0      	movs	r3, #192	@ 0xc0
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d004      	beq.n	8009c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	0018      	movs	r0, r3
 8009c44:	f000 f876 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009c48:	e007      	b.n	8009c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f000 f869 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 f875 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2201      	movs	r2, #1
 8009c64:	4013      	ands	r3, r2
 8009c66:	d00c      	beq.n	8009c82 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d008      	beq.n	8009c82 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2202      	movs	r2, #2
 8009c76:	4252      	negs	r2, r2
 8009c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f7f9 fd7b 	bl	8003778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2280      	movs	r2, #128	@ 0x80
 8009c86:	4013      	ands	r3, r2
 8009c88:	d104      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	2380      	movs	r3, #128	@ 0x80
 8009c8e:	019b      	lsls	r3, r3, #6
 8009c90:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c92:	d00b      	beq.n	8009cac <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2280      	movs	r2, #128	@ 0x80
 8009c98:	4013      	ands	r3, r2
 8009c9a:	d007      	beq.n	8009cac <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8009d1c <HAL_TIM_IRQHandler+0x208>)
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f000 f8e8 	bl	8009e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	2380      	movs	r3, #128	@ 0x80
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d00b      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2280      	movs	r2, #128	@ 0x80
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a17      	ldr	r2, [pc, #92]	@ (8009d20 <HAL_TIM_IRQHandler+0x20c>)
 8009cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f000 f8df 	bl	8009e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2240      	movs	r2, #64	@ 0x40
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	d00c      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2240      	movs	r2, #64	@ 0x40
 8009cda:	4013      	ands	r3, r2
 8009cdc:	d008      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2241      	movs	r2, #65	@ 0x41
 8009ce4:	4252      	negs	r2, r2
 8009ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	0018      	movs	r0, r3
 8009cec:	f000 f832 	bl	8009d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	d00c      	beq.n	8009d12 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d008      	beq.n	8009d12 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2221      	movs	r2, #33	@ 0x21
 8009d06:	4252      	negs	r2, r2
 8009d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f000 f8ad 	bl	8009e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	46bd      	mov	sp, r7
 8009d16:	b004      	add	sp, #16
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	46c0      	nop			@ (mov r8, r8)
 8009d1c:	ffffdf7f 	.word	0xffffdf7f
 8009d20:	fffffeff 	.word	0xfffffeff

08009d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d2c:	46c0      	nop			@ (mov r8, r8)
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b002      	add	sp, #8
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d3c:	46c0      	nop			@ (mov r8, r8)
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	b002      	add	sp, #8
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d4c:	46c0      	nop			@ (mov r8, r8)
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b002      	add	sp, #8
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d5c:	46c0      	nop			@ (mov r8, r8)
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b002      	add	sp, #8
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a36      	ldr	r2, [pc, #216]	@ (8009e50 <TIM_Base_SetConfig+0xec>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <TIM_Base_SetConfig+0x20>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a35      	ldr	r2, [pc, #212]	@ (8009e54 <TIM_Base_SetConfig+0xf0>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d108      	bne.n	8009d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2270      	movs	r2, #112	@ 0x70
 8009d88:	4393      	bics	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a2d      	ldr	r2, [pc, #180]	@ (8009e50 <TIM_Base_SetConfig+0xec>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <TIM_Base_SetConfig+0x62>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a2c      	ldr	r2, [pc, #176]	@ (8009e54 <TIM_Base_SetConfig+0xf0>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00f      	beq.n	8009dc6 <TIM_Base_SetConfig+0x62>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a2b      	ldr	r2, [pc, #172]	@ (8009e58 <TIM_Base_SetConfig+0xf4>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00b      	beq.n	8009dc6 <TIM_Base_SetConfig+0x62>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a2a      	ldr	r2, [pc, #168]	@ (8009e5c <TIM_Base_SetConfig+0xf8>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <TIM_Base_SetConfig+0x62>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a29      	ldr	r2, [pc, #164]	@ (8009e60 <TIM_Base_SetConfig+0xfc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_Base_SetConfig+0x62>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a28      	ldr	r2, [pc, #160]	@ (8009e64 <TIM_Base_SetConfig+0x100>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d108      	bne.n	8009dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4a27      	ldr	r2, [pc, #156]	@ (8009e68 <TIM_Base_SetConfig+0x104>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2280      	movs	r2, #128	@ 0x80
 8009ddc:	4393      	bics	r3, r2
 8009dde:	001a      	movs	r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a13      	ldr	r2, [pc, #76]	@ (8009e50 <TIM_Base_SetConfig+0xec>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00b      	beq.n	8009e1e <TIM_Base_SetConfig+0xba>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a14      	ldr	r2, [pc, #80]	@ (8009e5c <TIM_Base_SetConfig+0xf8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d007      	beq.n	8009e1e <TIM_Base_SetConfig+0xba>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a13      	ldr	r2, [pc, #76]	@ (8009e60 <TIM_Base_SetConfig+0xfc>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_Base_SetConfig+0xba>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a12      	ldr	r2, [pc, #72]	@ (8009e64 <TIM_Base_SetConfig+0x100>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d103      	bne.n	8009e26 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	691a      	ldr	r2, [r3, #16]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2201      	movs	r2, #1
 8009e32:	4013      	ands	r3, r2
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d106      	bne.n	8009e46 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4393      	bics	r3, r2
 8009e40:	001a      	movs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	611a      	str	r2, [r3, #16]
  }
}
 8009e46:	46c0      	nop			@ (mov r8, r8)
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b004      	add	sp, #16
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	46c0      	nop			@ (mov r8, r8)
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	40000400 	.word	0x40000400
 8009e58:	40002000 	.word	0x40002000
 8009e5c:	40014000 	.word	0x40014000
 8009e60:	40014400 	.word	0x40014400
 8009e64:	40014800 	.word	0x40014800
 8009e68:	fffffcff 	.word	0xfffffcff

08009e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e74:	46c0      	nop			@ (mov r8, r8)
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b002      	add	sp, #8
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e84:	46c0      	nop			@ (mov r8, r8)
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e94:	46c0      	nop			@ (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b002      	add	sp, #8
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e046      	b.n	8009f3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2288      	movs	r2, #136	@ 0x88
 8009eb2:	589b      	ldr	r3, [r3, r2]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2284      	movs	r2, #132	@ 0x84
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f7fa fe9c 	bl	8004c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2288      	movs	r2, #136	@ 0x88
 8009ecc:	2124      	movs	r1, #36	@ 0x24
 8009ece:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2101      	movs	r1, #1
 8009edc:	438a      	bics	r2, r1
 8009ede:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	0018      	movs	r0, r3
 8009eec:	f000 fae4 	bl	800a4b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f000 f93c 	bl	800a170 <UART_SetConfig>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e01c      	b.n	8009f3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	490d      	ldr	r1, [pc, #52]	@ (8009f44 <HAL_UART_Init+0xa8>)
 8009f0e:	400a      	ands	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	212a      	movs	r1, #42	@ 0x2a
 8009f1e:	438a      	bics	r2, r1
 8009f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	0018      	movs	r0, r3
 8009f36:	f000 fb73 	bl	800a620 <UART_CheckIdleState>
 8009f3a:	0003      	movs	r3, r0
}
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	b002      	add	sp, #8
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	ffffb7ff 	.word	0xffffb7ff

08009f48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	1dbb      	adds	r3, r7, #6
 8009f54:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2288      	movs	r2, #136	@ 0x88
 8009f5a:	589b      	ldr	r3, [r3, r2]
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d000      	beq.n	8009f62 <HAL_UART_Transmit_DMA+0x1a>
 8009f60:	e079      	b.n	800a056 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_UART_Transmit_DMA+0x28>
 8009f68:	1dbb      	adds	r3, r7, #6
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e071      	b.n	800a058 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	2380      	movs	r3, #128	@ 0x80
 8009f7a:	015b      	lsls	r3, r3, #5
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d109      	bne.n	8009f94 <HAL_UART_Transmit_DMA+0x4c>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d105      	bne.n	8009f94 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	d001      	beq.n	8009f94 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e061      	b.n	800a058 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1dba      	adds	r2, r7, #6
 8009f9e:	2154      	movs	r1, #84	@ 0x54
 8009fa0:	8812      	ldrh	r2, [r2, #0]
 8009fa2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	1dba      	adds	r2, r7, #6
 8009fa8:	2156      	movs	r1, #86	@ 0x56
 8009faa:	8812      	ldrh	r2, [r2, #0]
 8009fac:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2290      	movs	r2, #144	@ 0x90
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2288      	movs	r2, #136	@ 0x88
 8009fba:	2121      	movs	r1, #33	@ 0x21
 8009fbc:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d028      	beq.n	800a018 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fca:	4a25      	ldr	r2, [pc, #148]	@ (800a060 <HAL_UART_Transmit_DMA+0x118>)
 8009fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fd2:	4a24      	ldr	r2, [pc, #144]	@ (800a064 <HAL_UART_Transmit_DMA+0x11c>)
 8009fd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fda:	4a23      	ldr	r2, [pc, #140]	@ (800a068 <HAL_UART_Transmit_DMA+0x120>)
 8009fdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fee:	0019      	movs	r1, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3328      	adds	r3, #40	@ 0x28
 8009ff6:	001a      	movs	r2, r3
 8009ff8:	1dbb      	adds	r3, r7, #6
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	f7fc fa04 	bl	8006408 <HAL_DMA_Start_IT>
 800a000:	1e03      	subs	r3, r0, #0
 800a002:	d009      	beq.n	800a018 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2290      	movs	r2, #144	@ 0x90
 800a008:	2110      	movs	r1, #16
 800a00a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2288      	movs	r2, #136	@ 0x88
 800a010:	2120      	movs	r1, #32
 800a012:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e01f      	b.n	800a058 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2240      	movs	r2, #64	@ 0x40
 800a01e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a020:	f3ef 8310 	mrs	r3, PRIMASK
 800a024:	613b      	str	r3, [r7, #16]
  return(result);
 800a026:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	2301      	movs	r3, #1
 800a02c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f383 8810 	msr	PRIMASK, r3
}
 800a034:	46c0      	nop			@ (mov r8, r8)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2180      	movs	r1, #128	@ 0x80
 800a042:	430a      	orrs	r2, r1
 800a044:	609a      	str	r2, [r3, #8]
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	f383 8810 	msr	PRIMASK, r3
}
 800a050:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	e000      	b.n	800a058 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a056:	2302      	movs	r3, #2
  }
}
 800a058:	0018      	movs	r0, r3
 800a05a:	46bd      	mov	sp, r7
 800a05c:	b008      	add	sp, #32
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	0800aaed 	.word	0x0800aaed
 800a064:	0800ab85 	.word	0x0800ab85
 800a068:	0800ad17 	.word	0x0800ad17

0800a06c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	1dbb      	adds	r3, r7, #6
 800a078:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	228c      	movs	r2, #140	@ 0x8c
 800a07e:	589b      	ldr	r3, [r3, r2]
 800a080:	2b20      	cmp	r3, #32
 800a082:	d145      	bne.n	800a110 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_UART_Receive_DMA+0x26>
 800a08a:	1dbb      	adds	r3, r7, #6
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e03d      	b.n	800a112 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689a      	ldr	r2, [r3, #8]
 800a09a:	2380      	movs	r3, #128	@ 0x80
 800a09c:	015b      	lsls	r3, r3, #5
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d109      	bne.n	800a0b6 <HAL_UART_Receive_DMA+0x4a>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	d001      	beq.n	800a0b6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e02d      	b.n	800a112 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	2380      	movs	r3, #128	@ 0x80
 800a0c4:	041b      	lsls	r3, r3, #16
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	d019      	beq.n	800a0fe <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ce:	613b      	str	r3, [r7, #16]
  return(result);
 800a0d0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f383 8810 	msr	PRIMASK, r3
}
 800a0de:	46c0      	nop			@ (mov r8, r8)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2180      	movs	r1, #128	@ 0x80
 800a0ec:	04c9      	lsls	r1, r1, #19
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	f383 8810 	msr	PRIMASK, r3
}
 800a0fc:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a0fe:	1dbb      	adds	r3, r7, #6
 800a100:	881a      	ldrh	r2, [r3, #0]
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	0018      	movs	r0, r3
 800a108:	f000 fba4 	bl	800a854 <UART_Start_Receive_DMA>
 800a10c:	0003      	movs	r3, r0
 800a10e:	e000      	b.n	800a112 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a110:	2302      	movs	r3, #2
  }
}
 800a112:	0018      	movs	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	b008      	add	sp, #32
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b082      	sub	sp, #8
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a122:	46c0      	nop			@ (mov r8, r8)
 800a124:	46bd      	mov	sp, r7
 800a126:	b002      	add	sp, #8
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a132:	46c0      	nop			@ (mov r8, r8)
 800a134:	46bd      	mov	sp, r7
 800a136:	b002      	add	sp, #8
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a142:	46c0      	nop			@ (mov r8, r8)
 800a144:	46bd      	mov	sp, r7
 800a146:	b002      	add	sp, #8
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a152:	46c0      	nop			@ (mov r8, r8)
 800a154:	46bd      	mov	sp, r7
 800a156:	b002      	add	sp, #8
 800a158:	bd80      	pop	{r7, pc}

0800a15a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	000a      	movs	r2, r1
 800a164:	1cbb      	adds	r3, r7, #2
 800a166:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a168:	46c0      	nop			@ (mov r8, r8)
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b002      	add	sp, #8
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a178:	231a      	movs	r3, #26
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	431a      	orrs	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	431a      	orrs	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	4313      	orrs	r3, r2
 800a196:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4abc      	ldr	r2, [pc, #752]	@ (800a490 <UART_SetConfig+0x320>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	0019      	movs	r1, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4ab7      	ldr	r2, [pc, #732]	@ (800a494 <UART_SetConfig+0x324>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	4aae      	ldr	r2, [pc, #696]	@ (800a498 <UART_SetConfig+0x328>)
 800a1de:	4013      	ands	r3, r2
 800a1e0:	0019      	movs	r1, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f2:	220f      	movs	r2, #15
 800a1f4:	4393      	bics	r3, r2
 800a1f6:	0019      	movs	r1, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4aa4      	ldr	r2, [pc, #656]	@ (800a49c <UART_SetConfig+0x32c>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d127      	bne.n	800a25e <UART_SetConfig+0xee>
 800a20e:	4ba4      	ldr	r3, [pc, #656]	@ (800a4a0 <UART_SetConfig+0x330>)
 800a210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a212:	2203      	movs	r2, #3
 800a214:	4013      	ands	r3, r2
 800a216:	2b03      	cmp	r3, #3
 800a218:	d017      	beq.n	800a24a <UART_SetConfig+0xda>
 800a21a:	d81b      	bhi.n	800a254 <UART_SetConfig+0xe4>
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d00a      	beq.n	800a236 <UART_SetConfig+0xc6>
 800a220:	d818      	bhi.n	800a254 <UART_SetConfig+0xe4>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <UART_SetConfig+0xbc>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d00a      	beq.n	800a240 <UART_SetConfig+0xd0>
 800a22a:	e013      	b.n	800a254 <UART_SetConfig+0xe4>
 800a22c:	231b      	movs	r3, #27
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	e058      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a236:	231b      	movs	r3, #27
 800a238:	18fb      	adds	r3, r7, r3
 800a23a:	2202      	movs	r2, #2
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	e053      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a240:	231b      	movs	r3, #27
 800a242:	18fb      	adds	r3, r7, r3
 800a244:	2204      	movs	r2, #4
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	e04e      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a24a:	231b      	movs	r3, #27
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	2208      	movs	r2, #8
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	e049      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a254:	231b      	movs	r3, #27
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	2210      	movs	r2, #16
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e044      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a90      	ldr	r2, [pc, #576]	@ (800a4a4 <UART_SetConfig+0x334>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d127      	bne.n	800a2b8 <UART_SetConfig+0x148>
 800a268:	4b8d      	ldr	r3, [pc, #564]	@ (800a4a0 <UART_SetConfig+0x330>)
 800a26a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26c:	220c      	movs	r2, #12
 800a26e:	4013      	ands	r3, r2
 800a270:	2b0c      	cmp	r3, #12
 800a272:	d017      	beq.n	800a2a4 <UART_SetConfig+0x134>
 800a274:	d81b      	bhi.n	800a2ae <UART_SetConfig+0x13e>
 800a276:	2b08      	cmp	r3, #8
 800a278:	d00a      	beq.n	800a290 <UART_SetConfig+0x120>
 800a27a:	d818      	bhi.n	800a2ae <UART_SetConfig+0x13e>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <UART_SetConfig+0x116>
 800a280:	2b04      	cmp	r3, #4
 800a282:	d00a      	beq.n	800a29a <UART_SetConfig+0x12a>
 800a284:	e013      	b.n	800a2ae <UART_SetConfig+0x13e>
 800a286:	231b      	movs	r3, #27
 800a288:	18fb      	adds	r3, r7, r3
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e02b      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a290:	231b      	movs	r3, #27
 800a292:	18fb      	adds	r3, r7, r3
 800a294:	2202      	movs	r2, #2
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	e026      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a29a:	231b      	movs	r3, #27
 800a29c:	18fb      	adds	r3, r7, r3
 800a29e:	2204      	movs	r2, #4
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e021      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a2a4:	231b      	movs	r3, #27
 800a2a6:	18fb      	adds	r3, r7, r3
 800a2a8:	2208      	movs	r2, #8
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	e01c      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a2ae:	231b      	movs	r3, #27
 800a2b0:	18fb      	adds	r3, r7, r3
 800a2b2:	2210      	movs	r2, #16
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	e017      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a7a      	ldr	r2, [pc, #488]	@ (800a4a8 <UART_SetConfig+0x338>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d104      	bne.n	800a2cc <UART_SetConfig+0x15c>
 800a2c2:	231b      	movs	r3, #27
 800a2c4:	18fb      	adds	r3, r7, r3
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	701a      	strb	r2, [r3, #0]
 800a2ca:	e00d      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a76      	ldr	r2, [pc, #472]	@ (800a4ac <UART_SetConfig+0x33c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d104      	bne.n	800a2e0 <UART_SetConfig+0x170>
 800a2d6:	231b      	movs	r3, #27
 800a2d8:	18fb      	adds	r3, r7, r3
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	e003      	b.n	800a2e8 <UART_SetConfig+0x178>
 800a2e0:	231b      	movs	r3, #27
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	2380      	movs	r3, #128	@ 0x80
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d000      	beq.n	800a2f6 <UART_SetConfig+0x186>
 800a2f4:	e065      	b.n	800a3c2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800a2f6:	231b      	movs	r3, #27
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d015      	beq.n	800a32c <UART_SetConfig+0x1bc>
 800a300:	dc18      	bgt.n	800a334 <UART_SetConfig+0x1c4>
 800a302:	2b04      	cmp	r3, #4
 800a304:	d00d      	beq.n	800a322 <UART_SetConfig+0x1b2>
 800a306:	dc15      	bgt.n	800a334 <UART_SetConfig+0x1c4>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <UART_SetConfig+0x1a2>
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d005      	beq.n	800a31c <UART_SetConfig+0x1ac>
 800a310:	e010      	b.n	800a334 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a312:	f7ff f94f 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 800a316:	0003      	movs	r3, r0
 800a318:	617b      	str	r3, [r7, #20]
        break;
 800a31a:	e012      	b.n	800a342 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a31c:	4b64      	ldr	r3, [pc, #400]	@ (800a4b0 <UART_SetConfig+0x340>)
 800a31e:	617b      	str	r3, [r7, #20]
        break;
 800a320:	e00f      	b.n	800a342 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a322:	f7ff f8bb 	bl	800949c <HAL_RCC_GetSysClockFreq>
 800a326:	0003      	movs	r3, r0
 800a328:	617b      	str	r3, [r7, #20]
        break;
 800a32a:	e00a      	b.n	800a342 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32c:	2380      	movs	r3, #128	@ 0x80
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	617b      	str	r3, [r7, #20]
        break;
 800a332:	e006      	b.n	800a342 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a338:	231a      	movs	r3, #26
 800a33a:	18fb      	adds	r3, r7, r3
 800a33c:	2201      	movs	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
        break;
 800a340:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d100      	bne.n	800a34a <UART_SetConfig+0x1da>
 800a348:	e08d      	b.n	800a466 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a34e:	4b59      	ldr	r3, [pc, #356]	@ (800a4b4 <UART_SetConfig+0x344>)
 800a350:	0052      	lsls	r2, r2, #1
 800a352:	5ad3      	ldrh	r3, [r2, r3]
 800a354:	0019      	movs	r1, r3
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f7f5 feee 	bl	8000138 <__udivsi3>
 800a35c:	0003      	movs	r3, r0
 800a35e:	005a      	lsls	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	085b      	lsrs	r3, r3, #1
 800a366:	18d2      	adds	r2, r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	0019      	movs	r1, r3
 800a36e:	0010      	movs	r0, r2
 800a370:	f7f5 fee2 	bl	8000138 <__udivsi3>
 800a374:	0003      	movs	r3, r0
 800a376:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2b0f      	cmp	r3, #15
 800a37c:	d91c      	bls.n	800a3b8 <UART_SetConfig+0x248>
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	2380      	movs	r3, #128	@ 0x80
 800a382:	025b      	lsls	r3, r3, #9
 800a384:	429a      	cmp	r2, r3
 800a386:	d217      	bcs.n	800a3b8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	200e      	movs	r0, #14
 800a38e:	183b      	adds	r3, r7, r0
 800a390:	210f      	movs	r1, #15
 800a392:	438a      	bics	r2, r1
 800a394:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	085b      	lsrs	r3, r3, #1
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2207      	movs	r2, #7
 800a39e:	4013      	ands	r3, r2
 800a3a0:	b299      	uxth	r1, r3
 800a3a2:	183b      	adds	r3, r7, r0
 800a3a4:	183a      	adds	r2, r7, r0
 800a3a6:	8812      	ldrh	r2, [r2, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	183a      	adds	r2, r7, r0
 800a3b2:	8812      	ldrh	r2, [r2, #0]
 800a3b4:	60da      	str	r2, [r3, #12]
 800a3b6:	e056      	b.n	800a466 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b8:	231a      	movs	r3, #26
 800a3ba:	18fb      	adds	r3, r7, r3
 800a3bc:	2201      	movs	r2, #1
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	e051      	b.n	800a466 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3c2:	231b      	movs	r3, #27
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b08      	cmp	r3, #8
 800a3ca:	d015      	beq.n	800a3f8 <UART_SetConfig+0x288>
 800a3cc:	dc18      	bgt.n	800a400 <UART_SetConfig+0x290>
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d00d      	beq.n	800a3ee <UART_SetConfig+0x27e>
 800a3d2:	dc15      	bgt.n	800a400 <UART_SetConfig+0x290>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <UART_SetConfig+0x26e>
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d005      	beq.n	800a3e8 <UART_SetConfig+0x278>
 800a3dc:	e010      	b.n	800a400 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7ff f8e9 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 800a3e2:	0003      	movs	r3, r0
 800a3e4:	617b      	str	r3, [r7, #20]
        break;
 800a3e6:	e012      	b.n	800a40e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e8:	4b31      	ldr	r3, [pc, #196]	@ (800a4b0 <UART_SetConfig+0x340>)
 800a3ea:	617b      	str	r3, [r7, #20]
        break;
 800a3ec:	e00f      	b.n	800a40e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ee:	f7ff f855 	bl	800949c <HAL_RCC_GetSysClockFreq>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	617b      	str	r3, [r7, #20]
        break;
 800a3f6:	e00a      	b.n	800a40e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f8:	2380      	movs	r3, #128	@ 0x80
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	617b      	str	r3, [r7, #20]
        break;
 800a3fe:	e006      	b.n	800a40e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a404:	231a      	movs	r3, #26
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	2201      	movs	r2, #1
 800a40a:	701a      	strb	r2, [r3, #0]
        break;
 800a40c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d028      	beq.n	800a466 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a418:	4b26      	ldr	r3, [pc, #152]	@ (800a4b4 <UART_SetConfig+0x344>)
 800a41a:	0052      	lsls	r2, r2, #1
 800a41c:	5ad3      	ldrh	r3, [r2, r3]
 800a41e:	0019      	movs	r1, r3
 800a420:	6978      	ldr	r0, [r7, #20]
 800a422:	f7f5 fe89 	bl	8000138 <__udivsi3>
 800a426:	0003      	movs	r3, r0
 800a428:	001a      	movs	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	18d2      	adds	r2, r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	0019      	movs	r1, r3
 800a438:	0010      	movs	r0, r2
 800a43a:	f7f5 fe7d 	bl	8000138 <__udivsi3>
 800a43e:	0003      	movs	r3, r0
 800a440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d90a      	bls.n	800a45e <UART_SetConfig+0x2ee>
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	2380      	movs	r3, #128	@ 0x80
 800a44c:	025b      	lsls	r3, r3, #9
 800a44e:	429a      	cmp	r2, r3
 800a450:	d205      	bcs.n	800a45e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60da      	str	r2, [r3, #12]
 800a45c:	e003      	b.n	800a466 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a45e:	231a      	movs	r3, #26
 800a460:	18fb      	adds	r3, r7, r3
 800a462:	2201      	movs	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	226a      	movs	r2, #106	@ 0x6a
 800a46a:	2101      	movs	r1, #1
 800a46c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2268      	movs	r2, #104	@ 0x68
 800a472:	2101      	movs	r1, #1
 800a474:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a482:	231a      	movs	r3, #26
 800a484:	18fb      	adds	r3, r7, r3
 800a486:	781b      	ldrb	r3, [r3, #0]
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b008      	add	sp, #32
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	cfff69f3 	.word	0xcfff69f3
 800a494:	ffffcfff 	.word	0xffffcfff
 800a498:	11fff4ff 	.word	0x11fff4ff
 800a49c:	40013800 	.word	0x40013800
 800a4a0:	40021000 	.word	0x40021000
 800a4a4:	40004400 	.word	0x40004400
 800a4a8:	40004800 	.word	0x40004800
 800a4ac:	40004c00 	.word	0x40004c00
 800a4b0:	00f42400 	.word	0x00f42400
 800a4b4:	0800de68 	.word	0x0800de68

0800a4b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d00b      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	4a4a      	ldr	r2, [pc, #296]	@ (800a5fc <UART_AdvFeatureConfig+0x144>)
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	0019      	movs	r1, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	d00b      	beq.n	800a504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4a43      	ldr	r2, [pc, #268]	@ (800a600 <UART_AdvFeatureConfig+0x148>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	0019      	movs	r1, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a508:	2202      	movs	r2, #2
 800a50a:	4013      	ands	r3, r2
 800a50c:	d00b      	beq.n	800a526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	4a3b      	ldr	r2, [pc, #236]	@ (800a604 <UART_AdvFeatureConfig+0x14c>)
 800a516:	4013      	ands	r3, r2
 800a518:	0019      	movs	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	2204      	movs	r2, #4
 800a52c:	4013      	ands	r3, r2
 800a52e:	d00b      	beq.n	800a548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	4a34      	ldr	r2, [pc, #208]	@ (800a608 <UART_AdvFeatureConfig+0x150>)
 800a538:	4013      	ands	r3, r2
 800a53a:	0019      	movs	r1, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	2210      	movs	r2, #16
 800a54e:	4013      	ands	r3, r2
 800a550:	d00b      	beq.n	800a56a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	4a2c      	ldr	r2, [pc, #176]	@ (800a60c <UART_AdvFeatureConfig+0x154>)
 800a55a:	4013      	ands	r3, r2
 800a55c:	0019      	movs	r1, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56e:	2220      	movs	r2, #32
 800a570:	4013      	ands	r3, r2
 800a572:	d00b      	beq.n	800a58c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	4a25      	ldr	r2, [pc, #148]	@ (800a610 <UART_AdvFeatureConfig+0x158>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	0019      	movs	r1, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	2240      	movs	r2, #64	@ 0x40
 800a592:	4013      	ands	r3, r2
 800a594:	d01d      	beq.n	800a5d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	4a1d      	ldr	r2, [pc, #116]	@ (800a614 <UART_AdvFeatureConfig+0x15c>)
 800a59e:	4013      	ands	r3, r2
 800a5a0:	0019      	movs	r1, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5b2:	2380      	movs	r3, #128	@ 0x80
 800a5b4:	035b      	lsls	r3, r3, #13
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d10b      	bne.n	800a5d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	4a15      	ldr	r2, [pc, #84]	@ (800a618 <UART_AdvFeatureConfig+0x160>)
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d6:	2280      	movs	r2, #128	@ 0x80
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d00b      	beq.n	800a5f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4a0e      	ldr	r2, [pc, #56]	@ (800a61c <UART_AdvFeatureConfig+0x164>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	605a      	str	r2, [r3, #4]
  }
}
 800a5f4:	46c0      	nop			@ (mov r8, r8)
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	ffff7fff 	.word	0xffff7fff
 800a600:	fffdffff 	.word	0xfffdffff
 800a604:	fffeffff 	.word	0xfffeffff
 800a608:	fffbffff 	.word	0xfffbffff
 800a60c:	ffffefff 	.word	0xffffefff
 800a610:	ffffdfff 	.word	0xffffdfff
 800a614:	ffefffff 	.word	0xffefffff
 800a618:	ff9fffff 	.word	0xff9fffff
 800a61c:	fff7ffff 	.word	0xfff7ffff

0800a620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b092      	sub	sp, #72	@ 0x48
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2290      	movs	r2, #144	@ 0x90
 800a62c:	2100      	movs	r1, #0
 800a62e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a630:	f7fa fd8e 	bl	8005150 <HAL_GetTick>
 800a634:	0003      	movs	r3, r0
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2208      	movs	r2, #8
 800a640:	4013      	ands	r3, r2
 800a642:	2b08      	cmp	r3, #8
 800a644:	d12d      	bne.n	800a6a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a648:	2280      	movs	r2, #128	@ 0x80
 800a64a:	0391      	lsls	r1, r2, #14
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4a47      	ldr	r2, [pc, #284]	@ (800a76c <UART_CheckIdleState+0x14c>)
 800a650:	9200      	str	r2, [sp, #0]
 800a652:	2200      	movs	r2, #0
 800a654:	f000 f88e 	bl	800a774 <UART_WaitOnFlagUntilTimeout>
 800a658:	1e03      	subs	r3, r0, #0
 800a65a:	d022      	beq.n	800a6a2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a65c:	f3ef 8310 	mrs	r3, PRIMASK
 800a660:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a664:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a666:	2301      	movs	r3, #1
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	f383 8810 	msr	PRIMASK, r3
}
 800a670:	46c0      	nop			@ (mov r8, r8)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2180      	movs	r1, #128	@ 0x80
 800a67e:	438a      	bics	r2, r1
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a688:	f383 8810 	msr	PRIMASK, r3
}
 800a68c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2288      	movs	r2, #136	@ 0x88
 800a692:	2120      	movs	r1, #32
 800a694:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2284      	movs	r2, #132	@ 0x84
 800a69a:	2100      	movs	r1, #0
 800a69c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e060      	b.n	800a764 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d146      	bne.n	800a73e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b2:	2280      	movs	r2, #128	@ 0x80
 800a6b4:	03d1      	lsls	r1, r2, #15
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a76c <UART_CheckIdleState+0x14c>)
 800a6ba:	9200      	str	r2, [sp, #0]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f000 f859 	bl	800a774 <UART_WaitOnFlagUntilTimeout>
 800a6c2:	1e03      	subs	r3, r0, #0
 800a6c4:	d03b      	beq.n	800a73e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f383 8810 	msr	PRIMASK, r3
}
 800a6da:	46c0      	nop			@ (mov r8, r8)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4922      	ldr	r1, [pc, #136]	@ (800a770 <UART_CheckIdleState+0x150>)
 800a6e8:	400a      	ands	r2, r1
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f383 8810 	msr	PRIMASK, r3
}
 800a6f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6fe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a700:	633b      	str	r3, [r7, #48]	@ 0x30
 800a702:	2301      	movs	r3, #1
 800a704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f383 8810 	msr	PRIMASK, r3
}
 800a70c:	46c0      	nop			@ (mov r8, r8)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2101      	movs	r1, #1
 800a71a:	438a      	bics	r2, r1
 800a71c:	609a      	str	r2, [r3, #8]
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	f383 8810 	msr	PRIMASK, r3
}
 800a728:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	228c      	movs	r2, #140	@ 0x8c
 800a72e:	2120      	movs	r1, #32
 800a730:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2284      	movs	r2, #132	@ 0x84
 800a736:	2100      	movs	r1, #0
 800a738:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e012      	b.n	800a764 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2288      	movs	r2, #136	@ 0x88
 800a742:	2120      	movs	r1, #32
 800a744:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	228c      	movs	r2, #140	@ 0x8c
 800a74a:	2120      	movs	r1, #32
 800a74c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2284      	movs	r2, #132	@ 0x84
 800a75e:	2100      	movs	r1, #0
 800a760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	0018      	movs	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	b010      	add	sp, #64	@ 0x40
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	01ffffff 	.word	0x01ffffff
 800a770:	fffffedf 	.word	0xfffffedf

0800a774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	1dfb      	adds	r3, r7, #7
 800a782:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a784:	e051      	b.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	3301      	adds	r3, #1
 800a78a:	d04e      	beq.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a78c:	f7fa fce0 	bl	8005150 <HAL_GetTick>
 800a790:	0002      	movs	r2, r0
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d302      	bcc.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e051      	b.n	800a84a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d03b      	beq.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	2b80      	cmp	r3, #128	@ 0x80
 800a7b6:	d038      	beq.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b40      	cmp	r3, #64	@ 0x40
 800a7bc:	d035      	beq.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	2208      	movs	r2, #8
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d111      	bne.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2208      	movs	r2, #8
 800a7d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f000 f922 	bl	800aa20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2290      	movs	r2, #144	@ 0x90
 800a7e0:	2108      	movs	r1, #8
 800a7e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2284      	movs	r2, #132	@ 0x84
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e02c      	b.n	800a84a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	69da      	ldr	r2, [r3, #28]
 800a7f6:	2380      	movs	r3, #128	@ 0x80
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	401a      	ands	r2, r3
 800a7fc:	2380      	movs	r3, #128	@ 0x80
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	429a      	cmp	r2, r3
 800a802:	d112      	bne.n	800a82a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2280      	movs	r2, #128	@ 0x80
 800a80a:	0112      	lsls	r2, r2, #4
 800a80c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	0018      	movs	r0, r3
 800a812:	f000 f905 	bl	800aa20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2290      	movs	r2, #144	@ 0x90
 800a81a:	2120      	movs	r1, #32
 800a81c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2284      	movs	r2, #132	@ 0x84
 800a822:	2100      	movs	r1, #0
 800a824:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e00f      	b.n	800a84a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	4013      	ands	r3, r2
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	425a      	negs	r2, r3
 800a83a:	4153      	adcs	r3, r2
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	001a      	movs	r2, r3
 800a840:	1dfb      	adds	r3, r7, #7
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	429a      	cmp	r2, r3
 800a846:	d09e      	beq.n	800a786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	0018      	movs	r0, r3
 800a84c:	46bd      	mov	sp, r7
 800a84e:	b004      	add	sp, #16
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b090      	sub	sp, #64	@ 0x40
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	1dbb      	adds	r3, r7, #6
 800a860:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	1dba      	adds	r2, r7, #6
 800a86c:	215c      	movs	r1, #92	@ 0x5c
 800a86e:	8812      	ldrh	r2, [r2, #0]
 800a870:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2290      	movs	r2, #144	@ 0x90
 800a876:	2100      	movs	r1, #0
 800a878:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	228c      	movs	r2, #140	@ 0x8c
 800a87e:	2122      	movs	r1, #34	@ 0x22
 800a880:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2280      	movs	r2, #128	@ 0x80
 800a886:	589b      	ldr	r3, [r3, r2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d02d      	beq.n	800a8e8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2280      	movs	r2, #128	@ 0x80
 800a890:	589b      	ldr	r3, [r3, r2]
 800a892:	4a40      	ldr	r2, [pc, #256]	@ (800a994 <UART_Start_Receive_DMA+0x140>)
 800a894:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2280      	movs	r2, #128	@ 0x80
 800a89a:	589b      	ldr	r3, [r3, r2]
 800a89c:	4a3e      	ldr	r2, [pc, #248]	@ (800a998 <UART_Start_Receive_DMA+0x144>)
 800a89e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2280      	movs	r2, #128	@ 0x80
 800a8a4:	589b      	ldr	r3, [r3, r2]
 800a8a6:	4a3d      	ldr	r2, [pc, #244]	@ (800a99c <UART_Start_Receive_DMA+0x148>)
 800a8a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2280      	movs	r2, #128	@ 0x80
 800a8ae:	589b      	ldr	r3, [r3, r2]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2280      	movs	r2, #128	@ 0x80
 800a8b8:	5898      	ldr	r0, [r3, r2]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3324      	adds	r3, #36	@ 0x24
 800a8c0:	0019      	movs	r1, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c6:	001a      	movs	r2, r3
 800a8c8:	1dbb      	adds	r3, r7, #6
 800a8ca:	881b      	ldrh	r3, [r3, #0]
 800a8cc:	f7fb fd9c 	bl	8006408 <HAL_DMA_Start_IT>
 800a8d0:	1e03      	subs	r3, r0, #0
 800a8d2:	d009      	beq.n	800a8e8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2290      	movs	r2, #144	@ 0x90
 800a8d8:	2110      	movs	r1, #16
 800a8da:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	228c      	movs	r2, #140	@ 0x8c
 800a8e0:	2120      	movs	r1, #32
 800a8e2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e050      	b.n	800a98a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d019      	beq.n	800a924 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	f383 8810 	msr	PRIMASK, r3
}
 800a904:	46c0      	nop			@ (mov r8, r8)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2180      	movs	r1, #128	@ 0x80
 800a912:	0049      	lsls	r1, r1, #1
 800a914:	430a      	orrs	r2, r1
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	f383 8810 	msr	PRIMASK, r3
}
 800a922:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a924:	f3ef 8310 	mrs	r3, PRIMASK
 800a928:	613b      	str	r3, [r7, #16]
  return(result);
 800a92a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a92e:	2301      	movs	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f383 8810 	msr	PRIMASK, r3
}
 800a938:	46c0      	nop			@ (mov r8, r8)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2101      	movs	r1, #1
 800a946:	430a      	orrs	r2, r1
 800a948:	609a      	str	r2, [r3, #8]
 800a94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f383 8810 	msr	PRIMASK, r3
}
 800a954:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a956:	f3ef 8310 	mrs	r3, PRIMASK
 800a95a:	61fb      	str	r3, [r7, #28]
  return(result);
 800a95c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a960:	2301      	movs	r3, #1
 800a962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	f383 8810 	msr	PRIMASK, r3
}
 800a96a:	46c0      	nop			@ (mov r8, r8)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	689a      	ldr	r2, [r3, #8]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2140      	movs	r1, #64	@ 0x40
 800a978:	430a      	orrs	r2, r1
 800a97a:	609a      	str	r2, [r3, #8]
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	f383 8810 	msr	PRIMASK, r3
}
 800a986:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	0018      	movs	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b010      	add	sp, #64	@ 0x40
 800a990:	bd80      	pop	{r7, pc}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	0800aba5 	.word	0x0800aba5
 800a998:	0800acd5 	.word	0x0800acd5
 800a99c:	0800ad17 	.word	0x0800ad17

0800a9a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	@ 0x28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f383 8810 	msr	PRIMASK, r3
}
 800a9bc:	46c0      	nop			@ (mov r8, r8)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	21c0      	movs	r1, #192	@ 0xc0
 800a9ca:	438a      	bics	r2, r1
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f383 8810 	msr	PRIMASK, r3
}
 800a9d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9da:	f3ef 8310 	mrs	r3, PRIMASK
 800a9de:	617b      	str	r3, [r7, #20]
  return(result);
 800a9e0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9e2:	623b      	str	r3, [r7, #32]
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f383 8810 	msr	PRIMASK, r3
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4908      	ldr	r1, [pc, #32]	@ (800aa1c <UART_EndTxTransfer+0x7c>)
 800a9fc:	400a      	ands	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	f383 8810 	msr	PRIMASK, r3
}
 800aa0a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2288      	movs	r2, #136	@ 0x88
 800aa10:	2120      	movs	r1, #32
 800aa12:	5099      	str	r1, [r3, r2]
}
 800aa14:	46c0      	nop			@ (mov r8, r8)
 800aa16:	46bd      	mov	sp, r7
 800aa18:	b00a      	add	sp, #40	@ 0x28
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	ff7fffff 	.word	0xff7fffff

0800aa20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08e      	sub	sp, #56	@ 0x38
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa28:	f3ef 8310 	mrs	r3, PRIMASK
 800aa2c:	617b      	str	r3, [r7, #20]
  return(result);
 800aa2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa32:	2301      	movs	r3, #1
 800aa34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	f383 8810 	msr	PRIMASK, r3
}
 800aa3c:	46c0      	nop			@ (mov r8, r8)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4926      	ldr	r1, [pc, #152]	@ (800aae4 <UART_EndRxTransfer+0xc4>)
 800aa4a:	400a      	ands	r2, r1
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	f383 8810 	msr	PRIMASK, r3
}
 800aa58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa5e:	623b      	str	r3, [r7, #32]
  return(result);
 800aa60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa62:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa64:	2301      	movs	r3, #1
 800aa66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	f383 8810 	msr	PRIMASK, r3
}
 800aa6e:	46c0      	nop			@ (mov r8, r8)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	491b      	ldr	r1, [pc, #108]	@ (800aae8 <UART_EndRxTransfer+0xc8>)
 800aa7c:	400a      	ands	r2, r1
 800aa7e:	609a      	str	r2, [r3, #8]
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa86:	f383 8810 	msr	PRIMASK, r3
}
 800aa8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d118      	bne.n	800aac6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa94:	f3ef 8310 	mrs	r3, PRIMASK
 800aa98:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f383 8810 	msr	PRIMASK, r3
}
 800aaa8:	46c0      	nop			@ (mov r8, r8)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2110      	movs	r1, #16
 800aab6:	438a      	bics	r2, r1
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f383 8810 	msr	PRIMASK, r3
}
 800aac4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	228c      	movs	r2, #140	@ 0x8c
 800aaca:	2120      	movs	r1, #32
 800aacc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aada:	46c0      	nop			@ (mov r8, r8)
 800aadc:	46bd      	mov	sp, r7
 800aade:	b00e      	add	sp, #56	@ 0x38
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	fffffedf 	.word	0xfffffedf
 800aae8:	effffffe 	.word	0xeffffffe

0800aaec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08c      	sub	sp, #48	@ 0x30
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2220      	movs	r2, #32
 800ab02:	4013      	ands	r3, r2
 800ab04:	d135      	bne.n	800ab72 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800ab06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab08:	2256      	movs	r2, #86	@ 0x56
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab12:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab14:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab16:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab18:	2301      	movs	r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f383 8810 	msr	PRIMASK, r3
}
 800ab22:	46c0      	nop			@ (mov r8, r8)
 800ab24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689a      	ldr	r2, [r3, #8]
 800ab2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2180      	movs	r1, #128	@ 0x80
 800ab30:	438a      	bics	r2, r1
 800ab32:	609a      	str	r2, [r3, #8]
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f383 8810 	msr	PRIMASK, r3
}
 800ab3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab40:	f3ef 8310 	mrs	r3, PRIMASK
 800ab44:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab46:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	f383 8810 	msr	PRIMASK, r3
}
 800ab54:	46c0      	nop			@ (mov r8, r8)
 800ab56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2140      	movs	r1, #64	@ 0x40
 800ab62:	430a      	orrs	r2, r1
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	f383 8810 	msr	PRIMASK, r3
}
 800ab70:	e004      	b.n	800ab7c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	0018      	movs	r0, r3
 800ab76:	f7f8 fdd3 	bl	8003720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab7a:	46c0      	nop			@ (mov r8, r8)
 800ab7c:	46c0      	nop			@ (mov r8, r8)
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	b00c      	add	sp, #48	@ 0x30
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab90:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	0018      	movs	r0, r3
 800ab96:	f7ff fac0 	bl	800a11a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab9a:	46c0      	nop			@ (mov r8, r8)
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b004      	add	sp, #16
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b094      	sub	sp, #80	@ 0x50
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2220      	movs	r2, #32
 800abba:	4013      	ands	r3, r2
 800abbc:	d16f      	bne.n	800ac9e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800abbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abc0:	225e      	movs	r2, #94	@ 0x5e
 800abc2:	2100      	movs	r1, #0
 800abc4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc6:	f3ef 8310 	mrs	r3, PRIMASK
 800abca:	61bb      	str	r3, [r7, #24]
  return(result);
 800abcc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd0:	2301      	movs	r3, #1
 800abd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	f383 8810 	msr	PRIMASK, r3
}
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	493a      	ldr	r1, [pc, #232]	@ (800acd0 <UART_DMAReceiveCplt+0x12c>)
 800abe8:	400a      	ands	r2, r1
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	f383 8810 	msr	PRIMASK, r3
}
 800abf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf8:	f3ef 8310 	mrs	r3, PRIMASK
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac02:	2301      	movs	r3, #1
 800ac04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	f383 8810 	msr	PRIMASK, r3
}
 800ac0c:	46c0      	nop			@ (mov r8, r8)
 800ac0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2101      	movs	r1, #1
 800ac1a:	438a      	bics	r2, r1
 800ac1c:	609a      	str	r2, [r3, #8]
 800ac1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac24:	f383 8810 	msr	PRIMASK, r3
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac32:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac34:	2301      	movs	r3, #1
 800ac36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3a:	f383 8810 	msr	PRIMASK, r3
}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2140      	movs	r1, #64	@ 0x40
 800ac4c:	438a      	bics	r2, r1
 800ac4e:	609a      	str	r2, [r3, #8]
 800ac50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	f383 8810 	msr	PRIMASK, r3
}
 800ac5a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac5e:	228c      	movs	r2, #140	@ 0x8c
 800ac60:	2120      	movs	r1, #32
 800ac62:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d118      	bne.n	800ac9e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac72:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac76:	2301      	movs	r3, #1
 800ac78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f383 8810 	msr	PRIMASK, r3
}
 800ac80:	46c0      	nop			@ (mov r8, r8)
 800ac82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2110      	movs	r1, #16
 800ac8e:	438a      	bics	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f383 8810 	msr	PRIMASK, r3
}
 800ac9c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca0:	2200      	movs	r2, #0
 800aca2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d108      	bne.n	800acbe <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acae:	225c      	movs	r2, #92	@ 0x5c
 800acb0:	5a9a      	ldrh	r2, [r3, r2]
 800acb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb4:	0011      	movs	r1, r2
 800acb6:	0018      	movs	r0, r3
 800acb8:	f7ff fa4f 	bl	800a15a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acbc:	e003      	b.n	800acc6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800acbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc0:	0018      	movs	r0, r3
 800acc2:	f7ff fa32 	bl	800a12a <HAL_UART_RxCpltCallback>
}
 800acc6:	46c0      	nop			@ (mov r8, r8)
 800acc8:	46bd      	mov	sp, r7
 800acca:	b014      	add	sp, #80	@ 0x50
 800accc:	bd80      	pop	{r7, pc}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	fffffeff 	.word	0xfffffeff

0800acd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acec:	2b01      	cmp	r3, #1
 800acee:	d10a      	bne.n	800ad06 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	225c      	movs	r2, #92	@ 0x5c
 800acf4:	5a9b      	ldrh	r3, [r3, r2]
 800acf6:	085b      	lsrs	r3, r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	0011      	movs	r1, r2
 800acfe:	0018      	movs	r0, r3
 800ad00:	f7ff fa2b 	bl	800a15a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad04:	e003      	b.n	800ad0e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	0018      	movs	r0, r3
 800ad0a:	f7ff fa16 	bl	800a13a <HAL_UART_RxHalfCpltCallback>
}
 800ad0e:	46c0      	nop			@ (mov r8, r8)
 800ad10:	46bd      	mov	sp, r7
 800ad12:	b004      	add	sp, #16
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b086      	sub	sp, #24
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2288      	movs	r2, #136	@ 0x88
 800ad28:	589b      	ldr	r3, [r3, r2]
 800ad2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	228c      	movs	r2, #140	@ 0x8c
 800ad30:	589b      	ldr	r3, [r3, r2]
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	2280      	movs	r2, #128	@ 0x80
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	2b80      	cmp	r3, #128	@ 0x80
 800ad40:	d10a      	bne.n	800ad58 <UART_DMAError+0x42>
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b21      	cmp	r3, #33	@ 0x21
 800ad46:	d107      	bne.n	800ad58 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2256      	movs	r2, #86	@ 0x56
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	0018      	movs	r0, r3
 800ad54:	f7ff fe24 	bl	800a9a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	4013      	ands	r3, r2
 800ad62:	2b40      	cmp	r3, #64	@ 0x40
 800ad64:	d10a      	bne.n	800ad7c <UART_DMAError+0x66>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b22      	cmp	r3, #34	@ 0x22
 800ad6a:	d107      	bne.n	800ad7c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	225e      	movs	r2, #94	@ 0x5e
 800ad70:	2100      	movs	r1, #0
 800ad72:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	0018      	movs	r0, r3
 800ad78:	f7ff fe52 	bl	800aa20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2290      	movs	r2, #144	@ 0x90
 800ad80:	589b      	ldr	r3, [r3, r2]
 800ad82:	2210      	movs	r2, #16
 800ad84:	431a      	orrs	r2, r3
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2190      	movs	r1, #144	@ 0x90
 800ad8a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	0018      	movs	r0, r3
 800ad90:	f7ff f9db 	bl	800a14a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad94:	46c0      	nop			@ (mov r8, r8)
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b006      	add	sp, #24
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <__cvt>:
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	001f      	movs	r7, r3
 800ada0:	2300      	movs	r3, #0
 800ada2:	0016      	movs	r6, r2
 800ada4:	b08b      	sub	sp, #44	@ 0x2c
 800ada6:	429f      	cmp	r7, r3
 800ada8:	da04      	bge.n	800adb4 <__cvt+0x18>
 800adaa:	2180      	movs	r1, #128	@ 0x80
 800adac:	0609      	lsls	r1, r1, #24
 800adae:	187b      	adds	r3, r7, r1
 800adb0:	001f      	movs	r7, r3
 800adb2:	232d      	movs	r3, #45	@ 0x2d
 800adb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adb6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800adb8:	7013      	strb	r3, [r2, #0]
 800adba:	2320      	movs	r3, #32
 800adbc:	2203      	movs	r2, #3
 800adbe:	439d      	bics	r5, r3
 800adc0:	2d46      	cmp	r5, #70	@ 0x46
 800adc2:	d007      	beq.n	800add4 <__cvt+0x38>
 800adc4:	002b      	movs	r3, r5
 800adc6:	3b45      	subs	r3, #69	@ 0x45
 800adc8:	4259      	negs	r1, r3
 800adca:	414b      	adcs	r3, r1
 800adcc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800adce:	3a01      	subs	r2, #1
 800add0:	18cb      	adds	r3, r1, r3
 800add2:	9310      	str	r3, [sp, #64]	@ 0x40
 800add4:	ab09      	add	r3, sp, #36	@ 0x24
 800add6:	9304      	str	r3, [sp, #16]
 800add8:	ab08      	add	r3, sp, #32
 800adda:	9303      	str	r3, [sp, #12]
 800addc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adde:	9200      	str	r2, [sp, #0]
 800ade0:	9302      	str	r3, [sp, #8]
 800ade2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ade4:	0032      	movs	r2, r6
 800ade6:	9301      	str	r3, [sp, #4]
 800ade8:	003b      	movs	r3, r7
 800adea:	f000 fe9f 	bl	800bb2c <_dtoa_r>
 800adee:	0004      	movs	r4, r0
 800adf0:	2d47      	cmp	r5, #71	@ 0x47
 800adf2:	d11b      	bne.n	800ae2c <__cvt+0x90>
 800adf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800adf6:	07db      	lsls	r3, r3, #31
 800adf8:	d511      	bpl.n	800ae1e <__cvt+0x82>
 800adfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adfc:	18c3      	adds	r3, r0, r3
 800adfe:	9307      	str	r3, [sp, #28]
 800ae00:	2200      	movs	r2, #0
 800ae02:	2300      	movs	r3, #0
 800ae04:	0030      	movs	r0, r6
 800ae06:	0039      	movs	r1, r7
 800ae08:	f7f5 fb1c 	bl	8000444 <__aeabi_dcmpeq>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d001      	beq.n	800ae14 <__cvt+0x78>
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae14:	2230      	movs	r2, #48	@ 0x30
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	9907      	ldr	r1, [sp, #28]
 800ae1a:	428b      	cmp	r3, r1
 800ae1c:	d320      	bcc.n	800ae60 <__cvt+0xc4>
 800ae1e:	0020      	movs	r0, r4
 800ae20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ae24:	1b1b      	subs	r3, r3, r4
 800ae26:	6013      	str	r3, [r2, #0]
 800ae28:	b00b      	add	sp, #44	@ 0x2c
 800ae2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae2e:	18c3      	adds	r3, r0, r3
 800ae30:	9307      	str	r3, [sp, #28]
 800ae32:	2d46      	cmp	r5, #70	@ 0x46
 800ae34:	d1e4      	bne.n	800ae00 <__cvt+0x64>
 800ae36:	7803      	ldrb	r3, [r0, #0]
 800ae38:	2b30      	cmp	r3, #48	@ 0x30
 800ae3a:	d10c      	bne.n	800ae56 <__cvt+0xba>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	0030      	movs	r0, r6
 800ae42:	0039      	movs	r1, r7
 800ae44:	f7f5 fafe 	bl	8000444 <__aeabi_dcmpeq>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d104      	bne.n	800ae56 <__cvt+0xba>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ae50:	1a9b      	subs	r3, r3, r2
 800ae52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae58:	9a07      	ldr	r2, [sp, #28]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	18d3      	adds	r3, r2, r3
 800ae5e:	e7ce      	b.n	800adfe <__cvt+0x62>
 800ae60:	1c59      	adds	r1, r3, #1
 800ae62:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e7d6      	b.n	800ae16 <__cvt+0x7a>

0800ae68 <__exponent>:
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	232b      	movs	r3, #43	@ 0x2b
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	0005      	movs	r5, r0
 800ae70:	1e0c      	subs	r4, r1, #0
 800ae72:	7002      	strb	r2, [r0, #0]
 800ae74:	da01      	bge.n	800ae7a <__exponent+0x12>
 800ae76:	424c      	negs	r4, r1
 800ae78:	3302      	adds	r3, #2
 800ae7a:	706b      	strb	r3, [r5, #1]
 800ae7c:	2c09      	cmp	r4, #9
 800ae7e:	dd2c      	ble.n	800aeda <__exponent+0x72>
 800ae80:	ab02      	add	r3, sp, #8
 800ae82:	1dde      	adds	r6, r3, #7
 800ae84:	0020      	movs	r0, r4
 800ae86:	210a      	movs	r1, #10
 800ae88:	f7f5 fac6 	bl	8000418 <__aeabi_idivmod>
 800ae8c:	0037      	movs	r7, r6
 800ae8e:	3130      	adds	r1, #48	@ 0x30
 800ae90:	3e01      	subs	r6, #1
 800ae92:	0020      	movs	r0, r4
 800ae94:	7031      	strb	r1, [r6, #0]
 800ae96:	210a      	movs	r1, #10
 800ae98:	9401      	str	r4, [sp, #4]
 800ae9a:	f7f5 f9d7 	bl	800024c <__divsi3>
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	0004      	movs	r4, r0
 800aea2:	2b63      	cmp	r3, #99	@ 0x63
 800aea4:	dcee      	bgt.n	800ae84 <__exponent+0x1c>
 800aea6:	1eba      	subs	r2, r7, #2
 800aea8:	1ca8      	adds	r0, r5, #2
 800aeaa:	0001      	movs	r1, r0
 800aeac:	0013      	movs	r3, r2
 800aeae:	3430      	adds	r4, #48	@ 0x30
 800aeb0:	7014      	strb	r4, [r2, #0]
 800aeb2:	ac02      	add	r4, sp, #8
 800aeb4:	3407      	adds	r4, #7
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d80a      	bhi.n	800aed0 <__exponent+0x68>
 800aeba:	2300      	movs	r3, #0
 800aebc:	4294      	cmp	r4, r2
 800aebe:	d303      	bcc.n	800aec8 <__exponent+0x60>
 800aec0:	3309      	adds	r3, #9
 800aec2:	aa02      	add	r2, sp, #8
 800aec4:	189b      	adds	r3, r3, r2
 800aec6:	1bdb      	subs	r3, r3, r7
 800aec8:	18c0      	adds	r0, r0, r3
 800aeca:	1b40      	subs	r0, r0, r5
 800aecc:	b005      	add	sp, #20
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	781c      	ldrb	r4, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	700c      	strb	r4, [r1, #0]
 800aed6:	3101      	adds	r1, #1
 800aed8:	e7eb      	b.n	800aeb2 <__exponent+0x4a>
 800aeda:	2330      	movs	r3, #48	@ 0x30
 800aedc:	18e4      	adds	r4, r4, r3
 800aede:	70ab      	strb	r3, [r5, #2]
 800aee0:	1d28      	adds	r0, r5, #4
 800aee2:	70ec      	strb	r4, [r5, #3]
 800aee4:	e7f1      	b.n	800aeca <__exponent+0x62>
	...

0800aee8 <_printf_float>:
 800aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeea:	b097      	sub	sp, #92	@ 0x5c
 800aeec:	000d      	movs	r5, r1
 800aeee:	920a      	str	r2, [sp, #40]	@ 0x28
 800aef0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800aef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aef4:	9009      	str	r0, [sp, #36]	@ 0x24
 800aef6:	f000 fd01 	bl	800b8fc <_localeconv_r>
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	0018      	movs	r0, r3
 800aefe:	930d      	str	r3, [sp, #52]	@ 0x34
 800af00:	f7f5 f8fe 	bl	8000100 <strlen>
 800af04:	2300      	movs	r3, #0
 800af06:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af08:	9314      	str	r3, [sp, #80]	@ 0x50
 800af0a:	7e2b      	ldrb	r3, [r5, #24]
 800af0c:	2207      	movs	r2, #7
 800af0e:	930c      	str	r3, [sp, #48]	@ 0x30
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	930e      	str	r3, [sp, #56]	@ 0x38
 800af14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	05c9      	lsls	r1, r1, #23
 800af1a:	d545      	bpl.n	800afa8 <_printf_float+0xc0>
 800af1c:	189b      	adds	r3, r3, r2
 800af1e:	4393      	bics	r3, r2
 800af20:	001a      	movs	r2, r3
 800af22:	3208      	adds	r2, #8
 800af24:	6022      	str	r2, [r4, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	681e      	ldr	r6, [r3, #0]
 800af2a:	685f      	ldr	r7, [r3, #4]
 800af2c:	007b      	lsls	r3, r7, #1
 800af2e:	085b      	lsrs	r3, r3, #1
 800af30:	9311      	str	r3, [sp, #68]	@ 0x44
 800af32:	9610      	str	r6, [sp, #64]	@ 0x40
 800af34:	64ae      	str	r6, [r5, #72]	@ 0x48
 800af36:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800af38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af3a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af3c:	4ba7      	ldr	r3, [pc, #668]	@ (800b1dc <_printf_float+0x2f4>)
 800af3e:	4252      	negs	r2, r2
 800af40:	f7f7 fe92 	bl	8002c68 <__aeabi_dcmpun>
 800af44:	2800      	cmp	r0, #0
 800af46:	d131      	bne.n	800afac <_printf_float+0xc4>
 800af48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af4a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af4c:	2201      	movs	r2, #1
 800af4e:	4ba3      	ldr	r3, [pc, #652]	@ (800b1dc <_printf_float+0x2f4>)
 800af50:	4252      	negs	r2, r2
 800af52:	f7f5 fa87 	bl	8000464 <__aeabi_dcmple>
 800af56:	2800      	cmp	r0, #0
 800af58:	d128      	bne.n	800afac <_printf_float+0xc4>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	0030      	movs	r0, r6
 800af60:	0039      	movs	r1, r7
 800af62:	f7f5 fa75 	bl	8000450 <__aeabi_dcmplt>
 800af66:	2800      	cmp	r0, #0
 800af68:	d003      	beq.n	800af72 <_printf_float+0x8a>
 800af6a:	002b      	movs	r3, r5
 800af6c:	222d      	movs	r2, #45	@ 0x2d
 800af6e:	3343      	adds	r3, #67	@ 0x43
 800af70:	701a      	strb	r2, [r3, #0]
 800af72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af74:	4f9a      	ldr	r7, [pc, #616]	@ (800b1e0 <_printf_float+0x2f8>)
 800af76:	2b47      	cmp	r3, #71	@ 0x47
 800af78:	d800      	bhi.n	800af7c <_printf_float+0x94>
 800af7a:	4f9a      	ldr	r7, [pc, #616]	@ (800b1e4 <_printf_float+0x2fc>)
 800af7c:	2303      	movs	r3, #3
 800af7e:	2400      	movs	r4, #0
 800af80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af82:	612b      	str	r3, [r5, #16]
 800af84:	3301      	adds	r3, #1
 800af86:	439a      	bics	r2, r3
 800af88:	602a      	str	r2, [r5, #0]
 800af8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af8c:	0029      	movs	r1, r5
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af94:	aa15      	add	r2, sp, #84	@ 0x54
 800af96:	f000 f9e5 	bl	800b364 <_printf_common>
 800af9a:	3001      	adds	r0, #1
 800af9c:	d000      	beq.n	800afa0 <_printf_float+0xb8>
 800af9e:	e09e      	b.n	800b0de <_printf_float+0x1f6>
 800afa0:	2001      	movs	r0, #1
 800afa2:	4240      	negs	r0, r0
 800afa4:	b017      	add	sp, #92	@ 0x5c
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	3307      	adds	r3, #7
 800afaa:	e7b8      	b.n	800af1e <_printf_float+0x36>
 800afac:	0032      	movs	r2, r6
 800afae:	003b      	movs	r3, r7
 800afb0:	0030      	movs	r0, r6
 800afb2:	0039      	movs	r1, r7
 800afb4:	f7f7 fe58 	bl	8002c68 <__aeabi_dcmpun>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d00b      	beq.n	800afd4 <_printf_float+0xec>
 800afbc:	2f00      	cmp	r7, #0
 800afbe:	da03      	bge.n	800afc8 <_printf_float+0xe0>
 800afc0:	002b      	movs	r3, r5
 800afc2:	222d      	movs	r2, #45	@ 0x2d
 800afc4:	3343      	adds	r3, #67	@ 0x43
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afca:	4f87      	ldr	r7, [pc, #540]	@ (800b1e8 <_printf_float+0x300>)
 800afcc:	2b47      	cmp	r3, #71	@ 0x47
 800afce:	d8d5      	bhi.n	800af7c <_printf_float+0x94>
 800afd0:	4f86      	ldr	r7, [pc, #536]	@ (800b1ec <_printf_float+0x304>)
 800afd2:	e7d3      	b.n	800af7c <_printf_float+0x94>
 800afd4:	2220      	movs	r2, #32
 800afd6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800afd8:	686b      	ldr	r3, [r5, #4]
 800afda:	4394      	bics	r4, r2
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	d146      	bne.n	800b06e <_printf_float+0x186>
 800afe0:	3307      	adds	r3, #7
 800afe2:	606b      	str	r3, [r5, #4]
 800afe4:	2380      	movs	r3, #128	@ 0x80
 800afe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	4313      	orrs	r3, r2
 800afec:	2200      	movs	r2, #0
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	9206      	str	r2, [sp, #24]
 800aff2:	aa14      	add	r2, sp, #80	@ 0x50
 800aff4:	9205      	str	r2, [sp, #20]
 800aff6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aff8:	a90a      	add	r1, sp, #40	@ 0x28
 800affa:	9204      	str	r2, [sp, #16]
 800affc:	aa13      	add	r2, sp, #76	@ 0x4c
 800affe:	9203      	str	r2, [sp, #12]
 800b000:	2223      	movs	r2, #35	@ 0x23
 800b002:	1852      	adds	r2, r2, r1
 800b004:	9202      	str	r2, [sp, #8]
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	686b      	ldr	r3, [r5, #4]
 800b00a:	0032      	movs	r2, r6
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b010:	003b      	movs	r3, r7
 800b012:	f7ff fec3 	bl	800ad9c <__cvt>
 800b016:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b018:	0007      	movs	r7, r0
 800b01a:	2c47      	cmp	r4, #71	@ 0x47
 800b01c:	d12d      	bne.n	800b07a <_printf_float+0x192>
 800b01e:	1cd3      	adds	r3, r2, #3
 800b020:	db02      	blt.n	800b028 <_printf_float+0x140>
 800b022:	686b      	ldr	r3, [r5, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	dd47      	ble.n	800b0b8 <_printf_float+0x1d0>
 800b028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b02a:	3b02      	subs	r3, #2
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b030:	0028      	movs	r0, r5
 800b032:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b034:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b036:	3901      	subs	r1, #1
 800b038:	3050      	adds	r0, #80	@ 0x50
 800b03a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b03c:	f7ff ff14 	bl	800ae68 <__exponent>
 800b040:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b042:	0004      	movs	r4, r0
 800b044:	1813      	adds	r3, r2, r0
 800b046:	612b      	str	r3, [r5, #16]
 800b048:	2a01      	cmp	r2, #1
 800b04a:	dc02      	bgt.n	800b052 <_printf_float+0x16a>
 800b04c:	682a      	ldr	r2, [r5, #0]
 800b04e:	07d2      	lsls	r2, r2, #31
 800b050:	d501      	bpl.n	800b056 <_printf_float+0x16e>
 800b052:	3301      	adds	r3, #1
 800b054:	612b      	str	r3, [r5, #16]
 800b056:	2323      	movs	r3, #35	@ 0x23
 800b058:	aa0a      	add	r2, sp, #40	@ 0x28
 800b05a:	189b      	adds	r3, r3, r2
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d100      	bne.n	800b064 <_printf_float+0x17c>
 800b062:	e792      	b.n	800af8a <_printf_float+0xa2>
 800b064:	002b      	movs	r3, r5
 800b066:	222d      	movs	r2, #45	@ 0x2d
 800b068:	3343      	adds	r3, #67	@ 0x43
 800b06a:	701a      	strb	r2, [r3, #0]
 800b06c:	e78d      	b.n	800af8a <_printf_float+0xa2>
 800b06e:	2c47      	cmp	r4, #71	@ 0x47
 800b070:	d1b8      	bne.n	800afe4 <_printf_float+0xfc>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1b6      	bne.n	800afe4 <_printf_float+0xfc>
 800b076:	3301      	adds	r3, #1
 800b078:	e7b3      	b.n	800afe2 <_printf_float+0xfa>
 800b07a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b07c:	2b65      	cmp	r3, #101	@ 0x65
 800b07e:	d9d7      	bls.n	800b030 <_printf_float+0x148>
 800b080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b082:	2b66      	cmp	r3, #102	@ 0x66
 800b084:	d11a      	bne.n	800b0bc <_printf_float+0x1d4>
 800b086:	686b      	ldr	r3, [r5, #4]
 800b088:	2a00      	cmp	r2, #0
 800b08a:	dd09      	ble.n	800b0a0 <_printf_float+0x1b8>
 800b08c:	612a      	str	r2, [r5, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d102      	bne.n	800b098 <_printf_float+0x1b0>
 800b092:	6829      	ldr	r1, [r5, #0]
 800b094:	07c9      	lsls	r1, r1, #31
 800b096:	d50b      	bpl.n	800b0b0 <_printf_float+0x1c8>
 800b098:	3301      	adds	r3, #1
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	612b      	str	r3, [r5, #16]
 800b09e:	e007      	b.n	800b0b0 <_printf_float+0x1c8>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <_printf_float+0x1c4>
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	6829      	ldr	r1, [r5, #0]
 800b0a8:	4211      	tst	r1, r2
 800b0aa:	d000      	beq.n	800b0ae <_printf_float+0x1c6>
 800b0ac:	1c9a      	adds	r2, r3, #2
 800b0ae:	612a      	str	r2, [r5, #16]
 800b0b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0b2:	2400      	movs	r4, #0
 800b0b4:	65ab      	str	r3, [r5, #88]	@ 0x58
 800b0b6:	e7ce      	b.n	800b056 <_printf_float+0x16e>
 800b0b8:	2367      	movs	r3, #103	@ 0x67
 800b0ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b0be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	db06      	blt.n	800b0d2 <_printf_float+0x1ea>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	6129      	str	r1, [r5, #16]
 800b0c8:	07db      	lsls	r3, r3, #31
 800b0ca:	d5f1      	bpl.n	800b0b0 <_printf_float+0x1c8>
 800b0cc:	3101      	adds	r1, #1
 800b0ce:	6129      	str	r1, [r5, #16]
 800b0d0:	e7ee      	b.n	800b0b0 <_printf_float+0x1c8>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	dce0      	bgt.n	800b09a <_printf_float+0x1b2>
 800b0d8:	1892      	adds	r2, r2, r2
 800b0da:	1a52      	subs	r2, r2, r1
 800b0dc:	e7dd      	b.n	800b09a <_printf_float+0x1b2>
 800b0de:	682a      	ldr	r2, [r5, #0]
 800b0e0:	0553      	lsls	r3, r2, #21
 800b0e2:	d408      	bmi.n	800b0f6 <_printf_float+0x20e>
 800b0e4:	692b      	ldr	r3, [r5, #16]
 800b0e6:	003a      	movs	r2, r7
 800b0e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b0ee:	47a0      	blx	r4
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d129      	bne.n	800b148 <_printf_float+0x260>
 800b0f4:	e754      	b.n	800afa0 <_printf_float+0xb8>
 800b0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0f8:	2b65      	cmp	r3, #101	@ 0x65
 800b0fa:	d800      	bhi.n	800b0fe <_printf_float+0x216>
 800b0fc:	e0db      	b.n	800b2b6 <_printf_float+0x3ce>
 800b0fe:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b100:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b102:	2200      	movs	r2, #0
 800b104:	2300      	movs	r3, #0
 800b106:	f7f5 f99d 	bl	8000444 <__aeabi_dcmpeq>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d033      	beq.n	800b176 <_printf_float+0x28e>
 800b10e:	2301      	movs	r3, #1
 800b110:	4a37      	ldr	r2, [pc, #220]	@ (800b1f0 <_printf_float+0x308>)
 800b112:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b114:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b116:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b118:	47a0      	blx	r4
 800b11a:	3001      	adds	r0, #1
 800b11c:	d100      	bne.n	800b120 <_printf_float+0x238>
 800b11e:	e73f      	b.n	800afa0 <_printf_float+0xb8>
 800b120:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b124:	42b3      	cmp	r3, r6
 800b126:	db02      	blt.n	800b12e <_printf_float+0x246>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	07db      	lsls	r3, r3, #31
 800b12c:	d50c      	bpl.n	800b148 <_printf_float+0x260>
 800b12e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b132:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b134:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b138:	47a0      	blx	r4
 800b13a:	2400      	movs	r4, #0
 800b13c:	3001      	adds	r0, #1
 800b13e:	d100      	bne.n	800b142 <_printf_float+0x25a>
 800b140:	e72e      	b.n	800afa0 <_printf_float+0xb8>
 800b142:	1e73      	subs	r3, r6, #1
 800b144:	42a3      	cmp	r3, r4
 800b146:	dc0a      	bgt.n	800b15e <_printf_float+0x276>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	079b      	lsls	r3, r3, #30
 800b14c:	d500      	bpl.n	800b150 <_printf_float+0x268>
 800b14e:	e106      	b.n	800b35e <_printf_float+0x476>
 800b150:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b152:	68e8      	ldr	r0, [r5, #12]
 800b154:	4298      	cmp	r0, r3
 800b156:	db00      	blt.n	800b15a <_printf_float+0x272>
 800b158:	e724      	b.n	800afa4 <_printf_float+0xbc>
 800b15a:	0018      	movs	r0, r3
 800b15c:	e722      	b.n	800afa4 <_printf_float+0xbc>
 800b15e:	002a      	movs	r2, r5
 800b160:	2301      	movs	r3, #1
 800b162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b164:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b166:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b168:	321a      	adds	r2, #26
 800b16a:	47b8      	blx	r7
 800b16c:	3001      	adds	r0, #1
 800b16e:	d100      	bne.n	800b172 <_printf_float+0x28a>
 800b170:	e716      	b.n	800afa0 <_printf_float+0xb8>
 800b172:	3401      	adds	r4, #1
 800b174:	e7e5      	b.n	800b142 <_printf_float+0x25a>
 800b176:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dc3b      	bgt.n	800b1f4 <_printf_float+0x30c>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f0 <_printf_float+0x308>)
 800b180:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b184:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b186:	47a0      	blx	r4
 800b188:	3001      	adds	r0, #1
 800b18a:	d100      	bne.n	800b18e <_printf_float+0x2a6>
 800b18c:	e708      	b.n	800afa0 <_printf_float+0xb8>
 800b18e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b190:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b192:	4333      	orrs	r3, r6
 800b194:	d102      	bne.n	800b19c <_printf_float+0x2b4>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	07db      	lsls	r3, r3, #31
 800b19a:	d5d5      	bpl.n	800b148 <_printf_float+0x260>
 800b19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b19e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b1a6:	47a0      	blx	r4
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	d100      	bne.n	800b1b0 <_printf_float+0x2c8>
 800b1ae:	e6f7      	b.n	800afa0 <_printf_float+0xb8>
 800b1b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1b6:	425b      	negs	r3, r3
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	dc01      	bgt.n	800b1c0 <_printf_float+0x2d8>
 800b1bc:	0033      	movs	r3, r6
 800b1be:	e792      	b.n	800b0e6 <_printf_float+0x1fe>
 800b1c0:	002a      	movs	r2, r5
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b1ca:	321a      	adds	r2, #26
 800b1cc:	47a0      	blx	r4
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d100      	bne.n	800b1d4 <_printf_float+0x2ec>
 800b1d2:	e6e5      	b.n	800afa0 <_printf_float+0xb8>
 800b1d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	e7ea      	b.n	800b1b0 <_printf_float+0x2c8>
 800b1da:	46c0      	nop			@ (mov r8, r8)
 800b1dc:	7fefffff 	.word	0x7fefffff
 800b1e0:	0800de84 	.word	0x0800de84
 800b1e4:	0800de80 	.word	0x0800de80
 800b1e8:	0800de8c 	.word	0x0800de8c
 800b1ec:	0800de88 	.word	0x0800de88
 800b1f0:	0800de90 	.word	0x0800de90
 800b1f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1f6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b1f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1fa:	429e      	cmp	r6, r3
 800b1fc:	dd00      	ble.n	800b200 <_printf_float+0x318>
 800b1fe:	001e      	movs	r6, r3
 800b200:	2e00      	cmp	r6, #0
 800b202:	dc31      	bgt.n	800b268 <_printf_float+0x380>
 800b204:	43f3      	mvns	r3, r6
 800b206:	2400      	movs	r4, #0
 800b208:	17db      	asrs	r3, r3, #31
 800b20a:	4033      	ands	r3, r6
 800b20c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b20e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b212:	1af3      	subs	r3, r6, r3
 800b214:	42a3      	cmp	r3, r4
 800b216:	dc30      	bgt.n	800b27a <_printf_float+0x392>
 800b218:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b21a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b21c:	429a      	cmp	r2, r3
 800b21e:	dc38      	bgt.n	800b292 <_printf_float+0x3aa>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	07db      	lsls	r3, r3, #31
 800b224:	d435      	bmi.n	800b292 <_printf_float+0x3aa>
 800b226:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b22a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b22c:	1b9b      	subs	r3, r3, r6
 800b22e:	1b14      	subs	r4, r2, r4
 800b230:	429c      	cmp	r4, r3
 800b232:	dd00      	ble.n	800b236 <_printf_float+0x34e>
 800b234:	001c      	movs	r4, r3
 800b236:	2c00      	cmp	r4, #0
 800b238:	dc34      	bgt.n	800b2a4 <_printf_float+0x3bc>
 800b23a:	43e3      	mvns	r3, r4
 800b23c:	2600      	movs	r6, #0
 800b23e:	17db      	asrs	r3, r3, #31
 800b240:	401c      	ands	r4, r3
 800b242:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b244:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	1b1b      	subs	r3, r3, r4
 800b24a:	42b3      	cmp	r3, r6
 800b24c:	dc00      	bgt.n	800b250 <_printf_float+0x368>
 800b24e:	e77b      	b.n	800b148 <_printf_float+0x260>
 800b250:	002a      	movs	r2, r5
 800b252:	2301      	movs	r3, #1
 800b254:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b258:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b25a:	321a      	adds	r2, #26
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	d100      	bne.n	800b264 <_printf_float+0x37c>
 800b262:	e69d      	b.n	800afa0 <_printf_float+0xb8>
 800b264:	3601      	adds	r6, #1
 800b266:	e7ec      	b.n	800b242 <_printf_float+0x35a>
 800b268:	0033      	movs	r3, r6
 800b26a:	003a      	movs	r2, r7
 800b26c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b270:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b272:	47a0      	blx	r4
 800b274:	3001      	adds	r0, #1
 800b276:	d1c5      	bne.n	800b204 <_printf_float+0x31c>
 800b278:	e692      	b.n	800afa0 <_printf_float+0xb8>
 800b27a:	002a      	movs	r2, r5
 800b27c:	2301      	movs	r3, #1
 800b27e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b280:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b282:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b284:	321a      	adds	r2, #26
 800b286:	47b0      	blx	r6
 800b288:	3001      	adds	r0, #1
 800b28a:	d100      	bne.n	800b28e <_printf_float+0x3a6>
 800b28c:	e688      	b.n	800afa0 <_printf_float+0xb8>
 800b28e:	3401      	adds	r4, #1
 800b290:	e7bd      	b.n	800b20e <_printf_float+0x326>
 800b292:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b298:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b29a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b29c:	47a0      	blx	r4
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d1c1      	bne.n	800b226 <_printf_float+0x33e>
 800b2a2:	e67d      	b.n	800afa0 <_printf_float+0xb8>
 800b2a4:	19ba      	adds	r2, r7, r6
 800b2a6:	0023      	movs	r3, r4
 800b2a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2ae:	47b0      	blx	r6
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d1c2      	bne.n	800b23a <_printf_float+0x352>
 800b2b4:	e674      	b.n	800afa0 <_printf_float+0xb8>
 800b2b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	dc02      	bgt.n	800b2c4 <_printf_float+0x3dc>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	421a      	tst	r2, r3
 800b2c2:	d039      	beq.n	800b338 <_printf_float+0x450>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	003a      	movs	r2, r7
 800b2c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2ce:	47b0      	blx	r6
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d100      	bne.n	800b2d6 <_printf_float+0x3ee>
 800b2d4:	e664      	b.n	800afa0 <_printf_float+0xb8>
 800b2d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2de:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2e0:	47b0      	blx	r6
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d100      	bne.n	800b2e8 <_printf_float+0x400>
 800b2e6:	e65b      	b.n	800afa0 <_printf_float+0xb8>
 800b2e8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b2ea:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f7f5 f8a5 	bl	8000444 <__aeabi_dcmpeq>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d11a      	bne.n	800b334 <_printf_float+0x44c>
 800b2fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b300:	1c7a      	adds	r2, r7, #1
 800b302:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b304:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b306:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b308:	47b0      	blx	r6
 800b30a:	3001      	adds	r0, #1
 800b30c:	d10e      	bne.n	800b32c <_printf_float+0x444>
 800b30e:	e647      	b.n	800afa0 <_printf_float+0xb8>
 800b310:	002a      	movs	r2, r5
 800b312:	2301      	movs	r3, #1
 800b314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b318:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b31a:	321a      	adds	r2, #26
 800b31c:	47b8      	blx	r7
 800b31e:	3001      	adds	r0, #1
 800b320:	d100      	bne.n	800b324 <_printf_float+0x43c>
 800b322:	e63d      	b.n	800afa0 <_printf_float+0xb8>
 800b324:	3601      	adds	r6, #1
 800b326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b328:	429e      	cmp	r6, r3
 800b32a:	dbf1      	blt.n	800b310 <_printf_float+0x428>
 800b32c:	002a      	movs	r2, r5
 800b32e:	0023      	movs	r3, r4
 800b330:	3250      	adds	r2, #80	@ 0x50
 800b332:	e6d9      	b.n	800b0e8 <_printf_float+0x200>
 800b334:	2600      	movs	r6, #0
 800b336:	e7f6      	b.n	800b326 <_printf_float+0x43e>
 800b338:	003a      	movs	r2, r7
 800b33a:	e7e2      	b.n	800b302 <_printf_float+0x41a>
 800b33c:	002a      	movs	r2, r5
 800b33e:	2301      	movs	r3, #1
 800b340:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b344:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b346:	3219      	adds	r2, #25
 800b348:	47b0      	blx	r6
 800b34a:	3001      	adds	r0, #1
 800b34c:	d100      	bne.n	800b350 <_printf_float+0x468>
 800b34e:	e627      	b.n	800afa0 <_printf_float+0xb8>
 800b350:	3401      	adds	r4, #1
 800b352:	68eb      	ldr	r3, [r5, #12]
 800b354:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	42a3      	cmp	r3, r4
 800b35a:	dcef      	bgt.n	800b33c <_printf_float+0x454>
 800b35c:	e6f8      	b.n	800b150 <_printf_float+0x268>
 800b35e:	2400      	movs	r4, #0
 800b360:	e7f7      	b.n	800b352 <_printf_float+0x46a>
 800b362:	46c0      	nop			@ (mov r8, r8)

0800b364 <_printf_common>:
 800b364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b366:	0016      	movs	r6, r2
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	688a      	ldr	r2, [r1, #8]
 800b36c:	690b      	ldr	r3, [r1, #16]
 800b36e:	000c      	movs	r4, r1
 800b370:	9000      	str	r0, [sp, #0]
 800b372:	4293      	cmp	r3, r2
 800b374:	da00      	bge.n	800b378 <_printf_common+0x14>
 800b376:	0013      	movs	r3, r2
 800b378:	0022      	movs	r2, r4
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	3243      	adds	r2, #67	@ 0x43
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	2a00      	cmp	r2, #0
 800b382:	d001      	beq.n	800b388 <_printf_common+0x24>
 800b384:	3301      	adds	r3, #1
 800b386:	6033      	str	r3, [r6, #0]
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	069b      	lsls	r3, r3, #26
 800b38c:	d502      	bpl.n	800b394 <_printf_common+0x30>
 800b38e:	6833      	ldr	r3, [r6, #0]
 800b390:	3302      	adds	r3, #2
 800b392:	6033      	str	r3, [r6, #0]
 800b394:	6822      	ldr	r2, [r4, #0]
 800b396:	2306      	movs	r3, #6
 800b398:	0015      	movs	r5, r2
 800b39a:	401d      	ands	r5, r3
 800b39c:	421a      	tst	r2, r3
 800b39e:	d027      	beq.n	800b3f0 <_printf_common+0x8c>
 800b3a0:	0023      	movs	r3, r4
 800b3a2:	3343      	adds	r3, #67	@ 0x43
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	1e5a      	subs	r2, r3, #1
 800b3a8:	4193      	sbcs	r3, r2
 800b3aa:	6822      	ldr	r2, [r4, #0]
 800b3ac:	0692      	lsls	r2, r2, #26
 800b3ae:	d430      	bmi.n	800b412 <_printf_common+0xae>
 800b3b0:	0022      	movs	r2, r4
 800b3b2:	9901      	ldr	r1, [sp, #4]
 800b3b4:	9800      	ldr	r0, [sp, #0]
 800b3b6:	9d08      	ldr	r5, [sp, #32]
 800b3b8:	3243      	adds	r2, #67	@ 0x43
 800b3ba:	47a8      	blx	r5
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d025      	beq.n	800b40c <_printf_common+0xa8>
 800b3c0:	2206      	movs	r2, #6
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d105      	bne.n	800b3d8 <_printf_common+0x74>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	68e5      	ldr	r5, [r4, #12]
 800b3d0:	1aed      	subs	r5, r5, r3
 800b3d2:	43eb      	mvns	r3, r5
 800b3d4:	17db      	asrs	r3, r3, #31
 800b3d6:	401d      	ands	r5, r3
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6922      	ldr	r2, [r4, #16]
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	dd01      	ble.n	800b3e4 <_printf_common+0x80>
 800b3e0:	1a9b      	subs	r3, r3, r2
 800b3e2:	18ed      	adds	r5, r5, r3
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	42b5      	cmp	r5, r6
 800b3e8:	d120      	bne.n	800b42c <_printf_common+0xc8>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e010      	b.n	800b410 <_printf_common+0xac>
 800b3ee:	3501      	adds	r5, #1
 800b3f0:	68e3      	ldr	r3, [r4, #12]
 800b3f2:	6832      	ldr	r2, [r6, #0]
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	42ab      	cmp	r3, r5
 800b3f8:	ddd2      	ble.n	800b3a0 <_printf_common+0x3c>
 800b3fa:	0022      	movs	r2, r4
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	9901      	ldr	r1, [sp, #4]
 800b400:	9800      	ldr	r0, [sp, #0]
 800b402:	9f08      	ldr	r7, [sp, #32]
 800b404:	3219      	adds	r2, #25
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	d1f0      	bne.n	800b3ee <_printf_common+0x8a>
 800b40c:	2001      	movs	r0, #1
 800b40e:	4240      	negs	r0, r0
 800b410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b412:	2030      	movs	r0, #48	@ 0x30
 800b414:	18e1      	adds	r1, r4, r3
 800b416:	3143      	adds	r1, #67	@ 0x43
 800b418:	7008      	strb	r0, [r1, #0]
 800b41a:	0021      	movs	r1, r4
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	3145      	adds	r1, #69	@ 0x45
 800b420:	7809      	ldrb	r1, [r1, #0]
 800b422:	18a2      	adds	r2, r4, r2
 800b424:	3243      	adds	r2, #67	@ 0x43
 800b426:	3302      	adds	r3, #2
 800b428:	7011      	strb	r1, [r2, #0]
 800b42a:	e7c1      	b.n	800b3b0 <_printf_common+0x4c>
 800b42c:	0022      	movs	r2, r4
 800b42e:	2301      	movs	r3, #1
 800b430:	9901      	ldr	r1, [sp, #4]
 800b432:	9800      	ldr	r0, [sp, #0]
 800b434:	9f08      	ldr	r7, [sp, #32]
 800b436:	321a      	adds	r2, #26
 800b438:	47b8      	blx	r7
 800b43a:	3001      	adds	r0, #1
 800b43c:	d0e6      	beq.n	800b40c <_printf_common+0xa8>
 800b43e:	3601      	adds	r6, #1
 800b440:	e7d1      	b.n	800b3e6 <_printf_common+0x82>
	...

0800b444 <_printf_i>:
 800b444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b446:	b08b      	sub	sp, #44	@ 0x2c
 800b448:	9206      	str	r2, [sp, #24]
 800b44a:	000a      	movs	r2, r1
 800b44c:	3243      	adds	r2, #67	@ 0x43
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	9005      	str	r0, [sp, #20]
 800b452:	9203      	str	r2, [sp, #12]
 800b454:	7e0a      	ldrb	r2, [r1, #24]
 800b456:	000c      	movs	r4, r1
 800b458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b45a:	2a78      	cmp	r2, #120	@ 0x78
 800b45c:	d809      	bhi.n	800b472 <_printf_i+0x2e>
 800b45e:	2a62      	cmp	r2, #98	@ 0x62
 800b460:	d80b      	bhi.n	800b47a <_printf_i+0x36>
 800b462:	2a00      	cmp	r2, #0
 800b464:	d100      	bne.n	800b468 <_printf_i+0x24>
 800b466:	e0ba      	b.n	800b5de <_printf_i+0x19a>
 800b468:	497a      	ldr	r1, [pc, #488]	@ (800b654 <_printf_i+0x210>)
 800b46a:	9104      	str	r1, [sp, #16]
 800b46c:	2a58      	cmp	r2, #88	@ 0x58
 800b46e:	d100      	bne.n	800b472 <_printf_i+0x2e>
 800b470:	e08e      	b.n	800b590 <_printf_i+0x14c>
 800b472:	0025      	movs	r5, r4
 800b474:	3542      	adds	r5, #66	@ 0x42
 800b476:	702a      	strb	r2, [r5, #0]
 800b478:	e022      	b.n	800b4c0 <_printf_i+0x7c>
 800b47a:	0010      	movs	r0, r2
 800b47c:	3863      	subs	r0, #99	@ 0x63
 800b47e:	2815      	cmp	r0, #21
 800b480:	d8f7      	bhi.n	800b472 <_printf_i+0x2e>
 800b482:	f7f4 fe4f 	bl	8000124 <__gnu_thumb1_case_shi>
 800b486:	0016      	.short	0x0016
 800b488:	fff6001f 	.word	0xfff6001f
 800b48c:	fff6fff6 	.word	0xfff6fff6
 800b490:	001ffff6 	.word	0x001ffff6
 800b494:	fff6fff6 	.word	0xfff6fff6
 800b498:	fff6fff6 	.word	0xfff6fff6
 800b49c:	0036009f 	.word	0x0036009f
 800b4a0:	fff6007e 	.word	0xfff6007e
 800b4a4:	00b0fff6 	.word	0x00b0fff6
 800b4a8:	0036fff6 	.word	0x0036fff6
 800b4ac:	fff6fff6 	.word	0xfff6fff6
 800b4b0:	0082      	.short	0x0082
 800b4b2:	0025      	movs	r5, r4
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	3542      	adds	r5, #66	@ 0x42
 800b4b8:	1d11      	adds	r1, r2, #4
 800b4ba:	6019      	str	r1, [r3, #0]
 800b4bc:	6813      	ldr	r3, [r2, #0]
 800b4be:	702b      	strb	r3, [r5, #0]
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e09e      	b.n	800b602 <_printf_i+0x1be>
 800b4c4:	6818      	ldr	r0, [r3, #0]
 800b4c6:	6809      	ldr	r1, [r1, #0]
 800b4c8:	1d02      	adds	r2, r0, #4
 800b4ca:	060d      	lsls	r5, r1, #24
 800b4cc:	d50b      	bpl.n	800b4e6 <_printf_i+0xa2>
 800b4ce:	6806      	ldr	r6, [r0, #0]
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	da03      	bge.n	800b4de <_printf_i+0x9a>
 800b4d6:	232d      	movs	r3, #45	@ 0x2d
 800b4d8:	9a03      	ldr	r2, [sp, #12]
 800b4da:	4276      	negs	r6, r6
 800b4dc:	7013      	strb	r3, [r2, #0]
 800b4de:	4b5d      	ldr	r3, [pc, #372]	@ (800b654 <_printf_i+0x210>)
 800b4e0:	270a      	movs	r7, #10
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	e018      	b.n	800b518 <_printf_i+0xd4>
 800b4e6:	6806      	ldr	r6, [r0, #0]
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	0649      	lsls	r1, r1, #25
 800b4ec:	d5f1      	bpl.n	800b4d2 <_printf_i+0x8e>
 800b4ee:	b236      	sxth	r6, r6
 800b4f0:	e7ef      	b.n	800b4d2 <_printf_i+0x8e>
 800b4f2:	6808      	ldr	r0, [r1, #0]
 800b4f4:	6819      	ldr	r1, [r3, #0]
 800b4f6:	c940      	ldmia	r1!, {r6}
 800b4f8:	0605      	lsls	r5, r0, #24
 800b4fa:	d402      	bmi.n	800b502 <_printf_i+0xbe>
 800b4fc:	0640      	lsls	r0, r0, #25
 800b4fe:	d500      	bpl.n	800b502 <_printf_i+0xbe>
 800b500:	b2b6      	uxth	r6, r6
 800b502:	6019      	str	r1, [r3, #0]
 800b504:	4b53      	ldr	r3, [pc, #332]	@ (800b654 <_printf_i+0x210>)
 800b506:	270a      	movs	r7, #10
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	2a6f      	cmp	r2, #111	@ 0x6f
 800b50c:	d100      	bne.n	800b510 <_printf_i+0xcc>
 800b50e:	3f02      	subs	r7, #2
 800b510:	0023      	movs	r3, r4
 800b512:	2200      	movs	r2, #0
 800b514:	3343      	adds	r3, #67	@ 0x43
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	6863      	ldr	r3, [r4, #4]
 800b51a:	60a3      	str	r3, [r4, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	db06      	blt.n	800b52e <_printf_i+0xea>
 800b520:	2104      	movs	r1, #4
 800b522:	6822      	ldr	r2, [r4, #0]
 800b524:	9d03      	ldr	r5, [sp, #12]
 800b526:	438a      	bics	r2, r1
 800b528:	6022      	str	r2, [r4, #0]
 800b52a:	4333      	orrs	r3, r6
 800b52c:	d00c      	beq.n	800b548 <_printf_i+0x104>
 800b52e:	9d03      	ldr	r5, [sp, #12]
 800b530:	0030      	movs	r0, r6
 800b532:	0039      	movs	r1, r7
 800b534:	f7f4 fe86 	bl	8000244 <__aeabi_uidivmod>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	3d01      	subs	r5, #1
 800b53c:	5c5b      	ldrb	r3, [r3, r1]
 800b53e:	702b      	strb	r3, [r5, #0]
 800b540:	0033      	movs	r3, r6
 800b542:	0006      	movs	r6, r0
 800b544:	429f      	cmp	r7, r3
 800b546:	d9f3      	bls.n	800b530 <_printf_i+0xec>
 800b548:	2f08      	cmp	r7, #8
 800b54a:	d109      	bne.n	800b560 <_printf_i+0x11c>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d506      	bpl.n	800b560 <_printf_i+0x11c>
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	429a      	cmp	r2, r3
 800b558:	dc02      	bgt.n	800b560 <_printf_i+0x11c>
 800b55a:	2330      	movs	r3, #48	@ 0x30
 800b55c:	3d01      	subs	r5, #1
 800b55e:	702b      	strb	r3, [r5, #0]
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	1b5b      	subs	r3, r3, r5
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	9b07      	ldr	r3, [sp, #28]
 800b568:	0021      	movs	r1, r4
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	9805      	ldr	r0, [sp, #20]
 800b56e:	9b06      	ldr	r3, [sp, #24]
 800b570:	aa09      	add	r2, sp, #36	@ 0x24
 800b572:	f7ff fef7 	bl	800b364 <_printf_common>
 800b576:	3001      	adds	r0, #1
 800b578:	d148      	bne.n	800b60c <_printf_i+0x1c8>
 800b57a:	2001      	movs	r0, #1
 800b57c:	4240      	negs	r0, r0
 800b57e:	b00b      	add	sp, #44	@ 0x2c
 800b580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b582:	2220      	movs	r2, #32
 800b584:	6809      	ldr	r1, [r1, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	6022      	str	r2, [r4, #0]
 800b58a:	2278      	movs	r2, #120	@ 0x78
 800b58c:	4932      	ldr	r1, [pc, #200]	@ (800b658 <_printf_i+0x214>)
 800b58e:	9104      	str	r1, [sp, #16]
 800b590:	0021      	movs	r1, r4
 800b592:	3145      	adds	r1, #69	@ 0x45
 800b594:	700a      	strb	r2, [r1, #0]
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	6822      	ldr	r2, [r4, #0]
 800b59a:	c940      	ldmia	r1!, {r6}
 800b59c:	0610      	lsls	r0, r2, #24
 800b59e:	d402      	bmi.n	800b5a6 <_printf_i+0x162>
 800b5a0:	0650      	lsls	r0, r2, #25
 800b5a2:	d500      	bpl.n	800b5a6 <_printf_i+0x162>
 800b5a4:	b2b6      	uxth	r6, r6
 800b5a6:	6019      	str	r1, [r3, #0]
 800b5a8:	07d3      	lsls	r3, r2, #31
 800b5aa:	d502      	bpl.n	800b5b2 <_printf_i+0x16e>
 800b5ac:	2320      	movs	r3, #32
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d001      	beq.n	800b5ba <_printf_i+0x176>
 800b5b6:	2710      	movs	r7, #16
 800b5b8:	e7aa      	b.n	800b510 <_printf_i+0xcc>
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	4393      	bics	r3, r2
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	e7f8      	b.n	800b5b6 <_printf_i+0x172>
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	680d      	ldr	r5, [r1, #0]
 800b5c8:	1d10      	adds	r0, r2, #4
 800b5ca:	6949      	ldr	r1, [r1, #20]
 800b5cc:	6018      	str	r0, [r3, #0]
 800b5ce:	6813      	ldr	r3, [r2, #0]
 800b5d0:	062e      	lsls	r6, r5, #24
 800b5d2:	d501      	bpl.n	800b5d8 <_printf_i+0x194>
 800b5d4:	6019      	str	r1, [r3, #0]
 800b5d6:	e002      	b.n	800b5de <_printf_i+0x19a>
 800b5d8:	066d      	lsls	r5, r5, #25
 800b5da:	d5fb      	bpl.n	800b5d4 <_printf_i+0x190>
 800b5dc:	8019      	strh	r1, [r3, #0]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9d03      	ldr	r5, [sp, #12]
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	e7bf      	b.n	800b566 <_printf_i+0x122>
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	1d11      	adds	r1, r2, #4
 800b5ea:	6019      	str	r1, [r3, #0]
 800b5ec:	6815      	ldr	r5, [r2, #0]
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	0028      	movs	r0, r5
 800b5f2:	6862      	ldr	r2, [r4, #4]
 800b5f4:	f000 fa09 	bl	800ba0a <memchr>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d001      	beq.n	800b600 <_printf_i+0x1bc>
 800b5fc:	1b40      	subs	r0, r0, r5
 800b5fe:	6060      	str	r0, [r4, #4]
 800b600:	6863      	ldr	r3, [r4, #4]
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	2300      	movs	r3, #0
 800b606:	9a03      	ldr	r2, [sp, #12]
 800b608:	7013      	strb	r3, [r2, #0]
 800b60a:	e7ac      	b.n	800b566 <_printf_i+0x122>
 800b60c:	002a      	movs	r2, r5
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	9906      	ldr	r1, [sp, #24]
 800b612:	9805      	ldr	r0, [sp, #20]
 800b614:	9d07      	ldr	r5, [sp, #28]
 800b616:	47a8      	blx	r5
 800b618:	3001      	adds	r0, #1
 800b61a:	d0ae      	beq.n	800b57a <_printf_i+0x136>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	079b      	lsls	r3, r3, #30
 800b620:	d415      	bmi.n	800b64e <_printf_i+0x20a>
 800b622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b624:	68e0      	ldr	r0, [r4, #12]
 800b626:	4298      	cmp	r0, r3
 800b628:	daa9      	bge.n	800b57e <_printf_i+0x13a>
 800b62a:	0018      	movs	r0, r3
 800b62c:	e7a7      	b.n	800b57e <_printf_i+0x13a>
 800b62e:	0022      	movs	r2, r4
 800b630:	2301      	movs	r3, #1
 800b632:	9906      	ldr	r1, [sp, #24]
 800b634:	9805      	ldr	r0, [sp, #20]
 800b636:	9e07      	ldr	r6, [sp, #28]
 800b638:	3219      	adds	r2, #25
 800b63a:	47b0      	blx	r6
 800b63c:	3001      	adds	r0, #1
 800b63e:	d09c      	beq.n	800b57a <_printf_i+0x136>
 800b640:	3501      	adds	r5, #1
 800b642:	68e3      	ldr	r3, [r4, #12]
 800b644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	42ab      	cmp	r3, r5
 800b64a:	dcf0      	bgt.n	800b62e <_printf_i+0x1ea>
 800b64c:	e7e9      	b.n	800b622 <_printf_i+0x1de>
 800b64e:	2500      	movs	r5, #0
 800b650:	e7f7      	b.n	800b642 <_printf_i+0x1fe>
 800b652:	46c0      	nop			@ (mov r8, r8)
 800b654:	0800de92 	.word	0x0800de92
 800b658:	0800dea3 	.word	0x0800dea3

0800b65c <std>:
 800b65c:	2300      	movs	r3, #0
 800b65e:	b510      	push	{r4, lr}
 800b660:	0004      	movs	r4, r0
 800b662:	6003      	str	r3, [r0, #0]
 800b664:	6043      	str	r3, [r0, #4]
 800b666:	6083      	str	r3, [r0, #8]
 800b668:	8181      	strh	r1, [r0, #12]
 800b66a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b66c:	81c2      	strh	r2, [r0, #14]
 800b66e:	6103      	str	r3, [r0, #16]
 800b670:	6143      	str	r3, [r0, #20]
 800b672:	6183      	str	r3, [r0, #24]
 800b674:	0019      	movs	r1, r3
 800b676:	2208      	movs	r2, #8
 800b678:	305c      	adds	r0, #92	@ 0x5c
 800b67a:	f000 f921 	bl	800b8c0 <memset>
 800b67e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <std+0x50>)
 800b680:	6224      	str	r4, [r4, #32]
 800b682:	6263      	str	r3, [r4, #36]	@ 0x24
 800b684:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <std+0x54>)
 800b686:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b688:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b4 <std+0x58>)
 800b68a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b68c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b8 <std+0x5c>)
 800b68e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <std+0x60>)
 800b692:	429c      	cmp	r4, r3
 800b694:	d005      	beq.n	800b6a2 <std+0x46>
 800b696:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c0 <std+0x64>)
 800b698:	429c      	cmp	r4, r3
 800b69a:	d002      	beq.n	800b6a2 <std+0x46>
 800b69c:	4b09      	ldr	r3, [pc, #36]	@ (800b6c4 <std+0x68>)
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	d103      	bne.n	800b6aa <std+0x4e>
 800b6a2:	0020      	movs	r0, r4
 800b6a4:	3058      	adds	r0, #88	@ 0x58
 800b6a6:	f000 f9a5 	bl	800b9f4 <__retarget_lock_init_recursive>
 800b6aa:	bd10      	pop	{r4, pc}
 800b6ac:	0800b829 	.word	0x0800b829
 800b6b0:	0800b851 	.word	0x0800b851
 800b6b4:	0800b889 	.word	0x0800b889
 800b6b8:	0800b8b5 	.word	0x0800b8b5
 800b6bc:	2000059c 	.word	0x2000059c
 800b6c0:	20000604 	.word	0x20000604
 800b6c4:	2000066c 	.word	0x2000066c

0800b6c8 <stdio_exit_handler>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4a03      	ldr	r2, [pc, #12]	@ (800b6d8 <stdio_exit_handler+0x10>)
 800b6cc:	4903      	ldr	r1, [pc, #12]	@ (800b6dc <stdio_exit_handler+0x14>)
 800b6ce:	4804      	ldr	r0, [pc, #16]	@ (800b6e0 <stdio_exit_handler+0x18>)
 800b6d0:	f000 f86c 	bl	800b7ac <_fwalk_sglue>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	46c0      	nop			@ (mov r8, r8)
 800b6d8:	2000001c 	.word	0x2000001c
 800b6dc:	0800d419 	.word	0x0800d419
 800b6e0:	2000002c 	.word	0x2000002c

0800b6e4 <cleanup_stdio>:
 800b6e4:	6841      	ldr	r1, [r0, #4]
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b714 <cleanup_stdio+0x30>)
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	0004      	movs	r4, r0
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	d001      	beq.n	800b6f4 <cleanup_stdio+0x10>
 800b6f0:	f001 fe92 	bl	800d418 <_fflush_r>
 800b6f4:	68a1      	ldr	r1, [r4, #8]
 800b6f6:	4b08      	ldr	r3, [pc, #32]	@ (800b718 <cleanup_stdio+0x34>)
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d002      	beq.n	800b702 <cleanup_stdio+0x1e>
 800b6fc:	0020      	movs	r0, r4
 800b6fe:	f001 fe8b 	bl	800d418 <_fflush_r>
 800b702:	68e1      	ldr	r1, [r4, #12]
 800b704:	4b05      	ldr	r3, [pc, #20]	@ (800b71c <cleanup_stdio+0x38>)
 800b706:	4299      	cmp	r1, r3
 800b708:	d002      	beq.n	800b710 <cleanup_stdio+0x2c>
 800b70a:	0020      	movs	r0, r4
 800b70c:	f001 fe84 	bl	800d418 <_fflush_r>
 800b710:	bd10      	pop	{r4, pc}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	2000059c 	.word	0x2000059c
 800b718:	20000604 	.word	0x20000604
 800b71c:	2000066c 	.word	0x2000066c

0800b720 <global_stdio_init.part.0>:
 800b720:	b510      	push	{r4, lr}
 800b722:	4b09      	ldr	r3, [pc, #36]	@ (800b748 <global_stdio_init.part.0+0x28>)
 800b724:	4a09      	ldr	r2, [pc, #36]	@ (800b74c <global_stdio_init.part.0+0x2c>)
 800b726:	2104      	movs	r1, #4
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	4809      	ldr	r0, [pc, #36]	@ (800b750 <global_stdio_init.part.0+0x30>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	f7ff ff95 	bl	800b65c <std>
 800b732:	2201      	movs	r2, #1
 800b734:	2109      	movs	r1, #9
 800b736:	4807      	ldr	r0, [pc, #28]	@ (800b754 <global_stdio_init.part.0+0x34>)
 800b738:	f7ff ff90 	bl	800b65c <std>
 800b73c:	2202      	movs	r2, #2
 800b73e:	2112      	movs	r1, #18
 800b740:	4805      	ldr	r0, [pc, #20]	@ (800b758 <global_stdio_init.part.0+0x38>)
 800b742:	f7ff ff8b 	bl	800b65c <std>
 800b746:	bd10      	pop	{r4, pc}
 800b748:	200006d4 	.word	0x200006d4
 800b74c:	0800b6c9 	.word	0x0800b6c9
 800b750:	2000059c 	.word	0x2000059c
 800b754:	20000604 	.word	0x20000604
 800b758:	2000066c 	.word	0x2000066c

0800b75c <__sfp_lock_acquire>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	4802      	ldr	r0, [pc, #8]	@ (800b768 <__sfp_lock_acquire+0xc>)
 800b760:	f000 f949 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800b764:	bd10      	pop	{r4, pc}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	200006dd 	.word	0x200006dd

0800b76c <__sfp_lock_release>:
 800b76c:	b510      	push	{r4, lr}
 800b76e:	4802      	ldr	r0, [pc, #8]	@ (800b778 <__sfp_lock_release+0xc>)
 800b770:	f000 f942 	bl	800b9f8 <__retarget_lock_release_recursive>
 800b774:	bd10      	pop	{r4, pc}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	200006dd 	.word	0x200006dd

0800b77c <__sinit>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	0004      	movs	r4, r0
 800b780:	f7ff ffec 	bl	800b75c <__sfp_lock_acquire>
 800b784:	6a23      	ldr	r3, [r4, #32]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <__sinit+0x14>
 800b78a:	f7ff ffef 	bl	800b76c <__sfp_lock_release>
 800b78e:	bd10      	pop	{r4, pc}
 800b790:	4b04      	ldr	r3, [pc, #16]	@ (800b7a4 <__sinit+0x28>)
 800b792:	6223      	str	r3, [r4, #32]
 800b794:	4b04      	ldr	r3, [pc, #16]	@ (800b7a8 <__sinit+0x2c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f6      	bne.n	800b78a <__sinit+0xe>
 800b79c:	f7ff ffc0 	bl	800b720 <global_stdio_init.part.0>
 800b7a0:	e7f3      	b.n	800b78a <__sinit+0xe>
 800b7a2:	46c0      	nop			@ (mov r8, r8)
 800b7a4:	0800b6e5 	.word	0x0800b6e5
 800b7a8:	200006d4 	.word	0x200006d4

0800b7ac <_fwalk_sglue>:
 800b7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ae:	0014      	movs	r4, r2
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	9000      	str	r0, [sp, #0]
 800b7b4:	9101      	str	r1, [sp, #4]
 800b7b6:	68a5      	ldr	r5, [r4, #8]
 800b7b8:	6867      	ldr	r7, [r4, #4]
 800b7ba:	3f01      	subs	r7, #1
 800b7bc:	d504      	bpl.n	800b7c8 <_fwalk_sglue+0x1c>
 800b7be:	6824      	ldr	r4, [r4, #0]
 800b7c0:	2c00      	cmp	r4, #0
 800b7c2:	d1f8      	bne.n	800b7b6 <_fwalk_sglue+0xa>
 800b7c4:	0030      	movs	r0, r6
 800b7c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7c8:	89ab      	ldrh	r3, [r5, #12]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d908      	bls.n	800b7e0 <_fwalk_sglue+0x34>
 800b7ce:	220e      	movs	r2, #14
 800b7d0:	5eab      	ldrsh	r3, [r5, r2]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	d004      	beq.n	800b7e0 <_fwalk_sglue+0x34>
 800b7d6:	0029      	movs	r1, r5
 800b7d8:	9800      	ldr	r0, [sp, #0]
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	4798      	blx	r3
 800b7de:	4306      	orrs	r6, r0
 800b7e0:	3568      	adds	r5, #104	@ 0x68
 800b7e2:	e7ea      	b.n	800b7ba <_fwalk_sglue+0xe>

0800b7e4 <siprintf>:
 800b7e4:	b40e      	push	{r1, r2, r3}
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	490c      	ldr	r1, [pc, #48]	@ (800b81c <siprintf+0x38>)
 800b7ec:	b09d      	sub	sp, #116	@ 0x74
 800b7ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b7f0:	9002      	str	r0, [sp, #8]
 800b7f2:	9006      	str	r0, [sp, #24]
 800b7f4:	9107      	str	r1, [sp, #28]
 800b7f6:	9104      	str	r1, [sp, #16]
 800b7f8:	4809      	ldr	r0, [pc, #36]	@ (800b820 <siprintf+0x3c>)
 800b7fa:	490a      	ldr	r1, [pc, #40]	@ (800b824 <siprintf+0x40>)
 800b7fc:	cb04      	ldmia	r3!, {r2}
 800b7fe:	9105      	str	r1, [sp, #20]
 800b800:	6800      	ldr	r0, [r0, #0]
 800b802:	a902      	add	r1, sp, #8
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b808:	f001 fc82 	bl	800d110 <_svfiprintf_r>
 800b80c:	9b02      	ldr	r3, [sp, #8]
 800b80e:	701c      	strb	r4, [r3, #0]
 800b810:	b01d      	add	sp, #116	@ 0x74
 800b812:	bc10      	pop	{r4}
 800b814:	bc08      	pop	{r3}
 800b816:	b003      	add	sp, #12
 800b818:	4718      	bx	r3
 800b81a:	46c0      	nop			@ (mov r8, r8)
 800b81c:	7fffffff 	.word	0x7fffffff
 800b820:	20000028 	.word	0x20000028
 800b824:	ffff0208 	.word	0xffff0208

0800b828 <__sread>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	000c      	movs	r4, r1
 800b82c:	250e      	movs	r5, #14
 800b82e:	5f49      	ldrsh	r1, [r1, r5]
 800b830:	f000 f88e 	bl	800b950 <_read_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	db03      	blt.n	800b840 <__sread+0x18>
 800b838:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b83a:	181b      	adds	r3, r3, r0
 800b83c:	6563      	str	r3, [r4, #84]	@ 0x54
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	4a02      	ldr	r2, [pc, #8]	@ (800b84c <__sread+0x24>)
 800b844:	4013      	ands	r3, r2
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	e7f9      	b.n	800b83e <__sread+0x16>
 800b84a:	46c0      	nop			@ (mov r8, r8)
 800b84c:	ffffefff 	.word	0xffffefff

0800b850 <__swrite>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	001f      	movs	r7, r3
 800b854:	898b      	ldrh	r3, [r1, #12]
 800b856:	0005      	movs	r5, r0
 800b858:	000c      	movs	r4, r1
 800b85a:	0016      	movs	r6, r2
 800b85c:	05db      	lsls	r3, r3, #23
 800b85e:	d505      	bpl.n	800b86c <__swrite+0x1c>
 800b860:	230e      	movs	r3, #14
 800b862:	5ec9      	ldrsh	r1, [r1, r3]
 800b864:	2200      	movs	r2, #0
 800b866:	2302      	movs	r3, #2
 800b868:	f000 f85e 	bl	800b928 <_lseek_r>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	4a05      	ldr	r2, [pc, #20]	@ (800b884 <__swrite+0x34>)
 800b870:	0028      	movs	r0, r5
 800b872:	4013      	ands	r3, r2
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	0032      	movs	r2, r6
 800b878:	230e      	movs	r3, #14
 800b87a:	5ee1      	ldrsh	r1, [r4, r3]
 800b87c:	003b      	movs	r3, r7
 800b87e:	f000 f87b 	bl	800b978 <_write_r>
 800b882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b884:	ffffefff 	.word	0xffffefff

0800b888 <__sseek>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	000c      	movs	r4, r1
 800b88c:	250e      	movs	r5, #14
 800b88e:	5f49      	ldrsh	r1, [r1, r5]
 800b890:	f000 f84a 	bl	800b928 <_lseek_r>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	1c42      	adds	r2, r0, #1
 800b898:	d103      	bne.n	800b8a2 <__sseek+0x1a>
 800b89a:	4a05      	ldr	r2, [pc, #20]	@ (800b8b0 <__sseek+0x28>)
 800b89c:	4013      	ands	r3, r2
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	2280      	movs	r2, #128	@ 0x80
 800b8a4:	0152      	lsls	r2, r2, #5
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8ac:	e7f8      	b.n	800b8a0 <__sseek+0x18>
 800b8ae:	46c0      	nop			@ (mov r8, r8)
 800b8b0:	ffffefff 	.word	0xffffefff

0800b8b4 <__sclose>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	230e      	movs	r3, #14
 800b8b8:	5ec9      	ldrsh	r1, [r1, r3]
 800b8ba:	f000 f823 	bl	800b904 <_close_r>
 800b8be:	bd10      	pop	{r4, pc}

0800b8c0 <memset>:
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	1882      	adds	r2, r0, r2
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d100      	bne.n	800b8ca <memset+0xa>
 800b8c8:	4770      	bx	lr
 800b8ca:	7019      	strb	r1, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	e7f9      	b.n	800b8c4 <memset+0x4>

0800b8d0 <strstr>:
 800b8d0:	780a      	ldrb	r2, [r1, #0]
 800b8d2:	b530      	push	{r4, r5, lr}
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	d10c      	bne.n	800b8f2 <strstr+0x22>
 800b8d8:	bd30      	pop	{r4, r5, pc}
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d108      	bne.n	800b8f0 <strstr+0x20>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	5ccc      	ldrb	r4, [r1, r3]
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	d0f8      	beq.n	800b8d8 <strstr+0x8>
 800b8e6:	5cc5      	ldrb	r5, [r0, r3]
 800b8e8:	42a5      	cmp	r5, r4
 800b8ea:	d101      	bne.n	800b8f0 <strstr+0x20>
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	e7f7      	b.n	800b8e0 <strstr+0x10>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	7803      	ldrb	r3, [r0, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1f0      	bne.n	800b8da <strstr+0xa>
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	e7ed      	b.n	800b8d8 <strstr+0x8>

0800b8fc <_localeconv_r>:
 800b8fc:	4800      	ldr	r0, [pc, #0]	@ (800b900 <_localeconv_r+0x4>)
 800b8fe:	4770      	bx	lr
 800b900:	20000168 	.word	0x20000168

0800b904 <_close_r>:
 800b904:	2300      	movs	r3, #0
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	4d06      	ldr	r5, [pc, #24]	@ (800b924 <_close_r+0x20>)
 800b90a:	0004      	movs	r4, r0
 800b90c:	0008      	movs	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7f9 faa0 	bl	8004e54 <_close>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d103      	bne.n	800b920 <_close_r+0x1c>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d000      	beq.n	800b920 <_close_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	200006d8 	.word	0x200006d8

0800b928 <_lseek_r>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	0004      	movs	r4, r0
 800b92c:	0008      	movs	r0, r1
 800b92e:	0011      	movs	r1, r2
 800b930:	001a      	movs	r2, r3
 800b932:	2300      	movs	r3, #0
 800b934:	4d05      	ldr	r5, [pc, #20]	@ (800b94c <_lseek_r+0x24>)
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f9 faad 	bl	8004e96 <_lseek>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d103      	bne.n	800b948 <_lseek_r+0x20>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d000      	beq.n	800b948 <_lseek_r+0x20>
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	200006d8 	.word	0x200006d8

0800b950 <_read_r>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	0004      	movs	r4, r0
 800b954:	0008      	movs	r0, r1
 800b956:	0011      	movs	r1, r2
 800b958:	001a      	movs	r2, r3
 800b95a:	2300      	movs	r3, #0
 800b95c:	4d05      	ldr	r5, [pc, #20]	@ (800b974 <_read_r+0x24>)
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f9 fa3f 	bl	8004de2 <_read>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d103      	bne.n	800b970 <_read_r+0x20>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d000      	beq.n	800b970 <_read_r+0x20>
 800b96e:	6023      	str	r3, [r4, #0]
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	200006d8 	.word	0x200006d8

0800b978 <_write_r>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	0004      	movs	r4, r0
 800b97c:	0008      	movs	r0, r1
 800b97e:	0011      	movs	r1, r2
 800b980:	001a      	movs	r2, r3
 800b982:	2300      	movs	r3, #0
 800b984:	4d05      	ldr	r5, [pc, #20]	@ (800b99c <_write_r+0x24>)
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f9 fa48 	bl	8004e1c <_write>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d103      	bne.n	800b998 <_write_r+0x20>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d000      	beq.n	800b998 <_write_r+0x20>
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	46c0      	nop			@ (mov r8, r8)
 800b99c:	200006d8 	.word	0x200006d8

0800b9a0 <__errno>:
 800b9a0:	4b01      	ldr	r3, [pc, #4]	@ (800b9a8 <__errno+0x8>)
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	4770      	bx	lr
 800b9a6:	46c0      	nop			@ (mov r8, r8)
 800b9a8:	20000028 	.word	0x20000028

0800b9ac <__libc_init_array>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	4c0c      	ldr	r4, [pc, #48]	@ (800b9e4 <__libc_init_array+0x38>)
 800b9b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b9e8 <__libc_init_array+0x3c>)
 800b9b4:	1b64      	subs	r4, r4, r5
 800b9b6:	10a4      	asrs	r4, r4, #2
 800b9b8:	42a6      	cmp	r6, r4
 800b9ba:	d109      	bne.n	800b9d0 <__libc_init_array+0x24>
 800b9bc:	2600      	movs	r6, #0
 800b9be:	f002 f8fb 	bl	800dbb8 <_init>
 800b9c2:	4c0a      	ldr	r4, [pc, #40]	@ (800b9ec <__libc_init_array+0x40>)
 800b9c4:	4d0a      	ldr	r5, [pc, #40]	@ (800b9f0 <__libc_init_array+0x44>)
 800b9c6:	1b64      	subs	r4, r4, r5
 800b9c8:	10a4      	asrs	r4, r4, #2
 800b9ca:	42a6      	cmp	r6, r4
 800b9cc:	d105      	bne.n	800b9da <__libc_init_array+0x2e>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	00b3      	lsls	r3, r6, #2
 800b9d2:	58eb      	ldr	r3, [r5, r3]
 800b9d4:	4798      	blx	r3
 800b9d6:	3601      	adds	r6, #1
 800b9d8:	e7ee      	b.n	800b9b8 <__libc_init_array+0xc>
 800b9da:	00b3      	lsls	r3, r6, #2
 800b9dc:	58eb      	ldr	r3, [r5, r3]
 800b9de:	4798      	blx	r3
 800b9e0:	3601      	adds	r6, #1
 800b9e2:	e7f2      	b.n	800b9ca <__libc_init_array+0x1e>
 800b9e4:	0800e1f4 	.word	0x0800e1f4
 800b9e8:	0800e1f4 	.word	0x0800e1f4
 800b9ec:	0800e1f8 	.word	0x0800e1f8
 800b9f0:	0800e1f4 	.word	0x0800e1f4

0800b9f4 <__retarget_lock_init_recursive>:
 800b9f4:	4770      	bx	lr

0800b9f6 <__retarget_lock_acquire_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <__retarget_lock_release_recursive>:
 800b9f8:	4770      	bx	lr

0800b9fa <strcpy>:
 800b9fa:	0003      	movs	r3, r0
 800b9fc:	780a      	ldrb	r2, [r1, #0]
 800b9fe:	3101      	adds	r1, #1
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	2a00      	cmp	r2, #0
 800ba06:	d1f9      	bne.n	800b9fc <strcpy+0x2>
 800ba08:	4770      	bx	lr

0800ba0a <memchr>:
 800ba0a:	b2c9      	uxtb	r1, r1
 800ba0c:	1882      	adds	r2, r0, r2
 800ba0e:	4290      	cmp	r0, r2
 800ba10:	d101      	bne.n	800ba16 <memchr+0xc>
 800ba12:	2000      	movs	r0, #0
 800ba14:	4770      	bx	lr
 800ba16:	7803      	ldrb	r3, [r0, #0]
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	d0fb      	beq.n	800ba14 <memchr+0xa>
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	e7f6      	b.n	800ba0e <memchr+0x4>

0800ba20 <quorem>:
 800ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba22:	6903      	ldr	r3, [r0, #16]
 800ba24:	690c      	ldr	r4, [r1, #16]
 800ba26:	b089      	sub	sp, #36	@ 0x24
 800ba28:	9003      	str	r0, [sp, #12]
 800ba2a:	9106      	str	r1, [sp, #24]
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	db63      	blt.n	800bafa <quorem+0xda>
 800ba32:	000b      	movs	r3, r1
 800ba34:	3c01      	subs	r4, #1
 800ba36:	3314      	adds	r3, #20
 800ba38:	00a5      	lsls	r5, r4, #2
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	195b      	adds	r3, r3, r5
 800ba3e:	9305      	str	r3, [sp, #20]
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	3314      	adds	r3, #20
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	195d      	adds	r5, r3, r5
 800ba48:	9b05      	ldr	r3, [sp, #20]
 800ba4a:	682f      	ldr	r7, [r5, #0]
 800ba4c:	681e      	ldr	r6, [r3, #0]
 800ba4e:	0038      	movs	r0, r7
 800ba50:	3601      	adds	r6, #1
 800ba52:	0031      	movs	r1, r6
 800ba54:	f7f4 fb70 	bl	8000138 <__udivsi3>
 800ba58:	9002      	str	r0, [sp, #8]
 800ba5a:	42b7      	cmp	r7, r6
 800ba5c:	d327      	bcc.n	800baae <quorem+0x8e>
 800ba5e:	9b04      	ldr	r3, [sp, #16]
 800ba60:	2700      	movs	r7, #0
 800ba62:	469c      	mov	ip, r3
 800ba64:	9e01      	ldr	r6, [sp, #4]
 800ba66:	9707      	str	r7, [sp, #28]
 800ba68:	4662      	mov	r2, ip
 800ba6a:	ca08      	ldmia	r2!, {r3}
 800ba6c:	6830      	ldr	r0, [r6, #0]
 800ba6e:	4694      	mov	ip, r2
 800ba70:	9a02      	ldr	r2, [sp, #8]
 800ba72:	b299      	uxth	r1, r3
 800ba74:	4351      	muls	r1, r2
 800ba76:	0c1b      	lsrs	r3, r3, #16
 800ba78:	4353      	muls	r3, r2
 800ba7a:	19c9      	adds	r1, r1, r7
 800ba7c:	0c0a      	lsrs	r2, r1, #16
 800ba7e:	189b      	adds	r3, r3, r2
 800ba80:	b289      	uxth	r1, r1
 800ba82:	b282      	uxth	r2, r0
 800ba84:	1a52      	subs	r2, r2, r1
 800ba86:	9907      	ldr	r1, [sp, #28]
 800ba88:	0c1f      	lsrs	r7, r3, #16
 800ba8a:	1852      	adds	r2, r2, r1
 800ba8c:	0c00      	lsrs	r0, r0, #16
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	1411      	asrs	r1, r2, #16
 800ba92:	1ac3      	subs	r3, r0, r3
 800ba94:	185b      	adds	r3, r3, r1
 800ba96:	1419      	asrs	r1, r3, #16
 800ba98:	b292      	uxth	r2, r2
 800ba9a:	041b      	lsls	r3, r3, #16
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	9b05      	ldr	r3, [sp, #20]
 800baa0:	9107      	str	r1, [sp, #28]
 800baa2:	c604      	stmia	r6!, {r2}
 800baa4:	4563      	cmp	r3, ip
 800baa6:	d2df      	bcs.n	800ba68 <quorem+0x48>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d02b      	beq.n	800bb06 <quorem+0xe6>
 800baae:	9906      	ldr	r1, [sp, #24]
 800bab0:	9803      	ldr	r0, [sp, #12]
 800bab2:	f001 f9b7 	bl	800ce24 <__mcmp>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	db1e      	blt.n	800baf8 <quorem+0xd8>
 800baba:	2600      	movs	r6, #0
 800babc:	9d01      	ldr	r5, [sp, #4]
 800babe:	9904      	ldr	r1, [sp, #16]
 800bac0:	c901      	ldmia	r1!, {r0}
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b287      	uxth	r7, r0
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	1bd2      	subs	r2, r2, r7
 800baca:	1992      	adds	r2, r2, r6
 800bacc:	0c00      	lsrs	r0, r0, #16
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	1a1b      	subs	r3, r3, r0
 800bad2:	1410      	asrs	r0, r2, #16
 800bad4:	181b      	adds	r3, r3, r0
 800bad6:	141e      	asrs	r6, r3, #16
 800bad8:	b292      	uxth	r2, r2
 800bada:	041b      	lsls	r3, r3, #16
 800badc:	431a      	orrs	r2, r3
 800bade:	9b05      	ldr	r3, [sp, #20]
 800bae0:	c504      	stmia	r5!, {r2}
 800bae2:	428b      	cmp	r3, r1
 800bae4:	d2ec      	bcs.n	800bac0 <quorem+0xa0>
 800bae6:	9a01      	ldr	r2, [sp, #4]
 800bae8:	00a3      	lsls	r3, r4, #2
 800baea:	18d3      	adds	r3, r2, r3
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	2a00      	cmp	r2, #0
 800baf0:	d014      	beq.n	800bb1c <quorem+0xfc>
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	3301      	adds	r3, #1
 800baf6:	9302      	str	r3, [sp, #8]
 800baf8:	9802      	ldr	r0, [sp, #8]
 800bafa:	b009      	add	sp, #36	@ 0x24
 800bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d104      	bne.n	800bb0e <quorem+0xee>
 800bb04:	3c01      	subs	r4, #1
 800bb06:	9b01      	ldr	r3, [sp, #4]
 800bb08:	3d04      	subs	r5, #4
 800bb0a:	42ab      	cmp	r3, r5
 800bb0c:	d3f7      	bcc.n	800bafe <quorem+0xde>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	611c      	str	r4, [r3, #16]
 800bb12:	e7cc      	b.n	800baae <quorem+0x8e>
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d104      	bne.n	800bb24 <quorem+0x104>
 800bb1a:	3c01      	subs	r4, #1
 800bb1c:	9a01      	ldr	r2, [sp, #4]
 800bb1e:	3b04      	subs	r3, #4
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d3f7      	bcc.n	800bb14 <quorem+0xf4>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	611c      	str	r4, [r3, #16]
 800bb28:	e7e3      	b.n	800baf2 <quorem+0xd2>
	...

0800bb2c <_dtoa_r>:
 800bb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb2e:	0014      	movs	r4, r2
 800bb30:	001d      	movs	r5, r3
 800bb32:	69c6      	ldr	r6, [r0, #28]
 800bb34:	b09d      	sub	sp, #116	@ 0x74
 800bb36:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb38:	950b      	str	r5, [sp, #44]	@ 0x2c
 800bb3a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800bb3c:	9003      	str	r0, [sp, #12]
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	d10f      	bne.n	800bb62 <_dtoa_r+0x36>
 800bb42:	2010      	movs	r0, #16
 800bb44:	f000 fe2c 	bl	800c7a0 <malloc>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	1e02      	subs	r2, r0, #0
 800bb4c:	61d8      	str	r0, [r3, #28]
 800bb4e:	d104      	bne.n	800bb5a <_dtoa_r+0x2e>
 800bb50:	21ef      	movs	r1, #239	@ 0xef
 800bb52:	4bc7      	ldr	r3, [pc, #796]	@ (800be70 <_dtoa_r+0x344>)
 800bb54:	48c7      	ldr	r0, [pc, #796]	@ (800be74 <_dtoa_r+0x348>)
 800bb56:	f001 fcb9 	bl	800d4cc <__assert_func>
 800bb5a:	6046      	str	r6, [r0, #4]
 800bb5c:	6086      	str	r6, [r0, #8]
 800bb5e:	6006      	str	r6, [r0, #0]
 800bb60:	60c6      	str	r6, [r0, #12]
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	6819      	ldr	r1, [r3, #0]
 800bb68:	2900      	cmp	r1, #0
 800bb6a:	d00b      	beq.n	800bb84 <_dtoa_r+0x58>
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4093      	lsls	r3, r2
 800bb72:	604a      	str	r2, [r1, #4]
 800bb74:	608b      	str	r3, [r1, #8]
 800bb76:	9803      	ldr	r0, [sp, #12]
 800bb78:	f000 ff12 	bl	800c9a0 <_Bfree>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	2d00      	cmp	r5, #0
 800bb86:	da1e      	bge.n	800bbc6 <_dtoa_r+0x9a>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	006b      	lsls	r3, r5, #1
 800bb8e:	085b      	lsrs	r3, r3, #1
 800bb90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb92:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bb94:	4bb8      	ldr	r3, [pc, #736]	@ (800be78 <_dtoa_r+0x34c>)
 800bb96:	4ab8      	ldr	r2, [pc, #736]	@ (800be78 <_dtoa_r+0x34c>)
 800bb98:	403b      	ands	r3, r7
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d116      	bne.n	800bbcc <_dtoa_r+0xa0>
 800bb9e:	4bb7      	ldr	r3, [pc, #732]	@ (800be7c <_dtoa_r+0x350>)
 800bba0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	033b      	lsls	r3, r7, #12
 800bba6:	0b1b      	lsrs	r3, r3, #12
 800bba8:	4323      	orrs	r3, r4
 800bbaa:	d101      	bne.n	800bbb0 <_dtoa_r+0x84>
 800bbac:	f000 fd80 	bl	800c6b0 <_dtoa_r+0xb84>
 800bbb0:	4bb3      	ldr	r3, [pc, #716]	@ (800be80 <_dtoa_r+0x354>)
 800bbb2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bbb4:	9308      	str	r3, [sp, #32]
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	d002      	beq.n	800bbc0 <_dtoa_r+0x94>
 800bbba:	4bb2      	ldr	r3, [pc, #712]	@ (800be84 <_dtoa_r+0x358>)
 800bbbc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	9808      	ldr	r0, [sp, #32]
 800bbc2:	b01d      	add	sp, #116	@ 0x74
 800bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	603b      	str	r3, [r7, #0]
 800bbca:	e7e2      	b.n	800bb92 <_dtoa_r+0x66>
 800bbcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	9212      	str	r2, [sp, #72]	@ 0x48
 800bbd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bbd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f7f4 fc32 	bl	8000444 <__aeabi_dcmpeq>
 800bbe0:	1e06      	subs	r6, r0, #0
 800bbe2:	d00b      	beq.n	800bbfc <_dtoa_r+0xd0>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <_dtoa_r+0xca>
 800bbf0:	4ba5      	ldr	r3, [pc, #660]	@ (800be88 <_dtoa_r+0x35c>)
 800bbf2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	4ba5      	ldr	r3, [pc, #660]	@ (800be8c <_dtoa_r+0x360>)
 800bbf8:	9308      	str	r3, [sp, #32]
 800bbfa:	e7e1      	b.n	800bbc0 <_dtoa_r+0x94>
 800bbfc:	ab1a      	add	r3, sp, #104	@ 0x68
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	9803      	ldr	r0, [sp, #12]
 800bc06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bc08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc0a:	f001 f9c1 	bl	800cf90 <__d2b>
 800bc0e:	007a      	lsls	r2, r7, #1
 800bc10:	9005      	str	r0, [sp, #20]
 800bc12:	0d52      	lsrs	r2, r2, #21
 800bc14:	d100      	bne.n	800bc18 <_dtoa_r+0xec>
 800bc16:	e07b      	b.n	800bd10 <_dtoa_r+0x1e4>
 800bc18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc1a:	9618      	str	r6, [sp, #96]	@ 0x60
 800bc1c:	0319      	lsls	r1, r3, #12
 800bc1e:	4b9c      	ldr	r3, [pc, #624]	@ (800be90 <_dtoa_r+0x364>)
 800bc20:	0b09      	lsrs	r1, r1, #12
 800bc22:	430b      	orrs	r3, r1
 800bc24:	499b      	ldr	r1, [pc, #620]	@ (800be94 <_dtoa_r+0x368>)
 800bc26:	1857      	adds	r7, r2, r1
 800bc28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bc2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bc2c:	0019      	movs	r1, r3
 800bc2e:	2200      	movs	r2, #0
 800bc30:	4b99      	ldr	r3, [pc, #612]	@ (800be98 <_dtoa_r+0x36c>)
 800bc32:	f7f6 fc0f 	bl	8002454 <__aeabi_dsub>
 800bc36:	4a99      	ldr	r2, [pc, #612]	@ (800be9c <_dtoa_r+0x370>)
 800bc38:	4b99      	ldr	r3, [pc, #612]	@ (800bea0 <_dtoa_r+0x374>)
 800bc3a:	f7f6 f925 	bl	8001e88 <__aeabi_dmul>
 800bc3e:	4a99      	ldr	r2, [pc, #612]	@ (800bea4 <_dtoa_r+0x378>)
 800bc40:	4b99      	ldr	r3, [pc, #612]	@ (800bea8 <_dtoa_r+0x37c>)
 800bc42:	f7f5 f921 	bl	8000e88 <__aeabi_dadd>
 800bc46:	0004      	movs	r4, r0
 800bc48:	0038      	movs	r0, r7
 800bc4a:	000d      	movs	r5, r1
 800bc4c:	f7f7 f86a 	bl	8002d24 <__aeabi_i2d>
 800bc50:	4a96      	ldr	r2, [pc, #600]	@ (800beac <_dtoa_r+0x380>)
 800bc52:	4b97      	ldr	r3, [pc, #604]	@ (800beb0 <_dtoa_r+0x384>)
 800bc54:	f7f6 f918 	bl	8001e88 <__aeabi_dmul>
 800bc58:	0002      	movs	r2, r0
 800bc5a:	000b      	movs	r3, r1
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	0029      	movs	r1, r5
 800bc60:	f7f5 f912 	bl	8000e88 <__aeabi_dadd>
 800bc64:	0004      	movs	r4, r0
 800bc66:	000d      	movs	r5, r1
 800bc68:	f7f7 f820 	bl	8002cac <__aeabi_d2iz>
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	9004      	str	r0, [sp, #16]
 800bc70:	2300      	movs	r3, #0
 800bc72:	0020      	movs	r0, r4
 800bc74:	0029      	movs	r1, r5
 800bc76:	f7f4 fbeb 	bl	8000450 <__aeabi_dcmplt>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d00b      	beq.n	800bc96 <_dtoa_r+0x16a>
 800bc7e:	9804      	ldr	r0, [sp, #16]
 800bc80:	f7f7 f850 	bl	8002d24 <__aeabi_i2d>
 800bc84:	002b      	movs	r3, r5
 800bc86:	0022      	movs	r2, r4
 800bc88:	f7f4 fbdc 	bl	8000444 <__aeabi_dcmpeq>
 800bc8c:	4243      	negs	r3, r0
 800bc8e:	4158      	adcs	r0, r3
 800bc90:	9b04      	ldr	r3, [sp, #16]
 800bc92:	1a1b      	subs	r3, r3, r0
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	2301      	movs	r3, #1
 800bc98:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc9a:	9b04      	ldr	r3, [sp, #16]
 800bc9c:	2b16      	cmp	r3, #22
 800bc9e:	d810      	bhi.n	800bcc2 <_dtoa_r+0x196>
 800bca0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bca2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bca4:	9a04      	ldr	r2, [sp, #16]
 800bca6:	4b83      	ldr	r3, [pc, #524]	@ (800beb4 <_dtoa_r+0x388>)
 800bca8:	00d2      	lsls	r2, r2, #3
 800bcaa:	189b      	adds	r3, r3, r2
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f7f4 fbce 	bl	8000450 <__aeabi_dcmplt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d047      	beq.n	800bd48 <_dtoa_r+0x21c>
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bcc6:	9206      	str	r2, [sp, #24]
 800bcc8:	1bdb      	subs	r3, r3, r7
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	d53e      	bpl.n	800bd4c <_dtoa_r+0x220>
 800bcce:	2201      	movs	r2, #1
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	9306      	str	r3, [sp, #24]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	db38      	blt.n	800bd50 <_dtoa_r+0x224>
 800bcde:	9a04      	ldr	r2, [sp, #16]
 800bce0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bce2:	4694      	mov	ip, r2
 800bce4:	4463      	add	r3, ip
 800bce6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bce8:	2300      	movs	r3, #0
 800bcea:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcec:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bcf0:	2401      	movs	r4, #1
 800bcf2:	2b09      	cmp	r3, #9
 800bcf4:	d862      	bhi.n	800bdbc <_dtoa_r+0x290>
 800bcf6:	2b05      	cmp	r3, #5
 800bcf8:	dd02      	ble.n	800bd00 <_dtoa_r+0x1d4>
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	3b04      	subs	r3, #4
 800bcfe:	9322      	str	r3, [sp, #136]	@ 0x88
 800bd00:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bd02:	1e98      	subs	r0, r3, #2
 800bd04:	2803      	cmp	r0, #3
 800bd06:	d863      	bhi.n	800bdd0 <_dtoa_r+0x2a4>
 800bd08:	f7f4 fa02 	bl	8000110 <__gnu_thumb1_case_uqi>
 800bd0c:	2b385654 	.word	0x2b385654
 800bd10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bd12:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800bd14:	18f6      	adds	r6, r6, r3
 800bd16:	4b68      	ldr	r3, [pc, #416]	@ (800beb8 <_dtoa_r+0x38c>)
 800bd18:	18f2      	adds	r2, r6, r3
 800bd1a:	2a20      	cmp	r2, #32
 800bd1c:	dd0f      	ble.n	800bd3e <_dtoa_r+0x212>
 800bd1e:	2340      	movs	r3, #64	@ 0x40
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	409f      	lsls	r7, r3
 800bd24:	4b65      	ldr	r3, [pc, #404]	@ (800bebc <_dtoa_r+0x390>)
 800bd26:	0038      	movs	r0, r7
 800bd28:	18f3      	adds	r3, r6, r3
 800bd2a:	40dc      	lsrs	r4, r3
 800bd2c:	4320      	orrs	r0, r4
 800bd2e:	f7f7 f827 	bl	8002d80 <__aeabi_ui2d>
 800bd32:	2201      	movs	r2, #1
 800bd34:	4b62      	ldr	r3, [pc, #392]	@ (800bec0 <_dtoa_r+0x394>)
 800bd36:	1e77      	subs	r7, r6, #1
 800bd38:	18cb      	adds	r3, r1, r3
 800bd3a:	9218      	str	r2, [sp, #96]	@ 0x60
 800bd3c:	e776      	b.n	800bc2c <_dtoa_r+0x100>
 800bd3e:	2320      	movs	r3, #32
 800bd40:	0020      	movs	r0, r4
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	4098      	lsls	r0, r3
 800bd46:	e7f2      	b.n	800bd2e <_dtoa_r+0x202>
 800bd48:	9015      	str	r0, [sp, #84]	@ 0x54
 800bd4a:	e7ba      	b.n	800bcc2 <_dtoa_r+0x196>
 800bd4c:	920d      	str	r2, [sp, #52]	@ 0x34
 800bd4e:	e7c3      	b.n	800bcd8 <_dtoa_r+0x1ac>
 800bd50:	9b06      	ldr	r3, [sp, #24]
 800bd52:	9a04      	ldr	r2, [sp, #16]
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	9306      	str	r3, [sp, #24]
 800bd58:	4253      	negs	r3, r2
 800bd5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9314      	str	r3, [sp, #80]	@ 0x50
 800bd60:	e7c5      	b.n	800bcee <_dtoa_r+0x1c2>
 800bd62:	2301      	movs	r3, #1
 800bd64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd66:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd68:	4694      	mov	ip, r2
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	4463      	add	r3, ip
 800bd6e:	930e      	str	r3, [sp, #56]	@ 0x38
 800bd70:	3301      	adds	r3, #1
 800bd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dc08      	bgt.n	800bd8a <_dtoa_r+0x25e>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e006      	b.n	800bd8a <_dtoa_r+0x25e>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd80:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd28      	ble.n	800bdd8 <_dtoa_r+0x2ac>
 800bd86:	930e      	str	r3, [sp, #56]	@ 0x38
 800bd88:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8a:	9a03      	ldr	r2, [sp, #12]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	69d0      	ldr	r0, [r2, #28]
 800bd90:	2204      	movs	r2, #4
 800bd92:	0015      	movs	r5, r2
 800bd94:	3514      	adds	r5, #20
 800bd96:	429d      	cmp	r5, r3
 800bd98:	d923      	bls.n	800bde2 <_dtoa_r+0x2b6>
 800bd9a:	6041      	str	r1, [r0, #4]
 800bd9c:	9803      	ldr	r0, [sp, #12]
 800bd9e:	f000 fdbb 	bl	800c918 <_Balloc>
 800bda2:	9008      	str	r0, [sp, #32]
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d11f      	bne.n	800bde8 <_dtoa_r+0x2bc>
 800bda8:	21b0      	movs	r1, #176	@ 0xb0
 800bdaa:	4b46      	ldr	r3, [pc, #280]	@ (800bec4 <_dtoa_r+0x398>)
 800bdac:	4831      	ldr	r0, [pc, #196]	@ (800be74 <_dtoa_r+0x348>)
 800bdae:	9a08      	ldr	r2, [sp, #32]
 800bdb0:	31ff      	adds	r1, #255	@ 0xff
 800bdb2:	e6d0      	b.n	800bb56 <_dtoa_r+0x2a>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e7e2      	b.n	800bd7e <_dtoa_r+0x252>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e7d3      	b.n	800bd64 <_dtoa_r+0x238>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9410      	str	r4, [sp, #64]	@ 0x40
 800bdc0:	9322      	str	r3, [sp, #136]	@ 0x88
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	930e      	str	r3, [sp, #56]	@ 0x38
 800bdc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdca:	3313      	adds	r3, #19
 800bdcc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bdce:	e7dc      	b.n	800bd8a <_dtoa_r+0x25e>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdd4:	3b02      	subs	r3, #2
 800bdd6:	e7f5      	b.n	800bdc4 <_dtoa_r+0x298>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	001a      	movs	r2, r3
 800bddc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bdde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde0:	e7f4      	b.n	800bdcc <_dtoa_r+0x2a0>
 800bde2:	3101      	adds	r1, #1
 800bde4:	0052      	lsls	r2, r2, #1
 800bde6:	e7d4      	b.n	800bd92 <_dtoa_r+0x266>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	9a08      	ldr	r2, [sp, #32]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	601a      	str	r2, [r3, #0]
 800bdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf2:	2b0e      	cmp	r3, #14
 800bdf4:	d900      	bls.n	800bdf8 <_dtoa_r+0x2cc>
 800bdf6:	e0d6      	b.n	800bfa6 <_dtoa_r+0x47a>
 800bdf8:	2c00      	cmp	r4, #0
 800bdfa:	d100      	bne.n	800bdfe <_dtoa_r+0x2d2>
 800bdfc:	e0d3      	b.n	800bfa6 <_dtoa_r+0x47a>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	dd63      	ble.n	800becc <_dtoa_r+0x3a0>
 800be04:	210f      	movs	r1, #15
 800be06:	9a04      	ldr	r2, [sp, #16]
 800be08:	4b2a      	ldr	r3, [pc, #168]	@ (800beb4 <_dtoa_r+0x388>)
 800be0a:	400a      	ands	r2, r1
 800be0c:	00d2      	lsls	r2, r2, #3
 800be0e:	189b      	adds	r3, r3, r2
 800be10:	681e      	ldr	r6, [r3, #0]
 800be12:	685f      	ldr	r7, [r3, #4]
 800be14:	9b04      	ldr	r3, [sp, #16]
 800be16:	2402      	movs	r4, #2
 800be18:	111d      	asrs	r5, r3, #4
 800be1a:	05db      	lsls	r3, r3, #23
 800be1c:	d50a      	bpl.n	800be34 <_dtoa_r+0x308>
 800be1e:	4b2a      	ldr	r3, [pc, #168]	@ (800bec8 <_dtoa_r+0x39c>)
 800be20:	400d      	ands	r5, r1
 800be22:	6a1a      	ldr	r2, [r3, #32]
 800be24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be26:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800be28:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800be2a:	f7f5 fbf3 	bl	8001614 <__aeabi_ddiv>
 800be2e:	900a      	str	r0, [sp, #40]	@ 0x28
 800be30:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be32:	3401      	adds	r4, #1
 800be34:	4b24      	ldr	r3, [pc, #144]	@ (800bec8 <_dtoa_r+0x39c>)
 800be36:	930c      	str	r3, [sp, #48]	@ 0x30
 800be38:	2d00      	cmp	r5, #0
 800be3a:	d108      	bne.n	800be4e <_dtoa_r+0x322>
 800be3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be40:	0032      	movs	r2, r6
 800be42:	003b      	movs	r3, r7
 800be44:	f7f5 fbe6 	bl	8001614 <__aeabi_ddiv>
 800be48:	900a      	str	r0, [sp, #40]	@ 0x28
 800be4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be4c:	e059      	b.n	800bf02 <_dtoa_r+0x3d6>
 800be4e:	2301      	movs	r3, #1
 800be50:	421d      	tst	r5, r3
 800be52:	d009      	beq.n	800be68 <_dtoa_r+0x33c>
 800be54:	18e4      	adds	r4, r4, r3
 800be56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be58:	0030      	movs	r0, r6
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	0039      	movs	r1, r7
 800be60:	f7f6 f812 	bl	8001e88 <__aeabi_dmul>
 800be64:	0006      	movs	r6, r0
 800be66:	000f      	movs	r7, r1
 800be68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be6a:	106d      	asrs	r5, r5, #1
 800be6c:	3308      	adds	r3, #8
 800be6e:	e7e2      	b.n	800be36 <_dtoa_r+0x30a>
 800be70:	0800dec1 	.word	0x0800dec1
 800be74:	0800ded8 	.word	0x0800ded8
 800be78:	7ff00000 	.word	0x7ff00000
 800be7c:	0000270f 	.word	0x0000270f
 800be80:	0800debd 	.word	0x0800debd
 800be84:	0800dec0 	.word	0x0800dec0
 800be88:	0800de91 	.word	0x0800de91
 800be8c:	0800de90 	.word	0x0800de90
 800be90:	3ff00000 	.word	0x3ff00000
 800be94:	fffffc01 	.word	0xfffffc01
 800be98:	3ff80000 	.word	0x3ff80000
 800be9c:	636f4361 	.word	0x636f4361
 800bea0:	3fd287a7 	.word	0x3fd287a7
 800bea4:	8b60c8b3 	.word	0x8b60c8b3
 800bea8:	3fc68a28 	.word	0x3fc68a28
 800beac:	509f79fb 	.word	0x509f79fb
 800beb0:	3fd34413 	.word	0x3fd34413
 800beb4:	0800e028 	.word	0x0800e028
 800beb8:	00000432 	.word	0x00000432
 800bebc:	00000412 	.word	0x00000412
 800bec0:	fe100000 	.word	0xfe100000
 800bec4:	0800df30 	.word	0x0800df30
 800bec8:	0800e000 	.word	0x0800e000
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	2402      	movs	r4, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d016      	beq.n	800bf02 <_dtoa_r+0x3d6>
 800bed4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bed6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bed8:	220f      	movs	r2, #15
 800beda:	425d      	negs	r5, r3
 800bedc:	402a      	ands	r2, r5
 800bede:	4bd5      	ldr	r3, [pc, #852]	@ (800c234 <_dtoa_r+0x708>)
 800bee0:	00d2      	lsls	r2, r2, #3
 800bee2:	189b      	adds	r3, r3, r2
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f7f5 ffce 	bl	8001e88 <__aeabi_dmul>
 800beec:	2701      	movs	r7, #1
 800beee:	2300      	movs	r3, #0
 800bef0:	900a      	str	r0, [sp, #40]	@ 0x28
 800bef2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bef4:	4ed0      	ldr	r6, [pc, #832]	@ (800c238 <_dtoa_r+0x70c>)
 800bef6:	112d      	asrs	r5, r5, #4
 800bef8:	2d00      	cmp	r5, #0
 800befa:	d000      	beq.n	800befe <_dtoa_r+0x3d2>
 800befc:	e095      	b.n	800c02a <_dtoa_r+0x4fe>
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1a2      	bne.n	800be48 <_dtoa_r+0x31c>
 800bf02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bf04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bf06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d100      	bne.n	800bf0e <_dtoa_r+0x3e2>
 800bf0c:	e098      	b.n	800c040 <_dtoa_r+0x514>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	0030      	movs	r0, r6
 800bf12:	0039      	movs	r1, r7
 800bf14:	4bc9      	ldr	r3, [pc, #804]	@ (800c23c <_dtoa_r+0x710>)
 800bf16:	f7f4 fa9b 	bl	8000450 <__aeabi_dcmplt>
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d100      	bne.n	800bf20 <_dtoa_r+0x3f4>
 800bf1e:	e08f      	b.n	800c040 <_dtoa_r+0x514>
 800bf20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d100      	bne.n	800bf28 <_dtoa_r+0x3fc>
 800bf26:	e08b      	b.n	800c040 <_dtoa_r+0x514>
 800bf28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dd37      	ble.n	800bf9e <_dtoa_r+0x472>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	2200      	movs	r2, #0
 800bf32:	3b01      	subs	r3, #1
 800bf34:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf36:	0030      	movs	r0, r6
 800bf38:	4bc1      	ldr	r3, [pc, #772]	@ (800c240 <_dtoa_r+0x714>)
 800bf3a:	0039      	movs	r1, r7
 800bf3c:	f7f5 ffa4 	bl	8001e88 <__aeabi_dmul>
 800bf40:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf42:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bf44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf46:	3401      	adds	r4, #1
 800bf48:	0020      	movs	r0, r4
 800bf4a:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf4c:	f7f6 feea 	bl	8002d24 <__aeabi_i2d>
 800bf50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf54:	f7f5 ff98 	bl	8001e88 <__aeabi_dmul>
 800bf58:	4bba      	ldr	r3, [pc, #744]	@ (800c244 <_dtoa_r+0x718>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f7f4 ff94 	bl	8000e88 <__aeabi_dadd>
 800bf60:	4bb9      	ldr	r3, [pc, #740]	@ (800c248 <_dtoa_r+0x71c>)
 800bf62:	0006      	movs	r6, r0
 800bf64:	18cf      	adds	r7, r1, r3
 800bf66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d16d      	bne.n	800c048 <_dtoa_r+0x51c>
 800bf6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf70:	2200      	movs	r2, #0
 800bf72:	4bb6      	ldr	r3, [pc, #728]	@ (800c24c <_dtoa_r+0x720>)
 800bf74:	f7f6 fa6e 	bl	8002454 <__aeabi_dsub>
 800bf78:	0032      	movs	r2, r6
 800bf7a:	003b      	movs	r3, r7
 800bf7c:	0004      	movs	r4, r0
 800bf7e:	000d      	movs	r5, r1
 800bf80:	f7f4 fa7a 	bl	8000478 <__aeabi_dcmpgt>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d000      	beq.n	800bf8a <_dtoa_r+0x45e>
 800bf88:	e2b6      	b.n	800c4f8 <_dtoa_r+0x9cc>
 800bf8a:	2180      	movs	r1, #128	@ 0x80
 800bf8c:	0609      	lsls	r1, r1, #24
 800bf8e:	187b      	adds	r3, r7, r1
 800bf90:	0032      	movs	r2, r6
 800bf92:	0020      	movs	r0, r4
 800bf94:	0029      	movs	r1, r5
 800bf96:	f7f4 fa5b 	bl	8000450 <__aeabi_dcmplt>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d128      	bne.n	800bff0 <_dtoa_r+0x4c4>
 800bf9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfa0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bfa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfa6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	da00      	bge.n	800bfae <_dtoa_r+0x482>
 800bfac:	e174      	b.n	800c298 <_dtoa_r+0x76c>
 800bfae:	9a04      	ldr	r2, [sp, #16]
 800bfb0:	2a0e      	cmp	r2, #14
 800bfb2:	dd00      	ble.n	800bfb6 <_dtoa_r+0x48a>
 800bfb4:	e170      	b.n	800c298 <_dtoa_r+0x76c>
 800bfb6:	4b9f      	ldr	r3, [pc, #636]	@ (800c234 <_dtoa_r+0x708>)
 800bfb8:	00d2      	lsls	r2, r2, #3
 800bfba:	189b      	adds	r3, r3, r2
 800bfbc:	685c      	ldr	r4, [r3, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	9306      	str	r3, [sp, #24]
 800bfc2:	9407      	str	r4, [sp, #28]
 800bfc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	db00      	blt.n	800bfcc <_dtoa_r+0x4a0>
 800bfca:	e0e7      	b.n	800c19c <_dtoa_r+0x670>
 800bfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd00      	ble.n	800bfd4 <_dtoa_r+0x4a8>
 800bfd2:	e0e3      	b.n	800c19c <_dtoa_r+0x670>
 800bfd4:	d10c      	bne.n	800bff0 <_dtoa_r+0x4c4>
 800bfd6:	9806      	ldr	r0, [sp, #24]
 800bfd8:	9907      	ldr	r1, [sp, #28]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	4b9b      	ldr	r3, [pc, #620]	@ (800c24c <_dtoa_r+0x720>)
 800bfde:	f7f5 ff53 	bl	8001e88 <__aeabi_dmul>
 800bfe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfe6:	f7f4 fa51 	bl	800048c <__aeabi_dcmpge>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d100      	bne.n	800bff0 <_dtoa_r+0x4c4>
 800bfee:	e286      	b.n	800c4fe <_dtoa_r+0x9d2>
 800bff0:	2600      	movs	r6, #0
 800bff2:	0037      	movs	r7, r6
 800bff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bff6:	9c08      	ldr	r4, [sp, #32]
 800bff8:	43db      	mvns	r3, r3
 800bffa:	930c      	str	r3, [sp, #48]	@ 0x30
 800bffc:	9704      	str	r7, [sp, #16]
 800bffe:	2700      	movs	r7, #0
 800c000:	0031      	movs	r1, r6
 800c002:	9803      	ldr	r0, [sp, #12]
 800c004:	f000 fccc 	bl	800c9a0 <_Bfree>
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d100      	bne.n	800c010 <_dtoa_r+0x4e4>
 800c00e:	e0bb      	b.n	800c188 <_dtoa_r+0x65c>
 800c010:	2f00      	cmp	r7, #0
 800c012:	d005      	beq.n	800c020 <_dtoa_r+0x4f4>
 800c014:	429f      	cmp	r7, r3
 800c016:	d003      	beq.n	800c020 <_dtoa_r+0x4f4>
 800c018:	0039      	movs	r1, r7
 800c01a:	9803      	ldr	r0, [sp, #12]
 800c01c:	f000 fcc0 	bl	800c9a0 <_Bfree>
 800c020:	9904      	ldr	r1, [sp, #16]
 800c022:	9803      	ldr	r0, [sp, #12]
 800c024:	f000 fcbc 	bl	800c9a0 <_Bfree>
 800c028:	e0ae      	b.n	800c188 <_dtoa_r+0x65c>
 800c02a:	423d      	tst	r5, r7
 800c02c:	d005      	beq.n	800c03a <_dtoa_r+0x50e>
 800c02e:	6832      	ldr	r2, [r6, #0]
 800c030:	6873      	ldr	r3, [r6, #4]
 800c032:	f7f5 ff29 	bl	8001e88 <__aeabi_dmul>
 800c036:	003b      	movs	r3, r7
 800c038:	3401      	adds	r4, #1
 800c03a:	106d      	asrs	r5, r5, #1
 800c03c:	3608      	adds	r6, #8
 800c03e:	e75b      	b.n	800bef8 <_dtoa_r+0x3cc>
 800c040:	9b04      	ldr	r3, [sp, #16]
 800c042:	930c      	str	r3, [sp, #48]	@ 0x30
 800c044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c046:	e77f      	b.n	800bf48 <_dtoa_r+0x41c>
 800c048:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c04a:	4b7a      	ldr	r3, [pc, #488]	@ (800c234 <_dtoa_r+0x708>)
 800c04c:	3a01      	subs	r2, #1
 800c04e:	00d2      	lsls	r2, r2, #3
 800c050:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c052:	189b      	adds	r3, r3, r2
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	2900      	cmp	r1, #0
 800c05a:	d04c      	beq.n	800c0f6 <_dtoa_r+0x5ca>
 800c05c:	2000      	movs	r0, #0
 800c05e:	497c      	ldr	r1, [pc, #496]	@ (800c250 <_dtoa_r+0x724>)
 800c060:	f7f5 fad8 	bl	8001614 <__aeabi_ddiv>
 800c064:	0032      	movs	r2, r6
 800c066:	003b      	movs	r3, r7
 800c068:	f7f6 f9f4 	bl	8002454 <__aeabi_dsub>
 800c06c:	9a08      	ldr	r2, [sp, #32]
 800c06e:	0006      	movs	r6, r0
 800c070:	4694      	mov	ip, r2
 800c072:	000f      	movs	r7, r1
 800c074:	9b08      	ldr	r3, [sp, #32]
 800c076:	9316      	str	r3, [sp, #88]	@ 0x58
 800c078:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c07a:	4463      	add	r3, ip
 800c07c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c07e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c082:	f7f6 fe13 	bl	8002cac <__aeabi_d2iz>
 800c086:	0005      	movs	r5, r0
 800c088:	f7f6 fe4c 	bl	8002d24 <__aeabi_i2d>
 800c08c:	0002      	movs	r2, r0
 800c08e:	000b      	movs	r3, r1
 800c090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c092:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c094:	f7f6 f9de 	bl	8002454 <__aeabi_dsub>
 800c098:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c09a:	3530      	adds	r5, #48	@ 0x30
 800c09c:	1c5c      	adds	r4, r3, #1
 800c09e:	701d      	strb	r5, [r3, #0]
 800c0a0:	0032      	movs	r2, r6
 800c0a2:	003b      	movs	r3, r7
 800c0a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c0a8:	f7f4 f9d2 	bl	8000450 <__aeabi_dcmplt>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d16b      	bne.n	800c188 <_dtoa_r+0x65c>
 800c0b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4961      	ldr	r1, [pc, #388]	@ (800c23c <_dtoa_r+0x710>)
 800c0b8:	f7f6 f9cc 	bl	8002454 <__aeabi_dsub>
 800c0bc:	0032      	movs	r2, r6
 800c0be:	003b      	movs	r3, r7
 800c0c0:	f7f4 f9c6 	bl	8000450 <__aeabi_dcmplt>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d000      	beq.n	800c0ca <_dtoa_r+0x59e>
 800c0c8:	e0c6      	b.n	800c258 <_dtoa_r+0x72c>
 800c0ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	d100      	bne.n	800c0d2 <_dtoa_r+0x5a6>
 800c0d0:	e765      	b.n	800bf9e <_dtoa_r+0x472>
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	0030      	movs	r0, r6
 800c0d6:	0039      	movs	r1, r7
 800c0d8:	4b59      	ldr	r3, [pc, #356]	@ (800c240 <_dtoa_r+0x714>)
 800c0da:	f7f5 fed5 	bl	8001e88 <__aeabi_dmul>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	0006      	movs	r6, r0
 800c0e2:	000f      	movs	r7, r1
 800c0e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0e8:	4b55      	ldr	r3, [pc, #340]	@ (800c240 <_dtoa_r+0x714>)
 800c0ea:	f7f5 fecd 	bl	8001e88 <__aeabi_dmul>
 800c0ee:	9416      	str	r4, [sp, #88]	@ 0x58
 800c0f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c0f4:	e7c3      	b.n	800c07e <_dtoa_r+0x552>
 800c0f6:	0030      	movs	r0, r6
 800c0f8:	0039      	movs	r1, r7
 800c0fa:	f7f5 fec5 	bl	8001e88 <__aeabi_dmul>
 800c0fe:	9d08      	ldr	r5, [sp, #32]
 800c100:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c102:	002b      	movs	r3, r5
 800c104:	4694      	mov	ip, r2
 800c106:	9016      	str	r0, [sp, #88]	@ 0x58
 800c108:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c10a:	4463      	add	r3, ip
 800c10c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c10e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c112:	f7f6 fdcb 	bl	8002cac <__aeabi_d2iz>
 800c116:	0004      	movs	r4, r0
 800c118:	f7f6 fe04 	bl	8002d24 <__aeabi_i2d>
 800c11c:	000b      	movs	r3, r1
 800c11e:	0002      	movs	r2, r0
 800c120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c122:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c124:	f7f6 f996 	bl	8002454 <__aeabi_dsub>
 800c128:	3430      	adds	r4, #48	@ 0x30
 800c12a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c12c:	702c      	strb	r4, [r5, #0]
 800c12e:	3501      	adds	r5, #1
 800c130:	0006      	movs	r6, r0
 800c132:	000f      	movs	r7, r1
 800c134:	42ab      	cmp	r3, r5
 800c136:	d12a      	bne.n	800c18e <_dtoa_r+0x662>
 800c138:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c13a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c13c:	9b08      	ldr	r3, [sp, #32]
 800c13e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800c140:	469c      	mov	ip, r3
 800c142:	2200      	movs	r2, #0
 800c144:	4b42      	ldr	r3, [pc, #264]	@ (800c250 <_dtoa_r+0x724>)
 800c146:	4464      	add	r4, ip
 800c148:	f7f4 fe9e 	bl	8000e88 <__aeabi_dadd>
 800c14c:	0002      	movs	r2, r0
 800c14e:	000b      	movs	r3, r1
 800c150:	0030      	movs	r0, r6
 800c152:	0039      	movs	r1, r7
 800c154:	f7f4 f990 	bl	8000478 <__aeabi_dcmpgt>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d000      	beq.n	800c15e <_dtoa_r+0x632>
 800c15c:	e07c      	b.n	800c258 <_dtoa_r+0x72c>
 800c15e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c162:	2000      	movs	r0, #0
 800c164:	493a      	ldr	r1, [pc, #232]	@ (800c250 <_dtoa_r+0x724>)
 800c166:	f7f6 f975 	bl	8002454 <__aeabi_dsub>
 800c16a:	0002      	movs	r2, r0
 800c16c:	000b      	movs	r3, r1
 800c16e:	0030      	movs	r0, r6
 800c170:	0039      	movs	r1, r7
 800c172:	f7f4 f96d 	bl	8000450 <__aeabi_dcmplt>
 800c176:	2800      	cmp	r0, #0
 800c178:	d100      	bne.n	800c17c <_dtoa_r+0x650>
 800c17a:	e710      	b.n	800bf9e <_dtoa_r+0x472>
 800c17c:	0023      	movs	r3, r4
 800c17e:	3c01      	subs	r4, #1
 800c180:	7822      	ldrb	r2, [r4, #0]
 800c182:	2a30      	cmp	r2, #48	@ 0x30
 800c184:	d0fa      	beq.n	800c17c <_dtoa_r+0x650>
 800c186:	001c      	movs	r4, r3
 800c188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	e042      	b.n	800c214 <_dtoa_r+0x6e8>
 800c18e:	2200      	movs	r2, #0
 800c190:	4b2b      	ldr	r3, [pc, #172]	@ (800c240 <_dtoa_r+0x714>)
 800c192:	f7f5 fe79 	bl	8001e88 <__aeabi_dmul>
 800c196:	900a      	str	r0, [sp, #40]	@ 0x28
 800c198:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c19a:	e7b8      	b.n	800c10e <_dtoa_r+0x5e2>
 800c19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19e:	9d08      	ldr	r5, [sp, #32]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	195b      	adds	r3, r3, r5
 800c1a4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c1a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c1a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	9b07      	ldr	r3, [sp, #28]
 800c1ae:	0030      	movs	r0, r6
 800c1b0:	0039      	movs	r1, r7
 800c1b2:	f7f5 fa2f 	bl	8001614 <__aeabi_ddiv>
 800c1b6:	f7f6 fd79 	bl	8002cac <__aeabi_d2iz>
 800c1ba:	9009      	str	r0, [sp, #36]	@ 0x24
 800c1bc:	f7f6 fdb2 	bl	8002d24 <__aeabi_i2d>
 800c1c0:	9a06      	ldr	r2, [sp, #24]
 800c1c2:	9b07      	ldr	r3, [sp, #28]
 800c1c4:	f7f5 fe60 	bl	8001e88 <__aeabi_dmul>
 800c1c8:	0002      	movs	r2, r0
 800c1ca:	000b      	movs	r3, r1
 800c1cc:	0030      	movs	r0, r6
 800c1ce:	0039      	movs	r1, r7
 800c1d0:	f7f6 f940 	bl	8002454 <__aeabi_dsub>
 800c1d4:	002b      	movs	r3, r5
 800c1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1d8:	3501      	adds	r5, #1
 800c1da:	3230      	adds	r2, #48	@ 0x30
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1e0:	002c      	movs	r4, r5
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d14b      	bne.n	800c27e <_dtoa_r+0x752>
 800c1e6:	0002      	movs	r2, r0
 800c1e8:	000b      	movs	r3, r1
 800c1ea:	f7f4 fe4d 	bl	8000e88 <__aeabi_dadd>
 800c1ee:	9a06      	ldr	r2, [sp, #24]
 800c1f0:	9b07      	ldr	r3, [sp, #28]
 800c1f2:	0006      	movs	r6, r0
 800c1f4:	000f      	movs	r7, r1
 800c1f6:	f7f4 f93f 	bl	8000478 <__aeabi_dcmpgt>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d12a      	bne.n	800c254 <_dtoa_r+0x728>
 800c1fe:	9a06      	ldr	r2, [sp, #24]
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	0030      	movs	r0, r6
 800c204:	0039      	movs	r1, r7
 800c206:	f7f4 f91d 	bl	8000444 <__aeabi_dcmpeq>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d002      	beq.n	800c214 <_dtoa_r+0x6e8>
 800c20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c210:	07dd      	lsls	r5, r3, #31
 800c212:	d41f      	bmi.n	800c254 <_dtoa_r+0x728>
 800c214:	9905      	ldr	r1, [sp, #20]
 800c216:	9803      	ldr	r0, [sp, #12]
 800c218:	f000 fbc2 	bl	800c9a0 <_Bfree>
 800c21c:	2300      	movs	r3, #0
 800c21e:	7023      	strb	r3, [r4, #0]
 800c220:	9b04      	ldr	r3, [sp, #16]
 800c222:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c224:	3301      	adds	r3, #1
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d100      	bne.n	800c230 <_dtoa_r+0x704>
 800c22e:	e4c7      	b.n	800bbc0 <_dtoa_r+0x94>
 800c230:	601c      	str	r4, [r3, #0]
 800c232:	e4c5      	b.n	800bbc0 <_dtoa_r+0x94>
 800c234:	0800e028 	.word	0x0800e028
 800c238:	0800e000 	.word	0x0800e000
 800c23c:	3ff00000 	.word	0x3ff00000
 800c240:	40240000 	.word	0x40240000
 800c244:	401c0000 	.word	0x401c0000
 800c248:	fcc00000 	.word	0xfcc00000
 800c24c:	40140000 	.word	0x40140000
 800c250:	3fe00000 	.word	0x3fe00000
 800c254:	9b04      	ldr	r3, [sp, #16]
 800c256:	930c      	str	r3, [sp, #48]	@ 0x30
 800c258:	0023      	movs	r3, r4
 800c25a:	001c      	movs	r4, r3
 800c25c:	3b01      	subs	r3, #1
 800c25e:	781a      	ldrb	r2, [r3, #0]
 800c260:	2a39      	cmp	r2, #57	@ 0x39
 800c262:	d108      	bne.n	800c276 <_dtoa_r+0x74a>
 800c264:	9a08      	ldr	r2, [sp, #32]
 800c266:	429a      	cmp	r2, r3
 800c268:	d1f7      	bne.n	800c25a <_dtoa_r+0x72e>
 800c26a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c26c:	9908      	ldr	r1, [sp, #32]
 800c26e:	3201      	adds	r2, #1
 800c270:	920c      	str	r2, [sp, #48]	@ 0x30
 800c272:	2230      	movs	r2, #48	@ 0x30
 800c274:	700a      	strb	r2, [r1, #0]
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	3201      	adds	r2, #1
 800c27a:	701a      	strb	r2, [r3, #0]
 800c27c:	e784      	b.n	800c188 <_dtoa_r+0x65c>
 800c27e:	2200      	movs	r2, #0
 800c280:	4bc6      	ldr	r3, [pc, #792]	@ (800c59c <_dtoa_r+0xa70>)
 800c282:	f7f5 fe01 	bl	8001e88 <__aeabi_dmul>
 800c286:	2200      	movs	r2, #0
 800c288:	2300      	movs	r3, #0
 800c28a:	0006      	movs	r6, r0
 800c28c:	000f      	movs	r7, r1
 800c28e:	f7f4 f8d9 	bl	8000444 <__aeabi_dcmpeq>
 800c292:	2800      	cmp	r0, #0
 800c294:	d089      	beq.n	800c1aa <_dtoa_r+0x67e>
 800c296:	e7bd      	b.n	800c214 <_dtoa_r+0x6e8>
 800c298:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c29a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c29c:	9c06      	ldr	r4, [sp, #24]
 800c29e:	2f00      	cmp	r7, #0
 800c2a0:	d014      	beq.n	800c2cc <_dtoa_r+0x7a0>
 800c2a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c2a4:	2a01      	cmp	r2, #1
 800c2a6:	dd00      	ble.n	800c2aa <_dtoa_r+0x77e>
 800c2a8:	e0e4      	b.n	800c474 <_dtoa_r+0x948>
 800c2aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	d100      	bne.n	800c2b2 <_dtoa_r+0x786>
 800c2b0:	e0da      	b.n	800c468 <_dtoa_r+0x93c>
 800c2b2:	4abb      	ldr	r2, [pc, #748]	@ (800c5a0 <_dtoa_r+0xa74>)
 800c2b4:	189b      	adds	r3, r3, r2
 800c2b6:	9a06      	ldr	r2, [sp, #24]
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	18d2      	adds	r2, r2, r3
 800c2bc:	9206      	str	r2, [sp, #24]
 800c2be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2c0:	9803      	ldr	r0, [sp, #12]
 800c2c2:	18d3      	adds	r3, r2, r3
 800c2c4:	930d      	str	r3, [sp, #52]	@ 0x34
 800c2c6:	f000 fc23 	bl	800cb10 <__i2b>
 800c2ca:	0007      	movs	r7, r0
 800c2cc:	2c00      	cmp	r4, #0
 800c2ce:	d00e      	beq.n	800c2ee <_dtoa_r+0x7c2>
 800c2d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	dd0b      	ble.n	800c2ee <_dtoa_r+0x7c2>
 800c2d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2d8:	0023      	movs	r3, r4
 800c2da:	4294      	cmp	r4, r2
 800c2dc:	dd00      	ble.n	800c2e0 <_dtoa_r+0x7b4>
 800c2de:	0013      	movs	r3, r2
 800c2e0:	9a06      	ldr	r2, [sp, #24]
 800c2e2:	1ae4      	subs	r4, r4, r3
 800c2e4:	1ad2      	subs	r2, r2, r3
 800c2e6:	9206      	str	r2, [sp, #24]
 800c2e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800c2ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d021      	beq.n	800c338 <_dtoa_r+0x80c>
 800c2f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d100      	bne.n	800c2fc <_dtoa_r+0x7d0>
 800c2fa:	e0d3      	b.n	800c4a4 <_dtoa_r+0x978>
 800c2fc:	9e05      	ldr	r6, [sp, #20]
 800c2fe:	2d00      	cmp	r5, #0
 800c300:	d014      	beq.n	800c32c <_dtoa_r+0x800>
 800c302:	0039      	movs	r1, r7
 800c304:	002a      	movs	r2, r5
 800c306:	9803      	ldr	r0, [sp, #12]
 800c308:	f000 fcc4 	bl	800cc94 <__pow5mult>
 800c30c:	9a05      	ldr	r2, [sp, #20]
 800c30e:	0001      	movs	r1, r0
 800c310:	0007      	movs	r7, r0
 800c312:	9803      	ldr	r0, [sp, #12]
 800c314:	f000 fc14 	bl	800cb40 <__multiply>
 800c318:	0006      	movs	r6, r0
 800c31a:	9905      	ldr	r1, [sp, #20]
 800c31c:	9803      	ldr	r0, [sp, #12]
 800c31e:	f000 fb3f 	bl	800c9a0 <_Bfree>
 800c322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c324:	9605      	str	r6, [sp, #20]
 800c326:	1b5b      	subs	r3, r3, r5
 800c328:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c32a:	d005      	beq.n	800c338 <_dtoa_r+0x80c>
 800c32c:	0031      	movs	r1, r6
 800c32e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c330:	9803      	ldr	r0, [sp, #12]
 800c332:	f000 fcaf 	bl	800cc94 <__pow5mult>
 800c336:	9005      	str	r0, [sp, #20]
 800c338:	2101      	movs	r1, #1
 800c33a:	9803      	ldr	r0, [sp, #12]
 800c33c:	f000 fbe8 	bl	800cb10 <__i2b>
 800c340:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c342:	0006      	movs	r6, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d100      	bne.n	800c34a <_dtoa_r+0x81e>
 800c348:	e1bc      	b.n	800c6c4 <_dtoa_r+0xb98>
 800c34a:	001a      	movs	r2, r3
 800c34c:	0001      	movs	r1, r0
 800c34e:	9803      	ldr	r0, [sp, #12]
 800c350:	f000 fca0 	bl	800cc94 <__pow5mult>
 800c354:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c356:	0006      	movs	r6, r0
 800c358:	2500      	movs	r5, #0
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	dc16      	bgt.n	800c38c <_dtoa_r+0x860>
 800c35e:	2500      	movs	r5, #0
 800c360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c362:	42ab      	cmp	r3, r5
 800c364:	d10e      	bne.n	800c384 <_dtoa_r+0x858>
 800c366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c368:	031b      	lsls	r3, r3, #12
 800c36a:	42ab      	cmp	r3, r5
 800c36c:	d10a      	bne.n	800c384 <_dtoa_r+0x858>
 800c36e:	4b8d      	ldr	r3, [pc, #564]	@ (800c5a4 <_dtoa_r+0xa78>)
 800c370:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c372:	4213      	tst	r3, r2
 800c374:	d006      	beq.n	800c384 <_dtoa_r+0x858>
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	3501      	adds	r5, #1
 800c37a:	3301      	adds	r3, #1
 800c37c:	9306      	str	r3, [sp, #24]
 800c37e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c380:	3301      	adds	r3, #1
 800c382:	930d      	str	r3, [sp, #52]	@ 0x34
 800c384:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c386:	2001      	movs	r0, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d008      	beq.n	800c39e <_dtoa_r+0x872>
 800c38c:	6933      	ldr	r3, [r6, #16]
 800c38e:	3303      	adds	r3, #3
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	18f3      	adds	r3, r6, r3
 800c394:	6858      	ldr	r0, [r3, #4]
 800c396:	f000 fb6b 	bl	800ca70 <__hi0bits>
 800c39a:	2320      	movs	r3, #32
 800c39c:	1a18      	subs	r0, r3, r0
 800c39e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3a0:	1818      	adds	r0, r3, r0
 800c3a2:	0002      	movs	r2, r0
 800c3a4:	231f      	movs	r3, #31
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	4218      	tst	r0, r3
 800c3aa:	d100      	bne.n	800c3ae <_dtoa_r+0x882>
 800c3ac:	e081      	b.n	800c4b2 <_dtoa_r+0x986>
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	dd79      	ble.n	800c4aa <_dtoa_r+0x97e>
 800c3b6:	231c      	movs	r3, #28
 800c3b8:	1a9b      	subs	r3, r3, r2
 800c3ba:	9a06      	ldr	r2, [sp, #24]
 800c3bc:	18e4      	adds	r4, r4, r3
 800c3be:	18d2      	adds	r2, r2, r3
 800c3c0:	9206      	str	r2, [sp, #24]
 800c3c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3c4:	18d3      	adds	r3, r2, r3
 800c3c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3c8:	9b06      	ldr	r3, [sp, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dd05      	ble.n	800c3da <_dtoa_r+0x8ae>
 800c3ce:	001a      	movs	r2, r3
 800c3d0:	9905      	ldr	r1, [sp, #20]
 800c3d2:	9803      	ldr	r0, [sp, #12]
 800c3d4:	f000 fcba 	bl	800cd4c <__lshift>
 800c3d8:	9005      	str	r0, [sp, #20]
 800c3da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd05      	ble.n	800c3ec <_dtoa_r+0x8c0>
 800c3e0:	0031      	movs	r1, r6
 800c3e2:	001a      	movs	r2, r3
 800c3e4:	9803      	ldr	r0, [sp, #12]
 800c3e6:	f000 fcb1 	bl	800cd4c <__lshift>
 800c3ea:	0006      	movs	r6, r0
 800c3ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d061      	beq.n	800c4b6 <_dtoa_r+0x98a>
 800c3f2:	0031      	movs	r1, r6
 800c3f4:	9805      	ldr	r0, [sp, #20]
 800c3f6:	f000 fd15 	bl	800ce24 <__mcmp>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	da5b      	bge.n	800c4b6 <_dtoa_r+0x98a>
 800c3fe:	9b04      	ldr	r3, [sp, #16]
 800c400:	220a      	movs	r2, #10
 800c402:	3b01      	subs	r3, #1
 800c404:	930c      	str	r3, [sp, #48]	@ 0x30
 800c406:	9905      	ldr	r1, [sp, #20]
 800c408:	2300      	movs	r3, #0
 800c40a:	9803      	ldr	r0, [sp, #12]
 800c40c:	f000 faec 	bl	800c9e8 <__multadd>
 800c410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c412:	9005      	str	r0, [sp, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d100      	bne.n	800c41a <_dtoa_r+0x8ee>
 800c418:	e15b      	b.n	800c6d2 <_dtoa_r+0xba6>
 800c41a:	2300      	movs	r3, #0
 800c41c:	0039      	movs	r1, r7
 800c41e:	220a      	movs	r2, #10
 800c420:	9803      	ldr	r0, [sp, #12]
 800c422:	f000 fae1 	bl	800c9e8 <__multadd>
 800c426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c428:	0007      	movs	r7, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	dc4d      	bgt.n	800c4ca <_dtoa_r+0x99e>
 800c42e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c430:	2b02      	cmp	r3, #2
 800c432:	dd46      	ble.n	800c4c2 <_dtoa_r+0x996>
 800c434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c436:	2b00      	cmp	r3, #0
 800c438:	d000      	beq.n	800c43c <_dtoa_r+0x910>
 800c43a:	e5db      	b.n	800bff4 <_dtoa_r+0x4c8>
 800c43c:	0031      	movs	r1, r6
 800c43e:	2205      	movs	r2, #5
 800c440:	9803      	ldr	r0, [sp, #12]
 800c442:	f000 fad1 	bl	800c9e8 <__multadd>
 800c446:	0006      	movs	r6, r0
 800c448:	0001      	movs	r1, r0
 800c44a:	9805      	ldr	r0, [sp, #20]
 800c44c:	f000 fcea 	bl	800ce24 <__mcmp>
 800c450:	2800      	cmp	r0, #0
 800c452:	dc00      	bgt.n	800c456 <_dtoa_r+0x92a>
 800c454:	e5ce      	b.n	800bff4 <_dtoa_r+0x4c8>
 800c456:	9b08      	ldr	r3, [sp, #32]
 800c458:	9a08      	ldr	r2, [sp, #32]
 800c45a:	1c5c      	adds	r4, r3, #1
 800c45c:	2331      	movs	r3, #49	@ 0x31
 800c45e:	7013      	strb	r3, [r2, #0]
 800c460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c462:	3301      	adds	r3, #1
 800c464:	930c      	str	r3, [sp, #48]	@ 0x30
 800c466:	e5c9      	b.n	800bffc <_dtoa_r+0x4d0>
 800c468:	2336      	movs	r3, #54	@ 0x36
 800c46a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c46c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c46e:	1a9b      	subs	r3, r3, r2
 800c470:	9c06      	ldr	r4, [sp, #24]
 800c472:	e720      	b.n	800c2b6 <_dtoa_r+0x78a>
 800c474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c476:	1e5d      	subs	r5, r3, #1
 800c478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c47a:	42ab      	cmp	r3, r5
 800c47c:	db08      	blt.n	800c490 <_dtoa_r+0x964>
 800c47e:	1b5d      	subs	r5, r3, r5
 800c480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c482:	2b00      	cmp	r3, #0
 800c484:	daf4      	bge.n	800c470 <_dtoa_r+0x944>
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c48a:	1a9c      	subs	r4, r3, r2
 800c48c:	2300      	movs	r3, #0
 800c48e:	e712      	b.n	800c2b6 <_dtoa_r+0x78a>
 800c490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c492:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c494:	1aeb      	subs	r3, r5, r3
 800c496:	18d3      	adds	r3, r2, r3
 800c498:	9314      	str	r3, [sp, #80]	@ 0x50
 800c49a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c49c:	9c06      	ldr	r4, [sp, #24]
 800c49e:	2500      	movs	r5, #0
 800c4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a2:	e708      	b.n	800c2b6 <_dtoa_r+0x78a>
 800c4a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4a6:	9905      	ldr	r1, [sp, #20]
 800c4a8:	e742      	b.n	800c330 <_dtoa_r+0x804>
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	d08c      	beq.n	800c3c8 <_dtoa_r+0x89c>
 800c4ae:	331c      	adds	r3, #28
 800c4b0:	e783      	b.n	800c3ba <_dtoa_r+0x88e>
 800c4b2:	0013      	movs	r3, r2
 800c4b4:	e7fb      	b.n	800c4ae <_dtoa_r+0x982>
 800c4b6:	9b04      	ldr	r3, [sp, #16]
 800c4b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	ddb5      	ble.n	800c42e <_dtoa_r+0x902>
 800c4c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d100      	bne.n	800c4ca <_dtoa_r+0x99e>
 800c4c8:	e107      	b.n	800c6da <_dtoa_r+0xbae>
 800c4ca:	2c00      	cmp	r4, #0
 800c4cc:	dd05      	ble.n	800c4da <_dtoa_r+0x9ae>
 800c4ce:	0039      	movs	r1, r7
 800c4d0:	0022      	movs	r2, r4
 800c4d2:	9803      	ldr	r0, [sp, #12]
 800c4d4:	f000 fc3a 	bl	800cd4c <__lshift>
 800c4d8:	0007      	movs	r7, r0
 800c4da:	9704      	str	r7, [sp, #16]
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	d020      	beq.n	800c522 <_dtoa_r+0x9f6>
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	9803      	ldr	r0, [sp, #12]
 800c4e4:	f000 fa18 	bl	800c918 <_Balloc>
 800c4e8:	1e04      	subs	r4, r0, #0
 800c4ea:	d10c      	bne.n	800c506 <_dtoa_r+0x9da>
 800c4ec:	0022      	movs	r2, r4
 800c4ee:	4b2e      	ldr	r3, [pc, #184]	@ (800c5a8 <_dtoa_r+0xa7c>)
 800c4f0:	482e      	ldr	r0, [pc, #184]	@ (800c5ac <_dtoa_r+0xa80>)
 800c4f2:	492f      	ldr	r1, [pc, #188]	@ (800c5b0 <_dtoa_r+0xa84>)
 800c4f4:	f7ff fb2f 	bl	800bb56 <_dtoa_r+0x2a>
 800c4f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c4fa:	0037      	movs	r7, r6
 800c4fc:	e7ab      	b.n	800c456 <_dtoa_r+0x92a>
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c502:	930c      	str	r3, [sp, #48]	@ 0x30
 800c504:	e7f9      	b.n	800c4fa <_dtoa_r+0x9ce>
 800c506:	0039      	movs	r1, r7
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	310c      	adds	r1, #12
 800c50c:	3202      	adds	r2, #2
 800c50e:	0092      	lsls	r2, r2, #2
 800c510:	300c      	adds	r0, #12
 800c512:	f000 ffd1 	bl	800d4b8 <memcpy>
 800c516:	2201      	movs	r2, #1
 800c518:	0021      	movs	r1, r4
 800c51a:	9803      	ldr	r0, [sp, #12]
 800c51c:	f000 fc16 	bl	800cd4c <__lshift>
 800c520:	9004      	str	r0, [sp, #16]
 800c522:	9b08      	ldr	r3, [sp, #32]
 800c524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c526:	9306      	str	r3, [sp, #24]
 800c528:	3b01      	subs	r3, #1
 800c52a:	189b      	adds	r3, r3, r2
 800c52c:	2201      	movs	r2, #1
 800c52e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	4013      	ands	r3, r2
 800c534:	930e      	str	r3, [sp, #56]	@ 0x38
 800c536:	0031      	movs	r1, r6
 800c538:	9805      	ldr	r0, [sp, #20]
 800c53a:	f7ff fa71 	bl	800ba20 <quorem>
 800c53e:	0039      	movs	r1, r7
 800c540:	0005      	movs	r5, r0
 800c542:	900a      	str	r0, [sp, #40]	@ 0x28
 800c544:	9805      	ldr	r0, [sp, #20]
 800c546:	f000 fc6d 	bl	800ce24 <__mcmp>
 800c54a:	9a04      	ldr	r2, [sp, #16]
 800c54c:	900d      	str	r0, [sp, #52]	@ 0x34
 800c54e:	0031      	movs	r1, r6
 800c550:	9803      	ldr	r0, [sp, #12]
 800c552:	f000 fc83 	bl	800ce5c <__mdiff>
 800c556:	2201      	movs	r2, #1
 800c558:	68c3      	ldr	r3, [r0, #12]
 800c55a:	0004      	movs	r4, r0
 800c55c:	3530      	adds	r5, #48	@ 0x30
 800c55e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c560:	2b00      	cmp	r3, #0
 800c562:	d104      	bne.n	800c56e <_dtoa_r+0xa42>
 800c564:	0001      	movs	r1, r0
 800c566:	9805      	ldr	r0, [sp, #20]
 800c568:	f000 fc5c 	bl	800ce24 <__mcmp>
 800c56c:	9009      	str	r0, [sp, #36]	@ 0x24
 800c56e:	0021      	movs	r1, r4
 800c570:	9803      	ldr	r0, [sp, #12]
 800c572:	f000 fa15 	bl	800c9a0 <_Bfree>
 800c576:	9b06      	ldr	r3, [sp, #24]
 800c578:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c57a:	1c5c      	adds	r4, r3, #1
 800c57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57e:	4313      	orrs	r3, r2
 800c580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c582:	4313      	orrs	r3, r2
 800c584:	d116      	bne.n	800c5b4 <_dtoa_r+0xa88>
 800c586:	2d39      	cmp	r5, #57	@ 0x39
 800c588:	d02f      	beq.n	800c5ea <_dtoa_r+0xabe>
 800c58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dd01      	ble.n	800c594 <_dtoa_r+0xa68>
 800c590:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c592:	3531      	adds	r5, #49	@ 0x31
 800c594:	9b06      	ldr	r3, [sp, #24]
 800c596:	701d      	strb	r5, [r3, #0]
 800c598:	e532      	b.n	800c000 <_dtoa_r+0x4d4>
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	40240000 	.word	0x40240000
 800c5a0:	00000433 	.word	0x00000433
 800c5a4:	7ff00000 	.word	0x7ff00000
 800c5a8:	0800df30 	.word	0x0800df30
 800c5ac:	0800ded8 	.word	0x0800ded8
 800c5b0:	000002ef 	.word	0x000002ef
 800c5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	db04      	blt.n	800c5c4 <_dtoa_r+0xa98>
 800c5ba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	d11e      	bne.n	800c602 <_dtoa_r+0xad6>
 800c5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	dde4      	ble.n	800c594 <_dtoa_r+0xa68>
 800c5ca:	9905      	ldr	r1, [sp, #20]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	9803      	ldr	r0, [sp, #12]
 800c5d0:	f000 fbbc 	bl	800cd4c <__lshift>
 800c5d4:	0031      	movs	r1, r6
 800c5d6:	9005      	str	r0, [sp, #20]
 800c5d8:	f000 fc24 	bl	800ce24 <__mcmp>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	dc02      	bgt.n	800c5e6 <_dtoa_r+0xaba>
 800c5e0:	d1d8      	bne.n	800c594 <_dtoa_r+0xa68>
 800c5e2:	07eb      	lsls	r3, r5, #31
 800c5e4:	d5d6      	bpl.n	800c594 <_dtoa_r+0xa68>
 800c5e6:	2d39      	cmp	r5, #57	@ 0x39
 800c5e8:	d1d2      	bne.n	800c590 <_dtoa_r+0xa64>
 800c5ea:	2339      	movs	r3, #57	@ 0x39
 800c5ec:	9a06      	ldr	r2, [sp, #24]
 800c5ee:	7013      	strb	r3, [r2, #0]
 800c5f0:	0023      	movs	r3, r4
 800c5f2:	001c      	movs	r4, r3
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	781a      	ldrb	r2, [r3, #0]
 800c5f8:	2a39      	cmp	r2, #57	@ 0x39
 800c5fa:	d050      	beq.n	800c69e <_dtoa_r+0xb72>
 800c5fc:	3201      	adds	r2, #1
 800c5fe:	701a      	strb	r2, [r3, #0]
 800c600:	e4fe      	b.n	800c000 <_dtoa_r+0x4d4>
 800c602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd03      	ble.n	800c610 <_dtoa_r+0xae4>
 800c608:	2d39      	cmp	r5, #57	@ 0x39
 800c60a:	d0ee      	beq.n	800c5ea <_dtoa_r+0xabe>
 800c60c:	3501      	adds	r5, #1
 800c60e:	e7c1      	b.n	800c594 <_dtoa_r+0xa68>
 800c610:	9b06      	ldr	r3, [sp, #24]
 800c612:	9a06      	ldr	r2, [sp, #24]
 800c614:	701d      	strb	r5, [r3, #0]
 800c616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c618:	4293      	cmp	r3, r2
 800c61a:	d02b      	beq.n	800c674 <_dtoa_r+0xb48>
 800c61c:	2300      	movs	r3, #0
 800c61e:	220a      	movs	r2, #10
 800c620:	9905      	ldr	r1, [sp, #20]
 800c622:	9803      	ldr	r0, [sp, #12]
 800c624:	f000 f9e0 	bl	800c9e8 <__multadd>
 800c628:	9b04      	ldr	r3, [sp, #16]
 800c62a:	9005      	str	r0, [sp, #20]
 800c62c:	429f      	cmp	r7, r3
 800c62e:	d109      	bne.n	800c644 <_dtoa_r+0xb18>
 800c630:	0039      	movs	r1, r7
 800c632:	2300      	movs	r3, #0
 800c634:	220a      	movs	r2, #10
 800c636:	9803      	ldr	r0, [sp, #12]
 800c638:	f000 f9d6 	bl	800c9e8 <__multadd>
 800c63c:	0007      	movs	r7, r0
 800c63e:	9004      	str	r0, [sp, #16]
 800c640:	9406      	str	r4, [sp, #24]
 800c642:	e778      	b.n	800c536 <_dtoa_r+0xa0a>
 800c644:	0039      	movs	r1, r7
 800c646:	2300      	movs	r3, #0
 800c648:	220a      	movs	r2, #10
 800c64a:	9803      	ldr	r0, [sp, #12]
 800c64c:	f000 f9cc 	bl	800c9e8 <__multadd>
 800c650:	2300      	movs	r3, #0
 800c652:	0007      	movs	r7, r0
 800c654:	220a      	movs	r2, #10
 800c656:	9904      	ldr	r1, [sp, #16]
 800c658:	9803      	ldr	r0, [sp, #12]
 800c65a:	f000 f9c5 	bl	800c9e8 <__multadd>
 800c65e:	9004      	str	r0, [sp, #16]
 800c660:	e7ee      	b.n	800c640 <_dtoa_r+0xb14>
 800c662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c664:	2401      	movs	r4, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	dd00      	ble.n	800c66c <_dtoa_r+0xb40>
 800c66a:	001c      	movs	r4, r3
 800c66c:	9704      	str	r7, [sp, #16]
 800c66e:	2700      	movs	r7, #0
 800c670:	9b08      	ldr	r3, [sp, #32]
 800c672:	191c      	adds	r4, r3, r4
 800c674:	9905      	ldr	r1, [sp, #20]
 800c676:	2201      	movs	r2, #1
 800c678:	9803      	ldr	r0, [sp, #12]
 800c67a:	f000 fb67 	bl	800cd4c <__lshift>
 800c67e:	0031      	movs	r1, r6
 800c680:	9005      	str	r0, [sp, #20]
 800c682:	f000 fbcf 	bl	800ce24 <__mcmp>
 800c686:	2800      	cmp	r0, #0
 800c688:	dcb2      	bgt.n	800c5f0 <_dtoa_r+0xac4>
 800c68a:	d101      	bne.n	800c690 <_dtoa_r+0xb64>
 800c68c:	07ed      	lsls	r5, r5, #31
 800c68e:	d4af      	bmi.n	800c5f0 <_dtoa_r+0xac4>
 800c690:	0023      	movs	r3, r4
 800c692:	001c      	movs	r4, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	781a      	ldrb	r2, [r3, #0]
 800c698:	2a30      	cmp	r2, #48	@ 0x30
 800c69a:	d0fa      	beq.n	800c692 <_dtoa_r+0xb66>
 800c69c:	e4b0      	b.n	800c000 <_dtoa_r+0x4d4>
 800c69e:	9a08      	ldr	r2, [sp, #32]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d1a6      	bne.n	800c5f2 <_dtoa_r+0xac6>
 800c6a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6aa:	2331      	movs	r3, #49	@ 0x31
 800c6ac:	7013      	strb	r3, [r2, #0]
 800c6ae:	e4a7      	b.n	800c000 <_dtoa_r+0x4d4>
 800c6b0:	4b14      	ldr	r3, [pc, #80]	@ (800c704 <_dtoa_r+0xbd8>)
 800c6b2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c6b4:	9308      	str	r3, [sp, #32]
 800c6b6:	4b14      	ldr	r3, [pc, #80]	@ (800c708 <_dtoa_r+0xbdc>)
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	d001      	beq.n	800c6c0 <_dtoa_r+0xb94>
 800c6bc:	f7ff fa7e 	bl	800bbbc <_dtoa_r+0x90>
 800c6c0:	f7ff fa7e 	bl	800bbc0 <_dtoa_r+0x94>
 800c6c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	dc00      	bgt.n	800c6cc <_dtoa_r+0xba0>
 800c6ca:	e648      	b.n	800c35e <_dtoa_r+0x832>
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c6d0:	e665      	b.n	800c39e <_dtoa_r+0x872>
 800c6d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dc00      	bgt.n	800c6da <_dtoa_r+0xbae>
 800c6d8:	e6a9      	b.n	800c42e <_dtoa_r+0x902>
 800c6da:	2400      	movs	r4, #0
 800c6dc:	0031      	movs	r1, r6
 800c6de:	9805      	ldr	r0, [sp, #20]
 800c6e0:	f7ff f99e 	bl	800ba20 <quorem>
 800c6e4:	9b08      	ldr	r3, [sp, #32]
 800c6e6:	3030      	adds	r0, #48	@ 0x30
 800c6e8:	5518      	strb	r0, [r3, r4]
 800c6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ec:	3401      	adds	r4, #1
 800c6ee:	0005      	movs	r5, r0
 800c6f0:	42a3      	cmp	r3, r4
 800c6f2:	ddb6      	ble.n	800c662 <_dtoa_r+0xb36>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	220a      	movs	r2, #10
 800c6f8:	9905      	ldr	r1, [sp, #20]
 800c6fa:	9803      	ldr	r0, [sp, #12]
 800c6fc:	f000 f974 	bl	800c9e8 <__multadd>
 800c700:	9005      	str	r0, [sp, #20]
 800c702:	e7eb      	b.n	800c6dc <_dtoa_r+0xbb0>
 800c704:	0800deb4 	.word	0x0800deb4
 800c708:	0800debc 	.word	0x0800debc

0800c70c <_free_r>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	0005      	movs	r5, r0
 800c710:	1e0c      	subs	r4, r1, #0
 800c712:	d010      	beq.n	800c736 <_free_r+0x2a>
 800c714:	3c04      	subs	r4, #4
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	da00      	bge.n	800c71e <_free_r+0x12>
 800c71c:	18e4      	adds	r4, r4, r3
 800c71e:	0028      	movs	r0, r5
 800c720:	f000 f8ea 	bl	800c8f8 <__malloc_lock>
 800c724:	4a1d      	ldr	r2, [pc, #116]	@ (800c79c <_free_r+0x90>)
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d105      	bne.n	800c738 <_free_r+0x2c>
 800c72c:	6063      	str	r3, [r4, #4]
 800c72e:	6014      	str	r4, [r2, #0]
 800c730:	0028      	movs	r0, r5
 800c732:	f000 f8e9 	bl	800c908 <__malloc_unlock>
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	42a3      	cmp	r3, r4
 800c73a:	d908      	bls.n	800c74e <_free_r+0x42>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	1821      	adds	r1, r4, r0
 800c740:	428b      	cmp	r3, r1
 800c742:	d1f3      	bne.n	800c72c <_free_r+0x20>
 800c744:	6819      	ldr	r1, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	1809      	adds	r1, r1, r0
 800c74a:	6021      	str	r1, [r4, #0]
 800c74c:	e7ee      	b.n	800c72c <_free_r+0x20>
 800c74e:	001a      	movs	r2, r3
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <_free_r+0x4e>
 800c756:	42a3      	cmp	r3, r4
 800c758:	d9f9      	bls.n	800c74e <_free_r+0x42>
 800c75a:	6811      	ldr	r1, [r2, #0]
 800c75c:	1850      	adds	r0, r2, r1
 800c75e:	42a0      	cmp	r0, r4
 800c760:	d10b      	bne.n	800c77a <_free_r+0x6e>
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	1809      	adds	r1, r1, r0
 800c766:	1850      	adds	r0, r2, r1
 800c768:	6011      	str	r1, [r2, #0]
 800c76a:	4283      	cmp	r3, r0
 800c76c:	d1e0      	bne.n	800c730 <_free_r+0x24>
 800c76e:	6818      	ldr	r0, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	1841      	adds	r1, r0, r1
 800c774:	6011      	str	r1, [r2, #0]
 800c776:	6053      	str	r3, [r2, #4]
 800c778:	e7da      	b.n	800c730 <_free_r+0x24>
 800c77a:	42a0      	cmp	r0, r4
 800c77c:	d902      	bls.n	800c784 <_free_r+0x78>
 800c77e:	230c      	movs	r3, #12
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	e7d5      	b.n	800c730 <_free_r+0x24>
 800c784:	6820      	ldr	r0, [r4, #0]
 800c786:	1821      	adds	r1, r4, r0
 800c788:	428b      	cmp	r3, r1
 800c78a:	d103      	bne.n	800c794 <_free_r+0x88>
 800c78c:	6819      	ldr	r1, [r3, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	1809      	adds	r1, r1, r0
 800c792:	6021      	str	r1, [r4, #0]
 800c794:	6063      	str	r3, [r4, #4]
 800c796:	6054      	str	r4, [r2, #4]
 800c798:	e7ca      	b.n	800c730 <_free_r+0x24>
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	200006e4 	.word	0x200006e4

0800c7a0 <malloc>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	4b03      	ldr	r3, [pc, #12]	@ (800c7b0 <malloc+0x10>)
 800c7a4:	0001      	movs	r1, r0
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	f000 f826 	bl	800c7f8 <_malloc_r>
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	46c0      	nop			@ (mov r8, r8)
 800c7b0:	20000028 	.word	0x20000028

0800c7b4 <sbrk_aligned>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c7f4 <sbrk_aligned+0x40>)
 800c7b8:	000d      	movs	r5, r1
 800c7ba:	6831      	ldr	r1, [r6, #0]
 800c7bc:	0004      	movs	r4, r0
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d102      	bne.n	800c7c8 <sbrk_aligned+0x14>
 800c7c2:	f000 fe67 	bl	800d494 <_sbrk_r>
 800c7c6:	6030      	str	r0, [r6, #0]
 800c7c8:	0029      	movs	r1, r5
 800c7ca:	0020      	movs	r0, r4
 800c7cc:	f000 fe62 	bl	800d494 <_sbrk_r>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d103      	bne.n	800c7dc <sbrk_aligned+0x28>
 800c7d4:	2501      	movs	r5, #1
 800c7d6:	426d      	negs	r5, r5
 800c7d8:	0028      	movs	r0, r5
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	2303      	movs	r3, #3
 800c7de:	1cc5      	adds	r5, r0, #3
 800c7e0:	439d      	bics	r5, r3
 800c7e2:	42a8      	cmp	r0, r5
 800c7e4:	d0f8      	beq.n	800c7d8 <sbrk_aligned+0x24>
 800c7e6:	1a29      	subs	r1, r5, r0
 800c7e8:	0020      	movs	r0, r4
 800c7ea:	f000 fe53 	bl	800d494 <_sbrk_r>
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d1f2      	bne.n	800c7d8 <sbrk_aligned+0x24>
 800c7f2:	e7ef      	b.n	800c7d4 <sbrk_aligned+0x20>
 800c7f4:	200006e0 	.word	0x200006e0

0800c7f8 <_malloc_r>:
 800c7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	1ccb      	adds	r3, r1, #3
 800c7fe:	4393      	bics	r3, r2
 800c800:	3308      	adds	r3, #8
 800c802:	0005      	movs	r5, r0
 800c804:	001f      	movs	r7, r3
 800c806:	2b0c      	cmp	r3, #12
 800c808:	d234      	bcs.n	800c874 <_malloc_r+0x7c>
 800c80a:	270c      	movs	r7, #12
 800c80c:	42b9      	cmp	r1, r7
 800c80e:	d833      	bhi.n	800c878 <_malloc_r+0x80>
 800c810:	0028      	movs	r0, r5
 800c812:	f000 f871 	bl	800c8f8 <__malloc_lock>
 800c816:	4e37      	ldr	r6, [pc, #220]	@ (800c8f4 <_malloc_r+0xfc>)
 800c818:	6833      	ldr	r3, [r6, #0]
 800c81a:	001c      	movs	r4, r3
 800c81c:	2c00      	cmp	r4, #0
 800c81e:	d12f      	bne.n	800c880 <_malloc_r+0x88>
 800c820:	0039      	movs	r1, r7
 800c822:	0028      	movs	r0, r5
 800c824:	f7ff ffc6 	bl	800c7b4 <sbrk_aligned>
 800c828:	0004      	movs	r4, r0
 800c82a:	1c43      	adds	r3, r0, #1
 800c82c:	d15f      	bne.n	800c8ee <_malloc_r+0xf6>
 800c82e:	6834      	ldr	r4, [r6, #0]
 800c830:	9400      	str	r4, [sp, #0]
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d14a      	bne.n	800c8ce <_malloc_r+0xd6>
 800c838:	2c00      	cmp	r4, #0
 800c83a:	d052      	beq.n	800c8e2 <_malloc_r+0xea>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	0028      	movs	r0, r5
 800c840:	18e3      	adds	r3, r4, r3
 800c842:	9900      	ldr	r1, [sp, #0]
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	f000 fe25 	bl	800d494 <_sbrk_r>
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	4283      	cmp	r3, r0
 800c84e:	d148      	bne.n	800c8e2 <_malloc_r+0xea>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	0028      	movs	r0, r5
 800c854:	1aff      	subs	r7, r7, r3
 800c856:	0039      	movs	r1, r7
 800c858:	f7ff ffac 	bl	800c7b4 <sbrk_aligned>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d040      	beq.n	800c8e2 <_malloc_r+0xea>
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	19db      	adds	r3, r3, r7
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	6833      	ldr	r3, [r6, #0]
 800c868:	685a      	ldr	r2, [r3, #4]
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	d133      	bne.n	800c8d6 <_malloc_r+0xde>
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	6033      	str	r3, [r6, #0]
 800c872:	e019      	b.n	800c8a8 <_malloc_r+0xb0>
 800c874:	2b00      	cmp	r3, #0
 800c876:	dac9      	bge.n	800c80c <_malloc_r+0x14>
 800c878:	230c      	movs	r3, #12
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	2000      	movs	r0, #0
 800c87e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c880:	6821      	ldr	r1, [r4, #0]
 800c882:	1bc9      	subs	r1, r1, r7
 800c884:	d420      	bmi.n	800c8c8 <_malloc_r+0xd0>
 800c886:	290b      	cmp	r1, #11
 800c888:	d90a      	bls.n	800c8a0 <_malloc_r+0xa8>
 800c88a:	19e2      	adds	r2, r4, r7
 800c88c:	6027      	str	r7, [r4, #0]
 800c88e:	42a3      	cmp	r3, r4
 800c890:	d104      	bne.n	800c89c <_malloc_r+0xa4>
 800c892:	6032      	str	r2, [r6, #0]
 800c894:	6863      	ldr	r3, [r4, #4]
 800c896:	6011      	str	r1, [r2, #0]
 800c898:	6053      	str	r3, [r2, #4]
 800c89a:	e005      	b.n	800c8a8 <_malloc_r+0xb0>
 800c89c:	605a      	str	r2, [r3, #4]
 800c89e:	e7f9      	b.n	800c894 <_malloc_r+0x9c>
 800c8a0:	6862      	ldr	r2, [r4, #4]
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	d10e      	bne.n	800c8c4 <_malloc_r+0xcc>
 800c8a6:	6032      	str	r2, [r6, #0]
 800c8a8:	0028      	movs	r0, r5
 800c8aa:	f000 f82d 	bl	800c908 <__malloc_unlock>
 800c8ae:	0020      	movs	r0, r4
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	300b      	adds	r0, #11
 800c8b4:	1d23      	adds	r3, r4, #4
 800c8b6:	4390      	bics	r0, r2
 800c8b8:	1ac2      	subs	r2, r0, r3
 800c8ba:	4298      	cmp	r0, r3
 800c8bc:	d0df      	beq.n	800c87e <_malloc_r+0x86>
 800c8be:	1a1b      	subs	r3, r3, r0
 800c8c0:	50a3      	str	r3, [r4, r2]
 800c8c2:	e7dc      	b.n	800c87e <_malloc_r+0x86>
 800c8c4:	605a      	str	r2, [r3, #4]
 800c8c6:	e7ef      	b.n	800c8a8 <_malloc_r+0xb0>
 800c8c8:	0023      	movs	r3, r4
 800c8ca:	6864      	ldr	r4, [r4, #4]
 800c8cc:	e7a6      	b.n	800c81c <_malloc_r+0x24>
 800c8ce:	9c00      	ldr	r4, [sp, #0]
 800c8d0:	6863      	ldr	r3, [r4, #4]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	e7ad      	b.n	800c832 <_malloc_r+0x3a>
 800c8d6:	001a      	movs	r2, r3
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	42a3      	cmp	r3, r4
 800c8dc:	d1fb      	bne.n	800c8d6 <_malloc_r+0xde>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e7da      	b.n	800c898 <_malloc_r+0xa0>
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	0028      	movs	r0, r5
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	f000 f80e 	bl	800c908 <__malloc_unlock>
 800c8ec:	e7c6      	b.n	800c87c <_malloc_r+0x84>
 800c8ee:	6007      	str	r7, [r0, #0]
 800c8f0:	e7da      	b.n	800c8a8 <_malloc_r+0xb0>
 800c8f2:	46c0      	nop			@ (mov r8, r8)
 800c8f4:	200006e4 	.word	0x200006e4

0800c8f8 <__malloc_lock>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	4802      	ldr	r0, [pc, #8]	@ (800c904 <__malloc_lock+0xc>)
 800c8fc:	f7ff f87b 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800c900:	bd10      	pop	{r4, pc}
 800c902:	46c0      	nop			@ (mov r8, r8)
 800c904:	200006dc 	.word	0x200006dc

0800c908 <__malloc_unlock>:
 800c908:	b510      	push	{r4, lr}
 800c90a:	4802      	ldr	r0, [pc, #8]	@ (800c914 <__malloc_unlock+0xc>)
 800c90c:	f7ff f874 	bl	800b9f8 <__retarget_lock_release_recursive>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	200006dc 	.word	0x200006dc

0800c918 <_Balloc>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	69c5      	ldr	r5, [r0, #28]
 800c91c:	0006      	movs	r6, r0
 800c91e:	000c      	movs	r4, r1
 800c920:	2d00      	cmp	r5, #0
 800c922:	d10e      	bne.n	800c942 <_Balloc+0x2a>
 800c924:	2010      	movs	r0, #16
 800c926:	f7ff ff3b 	bl	800c7a0 <malloc>
 800c92a:	1e02      	subs	r2, r0, #0
 800c92c:	61f0      	str	r0, [r6, #28]
 800c92e:	d104      	bne.n	800c93a <_Balloc+0x22>
 800c930:	216b      	movs	r1, #107	@ 0x6b
 800c932:	4b19      	ldr	r3, [pc, #100]	@ (800c998 <_Balloc+0x80>)
 800c934:	4819      	ldr	r0, [pc, #100]	@ (800c99c <_Balloc+0x84>)
 800c936:	f000 fdc9 	bl	800d4cc <__assert_func>
 800c93a:	6045      	str	r5, [r0, #4]
 800c93c:	6085      	str	r5, [r0, #8]
 800c93e:	6005      	str	r5, [r0, #0]
 800c940:	60c5      	str	r5, [r0, #12]
 800c942:	69f5      	ldr	r5, [r6, #28]
 800c944:	68eb      	ldr	r3, [r5, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d013      	beq.n	800c972 <_Balloc+0x5a>
 800c94a:	69f3      	ldr	r3, [r6, #28]
 800c94c:	00a2      	lsls	r2, r4, #2
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	189b      	adds	r3, r3, r2
 800c952:	6818      	ldr	r0, [r3, #0]
 800c954:	2800      	cmp	r0, #0
 800c956:	d118      	bne.n	800c98a <_Balloc+0x72>
 800c958:	2101      	movs	r1, #1
 800c95a:	000d      	movs	r5, r1
 800c95c:	40a5      	lsls	r5, r4
 800c95e:	1d6a      	adds	r2, r5, #5
 800c960:	0030      	movs	r0, r6
 800c962:	0092      	lsls	r2, r2, #2
 800c964:	f000 fdd0 	bl	800d508 <_calloc_r>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d00c      	beq.n	800c986 <_Balloc+0x6e>
 800c96c:	6044      	str	r4, [r0, #4]
 800c96e:	6085      	str	r5, [r0, #8]
 800c970:	e00d      	b.n	800c98e <_Balloc+0x76>
 800c972:	2221      	movs	r2, #33	@ 0x21
 800c974:	2104      	movs	r1, #4
 800c976:	0030      	movs	r0, r6
 800c978:	f000 fdc6 	bl	800d508 <_calloc_r>
 800c97c:	69f3      	ldr	r3, [r6, #28]
 800c97e:	60e8      	str	r0, [r5, #12]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e1      	bne.n	800c94a <_Balloc+0x32>
 800c986:	2000      	movs	r0, #0
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	6802      	ldr	r2, [r0, #0]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	2300      	movs	r3, #0
 800c990:	6103      	str	r3, [r0, #16]
 800c992:	60c3      	str	r3, [r0, #12]
 800c994:	e7f8      	b.n	800c988 <_Balloc+0x70>
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	0800dec1 	.word	0x0800dec1
 800c99c:	0800df41 	.word	0x0800df41

0800c9a0 <_Bfree>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	69c6      	ldr	r6, [r0, #28]
 800c9a4:	0005      	movs	r5, r0
 800c9a6:	000c      	movs	r4, r1
 800c9a8:	2e00      	cmp	r6, #0
 800c9aa:	d10e      	bne.n	800c9ca <_Bfree+0x2a>
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	f7ff fef7 	bl	800c7a0 <malloc>
 800c9b2:	1e02      	subs	r2, r0, #0
 800c9b4:	61e8      	str	r0, [r5, #28]
 800c9b6:	d104      	bne.n	800c9c2 <_Bfree+0x22>
 800c9b8:	218f      	movs	r1, #143	@ 0x8f
 800c9ba:	4b09      	ldr	r3, [pc, #36]	@ (800c9e0 <_Bfree+0x40>)
 800c9bc:	4809      	ldr	r0, [pc, #36]	@ (800c9e4 <_Bfree+0x44>)
 800c9be:	f000 fd85 	bl	800d4cc <__assert_func>
 800c9c2:	6046      	str	r6, [r0, #4]
 800c9c4:	6086      	str	r6, [r0, #8]
 800c9c6:	6006      	str	r6, [r0, #0]
 800c9c8:	60c6      	str	r6, [r0, #12]
 800c9ca:	2c00      	cmp	r4, #0
 800c9cc:	d007      	beq.n	800c9de <_Bfree+0x3e>
 800c9ce:	69eb      	ldr	r3, [r5, #28]
 800c9d0:	6862      	ldr	r2, [r4, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	0092      	lsls	r2, r2, #2
 800c9d6:	189b      	adds	r3, r3, r2
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	6022      	str	r2, [r4, #0]
 800c9dc:	601c      	str	r4, [r3, #0]
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	0800dec1 	.word	0x0800dec1
 800c9e4:	0800df41 	.word	0x0800df41

0800c9e8 <__multadd>:
 800c9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ea:	000f      	movs	r7, r1
 800c9ec:	9001      	str	r0, [sp, #4]
 800c9ee:	000c      	movs	r4, r1
 800c9f0:	001e      	movs	r6, r3
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	690d      	ldr	r5, [r1, #16]
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	b299      	uxth	r1, r3
 800c9fe:	4351      	muls	r1, r2
 800ca00:	0c1b      	lsrs	r3, r3, #16
 800ca02:	4353      	muls	r3, r2
 800ca04:	1989      	adds	r1, r1, r6
 800ca06:	0c0e      	lsrs	r6, r1, #16
 800ca08:	199b      	adds	r3, r3, r6
 800ca0a:	0c1e      	lsrs	r6, r3, #16
 800ca0c:	b289      	uxth	r1, r1
 800ca0e:	041b      	lsls	r3, r3, #16
 800ca10:	185b      	adds	r3, r3, r1
 800ca12:	c708      	stmia	r7!, {r3}
 800ca14:	4285      	cmp	r5, r0
 800ca16:	dcef      	bgt.n	800c9f8 <__multadd+0x10>
 800ca18:	2e00      	cmp	r6, #0
 800ca1a:	d022      	beq.n	800ca62 <__multadd+0x7a>
 800ca1c:	68a3      	ldr	r3, [r4, #8]
 800ca1e:	42ab      	cmp	r3, r5
 800ca20:	dc19      	bgt.n	800ca56 <__multadd+0x6e>
 800ca22:	6861      	ldr	r1, [r4, #4]
 800ca24:	9801      	ldr	r0, [sp, #4]
 800ca26:	3101      	adds	r1, #1
 800ca28:	f7ff ff76 	bl	800c918 <_Balloc>
 800ca2c:	1e07      	subs	r7, r0, #0
 800ca2e:	d105      	bne.n	800ca3c <__multadd+0x54>
 800ca30:	003a      	movs	r2, r7
 800ca32:	21ba      	movs	r1, #186	@ 0xba
 800ca34:	4b0c      	ldr	r3, [pc, #48]	@ (800ca68 <__multadd+0x80>)
 800ca36:	480d      	ldr	r0, [pc, #52]	@ (800ca6c <__multadd+0x84>)
 800ca38:	f000 fd48 	bl	800d4cc <__assert_func>
 800ca3c:	0021      	movs	r1, r4
 800ca3e:	6922      	ldr	r2, [r4, #16]
 800ca40:	310c      	adds	r1, #12
 800ca42:	3202      	adds	r2, #2
 800ca44:	0092      	lsls	r2, r2, #2
 800ca46:	300c      	adds	r0, #12
 800ca48:	f000 fd36 	bl	800d4b8 <memcpy>
 800ca4c:	0021      	movs	r1, r4
 800ca4e:	9801      	ldr	r0, [sp, #4]
 800ca50:	f7ff ffa6 	bl	800c9a0 <_Bfree>
 800ca54:	003c      	movs	r4, r7
 800ca56:	1d2b      	adds	r3, r5, #4
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	18e3      	adds	r3, r4, r3
 800ca5c:	3501      	adds	r5, #1
 800ca5e:	605e      	str	r6, [r3, #4]
 800ca60:	6125      	str	r5, [r4, #16]
 800ca62:	0020      	movs	r0, r4
 800ca64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca66:	46c0      	nop			@ (mov r8, r8)
 800ca68:	0800df30 	.word	0x0800df30
 800ca6c:	0800df41 	.word	0x0800df41

0800ca70 <__hi0bits>:
 800ca70:	2280      	movs	r2, #128	@ 0x80
 800ca72:	0003      	movs	r3, r0
 800ca74:	0252      	lsls	r2, r2, #9
 800ca76:	2000      	movs	r0, #0
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d201      	bcs.n	800ca80 <__hi0bits+0x10>
 800ca7c:	041b      	lsls	r3, r3, #16
 800ca7e:	3010      	adds	r0, #16
 800ca80:	2280      	movs	r2, #128	@ 0x80
 800ca82:	0452      	lsls	r2, r2, #17
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d201      	bcs.n	800ca8c <__hi0bits+0x1c>
 800ca88:	3008      	adds	r0, #8
 800ca8a:	021b      	lsls	r3, r3, #8
 800ca8c:	2280      	movs	r2, #128	@ 0x80
 800ca8e:	0552      	lsls	r2, r2, #21
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d201      	bcs.n	800ca98 <__hi0bits+0x28>
 800ca94:	3004      	adds	r0, #4
 800ca96:	011b      	lsls	r3, r3, #4
 800ca98:	2280      	movs	r2, #128	@ 0x80
 800ca9a:	05d2      	lsls	r2, r2, #23
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d201      	bcs.n	800caa4 <__hi0bits+0x34>
 800caa0:	3002      	adds	r0, #2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	db03      	blt.n	800cab0 <__hi0bits+0x40>
 800caa8:	3001      	adds	r0, #1
 800caaa:	4213      	tst	r3, r2
 800caac:	d100      	bne.n	800cab0 <__hi0bits+0x40>
 800caae:	2020      	movs	r0, #32
 800cab0:	4770      	bx	lr

0800cab2 <__lo0bits>:
 800cab2:	6803      	ldr	r3, [r0, #0]
 800cab4:	0001      	movs	r1, r0
 800cab6:	2207      	movs	r2, #7
 800cab8:	0018      	movs	r0, r3
 800caba:	4010      	ands	r0, r2
 800cabc:	4213      	tst	r3, r2
 800cabe:	d00d      	beq.n	800cadc <__lo0bits+0x2a>
 800cac0:	3a06      	subs	r2, #6
 800cac2:	2000      	movs	r0, #0
 800cac4:	4213      	tst	r3, r2
 800cac6:	d105      	bne.n	800cad4 <__lo0bits+0x22>
 800cac8:	3002      	adds	r0, #2
 800caca:	4203      	tst	r3, r0
 800cacc:	d003      	beq.n	800cad6 <__lo0bits+0x24>
 800cace:	40d3      	lsrs	r3, r2
 800cad0:	0010      	movs	r0, r2
 800cad2:	600b      	str	r3, [r1, #0]
 800cad4:	4770      	bx	lr
 800cad6:	089b      	lsrs	r3, r3, #2
 800cad8:	600b      	str	r3, [r1, #0]
 800cada:	e7fb      	b.n	800cad4 <__lo0bits+0x22>
 800cadc:	b29a      	uxth	r2, r3
 800cade:	2a00      	cmp	r2, #0
 800cae0:	d101      	bne.n	800cae6 <__lo0bits+0x34>
 800cae2:	2010      	movs	r0, #16
 800cae4:	0c1b      	lsrs	r3, r3, #16
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	2a00      	cmp	r2, #0
 800caea:	d101      	bne.n	800caf0 <__lo0bits+0x3e>
 800caec:	3008      	adds	r0, #8
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	071a      	lsls	r2, r3, #28
 800caf2:	d101      	bne.n	800caf8 <__lo0bits+0x46>
 800caf4:	3004      	adds	r0, #4
 800caf6:	091b      	lsrs	r3, r3, #4
 800caf8:	079a      	lsls	r2, r3, #30
 800cafa:	d101      	bne.n	800cb00 <__lo0bits+0x4e>
 800cafc:	3002      	adds	r0, #2
 800cafe:	089b      	lsrs	r3, r3, #2
 800cb00:	07da      	lsls	r2, r3, #31
 800cb02:	d4e9      	bmi.n	800cad8 <__lo0bits+0x26>
 800cb04:	3001      	adds	r0, #1
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	d1e6      	bne.n	800cad8 <__lo0bits+0x26>
 800cb0a:	2020      	movs	r0, #32
 800cb0c:	e7e2      	b.n	800cad4 <__lo0bits+0x22>
	...

0800cb10 <__i2b>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	000c      	movs	r4, r1
 800cb14:	2101      	movs	r1, #1
 800cb16:	f7ff feff 	bl	800c918 <_Balloc>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d107      	bne.n	800cb2e <__i2b+0x1e>
 800cb1e:	2146      	movs	r1, #70	@ 0x46
 800cb20:	4c05      	ldr	r4, [pc, #20]	@ (800cb38 <__i2b+0x28>)
 800cb22:	0002      	movs	r2, r0
 800cb24:	4b05      	ldr	r3, [pc, #20]	@ (800cb3c <__i2b+0x2c>)
 800cb26:	0020      	movs	r0, r4
 800cb28:	31ff      	adds	r1, #255	@ 0xff
 800cb2a:	f000 fccf 	bl	800d4cc <__assert_func>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	6144      	str	r4, [r0, #20]
 800cb32:	6103      	str	r3, [r0, #16]
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	46c0      	nop			@ (mov r8, r8)
 800cb38:	0800df41 	.word	0x0800df41
 800cb3c:	0800df30 	.word	0x0800df30

0800cb40 <__multiply>:
 800cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb42:	0014      	movs	r4, r2
 800cb44:	690a      	ldr	r2, [r1, #16]
 800cb46:	6923      	ldr	r3, [r4, #16]
 800cb48:	000d      	movs	r5, r1
 800cb4a:	b089      	sub	sp, #36	@ 0x24
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	db02      	blt.n	800cb56 <__multiply+0x16>
 800cb50:	0023      	movs	r3, r4
 800cb52:	000c      	movs	r4, r1
 800cb54:	001d      	movs	r5, r3
 800cb56:	6927      	ldr	r7, [r4, #16]
 800cb58:	692e      	ldr	r6, [r5, #16]
 800cb5a:	6861      	ldr	r1, [r4, #4]
 800cb5c:	19bb      	adds	r3, r7, r6
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	68a3      	ldr	r3, [r4, #8]
 800cb62:	19ba      	adds	r2, r7, r6
 800cb64:	4293      	cmp	r3, r2
 800cb66:	da00      	bge.n	800cb6a <__multiply+0x2a>
 800cb68:	3101      	adds	r1, #1
 800cb6a:	f7ff fed5 	bl	800c918 <_Balloc>
 800cb6e:	4684      	mov	ip, r0
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d106      	bne.n	800cb82 <__multiply+0x42>
 800cb74:	21b1      	movs	r1, #177	@ 0xb1
 800cb76:	4662      	mov	r2, ip
 800cb78:	4b44      	ldr	r3, [pc, #272]	@ (800cc8c <__multiply+0x14c>)
 800cb7a:	4845      	ldr	r0, [pc, #276]	@ (800cc90 <__multiply+0x150>)
 800cb7c:	0049      	lsls	r1, r1, #1
 800cb7e:	f000 fca5 	bl	800d4cc <__assert_func>
 800cb82:	0002      	movs	r2, r0
 800cb84:	19bb      	adds	r3, r7, r6
 800cb86:	3214      	adds	r2, #20
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	18d3      	adds	r3, r2, r3
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	2100      	movs	r1, #0
 800cb90:	0013      	movs	r3, r2
 800cb92:	9801      	ldr	r0, [sp, #4]
 800cb94:	4283      	cmp	r3, r0
 800cb96:	d328      	bcc.n	800cbea <__multiply+0xaa>
 800cb98:	0023      	movs	r3, r4
 800cb9a:	00bf      	lsls	r7, r7, #2
 800cb9c:	3314      	adds	r3, #20
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	3514      	adds	r5, #20
 800cba2:	19db      	adds	r3, r3, r7
 800cba4:	00b6      	lsls	r6, r6, #2
 800cba6:	9302      	str	r3, [sp, #8]
 800cba8:	19ab      	adds	r3, r5, r6
 800cbaa:	9307      	str	r3, [sp, #28]
 800cbac:	2304      	movs	r3, #4
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	0023      	movs	r3, r4
 800cbb2:	9902      	ldr	r1, [sp, #8]
 800cbb4:	3315      	adds	r3, #21
 800cbb6:	4299      	cmp	r1, r3
 800cbb8:	d305      	bcc.n	800cbc6 <__multiply+0x86>
 800cbba:	1b0c      	subs	r4, r1, r4
 800cbbc:	3c15      	subs	r4, #21
 800cbbe:	08a4      	lsrs	r4, r4, #2
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	00a3      	lsls	r3, r4, #2
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	9b07      	ldr	r3, [sp, #28]
 800cbc8:	429d      	cmp	r5, r3
 800cbca:	d310      	bcc.n	800cbee <__multiply+0xae>
 800cbcc:	9b00      	ldr	r3, [sp, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	dd05      	ble.n	800cbde <__multiply+0x9e>
 800cbd2:	9b01      	ldr	r3, [sp, #4]
 800cbd4:	3b04      	subs	r3, #4
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d052      	beq.n	800cc84 <__multiply+0x144>
 800cbde:	4663      	mov	r3, ip
 800cbe0:	4660      	mov	r0, ip
 800cbe2:	9a00      	ldr	r2, [sp, #0]
 800cbe4:	611a      	str	r2, [r3, #16]
 800cbe6:	b009      	add	sp, #36	@ 0x24
 800cbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbea:	c302      	stmia	r3!, {r1}
 800cbec:	e7d1      	b.n	800cb92 <__multiply+0x52>
 800cbee:	682c      	ldr	r4, [r5, #0]
 800cbf0:	b2a4      	uxth	r4, r4
 800cbf2:	2c00      	cmp	r4, #0
 800cbf4:	d01f      	beq.n	800cc36 <__multiply+0xf6>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	0017      	movs	r7, r2
 800cbfa:	9e04      	ldr	r6, [sp, #16]
 800cbfc:	9303      	str	r3, [sp, #12]
 800cbfe:	ce08      	ldmia	r6!, {r3}
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	9306      	str	r3, [sp, #24]
 800cc04:	466b      	mov	r3, sp
 800cc06:	8b1b      	ldrh	r3, [r3, #24]
 800cc08:	b288      	uxth	r0, r1
 800cc0a:	4363      	muls	r3, r4
 800cc0c:	181b      	adds	r3, r3, r0
 800cc0e:	9803      	ldr	r0, [sp, #12]
 800cc10:	0c09      	lsrs	r1, r1, #16
 800cc12:	181b      	adds	r3, r3, r0
 800cc14:	9806      	ldr	r0, [sp, #24]
 800cc16:	0c00      	lsrs	r0, r0, #16
 800cc18:	4360      	muls	r0, r4
 800cc1a:	1840      	adds	r0, r0, r1
 800cc1c:	0c19      	lsrs	r1, r3, #16
 800cc1e:	1841      	adds	r1, r0, r1
 800cc20:	0c08      	lsrs	r0, r1, #16
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	0409      	lsls	r1, r1, #16
 800cc26:	4319      	orrs	r1, r3
 800cc28:	9b02      	ldr	r3, [sp, #8]
 800cc2a:	9003      	str	r0, [sp, #12]
 800cc2c:	c702      	stmia	r7!, {r1}
 800cc2e:	42b3      	cmp	r3, r6
 800cc30:	d8e5      	bhi.n	800cbfe <__multiply+0xbe>
 800cc32:	9b05      	ldr	r3, [sp, #20]
 800cc34:	50d0      	str	r0, [r2, r3]
 800cc36:	682c      	ldr	r4, [r5, #0]
 800cc38:	0c24      	lsrs	r4, r4, #16
 800cc3a:	d020      	beq.n	800cc7e <__multiply+0x13e>
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	0010      	movs	r0, r2
 800cc40:	6813      	ldr	r3, [r2, #0]
 800cc42:	9e04      	ldr	r6, [sp, #16]
 800cc44:	9103      	str	r1, [sp, #12]
 800cc46:	6831      	ldr	r1, [r6, #0]
 800cc48:	6807      	ldr	r7, [r0, #0]
 800cc4a:	b289      	uxth	r1, r1
 800cc4c:	4361      	muls	r1, r4
 800cc4e:	0c3f      	lsrs	r7, r7, #16
 800cc50:	19c9      	adds	r1, r1, r7
 800cc52:	9f03      	ldr	r7, [sp, #12]
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	19c9      	adds	r1, r1, r7
 800cc58:	040f      	lsls	r7, r1, #16
 800cc5a:	431f      	orrs	r7, r3
 800cc5c:	6007      	str	r7, [r0, #0]
 800cc5e:	ce80      	ldmia	r6!, {r7}
 800cc60:	6843      	ldr	r3, [r0, #4]
 800cc62:	0c3f      	lsrs	r7, r7, #16
 800cc64:	4367      	muls	r7, r4
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	0c09      	lsrs	r1, r1, #16
 800cc6a:	18fb      	adds	r3, r7, r3
 800cc6c:	185b      	adds	r3, r3, r1
 800cc6e:	0c19      	lsrs	r1, r3, #16
 800cc70:	9103      	str	r1, [sp, #12]
 800cc72:	9902      	ldr	r1, [sp, #8]
 800cc74:	3004      	adds	r0, #4
 800cc76:	42b1      	cmp	r1, r6
 800cc78:	d8e5      	bhi.n	800cc46 <__multiply+0x106>
 800cc7a:	9905      	ldr	r1, [sp, #20]
 800cc7c:	5053      	str	r3, [r2, r1]
 800cc7e:	3504      	adds	r5, #4
 800cc80:	3204      	adds	r2, #4
 800cc82:	e7a0      	b.n	800cbc6 <__multiply+0x86>
 800cc84:	9b00      	ldr	r3, [sp, #0]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	e79f      	b.n	800cbcc <__multiply+0x8c>
 800cc8c:	0800df30 	.word	0x0800df30
 800cc90:	0800df41 	.word	0x0800df41

0800cc94 <__pow5mult>:
 800cc94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc96:	2303      	movs	r3, #3
 800cc98:	0015      	movs	r5, r2
 800cc9a:	0007      	movs	r7, r0
 800cc9c:	000e      	movs	r6, r1
 800cc9e:	401a      	ands	r2, r3
 800cca0:	421d      	tst	r5, r3
 800cca2:	d008      	beq.n	800ccb6 <__pow5mult+0x22>
 800cca4:	4925      	ldr	r1, [pc, #148]	@ (800cd3c <__pow5mult+0xa8>)
 800cca6:	3a01      	subs	r2, #1
 800cca8:	0092      	lsls	r2, r2, #2
 800ccaa:	5852      	ldr	r2, [r2, r1]
 800ccac:	2300      	movs	r3, #0
 800ccae:	0031      	movs	r1, r6
 800ccb0:	f7ff fe9a 	bl	800c9e8 <__multadd>
 800ccb4:	0006      	movs	r6, r0
 800ccb6:	10ad      	asrs	r5, r5, #2
 800ccb8:	d03d      	beq.n	800cd36 <__pow5mult+0xa2>
 800ccba:	69fc      	ldr	r4, [r7, #28]
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	d10f      	bne.n	800cce0 <__pow5mult+0x4c>
 800ccc0:	2010      	movs	r0, #16
 800ccc2:	f7ff fd6d 	bl	800c7a0 <malloc>
 800ccc6:	1e02      	subs	r2, r0, #0
 800ccc8:	61f8      	str	r0, [r7, #28]
 800ccca:	d105      	bne.n	800ccd8 <__pow5mult+0x44>
 800cccc:	21b4      	movs	r1, #180	@ 0xb4
 800ccce:	4b1c      	ldr	r3, [pc, #112]	@ (800cd40 <__pow5mult+0xac>)
 800ccd0:	481c      	ldr	r0, [pc, #112]	@ (800cd44 <__pow5mult+0xb0>)
 800ccd2:	31ff      	adds	r1, #255	@ 0xff
 800ccd4:	f000 fbfa 	bl	800d4cc <__assert_func>
 800ccd8:	6044      	str	r4, [r0, #4]
 800ccda:	6084      	str	r4, [r0, #8]
 800ccdc:	6004      	str	r4, [r0, #0]
 800ccde:	60c4      	str	r4, [r0, #12]
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	689c      	ldr	r4, [r3, #8]
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	d108      	bne.n	800ccfc <__pow5mult+0x68>
 800ccea:	0038      	movs	r0, r7
 800ccec:	4916      	ldr	r1, [pc, #88]	@ (800cd48 <__pow5mult+0xb4>)
 800ccee:	f7ff ff0f 	bl	800cb10 <__i2b>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	0004      	movs	r4, r0
 800ccf6:	6098      	str	r0, [r3, #8]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	6003      	str	r3, [r0, #0]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	421d      	tst	r5, r3
 800cd00:	d00a      	beq.n	800cd18 <__pow5mult+0x84>
 800cd02:	0031      	movs	r1, r6
 800cd04:	0022      	movs	r2, r4
 800cd06:	0038      	movs	r0, r7
 800cd08:	f7ff ff1a 	bl	800cb40 <__multiply>
 800cd0c:	0031      	movs	r1, r6
 800cd0e:	9001      	str	r0, [sp, #4]
 800cd10:	0038      	movs	r0, r7
 800cd12:	f7ff fe45 	bl	800c9a0 <_Bfree>
 800cd16:	9e01      	ldr	r6, [sp, #4]
 800cd18:	106d      	asrs	r5, r5, #1
 800cd1a:	d00c      	beq.n	800cd36 <__pow5mult+0xa2>
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d107      	bne.n	800cd32 <__pow5mult+0x9e>
 800cd22:	0022      	movs	r2, r4
 800cd24:	0021      	movs	r1, r4
 800cd26:	0038      	movs	r0, r7
 800cd28:	f7ff ff0a 	bl	800cb40 <__multiply>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	0004      	movs	r4, r0
 800cd34:	e7e2      	b.n	800ccfc <__pow5mult+0x68>
 800cd36:	0030      	movs	r0, r6
 800cd38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd3a:	46c0      	nop			@ (mov r8, r8)
 800cd3c:	0800dff4 	.word	0x0800dff4
 800cd40:	0800dec1 	.word	0x0800dec1
 800cd44:	0800df41 	.word	0x0800df41
 800cd48:	00000271 	.word	0x00000271

0800cd4c <__lshift>:
 800cd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4e:	000c      	movs	r4, r1
 800cd50:	0016      	movs	r6, r2
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	1157      	asrs	r7, r2, #5
 800cd56:	b085      	sub	sp, #20
 800cd58:	18fb      	adds	r3, r7, r3
 800cd5a:	9301      	str	r3, [sp, #4]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	6849      	ldr	r1, [r1, #4]
 800cd62:	68a3      	ldr	r3, [r4, #8]
 800cd64:	9002      	str	r0, [sp, #8]
 800cd66:	9a00      	ldr	r2, [sp, #0]
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	db10      	blt.n	800cd8e <__lshift+0x42>
 800cd6c:	9802      	ldr	r0, [sp, #8]
 800cd6e:	f7ff fdd3 	bl	800c918 <_Balloc>
 800cd72:	2300      	movs	r3, #0
 800cd74:	0001      	movs	r1, r0
 800cd76:	0005      	movs	r5, r0
 800cd78:	001a      	movs	r2, r3
 800cd7a:	3114      	adds	r1, #20
 800cd7c:	4298      	cmp	r0, r3
 800cd7e:	d10c      	bne.n	800cd9a <__lshift+0x4e>
 800cd80:	21ef      	movs	r1, #239	@ 0xef
 800cd82:	002a      	movs	r2, r5
 800cd84:	4b25      	ldr	r3, [pc, #148]	@ (800ce1c <__lshift+0xd0>)
 800cd86:	4826      	ldr	r0, [pc, #152]	@ (800ce20 <__lshift+0xd4>)
 800cd88:	0049      	lsls	r1, r1, #1
 800cd8a:	f000 fb9f 	bl	800d4cc <__assert_func>
 800cd8e:	3101      	adds	r1, #1
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	e7e8      	b.n	800cd66 <__lshift+0x1a>
 800cd94:	0098      	lsls	r0, r3, #2
 800cd96:	500a      	str	r2, [r1, r0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	42bb      	cmp	r3, r7
 800cd9c:	dbfa      	blt.n	800cd94 <__lshift+0x48>
 800cd9e:	43fb      	mvns	r3, r7
 800cda0:	17db      	asrs	r3, r3, #31
 800cda2:	401f      	ands	r7, r3
 800cda4:	00bf      	lsls	r7, r7, #2
 800cda6:	0023      	movs	r3, r4
 800cda8:	201f      	movs	r0, #31
 800cdaa:	19c9      	adds	r1, r1, r7
 800cdac:	0037      	movs	r7, r6
 800cdae:	6922      	ldr	r2, [r4, #16]
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	0092      	lsls	r2, r2, #2
 800cdb4:	189a      	adds	r2, r3, r2
 800cdb6:	4007      	ands	r7, r0
 800cdb8:	4206      	tst	r6, r0
 800cdba:	d029      	beq.n	800ce10 <__lshift+0xc4>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	1bc0      	subs	r0, r0, r7
 800cdc0:	9003      	str	r0, [sp, #12]
 800cdc2:	468c      	mov	ip, r1
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	681e      	ldr	r6, [r3, #0]
 800cdc8:	40be      	lsls	r6, r7
 800cdca:	4306      	orrs	r6, r0
 800cdcc:	4660      	mov	r0, ip
 800cdce:	c040      	stmia	r0!, {r6}
 800cdd0:	4684      	mov	ip, r0
 800cdd2:	9e03      	ldr	r6, [sp, #12]
 800cdd4:	cb01      	ldmia	r3!, {r0}
 800cdd6:	40f0      	lsrs	r0, r6
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d8f4      	bhi.n	800cdc6 <__lshift+0x7a>
 800cddc:	0026      	movs	r6, r4
 800cdde:	3615      	adds	r6, #21
 800cde0:	2304      	movs	r3, #4
 800cde2:	42b2      	cmp	r2, r6
 800cde4:	d304      	bcc.n	800cdf0 <__lshift+0xa4>
 800cde6:	1b13      	subs	r3, r2, r4
 800cde8:	3b15      	subs	r3, #21
 800cdea:	089b      	lsrs	r3, r3, #2
 800cdec:	3301      	adds	r3, #1
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	50c8      	str	r0, [r1, r3]
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d002      	beq.n	800cdfc <__lshift+0xb0>
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	9b00      	ldr	r3, [sp, #0]
 800cdfe:	9802      	ldr	r0, [sp, #8]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	0021      	movs	r1, r4
 800ce04:	612b      	str	r3, [r5, #16]
 800ce06:	f7ff fdcb 	bl	800c9a0 <_Bfree>
 800ce0a:	0028      	movs	r0, r5
 800ce0c:	b005      	add	sp, #20
 800ce0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce10:	cb01      	ldmia	r3!, {r0}
 800ce12:	c101      	stmia	r1!, {r0}
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d8fb      	bhi.n	800ce10 <__lshift+0xc4>
 800ce18:	e7f0      	b.n	800cdfc <__lshift+0xb0>
 800ce1a:	46c0      	nop			@ (mov r8, r8)
 800ce1c:	0800df30 	.word	0x0800df30
 800ce20:	0800df41 	.word	0x0800df41

0800ce24 <__mcmp>:
 800ce24:	b530      	push	{r4, r5, lr}
 800ce26:	690b      	ldr	r3, [r1, #16]
 800ce28:	6904      	ldr	r4, [r0, #16]
 800ce2a:	0002      	movs	r2, r0
 800ce2c:	1ae0      	subs	r0, r4, r3
 800ce2e:	429c      	cmp	r4, r3
 800ce30:	d10f      	bne.n	800ce52 <__mcmp+0x2e>
 800ce32:	3214      	adds	r2, #20
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	3114      	adds	r1, #20
 800ce38:	0014      	movs	r4, r2
 800ce3a:	18c9      	adds	r1, r1, r3
 800ce3c:	18d2      	adds	r2, r2, r3
 800ce3e:	3a04      	subs	r2, #4
 800ce40:	3904      	subs	r1, #4
 800ce42:	6815      	ldr	r5, [r2, #0]
 800ce44:	680b      	ldr	r3, [r1, #0]
 800ce46:	429d      	cmp	r5, r3
 800ce48:	d004      	beq.n	800ce54 <__mcmp+0x30>
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	429d      	cmp	r5, r3
 800ce4e:	d200      	bcs.n	800ce52 <__mcmp+0x2e>
 800ce50:	3802      	subs	r0, #2
 800ce52:	bd30      	pop	{r4, r5, pc}
 800ce54:	4294      	cmp	r4, r2
 800ce56:	d3f2      	bcc.n	800ce3e <__mcmp+0x1a>
 800ce58:	e7fb      	b.n	800ce52 <__mcmp+0x2e>
	...

0800ce5c <__mdiff>:
 800ce5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce5e:	000c      	movs	r4, r1
 800ce60:	b087      	sub	sp, #28
 800ce62:	9000      	str	r0, [sp, #0]
 800ce64:	0011      	movs	r1, r2
 800ce66:	0020      	movs	r0, r4
 800ce68:	0017      	movs	r7, r2
 800ce6a:	f7ff ffdb 	bl	800ce24 <__mcmp>
 800ce6e:	1e05      	subs	r5, r0, #0
 800ce70:	d110      	bne.n	800ce94 <__mdiff+0x38>
 800ce72:	0001      	movs	r1, r0
 800ce74:	9800      	ldr	r0, [sp, #0]
 800ce76:	f7ff fd4f 	bl	800c918 <_Balloc>
 800ce7a:	1e02      	subs	r2, r0, #0
 800ce7c:	d104      	bne.n	800ce88 <__mdiff+0x2c>
 800ce7e:	4b40      	ldr	r3, [pc, #256]	@ (800cf80 <__mdiff+0x124>)
 800ce80:	4840      	ldr	r0, [pc, #256]	@ (800cf84 <__mdiff+0x128>)
 800ce82:	4941      	ldr	r1, [pc, #260]	@ (800cf88 <__mdiff+0x12c>)
 800ce84:	f000 fb22 	bl	800d4cc <__assert_func>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	6145      	str	r5, [r0, #20]
 800ce8c:	6103      	str	r3, [r0, #16]
 800ce8e:	0010      	movs	r0, r2
 800ce90:	b007      	add	sp, #28
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce94:	2600      	movs	r6, #0
 800ce96:	42b0      	cmp	r0, r6
 800ce98:	da03      	bge.n	800cea2 <__mdiff+0x46>
 800ce9a:	0023      	movs	r3, r4
 800ce9c:	003c      	movs	r4, r7
 800ce9e:	001f      	movs	r7, r3
 800cea0:	3601      	adds	r6, #1
 800cea2:	6861      	ldr	r1, [r4, #4]
 800cea4:	9800      	ldr	r0, [sp, #0]
 800cea6:	f7ff fd37 	bl	800c918 <_Balloc>
 800ceaa:	1e02      	subs	r2, r0, #0
 800ceac:	d103      	bne.n	800ceb6 <__mdiff+0x5a>
 800ceae:	4b34      	ldr	r3, [pc, #208]	@ (800cf80 <__mdiff+0x124>)
 800ceb0:	4834      	ldr	r0, [pc, #208]	@ (800cf84 <__mdiff+0x128>)
 800ceb2:	4936      	ldr	r1, [pc, #216]	@ (800cf8c <__mdiff+0x130>)
 800ceb4:	e7e6      	b.n	800ce84 <__mdiff+0x28>
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	3414      	adds	r4, #20
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	18e3      	adds	r3, r4, r3
 800cec0:	0021      	movs	r1, r4
 800cec2:	9401      	str	r4, [sp, #4]
 800cec4:	003c      	movs	r4, r7
 800cec6:	9302      	str	r3, [sp, #8]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	3414      	adds	r4, #20
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	18e3      	adds	r3, r4, r3
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	0003      	movs	r3, r0
 800ced4:	60c6      	str	r6, [r0, #12]
 800ced6:	468c      	mov	ip, r1
 800ced8:	2000      	movs	r0, #0
 800ceda:	3314      	adds	r3, #20
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	9305      	str	r3, [sp, #20]
 800cee0:	4663      	mov	r3, ip
 800cee2:	cb20      	ldmia	r3!, {r5}
 800cee4:	b2a9      	uxth	r1, r5
 800cee6:	000e      	movs	r6, r1
 800cee8:	469c      	mov	ip, r3
 800ceea:	cc08      	ldmia	r4!, {r3}
 800ceec:	0c2d      	lsrs	r5, r5, #16
 800ceee:	b299      	uxth	r1, r3
 800cef0:	1a71      	subs	r1, r6, r1
 800cef2:	1809      	adds	r1, r1, r0
 800cef4:	0c1b      	lsrs	r3, r3, #16
 800cef6:	1408      	asrs	r0, r1, #16
 800cef8:	1aeb      	subs	r3, r5, r3
 800cefa:	181b      	adds	r3, r3, r0
 800cefc:	1418      	asrs	r0, r3, #16
 800cefe:	b289      	uxth	r1, r1
 800cf00:	041b      	lsls	r3, r3, #16
 800cf02:	4319      	orrs	r1, r3
 800cf04:	9b05      	ldr	r3, [sp, #20]
 800cf06:	c302      	stmia	r3!, {r1}
 800cf08:	9305      	str	r3, [sp, #20]
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	d8e7      	bhi.n	800cee0 <__mdiff+0x84>
 800cf10:	0039      	movs	r1, r7
 800cf12:	9c03      	ldr	r4, [sp, #12]
 800cf14:	3115      	adds	r1, #21
 800cf16:	2304      	movs	r3, #4
 800cf18:	428c      	cmp	r4, r1
 800cf1a:	d304      	bcc.n	800cf26 <__mdiff+0xca>
 800cf1c:	1be3      	subs	r3, r4, r7
 800cf1e:	3b15      	subs	r3, #21
 800cf20:	089b      	lsrs	r3, r3, #2
 800cf22:	3301      	adds	r3, #1
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	9901      	ldr	r1, [sp, #4]
 800cf28:	18cd      	adds	r5, r1, r3
 800cf2a:	9904      	ldr	r1, [sp, #16]
 800cf2c:	002e      	movs	r6, r5
 800cf2e:	18cb      	adds	r3, r1, r3
 800cf30:	001f      	movs	r7, r3
 800cf32:	9902      	ldr	r1, [sp, #8]
 800cf34:	428e      	cmp	r6, r1
 800cf36:	d311      	bcc.n	800cf5c <__mdiff+0x100>
 800cf38:	9c02      	ldr	r4, [sp, #8]
 800cf3a:	1ee9      	subs	r1, r5, #3
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	428c      	cmp	r4, r1
 800cf40:	d304      	bcc.n	800cf4c <__mdiff+0xf0>
 800cf42:	0021      	movs	r1, r4
 800cf44:	3103      	adds	r1, #3
 800cf46:	1b49      	subs	r1, r1, r5
 800cf48:	0889      	lsrs	r1, r1, #2
 800cf4a:	0088      	lsls	r0, r1, #2
 800cf4c:	181b      	adds	r3, r3, r0
 800cf4e:	3b04      	subs	r3, #4
 800cf50:	6819      	ldr	r1, [r3, #0]
 800cf52:	2900      	cmp	r1, #0
 800cf54:	d010      	beq.n	800cf78 <__mdiff+0x11c>
 800cf56:	9b00      	ldr	r3, [sp, #0]
 800cf58:	6113      	str	r3, [r2, #16]
 800cf5a:	e798      	b.n	800ce8e <__mdiff+0x32>
 800cf5c:	4684      	mov	ip, r0
 800cf5e:	ce02      	ldmia	r6!, {r1}
 800cf60:	b288      	uxth	r0, r1
 800cf62:	4460      	add	r0, ip
 800cf64:	1400      	asrs	r0, r0, #16
 800cf66:	0c0c      	lsrs	r4, r1, #16
 800cf68:	1904      	adds	r4, r0, r4
 800cf6a:	4461      	add	r1, ip
 800cf6c:	1420      	asrs	r0, r4, #16
 800cf6e:	b289      	uxth	r1, r1
 800cf70:	0424      	lsls	r4, r4, #16
 800cf72:	4321      	orrs	r1, r4
 800cf74:	c702      	stmia	r7!, {r1}
 800cf76:	e7dc      	b.n	800cf32 <__mdiff+0xd6>
 800cf78:	9900      	ldr	r1, [sp, #0]
 800cf7a:	3901      	subs	r1, #1
 800cf7c:	9100      	str	r1, [sp, #0]
 800cf7e:	e7e6      	b.n	800cf4e <__mdiff+0xf2>
 800cf80:	0800df30 	.word	0x0800df30
 800cf84:	0800df41 	.word	0x0800df41
 800cf88:	00000237 	.word	0x00000237
 800cf8c:	00000245 	.word	0x00000245

0800cf90 <__d2b>:
 800cf90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf92:	2101      	movs	r1, #1
 800cf94:	0016      	movs	r6, r2
 800cf96:	001f      	movs	r7, r3
 800cf98:	f7ff fcbe 	bl	800c918 <_Balloc>
 800cf9c:	1e04      	subs	r4, r0, #0
 800cf9e:	d105      	bne.n	800cfac <__d2b+0x1c>
 800cfa0:	0022      	movs	r2, r4
 800cfa2:	4b25      	ldr	r3, [pc, #148]	@ (800d038 <__d2b+0xa8>)
 800cfa4:	4825      	ldr	r0, [pc, #148]	@ (800d03c <__d2b+0xac>)
 800cfa6:	4926      	ldr	r1, [pc, #152]	@ (800d040 <__d2b+0xb0>)
 800cfa8:	f000 fa90 	bl	800d4cc <__assert_func>
 800cfac:	033b      	lsls	r3, r7, #12
 800cfae:	007d      	lsls	r5, r7, #1
 800cfb0:	0b1b      	lsrs	r3, r3, #12
 800cfb2:	0d6d      	lsrs	r5, r5, #21
 800cfb4:	d002      	beq.n	800cfbc <__d2b+0x2c>
 800cfb6:	2280      	movs	r2, #128	@ 0x80
 800cfb8:	0352      	lsls	r2, r2, #13
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	2e00      	cmp	r6, #0
 800cfc0:	d025      	beq.n	800d00e <__d2b+0x7e>
 800cfc2:	4668      	mov	r0, sp
 800cfc4:	9600      	str	r6, [sp, #0]
 800cfc6:	f7ff fd74 	bl	800cab2 <__lo0bits>
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	9900      	ldr	r1, [sp, #0]
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d01b      	beq.n	800d00a <__d2b+0x7a>
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	001e      	movs	r6, r3
 800cfd6:	1a12      	subs	r2, r2, r0
 800cfd8:	4096      	lsls	r6, r2
 800cfda:	0032      	movs	r2, r6
 800cfdc:	40c3      	lsrs	r3, r0
 800cfde:	430a      	orrs	r2, r1
 800cfe0:	6162      	str	r2, [r4, #20]
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	9e01      	ldr	r6, [sp, #4]
 800cfe6:	61a6      	str	r6, [r4, #24]
 800cfe8:	1e73      	subs	r3, r6, #1
 800cfea:	419e      	sbcs	r6, r3
 800cfec:	3601      	adds	r6, #1
 800cfee:	6126      	str	r6, [r4, #16]
 800cff0:	2d00      	cmp	r5, #0
 800cff2:	d014      	beq.n	800d01e <__d2b+0x8e>
 800cff4:	2635      	movs	r6, #53	@ 0x35
 800cff6:	4b13      	ldr	r3, [pc, #76]	@ (800d044 <__d2b+0xb4>)
 800cff8:	18ed      	adds	r5, r5, r3
 800cffa:	9b08      	ldr	r3, [sp, #32]
 800cffc:	182d      	adds	r5, r5, r0
 800cffe:	601d      	str	r5, [r3, #0]
 800d000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d002:	1a36      	subs	r6, r6, r0
 800d004:	601e      	str	r6, [r3, #0]
 800d006:	0020      	movs	r0, r4
 800d008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d00a:	6161      	str	r1, [r4, #20]
 800d00c:	e7ea      	b.n	800cfe4 <__d2b+0x54>
 800d00e:	a801      	add	r0, sp, #4
 800d010:	f7ff fd4f 	bl	800cab2 <__lo0bits>
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	2601      	movs	r6, #1
 800d018:	6163      	str	r3, [r4, #20]
 800d01a:	3020      	adds	r0, #32
 800d01c:	e7e7      	b.n	800cfee <__d2b+0x5e>
 800d01e:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <__d2b+0xb8>)
 800d020:	18c0      	adds	r0, r0, r3
 800d022:	9b08      	ldr	r3, [sp, #32]
 800d024:	6018      	str	r0, [r3, #0]
 800d026:	4b09      	ldr	r3, [pc, #36]	@ (800d04c <__d2b+0xbc>)
 800d028:	18f3      	adds	r3, r6, r3
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	18e3      	adds	r3, r4, r3
 800d02e:	6958      	ldr	r0, [r3, #20]
 800d030:	f7ff fd1e 	bl	800ca70 <__hi0bits>
 800d034:	0176      	lsls	r6, r6, #5
 800d036:	e7e3      	b.n	800d000 <__d2b+0x70>
 800d038:	0800df30 	.word	0x0800df30
 800d03c:	0800df41 	.word	0x0800df41
 800d040:	0000030f 	.word	0x0000030f
 800d044:	fffffbcd 	.word	0xfffffbcd
 800d048:	fffffbce 	.word	0xfffffbce
 800d04c:	3fffffff 	.word	0x3fffffff

0800d050 <__ssputs_r>:
 800d050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d052:	688e      	ldr	r6, [r1, #8]
 800d054:	b085      	sub	sp, #20
 800d056:	001f      	movs	r7, r3
 800d058:	000c      	movs	r4, r1
 800d05a:	680b      	ldr	r3, [r1, #0]
 800d05c:	9002      	str	r0, [sp, #8]
 800d05e:	9203      	str	r2, [sp, #12]
 800d060:	42be      	cmp	r6, r7
 800d062:	d830      	bhi.n	800d0c6 <__ssputs_r+0x76>
 800d064:	210c      	movs	r1, #12
 800d066:	5e62      	ldrsh	r2, [r4, r1]
 800d068:	2190      	movs	r1, #144	@ 0x90
 800d06a:	00c9      	lsls	r1, r1, #3
 800d06c:	420a      	tst	r2, r1
 800d06e:	d028      	beq.n	800d0c2 <__ssputs_r+0x72>
 800d070:	2003      	movs	r0, #3
 800d072:	6921      	ldr	r1, [r4, #16]
 800d074:	1a5b      	subs	r3, r3, r1
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	6963      	ldr	r3, [r4, #20]
 800d07a:	4343      	muls	r3, r0
 800d07c:	9801      	ldr	r0, [sp, #4]
 800d07e:	0fdd      	lsrs	r5, r3, #31
 800d080:	18ed      	adds	r5, r5, r3
 800d082:	1c7b      	adds	r3, r7, #1
 800d084:	181b      	adds	r3, r3, r0
 800d086:	106d      	asrs	r5, r5, #1
 800d088:	42ab      	cmp	r3, r5
 800d08a:	d900      	bls.n	800d08e <__ssputs_r+0x3e>
 800d08c:	001d      	movs	r5, r3
 800d08e:	0552      	lsls	r2, r2, #21
 800d090:	d528      	bpl.n	800d0e4 <__ssputs_r+0x94>
 800d092:	0029      	movs	r1, r5
 800d094:	9802      	ldr	r0, [sp, #8]
 800d096:	f7ff fbaf 	bl	800c7f8 <_malloc_r>
 800d09a:	1e06      	subs	r6, r0, #0
 800d09c:	d02c      	beq.n	800d0f8 <__ssputs_r+0xa8>
 800d09e:	9a01      	ldr	r2, [sp, #4]
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	f000 fa09 	bl	800d4b8 <memcpy>
 800d0a6:	89a2      	ldrh	r2, [r4, #12]
 800d0a8:	4b18      	ldr	r3, [pc, #96]	@ (800d10c <__ssputs_r+0xbc>)
 800d0aa:	401a      	ands	r2, r3
 800d0ac:	2380      	movs	r3, #128	@ 0x80
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	9b01      	ldr	r3, [sp, #4]
 800d0b4:	6126      	str	r6, [r4, #16]
 800d0b6:	18f6      	adds	r6, r6, r3
 800d0b8:	6026      	str	r6, [r4, #0]
 800d0ba:	003e      	movs	r6, r7
 800d0bc:	6165      	str	r5, [r4, #20]
 800d0be:	1aed      	subs	r5, r5, r3
 800d0c0:	60a5      	str	r5, [r4, #8]
 800d0c2:	42be      	cmp	r6, r7
 800d0c4:	d900      	bls.n	800d0c8 <__ssputs_r+0x78>
 800d0c6:	003e      	movs	r6, r7
 800d0c8:	0032      	movs	r2, r6
 800d0ca:	9903      	ldr	r1, [sp, #12]
 800d0cc:	6820      	ldr	r0, [r4, #0]
 800d0ce:	f000 f9ce 	bl	800d46e <memmove>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	68a3      	ldr	r3, [r4, #8]
 800d0d6:	1b9b      	subs	r3, r3, r6
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	199b      	adds	r3, r3, r6
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	b005      	add	sp, #20
 800d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e4:	002a      	movs	r2, r5
 800d0e6:	9802      	ldr	r0, [sp, #8]
 800d0e8:	f000 fa4d 	bl	800d586 <_realloc_r>
 800d0ec:	1e06      	subs	r6, r0, #0
 800d0ee:	d1e0      	bne.n	800d0b2 <__ssputs_r+0x62>
 800d0f0:	6921      	ldr	r1, [r4, #16]
 800d0f2:	9802      	ldr	r0, [sp, #8]
 800d0f4:	f7ff fb0a 	bl	800c70c <_free_r>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	9a02      	ldr	r2, [sp, #8]
 800d0fe:	4240      	negs	r0, r0
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	89a2      	ldrh	r2, [r4, #12]
 800d104:	3334      	adds	r3, #52	@ 0x34
 800d106:	4313      	orrs	r3, r2
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	e7e9      	b.n	800d0e0 <__ssputs_r+0x90>
 800d10c:	fffffb7f 	.word	0xfffffb7f

0800d110 <_svfiprintf_r>:
 800d110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d112:	b0a1      	sub	sp, #132	@ 0x84
 800d114:	9003      	str	r0, [sp, #12]
 800d116:	001d      	movs	r5, r3
 800d118:	898b      	ldrh	r3, [r1, #12]
 800d11a:	000f      	movs	r7, r1
 800d11c:	0016      	movs	r6, r2
 800d11e:	061b      	lsls	r3, r3, #24
 800d120:	d511      	bpl.n	800d146 <_svfiprintf_r+0x36>
 800d122:	690b      	ldr	r3, [r1, #16]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10e      	bne.n	800d146 <_svfiprintf_r+0x36>
 800d128:	2140      	movs	r1, #64	@ 0x40
 800d12a:	f7ff fb65 	bl	800c7f8 <_malloc_r>
 800d12e:	6038      	str	r0, [r7, #0]
 800d130:	6138      	str	r0, [r7, #16]
 800d132:	2800      	cmp	r0, #0
 800d134:	d105      	bne.n	800d142 <_svfiprintf_r+0x32>
 800d136:	230c      	movs	r3, #12
 800d138:	9a03      	ldr	r2, [sp, #12]
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	2001      	movs	r0, #1
 800d13e:	4240      	negs	r0, r0
 800d140:	e0cf      	b.n	800d2e2 <_svfiprintf_r+0x1d2>
 800d142:	2340      	movs	r3, #64	@ 0x40
 800d144:	617b      	str	r3, [r7, #20]
 800d146:	2300      	movs	r3, #0
 800d148:	ac08      	add	r4, sp, #32
 800d14a:	6163      	str	r3, [r4, #20]
 800d14c:	3320      	adds	r3, #32
 800d14e:	7663      	strb	r3, [r4, #25]
 800d150:	3310      	adds	r3, #16
 800d152:	76a3      	strb	r3, [r4, #26]
 800d154:	9507      	str	r5, [sp, #28]
 800d156:	0035      	movs	r5, r6
 800d158:	782b      	ldrb	r3, [r5, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <_svfiprintf_r+0x52>
 800d15e:	2b25      	cmp	r3, #37	@ 0x25
 800d160:	d148      	bne.n	800d1f4 <_svfiprintf_r+0xe4>
 800d162:	1bab      	subs	r3, r5, r6
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	42b5      	cmp	r5, r6
 800d168:	d00b      	beq.n	800d182 <_svfiprintf_r+0x72>
 800d16a:	0032      	movs	r2, r6
 800d16c:	0039      	movs	r1, r7
 800d16e:	9803      	ldr	r0, [sp, #12]
 800d170:	f7ff ff6e 	bl	800d050 <__ssputs_r>
 800d174:	3001      	adds	r0, #1
 800d176:	d100      	bne.n	800d17a <_svfiprintf_r+0x6a>
 800d178:	e0ae      	b.n	800d2d8 <_svfiprintf_r+0x1c8>
 800d17a:	6963      	ldr	r3, [r4, #20]
 800d17c:	9a05      	ldr	r2, [sp, #20]
 800d17e:	189b      	adds	r3, r3, r2
 800d180:	6163      	str	r3, [r4, #20]
 800d182:	782b      	ldrb	r3, [r5, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d100      	bne.n	800d18a <_svfiprintf_r+0x7a>
 800d188:	e0a6      	b.n	800d2d8 <_svfiprintf_r+0x1c8>
 800d18a:	2201      	movs	r2, #1
 800d18c:	2300      	movs	r3, #0
 800d18e:	4252      	negs	r2, r2
 800d190:	6062      	str	r2, [r4, #4]
 800d192:	a904      	add	r1, sp, #16
 800d194:	3254      	adds	r2, #84	@ 0x54
 800d196:	1852      	adds	r2, r2, r1
 800d198:	1c6e      	adds	r6, r5, #1
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	60e3      	str	r3, [r4, #12]
 800d19e:	60a3      	str	r3, [r4, #8]
 800d1a0:	7013      	strb	r3, [r2, #0]
 800d1a2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d1a4:	4b54      	ldr	r3, [pc, #336]	@ (800d2f8 <_svfiprintf_r+0x1e8>)
 800d1a6:	2205      	movs	r2, #5
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	7831      	ldrb	r1, [r6, #0]
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	f7fe fc2c 	bl	800ba0a <memchr>
 800d1b2:	1c75      	adds	r5, r6, #1
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d11f      	bne.n	800d1f8 <_svfiprintf_r+0xe8>
 800d1b8:	6822      	ldr	r2, [r4, #0]
 800d1ba:	06d3      	lsls	r3, r2, #27
 800d1bc:	d504      	bpl.n	800d1c8 <_svfiprintf_r+0xb8>
 800d1be:	2353      	movs	r3, #83	@ 0x53
 800d1c0:	a904      	add	r1, sp, #16
 800d1c2:	185b      	adds	r3, r3, r1
 800d1c4:	2120      	movs	r1, #32
 800d1c6:	7019      	strb	r1, [r3, #0]
 800d1c8:	0713      	lsls	r3, r2, #28
 800d1ca:	d504      	bpl.n	800d1d6 <_svfiprintf_r+0xc6>
 800d1cc:	2353      	movs	r3, #83	@ 0x53
 800d1ce:	a904      	add	r1, sp, #16
 800d1d0:	185b      	adds	r3, r3, r1
 800d1d2:	212b      	movs	r1, #43	@ 0x2b
 800d1d4:	7019      	strb	r1, [r3, #0]
 800d1d6:	7833      	ldrb	r3, [r6, #0]
 800d1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1da:	d016      	beq.n	800d20a <_svfiprintf_r+0xfa>
 800d1dc:	0035      	movs	r5, r6
 800d1de:	2100      	movs	r1, #0
 800d1e0:	200a      	movs	r0, #10
 800d1e2:	68e3      	ldr	r3, [r4, #12]
 800d1e4:	782a      	ldrb	r2, [r5, #0]
 800d1e6:	1c6e      	adds	r6, r5, #1
 800d1e8:	3a30      	subs	r2, #48	@ 0x30
 800d1ea:	2a09      	cmp	r2, #9
 800d1ec:	d950      	bls.n	800d290 <_svfiprintf_r+0x180>
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	d111      	bne.n	800d216 <_svfiprintf_r+0x106>
 800d1f2:	e017      	b.n	800d224 <_svfiprintf_r+0x114>
 800d1f4:	3501      	adds	r5, #1
 800d1f6:	e7af      	b.n	800d158 <_svfiprintf_r+0x48>
 800d1f8:	9b05      	ldr	r3, [sp, #20]
 800d1fa:	6822      	ldr	r2, [r4, #0]
 800d1fc:	1ac0      	subs	r0, r0, r3
 800d1fe:	2301      	movs	r3, #1
 800d200:	4083      	lsls	r3, r0
 800d202:	4313      	orrs	r3, r2
 800d204:	002e      	movs	r6, r5
 800d206:	6023      	str	r3, [r4, #0]
 800d208:	e7cc      	b.n	800d1a4 <_svfiprintf_r+0x94>
 800d20a:	9b07      	ldr	r3, [sp, #28]
 800d20c:	1d19      	adds	r1, r3, #4
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	9107      	str	r1, [sp, #28]
 800d212:	2b00      	cmp	r3, #0
 800d214:	db01      	blt.n	800d21a <_svfiprintf_r+0x10a>
 800d216:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d218:	e004      	b.n	800d224 <_svfiprintf_r+0x114>
 800d21a:	425b      	negs	r3, r3
 800d21c:	60e3      	str	r3, [r4, #12]
 800d21e:	2302      	movs	r3, #2
 800d220:	4313      	orrs	r3, r2
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	782b      	ldrb	r3, [r5, #0]
 800d226:	2b2e      	cmp	r3, #46	@ 0x2e
 800d228:	d10c      	bne.n	800d244 <_svfiprintf_r+0x134>
 800d22a:	786b      	ldrb	r3, [r5, #1]
 800d22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d22e:	d134      	bne.n	800d29a <_svfiprintf_r+0x18a>
 800d230:	9b07      	ldr	r3, [sp, #28]
 800d232:	3502      	adds	r5, #2
 800d234:	1d1a      	adds	r2, r3, #4
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	9207      	str	r2, [sp, #28]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	da01      	bge.n	800d242 <_svfiprintf_r+0x132>
 800d23e:	2301      	movs	r3, #1
 800d240:	425b      	negs	r3, r3
 800d242:	9309      	str	r3, [sp, #36]	@ 0x24
 800d244:	4e2d      	ldr	r6, [pc, #180]	@ (800d2fc <_svfiprintf_r+0x1ec>)
 800d246:	2203      	movs	r2, #3
 800d248:	0030      	movs	r0, r6
 800d24a:	7829      	ldrb	r1, [r5, #0]
 800d24c:	f7fe fbdd 	bl	800ba0a <memchr>
 800d250:	2800      	cmp	r0, #0
 800d252:	d006      	beq.n	800d262 <_svfiprintf_r+0x152>
 800d254:	2340      	movs	r3, #64	@ 0x40
 800d256:	1b80      	subs	r0, r0, r6
 800d258:	4083      	lsls	r3, r0
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	3501      	adds	r5, #1
 800d25e:	4313      	orrs	r3, r2
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	7829      	ldrb	r1, [r5, #0]
 800d264:	2206      	movs	r2, #6
 800d266:	4826      	ldr	r0, [pc, #152]	@ (800d300 <_svfiprintf_r+0x1f0>)
 800d268:	1c6e      	adds	r6, r5, #1
 800d26a:	7621      	strb	r1, [r4, #24]
 800d26c:	f7fe fbcd 	bl	800ba0a <memchr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d038      	beq.n	800d2e6 <_svfiprintf_r+0x1d6>
 800d274:	4b23      	ldr	r3, [pc, #140]	@ (800d304 <_svfiprintf_r+0x1f4>)
 800d276:	2b00      	cmp	r3, #0
 800d278:	d122      	bne.n	800d2c0 <_svfiprintf_r+0x1b0>
 800d27a:	2207      	movs	r2, #7
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	3307      	adds	r3, #7
 800d280:	4393      	bics	r3, r2
 800d282:	3308      	adds	r3, #8
 800d284:	9307      	str	r3, [sp, #28]
 800d286:	6963      	ldr	r3, [r4, #20]
 800d288:	9a04      	ldr	r2, [sp, #16]
 800d28a:	189b      	adds	r3, r3, r2
 800d28c:	6163      	str	r3, [r4, #20]
 800d28e:	e762      	b.n	800d156 <_svfiprintf_r+0x46>
 800d290:	4343      	muls	r3, r0
 800d292:	0035      	movs	r5, r6
 800d294:	2101      	movs	r1, #1
 800d296:	189b      	adds	r3, r3, r2
 800d298:	e7a4      	b.n	800d1e4 <_svfiprintf_r+0xd4>
 800d29a:	2300      	movs	r3, #0
 800d29c:	200a      	movs	r0, #10
 800d29e:	0019      	movs	r1, r3
 800d2a0:	3501      	adds	r5, #1
 800d2a2:	6063      	str	r3, [r4, #4]
 800d2a4:	782a      	ldrb	r2, [r5, #0]
 800d2a6:	1c6e      	adds	r6, r5, #1
 800d2a8:	3a30      	subs	r2, #48	@ 0x30
 800d2aa:	2a09      	cmp	r2, #9
 800d2ac:	d903      	bls.n	800d2b6 <_svfiprintf_r+0x1a6>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0c8      	beq.n	800d244 <_svfiprintf_r+0x134>
 800d2b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2b4:	e7c6      	b.n	800d244 <_svfiprintf_r+0x134>
 800d2b6:	4341      	muls	r1, r0
 800d2b8:	0035      	movs	r5, r6
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	1889      	adds	r1, r1, r2
 800d2be:	e7f1      	b.n	800d2a4 <_svfiprintf_r+0x194>
 800d2c0:	aa07      	add	r2, sp, #28
 800d2c2:	9200      	str	r2, [sp, #0]
 800d2c4:	0021      	movs	r1, r4
 800d2c6:	003a      	movs	r2, r7
 800d2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d308 <_svfiprintf_r+0x1f8>)
 800d2ca:	9803      	ldr	r0, [sp, #12]
 800d2cc:	f7fd fe0c 	bl	800aee8 <_printf_float>
 800d2d0:	9004      	str	r0, [sp, #16]
 800d2d2:	9b04      	ldr	r3, [sp, #16]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	d1d6      	bne.n	800d286 <_svfiprintf_r+0x176>
 800d2d8:	89bb      	ldrh	r3, [r7, #12]
 800d2da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d2dc:	065b      	lsls	r3, r3, #25
 800d2de:	d500      	bpl.n	800d2e2 <_svfiprintf_r+0x1d2>
 800d2e0:	e72c      	b.n	800d13c <_svfiprintf_r+0x2c>
 800d2e2:	b021      	add	sp, #132	@ 0x84
 800d2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e6:	aa07      	add	r2, sp, #28
 800d2e8:	9200      	str	r2, [sp, #0]
 800d2ea:	0021      	movs	r1, r4
 800d2ec:	003a      	movs	r2, r7
 800d2ee:	4b06      	ldr	r3, [pc, #24]	@ (800d308 <_svfiprintf_r+0x1f8>)
 800d2f0:	9803      	ldr	r0, [sp, #12]
 800d2f2:	f7fe f8a7 	bl	800b444 <_printf_i>
 800d2f6:	e7eb      	b.n	800d2d0 <_svfiprintf_r+0x1c0>
 800d2f8:	0800df9a 	.word	0x0800df9a
 800d2fc:	0800dfa0 	.word	0x0800dfa0
 800d300:	0800dfa4 	.word	0x0800dfa4
 800d304:	0800aee9 	.word	0x0800aee9
 800d308:	0800d051 	.word	0x0800d051

0800d30c <__sflush_r>:
 800d30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d30e:	220c      	movs	r2, #12
 800d310:	5e8b      	ldrsh	r3, [r1, r2]
 800d312:	0005      	movs	r5, r0
 800d314:	000c      	movs	r4, r1
 800d316:	071a      	lsls	r2, r3, #28
 800d318:	d456      	bmi.n	800d3c8 <__sflush_r+0xbc>
 800d31a:	684a      	ldr	r2, [r1, #4]
 800d31c:	2a00      	cmp	r2, #0
 800d31e:	dc02      	bgt.n	800d326 <__sflush_r+0x1a>
 800d320:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d322:	2a00      	cmp	r2, #0
 800d324:	dd4e      	ble.n	800d3c4 <__sflush_r+0xb8>
 800d326:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d328:	2f00      	cmp	r7, #0
 800d32a:	d04b      	beq.n	800d3c4 <__sflush_r+0xb8>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2080      	movs	r0, #128	@ 0x80
 800d330:	682e      	ldr	r6, [r5, #0]
 800d332:	602a      	str	r2, [r5, #0]
 800d334:	001a      	movs	r2, r3
 800d336:	0140      	lsls	r0, r0, #5
 800d338:	6a21      	ldr	r1, [r4, #32]
 800d33a:	4002      	ands	r2, r0
 800d33c:	4203      	tst	r3, r0
 800d33e:	d033      	beq.n	800d3a8 <__sflush_r+0x9c>
 800d340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	075b      	lsls	r3, r3, #29
 800d346:	d506      	bpl.n	800d356 <__sflush_r+0x4a>
 800d348:	6863      	ldr	r3, [r4, #4]
 800d34a:	1ad2      	subs	r2, r2, r3
 800d34c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <__sflush_r+0x4a>
 800d352:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d354:	1ad2      	subs	r2, r2, r3
 800d356:	2300      	movs	r3, #0
 800d358:	0028      	movs	r0, r5
 800d35a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d35c:	6a21      	ldr	r1, [r4, #32]
 800d35e:	47b8      	blx	r7
 800d360:	89a2      	ldrh	r2, [r4, #12]
 800d362:	1c43      	adds	r3, r0, #1
 800d364:	d106      	bne.n	800d374 <__sflush_r+0x68>
 800d366:	6829      	ldr	r1, [r5, #0]
 800d368:	291d      	cmp	r1, #29
 800d36a:	d846      	bhi.n	800d3fa <__sflush_r+0xee>
 800d36c:	4b29      	ldr	r3, [pc, #164]	@ (800d414 <__sflush_r+0x108>)
 800d36e:	40cb      	lsrs	r3, r1
 800d370:	07db      	lsls	r3, r3, #31
 800d372:	d542      	bpl.n	800d3fa <__sflush_r+0xee>
 800d374:	2300      	movs	r3, #0
 800d376:	6063      	str	r3, [r4, #4]
 800d378:	6923      	ldr	r3, [r4, #16]
 800d37a:	6023      	str	r3, [r4, #0]
 800d37c:	04d2      	lsls	r2, r2, #19
 800d37e:	d505      	bpl.n	800d38c <__sflush_r+0x80>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d102      	bne.n	800d38a <__sflush_r+0x7e>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d100      	bne.n	800d38c <__sflush_r+0x80>
 800d38a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d38c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d38e:	602e      	str	r6, [r5, #0]
 800d390:	2900      	cmp	r1, #0
 800d392:	d017      	beq.n	800d3c4 <__sflush_r+0xb8>
 800d394:	0023      	movs	r3, r4
 800d396:	3344      	adds	r3, #68	@ 0x44
 800d398:	4299      	cmp	r1, r3
 800d39a:	d002      	beq.n	800d3a2 <__sflush_r+0x96>
 800d39c:	0028      	movs	r0, r5
 800d39e:	f7ff f9b5 	bl	800c70c <_free_r>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3a6:	e00d      	b.n	800d3c4 <__sflush_r+0xb8>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	0028      	movs	r0, r5
 800d3ac:	47b8      	blx	r7
 800d3ae:	0002      	movs	r2, r0
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d1c6      	bne.n	800d342 <__sflush_r+0x36>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0c3      	beq.n	800d342 <__sflush_r+0x36>
 800d3ba:	2b1d      	cmp	r3, #29
 800d3bc:	d001      	beq.n	800d3c2 <__sflush_r+0xb6>
 800d3be:	2b16      	cmp	r3, #22
 800d3c0:	d11a      	bne.n	800d3f8 <__sflush_r+0xec>
 800d3c2:	602e      	str	r6, [r5, #0]
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e01e      	b.n	800d406 <__sflush_r+0xfa>
 800d3c8:	690e      	ldr	r6, [r1, #16]
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	d0fa      	beq.n	800d3c4 <__sflush_r+0xb8>
 800d3ce:	680f      	ldr	r7, [r1, #0]
 800d3d0:	600e      	str	r6, [r1, #0]
 800d3d2:	1bba      	subs	r2, r7, r6
 800d3d4:	9201      	str	r2, [sp, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	079b      	lsls	r3, r3, #30
 800d3da:	d100      	bne.n	800d3de <__sflush_r+0xd2>
 800d3dc:	694a      	ldr	r2, [r1, #20]
 800d3de:	60a2      	str	r2, [r4, #8]
 800d3e0:	9b01      	ldr	r3, [sp, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	ddee      	ble.n	800d3c4 <__sflush_r+0xb8>
 800d3e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d3e8:	0032      	movs	r2, r6
 800d3ea:	001f      	movs	r7, r3
 800d3ec:	0028      	movs	r0, r5
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	6a21      	ldr	r1, [r4, #32]
 800d3f2:	47b8      	blx	r7
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	dc07      	bgt.n	800d408 <__sflush_r+0xfc>
 800d3f8:	89a2      	ldrh	r2, [r4, #12]
 800d3fa:	2340      	movs	r3, #64	@ 0x40
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	4313      	orrs	r3, r2
 800d400:	b21b      	sxth	r3, r3
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	4240      	negs	r0, r0
 800d406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d408:	9b01      	ldr	r3, [sp, #4]
 800d40a:	1836      	adds	r6, r6, r0
 800d40c:	1a1b      	subs	r3, r3, r0
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	e7e6      	b.n	800d3e0 <__sflush_r+0xd4>
 800d412:	46c0      	nop			@ (mov r8, r8)
 800d414:	20400001 	.word	0x20400001

0800d418 <_fflush_r>:
 800d418:	690b      	ldr	r3, [r1, #16]
 800d41a:	b570      	push	{r4, r5, r6, lr}
 800d41c:	0005      	movs	r5, r0
 800d41e:	000c      	movs	r4, r1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <_fflush_r+0x12>
 800d424:	2500      	movs	r5, #0
 800d426:	0028      	movs	r0, r5
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d004      	beq.n	800d438 <_fflush_r+0x20>
 800d42e:	6a03      	ldr	r3, [r0, #32]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <_fflush_r+0x20>
 800d434:	f7fe f9a2 	bl	800b77c <__sinit>
 800d438:	220c      	movs	r2, #12
 800d43a:	5ea3      	ldrsh	r3, [r4, r2]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0f1      	beq.n	800d424 <_fflush_r+0xc>
 800d440:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d442:	07d2      	lsls	r2, r2, #31
 800d444:	d404      	bmi.n	800d450 <_fflush_r+0x38>
 800d446:	059b      	lsls	r3, r3, #22
 800d448:	d402      	bmi.n	800d450 <_fflush_r+0x38>
 800d44a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d44c:	f7fe fad3 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800d450:	0028      	movs	r0, r5
 800d452:	0021      	movs	r1, r4
 800d454:	f7ff ff5a 	bl	800d30c <__sflush_r>
 800d458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d45a:	0005      	movs	r5, r0
 800d45c:	07db      	lsls	r3, r3, #31
 800d45e:	d4e2      	bmi.n	800d426 <_fflush_r+0xe>
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	059b      	lsls	r3, r3, #22
 800d464:	d4df      	bmi.n	800d426 <_fflush_r+0xe>
 800d466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d468:	f7fe fac6 	bl	800b9f8 <__retarget_lock_release_recursive>
 800d46c:	e7db      	b.n	800d426 <_fflush_r+0xe>

0800d46e <memmove>:
 800d46e:	b510      	push	{r4, lr}
 800d470:	4288      	cmp	r0, r1
 800d472:	d902      	bls.n	800d47a <memmove+0xc>
 800d474:	188b      	adds	r3, r1, r2
 800d476:	4298      	cmp	r0, r3
 800d478:	d308      	bcc.n	800d48c <memmove+0x1e>
 800d47a:	2300      	movs	r3, #0
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d007      	beq.n	800d490 <memmove+0x22>
 800d480:	5ccc      	ldrb	r4, [r1, r3]
 800d482:	54c4      	strb	r4, [r0, r3]
 800d484:	3301      	adds	r3, #1
 800d486:	e7f9      	b.n	800d47c <memmove+0xe>
 800d488:	5c8b      	ldrb	r3, [r1, r2]
 800d48a:	5483      	strb	r3, [r0, r2]
 800d48c:	3a01      	subs	r2, #1
 800d48e:	d2fb      	bcs.n	800d488 <memmove+0x1a>
 800d490:	bd10      	pop	{r4, pc}
	...

0800d494 <_sbrk_r>:
 800d494:	2300      	movs	r3, #0
 800d496:	b570      	push	{r4, r5, r6, lr}
 800d498:	4d06      	ldr	r5, [pc, #24]	@ (800d4b4 <_sbrk_r+0x20>)
 800d49a:	0004      	movs	r4, r0
 800d49c:	0008      	movs	r0, r1
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	f7f7 fd04 	bl	8004eac <_sbrk>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d103      	bne.n	800d4b0 <_sbrk_r+0x1c>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d000      	beq.n	800d4b0 <_sbrk_r+0x1c>
 800d4ae:	6023      	str	r3, [r4, #0]
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	46c0      	nop			@ (mov r8, r8)
 800d4b4:	200006d8 	.word	0x200006d8

0800d4b8 <memcpy>:
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d100      	bne.n	800d4c2 <memcpy+0xa>
 800d4c0:	bd10      	pop	{r4, pc}
 800d4c2:	5ccc      	ldrb	r4, [r1, r3]
 800d4c4:	54c4      	strb	r4, [r0, r3]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	e7f8      	b.n	800d4bc <memcpy+0x4>
	...

0800d4cc <__assert_func>:
 800d4cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d4ce:	0014      	movs	r4, r2
 800d4d0:	001a      	movs	r2, r3
 800d4d2:	4b09      	ldr	r3, [pc, #36]	@ (800d4f8 <__assert_func+0x2c>)
 800d4d4:	0005      	movs	r5, r0
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	000e      	movs	r6, r1
 800d4da:	68d8      	ldr	r0, [r3, #12]
 800d4dc:	4b07      	ldr	r3, [pc, #28]	@ (800d4fc <__assert_func+0x30>)
 800d4de:	2c00      	cmp	r4, #0
 800d4e0:	d101      	bne.n	800d4e6 <__assert_func+0x1a>
 800d4e2:	4b07      	ldr	r3, [pc, #28]	@ (800d500 <__assert_func+0x34>)
 800d4e4:	001c      	movs	r4, r3
 800d4e6:	4907      	ldr	r1, [pc, #28]	@ (800d504 <__assert_func+0x38>)
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	9402      	str	r4, [sp, #8]
 800d4ec:	002b      	movs	r3, r5
 800d4ee:	9600      	str	r6, [sp, #0]
 800d4f0:	f000 f886 	bl	800d600 <fiprintf>
 800d4f4:	f000 f894 	bl	800d620 <abort>
 800d4f8:	20000028 	.word	0x20000028
 800d4fc:	0800dfb5 	.word	0x0800dfb5
 800d500:	0800dff0 	.word	0x0800dff0
 800d504:	0800dfc2 	.word	0x0800dfc2

0800d508 <_calloc_r>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	0c0b      	lsrs	r3, r1, #16
 800d50c:	0c15      	lsrs	r5, r2, #16
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d11e      	bne.n	800d550 <_calloc_r+0x48>
 800d512:	2d00      	cmp	r5, #0
 800d514:	d10c      	bne.n	800d530 <_calloc_r+0x28>
 800d516:	b289      	uxth	r1, r1
 800d518:	b294      	uxth	r4, r2
 800d51a:	434c      	muls	r4, r1
 800d51c:	0021      	movs	r1, r4
 800d51e:	f7ff f96b 	bl	800c7f8 <_malloc_r>
 800d522:	1e05      	subs	r5, r0, #0
 800d524:	d01b      	beq.n	800d55e <_calloc_r+0x56>
 800d526:	0022      	movs	r2, r4
 800d528:	2100      	movs	r1, #0
 800d52a:	f7fe f9c9 	bl	800b8c0 <memset>
 800d52e:	e016      	b.n	800d55e <_calloc_r+0x56>
 800d530:	1c2b      	adds	r3, r5, #0
 800d532:	1c0c      	adds	r4, r1, #0
 800d534:	b289      	uxth	r1, r1
 800d536:	b292      	uxth	r2, r2
 800d538:	434a      	muls	r2, r1
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	b2a1      	uxth	r1, r4
 800d53e:	4359      	muls	r1, r3
 800d540:	0c14      	lsrs	r4, r2, #16
 800d542:	190c      	adds	r4, r1, r4
 800d544:	0c23      	lsrs	r3, r4, #16
 800d546:	d107      	bne.n	800d558 <_calloc_r+0x50>
 800d548:	0424      	lsls	r4, r4, #16
 800d54a:	b292      	uxth	r2, r2
 800d54c:	4314      	orrs	r4, r2
 800d54e:	e7e5      	b.n	800d51c <_calloc_r+0x14>
 800d550:	2d00      	cmp	r5, #0
 800d552:	d101      	bne.n	800d558 <_calloc_r+0x50>
 800d554:	1c14      	adds	r4, r2, #0
 800d556:	e7ed      	b.n	800d534 <_calloc_r+0x2c>
 800d558:	230c      	movs	r3, #12
 800d55a:	2500      	movs	r5, #0
 800d55c:	6003      	str	r3, [r0, #0]
 800d55e:	0028      	movs	r0, r5
 800d560:	bd70      	pop	{r4, r5, r6, pc}

0800d562 <__ascii_mbtowc>:
 800d562:	b082      	sub	sp, #8
 800d564:	2900      	cmp	r1, #0
 800d566:	d100      	bne.n	800d56a <__ascii_mbtowc+0x8>
 800d568:	a901      	add	r1, sp, #4
 800d56a:	1e10      	subs	r0, r2, #0
 800d56c:	d006      	beq.n	800d57c <__ascii_mbtowc+0x1a>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d006      	beq.n	800d580 <__ascii_mbtowc+0x1e>
 800d572:	7813      	ldrb	r3, [r2, #0]
 800d574:	600b      	str	r3, [r1, #0]
 800d576:	7810      	ldrb	r0, [r2, #0]
 800d578:	1e43      	subs	r3, r0, #1
 800d57a:	4198      	sbcs	r0, r3
 800d57c:	b002      	add	sp, #8
 800d57e:	4770      	bx	lr
 800d580:	2002      	movs	r0, #2
 800d582:	4240      	negs	r0, r0
 800d584:	e7fa      	b.n	800d57c <__ascii_mbtowc+0x1a>

0800d586 <_realloc_r>:
 800d586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d588:	0006      	movs	r6, r0
 800d58a:	000c      	movs	r4, r1
 800d58c:	0015      	movs	r5, r2
 800d58e:	2900      	cmp	r1, #0
 800d590:	d105      	bne.n	800d59e <_realloc_r+0x18>
 800d592:	0011      	movs	r1, r2
 800d594:	f7ff f930 	bl	800c7f8 <_malloc_r>
 800d598:	0004      	movs	r4, r0
 800d59a:	0020      	movs	r0, r4
 800d59c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	d103      	bne.n	800d5aa <_realloc_r+0x24>
 800d5a2:	f7ff f8b3 	bl	800c70c <_free_r>
 800d5a6:	002c      	movs	r4, r5
 800d5a8:	e7f7      	b.n	800d59a <_realloc_r+0x14>
 800d5aa:	f000 f840 	bl	800d62e <_malloc_usable_size_r>
 800d5ae:	0007      	movs	r7, r0
 800d5b0:	4285      	cmp	r5, r0
 800d5b2:	d802      	bhi.n	800d5ba <_realloc_r+0x34>
 800d5b4:	0843      	lsrs	r3, r0, #1
 800d5b6:	42ab      	cmp	r3, r5
 800d5b8:	d3ef      	bcc.n	800d59a <_realloc_r+0x14>
 800d5ba:	0029      	movs	r1, r5
 800d5bc:	0030      	movs	r0, r6
 800d5be:	f7ff f91b 	bl	800c7f8 <_malloc_r>
 800d5c2:	9001      	str	r0, [sp, #4]
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d101      	bne.n	800d5cc <_realloc_r+0x46>
 800d5c8:	9c01      	ldr	r4, [sp, #4]
 800d5ca:	e7e6      	b.n	800d59a <_realloc_r+0x14>
 800d5cc:	002a      	movs	r2, r5
 800d5ce:	42bd      	cmp	r5, r7
 800d5d0:	d900      	bls.n	800d5d4 <_realloc_r+0x4e>
 800d5d2:	003a      	movs	r2, r7
 800d5d4:	0021      	movs	r1, r4
 800d5d6:	9801      	ldr	r0, [sp, #4]
 800d5d8:	f7ff ff6e 	bl	800d4b8 <memcpy>
 800d5dc:	0021      	movs	r1, r4
 800d5de:	0030      	movs	r0, r6
 800d5e0:	f7ff f894 	bl	800c70c <_free_r>
 800d5e4:	e7f0      	b.n	800d5c8 <_realloc_r+0x42>

0800d5e6 <__ascii_wctomb>:
 800d5e6:	0003      	movs	r3, r0
 800d5e8:	1e08      	subs	r0, r1, #0
 800d5ea:	d005      	beq.n	800d5f8 <__ascii_wctomb+0x12>
 800d5ec:	2aff      	cmp	r2, #255	@ 0xff
 800d5ee:	d904      	bls.n	800d5fa <__ascii_wctomb+0x14>
 800d5f0:	228a      	movs	r2, #138	@ 0x8a
 800d5f2:	2001      	movs	r0, #1
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	4240      	negs	r0, r0
 800d5f8:	4770      	bx	lr
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	700a      	strb	r2, [r1, #0]
 800d5fe:	e7fb      	b.n	800d5f8 <__ascii_wctomb+0x12>

0800d600 <fiprintf>:
 800d600:	b40e      	push	{r1, r2, r3}
 800d602:	b517      	push	{r0, r1, r2, r4, lr}
 800d604:	4c05      	ldr	r4, [pc, #20]	@ (800d61c <fiprintf+0x1c>)
 800d606:	ab05      	add	r3, sp, #20
 800d608:	cb04      	ldmia	r3!, {r2}
 800d60a:	0001      	movs	r1, r0
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	f000 f83c 	bl	800d68c <_vfiprintf_r>
 800d614:	bc1e      	pop	{r1, r2, r3, r4}
 800d616:	bc08      	pop	{r3}
 800d618:	b003      	add	sp, #12
 800d61a:	4718      	bx	r3
 800d61c:	20000028 	.word	0x20000028

0800d620 <abort>:
 800d620:	2006      	movs	r0, #6
 800d622:	b510      	push	{r4, lr}
 800d624:	f000 fa18 	bl	800da58 <raise>
 800d628:	2001      	movs	r0, #1
 800d62a:	f7f7 fbcd 	bl	8004dc8 <_exit>

0800d62e <_malloc_usable_size_r>:
 800d62e:	1f0b      	subs	r3, r1, #4
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	1f18      	subs	r0, r3, #4
 800d634:	2b00      	cmp	r3, #0
 800d636:	da01      	bge.n	800d63c <_malloc_usable_size_r+0xe>
 800d638:	580b      	ldr	r3, [r1, r0]
 800d63a:	18c0      	adds	r0, r0, r3
 800d63c:	4770      	bx	lr

0800d63e <__sfputc_r>:
 800d63e:	6893      	ldr	r3, [r2, #8]
 800d640:	b510      	push	{r4, lr}
 800d642:	3b01      	subs	r3, #1
 800d644:	6093      	str	r3, [r2, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	da04      	bge.n	800d654 <__sfputc_r+0x16>
 800d64a:	6994      	ldr	r4, [r2, #24]
 800d64c:	42a3      	cmp	r3, r4
 800d64e:	db07      	blt.n	800d660 <__sfputc_r+0x22>
 800d650:	290a      	cmp	r1, #10
 800d652:	d005      	beq.n	800d660 <__sfputc_r+0x22>
 800d654:	6813      	ldr	r3, [r2, #0]
 800d656:	1c58      	adds	r0, r3, #1
 800d658:	6010      	str	r0, [r2, #0]
 800d65a:	7019      	strb	r1, [r3, #0]
 800d65c:	0008      	movs	r0, r1
 800d65e:	bd10      	pop	{r4, pc}
 800d660:	f000 f930 	bl	800d8c4 <__swbuf_r>
 800d664:	0001      	movs	r1, r0
 800d666:	e7f9      	b.n	800d65c <__sfputc_r+0x1e>

0800d668 <__sfputs_r>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	0006      	movs	r6, r0
 800d66c:	000f      	movs	r7, r1
 800d66e:	0014      	movs	r4, r2
 800d670:	18d5      	adds	r5, r2, r3
 800d672:	42ac      	cmp	r4, r5
 800d674:	d101      	bne.n	800d67a <__sfputs_r+0x12>
 800d676:	2000      	movs	r0, #0
 800d678:	e007      	b.n	800d68a <__sfputs_r+0x22>
 800d67a:	7821      	ldrb	r1, [r4, #0]
 800d67c:	003a      	movs	r2, r7
 800d67e:	0030      	movs	r0, r6
 800d680:	f7ff ffdd 	bl	800d63e <__sfputc_r>
 800d684:	3401      	adds	r4, #1
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	d1f3      	bne.n	800d672 <__sfputs_r+0xa>
 800d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d68c <_vfiprintf_r>:
 800d68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68e:	b0a1      	sub	sp, #132	@ 0x84
 800d690:	000f      	movs	r7, r1
 800d692:	0015      	movs	r5, r2
 800d694:	001e      	movs	r6, r3
 800d696:	9003      	str	r0, [sp, #12]
 800d698:	2800      	cmp	r0, #0
 800d69a:	d004      	beq.n	800d6a6 <_vfiprintf_r+0x1a>
 800d69c:	6a03      	ldr	r3, [r0, #32]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <_vfiprintf_r+0x1a>
 800d6a2:	f7fe f86b 	bl	800b77c <__sinit>
 800d6a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6a8:	07db      	lsls	r3, r3, #31
 800d6aa:	d405      	bmi.n	800d6b8 <_vfiprintf_r+0x2c>
 800d6ac:	89bb      	ldrh	r3, [r7, #12]
 800d6ae:	059b      	lsls	r3, r3, #22
 800d6b0:	d402      	bmi.n	800d6b8 <_vfiprintf_r+0x2c>
 800d6b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d6b4:	f7fe f99f 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800d6b8:	89bb      	ldrh	r3, [r7, #12]
 800d6ba:	071b      	lsls	r3, r3, #28
 800d6bc:	d502      	bpl.n	800d6c4 <_vfiprintf_r+0x38>
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d113      	bne.n	800d6ec <_vfiprintf_r+0x60>
 800d6c4:	0039      	movs	r1, r7
 800d6c6:	9803      	ldr	r0, [sp, #12]
 800d6c8:	f000 f93e 	bl	800d948 <__swsetup_r>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d00d      	beq.n	800d6ec <_vfiprintf_r+0x60>
 800d6d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6d2:	07db      	lsls	r3, r3, #31
 800d6d4:	d503      	bpl.n	800d6de <_vfiprintf_r+0x52>
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	4240      	negs	r0, r0
 800d6da:	b021      	add	sp, #132	@ 0x84
 800d6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6de:	89bb      	ldrh	r3, [r7, #12]
 800d6e0:	059b      	lsls	r3, r3, #22
 800d6e2:	d4f8      	bmi.n	800d6d6 <_vfiprintf_r+0x4a>
 800d6e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d6e6:	f7fe f987 	bl	800b9f8 <__retarget_lock_release_recursive>
 800d6ea:	e7f4      	b.n	800d6d6 <_vfiprintf_r+0x4a>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	ac08      	add	r4, sp, #32
 800d6f0:	6163      	str	r3, [r4, #20]
 800d6f2:	3320      	adds	r3, #32
 800d6f4:	7663      	strb	r3, [r4, #25]
 800d6f6:	3310      	adds	r3, #16
 800d6f8:	76a3      	strb	r3, [r4, #26]
 800d6fa:	9607      	str	r6, [sp, #28]
 800d6fc:	002e      	movs	r6, r5
 800d6fe:	7833      	ldrb	r3, [r6, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <_vfiprintf_r+0x7c>
 800d704:	2b25      	cmp	r3, #37	@ 0x25
 800d706:	d148      	bne.n	800d79a <_vfiprintf_r+0x10e>
 800d708:	1b73      	subs	r3, r6, r5
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	42ae      	cmp	r6, r5
 800d70e:	d00b      	beq.n	800d728 <_vfiprintf_r+0x9c>
 800d710:	002a      	movs	r2, r5
 800d712:	0039      	movs	r1, r7
 800d714:	9803      	ldr	r0, [sp, #12]
 800d716:	f7ff ffa7 	bl	800d668 <__sfputs_r>
 800d71a:	3001      	adds	r0, #1
 800d71c:	d100      	bne.n	800d720 <_vfiprintf_r+0x94>
 800d71e:	e0ae      	b.n	800d87e <_vfiprintf_r+0x1f2>
 800d720:	6963      	ldr	r3, [r4, #20]
 800d722:	9a05      	ldr	r2, [sp, #20]
 800d724:	189b      	adds	r3, r3, r2
 800d726:	6163      	str	r3, [r4, #20]
 800d728:	7833      	ldrb	r3, [r6, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d100      	bne.n	800d730 <_vfiprintf_r+0xa4>
 800d72e:	e0a6      	b.n	800d87e <_vfiprintf_r+0x1f2>
 800d730:	2201      	movs	r2, #1
 800d732:	2300      	movs	r3, #0
 800d734:	4252      	negs	r2, r2
 800d736:	6062      	str	r2, [r4, #4]
 800d738:	a904      	add	r1, sp, #16
 800d73a:	3254      	adds	r2, #84	@ 0x54
 800d73c:	1852      	adds	r2, r2, r1
 800d73e:	1c75      	adds	r5, r6, #1
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	60e3      	str	r3, [r4, #12]
 800d744:	60a3      	str	r3, [r4, #8]
 800d746:	7013      	strb	r3, [r2, #0]
 800d748:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d74a:	4b59      	ldr	r3, [pc, #356]	@ (800d8b0 <_vfiprintf_r+0x224>)
 800d74c:	2205      	movs	r2, #5
 800d74e:	0018      	movs	r0, r3
 800d750:	7829      	ldrb	r1, [r5, #0]
 800d752:	9305      	str	r3, [sp, #20]
 800d754:	f7fe f959 	bl	800ba0a <memchr>
 800d758:	1c6e      	adds	r6, r5, #1
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d11f      	bne.n	800d79e <_vfiprintf_r+0x112>
 800d75e:	6822      	ldr	r2, [r4, #0]
 800d760:	06d3      	lsls	r3, r2, #27
 800d762:	d504      	bpl.n	800d76e <_vfiprintf_r+0xe2>
 800d764:	2353      	movs	r3, #83	@ 0x53
 800d766:	a904      	add	r1, sp, #16
 800d768:	185b      	adds	r3, r3, r1
 800d76a:	2120      	movs	r1, #32
 800d76c:	7019      	strb	r1, [r3, #0]
 800d76e:	0713      	lsls	r3, r2, #28
 800d770:	d504      	bpl.n	800d77c <_vfiprintf_r+0xf0>
 800d772:	2353      	movs	r3, #83	@ 0x53
 800d774:	a904      	add	r1, sp, #16
 800d776:	185b      	adds	r3, r3, r1
 800d778:	212b      	movs	r1, #43	@ 0x2b
 800d77a:	7019      	strb	r1, [r3, #0]
 800d77c:	782b      	ldrb	r3, [r5, #0]
 800d77e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d780:	d016      	beq.n	800d7b0 <_vfiprintf_r+0x124>
 800d782:	002e      	movs	r6, r5
 800d784:	2100      	movs	r1, #0
 800d786:	200a      	movs	r0, #10
 800d788:	68e3      	ldr	r3, [r4, #12]
 800d78a:	7832      	ldrb	r2, [r6, #0]
 800d78c:	1c75      	adds	r5, r6, #1
 800d78e:	3a30      	subs	r2, #48	@ 0x30
 800d790:	2a09      	cmp	r2, #9
 800d792:	d950      	bls.n	800d836 <_vfiprintf_r+0x1aa>
 800d794:	2900      	cmp	r1, #0
 800d796:	d111      	bne.n	800d7bc <_vfiprintf_r+0x130>
 800d798:	e017      	b.n	800d7ca <_vfiprintf_r+0x13e>
 800d79a:	3601      	adds	r6, #1
 800d79c:	e7af      	b.n	800d6fe <_vfiprintf_r+0x72>
 800d79e:	9b05      	ldr	r3, [sp, #20]
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	1ac0      	subs	r0, r0, r3
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	4083      	lsls	r3, r0
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	0035      	movs	r5, r6
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	e7cc      	b.n	800d74a <_vfiprintf_r+0xbe>
 800d7b0:	9b07      	ldr	r3, [sp, #28]
 800d7b2:	1d19      	adds	r1, r3, #4
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	9107      	str	r1, [sp, #28]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	db01      	blt.n	800d7c0 <_vfiprintf_r+0x134>
 800d7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7be:	e004      	b.n	800d7ca <_vfiprintf_r+0x13e>
 800d7c0:	425b      	negs	r3, r3
 800d7c2:	60e3      	str	r3, [r4, #12]
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	7833      	ldrb	r3, [r6, #0]
 800d7cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ce:	d10c      	bne.n	800d7ea <_vfiprintf_r+0x15e>
 800d7d0:	7873      	ldrb	r3, [r6, #1]
 800d7d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7d4:	d134      	bne.n	800d840 <_vfiprintf_r+0x1b4>
 800d7d6:	9b07      	ldr	r3, [sp, #28]
 800d7d8:	3602      	adds	r6, #2
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	9207      	str	r2, [sp, #28]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	da01      	bge.n	800d7e8 <_vfiprintf_r+0x15c>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	425b      	negs	r3, r3
 800d7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ea:	4d32      	ldr	r5, [pc, #200]	@ (800d8b4 <_vfiprintf_r+0x228>)
 800d7ec:	2203      	movs	r2, #3
 800d7ee:	0028      	movs	r0, r5
 800d7f0:	7831      	ldrb	r1, [r6, #0]
 800d7f2:	f7fe f90a 	bl	800ba0a <memchr>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d006      	beq.n	800d808 <_vfiprintf_r+0x17c>
 800d7fa:	2340      	movs	r3, #64	@ 0x40
 800d7fc:	1b40      	subs	r0, r0, r5
 800d7fe:	4083      	lsls	r3, r0
 800d800:	6822      	ldr	r2, [r4, #0]
 800d802:	3601      	adds	r6, #1
 800d804:	4313      	orrs	r3, r2
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	7831      	ldrb	r1, [r6, #0]
 800d80a:	2206      	movs	r2, #6
 800d80c:	482a      	ldr	r0, [pc, #168]	@ (800d8b8 <_vfiprintf_r+0x22c>)
 800d80e:	1c75      	adds	r5, r6, #1
 800d810:	7621      	strb	r1, [r4, #24]
 800d812:	f7fe f8fa 	bl	800ba0a <memchr>
 800d816:	2800      	cmp	r0, #0
 800d818:	d040      	beq.n	800d89c <_vfiprintf_r+0x210>
 800d81a:	4b28      	ldr	r3, [pc, #160]	@ (800d8bc <_vfiprintf_r+0x230>)
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d122      	bne.n	800d866 <_vfiprintf_r+0x1da>
 800d820:	2207      	movs	r2, #7
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	3307      	adds	r3, #7
 800d826:	4393      	bics	r3, r2
 800d828:	3308      	adds	r3, #8
 800d82a:	9307      	str	r3, [sp, #28]
 800d82c:	6963      	ldr	r3, [r4, #20]
 800d82e:	9a04      	ldr	r2, [sp, #16]
 800d830:	189b      	adds	r3, r3, r2
 800d832:	6163      	str	r3, [r4, #20]
 800d834:	e762      	b.n	800d6fc <_vfiprintf_r+0x70>
 800d836:	4343      	muls	r3, r0
 800d838:	002e      	movs	r6, r5
 800d83a:	2101      	movs	r1, #1
 800d83c:	189b      	adds	r3, r3, r2
 800d83e:	e7a4      	b.n	800d78a <_vfiprintf_r+0xfe>
 800d840:	2300      	movs	r3, #0
 800d842:	200a      	movs	r0, #10
 800d844:	0019      	movs	r1, r3
 800d846:	3601      	adds	r6, #1
 800d848:	6063      	str	r3, [r4, #4]
 800d84a:	7832      	ldrb	r2, [r6, #0]
 800d84c:	1c75      	adds	r5, r6, #1
 800d84e:	3a30      	subs	r2, #48	@ 0x30
 800d850:	2a09      	cmp	r2, #9
 800d852:	d903      	bls.n	800d85c <_vfiprintf_r+0x1d0>
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0c8      	beq.n	800d7ea <_vfiprintf_r+0x15e>
 800d858:	9109      	str	r1, [sp, #36]	@ 0x24
 800d85a:	e7c6      	b.n	800d7ea <_vfiprintf_r+0x15e>
 800d85c:	4341      	muls	r1, r0
 800d85e:	002e      	movs	r6, r5
 800d860:	2301      	movs	r3, #1
 800d862:	1889      	adds	r1, r1, r2
 800d864:	e7f1      	b.n	800d84a <_vfiprintf_r+0x1be>
 800d866:	aa07      	add	r2, sp, #28
 800d868:	9200      	str	r2, [sp, #0]
 800d86a:	0021      	movs	r1, r4
 800d86c:	003a      	movs	r2, r7
 800d86e:	4b14      	ldr	r3, [pc, #80]	@ (800d8c0 <_vfiprintf_r+0x234>)
 800d870:	9803      	ldr	r0, [sp, #12]
 800d872:	f7fd fb39 	bl	800aee8 <_printf_float>
 800d876:	9004      	str	r0, [sp, #16]
 800d878:	9b04      	ldr	r3, [sp, #16]
 800d87a:	3301      	adds	r3, #1
 800d87c:	d1d6      	bne.n	800d82c <_vfiprintf_r+0x1a0>
 800d87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d880:	07db      	lsls	r3, r3, #31
 800d882:	d405      	bmi.n	800d890 <_vfiprintf_r+0x204>
 800d884:	89bb      	ldrh	r3, [r7, #12]
 800d886:	059b      	lsls	r3, r3, #22
 800d888:	d402      	bmi.n	800d890 <_vfiprintf_r+0x204>
 800d88a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d88c:	f7fe f8b4 	bl	800b9f8 <__retarget_lock_release_recursive>
 800d890:	89bb      	ldrh	r3, [r7, #12]
 800d892:	065b      	lsls	r3, r3, #25
 800d894:	d500      	bpl.n	800d898 <_vfiprintf_r+0x20c>
 800d896:	e71e      	b.n	800d6d6 <_vfiprintf_r+0x4a>
 800d898:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d89a:	e71e      	b.n	800d6da <_vfiprintf_r+0x4e>
 800d89c:	aa07      	add	r2, sp, #28
 800d89e:	9200      	str	r2, [sp, #0]
 800d8a0:	0021      	movs	r1, r4
 800d8a2:	003a      	movs	r2, r7
 800d8a4:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <_vfiprintf_r+0x234>)
 800d8a6:	9803      	ldr	r0, [sp, #12]
 800d8a8:	f7fd fdcc 	bl	800b444 <_printf_i>
 800d8ac:	e7e3      	b.n	800d876 <_vfiprintf_r+0x1ea>
 800d8ae:	46c0      	nop			@ (mov r8, r8)
 800d8b0:	0800df9a 	.word	0x0800df9a
 800d8b4:	0800dfa0 	.word	0x0800dfa0
 800d8b8:	0800dfa4 	.word	0x0800dfa4
 800d8bc:	0800aee9 	.word	0x0800aee9
 800d8c0:	0800d669 	.word	0x0800d669

0800d8c4 <__swbuf_r>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	0006      	movs	r6, r0
 800d8c8:	000d      	movs	r5, r1
 800d8ca:	0014      	movs	r4, r2
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d004      	beq.n	800d8da <__swbuf_r+0x16>
 800d8d0:	6a03      	ldr	r3, [r0, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <__swbuf_r+0x16>
 800d8d6:	f7fd ff51 	bl	800b77c <__sinit>
 800d8da:	69a3      	ldr	r3, [r4, #24]
 800d8dc:	60a3      	str	r3, [r4, #8]
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	071b      	lsls	r3, r3, #28
 800d8e2:	d502      	bpl.n	800d8ea <__swbuf_r+0x26>
 800d8e4:	6923      	ldr	r3, [r4, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d109      	bne.n	800d8fe <__swbuf_r+0x3a>
 800d8ea:	0021      	movs	r1, r4
 800d8ec:	0030      	movs	r0, r6
 800d8ee:	f000 f82b 	bl	800d948 <__swsetup_r>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d003      	beq.n	800d8fe <__swbuf_r+0x3a>
 800d8f6:	2501      	movs	r5, #1
 800d8f8:	426d      	negs	r5, r5
 800d8fa:	0028      	movs	r0, r5
 800d8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	6820      	ldr	r0, [r4, #0]
 800d902:	b2ef      	uxtb	r7, r5
 800d904:	1ac0      	subs	r0, r0, r3
 800d906:	6963      	ldr	r3, [r4, #20]
 800d908:	b2ed      	uxtb	r5, r5
 800d90a:	4283      	cmp	r3, r0
 800d90c:	dc05      	bgt.n	800d91a <__swbuf_r+0x56>
 800d90e:	0021      	movs	r1, r4
 800d910:	0030      	movs	r0, r6
 800d912:	f7ff fd81 	bl	800d418 <_fflush_r>
 800d916:	2800      	cmp	r0, #0
 800d918:	d1ed      	bne.n	800d8f6 <__swbuf_r+0x32>
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	3001      	adds	r0, #1
 800d91e:	3b01      	subs	r3, #1
 800d920:	60a3      	str	r3, [r4, #8]
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	6022      	str	r2, [r4, #0]
 800d928:	701f      	strb	r7, [r3, #0]
 800d92a:	6963      	ldr	r3, [r4, #20]
 800d92c:	4283      	cmp	r3, r0
 800d92e:	d004      	beq.n	800d93a <__swbuf_r+0x76>
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	07db      	lsls	r3, r3, #31
 800d934:	d5e1      	bpl.n	800d8fa <__swbuf_r+0x36>
 800d936:	2d0a      	cmp	r5, #10
 800d938:	d1df      	bne.n	800d8fa <__swbuf_r+0x36>
 800d93a:	0021      	movs	r1, r4
 800d93c:	0030      	movs	r0, r6
 800d93e:	f7ff fd6b 	bl	800d418 <_fflush_r>
 800d942:	2800      	cmp	r0, #0
 800d944:	d0d9      	beq.n	800d8fa <__swbuf_r+0x36>
 800d946:	e7d6      	b.n	800d8f6 <__swbuf_r+0x32>

0800d948 <__swsetup_r>:
 800d948:	4b2d      	ldr	r3, [pc, #180]	@ (800da00 <__swsetup_r+0xb8>)
 800d94a:	b570      	push	{r4, r5, r6, lr}
 800d94c:	0005      	movs	r5, r0
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	000c      	movs	r4, r1
 800d952:	2800      	cmp	r0, #0
 800d954:	d004      	beq.n	800d960 <__swsetup_r+0x18>
 800d956:	6a03      	ldr	r3, [r0, #32]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <__swsetup_r+0x18>
 800d95c:	f7fd ff0e 	bl	800b77c <__sinit>
 800d960:	220c      	movs	r2, #12
 800d962:	5ea3      	ldrsh	r3, [r4, r2]
 800d964:	071a      	lsls	r2, r3, #28
 800d966:	d423      	bmi.n	800d9b0 <__swsetup_r+0x68>
 800d968:	06da      	lsls	r2, r3, #27
 800d96a:	d407      	bmi.n	800d97c <__swsetup_r+0x34>
 800d96c:	2209      	movs	r2, #9
 800d96e:	602a      	str	r2, [r5, #0]
 800d970:	2240      	movs	r2, #64	@ 0x40
 800d972:	2001      	movs	r0, #1
 800d974:	4313      	orrs	r3, r2
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	4240      	negs	r0, r0
 800d97a:	e03a      	b.n	800d9f2 <__swsetup_r+0xaa>
 800d97c:	075b      	lsls	r3, r3, #29
 800d97e:	d513      	bpl.n	800d9a8 <__swsetup_r+0x60>
 800d980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d982:	2900      	cmp	r1, #0
 800d984:	d008      	beq.n	800d998 <__swsetup_r+0x50>
 800d986:	0023      	movs	r3, r4
 800d988:	3344      	adds	r3, #68	@ 0x44
 800d98a:	4299      	cmp	r1, r3
 800d98c:	d002      	beq.n	800d994 <__swsetup_r+0x4c>
 800d98e:	0028      	movs	r0, r5
 800d990:	f7fe febc 	bl	800c70c <_free_r>
 800d994:	2300      	movs	r3, #0
 800d996:	6363      	str	r3, [r4, #52]	@ 0x34
 800d998:	2224      	movs	r2, #36	@ 0x24
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	4393      	bics	r3, r2
 800d99e:	81a3      	strh	r3, [r4, #12]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	6063      	str	r3, [r4, #4]
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	6023      	str	r3, [r4, #0]
 800d9a8:	2308      	movs	r3, #8
 800d9aa:	89a2      	ldrh	r2, [r4, #12]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <__swsetup_r+0x86>
 800d9b6:	21a0      	movs	r1, #160	@ 0xa0
 800d9b8:	2280      	movs	r2, #128	@ 0x80
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	0089      	lsls	r1, r1, #2
 800d9be:	0092      	lsls	r2, r2, #2
 800d9c0:	400b      	ands	r3, r1
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d003      	beq.n	800d9ce <__swsetup_r+0x86>
 800d9c6:	0021      	movs	r1, r4
 800d9c8:	0028      	movs	r0, r5
 800d9ca:	f000 f88f 	bl	800daec <__smakebuf_r>
 800d9ce:	220c      	movs	r2, #12
 800d9d0:	5ea3      	ldrsh	r3, [r4, r2]
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	001a      	movs	r2, r3
 800d9d6:	400a      	ands	r2, r1
 800d9d8:	420b      	tst	r3, r1
 800d9da:	d00b      	beq.n	800d9f4 <__swsetup_r+0xac>
 800d9dc:	2200      	movs	r2, #0
 800d9de:	60a2      	str	r2, [r4, #8]
 800d9e0:	6962      	ldr	r2, [r4, #20]
 800d9e2:	4252      	negs	r2, r2
 800d9e4:	61a2      	str	r2, [r4, #24]
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	6922      	ldr	r2, [r4, #16]
 800d9ea:	4282      	cmp	r2, r0
 800d9ec:	d101      	bne.n	800d9f2 <__swsetup_r+0xaa>
 800d9ee:	061a      	lsls	r2, r3, #24
 800d9f0:	d4be      	bmi.n	800d970 <__swsetup_r+0x28>
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	0799      	lsls	r1, r3, #30
 800d9f6:	d400      	bmi.n	800d9fa <__swsetup_r+0xb2>
 800d9f8:	6962      	ldr	r2, [r4, #20]
 800d9fa:	60a2      	str	r2, [r4, #8]
 800d9fc:	e7f3      	b.n	800d9e6 <__swsetup_r+0x9e>
 800d9fe:	46c0      	nop			@ (mov r8, r8)
 800da00:	20000028 	.word	0x20000028

0800da04 <_raise_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	0004      	movs	r4, r0
 800da08:	000d      	movs	r5, r1
 800da0a:	291f      	cmp	r1, #31
 800da0c:	d904      	bls.n	800da18 <_raise_r+0x14>
 800da0e:	2316      	movs	r3, #22
 800da10:	6003      	str	r3, [r0, #0]
 800da12:	2001      	movs	r0, #1
 800da14:	4240      	negs	r0, r0
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d004      	beq.n	800da28 <_raise_r+0x24>
 800da1e:	008a      	lsls	r2, r1, #2
 800da20:	189b      	adds	r3, r3, r2
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	2a00      	cmp	r2, #0
 800da26:	d108      	bne.n	800da3a <_raise_r+0x36>
 800da28:	0020      	movs	r0, r4
 800da2a:	f000 f831 	bl	800da90 <_getpid_r>
 800da2e:	002a      	movs	r2, r5
 800da30:	0001      	movs	r1, r0
 800da32:	0020      	movs	r0, r4
 800da34:	f000 f81a 	bl	800da6c <_kill_r>
 800da38:	e7ed      	b.n	800da16 <_raise_r+0x12>
 800da3a:	2a01      	cmp	r2, #1
 800da3c:	d009      	beq.n	800da52 <_raise_r+0x4e>
 800da3e:	1c51      	adds	r1, r2, #1
 800da40:	d103      	bne.n	800da4a <_raise_r+0x46>
 800da42:	2316      	movs	r3, #22
 800da44:	6003      	str	r3, [r0, #0]
 800da46:	2001      	movs	r0, #1
 800da48:	e7e5      	b.n	800da16 <_raise_r+0x12>
 800da4a:	2100      	movs	r1, #0
 800da4c:	0028      	movs	r0, r5
 800da4e:	6019      	str	r1, [r3, #0]
 800da50:	4790      	blx	r2
 800da52:	2000      	movs	r0, #0
 800da54:	e7df      	b.n	800da16 <_raise_r+0x12>
	...

0800da58 <raise>:
 800da58:	b510      	push	{r4, lr}
 800da5a:	4b03      	ldr	r3, [pc, #12]	@ (800da68 <raise+0x10>)
 800da5c:	0001      	movs	r1, r0
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	f7ff ffd0 	bl	800da04 <_raise_r>
 800da64:	bd10      	pop	{r4, pc}
 800da66:	46c0      	nop			@ (mov r8, r8)
 800da68:	20000028 	.word	0x20000028

0800da6c <_kill_r>:
 800da6c:	2300      	movs	r3, #0
 800da6e:	b570      	push	{r4, r5, r6, lr}
 800da70:	4d06      	ldr	r5, [pc, #24]	@ (800da8c <_kill_r+0x20>)
 800da72:	0004      	movs	r4, r0
 800da74:	0008      	movs	r0, r1
 800da76:	0011      	movs	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f7 f995 	bl	8004da8 <_kill>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d103      	bne.n	800da8a <_kill_r+0x1e>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d000      	beq.n	800da8a <_kill_r+0x1e>
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	200006d8 	.word	0x200006d8

0800da90 <_getpid_r>:
 800da90:	b510      	push	{r4, lr}
 800da92:	f7f7 f983 	bl	8004d9c <_getpid>
 800da96:	bd10      	pop	{r4, pc}

0800da98 <__swhatbuf_r>:
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	000e      	movs	r6, r1
 800da9c:	001d      	movs	r5, r3
 800da9e:	230e      	movs	r3, #14
 800daa0:	5ec9      	ldrsh	r1, [r1, r3]
 800daa2:	0014      	movs	r4, r2
 800daa4:	b096      	sub	sp, #88	@ 0x58
 800daa6:	2900      	cmp	r1, #0
 800daa8:	da0c      	bge.n	800dac4 <__swhatbuf_r+0x2c>
 800daaa:	89b2      	ldrh	r2, [r6, #12]
 800daac:	2380      	movs	r3, #128	@ 0x80
 800daae:	0011      	movs	r1, r2
 800dab0:	4019      	ands	r1, r3
 800dab2:	421a      	tst	r2, r3
 800dab4:	d114      	bne.n	800dae0 <__swhatbuf_r+0x48>
 800dab6:	2380      	movs	r3, #128	@ 0x80
 800dab8:	00db      	lsls	r3, r3, #3
 800daba:	2000      	movs	r0, #0
 800dabc:	6029      	str	r1, [r5, #0]
 800dabe:	6023      	str	r3, [r4, #0]
 800dac0:	b016      	add	sp, #88	@ 0x58
 800dac2:	bd70      	pop	{r4, r5, r6, pc}
 800dac4:	466a      	mov	r2, sp
 800dac6:	f000 f853 	bl	800db70 <_fstat_r>
 800daca:	2800      	cmp	r0, #0
 800dacc:	dbed      	blt.n	800daaa <__swhatbuf_r+0x12>
 800dace:	23f0      	movs	r3, #240	@ 0xf0
 800dad0:	9901      	ldr	r1, [sp, #4]
 800dad2:	021b      	lsls	r3, r3, #8
 800dad4:	4019      	ands	r1, r3
 800dad6:	4b04      	ldr	r3, [pc, #16]	@ (800dae8 <__swhatbuf_r+0x50>)
 800dad8:	18c9      	adds	r1, r1, r3
 800dada:	424b      	negs	r3, r1
 800dadc:	4159      	adcs	r1, r3
 800dade:	e7ea      	b.n	800dab6 <__swhatbuf_r+0x1e>
 800dae0:	2100      	movs	r1, #0
 800dae2:	2340      	movs	r3, #64	@ 0x40
 800dae4:	e7e9      	b.n	800daba <__swhatbuf_r+0x22>
 800dae6:	46c0      	nop			@ (mov r8, r8)
 800dae8:	ffffe000 	.word	0xffffe000

0800daec <__smakebuf_r>:
 800daec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daee:	2602      	movs	r6, #2
 800daf0:	898b      	ldrh	r3, [r1, #12]
 800daf2:	0005      	movs	r5, r0
 800daf4:	000c      	movs	r4, r1
 800daf6:	b085      	sub	sp, #20
 800daf8:	4233      	tst	r3, r6
 800dafa:	d007      	beq.n	800db0c <__smakebuf_r+0x20>
 800dafc:	0023      	movs	r3, r4
 800dafe:	3347      	adds	r3, #71	@ 0x47
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	6123      	str	r3, [r4, #16]
 800db04:	2301      	movs	r3, #1
 800db06:	6163      	str	r3, [r4, #20]
 800db08:	b005      	add	sp, #20
 800db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db0c:	ab03      	add	r3, sp, #12
 800db0e:	aa02      	add	r2, sp, #8
 800db10:	f7ff ffc2 	bl	800da98 <__swhatbuf_r>
 800db14:	9f02      	ldr	r7, [sp, #8]
 800db16:	9001      	str	r0, [sp, #4]
 800db18:	0039      	movs	r1, r7
 800db1a:	0028      	movs	r0, r5
 800db1c:	f7fe fe6c 	bl	800c7f8 <_malloc_r>
 800db20:	2800      	cmp	r0, #0
 800db22:	d108      	bne.n	800db36 <__smakebuf_r+0x4a>
 800db24:	220c      	movs	r2, #12
 800db26:	5ea3      	ldrsh	r3, [r4, r2]
 800db28:	059a      	lsls	r2, r3, #22
 800db2a:	d4ed      	bmi.n	800db08 <__smakebuf_r+0x1c>
 800db2c:	2203      	movs	r2, #3
 800db2e:	4393      	bics	r3, r2
 800db30:	431e      	orrs	r6, r3
 800db32:	81a6      	strh	r6, [r4, #12]
 800db34:	e7e2      	b.n	800dafc <__smakebuf_r+0x10>
 800db36:	2380      	movs	r3, #128	@ 0x80
 800db38:	89a2      	ldrh	r2, [r4, #12]
 800db3a:	6020      	str	r0, [r4, #0]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	81a3      	strh	r3, [r4, #12]
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	6120      	str	r0, [r4, #16]
 800db44:	6167      	str	r7, [r4, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00c      	beq.n	800db64 <__smakebuf_r+0x78>
 800db4a:	0028      	movs	r0, r5
 800db4c:	230e      	movs	r3, #14
 800db4e:	5ee1      	ldrsh	r1, [r4, r3]
 800db50:	f000 f820 	bl	800db94 <_isatty_r>
 800db54:	2800      	cmp	r0, #0
 800db56:	d005      	beq.n	800db64 <__smakebuf_r+0x78>
 800db58:	2303      	movs	r3, #3
 800db5a:	89a2      	ldrh	r2, [r4, #12]
 800db5c:	439a      	bics	r2, r3
 800db5e:	3b02      	subs	r3, #2
 800db60:	4313      	orrs	r3, r2
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	9a01      	ldr	r2, [sp, #4]
 800db68:	4313      	orrs	r3, r2
 800db6a:	81a3      	strh	r3, [r4, #12]
 800db6c:	e7cc      	b.n	800db08 <__smakebuf_r+0x1c>
	...

0800db70 <_fstat_r>:
 800db70:	2300      	movs	r3, #0
 800db72:	b570      	push	{r4, r5, r6, lr}
 800db74:	4d06      	ldr	r5, [pc, #24]	@ (800db90 <_fstat_r+0x20>)
 800db76:	0004      	movs	r4, r0
 800db78:	0008      	movs	r0, r1
 800db7a:	0011      	movs	r1, r2
 800db7c:	602b      	str	r3, [r5, #0]
 800db7e:	f7f7 f973 	bl	8004e68 <_fstat>
 800db82:	1c43      	adds	r3, r0, #1
 800db84:	d103      	bne.n	800db8e <_fstat_r+0x1e>
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d000      	beq.n	800db8e <_fstat_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	200006d8 	.word	0x200006d8

0800db94 <_isatty_r>:
 800db94:	2300      	movs	r3, #0
 800db96:	b570      	push	{r4, r5, r6, lr}
 800db98:	4d06      	ldr	r5, [pc, #24]	@ (800dbb4 <_isatty_r+0x20>)
 800db9a:	0004      	movs	r4, r0
 800db9c:	0008      	movs	r0, r1
 800db9e:	602b      	str	r3, [r5, #0]
 800dba0:	f7f7 f970 	bl	8004e84 <_isatty>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d103      	bne.n	800dbb0 <_isatty_r+0x1c>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d000      	beq.n	800dbb0 <_isatty_r+0x1c>
 800dbae:	6023      	str	r3, [r4, #0]
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	46c0      	nop			@ (mov r8, r8)
 800dbb4:	200006d8 	.word	0x200006d8

0800dbb8 <_init>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	46c0      	nop			@ (mov r8, r8)
 800dbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbbe:	bc08      	pop	{r3}
 800dbc0:	469e      	mov	lr, r3
 800dbc2:	4770      	bx	lr

0800dbc4 <_fini>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbca:	bc08      	pop	{r3}
 800dbcc:	469e      	mov	lr, r3
 800dbce:	4770      	bx	lr
