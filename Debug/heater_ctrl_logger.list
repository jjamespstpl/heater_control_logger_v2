
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d11c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800d1d8  0800d1d8  0000e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d87c  0800d87c  0000f1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d87c  0800d87c  0000f1e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d87c  0800d87c  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d87c  0800d87c  0000e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d880  0800d880  0000e880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d884  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001e4  0800da68  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800da68  0000f6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d36  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c5  00000000  00000000  00027f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e4  00000000  00000000  0002c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eff  00000000  00000000  0002daac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c314  00000000  00000000  000479ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a116c  00000000  00000000  00063cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  00104e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  0010b55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800d1bc 	.word	0x0800d1bc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800d1bc 	.word	0x0800d1bc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fdcf 	bl	8001fd8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd13 	bl	8001e70 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fdc1 	bl	8001fd8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fdb7 	bl	8001fd8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd3d 	bl	8001ef8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd33 	bl	8001ef8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbab 	bl	8000c04 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb33 	bl	8000b24 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb9d 	bl	8000c04 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb93 	bl	8000c04 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb41 	bl	8000b74 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb37 	bl	8000b74 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	024b      	lsls	r3, r1, #9
 8000518:	0a5a      	lsrs	r2, r3, #9
 800051a:	4694      	mov	ip, r2
 800051c:	004a      	lsls	r2, r1, #1
 800051e:	0fc9      	lsrs	r1, r1, #31
 8000520:	46ce      	mov	lr, r9
 8000522:	4647      	mov	r7, r8
 8000524:	4689      	mov	r9, r1
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0246      	lsls	r6, r0, #9
 800052a:	0e2d      	lsrs	r5, r5, #24
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	b580      	push	{r7, lr}
 8000530:	0999      	lsrs	r1, r3, #6
 8000532:	0a77      	lsrs	r7, r6, #9
 8000534:	0fc4      	lsrs	r4, r0, #31
 8000536:	09b6      	lsrs	r6, r6, #6
 8000538:	1aab      	subs	r3, r5, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	d020      	beq.n	8000580 <__aeabi_fadd+0x6c>
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd0c      	ble.n	800055c <__aeabi_fadd+0x48>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d134      	bne.n	80005b0 <__aeabi_fadd+0x9c>
 8000546:	2900      	cmp	r1, #0
 8000548:	d02a      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	2b01      	cmp	r3, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x3e>
 8000550:	e08f      	b.n	8000672 <__aeabi_fadd+0x15e>
 8000552:	2bff      	cmp	r3, #255	@ 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x44>
 8000556:	e0cd      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000558:	0013      	movs	r3, r2
 800055a:	e02f      	b.n	80005bc <__aeabi_fadd+0xa8>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d060      	beq.n	8000622 <__aeabi_fadd+0x10e>
 8000560:	1b53      	subs	r3, r2, r5
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x54>
 8000566:	e0ee      	b.n	8000746 <__aeabi_fadd+0x232>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x5a>
 800056c:	e13e      	b.n	80007ec <__aeabi_fadd+0x2d8>
 800056e:	1e5c      	subs	r4, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e16b      	b.n	800084e <__aeabi_fadd+0x33a>
 8000576:	2bff      	cmp	r3, #255	@ 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x68>
 800057a:	e0b9      	b.n	80006f0 <__aeabi_fadd+0x1dc>
 800057c:	0023      	movs	r3, r4
 800057e:	e0e7      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000580:	2b00      	cmp	r3, #0
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fadd+0x72>
 8000584:	e0a4      	b.n	80006d0 <__aeabi_fadd+0x1bc>
 8000586:	2a00      	cmp	r2, #0
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x14a>
 800058a:	2dff      	cmp	r5, #255	@ 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e0b1      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	4311      	orrs	r1, r2
 8000596:	2b1b      	cmp	r3, #27
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x88>
 800059a:	e0e9      	b.n	8000770 <__aeabi_fadd+0x25c>
 800059c:	002b      	movs	r3, r5
 800059e:	3605      	adds	r6, #5
 80005a0:	08f7      	lsrs	r7, r6, #3
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x94>
 80005a6:	e0a5      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005a8:	027a      	lsls	r2, r7, #9
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e030      	b.n	8000612 <__aeabi_fadd+0xfe>
 80005b0:	2dff      	cmp	r5, #255	@ 0xff
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xa2>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_fadd+0x1e0>
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	4311      	orrs	r1, r2
 80005bc:	2001      	movs	r0, #1
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dc08      	bgt.n	80005d4 <__aeabi_fadd+0xc0>
 80005c2:	0008      	movs	r0, r1
 80005c4:	2220      	movs	r2, #32
 80005c6:	40d8      	lsrs	r0, r3
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4099      	lsls	r1, r3
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	4193      	sbcs	r3, r2
 80005d2:	4318      	orrs	r0, r3
 80005d4:	1a36      	subs	r6, r6, r0
 80005d6:	0173      	lsls	r3, r6, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0xc8>
 80005da:	e071      	b.n	80006c0 <__aeabi_fadd+0x1ac>
 80005dc:	01b6      	lsls	r6, r6, #6
 80005de:	09b7      	lsrs	r7, r6, #6
 80005e0:	0038      	movs	r0, r7
 80005e2:	f002 fdd1 	bl	8003188 <__clzsi2>
 80005e6:	003b      	movs	r3, r7
 80005e8:	3805      	subs	r0, #5
 80005ea:	4083      	lsls	r3, r0
 80005ec:	4285      	cmp	r5, r0
 80005ee:	dd4d      	ble.n	800068c <__aeabi_fadd+0x178>
 80005f0:	4eb4      	ldr	r6, [pc, #720]	@ (80008c4 <__aeabi_fadd+0x3b0>)
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	401e      	ands	r6, r3
 80005f6:	075a      	lsls	r2, r3, #29
 80005f8:	d068      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80005fa:	220f      	movs	r2, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d064      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 8000602:	3604      	adds	r6, #4
 8000604:	0173      	lsls	r3, r6, #5
 8000606:	d561      	bpl.n	80006cc <__aeabi_fadd+0x1b8>
 8000608:	1c68      	adds	r0, r5, #1
 800060a:	2dfe      	cmp	r5, #254	@ 0xfe
 800060c:	d154      	bne.n	80006b8 <__aeabi_fadd+0x1a4>
 800060e:	20ff      	movs	r0, #255	@ 0xff
 8000610:	2200      	movs	r2, #0
 8000612:	05c0      	lsls	r0, r0, #23
 8000614:	4310      	orrs	r0, r2
 8000616:	07e4      	lsls	r4, r4, #31
 8000618:	4320      	orrs	r0, r4
 800061a:	bcc0      	pop	{r6, r7}
 800061c:	46b9      	mov	r9, r7
 800061e:	46b0      	mov	r8, r6
 8000620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000622:	22fe      	movs	r2, #254	@ 0xfe
 8000624:	4690      	mov	r8, r2
 8000626:	1c68      	adds	r0, r5, #1
 8000628:	0002      	movs	r2, r0
 800062a:	4640      	mov	r0, r8
 800062c:	4210      	tst	r0, r2
 800062e:	d16b      	bne.n	8000708 <__aeabi_fadd+0x1f4>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0dd      	b.n	80007f2 <__aeabi_fadd+0x2de>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x128>
 800063a:	e102      	b.n	8000842 <__aeabi_fadd+0x32e>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0b3      	beq.n	80005a8 <__aeabi_fadd+0x94>
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	1a77      	subs	r7, r6, r1
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4217      	tst	r7, r2
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x138>
 800064a:	e136      	b.n	80008ba <__aeabi_fadd+0x3a6>
 800064c:	464c      	mov	r4, r9
 800064e:	1b8e      	subs	r6, r1, r6
 8000650:	d061      	beq.n	8000716 <__aeabi_fadd+0x202>
 8000652:	2001      	movs	r0, #1
 8000654:	4216      	tst	r6, r2
 8000656:	d130      	bne.n	80006ba <__aeabi_fadd+0x1a6>
 8000658:	2300      	movs	r3, #0
 800065a:	08f7      	lsrs	r7, r6, #3
 800065c:	e7a4      	b.n	80005a8 <__aeabi_fadd+0x94>
 800065e:	2900      	cmp	r1, #0
 8000660:	d09e      	beq.n	80005a0 <__aeabi_fadd+0x8c>
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	2b01      	cmp	r3, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x156>
 8000668:	e0ca      	b.n	8000800 <__aeabi_fadd+0x2ec>
 800066a:	2bff      	cmp	r3, #255	@ 0xff
 800066c:	d042      	beq.n	80006f4 <__aeabi_fadd+0x1e0>
 800066e:	0013      	movs	r3, r2
 8000670:	e791      	b.n	8000596 <__aeabi_fadd+0x82>
 8000672:	1a71      	subs	r1, r6, r1
 8000674:	014b      	lsls	r3, r1, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x166>
 8000678:	e0d1      	b.n	800081e <__aeabi_fadd+0x30a>
 800067a:	018f      	lsls	r7, r1, #6
 800067c:	09bf      	lsrs	r7, r7, #6
 800067e:	0038      	movs	r0, r7
 8000680:	f002 fd82 	bl	8003188 <__clzsi2>
 8000684:	003b      	movs	r3, r7
 8000686:	3805      	subs	r0, #5
 8000688:	4083      	lsls	r3, r0
 800068a:	2501      	movs	r5, #1
 800068c:	2220      	movs	r2, #32
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	3001      	adds	r0, #1
 8000692:	1a12      	subs	r2, r2, r0
 8000694:	001e      	movs	r6, r3
 8000696:	4093      	lsls	r3, r2
 8000698:	40c6      	lsrs	r6, r0
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431e      	orrs	r6, r3
 80006a0:	d039      	beq.n	8000716 <__aeabi_fadd+0x202>
 80006a2:	0773      	lsls	r3, r6, #29
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x194>
 80006a6:	e11b      	b.n	80008e0 <__aeabi_fadd+0x3cc>
 80006a8:	230f      	movs	r3, #15
 80006aa:	2500      	movs	r5, #0
 80006ac:	4033      	ands	r3, r6
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d1a7      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006b2:	2001      	movs	r0, #1
 80006b4:	0172      	lsls	r2, r6, #5
 80006b6:	d57c      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80006b8:	b2c0      	uxtb	r0, r0
 80006ba:	01b2      	lsls	r2, r6, #6
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	e7a8      	b.n	8000612 <__aeabi_fadd+0xfe>
 80006c0:	0773      	lsls	r3, r6, #29
 80006c2:	d003      	beq.n	80006cc <__aeabi_fadd+0x1b8>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4033      	ands	r3, r6
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d19a      	bne.n	8000602 <__aeabi_fadd+0xee>
 80006cc:	002b      	movs	r3, r5
 80006ce:	e767      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <__aeabi_fadd+0x208>
 80006d4:	1b53      	subs	r3, r2, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d17b      	bne.n	80007d2 <__aeabi_fadd+0x2be>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x1cc>
 80006de:	e086      	b.n	80007ee <__aeabi_fadd+0x2da>
 80006e0:	1e5d      	subs	r5, r3, #1
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1d4>
 80006e6:	e08b      	b.n	8000800 <__aeabi_fadd+0x2ec>
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d002      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80006ec:	002b      	movs	r3, r5
 80006ee:	e075      	b.n	80007dc <__aeabi_fadd+0x2c8>
 80006f0:	464c      	mov	r4, r9
 80006f2:	4667      	mov	r7, ip
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x1e6>
 80006f8:	e789      	b.n	800060e <__aeabi_fadd+0xfa>
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	433a      	orrs	r2, r7
 8000700:	0252      	lsls	r2, r2, #9
 8000702:	20ff      	movs	r0, #255	@ 0xff
 8000704:	0a52      	lsrs	r2, r2, #9
 8000706:	e784      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000708:	1a77      	subs	r7, r6, r1
 800070a:	017b      	lsls	r3, r7, #5
 800070c:	d46b      	bmi.n	80007e6 <__aeabi_fadd+0x2d2>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x200>
 8000712:	e765      	b.n	80005e0 <__aeabi_fadd+0xcc>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	e77a      	b.n	8000612 <__aeabi_fadd+0xfe>
 800071c:	22fe      	movs	r2, #254	@ 0xfe
 800071e:	1c6b      	adds	r3, r5, #1
 8000720:	421a      	tst	r2, r3
 8000722:	d149      	bne.n	80007b8 <__aeabi_fadd+0x2a4>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x216>
 8000728:	e09f      	b.n	800086a <__aeabi_fadd+0x356>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x21c>
 800072e:	e0ba      	b.n	80008a6 <__aeabi_fadd+0x392>
 8000730:	2900      	cmp	r1, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x222>
 8000734:	e0cf      	b.n	80008d6 <__aeabi_fadd+0x3c2>
 8000736:	1872      	adds	r2, r6, r1
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x22a>
 800073c:	e0cd      	b.n	80008da <__aeabi_fadd+0x3c6>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	2001      	movs	r0, #1
 8000742:	0a52      	lsrs	r2, r2, #9
 8000744:	e765      	b.n	8000612 <__aeabi_fadd+0xfe>
 8000746:	2aff      	cmp	r2, #255	@ 0xff
 8000748:	d0d2      	beq.n	80006f0 <__aeabi_fadd+0x1dc>
 800074a:	2080      	movs	r0, #128	@ 0x80
 800074c:	04c0      	lsls	r0, r0, #19
 800074e:	4306      	orrs	r6, r0
 8000750:	2001      	movs	r0, #1
 8000752:	2b1b      	cmp	r3, #27
 8000754:	dc08      	bgt.n	8000768 <__aeabi_fadd+0x254>
 8000756:	0030      	movs	r0, r6
 8000758:	2420      	movs	r4, #32
 800075a:	40d8      	lsrs	r0, r3
 800075c:	1ae3      	subs	r3, r4, r3
 800075e:	409e      	lsls	r6, r3
 8000760:	0033      	movs	r3, r6
 8000762:	1e5c      	subs	r4, r3, #1
 8000764:	41a3      	sbcs	r3, r4
 8000766:	4318      	orrs	r0, r3
 8000768:	464c      	mov	r4, r9
 800076a:	0015      	movs	r5, r2
 800076c:	1a0e      	subs	r6, r1, r0
 800076e:	e732      	b.n	80005d6 <__aeabi_fadd+0xc2>
 8000770:	0008      	movs	r0, r1
 8000772:	2220      	movs	r2, #32
 8000774:	40d8      	lsrs	r0, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	4099      	lsls	r1, r3
 800077a:	000b      	movs	r3, r1
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	4193      	sbcs	r3, r2
 8000780:	4303      	orrs	r3, r0
 8000782:	18f6      	adds	r6, r6, r3
 8000784:	0173      	lsls	r3, r6, #5
 8000786:	d59b      	bpl.n	80006c0 <__aeabi_fadd+0x1ac>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x27c>
 800078e:	e73e      	b.n	800060e <__aeabi_fadd+0xfa>
 8000790:	2301      	movs	r3, #1
 8000792:	494d      	ldr	r1, [pc, #308]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000794:	0872      	lsrs	r2, r6, #1
 8000796:	4033      	ands	r3, r6
 8000798:	400a      	ands	r2, r1
 800079a:	431a      	orrs	r2, r3
 800079c:	0016      	movs	r6, r2
 800079e:	0753      	lsls	r3, r2, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e72a      	b.n	8000602 <__aeabi_fadd+0xee>
 80007ac:	0173      	lsls	r3, r6, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fadd+0x29e>
 80007b0:	e72a      	b.n	8000608 <__aeabi_fadd+0xf4>
 80007b2:	002b      	movs	r3, r5
 80007b4:	08f7      	lsrs	r7, r6, #3
 80007b6:	e6f7      	b.n	80005a8 <__aeabi_fadd+0x94>
 80007b8:	2bff      	cmp	r3, #255	@ 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x2aa>
 80007bc:	e727      	b.n	800060e <__aeabi_fadd+0xfa>
 80007be:	1871      	adds	r1, r6, r1
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	074a      	lsls	r2, r1, #29
 80007c4:	d02f      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007c6:	220f      	movs	r2, #15
 80007c8:	400a      	ands	r2, r1
 80007ca:	2a04      	cmp	r2, #4
 80007cc:	d02b      	beq.n	8000826 <__aeabi_fadd+0x312>
 80007ce:	1d0e      	adds	r6, r1, #4
 80007d0:	e6e6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d08d      	beq.n	80006f2 <__aeabi_fadd+0x1de>
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	04c0      	lsls	r0, r0, #19
 80007da:	4306      	orrs	r6, r0
 80007dc:	2b1b      	cmp	r3, #27
 80007de:	dd24      	ble.n	800082a <__aeabi_fadd+0x316>
 80007e0:	0013      	movs	r3, r2
 80007e2:	1d4e      	adds	r6, r1, #5
 80007e4:	e6dc      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007e6:	464c      	mov	r4, r9
 80007e8:	1b8f      	subs	r7, r1, r6
 80007ea:	e6f9      	b.n	80005e0 <__aeabi_fadd+0xcc>
 80007ec:	464c      	mov	r4, r9
 80007ee:	000e      	movs	r6, r1
 80007f0:	e6d6      	b.n	80005a0 <__aeabi_fadd+0x8c>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d149      	bne.n	800088a <__aeabi_fadd+0x376>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d068      	beq.n	80008cc <__aeabi_fadd+0x3b8>
 80007fa:	4667      	mov	r7, ip
 80007fc:	464c      	mov	r4, r9
 80007fe:	e77c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000800:	1870      	adds	r0, r6, r1
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d574      	bpl.n	80008f0 <__aeabi_fadd+0x3dc>
 8000806:	4930      	ldr	r1, [pc, #192]	@ (80008c8 <__aeabi_fadd+0x3b4>)
 8000808:	0840      	lsrs	r0, r0, #1
 800080a:	4001      	ands	r1, r0
 800080c:	0743      	lsls	r3, r0, #29
 800080e:	d009      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000810:	230f      	movs	r3, #15
 8000812:	4003      	ands	r3, r0
 8000814:	2b04      	cmp	r3, #4
 8000816:	d005      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000818:	2302      	movs	r3, #2
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	e6c0      	b.n	80005a0 <__aeabi_fadd+0x8c>
 800081e:	2301      	movs	r3, #1
 8000820:	08cf      	lsrs	r7, r1, #3
 8000822:	e6c1      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000824:	2302      	movs	r3, #2
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e6be      	b.n	80005a8 <__aeabi_fadd+0x94>
 800082a:	2520      	movs	r5, #32
 800082c:	0030      	movs	r0, r6
 800082e:	40d8      	lsrs	r0, r3
 8000830:	1aeb      	subs	r3, r5, r3
 8000832:	409e      	lsls	r6, r3
 8000834:	0033      	movs	r3, r6
 8000836:	1e5d      	subs	r5, r3, #1
 8000838:	41ab      	sbcs	r3, r5
 800083a:	4303      	orrs	r3, r0
 800083c:	0015      	movs	r5, r2
 800083e:	185e      	adds	r6, r3, r1
 8000840:	e7a0      	b.n	8000784 <__aeabi_fadd+0x270>
 8000842:	2900      	cmp	r1, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x334>
 8000846:	e765      	b.n	8000714 <__aeabi_fadd+0x200>
 8000848:	464c      	mov	r4, r9
 800084a:	4667      	mov	r7, ip
 800084c:	e6ac      	b.n	80005a8 <__aeabi_fadd+0x94>
 800084e:	1b8f      	subs	r7, r1, r6
 8000850:	017b      	lsls	r3, r7, #5
 8000852:	d52e      	bpl.n	80008b2 <__aeabi_fadd+0x39e>
 8000854:	01bf      	lsls	r7, r7, #6
 8000856:	09bf      	lsrs	r7, r7, #6
 8000858:	0038      	movs	r0, r7
 800085a:	f002 fc95 	bl	8003188 <__clzsi2>
 800085e:	003b      	movs	r3, r7
 8000860:	3805      	subs	r0, #5
 8000862:	4083      	lsls	r3, r0
 8000864:	464c      	mov	r4, r9
 8000866:	3501      	adds	r5, #1
 8000868:	e710      	b.n	800068c <__aeabi_fadd+0x178>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x35c>
 800086e:	e740      	b.n	80006f2 <__aeabi_fadd+0x1de>
 8000870:	2900      	cmp	r1, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x362>
 8000874:	e741      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	429f      	cmp	r7, r3
 800087c:	d200      	bcs.n	8000880 <__aeabi_fadd+0x36c>
 800087e:	e73c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000880:	459c      	cmp	ip, r3
 8000882:	d300      	bcc.n	8000886 <__aeabi_fadd+0x372>
 8000884:	e739      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000886:	4667      	mov	r7, ip
 8000888:	e737      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800088a:	2900      	cmp	r1, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x37c>
 800088e:	e734      	b.n	80006fa <__aeabi_fadd+0x1e6>
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	429f      	cmp	r7, r3
 8000896:	d200      	bcs.n	800089a <__aeabi_fadd+0x386>
 8000898:	e72f      	b.n	80006fa <__aeabi_fadd+0x1e6>
 800089a:	459c      	cmp	ip, r3
 800089c:	d300      	bcc.n	80008a0 <__aeabi_fadd+0x38c>
 800089e:	e72c      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a0:	464c      	mov	r4, r9
 80008a2:	4667      	mov	r7, ip
 80008a4:	e729      	b.n	80006fa <__aeabi_fadd+0x1e6>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x398>
 80008aa:	e734      	b.n	8000716 <__aeabi_fadd+0x202>
 80008ac:	2300      	movs	r3, #0
 80008ae:	08cf      	lsrs	r7, r1, #3
 80008b0:	e67a      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008b2:	464c      	mov	r4, r9
 80008b4:	2301      	movs	r3, #1
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	e676      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x3ac>
 80008be:	e729      	b.n	8000714 <__aeabi_fadd+0x200>
 80008c0:	08ff      	lsrs	r7, r7, #3
 80008c2:	e671      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008c4:	fbffffff 	.word	0xfbffffff
 80008c8:	7dffffff 	.word	0x7dffffff
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2400      	movs	r4, #0
 80008d0:	20ff      	movs	r0, #255	@ 0xff
 80008d2:	03d2      	lsls	r2, r2, #15
 80008d4:	e69d      	b.n	8000612 <__aeabi_fadd+0xfe>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e666      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008da:	2300      	movs	r3, #0
 80008dc:	08d7      	lsrs	r7, r2, #3
 80008de:	e663      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008e0:	2001      	movs	r0, #1
 80008e2:	0172      	lsls	r2, r6, #5
 80008e4:	d500      	bpl.n	80008e8 <__aeabi_fadd+0x3d4>
 80008e6:	e6e7      	b.n	80006b8 <__aeabi_fadd+0x1a4>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2300      	movs	r3, #0
 80008ec:	08cf      	lsrs	r7, r1, #3
 80008ee:	e65b      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f0:	2301      	movs	r3, #1
 80008f2:	08c7      	lsrs	r7, r0, #3
 80008f4:	e658      	b.n	80005a8 <__aeabi_fadd+0x94>
 80008f6:	46c0      	nop			@ (mov r8, r8)

080008f8 <__aeabi_fdiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	4646      	mov	r6, r8
 80008fc:	464f      	mov	r7, r9
 80008fe:	46d6      	mov	lr, sl
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0047      	lsls	r7, r0, #1
 8000908:	4698      	mov	r8, r3
 800090a:	1c0e      	adds	r6, r1, #0
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e3f      	lsrs	r7, r7, #24
 8000910:	d05b      	beq.n	80009ca <__aeabi_fdiv+0xd2>
 8000912:	2fff      	cmp	r7, #255	@ 0xff
 8000914:	d021      	beq.n	800095a <__aeabi_fdiv+0x62>
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	00ed      	lsls	r5, r5, #3
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	431d      	orrs	r5, r3
 800091e:	2300      	movs	r3, #0
 8000920:	4699      	mov	r9, r3
 8000922:	469a      	mov	sl, r3
 8000924:	3f7f      	subs	r7, #127	@ 0x7f
 8000926:	0274      	lsls	r4, r6, #9
 8000928:	0073      	lsls	r3, r6, #1
 800092a:	0a64      	lsrs	r4, r4, #9
 800092c:	0e1b      	lsrs	r3, r3, #24
 800092e:	0ff6      	lsrs	r6, r6, #31
 8000930:	2b00      	cmp	r3, #0
 8000932:	d020      	beq.n	8000976 <__aeabi_fdiv+0x7e>
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d043      	beq.n	80009c0 <__aeabi_fdiv+0xc8>
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	2000      	movs	r0, #0
 800093c:	00e4      	lsls	r4, r4, #3
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4314      	orrs	r4, r2
 8000942:	3b7f      	subs	r3, #127	@ 0x7f
 8000944:	4642      	mov	r2, r8
 8000946:	1aff      	subs	r7, r7, r3
 8000948:	464b      	mov	r3, r9
 800094a:	4072      	eors	r2, r6
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d900      	bls.n	8000952 <__aeabi_fdiv+0x5a>
 8000950:	e09d      	b.n	8000a8e <__aeabi_fdiv+0x196>
 8000952:	4971      	ldr	r1, [pc, #452]	@ (8000b18 <__aeabi_fdiv+0x220>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	58cb      	ldr	r3, [r1, r3]
 8000958:	469f      	mov	pc, r3
 800095a:	2d00      	cmp	r5, #0
 800095c:	d15a      	bne.n	8000a14 <__aeabi_fdiv+0x11c>
 800095e:	2308      	movs	r3, #8
 8000960:	4699      	mov	r9, r3
 8000962:	3b06      	subs	r3, #6
 8000964:	0274      	lsls	r4, r6, #9
 8000966:	469a      	mov	sl, r3
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	27ff      	movs	r7, #255	@ 0xff
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	0ff6      	lsrs	r6, r6, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1de      	bne.n	8000934 <__aeabi_fdiv+0x3c>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d13b      	bne.n	80009f2 <__aeabi_fdiv+0xfa>
 800097a:	2301      	movs	r3, #1
 800097c:	4642      	mov	r2, r8
 800097e:	4649      	mov	r1, r9
 8000980:	4072      	eors	r2, r6
 8000982:	4319      	orrs	r1, r3
 8000984:	290e      	cmp	r1, #14
 8000986:	d818      	bhi.n	80009ba <__aeabi_fdiv+0xc2>
 8000988:	4864      	ldr	r0, [pc, #400]	@ (8000b1c <__aeabi_fdiv+0x224>)
 800098a:	0089      	lsls	r1, r1, #2
 800098c:	5841      	ldr	r1, [r0, r1]
 800098e:	468f      	mov	pc, r1
 8000990:	4653      	mov	r3, sl
 8000992:	2b02      	cmp	r3, #2
 8000994:	d100      	bne.n	8000998 <__aeabi_fdiv+0xa0>
 8000996:	e0b8      	b.n	8000b0a <__aeabi_fdiv+0x212>
 8000998:	2b03      	cmp	r3, #3
 800099a:	d06e      	beq.n	8000a7a <__aeabi_fdiv+0x182>
 800099c:	4642      	mov	r2, r8
 800099e:	002c      	movs	r4, r5
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d140      	bne.n	8000a26 <__aeabi_fdiv+0x12e>
 80009a4:	2000      	movs	r0, #0
 80009a6:	2400      	movs	r4, #0
 80009a8:	05c0      	lsls	r0, r0, #23
 80009aa:	4320      	orrs	r0, r4
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4310      	orrs	r0, r2
 80009b0:	bce0      	pop	{r5, r6, r7}
 80009b2:	46ba      	mov	sl, r7
 80009b4:	46b1      	mov	r9, r6
 80009b6:	46a8      	mov	r8, r5
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2400      	movs	r4, #0
 80009be:	e7f3      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	d120      	bne.n	8000a06 <__aeabi_fdiv+0x10e>
 80009c4:	2302      	movs	r3, #2
 80009c6:	3fff      	subs	r7, #255	@ 0xff
 80009c8:	e7d8      	b.n	800097c <__aeabi_fdiv+0x84>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d105      	bne.n	80009da <__aeabi_fdiv+0xe2>
 80009ce:	2304      	movs	r3, #4
 80009d0:	4699      	mov	r9, r3
 80009d2:	3b03      	subs	r3, #3
 80009d4:	2700      	movs	r7, #0
 80009d6:	469a      	mov	sl, r3
 80009d8:	e7a5      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009da:	0028      	movs	r0, r5
 80009dc:	f002 fbd4 	bl	8003188 <__clzsi2>
 80009e0:	2776      	movs	r7, #118	@ 0x76
 80009e2:	1f43      	subs	r3, r0, #5
 80009e4:	409d      	lsls	r5, r3
 80009e6:	2300      	movs	r3, #0
 80009e8:	427f      	negs	r7, r7
 80009ea:	4699      	mov	r9, r3
 80009ec:	469a      	mov	sl, r3
 80009ee:	1a3f      	subs	r7, r7, r0
 80009f0:	e799      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009f2:	0020      	movs	r0, r4
 80009f4:	f002 fbc8 	bl	8003188 <__clzsi2>
 80009f8:	1f43      	subs	r3, r0, #5
 80009fa:	409c      	lsls	r4, r3
 80009fc:	2376      	movs	r3, #118	@ 0x76
 80009fe:	425b      	negs	r3, r3
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	2000      	movs	r0, #0
 8000a04:	e79e      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	464a      	mov	r2, r9
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	4691      	mov	r9, r2
 8000a0e:	2003      	movs	r0, #3
 8000a10:	33fc      	adds	r3, #252	@ 0xfc
 8000a12:	e797      	b.n	8000944 <__aeabi_fdiv+0x4c>
 8000a14:	230c      	movs	r3, #12
 8000a16:	4699      	mov	r9, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	27ff      	movs	r7, #255	@ 0xff
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	e782      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a20:	2803      	cmp	r0, #3
 8000a22:	d02c      	beq.n	8000a7e <__aeabi_fdiv+0x186>
 8000a24:	0032      	movs	r2, r6
 8000a26:	0038      	movs	r0, r7
 8000a28:	307f      	adds	r0, #127	@ 0x7f
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	dd47      	ble.n	8000abe <__aeabi_fdiv+0x1c6>
 8000a2e:	0763      	lsls	r3, r4, #29
 8000a30:	d004      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a32:	230f      	movs	r3, #15
 8000a34:	4023      	ands	r3, r4
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fdiv+0x144>
 8000a3a:	3404      	adds	r4, #4
 8000a3c:	0123      	lsls	r3, r4, #4
 8000a3e:	d503      	bpl.n	8000a48 <__aeabi_fdiv+0x150>
 8000a40:	0038      	movs	r0, r7
 8000a42:	4b37      	ldr	r3, [pc, #220]	@ (8000b20 <__aeabi_fdiv+0x228>)
 8000a44:	3080      	adds	r0, #128	@ 0x80
 8000a46:	401c      	ands	r4, r3
 8000a48:	28fe      	cmp	r0, #254	@ 0xfe
 8000a4a:	dcb6      	bgt.n	80009ba <__aeabi_fdiv+0xc2>
 8000a4c:	01a4      	lsls	r4, r4, #6
 8000a4e:	0a64      	lsrs	r4, r4, #9
 8000a50:	b2c0      	uxtb	r0, r0
 8000a52:	e7a9      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a54:	2480      	movs	r4, #128	@ 0x80
 8000a56:	2200      	movs	r2, #0
 8000a58:	20ff      	movs	r0, #255	@ 0xff
 8000a5a:	03e4      	lsls	r4, r4, #15
 8000a5c:	e7a4      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	421d      	tst	r5, r3
 8000a64:	d001      	beq.n	8000a6a <__aeabi_fdiv+0x172>
 8000a66:	421c      	tst	r4, r3
 8000a68:	d00b      	beq.n	8000a82 <__aeabi_fdiv+0x18a>
 8000a6a:	2480      	movs	r4, #128	@ 0x80
 8000a6c:	03e4      	lsls	r4, r4, #15
 8000a6e:	432c      	orrs	r4, r5
 8000a70:	0264      	lsls	r4, r4, #9
 8000a72:	4642      	mov	r2, r8
 8000a74:	20ff      	movs	r0, #255	@ 0xff
 8000a76:	0a64      	lsrs	r4, r4, #9
 8000a78:	e796      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a7a:	4646      	mov	r6, r8
 8000a7c:	002c      	movs	r4, r5
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	03db      	lsls	r3, r3, #15
 8000a82:	431c      	orrs	r4, r3
 8000a84:	0264      	lsls	r4, r4, #9
 8000a86:	0032      	movs	r2, r6
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	0a64      	lsrs	r4, r4, #9
 8000a8c:	e78c      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000a8e:	016d      	lsls	r5, r5, #5
 8000a90:	0160      	lsls	r0, r4, #5
 8000a92:	4285      	cmp	r5, r0
 8000a94:	d22d      	bcs.n	8000af2 <__aeabi_fdiv+0x1fa>
 8000a96:	231b      	movs	r3, #27
 8000a98:	2400      	movs	r4, #0
 8000a9a:	3f01      	subs	r7, #1
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	0029      	movs	r1, r5
 8000aa0:	0064      	lsls	r4, r4, #1
 8000aa2:	006d      	lsls	r5, r5, #1
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	db01      	blt.n	8000aac <__aeabi_fdiv+0x1b4>
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	d301      	bcc.n	8000ab0 <__aeabi_fdiv+0x1b8>
 8000aac:	1a2d      	subs	r5, r5, r0
 8000aae:	4334      	orrs	r4, r6
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f3      	bne.n	8000a9e <__aeabi_fdiv+0x1a6>
 8000ab6:	1e6b      	subs	r3, r5, #1
 8000ab8:	419d      	sbcs	r5, r3
 8000aba:	432c      	orrs	r4, r5
 8000abc:	e7b3      	b.n	8000a26 <__aeabi_fdiv+0x12e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	1a1b      	subs	r3, r3, r0
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_fdiv+0x1d0>
 8000ac6:	e76d      	b.n	80009a4 <__aeabi_fdiv+0xac>
 8000ac8:	0021      	movs	r1, r4
 8000aca:	379e      	adds	r7, #158	@ 0x9e
 8000acc:	40d9      	lsrs	r1, r3
 8000ace:	40bc      	lsls	r4, r7
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	1e61      	subs	r1, r4, #1
 8000ad4:	418c      	sbcs	r4, r1
 8000ad6:	4323      	orrs	r3, r4
 8000ad8:	0759      	lsls	r1, r3, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000adc:	210f      	movs	r1, #15
 8000ade:	4019      	ands	r1, r3
 8000ae0:	2904      	cmp	r1, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0x1ee>
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	0159      	lsls	r1, r3, #5
 8000ae8:	d413      	bmi.n	8000b12 <__aeabi_fdiv+0x21a>
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a5c      	lsrs	r4, r3, #9
 8000af0:	e75a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000af2:	231a      	movs	r3, #26
 8000af4:	2401      	movs	r4, #1
 8000af6:	1a2d      	subs	r5, r5, r0
 8000af8:	e7d0      	b.n	8000a9c <__aeabi_fdiv+0x1a4>
 8000afa:	1e98      	subs	r0, r3, #2
 8000afc:	4243      	negs	r3, r0
 8000afe:	4158      	adcs	r0, r3
 8000b00:	4240      	negs	r0, r0
 8000b02:	0032      	movs	r2, r6
 8000b04:	2400      	movs	r4, #0
 8000b06:	b2c0      	uxtb	r0, r0
 8000b08:	e74e      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	2400      	movs	r4, #0
 8000b10:	e74a      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b12:	2001      	movs	r0, #1
 8000b14:	2400      	movs	r4, #0
 8000b16:	e747      	b.n	80009a8 <__aeabi_fdiv+0xb0>
 8000b18:	0800d364 	.word	0x0800d364
 8000b1c:	0800d3a4 	.word	0x0800d3a4
 8000b20:	f7ffffff 	.word	0xf7ffffff

08000b24 <__eqsf2>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	0042      	lsls	r2, r0, #1
 8000b28:	024e      	lsls	r6, r1, #9
 8000b2a:	004c      	lsls	r4, r1, #1
 8000b2c:	0245      	lsls	r5, r0, #9
 8000b2e:	0a6d      	lsrs	r5, r5, #9
 8000b30:	0e12      	lsrs	r2, r2, #24
 8000b32:	0fc3      	lsrs	r3, r0, #31
 8000b34:	0a76      	lsrs	r6, r6, #9
 8000b36:	0e24      	lsrs	r4, r4, #24
 8000b38:	0fc9      	lsrs	r1, r1, #31
 8000b3a:	2aff      	cmp	r2, #255	@ 0xff
 8000b3c:	d010      	beq.n	8000b60 <__eqsf2+0x3c>
 8000b3e:	2cff      	cmp	r4, #255	@ 0xff
 8000b40:	d00c      	beq.n	8000b5c <__eqsf2+0x38>
 8000b42:	2001      	movs	r0, #1
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	d10a      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d108      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d00f      	beq.n	8000b70 <__eqsf2+0x4c>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d104      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b54:	0028      	movs	r0, r5
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	e000      	b.n	8000b5e <__eqsf2+0x3a>
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	2001      	movs	r0, #1
 8000b62:	2cff      	cmp	r4, #255	@ 0xff
 8000b64:	d1fb      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b66:	4335      	orrs	r5, r6
 8000b68:	d1f9      	bne.n	8000b5e <__eqsf2+0x3a>
 8000b6a:	404b      	eors	r3, r1
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	e7f6      	b.n	8000b5e <__eqsf2+0x3a>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7f4      	b.n	8000b5e <__eqsf2+0x3a>

08000b74 <__gesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d018      	beq.n	8000bc0 <__gesf2+0x4c>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00a      	beq.n	8000ba8 <__gesf2+0x34>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__gesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10a      	bne.n	8000bb0 <__gesf2+0x3c>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d029      	beq.n	8000bf2 <__gesf2+0x7e>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d12d      	bne.n	8000bfe <__gesf2+0x8a>
 8000ba2:	0048      	lsls	r0, r1, #1
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	bd30      	pop	{r4, r5, pc}
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d125      	bne.n	8000bf8 <__gesf2+0x84>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d101      	bne.n	8000bb4 <__gesf2+0x40>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d0f6      	beq.n	8000ba2 <__gesf2+0x2e>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d019      	beq.n	8000bec <__gesf2+0x78>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	4318      	orrs	r0, r3
 8000bbe:	e7f2      	b.n	8000ba6 <__gesf2+0x32>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d119      	bne.n	8000bf8 <__gesf2+0x84>
 8000bc4:	28ff      	cmp	r0, #255	@ 0xff
 8000bc6:	d1f7      	bne.n	8000bb8 <__gesf2+0x44>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d115      	bne.n	8000bf8 <__gesf2+0x84>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d1f2      	bne.n	8000bb8 <__gesf2+0x44>
 8000bd2:	e7e8      	b.n	8000ba6 <__gesf2+0x32>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0ef      	beq.n	8000bb8 <__gesf2+0x44>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1ed      	bne.n	8000bb8 <__gesf2+0x44>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dceb      	bgt.n	8000bb8 <__gesf2+0x44>
 8000be0:	db04      	blt.n	8000bec <__gesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8e8      	bhi.n	8000bb8 <__gesf2+0x44>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2dc      	bcs.n	8000ba6 <__gesf2+0x32>
 8000bec:	0058      	lsls	r0, r3, #1
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7d9      	b.n	8000ba6 <__gesf2+0x32>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d0d7      	beq.n	8000ba6 <__gesf2+0x32>
 8000bf6:	e7df      	b.n	8000bb8 <__gesf2+0x44>
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	e7d3      	b.n	8000ba6 <__gesf2+0x32>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d1da      	bne.n	8000bb8 <__gesf2+0x44>
 8000c02:	e7ee      	b.n	8000be2 <__gesf2+0x6e>

08000c04 <__lesf2>:
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	0042      	lsls	r2, r0, #1
 8000c08:	0244      	lsls	r4, r0, #9
 8000c0a:	024d      	lsls	r5, r1, #9
 8000c0c:	0fc3      	lsrs	r3, r0, #31
 8000c0e:	0048      	lsls	r0, r1, #1
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0e12      	lsrs	r2, r2, #24
 8000c14:	0a6d      	lsrs	r5, r5, #9
 8000c16:	0e00      	lsrs	r0, r0, #24
 8000c18:	0fc9      	lsrs	r1, r1, #31
 8000c1a:	2aff      	cmp	r2, #255	@ 0xff
 8000c1c:	d017      	beq.n	8000c4e <__lesf2+0x4a>
 8000c1e:	28ff      	cmp	r0, #255	@ 0xff
 8000c20:	d00a      	beq.n	8000c38 <__lesf2+0x34>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d11b      	bne.n	8000c5e <__lesf2+0x5a>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d10a      	bne.n	8000c40 <__lesf2+0x3c>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d01d      	beq.n	8000c6a <__lesf2+0x66>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d12d      	bne.n	8000c8e <__lesf2+0x8a>
 8000c32:	0048      	lsls	r0, r1, #1
 8000c34:	3801      	subs	r0, #1
 8000c36:	e011      	b.n	8000c5c <__lesf2+0x58>
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d10e      	bne.n	8000c5a <__lesf2+0x56>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d101      	bne.n	8000c44 <__lesf2+0x40>
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d0f6      	beq.n	8000c32 <__lesf2+0x2e>
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d10c      	bne.n	8000c62 <__lesf2+0x5e>
 8000c48:	0058      	lsls	r0, r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e006      	b.n	8000c5c <__lesf2+0x58>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d103      	bne.n	8000c5a <__lesf2+0x56>
 8000c52:	28ff      	cmp	r0, #255	@ 0xff
 8000c54:	d105      	bne.n	8000c62 <__lesf2+0x5e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d015      	beq.n	8000c86 <__lesf2+0x82>
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	bd30      	pop	{r4, r5, pc}
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d106      	bne.n	8000c70 <__lesf2+0x6c>
 8000c62:	2001      	movs	r0, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	4318      	orrs	r0, r3
 8000c68:	e7f8      	b.n	8000c5c <__lesf2+0x58>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d0f6      	beq.n	8000c5c <__lesf2+0x58>
 8000c6e:	e7f8      	b.n	8000c62 <__lesf2+0x5e>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d1f6      	bne.n	8000c62 <__lesf2+0x5e>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	dcf4      	bgt.n	8000c62 <__lesf2+0x5e>
 8000c78:	dbe6      	blt.n	8000c48 <__lesf2+0x44>
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	d8f1      	bhi.n	8000c62 <__lesf2+0x5e>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	42ac      	cmp	r4, r5
 8000c82:	d2eb      	bcs.n	8000c5c <__lesf2+0x58>
 8000c84:	e7e0      	b.n	8000c48 <__lesf2+0x44>
 8000c86:	2000      	movs	r0, #0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d1ea      	bne.n	8000c62 <__lesf2+0x5e>
 8000c8c:	e7e6      	b.n	8000c5c <__lesf2+0x58>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d1e7      	bne.n	8000c62 <__lesf2+0x5e>
 8000c92:	e7f2      	b.n	8000c7a <__lesf2+0x76>

08000c94 <__aeabi_fmul>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	464f      	mov	r7, r9
 8000c98:	4646      	mov	r6, r8
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	0044      	lsls	r4, r0, #1
 8000c9e:	b5c0      	push	{r6, r7, lr}
 8000ca0:	0246      	lsls	r6, r0, #9
 8000ca2:	1c0f      	adds	r7, r1, #0
 8000ca4:	0a76      	lsrs	r6, r6, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc5      	lsrs	r5, r0, #31
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x1c>
 8000cae:	e0da      	b.n	8000e66 <__aeabi_fmul+0x1d2>
 8000cb0:	2cff      	cmp	r4, #255	@ 0xff
 8000cb2:	d074      	beq.n	8000d9e <__aeabi_fmul+0x10a>
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	00f6      	lsls	r6, r6, #3
 8000cb8:	04db      	lsls	r3, r3, #19
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	3c7f      	subs	r4, #127	@ 0x7f
 8000cc4:	027b      	lsls	r3, r7, #9
 8000cc6:	0a5b      	lsrs	r3, r3, #9
 8000cc8:	4698      	mov	r8, r3
 8000cca:	007b      	lsls	r3, r7, #1
 8000ccc:	0e1b      	lsrs	r3, r3, #24
 8000cce:	0fff      	lsrs	r7, r7, #31
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d074      	beq.n	8000dbe <__aeabi_fmul+0x12a>
 8000cd4:	2bff      	cmp	r3, #255	@ 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fmul+0x46>
 8000cd8:	e08e      	b.n	8000df8 <__aeabi_fmul+0x164>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	04c9      	lsls	r1, r1, #19
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ce6:	002a      	movs	r2, r5
 8000ce8:	18e4      	adds	r4, r4, r3
 8000cea:	464b      	mov	r3, r9
 8000cec:	407a      	eors	r2, r7
 8000cee:	4688      	mov	r8, r1
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	dc75      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd0f      	ble.n	8000d1e <__aeabi_fmul+0x8a>
 8000cfe:	4649      	mov	r1, r9
 8000d00:	2301      	movs	r3, #1
 8000d02:	408b      	lsls	r3, r1
 8000d04:	21a6      	movs	r1, #166	@ 0xa6
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	420b      	tst	r3, r1
 8000d0a:	d169      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000d0c:	2190      	movs	r1, #144	@ 0x90
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	420b      	tst	r3, r1
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x82>
 8000d14:	e100      	b.n	8000f18 <__aeabi_fmul+0x284>
 8000d16:	2188      	movs	r1, #136	@ 0x88
 8000d18:	4219      	tst	r1, r3
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fmul+0x8a>
 8000d1c:	e0f5      	b.n	8000f0a <__aeabi_fmul+0x276>
 8000d1e:	4641      	mov	r1, r8
 8000d20:	0409      	lsls	r1, r1, #16
 8000d22:	0c09      	lsrs	r1, r1, #16
 8000d24:	4643      	mov	r3, r8
 8000d26:	0008      	movs	r0, r1
 8000d28:	0c35      	lsrs	r5, r6, #16
 8000d2a:	0436      	lsls	r6, r6, #16
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0c36      	lsrs	r6, r6, #16
 8000d30:	4370      	muls	r0, r6
 8000d32:	4369      	muls	r1, r5
 8000d34:	435e      	muls	r6, r3
 8000d36:	435d      	muls	r5, r3
 8000d38:	1876      	adds	r6, r6, r1
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	199b      	adds	r3, r3, r6
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d903      	bls.n	8000d4a <__aeabi_fmul+0xb6>
 8000d42:	2180      	movs	r1, #128	@ 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	468c      	mov	ip, r1
 8000d48:	4465      	add	r5, ip
 8000d4a:	0400      	lsls	r0, r0, #16
 8000d4c:	0419      	lsls	r1, r3, #16
 8000d4e:	0c00      	lsrs	r0, r0, #16
 8000d50:	1809      	adds	r1, r1, r0
 8000d52:	018e      	lsls	r6, r1, #6
 8000d54:	1e70      	subs	r0, r6, #1
 8000d56:	4186      	sbcs	r6, r0
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	0e89      	lsrs	r1, r1, #26
 8000d5c:	195b      	adds	r3, r3, r5
 8000d5e:	430e      	orrs	r6, r1
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	431e      	orrs	r6, r3
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	d46c      	bmi.n	8000e42 <__aeabi_fmul+0x1ae>
 8000d68:	0023      	movs	r3, r4
 8000d6a:	337f      	adds	r3, #127	@ 0x7f
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_fmul+0xde>
 8000d70:	e0b1      	b.n	8000ed6 <__aeabi_fmul+0x242>
 8000d72:	0015      	movs	r5, r2
 8000d74:	0771      	lsls	r1, r6, #29
 8000d76:	d00b      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d78:	200f      	movs	r0, #15
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	4030      	ands	r0, r6
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d006      	beq.n	8000d90 <__aeabi_fmul+0xfc>
 8000d82:	3604      	adds	r6, #4
 8000d84:	0132      	lsls	r2, r6, #4
 8000d86:	d503      	bpl.n	8000d90 <__aeabi_fmul+0xfc>
 8000d88:	4b6e      	ldr	r3, [pc, #440]	@ (8000f44 <__aeabi_fmul+0x2b0>)
 8000d8a:	401e      	ands	r6, r3
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	3380      	adds	r3, #128	@ 0x80
 8000d90:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_fmul+0x102>
 8000d94:	e0bd      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000d96:	01b2      	lsls	r2, r6, #6
 8000d98:	0a52      	lsrs	r2, r2, #9
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	e048      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fmul+0x110>
 8000da2:	e092      	b.n	8000eca <__aeabi_fmul+0x236>
 8000da4:	2308      	movs	r3, #8
 8000da6:	4699      	mov	r9, r3
 8000da8:	3b06      	subs	r3, #6
 8000daa:	469a      	mov	sl, r3
 8000dac:	027b      	lsls	r3, r7, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	4698      	mov	r8, r3
 8000db2:	007b      	lsls	r3, r7, #1
 8000db4:	24ff      	movs	r4, #255	@ 0xff
 8000db6:	0e1b      	lsrs	r3, r3, #24
 8000db8:	0fff      	lsrs	r7, r7, #31
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d18a      	bne.n	8000cd4 <__aeabi_fmul+0x40>
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d164      	bne.n	8000e8e <__aeabi_fmul+0x1fa>
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	3201      	adds	r2, #1
 8000dc8:	4311      	orrs	r1, r2
 8000dca:	4689      	mov	r9, r1
 8000dcc:	290a      	cmp	r1, #10
 8000dce:	dc08      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000dd0:	407d      	eors	r5, r7
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	b2ea      	uxtb	r2, r5
 8000dd6:	2902      	cmp	r1, #2
 8000dd8:	dc91      	bgt.n	8000cfe <__aeabi_fmul+0x6a>
 8000dda:	0015      	movs	r5, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	e027      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000de0:	0015      	movs	r5, r2
 8000de2:	4653      	mov	r3, sl
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d100      	bne.n	8000dea <__aeabi_fmul+0x156>
 8000de8:	e093      	b.n	8000f12 <__aeabi_fmul+0x27e>
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d01a      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d12c      	bne.n	8000e4c <__aeabi_fmul+0x1b8>
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	e01b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000df8:	4643      	mov	r3, r8
 8000dfa:	34ff      	adds	r4, #255	@ 0xff
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d055      	beq.n	8000eac <__aeabi_fmul+0x218>
 8000e00:	2103      	movs	r1, #3
 8000e02:	464b      	mov	r3, r9
 8000e04:	430b      	orrs	r3, r1
 8000e06:	0019      	movs	r1, r3
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	dc00      	bgt.n	8000e0e <__aeabi_fmul+0x17a>
 8000e0c:	e092      	b.n	8000f34 <__aeabi_fmul+0x2a0>
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fmul+0x180>
 8000e12:	e08c      	b.n	8000f2e <__aeabi_fmul+0x29a>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	03d2      	lsls	r2, r2, #15
 8000e18:	4216      	tst	r6, r2
 8000e1a:	d003      	beq.n	8000e24 <__aeabi_fmul+0x190>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4213      	tst	r3, r2
 8000e20:	d100      	bne.n	8000e24 <__aeabi_fmul+0x190>
 8000e22:	e07d      	b.n	8000f20 <__aeabi_fmul+0x28c>
 8000e24:	2280      	movs	r2, #128	@ 0x80
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	4332      	orrs	r2, r6
 8000e2a:	0252      	lsls	r2, r2, #9
 8000e2c:	0a52      	lsrs	r2, r2, #9
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	05d8      	lsls	r0, r3, #23
 8000e32:	07ed      	lsls	r5, r5, #31
 8000e34:	4310      	orrs	r0, r2
 8000e36:	4328      	orrs	r0, r5
 8000e38:	bce0      	pop	{r5, r6, r7}
 8000e3a:	46ba      	mov	sl, r7
 8000e3c:	46b1      	mov	r9, r6
 8000e3e:	46a8      	mov	r8, r5
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	2301      	movs	r3, #1
 8000e44:	0015      	movs	r5, r2
 8000e46:	0871      	lsrs	r1, r6, #1
 8000e48:	401e      	ands	r6, r3
 8000e4a:	430e      	orrs	r6, r1
 8000e4c:	0023      	movs	r3, r4
 8000e4e:	3380      	adds	r3, #128	@ 0x80
 8000e50:	1c61      	adds	r1, r4, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd41      	ble.n	8000eda <__aeabi_fmul+0x246>
 8000e56:	0772      	lsls	r2, r6, #29
 8000e58:	d094      	beq.n	8000d84 <__aeabi_fmul+0xf0>
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	4032      	ands	r2, r6
 8000e5e:	2a04      	cmp	r2, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x1d0>
 8000e62:	e78e      	b.n	8000d82 <__aeabi_fmul+0xee>
 8000e64:	e78e      	b.n	8000d84 <__aeabi_fmul+0xf0>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d105      	bne.n	8000e76 <__aeabi_fmul+0x1e2>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	3b03      	subs	r3, #3
 8000e70:	2400      	movs	r4, #0
 8000e72:	469a      	mov	sl, r3
 8000e74:	e726      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e76:	0030      	movs	r0, r6
 8000e78:	f002 f986 	bl	8003188 <__clzsi2>
 8000e7c:	2476      	movs	r4, #118	@ 0x76
 8000e7e:	1f43      	subs	r3, r0, #5
 8000e80:	409e      	lsls	r6, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	4264      	negs	r4, r4
 8000e86:	4699      	mov	r9, r3
 8000e88:	469a      	mov	sl, r3
 8000e8a:	1a24      	subs	r4, r4, r0
 8000e8c:	e71a      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f002 f97a 	bl	8003188 <__clzsi2>
 8000e94:	464b      	mov	r3, r9
 8000e96:	1a24      	subs	r4, r4, r0
 8000e98:	3c76      	subs	r4, #118	@ 0x76
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	dca1      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	3805      	subs	r0, #5
 8000ea2:	4083      	lsls	r3, r0
 8000ea4:	407d      	eors	r5, r7
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	b2ea      	uxtb	r2, r5
 8000eaa:	e724      	b.n	8000cf6 <__aeabi_fmul+0x62>
 8000eac:	464a      	mov	r2, r9
 8000eae:	3302      	adds	r3, #2
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	002a      	movs	r2, r5
 8000eb4:	407a      	eors	r2, r7
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	dc92      	bgt.n	8000de2 <__aeabi_fmul+0x14e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	0015      	movs	r5, r2
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d026      	beq.n	8000f12 <__aeabi_fmul+0x27e>
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	e719      	b.n	8000cfe <__aeabi_fmul+0x6a>
 8000eca:	230c      	movs	r3, #12
 8000ecc:	4699      	mov	r9, r3
 8000ece:	3b09      	subs	r3, #9
 8000ed0:	24ff      	movs	r4, #255	@ 0xff
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	e6f6      	b.n	8000cc4 <__aeabi_fmul+0x30>
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	0021      	movs	r1, r4
 8000eda:	2201      	movs	r2, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b1b      	cmp	r3, #27
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_fmul+0x250>
 8000ee2:	e786      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000ee4:	319e      	adds	r1, #158	@ 0x9e
 8000ee6:	0032      	movs	r2, r6
 8000ee8:	408e      	lsls	r6, r1
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	1e73      	subs	r3, r6, #1
 8000eee:	419e      	sbcs	r6, r3
 8000ef0:	4332      	orrs	r2, r6
 8000ef2:	0753      	lsls	r3, r2, #29
 8000ef4:	d004      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d000      	beq.n	8000f00 <__aeabi_fmul+0x26c>
 8000efe:	3204      	adds	r2, #4
 8000f00:	0153      	lsls	r3, r2, #5
 8000f02:	d510      	bpl.n	8000f26 <__aeabi_fmul+0x292>
 8000f04:	2301      	movs	r3, #1
 8000f06:	2200      	movs	r2, #0
 8000f08:	e792      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f0a:	003d      	movs	r5, r7
 8000f0c:	4646      	mov	r6, r8
 8000f0e:	4682      	mov	sl, r0
 8000f10:	e767      	b.n	8000de2 <__aeabi_fmul+0x14e>
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	2200      	movs	r2, #0
 8000f16:	e78b      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	03d2      	lsls	r2, r2, #15
 8000f1e:	e786      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f20:	003d      	movs	r5, r7
 8000f22:	431a      	orrs	r2, r3
 8000f24:	e783      	b.n	8000e2e <__aeabi_fmul+0x19a>
 8000f26:	0192      	lsls	r2, r2, #6
 8000f28:	2300      	movs	r3, #0
 8000f2a:	0a52      	lsrs	r2, r2, #9
 8000f2c:	e780      	b.n	8000e30 <__aeabi_fmul+0x19c>
 8000f2e:	003d      	movs	r5, r7
 8000f30:	4646      	mov	r6, r8
 8000f32:	e777      	b.n	8000e24 <__aeabi_fmul+0x190>
 8000f34:	002a      	movs	r2, r5
 8000f36:	2301      	movs	r3, #1
 8000f38:	407a      	eors	r2, r7
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	e6e9      	b.n	8000d16 <__aeabi_fmul+0x82>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	f7ffffff 	.word	0xf7ffffff

08000f48 <__aeabi_f2iz>:
 8000f48:	0241      	lsls	r1, r0, #9
 8000f4a:	0042      	lsls	r2, r0, #1
 8000f4c:	0fc3      	lsrs	r3, r0, #31
 8000f4e:	0a49      	lsrs	r1, r1, #9
 8000f50:	2000      	movs	r0, #0
 8000f52:	0e12      	lsrs	r2, r2, #24
 8000f54:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f56:	dd03      	ble.n	8000f60 <__aeabi_f2iz+0x18>
 8000f58:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f5a:	dd02      	ble.n	8000f62 <__aeabi_f2iz+0x1a>
 8000f5c:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <__aeabi_f2iz+0x3c>)
 8000f5e:	1898      	adds	r0, r3, r2
 8000f60:	4770      	bx	lr
 8000f62:	2080      	movs	r0, #128	@ 0x80
 8000f64:	0400      	lsls	r0, r0, #16
 8000f66:	4301      	orrs	r1, r0
 8000f68:	2a95      	cmp	r2, #149	@ 0x95
 8000f6a:	dc07      	bgt.n	8000f7c <__aeabi_f2iz+0x34>
 8000f6c:	2096      	movs	r0, #150	@ 0x96
 8000f6e:	1a82      	subs	r2, r0, r2
 8000f70:	40d1      	lsrs	r1, r2
 8000f72:	4248      	negs	r0, r1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f3      	bne.n	8000f60 <__aeabi_f2iz+0x18>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	e7f1      	b.n	8000f60 <__aeabi_f2iz+0x18>
 8000f7c:	3a96      	subs	r2, #150	@ 0x96
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	e7f7      	b.n	8000f72 <__aeabi_f2iz+0x2a>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	7fffffff 	.word	0x7fffffff

08000f88 <__aeabi_i2f>:
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d012      	beq.n	8000fb4 <__aeabi_i2f+0x2c>
 8000f8e:	17c3      	asrs	r3, r0, #31
 8000f90:	18c5      	adds	r5, r0, r3
 8000f92:	405d      	eors	r5, r3
 8000f94:	0fc4      	lsrs	r4, r0, #31
 8000f96:	0028      	movs	r0, r5
 8000f98:	f002 f8f6 	bl	8003188 <__clzsi2>
 8000f9c:	239e      	movs	r3, #158	@ 0x9e
 8000f9e:	1a1b      	subs	r3, r3, r0
 8000fa0:	2b96      	cmp	r3, #150	@ 0x96
 8000fa2:	dc0f      	bgt.n	8000fc4 <__aeabi_i2f+0x3c>
 8000fa4:	2808      	cmp	r0, #8
 8000fa6:	d038      	beq.n	800101a <__aeabi_i2f+0x92>
 8000fa8:	3808      	subs	r0, #8
 8000faa:	4085      	lsls	r5, r0
 8000fac:	026d      	lsls	r5, r5, #9
 8000fae:	0a6d      	lsrs	r5, r5, #9
 8000fb0:	b2d8      	uxtb	r0, r3
 8000fb2:	e002      	b.n	8000fba <__aeabi_i2f+0x32>
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	2500      	movs	r5, #0
 8000fba:	05c0      	lsls	r0, r0, #23
 8000fbc:	4328      	orrs	r0, r5
 8000fbe:	07e4      	lsls	r4, r4, #31
 8000fc0:	4320      	orrs	r0, r4
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	2b99      	cmp	r3, #153	@ 0x99
 8000fc6:	dc14      	bgt.n	8000ff2 <__aeabi_i2f+0x6a>
 8000fc8:	1f42      	subs	r2, r0, #5
 8000fca:	4095      	lsls	r5, r2
 8000fcc:	002a      	movs	r2, r5
 8000fce:	4915      	ldr	r1, [pc, #84]	@ (8001024 <__aeabi_i2f+0x9c>)
 8000fd0:	4011      	ands	r1, r2
 8000fd2:	0755      	lsls	r5, r2, #29
 8000fd4:	d01c      	beq.n	8001010 <__aeabi_i2f+0x88>
 8000fd6:	250f      	movs	r5, #15
 8000fd8:	402a      	ands	r2, r5
 8000fda:	2a04      	cmp	r2, #4
 8000fdc:	d018      	beq.n	8001010 <__aeabi_i2f+0x88>
 8000fde:	3104      	adds	r1, #4
 8000fe0:	08ca      	lsrs	r2, r1, #3
 8000fe2:	0149      	lsls	r1, r1, #5
 8000fe4:	d515      	bpl.n	8001012 <__aeabi_i2f+0x8a>
 8000fe6:	239f      	movs	r3, #159	@ 0x9f
 8000fe8:	0252      	lsls	r2, r2, #9
 8000fea:	1a18      	subs	r0, r3, r0
 8000fec:	0a55      	lsrs	r5, r2, #9
 8000fee:	b2c0      	uxtb	r0, r0
 8000ff0:	e7e3      	b.n	8000fba <__aeabi_i2f+0x32>
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	0029      	movs	r1, r5
 8000ff6:	1a12      	subs	r2, r2, r0
 8000ff8:	40d1      	lsrs	r1, r2
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	321b      	adds	r2, #27
 8000ffe:	4095      	lsls	r5, r2
 8001000:	002a      	movs	r2, r5
 8001002:	1e55      	subs	r5, r2, #1
 8001004:	41aa      	sbcs	r2, r5
 8001006:	430a      	orrs	r2, r1
 8001008:	4906      	ldr	r1, [pc, #24]	@ (8001024 <__aeabi_i2f+0x9c>)
 800100a:	4011      	ands	r1, r2
 800100c:	0755      	lsls	r5, r2, #29
 800100e:	d1e2      	bne.n	8000fd6 <__aeabi_i2f+0x4e>
 8001010:	08ca      	lsrs	r2, r1, #3
 8001012:	0252      	lsls	r2, r2, #9
 8001014:	0a55      	lsrs	r5, r2, #9
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	e7cf      	b.n	8000fba <__aeabi_i2f+0x32>
 800101a:	026d      	lsls	r5, r5, #9
 800101c:	0a6d      	lsrs	r5, r5, #9
 800101e:	308e      	adds	r0, #142	@ 0x8e
 8001020:	e7cb      	b.n	8000fba <__aeabi_i2f+0x32>
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	fbffffff 	.word	0xfbffffff

08001028 <__aeabi_ui2f>:
 8001028:	b510      	push	{r4, lr}
 800102a:	1e04      	subs	r4, r0, #0
 800102c:	d00d      	beq.n	800104a <__aeabi_ui2f+0x22>
 800102e:	f002 f8ab 	bl	8003188 <__clzsi2>
 8001032:	239e      	movs	r3, #158	@ 0x9e
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	2b96      	cmp	r3, #150	@ 0x96
 8001038:	dc0c      	bgt.n	8001054 <__aeabi_ui2f+0x2c>
 800103a:	2808      	cmp	r0, #8
 800103c:	d034      	beq.n	80010a8 <__aeabi_ui2f+0x80>
 800103e:	3808      	subs	r0, #8
 8001040:	4084      	lsls	r4, r0
 8001042:	0264      	lsls	r4, r4, #9
 8001044:	0a64      	lsrs	r4, r4, #9
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	e001      	b.n	800104e <__aeabi_ui2f+0x26>
 800104a:	2000      	movs	r0, #0
 800104c:	2400      	movs	r4, #0
 800104e:	05c0      	lsls	r0, r0, #23
 8001050:	4320      	orrs	r0, r4
 8001052:	bd10      	pop	{r4, pc}
 8001054:	2b99      	cmp	r3, #153	@ 0x99
 8001056:	dc13      	bgt.n	8001080 <__aeabi_ui2f+0x58>
 8001058:	1f42      	subs	r2, r0, #5
 800105a:	4094      	lsls	r4, r2
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <__aeabi_ui2f+0x88>)
 800105e:	4022      	ands	r2, r4
 8001060:	0761      	lsls	r1, r4, #29
 8001062:	d01c      	beq.n	800109e <__aeabi_ui2f+0x76>
 8001064:	210f      	movs	r1, #15
 8001066:	4021      	ands	r1, r4
 8001068:	2904      	cmp	r1, #4
 800106a:	d018      	beq.n	800109e <__aeabi_ui2f+0x76>
 800106c:	3204      	adds	r2, #4
 800106e:	08d4      	lsrs	r4, r2, #3
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	d515      	bpl.n	80010a0 <__aeabi_ui2f+0x78>
 8001074:	239f      	movs	r3, #159	@ 0x9f
 8001076:	0264      	lsls	r4, r4, #9
 8001078:	1a18      	subs	r0, r3, r0
 800107a:	0a64      	lsrs	r4, r4, #9
 800107c:	b2c0      	uxtb	r0, r0
 800107e:	e7e6      	b.n	800104e <__aeabi_ui2f+0x26>
 8001080:	0002      	movs	r2, r0
 8001082:	0021      	movs	r1, r4
 8001084:	321b      	adds	r2, #27
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	1e51      	subs	r1, r2, #1
 800108c:	418a      	sbcs	r2, r1
 800108e:	2105      	movs	r1, #5
 8001090:	1a09      	subs	r1, r1, r0
 8001092:	40cc      	lsrs	r4, r1
 8001094:	4314      	orrs	r4, r2
 8001096:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <__aeabi_ui2f+0x88>)
 8001098:	4022      	ands	r2, r4
 800109a:	0761      	lsls	r1, r4, #29
 800109c:	d1e2      	bne.n	8001064 <__aeabi_ui2f+0x3c>
 800109e:	08d4      	lsrs	r4, r2, #3
 80010a0:	0264      	lsls	r4, r4, #9
 80010a2:	0a64      	lsrs	r4, r4, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7d2      	b.n	800104e <__aeabi_ui2f+0x26>
 80010a8:	0264      	lsls	r4, r4, #9
 80010aa:	0a64      	lsrs	r4, r4, #9
 80010ac:	308e      	adds	r0, #142	@ 0x8e
 80010ae:	e7ce      	b.n	800104e <__aeabi_ui2f+0x26>
 80010b0:	fbffffff 	.word	0xfbffffff

080010b4 <__aeabi_dadd>:
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	464f      	mov	r7, r9
 80010b8:	4646      	mov	r6, r8
 80010ba:	46d6      	mov	lr, sl
 80010bc:	b5c0      	push	{r6, r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	9000      	str	r0, [sp, #0]
 80010c2:	9101      	str	r1, [sp, #4]
 80010c4:	030e      	lsls	r6, r1, #12
 80010c6:	004c      	lsls	r4, r1, #1
 80010c8:	0fcd      	lsrs	r5, r1, #31
 80010ca:	0a71      	lsrs	r1, r6, #9
 80010cc:	9e00      	ldr	r6, [sp, #0]
 80010ce:	005f      	lsls	r7, r3, #1
 80010d0:	0f76      	lsrs	r6, r6, #29
 80010d2:	430e      	orrs	r6, r1
 80010d4:	9900      	ldr	r1, [sp, #0]
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	00c9      	lsls	r1, r1, #3
 80010dc:	4689      	mov	r9, r1
 80010de:	0319      	lsls	r1, r3, #12
 80010e0:	0d7b      	lsrs	r3, r7, #21
 80010e2:	4698      	mov	r8, r3
 80010e4:	9b01      	ldr	r3, [sp, #4]
 80010e6:	0a49      	lsrs	r1, r1, #9
 80010e8:	0fdb      	lsrs	r3, r3, #31
 80010ea:	469c      	mov	ip, r3
 80010ec:	9b00      	ldr	r3, [sp, #0]
 80010ee:	9a00      	ldr	r2, [sp, #0]
 80010f0:	0f5b      	lsrs	r3, r3, #29
 80010f2:	430b      	orrs	r3, r1
 80010f4:	4641      	mov	r1, r8
 80010f6:	0d64      	lsrs	r4, r4, #21
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	1a61      	subs	r1, r4, r1
 80010fc:	4565      	cmp	r5, ip
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0x4e>
 8001100:	e0a6      	b.n	8001250 <__aeabi_dadd+0x19c>
 8001102:	2900      	cmp	r1, #0
 8001104:	dd72      	ble.n	80011ec <__aeabi_dadd+0x138>
 8001106:	4647      	mov	r7, r8
 8001108:	2f00      	cmp	r7, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x5a>
 800110c:	e0dd      	b.n	80012ca <__aeabi_dadd+0x216>
 800110e:	4fcc      	ldr	r7, [pc, #816]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001110:	42bc      	cmp	r4, r7
 8001112:	d100      	bne.n	8001116 <__aeabi_dadd+0x62>
 8001114:	e19a      	b.n	800144c <__aeabi_dadd+0x398>
 8001116:	2701      	movs	r7, #1
 8001118:	2938      	cmp	r1, #56	@ 0x38
 800111a:	dc17      	bgt.n	800114c <__aeabi_dadd+0x98>
 800111c:	2780      	movs	r7, #128	@ 0x80
 800111e:	043f      	lsls	r7, r7, #16
 8001120:	433b      	orrs	r3, r7
 8001122:	291f      	cmp	r1, #31
 8001124:	dd00      	ble.n	8001128 <__aeabi_dadd+0x74>
 8001126:	e1dd      	b.n	80014e4 <__aeabi_dadd+0x430>
 8001128:	2720      	movs	r7, #32
 800112a:	1a78      	subs	r0, r7, r1
 800112c:	001f      	movs	r7, r3
 800112e:	4087      	lsls	r7, r0
 8001130:	46ba      	mov	sl, r7
 8001132:	0017      	movs	r7, r2
 8001134:	40cf      	lsrs	r7, r1
 8001136:	4684      	mov	ip, r0
 8001138:	0038      	movs	r0, r7
 800113a:	4657      	mov	r7, sl
 800113c:	4307      	orrs	r7, r0
 800113e:	4660      	mov	r0, ip
 8001140:	4082      	lsls	r2, r0
 8001142:	40cb      	lsrs	r3, r1
 8001144:	1e50      	subs	r0, r2, #1
 8001146:	4182      	sbcs	r2, r0
 8001148:	1af6      	subs	r6, r6, r3
 800114a:	4317      	orrs	r7, r2
 800114c:	464b      	mov	r3, r9
 800114e:	1bdf      	subs	r7, r3, r7
 8001150:	45b9      	cmp	r9, r7
 8001152:	4180      	sbcs	r0, r0
 8001154:	4240      	negs	r0, r0
 8001156:	1a36      	subs	r6, r6, r0
 8001158:	0233      	lsls	r3, r6, #8
 800115a:	d400      	bmi.n	800115e <__aeabi_dadd+0xaa>
 800115c:	e0ff      	b.n	800135e <__aeabi_dadd+0x2aa>
 800115e:	0276      	lsls	r6, r6, #9
 8001160:	0a76      	lsrs	r6, r6, #9
 8001162:	2e00      	cmp	r6, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0xb4>
 8001166:	e13c      	b.n	80013e2 <__aeabi_dadd+0x32e>
 8001168:	0030      	movs	r0, r6
 800116a:	f002 f80d 	bl	8003188 <__clzsi2>
 800116e:	0003      	movs	r3, r0
 8001170:	3b08      	subs	r3, #8
 8001172:	2120      	movs	r1, #32
 8001174:	0038      	movs	r0, r7
 8001176:	1aca      	subs	r2, r1, r3
 8001178:	40d0      	lsrs	r0, r2
 800117a:	409e      	lsls	r6, r3
 800117c:	0002      	movs	r2, r0
 800117e:	409f      	lsls	r7, r3
 8001180:	4332      	orrs	r2, r6
 8001182:	429c      	cmp	r4, r3
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0xd4>
 8001186:	e1a6      	b.n	80014d6 <__aeabi_dadd+0x422>
 8001188:	1b18      	subs	r0, r3, r4
 800118a:	3001      	adds	r0, #1
 800118c:	1a09      	subs	r1, r1, r0
 800118e:	003e      	movs	r6, r7
 8001190:	408f      	lsls	r7, r1
 8001192:	40c6      	lsrs	r6, r0
 8001194:	1e7b      	subs	r3, r7, #1
 8001196:	419f      	sbcs	r7, r3
 8001198:	0013      	movs	r3, r2
 800119a:	408b      	lsls	r3, r1
 800119c:	4337      	orrs	r7, r6
 800119e:	431f      	orrs	r7, r3
 80011a0:	40c2      	lsrs	r2, r0
 80011a2:	003b      	movs	r3, r7
 80011a4:	0016      	movs	r6, r2
 80011a6:	2400      	movs	r4, #0
 80011a8:	4313      	orrs	r3, r2
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0xfa>
 80011ac:	e1df      	b.n	800156e <__aeabi_dadd+0x4ba>
 80011ae:	077b      	lsls	r3, r7, #29
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dadd+0x100>
 80011b2:	e332      	b.n	800181a <__aeabi_dadd+0x766>
 80011b4:	230f      	movs	r3, #15
 80011b6:	003a      	movs	r2, r7
 80011b8:	403b      	ands	r3, r7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x114>
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	42ba      	cmp	r2, r7
 80011c2:	41bf      	sbcs	r7, r7
 80011c4:	427f      	negs	r7, r7
 80011c6:	19f6      	adds	r6, r6, r7
 80011c8:	0233      	lsls	r3, r6, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dadd+0x11a>
 80011cc:	e323      	b.n	8001816 <__aeabi_dadd+0x762>
 80011ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001440 <__aeabi_dadd+0x38c>)
 80011d0:	3401      	adds	r4, #1
 80011d2:	429c      	cmp	r4, r3
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x124>
 80011d6:	e0b4      	b.n	8001342 <__aeabi_dadd+0x28e>
 80011d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001444 <__aeabi_dadd+0x390>)
 80011da:	0564      	lsls	r4, r4, #21
 80011dc:	401e      	ands	r6, r3
 80011de:	0d64      	lsrs	r4, r4, #21
 80011e0:	0777      	lsls	r7, r6, #29
 80011e2:	08d2      	lsrs	r2, r2, #3
 80011e4:	0276      	lsls	r6, r6, #9
 80011e6:	4317      	orrs	r7, r2
 80011e8:	0b36      	lsrs	r6, r6, #12
 80011ea:	e0ac      	b.n	8001346 <__aeabi_dadd+0x292>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x13e>
 80011f0:	e07e      	b.n	80012f0 <__aeabi_dadd+0x23c>
 80011f2:	4641      	mov	r1, r8
 80011f4:	1b09      	subs	r1, r1, r4
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d000      	beq.n	80011fc <__aeabi_dadd+0x148>
 80011fa:	e160      	b.n	80014be <__aeabi_dadd+0x40a>
 80011fc:	0034      	movs	r4, r6
 80011fe:	4648      	mov	r0, r9
 8001200:	4304      	orrs	r4, r0
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x152>
 8001204:	e1c9      	b.n	800159a <__aeabi_dadd+0x4e6>
 8001206:	1e4c      	subs	r4, r1, #1
 8001208:	2901      	cmp	r1, #1
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x15a>
 800120c:	e22e      	b.n	800166c <__aeabi_dadd+0x5b8>
 800120e:	4d8c      	ldr	r5, [pc, #560]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001210:	42a9      	cmp	r1, r5
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x162>
 8001214:	e224      	b.n	8001660 <__aeabi_dadd+0x5ac>
 8001216:	2701      	movs	r7, #1
 8001218:	2c38      	cmp	r4, #56	@ 0x38
 800121a:	dc11      	bgt.n	8001240 <__aeabi_dadd+0x18c>
 800121c:	0021      	movs	r1, r4
 800121e:	291f      	cmp	r1, #31
 8001220:	dd00      	ble.n	8001224 <__aeabi_dadd+0x170>
 8001222:	e20b      	b.n	800163c <__aeabi_dadd+0x588>
 8001224:	2420      	movs	r4, #32
 8001226:	0037      	movs	r7, r6
 8001228:	4648      	mov	r0, r9
 800122a:	1a64      	subs	r4, r4, r1
 800122c:	40a7      	lsls	r7, r4
 800122e:	40c8      	lsrs	r0, r1
 8001230:	4307      	orrs	r7, r0
 8001232:	4648      	mov	r0, r9
 8001234:	40a0      	lsls	r0, r4
 8001236:	40ce      	lsrs	r6, r1
 8001238:	1e44      	subs	r4, r0, #1
 800123a:	41a0      	sbcs	r0, r4
 800123c:	1b9b      	subs	r3, r3, r6
 800123e:	4307      	orrs	r7, r0
 8001240:	1bd7      	subs	r7, r2, r7
 8001242:	42ba      	cmp	r2, r7
 8001244:	4192      	sbcs	r2, r2
 8001246:	4252      	negs	r2, r2
 8001248:	4665      	mov	r5, ip
 800124a:	4644      	mov	r4, r8
 800124c:	1a9e      	subs	r6, r3, r2
 800124e:	e783      	b.n	8001158 <__aeabi_dadd+0xa4>
 8001250:	2900      	cmp	r1, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dadd+0x1a2>
 8001254:	e09c      	b.n	8001390 <__aeabi_dadd+0x2dc>
 8001256:	4647      	mov	r7, r8
 8001258:	2f00      	cmp	r7, #0
 800125a:	d167      	bne.n	800132c <__aeabi_dadd+0x278>
 800125c:	001f      	movs	r7, r3
 800125e:	4317      	orrs	r7, r2
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x1b0>
 8001262:	e0e4      	b.n	800142e <__aeabi_dadd+0x37a>
 8001264:	1e48      	subs	r0, r1, #1
 8001266:	2901      	cmp	r1, #1
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x1b8>
 800126a:	e19b      	b.n	80015a4 <__aeabi_dadd+0x4f0>
 800126c:	4f74      	ldr	r7, [pc, #464]	@ (8001440 <__aeabi_dadd+0x38c>)
 800126e:	42b9      	cmp	r1, r7
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x1c0>
 8001272:	e0eb      	b.n	800144c <__aeabi_dadd+0x398>
 8001274:	2701      	movs	r7, #1
 8001276:	0001      	movs	r1, r0
 8001278:	2838      	cmp	r0, #56	@ 0x38
 800127a:	dc11      	bgt.n	80012a0 <__aeabi_dadd+0x1ec>
 800127c:	291f      	cmp	r1, #31
 800127e:	dd00      	ble.n	8001282 <__aeabi_dadd+0x1ce>
 8001280:	e1c7      	b.n	8001612 <__aeabi_dadd+0x55e>
 8001282:	2720      	movs	r7, #32
 8001284:	1a78      	subs	r0, r7, r1
 8001286:	001f      	movs	r7, r3
 8001288:	4684      	mov	ip, r0
 800128a:	4087      	lsls	r7, r0
 800128c:	0010      	movs	r0, r2
 800128e:	40c8      	lsrs	r0, r1
 8001290:	4307      	orrs	r7, r0
 8001292:	4660      	mov	r0, ip
 8001294:	4082      	lsls	r2, r0
 8001296:	40cb      	lsrs	r3, r1
 8001298:	1e50      	subs	r0, r2, #1
 800129a:	4182      	sbcs	r2, r0
 800129c:	18f6      	adds	r6, r6, r3
 800129e:	4317      	orrs	r7, r2
 80012a0:	444f      	add	r7, r9
 80012a2:	454f      	cmp	r7, r9
 80012a4:	4180      	sbcs	r0, r0
 80012a6:	4240      	negs	r0, r0
 80012a8:	1836      	adds	r6, r6, r0
 80012aa:	0233      	lsls	r3, r6, #8
 80012ac:	d557      	bpl.n	800135e <__aeabi_dadd+0x2aa>
 80012ae:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <__aeabi_dadd+0x38c>)
 80012b0:	3401      	adds	r4, #1
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d045      	beq.n	8001342 <__aeabi_dadd+0x28e>
 80012b6:	2101      	movs	r1, #1
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <__aeabi_dadd+0x390>)
 80012ba:	087a      	lsrs	r2, r7, #1
 80012bc:	401e      	ands	r6, r3
 80012be:	4039      	ands	r1, r7
 80012c0:	430a      	orrs	r2, r1
 80012c2:	07f7      	lsls	r7, r6, #31
 80012c4:	4317      	orrs	r7, r2
 80012c6:	0876      	lsrs	r6, r6, #1
 80012c8:	e771      	b.n	80011ae <__aeabi_dadd+0xfa>
 80012ca:	001f      	movs	r7, r3
 80012cc:	4317      	orrs	r7, r2
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x21e>
 80012d0:	e0ad      	b.n	800142e <__aeabi_dadd+0x37a>
 80012d2:	1e4f      	subs	r7, r1, #1
 80012d4:	46bc      	mov	ip, r7
 80012d6:	2901      	cmp	r1, #1
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x228>
 80012da:	e182      	b.n	80015e2 <__aeabi_dadd+0x52e>
 80012dc:	4f58      	ldr	r7, [pc, #352]	@ (8001440 <__aeabi_dadd+0x38c>)
 80012de:	42b9      	cmp	r1, r7
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x230>
 80012e2:	e190      	b.n	8001606 <__aeabi_dadd+0x552>
 80012e4:	4661      	mov	r1, ip
 80012e6:	2701      	movs	r7, #1
 80012e8:	2938      	cmp	r1, #56	@ 0x38
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0x23a>
 80012ec:	e72e      	b.n	800114c <__aeabi_dadd+0x98>
 80012ee:	e718      	b.n	8001122 <__aeabi_dadd+0x6e>
 80012f0:	4f55      	ldr	r7, [pc, #340]	@ (8001448 <__aeabi_dadd+0x394>)
 80012f2:	1c61      	adds	r1, r4, #1
 80012f4:	4239      	tst	r1, r7
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x246>
 80012f8:	e0d0      	b.n	800149c <__aeabi_dadd+0x3e8>
 80012fa:	0031      	movs	r1, r6
 80012fc:	4648      	mov	r0, r9
 80012fe:	001f      	movs	r7, r3
 8001300:	4301      	orrs	r1, r0
 8001302:	4317      	orrs	r7, r2
 8001304:	2c00      	cmp	r4, #0
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x256>
 8001308:	e13d      	b.n	8001586 <__aeabi_dadd+0x4d2>
 800130a:	2900      	cmp	r1, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x25c>
 800130e:	e1bc      	b.n	800168a <__aeabi_dadd+0x5d6>
 8001310:	2f00      	cmp	r7, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x262>
 8001314:	e1bf      	b.n	8001696 <__aeabi_dadd+0x5e2>
 8001316:	464b      	mov	r3, r9
 8001318:	2100      	movs	r1, #0
 800131a:	08d8      	lsrs	r0, r3, #3
 800131c:	0777      	lsls	r7, r6, #29
 800131e:	4307      	orrs	r7, r0
 8001320:	08f0      	lsrs	r0, r6, #3
 8001322:	0306      	lsls	r6, r0, #12
 8001324:	054c      	lsls	r4, r1, #21
 8001326:	0b36      	lsrs	r6, r6, #12
 8001328:	0d64      	lsrs	r4, r4, #21
 800132a:	e00c      	b.n	8001346 <__aeabi_dadd+0x292>
 800132c:	4f44      	ldr	r7, [pc, #272]	@ (8001440 <__aeabi_dadd+0x38c>)
 800132e:	42bc      	cmp	r4, r7
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x280>
 8001332:	e08b      	b.n	800144c <__aeabi_dadd+0x398>
 8001334:	2701      	movs	r7, #1
 8001336:	2938      	cmp	r1, #56	@ 0x38
 8001338:	dcb2      	bgt.n	80012a0 <__aeabi_dadd+0x1ec>
 800133a:	2780      	movs	r7, #128	@ 0x80
 800133c:	043f      	lsls	r7, r7, #16
 800133e:	433b      	orrs	r3, r7
 8001340:	e79c      	b.n	800127c <__aeabi_dadd+0x1c8>
 8001342:	2600      	movs	r6, #0
 8001344:	2700      	movs	r7, #0
 8001346:	0524      	lsls	r4, r4, #20
 8001348:	4334      	orrs	r4, r6
 800134a:	07ed      	lsls	r5, r5, #31
 800134c:	432c      	orrs	r4, r5
 800134e:	0038      	movs	r0, r7
 8001350:	0021      	movs	r1, r4
 8001352:	b002      	add	sp, #8
 8001354:	bce0      	pop	{r5, r6, r7}
 8001356:	46ba      	mov	sl, r7
 8001358:	46b1      	mov	r9, r6
 800135a:	46a8      	mov	r8, r5
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	077b      	lsls	r3, r7, #29
 8001360:	d004      	beq.n	800136c <__aeabi_dadd+0x2b8>
 8001362:	230f      	movs	r3, #15
 8001364:	403b      	ands	r3, r7
 8001366:	2b04      	cmp	r3, #4
 8001368:	d000      	beq.n	800136c <__aeabi_dadd+0x2b8>
 800136a:	e728      	b.n	80011be <__aeabi_dadd+0x10a>
 800136c:	08f8      	lsrs	r0, r7, #3
 800136e:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <__aeabi_dadd+0x38c>)
 8001370:	0777      	lsls	r7, r6, #29
 8001372:	4307      	orrs	r7, r0
 8001374:	08f0      	lsrs	r0, r6, #3
 8001376:	429c      	cmp	r4, r3
 8001378:	d000      	beq.n	800137c <__aeabi_dadd+0x2c8>
 800137a:	e24a      	b.n	8001812 <__aeabi_dadd+0x75e>
 800137c:	003b      	movs	r3, r7
 800137e:	4303      	orrs	r3, r0
 8001380:	d059      	beq.n	8001436 <__aeabi_dadd+0x382>
 8001382:	2680      	movs	r6, #128	@ 0x80
 8001384:	0336      	lsls	r6, r6, #12
 8001386:	4306      	orrs	r6, r0
 8001388:	0336      	lsls	r6, r6, #12
 800138a:	4c2d      	ldr	r4, [pc, #180]	@ (8001440 <__aeabi_dadd+0x38c>)
 800138c:	0b36      	lsrs	r6, r6, #12
 800138e:	e7da      	b.n	8001346 <__aeabi_dadd+0x292>
 8001390:	2900      	cmp	r1, #0
 8001392:	d061      	beq.n	8001458 <__aeabi_dadd+0x3a4>
 8001394:	4641      	mov	r1, r8
 8001396:	1b09      	subs	r1, r1, r4
 8001398:	2c00      	cmp	r4, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x2ea>
 800139c:	e0b9      	b.n	8001512 <__aeabi_dadd+0x45e>
 800139e:	4c28      	ldr	r4, [pc, #160]	@ (8001440 <__aeabi_dadd+0x38c>)
 80013a0:	45a0      	cmp	r8, r4
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x2f2>
 80013a4:	e1a5      	b.n	80016f2 <__aeabi_dadd+0x63e>
 80013a6:	2701      	movs	r7, #1
 80013a8:	2938      	cmp	r1, #56	@ 0x38
 80013aa:	dc13      	bgt.n	80013d4 <__aeabi_dadd+0x320>
 80013ac:	2480      	movs	r4, #128	@ 0x80
 80013ae:	0424      	lsls	r4, r4, #16
 80013b0:	4326      	orrs	r6, r4
 80013b2:	291f      	cmp	r1, #31
 80013b4:	dd00      	ble.n	80013b8 <__aeabi_dadd+0x304>
 80013b6:	e1c8      	b.n	800174a <__aeabi_dadd+0x696>
 80013b8:	2420      	movs	r4, #32
 80013ba:	0037      	movs	r7, r6
 80013bc:	4648      	mov	r0, r9
 80013be:	1a64      	subs	r4, r4, r1
 80013c0:	40a7      	lsls	r7, r4
 80013c2:	40c8      	lsrs	r0, r1
 80013c4:	4307      	orrs	r7, r0
 80013c6:	4648      	mov	r0, r9
 80013c8:	40a0      	lsls	r0, r4
 80013ca:	40ce      	lsrs	r6, r1
 80013cc:	1e44      	subs	r4, r0, #1
 80013ce:	41a0      	sbcs	r0, r4
 80013d0:	199b      	adds	r3, r3, r6
 80013d2:	4307      	orrs	r7, r0
 80013d4:	18bf      	adds	r7, r7, r2
 80013d6:	4297      	cmp	r7, r2
 80013d8:	4192      	sbcs	r2, r2
 80013da:	4252      	negs	r2, r2
 80013dc:	4644      	mov	r4, r8
 80013de:	18d6      	adds	r6, r2, r3
 80013e0:	e763      	b.n	80012aa <__aeabi_dadd+0x1f6>
 80013e2:	0038      	movs	r0, r7
 80013e4:	f001 fed0 	bl	8003188 <__clzsi2>
 80013e8:	0003      	movs	r3, r0
 80013ea:	3318      	adds	r3, #24
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dadd+0x33e>
 80013f0:	e6bf      	b.n	8001172 <__aeabi_dadd+0xbe>
 80013f2:	003a      	movs	r2, r7
 80013f4:	3808      	subs	r0, #8
 80013f6:	4082      	lsls	r2, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	dd00      	ble.n	80013fe <__aeabi_dadd+0x34a>
 80013fc:	e083      	b.n	8001506 <__aeabi_dadd+0x452>
 80013fe:	1b1b      	subs	r3, r3, r4
 8001400:	1c58      	adds	r0, r3, #1
 8001402:	281f      	cmp	r0, #31
 8001404:	dc00      	bgt.n	8001408 <__aeabi_dadd+0x354>
 8001406:	e1b4      	b.n	8001772 <__aeabi_dadd+0x6be>
 8001408:	0017      	movs	r7, r2
 800140a:	3b1f      	subs	r3, #31
 800140c:	40df      	lsrs	r7, r3
 800140e:	2820      	cmp	r0, #32
 8001410:	d005      	beq.n	800141e <__aeabi_dadd+0x36a>
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	1a1b      	subs	r3, r3, r0
 8001416:	409a      	lsls	r2, r3
 8001418:	1e53      	subs	r3, r2, #1
 800141a:	419a      	sbcs	r2, r3
 800141c:	4317      	orrs	r7, r2
 800141e:	2400      	movs	r4, #0
 8001420:	2f00      	cmp	r7, #0
 8001422:	d00a      	beq.n	800143a <__aeabi_dadd+0x386>
 8001424:	077b      	lsls	r3, r7, #29
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x376>
 8001428:	e6c4      	b.n	80011b4 <__aeabi_dadd+0x100>
 800142a:	0026      	movs	r6, r4
 800142c:	e79e      	b.n	800136c <__aeabi_dadd+0x2b8>
 800142e:	464b      	mov	r3, r9
 8001430:	000c      	movs	r4, r1
 8001432:	08d8      	lsrs	r0, r3, #3
 8001434:	e79b      	b.n	800136e <__aeabi_dadd+0x2ba>
 8001436:	2700      	movs	r7, #0
 8001438:	4c01      	ldr	r4, [pc, #4]	@ (8001440 <__aeabi_dadd+0x38c>)
 800143a:	2600      	movs	r6, #0
 800143c:	e783      	b.n	8001346 <__aeabi_dadd+0x292>
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff
 8001444:	ff7fffff 	.word	0xff7fffff
 8001448:	000007fe 	.word	0x000007fe
 800144c:	464b      	mov	r3, r9
 800144e:	0777      	lsls	r7, r6, #29
 8001450:	08d8      	lsrs	r0, r3, #3
 8001452:	4307      	orrs	r7, r0
 8001454:	08f0      	lsrs	r0, r6, #3
 8001456:	e791      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001458:	4fcd      	ldr	r7, [pc, #820]	@ (8001790 <__aeabi_dadd+0x6dc>)
 800145a:	1c61      	adds	r1, r4, #1
 800145c:	4239      	tst	r1, r7
 800145e:	d16b      	bne.n	8001538 <__aeabi_dadd+0x484>
 8001460:	0031      	movs	r1, r6
 8001462:	4648      	mov	r0, r9
 8001464:	4301      	orrs	r1, r0
 8001466:	2c00      	cmp	r4, #0
 8001468:	d000      	beq.n	800146c <__aeabi_dadd+0x3b8>
 800146a:	e14b      	b.n	8001704 <__aeabi_dadd+0x650>
 800146c:	001f      	movs	r7, r3
 800146e:	4317      	orrs	r7, r2
 8001470:	2900      	cmp	r1, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x3c2>
 8001474:	e181      	b.n	800177a <__aeabi_dadd+0x6c6>
 8001476:	2f00      	cmp	r7, #0
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x3c8>
 800147a:	e74c      	b.n	8001316 <__aeabi_dadd+0x262>
 800147c:	444a      	add	r2, r9
 800147e:	454a      	cmp	r2, r9
 8001480:	4180      	sbcs	r0, r0
 8001482:	18f6      	adds	r6, r6, r3
 8001484:	4240      	negs	r0, r0
 8001486:	1836      	adds	r6, r6, r0
 8001488:	0233      	lsls	r3, r6, #8
 800148a:	d500      	bpl.n	800148e <__aeabi_dadd+0x3da>
 800148c:	e1b0      	b.n	80017f0 <__aeabi_dadd+0x73c>
 800148e:	0017      	movs	r7, r2
 8001490:	4691      	mov	r9, r2
 8001492:	4337      	orrs	r7, r6
 8001494:	d000      	beq.n	8001498 <__aeabi_dadd+0x3e4>
 8001496:	e73e      	b.n	8001316 <__aeabi_dadd+0x262>
 8001498:	2600      	movs	r6, #0
 800149a:	e754      	b.n	8001346 <__aeabi_dadd+0x292>
 800149c:	4649      	mov	r1, r9
 800149e:	1a89      	subs	r1, r1, r2
 80014a0:	4688      	mov	r8, r1
 80014a2:	45c1      	cmp	r9, r8
 80014a4:	41bf      	sbcs	r7, r7
 80014a6:	1af1      	subs	r1, r6, r3
 80014a8:	427f      	negs	r7, r7
 80014aa:	1bc9      	subs	r1, r1, r7
 80014ac:	020f      	lsls	r7, r1, #8
 80014ae:	d461      	bmi.n	8001574 <__aeabi_dadd+0x4c0>
 80014b0:	4647      	mov	r7, r8
 80014b2:	430f      	orrs	r7, r1
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x404>
 80014b6:	e0bd      	b.n	8001634 <__aeabi_dadd+0x580>
 80014b8:	000e      	movs	r6, r1
 80014ba:	4647      	mov	r7, r8
 80014bc:	e651      	b.n	8001162 <__aeabi_dadd+0xae>
 80014be:	4cb5      	ldr	r4, [pc, #724]	@ (8001794 <__aeabi_dadd+0x6e0>)
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x412>
 80014c4:	e100      	b.n	80016c8 <__aeabi_dadd+0x614>
 80014c6:	2701      	movs	r7, #1
 80014c8:	2938      	cmp	r1, #56	@ 0x38
 80014ca:	dd00      	ble.n	80014ce <__aeabi_dadd+0x41a>
 80014cc:	e6b8      	b.n	8001240 <__aeabi_dadd+0x18c>
 80014ce:	2480      	movs	r4, #128	@ 0x80
 80014d0:	0424      	lsls	r4, r4, #16
 80014d2:	4326      	orrs	r6, r4
 80014d4:	e6a3      	b.n	800121e <__aeabi_dadd+0x16a>
 80014d6:	4eb0      	ldr	r6, [pc, #704]	@ (8001798 <__aeabi_dadd+0x6e4>)
 80014d8:	1ae4      	subs	r4, r4, r3
 80014da:	4016      	ands	r6, r2
 80014dc:	077b      	lsls	r3, r7, #29
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x42e>
 80014e0:	e73f      	b.n	8001362 <__aeabi_dadd+0x2ae>
 80014e2:	e743      	b.n	800136c <__aeabi_dadd+0x2b8>
 80014e4:	000f      	movs	r7, r1
 80014e6:	0018      	movs	r0, r3
 80014e8:	3f20      	subs	r7, #32
 80014ea:	40f8      	lsrs	r0, r7
 80014ec:	4684      	mov	ip, r0
 80014ee:	2920      	cmp	r1, #32
 80014f0:	d003      	beq.n	80014fa <__aeabi_dadd+0x446>
 80014f2:	2740      	movs	r7, #64	@ 0x40
 80014f4:	1a79      	subs	r1, r7, r1
 80014f6:	408b      	lsls	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	1e53      	subs	r3, r2, #1
 80014fc:	419a      	sbcs	r2, r3
 80014fe:	4663      	mov	r3, ip
 8001500:	0017      	movs	r7, r2
 8001502:	431f      	orrs	r7, r3
 8001504:	e622      	b.n	800114c <__aeabi_dadd+0x98>
 8001506:	48a4      	ldr	r0, [pc, #656]	@ (8001798 <__aeabi_dadd+0x6e4>)
 8001508:	1ae1      	subs	r1, r4, r3
 800150a:	4010      	ands	r0, r2
 800150c:	0747      	lsls	r7, r0, #29
 800150e:	08c0      	lsrs	r0, r0, #3
 8001510:	e707      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001512:	0034      	movs	r4, r6
 8001514:	4648      	mov	r0, r9
 8001516:	4304      	orrs	r4, r0
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x468>
 800151a:	e0fa      	b.n	8001712 <__aeabi_dadd+0x65e>
 800151c:	1e4c      	subs	r4, r1, #1
 800151e:	2901      	cmp	r1, #1
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x470>
 8001522:	e0d7      	b.n	80016d4 <__aeabi_dadd+0x620>
 8001524:	4f9b      	ldr	r7, [pc, #620]	@ (8001794 <__aeabi_dadd+0x6e0>)
 8001526:	42b9      	cmp	r1, r7
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x478>
 800152a:	e0e2      	b.n	80016f2 <__aeabi_dadd+0x63e>
 800152c:	2701      	movs	r7, #1
 800152e:	2c38      	cmp	r4, #56	@ 0x38
 8001530:	dd00      	ble.n	8001534 <__aeabi_dadd+0x480>
 8001532:	e74f      	b.n	80013d4 <__aeabi_dadd+0x320>
 8001534:	0021      	movs	r1, r4
 8001536:	e73c      	b.n	80013b2 <__aeabi_dadd+0x2fe>
 8001538:	4c96      	ldr	r4, [pc, #600]	@ (8001794 <__aeabi_dadd+0x6e0>)
 800153a:	42a1      	cmp	r1, r4
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x48c>
 800153e:	e0dd      	b.n	80016fc <__aeabi_dadd+0x648>
 8001540:	444a      	add	r2, r9
 8001542:	454a      	cmp	r2, r9
 8001544:	4180      	sbcs	r0, r0
 8001546:	18f3      	adds	r3, r6, r3
 8001548:	4240      	negs	r0, r0
 800154a:	1818      	adds	r0, r3, r0
 800154c:	07c7      	lsls	r7, r0, #31
 800154e:	0852      	lsrs	r2, r2, #1
 8001550:	4317      	orrs	r7, r2
 8001552:	0846      	lsrs	r6, r0, #1
 8001554:	0752      	lsls	r2, r2, #29
 8001556:	d005      	beq.n	8001564 <__aeabi_dadd+0x4b0>
 8001558:	220f      	movs	r2, #15
 800155a:	000c      	movs	r4, r1
 800155c:	403a      	ands	r2, r7
 800155e:	2a04      	cmp	r2, #4
 8001560:	d000      	beq.n	8001564 <__aeabi_dadd+0x4b0>
 8001562:	e62c      	b.n	80011be <__aeabi_dadd+0x10a>
 8001564:	0776      	lsls	r6, r6, #29
 8001566:	08ff      	lsrs	r7, r7, #3
 8001568:	4337      	orrs	r7, r6
 800156a:	0900      	lsrs	r0, r0, #4
 800156c:	e6d9      	b.n	8001322 <__aeabi_dadd+0x26e>
 800156e:	2700      	movs	r7, #0
 8001570:	2600      	movs	r6, #0
 8001572:	e6e8      	b.n	8001346 <__aeabi_dadd+0x292>
 8001574:	4649      	mov	r1, r9
 8001576:	1a57      	subs	r7, r2, r1
 8001578:	42ba      	cmp	r2, r7
 800157a:	4192      	sbcs	r2, r2
 800157c:	1b9e      	subs	r6, r3, r6
 800157e:	4252      	negs	r2, r2
 8001580:	4665      	mov	r5, ip
 8001582:	1ab6      	subs	r6, r6, r2
 8001584:	e5ed      	b.n	8001162 <__aeabi_dadd+0xae>
 8001586:	2900      	cmp	r1, #0
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x4d8>
 800158a:	e0c6      	b.n	800171a <__aeabi_dadd+0x666>
 800158c:	2f00      	cmp	r7, #0
 800158e:	d167      	bne.n	8001660 <__aeabi_dadd+0x5ac>
 8001590:	2680      	movs	r6, #128	@ 0x80
 8001592:	2500      	movs	r5, #0
 8001594:	4c7f      	ldr	r4, [pc, #508]	@ (8001794 <__aeabi_dadd+0x6e0>)
 8001596:	0336      	lsls	r6, r6, #12
 8001598:	e6d5      	b.n	8001346 <__aeabi_dadd+0x292>
 800159a:	4665      	mov	r5, ip
 800159c:	000c      	movs	r4, r1
 800159e:	001e      	movs	r6, r3
 80015a0:	08d0      	lsrs	r0, r2, #3
 80015a2:	e6e4      	b.n	800136e <__aeabi_dadd+0x2ba>
 80015a4:	444a      	add	r2, r9
 80015a6:	454a      	cmp	r2, r9
 80015a8:	4180      	sbcs	r0, r0
 80015aa:	18f3      	adds	r3, r6, r3
 80015ac:	4240      	negs	r0, r0
 80015ae:	1818      	adds	r0, r3, r0
 80015b0:	0011      	movs	r1, r2
 80015b2:	0203      	lsls	r3, r0, #8
 80015b4:	d400      	bmi.n	80015b8 <__aeabi_dadd+0x504>
 80015b6:	e096      	b.n	80016e6 <__aeabi_dadd+0x632>
 80015b8:	4b77      	ldr	r3, [pc, #476]	@ (8001798 <__aeabi_dadd+0x6e4>)
 80015ba:	0849      	lsrs	r1, r1, #1
 80015bc:	4018      	ands	r0, r3
 80015be:	07c3      	lsls	r3, r0, #31
 80015c0:	430b      	orrs	r3, r1
 80015c2:	0844      	lsrs	r4, r0, #1
 80015c4:	0749      	lsls	r1, r1, #29
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x516>
 80015c8:	e129      	b.n	800181e <__aeabi_dadd+0x76a>
 80015ca:	220f      	movs	r2, #15
 80015cc:	401a      	ands	r2, r3
 80015ce:	2a04      	cmp	r2, #4
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x520>
 80015d2:	e0ea      	b.n	80017aa <__aeabi_dadd+0x6f6>
 80015d4:	1d1f      	adds	r7, r3, #4
 80015d6:	429f      	cmp	r7, r3
 80015d8:	41b6      	sbcs	r6, r6
 80015da:	4276      	negs	r6, r6
 80015dc:	1936      	adds	r6, r6, r4
 80015de:	2402      	movs	r4, #2
 80015e0:	e6c4      	b.n	800136c <__aeabi_dadd+0x2b8>
 80015e2:	4649      	mov	r1, r9
 80015e4:	1a8f      	subs	r7, r1, r2
 80015e6:	45b9      	cmp	r9, r7
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	1af6      	subs	r6, r6, r3
 80015ec:	4240      	negs	r0, r0
 80015ee:	1a36      	subs	r6, r6, r0
 80015f0:	0233      	lsls	r3, r6, #8
 80015f2:	d406      	bmi.n	8001602 <__aeabi_dadd+0x54e>
 80015f4:	0773      	lsls	r3, r6, #29
 80015f6:	08ff      	lsrs	r7, r7, #3
 80015f8:	2101      	movs	r1, #1
 80015fa:	431f      	orrs	r7, r3
 80015fc:	08f0      	lsrs	r0, r6, #3
 80015fe:	e690      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001600:	4665      	mov	r5, ip
 8001602:	2401      	movs	r4, #1
 8001604:	e5ab      	b.n	800115e <__aeabi_dadd+0xaa>
 8001606:	464b      	mov	r3, r9
 8001608:	0777      	lsls	r7, r6, #29
 800160a:	08d8      	lsrs	r0, r3, #3
 800160c:	4307      	orrs	r7, r0
 800160e:	08f0      	lsrs	r0, r6, #3
 8001610:	e6b4      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001612:	000f      	movs	r7, r1
 8001614:	0018      	movs	r0, r3
 8001616:	3f20      	subs	r7, #32
 8001618:	40f8      	lsrs	r0, r7
 800161a:	4684      	mov	ip, r0
 800161c:	2920      	cmp	r1, #32
 800161e:	d003      	beq.n	8001628 <__aeabi_dadd+0x574>
 8001620:	2740      	movs	r7, #64	@ 0x40
 8001622:	1a79      	subs	r1, r7, r1
 8001624:	408b      	lsls	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	1e53      	subs	r3, r2, #1
 800162a:	419a      	sbcs	r2, r3
 800162c:	4663      	mov	r3, ip
 800162e:	0017      	movs	r7, r2
 8001630:	431f      	orrs	r7, r3
 8001632:	e635      	b.n	80012a0 <__aeabi_dadd+0x1ec>
 8001634:	2500      	movs	r5, #0
 8001636:	2400      	movs	r4, #0
 8001638:	2600      	movs	r6, #0
 800163a:	e684      	b.n	8001346 <__aeabi_dadd+0x292>
 800163c:	000c      	movs	r4, r1
 800163e:	0035      	movs	r5, r6
 8001640:	3c20      	subs	r4, #32
 8001642:	40e5      	lsrs	r5, r4
 8001644:	2920      	cmp	r1, #32
 8001646:	d005      	beq.n	8001654 <__aeabi_dadd+0x5a0>
 8001648:	2440      	movs	r4, #64	@ 0x40
 800164a:	1a61      	subs	r1, r4, r1
 800164c:	408e      	lsls	r6, r1
 800164e:	4649      	mov	r1, r9
 8001650:	4331      	orrs	r1, r6
 8001652:	4689      	mov	r9, r1
 8001654:	4648      	mov	r0, r9
 8001656:	1e41      	subs	r1, r0, #1
 8001658:	4188      	sbcs	r0, r1
 800165a:	0007      	movs	r7, r0
 800165c:	432f      	orrs	r7, r5
 800165e:	e5ef      	b.n	8001240 <__aeabi_dadd+0x18c>
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	075f      	lsls	r7, r3, #29
 8001664:	4665      	mov	r5, ip
 8001666:	4317      	orrs	r7, r2
 8001668:	08d8      	lsrs	r0, r3, #3
 800166a:	e687      	b.n	800137c <__aeabi_dadd+0x2c8>
 800166c:	1a17      	subs	r7, r2, r0
 800166e:	42ba      	cmp	r2, r7
 8001670:	4192      	sbcs	r2, r2
 8001672:	1b9e      	subs	r6, r3, r6
 8001674:	4252      	negs	r2, r2
 8001676:	1ab6      	subs	r6, r6, r2
 8001678:	0233      	lsls	r3, r6, #8
 800167a:	d4c1      	bmi.n	8001600 <__aeabi_dadd+0x54c>
 800167c:	0773      	lsls	r3, r6, #29
 800167e:	08ff      	lsrs	r7, r7, #3
 8001680:	4665      	mov	r5, ip
 8001682:	2101      	movs	r1, #1
 8001684:	431f      	orrs	r7, r3
 8001686:	08f0      	lsrs	r0, r6, #3
 8001688:	e64b      	b.n	8001322 <__aeabi_dadd+0x26e>
 800168a:	2f00      	cmp	r7, #0
 800168c:	d07b      	beq.n	8001786 <__aeabi_dadd+0x6d2>
 800168e:	4665      	mov	r5, ip
 8001690:	001e      	movs	r6, r3
 8001692:	4691      	mov	r9, r2
 8001694:	e63f      	b.n	8001316 <__aeabi_dadd+0x262>
 8001696:	1a81      	subs	r1, r0, r2
 8001698:	4688      	mov	r8, r1
 800169a:	45c1      	cmp	r9, r8
 800169c:	41a4      	sbcs	r4, r4
 800169e:	1af1      	subs	r1, r6, r3
 80016a0:	4264      	negs	r4, r4
 80016a2:	1b09      	subs	r1, r1, r4
 80016a4:	2480      	movs	r4, #128	@ 0x80
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	4221      	tst	r1, r4
 80016aa:	d077      	beq.n	800179c <__aeabi_dadd+0x6e8>
 80016ac:	1a10      	subs	r0, r2, r0
 80016ae:	4282      	cmp	r2, r0
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	0007      	movs	r7, r0
 80016b4:	1b9e      	subs	r6, r3, r6
 80016b6:	4252      	negs	r2, r2
 80016b8:	1ab6      	subs	r6, r6, r2
 80016ba:	4337      	orrs	r7, r6
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dadd+0x60c>
 80016be:	e0a0      	b.n	8001802 <__aeabi_dadd+0x74e>
 80016c0:	4665      	mov	r5, ip
 80016c2:	2400      	movs	r4, #0
 80016c4:	2600      	movs	r6, #0
 80016c6:	e63e      	b.n	8001346 <__aeabi_dadd+0x292>
 80016c8:	075f      	lsls	r7, r3, #29
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	4665      	mov	r5, ip
 80016ce:	4317      	orrs	r7, r2
 80016d0:	08d8      	lsrs	r0, r3, #3
 80016d2:	e653      	b.n	800137c <__aeabi_dadd+0x2c8>
 80016d4:	1881      	adds	r1, r0, r2
 80016d6:	4291      	cmp	r1, r2
 80016d8:	4192      	sbcs	r2, r2
 80016da:	18f0      	adds	r0, r6, r3
 80016dc:	4252      	negs	r2, r2
 80016de:	1880      	adds	r0, r0, r2
 80016e0:	0203      	lsls	r3, r0, #8
 80016e2:	d500      	bpl.n	80016e6 <__aeabi_dadd+0x632>
 80016e4:	e768      	b.n	80015b8 <__aeabi_dadd+0x504>
 80016e6:	0747      	lsls	r7, r0, #29
 80016e8:	08c9      	lsrs	r1, r1, #3
 80016ea:	430f      	orrs	r7, r1
 80016ec:	08c0      	lsrs	r0, r0, #3
 80016ee:	2101      	movs	r1, #1
 80016f0:	e617      	b.n	8001322 <__aeabi_dadd+0x26e>
 80016f2:	08d2      	lsrs	r2, r2, #3
 80016f4:	075f      	lsls	r7, r3, #29
 80016f6:	4317      	orrs	r7, r2
 80016f8:	08d8      	lsrs	r0, r3, #3
 80016fa:	e63f      	b.n	800137c <__aeabi_dadd+0x2c8>
 80016fc:	000c      	movs	r4, r1
 80016fe:	2600      	movs	r6, #0
 8001700:	2700      	movs	r7, #0
 8001702:	e620      	b.n	8001346 <__aeabi_dadd+0x292>
 8001704:	2900      	cmp	r1, #0
 8001706:	d156      	bne.n	80017b6 <__aeabi_dadd+0x702>
 8001708:	075f      	lsls	r7, r3, #29
 800170a:	08d2      	lsrs	r2, r2, #3
 800170c:	4317      	orrs	r7, r2
 800170e:	08d8      	lsrs	r0, r3, #3
 8001710:	e634      	b.n	800137c <__aeabi_dadd+0x2c8>
 8001712:	000c      	movs	r4, r1
 8001714:	001e      	movs	r6, r3
 8001716:	08d0      	lsrs	r0, r2, #3
 8001718:	e629      	b.n	800136e <__aeabi_dadd+0x2ba>
 800171a:	08c1      	lsrs	r1, r0, #3
 800171c:	0770      	lsls	r0, r6, #29
 800171e:	4301      	orrs	r1, r0
 8001720:	08f0      	lsrs	r0, r6, #3
 8001722:	2f00      	cmp	r7, #0
 8001724:	d062      	beq.n	80017ec <__aeabi_dadd+0x738>
 8001726:	2480      	movs	r4, #128	@ 0x80
 8001728:	0324      	lsls	r4, r4, #12
 800172a:	4220      	tst	r0, r4
 800172c:	d007      	beq.n	800173e <__aeabi_dadd+0x68a>
 800172e:	08de      	lsrs	r6, r3, #3
 8001730:	4226      	tst	r6, r4
 8001732:	d104      	bne.n	800173e <__aeabi_dadd+0x68a>
 8001734:	4665      	mov	r5, ip
 8001736:	0030      	movs	r0, r6
 8001738:	08d1      	lsrs	r1, r2, #3
 800173a:	075b      	lsls	r3, r3, #29
 800173c:	4319      	orrs	r1, r3
 800173e:	0f4f      	lsrs	r7, r1, #29
 8001740:	00c9      	lsls	r1, r1, #3
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	077f      	lsls	r7, r7, #29
 8001746:	430f      	orrs	r7, r1
 8001748:	e618      	b.n	800137c <__aeabi_dadd+0x2c8>
 800174a:	000c      	movs	r4, r1
 800174c:	0030      	movs	r0, r6
 800174e:	3c20      	subs	r4, #32
 8001750:	40e0      	lsrs	r0, r4
 8001752:	4684      	mov	ip, r0
 8001754:	2920      	cmp	r1, #32
 8001756:	d005      	beq.n	8001764 <__aeabi_dadd+0x6b0>
 8001758:	2440      	movs	r4, #64	@ 0x40
 800175a:	1a61      	subs	r1, r4, r1
 800175c:	408e      	lsls	r6, r1
 800175e:	4649      	mov	r1, r9
 8001760:	4331      	orrs	r1, r6
 8001762:	4689      	mov	r9, r1
 8001764:	4648      	mov	r0, r9
 8001766:	1e41      	subs	r1, r0, #1
 8001768:	4188      	sbcs	r0, r1
 800176a:	4661      	mov	r1, ip
 800176c:	0007      	movs	r7, r0
 800176e:	430f      	orrs	r7, r1
 8001770:	e630      	b.n	80013d4 <__aeabi_dadd+0x320>
 8001772:	2120      	movs	r1, #32
 8001774:	2700      	movs	r7, #0
 8001776:	1a09      	subs	r1, r1, r0
 8001778:	e50e      	b.n	8001198 <__aeabi_dadd+0xe4>
 800177a:	001e      	movs	r6, r3
 800177c:	2f00      	cmp	r7, #0
 800177e:	d000      	beq.n	8001782 <__aeabi_dadd+0x6ce>
 8001780:	e522      	b.n	80011c8 <__aeabi_dadd+0x114>
 8001782:	2400      	movs	r4, #0
 8001784:	e758      	b.n	8001638 <__aeabi_dadd+0x584>
 8001786:	2500      	movs	r5, #0
 8001788:	2400      	movs	r4, #0
 800178a:	2600      	movs	r6, #0
 800178c:	e5db      	b.n	8001346 <__aeabi_dadd+0x292>
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	000007fe 	.word	0x000007fe
 8001794:	000007ff 	.word	0x000007ff
 8001798:	ff7fffff 	.word	0xff7fffff
 800179c:	4647      	mov	r7, r8
 800179e:	430f      	orrs	r7, r1
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x6f0>
 80017a2:	e747      	b.n	8001634 <__aeabi_dadd+0x580>
 80017a4:	000e      	movs	r6, r1
 80017a6:	46c1      	mov	r9, r8
 80017a8:	e5b5      	b.n	8001316 <__aeabi_dadd+0x262>
 80017aa:	08df      	lsrs	r7, r3, #3
 80017ac:	0764      	lsls	r4, r4, #29
 80017ae:	2102      	movs	r1, #2
 80017b0:	4327      	orrs	r7, r4
 80017b2:	0900      	lsrs	r0, r0, #4
 80017b4:	e5b5      	b.n	8001322 <__aeabi_dadd+0x26e>
 80017b6:	0019      	movs	r1, r3
 80017b8:	08c0      	lsrs	r0, r0, #3
 80017ba:	0777      	lsls	r7, r6, #29
 80017bc:	4307      	orrs	r7, r0
 80017be:	4311      	orrs	r1, r2
 80017c0:	08f0      	lsrs	r0, r6, #3
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dadd+0x714>
 80017c6:	e5d9      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0309      	lsls	r1, r1, #12
 80017cc:	4208      	tst	r0, r1
 80017ce:	d007      	beq.n	80017e0 <__aeabi_dadd+0x72c>
 80017d0:	08dc      	lsrs	r4, r3, #3
 80017d2:	420c      	tst	r4, r1
 80017d4:	d104      	bne.n	80017e0 <__aeabi_dadd+0x72c>
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	431a      	orrs	r2, r3
 80017dc:	0017      	movs	r7, r2
 80017de:	0020      	movs	r0, r4
 80017e0:	0f7b      	lsrs	r3, r7, #29
 80017e2:	00ff      	lsls	r7, r7, #3
 80017e4:	08ff      	lsrs	r7, r7, #3
 80017e6:	075b      	lsls	r3, r3, #29
 80017e8:	431f      	orrs	r7, r3
 80017ea:	e5c7      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017ec:	000f      	movs	r7, r1
 80017ee:	e5c5      	b.n	800137c <__aeabi_dadd+0x2c8>
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <__aeabi_dadd+0x788>)
 80017f2:	08d2      	lsrs	r2, r2, #3
 80017f4:	4033      	ands	r3, r6
 80017f6:	075f      	lsls	r7, r3, #29
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	2401      	movs	r4, #1
 80017fc:	4317      	orrs	r7, r2
 80017fe:	0b1e      	lsrs	r6, r3, #12
 8001800:	e5a1      	b.n	8001346 <__aeabi_dadd+0x292>
 8001802:	4226      	tst	r6, r4
 8001804:	d012      	beq.n	800182c <__aeabi_dadd+0x778>
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <__aeabi_dadd+0x788>)
 8001808:	4665      	mov	r5, ip
 800180a:	0002      	movs	r2, r0
 800180c:	2401      	movs	r4, #1
 800180e:	401e      	ands	r6, r3
 8001810:	e4e6      	b.n	80011e0 <__aeabi_dadd+0x12c>
 8001812:	0021      	movs	r1, r4
 8001814:	e585      	b.n	8001322 <__aeabi_dadd+0x26e>
 8001816:	0017      	movs	r7, r2
 8001818:	e5a8      	b.n	800136c <__aeabi_dadd+0x2b8>
 800181a:	003a      	movs	r2, r7
 800181c:	e4d4      	b.n	80011c8 <__aeabi_dadd+0x114>
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	0764      	lsls	r4, r4, #29
 8001822:	431c      	orrs	r4, r3
 8001824:	0027      	movs	r7, r4
 8001826:	2102      	movs	r1, #2
 8001828:	0900      	lsrs	r0, r0, #4
 800182a:	e57a      	b.n	8001322 <__aeabi_dadd+0x26e>
 800182c:	08c0      	lsrs	r0, r0, #3
 800182e:	0777      	lsls	r7, r6, #29
 8001830:	4307      	orrs	r7, r0
 8001832:	4665      	mov	r5, ip
 8001834:	2100      	movs	r1, #0
 8001836:	08f0      	lsrs	r0, r6, #3
 8001838:	e573      	b.n	8001322 <__aeabi_dadd+0x26e>
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	ff7fffff 	.word	0xff7fffff

08001840 <__aeabi_ddiv>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	46de      	mov	lr, fp
 8001844:	4645      	mov	r5, r8
 8001846:	4657      	mov	r7, sl
 8001848:	464e      	mov	r6, r9
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	b087      	sub	sp, #28
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	030b      	lsls	r3, r1, #12
 8001854:	0b1b      	lsrs	r3, r3, #12
 8001856:	469b      	mov	fp, r3
 8001858:	0fca      	lsrs	r2, r1, #31
 800185a:	004b      	lsls	r3, r1, #1
 800185c:	0004      	movs	r4, r0
 800185e:	4680      	mov	r8, r0
 8001860:	0d5b      	lsrs	r3, r3, #21
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	d100      	bne.n	8001868 <__aeabi_ddiv+0x28>
 8001866:	e098      	b.n	800199a <__aeabi_ddiv+0x15a>
 8001868:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d037      	beq.n	80018de <__aeabi_ddiv+0x9e>
 800186e:	4659      	mov	r1, fp
 8001870:	0f42      	lsrs	r2, r0, #29
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	430a      	orrs	r2, r1
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0409      	lsls	r1, r1, #16
 800187a:	4311      	orrs	r1, r2
 800187c:	00c2      	lsls	r2, r0, #3
 800187e:	4690      	mov	r8, r2
 8001880:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <__aeabi_ddiv+0x220>)
 8001882:	4689      	mov	r9, r1
 8001884:	4692      	mov	sl, r2
 8001886:	449a      	add	sl, r3
 8001888:	2300      	movs	r3, #0
 800188a:	2400      	movs	r4, #0
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	9e00      	ldr	r6, [sp, #0]
 8001890:	9f01      	ldr	r7, [sp, #4]
 8001892:	033b      	lsls	r3, r7, #12
 8001894:	0b1b      	lsrs	r3, r3, #12
 8001896:	469b      	mov	fp, r3
 8001898:	007b      	lsls	r3, r7, #1
 800189a:	0030      	movs	r0, r6
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	0ffd      	lsrs	r5, r7, #31
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d059      	beq.n	8001958 <__aeabi_ddiv+0x118>
 80018a4:	4a6d      	ldr	r2, [pc, #436]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d048      	beq.n	800193c <__aeabi_ddiv+0xfc>
 80018aa:	4659      	mov	r1, fp
 80018ac:	0f72      	lsrs	r2, r6, #29
 80018ae:	00c9      	lsls	r1, r1, #3
 80018b0:	430a      	orrs	r2, r1
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	0409      	lsls	r1, r1, #16
 80018b6:	4311      	orrs	r1, r2
 80018b8:	468b      	mov	fp, r1
 80018ba:	4969      	ldr	r1, [pc, #420]	@ (8001a60 <__aeabi_ddiv+0x220>)
 80018bc:	00f2      	lsls	r2, r6, #3
 80018be:	468c      	mov	ip, r1
 80018c0:	4651      	mov	r1, sl
 80018c2:	4463      	add	r3, ip
 80018c4:	1acb      	subs	r3, r1, r3
 80018c6:	469a      	mov	sl, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	9e02      	ldr	r6, [sp, #8]
 80018cc:	406e      	eors	r6, r5
 80018ce:	b2f6      	uxtb	r6, r6
 80018d0:	2c0f      	cmp	r4, #15
 80018d2:	d900      	bls.n	80018d6 <__aeabi_ddiv+0x96>
 80018d4:	e0ce      	b.n	8001a74 <__aeabi_ddiv+0x234>
 80018d6:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <__aeabi_ddiv+0x224>)
 80018d8:	00a4      	lsls	r4, r4, #2
 80018da:	591b      	ldr	r3, [r3, r4]
 80018dc:	469f      	mov	pc, r3
 80018de:	465a      	mov	r2, fp
 80018e0:	4302      	orrs	r2, r0
 80018e2:	4691      	mov	r9, r2
 80018e4:	d000      	beq.n	80018e8 <__aeabi_ddiv+0xa8>
 80018e6:	e090      	b.n	8001a0a <__aeabi_ddiv+0x1ca>
 80018e8:	469a      	mov	sl, r3
 80018ea:	2302      	movs	r3, #2
 80018ec:	4690      	mov	r8, r2
 80018ee:	2408      	movs	r4, #8
 80018f0:	9303      	str	r3, [sp, #12]
 80018f2:	e7cc      	b.n	800188e <__aeabi_ddiv+0x4e>
 80018f4:	46cb      	mov	fp, r9
 80018f6:	4642      	mov	r2, r8
 80018f8:	9d02      	ldr	r5, [sp, #8]
 80018fa:	9903      	ldr	r1, [sp, #12]
 80018fc:	2902      	cmp	r1, #2
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0xc2>
 8001900:	e1de      	b.n	8001cc0 <__aeabi_ddiv+0x480>
 8001902:	2903      	cmp	r1, #3
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0xc8>
 8001906:	e08d      	b.n	8001a24 <__aeabi_ddiv+0x1e4>
 8001908:	2901      	cmp	r1, #1
 800190a:	d000      	beq.n	800190e <__aeabi_ddiv+0xce>
 800190c:	e179      	b.n	8001c02 <__aeabi_ddiv+0x3c2>
 800190e:	002e      	movs	r6, r5
 8001910:	2200      	movs	r2, #0
 8001912:	2300      	movs	r3, #0
 8001914:	2400      	movs	r4, #0
 8001916:	4690      	mov	r8, r2
 8001918:	051b      	lsls	r3, r3, #20
 800191a:	4323      	orrs	r3, r4
 800191c:	07f6      	lsls	r6, r6, #31
 800191e:	4333      	orrs	r3, r6
 8001920:	4640      	mov	r0, r8
 8001922:	0019      	movs	r1, r3
 8001924:	b007      	add	sp, #28
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	2200      	movs	r2, #0
 8001934:	2400      	movs	r4, #0
 8001936:	4690      	mov	r8, r2
 8001938:	4b48      	ldr	r3, [pc, #288]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 800193a:	e7ed      	b.n	8001918 <__aeabi_ddiv+0xd8>
 800193c:	465a      	mov	r2, fp
 800193e:	9b00      	ldr	r3, [sp, #0]
 8001940:	431a      	orrs	r2, r3
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_ddiv+0x228>)
 8001944:	469c      	mov	ip, r3
 8001946:	44e2      	add	sl, ip
 8001948:	2a00      	cmp	r2, #0
 800194a:	d159      	bne.n	8001a00 <__aeabi_ddiv+0x1c0>
 800194c:	2302      	movs	r3, #2
 800194e:	431c      	orrs	r4, r3
 8001950:	2300      	movs	r3, #0
 8001952:	2102      	movs	r1, #2
 8001954:	469b      	mov	fp, r3
 8001956:	e7b8      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001958:	465a      	mov	r2, fp
 800195a:	9b00      	ldr	r3, [sp, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	d049      	beq.n	80019f4 <__aeabi_ddiv+0x1b4>
 8001960:	465b      	mov	r3, fp
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_ddiv+0x128>
 8001966:	e19c      	b.n	8001ca2 <__aeabi_ddiv+0x462>
 8001968:	4658      	mov	r0, fp
 800196a:	f001 fc0d 	bl	8003188 <__clzsi2>
 800196e:	0002      	movs	r2, r0
 8001970:	0003      	movs	r3, r0
 8001972:	3a0b      	subs	r2, #11
 8001974:	271d      	movs	r7, #29
 8001976:	9e00      	ldr	r6, [sp, #0]
 8001978:	1aba      	subs	r2, r7, r2
 800197a:	0019      	movs	r1, r3
 800197c:	4658      	mov	r0, fp
 800197e:	40d6      	lsrs	r6, r2
 8001980:	3908      	subs	r1, #8
 8001982:	4088      	lsls	r0, r1
 8001984:	0032      	movs	r2, r6
 8001986:	4302      	orrs	r2, r0
 8001988:	4693      	mov	fp, r2
 800198a:	9a00      	ldr	r2, [sp, #0]
 800198c:	408a      	lsls	r2, r1
 800198e:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <__aeabi_ddiv+0x22c>)
 8001990:	4453      	add	r3, sl
 8001992:	468a      	mov	sl, r1
 8001994:	2100      	movs	r1, #0
 8001996:	449a      	add	sl, r3
 8001998:	e797      	b.n	80018ca <__aeabi_ddiv+0x8a>
 800199a:	465b      	mov	r3, fp
 800199c:	4303      	orrs	r3, r0
 800199e:	4699      	mov	r9, r3
 80019a0:	d021      	beq.n	80019e6 <__aeabi_ddiv+0x1a6>
 80019a2:	465b      	mov	r3, fp
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_ddiv+0x16a>
 80019a8:	e169      	b.n	8001c7e <__aeabi_ddiv+0x43e>
 80019aa:	4658      	mov	r0, fp
 80019ac:	f001 fbec 	bl	8003188 <__clzsi2>
 80019b0:	230b      	movs	r3, #11
 80019b2:	425b      	negs	r3, r3
 80019b4:	469c      	mov	ip, r3
 80019b6:	0002      	movs	r2, r0
 80019b8:	4484      	add	ip, r0
 80019ba:	4666      	mov	r6, ip
 80019bc:	231d      	movs	r3, #29
 80019be:	1b9b      	subs	r3, r3, r6
 80019c0:	0026      	movs	r6, r4
 80019c2:	0011      	movs	r1, r2
 80019c4:	4658      	mov	r0, fp
 80019c6:	40de      	lsrs	r6, r3
 80019c8:	3908      	subs	r1, #8
 80019ca:	4088      	lsls	r0, r1
 80019cc:	0033      	movs	r3, r6
 80019ce:	4303      	orrs	r3, r0
 80019d0:	4699      	mov	r9, r3
 80019d2:	0023      	movs	r3, r4
 80019d4:	408b      	lsls	r3, r1
 80019d6:	4698      	mov	r8, r3
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <__aeabi_ddiv+0x230>)
 80019da:	2400      	movs	r4, #0
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	469a      	mov	sl, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	e753      	b.n	800188e <__aeabi_ddiv+0x4e>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4698      	mov	r8, r3
 80019ea:	469a      	mov	sl, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	2404      	movs	r4, #4
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	e74c      	b.n	800188e <__aeabi_ddiv+0x4e>
 80019f4:	2301      	movs	r3, #1
 80019f6:	431c      	orrs	r4, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	2101      	movs	r1, #1
 80019fc:	469b      	mov	fp, r3
 80019fe:	e764      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001a00:	2303      	movs	r3, #3
 8001a02:	0032      	movs	r2, r6
 8001a04:	2103      	movs	r1, #3
 8001a06:	431c      	orrs	r4, r3
 8001a08:	e75f      	b.n	80018ca <__aeabi_ddiv+0x8a>
 8001a0a:	469a      	mov	sl, r3
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	46d9      	mov	r9, fp
 8001a10:	240c      	movs	r4, #12
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	e73b      	b.n	800188e <__aeabi_ddiv+0x4e>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2480      	movs	r4, #128	@ 0x80
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a20:	0324      	lsls	r4, r4, #12
 8001a22:	e779      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a24:	2480      	movs	r4, #128	@ 0x80
 8001a26:	465b      	mov	r3, fp
 8001a28:	0324      	lsls	r4, r4, #12
 8001a2a:	431c      	orrs	r4, r3
 8001a2c:	0324      	lsls	r4, r4, #12
 8001a2e:	002e      	movs	r6, r5
 8001a30:	4690      	mov	r8, r2
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	e76f      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a38:	2480      	movs	r4, #128	@ 0x80
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	0324      	lsls	r4, r4, #12
 8001a3e:	4223      	tst	r3, r4
 8001a40:	d002      	beq.n	8001a48 <__aeabi_ddiv+0x208>
 8001a42:	465b      	mov	r3, fp
 8001a44:	4223      	tst	r3, r4
 8001a46:	d0f0      	beq.n	8001a2a <__aeabi_ddiv+0x1ea>
 8001a48:	2480      	movs	r4, #128	@ 0x80
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	0324      	lsls	r4, r4, #12
 8001a4e:	431c      	orrs	r4, r3
 8001a50:	0324      	lsls	r4, r4, #12
 8001a52:	9e02      	ldr	r6, [sp, #8]
 8001a54:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <__aeabi_ddiv+0x21c>)
 8001a56:	0b24      	lsrs	r4, r4, #12
 8001a58:	e75e      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	fffffc01 	.word	0xfffffc01
 8001a64:	0800d3e0 	.word	0x0800d3e0
 8001a68:	fffff801 	.word	0xfffff801
 8001a6c:	000003f3 	.word	0x000003f3
 8001a70:	fffffc0d 	.word	0xfffffc0d
 8001a74:	45cb      	cmp	fp, r9
 8001a76:	d200      	bcs.n	8001a7a <__aeabi_ddiv+0x23a>
 8001a78:	e0f8      	b.n	8001c6c <__aeabi_ddiv+0x42c>
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_ddiv+0x23e>
 8001a7c:	e0f3      	b.n	8001c66 <__aeabi_ddiv+0x426>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	425b      	negs	r3, r3
 8001a82:	469c      	mov	ip, r3
 8001a84:	4644      	mov	r4, r8
 8001a86:	4648      	mov	r0, r9
 8001a88:	2500      	movs	r5, #0
 8001a8a:	44e2      	add	sl, ip
 8001a8c:	465b      	mov	r3, fp
 8001a8e:	0e17      	lsrs	r7, r2, #24
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	431f      	orrs	r7, r3
 8001a94:	0c19      	lsrs	r1, r3, #16
 8001a96:	043b      	lsls	r3, r7, #16
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	9700      	str	r7, [sp, #0]
 8001a9c:	0c1f      	lsrs	r7, r3, #16
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	9102      	str	r1, [sp, #8]
 8001aa2:	9703      	str	r7, [sp, #12]
 8001aa4:	f7fe fbce 	bl	8000244 <__aeabi_uidivmod>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	437a      	muls	r2, r7
 8001aac:	040b      	lsls	r3, r1, #16
 8001aae:	0c21      	lsrs	r1, r4, #16
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4319      	orrs	r1, r3
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d909      	bls.n	8001acc <__aeabi_ddiv+0x28c>
 8001ab8:	9f00      	ldr	r7, [sp, #0]
 8001aba:	2301      	movs	r3, #1
 8001abc:	46bc      	mov	ip, r7
 8001abe:	425b      	negs	r3, r3
 8001ac0:	4461      	add	r1, ip
 8001ac2:	469c      	mov	ip, r3
 8001ac4:	44e0      	add	r8, ip
 8001ac6:	428f      	cmp	r7, r1
 8001ac8:	d800      	bhi.n	8001acc <__aeabi_ddiv+0x28c>
 8001aca:	e15c      	b.n	8001d86 <__aeabi_ddiv+0x546>
 8001acc:	1a88      	subs	r0, r1, r2
 8001ace:	9902      	ldr	r1, [sp, #8]
 8001ad0:	f7fe fbb8 	bl	8000244 <__aeabi_uidivmod>
 8001ad4:	9a03      	ldr	r2, [sp, #12]
 8001ad6:	0424      	lsls	r4, r4, #16
 8001ad8:	4342      	muls	r2, r0
 8001ada:	0409      	lsls	r1, r1, #16
 8001adc:	0c24      	lsrs	r4, r4, #16
 8001ade:	0003      	movs	r3, r0
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	d906      	bls.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	468c      	mov	ip, r1
 8001aec:	4464      	add	r4, ip
 8001aee:	42a1      	cmp	r1, r4
 8001af0:	d800      	bhi.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001af2:	e142      	b.n	8001d7a <__aeabi_ddiv+0x53a>
 8001af4:	1aa0      	subs	r0, r4, r2
 8001af6:	4642      	mov	r2, r8
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	4693      	mov	fp, r2
 8001afe:	464b      	mov	r3, r9
 8001b00:	4659      	mov	r1, fp
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	001f      	movs	r7, r3
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	040b      	lsls	r3, r1, #16
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	0409      	lsls	r1, r1, #16
 8001b0e:	0c09      	lsrs	r1, r1, #16
 8001b10:	000c      	movs	r4, r1
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	435c      	muls	r4, r3
 8001b16:	0c12      	lsrs	r2, r2, #16
 8001b18:	437b      	muls	r3, r7
 8001b1a:	4688      	mov	r8, r1
 8001b1c:	4351      	muls	r1, r2
 8001b1e:	437a      	muls	r2, r7
 8001b20:	0c27      	lsrs	r7, r4, #16
 8001b22:	46bc      	mov	ip, r7
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	4463      	add	r3, ip
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	d903      	bls.n	8001b34 <__aeabi_ddiv+0x2f4>
 8001b2c:	2180      	movs	r1, #128	@ 0x80
 8001b2e:	0249      	lsls	r1, r1, #9
 8001b30:	468c      	mov	ip, r1
 8001b32:	4462      	add	r2, ip
 8001b34:	0c19      	lsrs	r1, r3, #16
 8001b36:	0424      	lsls	r4, r4, #16
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	0c24      	lsrs	r4, r4, #16
 8001b3c:	188a      	adds	r2, r1, r2
 8001b3e:	191c      	adds	r4, r3, r4
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d302      	bcc.n	8001b4a <__aeabi_ddiv+0x30a>
 8001b44:	d116      	bne.n	8001b74 <__aeabi_ddiv+0x334>
 8001b46:	42a5      	cmp	r5, r4
 8001b48:	d214      	bcs.n	8001b74 <__aeabi_ddiv+0x334>
 8001b4a:	465b      	mov	r3, fp
 8001b4c:	9f00      	ldr	r7, [sp, #0]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	444d      	add	r5, r9
 8001b52:	9305      	str	r3, [sp, #20]
 8001b54:	454d      	cmp	r5, r9
 8001b56:	419b      	sbcs	r3, r3
 8001b58:	46bc      	mov	ip, r7
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	4463      	add	r3, ip
 8001b5e:	18c0      	adds	r0, r0, r3
 8001b60:	4287      	cmp	r7, r0
 8001b62:	d300      	bcc.n	8001b66 <__aeabi_ddiv+0x326>
 8001b64:	e102      	b.n	8001d6c <__aeabi_ddiv+0x52c>
 8001b66:	4282      	cmp	r2, r0
 8001b68:	d900      	bls.n	8001b6c <__aeabi_ddiv+0x32c>
 8001b6a:	e129      	b.n	8001dc0 <__aeabi_ddiv+0x580>
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x330>
 8001b6e:	e124      	b.n	8001dba <__aeabi_ddiv+0x57a>
 8001b70:	9b05      	ldr	r3, [sp, #20]
 8001b72:	469b      	mov	fp, r3
 8001b74:	1b2c      	subs	r4, r5, r4
 8001b76:	42a5      	cmp	r5, r4
 8001b78:	41ad      	sbcs	r5, r5
 8001b7a:	9b00      	ldr	r3, [sp, #0]
 8001b7c:	1a80      	subs	r0, r0, r2
 8001b7e:	426d      	negs	r5, r5
 8001b80:	1b40      	subs	r0, r0, r5
 8001b82:	4283      	cmp	r3, r0
 8001b84:	d100      	bne.n	8001b88 <__aeabi_ddiv+0x348>
 8001b86:	e10f      	b.n	8001da8 <__aeabi_ddiv+0x568>
 8001b88:	9902      	ldr	r1, [sp, #8]
 8001b8a:	f7fe fb5b 	bl	8000244 <__aeabi_uidivmod>
 8001b8e:	9a03      	ldr	r2, [sp, #12]
 8001b90:	040b      	lsls	r3, r1, #16
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c21      	lsrs	r1, r4, #16
 8001b96:	0005      	movs	r5, r0
 8001b98:	4319      	orrs	r1, r3
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d900      	bls.n	8001ba0 <__aeabi_ddiv+0x360>
 8001b9e:	e0cb      	b.n	8001d38 <__aeabi_ddiv+0x4f8>
 8001ba0:	1a88      	subs	r0, r1, r2
 8001ba2:	9902      	ldr	r1, [sp, #8]
 8001ba4:	f7fe fb4e 	bl	8000244 <__aeabi_uidivmod>
 8001ba8:	9a03      	ldr	r2, [sp, #12]
 8001baa:	0424      	lsls	r4, r4, #16
 8001bac:	4342      	muls	r2, r0
 8001bae:	0409      	lsls	r1, r1, #16
 8001bb0:	0c24      	lsrs	r4, r4, #16
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	430c      	orrs	r4, r1
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d900      	bls.n	8001bbc <__aeabi_ddiv+0x37c>
 8001bba:	e0ca      	b.n	8001d52 <__aeabi_ddiv+0x512>
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	1aa4      	subs	r4, r4, r2
 8001bc0:	042a      	lsls	r2, r5, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	9f04      	ldr	r7, [sp, #16]
 8001bc6:	0413      	lsls	r3, r2, #16
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	4359      	muls	r1, r3
 8001bcc:	4640      	mov	r0, r8
 8001bce:	437b      	muls	r3, r7
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	4368      	muls	r0, r5
 8001bd6:	0c0b      	lsrs	r3, r1, #16
 8001bd8:	4484      	add	ip, r0
 8001bda:	4463      	add	r3, ip
 8001bdc:	437d      	muls	r5, r7
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d903      	bls.n	8001bea <__aeabi_ddiv+0x3aa>
 8001be2:	2080      	movs	r0, #128	@ 0x80
 8001be4:	0240      	lsls	r0, r0, #9
 8001be6:	4684      	mov	ip, r0
 8001be8:	4465      	add	r5, ip
 8001bea:	0c18      	lsrs	r0, r3, #16
 8001bec:	0409      	lsls	r1, r1, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c09      	lsrs	r1, r1, #16
 8001bf2:	1940      	adds	r0, r0, r5
 8001bf4:	185b      	adds	r3, r3, r1
 8001bf6:	4284      	cmp	r4, r0
 8001bf8:	d327      	bcc.n	8001c4a <__aeabi_ddiv+0x40a>
 8001bfa:	d023      	beq.n	8001c44 <__aeabi_ddiv+0x404>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	0035      	movs	r5, r6
 8001c00:	431a      	orrs	r2, r3
 8001c02:	4b94      	ldr	r3, [pc, #592]	@ (8001e54 <__aeabi_ddiv+0x614>)
 8001c04:	4453      	add	r3, sl
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dd60      	ble.n	8001ccc <__aeabi_ddiv+0x48c>
 8001c0a:	0751      	lsls	r1, r2, #29
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_ddiv+0x3d0>
 8001c0e:	e086      	b.n	8001d1e <__aeabi_ddiv+0x4de>
 8001c10:	002e      	movs	r6, r5
 8001c12:	08d1      	lsrs	r1, r2, #3
 8001c14:	465a      	mov	r2, fp
 8001c16:	01d2      	lsls	r2, r2, #7
 8001c18:	d506      	bpl.n	8001c28 <__aeabi_ddiv+0x3e8>
 8001c1a:	465a      	mov	r2, fp
 8001c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e58 <__aeabi_ddiv+0x618>)
 8001c1e:	401a      	ands	r2, r3
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	4693      	mov	fp, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4453      	add	r3, sl
 8001c28:	4a8c      	ldr	r2, [pc, #560]	@ (8001e5c <__aeabi_ddiv+0x61c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dd00      	ble.n	8001c30 <__aeabi_ddiv+0x3f0>
 8001c2e:	e680      	b.n	8001932 <__aeabi_ddiv+0xf2>
 8001c30:	465a      	mov	r2, fp
 8001c32:	0752      	lsls	r2, r2, #29
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4690      	mov	r8, r2
 8001c38:	465a      	mov	r2, fp
 8001c3a:	055b      	lsls	r3, r3, #21
 8001c3c:	0254      	lsls	r4, r2, #9
 8001c3e:	0b24      	lsrs	r4, r4, #12
 8001c40:	0d5b      	lsrs	r3, r3, #21
 8001c42:	e669      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001c44:	0035      	movs	r5, r6
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0db      	beq.n	8001c02 <__aeabi_ddiv+0x3c2>
 8001c4a:	9d00      	ldr	r5, [sp, #0]
 8001c4c:	1e51      	subs	r1, r2, #1
 8001c4e:	46ac      	mov	ip, r5
 8001c50:	4464      	add	r4, ip
 8001c52:	42ac      	cmp	r4, r5
 8001c54:	d200      	bcs.n	8001c58 <__aeabi_ddiv+0x418>
 8001c56:	e09e      	b.n	8001d96 <__aeabi_ddiv+0x556>
 8001c58:	4284      	cmp	r4, r0
 8001c5a:	d200      	bcs.n	8001c5e <__aeabi_ddiv+0x41e>
 8001c5c:	e0e1      	b.n	8001e22 <__aeabi_ddiv+0x5e2>
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_ddiv+0x422>
 8001c60:	e0ee      	b.n	8001e40 <__aeabi_ddiv+0x600>
 8001c62:	000a      	movs	r2, r1
 8001c64:	e7ca      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001c66:	4542      	cmp	r2, r8
 8001c68:	d900      	bls.n	8001c6c <__aeabi_ddiv+0x42c>
 8001c6a:	e708      	b.n	8001a7e <__aeabi_ddiv+0x23e>
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	07dc      	lsls	r4, r3, #31
 8001c70:	0858      	lsrs	r0, r3, #1
 8001c72:	4643      	mov	r3, r8
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	431c      	orrs	r4, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	07dd      	lsls	r5, r3, #31
 8001c7c:	e706      	b.n	8001a8c <__aeabi_ddiv+0x24c>
 8001c7e:	f001 fa83 	bl	8003188 <__clzsi2>
 8001c82:	2315      	movs	r3, #21
 8001c84:	469c      	mov	ip, r3
 8001c86:	4484      	add	ip, r0
 8001c88:	0002      	movs	r2, r0
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	3220      	adds	r2, #32
 8001c8e:	2b1c      	cmp	r3, #28
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_ddiv+0x454>
 8001c92:	e692      	b.n	80019ba <__aeabi_ddiv+0x17a>
 8001c94:	0023      	movs	r3, r4
 8001c96:	3808      	subs	r0, #8
 8001c98:	4083      	lsls	r3, r0
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	e69a      	b.n	80019d8 <__aeabi_ddiv+0x198>
 8001ca2:	f001 fa71 	bl	8003188 <__clzsi2>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	0003      	movs	r3, r0
 8001caa:	3215      	adds	r2, #21
 8001cac:	3320      	adds	r3, #32
 8001cae:	2a1c      	cmp	r2, #28
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_ddiv+0x474>
 8001cb2:	e65f      	b.n	8001974 <__aeabi_ddiv+0x134>
 8001cb4:	9900      	ldr	r1, [sp, #0]
 8001cb6:	3808      	subs	r0, #8
 8001cb8:	4081      	lsls	r1, r0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	468b      	mov	fp, r1
 8001cbe:	e666      	b.n	800198e <__aeabi_ddiv+0x14e>
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4b65      	ldr	r3, [pc, #404]	@ (8001e60 <__aeabi_ddiv+0x620>)
 8001cca:	e625      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001ccc:	002e      	movs	r6, r5
 8001cce:	2101      	movs	r1, #1
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	2938      	cmp	r1, #56	@ 0x38
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_ddiv+0x498>
 8001cd6:	e61b      	b.n	8001910 <__aeabi_ddiv+0xd0>
 8001cd8:	291f      	cmp	r1, #31
 8001cda:	dc7e      	bgt.n	8001dda <__aeabi_ddiv+0x59a>
 8001cdc:	4861      	ldr	r0, [pc, #388]	@ (8001e64 <__aeabi_ddiv+0x624>)
 8001cde:	0014      	movs	r4, r2
 8001ce0:	4450      	add	r0, sl
 8001ce2:	465b      	mov	r3, fp
 8001ce4:	4082      	lsls	r2, r0
 8001ce6:	4083      	lsls	r3, r0
 8001ce8:	40cc      	lsrs	r4, r1
 8001cea:	1e50      	subs	r0, r2, #1
 8001cec:	4182      	sbcs	r2, r0
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	465b      	mov	r3, fp
 8001cf4:	40cb      	lsrs	r3, r1
 8001cf6:	0751      	lsls	r1, r2, #29
 8001cf8:	d009      	beq.n	8001d0e <__aeabi_ddiv+0x4ce>
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	4011      	ands	r1, r2
 8001cfe:	2904      	cmp	r1, #4
 8001d00:	d005      	beq.n	8001d0e <__aeabi_ddiv+0x4ce>
 8001d02:	1d11      	adds	r1, r2, #4
 8001d04:	4291      	cmp	r1, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	0219      	lsls	r1, r3, #8
 8001d10:	d400      	bmi.n	8001d14 <__aeabi_ddiv+0x4d4>
 8001d12:	e09b      	b.n	8001e4c <__aeabi_ddiv+0x60c>
 8001d14:	2200      	movs	r2, #0
 8001d16:	2301      	movs	r3, #1
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	e5fc      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001d1e:	210f      	movs	r1, #15
 8001d20:	4011      	ands	r1, r2
 8001d22:	2904      	cmp	r1, #4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x4e8>
 8001d26:	e773      	b.n	8001c10 <__aeabi_ddiv+0x3d0>
 8001d28:	1d11      	adds	r1, r2, #4
 8001d2a:	4291      	cmp	r1, r2
 8001d2c:	4192      	sbcs	r2, r2
 8001d2e:	4252      	negs	r2, r2
 8001d30:	002e      	movs	r6, r5
 8001d32:	08c9      	lsrs	r1, r1, #3
 8001d34:	4493      	add	fp, r2
 8001d36:	e76d      	b.n	8001c14 <__aeabi_ddiv+0x3d4>
 8001d38:	9b00      	ldr	r3, [sp, #0]
 8001d3a:	3d01      	subs	r5, #1
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	4461      	add	r1, ip
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d900      	bls.n	8001d46 <__aeabi_ddiv+0x506>
 8001d44:	e72c      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d46:	428a      	cmp	r2, r1
 8001d48:	d800      	bhi.n	8001d4c <__aeabi_ddiv+0x50c>
 8001d4a:	e729      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d4c:	1e85      	subs	r5, r0, #2
 8001d4e:	4461      	add	r1, ip
 8001d50:	e726      	b.n	8001ba0 <__aeabi_ddiv+0x360>
 8001d52:	9900      	ldr	r1, [sp, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	468c      	mov	ip, r1
 8001d58:	4464      	add	r4, ip
 8001d5a:	42a1      	cmp	r1, r4
 8001d5c:	d900      	bls.n	8001d60 <__aeabi_ddiv+0x520>
 8001d5e:	e72d      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d60:	42a2      	cmp	r2, r4
 8001d62:	d800      	bhi.n	8001d66 <__aeabi_ddiv+0x526>
 8001d64:	e72a      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d66:	1e83      	subs	r3, r0, #2
 8001d68:	4464      	add	r4, ip
 8001d6a:	e727      	b.n	8001bbc <__aeabi_ddiv+0x37c>
 8001d6c:	4287      	cmp	r7, r0
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_ddiv+0x532>
 8001d70:	e6fe      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001d72:	45a9      	cmp	r9, r5
 8001d74:	d900      	bls.n	8001d78 <__aeabi_ddiv+0x538>
 8001d76:	e6fb      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001d78:	e6f5      	b.n	8001b66 <__aeabi_ddiv+0x326>
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x540>
 8001d7e:	e6b9      	b.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	4464      	add	r4, ip
 8001d84:	e6b6      	b.n	8001af4 <__aeabi_ddiv+0x2b4>
 8001d86:	428a      	cmp	r2, r1
 8001d88:	d800      	bhi.n	8001d8c <__aeabi_ddiv+0x54c>
 8001d8a:	e69f      	b.n	8001acc <__aeabi_ddiv+0x28c>
 8001d8c:	46bc      	mov	ip, r7
 8001d8e:	1e83      	subs	r3, r0, #2
 8001d90:	4698      	mov	r8, r3
 8001d92:	4461      	add	r1, ip
 8001d94:	e69a      	b.n	8001acc <__aeabi_ddiv+0x28c>
 8001d96:	000a      	movs	r2, r1
 8001d98:	4284      	cmp	r4, r0
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_ddiv+0x55e>
 8001d9c:	e72e      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001d9e:	454b      	cmp	r3, r9
 8001da0:	d000      	beq.n	8001da4 <__aeabi_ddiv+0x564>
 8001da2:	e72b      	b.n	8001bfc <__aeabi_ddiv+0x3bc>
 8001da4:	0035      	movs	r5, r6
 8001da6:	e72c      	b.n	8001c02 <__aeabi_ddiv+0x3c2>
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <__aeabi_ddiv+0x614>)
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <__aeabi_ddiv+0x628>)
 8001dac:	4453      	add	r3, sl
 8001dae:	4592      	cmp	sl, r2
 8001db0:	db43      	blt.n	8001e3a <__aeabi_ddiv+0x5fa>
 8001db2:	2201      	movs	r2, #1
 8001db4:	2100      	movs	r1, #0
 8001db6:	4493      	add	fp, r2
 8001db8:	e72c      	b.n	8001c14 <__aeabi_ddiv+0x3d4>
 8001dba:	42ac      	cmp	r4, r5
 8001dbc:	d800      	bhi.n	8001dc0 <__aeabi_ddiv+0x580>
 8001dbe:	e6d7      	b.n	8001b70 <__aeabi_ddiv+0x330>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	469c      	mov	ip, r3
 8001dc6:	9900      	ldr	r1, [sp, #0]
 8001dc8:	444d      	add	r5, r9
 8001dca:	454d      	cmp	r5, r9
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	44e3      	add	fp, ip
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	4463      	add	r3, ip
 8001dd6:	18c0      	adds	r0, r0, r3
 8001dd8:	e6cc      	b.n	8001b74 <__aeabi_ddiv+0x334>
 8001dda:	201f      	movs	r0, #31
 8001ddc:	4240      	negs	r0, r0
 8001dde:	1ac3      	subs	r3, r0, r3
 8001de0:	4658      	mov	r0, fp
 8001de2:	40d8      	lsrs	r0, r3
 8001de4:	2920      	cmp	r1, #32
 8001de6:	d004      	beq.n	8001df2 <__aeabi_ddiv+0x5b2>
 8001de8:	4659      	mov	r1, fp
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <__aeabi_ddiv+0x62c>)
 8001dec:	4453      	add	r3, sl
 8001dee:	4099      	lsls	r1, r3
 8001df0:	430a      	orrs	r2, r1
 8001df2:	1e53      	subs	r3, r2, #1
 8001df4:	419a      	sbcs	r2, r3
 8001df6:	2307      	movs	r3, #7
 8001df8:	0019      	movs	r1, r3
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4011      	ands	r1, r2
 8001e00:	4213      	tst	r3, r2
 8001e02:	d009      	beq.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e04:	3308      	adds	r3, #8
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d01d      	beq.n	8001e48 <__aeabi_ddiv+0x608>
 8001e0c:	1d13      	adds	r3, r2, #4
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	4189      	sbcs	r1, r1
 8001e12:	001a      	movs	r2, r3
 8001e14:	4249      	negs	r1, r1
 8001e16:	0749      	lsls	r1, r1, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e57a      	b.n	8001918 <__aeabi_ddiv+0xd8>
 8001e22:	4649      	mov	r1, r9
 8001e24:	9f00      	ldr	r7, [sp, #0]
 8001e26:	004d      	lsls	r5, r1, #1
 8001e28:	454d      	cmp	r5, r9
 8001e2a:	4189      	sbcs	r1, r1
 8001e2c:	46bc      	mov	ip, r7
 8001e2e:	4249      	negs	r1, r1
 8001e30:	4461      	add	r1, ip
 8001e32:	46a9      	mov	r9, r5
 8001e34:	3a02      	subs	r2, #2
 8001e36:	1864      	adds	r4, r4, r1
 8001e38:	e7ae      	b.n	8001d98 <__aeabi_ddiv+0x558>
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4252      	negs	r2, r2
 8001e3e:	e746      	b.n	8001cce <__aeabi_ddiv+0x48e>
 8001e40:	4599      	cmp	r9, r3
 8001e42:	d3ee      	bcc.n	8001e22 <__aeabi_ddiv+0x5e2>
 8001e44:	000a      	movs	r2, r1
 8001e46:	e7aa      	b.n	8001d9e <__aeabi_ddiv+0x55e>
 8001e48:	2100      	movs	r1, #0
 8001e4a:	e7e5      	b.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e4c:	0759      	lsls	r1, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1c      	lsrs	r4, r3, #12
 8001e52:	e7e1      	b.n	8001e18 <__aeabi_ddiv+0x5d8>
 8001e54:	000003ff 	.word	0x000003ff
 8001e58:	feffffff 	.word	0xfeffffff
 8001e5c:	000007fe 	.word	0x000007fe
 8001e60:	000007ff 	.word	0x000007ff
 8001e64:	0000041e 	.word	0x0000041e
 8001e68:	fffffc02 	.word	0xfffffc02
 8001e6c:	0000043e 	.word	0x0000043e

08001e70 <__eqdf2>:
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	4657      	mov	r7, sl
 8001e74:	46de      	mov	lr, fp
 8001e76:	464e      	mov	r6, r9
 8001e78:	4645      	mov	r5, r8
 8001e7a:	b5e0      	push	{r5, r6, r7, lr}
 8001e7c:	000d      	movs	r5, r1
 8001e7e:	0004      	movs	r4, r0
 8001e80:	0fe8      	lsrs	r0, r5, #31
 8001e82:	4683      	mov	fp, r0
 8001e84:	0309      	lsls	r1, r1, #12
 8001e86:	0fd8      	lsrs	r0, r3, #31
 8001e88:	0b09      	lsrs	r1, r1, #12
 8001e8a:	4682      	mov	sl, r0
 8001e8c:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <__eqdf2+0x84>)
 8001e8e:	468c      	mov	ip, r1
 8001e90:	031f      	lsls	r7, r3, #12
 8001e92:	0069      	lsls	r1, r5, #1
 8001e94:	005e      	lsls	r6, r3, #1
 8001e96:	0d49      	lsrs	r1, r1, #21
 8001e98:	0b3f      	lsrs	r7, r7, #12
 8001e9a:	0d76      	lsrs	r6, r6, #21
 8001e9c:	4281      	cmp	r1, r0
 8001e9e:	d018      	beq.n	8001ed2 <__eqdf2+0x62>
 8001ea0:	4286      	cmp	r6, r0
 8001ea2:	d00f      	beq.n	8001ec4 <__eqdf2+0x54>
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	42b1      	cmp	r1, r6
 8001ea8:	d10d      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eaa:	45bc      	cmp	ip, r7
 8001eac:	d10b      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eae:	4294      	cmp	r4, r2
 8001eb0:	d109      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eb2:	45d3      	cmp	fp, sl
 8001eb4:	d01c      	beq.n	8001ef0 <__eqdf2+0x80>
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	d105      	bne.n	8001ec6 <__eqdf2+0x56>
 8001eba:	4660      	mov	r0, ip
 8001ebc:	4320      	orrs	r0, r4
 8001ebe:	1e43      	subs	r3, r0, #1
 8001ec0:	4198      	sbcs	r0, r3
 8001ec2:	e000      	b.n	8001ec6 <__eqdf2+0x56>
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ec8:	46bb      	mov	fp, r7
 8001eca:	46b2      	mov	sl, r6
 8001ecc:	46a9      	mov	r9, r5
 8001ece:	46a0      	mov	r8, r4
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	428e      	cmp	r6, r1
 8001ed6:	d1f6      	bne.n	8001ec6 <__eqdf2+0x56>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	4339      	orrs	r1, r7
 8001edc:	000f      	movs	r7, r1
 8001ede:	4317      	orrs	r7, r2
 8001ee0:	4327      	orrs	r7, r4
 8001ee2:	d1f0      	bne.n	8001ec6 <__eqdf2+0x56>
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	4652      	mov	r2, sl
 8001ee8:	1a98      	subs	r0, r3, r2
 8001eea:	1e43      	subs	r3, r0, #1
 8001eec:	4198      	sbcs	r0, r3
 8001eee:	e7ea      	b.n	8001ec6 <__eqdf2+0x56>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e7e8      	b.n	8001ec6 <__eqdf2+0x56>
 8001ef4:	000007ff 	.word	0x000007ff

08001ef8 <__gedf2>:
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	4657      	mov	r7, sl
 8001efc:	464e      	mov	r6, r9
 8001efe:	4645      	mov	r5, r8
 8001f00:	46de      	mov	lr, fp
 8001f02:	b5e0      	push	{r5, r6, r7, lr}
 8001f04:	000d      	movs	r5, r1
 8001f06:	030e      	lsls	r6, r1, #12
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	0d49      	lsrs	r1, r1, #21
 8001f0c:	468a      	mov	sl, r1
 8001f0e:	0fdf      	lsrs	r7, r3, #31
 8001f10:	0fe9      	lsrs	r1, r5, #31
 8001f12:	46bc      	mov	ip, r7
 8001f14:	b083      	sub	sp, #12
 8001f16:	4f2f      	ldr	r7, [pc, #188]	@ (8001fd4 <__gedf2+0xdc>)
 8001f18:	0004      	movs	r4, r0
 8001f1a:	4680      	mov	r8, r0
 8001f1c:	9101      	str	r1, [sp, #4]
 8001f1e:	0058      	lsls	r0, r3, #1
 8001f20:	0319      	lsls	r1, r3, #12
 8001f22:	4691      	mov	r9, r2
 8001f24:	0b36      	lsrs	r6, r6, #12
 8001f26:	0b09      	lsrs	r1, r1, #12
 8001f28:	0d40      	lsrs	r0, r0, #21
 8001f2a:	45ba      	cmp	sl, r7
 8001f2c:	d01d      	beq.n	8001f6a <__gedf2+0x72>
 8001f2e:	42b8      	cmp	r0, r7
 8001f30:	d00d      	beq.n	8001f4e <__gedf2+0x56>
 8001f32:	4657      	mov	r7, sl
 8001f34:	2f00      	cmp	r7, #0
 8001f36:	d12a      	bne.n	8001f8e <__gedf2+0x96>
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d124      	bne.n	8001f88 <__gedf2+0x90>
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d036      	beq.n	8001fb0 <__gedf2+0xb8>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d141      	bne.n	8001fca <__gedf2+0xd2>
 8001f46:	4663      	mov	r3, ip
 8001f48:	0058      	lsls	r0, r3, #1
 8001f4a:	3801      	subs	r0, #1
 8001f4c:	e015      	b.n	8001f7a <__gedf2+0x82>
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	d138      	bne.n	8001fc4 <__gedf2+0xcc>
 8001f52:	4653      	mov	r3, sl
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <__gedf2+0x64>
 8001f58:	4326      	orrs	r6, r4
 8001f5a:	d0f4      	beq.n	8001f46 <__gedf2+0x4e>
 8001f5c:	9b01      	ldr	r3, [sp, #4]
 8001f5e:	4563      	cmp	r3, ip
 8001f60:	d107      	bne.n	8001f72 <__gedf2+0x7a>
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	0058      	lsls	r0, r3, #1
 8001f66:	3801      	subs	r0, #1
 8001f68:	e007      	b.n	8001f7a <__gedf2+0x82>
 8001f6a:	4326      	orrs	r6, r4
 8001f6c:	d12a      	bne.n	8001fc4 <__gedf2+0xcc>
 8001f6e:	4550      	cmp	r0, sl
 8001f70:	d021      	beq.n	8001fb6 <__gedf2+0xbe>
 8001f72:	2001      	movs	r0, #1
 8001f74:	9b01      	ldr	r3, [sp, #4]
 8001f76:	425f      	negs	r7, r3
 8001f78:	4338      	orrs	r0, r7
 8001f7a:	b003      	add	sp, #12
 8001f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7e:	46bb      	mov	fp, r7
 8001f80:	46b2      	mov	sl, r6
 8001f82:	46a9      	mov	r9, r5
 8001f84:	46a0      	mov	r8, r4
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	2c00      	cmp	r4, #0
 8001f8a:	d0dc      	beq.n	8001f46 <__gedf2+0x4e>
 8001f8c:	e7e6      	b.n	8001f5c <__gedf2+0x64>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0ef      	beq.n	8001f72 <__gedf2+0x7a>
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	4563      	cmp	r3, ip
 8001f96:	d1ec      	bne.n	8001f72 <__gedf2+0x7a>
 8001f98:	4582      	cmp	sl, r0
 8001f9a:	dcea      	bgt.n	8001f72 <__gedf2+0x7a>
 8001f9c:	dbe1      	blt.n	8001f62 <__gedf2+0x6a>
 8001f9e:	428e      	cmp	r6, r1
 8001fa0:	d8e7      	bhi.n	8001f72 <__gedf2+0x7a>
 8001fa2:	d1de      	bne.n	8001f62 <__gedf2+0x6a>
 8001fa4:	45c8      	cmp	r8, r9
 8001fa6:	d8e4      	bhi.n	8001f72 <__gedf2+0x7a>
 8001fa8:	2000      	movs	r0, #0
 8001faa:	45c8      	cmp	r8, r9
 8001fac:	d2e5      	bcs.n	8001f7a <__gedf2+0x82>
 8001fae:	e7d8      	b.n	8001f62 <__gedf2+0x6a>
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d0e2      	beq.n	8001f7a <__gedf2+0x82>
 8001fb4:	e7dd      	b.n	8001f72 <__gedf2+0x7a>
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	d104      	bne.n	8001fc4 <__gedf2+0xcc>
 8001fba:	9b01      	ldr	r3, [sp, #4]
 8001fbc:	4563      	cmp	r3, ip
 8001fbe:	d1d8      	bne.n	8001f72 <__gedf2+0x7a>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e7da      	b.n	8001f7a <__gedf2+0x82>
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	e7d7      	b.n	8001f7a <__gedf2+0x82>
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	4563      	cmp	r3, ip
 8001fce:	d0e6      	beq.n	8001f9e <__gedf2+0xa6>
 8001fd0:	e7cf      	b.n	8001f72 <__gedf2+0x7a>
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	000007ff 	.word	0x000007ff

08001fd8 <__ledf2>:
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	4657      	mov	r7, sl
 8001fdc:	464e      	mov	r6, r9
 8001fde:	4645      	mov	r5, r8
 8001fe0:	46de      	mov	lr, fp
 8001fe2:	b5e0      	push	{r5, r6, r7, lr}
 8001fe4:	000d      	movs	r5, r1
 8001fe6:	030e      	lsls	r6, r1, #12
 8001fe8:	0049      	lsls	r1, r1, #1
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	468a      	mov	sl, r1
 8001fee:	0fdf      	lsrs	r7, r3, #31
 8001ff0:	0fe9      	lsrs	r1, r5, #31
 8001ff2:	46bc      	mov	ip, r7
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	4f2e      	ldr	r7, [pc, #184]	@ (80020b0 <__ledf2+0xd8>)
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	4680      	mov	r8, r0
 8001ffc:	9101      	str	r1, [sp, #4]
 8001ffe:	0058      	lsls	r0, r3, #1
 8002000:	0319      	lsls	r1, r3, #12
 8002002:	4691      	mov	r9, r2
 8002004:	0b36      	lsrs	r6, r6, #12
 8002006:	0b09      	lsrs	r1, r1, #12
 8002008:	0d40      	lsrs	r0, r0, #21
 800200a:	45ba      	cmp	sl, r7
 800200c:	d01e      	beq.n	800204c <__ledf2+0x74>
 800200e:	42b8      	cmp	r0, r7
 8002010:	d00d      	beq.n	800202e <__ledf2+0x56>
 8002012:	4657      	mov	r7, sl
 8002014:	2f00      	cmp	r7, #0
 8002016:	d127      	bne.n	8002068 <__ledf2+0x90>
 8002018:	4334      	orrs	r4, r6
 800201a:	2800      	cmp	r0, #0
 800201c:	d133      	bne.n	8002086 <__ledf2+0xae>
 800201e:	430a      	orrs	r2, r1
 8002020:	d034      	beq.n	800208c <__ledf2+0xb4>
 8002022:	2c00      	cmp	r4, #0
 8002024:	d140      	bne.n	80020a8 <__ledf2+0xd0>
 8002026:	4663      	mov	r3, ip
 8002028:	0058      	lsls	r0, r3, #1
 800202a:	3801      	subs	r0, #1
 800202c:	e015      	b.n	800205a <__ledf2+0x82>
 800202e:	4311      	orrs	r1, r2
 8002030:	d112      	bne.n	8002058 <__ledf2+0x80>
 8002032:	4653      	mov	r3, sl
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <__ledf2+0x64>
 8002038:	4326      	orrs	r6, r4
 800203a:	d0f4      	beq.n	8002026 <__ledf2+0x4e>
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	4563      	cmp	r3, ip
 8002040:	d01d      	beq.n	800207e <__ledf2+0xa6>
 8002042:	2001      	movs	r0, #1
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	425f      	negs	r7, r3
 8002048:	4338      	orrs	r0, r7
 800204a:	e006      	b.n	800205a <__ledf2+0x82>
 800204c:	4326      	orrs	r6, r4
 800204e:	d103      	bne.n	8002058 <__ledf2+0x80>
 8002050:	4550      	cmp	r0, sl
 8002052:	d1f6      	bne.n	8002042 <__ledf2+0x6a>
 8002054:	4311      	orrs	r1, r2
 8002056:	d01c      	beq.n	8002092 <__ledf2+0xba>
 8002058:	2002      	movs	r0, #2
 800205a:	b003      	add	sp, #12
 800205c:	bcf0      	pop	{r4, r5, r6, r7}
 800205e:	46bb      	mov	fp, r7
 8002060:	46b2      	mov	sl, r6
 8002062:	46a9      	mov	r9, r5
 8002064:	46a0      	mov	r8, r4
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002068:	2800      	cmp	r0, #0
 800206a:	d0ea      	beq.n	8002042 <__ledf2+0x6a>
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	4563      	cmp	r3, ip
 8002070:	d1e7      	bne.n	8002042 <__ledf2+0x6a>
 8002072:	4582      	cmp	sl, r0
 8002074:	dce5      	bgt.n	8002042 <__ledf2+0x6a>
 8002076:	db02      	blt.n	800207e <__ledf2+0xa6>
 8002078:	428e      	cmp	r6, r1
 800207a:	d8e2      	bhi.n	8002042 <__ledf2+0x6a>
 800207c:	d00e      	beq.n	800209c <__ledf2+0xc4>
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	0058      	lsls	r0, r3, #1
 8002082:	3801      	subs	r0, #1
 8002084:	e7e9      	b.n	800205a <__ledf2+0x82>
 8002086:	2c00      	cmp	r4, #0
 8002088:	d0cd      	beq.n	8002026 <__ledf2+0x4e>
 800208a:	e7d7      	b.n	800203c <__ledf2+0x64>
 800208c:	2c00      	cmp	r4, #0
 800208e:	d0e4      	beq.n	800205a <__ledf2+0x82>
 8002090:	e7d7      	b.n	8002042 <__ledf2+0x6a>
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	2000      	movs	r0, #0
 8002096:	4563      	cmp	r3, ip
 8002098:	d0df      	beq.n	800205a <__ledf2+0x82>
 800209a:	e7d2      	b.n	8002042 <__ledf2+0x6a>
 800209c:	45c8      	cmp	r8, r9
 800209e:	d8d0      	bhi.n	8002042 <__ledf2+0x6a>
 80020a0:	2000      	movs	r0, #0
 80020a2:	45c8      	cmp	r8, r9
 80020a4:	d2d9      	bcs.n	800205a <__ledf2+0x82>
 80020a6:	e7ea      	b.n	800207e <__ledf2+0xa6>
 80020a8:	9b01      	ldr	r3, [sp, #4]
 80020aa:	4563      	cmp	r3, ip
 80020ac:	d0e4      	beq.n	8002078 <__ledf2+0xa0>
 80020ae:	e7c8      	b.n	8002042 <__ledf2+0x6a>
 80020b0:	000007ff 	.word	0x000007ff

080020b4 <__aeabi_dmul>:
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	4657      	mov	r7, sl
 80020b8:	464e      	mov	r6, r9
 80020ba:	46de      	mov	lr, fp
 80020bc:	4645      	mov	r5, r8
 80020be:	b5e0      	push	{r5, r6, r7, lr}
 80020c0:	001f      	movs	r7, r3
 80020c2:	030b      	lsls	r3, r1, #12
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	0016      	movs	r6, r2
 80020c8:	469a      	mov	sl, r3
 80020ca:	0fca      	lsrs	r2, r1, #31
 80020cc:	004b      	lsls	r3, r1, #1
 80020ce:	0004      	movs	r4, r0
 80020d0:	4691      	mov	r9, r2
 80020d2:	b085      	sub	sp, #20
 80020d4:	0d5b      	lsrs	r3, r3, #21
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x26>
 80020d8:	e1cf      	b.n	800247a <__aeabi_dmul+0x3c6>
 80020da:	4acd      	ldr	r2, [pc, #820]	@ (8002410 <__aeabi_dmul+0x35c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d055      	beq.n	800218c <__aeabi_dmul+0xd8>
 80020e0:	4651      	mov	r1, sl
 80020e2:	0f42      	lsrs	r2, r0, #29
 80020e4:	00c9      	lsls	r1, r1, #3
 80020e6:	430a      	orrs	r2, r1
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0409      	lsls	r1, r1, #16
 80020ec:	4311      	orrs	r1, r2
 80020ee:	00c2      	lsls	r2, r0, #3
 80020f0:	4690      	mov	r8, r2
 80020f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002414 <__aeabi_dmul+0x360>)
 80020f4:	468a      	mov	sl, r1
 80020f6:	4693      	mov	fp, r2
 80020f8:	449b      	add	fp, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	2500      	movs	r5, #0
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	033c      	lsls	r4, r7, #12
 8002102:	007b      	lsls	r3, r7, #1
 8002104:	0ffa      	lsrs	r2, r7, #31
 8002106:	9601      	str	r6, [sp, #4]
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	d100      	bne.n	8002112 <__aeabi_dmul+0x5e>
 8002110:	e188      	b.n	8002424 <__aeabi_dmul+0x370>
 8002112:	4abf      	ldr	r2, [pc, #764]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x66>
 8002118:	e092      	b.n	8002240 <__aeabi_dmul+0x18c>
 800211a:	4abe      	ldr	r2, [pc, #760]	@ (8002414 <__aeabi_dmul+0x360>)
 800211c:	4694      	mov	ip, r2
 800211e:	4463      	add	r3, ip
 8002120:	449b      	add	fp, r3
 8002122:	2d0a      	cmp	r5, #10
 8002124:	dc42      	bgt.n	80021ac <__aeabi_dmul+0xf8>
 8002126:	00e4      	lsls	r4, r4, #3
 8002128:	0f73      	lsrs	r3, r6, #29
 800212a:	4323      	orrs	r3, r4
 800212c:	2480      	movs	r4, #128	@ 0x80
 800212e:	4649      	mov	r1, r9
 8002130:	0424      	lsls	r4, r4, #16
 8002132:	431c      	orrs	r4, r3
 8002134:	00f3      	lsls	r3, r6, #3
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	2000      	movs	r0, #0
 800213c:	4059      	eors	r1, r3
 800213e:	b2cb      	uxtb	r3, r1
 8002140:	9303      	str	r3, [sp, #12]
 8002142:	2d02      	cmp	r5, #2
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dmul+0x94>
 8002146:	e094      	b.n	8002272 <__aeabi_dmul+0x1be>
 8002148:	2301      	movs	r3, #1
 800214a:	40ab      	lsls	r3, r5
 800214c:	001d      	movs	r5, r3
 800214e:	23a6      	movs	r3, #166	@ 0xa6
 8002150:	002a      	movs	r2, r5
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	401a      	ands	r2, r3
 8002156:	421d      	tst	r5, r3
 8002158:	d000      	beq.n	800215c <__aeabi_dmul+0xa8>
 800215a:	e229      	b.n	80025b0 <__aeabi_dmul+0x4fc>
 800215c:	2390      	movs	r3, #144	@ 0x90
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	421d      	tst	r5, r3
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0xb2>
 8002164:	e24d      	b.n	8002602 <__aeabi_dmul+0x54e>
 8002166:	2300      	movs	r3, #0
 8002168:	2480      	movs	r4, #128	@ 0x80
 800216a:	4699      	mov	r9, r3
 800216c:	0324      	lsls	r4, r4, #12
 800216e:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002170:	0010      	movs	r0, r2
 8002172:	464a      	mov	r2, r9
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	4323      	orrs	r3, r4
 8002178:	07d2      	lsls	r2, r2, #31
 800217a:	4313      	orrs	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	b005      	add	sp, #20
 8002180:	bcf0      	pop	{r4, r5, r6, r7}
 8002182:	46bb      	mov	fp, r7
 8002184:	46b2      	mov	sl, r6
 8002186:	46a9      	mov	r9, r5
 8002188:	46a0      	mov	r8, r4
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218c:	4652      	mov	r2, sl
 800218e:	4302      	orrs	r2, r0
 8002190:	4690      	mov	r8, r2
 8002192:	d000      	beq.n	8002196 <__aeabi_dmul+0xe2>
 8002194:	e1ac      	b.n	80024f0 <__aeabi_dmul+0x43c>
 8002196:	469b      	mov	fp, r3
 8002198:	2302      	movs	r3, #2
 800219a:	4692      	mov	sl, r2
 800219c:	2508      	movs	r5, #8
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	e7ae      	b.n	8002100 <__aeabi_dmul+0x4c>
 80021a2:	9b00      	ldr	r3, [sp, #0]
 80021a4:	46a2      	mov	sl, r4
 80021a6:	4699      	mov	r9, r3
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	4698      	mov	r8, r3
 80021ac:	9b02      	ldr	r3, [sp, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0x100>
 80021b2:	e1ca      	b.n	800254a <__aeabi_dmul+0x496>
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x106>
 80021b8:	e192      	b.n	80024e0 <__aeabi_dmul+0x42c>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d110      	bne.n	80021e0 <__aeabi_dmul+0x12c>
 80021be:	2300      	movs	r3, #0
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	e7d4      	b.n	8002170 <__aeabi_dmul+0xbc>
 80021c6:	2201      	movs	r2, #1
 80021c8:	087b      	lsrs	r3, r7, #1
 80021ca:	403a      	ands	r2, r7
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4652      	mov	r2, sl
 80021d0:	07d2      	lsls	r2, r2, #31
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4698      	mov	r8, r3
 80021d6:	4653      	mov	r3, sl
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	469a      	mov	sl, r3
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	4699      	mov	r9, r3
 80021e0:	465b      	mov	r3, fp
 80021e2:	1c58      	adds	r0, r3, #1
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	445b      	add	r3, fp
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dc00      	bgt.n	80021f0 <__aeabi_dmul+0x13c>
 80021ee:	e1b1      	b.n	8002554 <__aeabi_dmul+0x4a0>
 80021f0:	4642      	mov	r2, r8
 80021f2:	0752      	lsls	r2, r2, #29
 80021f4:	d00b      	beq.n	800220e <__aeabi_dmul+0x15a>
 80021f6:	220f      	movs	r2, #15
 80021f8:	4641      	mov	r1, r8
 80021fa:	400a      	ands	r2, r1
 80021fc:	2a04      	cmp	r2, #4
 80021fe:	d006      	beq.n	800220e <__aeabi_dmul+0x15a>
 8002200:	4642      	mov	r2, r8
 8002202:	1d11      	adds	r1, r2, #4
 8002204:	4541      	cmp	r1, r8
 8002206:	4192      	sbcs	r2, r2
 8002208:	4688      	mov	r8, r1
 800220a:	4252      	negs	r2, r2
 800220c:	4492      	add	sl, r2
 800220e:	4652      	mov	r2, sl
 8002210:	01d2      	lsls	r2, r2, #7
 8002212:	d506      	bpl.n	8002222 <__aeabi_dmul+0x16e>
 8002214:	4652      	mov	r2, sl
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <__aeabi_dmul+0x364>)
 8002218:	401a      	ands	r2, r3
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	4692      	mov	sl, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	18c3      	adds	r3, r0, r3
 8002222:	4a7e      	ldr	r2, [pc, #504]	@ (800241c <__aeabi_dmul+0x368>)
 8002224:	4293      	cmp	r3, r2
 8002226:	dd00      	ble.n	800222a <__aeabi_dmul+0x176>
 8002228:	e18f      	b.n	800254a <__aeabi_dmul+0x496>
 800222a:	4642      	mov	r2, r8
 800222c:	08d1      	lsrs	r1, r2, #3
 800222e:	4652      	mov	r2, sl
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	430a      	orrs	r2, r1
 8002234:	4651      	mov	r1, sl
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	024c      	lsls	r4, r1, #9
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	0d5b      	lsrs	r3, r3, #21
 800223e:	e797      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002240:	4b73      	ldr	r3, [pc, #460]	@ (8002410 <__aeabi_dmul+0x35c>)
 8002242:	4326      	orrs	r6, r4
 8002244:	469c      	mov	ip, r3
 8002246:	44e3      	add	fp, ip
 8002248:	2e00      	cmp	r6, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x19a>
 800224c:	e16f      	b.n	800252e <__aeabi_dmul+0x47a>
 800224e:	2303      	movs	r3, #3
 8002250:	4649      	mov	r1, r9
 8002252:	431d      	orrs	r5, r3
 8002254:	9b00      	ldr	r3, [sp, #0]
 8002256:	4059      	eors	r1, r3
 8002258:	b2cb      	uxtb	r3, r1
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	2d0a      	cmp	r5, #10
 800225e:	dd00      	ble.n	8002262 <__aeabi_dmul+0x1ae>
 8002260:	e133      	b.n	80024ca <__aeabi_dmul+0x416>
 8002262:	2301      	movs	r3, #1
 8002264:	40ab      	lsls	r3, r5
 8002266:	001d      	movs	r5, r3
 8002268:	2303      	movs	r3, #3
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	2288      	movs	r2, #136	@ 0x88
 800226e:	422a      	tst	r2, r5
 8002270:	d197      	bne.n	80021a2 <__aeabi_dmul+0xee>
 8002272:	4642      	mov	r2, r8
 8002274:	4643      	mov	r3, r8
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	0c12      	lsrs	r2, r2, #16
 800227a:	0016      	movs	r6, r2
 800227c:	9801      	ldr	r0, [sp, #4]
 800227e:	0c1d      	lsrs	r5, r3, #16
 8002280:	0c03      	lsrs	r3, r0, #16
 8002282:	0400      	lsls	r0, r0, #16
 8002284:	0c00      	lsrs	r0, r0, #16
 8002286:	4346      	muls	r6, r0
 8002288:	46b4      	mov	ip, r6
 800228a:	001e      	movs	r6, r3
 800228c:	436e      	muls	r6, r5
 800228e:	9600      	str	r6, [sp, #0]
 8002290:	0016      	movs	r6, r2
 8002292:	0007      	movs	r7, r0
 8002294:	435e      	muls	r6, r3
 8002296:	4661      	mov	r1, ip
 8002298:	46b0      	mov	r8, r6
 800229a:	436f      	muls	r7, r5
 800229c:	0c0e      	lsrs	r6, r1, #16
 800229e:	44b8      	add	r8, r7
 80022a0:	4446      	add	r6, r8
 80022a2:	42b7      	cmp	r7, r6
 80022a4:	d905      	bls.n	80022b2 <__aeabi_dmul+0x1fe>
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	4688      	mov	r8, r1
 80022ac:	9f00      	ldr	r7, [sp, #0]
 80022ae:	4447      	add	r7, r8
 80022b0:	9700      	str	r7, [sp, #0]
 80022b2:	4661      	mov	r1, ip
 80022b4:	0409      	lsls	r1, r1, #16
 80022b6:	0c09      	lsrs	r1, r1, #16
 80022b8:	0c37      	lsrs	r7, r6, #16
 80022ba:	0436      	lsls	r6, r6, #16
 80022bc:	468c      	mov	ip, r1
 80022be:	0031      	movs	r1, r6
 80022c0:	4461      	add	r1, ip
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	0011      	movs	r1, r2
 80022c6:	0c26      	lsrs	r6, r4, #16
 80022c8:	0424      	lsls	r4, r4, #16
 80022ca:	0c24      	lsrs	r4, r4, #16
 80022cc:	4361      	muls	r1, r4
 80022ce:	468c      	mov	ip, r1
 80022d0:	0021      	movs	r1, r4
 80022d2:	4369      	muls	r1, r5
 80022d4:	4689      	mov	r9, r1
 80022d6:	4661      	mov	r1, ip
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4372      	muls	r2, r6
 80022de:	444a      	add	r2, r9
 80022e0:	4442      	add	r2, r8
 80022e2:	4375      	muls	r5, r6
 80022e4:	4591      	cmp	r9, r2
 80022e6:	d903      	bls.n	80022f0 <__aeabi_dmul+0x23c>
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	0249      	lsls	r1, r1, #9
 80022ec:	4688      	mov	r8, r1
 80022ee:	4445      	add	r5, r8
 80022f0:	0c11      	lsrs	r1, r2, #16
 80022f2:	4688      	mov	r8, r1
 80022f4:	4661      	mov	r1, ip
 80022f6:	0409      	lsls	r1, r1, #16
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468c      	mov	ip, r1
 80022fc:	0412      	lsls	r2, r2, #16
 80022fe:	4462      	add	r2, ip
 8002300:	18b9      	adds	r1, r7, r2
 8002302:	9102      	str	r1, [sp, #8]
 8002304:	4651      	mov	r1, sl
 8002306:	0c09      	lsrs	r1, r1, #16
 8002308:	468c      	mov	ip, r1
 800230a:	4651      	mov	r1, sl
 800230c:	040f      	lsls	r7, r1, #16
 800230e:	0c3f      	lsrs	r7, r7, #16
 8002310:	0039      	movs	r1, r7
 8002312:	4341      	muls	r1, r0
 8002314:	4445      	add	r5, r8
 8002316:	4688      	mov	r8, r1
 8002318:	4661      	mov	r1, ip
 800231a:	4341      	muls	r1, r0
 800231c:	468a      	mov	sl, r1
 800231e:	4641      	mov	r1, r8
 8002320:	4660      	mov	r0, ip
 8002322:	0c09      	lsrs	r1, r1, #16
 8002324:	4689      	mov	r9, r1
 8002326:	4358      	muls	r0, r3
 8002328:	437b      	muls	r3, r7
 800232a:	4453      	add	r3, sl
 800232c:	444b      	add	r3, r9
 800232e:	459a      	cmp	sl, r3
 8002330:	d903      	bls.n	800233a <__aeabi_dmul+0x286>
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	4689      	mov	r9, r1
 8002338:	4448      	add	r0, r9
 800233a:	0c19      	lsrs	r1, r3, #16
 800233c:	4689      	mov	r9, r1
 800233e:	4641      	mov	r1, r8
 8002340:	0409      	lsls	r1, r1, #16
 8002342:	0c09      	lsrs	r1, r1, #16
 8002344:	4688      	mov	r8, r1
 8002346:	0039      	movs	r1, r7
 8002348:	4361      	muls	r1, r4
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	4443      	add	r3, r8
 800234e:	4688      	mov	r8, r1
 8002350:	4661      	mov	r1, ip
 8002352:	434c      	muls	r4, r1
 8002354:	4371      	muls	r1, r6
 8002356:	468c      	mov	ip, r1
 8002358:	4641      	mov	r1, r8
 800235a:	4377      	muls	r7, r6
 800235c:	0c0e      	lsrs	r6, r1, #16
 800235e:	193f      	adds	r7, r7, r4
 8002360:	19f6      	adds	r6, r6, r7
 8002362:	4448      	add	r0, r9
 8002364:	42b4      	cmp	r4, r6
 8002366:	d903      	bls.n	8002370 <__aeabi_dmul+0x2bc>
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	4689      	mov	r9, r1
 800236e:	44cc      	add	ip, r9
 8002370:	9902      	ldr	r1, [sp, #8]
 8002372:	9f00      	ldr	r7, [sp, #0]
 8002374:	4689      	mov	r9, r1
 8002376:	0431      	lsls	r1, r6, #16
 8002378:	444f      	add	r7, r9
 800237a:	4689      	mov	r9, r1
 800237c:	4641      	mov	r1, r8
 800237e:	4297      	cmp	r7, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	040c      	lsls	r4, r1, #16
 8002384:	0c24      	lsrs	r4, r4, #16
 8002386:	444c      	add	r4, r9
 8002388:	18ff      	adds	r7, r7, r3
 800238a:	4252      	negs	r2, r2
 800238c:	1964      	adds	r4, r4, r5
 800238e:	18a1      	adds	r1, r4, r2
 8002390:	429f      	cmp	r7, r3
 8002392:	419b      	sbcs	r3, r3
 8002394:	4688      	mov	r8, r1
 8002396:	4682      	mov	sl, r0
 8002398:	425b      	negs	r3, r3
 800239a:	4699      	mov	r9, r3
 800239c:	4590      	cmp	r8, r2
 800239e:	4192      	sbcs	r2, r2
 80023a0:	42ac      	cmp	r4, r5
 80023a2:	41a4      	sbcs	r4, r4
 80023a4:	44c2      	add	sl, r8
 80023a6:	44d1      	add	r9, sl
 80023a8:	4252      	negs	r2, r2
 80023aa:	4264      	negs	r4, r4
 80023ac:	4314      	orrs	r4, r2
 80023ae:	4599      	cmp	r9, r3
 80023b0:	419b      	sbcs	r3, r3
 80023b2:	4582      	cmp	sl, r0
 80023b4:	4192      	sbcs	r2, r2
 80023b6:	425b      	negs	r3, r3
 80023b8:	4252      	negs	r2, r2
 80023ba:	4313      	orrs	r3, r2
 80023bc:	464a      	mov	r2, r9
 80023be:	0c36      	lsrs	r6, r6, #16
 80023c0:	19a4      	adds	r4, r4, r6
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	4463      	add	r3, ip
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	0dd2      	lsrs	r2, r2, #23
 80023ca:	431a      	orrs	r2, r3
 80023cc:	9901      	ldr	r1, [sp, #4]
 80023ce:	4692      	mov	sl, r2
 80023d0:	027a      	lsls	r2, r7, #9
 80023d2:	430a      	orrs	r2, r1
 80023d4:	1e50      	subs	r0, r2, #1
 80023d6:	4182      	sbcs	r2, r0
 80023d8:	0dff      	lsrs	r7, r7, #23
 80023da:	4317      	orrs	r7, r2
 80023dc:	464a      	mov	r2, r9
 80023de:	0252      	lsls	r2, r2, #9
 80023e0:	4317      	orrs	r7, r2
 80023e2:	46b8      	mov	r8, r7
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	d500      	bpl.n	80023ea <__aeabi_dmul+0x336>
 80023e8:	e6ed      	b.n	80021c6 <__aeabi_dmul+0x112>
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <__aeabi_dmul+0x36c>)
 80023ec:	9a03      	ldr	r2, [sp, #12]
 80023ee:	445b      	add	r3, fp
 80023f0:	4691      	mov	r9, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	dc00      	bgt.n	80023f8 <__aeabi_dmul+0x344>
 80023f6:	e0ac      	b.n	8002552 <__aeabi_dmul+0x49e>
 80023f8:	003a      	movs	r2, r7
 80023fa:	0752      	lsls	r2, r2, #29
 80023fc:	d100      	bne.n	8002400 <__aeabi_dmul+0x34c>
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0x16e>
 8002400:	220f      	movs	r2, #15
 8002402:	4658      	mov	r0, fp
 8002404:	403a      	ands	r2, r7
 8002406:	2a04      	cmp	r2, #4
 8002408:	d000      	beq.n	800240c <__aeabi_dmul+0x358>
 800240a:	e6f9      	b.n	8002200 <__aeabi_dmul+0x14c>
 800240c:	e709      	b.n	8002222 <__aeabi_dmul+0x16e>
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	000007ff 	.word	0x000007ff
 8002414:	fffffc01 	.word	0xfffffc01
 8002418:	feffffff 	.word	0xfeffffff
 800241c:	000007fe 	.word	0x000007fe
 8002420:	000003ff 	.word	0x000003ff
 8002424:	0022      	movs	r2, r4
 8002426:	4332      	orrs	r2, r6
 8002428:	d06f      	beq.n	800250a <__aeabi_dmul+0x456>
 800242a:	2c00      	cmp	r4, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x37c>
 800242e:	e0c2      	b.n	80025b6 <__aeabi_dmul+0x502>
 8002430:	0020      	movs	r0, r4
 8002432:	f000 fea9 	bl	8003188 <__clzsi2>
 8002436:	0002      	movs	r2, r0
 8002438:	0003      	movs	r3, r0
 800243a:	3a0b      	subs	r2, #11
 800243c:	201d      	movs	r0, #29
 800243e:	1a82      	subs	r2, r0, r2
 8002440:	0030      	movs	r0, r6
 8002442:	0019      	movs	r1, r3
 8002444:	40d0      	lsrs	r0, r2
 8002446:	3908      	subs	r1, #8
 8002448:	408c      	lsls	r4, r1
 800244a:	0002      	movs	r2, r0
 800244c:	4322      	orrs	r2, r4
 800244e:	0034      	movs	r4, r6
 8002450:	408c      	lsls	r4, r1
 8002452:	4659      	mov	r1, fp
 8002454:	1acb      	subs	r3, r1, r3
 8002456:	4986      	ldr	r1, [pc, #536]	@ (8002670 <__aeabi_dmul+0x5bc>)
 8002458:	468b      	mov	fp, r1
 800245a:	449b      	add	fp, r3
 800245c:	2d0a      	cmp	r5, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x3ae>
 8002460:	e6a4      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002462:	4649      	mov	r1, r9
 8002464:	9b00      	ldr	r3, [sp, #0]
 8002466:	9401      	str	r4, [sp, #4]
 8002468:	4059      	eors	r1, r3
 800246a:	b2cb      	uxtb	r3, r1
 800246c:	0014      	movs	r4, r2
 800246e:	2000      	movs	r0, #0
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	2d02      	cmp	r5, #2
 8002474:	dd00      	ble.n	8002478 <__aeabi_dmul+0x3c4>
 8002476:	e667      	b.n	8002148 <__aeabi_dmul+0x94>
 8002478:	e6fb      	b.n	8002272 <__aeabi_dmul+0x1be>
 800247a:	4653      	mov	r3, sl
 800247c:	4303      	orrs	r3, r0
 800247e:	4698      	mov	r8, r3
 8002480:	d03c      	beq.n	80024fc <__aeabi_dmul+0x448>
 8002482:	4653      	mov	r3, sl
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <__aeabi_dmul+0x3d6>
 8002488:	e0a3      	b.n	80025d2 <__aeabi_dmul+0x51e>
 800248a:	4650      	mov	r0, sl
 800248c:	f000 fe7c 	bl	8003188 <__clzsi2>
 8002490:	230b      	movs	r3, #11
 8002492:	425b      	negs	r3, r3
 8002494:	469c      	mov	ip, r3
 8002496:	0002      	movs	r2, r0
 8002498:	4484      	add	ip, r0
 800249a:	0011      	movs	r1, r2
 800249c:	4650      	mov	r0, sl
 800249e:	3908      	subs	r1, #8
 80024a0:	4088      	lsls	r0, r1
 80024a2:	231d      	movs	r3, #29
 80024a4:	4680      	mov	r8, r0
 80024a6:	4660      	mov	r0, ip
 80024a8:	1a1b      	subs	r3, r3, r0
 80024aa:	0020      	movs	r0, r4
 80024ac:	40d8      	lsrs	r0, r3
 80024ae:	0003      	movs	r3, r0
 80024b0:	4640      	mov	r0, r8
 80024b2:	4303      	orrs	r3, r0
 80024b4:	469a      	mov	sl, r3
 80024b6:	0023      	movs	r3, r4
 80024b8:	408b      	lsls	r3, r1
 80024ba:	4698      	mov	r8, r3
 80024bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <__aeabi_dmul+0x5bc>)
 80024be:	2500      	movs	r5, #0
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	469b      	mov	fp, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	e61a      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024ca:	2d0f      	cmp	r5, #15
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dmul+0x41c>
 80024ce:	e0c9      	b.n	8002664 <__aeabi_dmul+0x5b0>
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	4652      	mov	r2, sl
 80024d4:	031b      	lsls	r3, r3, #12
 80024d6:	421a      	tst	r2, r3
 80024d8:	d002      	beq.n	80024e0 <__aeabi_dmul+0x42c>
 80024da:	421c      	tst	r4, r3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dmul+0x42c>
 80024de:	e092      	b.n	8002606 <__aeabi_dmul+0x552>
 80024e0:	2480      	movs	r4, #128	@ 0x80
 80024e2:	4653      	mov	r3, sl
 80024e4:	0324      	lsls	r4, r4, #12
 80024e6:	431c      	orrs	r4, r3
 80024e8:	0324      	lsls	r4, r4, #12
 80024ea:	4642      	mov	r2, r8
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	e63e      	b.n	800216e <__aeabi_dmul+0xba>
 80024f0:	469b      	mov	fp, r3
 80024f2:	2303      	movs	r3, #3
 80024f4:	4680      	mov	r8, r0
 80024f6:	250c      	movs	r5, #12
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	e601      	b.n	8002100 <__aeabi_dmul+0x4c>
 80024fc:	2300      	movs	r3, #0
 80024fe:	469a      	mov	sl, r3
 8002500:	469b      	mov	fp, r3
 8002502:	3301      	adds	r3, #1
 8002504:	2504      	movs	r5, #4
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	e5fa      	b.n	8002100 <__aeabi_dmul+0x4c>
 800250a:	2101      	movs	r1, #1
 800250c:	430d      	orrs	r5, r1
 800250e:	2d0a      	cmp	r5, #10
 8002510:	dd00      	ble.n	8002514 <__aeabi_dmul+0x460>
 8002512:	e64b      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002514:	4649      	mov	r1, r9
 8002516:	9800      	ldr	r0, [sp, #0]
 8002518:	4041      	eors	r1, r0
 800251a:	b2c9      	uxtb	r1, r1
 800251c:	9103      	str	r1, [sp, #12]
 800251e:	2d02      	cmp	r5, #2
 8002520:	dc00      	bgt.n	8002524 <__aeabi_dmul+0x470>
 8002522:	e096      	b.n	8002652 <__aeabi_dmul+0x59e>
 8002524:	2300      	movs	r3, #0
 8002526:	2400      	movs	r4, #0
 8002528:	2001      	movs	r0, #1
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	e60c      	b.n	8002148 <__aeabi_dmul+0x94>
 800252e:	4649      	mov	r1, r9
 8002530:	2302      	movs	r3, #2
 8002532:	9a00      	ldr	r2, [sp, #0]
 8002534:	432b      	orrs	r3, r5
 8002536:	4051      	eors	r1, r2
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	9203      	str	r2, [sp, #12]
 800253c:	2b0a      	cmp	r3, #10
 800253e:	dd00      	ble.n	8002542 <__aeabi_dmul+0x48e>
 8002540:	e634      	b.n	80021ac <__aeabi_dmul+0xf8>
 8002542:	2d00      	cmp	r5, #0
 8002544:	d157      	bne.n	80025f6 <__aeabi_dmul+0x542>
 8002546:	9b03      	ldr	r3, [sp, #12]
 8002548:	4699      	mov	r9, r3
 800254a:	2400      	movs	r4, #0
 800254c:	2200      	movs	r2, #0
 800254e:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <__aeabi_dmul+0x5c0>)
 8002550:	e60e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002552:	4658      	mov	r0, fp
 8002554:	2101      	movs	r1, #1
 8002556:	1ac9      	subs	r1, r1, r3
 8002558:	2938      	cmp	r1, #56	@ 0x38
 800255a:	dd00      	ble.n	800255e <__aeabi_dmul+0x4aa>
 800255c:	e62f      	b.n	80021be <__aeabi_dmul+0x10a>
 800255e:	291f      	cmp	r1, #31
 8002560:	dd56      	ble.n	8002610 <__aeabi_dmul+0x55c>
 8002562:	221f      	movs	r2, #31
 8002564:	4654      	mov	r4, sl
 8002566:	4252      	negs	r2, r2
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	40dc      	lsrs	r4, r3
 800256c:	2920      	cmp	r1, #32
 800256e:	d007      	beq.n	8002580 <__aeabi_dmul+0x4cc>
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <__aeabi_dmul+0x5c4>)
 8002572:	4642      	mov	r2, r8
 8002574:	469c      	mov	ip, r3
 8002576:	4653      	mov	r3, sl
 8002578:	4460      	add	r0, ip
 800257a:	4083      	lsls	r3, r0
 800257c:	431a      	orrs	r2, r3
 800257e:	4690      	mov	r8, r2
 8002580:	4642      	mov	r2, r8
 8002582:	2107      	movs	r1, #7
 8002584:	1e53      	subs	r3, r2, #1
 8002586:	419a      	sbcs	r2, r3
 8002588:	000b      	movs	r3, r1
 800258a:	4322      	orrs	r2, r4
 800258c:	4013      	ands	r3, r2
 800258e:	2400      	movs	r4, #0
 8002590:	4211      	tst	r1, r2
 8002592:	d009      	beq.n	80025a8 <__aeabi_dmul+0x4f4>
 8002594:	230f      	movs	r3, #15
 8002596:	4013      	ands	r3, r2
 8002598:	2b04      	cmp	r3, #4
 800259a:	d05d      	beq.n	8002658 <__aeabi_dmul+0x5a4>
 800259c:	1d11      	adds	r1, r2, #4
 800259e:	4291      	cmp	r1, r2
 80025a0:	419b      	sbcs	r3, r3
 80025a2:	000a      	movs	r2, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	075b      	lsls	r3, r3, #29
 80025a8:	08d2      	lsrs	r2, r2, #3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	e5df      	b.n	8002170 <__aeabi_dmul+0xbc>
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4699      	mov	r9, r3
 80025b4:	e5fa      	b.n	80021ac <__aeabi_dmul+0xf8>
 80025b6:	9801      	ldr	r0, [sp, #4]
 80025b8:	f000 fde6 	bl	8003188 <__clzsi2>
 80025bc:	0002      	movs	r2, r0
 80025be:	0003      	movs	r3, r0
 80025c0:	3215      	adds	r2, #21
 80025c2:	3320      	adds	r3, #32
 80025c4:	2a1c      	cmp	r2, #28
 80025c6:	dc00      	bgt.n	80025ca <__aeabi_dmul+0x516>
 80025c8:	e738      	b.n	800243c <__aeabi_dmul+0x388>
 80025ca:	9a01      	ldr	r2, [sp, #4]
 80025cc:	3808      	subs	r0, #8
 80025ce:	4082      	lsls	r2, r0
 80025d0:	e73f      	b.n	8002452 <__aeabi_dmul+0x39e>
 80025d2:	f000 fdd9 	bl	8003188 <__clzsi2>
 80025d6:	2315      	movs	r3, #21
 80025d8:	469c      	mov	ip, r3
 80025da:	4484      	add	ip, r0
 80025dc:	0002      	movs	r2, r0
 80025de:	4663      	mov	r3, ip
 80025e0:	3220      	adds	r2, #32
 80025e2:	2b1c      	cmp	r3, #28
 80025e4:	dc00      	bgt.n	80025e8 <__aeabi_dmul+0x534>
 80025e6:	e758      	b.n	800249a <__aeabi_dmul+0x3e6>
 80025e8:	2300      	movs	r3, #0
 80025ea:	4698      	mov	r8, r3
 80025ec:	0023      	movs	r3, r4
 80025ee:	3808      	subs	r0, #8
 80025f0:	4083      	lsls	r3, r0
 80025f2:	469a      	mov	sl, r3
 80025f4:	e762      	b.n	80024bc <__aeabi_dmul+0x408>
 80025f6:	001d      	movs	r5, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	2400      	movs	r4, #0
 80025fc:	2002      	movs	r0, #2
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	e5a2      	b.n	8002148 <__aeabi_dmul+0x94>
 8002602:	9002      	str	r0, [sp, #8]
 8002604:	e632      	b.n	800226c <__aeabi_dmul+0x1b8>
 8002606:	431c      	orrs	r4, r3
 8002608:	9b00      	ldr	r3, [sp, #0]
 800260a:	9a01      	ldr	r2, [sp, #4]
 800260c:	4699      	mov	r9, r3
 800260e:	e5ae      	b.n	800216e <__aeabi_dmul+0xba>
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <__aeabi_dmul+0x5c8>)
 8002612:	4652      	mov	r2, sl
 8002614:	18c3      	adds	r3, r0, r3
 8002616:	4640      	mov	r0, r8
 8002618:	409a      	lsls	r2, r3
 800261a:	40c8      	lsrs	r0, r1
 800261c:	4302      	orrs	r2, r0
 800261e:	4640      	mov	r0, r8
 8002620:	4098      	lsls	r0, r3
 8002622:	0003      	movs	r3, r0
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	4183      	sbcs	r3, r0
 8002628:	4654      	mov	r4, sl
 800262a:	431a      	orrs	r2, r3
 800262c:	40cc      	lsrs	r4, r1
 800262e:	0753      	lsls	r3, r2, #29
 8002630:	d009      	beq.n	8002646 <__aeabi_dmul+0x592>
 8002632:	230f      	movs	r3, #15
 8002634:	4013      	ands	r3, r2
 8002636:	2b04      	cmp	r3, #4
 8002638:	d005      	beq.n	8002646 <__aeabi_dmul+0x592>
 800263a:	1d13      	adds	r3, r2, #4
 800263c:	4293      	cmp	r3, r2
 800263e:	4192      	sbcs	r2, r2
 8002640:	4252      	negs	r2, r2
 8002642:	18a4      	adds	r4, r4, r2
 8002644:	001a      	movs	r2, r3
 8002646:	0223      	lsls	r3, r4, #8
 8002648:	d508      	bpl.n	800265c <__aeabi_dmul+0x5a8>
 800264a:	2301      	movs	r3, #1
 800264c:	2400      	movs	r4, #0
 800264e:	2200      	movs	r2, #0
 8002650:	e58e      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002652:	4689      	mov	r9, r1
 8002654:	2400      	movs	r4, #0
 8002656:	e58b      	b.n	8002170 <__aeabi_dmul+0xbc>
 8002658:	2300      	movs	r3, #0
 800265a:	e7a5      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	0264      	lsls	r4, r4, #9
 8002660:	0b24      	lsrs	r4, r4, #12
 8002662:	e7a1      	b.n	80025a8 <__aeabi_dmul+0x4f4>
 8002664:	9b00      	ldr	r3, [sp, #0]
 8002666:	46a2      	mov	sl, r4
 8002668:	4699      	mov	r9, r3
 800266a:	9b01      	ldr	r3, [sp, #4]
 800266c:	4698      	mov	r8, r3
 800266e:	e737      	b.n	80024e0 <__aeabi_dmul+0x42c>
 8002670:	fffffc0d 	.word	0xfffffc0d
 8002674:	000007ff 	.word	0x000007ff
 8002678:	0000043e 	.word	0x0000043e
 800267c:	0000041e 	.word	0x0000041e

08002680 <__aeabi_dsub>:
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	4657      	mov	r7, sl
 8002684:	464e      	mov	r6, r9
 8002686:	4645      	mov	r5, r8
 8002688:	46de      	mov	lr, fp
 800268a:	b5e0      	push	{r5, r6, r7, lr}
 800268c:	b083      	sub	sp, #12
 800268e:	9000      	str	r0, [sp, #0]
 8002690:	9101      	str	r1, [sp, #4]
 8002692:	030c      	lsls	r4, r1, #12
 8002694:	004d      	lsls	r5, r1, #1
 8002696:	0fce      	lsrs	r6, r1, #31
 8002698:	0a61      	lsrs	r1, r4, #9
 800269a:	9c00      	ldr	r4, [sp, #0]
 800269c:	005f      	lsls	r7, r3, #1
 800269e:	0f64      	lsrs	r4, r4, #29
 80026a0:	430c      	orrs	r4, r1
 80026a2:	9900      	ldr	r1, [sp, #0]
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	00c8      	lsls	r0, r1, #3
 80026aa:	0319      	lsls	r1, r3, #12
 80026ac:	0d7b      	lsrs	r3, r7, #21
 80026ae:	4699      	mov	r9, r3
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	4fcc      	ldr	r7, [pc, #816]	@ (80029e4 <__aeabi_dsub+0x364>)
 80026b4:	0fdb      	lsrs	r3, r3, #31
 80026b6:	469c      	mov	ip, r3
 80026b8:	0a4b      	lsrs	r3, r1, #9
 80026ba:	9900      	ldr	r1, [sp, #0]
 80026bc:	4680      	mov	r8, r0
 80026be:	0f49      	lsrs	r1, r1, #29
 80026c0:	4319      	orrs	r1, r3
 80026c2:	9b00      	ldr	r3, [sp, #0]
 80026c4:	468b      	mov	fp, r1
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	4692      	mov	sl, r2
 80026ca:	0d6d      	lsrs	r5, r5, #21
 80026cc:	45b9      	cmp	r9, r7
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x52>
 80026d0:	e0bf      	b.n	8002852 <__aeabi_dsub+0x1d2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	4661      	mov	r1, ip
 80026d6:	4059      	eors	r1, r3
 80026d8:	464b      	mov	r3, r9
 80026da:	468c      	mov	ip, r1
 80026dc:	1aeb      	subs	r3, r5, r3
 80026de:	428e      	cmp	r6, r1
 80026e0:	d075      	beq.n	80027ce <__aeabi_dsub+0x14e>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dc00      	bgt.n	80026e8 <__aeabi_dsub+0x68>
 80026e6:	e2a3      	b.n	8002c30 <__aeabi_dsub+0x5b0>
 80026e8:	4649      	mov	r1, r9
 80026ea:	2900      	cmp	r1, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x70>
 80026ee:	e0ce      	b.n	800288e <__aeabi_dsub+0x20e>
 80026f0:	42bd      	cmp	r5, r7
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dsub+0x76>
 80026f4:	e200      	b.n	8002af8 <__aeabi_dsub+0x478>
 80026f6:	2701      	movs	r7, #1
 80026f8:	2b38      	cmp	r3, #56	@ 0x38
 80026fa:	dc19      	bgt.n	8002730 <__aeabi_dsub+0xb0>
 80026fc:	2780      	movs	r7, #128	@ 0x80
 80026fe:	4659      	mov	r1, fp
 8002700:	043f      	lsls	r7, r7, #16
 8002702:	4339      	orrs	r1, r7
 8002704:	468b      	mov	fp, r1
 8002706:	2b1f      	cmp	r3, #31
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0x8c>
 800270a:	e1fa      	b.n	8002b02 <__aeabi_dsub+0x482>
 800270c:	2720      	movs	r7, #32
 800270e:	1af9      	subs	r1, r7, r3
 8002710:	468c      	mov	ip, r1
 8002712:	4659      	mov	r1, fp
 8002714:	4667      	mov	r7, ip
 8002716:	40b9      	lsls	r1, r7
 8002718:	000f      	movs	r7, r1
 800271a:	0011      	movs	r1, r2
 800271c:	40d9      	lsrs	r1, r3
 800271e:	430f      	orrs	r7, r1
 8002720:	4661      	mov	r1, ip
 8002722:	408a      	lsls	r2, r1
 8002724:	1e51      	subs	r1, r2, #1
 8002726:	418a      	sbcs	r2, r1
 8002728:	4659      	mov	r1, fp
 800272a:	40d9      	lsrs	r1, r3
 800272c:	4317      	orrs	r7, r2
 800272e:	1a64      	subs	r4, r4, r1
 8002730:	1bc7      	subs	r7, r0, r7
 8002732:	42b8      	cmp	r0, r7
 8002734:	4180      	sbcs	r0, r0
 8002736:	4240      	negs	r0, r0
 8002738:	1a24      	subs	r4, r4, r0
 800273a:	0223      	lsls	r3, r4, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0xc0>
 800273e:	e140      	b.n	80029c2 <__aeabi_dsub+0x342>
 8002740:	0264      	lsls	r4, r4, #9
 8002742:	0a64      	lsrs	r4, r4, #9
 8002744:	2c00      	cmp	r4, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0xca>
 8002748:	e154      	b.n	80029f4 <__aeabi_dsub+0x374>
 800274a:	0020      	movs	r0, r4
 800274c:	f000 fd1c 	bl	8003188 <__clzsi2>
 8002750:	0003      	movs	r3, r0
 8002752:	3b08      	subs	r3, #8
 8002754:	2120      	movs	r1, #32
 8002756:	0038      	movs	r0, r7
 8002758:	1aca      	subs	r2, r1, r3
 800275a:	40d0      	lsrs	r0, r2
 800275c:	409c      	lsls	r4, r3
 800275e:	0002      	movs	r2, r0
 8002760:	409f      	lsls	r7, r3
 8002762:	4322      	orrs	r2, r4
 8002764:	429d      	cmp	r5, r3
 8002766:	dd00      	ble.n	800276a <__aeabi_dsub+0xea>
 8002768:	e1a6      	b.n	8002ab8 <__aeabi_dsub+0x438>
 800276a:	1b58      	subs	r0, r3, r5
 800276c:	3001      	adds	r0, #1
 800276e:	1a09      	subs	r1, r1, r0
 8002770:	003c      	movs	r4, r7
 8002772:	408f      	lsls	r7, r1
 8002774:	40c4      	lsrs	r4, r0
 8002776:	1e7b      	subs	r3, r7, #1
 8002778:	419f      	sbcs	r7, r3
 800277a:	0013      	movs	r3, r2
 800277c:	408b      	lsls	r3, r1
 800277e:	4327      	orrs	r7, r4
 8002780:	431f      	orrs	r7, r3
 8002782:	40c2      	lsrs	r2, r0
 8002784:	003b      	movs	r3, r7
 8002786:	0014      	movs	r4, r2
 8002788:	2500      	movs	r5, #0
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x110>
 800278e:	e1f7      	b.n	8002b80 <__aeabi_dsub+0x500>
 8002790:	077b      	lsls	r3, r7, #29
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x116>
 8002794:	e377      	b.n	8002e86 <__aeabi_dsub+0x806>
 8002796:	230f      	movs	r3, #15
 8002798:	0038      	movs	r0, r7
 800279a:	403b      	ands	r3, r7
 800279c:	2b04      	cmp	r3, #4
 800279e:	d004      	beq.n	80027aa <__aeabi_dsub+0x12a>
 80027a0:	1d38      	adds	r0, r7, #4
 80027a2:	42b8      	cmp	r0, r7
 80027a4:	41bf      	sbcs	r7, r7
 80027a6:	427f      	negs	r7, r7
 80027a8:	19e4      	adds	r4, r4, r7
 80027aa:	0223      	lsls	r3, r4, #8
 80027ac:	d400      	bmi.n	80027b0 <__aeabi_dsub+0x130>
 80027ae:	e368      	b.n	8002e82 <__aeabi_dsub+0x802>
 80027b0:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <__aeabi_dsub+0x364>)
 80027b2:	3501      	adds	r5, #1
 80027b4:	429d      	cmp	r5, r3
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x13a>
 80027b8:	e0f4      	b.n	80029a4 <__aeabi_dsub+0x324>
 80027ba:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <__aeabi_dsub+0x368>)
 80027bc:	056d      	lsls	r5, r5, #21
 80027be:	401c      	ands	r4, r3
 80027c0:	0d6d      	lsrs	r5, r5, #21
 80027c2:	0767      	lsls	r7, r4, #29
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	0264      	lsls	r4, r4, #9
 80027c8:	4307      	orrs	r7, r0
 80027ca:	0b24      	lsrs	r4, r4, #12
 80027cc:	e0ec      	b.n	80029a8 <__aeabi_dsub+0x328>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dc00      	bgt.n	80027d4 <__aeabi_dsub+0x154>
 80027d2:	e329      	b.n	8002e28 <__aeabi_dsub+0x7a8>
 80027d4:	4649      	mov	r1, r9
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d000      	beq.n	80027dc <__aeabi_dsub+0x15c>
 80027da:	e0d6      	b.n	800298a <__aeabi_dsub+0x30a>
 80027dc:	4659      	mov	r1, fp
 80027de:	4311      	orrs	r1, r2
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x164>
 80027e2:	e12e      	b.n	8002a42 <__aeabi_dsub+0x3c2>
 80027e4:	1e59      	subs	r1, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x16c>
 80027ea:	e1e6      	b.n	8002bba <__aeabi_dsub+0x53a>
 80027ec:	42bb      	cmp	r3, r7
 80027ee:	d100      	bne.n	80027f2 <__aeabi_dsub+0x172>
 80027f0:	e182      	b.n	8002af8 <__aeabi_dsub+0x478>
 80027f2:	2701      	movs	r7, #1
 80027f4:	000b      	movs	r3, r1
 80027f6:	2938      	cmp	r1, #56	@ 0x38
 80027f8:	dc14      	bgt.n	8002824 <__aeabi_dsub+0x1a4>
 80027fa:	2b1f      	cmp	r3, #31
 80027fc:	dd00      	ble.n	8002800 <__aeabi_dsub+0x180>
 80027fe:	e23c      	b.n	8002c7a <__aeabi_dsub+0x5fa>
 8002800:	2720      	movs	r7, #32
 8002802:	1af9      	subs	r1, r7, r3
 8002804:	468c      	mov	ip, r1
 8002806:	4659      	mov	r1, fp
 8002808:	4667      	mov	r7, ip
 800280a:	40b9      	lsls	r1, r7
 800280c:	000f      	movs	r7, r1
 800280e:	0011      	movs	r1, r2
 8002810:	40d9      	lsrs	r1, r3
 8002812:	430f      	orrs	r7, r1
 8002814:	4661      	mov	r1, ip
 8002816:	408a      	lsls	r2, r1
 8002818:	1e51      	subs	r1, r2, #1
 800281a:	418a      	sbcs	r2, r1
 800281c:	4659      	mov	r1, fp
 800281e:	40d9      	lsrs	r1, r3
 8002820:	4317      	orrs	r7, r2
 8002822:	1864      	adds	r4, r4, r1
 8002824:	183f      	adds	r7, r7, r0
 8002826:	4287      	cmp	r7, r0
 8002828:	4180      	sbcs	r0, r0
 800282a:	4240      	negs	r0, r0
 800282c:	1824      	adds	r4, r4, r0
 800282e:	0223      	lsls	r3, r4, #8
 8002830:	d400      	bmi.n	8002834 <__aeabi_dsub+0x1b4>
 8002832:	e0c6      	b.n	80029c2 <__aeabi_dsub+0x342>
 8002834:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <__aeabi_dsub+0x364>)
 8002836:	3501      	adds	r5, #1
 8002838:	429d      	cmp	r5, r3
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x1be>
 800283c:	e0b2      	b.n	80029a4 <__aeabi_dsub+0x324>
 800283e:	2101      	movs	r1, #1
 8002840:	4b69      	ldr	r3, [pc, #420]	@ (80029e8 <__aeabi_dsub+0x368>)
 8002842:	087a      	lsrs	r2, r7, #1
 8002844:	401c      	ands	r4, r3
 8002846:	4039      	ands	r1, r7
 8002848:	430a      	orrs	r2, r1
 800284a:	07e7      	lsls	r7, r4, #31
 800284c:	4317      	orrs	r7, r2
 800284e:	0864      	lsrs	r4, r4, #1
 8002850:	e79e      	b.n	8002790 <__aeabi_dsub+0x110>
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <__aeabi_dsub+0x36c>)
 8002854:	4311      	orrs	r1, r2
 8002856:	468a      	mov	sl, r1
 8002858:	18eb      	adds	r3, r5, r3
 800285a:	2900      	cmp	r1, #0
 800285c:	d028      	beq.n	80028b0 <__aeabi_dsub+0x230>
 800285e:	4566      	cmp	r6, ip
 8002860:	d02c      	beq.n	80028bc <__aeabi_dsub+0x23c>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d05b      	beq.n	800291e <__aeabi_dsub+0x29e>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x1ec>
 800286a:	e12c      	b.n	8002ac6 <__aeabi_dsub+0x446>
 800286c:	465b      	mov	r3, fp
 800286e:	4666      	mov	r6, ip
 8002870:	075f      	lsls	r7, r3, #29
 8002872:	08d2      	lsrs	r2, r2, #3
 8002874:	4317      	orrs	r7, r2
 8002876:	08dd      	lsrs	r5, r3, #3
 8002878:	003b      	movs	r3, r7
 800287a:	432b      	orrs	r3, r5
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x200>
 800287e:	e0e2      	b.n	8002a46 <__aeabi_dsub+0x3c6>
 8002880:	2480      	movs	r4, #128	@ 0x80
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	432c      	orrs	r4, r5
 8002886:	0324      	lsls	r4, r4, #12
 8002888:	4d56      	ldr	r5, [pc, #344]	@ (80029e4 <__aeabi_dsub+0x364>)
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	e08c      	b.n	80029a8 <__aeabi_dsub+0x328>
 800288e:	4659      	mov	r1, fp
 8002890:	4311      	orrs	r1, r2
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x216>
 8002894:	e0d5      	b.n	8002a42 <__aeabi_dsub+0x3c2>
 8002896:	1e59      	subs	r1, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x21e>
 800289c:	e1b9      	b.n	8002c12 <__aeabi_dsub+0x592>
 800289e:	42bb      	cmp	r3, r7
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x224>
 80028a2:	e1b1      	b.n	8002c08 <__aeabi_dsub+0x588>
 80028a4:	2701      	movs	r7, #1
 80028a6:	000b      	movs	r3, r1
 80028a8:	2938      	cmp	r1, #56	@ 0x38
 80028aa:	dd00      	ble.n	80028ae <__aeabi_dsub+0x22e>
 80028ac:	e740      	b.n	8002730 <__aeabi_dsub+0xb0>
 80028ae:	e72a      	b.n	8002706 <__aeabi_dsub+0x86>
 80028b0:	4661      	mov	r1, ip
 80028b2:	2701      	movs	r7, #1
 80028b4:	4079      	eors	r1, r7
 80028b6:	468c      	mov	ip, r1
 80028b8:	4566      	cmp	r6, ip
 80028ba:	d1d2      	bne.n	8002862 <__aeabi_dsub+0x1e2>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x242>
 80028c0:	e0c5      	b.n	8002a4e <__aeabi_dsub+0x3ce>
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d000      	beq.n	80028c8 <__aeabi_dsub+0x248>
 80028c6:	e155      	b.n	8002b74 <__aeabi_dsub+0x4f4>
 80028c8:	464b      	mov	r3, r9
 80028ca:	0025      	movs	r5, r4
 80028cc:	4305      	orrs	r5, r0
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x252>
 80028d0:	e212      	b.n	8002cf8 <__aeabi_dsub+0x678>
 80028d2:	1e59      	subs	r1, r3, #1
 80028d4:	468c      	mov	ip, r1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x25c>
 80028da:	e249      	b.n	8002d70 <__aeabi_dsub+0x6f0>
 80028dc:	4d41      	ldr	r5, [pc, #260]	@ (80029e4 <__aeabi_dsub+0x364>)
 80028de:	42ab      	cmp	r3, r5
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x264>
 80028e2:	e28f      	b.n	8002e04 <__aeabi_dsub+0x784>
 80028e4:	2701      	movs	r7, #1
 80028e6:	2938      	cmp	r1, #56	@ 0x38
 80028e8:	dc11      	bgt.n	800290e <__aeabi_dsub+0x28e>
 80028ea:	4663      	mov	r3, ip
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0x272>
 80028f0:	e25b      	b.n	8002daa <__aeabi_dsub+0x72a>
 80028f2:	4661      	mov	r1, ip
 80028f4:	2320      	movs	r3, #32
 80028f6:	0027      	movs	r7, r4
 80028f8:	1a5b      	subs	r3, r3, r1
 80028fa:	0005      	movs	r5, r0
 80028fc:	4098      	lsls	r0, r3
 80028fe:	409f      	lsls	r7, r3
 8002900:	40cd      	lsrs	r5, r1
 8002902:	1e43      	subs	r3, r0, #1
 8002904:	4198      	sbcs	r0, r3
 8002906:	40cc      	lsrs	r4, r1
 8002908:	432f      	orrs	r7, r5
 800290a:	4307      	orrs	r7, r0
 800290c:	44a3      	add	fp, r4
 800290e:	18bf      	adds	r7, r7, r2
 8002910:	4297      	cmp	r7, r2
 8002912:	4192      	sbcs	r2, r2
 8002914:	4252      	negs	r2, r2
 8002916:	445a      	add	r2, fp
 8002918:	0014      	movs	r4, r2
 800291a:	464d      	mov	r5, r9
 800291c:	e787      	b.n	800282e <__aeabi_dsub+0x1ae>
 800291e:	4f34      	ldr	r7, [pc, #208]	@ (80029f0 <__aeabi_dsub+0x370>)
 8002920:	1c6b      	adds	r3, r5, #1
 8002922:	423b      	tst	r3, r7
 8002924:	d000      	beq.n	8002928 <__aeabi_dsub+0x2a8>
 8002926:	e0b6      	b.n	8002a96 <__aeabi_dsub+0x416>
 8002928:	4659      	mov	r1, fp
 800292a:	0023      	movs	r3, r4
 800292c:	4311      	orrs	r1, r2
 800292e:	000f      	movs	r7, r1
 8002930:	4303      	orrs	r3, r0
 8002932:	2d00      	cmp	r5, #0
 8002934:	d000      	beq.n	8002938 <__aeabi_dsub+0x2b8>
 8002936:	e126      	b.n	8002b86 <__aeabi_dsub+0x506>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <__aeabi_dsub+0x2be>
 800293c:	e1c0      	b.n	8002cc0 <__aeabi_dsub+0x640>
 800293e:	2900      	cmp	r1, #0
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x2c4>
 8002942:	e0a1      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002944:	1a83      	subs	r3, r0, r2
 8002946:	4698      	mov	r8, r3
 8002948:	465b      	mov	r3, fp
 800294a:	4540      	cmp	r0, r8
 800294c:	41ad      	sbcs	r5, r5
 800294e:	1ae3      	subs	r3, r4, r3
 8002950:	426d      	negs	r5, r5
 8002952:	1b5b      	subs	r3, r3, r5
 8002954:	2580      	movs	r5, #128	@ 0x80
 8002956:	042d      	lsls	r5, r5, #16
 8002958:	422b      	tst	r3, r5
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x2de>
 800295c:	e14b      	b.n	8002bf6 <__aeabi_dsub+0x576>
 800295e:	465b      	mov	r3, fp
 8002960:	1a10      	subs	r0, r2, r0
 8002962:	4282      	cmp	r2, r0
 8002964:	4192      	sbcs	r2, r2
 8002966:	1b1c      	subs	r4, r3, r4
 8002968:	0007      	movs	r7, r0
 800296a:	2601      	movs	r6, #1
 800296c:	4663      	mov	r3, ip
 800296e:	4252      	negs	r2, r2
 8002970:	1aa4      	subs	r4, r4, r2
 8002972:	4327      	orrs	r7, r4
 8002974:	401e      	ands	r6, r3
 8002976:	2f00      	cmp	r7, #0
 8002978:	d100      	bne.n	800297c <__aeabi_dsub+0x2fc>
 800297a:	e142      	b.n	8002c02 <__aeabi_dsub+0x582>
 800297c:	422c      	tst	r4, r5
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x302>
 8002980:	e26d      	b.n	8002e5e <__aeabi_dsub+0x7de>
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <__aeabi_dsub+0x368>)
 8002984:	2501      	movs	r5, #1
 8002986:	401c      	ands	r4, r3
 8002988:	e71b      	b.n	80027c2 <__aeabi_dsub+0x142>
 800298a:	42bd      	cmp	r5, r7
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x310>
 800298e:	e13b      	b.n	8002c08 <__aeabi_dsub+0x588>
 8002990:	2701      	movs	r7, #1
 8002992:	2b38      	cmp	r3, #56	@ 0x38
 8002994:	dd00      	ble.n	8002998 <__aeabi_dsub+0x318>
 8002996:	e745      	b.n	8002824 <__aeabi_dsub+0x1a4>
 8002998:	2780      	movs	r7, #128	@ 0x80
 800299a:	4659      	mov	r1, fp
 800299c:	043f      	lsls	r7, r7, #16
 800299e:	4339      	orrs	r1, r7
 80029a0:	468b      	mov	fp, r1
 80029a2:	e72a      	b.n	80027fa <__aeabi_dsub+0x17a>
 80029a4:	2400      	movs	r4, #0
 80029a6:	2700      	movs	r7, #0
 80029a8:	052d      	lsls	r5, r5, #20
 80029aa:	4325      	orrs	r5, r4
 80029ac:	07f6      	lsls	r6, r6, #31
 80029ae:	4335      	orrs	r5, r6
 80029b0:	0038      	movs	r0, r7
 80029b2:	0029      	movs	r1, r5
 80029b4:	b003      	add	sp, #12
 80029b6:	bcf0      	pop	{r4, r5, r6, r7}
 80029b8:	46bb      	mov	fp, r7
 80029ba:	46b2      	mov	sl, r6
 80029bc:	46a9      	mov	r9, r5
 80029be:	46a0      	mov	r8, r4
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c2:	077b      	lsls	r3, r7, #29
 80029c4:	d004      	beq.n	80029d0 <__aeabi_dsub+0x350>
 80029c6:	230f      	movs	r3, #15
 80029c8:	403b      	ands	r3, r7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d000      	beq.n	80029d0 <__aeabi_dsub+0x350>
 80029ce:	e6e7      	b.n	80027a0 <__aeabi_dsub+0x120>
 80029d0:	002b      	movs	r3, r5
 80029d2:	08f8      	lsrs	r0, r7, #3
 80029d4:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <__aeabi_dsub+0x364>)
 80029d6:	0767      	lsls	r7, r4, #29
 80029d8:	4307      	orrs	r7, r0
 80029da:	08e5      	lsrs	r5, r4, #3
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x362>
 80029e0:	e74a      	b.n	8002878 <__aeabi_dsub+0x1f8>
 80029e2:	e0a5      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 80029e4:	000007ff 	.word	0x000007ff
 80029e8:	ff7fffff 	.word	0xff7fffff
 80029ec:	fffff801 	.word	0xfffff801
 80029f0:	000007fe 	.word	0x000007fe
 80029f4:	0038      	movs	r0, r7
 80029f6:	f000 fbc7 	bl	8003188 <__clzsi2>
 80029fa:	0003      	movs	r3, r0
 80029fc:	3318      	adds	r3, #24
 80029fe:	2b1f      	cmp	r3, #31
 8002a00:	dc00      	bgt.n	8002a04 <__aeabi_dsub+0x384>
 8002a02:	e6a7      	b.n	8002754 <__aeabi_dsub+0xd4>
 8002a04:	003a      	movs	r2, r7
 8002a06:	3808      	subs	r0, #8
 8002a08:	4082      	lsls	r2, r0
 8002a0a:	429d      	cmp	r5, r3
 8002a0c:	dd00      	ble.n	8002a10 <__aeabi_dsub+0x390>
 8002a0e:	e08a      	b.n	8002b26 <__aeabi_dsub+0x4a6>
 8002a10:	1b5b      	subs	r3, r3, r5
 8002a12:	1c58      	adds	r0, r3, #1
 8002a14:	281f      	cmp	r0, #31
 8002a16:	dc00      	bgt.n	8002a1a <__aeabi_dsub+0x39a>
 8002a18:	e1d8      	b.n	8002dcc <__aeabi_dsub+0x74c>
 8002a1a:	0017      	movs	r7, r2
 8002a1c:	3b1f      	subs	r3, #31
 8002a1e:	40df      	lsrs	r7, r3
 8002a20:	2820      	cmp	r0, #32
 8002a22:	d005      	beq.n	8002a30 <__aeabi_dsub+0x3b0>
 8002a24:	2340      	movs	r3, #64	@ 0x40
 8002a26:	1a1b      	subs	r3, r3, r0
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	1e53      	subs	r3, r2, #1
 8002a2c:	419a      	sbcs	r2, r3
 8002a2e:	4317      	orrs	r7, r2
 8002a30:	2500      	movs	r5, #0
 8002a32:	2f00      	cmp	r7, #0
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x3b8>
 8002a36:	e0e5      	b.n	8002c04 <__aeabi_dsub+0x584>
 8002a38:	077b      	lsls	r3, r7, #29
 8002a3a:	d000      	beq.n	8002a3e <__aeabi_dsub+0x3be>
 8002a3c:	e6ab      	b.n	8002796 <__aeabi_dsub+0x116>
 8002a3e:	002c      	movs	r4, r5
 8002a40:	e7c6      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002a42:	08c0      	lsrs	r0, r0, #3
 8002a44:	e7c6      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002a46:	2700      	movs	r7, #0
 8002a48:	2400      	movs	r4, #0
 8002a4a:	4dd1      	ldr	r5, [pc, #836]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002a4c:	e7ac      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002a4e:	4fd1      	ldr	r7, [pc, #836]	@ (8002d94 <__aeabi_dsub+0x714>)
 8002a50:	1c6b      	adds	r3, r5, #1
 8002a52:	423b      	tst	r3, r7
 8002a54:	d171      	bne.n	8002b3a <__aeabi_dsub+0x4ba>
 8002a56:	0023      	movs	r3, r4
 8002a58:	4303      	orrs	r3, r0
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	d000      	beq.n	8002a60 <__aeabi_dsub+0x3e0>
 8002a5e:	e14e      	b.n	8002cfe <__aeabi_dsub+0x67e>
 8002a60:	4657      	mov	r7, sl
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x3e8>
 8002a66:	e1b5      	b.n	8002dd4 <__aeabi_dsub+0x754>
 8002a68:	2f00      	cmp	r7, #0
 8002a6a:	d00d      	beq.n	8002a88 <__aeabi_dsub+0x408>
 8002a6c:	1883      	adds	r3, r0, r2
 8002a6e:	4283      	cmp	r3, r0
 8002a70:	4180      	sbcs	r0, r0
 8002a72:	445c      	add	r4, fp
 8002a74:	4240      	negs	r0, r0
 8002a76:	1824      	adds	r4, r4, r0
 8002a78:	0222      	lsls	r2, r4, #8
 8002a7a:	d500      	bpl.n	8002a7e <__aeabi_dsub+0x3fe>
 8002a7c:	e1c8      	b.n	8002e10 <__aeabi_dsub+0x790>
 8002a7e:	001f      	movs	r7, r3
 8002a80:	4698      	mov	r8, r3
 8002a82:	4327      	orrs	r7, r4
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x408>
 8002a86:	e0bc      	b.n	8002c02 <__aeabi_dsub+0x582>
 8002a88:	4643      	mov	r3, r8
 8002a8a:	0767      	lsls	r7, r4, #29
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	431f      	orrs	r7, r3
 8002a90:	08e5      	lsrs	r5, r4, #3
 8002a92:	2300      	movs	r3, #0
 8002a94:	e04c      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002a96:	1a83      	subs	r3, r0, r2
 8002a98:	4698      	mov	r8, r3
 8002a9a:	465b      	mov	r3, fp
 8002a9c:	4540      	cmp	r0, r8
 8002a9e:	41bf      	sbcs	r7, r7
 8002aa0:	1ae3      	subs	r3, r4, r3
 8002aa2:	427f      	negs	r7, r7
 8002aa4:	1bdb      	subs	r3, r3, r7
 8002aa6:	021f      	lsls	r7, r3, #8
 8002aa8:	d47c      	bmi.n	8002ba4 <__aeabi_dsub+0x524>
 8002aaa:	4647      	mov	r7, r8
 8002aac:	431f      	orrs	r7, r3
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_dsub+0x432>
 8002ab0:	e0a6      	b.n	8002c00 <__aeabi_dsub+0x580>
 8002ab2:	001c      	movs	r4, r3
 8002ab4:	4647      	mov	r7, r8
 8002ab6:	e645      	b.n	8002744 <__aeabi_dsub+0xc4>
 8002ab8:	4cb7      	ldr	r4, [pc, #732]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002aba:	1aed      	subs	r5, r5, r3
 8002abc:	4014      	ands	r4, r2
 8002abe:	077b      	lsls	r3, r7, #29
 8002ac0:	d000      	beq.n	8002ac4 <__aeabi_dsub+0x444>
 8002ac2:	e780      	b.n	80029c6 <__aeabi_dsub+0x346>
 8002ac4:	e784      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	0025      	movs	r5, r4
 8002aca:	4305      	orrs	r5, r0
 8002acc:	d066      	beq.n	8002b9c <__aeabi_dsub+0x51c>
 8002ace:	1e5f      	subs	r7, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d100      	bne.n	8002ad6 <__aeabi_dsub+0x456>
 8002ad4:	e0fc      	b.n	8002cd0 <__aeabi_dsub+0x650>
 8002ad6:	4dae      	ldr	r5, [pc, #696]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002ad8:	42ab      	cmp	r3, r5
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x45e>
 8002adc:	e15e      	b.n	8002d9c <__aeabi_dsub+0x71c>
 8002ade:	4666      	mov	r6, ip
 8002ae0:	2f38      	cmp	r7, #56	@ 0x38
 8002ae2:	dc00      	bgt.n	8002ae6 <__aeabi_dsub+0x466>
 8002ae4:	e0b4      	b.n	8002c50 <__aeabi_dsub+0x5d0>
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	1a17      	subs	r7, r2, r0
 8002aea:	42ba      	cmp	r2, r7
 8002aec:	4192      	sbcs	r2, r2
 8002aee:	465b      	mov	r3, fp
 8002af0:	4252      	negs	r2, r2
 8002af2:	464d      	mov	r5, r9
 8002af4:	1a9c      	subs	r4, r3, r2
 8002af6:	e620      	b.n	800273a <__aeabi_dsub+0xba>
 8002af8:	0767      	lsls	r7, r4, #29
 8002afa:	08c0      	lsrs	r0, r0, #3
 8002afc:	4307      	orrs	r7, r0
 8002afe:	08e5      	lsrs	r5, r4, #3
 8002b00:	e6ba      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002b02:	001f      	movs	r7, r3
 8002b04:	4659      	mov	r1, fp
 8002b06:	3f20      	subs	r7, #32
 8002b08:	40f9      	lsrs	r1, r7
 8002b0a:	000f      	movs	r7, r1
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x49c>
 8002b10:	2140      	movs	r1, #64	@ 0x40
 8002b12:	1acb      	subs	r3, r1, r3
 8002b14:	4659      	mov	r1, fp
 8002b16:	4099      	lsls	r1, r3
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	4653      	mov	r3, sl
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4193      	sbcs	r3, r2
 8002b22:	431f      	orrs	r7, r3
 8002b24:	e604      	b.n	8002730 <__aeabi_dsub+0xb0>
 8002b26:	1aeb      	subs	r3, r5, r3
 8002b28:	4d9b      	ldr	r5, [pc, #620]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002b2a:	4015      	ands	r5, r2
 8002b2c:	076f      	lsls	r7, r5, #29
 8002b2e:	08ed      	lsrs	r5, r5, #3
 8002b30:	032c      	lsls	r4, r5, #12
 8002b32:	055d      	lsls	r5, r3, #21
 8002b34:	0b24      	lsrs	r4, r4, #12
 8002b36:	0d6d      	lsrs	r5, r5, #21
 8002b38:	e736      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b3a:	4d95      	ldr	r5, [pc, #596]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002b3c:	42ab      	cmp	r3, r5
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x4c2>
 8002b40:	e0d6      	b.n	8002cf0 <__aeabi_dsub+0x670>
 8002b42:	1882      	adds	r2, r0, r2
 8002b44:	0021      	movs	r1, r4
 8002b46:	4282      	cmp	r2, r0
 8002b48:	4180      	sbcs	r0, r0
 8002b4a:	4459      	add	r1, fp
 8002b4c:	4240      	negs	r0, r0
 8002b4e:	1808      	adds	r0, r1, r0
 8002b50:	07c7      	lsls	r7, r0, #31
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	4317      	orrs	r7, r2
 8002b56:	0844      	lsrs	r4, r0, #1
 8002b58:	0752      	lsls	r2, r2, #29
 8002b5a:	d400      	bmi.n	8002b5e <__aeabi_dsub+0x4de>
 8002b5c:	e185      	b.n	8002e6a <__aeabi_dsub+0x7ea>
 8002b5e:	220f      	movs	r2, #15
 8002b60:	001d      	movs	r5, r3
 8002b62:	403a      	ands	r2, r7
 8002b64:	2a04      	cmp	r2, #4
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x4ea>
 8002b68:	e61a      	b.n	80027a0 <__aeabi_dsub+0x120>
 8002b6a:	08ff      	lsrs	r7, r7, #3
 8002b6c:	0764      	lsls	r4, r4, #29
 8002b6e:	4327      	orrs	r7, r4
 8002b70:	0905      	lsrs	r5, r0, #4
 8002b72:	e7dd      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002b74:	465b      	mov	r3, fp
 8002b76:	08d2      	lsrs	r2, r2, #3
 8002b78:	075f      	lsls	r7, r3, #29
 8002b7a:	4317      	orrs	r7, r2
 8002b7c:	08dd      	lsrs	r5, r3, #3
 8002b7e:	e67b      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002b80:	2700      	movs	r7, #0
 8002b82:	2400      	movs	r4, #0
 8002b84:	e710      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d000      	beq.n	8002b8c <__aeabi_dsub+0x50c>
 8002b8a:	e0d6      	b.n	8002d3a <__aeabi_dsub+0x6ba>
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x512>
 8002b90:	e12f      	b.n	8002df2 <__aeabi_dsub+0x772>
 8002b92:	2480      	movs	r4, #128	@ 0x80
 8002b94:	2600      	movs	r6, #0
 8002b96:	4d7e      	ldr	r5, [pc, #504]	@ (8002d90 <__aeabi_dsub+0x710>)
 8002b98:	0324      	lsls	r4, r4, #12
 8002b9a:	e705      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002b9c:	4666      	mov	r6, ip
 8002b9e:	465c      	mov	r4, fp
 8002ba0:	08d0      	lsrs	r0, r2, #3
 8002ba2:	e717      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002ba4:	465b      	mov	r3, fp
 8002ba6:	1a17      	subs	r7, r2, r0
 8002ba8:	42ba      	cmp	r2, r7
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	1b1c      	subs	r4, r3, r4
 8002bae:	2601      	movs	r6, #1
 8002bb0:	4663      	mov	r3, ip
 8002bb2:	4252      	negs	r2, r2
 8002bb4:	1aa4      	subs	r4, r4, r2
 8002bb6:	401e      	ands	r6, r3
 8002bb8:	e5c4      	b.n	8002744 <__aeabi_dsub+0xc4>
 8002bba:	1883      	adds	r3, r0, r2
 8002bbc:	4283      	cmp	r3, r0
 8002bbe:	4180      	sbcs	r0, r0
 8002bc0:	445c      	add	r4, fp
 8002bc2:	4240      	negs	r0, r0
 8002bc4:	1825      	adds	r5, r4, r0
 8002bc6:	022a      	lsls	r2, r5, #8
 8002bc8:	d400      	bmi.n	8002bcc <__aeabi_dsub+0x54c>
 8002bca:	e0da      	b.n	8002d82 <__aeabi_dsub+0x702>
 8002bcc:	4a72      	ldr	r2, [pc, #456]	@ (8002d98 <__aeabi_dsub+0x718>)
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	4015      	ands	r5, r2
 8002bd2:	07ea      	lsls	r2, r5, #31
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	0869      	lsrs	r1, r5, #1
 8002bd8:	075b      	lsls	r3, r3, #29
 8002bda:	d400      	bmi.n	8002bde <__aeabi_dsub+0x55e>
 8002bdc:	e14a      	b.n	8002e74 <__aeabi_dsub+0x7f4>
 8002bde:	230f      	movs	r3, #15
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x568>
 8002be6:	e0fc      	b.n	8002de2 <__aeabi_dsub+0x762>
 8002be8:	1d17      	adds	r7, r2, #4
 8002bea:	4297      	cmp	r7, r2
 8002bec:	41a4      	sbcs	r4, r4
 8002bee:	4264      	negs	r4, r4
 8002bf0:	2502      	movs	r5, #2
 8002bf2:	1864      	adds	r4, r4, r1
 8002bf4:	e6ec      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	001c      	movs	r4, r3
 8002bfa:	431f      	orrs	r7, r3
 8002bfc:	d000      	beq.n	8002c00 <__aeabi_dsub+0x580>
 8002bfe:	e743      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002c00:	2600      	movs	r6, #0
 8002c02:	2500      	movs	r5, #0
 8002c04:	2400      	movs	r4, #0
 8002c06:	e6cf      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002c08:	08c0      	lsrs	r0, r0, #3
 8002c0a:	0767      	lsls	r7, r4, #29
 8002c0c:	4307      	orrs	r7, r0
 8002c0e:	08e5      	lsrs	r5, r4, #3
 8002c10:	e632      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002c12:	1a87      	subs	r7, r0, r2
 8002c14:	465b      	mov	r3, fp
 8002c16:	42b8      	cmp	r0, r7
 8002c18:	4180      	sbcs	r0, r0
 8002c1a:	1ae4      	subs	r4, r4, r3
 8002c1c:	4240      	negs	r0, r0
 8002c1e:	1a24      	subs	r4, r4, r0
 8002c20:	0223      	lsls	r3, r4, #8
 8002c22:	d428      	bmi.n	8002c76 <__aeabi_dsub+0x5f6>
 8002c24:	0763      	lsls	r3, r4, #29
 8002c26:	08ff      	lsrs	r7, r7, #3
 8002c28:	431f      	orrs	r7, r3
 8002c2a:	08e5      	lsrs	r5, r4, #3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e77f      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x5b6>
 8002c34:	e673      	b.n	800291e <__aeabi_dsub+0x29e>
 8002c36:	464b      	mov	r3, r9
 8002c38:	1b5f      	subs	r7, r3, r5
 8002c3a:	003b      	movs	r3, r7
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x5c2>
 8002c40:	e742      	b.n	8002ac8 <__aeabi_dsub+0x448>
 8002c42:	2f38      	cmp	r7, #56	@ 0x38
 8002c44:	dd00      	ble.n	8002c48 <__aeabi_dsub+0x5c8>
 8002c46:	e0ec      	b.n	8002e22 <__aeabi_dsub+0x7a2>
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	000e      	movs	r6, r1
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431c      	orrs	r4, r3
 8002c50:	2f1f      	cmp	r7, #31
 8002c52:	dc25      	bgt.n	8002ca0 <__aeabi_dsub+0x620>
 8002c54:	2520      	movs	r5, #32
 8002c56:	0023      	movs	r3, r4
 8002c58:	1bed      	subs	r5, r5, r7
 8002c5a:	0001      	movs	r1, r0
 8002c5c:	40a8      	lsls	r0, r5
 8002c5e:	40ab      	lsls	r3, r5
 8002c60:	40f9      	lsrs	r1, r7
 8002c62:	1e45      	subs	r5, r0, #1
 8002c64:	41a8      	sbcs	r0, r5
 8002c66:	430b      	orrs	r3, r1
 8002c68:	40fc      	lsrs	r4, r7
 8002c6a:	4318      	orrs	r0, r3
 8002c6c:	465b      	mov	r3, fp
 8002c6e:	1b1b      	subs	r3, r3, r4
 8002c70:	469b      	mov	fp, r3
 8002c72:	e739      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002c74:	4666      	mov	r6, ip
 8002c76:	2501      	movs	r5, #1
 8002c78:	e562      	b.n	8002740 <__aeabi_dsub+0xc0>
 8002c7a:	001f      	movs	r7, r3
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	3f20      	subs	r7, #32
 8002c80:	40f9      	lsrs	r1, r7
 8002c82:	468c      	mov	ip, r1
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d005      	beq.n	8002c94 <__aeabi_dsub+0x614>
 8002c88:	2740      	movs	r7, #64	@ 0x40
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	1afb      	subs	r3, r7, r3
 8002c8e:	4099      	lsls	r1, r3
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4692      	mov	sl, r2
 8002c94:	4657      	mov	r7, sl
 8002c96:	1e7b      	subs	r3, r7, #1
 8002c98:	419f      	sbcs	r7, r3
 8002c9a:	4663      	mov	r3, ip
 8002c9c:	431f      	orrs	r7, r3
 8002c9e:	e5c1      	b.n	8002824 <__aeabi_dsub+0x1a4>
 8002ca0:	003b      	movs	r3, r7
 8002ca2:	0025      	movs	r5, r4
 8002ca4:	3b20      	subs	r3, #32
 8002ca6:	40dd      	lsrs	r5, r3
 8002ca8:	2f20      	cmp	r7, #32
 8002caa:	d004      	beq.n	8002cb6 <__aeabi_dsub+0x636>
 8002cac:	2340      	movs	r3, #64	@ 0x40
 8002cae:	1bdb      	subs	r3, r3, r7
 8002cb0:	409c      	lsls	r4, r3
 8002cb2:	4320      	orrs	r0, r4
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	1e43      	subs	r3, r0, #1
 8002cba:	4198      	sbcs	r0, r3
 8002cbc:	4328      	orrs	r0, r5
 8002cbe:	e713      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d09d      	beq.n	8002c00 <__aeabi_dsub+0x580>
 8002cc4:	2601      	movs	r6, #1
 8002cc6:	4663      	mov	r3, ip
 8002cc8:	465c      	mov	r4, fp
 8002cca:	4690      	mov	r8, r2
 8002ccc:	401e      	ands	r6, r3
 8002cce:	e6db      	b.n	8002a88 <__aeabi_dsub+0x408>
 8002cd0:	1a17      	subs	r7, r2, r0
 8002cd2:	465b      	mov	r3, fp
 8002cd4:	42ba      	cmp	r2, r7
 8002cd6:	4192      	sbcs	r2, r2
 8002cd8:	1b1c      	subs	r4, r3, r4
 8002cda:	4252      	negs	r2, r2
 8002cdc:	1aa4      	subs	r4, r4, r2
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d4c8      	bmi.n	8002c74 <__aeabi_dsub+0x5f4>
 8002ce2:	0763      	lsls	r3, r4, #29
 8002ce4:	08ff      	lsrs	r7, r7, #3
 8002ce6:	431f      	orrs	r7, r3
 8002ce8:	4666      	mov	r6, ip
 8002cea:	2301      	movs	r3, #1
 8002cec:	08e5      	lsrs	r5, r4, #3
 8002cee:	e71f      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002cf0:	001d      	movs	r5, r3
 8002cf2:	2400      	movs	r4, #0
 8002cf4:	2700      	movs	r7, #0
 8002cf6:	e657      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002cf8:	465c      	mov	r4, fp
 8002cfa:	08d0      	lsrs	r0, r2, #3
 8002cfc:	e66a      	b.n	80029d4 <__aeabi_dsub+0x354>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x684>
 8002d02:	e737      	b.n	8002b74 <__aeabi_dsub+0x4f4>
 8002d04:	4653      	mov	r3, sl
 8002d06:	08c0      	lsrs	r0, r0, #3
 8002d08:	0767      	lsls	r7, r4, #29
 8002d0a:	4307      	orrs	r7, r0
 8002d0c:	08e5      	lsrs	r5, r4, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x694>
 8002d12:	e5b1      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	421d      	tst	r5, r3
 8002d1a:	d008      	beq.n	8002d2e <__aeabi_dsub+0x6ae>
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	08c8      	lsrs	r0, r1, #3
 8002d20:	4218      	tst	r0, r3
 8002d22:	d104      	bne.n	8002d2e <__aeabi_dsub+0x6ae>
 8002d24:	08d2      	lsrs	r2, r2, #3
 8002d26:	0749      	lsls	r1, r1, #29
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	0017      	movs	r7, r2
 8002d2c:	0005      	movs	r5, r0
 8002d2e:	0f7b      	lsrs	r3, r7, #29
 8002d30:	00ff      	lsls	r7, r7, #3
 8002d32:	08ff      	lsrs	r7, r7, #3
 8002d34:	075b      	lsls	r3, r3, #29
 8002d36:	431f      	orrs	r7, r3
 8002d38:	e59e      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d3a:	08c0      	lsrs	r0, r0, #3
 8002d3c:	0763      	lsls	r3, r4, #29
 8002d3e:	4318      	orrs	r0, r3
 8002d40:	08e5      	lsrs	r5, r4, #3
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d053      	beq.n	8002dee <__aeabi_dsub+0x76e>
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	421d      	tst	r5, r3
 8002d4c:	d00a      	beq.n	8002d64 <__aeabi_dsub+0x6e4>
 8002d4e:	4659      	mov	r1, fp
 8002d50:	08cc      	lsrs	r4, r1, #3
 8002d52:	421c      	tst	r4, r3
 8002d54:	d106      	bne.n	8002d64 <__aeabi_dsub+0x6e4>
 8002d56:	2601      	movs	r6, #1
 8002d58:	4663      	mov	r3, ip
 8002d5a:	0025      	movs	r5, r4
 8002d5c:	08d0      	lsrs	r0, r2, #3
 8002d5e:	0749      	lsls	r1, r1, #29
 8002d60:	4308      	orrs	r0, r1
 8002d62:	401e      	ands	r6, r3
 8002d64:	0f47      	lsrs	r7, r0, #29
 8002d66:	00c0      	lsls	r0, r0, #3
 8002d68:	08c0      	lsrs	r0, r0, #3
 8002d6a:	077f      	lsls	r7, r7, #29
 8002d6c:	4307      	orrs	r7, r0
 8002d6e:	e583      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002d70:	1883      	adds	r3, r0, r2
 8002d72:	4293      	cmp	r3, r2
 8002d74:	4192      	sbcs	r2, r2
 8002d76:	445c      	add	r4, fp
 8002d78:	4252      	negs	r2, r2
 8002d7a:	18a5      	adds	r5, r4, r2
 8002d7c:	022a      	lsls	r2, r5, #8
 8002d7e:	d500      	bpl.n	8002d82 <__aeabi_dsub+0x702>
 8002d80:	e724      	b.n	8002bcc <__aeabi_dsub+0x54c>
 8002d82:	076f      	lsls	r7, r5, #29
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	431f      	orrs	r7, r3
 8002d88:	08ed      	lsrs	r5, r5, #3
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e6d0      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	000007ff 	.word	0x000007ff
 8002d94:	000007fe 	.word	0x000007fe
 8002d98:	ff7fffff 	.word	0xff7fffff
 8002d9c:	465b      	mov	r3, fp
 8002d9e:	08d2      	lsrs	r2, r2, #3
 8002da0:	075f      	lsls	r7, r3, #29
 8002da2:	4666      	mov	r6, ip
 8002da4:	4317      	orrs	r7, r2
 8002da6:	08dd      	lsrs	r5, r3, #3
 8002da8:	e566      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002daa:	0025      	movs	r5, r4
 8002dac:	3b20      	subs	r3, #32
 8002dae:	40dd      	lsrs	r5, r3
 8002db0:	4663      	mov	r3, ip
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d005      	beq.n	8002dc2 <__aeabi_dsub+0x742>
 8002db6:	2340      	movs	r3, #64	@ 0x40
 8002db8:	4661      	mov	r1, ip
 8002dba:	1a5b      	subs	r3, r3, r1
 8002dbc:	409c      	lsls	r4, r3
 8002dbe:	4320      	orrs	r0, r4
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4647      	mov	r7, r8
 8002dc4:	1e7b      	subs	r3, r7, #1
 8002dc6:	419f      	sbcs	r7, r3
 8002dc8:	432f      	orrs	r7, r5
 8002dca:	e5a0      	b.n	800290e <__aeabi_dsub+0x28e>
 8002dcc:	2120      	movs	r1, #32
 8002dce:	2700      	movs	r7, #0
 8002dd0:	1a09      	subs	r1, r1, r0
 8002dd2:	e4d2      	b.n	800277a <__aeabi_dsub+0xfa>
 8002dd4:	2f00      	cmp	r7, #0
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x75a>
 8002dd8:	e713      	b.n	8002c02 <__aeabi_dsub+0x582>
 8002dda:	465c      	mov	r4, fp
 8002ddc:	0017      	movs	r7, r2
 8002dde:	2500      	movs	r5, #0
 8002de0:	e5f6      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002de2:	08d7      	lsrs	r7, r2, #3
 8002de4:	0749      	lsls	r1, r1, #29
 8002de6:	2302      	movs	r3, #2
 8002de8:	430f      	orrs	r7, r1
 8002dea:	092d      	lsrs	r5, r5, #4
 8002dec:	e6a0      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002dee:	0007      	movs	r7, r0
 8002df0:	e542      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002df2:	465b      	mov	r3, fp
 8002df4:	2601      	movs	r6, #1
 8002df6:	075f      	lsls	r7, r3, #29
 8002df8:	08dd      	lsrs	r5, r3, #3
 8002dfa:	4663      	mov	r3, ip
 8002dfc:	08d2      	lsrs	r2, r2, #3
 8002dfe:	4317      	orrs	r7, r2
 8002e00:	401e      	ands	r6, r3
 8002e02:	e539      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002e04:	465b      	mov	r3, fp
 8002e06:	08d2      	lsrs	r2, r2, #3
 8002e08:	075f      	lsls	r7, r3, #29
 8002e0a:	4317      	orrs	r7, r2
 8002e0c:	08dd      	lsrs	r5, r3, #3
 8002e0e:	e533      	b.n	8002878 <__aeabi_dsub+0x1f8>
 8002e10:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <__aeabi_dsub+0x80c>)
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	4022      	ands	r2, r4
 8002e16:	0757      	lsls	r7, r2, #29
 8002e18:	0252      	lsls	r2, r2, #9
 8002e1a:	2501      	movs	r5, #1
 8002e1c:	431f      	orrs	r7, r3
 8002e1e:	0b14      	lsrs	r4, r2, #12
 8002e20:	e5c2      	b.n	80029a8 <__aeabi_dsub+0x328>
 8002e22:	000e      	movs	r6, r1
 8002e24:	2001      	movs	r0, #1
 8002e26:	e65f      	b.n	8002ae8 <__aeabi_dsub+0x468>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <__aeabi_dsub+0x7c8>
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	1b5b      	subs	r3, r3, r5
 8002e30:	469c      	mov	ip, r3
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	d100      	bne.n	8002e38 <__aeabi_dsub+0x7b8>
 8002e36:	e548      	b.n	80028ca <__aeabi_dsub+0x24a>
 8002e38:	2701      	movs	r7, #1
 8002e3a:	2b38      	cmp	r3, #56	@ 0x38
 8002e3c:	dd00      	ble.n	8002e40 <__aeabi_dsub+0x7c0>
 8002e3e:	e566      	b.n	800290e <__aeabi_dsub+0x28e>
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431c      	orrs	r4, r3
 8002e46:	e550      	b.n	80028ea <__aeabi_dsub+0x26a>
 8002e48:	1c6b      	adds	r3, r5, #1
 8002e4a:	4d11      	ldr	r5, [pc, #68]	@ (8002e90 <__aeabi_dsub+0x810>)
 8002e4c:	422b      	tst	r3, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x7d2>
 8002e50:	e673      	b.n	8002b3a <__aeabi_dsub+0x4ba>
 8002e52:	4659      	mov	r1, fp
 8002e54:	0023      	movs	r3, r4
 8002e56:	4311      	orrs	r1, r2
 8002e58:	468a      	mov	sl, r1
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	e600      	b.n	8002a60 <__aeabi_dsub+0x3e0>
 8002e5e:	0767      	lsls	r7, r4, #29
 8002e60:	08c0      	lsrs	r0, r0, #3
 8002e62:	2300      	movs	r3, #0
 8002e64:	4307      	orrs	r7, r0
 8002e66:	08e5      	lsrs	r5, r4, #3
 8002e68:	e662      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e6a:	0764      	lsls	r4, r4, #29
 8002e6c:	08ff      	lsrs	r7, r7, #3
 8002e6e:	4327      	orrs	r7, r4
 8002e70:	0905      	lsrs	r5, r0, #4
 8002e72:	e65d      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e74:	08d2      	lsrs	r2, r2, #3
 8002e76:	0749      	lsls	r1, r1, #29
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	000f      	movs	r7, r1
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	092d      	lsrs	r5, r5, #4
 8002e80:	e656      	b.n	8002b30 <__aeabi_dsub+0x4b0>
 8002e82:	0007      	movs	r7, r0
 8002e84:	e5a4      	b.n	80029d0 <__aeabi_dsub+0x350>
 8002e86:	0038      	movs	r0, r7
 8002e88:	e48f      	b.n	80027aa <__aeabi_dsub+0x12a>
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	ff7fffff 	.word	0xff7fffff
 8002e90:	000007fe 	.word	0x000007fe

08002e94 <__aeabi_dcmpun>:
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	46c6      	mov	lr, r8
 8002e98:	031e      	lsls	r6, r3, #12
 8002e9a:	0b36      	lsrs	r6, r6, #12
 8002e9c:	46b0      	mov	r8, r6
 8002e9e:	4e0d      	ldr	r6, [pc, #52]	@ (8002ed4 <__aeabi_dcmpun+0x40>)
 8002ea0:	030c      	lsls	r4, r1, #12
 8002ea2:	004d      	lsls	r5, r1, #1
 8002ea4:	005f      	lsls	r7, r3, #1
 8002ea6:	b500      	push	{lr}
 8002ea8:	0b24      	lsrs	r4, r4, #12
 8002eaa:	0d6d      	lsrs	r5, r5, #21
 8002eac:	0d7f      	lsrs	r7, r7, #21
 8002eae:	42b5      	cmp	r5, r6
 8002eb0:	d00b      	beq.n	8002eca <__aeabi_dcmpun+0x36>
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <__aeabi_dcmpun+0x40>)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	428f      	cmp	r7, r1
 8002eb8:	d104      	bne.n	8002ec4 <__aeabi_dcmpun+0x30>
 8002eba:	4646      	mov	r6, r8
 8002ebc:	4316      	orrs	r6, r2
 8002ebe:	0030      	movs	r0, r6
 8002ec0:	1e43      	subs	r3, r0, #1
 8002ec2:	4198      	sbcs	r0, r3
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	46b8      	mov	r8, r7
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	4304      	orrs	r4, r0
 8002ecc:	2001      	movs	r0, #1
 8002ece:	2c00      	cmp	r4, #0
 8002ed0:	d1f8      	bne.n	8002ec4 <__aeabi_dcmpun+0x30>
 8002ed2:	e7ee      	b.n	8002eb2 <__aeabi_dcmpun+0x1e>
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_d2iz>:
 8002ed8:	000b      	movs	r3, r1
 8002eda:	0002      	movs	r2, r0
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	4d16      	ldr	r5, [pc, #88]	@ (8002f38 <__aeabi_d2iz+0x60>)
 8002ee0:	030c      	lsls	r4, r1, #12
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	0049      	lsls	r1, r1, #1
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	0b24      	lsrs	r4, r4, #12
 8002eee:	0d49      	lsrs	r1, r1, #21
 8002ef0:	0fde      	lsrs	r6, r3, #31
 8002ef2:	42a9      	cmp	r1, r5
 8002ef4:	dd04      	ble.n	8002f00 <__aeabi_d2iz+0x28>
 8002ef6:	4811      	ldr	r0, [pc, #68]	@ (8002f3c <__aeabi_d2iz+0x64>)
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	dd03      	ble.n	8002f04 <__aeabi_d2iz+0x2c>
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <__aeabi_d2iz+0x68>)
 8002efe:	18f0      	adds	r0, r6, r3
 8002f00:	b002      	add	sp, #8
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	2080      	movs	r0, #128	@ 0x80
 8002f06:	0340      	lsls	r0, r0, #13
 8002f08:	4320      	orrs	r0, r4
 8002f0a:	4c0e      	ldr	r4, [pc, #56]	@ (8002f44 <__aeabi_d2iz+0x6c>)
 8002f0c:	1a64      	subs	r4, r4, r1
 8002f0e:	2c1f      	cmp	r4, #31
 8002f10:	dd08      	ble.n	8002f24 <__aeabi_d2iz+0x4c>
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <__aeabi_d2iz+0x70>)
 8002f14:	1a5b      	subs	r3, r3, r1
 8002f16:	40d8      	lsrs	r0, r3
 8002f18:	0003      	movs	r3, r0
 8002f1a:	4258      	negs	r0, r3
 8002f1c:	2e00      	cmp	r6, #0
 8002f1e:	d1ef      	bne.n	8002f00 <__aeabi_d2iz+0x28>
 8002f20:	0018      	movs	r0, r3
 8002f22:	e7ed      	b.n	8002f00 <__aeabi_d2iz+0x28>
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <__aeabi_d2iz+0x74>)
 8002f26:	9a00      	ldr	r2, [sp, #0]
 8002f28:	469c      	mov	ip, r3
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	4461      	add	r1, ip
 8002f2e:	408b      	lsls	r3, r1
 8002f30:	40e2      	lsrs	r2, r4
 8002f32:	4313      	orrs	r3, r2
 8002f34:	e7f1      	b.n	8002f1a <__aeabi_d2iz+0x42>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	000003fe 	.word	0x000003fe
 8002f3c:	0000041d 	.word	0x0000041d
 8002f40:	7fffffff 	.word	0x7fffffff
 8002f44:	00000433 	.word	0x00000433
 8002f48:	00000413 	.word	0x00000413
 8002f4c:	fffffbed 	.word	0xfffffbed

08002f50 <__aeabi_i2d>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d016      	beq.n	8002f84 <__aeabi_i2d+0x34>
 8002f56:	17c3      	asrs	r3, r0, #31
 8002f58:	18c5      	adds	r5, r0, r3
 8002f5a:	405d      	eors	r5, r3
 8002f5c:	0fc4      	lsrs	r4, r0, #31
 8002f5e:	0028      	movs	r0, r5
 8002f60:	f000 f912 	bl	8003188 <__clzsi2>
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <__aeabi_i2d+0x58>)
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	055b      	lsls	r3, r3, #21
 8002f6a:	0d5b      	lsrs	r3, r3, #21
 8002f6c:	280a      	cmp	r0, #10
 8002f6e:	dc14      	bgt.n	8002f9a <__aeabi_i2d+0x4a>
 8002f70:	0002      	movs	r2, r0
 8002f72:	002e      	movs	r6, r5
 8002f74:	3215      	adds	r2, #21
 8002f76:	4096      	lsls	r6, r2
 8002f78:	220b      	movs	r2, #11
 8002f7a:	1a12      	subs	r2, r2, r0
 8002f7c:	40d5      	lsrs	r5, r2
 8002f7e:	032d      	lsls	r5, r5, #12
 8002f80:	0b2d      	lsrs	r5, r5, #12
 8002f82:	e003      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002f84:	2400      	movs	r4, #0
 8002f86:	2300      	movs	r3, #0
 8002f88:	2500      	movs	r5, #0
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	432b      	orrs	r3, r5
 8002f90:	07e4      	lsls	r4, r4, #31
 8002f92:	4323      	orrs	r3, r4
 8002f94:	0030      	movs	r0, r6
 8002f96:	0019      	movs	r1, r3
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
 8002f9a:	380b      	subs	r0, #11
 8002f9c:	4085      	lsls	r5, r0
 8002f9e:	032d      	lsls	r5, r5, #12
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	0b2d      	lsrs	r5, r5, #12
 8002fa4:	e7f2      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	0000041e 	.word	0x0000041e

08002fac <__aeabi_ui2d>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	1e04      	subs	r4, r0, #0
 8002fb0:	d010      	beq.n	8002fd4 <__aeabi_ui2d+0x28>
 8002fb2:	f000 f8e9 	bl	8003188 <__clzsi2>
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <__aeabi_ui2d+0x44>)
 8002fb8:	1a1b      	subs	r3, r3, r0
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	280a      	cmp	r0, #10
 8002fc0:	dc0f      	bgt.n	8002fe2 <__aeabi_ui2d+0x36>
 8002fc2:	220b      	movs	r2, #11
 8002fc4:	0021      	movs	r1, r4
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	40d1      	lsrs	r1, r2
 8002fca:	3015      	adds	r0, #21
 8002fcc:	030a      	lsls	r2, r1, #12
 8002fce:	4084      	lsls	r4, r0
 8002fd0:	0b12      	lsrs	r2, r2, #12
 8002fd2:	e001      	b.n	8002fd8 <__aeabi_ui2d+0x2c>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	0020      	movs	r0, r4
 8002fde:	0019      	movs	r1, r3
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	0022      	movs	r2, r4
 8002fe4:	380b      	subs	r0, #11
 8002fe6:	4082      	lsls	r2, r0
 8002fe8:	0312      	lsls	r2, r2, #12
 8002fea:	2400      	movs	r4, #0
 8002fec:	0b12      	lsrs	r2, r2, #12
 8002fee:	e7f3      	b.n	8002fd8 <__aeabi_ui2d+0x2c>
 8002ff0:	0000041e 	.word	0x0000041e

08002ff4 <__aeabi_f2d>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	0242      	lsls	r2, r0, #9
 8002ff8:	0043      	lsls	r3, r0, #1
 8002ffa:	0fc4      	lsrs	r4, r0, #31
 8002ffc:	20fe      	movs	r0, #254	@ 0xfe
 8002ffe:	0e1b      	lsrs	r3, r3, #24
 8003000:	1c59      	adds	r1, r3, #1
 8003002:	0a55      	lsrs	r5, r2, #9
 8003004:	4208      	tst	r0, r1
 8003006:	d00c      	beq.n	8003022 <__aeabi_f2d+0x2e>
 8003008:	21e0      	movs	r1, #224	@ 0xe0
 800300a:	0089      	lsls	r1, r1, #2
 800300c:	468c      	mov	ip, r1
 800300e:	076d      	lsls	r5, r5, #29
 8003010:	0b12      	lsrs	r2, r2, #12
 8003012:	4463      	add	r3, ip
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4323      	orrs	r3, r4
 800301c:	0028      	movs	r0, r5
 800301e:	0019      	movs	r1, r3
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <__aeabi_f2d+0x5c>
 8003026:	2d00      	cmp	r5, #0
 8003028:	d01b      	beq.n	8003062 <__aeabi_f2d+0x6e>
 800302a:	0028      	movs	r0, r5
 800302c:	f000 f8ac 	bl	8003188 <__clzsi2>
 8003030:	280a      	cmp	r0, #10
 8003032:	dc1c      	bgt.n	800306e <__aeabi_f2d+0x7a>
 8003034:	230b      	movs	r3, #11
 8003036:	002a      	movs	r2, r5
 8003038:	1a1b      	subs	r3, r3, r0
 800303a:	40da      	lsrs	r2, r3
 800303c:	0003      	movs	r3, r0
 800303e:	3315      	adds	r3, #21
 8003040:	409d      	lsls	r5, r3
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <__aeabi_f2d+0x88>)
 8003044:	0312      	lsls	r2, r2, #12
 8003046:	1a1b      	subs	r3, r3, r0
 8003048:	055b      	lsls	r3, r3, #21
 800304a:	0b12      	lsrs	r2, r2, #12
 800304c:	0d5b      	lsrs	r3, r3, #21
 800304e:	e7e1      	b.n	8003014 <__aeabi_f2d+0x20>
 8003050:	2d00      	cmp	r5, #0
 8003052:	d009      	beq.n	8003068 <__aeabi_f2d+0x74>
 8003054:	0b13      	lsrs	r3, r2, #12
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	0312      	lsls	r2, r2, #12
 800305a:	431a      	orrs	r2, r3
 800305c:	076d      	lsls	r5, r5, #29
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <__aeabi_f2d+0x8c>)
 8003060:	e7d8      	b.n	8003014 <__aeabi_f2d+0x20>
 8003062:	2300      	movs	r3, #0
 8003064:	2200      	movs	r2, #0
 8003066:	e7d5      	b.n	8003014 <__aeabi_f2d+0x20>
 8003068:	2200      	movs	r2, #0
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <__aeabi_f2d+0x8c>)
 800306c:	e7d2      	b.n	8003014 <__aeabi_f2d+0x20>
 800306e:	0003      	movs	r3, r0
 8003070:	002a      	movs	r2, r5
 8003072:	3b0b      	subs	r3, #11
 8003074:	409a      	lsls	r2, r3
 8003076:	2500      	movs	r5, #0
 8003078:	e7e3      	b.n	8003042 <__aeabi_f2d+0x4e>
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	00000389 	.word	0x00000389
 8003080:	000007ff 	.word	0x000007ff

08003084 <__aeabi_d2f>:
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003086:	004b      	lsls	r3, r1, #1
 8003088:	030f      	lsls	r7, r1, #12
 800308a:	0d5b      	lsrs	r3, r3, #21
 800308c:	4c3a      	ldr	r4, [pc, #232]	@ (8003178 <__aeabi_d2f+0xf4>)
 800308e:	0f45      	lsrs	r5, r0, #29
 8003090:	b083      	sub	sp, #12
 8003092:	0a7f      	lsrs	r7, r7, #9
 8003094:	1c5e      	adds	r6, r3, #1
 8003096:	432f      	orrs	r7, r5
 8003098:	9000      	str	r0, [sp, #0]
 800309a:	9101      	str	r1, [sp, #4]
 800309c:	0fca      	lsrs	r2, r1, #31
 800309e:	00c5      	lsls	r5, r0, #3
 80030a0:	4226      	tst	r6, r4
 80030a2:	d00b      	beq.n	80030bc <__aeabi_d2f+0x38>
 80030a4:	4935      	ldr	r1, [pc, #212]	@ (800317c <__aeabi_d2f+0xf8>)
 80030a6:	185c      	adds	r4, r3, r1
 80030a8:	2cfe      	cmp	r4, #254	@ 0xfe
 80030aa:	dd13      	ble.n	80030d4 <__aeabi_d2f+0x50>
 80030ac:	20ff      	movs	r0, #255	@ 0xff
 80030ae:	2300      	movs	r3, #0
 80030b0:	05c0      	lsls	r0, r0, #23
 80030b2:	4318      	orrs	r0, r3
 80030b4:	07d2      	lsls	r2, r2, #31
 80030b6:	4310      	orrs	r0, r2
 80030b8:	b003      	add	sp, #12
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	433d      	orrs	r5, r7
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <__aeabi_d2f+0x42>
 80030c2:	2000      	movs	r0, #0
 80030c4:	e7f4      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	d0f0      	beq.n	80030ac <__aeabi_d2f+0x28>
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	03db      	lsls	r3, r3, #15
 80030ce:	20ff      	movs	r0, #255	@ 0xff
 80030d0:	433b      	orrs	r3, r7
 80030d2:	e7ed      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030d4:	2c00      	cmp	r4, #0
 80030d6:	dd0c      	ble.n	80030f2 <__aeabi_d2f+0x6e>
 80030d8:	9b00      	ldr	r3, [sp, #0]
 80030da:	00ff      	lsls	r7, r7, #3
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	4183      	sbcs	r3, r0
 80030e2:	0f69      	lsrs	r1, r5, #29
 80030e4:	433b      	orrs	r3, r7
 80030e6:	430b      	orrs	r3, r1
 80030e8:	0759      	lsls	r1, r3, #29
 80030ea:	d127      	bne.n	800313c <__aeabi_d2f+0xb8>
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	b2e0      	uxtb	r0, r4
 80030f0:	e7de      	b.n	80030b0 <__aeabi_d2f+0x2c>
 80030f2:	0021      	movs	r1, r4
 80030f4:	3117      	adds	r1, #23
 80030f6:	db31      	blt.n	800315c <__aeabi_d2f+0xd8>
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	201e      	movs	r0, #30
 80030fc:	0409      	lsls	r1, r1, #16
 80030fe:	4339      	orrs	r1, r7
 8003100:	1b00      	subs	r0, r0, r4
 8003102:	281f      	cmp	r0, #31
 8003104:	dd2d      	ble.n	8003162 <__aeabi_d2f+0xde>
 8003106:	2602      	movs	r6, #2
 8003108:	4276      	negs	r6, r6
 800310a:	1b34      	subs	r4, r6, r4
 800310c:	000e      	movs	r6, r1
 800310e:	40e6      	lsrs	r6, r4
 8003110:	0034      	movs	r4, r6
 8003112:	2820      	cmp	r0, #32
 8003114:	d004      	beq.n	8003120 <__aeabi_d2f+0x9c>
 8003116:	481a      	ldr	r0, [pc, #104]	@ (8003180 <__aeabi_d2f+0xfc>)
 8003118:	4684      	mov	ip, r0
 800311a:	4463      	add	r3, ip
 800311c:	4099      	lsls	r1, r3
 800311e:	430d      	orrs	r5, r1
 8003120:	002b      	movs	r3, r5
 8003122:	1e59      	subs	r1, r3, #1
 8003124:	418b      	sbcs	r3, r1
 8003126:	4323      	orrs	r3, r4
 8003128:	0759      	lsls	r1, r3, #29
 800312a:	d003      	beq.n	8003134 <__aeabi_d2f+0xb0>
 800312c:	210f      	movs	r1, #15
 800312e:	4019      	ands	r1, r3
 8003130:	2904      	cmp	r1, #4
 8003132:	d10b      	bne.n	800314c <__aeabi_d2f+0xc8>
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	2000      	movs	r0, #0
 8003138:	0a5b      	lsrs	r3, r3, #9
 800313a:	e7b9      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800313c:	210f      	movs	r1, #15
 800313e:	4019      	ands	r1, r3
 8003140:	2904      	cmp	r1, #4
 8003142:	d104      	bne.n	800314e <__aeabi_d2f+0xca>
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	0a5b      	lsrs	r3, r3, #9
 8003148:	b2e0      	uxtb	r0, r4
 800314a:	e7b1      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800314c:	2400      	movs	r4, #0
 800314e:	3304      	adds	r3, #4
 8003150:	0159      	lsls	r1, r3, #5
 8003152:	d5f7      	bpl.n	8003144 <__aeabi_d2f+0xc0>
 8003154:	3401      	adds	r4, #1
 8003156:	2300      	movs	r3, #0
 8003158:	b2e0      	uxtb	r0, r4
 800315a:	e7a9      	b.n	80030b0 <__aeabi_d2f+0x2c>
 800315c:	2000      	movs	r0, #0
 800315e:	2300      	movs	r3, #0
 8003160:	e7a6      	b.n	80030b0 <__aeabi_d2f+0x2c>
 8003162:	4c08      	ldr	r4, [pc, #32]	@ (8003184 <__aeabi_d2f+0x100>)
 8003164:	191c      	adds	r4, r3, r4
 8003166:	002b      	movs	r3, r5
 8003168:	40a5      	lsls	r5, r4
 800316a:	40c3      	lsrs	r3, r0
 800316c:	40a1      	lsls	r1, r4
 800316e:	1e68      	subs	r0, r5, #1
 8003170:	4185      	sbcs	r5, r0
 8003172:	4329      	orrs	r1, r5
 8003174:	430b      	orrs	r3, r1
 8003176:	e7d7      	b.n	8003128 <__aeabi_d2f+0xa4>
 8003178:	000007fe 	.word	0x000007fe
 800317c:	fffffc80 	.word	0xfffffc80
 8003180:	fffffca2 	.word	0xfffffca2
 8003184:	fffffc82 	.word	0xfffffc82

08003188 <__clzsi2>:
 8003188:	211c      	movs	r1, #28
 800318a:	2301      	movs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	4298      	cmp	r0, r3
 8003190:	d301      	bcc.n	8003196 <__clzsi2+0xe>
 8003192:	0c00      	lsrs	r0, r0, #16
 8003194:	3910      	subs	r1, #16
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	4298      	cmp	r0, r3
 800319a:	d301      	bcc.n	80031a0 <__clzsi2+0x18>
 800319c:	0a00      	lsrs	r0, r0, #8
 800319e:	3908      	subs	r1, #8
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d301      	bcc.n	80031aa <__clzsi2+0x22>
 80031a6:	0900      	lsrs	r0, r0, #4
 80031a8:	3904      	subs	r1, #4
 80031aa:	a202      	add	r2, pc, #8	@ (adr r2, 80031b4 <__clzsi2+0x2c>)
 80031ac:	5c10      	ldrb	r0, [r2, r0]
 80031ae:	1840      	adds	r0, r0, r1
 80031b0:	4770      	bx	lr
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	02020304 	.word	0x02020304
 80031b8:	01010101 	.word	0x01010101
	...

080031c4 <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	0002      	movs	r2, r0
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	1c0a      	adds	r2, r1, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 80031d6:	210c      	movs	r1, #12
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	1dfa      	adds	r2, r7, #7
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	1dba      	adds	r2, r7, #6
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <_ds3231_setreg+0x40>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	187a      	adds	r2, r7, r1
 80031ee:	23fa      	movs	r3, #250	@ 0xfa
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2302      	movs	r3, #2
 80031f6:	21d0      	movs	r1, #208	@ 0xd0
 80031f8:	f003 fbb2 	bl	8006960 <HAL_I2C_Master_Transmit>
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000000 	.word	0x20000000

08003208 <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b087      	sub	sp, #28
 800320c:	af02      	add	r7, sp, #8
 800320e:	0002      	movs	r2, r0
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <_ds3231_getreg+0x44>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	1dfa      	adds	r2, r7, #7
 800321a:	23fa      	movs	r3, #250	@ 0xfa
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	21d0      	movs	r1, #208	@ 0xd0
 8003224:	f003 fb9c 	bl	8006960 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 8003228:	4b08      	ldr	r3, [pc, #32]	@ (800324c <_ds3231_getreg+0x44>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	240f      	movs	r4, #15
 800322e:	193a      	adds	r2, r7, r4
 8003230:	23fa      	movs	r3, #250	@ 0xfa
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2301      	movs	r3, #1
 8003238:	21d0      	movs	r1, #208	@ 0xd0
 800323a:	f003 fcbb 	bl	8006bb4 <HAL_I2C_Master_Receive>
	return val;
 800323e:	193b      	adds	r3, r7, r4
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b005      	add	sp, #20
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	20000000 	.word	0x20000000

08003250 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	0005      	movs	r5, r0
 8003258:	000c      	movs	r4, r1
 800325a:	0010      	movs	r0, r2
 800325c:	0019      	movs	r1, r3
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	1c2a      	adds	r2, r5, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	1c22      	adds	r2, r4, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	1d7b      	adds	r3, r7, #5
 800326c:	1c02      	adds	r2, r0, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	1c0a      	adds	r2, r1, #0
 8003274:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 8003276:	2328      	movs	r3, #40	@ 0x28
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2217      	movs	r2, #23
 800327e:	18bc      	adds	r4, r7, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f8ed 	bl	8003460 <_dec_to_bcd>
 8003286:	0003      	movs	r3, r0
 8003288:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2216      	movs	r2, #22
 8003290:	18bc      	adds	r4, r7, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f8e4 	bl	8003460 <_dec_to_bcd>
 8003298:	0003      	movs	r3, r0
 800329a:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 800329c:	1d7b      	adds	r3, r7, #5
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2215      	movs	r2, #21
 80032a2:	18bc      	adds	r4, r7, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f8db 	bl	8003460 <_dec_to_bcd>
 80032aa:	0003      	movs	r3, r0
 80032ac:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2214      	movs	r2, #20
 80032b4:	18bc      	adds	r4, r7, r2
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8d2 	bl	8003460 <_dec_to_bcd>
 80032bc:	0003      	movs	r3, r0
 80032be:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d858      	bhi.n	800337a <ds3231_setalarm1+0x12a>
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	4b54      	ldr	r3, [pc, #336]	@ (800341c <ds3231_setalarm1+0x1cc>)
 80032cc:	18d3      	adds	r3, r2, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032d2:	2214      	movs	r2, #20
 80032d4:	18bb      	adds	r3, r7, r2
 80032d6:	18ba      	adds	r2, r7, r2
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	4249      	negs	r1, r1
 80032de:	430a      	orrs	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
	  break;
 80032e2:	e04d      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80032e4:	2214      	movs	r2, #20
 80032e6:	18bb      	adds	r3, r7, r2
 80032e8:	18ba      	adds	r2, r7, r2
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	4249      	negs	r1, r1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80032f4:	2215      	movs	r2, #21
 80032f6:	18bb      	adds	r3, r7, r2
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	4249      	negs	r1, r1
 8003300:	430a      	orrs	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
	  break;
 8003304:	e03c      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 8003306:	2214      	movs	r2, #20
 8003308:	18bb      	adds	r3, r7, r2
 800330a:	18ba      	adds	r2, r7, r2
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	4249      	negs	r1, r1
 8003312:	430a      	orrs	r2, r1
 8003314:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003316:	2215      	movs	r2, #21
 8003318:	18bb      	adds	r3, r7, r2
 800331a:	18ba      	adds	r2, r7, r2
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	4249      	negs	r1, r1
 8003322:	430a      	orrs	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003326:	2216      	movs	r2, #22
 8003328:	18bb      	adds	r3, r7, r2
 800332a:	18ba      	adds	r2, r7, r2
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	2180      	movs	r1, #128	@ 0x80
 8003330:	4249      	negs	r1, r1
 8003332:	430a      	orrs	r2, r1
 8003334:	701a      	strb	r2, [r3, #0]
	  break;
 8003336:	e023      	b.n	8003380 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 8003338:	2214      	movs	r2, #20
 800333a:	18bb      	adds	r3, r7, r2
 800333c:	18ba      	adds	r2, r7, r2
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	2180      	movs	r1, #128	@ 0x80
 8003342:	4249      	negs	r1, r1
 8003344:	430a      	orrs	r2, r1
 8003346:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003348:	2215      	movs	r2, #21
 800334a:	18bb      	adds	r3, r7, r2
 800334c:	18ba      	adds	r2, r7, r2
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	4249      	negs	r1, r1
 8003354:	430a      	orrs	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003358:	2216      	movs	r2, #22
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	4249      	negs	r1, r1
 8003364:	430a      	orrs	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 8003368:	2217      	movs	r2, #23
 800336a:	18bb      	adds	r3, r7, r2
 800336c:	18ba      	adds	r2, r7, r2
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	2180      	movs	r1, #128	@ 0x80
 8003372:	4249      	negs	r1, r1
 8003374:	430a      	orrs	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
	  break;
 8003378:	e002      	b.n	8003380 <ds3231_setalarm1+0x130>
  default:
	  break;
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	e000      	b.n	8003380 <ds3231_setalarm1+0x130>
	  break;
 800337e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8003380:	2013      	movs	r0, #19
 8003382:	183b      	adds	r3, r7, r0
 8003384:	2207      	movs	r2, #7
 8003386:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8003388:	210c      	movs	r1, #12
 800338a:	187b      	adds	r3, r7, r1
 800338c:	183a      	adds	r2, r7, r0
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2217      	movs	r2, #23
 8003396:	18ba      	adds	r2, r7, r2
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	705a      	strb	r2, [r3, #1]
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2216      	movs	r2, #22
 80033a0:	18ba      	adds	r2, r7, r2
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	709a      	strb	r2, [r3, #2]
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2215      	movs	r2, #21
 80033aa:	18ba      	adds	r2, r7, r2
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	70da      	strb	r2, [r3, #3]
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	2214      	movs	r2, #20
 80033b4:	18ba      	adds	r2, r7, r2
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 80033ba:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <ds3231_setalarm1+0x1d0>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	187a      	adds	r2, r7, r1
 80033c0:	23fa      	movs	r3, #250	@ 0xfa
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2305      	movs	r3, #5
 80033c8:	21d0      	movs	r1, #208	@ 0xd0
 80033ca:	f003 fac9 	bl	8006960 <HAL_I2C_Master_Transmit>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d001      	beq.n	80033d6 <ds3231_setalarm1+0x186>
 80033d2:	2300      	movs	r3, #0
 80033d4:	e01d      	b.n	8003412 <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 80033d6:	2512      	movs	r5, #18
 80033d8:	197b      	adds	r3, r7, r5
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 80033de:	197c      	adds	r4, r7, r5
 80033e0:	200e      	movs	r0, #14
 80033e2:	f7ff ff11 	bl	8003208 <_ds3231_getreg>
 80033e6:	0003      	movs	r3, r0
 80033e8:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 80033ea:	0028      	movs	r0, r5
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	183a      	adds	r2, r7, r0
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	183a      	adds	r2, r7, r0
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	2104      	movs	r1, #4
 8003400:	430a      	orrs	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 8003404:	183b      	adds	r3, r7, r0
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	0019      	movs	r1, r3
 800340a:	200e      	movs	r0, #14
 800340c:	f7ff feda 	bl	80031c4 <_ds3231_setreg>

  return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bdb0      	pop	{r4, r5, r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	0800d420 	.word	0x0800d420
 8003420:	20000000 	.word	0x20000000

08003424 <ds3231_clearflagalarm1>:
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);

  return 1;
}

void ds3231_clearflagalarm1() {
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 800342a:	1dfc      	adds	r4, r7, #7
 800342c:	200f      	movs	r0, #15
 800342e:	f7ff feeb 	bl	8003208 <_ds3231_getreg>
 8003432:	0003      	movs	r3, r0
 8003434:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0019      	movs	r1, r3
 8003452:	200f      	movs	r0, #15
 8003454:	f7ff feb6 	bl	80031c4 <_ds3231_setreg>
  }
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b003      	add	sp, #12
 800345e:	bd90      	pop	{r4, r7, pc}

08003460 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	210a      	movs	r1, #10
 800346c:	0018      	movs	r0, r3
 800346e:	f7fc feed 	bl	800024c <__divsi3>
 8003472:	0003      	movs	r3, r0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	b2dc      	uxtb	r4, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	210a      	movs	r1, #10
 800347e:	0018      	movs	r0, r3
 8003480:	f7fc ffca 	bl	8000418 <__aeabi_idivmod>
 8003484:	000b      	movs	r3, r1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	18e3      	adds	r3, r4, r3
 800348a:	b2db      	uxtb	r3, r3
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b003      	add	sp, #12
 8003492:	bd90      	pop	{r4, r7, pc}

08003494 <led_blink>:
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;
uint8_t led_blink_flag;

void led_blink() {
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	LED_ON();
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <led_blink+0x1c>)
 800349a:	2201      	movs	r2, #1
 800349c:	2102      	movs	r1, #2
 800349e:	0018      	movs	r0, r3
 80034a0:	f003 f967 	bl	8006772 <HAL_GPIO_WritePin>
	led_blink_flag = 1;
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <led_blink+0x20>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	50001400 	.word	0x50001400
 80034b4:	20000478 	.word	0x20000478

080034b8 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 80034c0:	4b40      	ldr	r3, [pc, #256]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	23fa      	movs	r3, #250	@ 0xfa
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d34f      	bcc.n	800356c <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e041      	b.n	800355a <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80034d6:	250f      	movs	r5, #15
 80034d8:	197b      	adds	r3, r7, r5
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	58d2      	ldr	r2, [r2, r3]
 80034e2:	197b      	adds	r3, r7, r5
 80034e4:	781c      	ldrb	r4, [r3, #0]
 80034e6:	23fa      	movs	r3, #250	@ 0xfa
 80034e8:	0059      	lsls	r1, r3, #1
 80034ea:	0010      	movs	r0, r2
 80034ec:	f7fc fe24 	bl	8000138 <__udivsi3>
 80034f0:	0003      	movs	r3, r0
 80034f2:	0019      	movs	r1, r3
 80034f4:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 80034f6:	00a2      	lsls	r2, r4, #2
 80034f8:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b32      	ldr	r3, [pc, #200]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	58d3      	ldr	r3, [r2, r3]
 8003504:	2bc7      	cmp	r3, #199	@ 0xc7
 8003506:	d805      	bhi.n	8003514 <HAL_ADC_ConvCpltCallback+0x5c>
 8003508:	197b      	adds	r3, r7, r5
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	4b2e      	ldr	r3, [pc, #184]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	2100      	movs	r1, #0
 8003512:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8003514:	250f      	movs	r5, #15
 8003516:	197b      	adds	r3, r7, r5
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	58d3      	ldr	r3, [r2, r3]
 8003520:	0018      	movs	r0, r3
 8003522:	f7fd fd81 	bl	8001028 <__aeabi_ui2f>
 8003526:	197b      	adds	r3, r7, r5
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_ADC_ConvCpltCallback+0x114>)
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	58d2      	ldr	r2, [r2, r3]
 8003530:	197b      	adds	r3, r7, r5
 8003532:	781c      	ldrb	r4, [r3, #0]
 8003534:	1c11      	adds	r1, r2, #0
 8003536:	f7fd fbad 	bl	8000c94 <__aeabi_fmul>
 800353a:	1c03      	adds	r3, r0, #0
 800353c:	1c19      	adds	r1, r3, #0
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_ADC_ConvCpltCallback+0x118>)
 8003540:	00a2      	lsls	r2, r4, #2
 8003542:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003544:	197b      	adds	r3, r7, r5
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	2100      	movs	r1, #0
 800354e:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003550:	197b      	adds	r3, r7, r5
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	197b      	adds	r3, r7, r5
 8003556:	3201      	adds	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	230f      	movs	r3, #15
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d9b8      	bls.n	80034d6 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 800356a:	e026      	b.n	80035ba <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 800356c:	230e      	movs	r3, #14
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e016      	b.n	80035a4 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003576:	200e      	movs	r0, #14
 8003578:	183b      	adds	r3, r7, r0
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	58d3      	ldr	r3, [r2, r3]
 8003582:	183a      	adds	r2, r7, r0
 8003584:	7811      	ldrb	r1, [r2, #0]
 8003586:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003588:	0049      	lsls	r1, r1, #1
 800358a:	5a8a      	ldrh	r2, [r1, r2]
 800358c:	0011      	movs	r1, r2
 800358e:	183a      	adds	r2, r7, r0
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	1859      	adds	r1, r3, r1
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <HAL_ADC_ConvCpltCallback+0x110>)
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 800359a:	183b      	adds	r3, r7, r0
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	3201      	adds	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	230e      	movs	r3, #14
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d9e3      	bls.n	8003576 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_ADC_ConvCpltCallback+0x10c>)
 80035b8:	801a      	strh	r2, [r3, #0]
}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	20000546 	.word	0x20000546
 80035c8:	20000548 	.word	0x20000548
 80035cc:	20000004 	.word	0x20000004
 80035d0:	2000048c 	.word	0x2000048c
 80035d4:	20000498 	.word	0x20000498

080035d8 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR		0xA


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	0002      	movs	r2, r0
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d112      	bne.n	8003612 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 80035f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	2101      	movs	r1, #1
 80035fe:	0018      	movs	r0, r3
 8003600:	f003 f8b7 	bl	8006772 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	019b      	lsls	r3, r3, #6
 8003608:	480a      	ldr	r0, [pc, #40]	@ (8003634 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800360a:	2200      	movs	r2, #0
 800360c:	0019      	movs	r1, r3
 800360e:	f003 f8b0 	bl	8006772 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d102      	bne.n	8003620 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	200004a8 	.word	0x200004a8
 800362c:	200004a5 	.word	0x200004a5
 8003630:	50001400 	.word	0x50001400
 8003634:	50000800 	.word	0x50000800
 8003638:	200004b2 	.word	0x200004b2

0800363c <gsm_cmd>:
/* Util funcs */
// Check if target string exists in buffer
uint8_t find_string_in_buffer(const char* buffer, const char* target) {
}

uint8_t gsm_cmd(char *cmd, char *op_check, uint16_t wtime) {
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	4c20      	ldr	r4, [pc, #128]	@ (80036c0 <gsm_cmd+0x84>)
 8003640:	44a5      	add	sp, r4
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <gsm_cmd+0x88>)
 800364a:	2582      	movs	r5, #130	@ 0x82
 800364c:	00ad      	lsls	r5, r5, #2
 800364e:	195b      	adds	r3, r3, r5
 8003650:	19db      	adds	r3, r3, r7
 8003652:	801a      	strh	r2, [r3, #0]
	char cmd_string[500];
	memset(cmd_string, 0, 20);
 8003654:	2414      	movs	r4, #20
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2214      	movs	r2, #20
 800365a:	2100      	movs	r1, #0
 800365c:	0018      	movs	r0, r3
 800365e:	f007 fc31 	bl	800aec4 <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <gsm_cmd+0x8c>)
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4919      	ldr	r1, [pc, #100]	@ (80036cc <gsm_cmd+0x90>)
 8003668:	1938      	adds	r0, r7, r4
 800366a:	f007 fbbd 	bl	800ade8 <siprintf>
	gsm_tx_busy = 1;
 800366e:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <gsm_cmd+0x94>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
	gsm_rx_timeout = wtime * 10;
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <gsm_cmd+0x88>)
 8003676:	195b      	adds	r3, r3, r5
 8003678:	19db      	adds	r3, r3, r7
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	1c1a      	adds	r2, r3, #0
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	18db      	adds	r3, r3, r3
 8003684:	b29a      	uxth	r2, r3
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <gsm_cmd+0x98>)
 8003688:	801a      	strh	r2, [r3, #0]
	strcpy(gsm_match_resp, op_check);
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <gsm_cmd+0x9c>)
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f007 fcb4 	bl	800affe <strcpy>
	gsm_status = GSM_WAIT;
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <gsm_cmd+0xa0>)
 8003698:	2202      	movs	r2, #2
 800369a:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
 800369c:	193b      	adds	r3, r7, r4
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fc fd2e 	bl	8000100 <strlen>
 80036a4:	0003      	movs	r3, r0
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	1939      	adds	r1, r7, r4
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <gsm_cmd+0xa4>)
 80036ac:	0018      	movs	r0, r3
 80036ae:	f005 ff4d 	bl	800954c <HAL_UART_Transmit_DMA>
 80036b2:	0003      	movs	r3, r0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	2382      	movs	r3, #130	@ 0x82
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	449d      	add	sp, r3
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	fffffdf8 	.word	0xfffffdf8
 80036c4:	fffffdfe 	.word	0xfffffdfe
 80036c8:	0800d1d8 	.word	0x0800d1d8
 80036cc:	0800d1dc 	.word	0x0800d1dc
 80036d0:	200004c0 	.word	0x200004c0
 80036d4:	200004c6 	.word	0x200004c6
 80036d8:	20000530 	.word	0x20000530
 80036dc:	200004c2 	.word	0x200004c2
 80036e0:	200003d8 	.word	0x200003d8

080036e4 <gsm_is_valid_resp>:

uint8_t gsm_is_valid_resp() {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 80036e8:	4a06      	ldr	r2, [pc, #24]	@ (8003704 <gsm_is_valid_resp+0x20>)
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <gsm_is_valid_resp+0x24>)
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f007 fbf0 	bl	800aed4 <strstr>
 80036f4:	0003      	movs	r3, r0
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	4193      	sbcs	r3, r2
 80036fa:	b2db      	uxtb	r3, r3
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	20000530 	.word	0x20000530
 8003708:	200004cc 	.word	0x200004cc

0800370c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_UART_TxCpltCallback+0x44>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d114      	bne.n	8003748 <HAL_UART_TxCpltCallback+0x3c>
		gsm_tx_busy = 0;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <HAL_UART_TxCpltCallback+0x48>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
		gsm_rx_busy = 1;
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <HAL_UART_TxCpltCallback+0x4c>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
		memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
 800372a:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <HAL_UART_TxCpltCallback+0x50>)
 800372c:	2264      	movs	r2, #100	@ 0x64
 800372e:	2100      	movs	r1, #0
 8003730:	0018      	movs	r0, r3
 8003732:	f007 fbc7 	bl	800aec4 <memset>
		HAL_UART_Receive_DMA(huart, gsm_rx_buffer, GSM_RX_BUFFER_SIZE);
 8003736:	4909      	ldr	r1, [pc, #36]	@ (800375c <HAL_UART_TxCpltCallback+0x50>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2264      	movs	r2, #100	@ 0x64
 800373c:	0018      	movs	r0, r3
 800373e:	f005 ff97 	bl	8009670 <HAL_UART_Receive_DMA>
		gsm_rx_flag = 1;
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_UART_TxCpltCallback+0x54>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
	}
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40004800 	.word	0x40004800
 8003754:	200004c0 	.word	0x200004c0
 8003758:	200004c1 	.word	0x200004c1
 800375c:	200004cc 	.word	0x200004cc
 8003760:	200004c9 	.word	0x200004c9

08003764 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a8a      	ldr	r2, [pc, #552]	@ (800399c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d000      	beq.n	8003778 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003776:	e10c      	b.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8003778:	4b89      	ldr	r3, [pc, #548]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a89      	ldr	r2, [pc, #548]	@ (80039a4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d927      	bls.n	80037d2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(sec > 60) {
 8003782:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b3c      	cmp	r3, #60	@ 0x3c
 8003788:	d916      	bls.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 800378a:	4b88      	ldr	r3, [pc, #544]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003790:	d909      	bls.n	80037a6 <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8003792:	4b86      	ldr	r3, [pc, #536]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
					hr++;
 8003798:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	e004      	b.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 80037a6:	4b81      	ldr	r3, [pc, #516]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4b7f      	ldr	r3, [pc, #508]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037ae:	601a      	str	r2, [r3, #0]
				sec = 0;
 80037b0:	4b7d      	ldr	r3, [pc, #500]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e005      	b.n	80037c4 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 80037b8:	4b7b      	ldr	r3, [pc, #492]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b79      	ldr	r3, [pc, #484]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80037c2:	701a      	strb	r2, [r3, #0]
			ms = 0;
 80037c4:	4b76      	ldr	r3, [pc, #472]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
			vi_update_flag = 1;
 80037ca:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e004      	b.n	80037dc <HAL_TIM_PeriodElapsedCallback+0x78>
			/*###*/
		} else ms++;
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	4b71      	ldr	r3, [pc, #452]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037da:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 80037dc:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4975      	ldr	r1, [pc, #468]	@ (80039b8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fc fd2e 	bl	8000244 <__aeabi_uidivmod>
 80037e8:	1e0b      	subs	r3, r1, #0
 80037ea:	d102      	bne.n	80037f2 <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_refresh_flag = 1;
 80037ec:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 80037f2:	4b73      	ldr	r3, [pc, #460]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_PeriodElapsedCallback+0xa0>
 80037fa:	4b72      	ldr	r3, [pc, #456]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	e000      	b.n	8003806 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003804:	2200      	movs	r2, #0
 8003806:	4b6f      	ldr	r3, [pc, #444]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003808:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 800380a:	4b6f      	ldr	r3, [pc, #444]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003812:	4b6e      	ldr	r3, [pc, #440]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	e000      	b.n	800381e <HAL_TIM_PeriodElapsedCallback+0xba>
 800381c:	2200      	movs	r2, #0
 800381e:	4b6b      	ldr	r3, [pc, #428]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003820:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003822:	4b6b      	ldr	r3, [pc, #428]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800382a:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	e000      	b.n	8003836 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003834:	2200      	movs	r2, #0
 8003836:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003838:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 800383a:	4b67      	ldr	r3, [pc, #412]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_TIM_PeriodElapsedCallback+0xe8>
 8003842:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	e000      	b.n	800384e <HAL_TIM_PeriodElapsedCallback+0xea>
 800384c:	2200      	movs	r2, #0
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003850:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8003852:	4b62      	ldr	r3, [pc, #392]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	23fa      	movs	r3, #250	@ 0xfa
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	429a      	cmp	r2, r3
 800385c:	d908      	bls.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 800385e:	4b5e      	ldr	r3, [pc, #376]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003864:	4b5e      	ldr	r3, [pc, #376]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003866:	2200      	movs	r2, #0
 8003868:	2102      	movs	r1, #2
 800386a:	0018      	movs	r0, r3
 800386c:	f002 ff81 	bl	8006772 <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8003870:	4b5c      	ldr	r3, [pc, #368]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d14f      	bne.n	8003918 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8003878:	4b5b      	ldr	r3, [pc, #364]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8003880:	4b5a      	ldr	r3, [pc, #360]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1c18      	adds	r0, r3, #0
 8003886:	f7ff fbb5 	bl	8002ff4 <__aeabi_f2d>
 800388a:	4a59      	ldr	r2, [pc, #356]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800388e:	f7fd fc11 	bl	80010b4 <__aeabi_dadd>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	0010      	movs	r0, r2
 8003898:	0019      	movs	r1, r3
 800389a:	f7ff fbf3 	bl	8003084 <__aeabi_d2f>
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_PeriodElapsedCallback+0x140>
 80038a2:	2200      	movs	r2, #0
 80038a4:	4b51      	ldr	r3, [pc, #324]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80038a6:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 80038a8:	4b50      	ldr	r3, [pc, #320]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b52      	ldr	r3, [pc, #328]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c19      	adds	r1, r3, #0
 80038b2:	1c10      	adds	r0, r2, #0
 80038b4:	f7fc fe24 	bl	8000500 <__aeabi_fcmpge>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d03d      	beq.n	8003938 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 80038bc:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	2101      	movs	r1, #1
 80038c8:	0018      	movs	r0, r3
 80038ca:	f002 ff52 	bl	8006772 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	484a      	ldr	r0, [pc, #296]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	0019      	movs	r1, r3
 80038d8:	f002 ff4b 	bl	8006772 <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 100; i++);
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x18e>
 80038e6:	210f      	movs	r1, #15
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	3201      	adds	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	230f      	movs	r3, #15
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b63      	cmp	r3, #99	@ 0x63
 80038fa:	d9f4      	bls.n	80038e6 <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 80038fc:	4b38      	ldr	r3, [pc, #224]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	2101      	movs	r1, #1
 8003902:	0018      	movs	r0, r3
 8003904:	f002 ff35 	bl	8006772 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003908:	2380      	movs	r3, #128	@ 0x80
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	483b      	ldr	r0, [pc, #236]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800390e:	2200      	movs	r2, #0
 8003910:	0019      	movs	r1, r3
 8003912:	f002 ff2e 	bl	8006772 <HAL_GPIO_WritePin>
 8003916:	e00f      	b.n	8003938 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800391a:	2200      	movs	r2, #0
 800391c:	2101      	movs	r1, #1
 800391e:	0018      	movs	r0, r3
 8003920:	f002 ff27 	bl	8006772 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	4834      	ldr	r0, [pc, #208]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800392a:	2200      	movs	r2, #0
 800392c:	0019      	movs	r1, r3
 800392e:	f002 ff20 	bl	8006772 <HAL_GPIO_WritePin>
			triac_time = 0;
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8003938:	4b31      	ldr	r3, [pc, #196]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8003942:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	e000      	b.n	8003950 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800394e:	2200      	movs	r2, #0
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003952:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29a      	uxth	r2, r3
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	429a      	cmp	r2, r3
 8003962:	d916      	bls.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 800396a:	f7ff febb 	bl	80036e4 <gsm_is_valid_resp>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8003972:	4b26      	ldr	r3, [pc, #152]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e002      	b.n	8003980 <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800397c:	2263      	movs	r2, #99	@ 0x63
 800397e:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8003986:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 800398c:	4b21      	ldr	r3, [pc, #132]	@ (8003a14 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
		}


	}
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	40014400 	.word	0x40014400
 80039a0:	2000047c 	.word	0x2000047c
 80039a4:	00002710 	.word	0x00002710
 80039a8:	20000480 	.word	0x20000480
 80039ac:	20000484 	.word	0x20000484
 80039b0:	20000488 	.word	0x20000488
 80039b4:	200004b3 	.word	0x200004b3
 80039b8:	00001388 	.word	0x00001388
 80039bc:	2000047a 	.word	0x2000047a
 80039c0:	2000046c 	.word	0x2000046c
 80039c4:	20000470 	.word	0x20000470
 80039c8:	2000046d 	.word	0x2000046d
 80039cc:	20000472 	.word	0x20000472
 80039d0:	2000046e 	.word	0x2000046e
 80039d4:	20000474 	.word	0x20000474
 80039d8:	20000478 	.word	0x20000478
 80039dc:	20000476 	.word	0x20000476
 80039e0:	50001400 	.word	0x50001400
 80039e4:	200004b0 	.word	0x200004b0
 80039e8:	200004a5 	.word	0x200004a5
 80039ec:	200004a8 	.word	0x200004a8
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	3fb99999 	.word	0x3fb99999
 80039f8:	200004ac 	.word	0x200004ac
 80039fc:	50000800 	.word	0x50000800
 8003a00:	200004c9 	.word	0x200004c9
 8003a04:	200004c4 	.word	0x200004c4
 8003a08:	200004c6 	.word	0x200004c6
 8003a0c:	200004c2 	.word	0x200004c2
 8003a10:	200004c0 	.word	0x200004c0
 8003a14:	200004c1 	.word	0x200004c1

08003a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	46de      	mov	lr, fp
 8003a1c:	4657      	mov	r7, sl
 8003a1e:	464e      	mov	r6, r9
 8003a20:	4645      	mov	r5, r8
 8003a22:	b5e0      	push	{r5, r6, r7, lr}
 8003a24:	b0cb      	sub	sp, #300	@ 0x12c
 8003a26:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a28:	f001 fb64 	bl	80050f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a2c:	f000 fc96 	bl	800435c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a30:	f000 fe78 	bl	8004724 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a34:	f000 fe58 	bl	80046e8 <MX_DMA_Init>
  MX_TIM16_Init();
 8003a38:	f000 fdfc 	bl	8004634 <MX_TIM16_Init>
  MX_I2C1_Init();
 8003a3c:	f000 fd7a 	bl	8004534 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003a40:	f000 fe1e 	bl	8004680 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003a44:	f000 fce4 	bl	8004410 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003a48:	f000 fdb4 	bl	80045b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 8003a4c:	4bf9      	ldr	r3, [pc, #996]	@ (8003e34 <main+0x41c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2101      	movs	r1, #1
 8003a52:	0018      	movs	r0, r3
 8003a54:	f002 fe8d 	bl	8006772 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	48f6      	ldr	r0, [pc, #984]	@ (8003e38 <main+0x420>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	0019      	movs	r1, r3
 8003a62:	f002 fe86 	bl	8006772 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8003a66:	23f0      	movs	r3, #240	@ 0xf0
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	33ff      	adds	r3, #255	@ 0xff
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8003a78:	1d7b      	adds	r3, r7, #5
 8003a7a:	33ff      	adds	r3, #255	@ 0xff
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 8003a80:	4bee      	ldr	r3, [pc, #952]	@ (8003e3c <main+0x424>)
 8003a82:	2280      	movs	r2, #128	@ 0x80
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8003a88:	4bec      	ldr	r3, [pc, #944]	@ (8003e3c <main+0x424>)
 8003a8a:	2280      	movs	r2, #128	@ 0x80
 8003a8c:	0152      	lsls	r2, r2, #5
 8003a8e:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8003a90:	4bea      	ldr	r3, [pc, #936]	@ (8003e3c <main+0x424>)
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	0192      	lsls	r2, r2, #6
 8003a96:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8003a98:	4be8      	ldr	r3, [pc, #928]	@ (8003e3c <main+0x424>)
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	01d2      	lsls	r2, r2, #7
 8003a9e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8003aa0:	4be6      	ldr	r3, [pc, #920]	@ (8003e3c <main+0x424>)
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	0212      	lsls	r2, r2, #8
 8003aa6:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8003aa8:	23a0      	movs	r3, #160	@ 0xa0
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	0052      	lsls	r2, r2, #1
 8003ab0:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8003ab2:	4be2      	ldr	r3, [pc, #904]	@ (8003e3c <main+0x424>)
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 8003aba:	4be1      	ldr	r3, [pc, #900]	@ (8003e40 <main+0x428>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8003ac0:	4bdf      	ldr	r3, [pc, #892]	@ (8003e40 <main+0x428>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8003ac6:	4bde      	ldr	r3, [pc, #888]	@ (8003e40 <main+0x428>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 8003acc:	2328      	movs	r3, #40	@ 0x28
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	23c8      	movs	r3, #200	@ 0xc8
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f007 f9f4 	bl	800aec4 <memset>
	char api_key[20] = "07AFUS2QQTX0QLDF"; /* key for production */
 8003adc:	2314      	movs	r3, #20
 8003ade:	18f9      	adds	r1, r7, r3
 8003ae0:	4ad8      	ldr	r2, [pc, #864]	@ (8003e44 <main+0x42c>)
 8003ae2:	000b      	movs	r3, r1
 8003ae4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ae6:	c331      	stmia	r3!, {r0, r4, r5}
 8003ae8:	6810      	ldr	r0, [r2, #0]
 8003aea:	6018      	str	r0, [r3, #0]
 8003aec:	7912      	ldrb	r2, [r2, #4]
 8003aee:	711a      	strb	r2, [r3, #4]
 8003af0:	2311      	movs	r3, #17
 8003af2:	18cb      	adds	r3, r1, r3
 8003af4:	2203      	movs	r2, #3
 8003af6:	2100      	movs	r1, #0
 8003af8:	0018      	movs	r0, r3
 8003afa:	f007 f9e3 	bl	800aec4 <memset>
	// "01VH0OM4JU4KG9KN"; // API key
	/* GSM powerkey dance */
	/* TODO implement this using timer interrupts */
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_RESET);
 8003afe:	23a0      	movs	r3, #160	@ 0xa0
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	2200      	movs	r2, #0
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f002 fe33 	bl	8006772 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003b0c:	23fa      	movs	r3, #250	@ 0xfa
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	0018      	movs	r0, r3
 8003b12:	f001 fb75 	bl	8005200 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_SET);
 8003b16:	23a0      	movs	r3, #160	@ 0xa0
 8003b18:	05db      	lsls	r3, r3, #23
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2140      	movs	r1, #64	@ 0x40
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f002 fe27 	bl	8006772 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003b24:	20c8      	movs	r0, #200	@ 0xc8
 8003b26:	f001 fb6b 	bl	8005200 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 8003b2a:	23a0      	movs	r3, #160	@ 0xa0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2180      	movs	r1, #128	@ 0x80
 8003b32:	0018      	movs	r0, r3
 8003b34:	f002 fe1d 	bl	8006772 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003b38:	20c8      	movs	r0, #200	@ 0xc8
 8003b3a:	f001 fb61 	bl	8005200 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
 8003b3e:	23a0      	movs	r3, #160	@ 0xa0
 8003b40:	05db      	lsls	r3, r3, #23
 8003b42:	2200      	movs	r2, #0
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	0018      	movs	r0, r3
 8003b48:	f002 fe13 	bl	8006772 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8003b4c:	23af      	movs	r3, #175	@ 0xaf
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f001 fb55 	bl	8005200 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 8003b56:	23a0      	movs	r3, #160	@ 0xa0
 8003b58:	05db      	lsls	r3, r3, #23
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2180      	movs	r1, #128	@ 0x80
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 fe07 	bl	8006772 <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 8003b64:	4bb8      	ldr	r3, [pc, #736]	@ (8003e48 <main+0x430>)
 8003b66:	0018      	movs	r0, r3
 8003b68:	f001 fb4a 	bl	8005200 <HAL_Delay>
	uint8_t prev_idx = 1;
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	33ff      	adds	r3, #255	@ 0xff
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 8003b74:	1cfb      	adds	r3, r7, #3
 8003b76:	33ff      	adds	r3, #255	@ 0xff
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 8003b7c:	1c7b      	adds	r3, r7, #1
 8003b7e:	33ff      	adds	r3, #255	@ 0xff
 8003b80:	22c8      	movs	r2, #200	@ 0xc8
 8003b82:	0052      	lsls	r2, r2, #1
 8003b84:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 8003b86:	4bb1      	ldr	r3, [pc, #708]	@ (8003e4c <main+0x434>)
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f005 fa6f 	bl	800906c <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 8003b8e:	4bb0      	ldr	r3, [pc, #704]	@ (8003e50 <main+0x438>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8003b94:	4baf      	ldr	r3, [pc, #700]	@ (8003e54 <main+0x43c>)
 8003b96:	22ff      	movs	r2, #255	@ 0xff
 8003b98:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 8003b9a:	4baf      	ldr	r3, [pc, #700]	@ (8003e58 <main+0x440>)
 8003b9c:	2284      	movs	r2, #132	@ 0x84
 8003b9e:	0052      	lsls	r2, r2, #1
 8003ba0:	189b      	adds	r3, r3, r2
 8003ba2:	19db      	adds	r3, r3, r7
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	001a      	movs	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f007 f98a 	bl	800aec4 <memset>
	ti.day = 14;
 8003bb0:	210c      	movs	r1, #12
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	220e      	movs	r2, #14
 8003bb6:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	220b      	movs	r2, #11
 8003bbc:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	2218      	movs	r2, #24
 8003bc2:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	2215      	movs	r2, #21
 8003bce:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	220e      	movs	r2, #14
 8003bd4:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2200      	movs	r2, #0
 8003bda:	719a      	strb	r2, [r3, #6]
//	ds3231_settime(&ti);
//	ds3231_gettime(&time);
//
//	ds3231_clearalarm1();
//	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_clearflagalarm1(); /* clear alarm flag */
 8003bdc:	f7ff fc22 	bl	8003424 <ds3231_clearflagalarm1>
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 8003be0:	230a      	movs	r3, #10
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	2003      	movs	r0, #3
 8003bec:	f7ff fb30 	bl	8003250 <ds3231_setalarm1>
//				TRIAC2_SET(0);
//				triac_time = 0;
//			}
//		}

		if(kwh_update_flag == 1) {
 8003bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e5c <main+0x444>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d162      	bne.n	8003cbe <main+0x2a6>
			/* reading ACS37800 */
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_PACTAVGONEMIN, I2C_MEMADD_SIZE_8BIT, acs37800_p_buffer, 4, 100);
 8003bf8:	4899      	ldr	r0, [pc, #612]	@ (8003e60 <main+0x448>)
 8003bfa:	2364      	movs	r3, #100	@ 0x64
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	2304      	movs	r3, #4
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	4b98      	ldr	r3, [pc, #608]	@ (8003e64 <main+0x44c>)
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2301      	movs	r3, #1
 8003c08:	2222      	movs	r2, #34	@ 0x22
 8003c0a:	21fe      	movs	r1, #254	@ 0xfe
 8003c0c:	f003 f8da 	bl	8006dc4 <HAL_I2C_Mem_Read>
			uint16_t pavg_raw = (acs37800_p_buffer[1] << 8) | acs37800_p_buffer[0];
 8003c10:	4b94      	ldr	r3, [pc, #592]	@ (8003e64 <main+0x44c>)
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	4b92      	ldr	r3, [pc, #584]	@ (8003e64 <main+0x44c>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b21a      	sxth	r2, r3
 8003c24:	21fe      	movs	r1, #254	@ 0xfe
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	801a      	strh	r2, [r3, #0]
			pavg_final = pavg_raw;
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7fd f9fa 	bl	8001028 <__aeabi_ui2f>
 8003c34:	1c02      	adds	r2, r0, #0
 8003c36:	4b8c      	ldr	r3, [pc, #560]	@ (8003e68 <main+0x450>)
 8003c38:	601a      	str	r2, [r3, #0]
			float LSBpermW = 3.08; // LSB per mW
 8003c3a:	4b8c      	ldr	r3, [pc, #560]	@ (8003e6c <main+0x454>)
 8003c3c:	22f8      	movs	r2, #248	@ 0xf8
 8003c3e:	18b9      	adds	r1, r7, r2
 8003c40:	600b      	str	r3, [r1, #0]
			LSBpermW  *= 30.0 / ACS37800_CURR_SENS_RANGE; // Correct for sensor version
			pavg_final /= LSBpermW; // Convert from codes to mW
 8003c42:	4b89      	ldr	r3, [pc, #548]	@ (8003e68 <main+0x450>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	18ba      	adds	r2, r7, r2
 8003c48:	6811      	ldr	r1, [r2, #0]
 8003c4a:	1c18      	adds	r0, r3, #0
 8003c4c:	f7fc fe54 	bl	80008f8 <__aeabi_fdiv>
 8003c50:	1c03      	adds	r3, r0, #0
 8003c52:	1c1a      	adds	r2, r3, #0
 8003c54:	4b84      	ldr	r3, [pc, #528]	@ (8003e68 <main+0x450>)
 8003c56:	601a      	str	r2, [r3, #0]
			//Correct for the voltage divider: (RISO1 + RISO2 + RSENSE) / RSENSE
			//Or:  (RISO1 + RISO2 + RISO3 + RISO4 + RSENSE) / RSENSE
			pavg_final /= 0.0008243;
 8003c58:	4b83      	ldr	r3, [pc, #524]	@ (8003e68 <main+0x450>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1c18      	adds	r0, r3, #0
 8003c5e:	f7ff f9c9 	bl	8002ff4 <__aeabi_f2d>
 8003c62:	4a83      	ldr	r2, [pc, #524]	@ (8003e70 <main+0x458>)
 8003c64:	4b83      	ldr	r3, [pc, #524]	@ (8003e74 <main+0x45c>)
 8003c66:	f7fd fdeb 	bl	8001840 <__aeabi_ddiv>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	000b      	movs	r3, r1
 8003c6e:	0010      	movs	r0, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	f7ff fa07 	bl	8003084 <__aeabi_d2f>
 8003c76:	1c02      	adds	r2, r0, #0
 8003c78:	4b7b      	ldr	r3, [pc, #492]	@ (8003e68 <main+0x450>)
 8003c7a:	601a      	str	r2, [r3, #0]
			pavg_final /= 1000; // Convert from mW to W
 8003c7c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e68 <main+0x450>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	497d      	ldr	r1, [pc, #500]	@ (8003e78 <main+0x460>)
 8003c82:	1c18      	adds	r0, r3, #0
 8003c84:	f7fc fe38 	bl	80008f8 <__aeabi_fdiv>
 8003c88:	1c03      	adds	r3, r0, #0
 8003c8a:	1c1a      	adds	r2, r3, #0
 8003c8c:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <main+0x450>)
 8003c8e:	601a      	str	r2, [r3, #0]

			kwh = kwh + (pavg_final * (1/(float)60));
 8003c90:	4b75      	ldr	r3, [pc, #468]	@ (8003e68 <main+0x450>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4979      	ldr	r1, [pc, #484]	@ (8003e7c <main+0x464>)
 8003c96:	1c18      	adds	r0, r3, #0
 8003c98:	f7fc fffc 	bl	8000c94 <__aeabi_fmul>
 8003c9c:	1c03      	adds	r3, r0, #0
 8003c9e:	1c1a      	adds	r2, r3, #0
 8003ca0:	4b77      	ldr	r3, [pc, #476]	@ (8003e80 <main+0x468>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1c19      	adds	r1, r3, #0
 8003ca6:	1c10      	adds	r0, r2, #0
 8003ca8:	f7fc fc34 	bl	8000514 <__aeabi_fadd>
 8003cac:	1c03      	adds	r3, r0, #0
 8003cae:	1c1a      	adds	r2, r3, #0
 8003cb0:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <main+0x468>)
 8003cb2:	601a      	str	r2, [r3, #0]
			/* TODO update kwh in EEPROM */
			kwh_update_flag = 0; /* wait till next min */
 8003cb4:	4b69      	ldr	r3, [pc, #420]	@ (8003e5c <main+0x444>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
			ds3231_clearflagalarm1(); /* clear alarm flag */
 8003cba:	f7ff fbb3 	bl	8003424 <ds3231_clearflagalarm1>
		}
		if(vi_update_flag == 1) {
 8003cbe:	4b71      	ldr	r3, [pc, #452]	@ (8003e84 <main+0x46c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d000      	beq.n	8003cc8 <main+0x2b0>
 8003cc6:	e082      	b.n	8003dce <main+0x3b6>
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_VIRMS, I2C_MEMADD_SIZE_8BIT, acs37800_vi_buffer, 4, 100);
 8003cc8:	4865      	ldr	r0, [pc, #404]	@ (8003e60 <main+0x448>)
 8003cca:	2364      	movs	r3, #100	@ 0x64
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	2304      	movs	r3, #4
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <main+0x470>)
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	2220      	movs	r2, #32
 8003cda:	21fe      	movs	r1, #254	@ 0xfe
 8003cdc:	f003 f872 	bl	8006dc4 <HAL_I2C_Mem_Read>
			uint16_t vrms_raw = (acs37800_vi_buffer[1] << 8) | acs37800_vi_buffer[0];
 8003ce0:	4b69      	ldr	r3, [pc, #420]	@ (8003e88 <main+0x470>)
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b21a      	sxth	r2, r3
 8003cea:	4b67      	ldr	r3, [pc, #412]	@ (8003e88 <main+0x470>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	21f6      	movs	r1, #246	@ 0xf6
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	801a      	strh	r2, [r3, #0]
			vrms_final = vrms_raw / (float)55000;
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fd f942 	bl	8000f88 <__aeabi_i2f>
 8003d04:	1c03      	adds	r3, r0, #0
 8003d06:	4961      	ldr	r1, [pc, #388]	@ (8003e8c <main+0x474>)
 8003d08:	1c18      	adds	r0, r3, #0
 8003d0a:	f7fc fdf5 	bl	80008f8 <__aeabi_fdiv>
 8003d0e:	1c03      	adds	r3, r0, #0
 8003d10:	1c1a      	adds	r2, r3, #0
 8003d12:	4b5f      	ldr	r3, [pc, #380]	@ (8003e90 <main+0x478>)
 8003d14:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final * 250;
 8003d16:	4b5e      	ldr	r3, [pc, #376]	@ (8003e90 <main+0x478>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	495e      	ldr	r1, [pc, #376]	@ (8003e94 <main+0x47c>)
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7fc ffb9 	bl	8000c94 <__aeabi_fmul>
 8003d22:	1c03      	adds	r3, r0, #0
 8003d24:	1c1a      	adds	r2, r3, #0
 8003d26:	4b5a      	ldr	r3, [pc, #360]	@ (8003e90 <main+0x478>)
 8003d28:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 1000;
 8003d2a:	4b59      	ldr	r3, [pc, #356]	@ (8003e90 <main+0x478>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4952      	ldr	r1, [pc, #328]	@ (8003e78 <main+0x460>)
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7fc fde1 	bl	80008f8 <__aeabi_fdiv>
 8003d36:	1c03      	adds	r3, r0, #0
 8003d38:	1c1a      	adds	r2, r3, #0
 8003d3a:	4b55      	ldr	r3, [pc, #340]	@ (8003e90 <main+0x478>)
 8003d3c:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final / 0.0008243;
 8003d3e:	4b54      	ldr	r3, [pc, #336]	@ (8003e90 <main+0x478>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c18      	adds	r0, r3, #0
 8003d44:	f7ff f956 	bl	8002ff4 <__aeabi_f2d>
 8003d48:	4a49      	ldr	r2, [pc, #292]	@ (8003e70 <main+0x458>)
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e74 <main+0x45c>)
 8003d4c:	f7fd fd78 	bl	8001840 <__aeabi_ddiv>
 8003d50:	0002      	movs	r2, r0
 8003d52:	000b      	movs	r3, r1
 8003d54:	0010      	movs	r0, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	f7ff f994 	bl	8003084 <__aeabi_d2f>
 8003d5c:	1c02      	adds	r2, r0, #0
 8003d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e90 <main+0x478>)
 8003d60:	601a      	str	r2, [r3, #0]
			uint16_t irms_raw = (acs37800_vi_buffer[3] << 8) | acs37800_vi_buffer[2];
 8003d62:	4b49      	ldr	r3, [pc, #292]	@ (8003e88 <main+0x470>)
 8003d64:	78db      	ldrb	r3, [r3, #3]
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	4b46      	ldr	r3, [pc, #280]	@ (8003e88 <main+0x470>)
 8003d6e:	789b      	ldrb	r3, [r3, #2]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	21f4      	movs	r1, #244	@ 0xf4
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	801a      	strh	r2, [r3, #0]
			irms_final = irms_raw / (float)55000;
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fd f901 	bl	8000f88 <__aeabi_i2f>
 8003d86:	1c03      	adds	r3, r0, #0
 8003d88:	4940      	ldr	r1, [pc, #256]	@ (8003e8c <main+0x474>)
 8003d8a:	1c18      	adds	r0, r3, #0
 8003d8c:	f7fc fdb4 	bl	80008f8 <__aeabi_fdiv>
 8003d90:	1c03      	adds	r3, r0, #0
 8003d92:	1c1a      	adds	r2, r3, #0
 8003d94:	4b40      	ldr	r3, [pc, #256]	@ (8003e98 <main+0x480>)
 8003d96:	601a      	str	r2, [r3, #0]
			irms_final = irms_final * ACS37800_CURR_SENS_RANGE;
 8003d98:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <main+0x480>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	493f      	ldr	r1, [pc, #252]	@ (8003e9c <main+0x484>)
 8003d9e:	1c18      	adds	r0, r3, #0
 8003da0:	f7fc ff78 	bl	8000c94 <__aeabi_fmul>
 8003da4:	1c03      	adds	r3, r0, #0
 8003da6:	1c1a      	adds	r2, r3, #0
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <main+0x480>)
 8003daa:	601a      	str	r2, [r3, #0]
			if(irms_final < 0.050)
 8003dac:	4b3a      	ldr	r3, [pc, #232]	@ (8003e98 <main+0x480>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c18      	adds	r0, r3, #0
 8003db2:	f7ff f91f 	bl	8002ff4 <__aeabi_f2d>
 8003db6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea0 <main+0x488>)
 8003db8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <main+0x48c>)
 8003dba:	f7fc fb49 	bl	8000450 <__aeabi_dcmplt>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d002      	beq.n	8003dc8 <main+0x3b0>
				irms_final = 0;
 8003dc2:	4b35      	ldr	r3, [pc, #212]	@ (8003e98 <main+0x480>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
			vi_update_flag = 0; /* wait till next sec */
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <main+0x46c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
		/*###*/
		/* routines */

		/*### Sensor read ###*/
	/*A*/
		if(sensor_refresh_flag == 1) {
 8003dce:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <main+0x490>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d000      	beq.n	8003dd8 <main+0x3c0>
 8003dd6:	e0a7      	b.n	8003f28 <main+0x510>
			sensor_rx_select(sensor_idx);
 8003dd8:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <main+0x494>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f001 f90f 	bl	8005000 <sensor_rx_select>
			HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 10);
 8003de2:	24f0      	movs	r4, #240	@ 0xf0
 8003de4:	1939      	adds	r1, r7, r4
 8003de6:	4832      	ldr	r0, [pc, #200]	@ (8003eb0 <main+0x498>)
 8003de8:	230a      	movs	r3, #10
 8003dea:	2202      	movs	r2, #2
 8003dec:	f004 fbde 	bl	80085ac <HAL_SPI_Receive>
			sensor_rx_disable(); // Disables all IC comms
 8003df0:	f001 f8e6 	bl	8004fc0 <sensor_rx_disable>
			temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 8003df4:	0020      	movs	r0, r4
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	183b      	adds	r3, r7, r0
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	109b      	asrs	r3, r3, #2
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	2408      	movs	r4, #8
 8003e0a:	34ff      	adds	r4, #255	@ 0xff
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2101      	movs	r1, #1
 8003e10:	400a      	ands	r2, r1
 8003e12:	701a      	strb	r2, [r3, #0]
			temp_word = (sdo[0] | sdo[1] << 8);
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b21a      	sxth	r2, r3
 8003e28:	21f2      	movs	r1, #242	@ 0xf2
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	801a      	strh	r2, [r3, #0]
			temp12b = (temp_word & 0b111111111111000) >> 3;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	e040      	b.n	8003eb4 <main+0x49c>
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	50001400 	.word	0x50001400
 8003e38:	50000800 	.word	0x50000800
 8003e3c:	50000400 	.word	0x50000400
 8003e40:	20000498 	.word	0x20000498
 8003e44:	0800d350 	.word	0x0800d350
 8003e48:	00003a98 	.word	0x00003a98
 8003e4c:	2000038c 	.word	0x2000038c
 8003e50:	200004a5 	.word	0x200004a5
 8003e54:	200004c8 	.word	0x200004c8
 8003e58:	fffffefc 	.word	0xfffffefc
 8003e5c:	200004b2 	.word	0x200004b2
 8003e60:	200002d4 	.word	0x200002d4
 8003e64:	20000204 	.word	0x20000204
 8003e68:	20000210 	.word	0x20000210
 8003e6c:	40451eb8 	.word	0x40451eb8
 8003e70:	c5634c00 	.word	0xc5634c00
 8003e74:	3f4b02ba 	.word	0x3f4b02ba
 8003e78:	447a0000 	.word	0x447a0000
 8003e7c:	3c888889 	.word	0x3c888889
 8003e80:	200004a0 	.word	0x200004a0
 8003e84:	200004b3 	.word	0x200004b3
 8003e88:	20000200 	.word	0x20000200
 8003e8c:	4756d800 	.word	0x4756d800
 8003e90:	20000208 	.word	0x20000208
 8003e94:	437a0000 	.word	0x437a0000
 8003e98:	2000020c 	.word	0x2000020c
 8003e9c:	41f00000 	.word	0x41f00000
 8003ea0:	9999999a 	.word	0x9999999a
 8003ea4:	3fa99999 	.word	0x3fa99999
 8003ea8:	2000047a 	.word	0x2000047a
 8003eac:	20000479 	.word	0x20000479
 8003eb0:	20000328 	.word	0x20000328
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	10db      	asrs	r3, r3, #3
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	1d7b      	adds	r3, r7, #5
 8003ebc:	33ff      	adds	r3, #255	@ 0xff
 8003ebe:	0512      	lsls	r2, r2, #20
 8003ec0:	0d12      	lsrs	r2, r2, #20
 8003ec2:	801a      	strh	r2, [r3, #0]
			/* store the temp */
			if(temp_state == 1) {
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <main+0x4c4>
				temperatures[sensor_idx - 1] = -99;
 8003ecc:	4bdd      	ldr	r3, [pc, #884]	@ (8004244 <main+0x82c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	4bdd      	ldr	r3, [pc, #884]	@ (8004248 <main+0x830>)
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	49dd      	ldr	r1, [pc, #884]	@ (800424c <main+0x834>)
 8003ed8:	50d1      	str	r1, [r2, r3]
 8003eda:	e016      	b.n	8003f0a <main+0x4f2>
			}
			else {
				temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 8003edc:	1d7b      	adds	r3, r7, #5
 8003ede:	33ff      	adds	r3, #255	@ 0xff
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff f834 	bl	8002f50 <__aeabi_i2d>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4bd9      	ldr	r3, [pc, #868]	@ (8004250 <main+0x838>)
 8003eec:	f7fe f8e2 	bl	80020b4 <__aeabi_dmul>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	000b      	movs	r3, r1
 8003ef4:	49d3      	ldr	r1, [pc, #844]	@ (8004244 <main+0x82c>)
 8003ef6:	7809      	ldrb	r1, [r1, #0]
 8003ef8:	1e4c      	subs	r4, r1, #1
 8003efa:	0010      	movs	r0, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	f7ff f8c1 	bl	8003084 <__aeabi_d2f>
 8003f02:	1c01      	adds	r1, r0, #0
 8003f04:	4bd0      	ldr	r3, [pc, #832]	@ (8004248 <main+0x830>)
 8003f06:	00a2      	lsls	r2, r4, #2
 8003f08:	50d1      	str	r1, [r2, r3]
			}
			sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 8003f0a:	4bce      	ldr	r3, [pc, #824]	@ (8004244 <main+0x82c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d804      	bhi.n	8003f1c <main+0x504>
 8003f12:	4bcc      	ldr	r3, [pc, #816]	@ (8004244 <main+0x82c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	e000      	b.n	8003f1e <main+0x506>
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4bc9      	ldr	r3, [pc, #804]	@ (8004244 <main+0x82c>)
 8003f20:	701a      	strb	r2, [r3, #0]
			sensor_refresh_flag = 0;
 8003f22:	4bcc      	ldr	r3, [pc, #816]	@ (8004254 <main+0x83c>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 8003f28:	21f0      	movs	r1, #240	@ 0xf0
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	2200      	movs	r2, #0
 8003f34:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 8003f36:	23f2      	movs	r3, #242	@ 0xf2
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 8003f3e:	1d7b      	adds	r3, r7, #5
 8003f40:	33ff      	adds	r3, #255	@ 0xff
 8003f42:	2200      	movs	r2, #0
 8003f44:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 8003f46:	4bc0      	ldr	r3, [pc, #768]	@ (8004248 <main+0x830>)
 8003f48:	681c      	ldr	r4, [r3, #0]
 8003f4a:	1c7b      	adds	r3, r7, #1
 8003f4c:	33ff      	adds	r3, #255	@ 0xff
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7fd f819 	bl	8000f88 <__aeabi_i2f>
 8003f56:	1c03      	adds	r3, r0, #0
 8003f58:	1c19      	adds	r1, r3, #0
 8003f5a:	1c20      	adds	r0, r4, #0
 8003f5c:	f7fc fad0 	bl	8000500 <__aeabi_fcmpge>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d10e      	bne.n	8003f82 <main+0x56a>
 8003f64:	4bb8      	ldr	r3, [pc, #736]	@ (8004248 <main+0x830>)
 8003f66:	685c      	ldr	r4, [r3, #4]
 8003f68:	1c7b      	adds	r3, r7, #1
 8003f6a:	33ff      	adds	r3, #255	@ 0xff
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7fd f80a 	bl	8000f88 <__aeabi_i2f>
 8003f74:	1c03      	adds	r3, r0, #0
 8003f76:	1c19      	adds	r1, r3, #0
 8003f78:	1c20      	adds	r0, r4, #0
 8003f7a:	f7fc fac1 	bl	8000500 <__aeabi_fcmpge>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d010      	beq.n	8003fa4 <main+0x58c>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8003f82:	4bb5      	ldr	r3, [pc, #724]	@ (8004258 <main+0x840>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	2101      	movs	r1, #1
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f002 fbf2 	bl	8006772 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	48b2      	ldr	r0, [pc, #712]	@ (800425c <main+0x844>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	0019      	movs	r1, r3
 8003f98:	f002 fbeb 	bl	8006772 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8003f9c:	4bb0      	ldr	r3, [pc, #704]	@ (8004260 <main+0x848>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e002      	b.n	8003faa <main+0x592>
		}
		else {
			triac_temp_ctrl = 1;
 8003fa4:	4bae      	ldr	r3, [pc, #696]	@ (8004260 <main+0x848>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8003faa:	4bad      	ldr	r3, [pc, #692]	@ (8004260 <main+0x848>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d163      	bne.n	800407a <main+0x662>
			if(BTN1_READ() == 0) {
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4aab      	ldr	r2, [pc, #684]	@ (8004264 <main+0x84c>)
 8003fb8:	0019      	movs	r1, r3
 8003fba:	0010      	movs	r0, r2
 8003fbc:	f002 fbbc 	bl	8006738 <HAL_GPIO_ReadPin>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d112      	bne.n	8003fea <main+0x5d2>
				if(BTN1_READ() == 0) {
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4aa6      	ldr	r2, [pc, #664]	@ (8004264 <main+0x84c>)
 8003fca:	0019      	movs	r1, r3
 8003fcc:	0010      	movs	r0, r2
 8003fce:	f002 fbb3 	bl	8006738 <HAL_GPIO_ReadPin>
 8003fd2:	1e03      	subs	r3, r0, #0
 8003fd4:	d164      	bne.n	80040a0 <main+0x688>
					mode = 1;
 8003fd6:	4ba4      	ldr	r3, [pc, #656]	@ (8004268 <main+0x850>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
					triac_time = 4.5; /* 130V */
 8003fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800426c <main+0x854>)
 8003fde:	4aa4      	ldr	r2, [pc, #656]	@ (8004270 <main+0x858>)
 8003fe0:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8003fe2:	4ba4      	ldr	r3, [pc, #656]	@ (8004274 <main+0x85c>)
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e05a      	b.n	80040a0 <main+0x688>
				}
			}
			else if(BTN2_READ() == 0) {
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4a9d      	ldr	r2, [pc, #628]	@ (8004264 <main+0x84c>)
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	0010      	movs	r0, r2
 8003ff4:	f002 fba0 	bl	8006738 <HAL_GPIO_ReadPin>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d112      	bne.n	8004022 <main+0x60a>
				if(BTN2_READ() == 0) {
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4a98      	ldr	r2, [pc, #608]	@ (8004264 <main+0x84c>)
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f002 fb97 	bl	8006738 <HAL_GPIO_ReadPin>
 800400a:	1e03      	subs	r3, r0, #0
 800400c:	d148      	bne.n	80040a0 <main+0x688>
					mode = 2;
 800400e:	4b96      	ldr	r3, [pc, #600]	@ (8004268 <main+0x850>)
 8004010:	2202      	movs	r2, #2
 8004012:	701a      	strb	r2, [r3, #0]
					triac_time = 3.37; /* 170V */
 8004014:	4b95      	ldr	r3, [pc, #596]	@ (800426c <main+0x854>)
 8004016:	4a98      	ldr	r2, [pc, #608]	@ (8004278 <main+0x860>)
 8004018:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800401a:	4b96      	ldr	r3, [pc, #600]	@ (8004274 <main+0x85c>)
 800401c:	2202      	movs	r2, #2
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e03e      	b.n	80040a0 <main+0x688>
				}
			}
			else if(BTN3_READ() == 0) {
 8004022:	4b90      	ldr	r3, [pc, #576]	@ (8004264 <main+0x84c>)
 8004024:	2180      	movs	r1, #128	@ 0x80
 8004026:	0018      	movs	r0, r3
 8004028:	f002 fb86 	bl	8006738 <HAL_GPIO_ReadPin>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d110      	bne.n	8004052 <main+0x63a>
				if(BTN3_READ() == 0) {
 8004030:	4b8c      	ldr	r3, [pc, #560]	@ (8004264 <main+0x84c>)
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	0018      	movs	r0, r3
 8004036:	f002 fb7f 	bl	8006738 <HAL_GPIO_ReadPin>
 800403a:	1e03      	subs	r3, r0, #0
 800403c:	d130      	bne.n	80040a0 <main+0x688>
					mode = 3;
 800403e:	4b8a      	ldr	r3, [pc, #552]	@ (8004268 <main+0x850>)
 8004040:	2203      	movs	r2, #3
 8004042:	701a      	strb	r2, [r3, #0]
					triac_time = 2.4; /* 205V */
 8004044:	4b89      	ldr	r3, [pc, #548]	@ (800426c <main+0x854>)
 8004046:	4a8d      	ldr	r2, [pc, #564]	@ (800427c <main+0x864>)
 8004048:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 800404a:	4b8a      	ldr	r3, [pc, #552]	@ (8004274 <main+0x85c>)
 800404c:	2202      	movs	r2, #2
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e026      	b.n	80040a0 <main+0x688>
				}
			}
			else {
				mode = 0;
 8004052:	4b85      	ldr	r3, [pc, #532]	@ (8004268 <main+0x850>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8004058:	4b86      	ldr	r3, [pc, #536]	@ (8004274 <main+0x85c>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 800405e:	4b7e      	ldr	r3, [pc, #504]	@ (8004258 <main+0x840>)
 8004060:	2200      	movs	r2, #0
 8004062:	2101      	movs	r1, #1
 8004064:	0018      	movs	r0, r3
 8004066:	f002 fb84 	bl	8006772 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	487b      	ldr	r0, [pc, #492]	@ (800425c <main+0x844>)
 8004070:	2200      	movs	r2, #0
 8004072:	0019      	movs	r1, r3
 8004074:	f002 fb7d 	bl	8006772 <HAL_GPIO_WritePin>
 8004078:	e012      	b.n	80040a0 <main+0x688>
			}
		}
		else {
			mode = 0;
 800407a:	4b7b      	ldr	r3, [pc, #492]	@ (8004268 <main+0x850>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8004080:	4b7c      	ldr	r3, [pc, #496]	@ (8004274 <main+0x85c>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 8004086:	4b74      	ldr	r3, [pc, #464]	@ (8004258 <main+0x840>)
 8004088:	2200      	movs	r2, #0
 800408a:	2101      	movs	r1, #1
 800408c:	0018      	movs	r0, r3
 800408e:	f002 fb70 	bl	8006772 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	4871      	ldr	r0, [pc, #452]	@ (800425c <main+0x844>)
 8004098:	2200      	movs	r2, #0
 800409a:	0019      	movs	r1, r3
 800409c:	f002 fb69 	bl	8006772 <HAL_GPIO_WritePin>
		}

		/*A*/
		/* GSM stuff */
		/*########################################################################*/
		if(gsm_status != GSM_WAIT) {
 80040a0:	4b77      	ldr	r3, [pc, #476]	@ (8004280 <main+0x868>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d100      	bne.n	80040ac <main+0x694>
 80040aa:	e128      	b.n	80042fe <main+0x8e6>
			if(upload_running) {
 80040ac:	4b75      	ldr	r3, [pc, #468]	@ (8004284 <main+0x86c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d100      	bne.n	80040b6 <main+0x69e>
 80040b4:	e11e      	b.n	80042f4 <main+0x8dc>
				if(gsm_status == GSM_OK || gsm_status == GSM_NOK) {
 80040b6:	4b72      	ldr	r3, [pc, #456]	@ (8004280 <main+0x868>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <main+0x6b2>
 80040c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004280 <main+0x868>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b63      	cmp	r3, #99	@ 0x63
 80040c8:	d115      	bne.n	80040f6 <main+0x6de>
					if(gsm_cmd_step >= GSM_CMD_LAST_IDX) {
 80040ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004288 <main+0x870>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d90b      	bls.n	80040ea <main+0x6d2>
						upload_flag = 1; /* successful upload */
 80040d2:	4b6e      	ldr	r3, [pc, #440]	@ (800428c <main+0x874>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
						led_blink();
 80040d8:	f7ff f9dc 	bl	8003494 <led_blink>
						gsm_cmd_step = 0; /* prep for next upload */
 80040dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004288 <main+0x870>)
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
						upload_running = 0; /* wait for next time slot */
 80040e2:	4b68      	ldr	r3, [pc, #416]	@ (8004284 <main+0x86c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e005      	b.n	80040f6 <main+0x6de>
					}
					else
						gsm_cmd_step += 1;
 80040ea:	4b67      	ldr	r3, [pc, #412]	@ (8004288 <main+0x870>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b65      	ldr	r3, [pc, #404]	@ (8004288 <main+0x870>)
 80040f4:	701a      	strb	r2, [r3, #0]
				}
//				else if(gsm_status == GSM_NOK) {
//					gsm_cmd_step = 0;
//					upload_running = 0; /* cancel upload seq */
//				}
				switch(gsm_cmd_step) {
 80040f6:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <main+0x870>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b0e      	cmp	r3, #14
 80040fc:	d900      	bls.n	8004100 <main+0x6e8>
 80040fe:	e0fe      	b.n	80042fe <main+0x8e6>
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	4b63      	ldr	r3, [pc, #396]	@ (8004290 <main+0x878>)
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	469f      	mov	pc, r3
				case 0:
					break;
				case 1:
					gsm_cmd("AT+NETCLOSE","OK", GSM_WAIT_TIME_LOW);
 800410a:	23fa      	movs	r3, #250	@ 0xfa
 800410c:	005a      	lsls	r2, r3, #1
 800410e:	4961      	ldr	r1, [pc, #388]	@ (8004294 <main+0x87c>)
 8004110:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <main+0x880>)
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fa92 	bl	800363c <gsm_cmd>
					break;
 8004118:	e0f1      	b.n	80042fe <main+0x8e6>
				case 2:
					gsm_cmd("AT+CCHMODE=1","OK", GSM_WAIT_TIME_LOW);
 800411a:	23fa      	movs	r3, #250	@ 0xfa
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	495d      	ldr	r1, [pc, #372]	@ (8004294 <main+0x87c>)
 8004120:	4b5e      	ldr	r3, [pc, #376]	@ (800429c <main+0x884>)
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fa8a 	bl	800363c <gsm_cmd>
					break;
 8004128:	e0e9      	b.n	80042fe <main+0x8e6>
				case 3:
					gsm_cmd("AT+CCHSET=1","OK", GSM_WAIT_TIME_LOW);
 800412a:	23fa      	movs	r3, #250	@ 0xfa
 800412c:	005a      	lsls	r2, r3, #1
 800412e:	4959      	ldr	r1, [pc, #356]	@ (8004294 <main+0x87c>)
 8004130:	4b5b      	ldr	r3, [pc, #364]	@ (80042a0 <main+0x888>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff fa82 	bl	800363c <gsm_cmd>
					break;
 8004138:	e0e1      	b.n	80042fe <main+0x8e6>
				case 4:
					gsm_cmd("AT+CCHSTART","OK", GSM_WAIT_TIME_LOW);
 800413a:	23fa      	movs	r3, #250	@ 0xfa
 800413c:	005a      	lsls	r2, r3, #1
 800413e:	4955      	ldr	r1, [pc, #340]	@ (8004294 <main+0x87c>)
 8004140:	4b58      	ldr	r3, [pc, #352]	@ (80042a4 <main+0x88c>)
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff fa7a 	bl	800363c <gsm_cmd>
					break;
 8004148:	e0d9      	b.n	80042fe <main+0x8e6>
				case 5:
					gsm_cmd("AT+CCHSSLCFG=0,0","OK",GSM_WAIT_TIME_LOW);
 800414a:	23fa      	movs	r3, #250	@ 0xfa
 800414c:	005a      	lsls	r2, r3, #1
 800414e:	4951      	ldr	r1, [pc, #324]	@ (8004294 <main+0x87c>)
 8004150:	4b55      	ldr	r3, [pc, #340]	@ (80042a8 <main+0x890>)
 8004152:	0018      	movs	r0, r3
 8004154:	f7ff fa72 	bl	800363c <gsm_cmd>
					break;
 8004158:	e0d1      	b.n	80042fe <main+0x8e6>
				case 6:
					gsm_cmd("AT+CSOCKSETPN=1","OK", GSM_WAIT_TIME_LOW);
 800415a:	23fa      	movs	r3, #250	@ 0xfa
 800415c:	005a      	lsls	r2, r3, #1
 800415e:	494d      	ldr	r1, [pc, #308]	@ (8004294 <main+0x87c>)
 8004160:	4b52      	ldr	r3, [pc, #328]	@ (80042ac <main+0x894>)
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fa6a 	bl	800363c <gsm_cmd>
					break;
 8004168:	e0c9      	b.n	80042fe <main+0x8e6>
				case 7:
					gsm_cmd("AT+CIPMODE=0","OK", GSM_WAIT_TIME_LOW);
 800416a:	23fa      	movs	r3, #250	@ 0xfa
 800416c:	005a      	lsls	r2, r3, #1
 800416e:	4949      	ldr	r1, [pc, #292]	@ (8004294 <main+0x87c>)
 8004170:	4b4f      	ldr	r3, [pc, #316]	@ (80042b0 <main+0x898>)
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fa62 	bl	800363c <gsm_cmd>
					break;
 8004178:	e0c1      	b.n	80042fe <main+0x8e6>
				case 8:
					gsm_cmd("AT+NETOPEN","OK", GSM_WAIT_TIME_LOW);
 800417a:	23fa      	movs	r3, #250	@ 0xfa
 800417c:	005a      	lsls	r2, r3, #1
 800417e:	4945      	ldr	r1, [pc, #276]	@ (8004294 <main+0x87c>)
 8004180:	4b4c      	ldr	r3, [pc, #304]	@ (80042b4 <main+0x89c>)
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff fa5a 	bl	800363c <gsm_cmd>
					break;
 8004188:	e0b9      	b.n	80042fe <main+0x8e6>
				case 9:
					gsm_cmd("AT+CGATT=1","OK", GSM_WAIT_TIME_LOW);
 800418a:	23fa      	movs	r3, #250	@ 0xfa
 800418c:	005a      	lsls	r2, r3, #1
 800418e:	4941      	ldr	r1, [pc, #260]	@ (8004294 <main+0x87c>)
 8004190:	4b49      	ldr	r3, [pc, #292]	@ (80042b8 <main+0x8a0>)
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff fa52 	bl	800363c <gsm_cmd>
					break;
 8004198:	e0b1      	b.n	80042fe <main+0x8e6>
				case 10:
					gsm_cmd("AT+CGACT=1,1","OK", GSM_WAIT_TIME_LOW);
 800419a:	23fa      	movs	r3, #250	@ 0xfa
 800419c:	005a      	lsls	r2, r3, #1
 800419e:	493d      	ldr	r1, [pc, #244]	@ (8004294 <main+0x87c>)
 80041a0:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <main+0x8a4>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff fa4a 	bl	800363c <gsm_cmd>
					break;
 80041a8:	e0a9      	b.n	80042fe <main+0x8e6>
				case 11:
					gsm_cmd("AT+IPADDR","OK", GSM_WAIT_TIME_MED);
 80041aa:	4a45      	ldr	r2, [pc, #276]	@ (80042c0 <main+0x8a8>)
 80041ac:	4939      	ldr	r1, [pc, #228]	@ (8004294 <main+0x87c>)
 80041ae:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <main+0x8ac>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff fa43 	bl	800363c <gsm_cmd>
					break;
 80041b6:	e0a2      	b.n	80042fe <main+0x8e6>
				case 12:
					gsm_cmd("AT+CCHOPEN=0,\"api.thingspeak.com\",443,2","CONNECT 115200", GSM_WAIT_TIME_MED);
 80041b8:	4a41      	ldr	r2, [pc, #260]	@ (80042c0 <main+0x8a8>)
 80041ba:	4943      	ldr	r1, [pc, #268]	@ (80042c8 <main+0x8b0>)
 80041bc:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <main+0x8b4>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fa3c 	bl	800363c <gsm_cmd>
					break;
 80041c4:	e09b      	b.n	80042fe <main+0x8e6>
				case 13:
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
							"HTTP/1.1\r\nHost: api.thingspeak.com\r\n", \
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 80041c6:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <main+0x830>)
 80041c8:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 80041ca:	1c18      	adds	r0, r3, #0
 80041cc:	f7fc febc 	bl	8000f48 <__aeabi_f2iz>
 80041d0:	4682      	mov	sl, r0
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 80041d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <main+0x830>)
 80041d4:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%d\r\n" \
 80041d6:	1c18      	adds	r0, r3, #0
 80041d8:	f7fc feb6 	bl	8000f48 <__aeabi_f2iz>
 80041dc:	4680      	mov	r8, r0
 80041de:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <main+0x850>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	469b      	mov	fp, r3
 80041e4:	4b3a      	ldr	r3, [pc, #232]	@ (80042d0 <main+0x8b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1c18      	adds	r0, r3, #0
 80041ea:	f7fe ff03 	bl	8002ff4 <__aeabi_f2d>
 80041ee:	0004      	movs	r4, r0
 80041f0:	000d      	movs	r5, r1
 80041f2:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <main+0x8bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fea6 	bl	8000f48 <__aeabi_f2iz>
 80041fc:	4681      	mov	r9, r0
 80041fe:	4b36      	ldr	r3, [pc, #216]	@ (80042d8 <main+0x8c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c18      	adds	r0, r3, #0
 8004204:	f7fe fef6 	bl	8002ff4 <__aeabi_f2d>
 8004208:	0002      	movs	r2, r0
 800420a:	000b      	movs	r3, r1
 800420c:	2114      	movs	r1, #20
 800420e:	187e      	adds	r6, r7, r1
 8004210:	4932      	ldr	r1, [pc, #200]	@ (80042dc <main+0x8c4>)
 8004212:	2028      	movs	r0, #40	@ 0x28
 8004214:	1838      	adds	r0, r7, r0
 8004216:	9206      	str	r2, [sp, #24]
 8004218:	9307      	str	r3, [sp, #28]
 800421a:	464b      	mov	r3, r9
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	9402      	str	r4, [sp, #8]
 8004220:	9503      	str	r5, [sp, #12]
 8004222:	465b      	mov	r3, fp
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	4643      	mov	r3, r8
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4653      	mov	r3, sl
 800422c:	0032      	movs	r2, r6
 800422e:	f006 fddb 	bl	800ade8 <siprintf>
					 * kwh
					 * temp 1
					 * temp 2
					 *
					 */
					gsm_cmd(content_string, "200 OK", GSM_WAIT_TIME_MED);
 8004232:	4a23      	ldr	r2, [pc, #140]	@ (80042c0 <main+0x8a8>)
 8004234:	492a      	ldr	r1, [pc, #168]	@ (80042e0 <main+0x8c8>)
 8004236:	2028      	movs	r0, #40	@ 0x28
 8004238:	183b      	adds	r3, r7, r0
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff f9fe 	bl	800363c <gsm_cmd>
					break;
 8004240:	e05d      	b.n	80042fe <main+0x8e6>
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	20000479 	.word	0x20000479
 8004248:	200004b4 	.word	0x200004b4
 800424c:	c2c60000 	.word	0xc2c60000
 8004250:	3fd00000 	.word	0x3fd00000
 8004254:	2000047a 	.word	0x2000047a
 8004258:	50001400 	.word	0x50001400
 800425c:	50000800 	.word	0x50000800
 8004260:	200004a4 	.word	0x200004a4
 8004264:	50000400 	.word	0x50000400
 8004268:	200004b1 	.word	0x200004b1
 800426c:	200004ac 	.word	0x200004ac
 8004270:	40900000 	.word	0x40900000
 8004274:	200004b0 	.word	0x200004b0
 8004278:	4057ae14 	.word	0x4057ae14
 800427c:	4019999a 	.word	0x4019999a
 8004280:	200004c2 	.word	0x200004c2
 8004284:	20000544 	.word	0x20000544
 8004288:	200004c8 	.word	0x200004c8
 800428c:	20000545 	.word	0x20000545
 8004290:	0800d434 	.word	0x0800d434
 8004294:	0800d1e4 	.word	0x0800d1e4
 8004298:	0800d1e8 	.word	0x0800d1e8
 800429c:	0800d1f4 	.word	0x0800d1f4
 80042a0:	0800d204 	.word	0x0800d204
 80042a4:	0800d210 	.word	0x0800d210
 80042a8:	0800d21c 	.word	0x0800d21c
 80042ac:	0800d230 	.word	0x0800d230
 80042b0:	0800d240 	.word	0x0800d240
 80042b4:	0800d250 	.word	0x0800d250
 80042b8:	0800d25c 	.word	0x0800d25c
 80042bc:	0800d268 	.word	0x0800d268
 80042c0:	00002710 	.word	0x00002710
 80042c4:	0800d278 	.word	0x0800d278
 80042c8:	0800d284 	.word	0x0800d284
 80042cc:	0800d294 	.word	0x0800d294
 80042d0:	2000020c 	.word	0x2000020c
 80042d4:	20000208 	.word	0x20000208
 80042d8:	200004a0 	.word	0x200004a0
 80042dc:	0800d2bc 	.word	0x0800d2bc
 80042e0:	0800d338 	.word	0x0800d338
				case 14:
					gsm_cmd("AT+CIPCLOSE=0", "OK", GSM_WAIT_TIME_LOW);
 80042e4:	23fa      	movs	r3, #250	@ 0xfa
 80042e6:	005a      	lsls	r2, r3, #1
 80042e8:	4916      	ldr	r1, [pc, #88]	@ (8004344 <main+0x92c>)
 80042ea:	4b17      	ldr	r3, [pc, #92]	@ (8004348 <main+0x930>)
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7ff f9a5 	bl	800363c <gsm_cmd>
					break;
 80042f2:	e004      	b.n	80042fe <main+0x8e6>
				default:
				}
			}
			else gsm_cmd_step = 0;
 80042f4:	4b15      	ldr	r3, [pc, #84]	@ (800434c <main+0x934>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e000      	b.n	80042fe <main+0x8e6>
					break;
 80042fc:	46c0      	nop			@ (mov r8, r8)
		}
		if(sec % 30 == 0 && sec != 0) {
 80042fe:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <main+0x938>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	211e      	movs	r1, #30
 8004304:	0018      	movs	r0, r3
 8004306:	f7fb ff9d 	bl	8000244 <__aeabi_uidivmod>
 800430a:	000b      	movs	r3, r1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d112      	bne.n	8004338 <main+0x920>
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <main+0x938>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <main+0x920>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 800431a:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <main+0x93c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <main+0x928>
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <main+0x940>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <main+0x928>
				upload_running = 1; /* start uploading */
 800432a:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <main+0x93c>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
				gsm_cmd_step = 0; /* with the first command */
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <main+0x934>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004336:	e003      	b.n	8004340 <main+0x928>
			}
		} else upload_flag = 0;
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <main+0x940>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e457      	b.n	8003bf0 <main+0x1d8>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004340:	46c0      	nop			@ (mov r8, r8)
		if(kwh_update_flag == 1) {
 8004342:	e455      	b.n	8003bf0 <main+0x1d8>
 8004344:	0800d1e4 	.word	0x0800d1e4
 8004348:	0800d340 	.word	0x0800d340
 800434c:	200004c8 	.word	0x200004c8
 8004350:	20000480 	.word	0x20000480
 8004354:	20000544 	.word	0x20000544
 8004358:	20000545 	.word	0x20000545

0800435c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b093      	sub	sp, #76	@ 0x4c
 8004360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004362:	2414      	movs	r4, #20
 8004364:	193b      	adds	r3, r7, r4
 8004366:	0018      	movs	r0, r3
 8004368:	2334      	movs	r3, #52	@ 0x34
 800436a:	001a      	movs	r2, r3
 800436c:	2100      	movs	r1, #0
 800436e:	f006 fda9 	bl	800aec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	0018      	movs	r0, r3
 8004376:	2310      	movs	r3, #16
 8004378:	001a      	movs	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	f006 fda2 	bl	800aec4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	0018      	movs	r0, r3
 8004386:	f003 fa1f 	bl	80077c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800438a:	193b      	adds	r3, r7, r4
 800438c:	2202      	movs	r2, #2
 800438e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004390:	193b      	adds	r3, r7, r4
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	0052      	lsls	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004398:	0021      	movs	r1, r4
 800439a:	187b      	adds	r3, r7, r1
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	2240      	movs	r2, #64	@ 0x40
 80043a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	2202      	movs	r2, #2
 80043aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	2202      	movs	r2, #2
 80043b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	2200      	movs	r2, #0
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	220c      	movs	r2, #12
 80043bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	22b0      	movs	r2, #176	@ 0xb0
 80043c2:	0352      	lsls	r2, r2, #13
 80043c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	22a0      	movs	r2, #160	@ 0xa0
 80043ca:	0612      	lsls	r2, r2, #24
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	0018      	movs	r0, r3
 80043d2:	f003 fa45 	bl	8007860 <HAL_RCC_OscConfig>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80043da:	f000 facd 	bl	8004978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	2202      	movs	r2, #2
 80043e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	2200      	movs	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	2101      	movs	r1, #1
 80043fa:	0018      	movs	r0, r3
 80043fc:	f003 fd40 	bl	8007e80 <HAL_RCC_ClockConfig>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004404:	f000 fab8 	bl	8004978 <Error_Handler>
  }
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b013      	add	sp, #76	@ 0x4c
 800440e:	bd90      	pop	{r4, r7, pc}

08004410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	0018      	movs	r0, r3
 800441a:	230c      	movs	r3, #12
 800441c:	001a      	movs	r2, r3
 800441e:	2100      	movs	r1, #0
 8004420:	f006 fd50 	bl	800aec4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004424:	4b3e      	ldr	r3, [pc, #248]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004426:	4a3f      	ldr	r2, [pc, #252]	@ (8004524 <MX_ADC1_Init+0x114>)
 8004428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800442a:	4b3d      	ldr	r3, [pc, #244]	@ (8004520 <MX_ADC1_Init+0x110>)
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	0352      	lsls	r2, r2, #13
 8004430:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004432:	4b3b      	ldr	r3, [pc, #236]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004438:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <MX_ADC1_Init+0x110>)
 800443a:	2200      	movs	r2, #0
 800443c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800443e:	4b38      	ldr	r3, [pc, #224]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	0392      	lsls	r2, r2, #14
 8004444:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004446:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004448:	2208      	movs	r2, #8
 800444a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800444c:	4b34      	ldr	r3, [pc, #208]	@ (8004520 <MX_ADC1_Init+0x110>)
 800444e:	2200      	movs	r2, #0
 8004450:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004452:	4b33      	ldr	r3, [pc, #204]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004454:	2200      	movs	r2, #0
 8004456:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004458:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <MX_ADC1_Init+0x110>)
 800445a:	2201      	movs	r2, #1
 800445c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800445e:	4b30      	ldr	r3, [pc, #192]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004460:	2203      	movs	r2, #3
 8004462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004464:	4b2e      	ldr	r3, [pc, #184]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004466:	2220      	movs	r2, #32
 8004468:	2100      	movs	r1, #0
 800446a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800446c:	4b2c      	ldr	r3, [pc, #176]	@ (8004520 <MX_ADC1_Init+0x110>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004472:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004474:	2200      	movs	r2, #0
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004478:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <MX_ADC1_Init+0x110>)
 800447a:	222c      	movs	r2, #44	@ 0x2c
 800447c:	2101      	movs	r1, #1
 800447e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004480:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004486:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004488:	2200      	movs	r2, #0
 800448a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800448c:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <MX_ADC1_Init+0x110>)
 800448e:	2200      	movs	r2, #0
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004492:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004494:	223c      	movs	r2, #60	@ 0x3c
 8004496:	2100      	movs	r1, #0
 8004498:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <MX_ADC1_Init+0x110>)
 800449c:	2200      	movs	r2, #0
 800449e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <MX_ADC1_Init+0x110>)
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 ffec 	bl	8005480 <HAL_ADC_Init>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d001      	beq.n	80044b0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80044ac:	f000 fa64 	bl	8004978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <MX_ADC1_Init+0x118>)
 80044b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044c2:	1d3a      	adds	r2, r7, #4
 80044c4:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <MX_ADC1_Init+0x110>)
 80044c6:	0011      	movs	r1, r2
 80044c8:	0018      	movs	r0, r3
 80044ca:	f001 faa9 	bl	8005a20 <HAL_ADC_ConfigChannel>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d001      	beq.n	80044d6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80044d2:	f000 fa51 	bl	8004978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <MX_ADC1_Init+0x11c>)
 80044da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	2204      	movs	r2, #4
 80044e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044e2:	1d3a      	adds	r2, r7, #4
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <MX_ADC1_Init+0x110>)
 80044e6:	0011      	movs	r1, r2
 80044e8:	0018      	movs	r0, r3
 80044ea:	f001 fa99 	bl	8005a20 <HAL_ADC_ConfigChannel>
 80044ee:	1e03      	subs	r3, r0, #0
 80044f0:	d001      	beq.n	80044f6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80044f2:	f000 fa41 	bl	8004978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80044f6:	1d3b      	adds	r3, r7, #4
 80044f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004530 <MX_ADC1_Init+0x120>)
 80044fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	2208      	movs	r2, #8
 8004500:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004502:	1d3a      	adds	r2, r7, #4
 8004504:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <MX_ADC1_Init+0x110>)
 8004506:	0011      	movs	r1, r2
 8004508:	0018      	movs	r0, r3
 800450a:	f001 fa89 	bl	8005a20 <HAL_ADC_ConfigChannel>
 800450e:	1e03      	subs	r3, r0, #0
 8004510:	d001      	beq.n	8004516 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8004512:	f000 fa31 	bl	8004978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	20000214 	.word	0x20000214
 8004524:	40012400 	.word	0x40012400
 8004528:	08000004 	.word	0x08000004
 800452c:	0c000008 	.word	0x0c000008
 8004530:	b4002000 	.word	0xb4002000

08004534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004538:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <MX_I2C1_Init+0x74>)
 800453a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <MX_I2C1_Init+0x78>)
 800453c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004540:	4a1b      	ldr	r2, [pc, #108]	@ (80045b0 <MX_I2C1_Init+0x7c>)
 8004542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004544:	4b18      	ldr	r3, [pc, #96]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800454a:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <MX_I2C1_Init+0x74>)
 800454c:	2201      	movs	r2, #1
 800454e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004550:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004556:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004558:	2200      	movs	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <MX_I2C1_Init+0x74>)
 800455e:	2200      	movs	r2, #0
 8004560:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004562:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004564:	2200      	movs	r2, #0
 8004566:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <MX_I2C1_Init+0x74>)
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004570:	0018      	movs	r0, r3
 8004572:	f002 f94f 	bl	8006814 <HAL_I2C_Init>
 8004576:	1e03      	subs	r3, r0, #0
 8004578:	d001      	beq.n	800457e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800457a:	f000 f9fd 	bl	8004978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800457e:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004580:	2100      	movs	r1, #0
 8004582:	0018      	movs	r0, r3
 8004584:	f003 f888 	bl	8007698 <HAL_I2CEx_ConfigAnalogFilter>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800458c:	f000 f9f4 	bl	8004978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <MX_I2C1_Init+0x74>)
 8004592:	2100      	movs	r1, #0
 8004594:	0018      	movs	r0, r3
 8004596:	f003 f8cb 	bl	8007730 <HAL_I2CEx_ConfigDigitalFilter>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d001      	beq.n	80045a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800459e:	f000 f9eb 	bl	8004978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200002d4 	.word	0x200002d4
 80045ac:	40005400 	.word	0x40005400
 80045b0:	0060112f 	.word	0x0060112f

080045b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80045b8:	4b1c      	ldr	r3, [pc, #112]	@ (800462c <MX_SPI2_Init+0x78>)
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <MX_SPI2_Init+0x7c>)
 80045bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045be:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <MX_SPI2_Init+0x78>)
 80045c0:	2282      	movs	r2, #130	@ 0x82
 80045c2:	0052      	lsls	r2, r2, #1
 80045c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80045c6:	4b19      	ldr	r3, [pc, #100]	@ (800462c <MX_SPI2_Init+0x78>)
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	00d2      	lsls	r2, r2, #3
 80045cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045ce:	4b17      	ldr	r3, [pc, #92]	@ (800462c <MX_SPI2_Init+0x78>)
 80045d0:	22e0      	movs	r2, #224	@ 0xe0
 80045d2:	00d2      	lsls	r2, r2, #3
 80045d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <MX_SPI2_Init+0x78>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045dc:	4b13      	ldr	r3, [pc, #76]	@ (800462c <MX_SPI2_Init+0x78>)
 80045de:	2200      	movs	r2, #0
 80045e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <MX_SPI2_Init+0x78>)
 80045e4:	2280      	movs	r2, #128	@ 0x80
 80045e6:	0092      	lsls	r2, r2, #2
 80045e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ea:	4b10      	ldr	r3, [pc, #64]	@ (800462c <MX_SPI2_Init+0x78>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <MX_SPI2_Init+0x78>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <MX_SPI2_Init+0x78>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <MX_SPI2_Init+0x78>)
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <MX_SPI2_Init+0x78>)
 8004604:	2207      	movs	r2, #7
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004608:	4b08      	ldr	r3, [pc, #32]	@ (800462c <MX_SPI2_Init+0x78>)
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <MX_SPI2_Init+0x78>)
 8004610:	2208      	movs	r2, #8
 8004612:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <MX_SPI2_Init+0x78>)
 8004616:	0018      	movs	r0, r3
 8004618:	f003 ff10 	bl	800843c <HAL_SPI_Init>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d001      	beq.n	8004624 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004620:	f000 f9aa 	bl	8004978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004624:	46c0      	nop			@ (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	20000328 	.word	0x20000328
 8004630:	40003800 	.word	0x40003800

08004634 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004638:	4b0f      	ldr	r3, [pc, #60]	@ (8004678 <MX_TIM16_Init+0x44>)
 800463a:	4a10      	ldr	r2, [pc, #64]	@ (800467c <MX_TIM16_Init+0x48>)
 800463c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <MX_TIM16_Init+0x44>)
 8004640:	2220      	movs	r2, #32
 8004642:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004644:	4b0c      	ldr	r3, [pc, #48]	@ (8004678 <MX_TIM16_Init+0x44>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <MX_TIM16_Init+0x44>)
 800464c:	2264      	movs	r2, #100	@ 0x64
 800464e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004650:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <MX_TIM16_Init+0x44>)
 8004652:	2200      	movs	r2, #0
 8004654:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <MX_TIM16_Init+0x44>)
 8004658:	2200      	movs	r2, #0
 800465a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <MX_TIM16_Init+0x44>)
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <MX_TIM16_Init+0x44>)
 8004664:	0018      	movs	r0, r3
 8004666:	f004 fca9 	bl	8008fbc <HAL_TIM_Base_Init>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800466e:	f000 f983 	bl	8004978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000038c 	.word	0x2000038c
 800467c:	40014400 	.word	0x40014400

08004680 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004684:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 8004686:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <MX_USART3_UART_Init+0x64>)
 8004688:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 800468c:	22e1      	movs	r2, #225	@ 0xe1
 800468e:	0252      	lsls	r2, r2, #9
 8004690:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004692:	4b13      	ldr	r3, [pc, #76]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 800469a:	2200      	movs	r2, #0
 800469c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046a4:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046a6:	220c      	movs	r2, #12
 80046a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046c2:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <MX_USART3_UART_Init+0x60>)
 80046ca:	0018      	movs	r0, r3
 80046cc:	f004 fee8 	bl	80094a0 <HAL_UART_Init>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d001      	beq.n	80046d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80046d4:	f000 f950 	bl	8004978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	200003d8 	.word	0x200003d8
 80046e4:	40004800 	.word	0x40004800

080046e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <MX_DMA_Init+0x38>)
 80046f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <MX_DMA_Init+0x38>)
 80046f4:	2101      	movs	r1, #1
 80046f6:	430a      	orrs	r2, r1
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <MX_DMA_Init+0x38>)
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2009      	movs	r0, #9
 800470c:	f001 fc2c 	bl	8005f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004710:	2009      	movs	r0, #9
 8004712:	f001 fc3e 	bl	8005f92 <HAL_NVIC_EnableIRQ>

}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	40021000 	.word	0x40021000

08004724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b08b      	sub	sp, #44	@ 0x2c
 8004728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472a:	2414      	movs	r4, #20
 800472c:	193b      	adds	r3, r7, r4
 800472e:	0018      	movs	r0, r3
 8004730:	2314      	movs	r3, #20
 8004732:	001a      	movs	r2, r3
 8004734:	2100      	movs	r1, #0
 8004736:	f006 fbc5 	bl	800aec4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800473a:	4b8a      	ldr	r3, [pc, #552]	@ (8004964 <MX_GPIO_Init+0x240>)
 800473c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800473e:	4b89      	ldr	r3, [pc, #548]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004740:	2104      	movs	r1, #4
 8004742:	430a      	orrs	r2, r1
 8004744:	635a      	str	r2, [r3, #52]	@ 0x34
 8004746:	4b87      	ldr	r3, [pc, #540]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474a:	2204      	movs	r2, #4
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004752:	4b84      	ldr	r3, [pc, #528]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004756:	4b83      	ldr	r3, [pc, #524]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004758:	2120      	movs	r1, #32
 800475a:	430a      	orrs	r2, r1
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
 800475e:	4b81      	ldr	r3, [pc, #516]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	2220      	movs	r2, #32
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800476a:	4b7e      	ldr	r3, [pc, #504]	@ (8004964 <MX_GPIO_Init+0x240>)
 800476c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476e:	4b7d      	ldr	r3, [pc, #500]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004770:	2101      	movs	r1, #1
 8004772:	430a      	orrs	r2, r1
 8004774:	635a      	str	r2, [r3, #52]	@ 0x34
 8004776:	4b7b      	ldr	r3, [pc, #492]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004782:	4b78      	ldr	r3, [pc, #480]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004786:	4b77      	ldr	r3, [pc, #476]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004788:	2102      	movs	r1, #2
 800478a:	430a      	orrs	r2, r1
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34
 800478e:	4b75      	ldr	r3, [pc, #468]	@ (8004964 <MX_GPIO_Init+0x240>)
 8004790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004792:	2202      	movs	r2, #2
 8004794:	4013      	ands	r3, r2
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800479a:	4b72      	ldr	r3, [pc, #456]	@ (8004964 <MX_GPIO_Init+0x240>)
 800479c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479e:	4b71      	ldr	r3, [pc, #452]	@ (8004964 <MX_GPIO_Init+0x240>)
 80047a0:	2108      	movs	r1, #8
 80047a2:	430a      	orrs	r2, r1
 80047a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004964 <MX_GPIO_Init+0x240>)
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	2208      	movs	r2, #8
 80047ac:	4013      	ands	r3, r2
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80047b2:	23e0      	movs	r3, #224	@ 0xe0
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	486c      	ldr	r0, [pc, #432]	@ (8004968 <MX_GPIO_Init+0x244>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	0019      	movs	r1, r3
 80047bc:	f001 ffd9 	bl	8006772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 80047c0:	4b6a      	ldr	r3, [pc, #424]	@ (800496c <MX_GPIO_Init+0x248>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	2103      	movs	r1, #3
 80047c6:	0018      	movs	r0, r3
 80047c8:	f001 ffd3 	bl	8006772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 80047cc:	23e0      	movs	r3, #224	@ 0xe0
 80047ce:	0059      	lsls	r1, r3, #1
 80047d0:	23a0      	movs	r3, #160	@ 0xa0
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	2200      	movs	r2, #0
 80047d6:	0018      	movs	r0, r3
 80047d8:	f001 ffcb 	bl	8006772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC2_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 80047dc:	2390      	movs	r3, #144	@ 0x90
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	4863      	ldr	r0, [pc, #396]	@ (8004970 <MX_GPIO_Init+0x24c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	0019      	movs	r1, r3
 80047e6:	f001 ffc4 	bl	8006772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80047ea:	4b62      	ldr	r3, [pc, #392]	@ (8004974 <MX_GPIO_Init+0x250>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	2108      	movs	r1, #8
 80047f0:	0018      	movs	r0, r3
 80047f2:	f001 ffbe 	bl	8006772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	22e0      	movs	r2, #224	@ 0xe0
 80047fa:	0212      	lsls	r2, r2, #8
 80047fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fe:	193b      	adds	r3, r7, r4
 8004800:	2201      	movs	r2, #1
 8004802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	193b      	adds	r3, r7, r4
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	193b      	adds	r3, r7, r4
 800480c:	2200      	movs	r2, #0
 800480e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004810:	193b      	adds	r3, r7, r4
 8004812:	4a55      	ldr	r2, [pc, #340]	@ (8004968 <MX_GPIO_Init+0x244>)
 8004814:	0019      	movs	r1, r3
 8004816:	0010      	movs	r0, r2
 8004818:	f001 fe2a 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 800481c:	193b      	adds	r3, r7, r4
 800481e:	2203      	movs	r2, #3
 8004820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004822:	193b      	adds	r3, r7, r4
 8004824:	2201      	movs	r2, #1
 8004826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	193b      	adds	r3, r7, r4
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	193b      	adds	r3, r7, r4
 8004830:	2200      	movs	r2, #0
 8004832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004834:	193b      	adds	r3, r7, r4
 8004836:	4a4d      	ldr	r2, [pc, #308]	@ (800496c <MX_GPIO_Init+0x248>)
 8004838:	0019      	movs	r1, r3
 800483a:	0010      	movs	r0, r2
 800483c:	f001 fe18 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8004840:	193b      	adds	r3, r7, r4
 8004842:	2210      	movs	r2, #16
 8004844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004846:	193b      	adds	r3, r7, r4
 8004848:	2284      	movs	r2, #132	@ 0x84
 800484a:	0392      	lsls	r2, r2, #14
 800484c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800484e:	193b      	adds	r3, r7, r4
 8004850:	2201      	movs	r2, #1
 8004852:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8004854:	193a      	adds	r2, r7, r4
 8004856:	23a0      	movs	r3, #160	@ 0xa0
 8004858:	05db      	lsls	r3, r3, #23
 800485a:	0011      	movs	r1, r2
 800485c:	0018      	movs	r0, r3
 800485e:	f001 fe07 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 8004862:	0021      	movs	r1, r4
 8004864:	187b      	adds	r3, r7, r1
 8004866:	22e0      	movs	r2, #224	@ 0xe0
 8004868:	0052      	lsls	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486c:	000c      	movs	r4, r1
 800486e:	193b      	adds	r3, r7, r4
 8004870:	2201      	movs	r2, #1
 8004872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	193b      	adds	r3, r7, r4
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487a:	193b      	adds	r3, r7, r4
 800487c:	2200      	movs	r2, #0
 800487e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004880:	193a      	adds	r2, r7, r4
 8004882:	23a0      	movs	r3, #160	@ 0xa0
 8004884:	05db      	lsls	r3, r3, #23
 8004886:	0011      	movs	r1, r2
 8004888:	0018      	movs	r0, r3
 800488a:	f001 fdf1 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC2_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC2_Pin|CS_TC5_Pin;
 800488e:	0021      	movs	r1, r4
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2290      	movs	r2, #144	@ 0x90
 8004894:	0212      	lsls	r2, r2, #8
 8004896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004898:	000c      	movs	r4, r1
 800489a:	193b      	adds	r3, r7, r4
 800489c:	2201      	movs	r2, #1
 800489e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	193b      	adds	r3, r7, r4
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	2200      	movs	r2, #0
 80048aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	4a30      	ldr	r2, [pc, #192]	@ (8004970 <MX_GPIO_Init+0x24c>)
 80048b0:	0019      	movs	r1, r3
 80048b2:	0010      	movs	r0, r2
 80048b4:	f001 fddc 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 80048b8:	0021      	movs	r1, r4
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	2240      	movs	r2, #64	@ 0x40
 80048be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	2284      	movs	r2, #132	@ 0x84
 80048c4:	0392      	lsls	r2, r2, #14
 80048c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c8:	000c      	movs	r4, r1
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 80048d0:	193b      	adds	r3, r7, r4
 80048d2:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <MX_GPIO_Init+0x244>)
 80048d4:	0019      	movs	r1, r3
 80048d6:	0010      	movs	r0, r2
 80048d8:	f001 fdca 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	2208      	movs	r2, #8
 80048e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	2201      	movs	r2, #1
 80048e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	193b      	adds	r3, r7, r4
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	2200      	movs	r2, #0
 80048f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80048f4:	193b      	adds	r3, r7, r4
 80048f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004974 <MX_GPIO_Init+0x250>)
 80048f8:	0019      	movs	r1, r3
 80048fa:	0010      	movs	r0, r2
 80048fc:	f001 fdb8 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004900:	193b      	adds	r3, r7, r4
 8004902:	2208      	movs	r2, #8
 8004904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004906:	193b      	adds	r3, r7, r4
 8004908:	2202      	movs	r2, #2
 800490a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	193b      	adds	r3, r7, r4
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	193b      	adds	r3, r7, r4
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004918:	193b      	adds	r3, r7, r4
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491e:	193b      	adds	r3, r7, r4
 8004920:	4a13      	ldr	r2, [pc, #76]	@ (8004970 <MX_GPIO_Init+0x24c>)
 8004922:	0019      	movs	r1, r3
 8004924:	0010      	movs	r0, r2
 8004926:	f001 fda3 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 800492a:	0021      	movs	r1, r4
 800492c:	187b      	adds	r3, r7, r1
 800492e:	22e0      	movs	r2, #224	@ 0xe0
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004940:	187b      	adds	r3, r7, r1
 8004942:	4a0b      	ldr	r2, [pc, #44]	@ (8004970 <MX_GPIO_Init+0x24c>)
 8004944:	0019      	movs	r1, r3
 8004946:	0010      	movs	r0, r2
 8004948:	f001 fd92 	bl	8006470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	2007      	movs	r0, #7
 8004952:	f001 fb09 	bl	8005f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004956:	2007      	movs	r0, #7
 8004958:	f001 fb1b 	bl	8005f92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b00b      	add	sp, #44	@ 0x2c
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	50000800 	.word	0x50000800
 800496c:	50001400 	.word	0x50001400
 8004970:	50000400 	.word	0x50000400
 8004974:	50000c00 	.word	0x50000c00

08004978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800497c:	b672      	cpsid	i
}
 800497e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	e7fd      	b.n	8004980 <Error_Handler+0x8>

08004984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498a:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <HAL_MspInit+0x44>)
 800498c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <HAL_MspInit+0x44>)
 8004990:	2101      	movs	r1, #1
 8004992:	430a      	orrs	r2, r1
 8004994:	641a      	str	r2, [r3, #64]	@ 0x40
 8004996:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <HAL_MspInit+0x44>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_MspInit+0x44>)
 80049a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a6:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <HAL_MspInit+0x44>)
 80049a8:	2180      	movs	r1, #128	@ 0x80
 80049aa:	0549      	lsls	r1, r1, #21
 80049ac:	430a      	orrs	r2, r1
 80049ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_MspInit+0x44>)
 80049b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	055b      	lsls	r3, r3, #21
 80049b8:	4013      	ands	r3, r2
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b091      	sub	sp, #68	@ 0x44
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d4:	232c      	movs	r3, #44	@ 0x2c
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	0018      	movs	r0, r3
 80049da:	2314      	movs	r3, #20
 80049dc:	001a      	movs	r2, r3
 80049de:	2100      	movs	r1, #0
 80049e0:	f006 fa70 	bl	800aec4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049e4:	2410      	movs	r4, #16
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	0018      	movs	r0, r3
 80049ea:	231c      	movs	r3, #28
 80049ec:	001a      	movs	r2, r3
 80049ee:	2100      	movs	r1, #0
 80049f0:	f006 fa68 	bl	800aec4 <memset>
  if(hadc->Instance==ADC1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae4 <HAL_ADC_MspInit+0x118>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d16d      	bne.n	8004ada <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80049fe:	193b      	adds	r3, r7, r4
 8004a00:	2280      	movs	r2, #128	@ 0x80
 8004a02:	01d2      	lsls	r2, r2, #7
 8004a04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	2280      	movs	r2, #128	@ 0x80
 8004a0a:	05d2      	lsls	r2, r2, #23
 8004a0c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a0e:	193b      	adds	r3, r7, r4
 8004a10:	0018      	movs	r0, r3
 8004a12:	f003 fbdf 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8004a16:	1e03      	subs	r3, r0, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004a1a:	f7ff ffad 	bl	8004978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004a1e:	4b32      	ldr	r3, [pc, #200]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a22:	4b31      	ldr	r3, [pc, #196]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a24:	2180      	movs	r1, #128	@ 0x80
 8004a26:	0349      	lsls	r1, r1, #13
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	035b      	lsls	r3, r3, #13
 8004a34:	4013      	ands	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a46:	4b28      	ldr	r3, [pc, #160]	@ (8004ae8 <HAL_ADC_MspInit+0x11c>)
 8004a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a52:	212c      	movs	r1, #44	@ 0x2c
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	220c      	movs	r2, #12
 8004a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a66:	187a      	adds	r2, r7, r1
 8004a68:	23a0      	movs	r3, #160	@ 0xa0
 8004a6a:	05db      	lsls	r3, r3, #23
 8004a6c:	0011      	movs	r1, r2
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f001 fcfe 	bl	8006470 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a76:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_ADC_MspInit+0x124>)
 8004a78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a7c:	2205      	movs	r2, #5
 8004a7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a8e:	2280      	movs	r2, #128	@ 0x80
 8004a90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a92:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a94:	2280      	movs	r2, #128	@ 0x80
 8004a96:	0052      	lsls	r2, r2, #1
 8004a98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004a9c:	2280      	movs	r2, #128	@ 0x80
 8004a9e:	00d2      	lsls	r2, r2, #3
 8004aa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004aa8:	4b10      	ldr	r3, [pc, #64]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f001 fa8b 	bl	8005fcc <HAL_DMA_Init>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8004aba:	f7ff ff5d 	bl	8004978 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004ac2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_ADC_MspInit+0x120>)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2100      	movs	r1, #0
 8004ace:	200c      	movs	r0, #12
 8004ad0:	f001 fa4a 	bl	8005f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004ad4:	200c      	movs	r0, #12
 8004ad6:	f001 fa5c 	bl	8005f92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b011      	add	sp, #68	@ 0x44
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	40012400 	.word	0x40012400
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	20000278 	.word	0x20000278
 8004af0:	40020008 	.word	0x40020008

08004af4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b091      	sub	sp, #68	@ 0x44
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	232c      	movs	r3, #44	@ 0x2c
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	0018      	movs	r0, r3
 8004b02:	2314      	movs	r3, #20
 8004b04:	001a      	movs	r2, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	f006 f9dc 	bl	800aec4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b0c:	2410      	movs	r4, #16
 8004b0e:	193b      	adds	r3, r7, r4
 8004b10:	0018      	movs	r0, r3
 8004b12:	231c      	movs	r3, #28
 8004b14:	001a      	movs	r2, r3
 8004b16:	2100      	movs	r1, #0
 8004b18:	f006 f9d4 	bl	800aec4 <memset>
  if(hi2c->Instance==I2C1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a23      	ldr	r2, [pc, #140]	@ (8004bb0 <HAL_I2C_MspInit+0xbc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d13f      	bne.n	8004ba6 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	2220      	movs	r2, #32
 8004b2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b2c:	193b      	adds	r3, r7, r4
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b32:	193b      	adds	r3, r7, r4
 8004b34:	0018      	movs	r0, r3
 8004b36:	f003 fb4d 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b3e:	f7ff ff1b 	bl	8004978 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b42:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b46:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b48:	2101      	movs	r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b4e:	4b19      	ldr	r3, [pc, #100]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b5a:	212c      	movs	r1, #44	@ 0x2c
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	22c0      	movs	r2, #192	@ 0xc0
 8004b60:	00d2      	lsls	r2, r2, #3
 8004b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	2212      	movs	r2, #18
 8004b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	187b      	adds	r3, r7, r1
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	2200      	movs	r2, #0
 8004b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	2206      	movs	r2, #6
 8004b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7c:	187a      	adds	r2, r7, r1
 8004b7e:	23a0      	movs	r3, #160	@ 0xa0
 8004b80:	05db      	lsls	r3, r3, #23
 8004b82:	0011      	movs	r1, r2
 8004b84:	0018      	movs	r0, r3
 8004b86:	f001 fc73 	bl	8006470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b8e:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b90:	2180      	movs	r1, #128	@ 0x80
 8004b92:	0389      	lsls	r1, r1, #14
 8004b94:	430a      	orrs	r2, r1
 8004b96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <HAL_I2C_MspInit+0xc0>)
 8004b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	039b      	lsls	r3, r3, #14
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b011      	add	sp, #68	@ 0x44
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	40005400 	.word	0x40005400
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b08b      	sub	sp, #44	@ 0x2c
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc0:	2414      	movs	r4, #20
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	2314      	movs	r3, #20
 8004bc8:	001a      	movs	r2, r3
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f006 f97a 	bl	800aec4 <memset>
  if(hspi->Instance==SPI2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <HAL_SPI_MspInit+0xb8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d145      	bne.n	8004c66 <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bda:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bde:	4b25      	ldr	r3, [pc, #148]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004be0:	2180      	movs	r1, #128	@ 0x80
 8004be2:	01c9      	lsls	r1, r1, #7
 8004be4:	430a      	orrs	r2, r1
 8004be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004be8:	4b22      	ldr	r3, [pc, #136]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	01db      	lsls	r3, r3, #7
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c02:	4b1c      	ldr	r3, [pc, #112]	@ (8004c74 <HAL_SPI_MspInit+0xbc>)
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c0e:	193b      	adds	r3, r7, r4
 8004c10:	2204      	movs	r2, #4
 8004c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	193b      	adds	r3, r7, r4
 8004c16:	2202      	movs	r2, #2
 8004c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	2201      	movs	r2, #1
 8004c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2c:	193b      	adds	r3, r7, r4
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <HAL_SPI_MspInit+0xc0>)
 8004c30:	0019      	movs	r1, r3
 8004c32:	0010      	movs	r0, r2
 8004c34:	f001 fc1c 	bl	8006470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c38:	0021      	movs	r1, r4
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	2280      	movs	r2, #128	@ 0x80
 8004c3e:	00d2      	lsls	r2, r2, #3
 8004c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	2202      	movs	r2, #2
 8004c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	2200      	movs	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	2205      	movs	r2, #5
 8004c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	4a06      	ldr	r2, [pc, #24]	@ (8004c78 <HAL_SPI_MspInit+0xc0>)
 8004c5e:	0019      	movs	r1, r3
 8004c60:	0010      	movs	r0, r2
 8004c62:	f001 fc05 	bl	8006470 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b00b      	add	sp, #44	@ 0x2c
 8004c6c:	bd90      	pop	{r4, r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	40003800 	.word	0x40003800
 8004c74:	40021000 	.word	0x40021000
 8004c78:	50000400 	.word	0x50000400

08004c7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc4 <HAL_TIM_Base_MspInit+0x48>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d115      	bne.n	8004cba <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c94:	2180      	movs	r1, #128	@ 0x80
 8004c96:	0289      	lsls	r1, r1, #10
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ca0:	2380      	movs	r3, #128	@ 0x80
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	2015      	movs	r0, #21
 8004cb0:	f001 f95a 	bl	8005f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004cb4:	2015      	movs	r0, #21
 8004cb6:	f001 f96c 	bl	8005f92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40021000 	.word	0x40021000

08004ccc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b08b      	sub	sp, #44	@ 0x2c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd4:	2414      	movs	r4, #20
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	0018      	movs	r0, r3
 8004cda:	2314      	movs	r3, #20
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f006 f8f0 	bl	800aec4 <memset>
  if(huart->Instance==USART3)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d9c <HAL_UART_MspInit+0xd0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d151      	bne.n	8004d92 <HAL_UART_MspInit+0xc6>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cee:	4b2c      	ldr	r3, [pc, #176]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	02c9      	lsls	r1, r1, #11
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cfc:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	02db      	lsls	r3, r3, #11
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b25      	ldr	r3, [pc, #148]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	4b24      	ldr	r3, [pc, #144]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d10:	2101      	movs	r1, #1
 8004d12:	430a      	orrs	r2, r1
 8004d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d16:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d22:	4b1f      	ldr	r3, [pc, #124]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d26:	4b1e      	ldr	r3, [pc, #120]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d28:	2102      	movs	r1, #2
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <HAL_UART_MspInit+0xd4>)
 8004d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d32:	2202      	movs	r2, #2
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	193b      	adds	r3, r7, r4
 8004d42:	2202      	movs	r2, #2
 8004d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004d52:	193b      	adds	r3, r7, r4
 8004d54:	2204      	movs	r2, #4
 8004d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8004d58:	193a      	adds	r2, r7, r4
 8004d5a:	23a0      	movs	r3, #160	@ 0xa0
 8004d5c:	05db      	lsls	r3, r3, #23
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f001 fb85 	bl	8006470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8004d66:	0021      	movs	r1, r4
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	2202      	movs	r2, #2
 8004d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	2200      	movs	r2, #0
 8004d78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	2204      	movs	r2, #4
 8004d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	4a06      	ldr	r2, [pc, #24]	@ (8004da4 <HAL_UART_MspInit+0xd8>)
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	0010      	movs	r0, r2
 8004d8e:	f001 fb6f 	bl	8006470 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b00b      	add	sp, #44	@ 0x2c
 8004d98:	bd90      	pop	{r4, r7, pc}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	40004800 	.word	0x40004800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	50000400 	.word	0x50000400

08004da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	e7fd      	b.n	8004dac <NMI_Handler+0x4>

08004db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004db4:	46c0      	nop			@ (mov r8, r8)
 8004db6:	e7fd      	b.n	8004db4 <HardFault_Handler+0x4>

08004db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dd0:	f000 f9fa 	bl	80051c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 8004dde:	2010      	movs	r0, #16
 8004de0:	f001 fce4 	bl	80067ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8004de4:	2040      	movs	r0, #64	@ 0x40
 8004de6:	f001 fce1 	bl	80067ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <DMA1_Channel1_IRQHandler+0x14>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f001 f9f8 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	20000278 	.word	0x20000278

08004e08 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <ADC1_IRQHandler+0x14>)
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 fcde 	bl	80057d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	20000214 	.word	0x20000214

08004e20 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <TIM16_IRQHandler+0x14>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f004 f976 	bl	8009118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	2000038c 	.word	0x2000038c

08004e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  return 1;
 8004e3c:	2301      	movs	r3, #1
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_kill>:

int _kill(int pid, int sig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e4e:	f006 f8a9 	bl	800afa4 <__errno>
 8004e52:	0003      	movs	r3, r0
 8004e54:	2216      	movs	r2, #22
 8004e56:	601a      	str	r2, [r3, #0]
  return -1;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	425b      	negs	r3, r3
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_exit>:

void _exit (int status)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	425a      	negs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7ff ffe5 	bl	8004e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	e7fd      	b.n	8004e7a <_exit+0x16>

08004e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e00a      	b.n	8004ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e90:	e000      	b.n	8004e94 <_read+0x16>
 8004e92:	bf00      	nop
 8004e94:	0001      	movs	r1, r0
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	60ba      	str	r2, [r7, #8]
 8004e9c:	b2ca      	uxtb	r2, r1
 8004e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	dbf0      	blt.n	8004e90 <_read+0x12>
  }

  return len;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e009      	b.n	8004ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	60ba      	str	r2, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	e000      	b.n	8004ed8 <_write+0x20>
 8004ed6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	dbf1      	blt.n	8004eca <_write+0x12>
  }
  return len;
 8004ee6:	687b      	ldr	r3, [r7, #4]
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b006      	add	sp, #24
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_close>:

int _close(int file)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	425b      	negs	r3, r3
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	0192      	lsls	r2, r2, #6
 8004f14:	605a      	str	r2, [r3, #4]
  return 0;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_isatty>:

int _isatty(int file)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f28:	2301      	movs	r3, #1
}
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f50:	4a14      	ldr	r2, [pc, #80]	@ (8004fa4 <_sbrk+0x5c>)
 8004f52:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <_sbrk+0x60>)
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <_sbrk+0x64>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f64:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <_sbrk+0x64>)
 8004f66:	4a12      	ldr	r2, [pc, #72]	@ (8004fb0 <_sbrk+0x68>)
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f6a:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <_sbrk+0x64>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	18d3      	adds	r3, r2, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d207      	bcs.n	8004f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f78:	f006 f814 	bl	800afa4 <__errno>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	220c      	movs	r2, #12
 8004f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	425b      	negs	r3, r3
 8004f86:	e009      	b.n	8004f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f88:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <_sbrk+0x64>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f8e:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <_sbrk+0x64>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	18d2      	adds	r2, r2, r3
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <_sbrk+0x64>)
 8004f98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b006      	add	sp, #24
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20009000 	.word	0x20009000
 8004fa8:	00000400 	.word	0x00000400
 8004fac:	20000554 	.word	0x20000554
 8004fb0:	200006a8 	.word	0x200006a8

08004fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fb8:	46c0      	nop			@ (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <sensor_rx_disable+0x3c>)
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <sensor_rx_disable+0x3c>)
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	0152      	lsls	r2, r2, #5
 8004fd2:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <sensor_rx_disable+0x3c>)
 8004fd6:	2280      	movs	r2, #128	@ 0x80
 8004fd8:	0192      	lsls	r2, r2, #6
 8004fda:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8004fdc:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <sensor_rx_disable+0x3c>)
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	01d2      	lsls	r2, r2, #7
 8004fe2:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <sensor_rx_disable+0x3c>)
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	0212      	lsls	r2, r2, #8
 8004fea:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8004fec:	23a0      	movs	r3, #160	@ 0xa0
 8004fee:	05db      	lsls	r3, r3, #23
 8004ff0:	2280      	movs	r2, #128	@ 0x80
 8004ff2:	0052      	lsls	r2, r2, #1
 8004ff4:	619a      	str	r2, [r3, #24]
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	50000400 	.word	0x50000400

08005000 <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	0002      	movs	r2, r0
 8005008:	1dfb      	adds	r3, r7, #7
 800500a:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 800500c:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <sensor_rx_select+0x98>)
 800500e:	2280      	movs	r2, #128	@ 0x80
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005014:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <sensor_rx_select+0x98>)
 8005016:	2280      	movs	r2, #128	@ 0x80
 8005018:	0152      	lsls	r2, r2, #5
 800501a:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 800501c:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <sensor_rx_select+0x98>)
 800501e:	2280      	movs	r2, #128	@ 0x80
 8005020:	0192      	lsls	r2, r2, #6
 8005022:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <sensor_rx_select+0x98>)
 8005026:	2280      	movs	r2, #128	@ 0x80
 8005028:	01d2      	lsls	r2, r2, #7
 800502a:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 800502c:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <sensor_rx_select+0x98>)
 800502e:	2280      	movs	r2, #128	@ 0x80
 8005030:	0212      	lsls	r2, r2, #8
 8005032:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005034:	23a0      	movs	r3, #160	@ 0xa0
 8005036:	05db      	lsls	r3, r3, #23
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	0052      	lsls	r2, r2, #1
 800503c:	619a      	str	r2, [r3, #24]
	switch(index) {
 800503e:	1dfb      	adds	r3, r7, #7
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b06      	cmp	r3, #6
 8005044:	d824      	bhi.n	8005090 <sensor_rx_select+0x90>
 8005046:	009a      	lsls	r2, r3, #2
 8005048:	4b14      	ldr	r3, [pc, #80]	@ (800509c <sensor_rx_select+0x9c>)
 800504a:	18d3      	adds	r3, r2, r3
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <sensor_rx_select+0x98>)
 8005052:	2280      	movs	r2, #128	@ 0x80
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005058:	e01a      	b.n	8005090 <sensor_rx_select+0x90>
	case 2:
		TEMP2_CS(0);
 800505a:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <sensor_rx_select+0x98>)
 800505c:	2280      	movs	r2, #128	@ 0x80
 800505e:	0152      	lsls	r2, r2, #5
 8005060:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005062:	e015      	b.n	8005090 <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <sensor_rx_select+0x98>)
 8005066:	2280      	movs	r2, #128	@ 0x80
 8005068:	0192      	lsls	r2, r2, #6
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 800506c:	e010      	b.n	8005090 <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 800506e:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <sensor_rx_select+0x98>)
 8005070:	2280      	movs	r2, #128	@ 0x80
 8005072:	01d2      	lsls	r2, r2, #7
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005076:	e00b      	b.n	8005090 <sensor_rx_select+0x90>
	case 5:
		TEMP5_CS(0);
 8005078:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <sensor_rx_select+0x98>)
 800507a:	2280      	movs	r2, #128	@ 0x80
 800507c:	0212      	lsls	r2, r2, #8
 800507e:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005080:	e006      	b.n	8005090 <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 8005082:	23a0      	movs	r3, #160	@ 0xa0
 8005084:	05db      	lsls	r3, r3, #23
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	0052      	lsls	r2, r2, #1
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 800508c:	e000      	b.n	8005090 <sensor_rx_select+0x90>
		return;
 800508e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	50000400 	.word	0x50000400
 800509c:	0800d4d0 	.word	0x0800d4d0

080050a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050a0:	480d      	ldr	r0, [pc, #52]	@ (80050d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050a4:	f7ff ff86 	bl	8004fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a8:	480c      	ldr	r0, [pc, #48]	@ (80050dc <LoopForever+0x6>)
  ldr r1, =_edata
 80050aa:	490d      	ldr	r1, [pc, #52]	@ (80050e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050ac:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <LoopForever+0xe>)
  movs r3, #0
 80050ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050b0:	e002      	b.n	80050b8 <LoopCopyDataInit>

080050b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050b6:	3304      	adds	r3, #4

080050b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050bc:	d3f9      	bcc.n	80050b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050be:	4a0a      	ldr	r2, [pc, #40]	@ (80050e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050c0:	4c0a      	ldr	r4, [pc, #40]	@ (80050ec <LoopForever+0x16>)
  movs r3, #0
 80050c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050c4:	e001      	b.n	80050ca <LoopFillZerobss>

080050c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c8:	3204      	adds	r2, #4

080050ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050cc:	d3fb      	bcc.n	80050c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050ce:	f005 ff6f 	bl	800afb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80050d2:	f7fe fca1 	bl	8003a18 <main>

080050d6 <LoopForever>:

LoopForever:
  b LoopForever
 80050d6:	e7fe      	b.n	80050d6 <LoopForever>
  ldr   r0, =_estack
 80050d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80050dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050e0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80050e4:	0800d884 	.word	0x0800d884
  ldr r2, =_sbss
 80050e8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80050ec:	200006a8 	.word	0x200006a8

080050f0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050f0:	e7fe      	b.n	80050f0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080050f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_Init+0x3c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <HAL_Init+0x3c>)
 8005106:	2180      	movs	r1, #128	@ 0x80
 8005108:	0049      	lsls	r1, r1, #1
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800510e:	2003      	movs	r0, #3
 8005110:	f000 f810 	bl	8005134 <HAL_InitTick>
 8005114:	1e03      	subs	r3, r0, #0
 8005116:	d003      	beq.n	8005120 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e001      	b.n	8005124 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005120:	f7ff fc30 	bl	8004984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	781b      	ldrb	r3, [r3, #0]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40022000 	.word	0x40022000

08005134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800513c:	230f      	movs	r3, #15
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <HAL_InitTick+0x88>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02b      	beq.n	80051a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800514c:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <HAL_InitTick+0x8c>)
 800514e:	681c      	ldr	r4, [r3, #0]
 8005150:	4b1a      	ldr	r3, [pc, #104]	@ (80051bc <HAL_InitTick+0x88>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	0019      	movs	r1, r3
 8005156:	23fa      	movs	r3, #250	@ 0xfa
 8005158:	0098      	lsls	r0, r3, #2
 800515a:	f7fa ffed 	bl	8000138 <__udivsi3>
 800515e:	0003      	movs	r3, r0
 8005160:	0019      	movs	r1, r3
 8005162:	0020      	movs	r0, r4
 8005164:	f7fa ffe8 	bl	8000138 <__udivsi3>
 8005168:	0003      	movs	r3, r0
 800516a:	0018      	movs	r0, r3
 800516c:	f000 ff21 	bl	8005fb2 <HAL_SYSTICK_Config>
 8005170:	1e03      	subs	r3, r0, #0
 8005172:	d112      	bne.n	800519a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d80a      	bhi.n	8005190 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	2301      	movs	r3, #1
 800517e:	425b      	negs	r3, r3
 8005180:	2200      	movs	r2, #0
 8005182:	0018      	movs	r0, r3
 8005184:	f000 fef0 	bl	8005f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005188:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <HAL_InitTick+0x90>)
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e00d      	b.n	80051ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005190:	230f      	movs	r3, #15
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e008      	b.n	80051ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e003      	b.n	80051ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051a4:	230f      	movs	r3, #15
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80051ac:	230f      	movs	r3, #15
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	781b      	ldrb	r3, [r3, #0]
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b005      	add	sp, #20
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	20000018 	.word	0x20000018
 80051c0:	20000010 	.word	0x20000010
 80051c4:	20000014 	.word	0x20000014

080051c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_IncTick+0x1c>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	001a      	movs	r2, r3
 80051d2:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_IncTick+0x20>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	18d2      	adds	r2, r2, r3
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <HAL_IncTick+0x20>)
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	20000018 	.word	0x20000018
 80051e8:	20000558 	.word	0x20000558

080051ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  return uwTick;
 80051f0:	4b02      	ldr	r3, [pc, #8]	@ (80051fc <HAL_GetTick+0x10>)
 80051f2:	681b      	ldr	r3, [r3, #0]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	20000558 	.word	0x20000558

08005200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7ff fff0 	bl	80051ec <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	d005      	beq.n	8005226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_Delay+0x44>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	001a      	movs	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	189b      	adds	r3, r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	f7ff ffe0 	bl	80051ec <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	429a      	cmp	r2, r3
 8005236:	d8f7      	bhi.n	8005228 <HAL_Delay+0x28>
  {
  }
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	46bd      	mov	sp, r7
 800523e:	b004      	add	sp, #16
 8005240:	bd80      	pop	{r7, pc}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	20000018 	.word	0x20000018

08005248 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a05      	ldr	r2, [pc, #20]	@ (800526c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005258:	401a      	ands	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	fe3fffff 	.word	0xfe3fffff

08005270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	23e0      	movs	r3, #224	@ 0xe0
 800527e:	045b      	lsls	r3, r3, #17
 8005280:	4013      	ands	r3, r2
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b002      	add	sp, #8
 8005288:	bd80      	pop	{r7, pc}

0800528a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	2104      	movs	r1, #4
 800529e:	400a      	ands	r2, r1
 80052a0:	2107      	movs	r1, #7
 80052a2:	4091      	lsls	r1, r2
 80052a4:	000a      	movs	r2, r1
 80052a6:	43d2      	mvns	r2, r2
 80052a8:	401a      	ands	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2104      	movs	r1, #4
 80052ae:	400b      	ands	r3, r1
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4099      	lsls	r1, r3
 80052b4:	000b      	movs	r3, r1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80052bc:	46c0      	nop			@ (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	2104      	movs	r1, #4
 80052d6:	400a      	ands	r2, r1
 80052d8:	2107      	movs	r1, #7
 80052da:	4091      	lsls	r1, r2
 80052dc:	000a      	movs	r2, r1
 80052de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2104      	movs	r1, #4
 80052e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052e6:	40da      	lsrs	r2, r3
 80052e8:	0013      	movs	r3, r2
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b002      	add	sp, #8
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	23c0      	movs	r3, #192	@ 0xc0
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4013      	ands	r3, r2
 8005304:	d101      	bne.n	800530a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b002      	add	sp, #8
 8005312:	bd80      	pop	{r7, pc}

08005314 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	211f      	movs	r1, #31
 8005328:	400a      	ands	r2, r1
 800532a:	210f      	movs	r1, #15
 800532c:	4091      	lsls	r1, r2
 800532e:	000a      	movs	r2, r1
 8005330:	43d2      	mvns	r2, r2
 8005332:	401a      	ands	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	0e9b      	lsrs	r3, r3, #26
 8005338:	210f      	movs	r1, #15
 800533a:	4019      	ands	r1, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	201f      	movs	r0, #31
 8005340:	4003      	ands	r3, r0
 8005342:	4099      	lsls	r1, r3
 8005344:	000b      	movs	r3, r1
 8005346:	431a      	orrs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800534c:	46c0      	nop			@ (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}

08005354 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	035b      	lsls	r3, r3, #13
 8005366:	0b5b      	lsrs	r3, r3, #13
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}

08005376 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	0352      	lsls	r2, r2, #13
 8005388:	0b52      	lsrs	r2, r2, #13
 800538a:	43d2      	mvns	r2, r2
 800538c:	401a      	ands	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}

0800539a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4013      	ands	r3, r2
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	0212      	lsls	r2, r2, #8
 80053c8:	43d2      	mvns	r2, r2
 80053ca:	401a      	ands	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	400b      	ands	r3, r1
 80053d4:	4904      	ldr	r1, [pc, #16]	@ (80053e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80053d6:	400b      	ands	r3, r1
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b004      	add	sp, #16
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	07ffff00 	.word	0x07ffff00

080053ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a05      	ldr	r2, [pc, #20]	@ (8005410 <LL_ADC_EnableInternalRegulator+0x24>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	2280      	movs	r2, #128	@ 0x80
 80053fe:	0552      	lsls	r2, r2, #21
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b002      	add	sp, #8
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	6fffffe8 	.word	0x6fffffe8

08005414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	055b      	lsls	r3, r3, #21
 8005424:	401a      	ands	r2, r3
 8005426:	2380      	movs	r3, #128	@ 0x80
 8005428:	055b      	lsls	r3, r3, #21
 800542a:	429a      	cmp	r2, r3
 800542c:	d101      	bne.n	8005432 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2201      	movs	r2, #1
 800544a:	4013      	ands	r3, r2
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <LL_ADC_IsEnabled+0x18>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <LL_ADC_IsEnabled+0x1a>
 8005454:	2300      	movs	r3, #0
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b002      	add	sp, #8
 800545c:	bd80      	pop	{r7, pc}

0800545e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2204      	movs	r2, #4
 800546c:	4013      	ands	r3, r2
 800546e:	2b04      	cmp	r3, #4
 8005470:	d101      	bne.n	8005476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005476:	2300      	movs	r3, #0
}
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005488:	231f      	movs	r3, #31
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e17f      	b.n	80057a6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7ff fa8b 	bl	80049cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2254      	movs	r2, #84	@ 0x54
 80054c0:	2100      	movs	r1, #0
 80054c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff ffa3 	bl	8005414 <LL_ADC_IsInternalRegulatorEnabled>
 80054ce:	1e03      	subs	r3, r0, #0
 80054d0:	d115      	bne.n	80054fe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff ff88 	bl	80053ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054dc:	4bb4      	ldr	r3, [pc, #720]	@ (80057b0 <HAL_ADC_Init+0x330>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	49b4      	ldr	r1, [pc, #720]	@ (80057b4 <HAL_ADC_Init+0x334>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fa fe28 	bl	8000138 <__udivsi3>
 80054e8:	0003      	movs	r3, r0
 80054ea:	3301      	adds	r3, #1
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054f0:	e002      	b.n	80054f8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f9      	bne.n	80054f2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	0018      	movs	r0, r3
 8005504:	f7ff ff86 	bl	8005414 <LL_ADC_IsInternalRegulatorEnabled>
 8005508:	1e03      	subs	r3, r0, #0
 800550a:	d10f      	bne.n	800552c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005510:	2210      	movs	r2, #16
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551c:	2201      	movs	r2, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005524:	231f      	movs	r3, #31
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0018      	movs	r0, r3
 8005532:	f7ff ff94 	bl	800545e <LL_ADC_REG_IsConversionOngoing>
 8005536:	0003      	movs	r3, r0
 8005538:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553e:	2210      	movs	r2, #16
 8005540:	4013      	ands	r3, r2
 8005542:	d000      	beq.n	8005546 <HAL_ADC_Init+0xc6>
 8005544:	e122      	b.n	800578c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d000      	beq.n	800554e <HAL_ADC_Init+0xce>
 800554c:	e11e      	b.n	800578c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	4a99      	ldr	r2, [pc, #612]	@ (80057b8 <HAL_ADC_Init+0x338>)
 8005554:	4013      	ands	r3, r2
 8005556:	2202      	movs	r2, #2
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	0018      	movs	r0, r3
 8005564:	f7ff ff6a 	bl	800543c <LL_ADC_IsEnabled>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d000      	beq.n	800556e <HAL_ADC_Init+0xee>
 800556c:	e0ad      	b.n	80056ca <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7e1b      	ldrb	r3, [r3, #24]
 8005576:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005578:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	7e5b      	ldrb	r3, [r3, #25]
 800557e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005580:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7e9b      	ldrb	r3, [r3, #26]
 8005586:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005588:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_ADC_Init+0x118>
 8005592:	2380      	movs	r3, #128	@ 0x80
 8005594:	015b      	lsls	r3, r3, #5
 8005596:	e000      	b.n	800559a <HAL_ADC_Init+0x11a>
 8005598:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800559a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80055a0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da04      	bge.n	80055b4 <HAL_ADC_Init+0x134>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	e001      	b.n	80055b8 <HAL_ADC_Init+0x138>
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80055b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	212c      	movs	r1, #44	@ 0x2c
 80055be:	5c5b      	ldrb	r3, [r3, r1]
 80055c0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80055c2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	5c9b      	ldrb	r3, [r3, r2]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d115      	bne.n	8005600 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7e9b      	ldrb	r3, [r3, #26]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	0252      	lsls	r2, r2, #9
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	e00b      	b.n	8005600 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ec:	2220      	movs	r2, #32
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f8:	2201      	movs	r2, #1
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800560c:	23e0      	movs	r3, #224	@ 0xe0
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005616:	4313      	orrs	r3, r2
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a65      	ldr	r2, [pc, #404]	@ (80057bc <HAL_ADC_Init+0x33c>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	0f9b      	lsrs	r3, r3, #30
 800563a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005640:	4313      	orrs	r3, r2
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	223c      	movs	r2, #60	@ 0x3c
 800564c:	5c9b      	ldrb	r3, [r3, r2]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d111      	bne.n	8005676 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	0f9b      	lsrs	r3, r3, #30
 8005658:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800565e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005664:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800566a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	2201      	movs	r2, #1
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	4a50      	ldr	r2, [pc, #320]	@ (80057c0 <HAL_ADC_Init+0x340>)
 800567e:	4013      	ands	r3, r2
 8005680:	0019      	movs	r1, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	430a      	orrs	r2, r1
 800568a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	23c0      	movs	r3, #192	@ 0xc0
 8005692:	061b      	lsls	r3, r3, #24
 8005694:	429a      	cmp	r2, r3
 8005696:	d018      	beq.n	80056ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	05db      	lsls	r3, r3, #23
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d012      	beq.n	80056ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d00c      	beq.n	80056ca <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80056b0:	4b44      	ldr	r3, [pc, #272]	@ (80057c4 <HAL_ADC_Init+0x344>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a44      	ldr	r2, [pc, #272]	@ (80057c8 <HAL_ADC_Init+0x348>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	23f0      	movs	r3, #240	@ 0xf0
 80056c0:	039b      	lsls	r3, r3, #14
 80056c2:	401a      	ands	r2, r3
 80056c4:	4b3f      	ldr	r3, [pc, #252]	@ (80057c4 <HAL_ADC_Init+0x344>)
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d2:	001a      	movs	r2, r3
 80056d4:	2100      	movs	r1, #0
 80056d6:	f7ff fdd8 	bl	800528a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	493a      	ldr	r1, [pc, #232]	@ (80057cc <HAL_ADC_Init+0x34c>)
 80056e4:	001a      	movs	r2, r3
 80056e6:	f7ff fdd0 	bl	800528a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2110      	movs	r1, #16
 80056fe:	4249      	negs	r1, r1
 8005700:	430a      	orrs	r2, r1
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
 8005704:	e018      	b.n	8005738 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	039b      	lsls	r3, r3, #14
 800570e:	429a      	cmp	r2, r3
 8005710:	d112      	bne.n	8005738 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	3b01      	subs	r3, #1
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	221c      	movs	r2, #28
 8005722:	4013      	ands	r3, r2
 8005724:	2210      	movs	r2, #16
 8005726:	4252      	negs	r2, r2
 8005728:	409a      	lsls	r2, r3
 800572a:	0011      	movs	r1, r2
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2100      	movs	r1, #0
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff fdc0 	bl	80052c4 <LL_ADC_GetSamplingTimeCommonChannels>
 8005744:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800574a:	429a      	cmp	r2, r3
 800574c:	d10b      	bne.n	8005766 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005758:	2203      	movs	r2, #3
 800575a:	4393      	bics	r3, r2
 800575c:	2201      	movs	r2, #1
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005764:	e01c      	b.n	80057a0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	2212      	movs	r2, #18
 800576c:	4393      	bics	r3, r2
 800576e:	2210      	movs	r2, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577a:	2201      	movs	r2, #1
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005782:	231f      	movs	r3, #31
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800578a:	e009      	b.n	80057a0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005790:	2210      	movs	r2, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005798:	231f      	movs	r3, #31
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	2201      	movs	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80057a0:	231f      	movs	r3, #31
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	781b      	ldrb	r3, [r3, #0]
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b008      	add	sp, #32
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	20000010 	.word	0x20000010
 80057b4:	00030d40 	.word	0x00030d40
 80057b8:	fffffefd 	.word	0xfffffefd
 80057bc:	ffde0201 	.word	0xffde0201
 80057c0:	1ffffc02 	.word	0x1ffffc02
 80057c4:	40012708 	.word	0x40012708
 80057c8:	ffc3ffff 	.word	0xffc3ffff
 80057cc:	07ffff04 	.word	0x07ffff04

080057d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2202      	movs	r2, #2
 80057f0:	4013      	ands	r3, r2
 80057f2:	d017      	beq.n	8005824 <HAL_ADC_IRQHandler+0x54>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2202      	movs	r2, #2
 80057f8:	4013      	ands	r3, r2
 80057fa:	d013      	beq.n	8005824 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005800:	2210      	movs	r2, #16
 8005802:	4013      	ands	r3, r2
 8005804:	d106      	bne.n	8005814 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 faea 	bl	8005df0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2202      	movs	r2, #2
 8005822:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2204      	movs	r2, #4
 8005828:	4013      	ands	r3, r2
 800582a:	d003      	beq.n	8005834 <HAL_ADC_IRQHandler+0x64>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	d107      	bne.n	8005844 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2208      	movs	r2, #8
 8005838:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800583a:	d04d      	beq.n	80058d8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2208      	movs	r2, #8
 8005840:	4013      	ands	r3, r2
 8005842:	d049      	beq.n	80058d8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d106      	bne.n	800585c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	0092      	lsls	r2, r2, #2
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	0018      	movs	r0, r3
 8005862:	f7ff fd46 	bl	80052f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d02e      	beq.n	80058c8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7e9b      	ldrb	r3, [r3, #26]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d12a      	bne.n	80058c8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2208      	movs	r2, #8
 800587a:	4013      	ands	r3, r2
 800587c:	2b08      	cmp	r3, #8
 800587e:	d123      	bne.n	80058c8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fdea 	bl	800545e <LL_ADC_REG_IsConversionOngoing>
 800588a:	1e03      	subs	r3, r0, #0
 800588c:	d110      	bne.n	80058b0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	210c      	movs	r1, #12
 800589a:	438a      	bics	r2, r1
 800589c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	4a56      	ldr	r2, [pc, #344]	@ (80059fc <HAL_ADC_IRQHandler+0x22c>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	2201      	movs	r2, #1
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80058ae:	e00b      	b.n	80058c8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b4:	2220      	movs	r2, #32
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	2201      	movs	r2, #1
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7fd fdf4 	bl	80034b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	220c      	movs	r2, #12
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2280      	movs	r2, #128	@ 0x80
 80058dc:	4013      	ands	r3, r2
 80058de:	d012      	beq.n	8005906 <HAL_ADC_IRQHandler+0x136>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2280      	movs	r2, #128	@ 0x80
 80058e4:	4013      	ands	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	2280      	movs	r2, #128	@ 0x80
 80058ee:	0252      	lsls	r2, r2, #9
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 f881 	bl	8005a00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2280      	movs	r2, #128	@ 0x80
 8005904:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	2380      	movs	r3, #128	@ 0x80
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d014      	beq.n	800593a <HAL_ADC_IRQHandler+0x16a>
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4013      	ands	r3, r2
 8005918:	d00f      	beq.n	800593a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591e:	2280      	movs	r2, #128	@ 0x80
 8005920:	0292      	lsls	r2, r2, #10
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 fa50 	bl	8005dd0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2280      	movs	r2, #128	@ 0x80
 8005936:	0052      	lsls	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4013      	ands	r3, r2
 8005942:	d014      	beq.n	800596e <HAL_ADC_IRQHandler+0x19e>
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	2380      	movs	r3, #128	@ 0x80
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4013      	ands	r3, r2
 800594c:	d00f      	beq.n	800596e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005952:	2280      	movs	r2, #128	@ 0x80
 8005954:	02d2      	lsls	r2, r2, #11
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0018      	movs	r0, r3
 8005960:	f000 fa3e 	bl	8005de0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2280      	movs	r2, #128	@ 0x80
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2210      	movs	r2, #16
 8005972:	4013      	ands	r3, r2
 8005974:	d02b      	beq.n	80059ce <HAL_ADC_IRQHandler+0x1fe>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2210      	movs	r2, #16
 800597a:	4013      	ands	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e008      	b.n	800599e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0018      	movs	r0, r3
 8005992:	f7ff fd02 	bl	800539a <LL_ADC_REG_GetDMATransfer>
 8005996:	1e03      	subs	r3, r0, #0
 8005998:	d001      	beq.n	800599e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800599a:	2301      	movs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d110      	bne.n	80059c6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a8:	2280      	movs	r2, #128	@ 0x80
 80059aa:	00d2      	lsls	r2, r2, #3
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b6:	2202      	movs	r2, #2
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f000 f825 	bl	8005a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2210      	movs	r2, #16
 80059cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	019b      	lsls	r3, r3, #6
 80059d4:	4013      	ands	r3, r2
 80059d6:	d00d      	beq.n	80059f4 <HAL_ADC_IRQHandler+0x224>
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	4013      	ands	r3, r2
 80059e0:	d008      	beq.n	80059f4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0018      	movs	r0, r3
 80059e6:	f000 fa0b 	bl	8005e00 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	0192      	lsls	r2, r2, #6
 80059f2:	601a      	str	r2, [r3, #0]
  }
}
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b006      	add	sp, #24
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	fffffefe 	.word	0xfffffefe

08005a00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a2a:	2317      	movs	r3, #23
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2254      	movs	r2, #84	@ 0x54
 8005a3a:	5c9b      	ldrb	r3, [r3, r2]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x24>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e1c0      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x3a6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2254      	movs	r2, #84	@ 0x54
 8005a48:	2101      	movs	r1, #1
 8005a4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7ff fd04 	bl	800545e <LL_ADC_REG_IsConversionOngoing>
 8005a56:	1e03      	subs	r3, r0, #0
 8005a58:	d000      	beq.n	8005a5c <HAL_ADC_ConfigChannel+0x3c>
 8005a5a:	e1a3      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d100      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x46>
 8005a64:	e143      	b.n	8005cee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	2380      	movs	r3, #128	@ 0x80
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d004      	beq.n	8005a7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a76:	4ac1      	ldr	r2, [pc, #772]	@ (8005d7c <HAL_ADC_ConfigChannel+0x35c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0019      	movs	r1, r3
 8005a86:	0010      	movs	r0, r2
 8005a88:	f7ff fc64 	bl	8005354 <LL_ADC_REG_SetSequencerChAdd>
 8005a8c:	e0c9      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	211f      	movs	r1, #31
 8005a98:	400b      	ands	r3, r1
 8005a9a:	210f      	movs	r1, #15
 8005a9c:	4099      	lsls	r1, r3
 8005a9e:	000b      	movs	r3, r1
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	035b      	lsls	r3, r3, #13
 8005aac:	0b5b      	lsrs	r3, r3, #13
 8005aae:	d105      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x9c>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0e9b      	lsrs	r3, r3, #26
 8005ab6:	221f      	movs	r2, #31
 8005ab8:	4013      	ands	r3, r2
 8005aba:	e098      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d000      	beq.n	8005ac8 <HAL_ADC_ConfigChannel+0xa8>
 8005ac6:	e091      	b.n	8005bec <HAL_ADC_ConfigChannel+0x1cc>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2202      	movs	r2, #2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d000      	beq.n	8005ad4 <HAL_ADC_ConfigChannel+0xb4>
 8005ad2:	e089      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x1c8>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	4013      	ands	r3, r2
 8005adc:	d000      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0xc0>
 8005ade:	e081      	b.n	8005be4 <HAL_ADC_ConfigChannel+0x1c4>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d000      	beq.n	8005aec <HAL_ADC_ConfigChannel+0xcc>
 8005aea:	e079      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x1c0>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2210      	movs	r2, #16
 8005af2:	4013      	ands	r3, r2
 8005af4:	d000      	beq.n	8005af8 <HAL_ADC_ConfigChannel+0xd8>
 8005af6:	e071      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x1bc>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2220      	movs	r2, #32
 8005afe:	4013      	ands	r3, r2
 8005b00:	d000      	beq.n	8005b04 <HAL_ADC_ConfigChannel+0xe4>
 8005b02:	e069      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x1b8>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2240      	movs	r2, #64	@ 0x40
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d000      	beq.n	8005b10 <HAL_ADC_ConfigChannel+0xf0>
 8005b0e:	e061      	b.n	8005bd4 <HAL_ADC_ConfigChannel+0x1b4>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2280      	movs	r2, #128	@ 0x80
 8005b16:	4013      	ands	r3, r2
 8005b18:	d000      	beq.n	8005b1c <HAL_ADC_ConfigChannel+0xfc>
 8005b1a:	e059      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x1b0>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	d151      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x1ac>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	2380      	movs	r3, #128	@ 0x80
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4013      	ands	r3, r2
 8005b32:	d149      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x1a8>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	2380      	movs	r3, #128	@ 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d141      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x1a4>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	2380      	movs	r3, #128	@ 0x80
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d139      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x1a0>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	015b      	lsls	r3, r3, #5
 8005b54:	4013      	ands	r3, r2
 8005b56:	d131      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x19c>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	019b      	lsls	r3, r3, #6
 8005b60:	4013      	ands	r3, r2
 8005b62:	d129      	bne.n	8005bb8 <HAL_ADC_ConfigChannel+0x198>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d121      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x194>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	2380      	movs	r3, #128	@ 0x80
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d119      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x190>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2380      	movs	r3, #128	@ 0x80
 8005b82:	025b      	lsls	r3, r3, #9
 8005b84:	4013      	ands	r3, r2
 8005b86:	d111      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x18c>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	2380      	movs	r3, #128	@ 0x80
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	4013      	ands	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0x188>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	2380      	movs	r3, #128	@ 0x80
 8005b9a:	02db      	lsls	r3, r3, #11
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d001      	beq.n	8005ba4 <HAL_ADC_ConfigChannel+0x184>
 8005ba0:	2312      	movs	r3, #18
 8005ba2:	e024      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e022      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005ba8:	2311      	movs	r3, #17
 8005baa:	e020      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bac:	2310      	movs	r3, #16
 8005bae:	e01e      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bb0:	230f      	movs	r3, #15
 8005bb2:	e01c      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bb4:	230e      	movs	r3, #14
 8005bb6:	e01a      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bb8:	230d      	movs	r3, #13
 8005bba:	e018      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	e016      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bc0:	230b      	movs	r3, #11
 8005bc2:	e014      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	e012      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bc8:	2309      	movs	r3, #9
 8005bca:	e010      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	e00e      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	e00c      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bd4:	2306      	movs	r3, #6
 8005bd6:	e00a      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bd8:	2305      	movs	r3, #5
 8005bda:	e008      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e006      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005be0:	2303      	movs	r3, #3
 8005be2:	e004      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e002      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_ADC_ConfigChannel+0x1ce>
 8005bec:	2300      	movs	r3, #0
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	6852      	ldr	r2, [r2, #4]
 8005bf2:	201f      	movs	r0, #31
 8005bf4:	4002      	ands	r2, r0
 8005bf6:	4093      	lsls	r3, r2
 8005bf8:	000a      	movs	r2, r1
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d808      	bhi.n	8005c22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	f7ff fb79 	bl	8005314 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	001a      	movs	r2, r3
 8005c30:	f7ff fbc0 	bl	80053b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db00      	blt.n	8005c3e <HAL_ADC_ConfigChannel+0x21e>
 8005c3c:	e0bc      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c3e:	4b50      	ldr	r3, [pc, #320]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff fb15 	bl	8005270 <LL_ADC_GetCommonPathInternalCh>
 8005c46:	0003      	movs	r3, r0
 8005c48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d84 <HAL_ADC_ConfigChannel+0x364>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d122      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c5c:	d11d      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2280      	movs	r2, #128	@ 0x80
 8005c62:	0412      	lsls	r2, r2, #16
 8005c64:	4313      	orrs	r3, r2
 8005c66:	4a46      	ldr	r2, [pc, #280]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005c68:	0019      	movs	r1, r3
 8005c6a:	0010      	movs	r0, r2
 8005c6c:	f7ff faec 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c70:	4b45      	ldr	r3, [pc, #276]	@ (8005d88 <HAL_ADC_ConfigChannel+0x368>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4945      	ldr	r1, [pc, #276]	@ (8005d8c <HAL_ADC_ConfigChannel+0x36c>)
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7fa fa5e 	bl	8000138 <__udivsi3>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	0013      	movs	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c8a:	e002      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f9      	bne.n	8005c8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c98:	e08e      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d90 <HAL_ADC_ConfigChannel+0x370>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	2380      	movs	r3, #128	@ 0x80
 8005ca8:	045b      	lsls	r3, r3, #17
 8005caa:	4013      	ands	r3, r2
 8005cac:	d109      	bne.n	8005cc2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2280      	movs	r2, #128	@ 0x80
 8005cb2:	0452      	lsls	r2, r2, #17
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	4a32      	ldr	r2, [pc, #200]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005cb8:	0019      	movs	r1, r3
 8005cba:	0010      	movs	r0, r2
 8005cbc:	f7ff fac4 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005cc0:	e07a      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a33      	ldr	r2, [pc, #204]	@ (8005d94 <HAL_ADC_ConfigChannel+0x374>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d000      	beq.n	8005cce <HAL_ADC_ConfigChannel+0x2ae>
 8005ccc:	e074      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	03db      	lsls	r3, r3, #15
 8005cd4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005cd6:	d000      	beq.n	8005cda <HAL_ADC_ConfigChannel+0x2ba>
 8005cd8:	e06e      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2280      	movs	r2, #128	@ 0x80
 8005cde:	03d2      	lsls	r2, r2, #15
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	4a27      	ldr	r2, [pc, #156]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	f7ff faae 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005cec:	e064      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	2380      	movs	r3, #128	@ 0x80
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d004      	beq.n	8005d04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d7c <HAL_ADC_ConfigChannel+0x35c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d107      	bne.n	8005d14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	0010      	movs	r0, r2
 8005d10:	f7ff fb31 	bl	8005376 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da4d      	bge.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d1c:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f7ff faa6 	bl	8005270 <LL_ADC_GetCommonPathInternalCh>
 8005d24:	0003      	movs	r3, r0
 8005d26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a15      	ldr	r2, [pc, #84]	@ (8005d84 <HAL_ADC_ConfigChannel+0x364>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d108      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <HAL_ADC_ConfigChannel+0x378>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	4a11      	ldr	r2, [pc, #68]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	0010      	movs	r0, r2
 8005d3e:	f7ff fa83 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005d42:	e039      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a11      	ldr	r2, [pc, #68]	@ (8005d90 <HAL_ADC_ConfigChannel+0x370>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d108      	bne.n	8005d60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4a12      	ldr	r2, [pc, #72]	@ (8005d9c <HAL_ADC_ConfigChannel+0x37c>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	4a0a      	ldr	r2, [pc, #40]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005d56:	0019      	movs	r1, r3
 8005d58:	0010      	movs	r0, r2
 8005d5a:	f7ff fa75 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005d5e:	e02b      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	@ (8005d94 <HAL_ADC_ConfigChannel+0x374>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d126      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005da0 <HAL_ADC_ConfigChannel+0x380>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	4a03      	ldr	r2, [pc, #12]	@ (8005d80 <HAL_ADC_ConfigChannel+0x360>)
 8005d72:	0019      	movs	r1, r3
 8005d74:	0010      	movs	r0, r2
 8005d76:	f7ff fa67 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005d7a:	e01d      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x398>
 8005d7c:	80000004 	.word	0x80000004
 8005d80:	40012708 	.word	0x40012708
 8005d84:	b0001000 	.word	0xb0001000
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	00030d40 	.word	0x00030d40
 8005d90:	b8004000 	.word	0xb8004000
 8005d94:	b4002000 	.word	0xb4002000
 8005d98:	ff7fffff 	.word	0xff7fffff
 8005d9c:	feffffff 	.word	0xfeffffff
 8005da0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	2220      	movs	r2, #32
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005db0:	2317      	movs	r3, #23
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2254      	movs	r2, #84	@ 0x54
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005dc0:	2317      	movs	r3, #23
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	781b      	ldrb	r3, [r3, #0]
}
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b006      	add	sp, #24
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	46c0      	nop			@ (mov r8, r8)

08005dd0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005de8:	46c0      	nop			@ (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005df8:	46c0      	nop			@ (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8005e08:	46c0      	nop			@ (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	0002      	movs	r2, r0
 8005e18:	1dfb      	adds	r3, r7, #7
 8005e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e22:	d809      	bhi.n	8005e38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e24:	1dfb      	adds	r3, r7, #7
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	231f      	movs	r3, #31
 8005e2c:	401a      	ands	r2, r3
 8005e2e:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <__NVIC_EnableIRQ+0x30>)
 8005e30:	2101      	movs	r1, #1
 8005e32:	4091      	lsls	r1, r2
 8005e34:	000a      	movs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005e38:	46c0      	nop			@ (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	e000e100 	.word	0xe000e100

08005e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	0002      	movs	r2, r0
 8005e4c:	6039      	str	r1, [r7, #0]
 8005e4e:	1dfb      	adds	r3, r7, #7
 8005e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e52:	1dfb      	adds	r3, r7, #7
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e58:	d828      	bhi.n	8005eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <__NVIC_SetPriority+0xd4>)
 8005e5c:	1dfb      	adds	r3, r7, #7
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	33c0      	adds	r3, #192	@ 0xc0
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	589b      	ldr	r3, [r3, r2]
 8005e6a:	1dfa      	adds	r2, r7, #7
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	0011      	movs	r1, r2
 8005e70:	2203      	movs	r2, #3
 8005e72:	400a      	ands	r2, r1
 8005e74:	00d2      	lsls	r2, r2, #3
 8005e76:	21ff      	movs	r1, #255	@ 0xff
 8005e78:	4091      	lsls	r1, r2
 8005e7a:	000a      	movs	r2, r1
 8005e7c:	43d2      	mvns	r2, r2
 8005e7e:	401a      	ands	r2, r3
 8005e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	22ff      	movs	r2, #255	@ 0xff
 8005e88:	401a      	ands	r2, r3
 8005e8a:	1dfb      	adds	r3, r7, #7
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	0018      	movs	r0, r3
 8005e90:	2303      	movs	r3, #3
 8005e92:	4003      	ands	r3, r0
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e98:	481f      	ldr	r0, [pc, #124]	@ (8005f18 <__NVIC_SetPriority+0xd4>)
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	33c0      	adds	r3, #192	@ 0xc0
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005eaa:	e031      	b.n	8005f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005eac:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <__NVIC_SetPriority+0xd8>)
 8005eae:	1dfb      	adds	r3, r7, #7
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	230f      	movs	r3, #15
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	3b08      	subs	r3, #8
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	3306      	adds	r3, #6
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	18d3      	adds	r3, r2, r3
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1dfa      	adds	r2, r7, #7
 8005ec8:	7812      	ldrb	r2, [r2, #0]
 8005eca:	0011      	movs	r1, r2
 8005ecc:	2203      	movs	r2, #3
 8005ece:	400a      	ands	r2, r1
 8005ed0:	00d2      	lsls	r2, r2, #3
 8005ed2:	21ff      	movs	r1, #255	@ 0xff
 8005ed4:	4091      	lsls	r1, r2
 8005ed6:	000a      	movs	r2, r1
 8005ed8:	43d2      	mvns	r2, r2
 8005eda:	401a      	ands	r2, r3
 8005edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	22ff      	movs	r2, #255	@ 0xff
 8005ee4:	401a      	ands	r2, r3
 8005ee6:	1dfb      	adds	r3, r7, #7
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	0018      	movs	r0, r3
 8005eec:	2303      	movs	r3, #3
 8005eee:	4003      	ands	r3, r0
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ef4:	4809      	ldr	r0, [pc, #36]	@ (8005f1c <__NVIC_SetPriority+0xd8>)
 8005ef6:	1dfb      	adds	r3, r7, #7
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	001c      	movs	r4, r3
 8005efc:	230f      	movs	r3, #15
 8005efe:	4023      	ands	r3, r4
 8005f00:	3b08      	subs	r3, #8
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	430a      	orrs	r2, r1
 8005f06:	3306      	adds	r3, #6
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	18c3      	adds	r3, r0, r3
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	46c0      	nop			@ (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b003      	add	sp, #12
 8005f16:	bd90      	pop	{r4, r7, pc}
 8005f18:	e000e100 	.word	0xe000e100
 8005f1c:	e000ed00 	.word	0xe000ed00

08005f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1e5a      	subs	r2, r3, #1
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	045b      	lsls	r3, r3, #17
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d301      	bcc.n	8005f38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f34:	2301      	movs	r3, #1
 8005f36:	e010      	b.n	8005f5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f38:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <SysTick_Config+0x44>)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	3a01      	subs	r2, #1
 8005f3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f40:	2301      	movs	r3, #1
 8005f42:	425b      	negs	r3, r3
 8005f44:	2103      	movs	r1, #3
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7ff ff7c 	bl	8005e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <SysTick_Config+0x44>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f52:	4b04      	ldr	r3, [pc, #16]	@ (8005f64 <SysTick_Config+0x44>)
 8005f54:	2207      	movs	r2, #7
 8005f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b002      	add	sp, #8
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	e000e010 	.word	0xe000e010

08005f68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	210f      	movs	r1, #15
 8005f74:	187b      	adds	r3, r7, r1
 8005f76:	1c02      	adds	r2, r0, #0
 8005f78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	187b      	adds	r3, r7, r1
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	0011      	movs	r1, r2
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7ff ff5d 	bl	8005e44 <__NVIC_SetPriority>
}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b004      	add	sp, #16
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	0002      	movs	r2, r0
 8005f9a:	1dfb      	adds	r3, r7, #7
 8005f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f9e:	1dfb      	adds	r3, r7, #7
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7ff ff33 	bl	8005e10 <__NVIC_EnableIRQ>
}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b002      	add	sp, #8
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7ff ffaf 	bl	8005f20 <SysTick_Config>
 8005fc2:	0003      	movs	r3, r0
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e077      	b.n	80060ce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80060d8 <HAL_DMA_Init+0x10c>)
 8005fe4:	4694      	mov	ip, r2
 8005fe6:	4463      	add	r3, ip
 8005fe8:	2114      	movs	r1, #20
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7fa f8a4 	bl	8000138 <__udivsi3>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2225      	movs	r2, #37	@ 0x25
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4934      	ldr	r1, [pc, #208]	@ (80060dc <HAL_DMA_Init+0x110>)
 800600c:	400a      	ands	r2, r1
 800600e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 f9c1 	bl	80063d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	01db      	lsls	r3, r3, #7
 8006056:	429a      	cmp	r2, r3
 8006058:	d102      	bne.n	8006060 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	213f      	movs	r1, #63	@ 0x3f
 800606a:	400a      	ands	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006076:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d011      	beq.n	80060a4 <HAL_DMA_Init+0xd8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d80d      	bhi.n	80060a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	0018      	movs	r0, r3
 800608c:	f000 f9cc 	bl	8006428 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e008      	b.n	80060b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2225      	movs	r2, #37	@ 0x25
 80060c0:	2101      	movs	r1, #1
 80060c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	@ 0x24
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	0018      	movs	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b002      	add	sp, #8
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	bffdfff8 	.word	0xbffdfff8
 80060dc:	ffff800f 	.word	0xffff800f

080060e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2317      	movs	r3, #23
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2224      	movs	r2, #36	@ 0x24
 80060fa:	5c9b      	ldrb	r3, [r3, r2]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Start_IT+0x24>
 8006100:	2302      	movs	r3, #2
 8006102:	e06f      	b.n	80061e4 <HAL_DMA_Start_IT+0x104>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2224      	movs	r2, #36	@ 0x24
 8006108:	2101      	movs	r1, #1
 800610a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2225      	movs	r2, #37	@ 0x25
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d157      	bne.n	80061c8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2225      	movs	r2, #37	@ 0x25
 800611c:	2102      	movs	r1, #2
 800611e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2101      	movs	r1, #1
 8006132:	438a      	bics	r2, r1
 8006134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f907 	bl	8006350 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	210e      	movs	r1, #14
 8006156:	430a      	orrs	r2, r1
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e00f      	b.n	800617c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2104      	movs	r1, #4
 8006168:	438a      	bics	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	210a      	movs	r1, #10
 8006178:	430a      	orrs	r2, r1
 800617a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	2380      	movs	r3, #128	@ 0x80
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	4013      	ands	r3, r2
 8006188:	d008      	beq.n	800619c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006194:	2180      	movs	r1, #128	@ 0x80
 8006196:	0049      	lsls	r1, r1, #1
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ae:	2180      	movs	r1, #128	@ 0x80
 80061b0:	0049      	lsls	r1, r1, #1
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2101      	movs	r1, #1
 80061c2:	430a      	orrs	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	e00a      	b.n	80061de <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2224      	movs	r2, #36	@ 0x24
 80061d2:	2100      	movs	r1, #0
 80061d4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80061d6:	2317      	movs	r3, #23
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80061de:	2317      	movs	r3, #23
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	781b      	ldrb	r3, [r3, #0]
}
 80061e4:	0018      	movs	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b006      	add	sp, #24
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80061f4:	4b55      	ldr	r3, [pc, #340]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006206:	221c      	movs	r2, #28
 8006208:	4013      	ands	r3, r2
 800620a:	2204      	movs	r2, #4
 800620c:	409a      	lsls	r2, r3
 800620e:	0013      	movs	r3, r2
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	d027      	beq.n	8006266 <HAL_DMA_IRQHandler+0x7a>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2204      	movs	r2, #4
 800621a:	4013      	ands	r3, r2
 800621c:	d023      	beq.n	8006266 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2220      	movs	r2, #32
 8006226:	4013      	ands	r3, r2
 8006228:	d107      	bne.n	800623a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2104      	movs	r1, #4
 8006236:	438a      	bics	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800623a:	4b44      	ldr	r3, [pc, #272]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 800623c:	6859      	ldr	r1, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	221c      	movs	r2, #28
 8006244:	4013      	ands	r3, r2
 8006246:	2204      	movs	r2, #4
 8006248:	409a      	lsls	r2, r3
 800624a:	4b40      	ldr	r3, [pc, #256]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d100      	bne.n	800625a <HAL_DMA_IRQHandler+0x6e>
 8006258:	e073      	b.n	8006342 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	0010      	movs	r0, r2
 8006262:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006264:	e06d      	b.n	8006342 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	221c      	movs	r2, #28
 800626c:	4013      	ands	r3, r2
 800626e:	2202      	movs	r2, #2
 8006270:	409a      	lsls	r2, r3
 8006272:	0013      	movs	r3, r2
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4013      	ands	r3, r2
 8006278:	d02e      	beq.n	80062d8 <HAL_DMA_IRQHandler+0xec>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2202      	movs	r2, #2
 800627e:	4013      	ands	r3, r2
 8006280:	d02a      	beq.n	80062d8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2220      	movs	r2, #32
 800628a:	4013      	ands	r3, r2
 800628c:	d10b      	bne.n	80062a6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	210a      	movs	r1, #10
 800629a:	438a      	bics	r2, r1
 800629c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2225      	movs	r2, #37	@ 0x25
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80062a6:	4b29      	ldr	r3, [pc, #164]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	221c      	movs	r2, #28
 80062b0:	4013      	ands	r3, r2
 80062b2:	2202      	movs	r2, #2
 80062b4:	409a      	lsls	r2, r3
 80062b6:	4b25      	ldr	r3, [pc, #148]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	@ 0x24
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d03a      	beq.n	8006342 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	0010      	movs	r0, r2
 80062d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80062d6:	e034      	b.n	8006342 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	221c      	movs	r2, #28
 80062de:	4013      	ands	r3, r2
 80062e0:	2208      	movs	r2, #8
 80062e2:	409a      	lsls	r2, r3
 80062e4:	0013      	movs	r3, r2
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	d02b      	beq.n	8006344 <HAL_DMA_IRQHandler+0x158>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2208      	movs	r2, #8
 80062f0:	4013      	ands	r3, r2
 80062f2:	d027      	beq.n	8006344 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	210e      	movs	r1, #14
 8006300:	438a      	bics	r2, r1
 8006302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006304:	4b11      	ldr	r3, [pc, #68]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	221c      	movs	r2, #28
 800630e:	4013      	ands	r3, r2
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <HAL_DMA_IRQHandler+0x160>)
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2225      	movs	r2, #37	@ 0x25
 8006324:	2101      	movs	r1, #1
 8006326:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2224      	movs	r2, #36	@ 0x24
 800632c:	2100      	movs	r1, #0
 800632e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	0010      	movs	r0, r2
 8006340:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	46c0      	nop			@ (mov r8, r8)
}
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40020000 	.word	0x40020000

08006350 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006366:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006378:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800637a:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <DMA_SetConfig+0x7c>)
 800637c:	6859      	ldr	r1, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	221c      	movs	r2, #28
 8006384:	4013      	ands	r3, r2
 8006386:	2201      	movs	r2, #1
 8006388:	409a      	lsls	r2, r3
 800638a:	4b10      	ldr	r3, [pc, #64]	@ (80063cc <DMA_SetConfig+0x7c>)
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d108      	bne.n	80063b2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063b0:	e007      	b.n	80063c2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	60da      	str	r2, [r3, #12]
}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	40020000 	.word	0x40020000

080063d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	4a10      	ldr	r2, [pc, #64]	@ (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80063e0:	4694      	mov	ip, r2
 80063e2:	4463      	add	r3, ip
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	001a      	movs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	001a      	movs	r2, r3
 80063f2:	23ff      	movs	r3, #255	@ 0xff
 80063f4:	4013      	ands	r3, r2
 80063f6:	3b08      	subs	r3, #8
 80063f8:	2114      	movs	r1, #20
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7f9 fe9c 	bl	8000138 <__udivsi3>
 8006400:	0003      	movs	r3, r0
 8006402:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a07      	ldr	r2, [pc, #28]	@ (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006408:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	221f      	movs	r2, #31
 800640e:	4013      	ands	r3, r2
 8006410:	2201      	movs	r2, #1
 8006412:	409a      	lsls	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006418:	46c0      	nop			@ (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b004      	add	sp, #16
 800641e:	bd80      	pop	{r7, pc}
 8006420:	10008200 	.word	0x10008200
 8006424:	40020880 	.word	0x40020880

08006428 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	223f      	movs	r2, #63	@ 0x3f
 8006436:	4013      	ands	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800643e:	4694      	mov	ip, r2
 8006440:	4463      	add	r3, ip
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	001a      	movs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a07      	ldr	r2, [pc, #28]	@ (800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800644e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3b01      	subs	r3, #1
 8006454:	2203      	movs	r2, #3
 8006456:	4013      	ands	r3, r2
 8006458:	2201      	movs	r2, #1
 800645a:	409a      	lsls	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8006460:	46c0      	nop			@ (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b004      	add	sp, #16
 8006466:	bd80      	pop	{r7, pc}
 8006468:	1000823f 	.word	0x1000823f
 800646c:	40020940 	.word	0x40020940

08006470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800647e:	e147      	b.n	8006710 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2101      	movs	r1, #1
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4091      	lsls	r1, r2
 800648a:	000a      	movs	r2, r1
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d100      	bne.n	8006498 <HAL_GPIO_Init+0x28>
 8006496:	e138      	b.n	800670a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2203      	movs	r2, #3
 800649e:	4013      	ands	r3, r2
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d005      	beq.n	80064b0 <HAL_GPIO_Init+0x40>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2203      	movs	r2, #3
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d130      	bne.n	8006512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	2203      	movs	r2, #3
 80064bc:	409a      	lsls	r2, r3
 80064be:	0013      	movs	r3, r2
 80064c0:	43da      	mvns	r2, r3
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4013      	ands	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	409a      	lsls	r2, r3
 80064d2:	0013      	movs	r3, r2
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064e6:	2201      	movs	r2, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	409a      	lsls	r2, r3
 80064ec:	0013      	movs	r3, r2
 80064ee:	43da      	mvns	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4013      	ands	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	2201      	movs	r2, #1
 80064fe:	401a      	ands	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	409a      	lsls	r2, r3
 8006504:	0013      	movs	r3, r2
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2203      	movs	r2, #3
 8006518:	4013      	ands	r3, r2
 800651a:	2b03      	cmp	r3, #3
 800651c:	d017      	beq.n	800654e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	2203      	movs	r2, #3
 800652a:	409a      	lsls	r2, r3
 800652c:	0013      	movs	r3, r2
 800652e:	43da      	mvns	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4013      	ands	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	409a      	lsls	r2, r3
 8006540:	0013      	movs	r3, r2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2203      	movs	r2, #3
 8006554:	4013      	ands	r3, r2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d123      	bne.n	80065a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	08da      	lsrs	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3208      	adds	r2, #8
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	58d3      	ldr	r3, [r2, r3]
 8006566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2207      	movs	r2, #7
 800656c:	4013      	ands	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	220f      	movs	r2, #15
 8006572:	409a      	lsls	r2, r3
 8006574:	0013      	movs	r3, r2
 8006576:	43da      	mvns	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2107      	movs	r1, #7
 8006586:	400b      	ands	r3, r1
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	409a      	lsls	r2, r3
 800658c:	0013      	movs	r3, r2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	08da      	lsrs	r2, r3, #3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3208      	adds	r2, #8
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	6939      	ldr	r1, [r7, #16]
 80065a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	2203      	movs	r2, #3
 80065ae:	409a      	lsls	r2, r3
 80065b0:	0013      	movs	r3, r2
 80065b2:	43da      	mvns	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2203      	movs	r2, #3
 80065c0:	401a      	ands	r2, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	409a      	lsls	r2, r3
 80065c8:	0013      	movs	r3, r2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	23c0      	movs	r3, #192	@ 0xc0
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	4013      	ands	r3, r2
 80065e0:	d100      	bne.n	80065e4 <HAL_GPIO_Init+0x174>
 80065e2:	e092      	b.n	800670a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80065e4:	4a50      	ldr	r2, [pc, #320]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	3318      	adds	r3, #24
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	589b      	ldr	r3, [r3, r2]
 80065f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2203      	movs	r2, #3
 80065f6:	4013      	ands	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	220f      	movs	r2, #15
 80065fc:	409a      	lsls	r2, r3
 80065fe:	0013      	movs	r3, r2
 8006600:	43da      	mvns	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4013      	ands	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	23a0      	movs	r3, #160	@ 0xa0
 800660c:	05db      	lsls	r3, r3, #23
 800660e:	429a      	cmp	r2, r3
 8006610:	d013      	beq.n	800663a <HAL_GPIO_Init+0x1ca>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a45      	ldr	r2, [pc, #276]	@ (800672c <HAL_GPIO_Init+0x2bc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00d      	beq.n	8006636 <HAL_GPIO_Init+0x1c6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a44      	ldr	r2, [pc, #272]	@ (8006730 <HAL_GPIO_Init+0x2c0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d007      	beq.n	8006632 <HAL_GPIO_Init+0x1c2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a43      	ldr	r2, [pc, #268]	@ (8006734 <HAL_GPIO_Init+0x2c4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_GPIO_Init+0x1be>
 800662a:	2303      	movs	r3, #3
 800662c:	e006      	b.n	800663c <HAL_GPIO_Init+0x1cc>
 800662e:	2305      	movs	r3, #5
 8006630:	e004      	b.n	800663c <HAL_GPIO_Init+0x1cc>
 8006632:	2302      	movs	r3, #2
 8006634:	e002      	b.n	800663c <HAL_GPIO_Init+0x1cc>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_GPIO_Init+0x1cc>
 800663a:	2300      	movs	r3, #0
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	2103      	movs	r1, #3
 8006640:	400a      	ands	r2, r1
 8006642:	00d2      	lsls	r2, r2, #3
 8006644:	4093      	lsls	r3, r2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800664c:	4936      	ldr	r1, [pc, #216]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3318      	adds	r3, #24
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800665a:	4b33      	ldr	r3, [pc, #204]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	43da      	mvns	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	035b      	lsls	r3, r3, #13
 8006672:	4013      	ands	r3, r2
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800667e:	4b2a      	ldr	r3, [pc, #168]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006684:	4b28      	ldr	r3, [pc, #160]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	43da      	mvns	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	039b      	lsls	r3, r3, #14
 800669c:	4013      	ands	r3, r2
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80066ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 80066b0:	2384      	movs	r3, #132	@ 0x84
 80066b2:	58d3      	ldr	r3, [r2, r3]
 80066b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	43da      	mvns	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4013      	ands	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	2380      	movs	r3, #128	@ 0x80
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	4013      	ands	r3, r2
 80066ca:	d003      	beq.n	80066d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066d4:	4914      	ldr	r1, [pc, #80]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 80066d6:	2284      	movs	r2, #132	@ 0x84
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80066dc:	4a12      	ldr	r2, [pc, #72]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 80066de:	2380      	movs	r3, #128	@ 0x80
 80066e0:	58d3      	ldr	r3, [r2, r3]
 80066e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	43da      	mvns	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4013      	ands	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	2380      	movs	r3, #128	@ 0x80
 80066f4:	025b      	lsls	r3, r3, #9
 80066f6:	4013      	ands	r3, r2
 80066f8:	d003      	beq.n	8006702 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006702:	4909      	ldr	r1, [pc, #36]	@ (8006728 <HAL_GPIO_Init+0x2b8>)
 8006704:	2280      	movs	r2, #128	@ 0x80
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3301      	adds	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	40da      	lsrs	r2, r3
 8006718:	1e13      	subs	r3, r2, #0
 800671a:	d000      	beq.n	800671e <HAL_GPIO_Init+0x2ae>
 800671c:	e6b0      	b.n	8006480 <HAL_GPIO_Init+0x10>
  }
}
 800671e:	46c0      	nop			@ (mov r8, r8)
 8006720:	46c0      	nop			@ (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	b006      	add	sp, #24
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40021800 	.word	0x40021800
 800672c:	50000400 	.word	0x50000400
 8006730:	50000800 	.word	0x50000800
 8006734:	50000c00 	.word	0x50000c00

08006738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	000a      	movs	r2, r1
 8006742:	1cbb      	adds	r3, r7, #2
 8006744:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	1cba      	adds	r2, r7, #2
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	4013      	ands	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006752:	230f      	movs	r3, #15
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e003      	b.n	8006764 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800675c:	230f      	movs	r3, #15
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006764:	230f      	movs	r3, #15
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	781b      	ldrb	r3, [r3, #0]
}
 800676a:	0018      	movs	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	b004      	add	sp, #16
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	0008      	movs	r0, r1
 800677c:	0011      	movs	r1, r2
 800677e:	1cbb      	adds	r3, r7, #2
 8006780:	1c02      	adds	r2, r0, #0
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	1c7b      	adds	r3, r7, #1
 8006786:	1c0a      	adds	r2, r1, #0
 8006788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800678a:	1c7b      	adds	r3, r7, #1
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006792:	1cbb      	adds	r3, r7, #2
 8006794:	881a      	ldrh	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800679a:	e003      	b.n	80067a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800679c:	1cbb      	adds	r3, r7, #2
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067a4:	46c0      	nop			@ (mov r8, r8)
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	0002      	movs	r2, r0
 80067b4:	1dbb      	adds	r3, r7, #6
 80067b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80067b8:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	1dba      	adds	r2, r7, #6
 80067be:	8812      	ldrh	r2, [r2, #0]
 80067c0:	4013      	ands	r3, r2
 80067c2:	d008      	beq.n	80067d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80067c4:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067c6:	1dba      	adds	r2, r7, #6
 80067c8:	8812      	ldrh	r2, [r2, #0]
 80067ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80067cc:	1dbb      	adds	r3, r7, #6
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f815 	bl	8006800 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80067d6:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	1dba      	adds	r2, r7, #6
 80067dc:	8812      	ldrh	r2, [r2, #0]
 80067de:	4013      	ands	r3, r2
 80067e0:	d008      	beq.n	80067f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80067e2:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067e4:	1dba      	adds	r2, r7, #6
 80067e6:	8812      	ldrh	r2, [r2, #0]
 80067e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80067ea:	1dbb      	adds	r3, r7, #6
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f7fc fef2 	bl	80035d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40021800 	.word	0x40021800

08006800 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	0002      	movs	r2, r0
 8006808:	1dbb      	adds	r3, r7, #6
 800680a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800680c:	46c0      	nop			@ (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e08f      	b.n	8006946 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2241      	movs	r2, #65	@ 0x41
 800682a:	5c9b      	ldrb	r3, [r3, r2]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d107      	bne.n	8006842 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2240      	movs	r2, #64	@ 0x40
 8006836:	2100      	movs	r1, #0
 8006838:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f7fe f959 	bl	8004af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2241      	movs	r2, #65	@ 0x41
 8006846:	2124      	movs	r1, #36	@ 0x24
 8006848:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2101      	movs	r1, #1
 8006856:	438a      	bics	r2, r1
 8006858:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	493b      	ldr	r1, [pc, #236]	@ (8006950 <HAL_I2C_Init+0x13c>)
 8006864:	400a      	ands	r2, r1
 8006866:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4938      	ldr	r1, [pc, #224]	@ (8006954 <HAL_I2C_Init+0x140>)
 8006874:	400a      	ands	r2, r1
 8006876:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d108      	bne.n	8006892 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2180      	movs	r1, #128	@ 0x80
 800688a:	0209      	lsls	r1, r1, #8
 800688c:	430a      	orrs	r2, r1
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	e007      	b.n	80068a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2184      	movs	r1, #132	@ 0x84
 800689c:	0209      	lsls	r1, r1, #8
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d109      	bne.n	80068be <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2180      	movs	r1, #128	@ 0x80
 80068b6:	0109      	lsls	r1, r1, #4
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	e007      	b.n	80068ce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4923      	ldr	r1, [pc, #140]	@ (8006958 <HAL_I2C_Init+0x144>)
 80068ca:	400a      	ands	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4920      	ldr	r1, [pc, #128]	@ (800695c <HAL_I2C_Init+0x148>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	491a      	ldr	r1, [pc, #104]	@ (8006954 <HAL_I2C_Init+0x140>)
 80068ea:	400a      	ands	r2, r1
 80068ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69d9      	ldr	r1, [r3, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1a      	ldr	r2, [r3, #32]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2241      	movs	r2, #65	@ 0x41
 8006932:	2120      	movs	r1, #32
 8006934:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2242      	movs	r2, #66	@ 0x42
 8006940:	2100      	movs	r1, #0
 8006942:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	f0ffffff 	.word	0xf0ffffff
 8006954:	ffff7fff 	.word	0xffff7fff
 8006958:	fffff7ff 	.word	0xfffff7ff
 800695c:	02008000 	.word	0x02008000

08006960 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b089      	sub	sp, #36	@ 0x24
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	0008      	movs	r0, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	0019      	movs	r1, r3
 800696e:	230a      	movs	r3, #10
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	1c02      	adds	r2, r0, #0
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	2308      	movs	r3, #8
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	1c0a      	adds	r2, r1, #0
 800697c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2241      	movs	r2, #65	@ 0x41
 8006982:	5c9b      	ldrb	r3, [r3, r2]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b20      	cmp	r3, #32
 8006988:	d000      	beq.n	800698c <HAL_I2C_Master_Transmit+0x2c>
 800698a:	e10a      	b.n	8006ba2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2240      	movs	r2, #64	@ 0x40
 8006990:	5c9b      	ldrb	r3, [r3, r2]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_I2C_Master_Transmit+0x3a>
 8006996:	2302      	movs	r3, #2
 8006998:	e104      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2240      	movs	r2, #64	@ 0x40
 800699e:	2101      	movs	r1, #1
 80069a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069a2:	f7fe fc23 	bl	80051ec <HAL_GetTick>
 80069a6:	0003      	movs	r3, r0
 80069a8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069aa:	2380      	movs	r3, #128	@ 0x80
 80069ac:	0219      	lsls	r1, r3, #8
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2319      	movs	r3, #25
 80069b6:	2201      	movs	r2, #1
 80069b8:	f000 fbbc 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0ef      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2241      	movs	r2, #65	@ 0x41
 80069c8:	2121      	movs	r1, #33	@ 0x21
 80069ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2242      	movs	r2, #66	@ 0x42
 80069d0:	2110      	movs	r1, #16
 80069d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2208      	movs	r2, #8
 80069e4:	18ba      	adds	r2, r7, r2
 80069e6:	8812      	ldrh	r2, [r2, #0]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2bff      	cmp	r3, #255	@ 0xff
 80069f8:	d906      	bls.n	8006a08 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	22ff      	movs	r2, #255	@ 0xff
 80069fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006a00:	2380      	movs	r3, #128	@ 0x80
 8006a02:	045b      	lsls	r3, r3, #17
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e007      	b.n	8006a18 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006a12:	2380      	movs	r3, #128	@ 0x80
 8006a14:	049b      	lsls	r3, r3, #18
 8006a16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d027      	beq.n	8006a70 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	3301      	adds	r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	697c      	ldr	r4, [r7, #20]
 8006a5c:	230a      	movs	r3, #10
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	8819      	ldrh	r1, [r3, #0]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	4b51      	ldr	r3, [pc, #324]	@ (8006bac <HAL_I2C_Master_Transmit+0x24c>)
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	0023      	movs	r3, r4
 8006a6a:	f000 fddb 	bl	8007624 <I2C_TransferConfig>
 8006a6e:	e06f      	b.n	8006b50 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	697c      	ldr	r4, [r7, #20]
 8006a78:	230a      	movs	r3, #10
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	8819      	ldrh	r1, [r3, #0]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	4b4a      	ldr	r3, [pc, #296]	@ (8006bac <HAL_I2C_Master_Transmit+0x24c>)
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	0023      	movs	r3, r4
 8006a86:	f000 fdcd 	bl	8007624 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006a8a:	e061      	b.n	8006b50 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	0018      	movs	r0, r3
 8006a94:	f000 fba6 	bl	80071e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a98:	1e03      	subs	r3, r0, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e081      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03a      	beq.n	8006b50 <HAL_I2C_Master_Transmit+0x1f0>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d136      	bne.n	8006b50 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	0013      	movs	r3, r2
 8006aec:	2200      	movs	r2, #0
 8006aee:	2180      	movs	r1, #128	@ 0x80
 8006af0:	f000 fb20 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006af4:	1e03      	subs	r3, r0, #0
 8006af6:	d001      	beq.n	8006afc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e053      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2bff      	cmp	r3, #255	@ 0xff
 8006b04:	d911      	bls.n	8006b2a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	22ff      	movs	r2, #255	@ 0xff
 8006b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	2380      	movs	r3, #128	@ 0x80
 8006b14:	045c      	lsls	r4, r3, #17
 8006b16:	230a      	movs	r3, #10
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	8819      	ldrh	r1, [r3, #0]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	0023      	movs	r3, r4
 8006b24:	f000 fd7e 	bl	8007624 <I2C_TransferConfig>
 8006b28:	e012      	b.n	8006b50 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	2380      	movs	r3, #128	@ 0x80
 8006b3c:	049c      	lsls	r4, r3, #18
 8006b3e:	230a      	movs	r3, #10
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	8819      	ldrh	r1, [r3, #0]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	2300      	movs	r3, #0
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	f000 fd6a 	bl	8007624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d198      	bne.n	8006a8c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fb85 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b66:	1e03      	subs	r3, r0, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e01a      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2220      	movs	r2, #32
 8006b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	490b      	ldr	r1, [pc, #44]	@ (8006bb0 <HAL_I2C_Master_Transmit+0x250>)
 8006b82:	400a      	ands	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2241      	movs	r2, #65	@ 0x41
 8006b8a:	2120      	movs	r1, #32
 8006b8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2242      	movs	r2, #66	@ 0x42
 8006b92:	2100      	movs	r1, #0
 8006b94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2240      	movs	r2, #64	@ 0x40
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8006ba2:	2302      	movs	r3, #2
  }
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b007      	add	sp, #28
 8006baa:	bd90      	pop	{r4, r7, pc}
 8006bac:	80002000 	.word	0x80002000
 8006bb0:	fe00e800 	.word	0xfe00e800

08006bb4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b089      	sub	sp, #36	@ 0x24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	0008      	movs	r0, r1
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	0019      	movs	r1, r3
 8006bc2:	230a      	movs	r3, #10
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	1c02      	adds	r2, r0, #0
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	2308      	movs	r3, #8
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	1c0a      	adds	r2, r1, #0
 8006bd0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2241      	movs	r2, #65	@ 0x41
 8006bd6:	5c9b      	ldrb	r3, [r3, r2]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d000      	beq.n	8006be0 <HAL_I2C_Master_Receive+0x2c>
 8006bde:	e0e8      	b.n	8006db2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2240      	movs	r2, #64	@ 0x40
 8006be4:	5c9b      	ldrb	r3, [r3, r2]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_I2C_Master_Receive+0x3a>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0e2      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2240      	movs	r2, #64	@ 0x40
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bf6:	f7fe faf9 	bl	80051ec <HAL_GetTick>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bfe:	2380      	movs	r3, #128	@ 0x80
 8006c00:	0219      	lsls	r1, r3, #8
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2319      	movs	r3, #25
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f000 fa92 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006c10:	1e03      	subs	r3, r0, #0
 8006c12:	d001      	beq.n	8006c18 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0cd      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2241      	movs	r2, #65	@ 0x41
 8006c1c:	2122      	movs	r1, #34	@ 0x22
 8006c1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2242      	movs	r2, #66	@ 0x42
 8006c24:	2110      	movs	r1, #16
 8006c26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2208      	movs	r2, #8
 8006c38:	18ba      	adds	r2, r7, r2
 8006c3a:	8812      	ldrh	r2, [r2, #0]
 8006c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2bff      	cmp	r3, #255	@ 0xff
 8006c4c:	d911      	bls.n	8006c72 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	22ff      	movs	r2, #255	@ 0xff
 8006c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	2380      	movs	r3, #128	@ 0x80
 8006c5c:	045c      	lsls	r4, r3, #17
 8006c5e:	230a      	movs	r3, #10
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	8819      	ldrh	r1, [r3, #0]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4b55      	ldr	r3, [pc, #340]	@ (8006dbc <HAL_I2C_Master_Receive+0x208>)
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	0023      	movs	r3, r4
 8006c6c:	f000 fcda 	bl	8007624 <I2C_TransferConfig>
 8006c70:	e076      	b.n	8006d60 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	2380      	movs	r3, #128	@ 0x80
 8006c84:	049c      	lsls	r4, r3, #18
 8006c86:	230a      	movs	r3, #10
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	8819      	ldrh	r1, [r3, #0]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <HAL_I2C_Master_Receive+0x208>)
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	0023      	movs	r3, r4
 8006c94:	f000 fcc6 	bl	8007624 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006c98:	e062      	b.n	8006d60 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 fb29 	bl	80072f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ca6:	1e03      	subs	r3, r0, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e082      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d03a      	beq.n	8006d60 <HAL_I2C_Master_Receive+0x1ac>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d136      	bne.n	8006d60 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	0013      	movs	r3, r2
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2180      	movs	r1, #128	@ 0x80
 8006d00:	f000 fa18 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006d04:	1e03      	subs	r3, r0, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e053      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2bff      	cmp	r3, #255	@ 0xff
 8006d14:	d911      	bls.n	8006d3a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	22ff      	movs	r2, #255	@ 0xff
 8006d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	2380      	movs	r3, #128	@ 0x80
 8006d24:	045c      	lsls	r4, r3, #17
 8006d26:	230a      	movs	r3, #10
 8006d28:	18fb      	adds	r3, r7, r3
 8006d2a:	8819      	ldrh	r1, [r3, #0]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	0023      	movs	r3, r4
 8006d34:	f000 fc76 	bl	8007624 <I2C_TransferConfig>
 8006d38:	e012      	b.n	8006d60 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	2380      	movs	r3, #128	@ 0x80
 8006d4c:	049c      	lsls	r4, r3, #18
 8006d4e:	230a      	movs	r3, #10
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	8819      	ldrh	r1, [r3, #0]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	0023      	movs	r3, r4
 8006d5c:	f000 fc62 	bl	8007624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d197      	bne.n	8006c9a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	0018      	movs	r0, r3
 8006d72:	f000 fa7d 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d76:	1e03      	subs	r3, r0, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e01a      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2220      	movs	r2, #32
 8006d84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	490b      	ldr	r1, [pc, #44]	@ (8006dc0 <HAL_I2C_Master_Receive+0x20c>)
 8006d92:	400a      	ands	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2241      	movs	r2, #65	@ 0x41
 8006d9a:	2120      	movs	r1, #32
 8006d9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2242      	movs	r2, #66	@ 0x42
 8006da2:	2100      	movs	r1, #0
 8006da4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2240      	movs	r2, #64	@ 0x40
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e000      	b.n	8006db4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006db2:	2302      	movs	r3, #2
  }
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b007      	add	sp, #28
 8006dba:	bd90      	pop	{r4, r7, pc}
 8006dbc:	80002400 	.word	0x80002400
 8006dc0:	fe00e800 	.word	0xfe00e800

08006dc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b089      	sub	sp, #36	@ 0x24
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	000c      	movs	r4, r1
 8006dce:	0010      	movs	r0, r2
 8006dd0:	0019      	movs	r1, r3
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	1c22      	adds	r2, r4, #0
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	2308      	movs	r3, #8
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	1c02      	adds	r2, r0, #0
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	1dbb      	adds	r3, r7, #6
 8006de4:	1c0a      	adds	r2, r1, #0
 8006de6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2241      	movs	r2, #65	@ 0x41
 8006dec:	5c9b      	ldrb	r3, [r3, r2]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d000      	beq.n	8006df6 <HAL_I2C_Mem_Read+0x32>
 8006df4:	e110      	b.n	8007018 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_I2C_Mem_Read+0x42>
 8006dfc:	232c      	movs	r3, #44	@ 0x2c
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2280      	movs	r2, #128	@ 0x80
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e103      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2240      	movs	r2, #64	@ 0x40
 8006e16:	5c9b      	ldrb	r3, [r3, r2]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2C_Mem_Read+0x5c>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0fc      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2240      	movs	r2, #64	@ 0x40
 8006e24:	2101      	movs	r1, #1
 8006e26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e28:	f7fe f9e0 	bl	80051ec <HAL_GetTick>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e30:	2380      	movs	r3, #128	@ 0x80
 8006e32:	0219      	lsls	r1, r3, #8
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	2319      	movs	r3, #25
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f000 f979 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0e7      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2241      	movs	r2, #65	@ 0x41
 8006e4e:	2122      	movs	r1, #34	@ 0x22
 8006e50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2242      	movs	r2, #66	@ 0x42
 8006e56:	2140      	movs	r1, #64	@ 0x40
 8006e58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	222c      	movs	r2, #44	@ 0x2c
 8006e6a:	18ba      	adds	r2, r7, r2
 8006e6c:	8812      	ldrh	r2, [r2, #0]
 8006e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e76:	1dbb      	adds	r3, r7, #6
 8006e78:	881c      	ldrh	r4, [r3, #0]
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	230a      	movs	r3, #10
 8006e82:	18fb      	adds	r3, r7, r3
 8006e84:	8819      	ldrh	r1, [r3, #0]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	0023      	movs	r3, r4
 8006e92:	f000 f8cb 	bl	800702c <I2C_RequestMemoryRead>
 8006e96:	1e03      	subs	r3, r0, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2240      	movs	r2, #64	@ 0x40
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0b9      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2bff      	cmp	r3, #255	@ 0xff
 8006eae:	d911      	bls.n	8006ed4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	@ 0xff
 8006eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	2380      	movs	r3, #128	@ 0x80
 8006ebe:	045c      	lsls	r4, r3, #17
 8006ec0:	230a      	movs	r3, #10
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	8819      	ldrh	r1, [r3, #0]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	4b56      	ldr	r3, [pc, #344]	@ (8007024 <HAL_I2C_Mem_Read+0x260>)
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	0023      	movs	r3, r4
 8006ece:	f000 fba9 	bl	8007624 <I2C_TransferConfig>
 8006ed2:	e012      	b.n	8006efa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	2380      	movs	r3, #128	@ 0x80
 8006ee6:	049c      	lsls	r4, r3, #18
 8006ee8:	230a      	movs	r3, #10
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	8819      	ldrh	r1, [r3, #0]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8007024 <HAL_I2C_Mem_Read+0x260>)
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	0023      	movs	r3, r4
 8006ef6:	f000 fb95 	bl	8007624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	0013      	movs	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	2104      	movs	r1, #4
 8006f08:	f000 f914 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006f0c:	1e03      	subs	r3, r0, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e082      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d03a      	beq.n	8006fc6 <HAL_I2C_Mem_Read+0x202>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d136      	bne.n	8006fc6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	0013      	movs	r3, r2
 8006f62:	2200      	movs	r2, #0
 8006f64:	2180      	movs	r1, #128	@ 0x80
 8006f66:	f000 f8e5 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	1e03      	subs	r3, r0, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e053      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2bff      	cmp	r3, #255	@ 0xff
 8006f7a:	d911      	bls.n	8006fa0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	22ff      	movs	r2, #255	@ 0xff
 8006f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	2380      	movs	r3, #128	@ 0x80
 8006f8a:	045c      	lsls	r4, r3, #17
 8006f8c:	230a      	movs	r3, #10
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	8819      	ldrh	r1, [r3, #0]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	0023      	movs	r3, r4
 8006f9a:	f000 fb43 	bl	8007624 <I2C_TransferConfig>
 8006f9e:	e012      	b.n	8006fc6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	2380      	movs	r3, #128	@ 0x80
 8006fb2:	049c      	lsls	r4, r3, #18
 8006fb4:	230a      	movs	r3, #10
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	8819      	ldrh	r1, [r3, #0]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	0023      	movs	r3, r4
 8006fc2:	f000 fb2f 	bl	8007624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d194      	bne.n	8006efa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f94a 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fdc:	1e03      	subs	r3, r0, #0
 8006fde:	d001      	beq.n	8006fe4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e01a      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	490c      	ldr	r1, [pc, #48]	@ (8007028 <HAL_I2C_Mem_Read+0x264>)
 8006ff8:	400a      	ands	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2241      	movs	r2, #65	@ 0x41
 8007000:	2120      	movs	r1, #32
 8007002:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2242      	movs	r2, #66	@ 0x42
 8007008:	2100      	movs	r1, #0
 800700a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b007      	add	sp, #28
 8007020:	bd90      	pop	{r4, r7, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	80002400 	.word	0x80002400
 8007028:	fe00e800 	.word	0xfe00e800

0800702c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800702c:	b5b0      	push	{r4, r5, r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	000c      	movs	r4, r1
 8007036:	0010      	movs	r0, r2
 8007038:	0019      	movs	r1, r3
 800703a:	250a      	movs	r5, #10
 800703c:	197b      	adds	r3, r7, r5
 800703e:	1c22      	adds	r2, r4, #0
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	2308      	movs	r3, #8
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	1c02      	adds	r2, r0, #0
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	1dbb      	adds	r3, r7, #6
 800704c:	1c0a      	adds	r2, r1, #0
 800704e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007050:	1dbb      	adds	r3, r7, #6
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	197b      	adds	r3, r7, r5
 8007058:	8819      	ldrh	r1, [r3, #0]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	4b23      	ldr	r3, [pc, #140]	@ (80070ec <I2C_RequestMemoryRead+0xc0>)
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	f000 fadf 	bl	8007624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007068:	6a39      	ldr	r1, [r7, #32]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	0018      	movs	r0, r3
 800706e:	f000 f8b9 	bl	80071e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007072:	1e03      	subs	r3, r0, #0
 8007074:	d001      	beq.n	800707a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e033      	b.n	80070e2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800707a:	1dbb      	adds	r3, r7, #6
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d107      	bne.n	8007092 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007082:	2308      	movs	r3, #8
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007090:	e019      	b.n	80070c6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007092:	2308      	movs	r3, #8
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	0a1b      	lsrs	r3, r3, #8
 800709a:	b29b      	uxth	r3, r3
 800709c:	b2da      	uxtb	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a6:	6a39      	ldr	r1, [r7, #32]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f000 f89a 	bl	80071e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d001      	beq.n	80070b8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e014      	b.n	80070e2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070b8:	2308      	movs	r3, #8
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80070c6:	6a3a      	ldr	r2, [r7, #32]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	0013      	movs	r3, r2
 80070d0:	2200      	movs	r2, #0
 80070d2:	2140      	movs	r1, #64	@ 0x40
 80070d4:	f000 f82e 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 80070d8:	1e03      	subs	r3, r0, #0
 80070da:	d001      	beq.n	80070e0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b004      	add	sp, #16
 80070e8:	bdb0      	pop	{r4, r5, r7, pc}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	80002000 	.word	0x80002000

080070f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2202      	movs	r2, #2
 8007100:	4013      	ands	r3, r2
 8007102:	2b02      	cmp	r3, #2
 8007104:	d103      	bne.n	800710e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2201      	movs	r2, #1
 8007116:	4013      	ands	r3, r2
 8007118:	2b01      	cmp	r3, #1
 800711a:	d007      	beq.n	800712c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2101      	movs	r1, #1
 8007128:	430a      	orrs	r2, r1
 800712a:	619a      	str	r2, [r3, #24]
  }
}
 800712c:	46c0      	nop			@ (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	b002      	add	sp, #8
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	1dfb      	adds	r3, r7, #7
 8007142:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007144:	e03a      	b.n	80071bc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	0018      	movs	r0, r3
 800714e:	f000 f971 	bl	8007434 <I2C_IsErrorOccurred>
 8007152:	1e03      	subs	r3, r0, #0
 8007154:	d001      	beq.n	800715a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e040      	b.n	80071dc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	d02d      	beq.n	80071bc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007160:	f7fe f844 	bl	80051ec <HAL_GetTick>
 8007164:	0002      	movs	r2, r0
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d302      	bcc.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x42>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d122      	bne.n	80071bc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	425a      	negs	r2, r3
 8007186:	4153      	adcs	r3, r2
 8007188:	b2db      	uxtb	r3, r3
 800718a:	001a      	movs	r2, r3
 800718c:	1dfb      	adds	r3, r7, #7
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d113      	bne.n	80071bc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007198:	2220      	movs	r2, #32
 800719a:	431a      	orrs	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2241      	movs	r2, #65	@ 0x41
 80071a4:	2120      	movs	r1, #32
 80071a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2242      	movs	r2, #66	@ 0x42
 80071ac:	2100      	movs	r1, #0
 80071ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2240      	movs	r2, #64	@ 0x40
 80071b4:	2100      	movs	r1, #0
 80071b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e00f      	b.n	80071dc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	425a      	negs	r2, r3
 80071cc:	4153      	adcs	r3, r2
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	001a      	movs	r2, r3
 80071d2:	1dfb      	adds	r3, r7, #7
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d0b5      	beq.n	8007146 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b004      	add	sp, #16
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071f0:	e032      	b.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	0018      	movs	r0, r3
 80071fa:	f000 f91b 	bl	8007434 <I2C_IsErrorOccurred>
 80071fe:	1e03      	subs	r3, r0, #0
 8007200:	d001      	beq.n	8007206 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e030      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	3301      	adds	r3, #1
 800720a:	d025      	beq.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720c:	f7fd ffee 	bl	80051ec <HAL_GetTick>
 8007210:	0002      	movs	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d302      	bcc.n	8007222 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d11a      	bne.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2202      	movs	r2, #2
 800722a:	4013      	ands	r3, r2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d013      	beq.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007234:	2220      	movs	r2, #32
 8007236:	431a      	orrs	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2241      	movs	r2, #65	@ 0x41
 8007240:	2120      	movs	r1, #32
 8007242:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2242      	movs	r2, #66	@ 0x42
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2240      	movs	r2, #64	@ 0x40
 8007250:	2100      	movs	r1, #0
 8007252:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e007      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2202      	movs	r2, #2
 8007260:	4013      	ands	r3, r2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d1c5      	bne.n	80071f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b004      	add	sp, #16
 800726e:	bd80      	pop	{r7, pc}

08007270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727c:	e02f      	b.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 f8d5 	bl	8007434 <I2C_IsErrorOccurred>
 800728a:	1e03      	subs	r3, r0, #0
 800728c:	d001      	beq.n	8007292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e02d      	b.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fd ffab 	bl	80051ec <HAL_GetTick>
 8007296:	0002      	movs	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11a      	bne.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2220      	movs	r2, #32
 80072b0:	4013      	ands	r3, r2
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d013      	beq.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	2220      	movs	r2, #32
 80072bc:	431a      	orrs	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2241      	movs	r2, #65	@ 0x41
 80072c6:	2120      	movs	r1, #32
 80072c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2242      	movs	r2, #66	@ 0x42
 80072ce:	2100      	movs	r1, #0
 80072d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2240      	movs	r2, #64	@ 0x40
 80072d6:	2100      	movs	r1, #0
 80072d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e007      	b.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2220      	movs	r2, #32
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d1c8      	bne.n	800727e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b004      	add	sp, #16
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007304:	2317      	movs	r3, #23
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800730c:	e07b      	b.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	0018      	movs	r0, r3
 8007316:	f000 f88d 	bl	8007434 <I2C_IsErrorOccurred>
 800731a:	1e03      	subs	r3, r0, #0
 800731c:	d003      	beq.n	8007326 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800731e:	2317      	movs	r3, #23
 8007320:	18fb      	adds	r3, r7, r3
 8007322:	2201      	movs	r2, #1
 8007324:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	2220      	movs	r2, #32
 800732e:	4013      	ands	r3, r2
 8007330:	2b20      	cmp	r3, #32
 8007332:	d140      	bne.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007334:	2117      	movs	r1, #23
 8007336:	187b      	adds	r3, r7, r1
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d13b      	bne.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	2204      	movs	r2, #4
 8007346:	4013      	ands	r3, r2
 8007348:	2b04      	cmp	r3, #4
 800734a:	d106      	bne.n	800735a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007354:	187b      	adds	r3, r7, r1
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2210      	movs	r2, #16
 8007362:	4013      	ands	r3, r2
 8007364:	2b10      	cmp	r3, #16
 8007366:	d123      	bne.n	80073b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2210      	movs	r2, #16
 800736e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2204      	movs	r2, #4
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2220      	movs	r2, #32
 800737c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4929      	ldr	r1, [pc, #164]	@ (8007430 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800738a:	400a      	ands	r2, r1
 800738c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2241      	movs	r2, #65	@ 0x41
 8007392:	2120      	movs	r1, #32
 8007394:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2242      	movs	r2, #66	@ 0x42
 800739a:	2100      	movs	r1, #0
 800739c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2240      	movs	r2, #64	@ 0x40
 80073a2:	2100      	movs	r1, #0
 80073a4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80073a6:	2317      	movs	r3, #23
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	2201      	movs	r2, #1
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80073b6:	f7fd ff19 	bl	80051ec <HAL_GetTick>
 80073ba:	0002      	movs	r2, r0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11c      	bne.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80073cc:	2017      	movs	r0, #23
 80073ce:	183b      	adds	r3, r7, r0
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d117      	bne.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2204      	movs	r2, #4
 80073de:	4013      	ands	r3, r2
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d010      	beq.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e8:	2220      	movs	r2, #32
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2241      	movs	r2, #65	@ 0x41
 80073f4:	2120      	movs	r1, #32
 80073f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2240      	movs	r2, #64	@ 0x40
 80073fc:	2100      	movs	r1, #0
 80073fe:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007400:	183b      	adds	r3, r7, r0
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2204      	movs	r2, #4
 800740e:	4013      	ands	r3, r2
 8007410:	2b04      	cmp	r3, #4
 8007412:	d005      	beq.n	8007420 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007414:	2317      	movs	r3, #23
 8007416:	18fb      	adds	r3, r7, r3
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d100      	bne.n	8007420 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800741e:	e776      	b.n	800730e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007420:	2317      	movs	r3, #23
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	781b      	ldrb	r3, [r3, #0]
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b006      	add	sp, #24
 800742c:	bd80      	pop	{r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007440:	2327      	movs	r3, #39	@ 0x27
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2210      	movs	r2, #16
 800745c:	4013      	ands	r3, r2
 800745e:	d100      	bne.n	8007462 <I2C_IsErrorOccurred+0x2e>
 8007460:	e079      	b.n	8007556 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2210      	movs	r2, #16
 8007468:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800746a:	e057      	b.n	800751c <I2C_IsErrorOccurred+0xe8>
 800746c:	2227      	movs	r2, #39	@ 0x27
 800746e:	18bb      	adds	r3, r7, r2
 8007470:	18ba      	adds	r2, r7, r2
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3301      	adds	r3, #1
 800747a:	d04f      	beq.n	800751c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800747c:	f7fd feb6 	bl	80051ec <HAL_GetTick>
 8007480:	0002      	movs	r2, r0
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <I2C_IsErrorOccurred+0x5e>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d144      	bne.n	800751c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	01db      	lsls	r3, r3, #7
 800749c:	4013      	ands	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074a0:	2013      	movs	r0, #19
 80074a2:	183b      	adds	r3, r7, r0
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	2142      	movs	r1, #66	@ 0x42
 80074a8:	5c52      	ldrb	r2, [r2, r1]
 80074aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	401a      	ands	r2, r3
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	429a      	cmp	r2, r3
 80074be:	d126      	bne.n	800750e <I2C_IsErrorOccurred+0xda>
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	2380      	movs	r3, #128	@ 0x80
 80074c4:	01db      	lsls	r3, r3, #7
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d021      	beq.n	800750e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d01d      	beq.n	800750e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2180      	movs	r1, #128	@ 0x80
 80074de:	01c9      	lsls	r1, r1, #7
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074e4:	f7fd fe82 	bl	80051ec <HAL_GetTick>
 80074e8:	0003      	movs	r3, r0
 80074ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ec:	e00f      	b.n	800750e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074ee:	f7fd fe7d 	bl	80051ec <HAL_GetTick>
 80074f2:	0002      	movs	r2, r0
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b19      	cmp	r3, #25
 80074fa:	d908      	bls.n	800750e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2220      	movs	r2, #32
 8007500:	4313      	orrs	r3, r2
 8007502:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007504:	2327      	movs	r3, #39	@ 0x27
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	2201      	movs	r2, #1
 800750a:	701a      	strb	r2, [r3, #0]

              break;
 800750c:	e006      	b.n	800751c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2220      	movs	r2, #32
 8007516:	4013      	ands	r3, r2
 8007518:	2b20      	cmp	r3, #32
 800751a:	d1e8      	bne.n	80074ee <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	2220      	movs	r2, #32
 8007524:	4013      	ands	r3, r2
 8007526:	2b20      	cmp	r3, #32
 8007528:	d004      	beq.n	8007534 <I2C_IsErrorOccurred+0x100>
 800752a:	2327      	movs	r3, #39	@ 0x27
 800752c:	18fb      	adds	r3, r7, r3
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d09b      	beq.n	800746c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007534:	2327      	movs	r3, #39	@ 0x27
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2220      	movs	r2, #32
 8007544:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	2204      	movs	r2, #4
 800754a:	4313      	orrs	r3, r2
 800754c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800754e:	2327      	movs	r3, #39	@ 0x27
 8007550:	18fb      	adds	r3, r7, r3
 8007552:	2201      	movs	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	2380      	movs	r3, #128	@ 0x80
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4013      	ands	r3, r2
 8007566:	d00c      	beq.n	8007582 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	2201      	movs	r2, #1
 800756c:	4313      	orrs	r3, r2
 800756e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2280      	movs	r2, #128	@ 0x80
 8007576:	0052      	lsls	r2, r2, #1
 8007578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800757a:	2327      	movs	r3, #39	@ 0x27
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	2380      	movs	r3, #128	@ 0x80
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4013      	ands	r3, r2
 800758a:	d00c      	beq.n	80075a6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2208      	movs	r2, #8
 8007590:	4313      	orrs	r3, r2
 8007592:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2280      	movs	r2, #128	@ 0x80
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800759e:	2327      	movs	r3, #39	@ 0x27
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2201      	movs	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	2380      	movs	r3, #128	@ 0x80
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4013      	ands	r3, r2
 80075ae:	d00c      	beq.n	80075ca <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	2202      	movs	r2, #2
 80075b4:	4313      	orrs	r3, r2
 80075b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2280      	movs	r2, #128	@ 0x80
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075c2:	2327      	movs	r3, #39	@ 0x27
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80075ca:	2327      	movs	r3, #39	@ 0x27
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01d      	beq.n	8007610 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7ff fd8a 	bl	80070f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	490e      	ldr	r1, [pc, #56]	@ (8007620 <I2C_IsErrorOccurred+0x1ec>)
 80075e8:	400a      	ands	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2241      	movs	r2, #65	@ 0x41
 80075fc:	2120      	movs	r1, #32
 80075fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2242      	movs	r2, #66	@ 0x42
 8007604:	2100      	movs	r1, #0
 8007606:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2240      	movs	r2, #64	@ 0x40
 800760c:	2100      	movs	r1, #0
 800760e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007610:	2327      	movs	r3, #39	@ 0x27
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	781b      	ldrb	r3, [r3, #0]
}
 8007616:	0018      	movs	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	b00a      	add	sp, #40	@ 0x28
 800761c:	bd80      	pop	{r7, pc}
 800761e:	46c0      	nop			@ (mov r8, r8)
 8007620:	fe00e800 	.word	0xfe00e800

08007624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	0008      	movs	r0, r1
 800762e:	0011      	movs	r1, r2
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	240a      	movs	r4, #10
 8007634:	193b      	adds	r3, r7, r4
 8007636:	1c02      	adds	r2, r0, #0
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	2009      	movs	r0, #9
 800763c:	183b      	adds	r3, r7, r0
 800763e:	1c0a      	adds	r2, r1, #0
 8007640:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007642:	193b      	adds	r3, r7, r4
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	059b      	lsls	r3, r3, #22
 8007648:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800764a:	183b      	adds	r3, r7, r0
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	0419      	lsls	r1, r3, #16
 8007650:	23ff      	movs	r3, #255	@ 0xff
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007656:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	4313      	orrs	r3, r2
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800766e:	0d51      	lsrs	r1, r2, #21
 8007670:	2280      	movs	r2, #128	@ 0x80
 8007672:	00d2      	lsls	r2, r2, #3
 8007674:	400a      	ands	r2, r1
 8007676:	4907      	ldr	r1, [pc, #28]	@ (8007694 <I2C_TransferConfig+0x70>)
 8007678:	430a      	orrs	r2, r1
 800767a:	43d2      	mvns	r2, r2
 800767c:	401a      	ands	r2, r3
 800767e:	0011      	movs	r1, r2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	46bd      	mov	sp, r7
 800768e:	b007      	add	sp, #28
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	03ff63ff 	.word	0x03ff63ff

08007698 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2241      	movs	r2, #65	@ 0x41
 80076a6:	5c9b      	ldrb	r3, [r3, r2]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d138      	bne.n	8007720 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2240      	movs	r2, #64	@ 0x40
 80076b2:	5c9b      	ldrb	r3, [r3, r2]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e032      	b.n	8007722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2240      	movs	r2, #64	@ 0x40
 80076c0:	2101      	movs	r1, #1
 80076c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2241      	movs	r2, #65	@ 0x41
 80076c8:	2124      	movs	r1, #36	@ 0x24
 80076ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2101      	movs	r1, #1
 80076d8:	438a      	bics	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4911      	ldr	r1, [pc, #68]	@ (800772c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80076e8:	400a      	ands	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6819      	ldr	r1, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2101      	movs	r1, #1
 8007708:	430a      	orrs	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2241      	movs	r2, #65	@ 0x41
 8007710:	2120      	movs	r1, #32
 8007712:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2240      	movs	r2, #64	@ 0x40
 8007718:	2100      	movs	r1, #0
 800771a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	e000      	b.n	8007722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007720:	2302      	movs	r3, #2
  }
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	ffffefff 	.word	0xffffefff

08007730 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2241      	movs	r2, #65	@ 0x41
 800773e:	5c9b      	ldrb	r3, [r3, r2]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b20      	cmp	r3, #32
 8007744:	d139      	bne.n	80077ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2240      	movs	r2, #64	@ 0x40
 800774a:	5c9b      	ldrb	r3, [r3, r2]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007750:	2302      	movs	r3, #2
 8007752:	e033      	b.n	80077bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2240      	movs	r2, #64	@ 0x40
 8007758:	2101      	movs	r1, #1
 800775a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2241      	movs	r2, #65	@ 0x41
 8007760:	2124      	movs	r1, #36	@ 0x24
 8007762:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2101      	movs	r1, #1
 8007770:	438a      	bics	r2, r1
 8007772:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4a11      	ldr	r2, [pc, #68]	@ (80077c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007780:	4013      	ands	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2101      	movs	r1, #1
 80077a2:	430a      	orrs	r2, r1
 80077a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2241      	movs	r2, #65	@ 0x41
 80077aa:	2120      	movs	r1, #32
 80077ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2240      	movs	r2, #64	@ 0x40
 80077b2:	2100      	movs	r1, #0
 80077b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b004      	add	sp, #16
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	fffff0ff 	.word	0xfffff0ff

080077c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80077d0:	4b19      	ldr	r3, [pc, #100]	@ (8007838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a19      	ldr	r2, [pc, #100]	@ (800783c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	0019      	movs	r1, r3
 80077da:	4b17      	ldr	r3, [pc, #92]	@ (8007838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	430a      	orrs	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d11f      	bne.n	800782c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80077ec:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	0013      	movs	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	189b      	adds	r3, r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4912      	ldr	r1, [pc, #72]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80077fa:	0018      	movs	r0, r3
 80077fc:	f7f8 fc9c 	bl	8000138 <__udivsi3>
 8007800:	0003      	movs	r3, r0
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007806:	e008      	b.n	800781a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b01      	subs	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e001      	b.n	800781a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e009      	b.n	800782e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800781a:	4b07      	ldr	r3, [pc, #28]	@ (8007838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	2380      	movs	r3, #128	@ 0x80
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	401a      	ands	r2, r3
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	429a      	cmp	r2, r3
 800782a:	d0ed      	beq.n	8007808 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	0018      	movs	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	b004      	add	sp, #16
 8007834:	bd80      	pop	{r7, pc}
 8007836:	46c0      	nop			@ (mov r8, r8)
 8007838:	40007000 	.word	0x40007000
 800783c:	fffff9ff 	.word	0xfffff9ff
 8007840:	20000010 	.word	0x20000010
 8007844:	000f4240 	.word	0x000f4240

08007848 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800784c:	4b03      	ldr	r3, [pc, #12]	@ (800785c <LL_RCC_GetAPB1Prescaler+0x14>)
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	23e0      	movs	r3, #224	@ 0xe0
 8007852:	01db      	lsls	r3, r3, #7
 8007854:	4013      	ands	r3, r2
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40021000 	.word	0x40021000

08007860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e2f3      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2201      	movs	r2, #1
 8007878:	4013      	ands	r3, r2
 800787a:	d100      	bne.n	800787e <HAL_RCC_OscConfig+0x1e>
 800787c:	e07c      	b.n	8007978 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800787e:	4bc3      	ldr	r3, [pc, #780]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2238      	movs	r2, #56	@ 0x38
 8007884:	4013      	ands	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007888:	4bc0      	ldr	r3, [pc, #768]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2203      	movs	r2, #3
 800788e:	4013      	ands	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b10      	cmp	r3, #16
 8007896:	d102      	bne.n	800789e <HAL_RCC_OscConfig+0x3e>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d002      	beq.n	80078a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d10b      	bne.n	80078bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a4:	4bb9      	ldr	r3, [pc, #740]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	029b      	lsls	r3, r3, #10
 80078ac:	4013      	ands	r3, r2
 80078ae:	d062      	beq.n	8007976 <HAL_RCC_OscConfig+0x116>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d15e      	bne.n	8007976 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e2ce      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	2380      	movs	r3, #128	@ 0x80
 80078c2:	025b      	lsls	r3, r3, #9
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_OscConfig+0x78>
 80078c8:	4bb0      	ldr	r3, [pc, #704]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	4baf      	ldr	r3, [pc, #700]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078ce:	2180      	movs	r1, #128	@ 0x80
 80078d0:	0249      	lsls	r1, r1, #9
 80078d2:	430a      	orrs	r2, r1
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e020      	b.n	800791a <HAL_RCC_OscConfig+0xba>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	23a0      	movs	r3, #160	@ 0xa0
 80078de:	02db      	lsls	r3, r3, #11
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d10e      	bne.n	8007902 <HAL_RCC_OscConfig+0xa2>
 80078e4:	4ba9      	ldr	r3, [pc, #676]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4ba8      	ldr	r3, [pc, #672]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078ea:	2180      	movs	r1, #128	@ 0x80
 80078ec:	02c9      	lsls	r1, r1, #11
 80078ee:	430a      	orrs	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	4ba6      	ldr	r3, [pc, #664]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4ba5      	ldr	r3, [pc, #660]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80078f8:	2180      	movs	r1, #128	@ 0x80
 80078fa:	0249      	lsls	r1, r1, #9
 80078fc:	430a      	orrs	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e00b      	b.n	800791a <HAL_RCC_OscConfig+0xba>
 8007902:	4ba2      	ldr	r3, [pc, #648]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4ba1      	ldr	r3, [pc, #644]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007908:	49a1      	ldr	r1, [pc, #644]	@ (8007b90 <HAL_RCC_OscConfig+0x330>)
 800790a:	400a      	ands	r2, r1
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	4b9f      	ldr	r3, [pc, #636]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b9e      	ldr	r3, [pc, #632]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007914:	499f      	ldr	r1, [pc, #636]	@ (8007b94 <HAL_RCC_OscConfig+0x334>)
 8007916:	400a      	ands	r2, r1
 8007918:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d014      	beq.n	800794c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fd fc63 	bl	80051ec <HAL_GetTick>
 8007926:	0003      	movs	r3, r0
 8007928:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800792c:	f7fd fc5e 	bl	80051ec <HAL_GetTick>
 8007930:	0002      	movs	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	@ 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e28d      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800793e:	4b93      	ldr	r3, [pc, #588]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	2380      	movs	r3, #128	@ 0x80
 8007944:	029b      	lsls	r3, r3, #10
 8007946:	4013      	ands	r3, r2
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0xcc>
 800794a:	e015      	b.n	8007978 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794c:	f7fd fc4e 	bl	80051ec <HAL_GetTick>
 8007950:	0003      	movs	r3, r0
 8007952:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007956:	f7fd fc49 	bl	80051ec <HAL_GetTick>
 800795a:	0002      	movs	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b64      	cmp	r3, #100	@ 0x64
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e278      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007968:	4b88      	ldr	r3, [pc, #544]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	029b      	lsls	r3, r3, #10
 8007970:	4013      	ands	r3, r2
 8007972:	d1f0      	bne.n	8007956 <HAL_RCC_OscConfig+0xf6>
 8007974:	e000      	b.n	8007978 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007976:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2202      	movs	r2, #2
 800797e:	4013      	ands	r3, r2
 8007980:	d100      	bne.n	8007984 <HAL_RCC_OscConfig+0x124>
 8007982:	e099      	b.n	8007ab8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007984:	4b81      	ldr	r3, [pc, #516]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2238      	movs	r2, #56	@ 0x38
 800798a:	4013      	ands	r3, r2
 800798c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800798e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2203      	movs	r2, #3
 8007994:	4013      	ands	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b10      	cmp	r3, #16
 800799c:	d102      	bne.n	80079a4 <HAL_RCC_OscConfig+0x144>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d002      	beq.n	80079aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d135      	bne.n	8007a16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079aa:	4b78      	ldr	r3, [pc, #480]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	2380      	movs	r3, #128	@ 0x80
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4013      	ands	r3, r2
 80079b4:	d005      	beq.n	80079c2 <HAL_RCC_OscConfig+0x162>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e24b      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c2:	4b72      	ldr	r3, [pc, #456]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4a74      	ldr	r2, [pc, #464]	@ (8007b98 <HAL_RCC_OscConfig+0x338>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	0019      	movs	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	021a      	lsls	r2, r3, #8
 80079d2:	4b6e      	ldr	r3, [pc, #440]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079d4:	430a      	orrs	r2, r1
 80079d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d112      	bne.n	8007a04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80079de:	4b6b      	ldr	r3, [pc, #428]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a6e      	ldr	r2, [pc, #440]	@ (8007b9c <HAL_RCC_OscConfig+0x33c>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	0019      	movs	r1, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	4b67      	ldr	r3, [pc, #412]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80079f2:	4b66      	ldr	r3, [pc, #408]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	0adb      	lsrs	r3, r3, #11
 80079f8:	2207      	movs	r2, #7
 80079fa:	4013      	ands	r3, r2
 80079fc:	4a68      	ldr	r2, [pc, #416]	@ (8007ba0 <HAL_RCC_OscConfig+0x340>)
 80079fe:	40da      	lsrs	r2, r3
 8007a00:	4b68      	ldr	r3, [pc, #416]	@ (8007ba4 <HAL_RCC_OscConfig+0x344>)
 8007a02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a04:	4b68      	ldr	r3, [pc, #416]	@ (8007ba8 <HAL_RCC_OscConfig+0x348>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7fd fb93 	bl	8005134 <HAL_InitTick>
 8007a0e:	1e03      	subs	r3, r0, #0
 8007a10:	d051      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e221      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d030      	beq.n	8007a80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a5e      	ldr	r2, [pc, #376]	@ (8007b9c <HAL_RCC_OscConfig+0x33c>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	0019      	movs	r1, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	4b57      	ldr	r3, [pc, #348]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007a32:	4b56      	ldr	r3, [pc, #344]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b55      	ldr	r3, [pc, #340]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a38:	2180      	movs	r1, #128	@ 0x80
 8007a3a:	0049      	lsls	r1, r1, #1
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7fd fbd4 	bl	80051ec <HAL_GetTick>
 8007a44:	0003      	movs	r3, r0
 8007a46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4a:	f7fd fbcf 	bl	80051ec <HAL_GetTick>
 8007a4e:	0002      	movs	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e1fe      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2380      	movs	r3, #128	@ 0x80
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4013      	ands	r3, r2
 8007a66:	d0f0      	beq.n	8007a4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a68:	4b48      	ldr	r3, [pc, #288]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8007b98 <HAL_RCC_OscConfig+0x338>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	0019      	movs	r1, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	4b44      	ldr	r3, [pc, #272]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	e01b      	b.n	8007ab8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007a80:	4b42      	ldr	r3, [pc, #264]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b41      	ldr	r3, [pc, #260]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007a86:	4949      	ldr	r1, [pc, #292]	@ (8007bac <HAL_RCC_OscConfig+0x34c>)
 8007a88:	400a      	ands	r2, r1
 8007a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fd fbae 	bl	80051ec <HAL_GetTick>
 8007a90:	0003      	movs	r3, r0
 8007a92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a96:	f7fd fba9 	bl	80051ec <HAL_GetTick>
 8007a9a:	0002      	movs	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e1d8      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aa8:	4b38      	ldr	r3, [pc, #224]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	2380      	movs	r3, #128	@ 0x80
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	d1f0      	bne.n	8007a96 <HAL_RCC_OscConfig+0x236>
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2208      	movs	r2, #8
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d047      	beq.n	8007b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007ac2:	4b32      	ldr	r3, [pc, #200]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2238      	movs	r2, #56	@ 0x38
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b18      	cmp	r3, #24
 8007acc:	d10a      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007ace:	4b2f      	ldr	r3, [pc, #188]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	d03c      	beq.n	8007b52 <HAL_RCC_OscConfig+0x2f2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d138      	bne.n	8007b52 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e1ba      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007aec:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007aee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007af0:	4b26      	ldr	r3, [pc, #152]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007af2:	2101      	movs	r1, #1
 8007af4:	430a      	orrs	r2, r1
 8007af6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fd fb78 	bl	80051ec <HAL_GetTick>
 8007afc:	0003      	movs	r3, r0
 8007afe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b02:	f7fd fb73 	bl	80051ec <HAL_GetTick>
 8007b06:	0002      	movs	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e1a2      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b14:	4b1d      	ldr	r3, [pc, #116]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b18:	2202      	movs	r2, #2
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d0f1      	beq.n	8007b02 <HAL_RCC_OscConfig+0x2a2>
 8007b1e:	e018      	b.n	8007b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007b20:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007b24:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b26:	2101      	movs	r1, #1
 8007b28:	438a      	bics	r2, r1
 8007b2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fd fb5e 	bl	80051ec <HAL_GetTick>
 8007b30:	0003      	movs	r3, r0
 8007b32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b34:	e008      	b.n	8007b48 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b36:	f7fd fb59 	bl	80051ec <HAL_GetTick>
 8007b3a:	0002      	movs	r2, r0
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e188      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b48:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	4013      	ands	r3, r2
 8007b50:	d1f1      	bne.n	8007b36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2204      	movs	r2, #4
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d100      	bne.n	8007b5e <HAL_RCC_OscConfig+0x2fe>
 8007b5c:	e0c6      	b.n	8007cec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	231f      	movs	r3, #31
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007b66:	4b09      	ldr	r3, [pc, #36]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2238      	movs	r2, #56	@ 0x38
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d11e      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007b72:	4b06      	ldr	r3, [pc, #24]	@ (8007b8c <HAL_RCC_OscConfig+0x32c>)
 8007b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b76:	2202      	movs	r2, #2
 8007b78:	4013      	ands	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <HAL_RCC_OscConfig+0x31e>
 8007b7c:	e0b6      	b.n	8007cec <HAL_RCC_OscConfig+0x48c>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d000      	beq.n	8007b88 <HAL_RCC_OscConfig+0x328>
 8007b86:	e0b1      	b.n	8007cec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e166      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	fffeffff 	.word	0xfffeffff
 8007b94:	fffbffff 	.word	0xfffbffff
 8007b98:	ffff80ff 	.word	0xffff80ff
 8007b9c:	ffffc7ff 	.word	0xffffc7ff
 8007ba0:	00f42400 	.word	0x00f42400
 8007ba4:	20000010 	.word	0x20000010
 8007ba8:	20000014 	.word	0x20000014
 8007bac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bb0:	4bac      	ldr	r3, [pc, #688]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bb4:	2380      	movs	r3, #128	@ 0x80
 8007bb6:	055b      	lsls	r3, r3, #21
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d101      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x360>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <HAL_RCC_OscConfig+0x362>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d011      	beq.n	8007bea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007bc6:	4ba7      	ldr	r3, [pc, #668]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bca:	4ba6      	ldr	r3, [pc, #664]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007bcc:	2180      	movs	r1, #128	@ 0x80
 8007bce:	0549      	lsls	r1, r1, #21
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bd4:	4ba3      	ldr	r3, [pc, #652]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	055b      	lsls	r3, r3, #21
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007be2:	231f      	movs	r3, #31
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bea:	4b9f      	ldr	r3, [pc, #636]	@ (8007e68 <HAL_RCC_OscConfig+0x608>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	2380      	movs	r3, #128	@ 0x80
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	d11a      	bne.n	8007c2c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8007e68 <HAL_RCC_OscConfig+0x608>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b9b      	ldr	r3, [pc, #620]	@ (8007e68 <HAL_RCC_OscConfig+0x608>)
 8007bfc:	2180      	movs	r1, #128	@ 0x80
 8007bfe:	0049      	lsls	r1, r1, #1
 8007c00:	430a      	orrs	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007c04:	f7fd faf2 	bl	80051ec <HAL_GetTick>
 8007c08:	0003      	movs	r3, r0
 8007c0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c0c:	e008      	b.n	8007c20 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c0e:	f7fd faed 	bl	80051ec <HAL_GetTick>
 8007c12:	0002      	movs	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e11c      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c20:	4b91      	ldr	r3, [pc, #580]	@ (8007e68 <HAL_RCC_OscConfig+0x608>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	2380      	movs	r3, #128	@ 0x80
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d0f0      	beq.n	8007c0e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d106      	bne.n	8007c42 <HAL_RCC_OscConfig+0x3e2>
 8007c34:	4b8b      	ldr	r3, [pc, #556]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c38:	4b8a      	ldr	r3, [pc, #552]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c40:	e01c      	b.n	8007c7c <HAL_RCC_OscConfig+0x41c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d10c      	bne.n	8007c64 <HAL_RCC_OscConfig+0x404>
 8007c4a:	4b86      	ldr	r3, [pc, #536]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c4e:	4b85      	ldr	r3, [pc, #532]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c50:	2104      	movs	r1, #4
 8007c52:	430a      	orrs	r2, r1
 8007c54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c56:	4b83      	ldr	r3, [pc, #524]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c5a:	4b82      	ldr	r3, [pc, #520]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c62:	e00b      	b.n	8007c7c <HAL_RCC_OscConfig+0x41c>
 8007c64:	4b7f      	ldr	r3, [pc, #508]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c68:	4b7e      	ldr	r3, [pc, #504]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	438a      	bics	r2, r1
 8007c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c70:	4b7c      	ldr	r3, [pc, #496]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c74:	4b7b      	ldr	r3, [pc, #492]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007c76:	2104      	movs	r1, #4
 8007c78:	438a      	bics	r2, r1
 8007c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d014      	beq.n	8007cae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c84:	f7fd fab2 	bl	80051ec <HAL_GetTick>
 8007c88:	0003      	movs	r3, r0
 8007c8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c8c:	e009      	b.n	8007ca2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c8e:	f7fd faad 	bl	80051ec <HAL_GetTick>
 8007c92:	0002      	movs	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	4a74      	ldr	r2, [pc, #464]	@ (8007e6c <HAL_RCC_OscConfig+0x60c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e0db      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ca2:	4b70      	ldr	r3, [pc, #448]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d0f0      	beq.n	8007c8e <HAL_RCC_OscConfig+0x42e>
 8007cac:	e013      	b.n	8007cd6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cae:	f7fd fa9d 	bl	80051ec <HAL_GetTick>
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cb6:	e009      	b.n	8007ccc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb8:	f7fd fa98 	bl	80051ec <HAL_GetTick>
 8007cbc:	0002      	movs	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8007e6c <HAL_RCC_OscConfig+0x60c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e0c6      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ccc:	4b65      	ldr	r3, [pc, #404]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007cd6:	231f      	movs	r3, #31
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d105      	bne.n	8007cec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007ce0:	4b60      	ldr	r3, [pc, #384]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007ce6:	4962      	ldr	r1, [pc, #392]	@ (8007e70 <HAL_RCC_OscConfig+0x610>)
 8007ce8:	400a      	ands	r2, r1
 8007cea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d100      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x496>
 8007cf4:	e0b0      	b.n	8007e58 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2238      	movs	r2, #56	@ 0x38
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d100      	bne.n	8007d04 <HAL_RCC_OscConfig+0x4a4>
 8007d02:	e078      	b.n	8007df6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d153      	bne.n	8007db4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d0c:	4b55      	ldr	r3, [pc, #340]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b54      	ldr	r3, [pc, #336]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d12:	4958      	ldr	r1, [pc, #352]	@ (8007e74 <HAL_RCC_OscConfig+0x614>)
 8007d14:	400a      	ands	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d18:	f7fd fa68 	bl	80051ec <HAL_GetTick>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d20:	e008      	b.n	8007d34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d22:	f7fd fa63 	bl	80051ec <HAL_GetTick>
 8007d26:	0002      	movs	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e092      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d34:	4b4b      	ldr	r3, [pc, #300]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	2380      	movs	r3, #128	@ 0x80
 8007d3a:	049b      	lsls	r3, r3, #18
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d1f0      	bne.n	8007d22 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d40:	4b48      	ldr	r3, [pc, #288]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4a4c      	ldr	r2, [pc, #304]	@ (8007e78 <HAL_RCC_OscConfig+0x618>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	0019      	movs	r1, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	431a      	orrs	r2, r3
 8007d68:	4b3e      	ldr	r3, [pc, #248]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b3c      	ldr	r3, [pc, #240]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d74:	2180      	movs	r1, #128	@ 0x80
 8007d76:	0449      	lsls	r1, r1, #17
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007d7c:	4b39      	ldr	r3, [pc, #228]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	4b38      	ldr	r3, [pc, #224]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007d82:	2180      	movs	r1, #128	@ 0x80
 8007d84:	0549      	lsls	r1, r1, #21
 8007d86:	430a      	orrs	r2, r1
 8007d88:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8a:	f7fd fa2f 	bl	80051ec <HAL_GetTick>
 8007d8e:	0003      	movs	r3, r0
 8007d90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d94:	f7fd fa2a 	bl	80051ec <HAL_GetTick>
 8007d98:	0002      	movs	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e059      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007da6:	4b2f      	ldr	r3, [pc, #188]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	2380      	movs	r3, #128	@ 0x80
 8007dac:	049b      	lsls	r3, r3, #18
 8007dae:	4013      	ands	r3, r2
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0x534>
 8007db2:	e051      	b.n	8007e58 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007db4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007dba:	492e      	ldr	r1, [pc, #184]	@ (8007e74 <HAL_RCC_OscConfig+0x614>)
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fd fa14 	bl	80051ec <HAL_GetTick>
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dca:	f7fd fa0f 	bl	80051ec <HAL_GetTick>
 8007dce:	0002      	movs	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e03e      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	2380      	movs	r3, #128	@ 0x80
 8007de2:	049b      	lsls	r3, r3, #18
 8007de4:	4013      	ands	r3, r2
 8007de6:	d1f0      	bne.n	8007dca <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007de8:	4b1e      	ldr	r3, [pc, #120]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	4b1d      	ldr	r3, [pc, #116]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007dee:	4923      	ldr	r1, [pc, #140]	@ (8007e7c <HAL_RCC_OscConfig+0x61c>)
 8007df0:	400a      	ands	r2, r1
 8007df2:	60da      	str	r2, [r3, #12]
 8007df4:	e030      	b.n	8007e58 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e02b      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007e02:	4b18      	ldr	r3, [pc, #96]	@ (8007e64 <HAL_RCC_OscConfig+0x604>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d11e      	bne.n	8007e54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2270      	movs	r2, #112	@ 0x70
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d117      	bne.n	8007e54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	23fe      	movs	r3, #254	@ 0xfe
 8007e28:	01db      	lsls	r3, r3, #7
 8007e2a:	401a      	ands	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d10e      	bne.n	8007e54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	23f8      	movs	r3, #248	@ 0xf8
 8007e3a:	039b      	lsls	r3, r3, #14
 8007e3c:	401a      	ands	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d106      	bne.n	8007e54 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	0f5b      	lsrs	r3, r3, #29
 8007e4a:	075a      	lsls	r2, r3, #29
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d001      	beq.n	8007e58 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b008      	add	sp, #32
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	40021000 	.word	0x40021000
 8007e68:	40007000 	.word	0x40007000
 8007e6c:	00001388 	.word	0x00001388
 8007e70:	efffffff 	.word	0xefffffff
 8007e74:	feffffff 	.word	0xfeffffff
 8007e78:	1fc1808c 	.word	0x1fc1808c
 8007e7c:	effefffc 	.word	0xeffefffc

08007e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0e9      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b76      	ldr	r3, [pc, #472]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d91e      	bls.n	8007ee0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b73      	ldr	r3, [pc, #460]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2207      	movs	r2, #7
 8007ea8:	4393      	bics	r3, r2
 8007eaa:	0019      	movs	r1, r3
 8007eac:	4b70      	ldr	r3, [pc, #448]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007eb4:	f7fd f99a 	bl	80051ec <HAL_GetTick>
 8007eb8:	0003      	movs	r3, r0
 8007eba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ebc:	e009      	b.n	8007ed2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ebe:	f7fd f995 	bl	80051ec <HAL_GetTick>
 8007ec2:	0002      	movs	r2, r0
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8008074 <HAL_RCC_ClockConfig+0x1f4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e0ca      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ed2:	4b67      	ldr	r3, [pc, #412]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2207      	movs	r2, #7
 8007ed8:	4013      	ands	r3, r2
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d1ee      	bne.n	8007ebe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	d015      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	d006      	beq.n	8007f02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007ef4:	4b60      	ldr	r3, [pc, #384]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007efa:	21e0      	movs	r1, #224	@ 0xe0
 8007efc:	01c9      	lsls	r1, r1, #7
 8007efe:	430a      	orrs	r2, r1
 8007f00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f02:	4b5d      	ldr	r3, [pc, #372]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	4a5d      	ldr	r2, [pc, #372]	@ (800807c <HAL_RCC_ClockConfig+0x1fc>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	4b59      	ldr	r3, [pc, #356]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	d057      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f28:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	029b      	lsls	r3, r3, #10
 8007f30:	4013      	ands	r3, r2
 8007f32:	d12b      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e097      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f40:	4b4d      	ldr	r3, [pc, #308]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	2380      	movs	r3, #128	@ 0x80
 8007f46:	049b      	lsls	r3, r3, #18
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d11f      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e08b      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d107      	bne.n	8007f68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f58:	4b47      	ldr	r3, [pc, #284]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	2380      	movs	r3, #128	@ 0x80
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4013      	ands	r3, r2
 8007f62:	d113      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e07f      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d106      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f70:	4b41      	ldr	r3, [pc, #260]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f74:	2202      	movs	r2, #2
 8007f76:	4013      	ands	r3, r2
 8007f78:	d108      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e074      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f82:	2202      	movs	r2, #2
 8007f84:	4013      	ands	r3, r2
 8007f86:	d101      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e06d      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2207      	movs	r2, #7
 8007f92:	4393      	bics	r3, r2
 8007f94:	0019      	movs	r1, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	4b37      	ldr	r3, [pc, #220]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa0:	f7fd f924 	bl	80051ec <HAL_GetTick>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa8:	e009      	b.n	8007fbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007faa:	f7fd f91f 	bl	80051ec <HAL_GetTick>
 8007fae:	0002      	movs	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8008074 <HAL_RCC_ClockConfig+0x1f4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e054      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2238      	movs	r2, #56	@ 0x38
 8007fc4:	401a      	ands	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1ec      	bne.n	8007faa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fd0:	4b27      	ldr	r3, [pc, #156]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d21e      	bcs.n	800801c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fde:	4b24      	ldr	r3, [pc, #144]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2207      	movs	r2, #7
 8007fe4:	4393      	bics	r3, r2
 8007fe6:	0019      	movs	r1, r3
 8007fe8:	4b21      	ldr	r3, [pc, #132]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007ff0:	f7fd f8fc 	bl	80051ec <HAL_GetTick>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ff8:	e009      	b.n	800800e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ffa:	f7fd f8f7 	bl	80051ec <HAL_GetTick>
 8007ffe:	0002      	movs	r2, r0
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	4a1b      	ldr	r2, [pc, #108]	@ (8008074 <HAL_RCC_ClockConfig+0x1f4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e02c      	b.n	8008068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800800e:	4b18      	ldr	r3, [pc, #96]	@ (8008070 <HAL_RCC_ClockConfig+0x1f0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2207      	movs	r2, #7
 8008014:	4013      	ands	r3, r2
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d1ee      	bne.n	8007ffa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2204      	movs	r2, #4
 8008022:	4013      	ands	r3, r2
 8008024:	d009      	beq.n	800803a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008026:	4b14      	ldr	r3, [pc, #80]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <HAL_RCC_ClockConfig+0x200>)
 800802c:	4013      	ands	r3, r2
 800802e:	0019      	movs	r1, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	4b10      	ldr	r3, [pc, #64]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8008036:	430a      	orrs	r2, r1
 8008038:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800803a:	f000 f829 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 800803e:	0001      	movs	r1, r0
 8008040:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <HAL_RCC_ClockConfig+0x1f8>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	0a1b      	lsrs	r3, r3, #8
 8008046:	220f      	movs	r2, #15
 8008048:	401a      	ands	r2, r3
 800804a:	4b0e      	ldr	r3, [pc, #56]	@ (8008084 <HAL_RCC_ClockConfig+0x204>)
 800804c:	0092      	lsls	r2, r2, #2
 800804e:	58d3      	ldr	r3, [r2, r3]
 8008050:	221f      	movs	r2, #31
 8008052:	4013      	ands	r3, r2
 8008054:	000a      	movs	r2, r1
 8008056:	40da      	lsrs	r2, r3
 8008058:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <HAL_RCC_ClockConfig+0x208>)
 800805a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800805c:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <HAL_RCC_ClockConfig+0x20c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	0018      	movs	r0, r3
 8008062:	f7fd f867 	bl	8005134 <HAL_InitTick>
 8008066:	0003      	movs	r3, r0
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b004      	add	sp, #16
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40022000 	.word	0x40022000
 8008074:	00001388 	.word	0x00001388
 8008078:	40021000 	.word	0x40021000
 800807c:	fffff0ff 	.word	0xfffff0ff
 8008080:	ffff8fff 	.word	0xffff8fff
 8008084:	0800d470 	.word	0x0800d470
 8008088:	20000010 	.word	0x20000010
 800808c:	20000014 	.word	0x20000014

08008090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008096:	4b3c      	ldr	r3, [pc, #240]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2238      	movs	r2, #56	@ 0x38
 800809c:	4013      	ands	r3, r2
 800809e:	d10f      	bne.n	80080c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80080a0:	4b39      	ldr	r3, [pc, #228]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	0adb      	lsrs	r3, r3, #11
 80080a6:	2207      	movs	r2, #7
 80080a8:	4013      	ands	r3, r2
 80080aa:	2201      	movs	r2, #1
 80080ac:	409a      	lsls	r2, r3
 80080ae:	0013      	movs	r3, r2
 80080b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	4835      	ldr	r0, [pc, #212]	@ (800818c <HAL_RCC_GetSysClockFreq+0xfc>)
 80080b6:	f7f8 f83f 	bl	8000138 <__udivsi3>
 80080ba:	0003      	movs	r3, r0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	e05d      	b.n	800817c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080c0:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2238      	movs	r2, #56	@ 0x38
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d102      	bne.n	80080d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080cc:	4b30      	ldr	r3, [pc, #192]	@ (8008190 <HAL_RCC_GetSysClockFreq+0x100>)
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	e054      	b.n	800817c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2238      	movs	r2, #56	@ 0x38
 80080d8:	4013      	ands	r3, r2
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d138      	bne.n	8008150 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80080de:	4b2a      	ldr	r3, [pc, #168]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2203      	movs	r2, #3
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080e8:	4b27      	ldr	r3, [pc, #156]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	091b      	lsrs	r3, r3, #4
 80080ee:	2207      	movs	r2, #7
 80080f0:	4013      	ands	r3, r2
 80080f2:	3301      	adds	r3, #1
 80080f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d10d      	bne.n	8008118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	4824      	ldr	r0, [pc, #144]	@ (8008190 <HAL_RCC_GetSysClockFreq+0x100>)
 8008100:	f7f8 f81a 	bl	8000138 <__udivsi3>
 8008104:	0003      	movs	r3, r0
 8008106:	0019      	movs	r1, r3
 8008108:	4b1f      	ldr	r3, [pc, #124]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	0a1b      	lsrs	r3, r3, #8
 800810e:	227f      	movs	r2, #127	@ 0x7f
 8008110:	4013      	ands	r3, r2
 8008112:	434b      	muls	r3, r1
 8008114:	617b      	str	r3, [r7, #20]
        break;
 8008116:	e00d      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	481c      	ldr	r0, [pc, #112]	@ (800818c <HAL_RCC_GetSysClockFreq+0xfc>)
 800811c:	f7f8 f80c 	bl	8000138 <__udivsi3>
 8008120:	0003      	movs	r3, r0
 8008122:	0019      	movs	r1, r3
 8008124:	4b18      	ldr	r3, [pc, #96]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	227f      	movs	r2, #127	@ 0x7f
 800812c:	4013      	ands	r3, r2
 800812e:	434b      	muls	r3, r1
 8008130:	617b      	str	r3, [r7, #20]
        break;
 8008132:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008134:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	0f5b      	lsrs	r3, r3, #29
 800813a:	2207      	movs	r2, #7
 800813c:	4013      	ands	r3, r2
 800813e:	3301      	adds	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	6978      	ldr	r0, [r7, #20]
 8008146:	f7f7 fff7 	bl	8000138 <__udivsi3>
 800814a:	0003      	movs	r3, r0
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	e015      	b.n	800817c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008150:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2238      	movs	r2, #56	@ 0x38
 8008156:	4013      	ands	r3, r2
 8008158:	2b20      	cmp	r3, #32
 800815a:	d103      	bne.n	8008164 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800815c:	2380      	movs	r3, #128	@ 0x80
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	e00b      	b.n	800817c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008164:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	2238      	movs	r2, #56	@ 0x38
 800816a:	4013      	ands	r3, r2
 800816c:	2b18      	cmp	r3, #24
 800816e:	d103      	bne.n	8008178 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008170:	23fa      	movs	r3, #250	@ 0xfa
 8008172:	01db      	lsls	r3, r3, #7
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	e001      	b.n	800817c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800817c:	693b      	ldr	r3, [r7, #16]
}
 800817e:	0018      	movs	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	b006      	add	sp, #24
 8008184:	bd80      	pop	{r7, pc}
 8008186:	46c0      	nop			@ (mov r8, r8)
 8008188:	40021000 	.word	0x40021000
 800818c:	00f42400 	.word	0x00f42400
 8008190:	007a1200 	.word	0x007a1200

08008194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008198:	4b02      	ldr	r3, [pc, #8]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800819a:	681b      	ldr	r3, [r3, #0]
}
 800819c:	0018      	movs	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	46c0      	nop			@ (mov r8, r8)
 80081a4:	20000010 	.word	0x20000010

080081a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a8:	b5b0      	push	{r4, r5, r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80081ac:	f7ff fff2 	bl	8008194 <HAL_RCC_GetHCLKFreq>
 80081b0:	0004      	movs	r4, r0
 80081b2:	f7ff fb49 	bl	8007848 <LL_RCC_GetAPB1Prescaler>
 80081b6:	0003      	movs	r3, r0
 80081b8:	0b1a      	lsrs	r2, r3, #12
 80081ba:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	58d3      	ldr	r3, [r2, r3]
 80081c0:	221f      	movs	r2, #31
 80081c2:	4013      	ands	r3, r2
 80081c4:	40dc      	lsrs	r4, r3
 80081c6:	0023      	movs	r3, r4
}
 80081c8:	0018      	movs	r0, r3
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bdb0      	pop	{r4, r5, r7, pc}
 80081ce:	46c0      	nop			@ (mov r8, r8)
 80081d0:	0800d4b0 	.word	0x0800d4b0

080081d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80081dc:	2313      	movs	r3, #19
 80081de:	18fb      	adds	r3, r7, r3
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081e4:	2312      	movs	r3, #18
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	2380      	movs	r3, #128	@ 0x80
 80081f2:	029b      	lsls	r3, r3, #10
 80081f4:	4013      	ands	r3, r2
 80081f6:	d100      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80081f8:	e0a3      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081fa:	2011      	movs	r0, #17
 80081fc:	183b      	adds	r3, r7, r0
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008202:	4b86      	ldr	r3, [pc, #536]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008206:	2380      	movs	r3, #128	@ 0x80
 8008208:	055b      	lsls	r3, r3, #21
 800820a:	4013      	ands	r3, r2
 800820c:	d110      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800820e:	4b83      	ldr	r3, [pc, #524]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008212:	4b82      	ldr	r3, [pc, #520]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008214:	2180      	movs	r1, #128	@ 0x80
 8008216:	0549      	lsls	r1, r1, #21
 8008218:	430a      	orrs	r2, r1
 800821a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800821c:	4b7f      	ldr	r3, [pc, #508]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800821e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008220:	2380      	movs	r3, #128	@ 0x80
 8008222:	055b      	lsls	r3, r3, #21
 8008224:	4013      	ands	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800822a:	183b      	adds	r3, r7, r0
 800822c:	2201      	movs	r2, #1
 800822e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008230:	4b7b      	ldr	r3, [pc, #492]	@ (8008420 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	4b7a      	ldr	r3, [pc, #488]	@ (8008420 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008236:	2180      	movs	r1, #128	@ 0x80
 8008238:	0049      	lsls	r1, r1, #1
 800823a:	430a      	orrs	r2, r1
 800823c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800823e:	f7fc ffd5 	bl	80051ec <HAL_GetTick>
 8008242:	0003      	movs	r3, r0
 8008244:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008246:	e00b      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008248:	f7fc ffd0 	bl	80051ec <HAL_GetTick>
 800824c:	0002      	movs	r2, r0
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d904      	bls.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008256:	2313      	movs	r3, #19
 8008258:	18fb      	adds	r3, r7, r3
 800825a:	2203      	movs	r2, #3
 800825c:	701a      	strb	r2, [r3, #0]
        break;
 800825e:	e005      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008260:	4b6f      	ldr	r3, [pc, #444]	@ (8008420 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4013      	ands	r3, r2
 800826a:	d0ed      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800826c:	2313      	movs	r3, #19
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d154      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008276:	4b69      	ldr	r3, [pc, #420]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008278:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800827a:	23c0      	movs	r3, #192	@ 0xc0
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4013      	ands	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d019      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	429a      	cmp	r2, r3
 8008290:	d014      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008292:	4b62      	ldr	r3, [pc, #392]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008296:	4a63      	ldr	r2, [pc, #396]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008298:	4013      	ands	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800829c:	4b5f      	ldr	r3, [pc, #380]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800829e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082a0:	4b5e      	ldr	r3, [pc, #376]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082a2:	2180      	movs	r1, #128	@ 0x80
 80082a4:	0249      	lsls	r1, r1, #9
 80082a6:	430a      	orrs	r2, r1
 80082a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082aa:	4b5c      	ldr	r3, [pc, #368]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082ae:	4b5b      	ldr	r3, [pc, #364]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082b0:	495d      	ldr	r1, [pc, #372]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082b2:	400a      	ands	r2, r1
 80082b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082b6:	4b59      	ldr	r3, [pc, #356]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2201      	movs	r2, #1
 80082c0:	4013      	ands	r3, r2
 80082c2:	d016      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c4:	f7fc ff92 	bl	80051ec <HAL_GetTick>
 80082c8:	0003      	movs	r3, r0
 80082ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082cc:	e00c      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ce:	f7fc ff8d 	bl	80051ec <HAL_GetTick>
 80082d2:	0002      	movs	r2, r0
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	4a54      	ldr	r2, [pc, #336]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d904      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80082de:	2313      	movs	r3, #19
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	2203      	movs	r2, #3
 80082e4:	701a      	strb	r2, [r3, #0]
            break;
 80082e6:	e004      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e8:	4b4c      	ldr	r3, [pc, #304]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ec:	2202      	movs	r2, #2
 80082ee:	4013      	ands	r3, r2
 80082f0:	d0ed      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80082f2:	2313      	movs	r3, #19
 80082f4:	18fb      	adds	r3, r7, r3
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082fc:	4b47      	ldr	r3, [pc, #284]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80082fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008300:	4a48      	ldr	r2, [pc, #288]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008302:	4013      	ands	r3, r2
 8008304:	0019      	movs	r1, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	4b44      	ldr	r3, [pc, #272]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800830c:	430a      	orrs	r2, r1
 800830e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008310:	e00c      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008312:	2312      	movs	r3, #18
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	2213      	movs	r2, #19
 8008318:	18ba      	adds	r2, r7, r2
 800831a:	7812      	ldrb	r2, [r2, #0]
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e005      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008320:	2312      	movs	r3, #18
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	2213      	movs	r2, #19
 8008326:	18ba      	adds	r2, r7, r2
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800832c:	2311      	movs	r3, #17
 800832e:	18fb      	adds	r3, r7, r3
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d105      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008336:	4b39      	ldr	r3, [pc, #228]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800833a:	4b38      	ldr	r3, [pc, #224]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800833c:	493c      	ldr	r1, [pc, #240]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800833e:	400a      	ands	r2, r1
 8008340:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2201      	movs	r2, #1
 8008348:	4013      	ands	r3, r2
 800834a:	d009      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800834c:	4b33      	ldr	r3, [pc, #204]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800834e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008350:	2203      	movs	r2, #3
 8008352:	4393      	bics	r3, r2
 8008354:	0019      	movs	r1, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	4b30      	ldr	r3, [pc, #192]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800835c:	430a      	orrs	r2, r1
 800835e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2202      	movs	r2, #2
 8008366:	4013      	ands	r3, r2
 8008368:	d009      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800836a:	4b2c      	ldr	r3, [pc, #176]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836e:	220c      	movs	r2, #12
 8008370:	4393      	bics	r3, r2
 8008372:	0019      	movs	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	4b28      	ldr	r3, [pc, #160]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800837a:	430a      	orrs	r2, r1
 800837c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2220      	movs	r2, #32
 8008384:	4013      	ands	r3, r2
 8008386:	d009      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008388:	4b24      	ldr	r3, [pc, #144]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800838a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838c:	4a29      	ldr	r2, [pc, #164]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800838e:	4013      	ands	r3, r2
 8008390:	0019      	movs	r1, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	4b21      	ldr	r3, [pc, #132]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008398:	430a      	orrs	r2, r1
 800839a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	2380      	movs	r3, #128	@ 0x80
 80083a2:	01db      	lsls	r3, r3, #7
 80083a4:	4013      	ands	r3, r2
 80083a6:	d015      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083a8:	4b1c      	ldr	r3, [pc, #112]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	0899      	lsrs	r1, r3, #2
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695a      	ldr	r2, [r3, #20]
 80083b4:	4b19      	ldr	r3, [pc, #100]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083b6:	430a      	orrs	r2, r1
 80083b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	05db      	lsls	r3, r3, #23
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80083c6:	4b15      	ldr	r3, [pc, #84]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	4b14      	ldr	r3, [pc, #80]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083cc:	2180      	movs	r1, #128	@ 0x80
 80083ce:	0249      	lsls	r1, r1, #9
 80083d0:	430a      	orrs	r2, r1
 80083d2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	2380      	movs	r3, #128	@ 0x80
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	4013      	ands	r3, r2
 80083de:	d016      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80083e0:	4b0e      	ldr	r3, [pc, #56]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e4:	4a14      	ldr	r2, [pc, #80]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	0019      	movs	r1, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	4b0b      	ldr	r3, [pc, #44]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80083f0:	430a      	orrs	r2, r1
 80083f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	01db      	lsls	r3, r3, #7
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d106      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008400:	4b06      	ldr	r3, [pc, #24]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008406:	2180      	movs	r1, #128	@ 0x80
 8008408:	0249      	lsls	r1, r1, #9
 800840a:	430a      	orrs	r2, r1
 800840c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800840e:	2312      	movs	r3, #18
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	781b      	ldrb	r3, [r3, #0]
}
 8008414:	0018      	movs	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	b006      	add	sp, #24
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40021000 	.word	0x40021000
 8008420:	40007000 	.word	0x40007000
 8008424:	fffffcff 	.word	0xfffffcff
 8008428:	fffeffff 	.word	0xfffeffff
 800842c:	00001388 	.word	0x00001388
 8008430:	efffffff 	.word	0xefffffff
 8008434:	ffffcfff 	.word	0xffffcfff
 8008438:	ffff3fff 	.word	0xffff3fff

0800843c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e0a8      	b.n	80085a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	2382      	movs	r3, #130	@ 0x82
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	429a      	cmp	r2, r3
 8008460:	d009      	beq.n	8008476 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	61da      	str	r2, [r3, #28]
 8008468:	e005      	b.n	8008476 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	225d      	movs	r2, #93	@ 0x5d
 8008480:	5c9b      	ldrb	r3, [r3, r2]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d107      	bne.n	8008498 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	225c      	movs	r2, #92	@ 0x5c
 800848c:	2100      	movs	r1, #0
 800848e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	0018      	movs	r0, r3
 8008494:	f7fc fb90 	bl	8004bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	225d      	movs	r2, #93	@ 0x5d
 800849c:	2102      	movs	r1, #2
 800849e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2140      	movs	r1, #64	@ 0x40
 80084ac:	438a      	bics	r2, r1
 80084ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	23e0      	movs	r3, #224	@ 0xe0
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d902      	bls.n	80084c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e002      	b.n	80084c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084c2:	2380      	movs	r3, #128	@ 0x80
 80084c4:	015b      	lsls	r3, r3, #5
 80084c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	23f0      	movs	r3, #240	@ 0xf0
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d008      	beq.n	80084e6 <HAL_SPI_Init+0xaa>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	23e0      	movs	r3, #224	@ 0xe0
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	429a      	cmp	r2, r3
 80084de:	d002      	beq.n	80084e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	2382      	movs	r3, #130	@ 0x82
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	401a      	ands	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6899      	ldr	r1, [r3, #8]
 80084f4:	2384      	movs	r3, #132	@ 0x84
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	400b      	ands	r3, r1
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2102      	movs	r1, #2
 8008502:	400b      	ands	r3, r1
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	2101      	movs	r1, #1
 800850c:	400b      	ands	r3, r1
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6999      	ldr	r1, [r3, #24]
 8008514:	2380      	movs	r3, #128	@ 0x80
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	400b      	ands	r3, r1
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2138      	movs	r1, #56	@ 0x38
 8008522:	400b      	ands	r3, r1
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	2180      	movs	r1, #128	@ 0x80
 800852c:	400b      	ands	r3, r1
 800852e:	431a      	orrs	r2, r3
 8008530:	0011      	movs	r1, r2
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008536:	2380      	movs	r3, #128	@ 0x80
 8008538:	019b      	lsls	r3, r3, #6
 800853a:	401a      	ands	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	2204      	movs	r2, #4
 800854c:	401a      	ands	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	2110      	movs	r1, #16
 8008554:	400b      	ands	r3, r1
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855c:	2108      	movs	r1, #8
 800855e:	400b      	ands	r3, r1
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68d9      	ldr	r1, [r3, #12]
 8008566:	23f0      	movs	r3, #240	@ 0xf0
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	400b      	ands	r3, r1
 800856c:	431a      	orrs	r2, r3
 800856e:	0011      	movs	r1, r2
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	2380      	movs	r3, #128	@ 0x80
 8008574:	015b      	lsls	r3, r3, #5
 8008576:	401a      	ands	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4907      	ldr	r1, [pc, #28]	@ (80085a8 <HAL_SPI_Init+0x16c>)
 800858c:	400a      	ands	r2, r1
 800858e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	225d      	movs	r2, #93	@ 0x5d
 800859a:	2101      	movs	r1, #1
 800859c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	0018      	movs	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b004      	add	sp, #16
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	fffff7ff 	.word	0xfffff7ff

080085ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b089      	sub	sp, #36	@ 0x24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	1dbb      	adds	r3, r7, #6
 80085ba:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085bc:	2117      	movs	r1, #23
 80085be:	187b      	adds	r3, r7, r1
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	225d      	movs	r2, #93	@ 0x5d
 80085c8:	5c9b      	ldrb	r3, [r3, r2]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d003      	beq.n	80085d8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	2202      	movs	r2, #2
 80085d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80085d6:	e12b      	b.n	8008830 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	2382      	movs	r3, #130	@ 0x82
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d113      	bne.n	800860c <HAL_SPI_Receive+0x60>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10f      	bne.n	800860c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	225d      	movs	r2, #93	@ 0x5d
 80085f0:	2104      	movs	r1, #4
 80085f2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80085f4:	1dbb      	adds	r3, r7, #6
 80085f6:	881c      	ldrh	r4, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	0023      	movs	r3, r4
 8008604:	f000 f924 	bl	8008850 <HAL_SPI_TransmitReceive>
 8008608:	0003      	movs	r3, r0
 800860a:	e118      	b.n	800883e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	225c      	movs	r2, #92	@ 0x5c
 8008610:	5c9b      	ldrb	r3, [r3, r2]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_SPI_Receive+0x6e>
 8008616:	2302      	movs	r3, #2
 8008618:	e111      	b.n	800883e <HAL_SPI_Receive+0x292>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	225c      	movs	r2, #92	@ 0x5c
 800861e:	2101      	movs	r1, #1
 8008620:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008622:	f7fc fde3 	bl	80051ec <HAL_GetTick>
 8008626:	0003      	movs	r3, r0
 8008628:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_SPI_Receive+0x8c>
 8008630:	1dbb      	adds	r3, r7, #6
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008638:	2317      	movs	r3, #23
 800863a:	18fb      	adds	r3, r7, r3
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008640:	e0f6      	b.n	8008830 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	225d      	movs	r2, #93	@ 0x5d
 8008646:	2104      	movs	r1, #4
 8008648:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	1dba      	adds	r2, r7, #6
 800865a:	2144      	movs	r1, #68	@ 0x44
 800865c:	8812      	ldrh	r2, [r2, #0]
 800865e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	1dba      	adds	r2, r7, #6
 8008664:	2146      	movs	r1, #70	@ 0x46
 8008666:	8812      	ldrh	r2, [r2, #0]
 8008668:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	23e0      	movs	r3, #224	@ 0xe0
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	429a      	cmp	r2, r3
 8008692:	d908      	bls.n	80086a6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	496a      	ldr	r1, [pc, #424]	@ (8008848 <HAL_SPI_Receive+0x29c>)
 80086a0:	400a      	ands	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
 80086a4:	e008      	b.n	80086b8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2180      	movs	r1, #128	@ 0x80
 80086b2:	0149      	lsls	r1, r1, #5
 80086b4:	430a      	orrs	r2, r1
 80086b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	2380      	movs	r3, #128	@ 0x80
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d10f      	bne.n	80086e4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2140      	movs	r1, #64	@ 0x40
 80086d0:	438a      	bics	r2, r1
 80086d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	495b      	ldr	r1, [pc, #364]	@ (800884c <HAL_SPI_Receive+0x2a0>)
 80086e0:	400a      	ands	r2, r1
 80086e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2240      	movs	r2, #64	@ 0x40
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	d007      	beq.n	8008702 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2140      	movs	r1, #64	@ 0x40
 80086fe:	430a      	orrs	r2, r1
 8008700:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	23e0      	movs	r3, #224	@ 0xe0
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	429a      	cmp	r2, r3
 800870c:	d900      	bls.n	8008710 <HAL_SPI_Receive+0x164>
 800870e:	e071      	b.n	80087f4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008710:	e035      	b.n	800877e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2201      	movs	r2, #1
 800871a:	4013      	ands	r3, r2
 800871c:	2b01      	cmp	r3, #1
 800871e:	d117      	bne.n	8008750 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	330c      	adds	r3, #12
 8008726:	001a      	movs	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2246      	movs	r2, #70	@ 0x46
 8008740:	5a9b      	ldrh	r3, [r3, r2]
 8008742:	b29b      	uxth	r3, r3
 8008744:	3b01      	subs	r3, #1
 8008746:	b299      	uxth	r1, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2246      	movs	r2, #70	@ 0x46
 800874c:	5299      	strh	r1, [r3, r2]
 800874e:	e016      	b.n	800877e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008750:	f7fc fd4c 	bl	80051ec <HAL_GetTick>
 8008754:	0002      	movs	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d802      	bhi.n	8008766 <HAL_SPI_Receive+0x1ba>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	d102      	bne.n	800876c <HAL_SPI_Receive+0x1c0>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800876c:	2317      	movs	r3, #23
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	2203      	movs	r2, #3
 8008772:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	225d      	movs	r2, #93	@ 0x5d
 8008778:	2101      	movs	r1, #1
 800877a:	5499      	strb	r1, [r3, r2]
          goto error;
 800877c:	e058      	b.n	8008830 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2246      	movs	r2, #70	@ 0x46
 8008782:	5a9b      	ldrh	r3, [r3, r2]
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1c3      	bne.n	8008712 <HAL_SPI_Receive+0x166>
 800878a:	e039      	b.n	8008800 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2201      	movs	r2, #1
 8008794:	4013      	ands	r3, r2
 8008796:	2b01      	cmp	r3, #1
 8008798:	d115      	bne.n	80087c6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	b292      	uxth	r2, r2
 80087a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ac:	1c9a      	adds	r2, r3, #2
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2246      	movs	r2, #70	@ 0x46
 80087b6:	5a9b      	ldrh	r3, [r3, r2]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b299      	uxth	r1, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2246      	movs	r2, #70	@ 0x46
 80087c2:	5299      	strh	r1, [r3, r2]
 80087c4:	e016      	b.n	80087f4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c6:	f7fc fd11 	bl	80051ec <HAL_GetTick>
 80087ca:	0002      	movs	r2, r0
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d802      	bhi.n	80087dc <HAL_SPI_Receive+0x230>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	d102      	bne.n	80087e2 <HAL_SPI_Receive+0x236>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80087e2:	2317      	movs	r3, #23
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	2203      	movs	r2, #3
 80087e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	225d      	movs	r2, #93	@ 0x5d
 80087ee:	2101      	movs	r1, #1
 80087f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80087f2:	e01d      	b.n	8008830 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2246      	movs	r2, #70	@ 0x46
 80087f8:	5a9b      	ldrh	r3, [r3, r2]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1c5      	bne.n	800878c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0018      	movs	r0, r3
 8008808:	f000 fb34 	bl	8008e74 <SPI_EndRxTransaction>
 800880c:	1e03      	subs	r3, r0, #0
 800880e:	d002      	beq.n	8008816 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800881a:	2b00      	cmp	r3, #0
 800881c:	d004      	beq.n	8008828 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800881e:	2317      	movs	r3, #23
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	2201      	movs	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e003      	b.n	8008830 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	225d      	movs	r2, #93	@ 0x5d
 800882c:	2101      	movs	r1, #1
 800882e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	225c      	movs	r2, #92	@ 0x5c
 8008834:	2100      	movs	r1, #0
 8008836:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008838:	2317      	movs	r3, #23
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	781b      	ldrb	r3, [r3, #0]
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b007      	add	sp, #28
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	46c0      	nop			@ (mov r8, r8)
 8008848:	ffffefff 	.word	0xffffefff
 800884c:	ffffbfff 	.word	0xffffbfff

08008850 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	@ 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	001a      	movs	r2, r3
 800885e:	1cbb      	adds	r3, r7, #2
 8008860:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008862:	2301      	movs	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008866:	2323      	movs	r3, #35	@ 0x23
 8008868:	18fb      	adds	r3, r7, r3
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	225c      	movs	r2, #92	@ 0x5c
 8008872:	5c9b      	ldrb	r3, [r3, r2]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_SPI_TransmitReceive+0x2c>
 8008878:	2302      	movs	r3, #2
 800887a:	e1c4      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x3b6>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	225c      	movs	r2, #92	@ 0x5c
 8008880:	2101      	movs	r1, #1
 8008882:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008884:	f7fc fcb2 	bl	80051ec <HAL_GetTick>
 8008888:	0003      	movs	r3, r0
 800888a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800888c:	201b      	movs	r0, #27
 800888e:	183b      	adds	r3, r7, r0
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	215d      	movs	r1, #93	@ 0x5d
 8008894:	5c52      	ldrb	r2, [r2, r1]
 8008896:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800889e:	2312      	movs	r3, #18
 80088a0:	18fb      	adds	r3, r7, r3
 80088a2:	1cba      	adds	r2, r7, #2
 80088a4:	8812      	ldrh	r2, [r2, #0]
 80088a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088a8:	183b      	adds	r3, r7, r0
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d011      	beq.n	80088d4 <HAL_SPI_TransmitReceive+0x84>
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	2382      	movs	r3, #130	@ 0x82
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d107      	bne.n	80088ca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <HAL_SPI_TransmitReceive+0x7a>
 80088c2:	183b      	adds	r3, r7, r0
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d004      	beq.n	80088d4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80088ca:	2323      	movs	r3, #35	@ 0x23
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	2202      	movs	r2, #2
 80088d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80088d2:	e191      	b.n	8008bf8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d006      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x98>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x98>
 80088e0:	1cbb      	adds	r3, r7, #2
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80088e8:	2323      	movs	r3, #35	@ 0x23
 80088ea:	18fb      	adds	r3, r7, r3
 80088ec:	2201      	movs	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80088f0:	e182      	b.n	8008bf8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	225d      	movs	r2, #93	@ 0x5d
 80088f6:	5c9b      	ldrb	r3, [r3, r2]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d003      	beq.n	8008906 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	225d      	movs	r2, #93	@ 0x5d
 8008902:	2105      	movs	r1, #5
 8008904:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	1cba      	adds	r2, r7, #2
 8008916:	2146      	movs	r1, #70	@ 0x46
 8008918:	8812      	ldrh	r2, [r2, #0]
 800891a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	1cba      	adds	r2, r7, #2
 8008920:	2144      	movs	r1, #68	@ 0x44
 8008922:	8812      	ldrh	r2, [r2, #0]
 8008924:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	1cba      	adds	r2, r7, #2
 8008930:	8812      	ldrh	r2, [r2, #0]
 8008932:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	1cba      	adds	r2, r7, #2
 8008938:	8812      	ldrh	r2, [r2, #0]
 800893a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	23e0      	movs	r3, #224	@ 0xe0
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	429a      	cmp	r2, r3
 8008952:	d908      	bls.n	8008966 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	49ac      	ldr	r1, [pc, #688]	@ (8008c10 <HAL_SPI_TransmitReceive+0x3c0>)
 8008960:	400a      	ands	r2, r1
 8008962:	605a      	str	r2, [r3, #4]
 8008964:	e008      	b.n	8008978 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2180      	movs	r1, #128	@ 0x80
 8008972:	0149      	lsls	r1, r1, #5
 8008974:	430a      	orrs	r2, r1
 8008976:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2240      	movs	r2, #64	@ 0x40
 8008980:	4013      	ands	r3, r2
 8008982:	2b40      	cmp	r3, #64	@ 0x40
 8008984:	d007      	beq.n	8008996 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2140      	movs	r1, #64	@ 0x40
 8008992:	430a      	orrs	r2, r1
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	23e0      	movs	r3, #224	@ 0xe0
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	429a      	cmp	r2, r3
 80089a0:	d800      	bhi.n	80089a4 <HAL_SPI_TransmitReceive+0x154>
 80089a2:	e083      	b.n	8008aac <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_SPI_TransmitReceive+0x168>
 80089ac:	2312      	movs	r3, #18
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d000      	beq.n	80089b8 <HAL_SPI_TransmitReceive+0x168>
 80089b6:	e06d      	b.n	8008a94 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089bc:	881a      	ldrh	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	1c9a      	adds	r2, r3, #2
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089dc:	e05a      	b.n	8008a94 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2202      	movs	r2, #2
 80089e6:	4013      	ands	r3, r2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d11b      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x1d4>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d016      	beq.n	8008a24 <HAL_SPI_TransmitReceive+0x1d4>
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d113      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a00:	881a      	ldrh	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	1c9a      	adds	r2, r3, #2
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d11c      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x21c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2246      	movs	r2, #70	@ 0x46
 8008a36:	5a9b      	ldrh	r3, [r3, r2]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d016      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a48:	b292      	uxth	r2, r2
 8008a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	1c9a      	adds	r2, r3, #2
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2246      	movs	r2, #70	@ 0x46
 8008a5a:	5a9b      	ldrh	r3, [r3, r2]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b299      	uxth	r1, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2246      	movs	r2, #70	@ 0x46
 8008a66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a6c:	f7fc fbbe 	bl	80051ec <HAL_GetTick>
 8008a70:	0002      	movs	r2, r0
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d80b      	bhi.n	8008a94 <HAL_SPI_TransmitReceive+0x244>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	3301      	adds	r3, #1
 8008a80:	d008      	beq.n	8008a94 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8008a82:	2323      	movs	r3, #35	@ 0x23
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	2203      	movs	r2, #3
 8008a88:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	225d      	movs	r2, #93	@ 0x5d
 8008a8e:	2101      	movs	r1, #1
 8008a90:	5499      	strb	r1, [r3, r2]
        goto error;
 8008a92:	e0b1      	b.n	8008bf8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d19f      	bne.n	80089de <HAL_SPI_TransmitReceive+0x18e>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2246      	movs	r2, #70	@ 0x46
 8008aa2:	5a9b      	ldrh	r3, [r3, r2]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d199      	bne.n	80089de <HAL_SPI_TransmitReceive+0x18e>
 8008aaa:	e089      	b.n	8008bc0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0x270>
 8008ab4:	2312      	movs	r3, #18
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d000      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0x270>
 8008abe:	e074      	b.n	8008baa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	7812      	ldrb	r2, [r2, #0]
 8008acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae6:	e060      	b.n	8008baa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2202      	movs	r2, #2
 8008af0:	4013      	ands	r3, r2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d11c      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x2e0>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d017      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x2e0>
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d114      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	7812      	ldrb	r2, [r2, #0]
 8008b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2201      	movs	r2, #1
 8008b38:	4013      	ands	r3, r2
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d11e      	bne.n	8008b7c <HAL_SPI_TransmitReceive+0x32c>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2246      	movs	r2, #70	@ 0x46
 8008b42:	5a9b      	ldrh	r3, [r3, r2]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	001a      	movs	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	7812      	ldrb	r2, [r2, #0]
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2246      	movs	r2, #70	@ 0x46
 8008b6a:	5a9b      	ldrh	r3, [r3, r2]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b299      	uxth	r1, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2246      	movs	r2, #70	@ 0x46
 8008b76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b7c:	f7fc fb36 	bl	80051ec <HAL_GetTick>
 8008b80:	0002      	movs	r2, r0
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d802      	bhi.n	8008b92 <HAL_SPI_TransmitReceive+0x342>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	3301      	adds	r3, #1
 8008b90:	d102      	bne.n	8008b98 <HAL_SPI_TransmitReceive+0x348>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d108      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008b98:	2323      	movs	r3, #35	@ 0x23
 8008b9a:	18fb      	adds	r3, r7, r3
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	225d      	movs	r2, #93	@ 0x5d
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	5499      	strb	r1, [r3, r2]
        goto error;
 8008ba8:	e026      	b.n	8008bf8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d199      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x298>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2246      	movs	r2, #70	@ 0x46
 8008bb8:	5a9b      	ldrh	r3, [r3, r2]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d193      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 f9b2 	bl	8008f30 <SPI_EndRxTxTransaction>
 8008bcc:	1e03      	subs	r3, r0, #0
 8008bce:	d006      	beq.n	8008bde <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8008bd0:	2323      	movs	r3, #35	@ 0x23
 8008bd2:	18fb      	adds	r3, r7, r3
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8008be6:	2323      	movs	r3, #35	@ 0x23
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	2201      	movs	r2, #1
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	e003      	b.n	8008bf8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	225d      	movs	r2, #93	@ 0x5d
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	225c      	movs	r2, #92	@ 0x5c
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008c00:	2323      	movs	r3, #35	@ 0x23
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	781b      	ldrb	r3, [r3, #0]
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b00a      	add	sp, #40	@ 0x28
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	ffffefff 	.word	0xffffefff

08008c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	1dfb      	adds	r3, r7, #7
 8008c22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c24:	f7fc fae2 	bl	80051ec <HAL_GetTick>
 8008c28:	0002      	movs	r2, r0
 8008c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	18d3      	adds	r3, r2, r3
 8008c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c34:	f7fc fada 	bl	80051ec <HAL_GetTick>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8008d28 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	015b      	lsls	r3, r3, #5
 8008c42:	0d1b      	lsrs	r3, r3, #20
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	4353      	muls	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c4a:	e058      	b.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	d055      	beq.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c52:	f7fc facb 	bl	80051ec <HAL_GetTick>
 8008c56:	0002      	movs	r2, r0
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d902      	bls.n	8008c68 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d142      	bne.n	8008cee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	21e0      	movs	r1, #224	@ 0xe0
 8008c74:	438a      	bics	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	2382      	movs	r3, #130	@ 0x82
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d113      	bne.n	8008cac <SPI_WaitFlagStateUntilTimeout+0x98>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	2380      	movs	r3, #128	@ 0x80
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	2380      	movs	r3, #128	@ 0x80
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d107      	bne.n	8008cac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2140      	movs	r1, #64	@ 0x40
 8008ca8:	438a      	bics	r2, r1
 8008caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cb0:	2380      	movs	r3, #128	@ 0x80
 8008cb2:	019b      	lsls	r3, r3, #6
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d110      	bne.n	8008cda <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	491a      	ldr	r1, [pc, #104]	@ (8008d2c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008cc4:	400a      	ands	r2, r1
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2180      	movs	r1, #128	@ 0x80
 8008cd4:	0189      	lsls	r1, r1, #6
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	225d      	movs	r2, #93	@ 0x5d
 8008cde:	2101      	movs	r1, #1
 8008ce0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	225c      	movs	r2, #92	@ 0x5c
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e017      	b.n	8008d1e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	4013      	ands	r3, r2
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	425a      	negs	r2, r3
 8008d0e:	4153      	adcs	r3, r2
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	001a      	movs	r2, r3
 8008d14:	1dfb      	adds	r3, r7, #7
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d197      	bne.n	8008c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	0018      	movs	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	b008      	add	sp, #32
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	46c0      	nop			@ (mov r8, r8)
 8008d28:	20000010 	.word	0x20000010
 8008d2c:	ffffdfff 	.word	0xffffdfff

08008d30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d3e:	2317      	movs	r3, #23
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d46:	f7fc fa51 	bl	80051ec <HAL_GetTick>
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	18d3      	adds	r3, r2, r3
 8008d54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008d56:	f7fc fa49 	bl	80051ec <HAL_GetTick>
 8008d5a:	0003      	movs	r3, r0
 8008d5c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	330c      	adds	r3, #12
 8008d64:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d66:	4b41      	ldr	r3, [pc, #260]	@ (8008e6c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	0013      	movs	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	00da      	lsls	r2, r3, #3
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	0d1b      	lsrs	r3, r3, #20
 8008d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d78:	4353      	muls	r3, r2
 8008d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008d7c:	e068      	b.n	8008e50 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	23c0      	movs	r3, #192	@ 0xc0
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d10a      	bne.n	8008d9e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d107      	bne.n	8008d9e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	2117      	movs	r1, #23
 8008d96:	187b      	adds	r3, r7, r1
 8008d98:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008d9a:	187b      	adds	r3, r7, r1
 8008d9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	d055      	beq.n	8008e50 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008da4:	f7fc fa22 	bl	80051ec <HAL_GetTick>
 8008da8:	0002      	movs	r2, r0
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d902      	bls.n	8008dba <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d142      	bne.n	8008e40 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	21e0      	movs	r1, #224	@ 0xe0
 8008dc6:	438a      	bics	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	2382      	movs	r3, #130	@ 0x82
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d113      	bne.n	8008dfe <SPI_WaitFifoStateUntilTimeout+0xce>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d005      	beq.n	8008dee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	2380      	movs	r3, #128	@ 0x80
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d107      	bne.n	8008dfe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	@ 0x40
 8008dfa:	438a      	bics	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e02:	2380      	movs	r3, #128	@ 0x80
 8008e04:	019b      	lsls	r3, r3, #6
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d110      	bne.n	8008e2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4916      	ldr	r1, [pc, #88]	@ (8008e70 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008e16:	400a      	ands	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2180      	movs	r1, #128	@ 0x80
 8008e26:	0189      	lsls	r1, r1, #6
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	225d      	movs	r2, #93	@ 0x5d
 8008e30:	2101      	movs	r1, #1
 8008e32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	225c      	movs	r2, #92	@ 0x5c
 8008e38:	2100      	movs	r1, #0
 8008e3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e010      	b.n	8008e62 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d18e      	bne.n	8008d7e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	0018      	movs	r0, r3
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b00a      	add	sp, #40	@ 0x28
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	20000010 	.word	0x20000010
 8008e70:	ffffdfff 	.word	0xffffdfff

08008e74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	2382      	movs	r3, #130	@ 0x82
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d113      	bne.n	8008eb4 <SPI_EndRxTransaction+0x40>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	021b      	lsls	r3, r3, #8
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d005      	beq.n	8008ea4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	2380      	movs	r3, #128	@ 0x80
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d107      	bne.n	8008eb4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2140      	movs	r1, #64	@ 0x40
 8008eb0:	438a      	bics	r2, r1
 8008eb2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	0013      	movs	r3, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2180      	movs	r1, #128	@ 0x80
 8008ec2:	f7ff fea7 	bl	8008c14 <SPI_WaitFlagStateUntilTimeout>
 8008ec6:	1e03      	subs	r3, r0, #0
 8008ec8:	d007      	beq.n	8008eda <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ece:	2220      	movs	r2, #32
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e026      	b.n	8008f28 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	2382      	movs	r3, #130	@ 0x82
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d11f      	bne.n	8008f26 <SPI_EndRxTransaction+0xb2>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d005      	beq.n	8008efe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	2380      	movs	r3, #128	@ 0x80
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d113      	bne.n	8008f26 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	23c0      	movs	r3, #192	@ 0xc0
 8008f02:	00d9      	lsls	r1, r3, #3
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	0013      	movs	r3, r2
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f7ff ff0f 	bl	8008d30 <SPI_WaitFifoStateUntilTimeout>
 8008f12:	1e03      	subs	r3, r0, #0
 8008f14:	d007      	beq.n	8008f26 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e000      	b.n	8008f28 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	0018      	movs	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b004      	add	sp, #16
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	23c0      	movs	r3, #192	@ 0xc0
 8008f40:	0159      	lsls	r1, r3, #5
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	0013      	movs	r3, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f7ff fef0 	bl	8008d30 <SPI_WaitFifoStateUntilTimeout>
 8008f50:	1e03      	subs	r3, r0, #0
 8008f52:	d007      	beq.n	8008f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f58:	2220      	movs	r2, #32
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e027      	b.n	8008fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	0013      	movs	r3, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2180      	movs	r1, #128	@ 0x80
 8008f72:	f7ff fe4f 	bl	8008c14 <SPI_WaitFlagStateUntilTimeout>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d007      	beq.n	8008f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f7e:	2220      	movs	r2, #32
 8008f80:	431a      	orrs	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e014      	b.n	8008fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	23c0      	movs	r3, #192	@ 0xc0
 8008f8e:	00d9      	lsls	r1, r3, #3
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	0013      	movs	r3, r2
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7ff fec9 	bl	8008d30 <SPI_WaitFifoStateUntilTimeout>
 8008f9e:	1e03      	subs	r3, r0, #0
 8008fa0:	d007      	beq.n	8008fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e000      	b.n	8008fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b004      	add	sp, #16
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e04a      	b.n	8009064 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	223d      	movs	r2, #61	@ 0x3d
 8008fd2:	5c9b      	ldrb	r3, [r3, r2]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	223c      	movs	r2, #60	@ 0x3c
 8008fde:	2100      	movs	r1, #0
 8008fe0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7fb fe49 	bl	8004c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	223d      	movs	r2, #61	@ 0x3d
 8008fee:	2102      	movs	r1, #2
 8008ff0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	0010      	movs	r0, r2
 8008ffe:	f000 f9b3 	bl	8009368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2248      	movs	r2, #72	@ 0x48
 8009006:	2101      	movs	r1, #1
 8009008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	223e      	movs	r2, #62	@ 0x3e
 800900e:	2101      	movs	r1, #1
 8009010:	5499      	strb	r1, [r3, r2]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	223f      	movs	r2, #63	@ 0x3f
 8009016:	2101      	movs	r1, #1
 8009018:	5499      	strb	r1, [r3, r2]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2240      	movs	r2, #64	@ 0x40
 800901e:	2101      	movs	r1, #1
 8009020:	5499      	strb	r1, [r3, r2]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2241      	movs	r2, #65	@ 0x41
 8009026:	2101      	movs	r1, #1
 8009028:	5499      	strb	r1, [r3, r2]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2242      	movs	r2, #66	@ 0x42
 800902e:	2101      	movs	r1, #1
 8009030:	5499      	strb	r1, [r3, r2]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2243      	movs	r2, #67	@ 0x43
 8009036:	2101      	movs	r1, #1
 8009038:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2244      	movs	r2, #68	@ 0x44
 800903e:	2101      	movs	r1, #1
 8009040:	5499      	strb	r1, [r3, r2]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2245      	movs	r2, #69	@ 0x45
 8009046:	2101      	movs	r1, #1
 8009048:	5499      	strb	r1, [r3, r2]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2246      	movs	r2, #70	@ 0x46
 800904e:	2101      	movs	r1, #1
 8009050:	5499      	strb	r1, [r3, r2]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2247      	movs	r2, #71	@ 0x47
 8009056:	2101      	movs	r1, #1
 8009058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	223d      	movs	r2, #61	@ 0x3d
 800905e:	2101      	movs	r1, #1
 8009060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b002      	add	sp, #8
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	223d      	movs	r2, #61	@ 0x3d
 8009078:	5c9b      	ldrb	r3, [r3, r2]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e03c      	b.n	80090fe <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	223d      	movs	r2, #61	@ 0x3d
 8009088:	2102      	movs	r1, #2
 800908a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2101      	movs	r1, #1
 8009098:	430a      	orrs	r2, r1
 800909a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a19      	ldr	r2, [pc, #100]	@ (8009108 <HAL_TIM_Base_Start_IT+0x9c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d009      	beq.n	80090ba <HAL_TIM_Base_Start_IT+0x4e>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a18      	ldr	r2, [pc, #96]	@ (800910c <HAL_TIM_Base_Start_IT+0xa0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d004      	beq.n	80090ba <HAL_TIM_Base_Start_IT+0x4e>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a16      	ldr	r2, [pc, #88]	@ (8009110 <HAL_TIM_Base_Start_IT+0xa4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d116      	bne.n	80090e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4a14      	ldr	r2, [pc, #80]	@ (8009114 <HAL_TIM_Base_Start_IT+0xa8>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b06      	cmp	r3, #6
 80090ca:	d016      	beq.n	80090fa <HAL_TIM_Base_Start_IT+0x8e>
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	2380      	movs	r3, #128	@ 0x80
 80090d0:	025b      	lsls	r3, r3, #9
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d011      	beq.n	80090fa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2101      	movs	r1, #1
 80090e2:	430a      	orrs	r2, r1
 80090e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	e008      	b.n	80090fa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2101      	movs	r1, #1
 80090f4:	430a      	orrs	r2, r1
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e000      	b.n	80090fc <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	0018      	movs	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	b004      	add	sp, #16
 8009104:	bd80      	pop	{r7, pc}
 8009106:	46c0      	nop			@ (mov r8, r8)
 8009108:	40012c00 	.word	0x40012c00
 800910c:	40000400 	.word	0x40000400
 8009110:	40014000 	.word	0x40014000
 8009114:	00010007 	.word	0x00010007

08009118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2202      	movs	r2, #2
 8009134:	4013      	ands	r3, r2
 8009136:	d021      	beq.n	800917c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	4013      	ands	r3, r2
 800913e:	d01d      	beq.n	800917c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2203      	movs	r2, #3
 8009146:	4252      	negs	r2, r2
 8009148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	2203      	movs	r2, #3
 8009158:	4013      	ands	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	0018      	movs	r0, r3
 8009160:	f000 f8ea 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 8009164:	e007      	b.n	8009176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f000 f8dd 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0018      	movs	r0, r3
 8009172:	f000 f8e9 	bl	8009348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2204      	movs	r2, #4
 8009180:	4013      	ands	r3, r2
 8009182:	d022      	beq.n	80091ca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2204      	movs	r2, #4
 8009188:	4013      	ands	r3, r2
 800918a:	d01e      	beq.n	80091ca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2205      	movs	r2, #5
 8009192:	4252      	negs	r2, r2
 8009194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	23c0      	movs	r3, #192	@ 0xc0
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4013      	ands	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f000 f8c3 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 80091b2:	e007      	b.n	80091c4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	0018      	movs	r0, r3
 80091b8:	f000 f8b6 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	0018      	movs	r0, r3
 80091c0:	f000 f8c2 	bl	8009348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2208      	movs	r2, #8
 80091ce:	4013      	ands	r3, r2
 80091d0:	d021      	beq.n	8009216 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2208      	movs	r2, #8
 80091d6:	4013      	ands	r3, r2
 80091d8:	d01d      	beq.n	8009216 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2209      	movs	r2, #9
 80091e0:	4252      	negs	r2, r2
 80091e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2204      	movs	r2, #4
 80091e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	2203      	movs	r2, #3
 80091f2:	4013      	ands	r3, r2
 80091f4:	d004      	beq.n	8009200 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	0018      	movs	r0, r3
 80091fa:	f000 f89d 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 80091fe:	e007      	b.n	8009210 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	0018      	movs	r0, r3
 8009204:	f000 f890 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0018      	movs	r0, r3
 800920c:	f000 f89c 	bl	8009348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2210      	movs	r2, #16
 800921a:	4013      	ands	r3, r2
 800921c:	d022      	beq.n	8009264 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2210      	movs	r2, #16
 8009222:	4013      	ands	r3, r2
 8009224:	d01e      	beq.n	8009264 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2211      	movs	r2, #17
 800922c:	4252      	negs	r2, r2
 800922e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2208      	movs	r2, #8
 8009234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69da      	ldr	r2, [r3, #28]
 800923c:	23c0      	movs	r3, #192	@ 0xc0
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4013      	ands	r3, r2
 8009242:	d004      	beq.n	800924e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	0018      	movs	r0, r3
 8009248:	f000 f876 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 800924c:	e007      	b.n	800925e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	0018      	movs	r0, r3
 8009252:	f000 f869 	bl	8009328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	0018      	movs	r0, r3
 800925a:	f000 f875 	bl	8009348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2201      	movs	r2, #1
 8009268:	4013      	ands	r3, r2
 800926a:	d00c      	beq.n	8009286 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	4013      	ands	r3, r2
 8009272:	d008      	beq.n	8009286 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2202      	movs	r2, #2
 800927a:	4252      	negs	r2, r2
 800927c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	0018      	movs	r0, r3
 8009282:	f7fa fa6f 	bl	8003764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2280      	movs	r2, #128	@ 0x80
 800928a:	4013      	ands	r3, r2
 800928c:	d104      	bne.n	8009298 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	2380      	movs	r3, #128	@ 0x80
 8009292:	019b      	lsls	r3, r3, #6
 8009294:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009296:	d00b      	beq.n	80092b0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2280      	movs	r2, #128	@ 0x80
 800929c:	4013      	ands	r3, r2
 800929e:	d007      	beq.n	80092b0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009320 <HAL_TIM_IRQHandler+0x208>)
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	0018      	movs	r0, r3
 80092ac:	f000 f8e8 	bl	8009480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	2380      	movs	r3, #128	@ 0x80
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	4013      	ands	r3, r2
 80092b8:	d00b      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2280      	movs	r2, #128	@ 0x80
 80092be:	4013      	ands	r3, r2
 80092c0:	d007      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a17      	ldr	r2, [pc, #92]	@ (8009324 <HAL_TIM_IRQHandler+0x20c>)
 80092c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 f8df 	bl	8009490 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2240      	movs	r2, #64	@ 0x40
 80092d6:	4013      	ands	r3, r2
 80092d8:	d00c      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2240      	movs	r2, #64	@ 0x40
 80092de:	4013      	ands	r3, r2
 80092e0:	d008      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2241      	movs	r2, #65	@ 0x41
 80092e8:	4252      	negs	r2, r2
 80092ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	0018      	movs	r0, r3
 80092f0:	f000 f832 	bl	8009358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2220      	movs	r2, #32
 80092f8:	4013      	ands	r3, r2
 80092fa:	d00c      	beq.n	8009316 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	4013      	ands	r3, r2
 8009302:	d008      	beq.n	8009316 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2221      	movs	r2, #33	@ 0x21
 800930a:	4252      	negs	r2, r2
 800930c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0018      	movs	r0, r3
 8009312:	f000 f8ad 	bl	8009470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	46bd      	mov	sp, r7
 800931a:	b004      	add	sp, #16
 800931c:	bd80      	pop	{r7, pc}
 800931e:	46c0      	nop			@ (mov r8, r8)
 8009320:	ffffdf7f 	.word	0xffffdf7f
 8009324:	fffffeff 	.word	0xfffffeff

08009328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009330:	46c0      	nop			@ (mov r8, r8)
 8009332:	46bd      	mov	sp, r7
 8009334:	b002      	add	sp, #8
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009340:	46c0      	nop			@ (mov r8, r8)
 8009342:	46bd      	mov	sp, r7
 8009344:	b002      	add	sp, #8
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009350:	46c0      	nop			@ (mov r8, r8)
 8009352:	46bd      	mov	sp, r7
 8009354:	b002      	add	sp, #8
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009360:	46c0      	nop			@ (mov r8, r8)
 8009362:	46bd      	mov	sp, r7
 8009364:	b002      	add	sp, #8
 8009366:	bd80      	pop	{r7, pc}

08009368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a36      	ldr	r2, [pc, #216]	@ (8009454 <TIM_Base_SetConfig+0xec>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d003      	beq.n	8009388 <TIM_Base_SetConfig+0x20>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a35      	ldr	r2, [pc, #212]	@ (8009458 <TIM_Base_SetConfig+0xf0>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d108      	bne.n	800939a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2270      	movs	r2, #112	@ 0x70
 800938c:	4393      	bics	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a2d      	ldr	r2, [pc, #180]	@ (8009454 <TIM_Base_SetConfig+0xec>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d013      	beq.n	80093ca <TIM_Base_SetConfig+0x62>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009458 <TIM_Base_SetConfig+0xf0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00f      	beq.n	80093ca <TIM_Base_SetConfig+0x62>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a2b      	ldr	r2, [pc, #172]	@ (800945c <TIM_Base_SetConfig+0xf4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00b      	beq.n	80093ca <TIM_Base_SetConfig+0x62>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009460 <TIM_Base_SetConfig+0xf8>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d007      	beq.n	80093ca <TIM_Base_SetConfig+0x62>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a29      	ldr	r2, [pc, #164]	@ (8009464 <TIM_Base_SetConfig+0xfc>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d003      	beq.n	80093ca <TIM_Base_SetConfig+0x62>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a28      	ldr	r2, [pc, #160]	@ (8009468 <TIM_Base_SetConfig+0x100>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d108      	bne.n	80093dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a27      	ldr	r2, [pc, #156]	@ (800946c <TIM_Base_SetConfig+0x104>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2280      	movs	r2, #128	@ 0x80
 80093e0:	4393      	bics	r3, r2
 80093e2:	001a      	movs	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a13      	ldr	r2, [pc, #76]	@ (8009454 <TIM_Base_SetConfig+0xec>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00b      	beq.n	8009422 <TIM_Base_SetConfig+0xba>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a14      	ldr	r2, [pc, #80]	@ (8009460 <TIM_Base_SetConfig+0xf8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d007      	beq.n	8009422 <TIM_Base_SetConfig+0xba>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a13      	ldr	r2, [pc, #76]	@ (8009464 <TIM_Base_SetConfig+0xfc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d003      	beq.n	8009422 <TIM_Base_SetConfig+0xba>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a12      	ldr	r2, [pc, #72]	@ (8009468 <TIM_Base_SetConfig+0x100>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d103      	bne.n	800942a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	2201      	movs	r2, #1
 8009436:	4013      	ands	r3, r2
 8009438:	2b01      	cmp	r3, #1
 800943a:	d106      	bne.n	800944a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2201      	movs	r2, #1
 8009442:	4393      	bics	r3, r2
 8009444:	001a      	movs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	611a      	str	r2, [r3, #16]
  }
}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	46bd      	mov	sp, r7
 800944e:	b004      	add	sp, #16
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			@ (mov r8, r8)
 8009454:	40012c00 	.word	0x40012c00
 8009458:	40000400 	.word	0x40000400
 800945c:	40002000 	.word	0x40002000
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800
 800946c:	fffffcff 	.word	0xfffffcff

08009470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009478:	46c0      	nop			@ (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	b002      	add	sp, #8
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009488:	46c0      	nop			@ (mov r8, r8)
 800948a:	46bd      	mov	sp, r7
 800948c:	b002      	add	sp, #8
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009498:	46c0      	nop			@ (mov r8, r8)
 800949a:	46bd      	mov	sp, r7
 800949c:	b002      	add	sp, #8
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e046      	b.n	8009540 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2288      	movs	r2, #136	@ 0x88
 80094b6:	589b      	ldr	r3, [r3, r2]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d107      	bne.n	80094cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2284      	movs	r2, #132	@ 0x84
 80094c0:	2100      	movs	r1, #0
 80094c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7fb fc00 	bl	8004ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2288      	movs	r2, #136	@ 0x88
 80094d0:	2124      	movs	r1, #36	@ 0x24
 80094d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2101      	movs	r1, #1
 80094e0:	438a      	bics	r2, r1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 fae4 	bl	8009abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	0018      	movs	r0, r3
 80094f8:	f000 f93c 	bl	8009774 <UART_SetConfig>
 80094fc:	0003      	movs	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e01c      	b.n	8009540 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	490d      	ldr	r1, [pc, #52]	@ (8009548 <HAL_UART_Init+0xa8>)
 8009512:	400a      	ands	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	212a      	movs	r1, #42	@ 0x2a
 8009522:	438a      	bics	r2, r1
 8009524:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2101      	movs	r1, #1
 8009532:	430a      	orrs	r2, r1
 8009534:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	0018      	movs	r0, r3
 800953a:	f000 fb73 	bl	8009c24 <UART_CheckIdleState>
 800953e:	0003      	movs	r3, r0
}
 8009540:	0018      	movs	r0, r3
 8009542:	46bd      	mov	sp, r7
 8009544:	b002      	add	sp, #8
 8009546:	bd80      	pop	{r7, pc}
 8009548:	ffffb7ff 	.word	0xffffb7ff

0800954c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	1dbb      	adds	r3, r7, #6
 8009558:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2288      	movs	r2, #136	@ 0x88
 800955e:	589b      	ldr	r3, [r3, r2]
 8009560:	2b20      	cmp	r3, #32
 8009562:	d000      	beq.n	8009566 <HAL_UART_Transmit_DMA+0x1a>
 8009564:	e079      	b.n	800965a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_UART_Transmit_DMA+0x28>
 800956c:	1dbb      	adds	r3, r7, #6
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e071      	b.n	800965c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	2380      	movs	r3, #128	@ 0x80
 800957e:	015b      	lsls	r3, r3, #5
 8009580:	429a      	cmp	r2, r3
 8009582:	d109      	bne.n	8009598 <HAL_UART_Transmit_DMA+0x4c>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2201      	movs	r2, #1
 8009590:	4013      	ands	r3, r2
 8009592:	d001      	beq.n	8009598 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e061      	b.n	800965c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	1dba      	adds	r2, r7, #6
 80095a2:	2154      	movs	r1, #84	@ 0x54
 80095a4:	8812      	ldrh	r2, [r2, #0]
 80095a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	1dba      	adds	r2, r7, #6
 80095ac:	2156      	movs	r1, #86	@ 0x56
 80095ae:	8812      	ldrh	r2, [r2, #0]
 80095b0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2290      	movs	r2, #144	@ 0x90
 80095b6:	2100      	movs	r1, #0
 80095b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2288      	movs	r2, #136	@ 0x88
 80095be:	2121      	movs	r1, #33	@ 0x21
 80095c0:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d028      	beq.n	800961c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095ce:	4a25      	ldr	r2, [pc, #148]	@ (8009664 <HAL_UART_Transmit_DMA+0x118>)
 80095d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095d6:	4a24      	ldr	r2, [pc, #144]	@ (8009668 <HAL_UART_Transmit_DMA+0x11c>)
 80095d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095de:	4a23      	ldr	r2, [pc, #140]	@ (800966c <HAL_UART_Transmit_DMA+0x120>)
 80095e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095e6:	2200      	movs	r2, #0
 80095e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f2:	0019      	movs	r1, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3328      	adds	r3, #40	@ 0x28
 80095fa:	001a      	movs	r2, r3
 80095fc:	1dbb      	adds	r3, r7, #6
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	f7fc fd6e 	bl	80060e0 <HAL_DMA_Start_IT>
 8009604:	1e03      	subs	r3, r0, #0
 8009606:	d009      	beq.n	800961c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2290      	movs	r2, #144	@ 0x90
 800960c:	2110      	movs	r1, #16
 800960e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2288      	movs	r2, #136	@ 0x88
 8009614:	2120      	movs	r1, #32
 8009616:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e01f      	b.n	800965c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2240      	movs	r2, #64	@ 0x40
 8009622:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009624:	f3ef 8310 	mrs	r3, PRIMASK
 8009628:	613b      	str	r3, [r7, #16]
  return(result);
 800962a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	2301      	movs	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f383 8810 	msr	PRIMASK, r3
}
 8009638:	46c0      	nop			@ (mov r8, r8)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2180      	movs	r1, #128	@ 0x80
 8009646:	430a      	orrs	r2, r1
 8009648:	609a      	str	r2, [r3, #8]
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f383 8810 	msr	PRIMASK, r3
}
 8009654:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	e000      	b.n	800965c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800965a:	2302      	movs	r3, #2
  }
}
 800965c:	0018      	movs	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	b008      	add	sp, #32
 8009662:	bd80      	pop	{r7, pc}
 8009664:	0800a0f1 	.word	0x0800a0f1
 8009668:	0800a189 	.word	0x0800a189
 800966c:	0800a31b 	.word	0x0800a31b

08009670 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	1dbb      	adds	r3, r7, #6
 800967c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	228c      	movs	r2, #140	@ 0x8c
 8009682:	589b      	ldr	r3, [r3, r2]
 8009684:	2b20      	cmp	r3, #32
 8009686:	d145      	bne.n	8009714 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <HAL_UART_Receive_DMA+0x26>
 800968e:	1dbb      	adds	r3, r7, #6
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e03d      	b.n	8009716 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	2380      	movs	r3, #128	@ 0x80
 80096a0:	015b      	lsls	r3, r3, #5
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d109      	bne.n	80096ba <HAL_UART_Receive_DMA+0x4a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d105      	bne.n	80096ba <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2201      	movs	r2, #1
 80096b2:	4013      	ands	r3, r2
 80096b4:	d001      	beq.n	80096ba <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e02d      	b.n	8009716 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	2380      	movs	r3, #128	@ 0x80
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	4013      	ands	r3, r2
 80096cc:	d019      	beq.n	8009702 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ce:	f3ef 8310 	mrs	r3, PRIMASK
 80096d2:	613b      	str	r3, [r7, #16]
  return(result);
 80096d4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f383 8810 	msr	PRIMASK, r3
}
 80096e2:	46c0      	nop			@ (mov r8, r8)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2180      	movs	r1, #128	@ 0x80
 80096f0:	04c9      	lsls	r1, r1, #19
 80096f2:	430a      	orrs	r2, r1
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009702:	1dbb      	adds	r3, r7, #6
 8009704:	881a      	ldrh	r2, [r3, #0]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	0018      	movs	r0, r3
 800970c:	f000 fba4 	bl	8009e58 <UART_Start_Receive_DMA>
 8009710:	0003      	movs	r3, r0
 8009712:	e000      	b.n	8009716 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	0018      	movs	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	b008      	add	sp, #32
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009726:	46c0      	nop			@ (mov r8, r8)
 8009728:	46bd      	mov	sp, r7
 800972a:	b002      	add	sp, #8
 800972c:	bd80      	pop	{r7, pc}

0800972e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009736:	46c0      	nop			@ (mov r8, r8)
 8009738:	46bd      	mov	sp, r7
 800973a:	b002      	add	sp, #8
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009746:	46c0      	nop			@ (mov r8, r8)
 8009748:	46bd      	mov	sp, r7
 800974a:	b002      	add	sp, #8
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009756:	46c0      	nop			@ (mov r8, r8)
 8009758:	46bd      	mov	sp, r7
 800975a:	b002      	add	sp, #8
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	000a      	movs	r2, r1
 8009768:	1cbb      	adds	r3, r7, #2
 800976a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800976c:	46c0      	nop			@ (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}

08009774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800977c:	231a      	movs	r3, #26
 800977e:	18fb      	adds	r3, r7, r3
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	4313      	orrs	r3, r2
 800979a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4abc      	ldr	r2, [pc, #752]	@ (8009a94 <UART_SetConfig+0x320>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	0019      	movs	r1, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4ab7      	ldr	r2, [pc, #732]	@ (8009a98 <UART_SetConfig+0x324>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	0019      	movs	r1, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	4aae      	ldr	r2, [pc, #696]	@ (8009a9c <UART_SetConfig+0x328>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	0019      	movs	r1, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f6:	220f      	movs	r2, #15
 80097f8:	4393      	bics	r3, r2
 80097fa:	0019      	movs	r1, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4aa4      	ldr	r2, [pc, #656]	@ (8009aa0 <UART_SetConfig+0x32c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d127      	bne.n	8009862 <UART_SetConfig+0xee>
 8009812:	4ba4      	ldr	r3, [pc, #656]	@ (8009aa4 <UART_SetConfig+0x330>)
 8009814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009816:	2203      	movs	r2, #3
 8009818:	4013      	ands	r3, r2
 800981a:	2b03      	cmp	r3, #3
 800981c:	d017      	beq.n	800984e <UART_SetConfig+0xda>
 800981e:	d81b      	bhi.n	8009858 <UART_SetConfig+0xe4>
 8009820:	2b02      	cmp	r3, #2
 8009822:	d00a      	beq.n	800983a <UART_SetConfig+0xc6>
 8009824:	d818      	bhi.n	8009858 <UART_SetConfig+0xe4>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <UART_SetConfig+0xbc>
 800982a:	2b01      	cmp	r3, #1
 800982c:	d00a      	beq.n	8009844 <UART_SetConfig+0xd0>
 800982e:	e013      	b.n	8009858 <UART_SetConfig+0xe4>
 8009830:	231b      	movs	r3, #27
 8009832:	18fb      	adds	r3, r7, r3
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e058      	b.n	80098ec <UART_SetConfig+0x178>
 800983a:	231b      	movs	r3, #27
 800983c:	18fb      	adds	r3, r7, r3
 800983e:	2202      	movs	r2, #2
 8009840:	701a      	strb	r2, [r3, #0]
 8009842:	e053      	b.n	80098ec <UART_SetConfig+0x178>
 8009844:	231b      	movs	r3, #27
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	2204      	movs	r2, #4
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e04e      	b.n	80098ec <UART_SetConfig+0x178>
 800984e:	231b      	movs	r3, #27
 8009850:	18fb      	adds	r3, r7, r3
 8009852:	2208      	movs	r2, #8
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	e049      	b.n	80098ec <UART_SetConfig+0x178>
 8009858:	231b      	movs	r3, #27
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	2210      	movs	r2, #16
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	e044      	b.n	80098ec <UART_SetConfig+0x178>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a90      	ldr	r2, [pc, #576]	@ (8009aa8 <UART_SetConfig+0x334>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d127      	bne.n	80098bc <UART_SetConfig+0x148>
 800986c:	4b8d      	ldr	r3, [pc, #564]	@ (8009aa4 <UART_SetConfig+0x330>)
 800986e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009870:	220c      	movs	r2, #12
 8009872:	4013      	ands	r3, r2
 8009874:	2b0c      	cmp	r3, #12
 8009876:	d017      	beq.n	80098a8 <UART_SetConfig+0x134>
 8009878:	d81b      	bhi.n	80098b2 <UART_SetConfig+0x13e>
 800987a:	2b08      	cmp	r3, #8
 800987c:	d00a      	beq.n	8009894 <UART_SetConfig+0x120>
 800987e:	d818      	bhi.n	80098b2 <UART_SetConfig+0x13e>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <UART_SetConfig+0x116>
 8009884:	2b04      	cmp	r3, #4
 8009886:	d00a      	beq.n	800989e <UART_SetConfig+0x12a>
 8009888:	e013      	b.n	80098b2 <UART_SetConfig+0x13e>
 800988a:	231b      	movs	r3, #27
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
 8009892:	e02b      	b.n	80098ec <UART_SetConfig+0x178>
 8009894:	231b      	movs	r3, #27
 8009896:	18fb      	adds	r3, r7, r3
 8009898:	2202      	movs	r2, #2
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e026      	b.n	80098ec <UART_SetConfig+0x178>
 800989e:	231b      	movs	r3, #27
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	2204      	movs	r2, #4
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	e021      	b.n	80098ec <UART_SetConfig+0x178>
 80098a8:	231b      	movs	r3, #27
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	2208      	movs	r2, #8
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	e01c      	b.n	80098ec <UART_SetConfig+0x178>
 80098b2:	231b      	movs	r3, #27
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	2210      	movs	r2, #16
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	e017      	b.n	80098ec <UART_SetConfig+0x178>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a7a      	ldr	r2, [pc, #488]	@ (8009aac <UART_SetConfig+0x338>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d104      	bne.n	80098d0 <UART_SetConfig+0x15c>
 80098c6:	231b      	movs	r3, #27
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e00d      	b.n	80098ec <UART_SetConfig+0x178>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a76      	ldr	r2, [pc, #472]	@ (8009ab0 <UART_SetConfig+0x33c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d104      	bne.n	80098e4 <UART_SetConfig+0x170>
 80098da:	231b      	movs	r3, #27
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	e003      	b.n	80098ec <UART_SetConfig+0x178>
 80098e4:	231b      	movs	r3, #27
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	2210      	movs	r2, #16
 80098ea:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	2380      	movs	r3, #128	@ 0x80
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d000      	beq.n	80098fa <UART_SetConfig+0x186>
 80098f8:	e065      	b.n	80099c6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80098fa:	231b      	movs	r3, #27
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b08      	cmp	r3, #8
 8009902:	d015      	beq.n	8009930 <UART_SetConfig+0x1bc>
 8009904:	dc18      	bgt.n	8009938 <UART_SetConfig+0x1c4>
 8009906:	2b04      	cmp	r3, #4
 8009908:	d00d      	beq.n	8009926 <UART_SetConfig+0x1b2>
 800990a:	dc15      	bgt.n	8009938 <UART_SetConfig+0x1c4>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <UART_SetConfig+0x1a2>
 8009910:	2b02      	cmp	r3, #2
 8009912:	d005      	beq.n	8009920 <UART_SetConfig+0x1ac>
 8009914:	e010      	b.n	8009938 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009916:	f7fe fc47 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800991a:	0003      	movs	r3, r0
 800991c:	617b      	str	r3, [r7, #20]
        break;
 800991e:	e012      	b.n	8009946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009920:	4b64      	ldr	r3, [pc, #400]	@ (8009ab4 <UART_SetConfig+0x340>)
 8009922:	617b      	str	r3, [r7, #20]
        break;
 8009924:	e00f      	b.n	8009946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009926:	f7fe fbb3 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 800992a:	0003      	movs	r3, r0
 800992c:	617b      	str	r3, [r7, #20]
        break;
 800992e:	e00a      	b.n	8009946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009930:	2380      	movs	r3, #128	@ 0x80
 8009932:	021b      	lsls	r3, r3, #8
 8009934:	617b      	str	r3, [r7, #20]
        break;
 8009936:	e006      	b.n	8009946 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800993c:	231a      	movs	r3, #26
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
        break;
 8009944:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d100      	bne.n	800994e <UART_SetConfig+0x1da>
 800994c:	e08d      	b.n	8009a6a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009952:	4b59      	ldr	r3, [pc, #356]	@ (8009ab8 <UART_SetConfig+0x344>)
 8009954:	0052      	lsls	r2, r2, #1
 8009956:	5ad3      	ldrh	r3, [r2, r3]
 8009958:	0019      	movs	r1, r3
 800995a:	6978      	ldr	r0, [r7, #20]
 800995c:	f7f6 fbec 	bl	8000138 <__udivsi3>
 8009960:	0003      	movs	r3, r0
 8009962:	005a      	lsls	r2, r3, #1
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	085b      	lsrs	r3, r3, #1
 800996a:	18d2      	adds	r2, r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	0019      	movs	r1, r3
 8009972:	0010      	movs	r0, r2
 8009974:	f7f6 fbe0 	bl	8000138 <__udivsi3>
 8009978:	0003      	movs	r3, r0
 800997a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b0f      	cmp	r3, #15
 8009980:	d91c      	bls.n	80099bc <UART_SetConfig+0x248>
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	2380      	movs	r3, #128	@ 0x80
 8009986:	025b      	lsls	r3, r3, #9
 8009988:	429a      	cmp	r2, r3
 800998a:	d217      	bcs.n	80099bc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	b29a      	uxth	r2, r3
 8009990:	200e      	movs	r0, #14
 8009992:	183b      	adds	r3, r7, r0
 8009994:	210f      	movs	r1, #15
 8009996:	438a      	bics	r2, r1
 8009998:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	085b      	lsrs	r3, r3, #1
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2207      	movs	r2, #7
 80099a2:	4013      	ands	r3, r2
 80099a4:	b299      	uxth	r1, r3
 80099a6:	183b      	adds	r3, r7, r0
 80099a8:	183a      	adds	r2, r7, r0
 80099aa:	8812      	ldrh	r2, [r2, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	183a      	adds	r2, r7, r0
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	60da      	str	r2, [r3, #12]
 80099ba:	e056      	b.n	8009a6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80099bc:	231a      	movs	r3, #26
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	2201      	movs	r2, #1
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e051      	b.n	8009a6a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099c6:	231b      	movs	r3, #27
 80099c8:	18fb      	adds	r3, r7, r3
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d015      	beq.n	80099fc <UART_SetConfig+0x288>
 80099d0:	dc18      	bgt.n	8009a04 <UART_SetConfig+0x290>
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00d      	beq.n	80099f2 <UART_SetConfig+0x27e>
 80099d6:	dc15      	bgt.n	8009a04 <UART_SetConfig+0x290>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <UART_SetConfig+0x26e>
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d005      	beq.n	80099ec <UART_SetConfig+0x278>
 80099e0:	e010      	b.n	8009a04 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e2:	f7fe fbe1 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 80099e6:	0003      	movs	r3, r0
 80099e8:	617b      	str	r3, [r7, #20]
        break;
 80099ea:	e012      	b.n	8009a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099ec:	4b31      	ldr	r3, [pc, #196]	@ (8009ab4 <UART_SetConfig+0x340>)
 80099ee:	617b      	str	r3, [r7, #20]
        break;
 80099f0:	e00f      	b.n	8009a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099f2:	f7fe fb4d 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 80099f6:	0003      	movs	r3, r0
 80099f8:	617b      	str	r3, [r7, #20]
        break;
 80099fa:	e00a      	b.n	8009a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099fc:	2380      	movs	r3, #128	@ 0x80
 80099fe:	021b      	lsls	r3, r3, #8
 8009a00:	617b      	str	r3, [r7, #20]
        break;
 8009a02:	e006      	b.n	8009a12 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009a08:	231a      	movs	r3, #26
 8009a0a:	18fb      	adds	r3, r7, r3
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
        break;
 8009a10:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d028      	beq.n	8009a6a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a1c:	4b26      	ldr	r3, [pc, #152]	@ (8009ab8 <UART_SetConfig+0x344>)
 8009a1e:	0052      	lsls	r2, r2, #1
 8009a20:	5ad3      	ldrh	r3, [r2, r3]
 8009a22:	0019      	movs	r1, r3
 8009a24:	6978      	ldr	r0, [r7, #20]
 8009a26:	f7f6 fb87 	bl	8000138 <__udivsi3>
 8009a2a:	0003      	movs	r3, r0
 8009a2c:	001a      	movs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	085b      	lsrs	r3, r3, #1
 8009a34:	18d2      	adds	r2, r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	0019      	movs	r1, r3
 8009a3c:	0010      	movs	r0, r2
 8009a3e:	f7f6 fb7b 	bl	8000138 <__udivsi3>
 8009a42:	0003      	movs	r3, r0
 8009a44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b0f      	cmp	r3, #15
 8009a4a:	d90a      	bls.n	8009a62 <UART_SetConfig+0x2ee>
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	2380      	movs	r3, #128	@ 0x80
 8009a50:	025b      	lsls	r3, r3, #9
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d205      	bcs.n	8009a62 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60da      	str	r2, [r3, #12]
 8009a60:	e003      	b.n	8009a6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009a62:	231a      	movs	r3, #26
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	226a      	movs	r2, #106	@ 0x6a
 8009a6e:	2101      	movs	r1, #1
 8009a70:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2268      	movs	r2, #104	@ 0x68
 8009a76:	2101      	movs	r1, #1
 8009a78:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a86:	231a      	movs	r3, #26
 8009a88:	18fb      	adds	r3, r7, r3
 8009a8a:	781b      	ldrb	r3, [r3, #0]
}
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	b008      	add	sp, #32
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	cfff69f3 	.word	0xcfff69f3
 8009a98:	ffffcfff 	.word	0xffffcfff
 8009a9c:	11fff4ff 	.word	0x11fff4ff
 8009aa0:	40013800 	.word	0x40013800
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	40004400 	.word	0x40004400
 8009aac:	40004800 	.word	0x40004800
 8009ab0:	40004c00 	.word	0x40004c00
 8009ab4:	00f42400 	.word	0x00f42400
 8009ab8:	0800d4ec 	.word	0x0800d4ec

08009abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac8:	2208      	movs	r2, #8
 8009aca:	4013      	ands	r3, r2
 8009acc:	d00b      	beq.n	8009ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8009c00 <UART_AdvFeatureConfig+0x144>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	0019      	movs	r1, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aea:	2201      	movs	r2, #1
 8009aec:	4013      	ands	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4a43      	ldr	r2, [pc, #268]	@ (8009c04 <UART_AdvFeatureConfig+0x148>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	0019      	movs	r1, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a3b      	ldr	r2, [pc, #236]	@ (8009c08 <UART_AdvFeatureConfig+0x14c>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2e:	2204      	movs	r2, #4
 8009b30:	4013      	ands	r3, r2
 8009b32:	d00b      	beq.n	8009b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	4a34      	ldr	r2, [pc, #208]	@ (8009c0c <UART_AdvFeatureConfig+0x150>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	0019      	movs	r1, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	2210      	movs	r2, #16
 8009b52:	4013      	ands	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8009c10 <UART_AdvFeatureConfig+0x154>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	0019      	movs	r1, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b72:	2220      	movs	r2, #32
 8009b74:	4013      	ands	r3, r2
 8009b76:	d00b      	beq.n	8009b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4a25      	ldr	r2, [pc, #148]	@ (8009c14 <UART_AdvFeatureConfig+0x158>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	0019      	movs	r1, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b94:	2240      	movs	r2, #64	@ 0x40
 8009b96:	4013      	ands	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c18 <UART_AdvFeatureConfig+0x15c>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bb6:	2380      	movs	r3, #128	@ 0x80
 8009bb8:	035b      	lsls	r3, r3, #13
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d10b      	bne.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a15      	ldr	r2, [pc, #84]	@ (8009c1c <UART_AdvFeatureConfig+0x160>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	0019      	movs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bda:	2280      	movs	r2, #128	@ 0x80
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d00b      	beq.n	8009bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4a0e      	ldr	r2, [pc, #56]	@ (8009c20 <UART_AdvFeatureConfig+0x164>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	0019      	movs	r1, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]
  }
}
 8009bf8:	46c0      	nop			@ (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	ffff7fff 	.word	0xffff7fff
 8009c04:	fffdffff 	.word	0xfffdffff
 8009c08:	fffeffff 	.word	0xfffeffff
 8009c0c:	fffbffff 	.word	0xfffbffff
 8009c10:	ffffefff 	.word	0xffffefff
 8009c14:	ffffdfff 	.word	0xffffdfff
 8009c18:	ffefffff 	.word	0xffefffff
 8009c1c:	ff9fffff 	.word	0xff9fffff
 8009c20:	fff7ffff 	.word	0xfff7ffff

08009c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b092      	sub	sp, #72	@ 0x48
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2290      	movs	r2, #144	@ 0x90
 8009c30:	2100      	movs	r1, #0
 8009c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c34:	f7fb fada 	bl	80051ec <HAL_GetTick>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2208      	movs	r2, #8
 8009c44:	4013      	ands	r3, r2
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d12d      	bne.n	8009ca6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4c:	2280      	movs	r2, #128	@ 0x80
 8009c4e:	0391      	lsls	r1, r2, #14
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4a47      	ldr	r2, [pc, #284]	@ (8009d70 <UART_CheckIdleState+0x14c>)
 8009c54:	9200      	str	r2, [sp, #0]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f000 f88e 	bl	8009d78 <UART_WaitOnFlagUntilTimeout>
 8009c5c:	1e03      	subs	r3, r0, #0
 8009c5e:	d022      	beq.n	8009ca6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c60:	f3ef 8310 	mrs	r3, PRIMASK
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	f383 8810 	msr	PRIMASK, r3
}
 8009c74:	46c0      	nop			@ (mov r8, r8)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2180      	movs	r1, #128	@ 0x80
 8009c82:	438a      	bics	r2, r1
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8c:	f383 8810 	msr	PRIMASK, r3
}
 8009c90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2288      	movs	r2, #136	@ 0x88
 8009c96:	2120      	movs	r1, #32
 8009c98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2284      	movs	r2, #132	@ 0x84
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e060      	b.n	8009d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2204      	movs	r2, #4
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d146      	bne.n	8009d42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb6:	2280      	movs	r2, #128	@ 0x80
 8009cb8:	03d1      	lsls	r1, r2, #15
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8009d70 <UART_CheckIdleState+0x14c>)
 8009cbe:	9200      	str	r2, [sp, #0]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f000 f859 	bl	8009d78 <UART_WaitOnFlagUntilTimeout>
 8009cc6:	1e03      	subs	r3, r0, #0
 8009cc8:	d03b      	beq.n	8009d42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cca:	f3ef 8310 	mrs	r3, PRIMASK
 8009cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f383 8810 	msr	PRIMASK, r3
}
 8009cde:	46c0      	nop			@ (mov r8, r8)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4922      	ldr	r1, [pc, #136]	@ (8009d74 <UART_CheckIdleState+0x150>)
 8009cec:	400a      	ands	r2, r1
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f383 8810 	msr	PRIMASK, r3
}
 8009cfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8009d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d06:	2301      	movs	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f383 8810 	msr	PRIMASK, r3
}
 8009d10:	46c0      	nop			@ (mov r8, r8)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	438a      	bics	r2, r1
 8009d20:	609a      	str	r2, [r3, #8]
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	f383 8810 	msr	PRIMASK, r3
}
 8009d2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	228c      	movs	r2, #140	@ 0x8c
 8009d32:	2120      	movs	r1, #32
 8009d34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2284      	movs	r2, #132	@ 0x84
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e012      	b.n	8009d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2288      	movs	r2, #136	@ 0x88
 8009d46:	2120      	movs	r1, #32
 8009d48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	228c      	movs	r2, #140	@ 0x8c
 8009d4e:	2120      	movs	r1, #32
 8009d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2284      	movs	r2, #132	@ 0x84
 8009d62:	2100      	movs	r1, #0
 8009d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	0018      	movs	r0, r3
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b010      	add	sp, #64	@ 0x40
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	01ffffff 	.word	0x01ffffff
 8009d74:	fffffedf 	.word	0xfffffedf

08009d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	1dfb      	adds	r3, r7, #7
 8009d86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d88:	e051      	b.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	d04e      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d90:	f7fb fa2c 	bl	80051ec <HAL_GetTick>
 8009d94:	0002      	movs	r2, r0
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d302      	bcc.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e051      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2204      	movs	r2, #4
 8009db2:	4013      	ands	r3, r2
 8009db4:	d03b      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b80      	cmp	r3, #128	@ 0x80
 8009dba:	d038      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b40      	cmp	r3, #64	@ 0x40
 8009dc0:	d035      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	2208      	movs	r2, #8
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d111      	bne.n	8009df4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2208      	movs	r2, #8
 8009dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	0018      	movs	r0, r3
 8009ddc:	f000 f922 	bl	800a024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2290      	movs	r2, #144	@ 0x90
 8009de4:	2108      	movs	r1, #8
 8009de6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2284      	movs	r2, #132	@ 0x84
 8009dec:	2100      	movs	r1, #0
 8009dee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e02c      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69da      	ldr	r2, [r3, #28]
 8009dfa:	2380      	movs	r3, #128	@ 0x80
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	401a      	ands	r2, r3
 8009e00:	2380      	movs	r3, #128	@ 0x80
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d112      	bne.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	0112      	lsls	r2, r2, #4
 8009e10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 f905 	bl	800a024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2290      	movs	r2, #144	@ 0x90
 8009e1e:	2120      	movs	r1, #32
 8009e20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2284      	movs	r2, #132	@ 0x84
 8009e26:	2100      	movs	r1, #0
 8009e28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e00f      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	4013      	ands	r3, r2
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	425a      	negs	r2, r3
 8009e3e:	4153      	adcs	r3, r2
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	001a      	movs	r2, r3
 8009e44:	1dfb      	adds	r3, r7, #7
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d09e      	beq.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b004      	add	sp, #16
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b090      	sub	sp, #64	@ 0x40
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	1dbb      	adds	r3, r7, #6
 8009e64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	1dba      	adds	r2, r7, #6
 8009e70:	215c      	movs	r1, #92	@ 0x5c
 8009e72:	8812      	ldrh	r2, [r2, #0]
 8009e74:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2290      	movs	r2, #144	@ 0x90
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	228c      	movs	r2, #140	@ 0x8c
 8009e82:	2122      	movs	r1, #34	@ 0x22
 8009e84:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2280      	movs	r2, #128	@ 0x80
 8009e8a:	589b      	ldr	r3, [r3, r2]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d02d      	beq.n	8009eec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2280      	movs	r2, #128	@ 0x80
 8009e94:	589b      	ldr	r3, [r3, r2]
 8009e96:	4a40      	ldr	r2, [pc, #256]	@ (8009f98 <UART_Start_Receive_DMA+0x140>)
 8009e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2280      	movs	r2, #128	@ 0x80
 8009e9e:	589b      	ldr	r3, [r3, r2]
 8009ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8009f9c <UART_Start_Receive_DMA+0x144>)
 8009ea2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2280      	movs	r2, #128	@ 0x80
 8009ea8:	589b      	ldr	r3, [r3, r2]
 8009eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8009fa0 <UART_Start_Receive_DMA+0x148>)
 8009eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2280      	movs	r2, #128	@ 0x80
 8009eb2:	589b      	ldr	r3, [r3, r2]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2280      	movs	r2, #128	@ 0x80
 8009ebc:	5898      	ldr	r0, [r3, r2]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3324      	adds	r3, #36	@ 0x24
 8009ec4:	0019      	movs	r1, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eca:	001a      	movs	r2, r3
 8009ecc:	1dbb      	adds	r3, r7, #6
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	f7fc f906 	bl	80060e0 <HAL_DMA_Start_IT>
 8009ed4:	1e03      	subs	r3, r0, #0
 8009ed6:	d009      	beq.n	8009eec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2290      	movs	r2, #144	@ 0x90
 8009edc:	2110      	movs	r1, #16
 8009ede:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	228c      	movs	r2, #140	@ 0x8c
 8009ee4:	2120      	movs	r1, #32
 8009ee6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e050      	b.n	8009f8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d019      	beq.n	8009f28 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009efe:	2301      	movs	r3, #1
 8009f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f04:	f383 8810 	msr	PRIMASK, r3
}
 8009f08:	46c0      	nop			@ (mov r8, r8)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2180      	movs	r1, #128	@ 0x80
 8009f16:	0049      	lsls	r1, r1, #1
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	f383 8810 	msr	PRIMASK, r3
}
 8009f26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f28:	f3ef 8310 	mrs	r3, PRIMASK
 8009f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f32:	2301      	movs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f383 8810 	msr	PRIMASK, r3
}
 8009f3c:	46c0      	nop			@ (mov r8, r8)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2101      	movs	r1, #1
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f383 8810 	msr	PRIMASK, r3
}
 8009f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f64:	2301      	movs	r3, #1
 8009f66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	f383 8810 	msr	PRIMASK, r3
}
 8009f6e:	46c0      	nop			@ (mov r8, r8)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2140      	movs	r1, #64	@ 0x40
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	609a      	str	r2, [r3, #8]
 8009f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	f383 8810 	msr	PRIMASK, r3
}
 8009f8a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	0018      	movs	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b010      	add	sp, #64	@ 0x40
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	0800a1a9 	.word	0x0800a1a9
 8009f9c:	0800a2d9 	.word	0x0800a2d9
 8009fa0:	0800a31b 	.word	0x0800a31b

08009fa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fac:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f383 8810 	msr	PRIMASK, r3
}
 8009fc0:	46c0      	nop			@ (mov r8, r8)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	21c0      	movs	r1, #192	@ 0xc0
 8009fce:	438a      	bics	r2, r1
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f383 8810 	msr	PRIMASK, r3
}
 8009fdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fde:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8009fe4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009fe6:	623b      	str	r3, [r7, #32]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	f383 8810 	msr	PRIMASK, r3
}
 8009ff2:	46c0      	nop			@ (mov r8, r8)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4908      	ldr	r1, [pc, #32]	@ (800a020 <UART_EndTxTransfer+0x7c>)
 800a000:	400a      	ands	r2, r1
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f383 8810 	msr	PRIMASK, r3
}
 800a00e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2288      	movs	r2, #136	@ 0x88
 800a014:	2120      	movs	r1, #32
 800a016:	5099      	str	r1, [r3, r2]
}
 800a018:	46c0      	nop			@ (mov r8, r8)
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b00a      	add	sp, #40	@ 0x28
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	ff7fffff 	.word	0xff7fffff

0800a024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08e      	sub	sp, #56	@ 0x38
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a02c:	f3ef 8310 	mrs	r3, PRIMASK
 800a030:	617b      	str	r3, [r7, #20]
  return(result);
 800a032:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a034:	637b      	str	r3, [r7, #52]	@ 0x34
 800a036:	2301      	movs	r3, #1
 800a038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	f383 8810 	msr	PRIMASK, r3
}
 800a040:	46c0      	nop			@ (mov r8, r8)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4926      	ldr	r1, [pc, #152]	@ (800a0e8 <UART_EndRxTransfer+0xc4>)
 800a04e:	400a      	ands	r2, r1
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f383 8810 	msr	PRIMASK, r3
}
 800a05c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05e:	f3ef 8310 	mrs	r3, PRIMASK
 800a062:	623b      	str	r3, [r7, #32]
  return(result);
 800a064:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a066:	633b      	str	r3, [r7, #48]	@ 0x30
 800a068:	2301      	movs	r3, #1
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06e:	f383 8810 	msr	PRIMASK, r3
}
 800a072:	46c0      	nop			@ (mov r8, r8)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	491b      	ldr	r1, [pc, #108]	@ (800a0ec <UART_EndRxTransfer+0xc8>)
 800a080:	400a      	ands	r2, r1
 800a082:	609a      	str	r2, [r3, #8]
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	f383 8810 	msr	PRIMASK, r3
}
 800a08e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a094:	2b01      	cmp	r3, #1
 800a096:	d118      	bne.n	800a0ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a098:	f3ef 8310 	mrs	r3, PRIMASK
 800a09c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a09e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ac:	46c0      	nop			@ (mov r8, r8)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2110      	movs	r1, #16
 800a0ba:	438a      	bics	r2, r1
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f383 8810 	msr	PRIMASK, r3
}
 800a0c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	228c      	movs	r2, #140	@ 0x8c
 800a0ce:	2120      	movs	r1, #32
 800a0d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0de:	46c0      	nop			@ (mov r8, r8)
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b00e      	add	sp, #56	@ 0x38
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	46c0      	nop			@ (mov r8, r8)
 800a0e8:	fffffedf 	.word	0xfffffedf
 800a0ec:	effffffe 	.word	0xeffffffe

0800a0f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08c      	sub	sp, #48	@ 0x30
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2220      	movs	r2, #32
 800a106:	4013      	ands	r3, r2
 800a108:	d135      	bne.n	800a176 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	2256      	movs	r2, #86	@ 0x56
 800a10e:	2100      	movs	r1, #0
 800a110:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a112:	f3ef 8310 	mrs	r3, PRIMASK
 800a116:	60fb      	str	r3, [r7, #12]
  return(result);
 800a118:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a11a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a11c:	2301      	movs	r3, #1
 800a11e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f383 8810 	msr	PRIMASK, r3
}
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689a      	ldr	r2, [r3, #8]
 800a12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2180      	movs	r1, #128	@ 0x80
 800a134:	438a      	bics	r2, r1
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f383 8810 	msr	PRIMASK, r3
}
 800a142:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a144:	f3ef 8310 	mrs	r3, PRIMASK
 800a148:	61bb      	str	r3, [r7, #24]
  return(result);
 800a14a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a14e:	2301      	movs	r3, #1
 800a150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	f383 8810 	msr	PRIMASK, r3
}
 800a158:	46c0      	nop			@ (mov r8, r8)
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2140      	movs	r1, #64	@ 0x40
 800a166:	430a      	orrs	r2, r1
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	f383 8810 	msr	PRIMASK, r3
}
 800a174:	e004      	b.n	800a180 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800a176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a178:	0018      	movs	r0, r3
 800a17a:	f7f9 fac7 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a17e:	46c0      	nop			@ (mov r8, r8)
 800a180:	46c0      	nop			@ (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b00c      	add	sp, #48	@ 0x30
 800a186:	bd80      	pop	{r7, pc}

0800a188 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a194:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fac0 	bl	800971e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a19e:	46c0      	nop			@ (mov r8, r8)
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b004      	add	sp, #16
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b094      	sub	sp, #80	@ 0x50
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	4013      	ands	r3, r2
 800a1c0:	d16f      	bne.n	800a2a2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c4:	225e      	movs	r2, #94	@ 0x5e
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ce:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f383 8810 	msr	PRIMASK, r3
}
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	493a      	ldr	r1, [pc, #232]	@ (800a2d4 <UART_DMAReceiveCplt+0x12c>)
 800a1ec:	400a      	ands	r2, r1
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	f383 8810 	msr	PRIMASK, r3
}
 800a1fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a204:	647b      	str	r3, [r7, #68]	@ 0x44
 800a206:	2301      	movs	r3, #1
 800a208:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20c:	f383 8810 	msr	PRIMASK, r3
}
 800a210:	46c0      	nop			@ (mov r8, r8)
 800a212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2101      	movs	r1, #1
 800a21e:	438a      	bics	r2, r1
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a228:	f383 8810 	msr	PRIMASK, r3
}
 800a22c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a22e:	f3ef 8310 	mrs	r3, PRIMASK
 800a232:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a236:	643b      	str	r3, [r7, #64]	@ 0x40
 800a238:	2301      	movs	r3, #1
 800a23a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23e:	f383 8810 	msr	PRIMASK, r3
}
 800a242:	46c0      	nop			@ (mov r8, r8)
 800a244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2140      	movs	r1, #64	@ 0x40
 800a250:	438a      	bics	r2, r1
 800a252:	609a      	str	r2, [r3, #8]
 800a254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a256:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	f383 8810 	msr	PRIMASK, r3
}
 800a25e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a262:	228c      	movs	r2, #140	@ 0x8c
 800a264:	2120      	movs	r1, #32
 800a266:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a26a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d118      	bne.n	800a2a2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a270:	f3ef 8310 	mrs	r3, PRIMASK
 800a274:	60fb      	str	r3, [r7, #12]
  return(result);
 800a276:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a27a:	2301      	movs	r3, #1
 800a27c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f383 8810 	msr	PRIMASK, r3
}
 800a284:	46c0      	nop			@ (mov r8, r8)
 800a286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2110      	movs	r1, #16
 800a292:	438a      	bics	r2, r1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f383 8810 	msr	PRIMASK, r3
}
 800a2a0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d108      	bne.n	800a2c2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b2:	225c      	movs	r2, #92	@ 0x5c
 800a2b4:	5a9a      	ldrh	r2, [r3, r2]
 800a2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b8:	0011      	movs	r1, r2
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7ff fa4f 	bl	800975e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2c0:	e003      	b.n	800a2ca <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f7ff fa32 	bl	800972e <HAL_UART_RxCpltCallback>
}
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	b014      	add	sp, #80	@ 0x50
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	46c0      	nop			@ (mov r8, r8)
 800a2d4:	fffffeff 	.word	0xfffffeff

0800a2d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d10a      	bne.n	800a30a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	225c      	movs	r2, #92	@ 0x5c
 800a2f8:	5a9b      	ldrh	r3, [r3, r2]
 800a2fa:	085b      	lsrs	r3, r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	0011      	movs	r1, r2
 800a302:	0018      	movs	r0, r3
 800a304:	f7ff fa2b 	bl	800975e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a308:	e003      	b.n	800a312 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7ff fa16 	bl	800973e <HAL_UART_RxHalfCpltCallback>
}
 800a312:	46c0      	nop			@ (mov r8, r8)
 800a314:	46bd      	mov	sp, r7
 800a316:	b004      	add	sp, #16
 800a318:	bd80      	pop	{r7, pc}

0800a31a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a326:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2288      	movs	r2, #136	@ 0x88
 800a32c:	589b      	ldr	r3, [r3, r2]
 800a32e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	228c      	movs	r2, #140	@ 0x8c
 800a334:	589b      	ldr	r3, [r3, r2]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	2280      	movs	r2, #128	@ 0x80
 800a340:	4013      	ands	r3, r2
 800a342:	2b80      	cmp	r3, #128	@ 0x80
 800a344:	d10a      	bne.n	800a35c <UART_DMAError+0x42>
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b21      	cmp	r3, #33	@ 0x21
 800a34a:	d107      	bne.n	800a35c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2256      	movs	r2, #86	@ 0x56
 800a350:	2100      	movs	r1, #0
 800a352:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	0018      	movs	r0, r3
 800a358:	f7ff fe24 	bl	8009fa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2240      	movs	r2, #64	@ 0x40
 800a364:	4013      	ands	r3, r2
 800a366:	2b40      	cmp	r3, #64	@ 0x40
 800a368:	d10a      	bne.n	800a380 <UART_DMAError+0x66>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b22      	cmp	r3, #34	@ 0x22
 800a36e:	d107      	bne.n	800a380 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	225e      	movs	r2, #94	@ 0x5e
 800a374:	2100      	movs	r1, #0
 800a376:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7ff fe52 	bl	800a024 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2290      	movs	r2, #144	@ 0x90
 800a384:	589b      	ldr	r3, [r3, r2]
 800a386:	2210      	movs	r2, #16
 800a388:	431a      	orrs	r2, r3
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2190      	movs	r1, #144	@ 0x90
 800a38e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	0018      	movs	r0, r3
 800a394:	f7ff f9db 	bl	800974e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a398:	46c0      	nop			@ (mov r8, r8)
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b006      	add	sp, #24
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <__cvt>:
 800a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a2:	001f      	movs	r7, r3
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	0016      	movs	r6, r2
 800a3a8:	b08b      	sub	sp, #44	@ 0x2c
 800a3aa:	429f      	cmp	r7, r3
 800a3ac:	da04      	bge.n	800a3b8 <__cvt+0x18>
 800a3ae:	2180      	movs	r1, #128	@ 0x80
 800a3b0:	0609      	lsls	r1, r1, #24
 800a3b2:	187b      	adds	r3, r7, r1
 800a3b4:	001f      	movs	r7, r3
 800a3b6:	232d      	movs	r3, #45	@ 0x2d
 800a3b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a3ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a3bc:	7013      	strb	r3, [r2, #0]
 800a3be:	2320      	movs	r3, #32
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	439d      	bics	r5, r3
 800a3c4:	2d46      	cmp	r5, #70	@ 0x46
 800a3c6:	d007      	beq.n	800a3d8 <__cvt+0x38>
 800a3c8:	002b      	movs	r3, r5
 800a3ca:	3b45      	subs	r3, #69	@ 0x45
 800a3cc:	4259      	negs	r1, r3
 800a3ce:	414b      	adcs	r3, r1
 800a3d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a3d2:	3a01      	subs	r2, #1
 800a3d4:	18cb      	adds	r3, r1, r3
 800a3d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3d8:	ab09      	add	r3, sp, #36	@ 0x24
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	ab08      	add	r3, sp, #32
 800a3de:	9303      	str	r3, [sp, #12]
 800a3e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3e2:	9200      	str	r2, [sp, #0]
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3e8:	0032      	movs	r2, r6
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	003b      	movs	r3, r7
 800a3ee:	f000 fe9f 	bl	800b130 <_dtoa_r>
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	2d47      	cmp	r5, #71	@ 0x47
 800a3f6:	d11b      	bne.n	800a430 <__cvt+0x90>
 800a3f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3fa:	07db      	lsls	r3, r3, #31
 800a3fc:	d511      	bpl.n	800a422 <__cvt+0x82>
 800a3fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a400:	18c3      	adds	r3, r0, r3
 800a402:	9307      	str	r3, [sp, #28]
 800a404:	2200      	movs	r2, #0
 800a406:	2300      	movs	r3, #0
 800a408:	0030      	movs	r0, r6
 800a40a:	0039      	movs	r1, r7
 800a40c:	f7f6 f81a 	bl	8000444 <__aeabi_dcmpeq>
 800a410:	2800      	cmp	r0, #0
 800a412:	d001      	beq.n	800a418 <__cvt+0x78>
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	9309      	str	r3, [sp, #36]	@ 0x24
 800a418:	2230      	movs	r2, #48	@ 0x30
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	9907      	ldr	r1, [sp, #28]
 800a41e:	428b      	cmp	r3, r1
 800a420:	d320      	bcc.n	800a464 <__cvt+0xc4>
 800a422:	0020      	movs	r0, r4
 800a424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a426:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a428:	1b1b      	subs	r3, r3, r4
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	b00b      	add	sp, #44	@ 0x2c
 800a42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a430:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a432:	18c3      	adds	r3, r0, r3
 800a434:	9307      	str	r3, [sp, #28]
 800a436:	2d46      	cmp	r5, #70	@ 0x46
 800a438:	d1e4      	bne.n	800a404 <__cvt+0x64>
 800a43a:	7803      	ldrb	r3, [r0, #0]
 800a43c:	2b30      	cmp	r3, #48	@ 0x30
 800a43e:	d10c      	bne.n	800a45a <__cvt+0xba>
 800a440:	2200      	movs	r2, #0
 800a442:	2300      	movs	r3, #0
 800a444:	0030      	movs	r0, r6
 800a446:	0039      	movs	r1, r7
 800a448:	f7f5 fffc 	bl	8000444 <__aeabi_dcmpeq>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d104      	bne.n	800a45a <__cvt+0xba>
 800a450:	2301      	movs	r3, #1
 800a452:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a45c:	9a07      	ldr	r2, [sp, #28]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	18d3      	adds	r3, r2, r3
 800a462:	e7ce      	b.n	800a402 <__cvt+0x62>
 800a464:	1c59      	adds	r1, r3, #1
 800a466:	9109      	str	r1, [sp, #36]	@ 0x24
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e7d6      	b.n	800a41a <__cvt+0x7a>

0800a46c <__exponent>:
 800a46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46e:	232b      	movs	r3, #43	@ 0x2b
 800a470:	b085      	sub	sp, #20
 800a472:	0005      	movs	r5, r0
 800a474:	1e0c      	subs	r4, r1, #0
 800a476:	7002      	strb	r2, [r0, #0]
 800a478:	da01      	bge.n	800a47e <__exponent+0x12>
 800a47a:	424c      	negs	r4, r1
 800a47c:	3302      	adds	r3, #2
 800a47e:	706b      	strb	r3, [r5, #1]
 800a480:	2c09      	cmp	r4, #9
 800a482:	dd2c      	ble.n	800a4de <__exponent+0x72>
 800a484:	ab02      	add	r3, sp, #8
 800a486:	1dde      	adds	r6, r3, #7
 800a488:	0020      	movs	r0, r4
 800a48a:	210a      	movs	r1, #10
 800a48c:	f7f5 ffc4 	bl	8000418 <__aeabi_idivmod>
 800a490:	0037      	movs	r7, r6
 800a492:	3130      	adds	r1, #48	@ 0x30
 800a494:	3e01      	subs	r6, #1
 800a496:	0020      	movs	r0, r4
 800a498:	7031      	strb	r1, [r6, #0]
 800a49a:	210a      	movs	r1, #10
 800a49c:	9401      	str	r4, [sp, #4]
 800a49e:	f7f5 fed5 	bl	800024c <__divsi3>
 800a4a2:	9b01      	ldr	r3, [sp, #4]
 800a4a4:	0004      	movs	r4, r0
 800a4a6:	2b63      	cmp	r3, #99	@ 0x63
 800a4a8:	dcee      	bgt.n	800a488 <__exponent+0x1c>
 800a4aa:	1eba      	subs	r2, r7, #2
 800a4ac:	1ca8      	adds	r0, r5, #2
 800a4ae:	0001      	movs	r1, r0
 800a4b0:	0013      	movs	r3, r2
 800a4b2:	3430      	adds	r4, #48	@ 0x30
 800a4b4:	7014      	strb	r4, [r2, #0]
 800a4b6:	ac02      	add	r4, sp, #8
 800a4b8:	3407      	adds	r4, #7
 800a4ba:	429c      	cmp	r4, r3
 800a4bc:	d80a      	bhi.n	800a4d4 <__exponent+0x68>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4294      	cmp	r4, r2
 800a4c2:	d303      	bcc.n	800a4cc <__exponent+0x60>
 800a4c4:	3309      	adds	r3, #9
 800a4c6:	aa02      	add	r2, sp, #8
 800a4c8:	189b      	adds	r3, r3, r2
 800a4ca:	1bdb      	subs	r3, r3, r7
 800a4cc:	18c0      	adds	r0, r0, r3
 800a4ce:	1b40      	subs	r0, r0, r5
 800a4d0:	b005      	add	sp, #20
 800a4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d4:	781c      	ldrb	r4, [r3, #0]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	700c      	strb	r4, [r1, #0]
 800a4da:	3101      	adds	r1, #1
 800a4dc:	e7eb      	b.n	800a4b6 <__exponent+0x4a>
 800a4de:	2330      	movs	r3, #48	@ 0x30
 800a4e0:	18e4      	adds	r4, r4, r3
 800a4e2:	70ab      	strb	r3, [r5, #2]
 800a4e4:	1d28      	adds	r0, r5, #4
 800a4e6:	70ec      	strb	r4, [r5, #3]
 800a4e8:	e7f1      	b.n	800a4ce <__exponent+0x62>
	...

0800a4ec <_printf_float>:
 800a4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ee:	b097      	sub	sp, #92	@ 0x5c
 800a4f0:	000d      	movs	r5, r1
 800a4f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a4f4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a4f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a4fa:	f000 fd01 	bl	800af00 <_localeconv_r>
 800a4fe:	6803      	ldr	r3, [r0, #0]
 800a500:	0018      	movs	r0, r3
 800a502:	930d      	str	r3, [sp, #52]	@ 0x34
 800a504:	f7f5 fdfc 	bl	8000100 <strlen>
 800a508:	2300      	movs	r3, #0
 800a50a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a50c:	9314      	str	r3, [sp, #80]	@ 0x50
 800a50e:	7e2b      	ldrb	r3, [r5, #24]
 800a510:	2207      	movs	r2, #7
 800a512:	930c      	str	r3, [sp, #48]	@ 0x30
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	930e      	str	r3, [sp, #56]	@ 0x38
 800a518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	05c9      	lsls	r1, r1, #23
 800a51e:	d545      	bpl.n	800a5ac <_printf_float+0xc0>
 800a520:	189b      	adds	r3, r3, r2
 800a522:	4393      	bics	r3, r2
 800a524:	001a      	movs	r2, r3
 800a526:	3208      	adds	r2, #8
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	2201      	movs	r2, #1
 800a52c:	681e      	ldr	r6, [r3, #0]
 800a52e:	685f      	ldr	r7, [r3, #4]
 800a530:	007b      	lsls	r3, r7, #1
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	9311      	str	r3, [sp, #68]	@ 0x44
 800a536:	9610      	str	r6, [sp, #64]	@ 0x40
 800a538:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a53a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a53c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a53e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a540:	4ba7      	ldr	r3, [pc, #668]	@ (800a7e0 <_printf_float+0x2f4>)
 800a542:	4252      	negs	r2, r2
 800a544:	f7f8 fca6 	bl	8002e94 <__aeabi_dcmpun>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d131      	bne.n	800a5b0 <_printf_float+0xc4>
 800a54c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a54e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a550:	2201      	movs	r2, #1
 800a552:	4ba3      	ldr	r3, [pc, #652]	@ (800a7e0 <_printf_float+0x2f4>)
 800a554:	4252      	negs	r2, r2
 800a556:	f7f5 ff85 	bl	8000464 <__aeabi_dcmple>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d128      	bne.n	800a5b0 <_printf_float+0xc4>
 800a55e:	2200      	movs	r2, #0
 800a560:	2300      	movs	r3, #0
 800a562:	0030      	movs	r0, r6
 800a564:	0039      	movs	r1, r7
 800a566:	f7f5 ff73 	bl	8000450 <__aeabi_dcmplt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d003      	beq.n	800a576 <_printf_float+0x8a>
 800a56e:	002b      	movs	r3, r5
 800a570:	222d      	movs	r2, #45	@ 0x2d
 800a572:	3343      	adds	r3, #67	@ 0x43
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a578:	4f9a      	ldr	r7, [pc, #616]	@ (800a7e4 <_printf_float+0x2f8>)
 800a57a:	2b47      	cmp	r3, #71	@ 0x47
 800a57c:	d800      	bhi.n	800a580 <_printf_float+0x94>
 800a57e:	4f9a      	ldr	r7, [pc, #616]	@ (800a7e8 <_printf_float+0x2fc>)
 800a580:	2303      	movs	r3, #3
 800a582:	2400      	movs	r4, #0
 800a584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a586:	612b      	str	r3, [r5, #16]
 800a588:	3301      	adds	r3, #1
 800a58a:	439a      	bics	r2, r3
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a590:	0029      	movs	r1, r5
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a598:	aa15      	add	r2, sp, #84	@ 0x54
 800a59a:	f000 f9e5 	bl	800a968 <_printf_common>
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d000      	beq.n	800a5a4 <_printf_float+0xb8>
 800a5a2:	e09e      	b.n	800a6e2 <_printf_float+0x1f6>
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	4240      	negs	r0, r0
 800a5a8:	b017      	add	sp, #92	@ 0x5c
 800a5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	e7b8      	b.n	800a522 <_printf_float+0x36>
 800a5b0:	0032      	movs	r2, r6
 800a5b2:	003b      	movs	r3, r7
 800a5b4:	0030      	movs	r0, r6
 800a5b6:	0039      	movs	r1, r7
 800a5b8:	f7f8 fc6c 	bl	8002e94 <__aeabi_dcmpun>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d00b      	beq.n	800a5d8 <_printf_float+0xec>
 800a5c0:	2f00      	cmp	r7, #0
 800a5c2:	da03      	bge.n	800a5cc <_printf_float+0xe0>
 800a5c4:	002b      	movs	r3, r5
 800a5c6:	222d      	movs	r2, #45	@ 0x2d
 800a5c8:	3343      	adds	r3, #67	@ 0x43
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5ce:	4f87      	ldr	r7, [pc, #540]	@ (800a7ec <_printf_float+0x300>)
 800a5d0:	2b47      	cmp	r3, #71	@ 0x47
 800a5d2:	d8d5      	bhi.n	800a580 <_printf_float+0x94>
 800a5d4:	4f86      	ldr	r7, [pc, #536]	@ (800a7f0 <_printf_float+0x304>)
 800a5d6:	e7d3      	b.n	800a580 <_printf_float+0x94>
 800a5d8:	2220      	movs	r2, #32
 800a5da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a5dc:	686b      	ldr	r3, [r5, #4]
 800a5de:	4394      	bics	r4, r2
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	d146      	bne.n	800a672 <_printf_float+0x186>
 800a5e4:	3307      	adds	r3, #7
 800a5e6:	606b      	str	r3, [r5, #4]
 800a5e8:	2380      	movs	r3, #128	@ 0x80
 800a5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	9206      	str	r2, [sp, #24]
 800a5f6:	aa14      	add	r2, sp, #80	@ 0x50
 800a5f8:	9205      	str	r2, [sp, #20]
 800a5fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5fc:	a90a      	add	r1, sp, #40	@ 0x28
 800a5fe:	9204      	str	r2, [sp, #16]
 800a600:	aa13      	add	r2, sp, #76	@ 0x4c
 800a602:	9203      	str	r2, [sp, #12]
 800a604:	2223      	movs	r2, #35	@ 0x23
 800a606:	1852      	adds	r2, r2, r1
 800a608:	9202      	str	r2, [sp, #8]
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	686b      	ldr	r3, [r5, #4]
 800a60e:	0032      	movs	r2, r6
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a614:	003b      	movs	r3, r7
 800a616:	f7ff fec3 	bl	800a3a0 <__cvt>
 800a61a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a61c:	0007      	movs	r7, r0
 800a61e:	2c47      	cmp	r4, #71	@ 0x47
 800a620:	d12d      	bne.n	800a67e <_printf_float+0x192>
 800a622:	1cd3      	adds	r3, r2, #3
 800a624:	db02      	blt.n	800a62c <_printf_float+0x140>
 800a626:	686b      	ldr	r3, [r5, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	dd47      	ble.n	800a6bc <_printf_float+0x1d0>
 800a62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a62e:	3b02      	subs	r3, #2
 800a630:	b2db      	uxtb	r3, r3
 800a632:	930c      	str	r3, [sp, #48]	@ 0x30
 800a634:	0028      	movs	r0, r5
 800a636:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a638:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a63a:	3901      	subs	r1, #1
 800a63c:	3050      	adds	r0, #80	@ 0x50
 800a63e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a640:	f7ff ff14 	bl	800a46c <__exponent>
 800a644:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a646:	0004      	movs	r4, r0
 800a648:	1813      	adds	r3, r2, r0
 800a64a:	612b      	str	r3, [r5, #16]
 800a64c:	2a01      	cmp	r2, #1
 800a64e:	dc02      	bgt.n	800a656 <_printf_float+0x16a>
 800a650:	682a      	ldr	r2, [r5, #0]
 800a652:	07d2      	lsls	r2, r2, #31
 800a654:	d501      	bpl.n	800a65a <_printf_float+0x16e>
 800a656:	3301      	adds	r3, #1
 800a658:	612b      	str	r3, [r5, #16]
 800a65a:	2323      	movs	r3, #35	@ 0x23
 800a65c:	aa0a      	add	r2, sp, #40	@ 0x28
 800a65e:	189b      	adds	r3, r3, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d100      	bne.n	800a668 <_printf_float+0x17c>
 800a666:	e792      	b.n	800a58e <_printf_float+0xa2>
 800a668:	002b      	movs	r3, r5
 800a66a:	222d      	movs	r2, #45	@ 0x2d
 800a66c:	3343      	adds	r3, #67	@ 0x43
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	e78d      	b.n	800a58e <_printf_float+0xa2>
 800a672:	2c47      	cmp	r4, #71	@ 0x47
 800a674:	d1b8      	bne.n	800a5e8 <_printf_float+0xfc>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1b6      	bne.n	800a5e8 <_printf_float+0xfc>
 800a67a:	3301      	adds	r3, #1
 800a67c:	e7b3      	b.n	800a5e6 <_printf_float+0xfa>
 800a67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a680:	2b65      	cmp	r3, #101	@ 0x65
 800a682:	d9d7      	bls.n	800a634 <_printf_float+0x148>
 800a684:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a686:	2b66      	cmp	r3, #102	@ 0x66
 800a688:	d11a      	bne.n	800a6c0 <_printf_float+0x1d4>
 800a68a:	686b      	ldr	r3, [r5, #4]
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	dd09      	ble.n	800a6a4 <_printf_float+0x1b8>
 800a690:	612a      	str	r2, [r5, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <_printf_float+0x1b0>
 800a696:	6829      	ldr	r1, [r5, #0]
 800a698:	07c9      	lsls	r1, r1, #31
 800a69a:	d50b      	bpl.n	800a6b4 <_printf_float+0x1c8>
 800a69c:	3301      	adds	r3, #1
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	612b      	str	r3, [r5, #16]
 800a6a2:	e007      	b.n	800a6b4 <_printf_float+0x1c8>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <_printf_float+0x1c4>
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	6829      	ldr	r1, [r5, #0]
 800a6ac:	4211      	tst	r1, r2
 800a6ae:	d000      	beq.n	800a6b2 <_printf_float+0x1c6>
 800a6b0:	1c9a      	adds	r2, r3, #2
 800a6b2:	612a      	str	r2, [r5, #16]
 800a6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6b6:	2400      	movs	r4, #0
 800a6b8:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a6ba:	e7ce      	b.n	800a65a <_printf_float+0x16e>
 800a6bc:	2367      	movs	r3, #103	@ 0x67
 800a6be:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6c0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a6c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	db06      	blt.n	800a6d6 <_printf_float+0x1ea>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	6129      	str	r1, [r5, #16]
 800a6cc:	07db      	lsls	r3, r3, #31
 800a6ce:	d5f1      	bpl.n	800a6b4 <_printf_float+0x1c8>
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	6129      	str	r1, [r5, #16]
 800a6d4:	e7ee      	b.n	800a6b4 <_printf_float+0x1c8>
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	dce0      	bgt.n	800a69e <_printf_float+0x1b2>
 800a6dc:	1892      	adds	r2, r2, r2
 800a6de:	1a52      	subs	r2, r2, r1
 800a6e0:	e7dd      	b.n	800a69e <_printf_float+0x1b2>
 800a6e2:	682a      	ldr	r2, [r5, #0]
 800a6e4:	0553      	lsls	r3, r2, #21
 800a6e6:	d408      	bmi.n	800a6fa <_printf_float+0x20e>
 800a6e8:	692b      	ldr	r3, [r5, #16]
 800a6ea:	003a      	movs	r2, r7
 800a6ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a6f2:	47a0      	blx	r4
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d129      	bne.n	800a74c <_printf_float+0x260>
 800a6f8:	e754      	b.n	800a5a4 <_printf_float+0xb8>
 800a6fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6fc:	2b65      	cmp	r3, #101	@ 0x65
 800a6fe:	d800      	bhi.n	800a702 <_printf_float+0x216>
 800a700:	e0db      	b.n	800a8ba <_printf_float+0x3ce>
 800a702:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a704:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a706:	2200      	movs	r2, #0
 800a708:	2300      	movs	r3, #0
 800a70a:	f7f5 fe9b 	bl	8000444 <__aeabi_dcmpeq>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d033      	beq.n	800a77a <_printf_float+0x28e>
 800a712:	2301      	movs	r3, #1
 800a714:	4a37      	ldr	r2, [pc, #220]	@ (800a7f4 <_printf_float+0x308>)
 800a716:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a718:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a71a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a71c:	47a0      	blx	r4
 800a71e:	3001      	adds	r0, #1
 800a720:	d100      	bne.n	800a724 <_printf_float+0x238>
 800a722:	e73f      	b.n	800a5a4 <_printf_float+0xb8>
 800a724:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a726:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a728:	42b3      	cmp	r3, r6
 800a72a:	db02      	blt.n	800a732 <_printf_float+0x246>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	07db      	lsls	r3, r3, #31
 800a730:	d50c      	bpl.n	800a74c <_printf_float+0x260>
 800a732:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a736:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a738:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a73c:	47a0      	blx	r4
 800a73e:	2400      	movs	r4, #0
 800a740:	3001      	adds	r0, #1
 800a742:	d100      	bne.n	800a746 <_printf_float+0x25a>
 800a744:	e72e      	b.n	800a5a4 <_printf_float+0xb8>
 800a746:	1e73      	subs	r3, r6, #1
 800a748:	42a3      	cmp	r3, r4
 800a74a:	dc0a      	bgt.n	800a762 <_printf_float+0x276>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	079b      	lsls	r3, r3, #30
 800a750:	d500      	bpl.n	800a754 <_printf_float+0x268>
 800a752:	e106      	b.n	800a962 <_printf_float+0x476>
 800a754:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a756:	68e8      	ldr	r0, [r5, #12]
 800a758:	4298      	cmp	r0, r3
 800a75a:	db00      	blt.n	800a75e <_printf_float+0x272>
 800a75c:	e724      	b.n	800a5a8 <_printf_float+0xbc>
 800a75e:	0018      	movs	r0, r3
 800a760:	e722      	b.n	800a5a8 <_printf_float+0xbc>
 800a762:	002a      	movs	r2, r5
 800a764:	2301      	movs	r3, #1
 800a766:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a768:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a76a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a76c:	321a      	adds	r2, #26
 800a76e:	47b8      	blx	r7
 800a770:	3001      	adds	r0, #1
 800a772:	d100      	bne.n	800a776 <_printf_float+0x28a>
 800a774:	e716      	b.n	800a5a4 <_printf_float+0xb8>
 800a776:	3401      	adds	r4, #1
 800a778:	e7e5      	b.n	800a746 <_printf_float+0x25a>
 800a77a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dc3b      	bgt.n	800a7f8 <_printf_float+0x30c>
 800a780:	2301      	movs	r3, #1
 800a782:	4a1c      	ldr	r2, [pc, #112]	@ (800a7f4 <_printf_float+0x308>)
 800a784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a788:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a78a:	47a0      	blx	r4
 800a78c:	3001      	adds	r0, #1
 800a78e:	d100      	bne.n	800a792 <_printf_float+0x2a6>
 800a790:	e708      	b.n	800a5a4 <_printf_float+0xb8>
 800a792:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a796:	4333      	orrs	r3, r6
 800a798:	d102      	bne.n	800a7a0 <_printf_float+0x2b4>
 800a79a:	682b      	ldr	r3, [r5, #0]
 800a79c:	07db      	lsls	r3, r3, #31
 800a79e:	d5d5      	bpl.n	800a74c <_printf_float+0x260>
 800a7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a7aa:	47a0      	blx	r4
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d100      	bne.n	800a7b4 <_printf_float+0x2c8>
 800a7b2:	e6f7      	b.n	800a5a4 <_printf_float+0xb8>
 800a7b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7ba:	425b      	negs	r3, r3
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	dc01      	bgt.n	800a7c4 <_printf_float+0x2d8>
 800a7c0:	0033      	movs	r3, r6
 800a7c2:	e792      	b.n	800a6ea <_printf_float+0x1fe>
 800a7c4:	002a      	movs	r2, r5
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a7ce:	321a      	adds	r2, #26
 800a7d0:	47a0      	blx	r4
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d100      	bne.n	800a7d8 <_printf_float+0x2ec>
 800a7d6:	e6e5      	b.n	800a5a4 <_printf_float+0xb8>
 800a7d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7da:	3301      	adds	r3, #1
 800a7dc:	e7ea      	b.n	800a7b4 <_printf_float+0x2c8>
 800a7de:	46c0      	nop			@ (mov r8, r8)
 800a7e0:	7fefffff 	.word	0x7fefffff
 800a7e4:	0800d508 	.word	0x0800d508
 800a7e8:	0800d504 	.word	0x0800d504
 800a7ec:	0800d510 	.word	0x0800d510
 800a7f0:	0800d50c 	.word	0x0800d50c
 800a7f4:	0800d514 	.word	0x0800d514
 800a7f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a7fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7fe:	429e      	cmp	r6, r3
 800a800:	dd00      	ble.n	800a804 <_printf_float+0x318>
 800a802:	001e      	movs	r6, r3
 800a804:	2e00      	cmp	r6, #0
 800a806:	dc31      	bgt.n	800a86c <_printf_float+0x380>
 800a808:	43f3      	mvns	r3, r6
 800a80a:	2400      	movs	r4, #0
 800a80c:	17db      	asrs	r3, r3, #31
 800a80e:	4033      	ands	r3, r6
 800a810:	930e      	str	r3, [sp, #56]	@ 0x38
 800a812:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a816:	1af3      	subs	r3, r6, r3
 800a818:	42a3      	cmp	r3, r4
 800a81a:	dc30      	bgt.n	800a87e <_printf_float+0x392>
 800a81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a81e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a820:	429a      	cmp	r2, r3
 800a822:	dc38      	bgt.n	800a896 <_printf_float+0x3aa>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	07db      	lsls	r3, r3, #31
 800a828:	d435      	bmi.n	800a896 <_printf_float+0x3aa>
 800a82a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a82c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a82e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	1b14      	subs	r4, r2, r4
 800a834:	429c      	cmp	r4, r3
 800a836:	dd00      	ble.n	800a83a <_printf_float+0x34e>
 800a838:	001c      	movs	r4, r3
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	dc34      	bgt.n	800a8a8 <_printf_float+0x3bc>
 800a83e:	43e3      	mvns	r3, r4
 800a840:	2600      	movs	r6, #0
 800a842:	17db      	asrs	r3, r3, #31
 800a844:	401c      	ands	r4, r3
 800a846:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	1b1b      	subs	r3, r3, r4
 800a84e:	42b3      	cmp	r3, r6
 800a850:	dc00      	bgt.n	800a854 <_printf_float+0x368>
 800a852:	e77b      	b.n	800a74c <_printf_float+0x260>
 800a854:	002a      	movs	r2, r5
 800a856:	2301      	movs	r3, #1
 800a858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a85c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a85e:	321a      	adds	r2, #26
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	d100      	bne.n	800a868 <_printf_float+0x37c>
 800a866:	e69d      	b.n	800a5a4 <_printf_float+0xb8>
 800a868:	3601      	adds	r6, #1
 800a86a:	e7ec      	b.n	800a846 <_printf_float+0x35a>
 800a86c:	0033      	movs	r3, r6
 800a86e:	003a      	movs	r2, r7
 800a870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a874:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a876:	47a0      	blx	r4
 800a878:	3001      	adds	r0, #1
 800a87a:	d1c5      	bne.n	800a808 <_printf_float+0x31c>
 800a87c:	e692      	b.n	800a5a4 <_printf_float+0xb8>
 800a87e:	002a      	movs	r2, r5
 800a880:	2301      	movs	r3, #1
 800a882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a884:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a886:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a888:	321a      	adds	r2, #26
 800a88a:	47b0      	blx	r6
 800a88c:	3001      	adds	r0, #1
 800a88e:	d100      	bne.n	800a892 <_printf_float+0x3a6>
 800a890:	e688      	b.n	800a5a4 <_printf_float+0xb8>
 800a892:	3401      	adds	r4, #1
 800a894:	e7bd      	b.n	800a812 <_printf_float+0x326>
 800a896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a89c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a89e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a8a0:	47a0      	blx	r4
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d1c1      	bne.n	800a82a <_printf_float+0x33e>
 800a8a6:	e67d      	b.n	800a5a4 <_printf_float+0xb8>
 800a8a8:	19ba      	adds	r2, r7, r6
 800a8aa:	0023      	movs	r3, r4
 800a8ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a8b2:	47b0      	blx	r6
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1c2      	bne.n	800a83e <_printf_float+0x352>
 800a8b8:	e674      	b.n	800a5a4 <_printf_float+0xb8>
 800a8ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	dc02      	bgt.n	800a8c8 <_printf_float+0x3dc>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	421a      	tst	r2, r3
 800a8c6:	d039      	beq.n	800a93c <_printf_float+0x450>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	003a      	movs	r2, r7
 800a8cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a8d2:	47b0      	blx	r6
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d100      	bne.n	800a8da <_printf_float+0x3ee>
 800a8d8:	e664      	b.n	800a5a4 <_printf_float+0xb8>
 800a8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8e2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a8e4:	47b0      	blx	r6
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d100      	bne.n	800a8ec <_printf_float+0x400>
 800a8ea:	e65b      	b.n	800a5a4 <_printf_float+0xb8>
 800a8ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a8ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f7f5 fda3 	bl	8000444 <__aeabi_dcmpeq>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d11a      	bne.n	800a938 <_printf_float+0x44c>
 800a902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a904:	1c7a      	adds	r2, r7, #1
 800a906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a90a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a90c:	47b0      	blx	r6
 800a90e:	3001      	adds	r0, #1
 800a910:	d10e      	bne.n	800a930 <_printf_float+0x444>
 800a912:	e647      	b.n	800a5a4 <_printf_float+0xb8>
 800a914:	002a      	movs	r2, r5
 800a916:	2301      	movs	r3, #1
 800a918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a91c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a91e:	321a      	adds	r2, #26
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	d100      	bne.n	800a928 <_printf_float+0x43c>
 800a926:	e63d      	b.n	800a5a4 <_printf_float+0xb8>
 800a928:	3601      	adds	r6, #1
 800a92a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a92c:	429e      	cmp	r6, r3
 800a92e:	dbf1      	blt.n	800a914 <_printf_float+0x428>
 800a930:	002a      	movs	r2, r5
 800a932:	0023      	movs	r3, r4
 800a934:	3250      	adds	r2, #80	@ 0x50
 800a936:	e6d9      	b.n	800a6ec <_printf_float+0x200>
 800a938:	2600      	movs	r6, #0
 800a93a:	e7f6      	b.n	800a92a <_printf_float+0x43e>
 800a93c:	003a      	movs	r2, r7
 800a93e:	e7e2      	b.n	800a906 <_printf_float+0x41a>
 800a940:	002a      	movs	r2, r5
 800a942:	2301      	movs	r3, #1
 800a944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a948:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a94a:	3219      	adds	r2, #25
 800a94c:	47b0      	blx	r6
 800a94e:	3001      	adds	r0, #1
 800a950:	d100      	bne.n	800a954 <_printf_float+0x468>
 800a952:	e627      	b.n	800a5a4 <_printf_float+0xb8>
 800a954:	3401      	adds	r4, #1
 800a956:	68eb      	ldr	r3, [r5, #12]
 800a958:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	dcef      	bgt.n	800a940 <_printf_float+0x454>
 800a960:	e6f8      	b.n	800a754 <_printf_float+0x268>
 800a962:	2400      	movs	r4, #0
 800a964:	e7f7      	b.n	800a956 <_printf_float+0x46a>
 800a966:	46c0      	nop			@ (mov r8, r8)

0800a968 <_printf_common>:
 800a968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a96a:	0016      	movs	r6, r2
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	688a      	ldr	r2, [r1, #8]
 800a970:	690b      	ldr	r3, [r1, #16]
 800a972:	000c      	movs	r4, r1
 800a974:	9000      	str	r0, [sp, #0]
 800a976:	4293      	cmp	r3, r2
 800a978:	da00      	bge.n	800a97c <_printf_common+0x14>
 800a97a:	0013      	movs	r3, r2
 800a97c:	0022      	movs	r2, r4
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	3243      	adds	r2, #67	@ 0x43
 800a982:	7812      	ldrb	r2, [r2, #0]
 800a984:	2a00      	cmp	r2, #0
 800a986:	d001      	beq.n	800a98c <_printf_common+0x24>
 800a988:	3301      	adds	r3, #1
 800a98a:	6033      	str	r3, [r6, #0]
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	069b      	lsls	r3, r3, #26
 800a990:	d502      	bpl.n	800a998 <_printf_common+0x30>
 800a992:	6833      	ldr	r3, [r6, #0]
 800a994:	3302      	adds	r3, #2
 800a996:	6033      	str	r3, [r6, #0]
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	2306      	movs	r3, #6
 800a99c:	0015      	movs	r5, r2
 800a99e:	401d      	ands	r5, r3
 800a9a0:	421a      	tst	r2, r3
 800a9a2:	d027      	beq.n	800a9f4 <_printf_common+0x8c>
 800a9a4:	0023      	movs	r3, r4
 800a9a6:	3343      	adds	r3, #67	@ 0x43
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	1e5a      	subs	r2, r3, #1
 800a9ac:	4193      	sbcs	r3, r2
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	0692      	lsls	r2, r2, #26
 800a9b2:	d430      	bmi.n	800aa16 <_printf_common+0xae>
 800a9b4:	0022      	movs	r2, r4
 800a9b6:	9901      	ldr	r1, [sp, #4]
 800a9b8:	9800      	ldr	r0, [sp, #0]
 800a9ba:	9d08      	ldr	r5, [sp, #32]
 800a9bc:	3243      	adds	r2, #67	@ 0x43
 800a9be:	47a8      	blx	r5
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d025      	beq.n	800aa10 <_printf_common+0xa8>
 800a9c4:	2206      	movs	r2, #6
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d105      	bne.n	800a9dc <_printf_common+0x74>
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	68e5      	ldr	r5, [r4, #12]
 800a9d4:	1aed      	subs	r5, r5, r3
 800a9d6:	43eb      	mvns	r3, r5
 800a9d8:	17db      	asrs	r3, r3, #31
 800a9da:	401d      	ands	r5, r3
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	6922      	ldr	r2, [r4, #16]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	dd01      	ble.n	800a9e8 <_printf_common+0x80>
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	18ed      	adds	r5, r5, r3
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	42b5      	cmp	r5, r6
 800a9ec:	d120      	bne.n	800aa30 <_printf_common+0xc8>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e010      	b.n	800aa14 <_printf_common+0xac>
 800a9f2:	3501      	adds	r5, #1
 800a9f4:	68e3      	ldr	r3, [r4, #12]
 800a9f6:	6832      	ldr	r2, [r6, #0]
 800a9f8:	1a9b      	subs	r3, r3, r2
 800a9fa:	42ab      	cmp	r3, r5
 800a9fc:	ddd2      	ble.n	800a9a4 <_printf_common+0x3c>
 800a9fe:	0022      	movs	r2, r4
 800aa00:	2301      	movs	r3, #1
 800aa02:	9901      	ldr	r1, [sp, #4]
 800aa04:	9800      	ldr	r0, [sp, #0]
 800aa06:	9f08      	ldr	r7, [sp, #32]
 800aa08:	3219      	adds	r2, #25
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d1f0      	bne.n	800a9f2 <_printf_common+0x8a>
 800aa10:	2001      	movs	r0, #1
 800aa12:	4240      	negs	r0, r0
 800aa14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa16:	2030      	movs	r0, #48	@ 0x30
 800aa18:	18e1      	adds	r1, r4, r3
 800aa1a:	3143      	adds	r1, #67	@ 0x43
 800aa1c:	7008      	strb	r0, [r1, #0]
 800aa1e:	0021      	movs	r1, r4
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	3145      	adds	r1, #69	@ 0x45
 800aa24:	7809      	ldrb	r1, [r1, #0]
 800aa26:	18a2      	adds	r2, r4, r2
 800aa28:	3243      	adds	r2, #67	@ 0x43
 800aa2a:	3302      	adds	r3, #2
 800aa2c:	7011      	strb	r1, [r2, #0]
 800aa2e:	e7c1      	b.n	800a9b4 <_printf_common+0x4c>
 800aa30:	0022      	movs	r2, r4
 800aa32:	2301      	movs	r3, #1
 800aa34:	9901      	ldr	r1, [sp, #4]
 800aa36:	9800      	ldr	r0, [sp, #0]
 800aa38:	9f08      	ldr	r7, [sp, #32]
 800aa3a:	321a      	adds	r2, #26
 800aa3c:	47b8      	blx	r7
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d0e6      	beq.n	800aa10 <_printf_common+0xa8>
 800aa42:	3601      	adds	r6, #1
 800aa44:	e7d1      	b.n	800a9ea <_printf_common+0x82>
	...

0800aa48 <_printf_i>:
 800aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4a:	b08b      	sub	sp, #44	@ 0x2c
 800aa4c:	9206      	str	r2, [sp, #24]
 800aa4e:	000a      	movs	r2, r1
 800aa50:	3243      	adds	r2, #67	@ 0x43
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	9005      	str	r0, [sp, #20]
 800aa56:	9203      	str	r2, [sp, #12]
 800aa58:	7e0a      	ldrb	r2, [r1, #24]
 800aa5a:	000c      	movs	r4, r1
 800aa5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa5e:	2a78      	cmp	r2, #120	@ 0x78
 800aa60:	d809      	bhi.n	800aa76 <_printf_i+0x2e>
 800aa62:	2a62      	cmp	r2, #98	@ 0x62
 800aa64:	d80b      	bhi.n	800aa7e <_printf_i+0x36>
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	d100      	bne.n	800aa6c <_printf_i+0x24>
 800aa6a:	e0ba      	b.n	800abe2 <_printf_i+0x19a>
 800aa6c:	497a      	ldr	r1, [pc, #488]	@ (800ac58 <_printf_i+0x210>)
 800aa6e:	9104      	str	r1, [sp, #16]
 800aa70:	2a58      	cmp	r2, #88	@ 0x58
 800aa72:	d100      	bne.n	800aa76 <_printf_i+0x2e>
 800aa74:	e08e      	b.n	800ab94 <_printf_i+0x14c>
 800aa76:	0025      	movs	r5, r4
 800aa78:	3542      	adds	r5, #66	@ 0x42
 800aa7a:	702a      	strb	r2, [r5, #0]
 800aa7c:	e022      	b.n	800aac4 <_printf_i+0x7c>
 800aa7e:	0010      	movs	r0, r2
 800aa80:	3863      	subs	r0, #99	@ 0x63
 800aa82:	2815      	cmp	r0, #21
 800aa84:	d8f7      	bhi.n	800aa76 <_printf_i+0x2e>
 800aa86:	f7f5 fb4d 	bl	8000124 <__gnu_thumb1_case_shi>
 800aa8a:	0016      	.short	0x0016
 800aa8c:	fff6001f 	.word	0xfff6001f
 800aa90:	fff6fff6 	.word	0xfff6fff6
 800aa94:	001ffff6 	.word	0x001ffff6
 800aa98:	fff6fff6 	.word	0xfff6fff6
 800aa9c:	fff6fff6 	.word	0xfff6fff6
 800aaa0:	0036009f 	.word	0x0036009f
 800aaa4:	fff6007e 	.word	0xfff6007e
 800aaa8:	00b0fff6 	.word	0x00b0fff6
 800aaac:	0036fff6 	.word	0x0036fff6
 800aab0:	fff6fff6 	.word	0xfff6fff6
 800aab4:	0082      	.short	0x0082
 800aab6:	0025      	movs	r5, r4
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	3542      	adds	r5, #66	@ 0x42
 800aabc:	1d11      	adds	r1, r2, #4
 800aabe:	6019      	str	r1, [r3, #0]
 800aac0:	6813      	ldr	r3, [r2, #0]
 800aac2:	702b      	strb	r3, [r5, #0]
 800aac4:	2301      	movs	r3, #1
 800aac6:	e09e      	b.n	800ac06 <_printf_i+0x1be>
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	6809      	ldr	r1, [r1, #0]
 800aacc:	1d02      	adds	r2, r0, #4
 800aace:	060d      	lsls	r5, r1, #24
 800aad0:	d50b      	bpl.n	800aaea <_printf_i+0xa2>
 800aad2:	6806      	ldr	r6, [r0, #0]
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	da03      	bge.n	800aae2 <_printf_i+0x9a>
 800aada:	232d      	movs	r3, #45	@ 0x2d
 800aadc:	9a03      	ldr	r2, [sp, #12]
 800aade:	4276      	negs	r6, r6
 800aae0:	7013      	strb	r3, [r2, #0]
 800aae2:	4b5d      	ldr	r3, [pc, #372]	@ (800ac58 <_printf_i+0x210>)
 800aae4:	270a      	movs	r7, #10
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	e018      	b.n	800ab1c <_printf_i+0xd4>
 800aaea:	6806      	ldr	r6, [r0, #0]
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	0649      	lsls	r1, r1, #25
 800aaf0:	d5f1      	bpl.n	800aad6 <_printf_i+0x8e>
 800aaf2:	b236      	sxth	r6, r6
 800aaf4:	e7ef      	b.n	800aad6 <_printf_i+0x8e>
 800aaf6:	6808      	ldr	r0, [r1, #0]
 800aaf8:	6819      	ldr	r1, [r3, #0]
 800aafa:	c940      	ldmia	r1!, {r6}
 800aafc:	0605      	lsls	r5, r0, #24
 800aafe:	d402      	bmi.n	800ab06 <_printf_i+0xbe>
 800ab00:	0640      	lsls	r0, r0, #25
 800ab02:	d500      	bpl.n	800ab06 <_printf_i+0xbe>
 800ab04:	b2b6      	uxth	r6, r6
 800ab06:	6019      	str	r1, [r3, #0]
 800ab08:	4b53      	ldr	r3, [pc, #332]	@ (800ac58 <_printf_i+0x210>)
 800ab0a:	270a      	movs	r7, #10
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	2a6f      	cmp	r2, #111	@ 0x6f
 800ab10:	d100      	bne.n	800ab14 <_printf_i+0xcc>
 800ab12:	3f02      	subs	r7, #2
 800ab14:	0023      	movs	r3, r4
 800ab16:	2200      	movs	r2, #0
 800ab18:	3343      	adds	r3, #67	@ 0x43
 800ab1a:	701a      	strb	r2, [r3, #0]
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	db06      	blt.n	800ab32 <_printf_i+0xea>
 800ab24:	2104      	movs	r1, #4
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	9d03      	ldr	r5, [sp, #12]
 800ab2a:	438a      	bics	r2, r1
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	4333      	orrs	r3, r6
 800ab30:	d00c      	beq.n	800ab4c <_printf_i+0x104>
 800ab32:	9d03      	ldr	r5, [sp, #12]
 800ab34:	0030      	movs	r0, r6
 800ab36:	0039      	movs	r1, r7
 800ab38:	f7f5 fb84 	bl	8000244 <__aeabi_uidivmod>
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	3d01      	subs	r5, #1
 800ab40:	5c5b      	ldrb	r3, [r3, r1]
 800ab42:	702b      	strb	r3, [r5, #0]
 800ab44:	0033      	movs	r3, r6
 800ab46:	0006      	movs	r6, r0
 800ab48:	429f      	cmp	r7, r3
 800ab4a:	d9f3      	bls.n	800ab34 <_printf_i+0xec>
 800ab4c:	2f08      	cmp	r7, #8
 800ab4e:	d109      	bne.n	800ab64 <_printf_i+0x11c>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	07db      	lsls	r3, r3, #31
 800ab54:	d506      	bpl.n	800ab64 <_printf_i+0x11c>
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	dc02      	bgt.n	800ab64 <_printf_i+0x11c>
 800ab5e:	2330      	movs	r3, #48	@ 0x30
 800ab60:	3d01      	subs	r5, #1
 800ab62:	702b      	strb	r3, [r5, #0]
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	1b5b      	subs	r3, r3, r5
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	9b07      	ldr	r3, [sp, #28]
 800ab6c:	0021      	movs	r1, r4
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	9805      	ldr	r0, [sp, #20]
 800ab72:	9b06      	ldr	r3, [sp, #24]
 800ab74:	aa09      	add	r2, sp, #36	@ 0x24
 800ab76:	f7ff fef7 	bl	800a968 <_printf_common>
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d148      	bne.n	800ac10 <_printf_i+0x1c8>
 800ab7e:	2001      	movs	r0, #1
 800ab80:	4240      	negs	r0, r0
 800ab82:	b00b      	add	sp, #44	@ 0x2c
 800ab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab86:	2220      	movs	r2, #32
 800ab88:	6809      	ldr	r1, [r1, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	2278      	movs	r2, #120	@ 0x78
 800ab90:	4932      	ldr	r1, [pc, #200]	@ (800ac5c <_printf_i+0x214>)
 800ab92:	9104      	str	r1, [sp, #16]
 800ab94:	0021      	movs	r1, r4
 800ab96:	3145      	adds	r1, #69	@ 0x45
 800ab98:	700a      	strb	r2, [r1, #0]
 800ab9a:	6819      	ldr	r1, [r3, #0]
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	c940      	ldmia	r1!, {r6}
 800aba0:	0610      	lsls	r0, r2, #24
 800aba2:	d402      	bmi.n	800abaa <_printf_i+0x162>
 800aba4:	0650      	lsls	r0, r2, #25
 800aba6:	d500      	bpl.n	800abaa <_printf_i+0x162>
 800aba8:	b2b6      	uxth	r6, r6
 800abaa:	6019      	str	r1, [r3, #0]
 800abac:	07d3      	lsls	r3, r2, #31
 800abae:	d502      	bpl.n	800abb6 <_printf_i+0x16e>
 800abb0:	2320      	movs	r3, #32
 800abb2:	4313      	orrs	r3, r2
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	d001      	beq.n	800abbe <_printf_i+0x176>
 800abba:	2710      	movs	r7, #16
 800abbc:	e7aa      	b.n	800ab14 <_printf_i+0xcc>
 800abbe:	2220      	movs	r2, #32
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	4393      	bics	r3, r2
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	e7f8      	b.n	800abba <_printf_i+0x172>
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	680d      	ldr	r5, [r1, #0]
 800abcc:	1d10      	adds	r0, r2, #4
 800abce:	6949      	ldr	r1, [r1, #20]
 800abd0:	6018      	str	r0, [r3, #0]
 800abd2:	6813      	ldr	r3, [r2, #0]
 800abd4:	062e      	lsls	r6, r5, #24
 800abd6:	d501      	bpl.n	800abdc <_printf_i+0x194>
 800abd8:	6019      	str	r1, [r3, #0]
 800abda:	e002      	b.n	800abe2 <_printf_i+0x19a>
 800abdc:	066d      	lsls	r5, r5, #25
 800abde:	d5fb      	bpl.n	800abd8 <_printf_i+0x190>
 800abe0:	8019      	strh	r1, [r3, #0]
 800abe2:	2300      	movs	r3, #0
 800abe4:	9d03      	ldr	r5, [sp, #12]
 800abe6:	6123      	str	r3, [r4, #16]
 800abe8:	e7bf      	b.n	800ab6a <_printf_i+0x122>
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	1d11      	adds	r1, r2, #4
 800abee:	6019      	str	r1, [r3, #0]
 800abf0:	6815      	ldr	r5, [r2, #0]
 800abf2:	2100      	movs	r1, #0
 800abf4:	0028      	movs	r0, r5
 800abf6:	6862      	ldr	r2, [r4, #4]
 800abf8:	f000 fa09 	bl	800b00e <memchr>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d001      	beq.n	800ac04 <_printf_i+0x1bc>
 800ac00:	1b40      	subs	r0, r0, r5
 800ac02:	6060      	str	r0, [r4, #4]
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9a03      	ldr	r2, [sp, #12]
 800ac0c:	7013      	strb	r3, [r2, #0]
 800ac0e:	e7ac      	b.n	800ab6a <_printf_i+0x122>
 800ac10:	002a      	movs	r2, r5
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	9906      	ldr	r1, [sp, #24]
 800ac16:	9805      	ldr	r0, [sp, #20]
 800ac18:	9d07      	ldr	r5, [sp, #28]
 800ac1a:	47a8      	blx	r5
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d0ae      	beq.n	800ab7e <_printf_i+0x136>
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	079b      	lsls	r3, r3, #30
 800ac24:	d415      	bmi.n	800ac52 <_printf_i+0x20a>
 800ac26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac28:	68e0      	ldr	r0, [r4, #12]
 800ac2a:	4298      	cmp	r0, r3
 800ac2c:	daa9      	bge.n	800ab82 <_printf_i+0x13a>
 800ac2e:	0018      	movs	r0, r3
 800ac30:	e7a7      	b.n	800ab82 <_printf_i+0x13a>
 800ac32:	0022      	movs	r2, r4
 800ac34:	2301      	movs	r3, #1
 800ac36:	9906      	ldr	r1, [sp, #24]
 800ac38:	9805      	ldr	r0, [sp, #20]
 800ac3a:	9e07      	ldr	r6, [sp, #28]
 800ac3c:	3219      	adds	r2, #25
 800ac3e:	47b0      	blx	r6
 800ac40:	3001      	adds	r0, #1
 800ac42:	d09c      	beq.n	800ab7e <_printf_i+0x136>
 800ac44:	3501      	adds	r5, #1
 800ac46:	68e3      	ldr	r3, [r4, #12]
 800ac48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac4a:	1a9b      	subs	r3, r3, r2
 800ac4c:	42ab      	cmp	r3, r5
 800ac4e:	dcf0      	bgt.n	800ac32 <_printf_i+0x1ea>
 800ac50:	e7e9      	b.n	800ac26 <_printf_i+0x1de>
 800ac52:	2500      	movs	r5, #0
 800ac54:	e7f7      	b.n	800ac46 <_printf_i+0x1fe>
 800ac56:	46c0      	nop			@ (mov r8, r8)
 800ac58:	0800d516 	.word	0x0800d516
 800ac5c:	0800d527 	.word	0x0800d527

0800ac60 <std>:
 800ac60:	2300      	movs	r3, #0
 800ac62:	b510      	push	{r4, lr}
 800ac64:	0004      	movs	r4, r0
 800ac66:	6003      	str	r3, [r0, #0]
 800ac68:	6043      	str	r3, [r0, #4]
 800ac6a:	6083      	str	r3, [r0, #8]
 800ac6c:	8181      	strh	r1, [r0, #12]
 800ac6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac70:	81c2      	strh	r2, [r0, #14]
 800ac72:	6103      	str	r3, [r0, #16]
 800ac74:	6143      	str	r3, [r0, #20]
 800ac76:	6183      	str	r3, [r0, #24]
 800ac78:	0019      	movs	r1, r3
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	305c      	adds	r0, #92	@ 0x5c
 800ac7e:	f000 f921 	bl	800aec4 <memset>
 800ac82:	4b0b      	ldr	r3, [pc, #44]	@ (800acb0 <std+0x50>)
 800ac84:	6224      	str	r4, [r4, #32]
 800ac86:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac88:	4b0a      	ldr	r3, [pc, #40]	@ (800acb4 <std+0x54>)
 800ac8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	@ (800acb8 <std+0x58>)
 800ac8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac90:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <std+0x5c>)
 800ac92:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac94:	4b0a      	ldr	r3, [pc, #40]	@ (800acc0 <std+0x60>)
 800ac96:	429c      	cmp	r4, r3
 800ac98:	d005      	beq.n	800aca6 <std+0x46>
 800ac9a:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <std+0x64>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d002      	beq.n	800aca6 <std+0x46>
 800aca0:	4b09      	ldr	r3, [pc, #36]	@ (800acc8 <std+0x68>)
 800aca2:	429c      	cmp	r4, r3
 800aca4:	d103      	bne.n	800acae <std+0x4e>
 800aca6:	0020      	movs	r0, r4
 800aca8:	3058      	adds	r0, #88	@ 0x58
 800acaa:	f000 f9a5 	bl	800aff8 <__retarget_lock_init_recursive>
 800acae:	bd10      	pop	{r4, pc}
 800acb0:	0800ae2d 	.word	0x0800ae2d
 800acb4:	0800ae55 	.word	0x0800ae55
 800acb8:	0800ae8d 	.word	0x0800ae8d
 800acbc:	0800aeb9 	.word	0x0800aeb9
 800acc0:	2000055c 	.word	0x2000055c
 800acc4:	200005c4 	.word	0x200005c4
 800acc8:	2000062c 	.word	0x2000062c

0800accc <stdio_exit_handler>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4a03      	ldr	r2, [pc, #12]	@ (800acdc <stdio_exit_handler+0x10>)
 800acd0:	4903      	ldr	r1, [pc, #12]	@ (800ace0 <stdio_exit_handler+0x14>)
 800acd2:	4804      	ldr	r0, [pc, #16]	@ (800ace4 <stdio_exit_handler+0x18>)
 800acd4:	f000 f86c 	bl	800adb0 <_fwalk_sglue>
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	46c0      	nop			@ (mov r8, r8)
 800acdc:	2000001c 	.word	0x2000001c
 800ace0:	0800ca1d 	.word	0x0800ca1d
 800ace4:	2000002c 	.word	0x2000002c

0800ace8 <cleanup_stdio>:
 800ace8:	6841      	ldr	r1, [r0, #4]
 800acea:	4b0b      	ldr	r3, [pc, #44]	@ (800ad18 <cleanup_stdio+0x30>)
 800acec:	b510      	push	{r4, lr}
 800acee:	0004      	movs	r4, r0
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d001      	beq.n	800acf8 <cleanup_stdio+0x10>
 800acf4:	f001 fe92 	bl	800ca1c <_fflush_r>
 800acf8:	68a1      	ldr	r1, [r4, #8]
 800acfa:	4b08      	ldr	r3, [pc, #32]	@ (800ad1c <cleanup_stdio+0x34>)
 800acfc:	4299      	cmp	r1, r3
 800acfe:	d002      	beq.n	800ad06 <cleanup_stdio+0x1e>
 800ad00:	0020      	movs	r0, r4
 800ad02:	f001 fe8b 	bl	800ca1c <_fflush_r>
 800ad06:	68e1      	ldr	r1, [r4, #12]
 800ad08:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <cleanup_stdio+0x38>)
 800ad0a:	4299      	cmp	r1, r3
 800ad0c:	d002      	beq.n	800ad14 <cleanup_stdio+0x2c>
 800ad0e:	0020      	movs	r0, r4
 800ad10:	f001 fe84 	bl	800ca1c <_fflush_r>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	46c0      	nop			@ (mov r8, r8)
 800ad18:	2000055c 	.word	0x2000055c
 800ad1c:	200005c4 	.word	0x200005c4
 800ad20:	2000062c 	.word	0x2000062c

0800ad24 <global_stdio_init.part.0>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4b09      	ldr	r3, [pc, #36]	@ (800ad4c <global_stdio_init.part.0+0x28>)
 800ad28:	4a09      	ldr	r2, [pc, #36]	@ (800ad50 <global_stdio_init.part.0+0x2c>)
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	4809      	ldr	r0, [pc, #36]	@ (800ad54 <global_stdio_init.part.0+0x30>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7ff ff95 	bl	800ac60 <std>
 800ad36:	2201      	movs	r2, #1
 800ad38:	2109      	movs	r1, #9
 800ad3a:	4807      	ldr	r0, [pc, #28]	@ (800ad58 <global_stdio_init.part.0+0x34>)
 800ad3c:	f7ff ff90 	bl	800ac60 <std>
 800ad40:	2202      	movs	r2, #2
 800ad42:	2112      	movs	r1, #18
 800ad44:	4805      	ldr	r0, [pc, #20]	@ (800ad5c <global_stdio_init.part.0+0x38>)
 800ad46:	f7ff ff8b 	bl	800ac60 <std>
 800ad4a:	bd10      	pop	{r4, pc}
 800ad4c:	20000694 	.word	0x20000694
 800ad50:	0800accd 	.word	0x0800accd
 800ad54:	2000055c 	.word	0x2000055c
 800ad58:	200005c4 	.word	0x200005c4
 800ad5c:	2000062c 	.word	0x2000062c

0800ad60 <__sfp_lock_acquire>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	4802      	ldr	r0, [pc, #8]	@ (800ad6c <__sfp_lock_acquire+0xc>)
 800ad64:	f000 f949 	bl	800affa <__retarget_lock_acquire_recursive>
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	46c0      	nop			@ (mov r8, r8)
 800ad6c:	2000069d 	.word	0x2000069d

0800ad70 <__sfp_lock_release>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	4802      	ldr	r0, [pc, #8]	@ (800ad7c <__sfp_lock_release+0xc>)
 800ad74:	f000 f942 	bl	800affc <__retarget_lock_release_recursive>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	46c0      	nop			@ (mov r8, r8)
 800ad7c:	2000069d 	.word	0x2000069d

0800ad80 <__sinit>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	0004      	movs	r4, r0
 800ad84:	f7ff ffec 	bl	800ad60 <__sfp_lock_acquire>
 800ad88:	6a23      	ldr	r3, [r4, #32]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <__sinit+0x14>
 800ad8e:	f7ff ffef 	bl	800ad70 <__sfp_lock_release>
 800ad92:	bd10      	pop	{r4, pc}
 800ad94:	4b04      	ldr	r3, [pc, #16]	@ (800ada8 <__sinit+0x28>)
 800ad96:	6223      	str	r3, [r4, #32]
 800ad98:	4b04      	ldr	r3, [pc, #16]	@ (800adac <__sinit+0x2c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f6      	bne.n	800ad8e <__sinit+0xe>
 800ada0:	f7ff ffc0 	bl	800ad24 <global_stdio_init.part.0>
 800ada4:	e7f3      	b.n	800ad8e <__sinit+0xe>
 800ada6:	46c0      	nop			@ (mov r8, r8)
 800ada8:	0800ace9 	.word	0x0800ace9
 800adac:	20000694 	.word	0x20000694

0800adb0 <_fwalk_sglue>:
 800adb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb2:	0014      	movs	r4, r2
 800adb4:	2600      	movs	r6, #0
 800adb6:	9000      	str	r0, [sp, #0]
 800adb8:	9101      	str	r1, [sp, #4]
 800adba:	68a5      	ldr	r5, [r4, #8]
 800adbc:	6867      	ldr	r7, [r4, #4]
 800adbe:	3f01      	subs	r7, #1
 800adc0:	d504      	bpl.n	800adcc <_fwalk_sglue+0x1c>
 800adc2:	6824      	ldr	r4, [r4, #0]
 800adc4:	2c00      	cmp	r4, #0
 800adc6:	d1f8      	bne.n	800adba <_fwalk_sglue+0xa>
 800adc8:	0030      	movs	r0, r6
 800adca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adcc:	89ab      	ldrh	r3, [r5, #12]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d908      	bls.n	800ade4 <_fwalk_sglue+0x34>
 800add2:	220e      	movs	r2, #14
 800add4:	5eab      	ldrsh	r3, [r5, r2]
 800add6:	3301      	adds	r3, #1
 800add8:	d004      	beq.n	800ade4 <_fwalk_sglue+0x34>
 800adda:	0029      	movs	r1, r5
 800addc:	9800      	ldr	r0, [sp, #0]
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	4798      	blx	r3
 800ade2:	4306      	orrs	r6, r0
 800ade4:	3568      	adds	r5, #104	@ 0x68
 800ade6:	e7ea      	b.n	800adbe <_fwalk_sglue+0xe>

0800ade8 <siprintf>:
 800ade8:	b40e      	push	{r1, r2, r3}
 800adea:	b510      	push	{r4, lr}
 800adec:	2400      	movs	r4, #0
 800adee:	490c      	ldr	r1, [pc, #48]	@ (800ae20 <siprintf+0x38>)
 800adf0:	b09d      	sub	sp, #116	@ 0x74
 800adf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800adf4:	9002      	str	r0, [sp, #8]
 800adf6:	9006      	str	r0, [sp, #24]
 800adf8:	9107      	str	r1, [sp, #28]
 800adfa:	9104      	str	r1, [sp, #16]
 800adfc:	4809      	ldr	r0, [pc, #36]	@ (800ae24 <siprintf+0x3c>)
 800adfe:	490a      	ldr	r1, [pc, #40]	@ (800ae28 <siprintf+0x40>)
 800ae00:	cb04      	ldmia	r3!, {r2}
 800ae02:	9105      	str	r1, [sp, #20]
 800ae04:	6800      	ldr	r0, [r0, #0]
 800ae06:	a902      	add	r1, sp, #8
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ae0c:	f001 fc82 	bl	800c714 <_svfiprintf_r>
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	701c      	strb	r4, [r3, #0]
 800ae14:	b01d      	add	sp, #116	@ 0x74
 800ae16:	bc10      	pop	{r4}
 800ae18:	bc08      	pop	{r3}
 800ae1a:	b003      	add	sp, #12
 800ae1c:	4718      	bx	r3
 800ae1e:	46c0      	nop			@ (mov r8, r8)
 800ae20:	7fffffff 	.word	0x7fffffff
 800ae24:	20000028 	.word	0x20000028
 800ae28:	ffff0208 	.word	0xffff0208

0800ae2c <__sread>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	000c      	movs	r4, r1
 800ae30:	250e      	movs	r5, #14
 800ae32:	5f49      	ldrsh	r1, [r1, r5]
 800ae34:	f000 f88e 	bl	800af54 <_read_r>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	db03      	blt.n	800ae44 <__sread+0x18>
 800ae3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae3e:	181b      	adds	r3, r3, r0
 800ae40:	6563      	str	r3, [r4, #84]	@ 0x54
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	4a02      	ldr	r2, [pc, #8]	@ (800ae50 <__sread+0x24>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	e7f9      	b.n	800ae42 <__sread+0x16>
 800ae4e:	46c0      	nop			@ (mov r8, r8)
 800ae50:	ffffefff 	.word	0xffffefff

0800ae54 <__swrite>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	001f      	movs	r7, r3
 800ae58:	898b      	ldrh	r3, [r1, #12]
 800ae5a:	0005      	movs	r5, r0
 800ae5c:	000c      	movs	r4, r1
 800ae5e:	0016      	movs	r6, r2
 800ae60:	05db      	lsls	r3, r3, #23
 800ae62:	d505      	bpl.n	800ae70 <__swrite+0x1c>
 800ae64:	230e      	movs	r3, #14
 800ae66:	5ec9      	ldrsh	r1, [r1, r3]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	f000 f85e 	bl	800af2c <_lseek_r>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	4a05      	ldr	r2, [pc, #20]	@ (800ae88 <__swrite+0x34>)
 800ae74:	0028      	movs	r0, r5
 800ae76:	4013      	ands	r3, r2
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	0032      	movs	r2, r6
 800ae7c:	230e      	movs	r3, #14
 800ae7e:	5ee1      	ldrsh	r1, [r4, r3]
 800ae80:	003b      	movs	r3, r7
 800ae82:	f000 f87b 	bl	800af7c <_write_r>
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae88:	ffffefff 	.word	0xffffefff

0800ae8c <__sseek>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	000c      	movs	r4, r1
 800ae90:	250e      	movs	r5, #14
 800ae92:	5f49      	ldrsh	r1, [r1, r5]
 800ae94:	f000 f84a 	bl	800af2c <_lseek_r>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	1c42      	adds	r2, r0, #1
 800ae9c:	d103      	bne.n	800aea6 <__sseek+0x1a>
 800ae9e:	4a05      	ldr	r2, [pc, #20]	@ (800aeb4 <__sseek+0x28>)
 800aea0:	4013      	ands	r3, r2
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	bd70      	pop	{r4, r5, r6, pc}
 800aea6:	2280      	movs	r2, #128	@ 0x80
 800aea8:	0152      	lsls	r2, r2, #5
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	6560      	str	r0, [r4, #84]	@ 0x54
 800aeb0:	e7f8      	b.n	800aea4 <__sseek+0x18>
 800aeb2:	46c0      	nop			@ (mov r8, r8)
 800aeb4:	ffffefff 	.word	0xffffefff

0800aeb8 <__sclose>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	230e      	movs	r3, #14
 800aebc:	5ec9      	ldrsh	r1, [r1, r3]
 800aebe:	f000 f823 	bl	800af08 <_close_r>
 800aec2:	bd10      	pop	{r4, pc}

0800aec4 <memset>:
 800aec4:	0003      	movs	r3, r0
 800aec6:	1882      	adds	r2, r0, r2
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d100      	bne.n	800aece <memset+0xa>
 800aecc:	4770      	bx	lr
 800aece:	7019      	strb	r1, [r3, #0]
 800aed0:	3301      	adds	r3, #1
 800aed2:	e7f9      	b.n	800aec8 <memset+0x4>

0800aed4 <strstr>:
 800aed4:	780a      	ldrb	r2, [r1, #0]
 800aed6:	b530      	push	{r4, r5, lr}
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d10c      	bne.n	800aef6 <strstr+0x22>
 800aedc:	bd30      	pop	{r4, r5, pc}
 800aede:	429a      	cmp	r2, r3
 800aee0:	d108      	bne.n	800aef4 <strstr+0x20>
 800aee2:	2301      	movs	r3, #1
 800aee4:	5ccc      	ldrb	r4, [r1, r3]
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	d0f8      	beq.n	800aedc <strstr+0x8>
 800aeea:	5cc5      	ldrb	r5, [r0, r3]
 800aeec:	42a5      	cmp	r5, r4
 800aeee:	d101      	bne.n	800aef4 <strstr+0x20>
 800aef0:	3301      	adds	r3, #1
 800aef2:	e7f7      	b.n	800aee4 <strstr+0x10>
 800aef4:	3001      	adds	r0, #1
 800aef6:	7803      	ldrb	r3, [r0, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f0      	bne.n	800aede <strstr+0xa>
 800aefc:	0018      	movs	r0, r3
 800aefe:	e7ed      	b.n	800aedc <strstr+0x8>

0800af00 <_localeconv_r>:
 800af00:	4800      	ldr	r0, [pc, #0]	@ (800af04 <_localeconv_r+0x4>)
 800af02:	4770      	bx	lr
 800af04:	20000168 	.word	0x20000168

0800af08 <_close_r>:
 800af08:	2300      	movs	r3, #0
 800af0a:	b570      	push	{r4, r5, r6, lr}
 800af0c:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_close_r+0x20>)
 800af0e:	0004      	movs	r4, r0
 800af10:	0008      	movs	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f9 ffec 	bl	8004ef0 <_close>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d103      	bne.n	800af24 <_close_r+0x1c>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d000      	beq.n	800af24 <_close_r+0x1c>
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	bd70      	pop	{r4, r5, r6, pc}
 800af26:	46c0      	nop			@ (mov r8, r8)
 800af28:	20000698 	.word	0x20000698

0800af2c <_lseek_r>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	0004      	movs	r4, r0
 800af30:	0008      	movs	r0, r1
 800af32:	0011      	movs	r1, r2
 800af34:	001a      	movs	r2, r3
 800af36:	2300      	movs	r3, #0
 800af38:	4d05      	ldr	r5, [pc, #20]	@ (800af50 <_lseek_r+0x24>)
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7f9 fff9 	bl	8004f32 <_lseek>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d103      	bne.n	800af4c <_lseek_r+0x20>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d000      	beq.n	800af4c <_lseek_r+0x20>
 800af4a:	6023      	str	r3, [r4, #0]
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	46c0      	nop			@ (mov r8, r8)
 800af50:	20000698 	.word	0x20000698

0800af54 <_read_r>:
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	0004      	movs	r4, r0
 800af58:	0008      	movs	r0, r1
 800af5a:	0011      	movs	r1, r2
 800af5c:	001a      	movs	r2, r3
 800af5e:	2300      	movs	r3, #0
 800af60:	4d05      	ldr	r5, [pc, #20]	@ (800af78 <_read_r+0x24>)
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f9 ff8b 	bl	8004e7e <_read>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d103      	bne.n	800af74 <_read_r+0x20>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d000      	beq.n	800af74 <_read_r+0x20>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	46c0      	nop			@ (mov r8, r8)
 800af78:	20000698 	.word	0x20000698

0800af7c <_write_r>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	0004      	movs	r4, r0
 800af80:	0008      	movs	r0, r1
 800af82:	0011      	movs	r1, r2
 800af84:	001a      	movs	r2, r3
 800af86:	2300      	movs	r3, #0
 800af88:	4d05      	ldr	r5, [pc, #20]	@ (800afa0 <_write_r+0x24>)
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f9 ff94 	bl	8004eb8 <_write>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d103      	bne.n	800af9c <_write_r+0x20>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d000      	beq.n	800af9c <_write_r+0x20>
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	bd70      	pop	{r4, r5, r6, pc}
 800af9e:	46c0      	nop			@ (mov r8, r8)
 800afa0:	20000698 	.word	0x20000698

0800afa4 <__errno>:
 800afa4:	4b01      	ldr	r3, [pc, #4]	@ (800afac <__errno+0x8>)
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	4770      	bx	lr
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	20000028 	.word	0x20000028

0800afb0 <__libc_init_array>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	2600      	movs	r6, #0
 800afb4:	4c0c      	ldr	r4, [pc, #48]	@ (800afe8 <__libc_init_array+0x38>)
 800afb6:	4d0d      	ldr	r5, [pc, #52]	@ (800afec <__libc_init_array+0x3c>)
 800afb8:	1b64      	subs	r4, r4, r5
 800afba:	10a4      	asrs	r4, r4, #2
 800afbc:	42a6      	cmp	r6, r4
 800afbe:	d109      	bne.n	800afd4 <__libc_init_array+0x24>
 800afc0:	2600      	movs	r6, #0
 800afc2:	f002 f8fb 	bl	800d1bc <_init>
 800afc6:	4c0a      	ldr	r4, [pc, #40]	@ (800aff0 <__libc_init_array+0x40>)
 800afc8:	4d0a      	ldr	r5, [pc, #40]	@ (800aff4 <__libc_init_array+0x44>)
 800afca:	1b64      	subs	r4, r4, r5
 800afcc:	10a4      	asrs	r4, r4, #2
 800afce:	42a6      	cmp	r6, r4
 800afd0:	d105      	bne.n	800afde <__libc_init_array+0x2e>
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	00b3      	lsls	r3, r6, #2
 800afd6:	58eb      	ldr	r3, [r5, r3]
 800afd8:	4798      	blx	r3
 800afda:	3601      	adds	r6, #1
 800afdc:	e7ee      	b.n	800afbc <__libc_init_array+0xc>
 800afde:	00b3      	lsls	r3, r6, #2
 800afe0:	58eb      	ldr	r3, [r5, r3]
 800afe2:	4798      	blx	r3
 800afe4:	3601      	adds	r6, #1
 800afe6:	e7f2      	b.n	800afce <__libc_init_array+0x1e>
 800afe8:	0800d87c 	.word	0x0800d87c
 800afec:	0800d87c 	.word	0x0800d87c
 800aff0:	0800d880 	.word	0x0800d880
 800aff4:	0800d87c 	.word	0x0800d87c

0800aff8 <__retarget_lock_init_recursive>:
 800aff8:	4770      	bx	lr

0800affa <__retarget_lock_acquire_recursive>:
 800affa:	4770      	bx	lr

0800affc <__retarget_lock_release_recursive>:
 800affc:	4770      	bx	lr

0800affe <strcpy>:
 800affe:	0003      	movs	r3, r0
 800b000:	780a      	ldrb	r2, [r1, #0]
 800b002:	3101      	adds	r1, #1
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	2a00      	cmp	r2, #0
 800b00a:	d1f9      	bne.n	800b000 <strcpy+0x2>
 800b00c:	4770      	bx	lr

0800b00e <memchr>:
 800b00e:	b2c9      	uxtb	r1, r1
 800b010:	1882      	adds	r2, r0, r2
 800b012:	4290      	cmp	r0, r2
 800b014:	d101      	bne.n	800b01a <memchr+0xc>
 800b016:	2000      	movs	r0, #0
 800b018:	4770      	bx	lr
 800b01a:	7803      	ldrb	r3, [r0, #0]
 800b01c:	428b      	cmp	r3, r1
 800b01e:	d0fb      	beq.n	800b018 <memchr+0xa>
 800b020:	3001      	adds	r0, #1
 800b022:	e7f6      	b.n	800b012 <memchr+0x4>

0800b024 <quorem>:
 800b024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b026:	6903      	ldr	r3, [r0, #16]
 800b028:	690c      	ldr	r4, [r1, #16]
 800b02a:	b089      	sub	sp, #36	@ 0x24
 800b02c:	9003      	str	r0, [sp, #12]
 800b02e:	9106      	str	r1, [sp, #24]
 800b030:	2000      	movs	r0, #0
 800b032:	42a3      	cmp	r3, r4
 800b034:	db63      	blt.n	800b0fe <quorem+0xda>
 800b036:	000b      	movs	r3, r1
 800b038:	3c01      	subs	r4, #1
 800b03a:	3314      	adds	r3, #20
 800b03c:	00a5      	lsls	r5, r4, #2
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	195b      	adds	r3, r3, r5
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	3314      	adds	r3, #20
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	195d      	adds	r5, r3, r5
 800b04c:	9b05      	ldr	r3, [sp, #20]
 800b04e:	682f      	ldr	r7, [r5, #0]
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	0038      	movs	r0, r7
 800b054:	3601      	adds	r6, #1
 800b056:	0031      	movs	r1, r6
 800b058:	f7f5 f86e 	bl	8000138 <__udivsi3>
 800b05c:	9002      	str	r0, [sp, #8]
 800b05e:	42b7      	cmp	r7, r6
 800b060:	d327      	bcc.n	800b0b2 <quorem+0x8e>
 800b062:	9b04      	ldr	r3, [sp, #16]
 800b064:	2700      	movs	r7, #0
 800b066:	469c      	mov	ip, r3
 800b068:	9e01      	ldr	r6, [sp, #4]
 800b06a:	9707      	str	r7, [sp, #28]
 800b06c:	4662      	mov	r2, ip
 800b06e:	ca08      	ldmia	r2!, {r3}
 800b070:	6830      	ldr	r0, [r6, #0]
 800b072:	4694      	mov	ip, r2
 800b074:	9a02      	ldr	r2, [sp, #8]
 800b076:	b299      	uxth	r1, r3
 800b078:	4351      	muls	r1, r2
 800b07a:	0c1b      	lsrs	r3, r3, #16
 800b07c:	4353      	muls	r3, r2
 800b07e:	19c9      	adds	r1, r1, r7
 800b080:	0c0a      	lsrs	r2, r1, #16
 800b082:	189b      	adds	r3, r3, r2
 800b084:	b289      	uxth	r1, r1
 800b086:	b282      	uxth	r2, r0
 800b088:	1a52      	subs	r2, r2, r1
 800b08a:	9907      	ldr	r1, [sp, #28]
 800b08c:	0c1f      	lsrs	r7, r3, #16
 800b08e:	1852      	adds	r2, r2, r1
 800b090:	0c00      	lsrs	r0, r0, #16
 800b092:	b29b      	uxth	r3, r3
 800b094:	1411      	asrs	r1, r2, #16
 800b096:	1ac3      	subs	r3, r0, r3
 800b098:	185b      	adds	r3, r3, r1
 800b09a:	1419      	asrs	r1, r3, #16
 800b09c:	b292      	uxth	r2, r2
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	9107      	str	r1, [sp, #28]
 800b0a6:	c604      	stmia	r6!, {r2}
 800b0a8:	4563      	cmp	r3, ip
 800b0aa:	d2df      	bcs.n	800b06c <quorem+0x48>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d02b      	beq.n	800b10a <quorem+0xe6>
 800b0b2:	9906      	ldr	r1, [sp, #24]
 800b0b4:	9803      	ldr	r0, [sp, #12]
 800b0b6:	f001 f9b7 	bl	800c428 <__mcmp>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	db1e      	blt.n	800b0fc <quorem+0xd8>
 800b0be:	2600      	movs	r6, #0
 800b0c0:	9d01      	ldr	r5, [sp, #4]
 800b0c2:	9904      	ldr	r1, [sp, #16]
 800b0c4:	c901      	ldmia	r1!, {r0}
 800b0c6:	682b      	ldr	r3, [r5, #0]
 800b0c8:	b287      	uxth	r7, r0
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	1bd2      	subs	r2, r2, r7
 800b0ce:	1992      	adds	r2, r2, r6
 800b0d0:	0c00      	lsrs	r0, r0, #16
 800b0d2:	0c1b      	lsrs	r3, r3, #16
 800b0d4:	1a1b      	subs	r3, r3, r0
 800b0d6:	1410      	asrs	r0, r2, #16
 800b0d8:	181b      	adds	r3, r3, r0
 800b0da:	141e      	asrs	r6, r3, #16
 800b0dc:	b292      	uxth	r2, r2
 800b0de:	041b      	lsls	r3, r3, #16
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	9b05      	ldr	r3, [sp, #20]
 800b0e4:	c504      	stmia	r5!, {r2}
 800b0e6:	428b      	cmp	r3, r1
 800b0e8:	d2ec      	bcs.n	800b0c4 <quorem+0xa0>
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	00a3      	lsls	r3, r4, #2
 800b0ee:	18d3      	adds	r3, r2, r3
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	2a00      	cmp	r2, #0
 800b0f4:	d014      	beq.n	800b120 <quorem+0xfc>
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	9302      	str	r3, [sp, #8]
 800b0fc:	9802      	ldr	r0, [sp, #8]
 800b0fe:	b009      	add	sp, #36	@ 0x24
 800b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <quorem+0xee>
 800b108:	3c01      	subs	r4, #1
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	3d04      	subs	r5, #4
 800b10e:	42ab      	cmp	r3, r5
 800b110:	d3f7      	bcc.n	800b102 <quorem+0xde>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	611c      	str	r4, [r3, #16]
 800b116:	e7cc      	b.n	800b0b2 <quorem+0x8e>
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	2a00      	cmp	r2, #0
 800b11c:	d104      	bne.n	800b128 <quorem+0x104>
 800b11e:	3c01      	subs	r4, #1
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	3b04      	subs	r3, #4
 800b124:	429a      	cmp	r2, r3
 800b126:	d3f7      	bcc.n	800b118 <quorem+0xf4>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	611c      	str	r4, [r3, #16]
 800b12c:	e7e3      	b.n	800b0f6 <quorem+0xd2>
	...

0800b130 <_dtoa_r>:
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	0014      	movs	r4, r2
 800b134:	001d      	movs	r5, r3
 800b136:	69c6      	ldr	r6, [r0, #28]
 800b138:	b09d      	sub	sp, #116	@ 0x74
 800b13a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b13c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b13e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b140:	9003      	str	r0, [sp, #12]
 800b142:	2e00      	cmp	r6, #0
 800b144:	d10f      	bne.n	800b166 <_dtoa_r+0x36>
 800b146:	2010      	movs	r0, #16
 800b148:	f000 fe2c 	bl	800bda4 <malloc>
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	1e02      	subs	r2, r0, #0
 800b150:	61d8      	str	r0, [r3, #28]
 800b152:	d104      	bne.n	800b15e <_dtoa_r+0x2e>
 800b154:	21ef      	movs	r1, #239	@ 0xef
 800b156:	4bc7      	ldr	r3, [pc, #796]	@ (800b474 <_dtoa_r+0x344>)
 800b158:	48c7      	ldr	r0, [pc, #796]	@ (800b478 <_dtoa_r+0x348>)
 800b15a:	f001 fcb9 	bl	800cad0 <__assert_func>
 800b15e:	6046      	str	r6, [r0, #4]
 800b160:	6086      	str	r6, [r0, #8]
 800b162:	6006      	str	r6, [r0, #0]
 800b164:	60c6      	str	r6, [r0, #12]
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	6819      	ldr	r1, [r3, #0]
 800b16c:	2900      	cmp	r1, #0
 800b16e:	d00b      	beq.n	800b188 <_dtoa_r+0x58>
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	2301      	movs	r3, #1
 800b174:	4093      	lsls	r3, r2
 800b176:	604a      	str	r2, [r1, #4]
 800b178:	608b      	str	r3, [r1, #8]
 800b17a:	9803      	ldr	r0, [sp, #12]
 800b17c:	f000 ff12 	bl	800bfa4 <_Bfree>
 800b180:	2200      	movs	r2, #0
 800b182:	9b03      	ldr	r3, [sp, #12]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	2d00      	cmp	r5, #0
 800b18a:	da1e      	bge.n	800b1ca <_dtoa_r+0x9a>
 800b18c:	2301      	movs	r3, #1
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	006b      	lsls	r3, r5, #1
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b196:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b198:	4bb8      	ldr	r3, [pc, #736]	@ (800b47c <_dtoa_r+0x34c>)
 800b19a:	4ab8      	ldr	r2, [pc, #736]	@ (800b47c <_dtoa_r+0x34c>)
 800b19c:	403b      	ands	r3, r7
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d116      	bne.n	800b1d0 <_dtoa_r+0xa0>
 800b1a2:	4bb7      	ldr	r3, [pc, #732]	@ (800b480 <_dtoa_r+0x350>)
 800b1a4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	033b      	lsls	r3, r7, #12
 800b1aa:	0b1b      	lsrs	r3, r3, #12
 800b1ac:	4323      	orrs	r3, r4
 800b1ae:	d101      	bne.n	800b1b4 <_dtoa_r+0x84>
 800b1b0:	f000 fd80 	bl	800bcb4 <_dtoa_r+0xb84>
 800b1b4:	4bb3      	ldr	r3, [pc, #716]	@ (800b484 <_dtoa_r+0x354>)
 800b1b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b1b8:	9308      	str	r3, [sp, #32]
 800b1ba:	2a00      	cmp	r2, #0
 800b1bc:	d002      	beq.n	800b1c4 <_dtoa_r+0x94>
 800b1be:	4bb2      	ldr	r3, [pc, #712]	@ (800b488 <_dtoa_r+0x358>)
 800b1c0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	9808      	ldr	r0, [sp, #32]
 800b1c6:	b01d      	add	sp, #116	@ 0x74
 800b1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	603b      	str	r3, [r7, #0]
 800b1ce:	e7e2      	b.n	800b196 <_dtoa_r+0x66>
 800b1d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d4:	9212      	str	r2, [sp, #72]	@ 0x48
 800b1d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b1da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f7f5 f930 	bl	8000444 <__aeabi_dcmpeq>
 800b1e4:	1e06      	subs	r6, r0, #0
 800b1e6:	d00b      	beq.n	800b200 <_dtoa_r+0xd0>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <_dtoa_r+0xca>
 800b1f4:	4ba5      	ldr	r3, [pc, #660]	@ (800b48c <_dtoa_r+0x35c>)
 800b1f6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	4ba5      	ldr	r3, [pc, #660]	@ (800b490 <_dtoa_r+0x360>)
 800b1fc:	9308      	str	r3, [sp, #32]
 800b1fe:	e7e1      	b.n	800b1c4 <_dtoa_r+0x94>
 800b200:	ab1a      	add	r3, sp, #104	@ 0x68
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	9803      	ldr	r0, [sp, #12]
 800b20a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b20e:	f001 f9c1 	bl	800c594 <__d2b>
 800b212:	007a      	lsls	r2, r7, #1
 800b214:	9005      	str	r0, [sp, #20]
 800b216:	0d52      	lsrs	r2, r2, #21
 800b218:	d100      	bne.n	800b21c <_dtoa_r+0xec>
 800b21a:	e07b      	b.n	800b314 <_dtoa_r+0x1e4>
 800b21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b21e:	9618      	str	r6, [sp, #96]	@ 0x60
 800b220:	0319      	lsls	r1, r3, #12
 800b222:	4b9c      	ldr	r3, [pc, #624]	@ (800b494 <_dtoa_r+0x364>)
 800b224:	0b09      	lsrs	r1, r1, #12
 800b226:	430b      	orrs	r3, r1
 800b228:	499b      	ldr	r1, [pc, #620]	@ (800b498 <_dtoa_r+0x368>)
 800b22a:	1857      	adds	r7, r2, r1
 800b22c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b22e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b230:	0019      	movs	r1, r3
 800b232:	2200      	movs	r2, #0
 800b234:	4b99      	ldr	r3, [pc, #612]	@ (800b49c <_dtoa_r+0x36c>)
 800b236:	f7f7 fa23 	bl	8002680 <__aeabi_dsub>
 800b23a:	4a99      	ldr	r2, [pc, #612]	@ (800b4a0 <_dtoa_r+0x370>)
 800b23c:	4b99      	ldr	r3, [pc, #612]	@ (800b4a4 <_dtoa_r+0x374>)
 800b23e:	f7f6 ff39 	bl	80020b4 <__aeabi_dmul>
 800b242:	4a99      	ldr	r2, [pc, #612]	@ (800b4a8 <_dtoa_r+0x378>)
 800b244:	4b99      	ldr	r3, [pc, #612]	@ (800b4ac <_dtoa_r+0x37c>)
 800b246:	f7f5 ff35 	bl	80010b4 <__aeabi_dadd>
 800b24a:	0004      	movs	r4, r0
 800b24c:	0038      	movs	r0, r7
 800b24e:	000d      	movs	r5, r1
 800b250:	f7f7 fe7e 	bl	8002f50 <__aeabi_i2d>
 800b254:	4a96      	ldr	r2, [pc, #600]	@ (800b4b0 <_dtoa_r+0x380>)
 800b256:	4b97      	ldr	r3, [pc, #604]	@ (800b4b4 <_dtoa_r+0x384>)
 800b258:	f7f6 ff2c 	bl	80020b4 <__aeabi_dmul>
 800b25c:	0002      	movs	r2, r0
 800b25e:	000b      	movs	r3, r1
 800b260:	0020      	movs	r0, r4
 800b262:	0029      	movs	r1, r5
 800b264:	f7f5 ff26 	bl	80010b4 <__aeabi_dadd>
 800b268:	0004      	movs	r4, r0
 800b26a:	000d      	movs	r5, r1
 800b26c:	f7f7 fe34 	bl	8002ed8 <__aeabi_d2iz>
 800b270:	2200      	movs	r2, #0
 800b272:	9004      	str	r0, [sp, #16]
 800b274:	2300      	movs	r3, #0
 800b276:	0020      	movs	r0, r4
 800b278:	0029      	movs	r1, r5
 800b27a:	f7f5 f8e9 	bl	8000450 <__aeabi_dcmplt>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d00b      	beq.n	800b29a <_dtoa_r+0x16a>
 800b282:	9804      	ldr	r0, [sp, #16]
 800b284:	f7f7 fe64 	bl	8002f50 <__aeabi_i2d>
 800b288:	002b      	movs	r3, r5
 800b28a:	0022      	movs	r2, r4
 800b28c:	f7f5 f8da 	bl	8000444 <__aeabi_dcmpeq>
 800b290:	4243      	negs	r3, r0
 800b292:	4158      	adcs	r0, r3
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	1a1b      	subs	r3, r3, r0
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	2301      	movs	r3, #1
 800b29c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	2b16      	cmp	r3, #22
 800b2a2:	d810      	bhi.n	800b2c6 <_dtoa_r+0x196>
 800b2a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b2a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b2a8:	9a04      	ldr	r2, [sp, #16]
 800b2aa:	4b83      	ldr	r3, [pc, #524]	@ (800b4b8 <_dtoa_r+0x388>)
 800b2ac:	00d2      	lsls	r2, r2, #3
 800b2ae:	189b      	adds	r3, r3, r2
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f7f5 f8cc 	bl	8000450 <__aeabi_dcmplt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d047      	beq.n	800b34c <_dtoa_r+0x21c>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b2ca:	9206      	str	r2, [sp, #24]
 800b2cc:	1bdb      	subs	r3, r3, r7
 800b2ce:	1e5a      	subs	r2, r3, #1
 800b2d0:	d53e      	bpl.n	800b350 <_dtoa_r+0x220>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	9306      	str	r3, [sp, #24]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	db38      	blt.n	800b354 <_dtoa_r+0x224>
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e6:	4694      	mov	ip, r2
 800b2e8:	4463      	add	r3, ip
 800b2ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9214      	str	r2, [sp, #80]	@ 0x50
 800b2f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b2f4:	2401      	movs	r4, #1
 800b2f6:	2b09      	cmp	r3, #9
 800b2f8:	d862      	bhi.n	800b3c0 <_dtoa_r+0x290>
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	dd02      	ble.n	800b304 <_dtoa_r+0x1d4>
 800b2fe:	2400      	movs	r4, #0
 800b300:	3b04      	subs	r3, #4
 800b302:	9322      	str	r3, [sp, #136]	@ 0x88
 800b304:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b306:	1e98      	subs	r0, r3, #2
 800b308:	2803      	cmp	r0, #3
 800b30a:	d863      	bhi.n	800b3d4 <_dtoa_r+0x2a4>
 800b30c:	f7f4 ff00 	bl	8000110 <__gnu_thumb1_case_uqi>
 800b310:	2b385654 	.word	0x2b385654
 800b314:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b316:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b318:	18f6      	adds	r6, r6, r3
 800b31a:	4b68      	ldr	r3, [pc, #416]	@ (800b4bc <_dtoa_r+0x38c>)
 800b31c:	18f2      	adds	r2, r6, r3
 800b31e:	2a20      	cmp	r2, #32
 800b320:	dd0f      	ble.n	800b342 <_dtoa_r+0x212>
 800b322:	2340      	movs	r3, #64	@ 0x40
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	409f      	lsls	r7, r3
 800b328:	4b65      	ldr	r3, [pc, #404]	@ (800b4c0 <_dtoa_r+0x390>)
 800b32a:	0038      	movs	r0, r7
 800b32c:	18f3      	adds	r3, r6, r3
 800b32e:	40dc      	lsrs	r4, r3
 800b330:	4320      	orrs	r0, r4
 800b332:	f7f7 fe3b 	bl	8002fac <__aeabi_ui2d>
 800b336:	2201      	movs	r2, #1
 800b338:	4b62      	ldr	r3, [pc, #392]	@ (800b4c4 <_dtoa_r+0x394>)
 800b33a:	1e77      	subs	r7, r6, #1
 800b33c:	18cb      	adds	r3, r1, r3
 800b33e:	9218      	str	r2, [sp, #96]	@ 0x60
 800b340:	e776      	b.n	800b230 <_dtoa_r+0x100>
 800b342:	2320      	movs	r3, #32
 800b344:	0020      	movs	r0, r4
 800b346:	1a9b      	subs	r3, r3, r2
 800b348:	4098      	lsls	r0, r3
 800b34a:	e7f2      	b.n	800b332 <_dtoa_r+0x202>
 800b34c:	9015      	str	r0, [sp, #84]	@ 0x54
 800b34e:	e7ba      	b.n	800b2c6 <_dtoa_r+0x196>
 800b350:	920d      	str	r2, [sp, #52]	@ 0x34
 800b352:	e7c3      	b.n	800b2dc <_dtoa_r+0x1ac>
 800b354:	9b06      	ldr	r3, [sp, #24]
 800b356:	9a04      	ldr	r2, [sp, #16]
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	9306      	str	r3, [sp, #24]
 800b35c:	4253      	negs	r3, r2
 800b35e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b360:	2300      	movs	r3, #0
 800b362:	9314      	str	r3, [sp, #80]	@ 0x50
 800b364:	e7c5      	b.n	800b2f2 <_dtoa_r+0x1c2>
 800b366:	2301      	movs	r3, #1
 800b368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b36a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b36c:	4694      	mov	ip, r2
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	4463      	add	r3, ip
 800b372:	930e      	str	r3, [sp, #56]	@ 0x38
 800b374:	3301      	adds	r3, #1
 800b376:	9309      	str	r3, [sp, #36]	@ 0x24
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dc08      	bgt.n	800b38e <_dtoa_r+0x25e>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e006      	b.n	800b38e <_dtoa_r+0x25e>
 800b380:	2301      	movs	r3, #1
 800b382:	9310      	str	r3, [sp, #64]	@ 0x40
 800b384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd28      	ble.n	800b3dc <_dtoa_r+0x2ac>
 800b38a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b38e:	9a03      	ldr	r2, [sp, #12]
 800b390:	2100      	movs	r1, #0
 800b392:	69d0      	ldr	r0, [r2, #28]
 800b394:	2204      	movs	r2, #4
 800b396:	0015      	movs	r5, r2
 800b398:	3514      	adds	r5, #20
 800b39a:	429d      	cmp	r5, r3
 800b39c:	d923      	bls.n	800b3e6 <_dtoa_r+0x2b6>
 800b39e:	6041      	str	r1, [r0, #4]
 800b3a0:	9803      	ldr	r0, [sp, #12]
 800b3a2:	f000 fdbb 	bl	800bf1c <_Balloc>
 800b3a6:	9008      	str	r0, [sp, #32]
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d11f      	bne.n	800b3ec <_dtoa_r+0x2bc>
 800b3ac:	21b0      	movs	r1, #176	@ 0xb0
 800b3ae:	4b46      	ldr	r3, [pc, #280]	@ (800b4c8 <_dtoa_r+0x398>)
 800b3b0:	4831      	ldr	r0, [pc, #196]	@ (800b478 <_dtoa_r+0x348>)
 800b3b2:	9a08      	ldr	r2, [sp, #32]
 800b3b4:	31ff      	adds	r1, #255	@ 0xff
 800b3b6:	e6d0      	b.n	800b15a <_dtoa_r+0x2a>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e7e2      	b.n	800b382 <_dtoa_r+0x252>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e7d3      	b.n	800b368 <_dtoa_r+0x238>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9410      	str	r4, [sp, #64]	@ 0x40
 800b3c4:	9322      	str	r3, [sp, #136]	@ 0x88
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ce:	3313      	adds	r3, #19
 800b3d0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b3d2:	e7dc      	b.n	800b38e <_dtoa_r+0x25e>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3d8:	3b02      	subs	r3, #2
 800b3da:	e7f5      	b.n	800b3c8 <_dtoa_r+0x298>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	001a      	movs	r2, r3
 800b3e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e4:	e7f4      	b.n	800b3d0 <_dtoa_r+0x2a0>
 800b3e6:	3101      	adds	r1, #1
 800b3e8:	0052      	lsls	r2, r2, #1
 800b3ea:	e7d4      	b.n	800b396 <_dtoa_r+0x266>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	9a08      	ldr	r2, [sp, #32]
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f6:	2b0e      	cmp	r3, #14
 800b3f8:	d900      	bls.n	800b3fc <_dtoa_r+0x2cc>
 800b3fa:	e0d6      	b.n	800b5aa <_dtoa_r+0x47a>
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d100      	bne.n	800b402 <_dtoa_r+0x2d2>
 800b400:	e0d3      	b.n	800b5aa <_dtoa_r+0x47a>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd63      	ble.n	800b4d0 <_dtoa_r+0x3a0>
 800b408:	210f      	movs	r1, #15
 800b40a:	9a04      	ldr	r2, [sp, #16]
 800b40c:	4b2a      	ldr	r3, [pc, #168]	@ (800b4b8 <_dtoa_r+0x388>)
 800b40e:	400a      	ands	r2, r1
 800b410:	00d2      	lsls	r2, r2, #3
 800b412:	189b      	adds	r3, r3, r2
 800b414:	681e      	ldr	r6, [r3, #0]
 800b416:	685f      	ldr	r7, [r3, #4]
 800b418:	9b04      	ldr	r3, [sp, #16]
 800b41a:	2402      	movs	r4, #2
 800b41c:	111d      	asrs	r5, r3, #4
 800b41e:	05db      	lsls	r3, r3, #23
 800b420:	d50a      	bpl.n	800b438 <_dtoa_r+0x308>
 800b422:	4b2a      	ldr	r3, [pc, #168]	@ (800b4cc <_dtoa_r+0x39c>)
 800b424:	400d      	ands	r5, r1
 800b426:	6a1a      	ldr	r2, [r3, #32]
 800b428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b42c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b42e:	f7f6 fa07 	bl	8001840 <__aeabi_ddiv>
 800b432:	900a      	str	r0, [sp, #40]	@ 0x28
 800b434:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b436:	3401      	adds	r4, #1
 800b438:	4b24      	ldr	r3, [pc, #144]	@ (800b4cc <_dtoa_r+0x39c>)
 800b43a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	d108      	bne.n	800b452 <_dtoa_r+0x322>
 800b440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b442:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b444:	0032      	movs	r2, r6
 800b446:	003b      	movs	r3, r7
 800b448:	f7f6 f9fa 	bl	8001840 <__aeabi_ddiv>
 800b44c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b44e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b450:	e059      	b.n	800b506 <_dtoa_r+0x3d6>
 800b452:	2301      	movs	r3, #1
 800b454:	421d      	tst	r5, r3
 800b456:	d009      	beq.n	800b46c <_dtoa_r+0x33c>
 800b458:	18e4      	adds	r4, r4, r3
 800b45a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b45c:	0030      	movs	r0, r6
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	0039      	movs	r1, r7
 800b464:	f7f6 fe26 	bl	80020b4 <__aeabi_dmul>
 800b468:	0006      	movs	r6, r0
 800b46a:	000f      	movs	r7, r1
 800b46c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b46e:	106d      	asrs	r5, r5, #1
 800b470:	3308      	adds	r3, #8
 800b472:	e7e2      	b.n	800b43a <_dtoa_r+0x30a>
 800b474:	0800d545 	.word	0x0800d545
 800b478:	0800d55c 	.word	0x0800d55c
 800b47c:	7ff00000 	.word	0x7ff00000
 800b480:	0000270f 	.word	0x0000270f
 800b484:	0800d541 	.word	0x0800d541
 800b488:	0800d544 	.word	0x0800d544
 800b48c:	0800d515 	.word	0x0800d515
 800b490:	0800d514 	.word	0x0800d514
 800b494:	3ff00000 	.word	0x3ff00000
 800b498:	fffffc01 	.word	0xfffffc01
 800b49c:	3ff80000 	.word	0x3ff80000
 800b4a0:	636f4361 	.word	0x636f4361
 800b4a4:	3fd287a7 	.word	0x3fd287a7
 800b4a8:	8b60c8b3 	.word	0x8b60c8b3
 800b4ac:	3fc68a28 	.word	0x3fc68a28
 800b4b0:	509f79fb 	.word	0x509f79fb
 800b4b4:	3fd34413 	.word	0x3fd34413
 800b4b8:	0800d6b0 	.word	0x0800d6b0
 800b4bc:	00000432 	.word	0x00000432
 800b4c0:	00000412 	.word	0x00000412
 800b4c4:	fe100000 	.word	0xfe100000
 800b4c8:	0800d5b4 	.word	0x0800d5b4
 800b4cc:	0800d688 	.word	0x0800d688
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	2402      	movs	r4, #2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d016      	beq.n	800b506 <_dtoa_r+0x3d6>
 800b4d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b4da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b4dc:	220f      	movs	r2, #15
 800b4de:	425d      	negs	r5, r3
 800b4e0:	402a      	ands	r2, r5
 800b4e2:	4bd5      	ldr	r3, [pc, #852]	@ (800b838 <_dtoa_r+0x708>)
 800b4e4:	00d2      	lsls	r2, r2, #3
 800b4e6:	189b      	adds	r3, r3, r2
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f7f6 fde2 	bl	80020b4 <__aeabi_dmul>
 800b4f0:	2701      	movs	r7, #1
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4f8:	4ed0      	ldr	r6, [pc, #832]	@ (800b83c <_dtoa_r+0x70c>)
 800b4fa:	112d      	asrs	r5, r5, #4
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	d000      	beq.n	800b502 <_dtoa_r+0x3d2>
 800b500:	e095      	b.n	800b62e <_dtoa_r+0x4fe>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1a2      	bne.n	800b44c <_dtoa_r+0x31c>
 800b506:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b508:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b50a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d100      	bne.n	800b512 <_dtoa_r+0x3e2>
 800b510:	e098      	b.n	800b644 <_dtoa_r+0x514>
 800b512:	2200      	movs	r2, #0
 800b514:	0030      	movs	r0, r6
 800b516:	0039      	movs	r1, r7
 800b518:	4bc9      	ldr	r3, [pc, #804]	@ (800b840 <_dtoa_r+0x710>)
 800b51a:	f7f4 ff99 	bl	8000450 <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d100      	bne.n	800b524 <_dtoa_r+0x3f4>
 800b522:	e08f      	b.n	800b644 <_dtoa_r+0x514>
 800b524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	d100      	bne.n	800b52c <_dtoa_r+0x3fc>
 800b52a:	e08b      	b.n	800b644 <_dtoa_r+0x514>
 800b52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dd37      	ble.n	800b5a2 <_dtoa_r+0x472>
 800b532:	9b04      	ldr	r3, [sp, #16]
 800b534:	2200      	movs	r2, #0
 800b536:	3b01      	subs	r3, #1
 800b538:	930c      	str	r3, [sp, #48]	@ 0x30
 800b53a:	0030      	movs	r0, r6
 800b53c:	4bc1      	ldr	r3, [pc, #772]	@ (800b844 <_dtoa_r+0x714>)
 800b53e:	0039      	movs	r1, r7
 800b540:	f7f6 fdb8 	bl	80020b4 <__aeabi_dmul>
 800b544:	900a      	str	r0, [sp, #40]	@ 0x28
 800b546:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b54a:	3401      	adds	r4, #1
 800b54c:	0020      	movs	r0, r4
 800b54e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b550:	f7f7 fcfe 	bl	8002f50 <__aeabi_i2d>
 800b554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b558:	f7f6 fdac 	bl	80020b4 <__aeabi_dmul>
 800b55c:	4bba      	ldr	r3, [pc, #744]	@ (800b848 <_dtoa_r+0x718>)
 800b55e:	2200      	movs	r2, #0
 800b560:	f7f5 fda8 	bl	80010b4 <__aeabi_dadd>
 800b564:	4bb9      	ldr	r3, [pc, #740]	@ (800b84c <_dtoa_r+0x71c>)
 800b566:	0006      	movs	r6, r0
 800b568:	18cf      	adds	r7, r1, r3
 800b56a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d16d      	bne.n	800b64c <_dtoa_r+0x51c>
 800b570:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b572:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b574:	2200      	movs	r2, #0
 800b576:	4bb6      	ldr	r3, [pc, #728]	@ (800b850 <_dtoa_r+0x720>)
 800b578:	f7f7 f882 	bl	8002680 <__aeabi_dsub>
 800b57c:	0032      	movs	r2, r6
 800b57e:	003b      	movs	r3, r7
 800b580:	0004      	movs	r4, r0
 800b582:	000d      	movs	r5, r1
 800b584:	f7f4 ff78 	bl	8000478 <__aeabi_dcmpgt>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d000      	beq.n	800b58e <_dtoa_r+0x45e>
 800b58c:	e2b6      	b.n	800bafc <_dtoa_r+0x9cc>
 800b58e:	2180      	movs	r1, #128	@ 0x80
 800b590:	0609      	lsls	r1, r1, #24
 800b592:	187b      	adds	r3, r7, r1
 800b594:	0032      	movs	r2, r6
 800b596:	0020      	movs	r0, r4
 800b598:	0029      	movs	r1, r5
 800b59a:	f7f4 ff59 	bl	8000450 <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d128      	bne.n	800b5f4 <_dtoa_r+0x4c4>
 800b5a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5a4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b5a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b5aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da00      	bge.n	800b5b2 <_dtoa_r+0x482>
 800b5b0:	e174      	b.n	800b89c <_dtoa_r+0x76c>
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	2a0e      	cmp	r2, #14
 800b5b6:	dd00      	ble.n	800b5ba <_dtoa_r+0x48a>
 800b5b8:	e170      	b.n	800b89c <_dtoa_r+0x76c>
 800b5ba:	4b9f      	ldr	r3, [pc, #636]	@ (800b838 <_dtoa_r+0x708>)
 800b5bc:	00d2      	lsls	r2, r2, #3
 800b5be:	189b      	adds	r3, r3, r2
 800b5c0:	685c      	ldr	r4, [r3, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	9306      	str	r3, [sp, #24]
 800b5c6:	9407      	str	r4, [sp, #28]
 800b5c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	db00      	blt.n	800b5d0 <_dtoa_r+0x4a0>
 800b5ce:	e0e7      	b.n	800b7a0 <_dtoa_r+0x670>
 800b5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dd00      	ble.n	800b5d8 <_dtoa_r+0x4a8>
 800b5d6:	e0e3      	b.n	800b7a0 <_dtoa_r+0x670>
 800b5d8:	d10c      	bne.n	800b5f4 <_dtoa_r+0x4c4>
 800b5da:	9806      	ldr	r0, [sp, #24]
 800b5dc:	9907      	ldr	r1, [sp, #28]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4b9b      	ldr	r3, [pc, #620]	@ (800b850 <_dtoa_r+0x720>)
 800b5e2:	f7f6 fd67 	bl	80020b4 <__aeabi_dmul>
 800b5e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5ea:	f7f4 ff4f 	bl	800048c <__aeabi_dcmpge>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d100      	bne.n	800b5f4 <_dtoa_r+0x4c4>
 800b5f2:	e286      	b.n	800bb02 <_dtoa_r+0x9d2>
 800b5f4:	2600      	movs	r6, #0
 800b5f6:	0037      	movs	r7, r6
 800b5f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5fa:	9c08      	ldr	r4, [sp, #32]
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b600:	9704      	str	r7, [sp, #16]
 800b602:	2700      	movs	r7, #0
 800b604:	0031      	movs	r1, r6
 800b606:	9803      	ldr	r0, [sp, #12]
 800b608:	f000 fccc 	bl	800bfa4 <_Bfree>
 800b60c:	9b04      	ldr	r3, [sp, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d100      	bne.n	800b614 <_dtoa_r+0x4e4>
 800b612:	e0bb      	b.n	800b78c <_dtoa_r+0x65c>
 800b614:	2f00      	cmp	r7, #0
 800b616:	d005      	beq.n	800b624 <_dtoa_r+0x4f4>
 800b618:	429f      	cmp	r7, r3
 800b61a:	d003      	beq.n	800b624 <_dtoa_r+0x4f4>
 800b61c:	0039      	movs	r1, r7
 800b61e:	9803      	ldr	r0, [sp, #12]
 800b620:	f000 fcc0 	bl	800bfa4 <_Bfree>
 800b624:	9904      	ldr	r1, [sp, #16]
 800b626:	9803      	ldr	r0, [sp, #12]
 800b628:	f000 fcbc 	bl	800bfa4 <_Bfree>
 800b62c:	e0ae      	b.n	800b78c <_dtoa_r+0x65c>
 800b62e:	423d      	tst	r5, r7
 800b630:	d005      	beq.n	800b63e <_dtoa_r+0x50e>
 800b632:	6832      	ldr	r2, [r6, #0]
 800b634:	6873      	ldr	r3, [r6, #4]
 800b636:	f7f6 fd3d 	bl	80020b4 <__aeabi_dmul>
 800b63a:	003b      	movs	r3, r7
 800b63c:	3401      	adds	r4, #1
 800b63e:	106d      	asrs	r5, r5, #1
 800b640:	3608      	adds	r6, #8
 800b642:	e75b      	b.n	800b4fc <_dtoa_r+0x3cc>
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	930c      	str	r3, [sp, #48]	@ 0x30
 800b648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64a:	e77f      	b.n	800b54c <_dtoa_r+0x41c>
 800b64c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b64e:	4b7a      	ldr	r3, [pc, #488]	@ (800b838 <_dtoa_r+0x708>)
 800b650:	3a01      	subs	r2, #1
 800b652:	00d2      	lsls	r2, r2, #3
 800b654:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b656:	189b      	adds	r3, r3, r2
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	d04c      	beq.n	800b6fa <_dtoa_r+0x5ca>
 800b660:	2000      	movs	r0, #0
 800b662:	497c      	ldr	r1, [pc, #496]	@ (800b854 <_dtoa_r+0x724>)
 800b664:	f7f6 f8ec 	bl	8001840 <__aeabi_ddiv>
 800b668:	0032      	movs	r2, r6
 800b66a:	003b      	movs	r3, r7
 800b66c:	f7f7 f808 	bl	8002680 <__aeabi_dsub>
 800b670:	9a08      	ldr	r2, [sp, #32]
 800b672:	0006      	movs	r6, r0
 800b674:	4694      	mov	ip, r2
 800b676:	000f      	movs	r7, r1
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b67c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b67e:	4463      	add	r3, ip
 800b680:	9311      	str	r3, [sp, #68]	@ 0x44
 800b682:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b686:	f7f7 fc27 	bl	8002ed8 <__aeabi_d2iz>
 800b68a:	0005      	movs	r5, r0
 800b68c:	f7f7 fc60 	bl	8002f50 <__aeabi_i2d>
 800b690:	0002      	movs	r2, r0
 800b692:	000b      	movs	r3, r1
 800b694:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b696:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b698:	f7f6 fff2 	bl	8002680 <__aeabi_dsub>
 800b69c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b69e:	3530      	adds	r5, #48	@ 0x30
 800b6a0:	1c5c      	adds	r4, r3, #1
 800b6a2:	701d      	strb	r5, [r3, #0]
 800b6a4:	0032      	movs	r2, r6
 800b6a6:	003b      	movs	r3, r7
 800b6a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6ac:	f7f4 fed0 	bl	8000450 <__aeabi_dcmplt>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d16b      	bne.n	800b78c <_dtoa_r+0x65c>
 800b6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	4961      	ldr	r1, [pc, #388]	@ (800b840 <_dtoa_r+0x710>)
 800b6bc:	f7f6 ffe0 	bl	8002680 <__aeabi_dsub>
 800b6c0:	0032      	movs	r2, r6
 800b6c2:	003b      	movs	r3, r7
 800b6c4:	f7f4 fec4 	bl	8000450 <__aeabi_dcmplt>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d000      	beq.n	800b6ce <_dtoa_r+0x59e>
 800b6cc:	e0c6      	b.n	800b85c <_dtoa_r+0x72c>
 800b6ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	d100      	bne.n	800b6d6 <_dtoa_r+0x5a6>
 800b6d4:	e765      	b.n	800b5a2 <_dtoa_r+0x472>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	0030      	movs	r0, r6
 800b6da:	0039      	movs	r1, r7
 800b6dc:	4b59      	ldr	r3, [pc, #356]	@ (800b844 <_dtoa_r+0x714>)
 800b6de:	f7f6 fce9 	bl	80020b4 <__aeabi_dmul>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	0006      	movs	r6, r0
 800b6e6:	000f      	movs	r7, r1
 800b6e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b6ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6ec:	4b55      	ldr	r3, [pc, #340]	@ (800b844 <_dtoa_r+0x714>)
 800b6ee:	f7f6 fce1 	bl	80020b4 <__aeabi_dmul>
 800b6f2:	9416      	str	r4, [sp, #88]	@ 0x58
 800b6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6f8:	e7c3      	b.n	800b682 <_dtoa_r+0x552>
 800b6fa:	0030      	movs	r0, r6
 800b6fc:	0039      	movs	r1, r7
 800b6fe:	f7f6 fcd9 	bl	80020b4 <__aeabi_dmul>
 800b702:	9d08      	ldr	r5, [sp, #32]
 800b704:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b706:	002b      	movs	r3, r5
 800b708:	4694      	mov	ip, r2
 800b70a:	9016      	str	r0, [sp, #88]	@ 0x58
 800b70c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b70e:	4463      	add	r3, ip
 800b710:	9319      	str	r3, [sp, #100]	@ 0x64
 800b712:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b716:	f7f7 fbdf 	bl	8002ed8 <__aeabi_d2iz>
 800b71a:	0004      	movs	r4, r0
 800b71c:	f7f7 fc18 	bl	8002f50 <__aeabi_i2d>
 800b720:	000b      	movs	r3, r1
 800b722:	0002      	movs	r2, r0
 800b724:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b726:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b728:	f7f6 ffaa 	bl	8002680 <__aeabi_dsub>
 800b72c:	3430      	adds	r4, #48	@ 0x30
 800b72e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b730:	702c      	strb	r4, [r5, #0]
 800b732:	3501      	adds	r5, #1
 800b734:	0006      	movs	r6, r0
 800b736:	000f      	movs	r7, r1
 800b738:	42ab      	cmp	r3, r5
 800b73a:	d12a      	bne.n	800b792 <_dtoa_r+0x662>
 800b73c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b73e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b740:	9b08      	ldr	r3, [sp, #32]
 800b742:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b744:	469c      	mov	ip, r3
 800b746:	2200      	movs	r2, #0
 800b748:	4b42      	ldr	r3, [pc, #264]	@ (800b854 <_dtoa_r+0x724>)
 800b74a:	4464      	add	r4, ip
 800b74c:	f7f5 fcb2 	bl	80010b4 <__aeabi_dadd>
 800b750:	0002      	movs	r2, r0
 800b752:	000b      	movs	r3, r1
 800b754:	0030      	movs	r0, r6
 800b756:	0039      	movs	r1, r7
 800b758:	f7f4 fe8e 	bl	8000478 <__aeabi_dcmpgt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d000      	beq.n	800b762 <_dtoa_r+0x632>
 800b760:	e07c      	b.n	800b85c <_dtoa_r+0x72c>
 800b762:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b764:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b766:	2000      	movs	r0, #0
 800b768:	493a      	ldr	r1, [pc, #232]	@ (800b854 <_dtoa_r+0x724>)
 800b76a:	f7f6 ff89 	bl	8002680 <__aeabi_dsub>
 800b76e:	0002      	movs	r2, r0
 800b770:	000b      	movs	r3, r1
 800b772:	0030      	movs	r0, r6
 800b774:	0039      	movs	r1, r7
 800b776:	f7f4 fe6b 	bl	8000450 <__aeabi_dcmplt>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d100      	bne.n	800b780 <_dtoa_r+0x650>
 800b77e:	e710      	b.n	800b5a2 <_dtoa_r+0x472>
 800b780:	0023      	movs	r3, r4
 800b782:	3c01      	subs	r4, #1
 800b784:	7822      	ldrb	r2, [r4, #0]
 800b786:	2a30      	cmp	r2, #48	@ 0x30
 800b788:	d0fa      	beq.n	800b780 <_dtoa_r+0x650>
 800b78a:	001c      	movs	r4, r3
 800b78c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	e042      	b.n	800b818 <_dtoa_r+0x6e8>
 800b792:	2200      	movs	r2, #0
 800b794:	4b2b      	ldr	r3, [pc, #172]	@ (800b844 <_dtoa_r+0x714>)
 800b796:	f7f6 fc8d 	bl	80020b4 <__aeabi_dmul>
 800b79a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b79c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b79e:	e7b8      	b.n	800b712 <_dtoa_r+0x5e2>
 800b7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a2:	9d08      	ldr	r5, [sp, #32]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	195b      	adds	r3, r3, r5
 800b7a8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b7ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ae:	9a06      	ldr	r2, [sp, #24]
 800b7b0:	9b07      	ldr	r3, [sp, #28]
 800b7b2:	0030      	movs	r0, r6
 800b7b4:	0039      	movs	r1, r7
 800b7b6:	f7f6 f843 	bl	8001840 <__aeabi_ddiv>
 800b7ba:	f7f7 fb8d 	bl	8002ed8 <__aeabi_d2iz>
 800b7be:	9009      	str	r0, [sp, #36]	@ 0x24
 800b7c0:	f7f7 fbc6 	bl	8002f50 <__aeabi_i2d>
 800b7c4:	9a06      	ldr	r2, [sp, #24]
 800b7c6:	9b07      	ldr	r3, [sp, #28]
 800b7c8:	f7f6 fc74 	bl	80020b4 <__aeabi_dmul>
 800b7cc:	0002      	movs	r2, r0
 800b7ce:	000b      	movs	r3, r1
 800b7d0:	0030      	movs	r0, r6
 800b7d2:	0039      	movs	r1, r7
 800b7d4:	f7f6 ff54 	bl	8002680 <__aeabi_dsub>
 800b7d8:	002b      	movs	r3, r5
 800b7da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7dc:	3501      	adds	r5, #1
 800b7de:	3230      	adds	r2, #48	@ 0x30
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7e4:	002c      	movs	r4, r5
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d14b      	bne.n	800b882 <_dtoa_r+0x752>
 800b7ea:	0002      	movs	r2, r0
 800b7ec:	000b      	movs	r3, r1
 800b7ee:	f7f5 fc61 	bl	80010b4 <__aeabi_dadd>
 800b7f2:	9a06      	ldr	r2, [sp, #24]
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	0006      	movs	r6, r0
 800b7f8:	000f      	movs	r7, r1
 800b7fa:	f7f4 fe3d 	bl	8000478 <__aeabi_dcmpgt>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d12a      	bne.n	800b858 <_dtoa_r+0x728>
 800b802:	9a06      	ldr	r2, [sp, #24]
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	0030      	movs	r0, r6
 800b808:	0039      	movs	r1, r7
 800b80a:	f7f4 fe1b 	bl	8000444 <__aeabi_dcmpeq>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d002      	beq.n	800b818 <_dtoa_r+0x6e8>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	07dd      	lsls	r5, r3, #31
 800b816:	d41f      	bmi.n	800b858 <_dtoa_r+0x728>
 800b818:	9905      	ldr	r1, [sp, #20]
 800b81a:	9803      	ldr	r0, [sp, #12]
 800b81c:	f000 fbc2 	bl	800bfa4 <_Bfree>
 800b820:	2300      	movs	r3, #0
 800b822:	7023      	strb	r3, [r4, #0]
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b828:	3301      	adds	r3, #1
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d100      	bne.n	800b834 <_dtoa_r+0x704>
 800b832:	e4c7      	b.n	800b1c4 <_dtoa_r+0x94>
 800b834:	601c      	str	r4, [r3, #0]
 800b836:	e4c5      	b.n	800b1c4 <_dtoa_r+0x94>
 800b838:	0800d6b0 	.word	0x0800d6b0
 800b83c:	0800d688 	.word	0x0800d688
 800b840:	3ff00000 	.word	0x3ff00000
 800b844:	40240000 	.word	0x40240000
 800b848:	401c0000 	.word	0x401c0000
 800b84c:	fcc00000 	.word	0xfcc00000
 800b850:	40140000 	.word	0x40140000
 800b854:	3fe00000 	.word	0x3fe00000
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b85c:	0023      	movs	r3, r4
 800b85e:	001c      	movs	r4, r3
 800b860:	3b01      	subs	r3, #1
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	2a39      	cmp	r2, #57	@ 0x39
 800b866:	d108      	bne.n	800b87a <_dtoa_r+0x74a>
 800b868:	9a08      	ldr	r2, [sp, #32]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d1f7      	bne.n	800b85e <_dtoa_r+0x72e>
 800b86e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b870:	9908      	ldr	r1, [sp, #32]
 800b872:	3201      	adds	r2, #1
 800b874:	920c      	str	r2, [sp, #48]	@ 0x30
 800b876:	2230      	movs	r2, #48	@ 0x30
 800b878:	700a      	strb	r2, [r1, #0]
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	3201      	adds	r2, #1
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e784      	b.n	800b78c <_dtoa_r+0x65c>
 800b882:	2200      	movs	r2, #0
 800b884:	4bc6      	ldr	r3, [pc, #792]	@ (800bba0 <_dtoa_r+0xa70>)
 800b886:	f7f6 fc15 	bl	80020b4 <__aeabi_dmul>
 800b88a:	2200      	movs	r2, #0
 800b88c:	2300      	movs	r3, #0
 800b88e:	0006      	movs	r6, r0
 800b890:	000f      	movs	r7, r1
 800b892:	f7f4 fdd7 	bl	8000444 <__aeabi_dcmpeq>
 800b896:	2800      	cmp	r0, #0
 800b898:	d089      	beq.n	800b7ae <_dtoa_r+0x67e>
 800b89a:	e7bd      	b.n	800b818 <_dtoa_r+0x6e8>
 800b89c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b89e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b8a0:	9c06      	ldr	r4, [sp, #24]
 800b8a2:	2f00      	cmp	r7, #0
 800b8a4:	d014      	beq.n	800b8d0 <_dtoa_r+0x7a0>
 800b8a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b8a8:	2a01      	cmp	r2, #1
 800b8aa:	dd00      	ble.n	800b8ae <_dtoa_r+0x77e>
 800b8ac:	e0e4      	b.n	800ba78 <_dtoa_r+0x948>
 800b8ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	d100      	bne.n	800b8b6 <_dtoa_r+0x786>
 800b8b4:	e0da      	b.n	800ba6c <_dtoa_r+0x93c>
 800b8b6:	4abb      	ldr	r2, [pc, #748]	@ (800bba4 <_dtoa_r+0xa74>)
 800b8b8:	189b      	adds	r3, r3, r2
 800b8ba:	9a06      	ldr	r2, [sp, #24]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	18d2      	adds	r2, r2, r3
 800b8c0:	9206      	str	r2, [sp, #24]
 800b8c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8c4:	9803      	ldr	r0, [sp, #12]
 800b8c6:	18d3      	adds	r3, r2, r3
 800b8c8:	930d      	str	r3, [sp, #52]	@ 0x34
 800b8ca:	f000 fc23 	bl	800c114 <__i2b>
 800b8ce:	0007      	movs	r7, r0
 800b8d0:	2c00      	cmp	r4, #0
 800b8d2:	d00e      	beq.n	800b8f2 <_dtoa_r+0x7c2>
 800b8d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd0b      	ble.n	800b8f2 <_dtoa_r+0x7c2>
 800b8da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8dc:	0023      	movs	r3, r4
 800b8de:	4294      	cmp	r4, r2
 800b8e0:	dd00      	ble.n	800b8e4 <_dtoa_r+0x7b4>
 800b8e2:	0013      	movs	r3, r2
 800b8e4:	9a06      	ldr	r2, [sp, #24]
 800b8e6:	1ae4      	subs	r4, r4, r3
 800b8e8:	1ad2      	subs	r2, r2, r3
 800b8ea:	9206      	str	r2, [sp, #24]
 800b8ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	930d      	str	r3, [sp, #52]	@ 0x34
 800b8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d021      	beq.n	800b93c <_dtoa_r+0x80c>
 800b8f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d100      	bne.n	800b900 <_dtoa_r+0x7d0>
 800b8fe:	e0d3      	b.n	800baa8 <_dtoa_r+0x978>
 800b900:	9e05      	ldr	r6, [sp, #20]
 800b902:	2d00      	cmp	r5, #0
 800b904:	d014      	beq.n	800b930 <_dtoa_r+0x800>
 800b906:	0039      	movs	r1, r7
 800b908:	002a      	movs	r2, r5
 800b90a:	9803      	ldr	r0, [sp, #12]
 800b90c:	f000 fcc4 	bl	800c298 <__pow5mult>
 800b910:	9a05      	ldr	r2, [sp, #20]
 800b912:	0001      	movs	r1, r0
 800b914:	0007      	movs	r7, r0
 800b916:	9803      	ldr	r0, [sp, #12]
 800b918:	f000 fc14 	bl	800c144 <__multiply>
 800b91c:	0006      	movs	r6, r0
 800b91e:	9905      	ldr	r1, [sp, #20]
 800b920:	9803      	ldr	r0, [sp, #12]
 800b922:	f000 fb3f 	bl	800bfa4 <_Bfree>
 800b926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b928:	9605      	str	r6, [sp, #20]
 800b92a:	1b5b      	subs	r3, r3, r5
 800b92c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b92e:	d005      	beq.n	800b93c <_dtoa_r+0x80c>
 800b930:	0031      	movs	r1, r6
 800b932:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b934:	9803      	ldr	r0, [sp, #12]
 800b936:	f000 fcaf 	bl	800c298 <__pow5mult>
 800b93a:	9005      	str	r0, [sp, #20]
 800b93c:	2101      	movs	r1, #1
 800b93e:	9803      	ldr	r0, [sp, #12]
 800b940:	f000 fbe8 	bl	800c114 <__i2b>
 800b944:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b946:	0006      	movs	r6, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d100      	bne.n	800b94e <_dtoa_r+0x81e>
 800b94c:	e1bc      	b.n	800bcc8 <_dtoa_r+0xb98>
 800b94e:	001a      	movs	r2, r3
 800b950:	0001      	movs	r1, r0
 800b952:	9803      	ldr	r0, [sp, #12]
 800b954:	f000 fca0 	bl	800c298 <__pow5mult>
 800b958:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b95a:	0006      	movs	r6, r0
 800b95c:	2500      	movs	r5, #0
 800b95e:	2b01      	cmp	r3, #1
 800b960:	dc16      	bgt.n	800b990 <_dtoa_r+0x860>
 800b962:	2500      	movs	r5, #0
 800b964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b966:	42ab      	cmp	r3, r5
 800b968:	d10e      	bne.n	800b988 <_dtoa_r+0x858>
 800b96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b96c:	031b      	lsls	r3, r3, #12
 800b96e:	42ab      	cmp	r3, r5
 800b970:	d10a      	bne.n	800b988 <_dtoa_r+0x858>
 800b972:	4b8d      	ldr	r3, [pc, #564]	@ (800bba8 <_dtoa_r+0xa78>)
 800b974:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b976:	4213      	tst	r3, r2
 800b978:	d006      	beq.n	800b988 <_dtoa_r+0x858>
 800b97a:	9b06      	ldr	r3, [sp, #24]
 800b97c:	3501      	adds	r5, #1
 800b97e:	3301      	adds	r3, #1
 800b980:	9306      	str	r3, [sp, #24]
 800b982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b984:	3301      	adds	r3, #1
 800b986:	930d      	str	r3, [sp, #52]	@ 0x34
 800b988:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b98a:	2001      	movs	r0, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d008      	beq.n	800b9a2 <_dtoa_r+0x872>
 800b990:	6933      	ldr	r3, [r6, #16]
 800b992:	3303      	adds	r3, #3
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	18f3      	adds	r3, r6, r3
 800b998:	6858      	ldr	r0, [r3, #4]
 800b99a:	f000 fb6b 	bl	800c074 <__hi0bits>
 800b99e:	2320      	movs	r3, #32
 800b9a0:	1a18      	subs	r0, r3, r0
 800b9a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9a4:	1818      	adds	r0, r3, r0
 800b9a6:	0002      	movs	r2, r0
 800b9a8:	231f      	movs	r3, #31
 800b9aa:	401a      	ands	r2, r3
 800b9ac:	4218      	tst	r0, r3
 800b9ae:	d100      	bne.n	800b9b2 <_dtoa_r+0x882>
 800b9b0:	e081      	b.n	800bab6 <_dtoa_r+0x986>
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	2b04      	cmp	r3, #4
 800b9b8:	dd79      	ble.n	800baae <_dtoa_r+0x97e>
 800b9ba:	231c      	movs	r3, #28
 800b9bc:	1a9b      	subs	r3, r3, r2
 800b9be:	9a06      	ldr	r2, [sp, #24]
 800b9c0:	18e4      	adds	r4, r4, r3
 800b9c2:	18d2      	adds	r2, r2, r3
 800b9c4:	9206      	str	r2, [sp, #24]
 800b9c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b9c8:	18d3      	adds	r3, r2, r3
 800b9ca:	930d      	str	r3, [sp, #52]	@ 0x34
 800b9cc:	9b06      	ldr	r3, [sp, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd05      	ble.n	800b9de <_dtoa_r+0x8ae>
 800b9d2:	001a      	movs	r2, r3
 800b9d4:	9905      	ldr	r1, [sp, #20]
 800b9d6:	9803      	ldr	r0, [sp, #12]
 800b9d8:	f000 fcba 	bl	800c350 <__lshift>
 800b9dc:	9005      	str	r0, [sp, #20]
 800b9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dd05      	ble.n	800b9f0 <_dtoa_r+0x8c0>
 800b9e4:	0031      	movs	r1, r6
 800b9e6:	001a      	movs	r2, r3
 800b9e8:	9803      	ldr	r0, [sp, #12]
 800b9ea:	f000 fcb1 	bl	800c350 <__lshift>
 800b9ee:	0006      	movs	r6, r0
 800b9f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d061      	beq.n	800baba <_dtoa_r+0x98a>
 800b9f6:	0031      	movs	r1, r6
 800b9f8:	9805      	ldr	r0, [sp, #20]
 800b9fa:	f000 fd15 	bl	800c428 <__mcmp>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	da5b      	bge.n	800baba <_dtoa_r+0x98a>
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	220a      	movs	r2, #10
 800ba06:	3b01      	subs	r3, #1
 800ba08:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba0a:	9905      	ldr	r1, [sp, #20]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9803      	ldr	r0, [sp, #12]
 800ba10:	f000 faec 	bl	800bfec <__multadd>
 800ba14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba16:	9005      	str	r0, [sp, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d100      	bne.n	800ba1e <_dtoa_r+0x8ee>
 800ba1c:	e15b      	b.n	800bcd6 <_dtoa_r+0xba6>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	0039      	movs	r1, r7
 800ba22:	220a      	movs	r2, #10
 800ba24:	9803      	ldr	r0, [sp, #12]
 800ba26:	f000 fae1 	bl	800bfec <__multadd>
 800ba2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba2c:	0007      	movs	r7, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	dc4d      	bgt.n	800bace <_dtoa_r+0x99e>
 800ba32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	dd46      	ble.n	800bac6 <_dtoa_r+0x996>
 800ba38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d000      	beq.n	800ba40 <_dtoa_r+0x910>
 800ba3e:	e5db      	b.n	800b5f8 <_dtoa_r+0x4c8>
 800ba40:	0031      	movs	r1, r6
 800ba42:	2205      	movs	r2, #5
 800ba44:	9803      	ldr	r0, [sp, #12]
 800ba46:	f000 fad1 	bl	800bfec <__multadd>
 800ba4a:	0006      	movs	r6, r0
 800ba4c:	0001      	movs	r1, r0
 800ba4e:	9805      	ldr	r0, [sp, #20]
 800ba50:	f000 fcea 	bl	800c428 <__mcmp>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	dc00      	bgt.n	800ba5a <_dtoa_r+0x92a>
 800ba58:	e5ce      	b.n	800b5f8 <_dtoa_r+0x4c8>
 800ba5a:	9b08      	ldr	r3, [sp, #32]
 800ba5c:	9a08      	ldr	r2, [sp, #32]
 800ba5e:	1c5c      	adds	r4, r3, #1
 800ba60:	2331      	movs	r3, #49	@ 0x31
 800ba62:	7013      	strb	r3, [r2, #0]
 800ba64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba66:	3301      	adds	r3, #1
 800ba68:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba6a:	e5c9      	b.n	800b600 <_dtoa_r+0x4d0>
 800ba6c:	2336      	movs	r3, #54	@ 0x36
 800ba6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba70:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	9c06      	ldr	r4, [sp, #24]
 800ba76:	e720      	b.n	800b8ba <_dtoa_r+0x78a>
 800ba78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7a:	1e5d      	subs	r5, r3, #1
 800ba7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba7e:	42ab      	cmp	r3, r5
 800ba80:	db08      	blt.n	800ba94 <_dtoa_r+0x964>
 800ba82:	1b5d      	subs	r5, r3, r5
 800ba84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	daf4      	bge.n	800ba74 <_dtoa_r+0x944>
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba8e:	1a9c      	subs	r4, r3, r2
 800ba90:	2300      	movs	r3, #0
 800ba92:	e712      	b.n	800b8ba <_dtoa_r+0x78a>
 800ba94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba98:	1aeb      	subs	r3, r5, r3
 800ba9a:	18d3      	adds	r3, r2, r3
 800ba9c:	9314      	str	r3, [sp, #80]	@ 0x50
 800ba9e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800baa0:	9c06      	ldr	r4, [sp, #24]
 800baa2:	2500      	movs	r5, #0
 800baa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa6:	e708      	b.n	800b8ba <_dtoa_r+0x78a>
 800baa8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800baaa:	9905      	ldr	r1, [sp, #20]
 800baac:	e742      	b.n	800b934 <_dtoa_r+0x804>
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d08c      	beq.n	800b9cc <_dtoa_r+0x89c>
 800bab2:	331c      	adds	r3, #28
 800bab4:	e783      	b.n	800b9be <_dtoa_r+0x88e>
 800bab6:	0013      	movs	r3, r2
 800bab8:	e7fb      	b.n	800bab2 <_dtoa_r+0x982>
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	930c      	str	r3, [sp, #48]	@ 0x30
 800babe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	ddb5      	ble.n	800ba32 <_dtoa_r+0x902>
 800bac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d100      	bne.n	800bace <_dtoa_r+0x99e>
 800bacc:	e107      	b.n	800bcde <_dtoa_r+0xbae>
 800bace:	2c00      	cmp	r4, #0
 800bad0:	dd05      	ble.n	800bade <_dtoa_r+0x9ae>
 800bad2:	0039      	movs	r1, r7
 800bad4:	0022      	movs	r2, r4
 800bad6:	9803      	ldr	r0, [sp, #12]
 800bad8:	f000 fc3a 	bl	800c350 <__lshift>
 800badc:	0007      	movs	r7, r0
 800bade:	9704      	str	r7, [sp, #16]
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	d020      	beq.n	800bb26 <_dtoa_r+0x9f6>
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	9803      	ldr	r0, [sp, #12]
 800bae8:	f000 fa18 	bl	800bf1c <_Balloc>
 800baec:	1e04      	subs	r4, r0, #0
 800baee:	d10c      	bne.n	800bb0a <_dtoa_r+0x9da>
 800baf0:	0022      	movs	r2, r4
 800baf2:	4b2e      	ldr	r3, [pc, #184]	@ (800bbac <_dtoa_r+0xa7c>)
 800baf4:	482e      	ldr	r0, [pc, #184]	@ (800bbb0 <_dtoa_r+0xa80>)
 800baf6:	492f      	ldr	r1, [pc, #188]	@ (800bbb4 <_dtoa_r+0xa84>)
 800baf8:	f7ff fb2f 	bl	800b15a <_dtoa_r+0x2a>
 800bafc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bafe:	0037      	movs	r7, r6
 800bb00:	e7ab      	b.n	800ba5a <_dtoa_r+0x92a>
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bb06:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb08:	e7f9      	b.n	800bafe <_dtoa_r+0x9ce>
 800bb0a:	0039      	movs	r1, r7
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	310c      	adds	r1, #12
 800bb10:	3202      	adds	r2, #2
 800bb12:	0092      	lsls	r2, r2, #2
 800bb14:	300c      	adds	r0, #12
 800bb16:	f000 ffd1 	bl	800cabc <memcpy>
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	0021      	movs	r1, r4
 800bb1e:	9803      	ldr	r0, [sp, #12]
 800bb20:	f000 fc16 	bl	800c350 <__lshift>
 800bb24:	9004      	str	r0, [sp, #16]
 800bb26:	9b08      	ldr	r3, [sp, #32]
 800bb28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb2a:	9306      	str	r3, [sp, #24]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	189b      	adds	r3, r3, r2
 800bb30:	2201      	movs	r2, #1
 800bb32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb36:	4013      	ands	r3, r2
 800bb38:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb3a:	0031      	movs	r1, r6
 800bb3c:	9805      	ldr	r0, [sp, #20]
 800bb3e:	f7ff fa71 	bl	800b024 <quorem>
 800bb42:	0039      	movs	r1, r7
 800bb44:	0005      	movs	r5, r0
 800bb46:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb48:	9805      	ldr	r0, [sp, #20]
 800bb4a:	f000 fc6d 	bl	800c428 <__mcmp>
 800bb4e:	9a04      	ldr	r2, [sp, #16]
 800bb50:	900d      	str	r0, [sp, #52]	@ 0x34
 800bb52:	0031      	movs	r1, r6
 800bb54:	9803      	ldr	r0, [sp, #12]
 800bb56:	f000 fc83 	bl	800c460 <__mdiff>
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	68c3      	ldr	r3, [r0, #12]
 800bb5e:	0004      	movs	r4, r0
 800bb60:	3530      	adds	r5, #48	@ 0x30
 800bb62:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <_dtoa_r+0xa42>
 800bb68:	0001      	movs	r1, r0
 800bb6a:	9805      	ldr	r0, [sp, #20]
 800bb6c:	f000 fc5c 	bl	800c428 <__mcmp>
 800bb70:	9009      	str	r0, [sp, #36]	@ 0x24
 800bb72:	0021      	movs	r1, r4
 800bb74:	9803      	ldr	r0, [sp, #12]
 800bb76:	f000 fa15 	bl	800bfa4 <_Bfree>
 800bb7a:	9b06      	ldr	r3, [sp, #24]
 800bb7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bb7e:	1c5c      	adds	r4, r3, #1
 800bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb82:	4313      	orrs	r3, r2
 800bb84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb86:	4313      	orrs	r3, r2
 800bb88:	d116      	bne.n	800bbb8 <_dtoa_r+0xa88>
 800bb8a:	2d39      	cmp	r5, #57	@ 0x39
 800bb8c:	d02f      	beq.n	800bbee <_dtoa_r+0xabe>
 800bb8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dd01      	ble.n	800bb98 <_dtoa_r+0xa68>
 800bb94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bb96:	3531      	adds	r5, #49	@ 0x31
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	701d      	strb	r5, [r3, #0]
 800bb9c:	e532      	b.n	800b604 <_dtoa_r+0x4d4>
 800bb9e:	46c0      	nop			@ (mov r8, r8)
 800bba0:	40240000 	.word	0x40240000
 800bba4:	00000433 	.word	0x00000433
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	0800d5b4 	.word	0x0800d5b4
 800bbb0:	0800d55c 	.word	0x0800d55c
 800bbb4:	000002ef 	.word	0x000002ef
 800bbb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	db04      	blt.n	800bbc8 <_dtoa_r+0xa98>
 800bbbe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	d11e      	bne.n	800bc06 <_dtoa_r+0xad6>
 800bbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dde4      	ble.n	800bb98 <_dtoa_r+0xa68>
 800bbce:	9905      	ldr	r1, [sp, #20]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	9803      	ldr	r0, [sp, #12]
 800bbd4:	f000 fbbc 	bl	800c350 <__lshift>
 800bbd8:	0031      	movs	r1, r6
 800bbda:	9005      	str	r0, [sp, #20]
 800bbdc:	f000 fc24 	bl	800c428 <__mcmp>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	dc02      	bgt.n	800bbea <_dtoa_r+0xaba>
 800bbe4:	d1d8      	bne.n	800bb98 <_dtoa_r+0xa68>
 800bbe6:	07eb      	lsls	r3, r5, #31
 800bbe8:	d5d6      	bpl.n	800bb98 <_dtoa_r+0xa68>
 800bbea:	2d39      	cmp	r5, #57	@ 0x39
 800bbec:	d1d2      	bne.n	800bb94 <_dtoa_r+0xa64>
 800bbee:	2339      	movs	r3, #57	@ 0x39
 800bbf0:	9a06      	ldr	r2, [sp, #24]
 800bbf2:	7013      	strb	r3, [r2, #0]
 800bbf4:	0023      	movs	r3, r4
 800bbf6:	001c      	movs	r4, r3
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	781a      	ldrb	r2, [r3, #0]
 800bbfc:	2a39      	cmp	r2, #57	@ 0x39
 800bbfe:	d050      	beq.n	800bca2 <_dtoa_r+0xb72>
 800bc00:	3201      	adds	r2, #1
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e4fe      	b.n	800b604 <_dtoa_r+0x4d4>
 800bc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dd03      	ble.n	800bc14 <_dtoa_r+0xae4>
 800bc0c:	2d39      	cmp	r5, #57	@ 0x39
 800bc0e:	d0ee      	beq.n	800bbee <_dtoa_r+0xabe>
 800bc10:	3501      	adds	r5, #1
 800bc12:	e7c1      	b.n	800bb98 <_dtoa_r+0xa68>
 800bc14:	9b06      	ldr	r3, [sp, #24]
 800bc16:	9a06      	ldr	r2, [sp, #24]
 800bc18:	701d      	strb	r5, [r3, #0]
 800bc1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d02b      	beq.n	800bc78 <_dtoa_r+0xb48>
 800bc20:	2300      	movs	r3, #0
 800bc22:	220a      	movs	r2, #10
 800bc24:	9905      	ldr	r1, [sp, #20]
 800bc26:	9803      	ldr	r0, [sp, #12]
 800bc28:	f000 f9e0 	bl	800bfec <__multadd>
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	9005      	str	r0, [sp, #20]
 800bc30:	429f      	cmp	r7, r3
 800bc32:	d109      	bne.n	800bc48 <_dtoa_r+0xb18>
 800bc34:	0039      	movs	r1, r7
 800bc36:	2300      	movs	r3, #0
 800bc38:	220a      	movs	r2, #10
 800bc3a:	9803      	ldr	r0, [sp, #12]
 800bc3c:	f000 f9d6 	bl	800bfec <__multadd>
 800bc40:	0007      	movs	r7, r0
 800bc42:	9004      	str	r0, [sp, #16]
 800bc44:	9406      	str	r4, [sp, #24]
 800bc46:	e778      	b.n	800bb3a <_dtoa_r+0xa0a>
 800bc48:	0039      	movs	r1, r7
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	220a      	movs	r2, #10
 800bc4e:	9803      	ldr	r0, [sp, #12]
 800bc50:	f000 f9cc 	bl	800bfec <__multadd>
 800bc54:	2300      	movs	r3, #0
 800bc56:	0007      	movs	r7, r0
 800bc58:	220a      	movs	r2, #10
 800bc5a:	9904      	ldr	r1, [sp, #16]
 800bc5c:	9803      	ldr	r0, [sp, #12]
 800bc5e:	f000 f9c5 	bl	800bfec <__multadd>
 800bc62:	9004      	str	r0, [sp, #16]
 800bc64:	e7ee      	b.n	800bc44 <_dtoa_r+0xb14>
 800bc66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc68:	2401      	movs	r4, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dd00      	ble.n	800bc70 <_dtoa_r+0xb40>
 800bc6e:	001c      	movs	r4, r3
 800bc70:	9704      	str	r7, [sp, #16]
 800bc72:	2700      	movs	r7, #0
 800bc74:	9b08      	ldr	r3, [sp, #32]
 800bc76:	191c      	adds	r4, r3, r4
 800bc78:	9905      	ldr	r1, [sp, #20]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	9803      	ldr	r0, [sp, #12]
 800bc7e:	f000 fb67 	bl	800c350 <__lshift>
 800bc82:	0031      	movs	r1, r6
 800bc84:	9005      	str	r0, [sp, #20]
 800bc86:	f000 fbcf 	bl	800c428 <__mcmp>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	dcb2      	bgt.n	800bbf4 <_dtoa_r+0xac4>
 800bc8e:	d101      	bne.n	800bc94 <_dtoa_r+0xb64>
 800bc90:	07ed      	lsls	r5, r5, #31
 800bc92:	d4af      	bmi.n	800bbf4 <_dtoa_r+0xac4>
 800bc94:	0023      	movs	r3, r4
 800bc96:	001c      	movs	r4, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	2a30      	cmp	r2, #48	@ 0x30
 800bc9e:	d0fa      	beq.n	800bc96 <_dtoa_r+0xb66>
 800bca0:	e4b0      	b.n	800b604 <_dtoa_r+0x4d4>
 800bca2:	9a08      	ldr	r2, [sp, #32]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d1a6      	bne.n	800bbf6 <_dtoa_r+0xac6>
 800bca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcaa:	3301      	adds	r3, #1
 800bcac:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcae:	2331      	movs	r3, #49	@ 0x31
 800bcb0:	7013      	strb	r3, [r2, #0]
 800bcb2:	e4a7      	b.n	800b604 <_dtoa_r+0x4d4>
 800bcb4:	4b14      	ldr	r3, [pc, #80]	@ (800bd08 <_dtoa_r+0xbd8>)
 800bcb6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	4b14      	ldr	r3, [pc, #80]	@ (800bd0c <_dtoa_r+0xbdc>)
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	d001      	beq.n	800bcc4 <_dtoa_r+0xb94>
 800bcc0:	f7ff fa7e 	bl	800b1c0 <_dtoa_r+0x90>
 800bcc4:	f7ff fa7e 	bl	800b1c4 <_dtoa_r+0x94>
 800bcc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	dc00      	bgt.n	800bcd0 <_dtoa_r+0xba0>
 800bcce:	e648      	b.n	800b962 <_dtoa_r+0x832>
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bcd4:	e665      	b.n	800b9a2 <_dtoa_r+0x872>
 800bcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dc00      	bgt.n	800bcde <_dtoa_r+0xbae>
 800bcdc:	e6a9      	b.n	800ba32 <_dtoa_r+0x902>
 800bcde:	2400      	movs	r4, #0
 800bce0:	0031      	movs	r1, r6
 800bce2:	9805      	ldr	r0, [sp, #20]
 800bce4:	f7ff f99e 	bl	800b024 <quorem>
 800bce8:	9b08      	ldr	r3, [sp, #32]
 800bcea:	3030      	adds	r0, #48	@ 0x30
 800bcec:	5518      	strb	r0, [r3, r4]
 800bcee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcf0:	3401      	adds	r4, #1
 800bcf2:	0005      	movs	r5, r0
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	ddb6      	ble.n	800bc66 <_dtoa_r+0xb36>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	220a      	movs	r2, #10
 800bcfc:	9905      	ldr	r1, [sp, #20]
 800bcfe:	9803      	ldr	r0, [sp, #12]
 800bd00:	f000 f974 	bl	800bfec <__multadd>
 800bd04:	9005      	str	r0, [sp, #20]
 800bd06:	e7eb      	b.n	800bce0 <_dtoa_r+0xbb0>
 800bd08:	0800d538 	.word	0x0800d538
 800bd0c:	0800d540 	.word	0x0800d540

0800bd10 <_free_r>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	0005      	movs	r5, r0
 800bd14:	1e0c      	subs	r4, r1, #0
 800bd16:	d010      	beq.n	800bd3a <_free_r+0x2a>
 800bd18:	3c04      	subs	r4, #4
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da00      	bge.n	800bd22 <_free_r+0x12>
 800bd20:	18e4      	adds	r4, r4, r3
 800bd22:	0028      	movs	r0, r5
 800bd24:	f000 f8ea 	bl	800befc <__malloc_lock>
 800bd28:	4a1d      	ldr	r2, [pc, #116]	@ (800bda0 <_free_r+0x90>)
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d105      	bne.n	800bd3c <_free_r+0x2c>
 800bd30:	6063      	str	r3, [r4, #4]
 800bd32:	6014      	str	r4, [r2, #0]
 800bd34:	0028      	movs	r0, r5
 800bd36:	f000 f8e9 	bl	800bf0c <__malloc_unlock>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d908      	bls.n	800bd52 <_free_r+0x42>
 800bd40:	6820      	ldr	r0, [r4, #0]
 800bd42:	1821      	adds	r1, r4, r0
 800bd44:	428b      	cmp	r3, r1
 800bd46:	d1f3      	bne.n	800bd30 <_free_r+0x20>
 800bd48:	6819      	ldr	r1, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	1809      	adds	r1, r1, r0
 800bd4e:	6021      	str	r1, [r4, #0]
 800bd50:	e7ee      	b.n	800bd30 <_free_r+0x20>
 800bd52:	001a      	movs	r2, r3
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <_free_r+0x4e>
 800bd5a:	42a3      	cmp	r3, r4
 800bd5c:	d9f9      	bls.n	800bd52 <_free_r+0x42>
 800bd5e:	6811      	ldr	r1, [r2, #0]
 800bd60:	1850      	adds	r0, r2, r1
 800bd62:	42a0      	cmp	r0, r4
 800bd64:	d10b      	bne.n	800bd7e <_free_r+0x6e>
 800bd66:	6820      	ldr	r0, [r4, #0]
 800bd68:	1809      	adds	r1, r1, r0
 800bd6a:	1850      	adds	r0, r2, r1
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	4283      	cmp	r3, r0
 800bd70:	d1e0      	bne.n	800bd34 <_free_r+0x24>
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	1841      	adds	r1, r0, r1
 800bd78:	6011      	str	r1, [r2, #0]
 800bd7a:	6053      	str	r3, [r2, #4]
 800bd7c:	e7da      	b.n	800bd34 <_free_r+0x24>
 800bd7e:	42a0      	cmp	r0, r4
 800bd80:	d902      	bls.n	800bd88 <_free_r+0x78>
 800bd82:	230c      	movs	r3, #12
 800bd84:	602b      	str	r3, [r5, #0]
 800bd86:	e7d5      	b.n	800bd34 <_free_r+0x24>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	1821      	adds	r1, r4, r0
 800bd8c:	428b      	cmp	r3, r1
 800bd8e:	d103      	bne.n	800bd98 <_free_r+0x88>
 800bd90:	6819      	ldr	r1, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	1809      	adds	r1, r1, r0
 800bd96:	6021      	str	r1, [r4, #0]
 800bd98:	6063      	str	r3, [r4, #4]
 800bd9a:	6054      	str	r4, [r2, #4]
 800bd9c:	e7ca      	b.n	800bd34 <_free_r+0x24>
 800bd9e:	46c0      	nop			@ (mov r8, r8)
 800bda0:	200006a4 	.word	0x200006a4

0800bda4 <malloc>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	4b03      	ldr	r3, [pc, #12]	@ (800bdb4 <malloc+0x10>)
 800bda8:	0001      	movs	r1, r0
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	f000 f826 	bl	800bdfc <_malloc_r>
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	46c0      	nop			@ (mov r8, r8)
 800bdb4:	20000028 	.word	0x20000028

0800bdb8 <sbrk_aligned>:
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	4e0f      	ldr	r6, [pc, #60]	@ (800bdf8 <sbrk_aligned+0x40>)
 800bdbc:	000d      	movs	r5, r1
 800bdbe:	6831      	ldr	r1, [r6, #0]
 800bdc0:	0004      	movs	r4, r0
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d102      	bne.n	800bdcc <sbrk_aligned+0x14>
 800bdc6:	f000 fe67 	bl	800ca98 <_sbrk_r>
 800bdca:	6030      	str	r0, [r6, #0]
 800bdcc:	0029      	movs	r1, r5
 800bdce:	0020      	movs	r0, r4
 800bdd0:	f000 fe62 	bl	800ca98 <_sbrk_r>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d103      	bne.n	800bde0 <sbrk_aligned+0x28>
 800bdd8:	2501      	movs	r5, #1
 800bdda:	426d      	negs	r5, r5
 800bddc:	0028      	movs	r0, r5
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	2303      	movs	r3, #3
 800bde2:	1cc5      	adds	r5, r0, #3
 800bde4:	439d      	bics	r5, r3
 800bde6:	42a8      	cmp	r0, r5
 800bde8:	d0f8      	beq.n	800bddc <sbrk_aligned+0x24>
 800bdea:	1a29      	subs	r1, r5, r0
 800bdec:	0020      	movs	r0, r4
 800bdee:	f000 fe53 	bl	800ca98 <_sbrk_r>
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	d1f2      	bne.n	800bddc <sbrk_aligned+0x24>
 800bdf6:	e7ef      	b.n	800bdd8 <sbrk_aligned+0x20>
 800bdf8:	200006a0 	.word	0x200006a0

0800bdfc <_malloc_r>:
 800bdfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfe:	2203      	movs	r2, #3
 800be00:	1ccb      	adds	r3, r1, #3
 800be02:	4393      	bics	r3, r2
 800be04:	3308      	adds	r3, #8
 800be06:	0005      	movs	r5, r0
 800be08:	001f      	movs	r7, r3
 800be0a:	2b0c      	cmp	r3, #12
 800be0c:	d234      	bcs.n	800be78 <_malloc_r+0x7c>
 800be0e:	270c      	movs	r7, #12
 800be10:	42b9      	cmp	r1, r7
 800be12:	d833      	bhi.n	800be7c <_malloc_r+0x80>
 800be14:	0028      	movs	r0, r5
 800be16:	f000 f871 	bl	800befc <__malloc_lock>
 800be1a:	4e37      	ldr	r6, [pc, #220]	@ (800bef8 <_malloc_r+0xfc>)
 800be1c:	6833      	ldr	r3, [r6, #0]
 800be1e:	001c      	movs	r4, r3
 800be20:	2c00      	cmp	r4, #0
 800be22:	d12f      	bne.n	800be84 <_malloc_r+0x88>
 800be24:	0039      	movs	r1, r7
 800be26:	0028      	movs	r0, r5
 800be28:	f7ff ffc6 	bl	800bdb8 <sbrk_aligned>
 800be2c:	0004      	movs	r4, r0
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d15f      	bne.n	800bef2 <_malloc_r+0xf6>
 800be32:	6834      	ldr	r4, [r6, #0]
 800be34:	9400      	str	r4, [sp, #0]
 800be36:	9b00      	ldr	r3, [sp, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d14a      	bne.n	800bed2 <_malloc_r+0xd6>
 800be3c:	2c00      	cmp	r4, #0
 800be3e:	d052      	beq.n	800bee6 <_malloc_r+0xea>
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	0028      	movs	r0, r5
 800be44:	18e3      	adds	r3, r4, r3
 800be46:	9900      	ldr	r1, [sp, #0]
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	f000 fe25 	bl	800ca98 <_sbrk_r>
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	4283      	cmp	r3, r0
 800be52:	d148      	bne.n	800bee6 <_malloc_r+0xea>
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	0028      	movs	r0, r5
 800be58:	1aff      	subs	r7, r7, r3
 800be5a:	0039      	movs	r1, r7
 800be5c:	f7ff ffac 	bl	800bdb8 <sbrk_aligned>
 800be60:	3001      	adds	r0, #1
 800be62:	d040      	beq.n	800bee6 <_malloc_r+0xea>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	19db      	adds	r3, r3, r7
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	6833      	ldr	r3, [r6, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	2a00      	cmp	r2, #0
 800be70:	d133      	bne.n	800beda <_malloc_r+0xde>
 800be72:	9b00      	ldr	r3, [sp, #0]
 800be74:	6033      	str	r3, [r6, #0]
 800be76:	e019      	b.n	800beac <_malloc_r+0xb0>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dac9      	bge.n	800be10 <_malloc_r+0x14>
 800be7c:	230c      	movs	r3, #12
 800be7e:	602b      	str	r3, [r5, #0]
 800be80:	2000      	movs	r0, #0
 800be82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be84:	6821      	ldr	r1, [r4, #0]
 800be86:	1bc9      	subs	r1, r1, r7
 800be88:	d420      	bmi.n	800becc <_malloc_r+0xd0>
 800be8a:	290b      	cmp	r1, #11
 800be8c:	d90a      	bls.n	800bea4 <_malloc_r+0xa8>
 800be8e:	19e2      	adds	r2, r4, r7
 800be90:	6027      	str	r7, [r4, #0]
 800be92:	42a3      	cmp	r3, r4
 800be94:	d104      	bne.n	800bea0 <_malloc_r+0xa4>
 800be96:	6032      	str	r2, [r6, #0]
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	6011      	str	r1, [r2, #0]
 800be9c:	6053      	str	r3, [r2, #4]
 800be9e:	e005      	b.n	800beac <_malloc_r+0xb0>
 800bea0:	605a      	str	r2, [r3, #4]
 800bea2:	e7f9      	b.n	800be98 <_malloc_r+0x9c>
 800bea4:	6862      	ldr	r2, [r4, #4]
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	d10e      	bne.n	800bec8 <_malloc_r+0xcc>
 800beaa:	6032      	str	r2, [r6, #0]
 800beac:	0028      	movs	r0, r5
 800beae:	f000 f82d 	bl	800bf0c <__malloc_unlock>
 800beb2:	0020      	movs	r0, r4
 800beb4:	2207      	movs	r2, #7
 800beb6:	300b      	adds	r0, #11
 800beb8:	1d23      	adds	r3, r4, #4
 800beba:	4390      	bics	r0, r2
 800bebc:	1ac2      	subs	r2, r0, r3
 800bebe:	4298      	cmp	r0, r3
 800bec0:	d0df      	beq.n	800be82 <_malloc_r+0x86>
 800bec2:	1a1b      	subs	r3, r3, r0
 800bec4:	50a3      	str	r3, [r4, r2]
 800bec6:	e7dc      	b.n	800be82 <_malloc_r+0x86>
 800bec8:	605a      	str	r2, [r3, #4]
 800beca:	e7ef      	b.n	800beac <_malloc_r+0xb0>
 800becc:	0023      	movs	r3, r4
 800bece:	6864      	ldr	r4, [r4, #4]
 800bed0:	e7a6      	b.n	800be20 <_malloc_r+0x24>
 800bed2:	9c00      	ldr	r4, [sp, #0]
 800bed4:	6863      	ldr	r3, [r4, #4]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	e7ad      	b.n	800be36 <_malloc_r+0x3a>
 800beda:	001a      	movs	r2, r3
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	42a3      	cmp	r3, r4
 800bee0:	d1fb      	bne.n	800beda <_malloc_r+0xde>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e7da      	b.n	800be9c <_malloc_r+0xa0>
 800bee6:	230c      	movs	r3, #12
 800bee8:	0028      	movs	r0, r5
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	f000 f80e 	bl	800bf0c <__malloc_unlock>
 800bef0:	e7c6      	b.n	800be80 <_malloc_r+0x84>
 800bef2:	6007      	str	r7, [r0, #0]
 800bef4:	e7da      	b.n	800beac <_malloc_r+0xb0>
 800bef6:	46c0      	nop			@ (mov r8, r8)
 800bef8:	200006a4 	.word	0x200006a4

0800befc <__malloc_lock>:
 800befc:	b510      	push	{r4, lr}
 800befe:	4802      	ldr	r0, [pc, #8]	@ (800bf08 <__malloc_lock+0xc>)
 800bf00:	f7ff f87b 	bl	800affa <__retarget_lock_acquire_recursive>
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	46c0      	nop			@ (mov r8, r8)
 800bf08:	2000069c 	.word	0x2000069c

0800bf0c <__malloc_unlock>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	4802      	ldr	r0, [pc, #8]	@ (800bf18 <__malloc_unlock+0xc>)
 800bf10:	f7ff f874 	bl	800affc <__retarget_lock_release_recursive>
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	46c0      	nop			@ (mov r8, r8)
 800bf18:	2000069c 	.word	0x2000069c

0800bf1c <_Balloc>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	69c5      	ldr	r5, [r0, #28]
 800bf20:	0006      	movs	r6, r0
 800bf22:	000c      	movs	r4, r1
 800bf24:	2d00      	cmp	r5, #0
 800bf26:	d10e      	bne.n	800bf46 <_Balloc+0x2a>
 800bf28:	2010      	movs	r0, #16
 800bf2a:	f7ff ff3b 	bl	800bda4 <malloc>
 800bf2e:	1e02      	subs	r2, r0, #0
 800bf30:	61f0      	str	r0, [r6, #28]
 800bf32:	d104      	bne.n	800bf3e <_Balloc+0x22>
 800bf34:	216b      	movs	r1, #107	@ 0x6b
 800bf36:	4b19      	ldr	r3, [pc, #100]	@ (800bf9c <_Balloc+0x80>)
 800bf38:	4819      	ldr	r0, [pc, #100]	@ (800bfa0 <_Balloc+0x84>)
 800bf3a:	f000 fdc9 	bl	800cad0 <__assert_func>
 800bf3e:	6045      	str	r5, [r0, #4]
 800bf40:	6085      	str	r5, [r0, #8]
 800bf42:	6005      	str	r5, [r0, #0]
 800bf44:	60c5      	str	r5, [r0, #12]
 800bf46:	69f5      	ldr	r5, [r6, #28]
 800bf48:	68eb      	ldr	r3, [r5, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d013      	beq.n	800bf76 <_Balloc+0x5a>
 800bf4e:	69f3      	ldr	r3, [r6, #28]
 800bf50:	00a2      	lsls	r2, r4, #2
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	189b      	adds	r3, r3, r2
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d118      	bne.n	800bf8e <_Balloc+0x72>
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	000d      	movs	r5, r1
 800bf60:	40a5      	lsls	r5, r4
 800bf62:	1d6a      	adds	r2, r5, #5
 800bf64:	0030      	movs	r0, r6
 800bf66:	0092      	lsls	r2, r2, #2
 800bf68:	f000 fdd0 	bl	800cb0c <_calloc_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d00c      	beq.n	800bf8a <_Balloc+0x6e>
 800bf70:	6044      	str	r4, [r0, #4]
 800bf72:	6085      	str	r5, [r0, #8]
 800bf74:	e00d      	b.n	800bf92 <_Balloc+0x76>
 800bf76:	2221      	movs	r2, #33	@ 0x21
 800bf78:	2104      	movs	r1, #4
 800bf7a:	0030      	movs	r0, r6
 800bf7c:	f000 fdc6 	bl	800cb0c <_calloc_r>
 800bf80:	69f3      	ldr	r3, [r6, #28]
 800bf82:	60e8      	str	r0, [r5, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e1      	bne.n	800bf4e <_Balloc+0x32>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	bd70      	pop	{r4, r5, r6, pc}
 800bf8e:	6802      	ldr	r2, [r0, #0]
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	2300      	movs	r3, #0
 800bf94:	6103      	str	r3, [r0, #16]
 800bf96:	60c3      	str	r3, [r0, #12]
 800bf98:	e7f8      	b.n	800bf8c <_Balloc+0x70>
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	0800d545 	.word	0x0800d545
 800bfa0:	0800d5c5 	.word	0x0800d5c5

0800bfa4 <_Bfree>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	69c6      	ldr	r6, [r0, #28]
 800bfa8:	0005      	movs	r5, r0
 800bfaa:	000c      	movs	r4, r1
 800bfac:	2e00      	cmp	r6, #0
 800bfae:	d10e      	bne.n	800bfce <_Bfree+0x2a>
 800bfb0:	2010      	movs	r0, #16
 800bfb2:	f7ff fef7 	bl	800bda4 <malloc>
 800bfb6:	1e02      	subs	r2, r0, #0
 800bfb8:	61e8      	str	r0, [r5, #28]
 800bfba:	d104      	bne.n	800bfc6 <_Bfree+0x22>
 800bfbc:	218f      	movs	r1, #143	@ 0x8f
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <_Bfree+0x40>)
 800bfc0:	4809      	ldr	r0, [pc, #36]	@ (800bfe8 <_Bfree+0x44>)
 800bfc2:	f000 fd85 	bl	800cad0 <__assert_func>
 800bfc6:	6046      	str	r6, [r0, #4]
 800bfc8:	6086      	str	r6, [r0, #8]
 800bfca:	6006      	str	r6, [r0, #0]
 800bfcc:	60c6      	str	r6, [r0, #12]
 800bfce:	2c00      	cmp	r4, #0
 800bfd0:	d007      	beq.n	800bfe2 <_Bfree+0x3e>
 800bfd2:	69eb      	ldr	r3, [r5, #28]
 800bfd4:	6862      	ldr	r2, [r4, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	0092      	lsls	r2, r2, #2
 800bfda:	189b      	adds	r3, r3, r2
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	601c      	str	r4, [r3, #0]
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	0800d545 	.word	0x0800d545
 800bfe8:	0800d5c5 	.word	0x0800d5c5

0800bfec <__multadd>:
 800bfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfee:	000f      	movs	r7, r1
 800bff0:	9001      	str	r0, [sp, #4]
 800bff2:	000c      	movs	r4, r1
 800bff4:	001e      	movs	r6, r3
 800bff6:	2000      	movs	r0, #0
 800bff8:	690d      	ldr	r5, [r1, #16]
 800bffa:	3714      	adds	r7, #20
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	3001      	adds	r0, #1
 800c000:	b299      	uxth	r1, r3
 800c002:	4351      	muls	r1, r2
 800c004:	0c1b      	lsrs	r3, r3, #16
 800c006:	4353      	muls	r3, r2
 800c008:	1989      	adds	r1, r1, r6
 800c00a:	0c0e      	lsrs	r6, r1, #16
 800c00c:	199b      	adds	r3, r3, r6
 800c00e:	0c1e      	lsrs	r6, r3, #16
 800c010:	b289      	uxth	r1, r1
 800c012:	041b      	lsls	r3, r3, #16
 800c014:	185b      	adds	r3, r3, r1
 800c016:	c708      	stmia	r7!, {r3}
 800c018:	4285      	cmp	r5, r0
 800c01a:	dcef      	bgt.n	800bffc <__multadd+0x10>
 800c01c:	2e00      	cmp	r6, #0
 800c01e:	d022      	beq.n	800c066 <__multadd+0x7a>
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	42ab      	cmp	r3, r5
 800c024:	dc19      	bgt.n	800c05a <__multadd+0x6e>
 800c026:	6861      	ldr	r1, [r4, #4]
 800c028:	9801      	ldr	r0, [sp, #4]
 800c02a:	3101      	adds	r1, #1
 800c02c:	f7ff ff76 	bl	800bf1c <_Balloc>
 800c030:	1e07      	subs	r7, r0, #0
 800c032:	d105      	bne.n	800c040 <__multadd+0x54>
 800c034:	003a      	movs	r2, r7
 800c036:	21ba      	movs	r1, #186	@ 0xba
 800c038:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <__multadd+0x80>)
 800c03a:	480d      	ldr	r0, [pc, #52]	@ (800c070 <__multadd+0x84>)
 800c03c:	f000 fd48 	bl	800cad0 <__assert_func>
 800c040:	0021      	movs	r1, r4
 800c042:	6922      	ldr	r2, [r4, #16]
 800c044:	310c      	adds	r1, #12
 800c046:	3202      	adds	r2, #2
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	300c      	adds	r0, #12
 800c04c:	f000 fd36 	bl	800cabc <memcpy>
 800c050:	0021      	movs	r1, r4
 800c052:	9801      	ldr	r0, [sp, #4]
 800c054:	f7ff ffa6 	bl	800bfa4 <_Bfree>
 800c058:	003c      	movs	r4, r7
 800c05a:	1d2b      	adds	r3, r5, #4
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	18e3      	adds	r3, r4, r3
 800c060:	3501      	adds	r5, #1
 800c062:	605e      	str	r6, [r3, #4]
 800c064:	6125      	str	r5, [r4, #16]
 800c066:	0020      	movs	r0, r4
 800c068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	0800d5b4 	.word	0x0800d5b4
 800c070:	0800d5c5 	.word	0x0800d5c5

0800c074 <__hi0bits>:
 800c074:	2280      	movs	r2, #128	@ 0x80
 800c076:	0003      	movs	r3, r0
 800c078:	0252      	lsls	r2, r2, #9
 800c07a:	2000      	movs	r0, #0
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d201      	bcs.n	800c084 <__hi0bits+0x10>
 800c080:	041b      	lsls	r3, r3, #16
 800c082:	3010      	adds	r0, #16
 800c084:	2280      	movs	r2, #128	@ 0x80
 800c086:	0452      	lsls	r2, r2, #17
 800c088:	4293      	cmp	r3, r2
 800c08a:	d201      	bcs.n	800c090 <__hi0bits+0x1c>
 800c08c:	3008      	adds	r0, #8
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	2280      	movs	r2, #128	@ 0x80
 800c092:	0552      	lsls	r2, r2, #21
 800c094:	4293      	cmp	r3, r2
 800c096:	d201      	bcs.n	800c09c <__hi0bits+0x28>
 800c098:	3004      	adds	r0, #4
 800c09a:	011b      	lsls	r3, r3, #4
 800c09c:	2280      	movs	r2, #128	@ 0x80
 800c09e:	05d2      	lsls	r2, r2, #23
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d201      	bcs.n	800c0a8 <__hi0bits+0x34>
 800c0a4:	3002      	adds	r0, #2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db03      	blt.n	800c0b4 <__hi0bits+0x40>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	4213      	tst	r3, r2
 800c0b0:	d100      	bne.n	800c0b4 <__hi0bits+0x40>
 800c0b2:	2020      	movs	r0, #32
 800c0b4:	4770      	bx	lr

0800c0b6 <__lo0bits>:
 800c0b6:	6803      	ldr	r3, [r0, #0]
 800c0b8:	0001      	movs	r1, r0
 800c0ba:	2207      	movs	r2, #7
 800c0bc:	0018      	movs	r0, r3
 800c0be:	4010      	ands	r0, r2
 800c0c0:	4213      	tst	r3, r2
 800c0c2:	d00d      	beq.n	800c0e0 <__lo0bits+0x2a>
 800c0c4:	3a06      	subs	r2, #6
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	4213      	tst	r3, r2
 800c0ca:	d105      	bne.n	800c0d8 <__lo0bits+0x22>
 800c0cc:	3002      	adds	r0, #2
 800c0ce:	4203      	tst	r3, r0
 800c0d0:	d003      	beq.n	800c0da <__lo0bits+0x24>
 800c0d2:	40d3      	lsrs	r3, r2
 800c0d4:	0010      	movs	r0, r2
 800c0d6:	600b      	str	r3, [r1, #0]
 800c0d8:	4770      	bx	lr
 800c0da:	089b      	lsrs	r3, r3, #2
 800c0dc:	600b      	str	r3, [r1, #0]
 800c0de:	e7fb      	b.n	800c0d8 <__lo0bits+0x22>
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	d101      	bne.n	800c0ea <__lo0bits+0x34>
 800c0e6:	2010      	movs	r0, #16
 800c0e8:	0c1b      	lsrs	r3, r3, #16
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	d101      	bne.n	800c0f4 <__lo0bits+0x3e>
 800c0f0:	3008      	adds	r0, #8
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	071a      	lsls	r2, r3, #28
 800c0f6:	d101      	bne.n	800c0fc <__lo0bits+0x46>
 800c0f8:	3004      	adds	r0, #4
 800c0fa:	091b      	lsrs	r3, r3, #4
 800c0fc:	079a      	lsls	r2, r3, #30
 800c0fe:	d101      	bne.n	800c104 <__lo0bits+0x4e>
 800c100:	3002      	adds	r0, #2
 800c102:	089b      	lsrs	r3, r3, #2
 800c104:	07da      	lsls	r2, r3, #31
 800c106:	d4e9      	bmi.n	800c0dc <__lo0bits+0x26>
 800c108:	3001      	adds	r0, #1
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	d1e6      	bne.n	800c0dc <__lo0bits+0x26>
 800c10e:	2020      	movs	r0, #32
 800c110:	e7e2      	b.n	800c0d8 <__lo0bits+0x22>
	...

0800c114 <__i2b>:
 800c114:	b510      	push	{r4, lr}
 800c116:	000c      	movs	r4, r1
 800c118:	2101      	movs	r1, #1
 800c11a:	f7ff feff 	bl	800bf1c <_Balloc>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d107      	bne.n	800c132 <__i2b+0x1e>
 800c122:	2146      	movs	r1, #70	@ 0x46
 800c124:	4c05      	ldr	r4, [pc, #20]	@ (800c13c <__i2b+0x28>)
 800c126:	0002      	movs	r2, r0
 800c128:	4b05      	ldr	r3, [pc, #20]	@ (800c140 <__i2b+0x2c>)
 800c12a:	0020      	movs	r0, r4
 800c12c:	31ff      	adds	r1, #255	@ 0xff
 800c12e:	f000 fccf 	bl	800cad0 <__assert_func>
 800c132:	2301      	movs	r3, #1
 800c134:	6144      	str	r4, [r0, #20]
 800c136:	6103      	str	r3, [r0, #16]
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	46c0      	nop			@ (mov r8, r8)
 800c13c:	0800d5c5 	.word	0x0800d5c5
 800c140:	0800d5b4 	.word	0x0800d5b4

0800c144 <__multiply>:
 800c144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c146:	0014      	movs	r4, r2
 800c148:	690a      	ldr	r2, [r1, #16]
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	000d      	movs	r5, r1
 800c14e:	b089      	sub	sp, #36	@ 0x24
 800c150:	429a      	cmp	r2, r3
 800c152:	db02      	blt.n	800c15a <__multiply+0x16>
 800c154:	0023      	movs	r3, r4
 800c156:	000c      	movs	r4, r1
 800c158:	001d      	movs	r5, r3
 800c15a:	6927      	ldr	r7, [r4, #16]
 800c15c:	692e      	ldr	r6, [r5, #16]
 800c15e:	6861      	ldr	r1, [r4, #4]
 800c160:	19bb      	adds	r3, r7, r6
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	68a3      	ldr	r3, [r4, #8]
 800c166:	19ba      	adds	r2, r7, r6
 800c168:	4293      	cmp	r3, r2
 800c16a:	da00      	bge.n	800c16e <__multiply+0x2a>
 800c16c:	3101      	adds	r1, #1
 800c16e:	f7ff fed5 	bl	800bf1c <_Balloc>
 800c172:	4684      	mov	ip, r0
 800c174:	2800      	cmp	r0, #0
 800c176:	d106      	bne.n	800c186 <__multiply+0x42>
 800c178:	21b1      	movs	r1, #177	@ 0xb1
 800c17a:	4662      	mov	r2, ip
 800c17c:	4b44      	ldr	r3, [pc, #272]	@ (800c290 <__multiply+0x14c>)
 800c17e:	4845      	ldr	r0, [pc, #276]	@ (800c294 <__multiply+0x150>)
 800c180:	0049      	lsls	r1, r1, #1
 800c182:	f000 fca5 	bl	800cad0 <__assert_func>
 800c186:	0002      	movs	r2, r0
 800c188:	19bb      	adds	r3, r7, r6
 800c18a:	3214      	adds	r2, #20
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	18d3      	adds	r3, r2, r3
 800c190:	9301      	str	r3, [sp, #4]
 800c192:	2100      	movs	r1, #0
 800c194:	0013      	movs	r3, r2
 800c196:	9801      	ldr	r0, [sp, #4]
 800c198:	4283      	cmp	r3, r0
 800c19a:	d328      	bcc.n	800c1ee <__multiply+0xaa>
 800c19c:	0023      	movs	r3, r4
 800c19e:	00bf      	lsls	r7, r7, #2
 800c1a0:	3314      	adds	r3, #20
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	3514      	adds	r5, #20
 800c1a6:	19db      	adds	r3, r3, r7
 800c1a8:	00b6      	lsls	r6, r6, #2
 800c1aa:	9302      	str	r3, [sp, #8]
 800c1ac:	19ab      	adds	r3, r5, r6
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	2304      	movs	r3, #4
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	0023      	movs	r3, r4
 800c1b6:	9902      	ldr	r1, [sp, #8]
 800c1b8:	3315      	adds	r3, #21
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d305      	bcc.n	800c1ca <__multiply+0x86>
 800c1be:	1b0c      	subs	r4, r1, r4
 800c1c0:	3c15      	subs	r4, #21
 800c1c2:	08a4      	lsrs	r4, r4, #2
 800c1c4:	3401      	adds	r4, #1
 800c1c6:	00a3      	lsls	r3, r4, #2
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	9b07      	ldr	r3, [sp, #28]
 800c1cc:	429d      	cmp	r5, r3
 800c1ce:	d310      	bcc.n	800c1f2 <__multiply+0xae>
 800c1d0:	9b00      	ldr	r3, [sp, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd05      	ble.n	800c1e2 <__multiply+0x9e>
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	9301      	str	r3, [sp, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d052      	beq.n	800c288 <__multiply+0x144>
 800c1e2:	4663      	mov	r3, ip
 800c1e4:	4660      	mov	r0, ip
 800c1e6:	9a00      	ldr	r2, [sp, #0]
 800c1e8:	611a      	str	r2, [r3, #16]
 800c1ea:	b009      	add	sp, #36	@ 0x24
 800c1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ee:	c302      	stmia	r3!, {r1}
 800c1f0:	e7d1      	b.n	800c196 <__multiply+0x52>
 800c1f2:	682c      	ldr	r4, [r5, #0]
 800c1f4:	b2a4      	uxth	r4, r4
 800c1f6:	2c00      	cmp	r4, #0
 800c1f8:	d01f      	beq.n	800c23a <__multiply+0xf6>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	0017      	movs	r7, r2
 800c1fe:	9e04      	ldr	r6, [sp, #16]
 800c200:	9303      	str	r3, [sp, #12]
 800c202:	ce08      	ldmia	r6!, {r3}
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	9306      	str	r3, [sp, #24]
 800c208:	466b      	mov	r3, sp
 800c20a:	8b1b      	ldrh	r3, [r3, #24]
 800c20c:	b288      	uxth	r0, r1
 800c20e:	4363      	muls	r3, r4
 800c210:	181b      	adds	r3, r3, r0
 800c212:	9803      	ldr	r0, [sp, #12]
 800c214:	0c09      	lsrs	r1, r1, #16
 800c216:	181b      	adds	r3, r3, r0
 800c218:	9806      	ldr	r0, [sp, #24]
 800c21a:	0c00      	lsrs	r0, r0, #16
 800c21c:	4360      	muls	r0, r4
 800c21e:	1840      	adds	r0, r0, r1
 800c220:	0c19      	lsrs	r1, r3, #16
 800c222:	1841      	adds	r1, r0, r1
 800c224:	0c08      	lsrs	r0, r1, #16
 800c226:	b29b      	uxth	r3, r3
 800c228:	0409      	lsls	r1, r1, #16
 800c22a:	4319      	orrs	r1, r3
 800c22c:	9b02      	ldr	r3, [sp, #8]
 800c22e:	9003      	str	r0, [sp, #12]
 800c230:	c702      	stmia	r7!, {r1}
 800c232:	42b3      	cmp	r3, r6
 800c234:	d8e5      	bhi.n	800c202 <__multiply+0xbe>
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	50d0      	str	r0, [r2, r3]
 800c23a:	682c      	ldr	r4, [r5, #0]
 800c23c:	0c24      	lsrs	r4, r4, #16
 800c23e:	d020      	beq.n	800c282 <__multiply+0x13e>
 800c240:	2100      	movs	r1, #0
 800c242:	0010      	movs	r0, r2
 800c244:	6813      	ldr	r3, [r2, #0]
 800c246:	9e04      	ldr	r6, [sp, #16]
 800c248:	9103      	str	r1, [sp, #12]
 800c24a:	6831      	ldr	r1, [r6, #0]
 800c24c:	6807      	ldr	r7, [r0, #0]
 800c24e:	b289      	uxth	r1, r1
 800c250:	4361      	muls	r1, r4
 800c252:	0c3f      	lsrs	r7, r7, #16
 800c254:	19c9      	adds	r1, r1, r7
 800c256:	9f03      	ldr	r7, [sp, #12]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	19c9      	adds	r1, r1, r7
 800c25c:	040f      	lsls	r7, r1, #16
 800c25e:	431f      	orrs	r7, r3
 800c260:	6007      	str	r7, [r0, #0]
 800c262:	ce80      	ldmia	r6!, {r7}
 800c264:	6843      	ldr	r3, [r0, #4]
 800c266:	0c3f      	lsrs	r7, r7, #16
 800c268:	4367      	muls	r7, r4
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	0c09      	lsrs	r1, r1, #16
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	185b      	adds	r3, r3, r1
 800c272:	0c19      	lsrs	r1, r3, #16
 800c274:	9103      	str	r1, [sp, #12]
 800c276:	9902      	ldr	r1, [sp, #8]
 800c278:	3004      	adds	r0, #4
 800c27a:	42b1      	cmp	r1, r6
 800c27c:	d8e5      	bhi.n	800c24a <__multiply+0x106>
 800c27e:	9905      	ldr	r1, [sp, #20]
 800c280:	5053      	str	r3, [r2, r1]
 800c282:	3504      	adds	r5, #4
 800c284:	3204      	adds	r2, #4
 800c286:	e7a0      	b.n	800c1ca <__multiply+0x86>
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	e79f      	b.n	800c1d0 <__multiply+0x8c>
 800c290:	0800d5b4 	.word	0x0800d5b4
 800c294:	0800d5c5 	.word	0x0800d5c5

0800c298 <__pow5mult>:
 800c298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c29a:	2303      	movs	r3, #3
 800c29c:	0015      	movs	r5, r2
 800c29e:	0007      	movs	r7, r0
 800c2a0:	000e      	movs	r6, r1
 800c2a2:	401a      	ands	r2, r3
 800c2a4:	421d      	tst	r5, r3
 800c2a6:	d008      	beq.n	800c2ba <__pow5mult+0x22>
 800c2a8:	4925      	ldr	r1, [pc, #148]	@ (800c340 <__pow5mult+0xa8>)
 800c2aa:	3a01      	subs	r2, #1
 800c2ac:	0092      	lsls	r2, r2, #2
 800c2ae:	5852      	ldr	r2, [r2, r1]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	0031      	movs	r1, r6
 800c2b4:	f7ff fe9a 	bl	800bfec <__multadd>
 800c2b8:	0006      	movs	r6, r0
 800c2ba:	10ad      	asrs	r5, r5, #2
 800c2bc:	d03d      	beq.n	800c33a <__pow5mult+0xa2>
 800c2be:	69fc      	ldr	r4, [r7, #28]
 800c2c0:	2c00      	cmp	r4, #0
 800c2c2:	d10f      	bne.n	800c2e4 <__pow5mult+0x4c>
 800c2c4:	2010      	movs	r0, #16
 800c2c6:	f7ff fd6d 	bl	800bda4 <malloc>
 800c2ca:	1e02      	subs	r2, r0, #0
 800c2cc:	61f8      	str	r0, [r7, #28]
 800c2ce:	d105      	bne.n	800c2dc <__pow5mult+0x44>
 800c2d0:	21b4      	movs	r1, #180	@ 0xb4
 800c2d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c344 <__pow5mult+0xac>)
 800c2d4:	481c      	ldr	r0, [pc, #112]	@ (800c348 <__pow5mult+0xb0>)
 800c2d6:	31ff      	adds	r1, #255	@ 0xff
 800c2d8:	f000 fbfa 	bl	800cad0 <__assert_func>
 800c2dc:	6044      	str	r4, [r0, #4]
 800c2de:	6084      	str	r4, [r0, #8]
 800c2e0:	6004      	str	r4, [r0, #0]
 800c2e2:	60c4      	str	r4, [r0, #12]
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	689c      	ldr	r4, [r3, #8]
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d108      	bne.n	800c300 <__pow5mult+0x68>
 800c2ee:	0038      	movs	r0, r7
 800c2f0:	4916      	ldr	r1, [pc, #88]	@ (800c34c <__pow5mult+0xb4>)
 800c2f2:	f7ff ff0f 	bl	800c114 <__i2b>
 800c2f6:	9b01      	ldr	r3, [sp, #4]
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	6098      	str	r0, [r3, #8]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6003      	str	r3, [r0, #0]
 800c300:	2301      	movs	r3, #1
 800c302:	421d      	tst	r5, r3
 800c304:	d00a      	beq.n	800c31c <__pow5mult+0x84>
 800c306:	0031      	movs	r1, r6
 800c308:	0022      	movs	r2, r4
 800c30a:	0038      	movs	r0, r7
 800c30c:	f7ff ff1a 	bl	800c144 <__multiply>
 800c310:	0031      	movs	r1, r6
 800c312:	9001      	str	r0, [sp, #4]
 800c314:	0038      	movs	r0, r7
 800c316:	f7ff fe45 	bl	800bfa4 <_Bfree>
 800c31a:	9e01      	ldr	r6, [sp, #4]
 800c31c:	106d      	asrs	r5, r5, #1
 800c31e:	d00c      	beq.n	800c33a <__pow5mult+0xa2>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	2800      	cmp	r0, #0
 800c324:	d107      	bne.n	800c336 <__pow5mult+0x9e>
 800c326:	0022      	movs	r2, r4
 800c328:	0021      	movs	r1, r4
 800c32a:	0038      	movs	r0, r7
 800c32c:	f7ff ff0a 	bl	800c144 <__multiply>
 800c330:	2300      	movs	r3, #0
 800c332:	6020      	str	r0, [r4, #0]
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	0004      	movs	r4, r0
 800c338:	e7e2      	b.n	800c300 <__pow5mult+0x68>
 800c33a:	0030      	movs	r0, r6
 800c33c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c33e:	46c0      	nop			@ (mov r8, r8)
 800c340:	0800d678 	.word	0x0800d678
 800c344:	0800d545 	.word	0x0800d545
 800c348:	0800d5c5 	.word	0x0800d5c5
 800c34c:	00000271 	.word	0x00000271

0800c350 <__lshift>:
 800c350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c352:	000c      	movs	r4, r1
 800c354:	0016      	movs	r6, r2
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	1157      	asrs	r7, r2, #5
 800c35a:	b085      	sub	sp, #20
 800c35c:	18fb      	adds	r3, r7, r3
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	3301      	adds	r3, #1
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	6849      	ldr	r1, [r1, #4]
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	9002      	str	r0, [sp, #8]
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	db10      	blt.n	800c392 <__lshift+0x42>
 800c370:	9802      	ldr	r0, [sp, #8]
 800c372:	f7ff fdd3 	bl	800bf1c <_Balloc>
 800c376:	2300      	movs	r3, #0
 800c378:	0001      	movs	r1, r0
 800c37a:	0005      	movs	r5, r0
 800c37c:	001a      	movs	r2, r3
 800c37e:	3114      	adds	r1, #20
 800c380:	4298      	cmp	r0, r3
 800c382:	d10c      	bne.n	800c39e <__lshift+0x4e>
 800c384:	21ef      	movs	r1, #239	@ 0xef
 800c386:	002a      	movs	r2, r5
 800c388:	4b25      	ldr	r3, [pc, #148]	@ (800c420 <__lshift+0xd0>)
 800c38a:	4826      	ldr	r0, [pc, #152]	@ (800c424 <__lshift+0xd4>)
 800c38c:	0049      	lsls	r1, r1, #1
 800c38e:	f000 fb9f 	bl	800cad0 <__assert_func>
 800c392:	3101      	adds	r1, #1
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	e7e8      	b.n	800c36a <__lshift+0x1a>
 800c398:	0098      	lsls	r0, r3, #2
 800c39a:	500a      	str	r2, [r1, r0]
 800c39c:	3301      	adds	r3, #1
 800c39e:	42bb      	cmp	r3, r7
 800c3a0:	dbfa      	blt.n	800c398 <__lshift+0x48>
 800c3a2:	43fb      	mvns	r3, r7
 800c3a4:	17db      	asrs	r3, r3, #31
 800c3a6:	401f      	ands	r7, r3
 800c3a8:	00bf      	lsls	r7, r7, #2
 800c3aa:	0023      	movs	r3, r4
 800c3ac:	201f      	movs	r0, #31
 800c3ae:	19c9      	adds	r1, r1, r7
 800c3b0:	0037      	movs	r7, r6
 800c3b2:	6922      	ldr	r2, [r4, #16]
 800c3b4:	3314      	adds	r3, #20
 800c3b6:	0092      	lsls	r2, r2, #2
 800c3b8:	189a      	adds	r2, r3, r2
 800c3ba:	4007      	ands	r7, r0
 800c3bc:	4206      	tst	r6, r0
 800c3be:	d029      	beq.n	800c414 <__lshift+0xc4>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	1bc0      	subs	r0, r0, r7
 800c3c4:	9003      	str	r0, [sp, #12]
 800c3c6:	468c      	mov	ip, r1
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	681e      	ldr	r6, [r3, #0]
 800c3cc:	40be      	lsls	r6, r7
 800c3ce:	4306      	orrs	r6, r0
 800c3d0:	4660      	mov	r0, ip
 800c3d2:	c040      	stmia	r0!, {r6}
 800c3d4:	4684      	mov	ip, r0
 800c3d6:	9e03      	ldr	r6, [sp, #12]
 800c3d8:	cb01      	ldmia	r3!, {r0}
 800c3da:	40f0      	lsrs	r0, r6
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d8f4      	bhi.n	800c3ca <__lshift+0x7a>
 800c3e0:	0026      	movs	r6, r4
 800c3e2:	3615      	adds	r6, #21
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	42b2      	cmp	r2, r6
 800c3e8:	d304      	bcc.n	800c3f4 <__lshift+0xa4>
 800c3ea:	1b13      	subs	r3, r2, r4
 800c3ec:	3b15      	subs	r3, #21
 800c3ee:	089b      	lsrs	r3, r3, #2
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	50c8      	str	r0, [r1, r3]
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d002      	beq.n	800c400 <__lshift+0xb0>
 800c3fa:	9b01      	ldr	r3, [sp, #4]
 800c3fc:	3302      	adds	r3, #2
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	9b00      	ldr	r3, [sp, #0]
 800c402:	9802      	ldr	r0, [sp, #8]
 800c404:	3b01      	subs	r3, #1
 800c406:	0021      	movs	r1, r4
 800c408:	612b      	str	r3, [r5, #16]
 800c40a:	f7ff fdcb 	bl	800bfa4 <_Bfree>
 800c40e:	0028      	movs	r0, r5
 800c410:	b005      	add	sp, #20
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c414:	cb01      	ldmia	r3!, {r0}
 800c416:	c101      	stmia	r1!, {r0}
 800c418:	429a      	cmp	r2, r3
 800c41a:	d8fb      	bhi.n	800c414 <__lshift+0xc4>
 800c41c:	e7f0      	b.n	800c400 <__lshift+0xb0>
 800c41e:	46c0      	nop			@ (mov r8, r8)
 800c420:	0800d5b4 	.word	0x0800d5b4
 800c424:	0800d5c5 	.word	0x0800d5c5

0800c428 <__mcmp>:
 800c428:	b530      	push	{r4, r5, lr}
 800c42a:	690b      	ldr	r3, [r1, #16]
 800c42c:	6904      	ldr	r4, [r0, #16]
 800c42e:	0002      	movs	r2, r0
 800c430:	1ae0      	subs	r0, r4, r3
 800c432:	429c      	cmp	r4, r3
 800c434:	d10f      	bne.n	800c456 <__mcmp+0x2e>
 800c436:	3214      	adds	r2, #20
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	3114      	adds	r1, #20
 800c43c:	0014      	movs	r4, r2
 800c43e:	18c9      	adds	r1, r1, r3
 800c440:	18d2      	adds	r2, r2, r3
 800c442:	3a04      	subs	r2, #4
 800c444:	3904      	subs	r1, #4
 800c446:	6815      	ldr	r5, [r2, #0]
 800c448:	680b      	ldr	r3, [r1, #0]
 800c44a:	429d      	cmp	r5, r3
 800c44c:	d004      	beq.n	800c458 <__mcmp+0x30>
 800c44e:	2001      	movs	r0, #1
 800c450:	429d      	cmp	r5, r3
 800c452:	d200      	bcs.n	800c456 <__mcmp+0x2e>
 800c454:	3802      	subs	r0, #2
 800c456:	bd30      	pop	{r4, r5, pc}
 800c458:	4294      	cmp	r4, r2
 800c45a:	d3f2      	bcc.n	800c442 <__mcmp+0x1a>
 800c45c:	e7fb      	b.n	800c456 <__mcmp+0x2e>
	...

0800c460 <__mdiff>:
 800c460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c462:	000c      	movs	r4, r1
 800c464:	b087      	sub	sp, #28
 800c466:	9000      	str	r0, [sp, #0]
 800c468:	0011      	movs	r1, r2
 800c46a:	0020      	movs	r0, r4
 800c46c:	0017      	movs	r7, r2
 800c46e:	f7ff ffdb 	bl	800c428 <__mcmp>
 800c472:	1e05      	subs	r5, r0, #0
 800c474:	d110      	bne.n	800c498 <__mdiff+0x38>
 800c476:	0001      	movs	r1, r0
 800c478:	9800      	ldr	r0, [sp, #0]
 800c47a:	f7ff fd4f 	bl	800bf1c <_Balloc>
 800c47e:	1e02      	subs	r2, r0, #0
 800c480:	d104      	bne.n	800c48c <__mdiff+0x2c>
 800c482:	4b40      	ldr	r3, [pc, #256]	@ (800c584 <__mdiff+0x124>)
 800c484:	4840      	ldr	r0, [pc, #256]	@ (800c588 <__mdiff+0x128>)
 800c486:	4941      	ldr	r1, [pc, #260]	@ (800c58c <__mdiff+0x12c>)
 800c488:	f000 fb22 	bl	800cad0 <__assert_func>
 800c48c:	2301      	movs	r3, #1
 800c48e:	6145      	str	r5, [r0, #20]
 800c490:	6103      	str	r3, [r0, #16]
 800c492:	0010      	movs	r0, r2
 800c494:	b007      	add	sp, #28
 800c496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c498:	2600      	movs	r6, #0
 800c49a:	42b0      	cmp	r0, r6
 800c49c:	da03      	bge.n	800c4a6 <__mdiff+0x46>
 800c49e:	0023      	movs	r3, r4
 800c4a0:	003c      	movs	r4, r7
 800c4a2:	001f      	movs	r7, r3
 800c4a4:	3601      	adds	r6, #1
 800c4a6:	6861      	ldr	r1, [r4, #4]
 800c4a8:	9800      	ldr	r0, [sp, #0]
 800c4aa:	f7ff fd37 	bl	800bf1c <_Balloc>
 800c4ae:	1e02      	subs	r2, r0, #0
 800c4b0:	d103      	bne.n	800c4ba <__mdiff+0x5a>
 800c4b2:	4b34      	ldr	r3, [pc, #208]	@ (800c584 <__mdiff+0x124>)
 800c4b4:	4834      	ldr	r0, [pc, #208]	@ (800c588 <__mdiff+0x128>)
 800c4b6:	4936      	ldr	r1, [pc, #216]	@ (800c590 <__mdiff+0x130>)
 800c4b8:	e7e6      	b.n	800c488 <__mdiff+0x28>
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	3414      	adds	r4, #20
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	18e3      	adds	r3, r4, r3
 800c4c4:	0021      	movs	r1, r4
 800c4c6:	9401      	str	r4, [sp, #4]
 800c4c8:	003c      	movs	r4, r7
 800c4ca:	9302      	str	r3, [sp, #8]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	3414      	adds	r4, #20
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	18e3      	adds	r3, r4, r3
 800c4d4:	9303      	str	r3, [sp, #12]
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	60c6      	str	r6, [r0, #12]
 800c4da:	468c      	mov	ip, r1
 800c4dc:	2000      	movs	r0, #0
 800c4de:	3314      	adds	r3, #20
 800c4e0:	9304      	str	r3, [sp, #16]
 800c4e2:	9305      	str	r3, [sp, #20]
 800c4e4:	4663      	mov	r3, ip
 800c4e6:	cb20      	ldmia	r3!, {r5}
 800c4e8:	b2a9      	uxth	r1, r5
 800c4ea:	000e      	movs	r6, r1
 800c4ec:	469c      	mov	ip, r3
 800c4ee:	cc08      	ldmia	r4!, {r3}
 800c4f0:	0c2d      	lsrs	r5, r5, #16
 800c4f2:	b299      	uxth	r1, r3
 800c4f4:	1a71      	subs	r1, r6, r1
 800c4f6:	1809      	adds	r1, r1, r0
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	1408      	asrs	r0, r1, #16
 800c4fc:	1aeb      	subs	r3, r5, r3
 800c4fe:	181b      	adds	r3, r3, r0
 800c500:	1418      	asrs	r0, r3, #16
 800c502:	b289      	uxth	r1, r1
 800c504:	041b      	lsls	r3, r3, #16
 800c506:	4319      	orrs	r1, r3
 800c508:	9b05      	ldr	r3, [sp, #20]
 800c50a:	c302      	stmia	r3!, {r1}
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	42a3      	cmp	r3, r4
 800c512:	d8e7      	bhi.n	800c4e4 <__mdiff+0x84>
 800c514:	0039      	movs	r1, r7
 800c516:	9c03      	ldr	r4, [sp, #12]
 800c518:	3115      	adds	r1, #21
 800c51a:	2304      	movs	r3, #4
 800c51c:	428c      	cmp	r4, r1
 800c51e:	d304      	bcc.n	800c52a <__mdiff+0xca>
 800c520:	1be3      	subs	r3, r4, r7
 800c522:	3b15      	subs	r3, #21
 800c524:	089b      	lsrs	r3, r3, #2
 800c526:	3301      	adds	r3, #1
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	9901      	ldr	r1, [sp, #4]
 800c52c:	18cd      	adds	r5, r1, r3
 800c52e:	9904      	ldr	r1, [sp, #16]
 800c530:	002e      	movs	r6, r5
 800c532:	18cb      	adds	r3, r1, r3
 800c534:	001f      	movs	r7, r3
 800c536:	9902      	ldr	r1, [sp, #8]
 800c538:	428e      	cmp	r6, r1
 800c53a:	d311      	bcc.n	800c560 <__mdiff+0x100>
 800c53c:	9c02      	ldr	r4, [sp, #8]
 800c53e:	1ee9      	subs	r1, r5, #3
 800c540:	2000      	movs	r0, #0
 800c542:	428c      	cmp	r4, r1
 800c544:	d304      	bcc.n	800c550 <__mdiff+0xf0>
 800c546:	0021      	movs	r1, r4
 800c548:	3103      	adds	r1, #3
 800c54a:	1b49      	subs	r1, r1, r5
 800c54c:	0889      	lsrs	r1, r1, #2
 800c54e:	0088      	lsls	r0, r1, #2
 800c550:	181b      	adds	r3, r3, r0
 800c552:	3b04      	subs	r3, #4
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	2900      	cmp	r1, #0
 800c558:	d010      	beq.n	800c57c <__mdiff+0x11c>
 800c55a:	9b00      	ldr	r3, [sp, #0]
 800c55c:	6113      	str	r3, [r2, #16]
 800c55e:	e798      	b.n	800c492 <__mdiff+0x32>
 800c560:	4684      	mov	ip, r0
 800c562:	ce02      	ldmia	r6!, {r1}
 800c564:	b288      	uxth	r0, r1
 800c566:	4460      	add	r0, ip
 800c568:	1400      	asrs	r0, r0, #16
 800c56a:	0c0c      	lsrs	r4, r1, #16
 800c56c:	1904      	adds	r4, r0, r4
 800c56e:	4461      	add	r1, ip
 800c570:	1420      	asrs	r0, r4, #16
 800c572:	b289      	uxth	r1, r1
 800c574:	0424      	lsls	r4, r4, #16
 800c576:	4321      	orrs	r1, r4
 800c578:	c702      	stmia	r7!, {r1}
 800c57a:	e7dc      	b.n	800c536 <__mdiff+0xd6>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	3901      	subs	r1, #1
 800c580:	9100      	str	r1, [sp, #0]
 800c582:	e7e6      	b.n	800c552 <__mdiff+0xf2>
 800c584:	0800d5b4 	.word	0x0800d5b4
 800c588:	0800d5c5 	.word	0x0800d5c5
 800c58c:	00000237 	.word	0x00000237
 800c590:	00000245 	.word	0x00000245

0800c594 <__d2b>:
 800c594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c596:	2101      	movs	r1, #1
 800c598:	0016      	movs	r6, r2
 800c59a:	001f      	movs	r7, r3
 800c59c:	f7ff fcbe 	bl	800bf1c <_Balloc>
 800c5a0:	1e04      	subs	r4, r0, #0
 800c5a2:	d105      	bne.n	800c5b0 <__d2b+0x1c>
 800c5a4:	0022      	movs	r2, r4
 800c5a6:	4b25      	ldr	r3, [pc, #148]	@ (800c63c <__d2b+0xa8>)
 800c5a8:	4825      	ldr	r0, [pc, #148]	@ (800c640 <__d2b+0xac>)
 800c5aa:	4926      	ldr	r1, [pc, #152]	@ (800c644 <__d2b+0xb0>)
 800c5ac:	f000 fa90 	bl	800cad0 <__assert_func>
 800c5b0:	033b      	lsls	r3, r7, #12
 800c5b2:	007d      	lsls	r5, r7, #1
 800c5b4:	0b1b      	lsrs	r3, r3, #12
 800c5b6:	0d6d      	lsrs	r5, r5, #21
 800c5b8:	d002      	beq.n	800c5c0 <__d2b+0x2c>
 800c5ba:	2280      	movs	r2, #128	@ 0x80
 800c5bc:	0352      	lsls	r2, r2, #13
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	d025      	beq.n	800c612 <__d2b+0x7e>
 800c5c6:	4668      	mov	r0, sp
 800c5c8:	9600      	str	r6, [sp, #0]
 800c5ca:	f7ff fd74 	bl	800c0b6 <__lo0bits>
 800c5ce:	9b01      	ldr	r3, [sp, #4]
 800c5d0:	9900      	ldr	r1, [sp, #0]
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d01b      	beq.n	800c60e <__d2b+0x7a>
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	001e      	movs	r6, r3
 800c5da:	1a12      	subs	r2, r2, r0
 800c5dc:	4096      	lsls	r6, r2
 800c5de:	0032      	movs	r2, r6
 800c5e0:	40c3      	lsrs	r3, r0
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	6162      	str	r2, [r4, #20]
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	9e01      	ldr	r6, [sp, #4]
 800c5ea:	61a6      	str	r6, [r4, #24]
 800c5ec:	1e73      	subs	r3, r6, #1
 800c5ee:	419e      	sbcs	r6, r3
 800c5f0:	3601      	adds	r6, #1
 800c5f2:	6126      	str	r6, [r4, #16]
 800c5f4:	2d00      	cmp	r5, #0
 800c5f6:	d014      	beq.n	800c622 <__d2b+0x8e>
 800c5f8:	2635      	movs	r6, #53	@ 0x35
 800c5fa:	4b13      	ldr	r3, [pc, #76]	@ (800c648 <__d2b+0xb4>)
 800c5fc:	18ed      	adds	r5, r5, r3
 800c5fe:	9b08      	ldr	r3, [sp, #32]
 800c600:	182d      	adds	r5, r5, r0
 800c602:	601d      	str	r5, [r3, #0]
 800c604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c606:	1a36      	subs	r6, r6, r0
 800c608:	601e      	str	r6, [r3, #0]
 800c60a:	0020      	movs	r0, r4
 800c60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c60e:	6161      	str	r1, [r4, #20]
 800c610:	e7ea      	b.n	800c5e8 <__d2b+0x54>
 800c612:	a801      	add	r0, sp, #4
 800c614:	f7ff fd4f 	bl	800c0b6 <__lo0bits>
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	2601      	movs	r6, #1
 800c61c:	6163      	str	r3, [r4, #20]
 800c61e:	3020      	adds	r0, #32
 800c620:	e7e7      	b.n	800c5f2 <__d2b+0x5e>
 800c622:	4b0a      	ldr	r3, [pc, #40]	@ (800c64c <__d2b+0xb8>)
 800c624:	18c0      	adds	r0, r0, r3
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	6018      	str	r0, [r3, #0]
 800c62a:	4b09      	ldr	r3, [pc, #36]	@ (800c650 <__d2b+0xbc>)
 800c62c:	18f3      	adds	r3, r6, r3
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	18e3      	adds	r3, r4, r3
 800c632:	6958      	ldr	r0, [r3, #20]
 800c634:	f7ff fd1e 	bl	800c074 <__hi0bits>
 800c638:	0176      	lsls	r6, r6, #5
 800c63a:	e7e3      	b.n	800c604 <__d2b+0x70>
 800c63c:	0800d5b4 	.word	0x0800d5b4
 800c640:	0800d5c5 	.word	0x0800d5c5
 800c644:	0000030f 	.word	0x0000030f
 800c648:	fffffbcd 	.word	0xfffffbcd
 800c64c:	fffffbce 	.word	0xfffffbce
 800c650:	3fffffff 	.word	0x3fffffff

0800c654 <__ssputs_r>:
 800c654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c656:	688e      	ldr	r6, [r1, #8]
 800c658:	b085      	sub	sp, #20
 800c65a:	001f      	movs	r7, r3
 800c65c:	000c      	movs	r4, r1
 800c65e:	680b      	ldr	r3, [r1, #0]
 800c660:	9002      	str	r0, [sp, #8]
 800c662:	9203      	str	r2, [sp, #12]
 800c664:	42be      	cmp	r6, r7
 800c666:	d830      	bhi.n	800c6ca <__ssputs_r+0x76>
 800c668:	210c      	movs	r1, #12
 800c66a:	5e62      	ldrsh	r2, [r4, r1]
 800c66c:	2190      	movs	r1, #144	@ 0x90
 800c66e:	00c9      	lsls	r1, r1, #3
 800c670:	420a      	tst	r2, r1
 800c672:	d028      	beq.n	800c6c6 <__ssputs_r+0x72>
 800c674:	2003      	movs	r0, #3
 800c676:	6921      	ldr	r1, [r4, #16]
 800c678:	1a5b      	subs	r3, r3, r1
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	6963      	ldr	r3, [r4, #20]
 800c67e:	4343      	muls	r3, r0
 800c680:	9801      	ldr	r0, [sp, #4]
 800c682:	0fdd      	lsrs	r5, r3, #31
 800c684:	18ed      	adds	r5, r5, r3
 800c686:	1c7b      	adds	r3, r7, #1
 800c688:	181b      	adds	r3, r3, r0
 800c68a:	106d      	asrs	r5, r5, #1
 800c68c:	42ab      	cmp	r3, r5
 800c68e:	d900      	bls.n	800c692 <__ssputs_r+0x3e>
 800c690:	001d      	movs	r5, r3
 800c692:	0552      	lsls	r2, r2, #21
 800c694:	d528      	bpl.n	800c6e8 <__ssputs_r+0x94>
 800c696:	0029      	movs	r1, r5
 800c698:	9802      	ldr	r0, [sp, #8]
 800c69a:	f7ff fbaf 	bl	800bdfc <_malloc_r>
 800c69e:	1e06      	subs	r6, r0, #0
 800c6a0:	d02c      	beq.n	800c6fc <__ssputs_r+0xa8>
 800c6a2:	9a01      	ldr	r2, [sp, #4]
 800c6a4:	6921      	ldr	r1, [r4, #16]
 800c6a6:	f000 fa09 	bl	800cabc <memcpy>
 800c6aa:	89a2      	ldrh	r2, [r4, #12]
 800c6ac:	4b18      	ldr	r3, [pc, #96]	@ (800c710 <__ssputs_r+0xbc>)
 800c6ae:	401a      	ands	r2, r3
 800c6b0:	2380      	movs	r3, #128	@ 0x80
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	18f6      	adds	r6, r6, r3
 800c6bc:	6026      	str	r6, [r4, #0]
 800c6be:	003e      	movs	r6, r7
 800c6c0:	6165      	str	r5, [r4, #20]
 800c6c2:	1aed      	subs	r5, r5, r3
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	42be      	cmp	r6, r7
 800c6c8:	d900      	bls.n	800c6cc <__ssputs_r+0x78>
 800c6ca:	003e      	movs	r6, r7
 800c6cc:	0032      	movs	r2, r6
 800c6ce:	9903      	ldr	r1, [sp, #12]
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	f000 f9ce 	bl	800ca72 <memmove>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	1b9b      	subs	r3, r3, r6
 800c6dc:	60a3      	str	r3, [r4, #8]
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	199b      	adds	r3, r3, r6
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	b005      	add	sp, #20
 800c6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e8:	002a      	movs	r2, r5
 800c6ea:	9802      	ldr	r0, [sp, #8]
 800c6ec:	f000 fa4d 	bl	800cb8a <_realloc_r>
 800c6f0:	1e06      	subs	r6, r0, #0
 800c6f2:	d1e0      	bne.n	800c6b6 <__ssputs_r+0x62>
 800c6f4:	6921      	ldr	r1, [r4, #16]
 800c6f6:	9802      	ldr	r0, [sp, #8]
 800c6f8:	f7ff fb0a 	bl	800bd10 <_free_r>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	2001      	movs	r0, #1
 800c700:	9a02      	ldr	r2, [sp, #8]
 800c702:	4240      	negs	r0, r0
 800c704:	6013      	str	r3, [r2, #0]
 800c706:	89a2      	ldrh	r2, [r4, #12]
 800c708:	3334      	adds	r3, #52	@ 0x34
 800c70a:	4313      	orrs	r3, r2
 800c70c:	81a3      	strh	r3, [r4, #12]
 800c70e:	e7e9      	b.n	800c6e4 <__ssputs_r+0x90>
 800c710:	fffffb7f 	.word	0xfffffb7f

0800c714 <_svfiprintf_r>:
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	b0a1      	sub	sp, #132	@ 0x84
 800c718:	9003      	str	r0, [sp, #12]
 800c71a:	001d      	movs	r5, r3
 800c71c:	898b      	ldrh	r3, [r1, #12]
 800c71e:	000f      	movs	r7, r1
 800c720:	0016      	movs	r6, r2
 800c722:	061b      	lsls	r3, r3, #24
 800c724:	d511      	bpl.n	800c74a <_svfiprintf_r+0x36>
 800c726:	690b      	ldr	r3, [r1, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10e      	bne.n	800c74a <_svfiprintf_r+0x36>
 800c72c:	2140      	movs	r1, #64	@ 0x40
 800c72e:	f7ff fb65 	bl	800bdfc <_malloc_r>
 800c732:	6038      	str	r0, [r7, #0]
 800c734:	6138      	str	r0, [r7, #16]
 800c736:	2800      	cmp	r0, #0
 800c738:	d105      	bne.n	800c746 <_svfiprintf_r+0x32>
 800c73a:	230c      	movs	r3, #12
 800c73c:	9a03      	ldr	r2, [sp, #12]
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	2001      	movs	r0, #1
 800c742:	4240      	negs	r0, r0
 800c744:	e0cf      	b.n	800c8e6 <_svfiprintf_r+0x1d2>
 800c746:	2340      	movs	r3, #64	@ 0x40
 800c748:	617b      	str	r3, [r7, #20]
 800c74a:	2300      	movs	r3, #0
 800c74c:	ac08      	add	r4, sp, #32
 800c74e:	6163      	str	r3, [r4, #20]
 800c750:	3320      	adds	r3, #32
 800c752:	7663      	strb	r3, [r4, #25]
 800c754:	3310      	adds	r3, #16
 800c756:	76a3      	strb	r3, [r4, #26]
 800c758:	9507      	str	r5, [sp, #28]
 800c75a:	0035      	movs	r5, r6
 800c75c:	782b      	ldrb	r3, [r5, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <_svfiprintf_r+0x52>
 800c762:	2b25      	cmp	r3, #37	@ 0x25
 800c764:	d148      	bne.n	800c7f8 <_svfiprintf_r+0xe4>
 800c766:	1bab      	subs	r3, r5, r6
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	42b5      	cmp	r5, r6
 800c76c:	d00b      	beq.n	800c786 <_svfiprintf_r+0x72>
 800c76e:	0032      	movs	r2, r6
 800c770:	0039      	movs	r1, r7
 800c772:	9803      	ldr	r0, [sp, #12]
 800c774:	f7ff ff6e 	bl	800c654 <__ssputs_r>
 800c778:	3001      	adds	r0, #1
 800c77a:	d100      	bne.n	800c77e <_svfiprintf_r+0x6a>
 800c77c:	e0ae      	b.n	800c8dc <_svfiprintf_r+0x1c8>
 800c77e:	6963      	ldr	r3, [r4, #20]
 800c780:	9a05      	ldr	r2, [sp, #20]
 800c782:	189b      	adds	r3, r3, r2
 800c784:	6163      	str	r3, [r4, #20]
 800c786:	782b      	ldrb	r3, [r5, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d100      	bne.n	800c78e <_svfiprintf_r+0x7a>
 800c78c:	e0a6      	b.n	800c8dc <_svfiprintf_r+0x1c8>
 800c78e:	2201      	movs	r2, #1
 800c790:	2300      	movs	r3, #0
 800c792:	4252      	negs	r2, r2
 800c794:	6062      	str	r2, [r4, #4]
 800c796:	a904      	add	r1, sp, #16
 800c798:	3254      	adds	r2, #84	@ 0x54
 800c79a:	1852      	adds	r2, r2, r1
 800c79c:	1c6e      	adds	r6, r5, #1
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	60e3      	str	r3, [r4, #12]
 800c7a2:	60a3      	str	r3, [r4, #8]
 800c7a4:	7013      	strb	r3, [r2, #0]
 800c7a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c7a8:	4b54      	ldr	r3, [pc, #336]	@ (800c8fc <_svfiprintf_r+0x1e8>)
 800c7aa:	2205      	movs	r2, #5
 800c7ac:	0018      	movs	r0, r3
 800c7ae:	7831      	ldrb	r1, [r6, #0]
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	f7fe fc2c 	bl	800b00e <memchr>
 800c7b6:	1c75      	adds	r5, r6, #1
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d11f      	bne.n	800c7fc <_svfiprintf_r+0xe8>
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	06d3      	lsls	r3, r2, #27
 800c7c0:	d504      	bpl.n	800c7cc <_svfiprintf_r+0xb8>
 800c7c2:	2353      	movs	r3, #83	@ 0x53
 800c7c4:	a904      	add	r1, sp, #16
 800c7c6:	185b      	adds	r3, r3, r1
 800c7c8:	2120      	movs	r1, #32
 800c7ca:	7019      	strb	r1, [r3, #0]
 800c7cc:	0713      	lsls	r3, r2, #28
 800c7ce:	d504      	bpl.n	800c7da <_svfiprintf_r+0xc6>
 800c7d0:	2353      	movs	r3, #83	@ 0x53
 800c7d2:	a904      	add	r1, sp, #16
 800c7d4:	185b      	adds	r3, r3, r1
 800c7d6:	212b      	movs	r1, #43	@ 0x2b
 800c7d8:	7019      	strb	r1, [r3, #0]
 800c7da:	7833      	ldrb	r3, [r6, #0]
 800c7dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7de:	d016      	beq.n	800c80e <_svfiprintf_r+0xfa>
 800c7e0:	0035      	movs	r5, r6
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	200a      	movs	r0, #10
 800c7e6:	68e3      	ldr	r3, [r4, #12]
 800c7e8:	782a      	ldrb	r2, [r5, #0]
 800c7ea:	1c6e      	adds	r6, r5, #1
 800c7ec:	3a30      	subs	r2, #48	@ 0x30
 800c7ee:	2a09      	cmp	r2, #9
 800c7f0:	d950      	bls.n	800c894 <_svfiprintf_r+0x180>
 800c7f2:	2900      	cmp	r1, #0
 800c7f4:	d111      	bne.n	800c81a <_svfiprintf_r+0x106>
 800c7f6:	e017      	b.n	800c828 <_svfiprintf_r+0x114>
 800c7f8:	3501      	adds	r5, #1
 800c7fa:	e7af      	b.n	800c75c <_svfiprintf_r+0x48>
 800c7fc:	9b05      	ldr	r3, [sp, #20]
 800c7fe:	6822      	ldr	r2, [r4, #0]
 800c800:	1ac0      	subs	r0, r0, r3
 800c802:	2301      	movs	r3, #1
 800c804:	4083      	lsls	r3, r0
 800c806:	4313      	orrs	r3, r2
 800c808:	002e      	movs	r6, r5
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	e7cc      	b.n	800c7a8 <_svfiprintf_r+0x94>
 800c80e:	9b07      	ldr	r3, [sp, #28]
 800c810:	1d19      	adds	r1, r3, #4
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	9107      	str	r1, [sp, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	db01      	blt.n	800c81e <_svfiprintf_r+0x10a>
 800c81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c81c:	e004      	b.n	800c828 <_svfiprintf_r+0x114>
 800c81e:	425b      	negs	r3, r3
 800c820:	60e3      	str	r3, [r4, #12]
 800c822:	2302      	movs	r3, #2
 800c824:	4313      	orrs	r3, r2
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	782b      	ldrb	r3, [r5, #0]
 800c82a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c82c:	d10c      	bne.n	800c848 <_svfiprintf_r+0x134>
 800c82e:	786b      	ldrb	r3, [r5, #1]
 800c830:	2b2a      	cmp	r3, #42	@ 0x2a
 800c832:	d134      	bne.n	800c89e <_svfiprintf_r+0x18a>
 800c834:	9b07      	ldr	r3, [sp, #28]
 800c836:	3502      	adds	r5, #2
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	9207      	str	r2, [sp, #28]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	da01      	bge.n	800c846 <_svfiprintf_r+0x132>
 800c842:	2301      	movs	r3, #1
 800c844:	425b      	negs	r3, r3
 800c846:	9309      	str	r3, [sp, #36]	@ 0x24
 800c848:	4e2d      	ldr	r6, [pc, #180]	@ (800c900 <_svfiprintf_r+0x1ec>)
 800c84a:	2203      	movs	r2, #3
 800c84c:	0030      	movs	r0, r6
 800c84e:	7829      	ldrb	r1, [r5, #0]
 800c850:	f7fe fbdd 	bl	800b00e <memchr>
 800c854:	2800      	cmp	r0, #0
 800c856:	d006      	beq.n	800c866 <_svfiprintf_r+0x152>
 800c858:	2340      	movs	r3, #64	@ 0x40
 800c85a:	1b80      	subs	r0, r0, r6
 800c85c:	4083      	lsls	r3, r0
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	3501      	adds	r5, #1
 800c862:	4313      	orrs	r3, r2
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	7829      	ldrb	r1, [r5, #0]
 800c868:	2206      	movs	r2, #6
 800c86a:	4826      	ldr	r0, [pc, #152]	@ (800c904 <_svfiprintf_r+0x1f0>)
 800c86c:	1c6e      	adds	r6, r5, #1
 800c86e:	7621      	strb	r1, [r4, #24]
 800c870:	f7fe fbcd 	bl	800b00e <memchr>
 800c874:	2800      	cmp	r0, #0
 800c876:	d038      	beq.n	800c8ea <_svfiprintf_r+0x1d6>
 800c878:	4b23      	ldr	r3, [pc, #140]	@ (800c908 <_svfiprintf_r+0x1f4>)
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d122      	bne.n	800c8c4 <_svfiprintf_r+0x1b0>
 800c87e:	2207      	movs	r2, #7
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	3307      	adds	r3, #7
 800c884:	4393      	bics	r3, r2
 800c886:	3308      	adds	r3, #8
 800c888:	9307      	str	r3, [sp, #28]
 800c88a:	6963      	ldr	r3, [r4, #20]
 800c88c:	9a04      	ldr	r2, [sp, #16]
 800c88e:	189b      	adds	r3, r3, r2
 800c890:	6163      	str	r3, [r4, #20]
 800c892:	e762      	b.n	800c75a <_svfiprintf_r+0x46>
 800c894:	4343      	muls	r3, r0
 800c896:	0035      	movs	r5, r6
 800c898:	2101      	movs	r1, #1
 800c89a:	189b      	adds	r3, r3, r2
 800c89c:	e7a4      	b.n	800c7e8 <_svfiprintf_r+0xd4>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	200a      	movs	r0, #10
 800c8a2:	0019      	movs	r1, r3
 800c8a4:	3501      	adds	r5, #1
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	782a      	ldrb	r2, [r5, #0]
 800c8aa:	1c6e      	adds	r6, r5, #1
 800c8ac:	3a30      	subs	r2, #48	@ 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d903      	bls.n	800c8ba <_svfiprintf_r+0x1a6>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0c8      	beq.n	800c848 <_svfiprintf_r+0x134>
 800c8b6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8b8:	e7c6      	b.n	800c848 <_svfiprintf_r+0x134>
 800c8ba:	4341      	muls	r1, r0
 800c8bc:	0035      	movs	r5, r6
 800c8be:	2301      	movs	r3, #1
 800c8c0:	1889      	adds	r1, r1, r2
 800c8c2:	e7f1      	b.n	800c8a8 <_svfiprintf_r+0x194>
 800c8c4:	aa07      	add	r2, sp, #28
 800c8c6:	9200      	str	r2, [sp, #0]
 800c8c8:	0021      	movs	r1, r4
 800c8ca:	003a      	movs	r2, r7
 800c8cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c90c <_svfiprintf_r+0x1f8>)
 800c8ce:	9803      	ldr	r0, [sp, #12]
 800c8d0:	f7fd fe0c 	bl	800a4ec <_printf_float>
 800c8d4:	9004      	str	r0, [sp, #16]
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	d1d6      	bne.n	800c88a <_svfiprintf_r+0x176>
 800c8dc:	89bb      	ldrh	r3, [r7, #12]
 800c8de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c8e0:	065b      	lsls	r3, r3, #25
 800c8e2:	d500      	bpl.n	800c8e6 <_svfiprintf_r+0x1d2>
 800c8e4:	e72c      	b.n	800c740 <_svfiprintf_r+0x2c>
 800c8e6:	b021      	add	sp, #132	@ 0x84
 800c8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ea:	aa07      	add	r2, sp, #28
 800c8ec:	9200      	str	r2, [sp, #0]
 800c8ee:	0021      	movs	r1, r4
 800c8f0:	003a      	movs	r2, r7
 800c8f2:	4b06      	ldr	r3, [pc, #24]	@ (800c90c <_svfiprintf_r+0x1f8>)
 800c8f4:	9803      	ldr	r0, [sp, #12]
 800c8f6:	f7fe f8a7 	bl	800aa48 <_printf_i>
 800c8fa:	e7eb      	b.n	800c8d4 <_svfiprintf_r+0x1c0>
 800c8fc:	0800d61e 	.word	0x0800d61e
 800c900:	0800d624 	.word	0x0800d624
 800c904:	0800d628 	.word	0x0800d628
 800c908:	0800a4ed 	.word	0x0800a4ed
 800c90c:	0800c655 	.word	0x0800c655

0800c910 <__sflush_r>:
 800c910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c912:	220c      	movs	r2, #12
 800c914:	5e8b      	ldrsh	r3, [r1, r2]
 800c916:	0005      	movs	r5, r0
 800c918:	000c      	movs	r4, r1
 800c91a:	071a      	lsls	r2, r3, #28
 800c91c:	d456      	bmi.n	800c9cc <__sflush_r+0xbc>
 800c91e:	684a      	ldr	r2, [r1, #4]
 800c920:	2a00      	cmp	r2, #0
 800c922:	dc02      	bgt.n	800c92a <__sflush_r+0x1a>
 800c924:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c926:	2a00      	cmp	r2, #0
 800c928:	dd4e      	ble.n	800c9c8 <__sflush_r+0xb8>
 800c92a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c92c:	2f00      	cmp	r7, #0
 800c92e:	d04b      	beq.n	800c9c8 <__sflush_r+0xb8>
 800c930:	2200      	movs	r2, #0
 800c932:	2080      	movs	r0, #128	@ 0x80
 800c934:	682e      	ldr	r6, [r5, #0]
 800c936:	602a      	str	r2, [r5, #0]
 800c938:	001a      	movs	r2, r3
 800c93a:	0140      	lsls	r0, r0, #5
 800c93c:	6a21      	ldr	r1, [r4, #32]
 800c93e:	4002      	ands	r2, r0
 800c940:	4203      	tst	r3, r0
 800c942:	d033      	beq.n	800c9ac <__sflush_r+0x9c>
 800c944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	075b      	lsls	r3, r3, #29
 800c94a:	d506      	bpl.n	800c95a <__sflush_r+0x4a>
 800c94c:	6863      	ldr	r3, [r4, #4]
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <__sflush_r+0x4a>
 800c956:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c958:	1ad2      	subs	r2, r2, r3
 800c95a:	2300      	movs	r3, #0
 800c95c:	0028      	movs	r0, r5
 800c95e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c960:	6a21      	ldr	r1, [r4, #32]
 800c962:	47b8      	blx	r7
 800c964:	89a2      	ldrh	r2, [r4, #12]
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d106      	bne.n	800c978 <__sflush_r+0x68>
 800c96a:	6829      	ldr	r1, [r5, #0]
 800c96c:	291d      	cmp	r1, #29
 800c96e:	d846      	bhi.n	800c9fe <__sflush_r+0xee>
 800c970:	4b29      	ldr	r3, [pc, #164]	@ (800ca18 <__sflush_r+0x108>)
 800c972:	40cb      	lsrs	r3, r1
 800c974:	07db      	lsls	r3, r3, #31
 800c976:	d542      	bpl.n	800c9fe <__sflush_r+0xee>
 800c978:	2300      	movs	r3, #0
 800c97a:	6063      	str	r3, [r4, #4]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	04d2      	lsls	r2, r2, #19
 800c982:	d505      	bpl.n	800c990 <__sflush_r+0x80>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d102      	bne.n	800c98e <__sflush_r+0x7e>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d100      	bne.n	800c990 <__sflush_r+0x80>
 800c98e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c992:	602e      	str	r6, [r5, #0]
 800c994:	2900      	cmp	r1, #0
 800c996:	d017      	beq.n	800c9c8 <__sflush_r+0xb8>
 800c998:	0023      	movs	r3, r4
 800c99a:	3344      	adds	r3, #68	@ 0x44
 800c99c:	4299      	cmp	r1, r3
 800c99e:	d002      	beq.n	800c9a6 <__sflush_r+0x96>
 800c9a0:	0028      	movs	r0, r5
 800c9a2:	f7ff f9b5 	bl	800bd10 <_free_r>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9aa:	e00d      	b.n	800c9c8 <__sflush_r+0xb8>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	47b8      	blx	r7
 800c9b2:	0002      	movs	r2, r0
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d1c6      	bne.n	800c946 <__sflush_r+0x36>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0c3      	beq.n	800c946 <__sflush_r+0x36>
 800c9be:	2b1d      	cmp	r3, #29
 800c9c0:	d001      	beq.n	800c9c6 <__sflush_r+0xb6>
 800c9c2:	2b16      	cmp	r3, #22
 800c9c4:	d11a      	bne.n	800c9fc <__sflush_r+0xec>
 800c9c6:	602e      	str	r6, [r5, #0]
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e01e      	b.n	800ca0a <__sflush_r+0xfa>
 800c9cc:	690e      	ldr	r6, [r1, #16]
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	d0fa      	beq.n	800c9c8 <__sflush_r+0xb8>
 800c9d2:	680f      	ldr	r7, [r1, #0]
 800c9d4:	600e      	str	r6, [r1, #0]
 800c9d6:	1bba      	subs	r2, r7, r6
 800c9d8:	9201      	str	r2, [sp, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	079b      	lsls	r3, r3, #30
 800c9de:	d100      	bne.n	800c9e2 <__sflush_r+0xd2>
 800c9e0:	694a      	ldr	r2, [r1, #20]
 800c9e2:	60a2      	str	r2, [r4, #8]
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	ddee      	ble.n	800c9c8 <__sflush_r+0xb8>
 800c9ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c9ec:	0032      	movs	r2, r6
 800c9ee:	001f      	movs	r7, r3
 800c9f0:	0028      	movs	r0, r5
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	6a21      	ldr	r1, [r4, #32]
 800c9f6:	47b8      	blx	r7
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	dc07      	bgt.n	800ca0c <__sflush_r+0xfc>
 800c9fc:	89a2      	ldrh	r2, [r4, #12]
 800c9fe:	2340      	movs	r3, #64	@ 0x40
 800ca00:	2001      	movs	r0, #1
 800ca02:	4313      	orrs	r3, r2
 800ca04:	b21b      	sxth	r3, r3
 800ca06:	81a3      	strh	r3, [r4, #12]
 800ca08:	4240      	negs	r0, r0
 800ca0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	1836      	adds	r6, r6, r0
 800ca10:	1a1b      	subs	r3, r3, r0
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	e7e6      	b.n	800c9e4 <__sflush_r+0xd4>
 800ca16:	46c0      	nop			@ (mov r8, r8)
 800ca18:	20400001 	.word	0x20400001

0800ca1c <_fflush_r>:
 800ca1c:	690b      	ldr	r3, [r1, #16]
 800ca1e:	b570      	push	{r4, r5, r6, lr}
 800ca20:	0005      	movs	r5, r0
 800ca22:	000c      	movs	r4, r1
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d102      	bne.n	800ca2e <_fflush_r+0x12>
 800ca28:	2500      	movs	r5, #0
 800ca2a:	0028      	movs	r0, r5
 800ca2c:	bd70      	pop	{r4, r5, r6, pc}
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d004      	beq.n	800ca3c <_fflush_r+0x20>
 800ca32:	6a03      	ldr	r3, [r0, #32]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <_fflush_r+0x20>
 800ca38:	f7fe f9a2 	bl	800ad80 <__sinit>
 800ca3c:	220c      	movs	r2, #12
 800ca3e:	5ea3      	ldrsh	r3, [r4, r2]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0f1      	beq.n	800ca28 <_fflush_r+0xc>
 800ca44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca46:	07d2      	lsls	r2, r2, #31
 800ca48:	d404      	bmi.n	800ca54 <_fflush_r+0x38>
 800ca4a:	059b      	lsls	r3, r3, #22
 800ca4c:	d402      	bmi.n	800ca54 <_fflush_r+0x38>
 800ca4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca50:	f7fe fad3 	bl	800affa <__retarget_lock_acquire_recursive>
 800ca54:	0028      	movs	r0, r5
 800ca56:	0021      	movs	r1, r4
 800ca58:	f7ff ff5a 	bl	800c910 <__sflush_r>
 800ca5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca5e:	0005      	movs	r5, r0
 800ca60:	07db      	lsls	r3, r3, #31
 800ca62:	d4e2      	bmi.n	800ca2a <_fflush_r+0xe>
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	059b      	lsls	r3, r3, #22
 800ca68:	d4df      	bmi.n	800ca2a <_fflush_r+0xe>
 800ca6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca6c:	f7fe fac6 	bl	800affc <__retarget_lock_release_recursive>
 800ca70:	e7db      	b.n	800ca2a <_fflush_r+0xe>

0800ca72 <memmove>:
 800ca72:	b510      	push	{r4, lr}
 800ca74:	4288      	cmp	r0, r1
 800ca76:	d902      	bls.n	800ca7e <memmove+0xc>
 800ca78:	188b      	adds	r3, r1, r2
 800ca7a:	4298      	cmp	r0, r3
 800ca7c:	d308      	bcc.n	800ca90 <memmove+0x1e>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d007      	beq.n	800ca94 <memmove+0x22>
 800ca84:	5ccc      	ldrb	r4, [r1, r3]
 800ca86:	54c4      	strb	r4, [r0, r3]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	e7f9      	b.n	800ca80 <memmove+0xe>
 800ca8c:	5c8b      	ldrb	r3, [r1, r2]
 800ca8e:	5483      	strb	r3, [r0, r2]
 800ca90:	3a01      	subs	r2, #1
 800ca92:	d2fb      	bcs.n	800ca8c <memmove+0x1a>
 800ca94:	bd10      	pop	{r4, pc}
	...

0800ca98 <_sbrk_r>:
 800ca98:	2300      	movs	r3, #0
 800ca9a:	b570      	push	{r4, r5, r6, lr}
 800ca9c:	4d06      	ldr	r5, [pc, #24]	@ (800cab8 <_sbrk_r+0x20>)
 800ca9e:	0004      	movs	r4, r0
 800caa0:	0008      	movs	r0, r1
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	f7f8 fa50 	bl	8004f48 <_sbrk>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	d103      	bne.n	800cab4 <_sbrk_r+0x1c>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d000      	beq.n	800cab4 <_sbrk_r+0x1c>
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	bd70      	pop	{r4, r5, r6, pc}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	20000698 	.word	0x20000698

0800cabc <memcpy>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b510      	push	{r4, lr}
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d100      	bne.n	800cac6 <memcpy+0xa>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	5ccc      	ldrb	r4, [r1, r3]
 800cac8:	54c4      	strb	r4, [r0, r3]
 800caca:	3301      	adds	r3, #1
 800cacc:	e7f8      	b.n	800cac0 <memcpy+0x4>
	...

0800cad0 <__assert_func>:
 800cad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cad2:	0014      	movs	r4, r2
 800cad4:	001a      	movs	r2, r3
 800cad6:	4b09      	ldr	r3, [pc, #36]	@ (800cafc <__assert_func+0x2c>)
 800cad8:	0005      	movs	r5, r0
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	000e      	movs	r6, r1
 800cade:	68d8      	ldr	r0, [r3, #12]
 800cae0:	4b07      	ldr	r3, [pc, #28]	@ (800cb00 <__assert_func+0x30>)
 800cae2:	2c00      	cmp	r4, #0
 800cae4:	d101      	bne.n	800caea <__assert_func+0x1a>
 800cae6:	4b07      	ldr	r3, [pc, #28]	@ (800cb04 <__assert_func+0x34>)
 800cae8:	001c      	movs	r4, r3
 800caea:	4907      	ldr	r1, [pc, #28]	@ (800cb08 <__assert_func+0x38>)
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	9402      	str	r4, [sp, #8]
 800caf0:	002b      	movs	r3, r5
 800caf2:	9600      	str	r6, [sp, #0]
 800caf4:	f000 f886 	bl	800cc04 <fiprintf>
 800caf8:	f000 f894 	bl	800cc24 <abort>
 800cafc:	20000028 	.word	0x20000028
 800cb00:	0800d639 	.word	0x0800d639
 800cb04:	0800d674 	.word	0x0800d674
 800cb08:	0800d646 	.word	0x0800d646

0800cb0c <_calloc_r>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	0c0b      	lsrs	r3, r1, #16
 800cb10:	0c15      	lsrs	r5, r2, #16
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d11e      	bne.n	800cb54 <_calloc_r+0x48>
 800cb16:	2d00      	cmp	r5, #0
 800cb18:	d10c      	bne.n	800cb34 <_calloc_r+0x28>
 800cb1a:	b289      	uxth	r1, r1
 800cb1c:	b294      	uxth	r4, r2
 800cb1e:	434c      	muls	r4, r1
 800cb20:	0021      	movs	r1, r4
 800cb22:	f7ff f96b 	bl	800bdfc <_malloc_r>
 800cb26:	1e05      	subs	r5, r0, #0
 800cb28:	d01b      	beq.n	800cb62 <_calloc_r+0x56>
 800cb2a:	0022      	movs	r2, r4
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	f7fe f9c9 	bl	800aec4 <memset>
 800cb32:	e016      	b.n	800cb62 <_calloc_r+0x56>
 800cb34:	1c2b      	adds	r3, r5, #0
 800cb36:	1c0c      	adds	r4, r1, #0
 800cb38:	b289      	uxth	r1, r1
 800cb3a:	b292      	uxth	r2, r2
 800cb3c:	434a      	muls	r2, r1
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	b2a1      	uxth	r1, r4
 800cb42:	4359      	muls	r1, r3
 800cb44:	0c14      	lsrs	r4, r2, #16
 800cb46:	190c      	adds	r4, r1, r4
 800cb48:	0c23      	lsrs	r3, r4, #16
 800cb4a:	d107      	bne.n	800cb5c <_calloc_r+0x50>
 800cb4c:	0424      	lsls	r4, r4, #16
 800cb4e:	b292      	uxth	r2, r2
 800cb50:	4314      	orrs	r4, r2
 800cb52:	e7e5      	b.n	800cb20 <_calloc_r+0x14>
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	d101      	bne.n	800cb5c <_calloc_r+0x50>
 800cb58:	1c14      	adds	r4, r2, #0
 800cb5a:	e7ed      	b.n	800cb38 <_calloc_r+0x2c>
 800cb5c:	230c      	movs	r3, #12
 800cb5e:	2500      	movs	r5, #0
 800cb60:	6003      	str	r3, [r0, #0]
 800cb62:	0028      	movs	r0, r5
 800cb64:	bd70      	pop	{r4, r5, r6, pc}

0800cb66 <__ascii_mbtowc>:
 800cb66:	b082      	sub	sp, #8
 800cb68:	2900      	cmp	r1, #0
 800cb6a:	d100      	bne.n	800cb6e <__ascii_mbtowc+0x8>
 800cb6c:	a901      	add	r1, sp, #4
 800cb6e:	1e10      	subs	r0, r2, #0
 800cb70:	d006      	beq.n	800cb80 <__ascii_mbtowc+0x1a>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d006      	beq.n	800cb84 <__ascii_mbtowc+0x1e>
 800cb76:	7813      	ldrb	r3, [r2, #0]
 800cb78:	600b      	str	r3, [r1, #0]
 800cb7a:	7810      	ldrb	r0, [r2, #0]
 800cb7c:	1e43      	subs	r3, r0, #1
 800cb7e:	4198      	sbcs	r0, r3
 800cb80:	b002      	add	sp, #8
 800cb82:	4770      	bx	lr
 800cb84:	2002      	movs	r0, #2
 800cb86:	4240      	negs	r0, r0
 800cb88:	e7fa      	b.n	800cb80 <__ascii_mbtowc+0x1a>

0800cb8a <_realloc_r>:
 800cb8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb8c:	0006      	movs	r6, r0
 800cb8e:	000c      	movs	r4, r1
 800cb90:	0015      	movs	r5, r2
 800cb92:	2900      	cmp	r1, #0
 800cb94:	d105      	bne.n	800cba2 <_realloc_r+0x18>
 800cb96:	0011      	movs	r1, r2
 800cb98:	f7ff f930 	bl	800bdfc <_malloc_r>
 800cb9c:	0004      	movs	r4, r0
 800cb9e:	0020      	movs	r0, r4
 800cba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	d103      	bne.n	800cbae <_realloc_r+0x24>
 800cba6:	f7ff f8b3 	bl	800bd10 <_free_r>
 800cbaa:	002c      	movs	r4, r5
 800cbac:	e7f7      	b.n	800cb9e <_realloc_r+0x14>
 800cbae:	f000 f840 	bl	800cc32 <_malloc_usable_size_r>
 800cbb2:	0007      	movs	r7, r0
 800cbb4:	4285      	cmp	r5, r0
 800cbb6:	d802      	bhi.n	800cbbe <_realloc_r+0x34>
 800cbb8:	0843      	lsrs	r3, r0, #1
 800cbba:	42ab      	cmp	r3, r5
 800cbbc:	d3ef      	bcc.n	800cb9e <_realloc_r+0x14>
 800cbbe:	0029      	movs	r1, r5
 800cbc0:	0030      	movs	r0, r6
 800cbc2:	f7ff f91b 	bl	800bdfc <_malloc_r>
 800cbc6:	9001      	str	r0, [sp, #4]
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d101      	bne.n	800cbd0 <_realloc_r+0x46>
 800cbcc:	9c01      	ldr	r4, [sp, #4]
 800cbce:	e7e6      	b.n	800cb9e <_realloc_r+0x14>
 800cbd0:	002a      	movs	r2, r5
 800cbd2:	42bd      	cmp	r5, r7
 800cbd4:	d900      	bls.n	800cbd8 <_realloc_r+0x4e>
 800cbd6:	003a      	movs	r2, r7
 800cbd8:	0021      	movs	r1, r4
 800cbda:	9801      	ldr	r0, [sp, #4]
 800cbdc:	f7ff ff6e 	bl	800cabc <memcpy>
 800cbe0:	0021      	movs	r1, r4
 800cbe2:	0030      	movs	r0, r6
 800cbe4:	f7ff f894 	bl	800bd10 <_free_r>
 800cbe8:	e7f0      	b.n	800cbcc <_realloc_r+0x42>

0800cbea <__ascii_wctomb>:
 800cbea:	0003      	movs	r3, r0
 800cbec:	1e08      	subs	r0, r1, #0
 800cbee:	d005      	beq.n	800cbfc <__ascii_wctomb+0x12>
 800cbf0:	2aff      	cmp	r2, #255	@ 0xff
 800cbf2:	d904      	bls.n	800cbfe <__ascii_wctomb+0x14>
 800cbf4:	228a      	movs	r2, #138	@ 0x8a
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	4240      	negs	r0, r0
 800cbfc:	4770      	bx	lr
 800cbfe:	2001      	movs	r0, #1
 800cc00:	700a      	strb	r2, [r1, #0]
 800cc02:	e7fb      	b.n	800cbfc <__ascii_wctomb+0x12>

0800cc04 <fiprintf>:
 800cc04:	b40e      	push	{r1, r2, r3}
 800cc06:	b517      	push	{r0, r1, r2, r4, lr}
 800cc08:	4c05      	ldr	r4, [pc, #20]	@ (800cc20 <fiprintf+0x1c>)
 800cc0a:	ab05      	add	r3, sp, #20
 800cc0c:	cb04      	ldmia	r3!, {r2}
 800cc0e:	0001      	movs	r1, r0
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	f000 f83c 	bl	800cc90 <_vfiprintf_r>
 800cc18:	bc1e      	pop	{r1, r2, r3, r4}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	b003      	add	sp, #12
 800cc1e:	4718      	bx	r3
 800cc20:	20000028 	.word	0x20000028

0800cc24 <abort>:
 800cc24:	2006      	movs	r0, #6
 800cc26:	b510      	push	{r4, lr}
 800cc28:	f000 fa18 	bl	800d05c <raise>
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f7f8 f919 	bl	8004e64 <_exit>

0800cc32 <_malloc_usable_size_r>:
 800cc32:	1f0b      	subs	r3, r1, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	1f18      	subs	r0, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	da01      	bge.n	800cc40 <_malloc_usable_size_r+0xe>
 800cc3c:	580b      	ldr	r3, [r1, r0]
 800cc3e:	18c0      	adds	r0, r0, r3
 800cc40:	4770      	bx	lr

0800cc42 <__sfputc_r>:
 800cc42:	6893      	ldr	r3, [r2, #8]
 800cc44:	b510      	push	{r4, lr}
 800cc46:	3b01      	subs	r3, #1
 800cc48:	6093      	str	r3, [r2, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	da04      	bge.n	800cc58 <__sfputc_r+0x16>
 800cc4e:	6994      	ldr	r4, [r2, #24]
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	db07      	blt.n	800cc64 <__sfputc_r+0x22>
 800cc54:	290a      	cmp	r1, #10
 800cc56:	d005      	beq.n	800cc64 <__sfputc_r+0x22>
 800cc58:	6813      	ldr	r3, [r2, #0]
 800cc5a:	1c58      	adds	r0, r3, #1
 800cc5c:	6010      	str	r0, [r2, #0]
 800cc5e:	7019      	strb	r1, [r3, #0]
 800cc60:	0008      	movs	r0, r1
 800cc62:	bd10      	pop	{r4, pc}
 800cc64:	f000 f930 	bl	800cec8 <__swbuf_r>
 800cc68:	0001      	movs	r1, r0
 800cc6a:	e7f9      	b.n	800cc60 <__sfputc_r+0x1e>

0800cc6c <__sfputs_r>:
 800cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6e:	0006      	movs	r6, r0
 800cc70:	000f      	movs	r7, r1
 800cc72:	0014      	movs	r4, r2
 800cc74:	18d5      	adds	r5, r2, r3
 800cc76:	42ac      	cmp	r4, r5
 800cc78:	d101      	bne.n	800cc7e <__sfputs_r+0x12>
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	e007      	b.n	800cc8e <__sfputs_r+0x22>
 800cc7e:	7821      	ldrb	r1, [r4, #0]
 800cc80:	003a      	movs	r2, r7
 800cc82:	0030      	movs	r0, r6
 800cc84:	f7ff ffdd 	bl	800cc42 <__sfputc_r>
 800cc88:	3401      	adds	r4, #1
 800cc8a:	1c43      	adds	r3, r0, #1
 800cc8c:	d1f3      	bne.n	800cc76 <__sfputs_r+0xa>
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc90 <_vfiprintf_r>:
 800cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc92:	b0a1      	sub	sp, #132	@ 0x84
 800cc94:	000f      	movs	r7, r1
 800cc96:	0015      	movs	r5, r2
 800cc98:	001e      	movs	r6, r3
 800cc9a:	9003      	str	r0, [sp, #12]
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d004      	beq.n	800ccaa <_vfiprintf_r+0x1a>
 800cca0:	6a03      	ldr	r3, [r0, #32]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <_vfiprintf_r+0x1a>
 800cca6:	f7fe f86b 	bl	800ad80 <__sinit>
 800ccaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccac:	07db      	lsls	r3, r3, #31
 800ccae:	d405      	bmi.n	800ccbc <_vfiprintf_r+0x2c>
 800ccb0:	89bb      	ldrh	r3, [r7, #12]
 800ccb2:	059b      	lsls	r3, r3, #22
 800ccb4:	d402      	bmi.n	800ccbc <_vfiprintf_r+0x2c>
 800ccb6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ccb8:	f7fe f99f 	bl	800affa <__retarget_lock_acquire_recursive>
 800ccbc:	89bb      	ldrh	r3, [r7, #12]
 800ccbe:	071b      	lsls	r3, r3, #28
 800ccc0:	d502      	bpl.n	800ccc8 <_vfiprintf_r+0x38>
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d113      	bne.n	800ccf0 <_vfiprintf_r+0x60>
 800ccc8:	0039      	movs	r1, r7
 800ccca:	9803      	ldr	r0, [sp, #12]
 800cccc:	f000 f93e 	bl	800cf4c <__swsetup_r>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d00d      	beq.n	800ccf0 <_vfiprintf_r+0x60>
 800ccd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccd6:	07db      	lsls	r3, r3, #31
 800ccd8:	d503      	bpl.n	800cce2 <_vfiprintf_r+0x52>
 800ccda:	2001      	movs	r0, #1
 800ccdc:	4240      	negs	r0, r0
 800ccde:	b021      	add	sp, #132	@ 0x84
 800cce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce2:	89bb      	ldrh	r3, [r7, #12]
 800cce4:	059b      	lsls	r3, r3, #22
 800cce6:	d4f8      	bmi.n	800ccda <_vfiprintf_r+0x4a>
 800cce8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ccea:	f7fe f987 	bl	800affc <__retarget_lock_release_recursive>
 800ccee:	e7f4      	b.n	800ccda <_vfiprintf_r+0x4a>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	ac08      	add	r4, sp, #32
 800ccf4:	6163      	str	r3, [r4, #20]
 800ccf6:	3320      	adds	r3, #32
 800ccf8:	7663      	strb	r3, [r4, #25]
 800ccfa:	3310      	adds	r3, #16
 800ccfc:	76a3      	strb	r3, [r4, #26]
 800ccfe:	9607      	str	r6, [sp, #28]
 800cd00:	002e      	movs	r6, r5
 800cd02:	7833      	ldrb	r3, [r6, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <_vfiprintf_r+0x7c>
 800cd08:	2b25      	cmp	r3, #37	@ 0x25
 800cd0a:	d148      	bne.n	800cd9e <_vfiprintf_r+0x10e>
 800cd0c:	1b73      	subs	r3, r6, r5
 800cd0e:	9305      	str	r3, [sp, #20]
 800cd10:	42ae      	cmp	r6, r5
 800cd12:	d00b      	beq.n	800cd2c <_vfiprintf_r+0x9c>
 800cd14:	002a      	movs	r2, r5
 800cd16:	0039      	movs	r1, r7
 800cd18:	9803      	ldr	r0, [sp, #12]
 800cd1a:	f7ff ffa7 	bl	800cc6c <__sfputs_r>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d100      	bne.n	800cd24 <_vfiprintf_r+0x94>
 800cd22:	e0ae      	b.n	800ce82 <_vfiprintf_r+0x1f2>
 800cd24:	6963      	ldr	r3, [r4, #20]
 800cd26:	9a05      	ldr	r2, [sp, #20]
 800cd28:	189b      	adds	r3, r3, r2
 800cd2a:	6163      	str	r3, [r4, #20]
 800cd2c:	7833      	ldrb	r3, [r6, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d100      	bne.n	800cd34 <_vfiprintf_r+0xa4>
 800cd32:	e0a6      	b.n	800ce82 <_vfiprintf_r+0x1f2>
 800cd34:	2201      	movs	r2, #1
 800cd36:	2300      	movs	r3, #0
 800cd38:	4252      	negs	r2, r2
 800cd3a:	6062      	str	r2, [r4, #4]
 800cd3c:	a904      	add	r1, sp, #16
 800cd3e:	3254      	adds	r2, #84	@ 0x54
 800cd40:	1852      	adds	r2, r2, r1
 800cd42:	1c75      	adds	r5, r6, #1
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	60e3      	str	r3, [r4, #12]
 800cd48:	60a3      	str	r3, [r4, #8]
 800cd4a:	7013      	strb	r3, [r2, #0]
 800cd4c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cd4e:	4b59      	ldr	r3, [pc, #356]	@ (800ceb4 <_vfiprintf_r+0x224>)
 800cd50:	2205      	movs	r2, #5
 800cd52:	0018      	movs	r0, r3
 800cd54:	7829      	ldrb	r1, [r5, #0]
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	f7fe f959 	bl	800b00e <memchr>
 800cd5c:	1c6e      	adds	r6, r5, #1
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d11f      	bne.n	800cda2 <_vfiprintf_r+0x112>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	06d3      	lsls	r3, r2, #27
 800cd66:	d504      	bpl.n	800cd72 <_vfiprintf_r+0xe2>
 800cd68:	2353      	movs	r3, #83	@ 0x53
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	185b      	adds	r3, r3, r1
 800cd6e:	2120      	movs	r1, #32
 800cd70:	7019      	strb	r1, [r3, #0]
 800cd72:	0713      	lsls	r3, r2, #28
 800cd74:	d504      	bpl.n	800cd80 <_vfiprintf_r+0xf0>
 800cd76:	2353      	movs	r3, #83	@ 0x53
 800cd78:	a904      	add	r1, sp, #16
 800cd7a:	185b      	adds	r3, r3, r1
 800cd7c:	212b      	movs	r1, #43	@ 0x2b
 800cd7e:	7019      	strb	r1, [r3, #0]
 800cd80:	782b      	ldrb	r3, [r5, #0]
 800cd82:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd84:	d016      	beq.n	800cdb4 <_vfiprintf_r+0x124>
 800cd86:	002e      	movs	r6, r5
 800cd88:	2100      	movs	r1, #0
 800cd8a:	200a      	movs	r0, #10
 800cd8c:	68e3      	ldr	r3, [r4, #12]
 800cd8e:	7832      	ldrb	r2, [r6, #0]
 800cd90:	1c75      	adds	r5, r6, #1
 800cd92:	3a30      	subs	r2, #48	@ 0x30
 800cd94:	2a09      	cmp	r2, #9
 800cd96:	d950      	bls.n	800ce3a <_vfiprintf_r+0x1aa>
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	d111      	bne.n	800cdc0 <_vfiprintf_r+0x130>
 800cd9c:	e017      	b.n	800cdce <_vfiprintf_r+0x13e>
 800cd9e:	3601      	adds	r6, #1
 800cda0:	e7af      	b.n	800cd02 <_vfiprintf_r+0x72>
 800cda2:	9b05      	ldr	r3, [sp, #20]
 800cda4:	6822      	ldr	r2, [r4, #0]
 800cda6:	1ac0      	subs	r0, r0, r3
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4083      	lsls	r3, r0
 800cdac:	4313      	orrs	r3, r2
 800cdae:	0035      	movs	r5, r6
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	e7cc      	b.n	800cd4e <_vfiprintf_r+0xbe>
 800cdb4:	9b07      	ldr	r3, [sp, #28]
 800cdb6:	1d19      	adds	r1, r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	9107      	str	r1, [sp, #28]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	db01      	blt.n	800cdc4 <_vfiprintf_r+0x134>
 800cdc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdc2:	e004      	b.n	800cdce <_vfiprintf_r+0x13e>
 800cdc4:	425b      	negs	r3, r3
 800cdc6:	60e3      	str	r3, [r4, #12]
 800cdc8:	2302      	movs	r3, #2
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	7833      	ldrb	r3, [r6, #0]
 800cdd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdd2:	d10c      	bne.n	800cdee <_vfiprintf_r+0x15e>
 800cdd4:	7873      	ldrb	r3, [r6, #1]
 800cdd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdd8:	d134      	bne.n	800ce44 <_vfiprintf_r+0x1b4>
 800cdda:	9b07      	ldr	r3, [sp, #28]
 800cddc:	3602      	adds	r6, #2
 800cdde:	1d1a      	adds	r2, r3, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9207      	str	r2, [sp, #28]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da01      	bge.n	800cdec <_vfiprintf_r+0x15c>
 800cde8:	2301      	movs	r3, #1
 800cdea:	425b      	negs	r3, r3
 800cdec:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdee:	4d32      	ldr	r5, [pc, #200]	@ (800ceb8 <_vfiprintf_r+0x228>)
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	0028      	movs	r0, r5
 800cdf4:	7831      	ldrb	r1, [r6, #0]
 800cdf6:	f7fe f90a 	bl	800b00e <memchr>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d006      	beq.n	800ce0c <_vfiprintf_r+0x17c>
 800cdfe:	2340      	movs	r3, #64	@ 0x40
 800ce00:	1b40      	subs	r0, r0, r5
 800ce02:	4083      	lsls	r3, r0
 800ce04:	6822      	ldr	r2, [r4, #0]
 800ce06:	3601      	adds	r6, #1
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	7831      	ldrb	r1, [r6, #0]
 800ce0e:	2206      	movs	r2, #6
 800ce10:	482a      	ldr	r0, [pc, #168]	@ (800cebc <_vfiprintf_r+0x22c>)
 800ce12:	1c75      	adds	r5, r6, #1
 800ce14:	7621      	strb	r1, [r4, #24]
 800ce16:	f7fe f8fa 	bl	800b00e <memchr>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d040      	beq.n	800cea0 <_vfiprintf_r+0x210>
 800ce1e:	4b28      	ldr	r3, [pc, #160]	@ (800cec0 <_vfiprintf_r+0x230>)
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d122      	bne.n	800ce6a <_vfiprintf_r+0x1da>
 800ce24:	2207      	movs	r2, #7
 800ce26:	9b07      	ldr	r3, [sp, #28]
 800ce28:	3307      	adds	r3, #7
 800ce2a:	4393      	bics	r3, r2
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	9307      	str	r3, [sp, #28]
 800ce30:	6963      	ldr	r3, [r4, #20]
 800ce32:	9a04      	ldr	r2, [sp, #16]
 800ce34:	189b      	adds	r3, r3, r2
 800ce36:	6163      	str	r3, [r4, #20]
 800ce38:	e762      	b.n	800cd00 <_vfiprintf_r+0x70>
 800ce3a:	4343      	muls	r3, r0
 800ce3c:	002e      	movs	r6, r5
 800ce3e:	2101      	movs	r1, #1
 800ce40:	189b      	adds	r3, r3, r2
 800ce42:	e7a4      	b.n	800cd8e <_vfiprintf_r+0xfe>
 800ce44:	2300      	movs	r3, #0
 800ce46:	200a      	movs	r0, #10
 800ce48:	0019      	movs	r1, r3
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	6063      	str	r3, [r4, #4]
 800ce4e:	7832      	ldrb	r2, [r6, #0]
 800ce50:	1c75      	adds	r5, r6, #1
 800ce52:	3a30      	subs	r2, #48	@ 0x30
 800ce54:	2a09      	cmp	r2, #9
 800ce56:	d903      	bls.n	800ce60 <_vfiprintf_r+0x1d0>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0c8      	beq.n	800cdee <_vfiprintf_r+0x15e>
 800ce5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce5e:	e7c6      	b.n	800cdee <_vfiprintf_r+0x15e>
 800ce60:	4341      	muls	r1, r0
 800ce62:	002e      	movs	r6, r5
 800ce64:	2301      	movs	r3, #1
 800ce66:	1889      	adds	r1, r1, r2
 800ce68:	e7f1      	b.n	800ce4e <_vfiprintf_r+0x1be>
 800ce6a:	aa07      	add	r2, sp, #28
 800ce6c:	9200      	str	r2, [sp, #0]
 800ce6e:	0021      	movs	r1, r4
 800ce70:	003a      	movs	r2, r7
 800ce72:	4b14      	ldr	r3, [pc, #80]	@ (800cec4 <_vfiprintf_r+0x234>)
 800ce74:	9803      	ldr	r0, [sp, #12]
 800ce76:	f7fd fb39 	bl	800a4ec <_printf_float>
 800ce7a:	9004      	str	r0, [sp, #16]
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	d1d6      	bne.n	800ce30 <_vfiprintf_r+0x1a0>
 800ce82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce84:	07db      	lsls	r3, r3, #31
 800ce86:	d405      	bmi.n	800ce94 <_vfiprintf_r+0x204>
 800ce88:	89bb      	ldrh	r3, [r7, #12]
 800ce8a:	059b      	lsls	r3, r3, #22
 800ce8c:	d402      	bmi.n	800ce94 <_vfiprintf_r+0x204>
 800ce8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ce90:	f7fe f8b4 	bl	800affc <__retarget_lock_release_recursive>
 800ce94:	89bb      	ldrh	r3, [r7, #12]
 800ce96:	065b      	lsls	r3, r3, #25
 800ce98:	d500      	bpl.n	800ce9c <_vfiprintf_r+0x20c>
 800ce9a:	e71e      	b.n	800ccda <_vfiprintf_r+0x4a>
 800ce9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ce9e:	e71e      	b.n	800ccde <_vfiprintf_r+0x4e>
 800cea0:	aa07      	add	r2, sp, #28
 800cea2:	9200      	str	r2, [sp, #0]
 800cea4:	0021      	movs	r1, r4
 800cea6:	003a      	movs	r2, r7
 800cea8:	4b06      	ldr	r3, [pc, #24]	@ (800cec4 <_vfiprintf_r+0x234>)
 800ceaa:	9803      	ldr	r0, [sp, #12]
 800ceac:	f7fd fdcc 	bl	800aa48 <_printf_i>
 800ceb0:	e7e3      	b.n	800ce7a <_vfiprintf_r+0x1ea>
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	0800d61e 	.word	0x0800d61e
 800ceb8:	0800d624 	.word	0x0800d624
 800cebc:	0800d628 	.word	0x0800d628
 800cec0:	0800a4ed 	.word	0x0800a4ed
 800cec4:	0800cc6d 	.word	0x0800cc6d

0800cec8 <__swbuf_r>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	0006      	movs	r6, r0
 800cecc:	000d      	movs	r5, r1
 800cece:	0014      	movs	r4, r2
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d004      	beq.n	800cede <__swbuf_r+0x16>
 800ced4:	6a03      	ldr	r3, [r0, #32]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <__swbuf_r+0x16>
 800ceda:	f7fd ff51 	bl	800ad80 <__sinit>
 800cede:	69a3      	ldr	r3, [r4, #24]
 800cee0:	60a3      	str	r3, [r4, #8]
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	071b      	lsls	r3, r3, #28
 800cee6:	d502      	bpl.n	800ceee <__swbuf_r+0x26>
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d109      	bne.n	800cf02 <__swbuf_r+0x3a>
 800ceee:	0021      	movs	r1, r4
 800cef0:	0030      	movs	r0, r6
 800cef2:	f000 f82b 	bl	800cf4c <__swsetup_r>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d003      	beq.n	800cf02 <__swbuf_r+0x3a>
 800cefa:	2501      	movs	r5, #1
 800cefc:	426d      	negs	r5, r5
 800cefe:	0028      	movs	r0, r5
 800cf00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	6820      	ldr	r0, [r4, #0]
 800cf06:	b2ef      	uxtb	r7, r5
 800cf08:	1ac0      	subs	r0, r0, r3
 800cf0a:	6963      	ldr	r3, [r4, #20]
 800cf0c:	b2ed      	uxtb	r5, r5
 800cf0e:	4283      	cmp	r3, r0
 800cf10:	dc05      	bgt.n	800cf1e <__swbuf_r+0x56>
 800cf12:	0021      	movs	r1, r4
 800cf14:	0030      	movs	r0, r6
 800cf16:	f7ff fd81 	bl	800ca1c <_fflush_r>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d1ed      	bne.n	800cefa <__swbuf_r+0x32>
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	3001      	adds	r0, #1
 800cf22:	3b01      	subs	r3, #1
 800cf24:	60a3      	str	r3, [r4, #8]
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	6022      	str	r2, [r4, #0]
 800cf2c:	701f      	strb	r7, [r3, #0]
 800cf2e:	6963      	ldr	r3, [r4, #20]
 800cf30:	4283      	cmp	r3, r0
 800cf32:	d004      	beq.n	800cf3e <__swbuf_r+0x76>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	07db      	lsls	r3, r3, #31
 800cf38:	d5e1      	bpl.n	800cefe <__swbuf_r+0x36>
 800cf3a:	2d0a      	cmp	r5, #10
 800cf3c:	d1df      	bne.n	800cefe <__swbuf_r+0x36>
 800cf3e:	0021      	movs	r1, r4
 800cf40:	0030      	movs	r0, r6
 800cf42:	f7ff fd6b 	bl	800ca1c <_fflush_r>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d0d9      	beq.n	800cefe <__swbuf_r+0x36>
 800cf4a:	e7d6      	b.n	800cefa <__swbuf_r+0x32>

0800cf4c <__swsetup_r>:
 800cf4c:	4b2d      	ldr	r3, [pc, #180]	@ (800d004 <__swsetup_r+0xb8>)
 800cf4e:	b570      	push	{r4, r5, r6, lr}
 800cf50:	0005      	movs	r5, r0
 800cf52:	6818      	ldr	r0, [r3, #0]
 800cf54:	000c      	movs	r4, r1
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d004      	beq.n	800cf64 <__swsetup_r+0x18>
 800cf5a:	6a03      	ldr	r3, [r0, #32]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <__swsetup_r+0x18>
 800cf60:	f7fd ff0e 	bl	800ad80 <__sinit>
 800cf64:	220c      	movs	r2, #12
 800cf66:	5ea3      	ldrsh	r3, [r4, r2]
 800cf68:	071a      	lsls	r2, r3, #28
 800cf6a:	d423      	bmi.n	800cfb4 <__swsetup_r+0x68>
 800cf6c:	06da      	lsls	r2, r3, #27
 800cf6e:	d407      	bmi.n	800cf80 <__swsetup_r+0x34>
 800cf70:	2209      	movs	r2, #9
 800cf72:	602a      	str	r2, [r5, #0]
 800cf74:	2240      	movs	r2, #64	@ 0x40
 800cf76:	2001      	movs	r0, #1
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	4240      	negs	r0, r0
 800cf7e:	e03a      	b.n	800cff6 <__swsetup_r+0xaa>
 800cf80:	075b      	lsls	r3, r3, #29
 800cf82:	d513      	bpl.n	800cfac <__swsetup_r+0x60>
 800cf84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf86:	2900      	cmp	r1, #0
 800cf88:	d008      	beq.n	800cf9c <__swsetup_r+0x50>
 800cf8a:	0023      	movs	r3, r4
 800cf8c:	3344      	adds	r3, #68	@ 0x44
 800cf8e:	4299      	cmp	r1, r3
 800cf90:	d002      	beq.n	800cf98 <__swsetup_r+0x4c>
 800cf92:	0028      	movs	r0, r5
 800cf94:	f7fe febc 	bl	800bd10 <_free_r>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf9c:	2224      	movs	r2, #36	@ 0x24
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	4393      	bics	r3, r2
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	6063      	str	r3, [r4, #4]
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	6023      	str	r3, [r4, #0]
 800cfac:	2308      	movs	r3, #8
 800cfae:	89a2      	ldrh	r2, [r4, #12]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	81a3      	strh	r3, [r4, #12]
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10b      	bne.n	800cfd2 <__swsetup_r+0x86>
 800cfba:	21a0      	movs	r1, #160	@ 0xa0
 800cfbc:	2280      	movs	r2, #128	@ 0x80
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	0089      	lsls	r1, r1, #2
 800cfc2:	0092      	lsls	r2, r2, #2
 800cfc4:	400b      	ands	r3, r1
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d003      	beq.n	800cfd2 <__swsetup_r+0x86>
 800cfca:	0021      	movs	r1, r4
 800cfcc:	0028      	movs	r0, r5
 800cfce:	f000 f88f 	bl	800d0f0 <__smakebuf_r>
 800cfd2:	220c      	movs	r2, #12
 800cfd4:	5ea3      	ldrsh	r3, [r4, r2]
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	001a      	movs	r2, r3
 800cfda:	400a      	ands	r2, r1
 800cfdc:	420b      	tst	r3, r1
 800cfde:	d00b      	beq.n	800cff8 <__swsetup_r+0xac>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	60a2      	str	r2, [r4, #8]
 800cfe4:	6962      	ldr	r2, [r4, #20]
 800cfe6:	4252      	negs	r2, r2
 800cfe8:	61a2      	str	r2, [r4, #24]
 800cfea:	2000      	movs	r0, #0
 800cfec:	6922      	ldr	r2, [r4, #16]
 800cfee:	4282      	cmp	r2, r0
 800cff0:	d101      	bne.n	800cff6 <__swsetup_r+0xaa>
 800cff2:	061a      	lsls	r2, r3, #24
 800cff4:	d4be      	bmi.n	800cf74 <__swsetup_r+0x28>
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	0799      	lsls	r1, r3, #30
 800cffa:	d400      	bmi.n	800cffe <__swsetup_r+0xb2>
 800cffc:	6962      	ldr	r2, [r4, #20]
 800cffe:	60a2      	str	r2, [r4, #8]
 800d000:	e7f3      	b.n	800cfea <__swsetup_r+0x9e>
 800d002:	46c0      	nop			@ (mov r8, r8)
 800d004:	20000028 	.word	0x20000028

0800d008 <_raise_r>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	0004      	movs	r4, r0
 800d00c:	000d      	movs	r5, r1
 800d00e:	291f      	cmp	r1, #31
 800d010:	d904      	bls.n	800d01c <_raise_r+0x14>
 800d012:	2316      	movs	r3, #22
 800d014:	6003      	str	r3, [r0, #0]
 800d016:	2001      	movs	r0, #1
 800d018:	4240      	negs	r0, r0
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d004      	beq.n	800d02c <_raise_r+0x24>
 800d022:	008a      	lsls	r2, r1, #2
 800d024:	189b      	adds	r3, r3, r2
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	2a00      	cmp	r2, #0
 800d02a:	d108      	bne.n	800d03e <_raise_r+0x36>
 800d02c:	0020      	movs	r0, r4
 800d02e:	f000 f831 	bl	800d094 <_getpid_r>
 800d032:	002a      	movs	r2, r5
 800d034:	0001      	movs	r1, r0
 800d036:	0020      	movs	r0, r4
 800d038:	f000 f81a 	bl	800d070 <_kill_r>
 800d03c:	e7ed      	b.n	800d01a <_raise_r+0x12>
 800d03e:	2a01      	cmp	r2, #1
 800d040:	d009      	beq.n	800d056 <_raise_r+0x4e>
 800d042:	1c51      	adds	r1, r2, #1
 800d044:	d103      	bne.n	800d04e <_raise_r+0x46>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	2001      	movs	r0, #1
 800d04c:	e7e5      	b.n	800d01a <_raise_r+0x12>
 800d04e:	2100      	movs	r1, #0
 800d050:	0028      	movs	r0, r5
 800d052:	6019      	str	r1, [r3, #0]
 800d054:	4790      	blx	r2
 800d056:	2000      	movs	r0, #0
 800d058:	e7df      	b.n	800d01a <_raise_r+0x12>
	...

0800d05c <raise>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	4b03      	ldr	r3, [pc, #12]	@ (800d06c <raise+0x10>)
 800d060:	0001      	movs	r1, r0
 800d062:	6818      	ldr	r0, [r3, #0]
 800d064:	f7ff ffd0 	bl	800d008 <_raise_r>
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	20000028 	.word	0x20000028

0800d070 <_kill_r>:
 800d070:	2300      	movs	r3, #0
 800d072:	b570      	push	{r4, r5, r6, lr}
 800d074:	4d06      	ldr	r5, [pc, #24]	@ (800d090 <_kill_r+0x20>)
 800d076:	0004      	movs	r4, r0
 800d078:	0008      	movs	r0, r1
 800d07a:	0011      	movs	r1, r2
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	f7f7 fee1 	bl	8004e44 <_kill>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d103      	bne.n	800d08e <_kill_r+0x1e>
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d000      	beq.n	800d08e <_kill_r+0x1e>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	20000698 	.word	0x20000698

0800d094 <_getpid_r>:
 800d094:	b510      	push	{r4, lr}
 800d096:	f7f7 fecf 	bl	8004e38 <_getpid>
 800d09a:	bd10      	pop	{r4, pc}

0800d09c <__swhatbuf_r>:
 800d09c:	b570      	push	{r4, r5, r6, lr}
 800d09e:	000e      	movs	r6, r1
 800d0a0:	001d      	movs	r5, r3
 800d0a2:	230e      	movs	r3, #14
 800d0a4:	5ec9      	ldrsh	r1, [r1, r3]
 800d0a6:	0014      	movs	r4, r2
 800d0a8:	b096      	sub	sp, #88	@ 0x58
 800d0aa:	2900      	cmp	r1, #0
 800d0ac:	da0c      	bge.n	800d0c8 <__swhatbuf_r+0x2c>
 800d0ae:	89b2      	ldrh	r2, [r6, #12]
 800d0b0:	2380      	movs	r3, #128	@ 0x80
 800d0b2:	0011      	movs	r1, r2
 800d0b4:	4019      	ands	r1, r3
 800d0b6:	421a      	tst	r2, r3
 800d0b8:	d114      	bne.n	800d0e4 <__swhatbuf_r+0x48>
 800d0ba:	2380      	movs	r3, #128	@ 0x80
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	2000      	movs	r0, #0
 800d0c0:	6029      	str	r1, [r5, #0]
 800d0c2:	6023      	str	r3, [r4, #0]
 800d0c4:	b016      	add	sp, #88	@ 0x58
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	466a      	mov	r2, sp
 800d0ca:	f000 f853 	bl	800d174 <_fstat_r>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	dbed      	blt.n	800d0ae <__swhatbuf_r+0x12>
 800d0d2:	23f0      	movs	r3, #240	@ 0xf0
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	4019      	ands	r1, r3
 800d0da:	4b04      	ldr	r3, [pc, #16]	@ (800d0ec <__swhatbuf_r+0x50>)
 800d0dc:	18c9      	adds	r1, r1, r3
 800d0de:	424b      	negs	r3, r1
 800d0e0:	4159      	adcs	r1, r3
 800d0e2:	e7ea      	b.n	800d0ba <__swhatbuf_r+0x1e>
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	2340      	movs	r3, #64	@ 0x40
 800d0e8:	e7e9      	b.n	800d0be <__swhatbuf_r+0x22>
 800d0ea:	46c0      	nop			@ (mov r8, r8)
 800d0ec:	ffffe000 	.word	0xffffe000

0800d0f0 <__smakebuf_r>:
 800d0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0f2:	2602      	movs	r6, #2
 800d0f4:	898b      	ldrh	r3, [r1, #12]
 800d0f6:	0005      	movs	r5, r0
 800d0f8:	000c      	movs	r4, r1
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	4233      	tst	r3, r6
 800d0fe:	d007      	beq.n	800d110 <__smakebuf_r+0x20>
 800d100:	0023      	movs	r3, r4
 800d102:	3347      	adds	r3, #71	@ 0x47
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	6123      	str	r3, [r4, #16]
 800d108:	2301      	movs	r3, #1
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	b005      	add	sp, #20
 800d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d110:	ab03      	add	r3, sp, #12
 800d112:	aa02      	add	r2, sp, #8
 800d114:	f7ff ffc2 	bl	800d09c <__swhatbuf_r>
 800d118:	9f02      	ldr	r7, [sp, #8]
 800d11a:	9001      	str	r0, [sp, #4]
 800d11c:	0039      	movs	r1, r7
 800d11e:	0028      	movs	r0, r5
 800d120:	f7fe fe6c 	bl	800bdfc <_malloc_r>
 800d124:	2800      	cmp	r0, #0
 800d126:	d108      	bne.n	800d13a <__smakebuf_r+0x4a>
 800d128:	220c      	movs	r2, #12
 800d12a:	5ea3      	ldrsh	r3, [r4, r2]
 800d12c:	059a      	lsls	r2, r3, #22
 800d12e:	d4ed      	bmi.n	800d10c <__smakebuf_r+0x1c>
 800d130:	2203      	movs	r2, #3
 800d132:	4393      	bics	r3, r2
 800d134:	431e      	orrs	r6, r3
 800d136:	81a6      	strh	r6, [r4, #12]
 800d138:	e7e2      	b.n	800d100 <__smakebuf_r+0x10>
 800d13a:	2380      	movs	r3, #128	@ 0x80
 800d13c:	89a2      	ldrh	r2, [r4, #12]
 800d13e:	6020      	str	r0, [r4, #0]
 800d140:	4313      	orrs	r3, r2
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	6120      	str	r0, [r4, #16]
 800d148:	6167      	str	r7, [r4, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00c      	beq.n	800d168 <__smakebuf_r+0x78>
 800d14e:	0028      	movs	r0, r5
 800d150:	230e      	movs	r3, #14
 800d152:	5ee1      	ldrsh	r1, [r4, r3]
 800d154:	f000 f820 	bl	800d198 <_isatty_r>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d005      	beq.n	800d168 <__smakebuf_r+0x78>
 800d15c:	2303      	movs	r3, #3
 800d15e:	89a2      	ldrh	r2, [r4, #12]
 800d160:	439a      	bics	r2, r3
 800d162:	3b02      	subs	r3, #2
 800d164:	4313      	orrs	r3, r2
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	9a01      	ldr	r2, [sp, #4]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	81a3      	strh	r3, [r4, #12]
 800d170:	e7cc      	b.n	800d10c <__smakebuf_r+0x1c>
	...

0800d174 <_fstat_r>:
 800d174:	2300      	movs	r3, #0
 800d176:	b570      	push	{r4, r5, r6, lr}
 800d178:	4d06      	ldr	r5, [pc, #24]	@ (800d194 <_fstat_r+0x20>)
 800d17a:	0004      	movs	r4, r0
 800d17c:	0008      	movs	r0, r1
 800d17e:	0011      	movs	r1, r2
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	f7f7 febf 	bl	8004f04 <_fstat>
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	d103      	bne.n	800d192 <_fstat_r+0x1e>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d000      	beq.n	800d192 <_fstat_r+0x1e>
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	bd70      	pop	{r4, r5, r6, pc}
 800d194:	20000698 	.word	0x20000698

0800d198 <_isatty_r>:
 800d198:	2300      	movs	r3, #0
 800d19a:	b570      	push	{r4, r5, r6, lr}
 800d19c:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_isatty_r+0x20>)
 800d19e:	0004      	movs	r4, r0
 800d1a0:	0008      	movs	r0, r1
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	f7f7 febc 	bl	8004f20 <_isatty>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d103      	bne.n	800d1b4 <_isatty_r+0x1c>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d000      	beq.n	800d1b4 <_isatty_r+0x1c>
 800d1b2:	6023      	str	r3, [r4, #0]
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	46c0      	nop			@ (mov r8, r8)
 800d1b8:	20000698 	.word	0x20000698

0800d1bc <_init>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	46c0      	nop			@ (mov r8, r8)
 800d1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1c2:	bc08      	pop	{r3}
 800d1c4:	469e      	mov	lr, r3
 800d1c6:	4770      	bx	lr

0800d1c8 <_fini>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	46c0      	nop			@ (mov r8, r8)
 800d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ce:	bc08      	pop	{r3}
 800d1d0:	469e      	mov	lr, r3
 800d1d2:	4770      	bx	lr
